// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R5545, R5546, R5547, R5548, R5549, R5550, R6, R69, R70, R71, R72, R7223, R7224, R7225, R7226, R7227, R7228, R73, R74, R75, R76, R77, R7727, R7728, R7729, R7730, R7731, R7732, R7733, R7734, R7735, R7736, R7737, R7738, R7739, R7740, R7741, R7742, R7743, R7744, R7745, R7746, R7747, R7748, R7749, R7750, R7751, R7752, R7753, R7754, R7755, R7756, R7757, R7758, R7759, R7760, R7761, R7762, R7763, R7764, R7765, R7766, R7767, R7768, R7769, R7770, R7771, R7772, R7773, R7774, R7775, R7776, R7777, R7778, R7779, R7780, R7781, R7782, R7783, R7784, R7785, R7786, R7787, R7788, R7789, R7790, R7791, R7792, R7793, R7794, R7795, R7796, R7797, R7798, R7799, R78, R7800, R7801, R7802, R7803, R7804, R7805, R7806, R7807, R7808, R7809, R7810, R7811, R7812, R7813, R7814, R7815, R7816, R7817, R7818, R7819, R7820, R7821, R7822, R7823, R7824, R7825, R7826, R7827, R7828, R7829, R7830, R7831, R7832, R7833, R7834, R7835, R7836, R7837, R7838, R7839, R7840, R7841, R7842, R7843, R7844, R7845, R7846, R7847, R7848, R7849, R7850, R7851, R7852, R7853, R7854, R7855, R7856, R7857, R7858, R7859, R7860, R7861, R7862, R7863, R7864, R7865, R7866, R7867, R7868, R7869, R7870, R7871, R7872, R7873, R7874, R7875, R7876, R7877, R7878, R7879, R7880, R7881, R7882, R7883, R7884, R7885, R7886, R7887, R7888, R7889, R7890, R7891, R7892, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R7757 += 1, R7758 += 1 };
  s0 -> s1 [0, 65535] { R7758 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R7758 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R7760 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R7759 += 1, R7760 += 1 };
  s1 -> s1 [0, 65535] { R7760 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R7762 += 1 };
  s0 -> s2 [0, 65535] { R7762 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R7761 += 1, R7762 += 1 };
  s0 -> s1 [90, 65535] { R7762 += 1 };
  s1 -> s1 [0, 88] { R7762 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R7762 += 1 };
  s2 -> s1 [0, 88] { R7762 += 1 };
  s2 -> s2 [0, 65535] { R7762 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R7762 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R7764 += 1 };
  s0 -> s2 [0, 65535] { R7764 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R7763 += 1, R7764 += 1 };
  s0 -> s1 [74, 65535] { R7764 += 1 };
  s1 -> s1 [0, 72] { R7764 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R7764 += 1 };
  s2 -> s1 [0, 72] { R7764 += 1 };
  s2 -> s2 [0, 65535] { R7764 += 1, R74 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R7764 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R7766 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R7765 += 1, R7766 += 1 };
  s0 -> s2 [0, 65535] { R7766 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7766 += 1, R79 += 1, R80 += 1 };
  s1 -> s4 [0, 65535] { R7766 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7766 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R7766 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7766 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R7768 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R7767 += 1, R7768 += 1 };
  s0 -> s2 [108, 108] { R7768 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R7768 += 1, R83 += 1, R84 += 1 };
  s1 -> s2 [108, 108] { R7768 += 1, R84 += 1 };
  s2 -> s3 [111, 111] { R7768 += 1, R84 += 1 };
  s3 -> s4 [99, 99] { R7768 += 1, R84 += 1 };
  s4 -> s5 [97, 97] { R7768 += 1, R84 += 1 };
  s5 -> s6 [108, 108] { R7768 += 1, R84 += 1 };
  s6 -> s7 [104, 104] { R7768 += 1, R84 += 1 };
  s7 -> s8 [111, 111] { R7768 += 1, R84 += 1 };
  s8 -> s9 [115, 115] { R7768 += 1, R84 += 1 };
  s9 -> s10 [116, 116] { R7768 += 1, R84 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R7768 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R7770 += 1, R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R7770 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R7769 += 1, R7770 += 1 };
  s1 -> s4 [0, 65535] { R7770 += 1 };
  s1 -> s1 [0, 65535] { R7770 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7770 += 1, R89 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7770 += 1, R88 += 1, R89 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7770 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R7772 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R7771 += 1, R7772 += 1 };
  s0 -> s2 [0, 65535] { R7772 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [108, 108] { R7772 += 1, R94 += 1 };
  s0 -> s1 [109, 65535] { R7772 += 1, R94 += 1 };
  s1 -> s13 [0, 65535] { R7772 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7772 += 1, R94 += 1 };
  s2 -> s1 [0, 107] { R7772 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7772 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [108, 108] { R7772 += 1, R94 += 1 };
  s2 -> s1 [109, 65535] { R7772 += 1, R94 += 1 };
  s3 -> s1 [0, 110] { R7772 += 1, R94 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7772 += 1 };
  s3 -> s5 [111, 111] { R7772 += 1, R94 += 1 };
  s3 -> s1 [112, 65535] { R7772 += 1, R94 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7772 += 1, R94 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7772 += 1 };
  s5 -> s6 [99, 99] { R7772 += 1, R94 += 1 };
  s5 -> s1 [100, 65535] { R7772 += 1, R94 += 1 };
  s6 -> s1 [0, 96] { R7772 += 1, R94 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7772 += 1 };
  s6 -> s7 [97, 97] { R7772 += 1, R94 += 1 };
  s6 -> s1 [98, 65535] { R7772 += 1, R94 += 1 };
  s7 -> s1 [0, 107] { R7772 += 1, R94 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R7772 += 1 };
  s7 -> s8 [108, 108] { R7772 += 1, R94 += 1 };
  s7 -> s1 [109, 65535] { R7772 += 1, R94 += 1 };
  s8 -> s1 [0, 103] { R7772 += 1, R94 += 1 };
  s8 -> s8 [0, 65535] { R7772 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R7772 += 1, R94 += 1 };
  s8 -> s1 [105, 65535] { R7772 += 1, R94 += 1 };
  s9 -> s1 [0, 110] { R7772 += 1, R94 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R7772 += 1 };
  s9 -> s10 [111, 111] { R7772 += 1, R94 += 1 };
  s9 -> s1 [112, 65535] { R7772 += 1, R94 += 1 };
  s10 -> s1 [0, 114] { R7772 += 1, R94 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R7772 += 1 };
  s10 -> s11 [115, 115] { R7772 += 1, R94 += 1 };
  s10 -> s1 [116, 65535] { R7772 += 1, R94 += 1 };
  s11 -> s1 [0, 115] { R7772 += 1, R94 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R7772 += 1 };
  s11 -> s12 [116, 116] { R7772 += 1, R94 += 1 };
  s11 -> s1 [117, 65535] { R7772 += 1, R94 += 1 };
  s12 -> s1 [0, 65535] { R7772 += 1, R94 += 1 };
  s13 -> s13 [0, 65535] { R7772 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R7774 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R7774 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R7773 += 1, R7774 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7774 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R7774 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R7774 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7774 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535] { R7774 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R7776 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R7776 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R7775 += 1, R7776 += 1 };
  s1 -> s1 [0, 65535] { R7776 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R7776 += 1, R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7776 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535] { R7776 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7776 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R7777 += 1, R7778 += 1 };
  s0 -> s1 [0, 65535] { R7778 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7778 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7780 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R7779 += 1, R7780 += 1 };
  s0 -> s2 [0, 65535] { R7780 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R7780 += 1, R110 += 1, R111 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7780 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535] { R7780 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7780 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535] { R7780 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7782 += 1 };
  s0 -> s0 [0, 65535] { R7781 += 1, R7782 += 1 };
  s1 -> s1 [0, 65535] { R7782 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R7784 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R7783 += 1, R7784 += 1 };
  s0 -> s2 [0, 65535] { R7784 += 1, R116 += 1, R117 += 1 };
  s0 -> s3 [73, 73] { R7784 += 1, R117 += 1, R118 += 1 };
  s0 -> s4 [73, 73] { R7784 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [74, 65535] { R7784 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 72] { R7784 += 1, R117 += 1, R118 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7784 += 1 };
  s1 -> s3 [73, 73] { R7784 += 1, R117 += 1, R118 += 1 };
  s1 -> s4 [73, 73] { R7784 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [74, 65535] { R7784 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [0, 72] { R7784 += 1, R117 += 1, R118 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7784 += 1, R116 += 1, R117 += 1 };
  s2 -> s3 [73, 73] { R7784 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [73, 73] { R7784 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [74, 65535] { R7784 += 1, R117 += 1, R118 += 1 };
  s3 -> s6 [0, 65535] { R7784 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7784 += 1, R117 += 1, R118 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7784 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7784 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R7807 += 1, R7808 += 1 };
  s0 -> s1 [0, 65535] { R7808 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7808 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R7810 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R7809 += 1, R7810 += 1 };
  s0 -> s2 [65, 65] { R7810 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R7810 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R7810 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R7810 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7810 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R7810 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R7810 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7810 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R7812 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R7811 += 1, R7812 += 1 };
  s0 -> s2 [65, 65] { R7812 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R7812 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R7812 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R7812 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7812 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R7812 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R7812 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7812 += 1, R71 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R7814 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R7813 += 1, R7814 += 1 };
  s0 -> s2 [65, 65] { R7814 += 1, R73 += 1 };
  s0 -> s3 [65, 65] { R7814 += 1, R73 += 1 };
  s0 -> s1 [66, 65535] { R7814 += 1, R73 += 1 };
  s1 -> s1 [0, 64] { R7814 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7814 += 1, R73 += 1 };
  s1 -> s3 [65, 65] { R7814 += 1, R73 += 1 };
  s1 -> s1 [66, 65535] { R7814 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R7814 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R7816 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R7815 += 1, R7816 += 1 };
  s0 -> s2 [65, 65] { R7816 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [65, 65] { R7816 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [66, 65535] { R7816 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 64] { R7816 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7816 += 1, R75 += 1, R76 += 1 };
  s1 -> s3 [65, 65] { R7816 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [66, 65535] { R7816 += 1, R75 += 1, R76 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7816 += 1, R75 += 1, R76 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R7818 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R7817 += 1, R7818 += 1 };
  s0 -> s2 [65, 65] { R7818 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [65, 65] { R7818 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R7818 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R7818 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7818 += 1, R81 += 1, R82 += 1 };
  s1 -> s3 [65, 65] { R7818 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R7818 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R7818 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R7820 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R7819 += 1, R7820 += 1 };
  s0 -> s2 [65, 65] { R7820 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R7820 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R7820 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R7820 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7820 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R7820 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R7820 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535] { R7820 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R7822 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R7821 += 1, R7822 += 1 };
  s0 -> s2 [65, 65] { R7822 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R7822 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R7822 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R7822 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7822 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R7822 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R7822 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7822 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R7824 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R7823 += 1, R7824 += 1 };
  s0 -> s2 [65, 65] { R7824 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R7824 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R7824 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R7824 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7824 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R7824 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R7824 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7824 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R7826 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R7825 += 1, R7826 += 1 };
  s0 -> s2 [65, 65] { R7826 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R7826 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R7826 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R7826 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7826 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R7826 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R7826 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7826 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R7828 += 1 };
  s0 -> s0 [0, 65535] { R7827 += 1, R7828 += 1 };
  s0 -> s2 [65, 65] { R7828 += 1 };
  s0 -> s3 [65, 65] { R7828 += 1 };
  s0 -> s1 [66, 65535] { R7828 += 1 };
  s1 -> s1 [0, 64] { R7828 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7828 += 1 };
  s1 -> s3 [65, 65] { R7828 += 1 };
  s1 -> s1 [66, 65535] { R7828 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7828 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R7830 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R7829 += 1, R7830 += 1 };
  s0 -> s2 [65, 65] { R7830 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R7830 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R7830 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R7830 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7830 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R7830 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R7830 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R7830 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R7832 += 1 };
  s0 -> s0 [0, 65535] { R7831 += 1, R7832 += 1 };
  s0 -> s2 [65, 65] { R7832 += 1 };
  s0 -> s3 [65, 65] { R7832 += 1 };
  s0 -> s1 [66, 65535] { R7832 += 1 };
  s1 -> s1 [0, 64] { R7832 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7832 += 1 };
  s1 -> s3 [65, 65] { R7832 += 1 };
  s1 -> s1 [66, 65535] { R7832 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7832 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R7834 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R7833 += 1, R7834 += 1 };
  s0 -> s2 [65, 65] { R7834 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R7834 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R7834 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R7834 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7834 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R7834 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R7834 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7834 += 1, R113 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R7836 += 1 };
  s0 -> s0 [0, 65535] { R7835 += 1, R7836 += 1 };
  s0 -> s1 [45, 45] { R7836 += 1 };
  s0 -> s2 [46, 46] { R7836 += 1 };
  s0 -> s1 [48, 62] { R7836 += 1 };
  s0 -> s3 [65, 65] { R7836 += 1 };
  s0 -> s1 [66, 65535] { R7836 += 1 };
  s1 -> s1 [0, 43] { R7836 += 1 };
  s1 -> s1 [45, 45] { R7836 += 1 };
  s1 -> s2 [46, 46] { R7836 += 1 };
  s1 -> s1 [48, 62] { R7836 += 1 };
  s1 -> s3 [65, 65] { R7836 += 1 };
  s1 -> s1 [66, 65535] { R7836 += 1 };
  s2 -> s1 [0, 43] { R7836 += 1 };
  s2 -> s1 [45, 45] { R7836 += 1 };
  s2 -> s2 [46, 46] { R7836 += 1 };
  s2 -> s1 [48, 62] { R7836 += 1 };
  s2 -> s3 [65, 65] { R7836 += 1 };
  s2 -> s1 [66, 114] { R7836 += 1 };
  s2 -> s8 [115, 115] { R7836 += 1 };
  s2 -> s1 [116, 65535] { R7836 += 1 };
  s3 -> s3 [0, 43] { R7836 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7836 += 1 };
  s3 -> s4 [46, 46] { R7836 += 1 };
  s3 -> s3 [48, 62] { R7836 += 1 };
  s3 -> s3 [65, 65535] { R7836 += 1 };
  s4 -> s3 [0, 43] { R7836 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7836 += 1 };
  s4 -> s4 [46, 46] { R7836 += 1 };
  s4 -> s3 [48, 62] { R7836 += 1 };
  s4 -> s3 [65, 114] { R7836 += 1 };
  s4 -> s5 [115, 115] { R7836 += 1 };
  s4 -> s3 [116, 65535] { R7836 += 1 };
  s5 -> s3 [0, 43] { R7836 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7836 += 1 };
  s5 -> s4 [46, 46] { R7836 += 1 };
  s5 -> s3 [48, 62] { R7836 += 1 };
  s5 -> s3 [65, 110] { R7836 += 1 };
  s5 -> s6 [111, 111] { R7836 += 1 };
  s5 -> s3 [112, 65535] { R7836 += 1 };
  s6 -> s3 [0, 43] { R7836 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7836 += 1 };
  s6 -> s4 [46, 46] { R7836 += 1 };
  s6 -> s3 [48, 62] { R7836 += 1 };
  s6 -> s3 [65, 98] { R7836 += 1 };
  s6 -> s7 [99, 99] { R7836 += 1 };
  s6 -> s3 [100, 65535] { R7836 += 1 };
  s7 -> s3 [0, 43] { R7836 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7836 += 1 };
  s7 -> s4 [46, 46] { R7836 += 1 };
  s7 -> s3 [48, 62] { R7836 += 1 };
  s7 -> s3 [65, 106] { R7836 += 1 };
  s7 -> s3 [108, 65535] { R7836 += 1 };
  s8 -> s1 [0, 43] { R7836 += 1 };
  s8 -> s1 [45, 45] { R7836 += 1 };
  s8 -> s2 [46, 46] { R7836 += 1 };
  s8 -> s1 [48, 62] { R7836 += 1 };
  s8 -> s3 [65, 65] { R7836 += 1 };
  s8 -> s1 [66, 110] { R7836 += 1 };
  s8 -> s9 [111, 111] { R7836 += 1 };
  s8 -> s1 [112, 65535] { R7836 += 1 };
  s9 -> s1 [0, 43] { R7836 += 1 };
  s9 -> s1 [45, 45] { R7836 += 1 };
  s9 -> s2 [46, 46] { R7836 += 1 };
  s9 -> s1 [48, 62] { R7836 += 1 };
  s9 -> s3 [65, 65] { R7836 += 1 };
  s9 -> s1 [66, 98] { R7836 += 1 };
  s9 -> s10 [99, 99] { R7836 += 1 };
  s9 -> s1 [100, 65535] { R7836 += 1 };
  s10 -> s1 [0, 43] { R7836 += 1 };
  s10 -> s1 [45, 45] { R7836 += 1 };
  s10 -> s2 [46, 46] { R7836 += 1 };
  s10 -> s1 [48, 62] { R7836 += 1 };
  s10 -> s3 [65, 65] { R7836 += 1 };
  s10 -> s1 [66, 106] { R7836 += 1 };
  s10 -> s1 [108, 65535] { R7836 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R7838 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R7837 += 1, R7838 += 1 };
  s1 -> s1 [0, 65535] { R7838 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R7840 += 1 };
  s0 -> s2 [0, 65535] { R7840 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R7839 += 1, R7840 += 1 };
  s0 -> s3 [58, 58] { R7840 += 1 };
  s0 -> s1 [59, 65535] { R7840 += 1 };
  s1 -> s1 [0, 57] { R7840 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7840 += 1 };
  s1 -> s1 [59, 65535] { R7840 += 1 };
  s2 -> s1 [0, 57] { R7840 += 1 };
  s2 -> s2 [0, 65535] { R7840 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7840 += 1 };
  s2 -> s1 [59, 65535] { R7840 += 1 };
  s3 -> s3 [0, 65535] { R7840 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R7842 += 1 };
  s0 -> s2 [0, 65535] { R7842 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R7841 += 1, R7842 += 1 };
  s0 -> s3 [65, 65] { R7842 += 1 };
  s0 -> s1 [66, 65535] { R7842 += 1 };
  s1 -> s1 [0, 64] { R7842 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7842 += 1 };
  s1 -> s1 [66, 65535] { R7842 += 1 };
  s2 -> s1 [0, 64] { R7842 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7842 += 1, R17 += 1 };
  s2 -> s3 [65, 65] { R7842 += 1 };
  s2 -> s1 [66, 65535] { R7842 += 1 };
  s3 -> s3 [0, 65535] { R7842 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R7844 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R7843 += 1, R7844 += 1 };
  s0 -> s2 [0, 65535] { R7844 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [91, 91] { R7844 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R7844 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7844 += 1 };
  s1 -> s1 [0, 65535] { R7844 += 1, R34 += 1 };
  s2 -> s1 [0, 90] { R7844 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7844 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [91, 91] { R7844 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R7844 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R7844 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7844 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R7846 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R7845 += 1, R7846 += 1 };
  s0 -> s2 [0, 65535] { R7846 += 1, R36 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R7846 += 1, R35 += 1, R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7846 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7846 += 1 };
  s2 -> s2 [0, 65535] { R7846 += 1, R36 += 1, R6 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7846 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R7848 += 1, R7734 += 1 };
  s0 -> s0 [0, 65535] { R7847 += 1, R7848 += 1 };
  s0 -> s2 [0, 65535] { R7848 += 1, R7733 += 1, R7734 += 1 };
  s0 -> s1 [66, 65535] { R7848 += 1, R7734 += 1 };
  s1 -> s1 [0, 64] { R7848 += 1, R7734 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7848 += 1 };
  s1 -> s1 [66, 65535] { R7848 += 1, R7734 += 1 };
  s2 -> s1 [0, 64] { R7848 += 1, R7734 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7848 += 1, R7733 += 1, R7734 += 1 };
  s2 -> s1 [66, 65535] { R7848 += 1, R7734 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R7849 += 1, R7850 += 1 };
  s0 -> s1 [0, 65535] { R7850 += 1, R7735 += 1, R7736 += 1 };
  s0 -> s2 [0, 65535] { R7850 += 1, R7736 += 1, R29 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7850 += 1, R7735 += 1, R7736 += 1 };
  s1 -> s2 [0, 65535] { R7850 += 1, R7736 += 1, R29 += 1 };
  s2 -> s3 [0, 65535] { R7850 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7850 += 1, R7736 += 1, R29 += 1 };
  s3 -> s3 [0, 65535] { R7850 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R7852 += 1, R7738 += 1 };
  s0 -> s2 [0, 65535] { R7852 += 1, R7737 += 1, R7738 += 1 };
  s0 -> s0 [0, 65535] { R7851 += 1, R7852 += 1 };
  s0 -> s1 [81, 65535] { R7852 += 1, R7738 += 1 };
  s1 -> s1 [0, 65] { R7852 += 1, R7738 += 1 };
  s1 -> s1 [0, 65535] { R7852 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R7852 += 1, R7738 += 1 };
  s2 -> s1 [0, 65] { R7852 += 1, R7738 += 1 };
  s2 -> s2 [0, 65535] { R7852 += 1, R7737 += 1, R7738 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R7852 += 1, R7738 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R7854 += 1, R7739 += 1, R7740 += 1 };
  s0 -> s2 [0, 65535] { R7854 += 1, R7740 += 1, R500 += 1 };
  s0 -> s0 [0, 65535] { R7853 += 1, R7854 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7854 += 1, R7739 += 1, R7740 += 1 };
  s1 -> s2 [0, 65535] { R7854 += 1, R7740 += 1, R500 += 1 };
  s2 -> s3 [0, 65535] { R7854 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7854 += 1, R7740 += 1, R500 += 1 };
  s3 -> s3 [0, 65535] { R7854 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R7856 += 1, R7742 += 1 };
  s0 -> s2 [0, 65535] { R7856 += 1, R7742 += 1, R502 += 1 };
  s0 -> s3 [0, 65535] { R7856 += 1, R7741 += 1, R7742 += 1 };
  s0 -> s0 [0, 65535] { R7855 += 1, R7856 += 1 };
  s0 -> s1 [82, 65535] { R7856 += 1, R7742 += 1 };
  s1 -> s1 [0, 80] { R7856 += 1, R7742 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7856 += 1 };
  s1 -> s1 [82, 65535] { R7856 += 1, R7742 += 1 };
  s2 -> s1 [0, 80] { R7856 += 1, R7742 += 1 };
  s2 -> s2 [0, 65535] { R7856 += 1, R7742 += 1, R502 += 1 };
  s2 -> s5 [0, 65535] { R7856 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R7856 += 1, R7742 += 1 };
  s3 -> s1 [0, 80] { R7856 += 1, R7742 += 1 };
  s3 -> s2 [0, 65535] { R7856 += 1, R7742 += 1, R502 += 1 };
  s3 -> s3 [0, 65535] { R7856 += 1, R7741 += 1, R7742 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R7856 += 1, R7742 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7856 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R7858 += 1, R7744 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R7857 += 1, R7858 += 1 };
  s0 -> s2 [0, 65535] { R7858 += 1, R7743 += 1, R7744 += 1 };
  s0 -> s3 [0, 65535] { R7858 += 1, R7744 += 1, R505 += 1, R506 += 1 };
  s0 -> s1 [82, 65535] { R7858 += 1, R7744 += 1, R506 += 1 };
  s1 -> s1 [0, 80] { R7858 += 1, R7744 += 1, R506 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7858 += 1, R7744 += 1 };
  s1 -> s5 [0, 65535] { R7858 += 1 };
  s1 -> s1 [82, 65535] { R7858 += 1, R7744 += 1, R506 += 1 };
  s2 -> s1 [0, 80] { R7858 += 1, R7744 += 1, R506 += 1 };
  s2 -> s2 [0, 65535] { R7858 += 1, R7743 += 1, R7744 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7858 += 1, R7744 += 1, R505 += 1, R506 += 1 };
  s2 -> s1 [82, 65535] { R7858 += 1, R7744 += 1, R506 += 1 };
  s3 -> s1 [0, 80] { R7858 += 1, R7744 += 1, R506 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7858 += 1, R7744 += 1, R505 += 1, R506 += 1 };
  s3 -> s5 [0, 65535] { R7858 += 1 };
  s3 -> s1 [82, 65535] { R7858 += 1, R7744 += 1, R506 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7858 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R7860 += 1, R7745 += 1, R7746 += 1 };
  s0 -> s2 [0, 65535] { R7860 += 1, R7746 += 1, R511 += 1, R512 += 1 };
  s0 -> s0 [0, 65535] { R7859 += 1, R7860 += 1 };
  s0 -> s3 [0, 65535] { R7860 += 1, R7746 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535] { R7860 += 1, R7745 += 1, R7746 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7860 += 1, R7746 += 1, R511 += 1, R512 += 1 };
  s1 -> s3 [0, 65535] { R7860 += 1, R7746 += 1, R510 += 1, R511 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7860 += 1 };
  s2 -> s6 [0, 65535] { R7860 += 1, R7746 += 1 };
  s2 -> s2 [0, 65535] { R7860 += 1, R7746 += 1, R511 += 1, R512 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7860 += 1 };
  s3 -> s2 [0, 65535] { R7860 += 1, R7746 += 1, R511 += 1, R512 += 1 };
  s3 -> s3 [0, 65535] { R7860 += 1, R7746 += 1, R510 += 1, R511 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7860 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7860 += 1 };
  s6 -> s6 [0, 65535] { R7860 += 1, R7746 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R7862 += 1, R7747 += 1, R7748 += 1 };
  s0 -> s3 [0, 65535] { R7862 += 1, R7748 += 1, R515 += 1, R516 += 1 };
  s0 -> s0 [0, 65535] { R7861 += 1, R7862 += 1 };
  s0 -> s1 [91, 107] { R7862 += 1, R7748 += 1, R516 += 1 };
  s0 -> s4 [108, 108] { R7862 += 1, R7748 += 1, R516 += 1 };
  s0 -> s1 [109, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s1 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7862 += 1 };
  s1 -> s1 [0, 65535] { R7862 += 1, R7748 += 1 };
  s1 -> s1 [91, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s2 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7862 += 1, R7747 += 1, R7748 += 1 };
  s2 -> s3 [0, 65535] { R7862 += 1, R7748 += 1, R515 += 1, R516 += 1 };
  s2 -> s1 [91, 107] { R7862 += 1, R7748 += 1, R516 += 1 };
  s2 -> s4 [108, 108] { R7862 += 1, R7748 += 1, R516 += 1 };
  s2 -> s1 [109, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s3 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7862 += 1, R7748 += 1, R515 += 1, R516 += 1 };
  s3 -> s6 [0, 65535] { R7862 += 1 };
  s3 -> s1 [91, 107] { R7862 += 1, R7748 += 1, R516 += 1 };
  s3 -> s4 [108, 108] { R7862 += 1, R7748 += 1, R516 += 1 };
  s3 -> s1 [109, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s4 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7862 += 1, R7748 += 1 };
  s4 -> s6 [0, 65535] { R7862 += 1 };
  s4 -> s1 [91, 110] { R7862 += 1, R7748 += 1, R516 += 1 };
  s4 -> s7 [111, 111] { R7862 += 1, R7748 += 1, R516 += 1 };
  s4 -> s1 [112, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7862 += 1 };
  s7 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R7862 += 1, R7748 += 1 };
  s7 -> s6 [0, 65535] { R7862 += 1 };
  s7 -> s1 [91, 98] { R7862 += 1, R7748 += 1, R516 += 1 };
  s7 -> s8 [99, 99] { R7862 += 1, R7748 += 1, R516 += 1 };
  s7 -> s1 [100, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s8 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R7862 += 1, R7748 += 1 };
  s8 -> s6 [0, 65535] { R7862 += 1 };
  s8 -> s1 [91, 96] { R7862 += 1, R7748 += 1, R516 += 1 };
  s8 -> s9 [97, 97] { R7862 += 1, R7748 += 1, R516 += 1 };
  s8 -> s1 [98, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s9 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R7862 += 1, R7748 += 1 };
  s9 -> s6 [0, 65535] { R7862 += 1 };
  s9 -> s1 [91, 107] { R7862 += 1, R7748 += 1, R516 += 1 };
  s9 -> s10 [108, 108] { R7862 += 1, R7748 += 1, R516 += 1 };
  s9 -> s1 [109, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s10 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R7862 += 1 };
  s10 -> s10 [0, 65535] { R7862 += 1, R7748 += 1 };
  s10 -> s1 [91, 103] { R7862 += 1, R7748 += 1, R516 += 1 };
  s10 -> s11 [104, 104] { R7862 += 1, R7748 += 1, R516 += 1 };
  s10 -> s1 [105, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s11 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R7862 += 1, R7748 += 1 };
  s11 -> s6 [0, 65535] { R7862 += 1 };
  s11 -> s1 [91, 110] { R7862 += 1, R7748 += 1, R516 += 1 };
  s11 -> s12 [111, 111] { R7862 += 1, R7748 += 1, R516 += 1 };
  s11 -> s1 [112, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s12 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R7862 += 1, R7748 += 1 };
  s12 -> s6 [0, 65535] { R7862 += 1 };
  s12 -> s1 [91, 114] { R7862 += 1, R7748 += 1, R516 += 1 };
  s12 -> s13 [115, 115] { R7862 += 1, R7748 += 1, R516 += 1 };
  s12 -> s1 [116, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s13 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R7862 += 1, R7748 += 1 };
  s13 -> s6 [0, 65535] { R7862 += 1 };
  s13 -> s1 [91, 115] { R7862 += 1, R7748 += 1, R516 += 1 };
  s13 -> s14 [116, 116] { R7862 += 1, R7748 += 1, R516 += 1 };
  s13 -> s1 [117, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  s14 -> s1 [0, 81] { R7862 += 1, R7748 += 1, R516 += 1 };
  s14 -> s1 [91, 65535] { R7862 += 1, R7748 += 1, R516 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R7863 += 1, R7864 += 1 };
  s0 -> s1 [0, 65535] { R7864 += 1, R7749 += 1, R7750 += 1 };
  s0 -> s2 [0, 65535] { R7864 += 1, R7750 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7864 += 1, R7749 += 1, R7750 += 1 };
  s1 -> s2 [0, 65535] { R7864 += 1, R7750 += 1 };
  s2 -> s3 [0, 65535] { R7864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7864 += 1, R7750 += 1 };
  s3 -> s3 [0, 65535] { R7864 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R7866 += 1, R7751 += 1, R7752 += 1 };
  s0 -> s0 [0, 65535] { R7865 += 1, R7866 += 1 };
  s0 -> s2 [0, 65535] { R7866 += 1, R7752 += 1 };
  s1 -> s1 [0, 65535] { R7866 += 1, R7751 += 1, R7752 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7866 += 1, R7752 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7866 += 1 };
  s2 -> s2 [0, 65535] { R7866 += 1, R7752 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7866 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R7867 += 1, R7868 += 1 };
  s0 -> s1 [0, 65535] { R7868 += 1, R7754 += 1 };
  s0 -> s2 [0, 65535] { R7868 += 1, R7753 += 1, R7754 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7868 += 1, R7754 += 1 };
  s1 -> s4 [0, 65535] { R7868 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7868 += 1, R7754 += 1 };
  s2 -> s2 [0, 65535] { R7868 += 1, R7753 += 1, R7754 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7868 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R7870 += 1, R7756 += 1 };
  s0 -> s2 [0, 65535] { R7870 += 1, R7756 += 1, R7731 += 1, R7732 += 1 };
  s0 -> s0 [0, 65535] { R7869 += 1, R7870 += 1 };
  s0 -> s3 [0, 65535] { R7870 += 1, R7755 += 1, R7756 += 1 };
  s1 -> s1 [0, 65535] { R7870 += 1, R7756 += 1 };
  s1 -> s5 [0, 65535] { R7870 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7870 += 1, R7756 += 1 };
  s2 -> s2 [0, 65535] { R7870 += 1, R7756 += 1, R7731 += 1, R7732 += 1 };
  s2 -> s5 [0, 65535] { R7870 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7870 += 1, R7756 += 1 };
  s3 -> s2 [0, 65535] { R7870 += 1, R7756 += 1, R7731 += 1, R7732 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7870 += 1, R7755 += 1, R7756 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7870 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R7872 += 1, R7786 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R7872 += 1, R7785 += 1, R7786 += 1 };
  s0 -> s0 [0, 65535] { R7871 += 1, R7872 += 1 };
  s1 -> s1 [0, 65535] { R7872 += 1, R7786 += 1, R30 += 1 };
  s1 -> s4 [0, 65535] { R7872 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7872 += 1, R7786 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R7872 += 1, R7785 += 1, R7786 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7872 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R7874 += 1, R7788 += 1 };
  s0 -> s0 [0, 65535] { R7873 += 1, R7874 += 1 };
  s0 -> s2 [0, 65535] { R7874 += 1, R7787 += 1, R7788 += 1 };
  s0 -> s3 [65, 65] { R7874 += 1, R7788 += 1 };
  s0 -> s4 [65, 65] { R7874 += 1, R7788 += 1 };
  s0 -> s5 [81, 81] { R7874 += 1, R7788 += 1 };
  s0 -> s1 [82, 65535] { R7874 += 1, R7788 += 1 };
  s1 -> s1 [0, 64] { R7874 += 1, R7788 += 1 };
  s1 -> s3 [65, 65] { R7874 += 1, R7788 += 1 };
  s1 -> s4 [65, 65] { R7874 += 1, R7788 += 1 };
  s1 -> s5 [81, 81] { R7874 += 1, R7788 += 1 };
  s1 -> s1 [82, 65535] { R7874 += 1, R7788 += 1 };
  s2 -> s1 [0, 64] { R7874 += 1, R7788 += 1 };
  s2 -> s2 [0, 65535] { R7874 += 1, R7787 += 1, R7788 += 1 };
  s2 -> s3 [65, 65] { R7874 += 1, R7788 += 1 };
  s2 -> s4 [65, 65] { R7874 += 1, R7788 += 1 };
  s2 -> s5 [81, 81] { R7874 += 1, R7788 += 1 };
  s2 -> s1 [82, 65535] { R7874 += 1, R7788 += 1 };
  s4 -> s4 [0, 65] { R7874 += 1, R7788 += 1 };
  s4 -> s7 [81, 81] { R7874 += 1, R7788 += 1 };
  s4 -> s4 [82, 65535] { R7874 += 1, R7788 += 1 };
  s5 -> s5 [0, 64] { R7874 += 1, R7788 += 1 };
  s5 -> s5 [0, 65535] { R7874 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R7874 += 1, R7788 += 1 };
  s5 -> s8 [65, 65] { R7874 += 1, R7788 += 1 };
  s5 -> s5 [81, 65535] { R7874 += 1, R7788 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7874 += 1, R7788 += 1 };
  s7 -> s7 [0, 65535] { R7874 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R7874 += 1, R7788 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7874 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R7876 += 1, R7790 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R7875 += 1, R7876 += 1 };
  s0 -> s2 [0, 65535] { R7876 += 1, R7789 += 1, R7790 += 1 };
  s0 -> s3 [65, 65] { R7876 += 1, R7790 += 1, R499 += 1 };
  s0 -> s4 [65, 65] { R7876 += 1, R7790 += 1, R499 += 1 };
  s0 -> s1 [66, 65535] { R7876 += 1, R7790 += 1, R499 += 1 };
  s1 -> s1 [0, 64] { R7876 += 1, R7790 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R7876 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7876 += 1, R7790 += 1, R499 += 1 };
  s1 -> s4 [65, 65] { R7876 += 1, R7790 += 1, R499 += 1 };
  s1 -> s1 [66, 65535] { R7876 += 1, R7790 += 1, R499 += 1 };
  s2 -> s1 [0, 64] { R7876 += 1, R7790 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R7876 += 1, R7789 += 1, R7790 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7876 += 1, R7790 += 1, R499 += 1 };
  s2 -> s4 [65, 65] { R7876 += 1, R7790 += 1, R499 += 1 };
  s2 -> s1 [66, 65535] { R7876 += 1, R7790 += 1, R499 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7876 += 1 };
  s3 -> s3 [0, 65535] { R7876 += 1, R7790 += 1, R499 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7876 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7876 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R7878 += 1, R7792 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R7877 += 1, R7878 += 1 };
  s0 -> s2 [0, 65535] { R7878 += 1, R7791 += 1, R7792 += 1 };
  s0 -> s3 [65, 65] { R7878 += 1, R7792 += 1, R501 += 1 };
  s0 -> s4 [65, 65] { R7878 += 1, R7792 += 1, R501 += 1 };
  s0 -> s1 [66, 65535] { R7878 += 1, R7792 += 1, R501 += 1 };
  s1 -> s1 [0, 64] { R7878 += 1, R7792 += 1, R501 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7878 += 1 };
  s1 -> s3 [65, 65] { R7878 += 1, R7792 += 1, R501 += 1 };
  s1 -> s4 [65, 65] { R7878 += 1, R7792 += 1, R501 += 1 };
  s1 -> s1 [66, 65535] { R7878 += 1, R7792 += 1, R501 += 1 };
  s2 -> s1 [0, 64] { R7878 += 1, R7792 += 1, R501 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7878 += 1, R7791 += 1, R7792 += 1 };
  s2 -> s3 [65, 65] { R7878 += 1, R7792 += 1, R501 += 1 };
  s2 -> s4 [65, 65] { R7878 += 1, R7792 += 1, R501 += 1 };
  s2 -> s1 [66, 65535] { R7878 += 1, R7792 += 1, R501 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7878 += 1, R7792 += 1, R501 += 1 };
  s3 -> s6 [0, 65535] { R7878 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7878 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7878 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s0 -> s0 [0, 65535] { R7879 += 1, R7880 += 1 };
  s0 -> s2 [0, 65535] { R7880 += 1, R7793 += 1, R7794 += 1 };
  s0 -> s3 [65, 65] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s0 -> s4 [65, 65] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s0 -> s1 [66, 65535] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 64] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 65535] { R7880 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s1 -> s4 [65, 65] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [66, 65535] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [0, 64] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7880 += 1, R7793 += 1, R7794 += 1 };
  s2 -> s3 [65, 65] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s2 -> s4 [65, 65] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [66, 65535] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s3 -> s3 [0, 65535] { R7880 += 1, R7794 += 1, R503 += 1, R504 += 1 };
  s3 -> s6 [0, 65535] { R7880 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7880 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7880 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R7881 += 1, R7882 += 1 };
  s0 -> s2 [0, 65535] { R7882 += 1, R7795 += 1, R7796 += 1 };
  s0 -> s3 [65, 65] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s0 -> s4 [65, 65] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [66, 65535] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 64] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R7882 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [65, 65] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [66, 65535] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 64] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7882 += 1, R7795 += 1, R7796 += 1 };
  s2 -> s3 [65, 65] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s2 -> s4 [65, 65] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [66, 65535] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s3 -> s6 [0, 65535] { R7882 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7882 += 1, R7796 += 1, R507 += 1, R508 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7882 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7882 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R7883 += 1, R7884 += 1 };
  s0 -> s2 [0, 65535] { R7884 += 1, R7797 += 1, R7798 += 1 };
  s0 -> s3 [65, 65] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s0 -> s4 [65, 65] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s0 -> s1 [66, 65535] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [0, 64] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7884 += 1 };
  s1 -> s3 [65, 65] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s1 -> s4 [65, 65] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s1 -> s1 [66, 65535] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s2 -> s1 [0, 64] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7884 += 1, R7797 += 1, R7798 += 1 };
  s2 -> s3 [65, 65] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s2 -> s4 [65, 65] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s2 -> s1 [66, 65535] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s3 -> s3 [0, 65535] { R7884 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7884 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7884 += 1, R7798 += 1, R513 += 1, R514 += 1 };
  s5 -> s5 [0, 65535] { R7884 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s0 -> s2 [0, 64] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s0 -> s3 [0, 65535] { R7886 += 1, R7799 += 1, R7800 += 1 };
  s0 -> s0 [0, 65535] { R7885 += 1, R7886 += 1 };
  s0 -> s4 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s0 -> s5 [65, 65] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s0 -> s6 [65, 65] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s0 -> s7 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s0 -> s1 [66, 65535] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s0 -> s2 [66, 65535] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s1 -> s1 [0, 64] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s1 -> s11 [0, 64] { R7886 += 1, R7800 += 1 };
  s1 -> s4 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s1 -> s12 [65, 65] { R7886 += 1, R7800 += 1 };
  s1 -> s8 [65, 65] { R7886 += 1, R7800 += 1 };
  s1 -> s7 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s1 -> s1 [66, 65535] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s1 -> s11 [66, 65535] { R7886 += 1, R7800 += 1 };
  s2 -> s1 [0, 64] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s2 -> s2 [0, 64] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s2 -> s4 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s2 -> s5 [65, 65] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s2 -> s6 [65, 65] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s2 -> s7 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s2 -> s1 [66, 65535] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s2 -> s2 [66, 65535] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s3 -> s1 [0, 64] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s3 -> s2 [0, 64] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s3 -> s3 [0, 65535] { R7886 += 1, R7799 += 1, R7800 += 1 };
  s3 -> s4 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s3 -> s5 [65, 65] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s3 -> s6 [65, 65] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s3 -> s7 [65, 65] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s3 -> s1 [66, 65535] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s3 -> s2 [66, 65535] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s4 -> s4 [0, 65535] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s4 -> s8 [0, 65535] { R7886 += 1, R7800 += 1 };
  s5 -> s4 [0, 65535] { R7886 += 1, R7800 += 1, R5546 += 1, R5547 += 1 };
  s5 -> s5 [0, 65535] { R7886 += 1, R7800 += 1, R5545 += 1, R5546 += 1 };
  s8 -> s9 [0, 65535] { R7886 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R7886 += 1, R7800 += 1 };
  s9 -> s9 [0, 65535] { R7886 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R7886 += 1, R7800 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R7886 += 1 };
  s11 -> s12 [65, 65] { R7886 += 1, R7800 += 1 };
  s11 -> s8 [65, 65] { R7886 += 1, R7800 += 1 };
  s11 -> s11 [66, 65535] { R7886 += 1, R7800 += 1 };
  s12 -> s12 [0, 65535] { R7886 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s0 -> s2 [0, 64] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s0 -> s0 [0, 65535] { R7887 += 1, R7888 += 1 };
  s0 -> s3 [0, 65535] { R7888 += 1, R7801 += 1, R7802 += 1 };
  s0 -> s4 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s0 -> s5 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s0 -> s6 [65, 65] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s0 -> s7 [65, 65] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s0 -> s1 [66, 65535] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s0 -> s2 [66, 65535] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s1 -> s11 [0, 64] { R7888 += 1, R7802 += 1 };
  s1 -> s1 [0, 64] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s1 -> s12 [65, 65] { R7888 += 1, R7802 += 1 };
  s1 -> s4 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s1 -> s5 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s1 -> s8 [65, 65] { R7888 += 1, R7802 += 1 };
  s1 -> s11 [66, 65535] { R7888 += 1, R7802 += 1 };
  s1 -> s1 [66, 65535] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s2 -> s1 [0, 64] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s2 -> s2 [0, 64] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s2 -> s4 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s2 -> s5 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s2 -> s6 [65, 65] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s2 -> s7 [65, 65] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s2 -> s1 [66, 65535] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s2 -> s2 [66, 65535] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s3 -> s1 [0, 64] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s3 -> s2 [0, 64] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s3 -> s3 [0, 65535] { R7888 += 1, R7801 += 1, R7802 += 1 };
  s3 -> s4 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s3 -> s5 [65, 65] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s3 -> s6 [65, 65] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s3 -> s7 [65, 65] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s3 -> s1 [66, 65535] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s3 -> s2 [66, 65535] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s4 -> s4 [0, 65535] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s4 -> s8 [0, 65535] { R7888 += 1, R7802 += 1 };
  s7 -> s4 [0, 65535] { R7888 += 1, R7802 += 1, R7224 += 1, R7225 += 1 };
  s7 -> s7 [0, 65535] { R7888 += 1, R7802 += 1, R7223 += 1, R7224 += 1 };
  s8 -> s8 [0, 65535] { R7888 += 1, R7802 += 1 };
  s8 -> s9 [0, 65535] { R7888 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R7888 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R7888 += 1, R7802 += 1 };
  s11 -> s11 [0, 65535] { R7888 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R7888 += 1, R7802 += 1 };
  s11 -> s8 [65, 65] { R7888 += 1, R7802 += 1 };
  s11 -> s11 [66, 65535] { R7888 += 1, R7802 += 1 };
  s12 -> s12 [0, 65535] { R7888 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R7890 += 1, R7804 += 1 };
  s0 -> s2 [0, 65535] { R7890 += 1, R7803 += 1, R7804 += 1 };
  s0 -> s0 [0, 65535] { R7889 += 1, R7890 += 1 };
  s0 -> s3 [65, 65] { R7890 += 1, R7804 += 1 };
  s0 -> s4 [65, 65] { R7890 += 1, R7804 += 1 };
  s0 -> s1 [66, 65535] { R7890 += 1, R7804 += 1 };
  s1 -> s1 [0, 64] { R7890 += 1, R7804 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7890 += 1 };
  s1 -> s3 [65, 65] { R7890 += 1, R7804 += 1 };
  s1 -> s4 [65, 65] { R7890 += 1, R7804 += 1 };
  s1 -> s1 [66, 65535] { R7890 += 1, R7804 += 1 };
  s2 -> s1 [0, 64] { R7890 += 1, R7804 += 1 };
  s2 -> s2 [0, 65535] { R7890 += 1, R7803 += 1, R7804 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7890 += 1, R7804 += 1 };
  s2 -> s4 [65, 65] { R7890 += 1, R7804 += 1 };
  s2 -> s1 [66, 65535] { R7890 += 1, R7804 += 1 };
  s3 -> s3 [0, 65535] { R7890 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7890 += 1 };
  s4 -> s4 [0, 65535] { R7890 += 1, R7804 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7890 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s2 [0, 64] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s3 [0, 65535] { R7892 += 1, R7805 += 1, R7806 += 1 };
  s0 -> s0 [0, 65535] { R7891 += 1, R7892 += 1 };
  s0 -> s4 [65, 65] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s5 [65, 65] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s6 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s7 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s1 [66, 80] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s2 [66, 65535] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s8 [81, 81] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s1 [82, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s1 [0, 64] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s6 [65, 65] { R7892 += 1, R7806 += 1 };
  s1 -> s7 [65, 65] { R7892 += 1, R7806 += 1 };
  s1 -> s1 [66, 80] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s1 [66, 65535] { R7892 += 1, R7806 += 1 };
  s1 -> s8 [81, 81] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s1 [82, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s1 [0, 64] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s2 [0, 64] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s4 [65, 65] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s5 [65, 65] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s6 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s7 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s1 [66, 80] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s2 [66, 65535] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s8 [81, 81] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s1 [82, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s1 [0, 64] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s2 [0, 64] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s3 [0, 65535] { R7892 += 1, R7805 += 1, R7806 += 1 };
  s3 -> s4 [65, 65] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s5 [65, 65] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s6 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s7 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s1 [66, 80] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s2 [66, 65535] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s8 [81, 81] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s1 [82, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s4 -> s7 [0, 80] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s4 -> s4 [0, 65535] { R7892 += 1, R7806 += 1, R7727 += 1, R7728 += 1 };
  s4 -> s11 [81, 81] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s4 -> s7 [82, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s7 -> s7 [0, 80] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s7 -> s7 [0, 65535] { R7892 += 1, R7806 += 1 };
  s7 -> s11 [81, 81] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s7 -> s7 [82, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s8 -> s8 [0, 64] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s8 -> s8 [0, 65535] { R7892 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s8 -> s11 [65, 65] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s8 -> s8 [66, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7892 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R7892 += 1 };
  s11 -> s11 [0, 65535] { R7892 += 1, R7806 += 1, R7728 += 1, R7729 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7892 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R7756 && R5 = R7892 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R70 + R69 + -1*R84 + -1*R82 = 0 && R83 + R81 = 0 && R7733 = 0 && R7734 = R7756 && R7735 = 0 && R7736 = R7756 && R7737 = 0 && R7738 = R7756 && R7739 = 0 && R7740 = R7756 && R7741 = 0 && R7742 = R7756 && R7743 = 0 && R7744 = R7756 && R7745 = 0 && R7746 = R7756 && R7747 = 0 && R7748 = R7756 && R7749 = 0 && R7750 = R7756 && R7751 = 0 && R7752 = R7756 && R7753 = 0 && R7754 = R7756 && R7755 = 0 && R7757 = 0 && R7758 = R7892 && R7759 = 0 && R7760 = R7892 && R7761 = 0 && R7762 = R7892 && R7763 = 0 && R7764 = R7892 && R7765 = 0 && R7766 = R7892 && R7767 = 0 && R7768 = R7892 && R7769 = 0 && R7770 = R7892 && R7771 = 0 && R7772 = R7892 && R7773 = 0 && R7774 = R7892 && R7775 = 0 && R7776 = R7892 && R7777 = 0 && R7778 = R7892 && R7779 = 0 && R7780 = R7892 && R7781 = 0 && R7782 = R7892 && R7783 = 0 && R7784 = R7892 && R7787 = 0 && R7788 = 0 && R7799 = 0 && R7800 = 0 && R7801 = 0 && R7802 = 0 && R7805 = 0 && R7806 = 0 && R7835 = 10 && R7836 = R7892 && R7837 = 10 && R7838 = R7892 && R7839 = 10 && R7840 = R7892 && R7841 = 10 && R7842 = R7892 && R7843 = 10 && R7844 = R7892 && R7845 = 10 && R7846 = R7892 && R7847 = 10 && R7848 = R7892 && R7849 = 10 && R7850 = R7892 && R7851 = 10 && R7852 = R7892 && R7853 = 10 && R7854 = R7892 && R7855 = 10 && R7856 = R7892 && R7857 = 10 && R7858 = R7892 && R7859 = 10 && R7860 = R7892 && R7861 = 10 && R7862 = R7892 && R7863 = 10 && R7864 = R7892 && R7865 = 10 && R7866 = R7892 && R7867 = 10 && R7868 = R7892 && R7869 = 10 && R7870 = R7892 && R7871 = 10 && R7872 = R7892 && R7873 = 10 && R7874 = R7892 && R7875 = 10 && R7876 = R7892 && R7877 = 10 && R7878 = R7892 && R7879 = 10 && R7880 = R7892 && R7881 = 10 && R7882 = R7892 && R7883 = 10 && R7884 = R7892 && R7885 = 10 && R7886 = R7892 && R7887 = 10 && R7888 = R7892 && R7889 = 10 && R7890 = R7892 && R7891 = 10 && R100 + R97 + R118 + R115 != 0 && R5550 + R5547 + R7732 + R7729 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R72 + R71 < 1 && R74 + R73 < 1 && -1*R84 + -1*R82 < 1 && -1*R500 + -1*R499 < 1 && R502 + R501 < 1 && 0 < R7756 && 9 < R7892 && (R80 + R77 != 0 || ((R78 + R75 != 0 || R79 + R76 + -1*R84 + -1*R82 = 0 || R84 + R82 < 1) && (R78 + R75 = 0 || R84 + R82 < 1))) && (R84 + R82 != 0 || R90 + R87 = 0 || (R88 + R85 = 0 && R89 + R86 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R93 + R91 = 0 && R94 + R92 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R88 + R85 != 0 || R84 + R82 + -1*R89 + -1*R86 = 0 || R84 + R82 < 1) && (R93 + R91 != 0 || R84 + R82 + -1*R94 + -1*R92 = 0 || R84 + R82 < 1) && (R98 + R95 != 0 || R84 + R82 + -1*R99 + -1*R96 = 0 || R84 + R82 < 1) && (R500 + R499 != 0 || R512 + R509 = 0 || (R505 + R503 = 0 && R506 + R504 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R510 + R507 = 0 && R511 + R508 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R515 + R513 = 0 && R516 + R514 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R5548 + R5545 = 0 && R5549 + R5546 = 0)) && (R505 + R503 != 0 || R500 + R499 + -1*R506 + -1*R504 = 0 || R500 + R499 < 1) && (R510 + R507 != 0 || R500 + R499 + -1*R511 + -1*R508 = 0 || R500 + R499 < 1) && (R515 + R513 != 0 || R500 + R499 + -1*R516 + -1*R514 = 0 || R500 + R499 < 1) && (R5548 + R5545 != 0 || R500 + R499 + -1*R5549 + -1*R5546 = 0 || R500 + R499 < 1) && (R30 = 0 || (R7785 = 0 && R7786 = 0)) && (R30 = 0 || (R7789 = 0 && R7790 = 0)) && (R30 = 0 || (R7791 = 0 && R7792 = 0)) && (R30 = 0 || (R7793 = 0 && R7794 = 0)) && (R30 = 0 || (R7795 = 0 && R7796 = 0)) && (R30 = 0 || (R7797 = 0 && R7798 = 0)) && (R30 = 0 || (R7803 = 0 && R7804 = 0)) && (R32 = 0 || (R7807 = 0 && R7808 = 0)) && (R32 = 0 || (R7809 = 0 && R7810 = 0)) && (R32 = 0 || (R7811 = 0 && R7812 = 0)) && (R32 = 0 || (R7813 = 0 && R7814 = 0)) && (R32 = 0 || (R7815 = 0 && R7816 = 0)) && (R32 = 0 || (R7817 = 0 && R7818 = 0)) && (R32 = 0 || (R7819 = 0 && R7820 = 0)) && (R32 = 0 || (R7821 = 0 && R7822 = 0)) && (R32 = 0 || (R7823 = 0 && R7824 = 0)) && (R32 = 0 || (R7825 = 0 && R7826 = 0)) && (R32 = 0 || (R7827 = 0 && R7828 = 0)) && (R32 = 0 || (R7829 = 0 && R7830 = 0)) && (R32 = 0 || (R7831 = 0 && R7832 = 0)) && (R32 = 0 || (R7833 = 0 && R7834 = 0)) && (R80 + R77 = 0 || (R78 + R75 = 0 && R79 + R76 + -1*R84 + -1*R82 = 0)) && (R88 + R85 = 0 || R84 + R82 < 1) && (R93 + R91 = 0 || R84 + R82 < 1) && (R98 + R95 = 0 || R84 + R82 < 1) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R112 + R109 = 0 || (R116 + R113 = 0 && R117 + R114 = 0)) && (R505 + R503 = 0 || R500 + R499 < 1) && (R510 + R507 = 0 || R500 + R499 < 1) && (R515 + R513 = 0 || R500 + R499 < 1) && (R5548 + R5545 = 0 || R500 + R499 < 1) && (R7228 + R7225 = 0 || (R7226 + R7223 = 0 && R7227 + R7224 = 0)) && (R7228 + R7225 = 0 || (R7730 + R7727 = 0 && R7731 + R7728 = 0));
// End of Parikh automata intersection problem
