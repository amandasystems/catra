// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R101, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R102, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R6, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R9741, R9742, R9743, R9744, R9745, R9746, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R10110 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R10109 += 1, R10110 += 1 };
  s1 -> s1 [0, 65535] { R10110 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R10112 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R10111 += 1, R10112 += 1 };
  s1 -> s1 [0, 65535] { R10112 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R10114 += 1 };
  s0 -> s2 [0, 65535] { R10114 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R10113 += 1, R10114 += 1 };
  s0 -> s1 [90, 65535] { R10114 += 1 };
  s1 -> s1 [0, 88] { R10114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R10114 += 1 };
  s2 -> s1 [0, 88] { R10114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10114 += 1, R72 += 1 };
  s2 -> s1 [90, 65535] { R10114 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R10116 += 1 };
  s0 -> s0 [0, 65535] { R10115 += 1, R10116 += 1 };
  s0 -> s2 [0, 65535] { R10116 += 1, R74 += 1 };
  s0 -> s1 [74, 65535] { R10116 += 1 };
  s1 -> s1 [0, 72] { R10116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R10116 += 1 };
  s2 -> s1 [0, 72] { R10116 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10116 += 1, R74 += 1 };
  s2 -> s1 [74, 65535] { R10116 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R10118 += 1, R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R10118 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R10117 += 1, R10118 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10118 += 1, R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535] { R10118 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [0, 65535] { R10118 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10118 += 1, R79 += 1, R80 += 1 };
  s3 -> s3 [0, 65535] { R10118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10119 += 1, R10120 += 1 };
  s0 -> s1 [0, 65535] { R10120 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [108, 108] { R10120 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R10120 += 1, R83 += 1, R84 += 1 };
  s1 -> s2 [108, 108] { R10120 += 1, R84 += 1 };
  s2 -> s3 [111, 111] { R10120 += 1, R84 += 1 };
  s3 -> s4 [99, 99] { R10120 += 1, R84 += 1 };
  s4 -> s5 [97, 97] { R10120 += 1, R84 += 1 };
  s5 -> s6 [108, 108] { R10120 += 1, R84 += 1 };
  s6 -> s7 [104, 104] { R10120 += 1, R84 += 1 };
  s7 -> s8 [111, 111] { R10120 += 1, R84 += 1 };
  s8 -> s9 [115, 115] { R10120 += 1, R84 += 1 };
  s9 -> s10 [116, 116] { R10120 += 1, R84 += 1 };
  s10 -> s10 [0, 65535] { R10120 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R10121 += 1, R10122 += 1 };
  s0 -> s1 [0, 65535] { R10122 += 1, R88 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R10122 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10122 += 1, R88 += 1, R89 += 1 };
  s1 -> s2 [0, 65535] { R10122 += 1, R89 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10122 += 1 };
  s2 -> s2 [0, 65535] { R10122 += 1, R89 += 1, R90 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10122 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R10124 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R10123 += 1, R10124 += 1 };
  s0 -> s2 [0, 65535] { R10124 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [108, 108] { R10124 += 1, R94 += 1 };
  s0 -> s1 [109, 65535] { R10124 += 1, R94 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10124 += 1, R94 += 1 };
  s1 -> s13 [0, 65535] { R10124 += 1 };
  s2 -> s1 [0, 107] { R10124 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10124 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [108, 108] { R10124 += 1, R94 += 1 };
  s2 -> s1 [109, 65535] { R10124 += 1, R94 += 1 };
  s3 -> s1 [0, 110] { R10124 += 1, R94 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10124 += 1 };
  s3 -> s5 [111, 111] { R10124 += 1, R94 += 1 };
  s3 -> s1 [112, 65535] { R10124 += 1, R94 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10124 += 1, R94 += 1 };
  s5 -> s5 [0, 65535] { R10124 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10124 += 1, R94 += 1 };
  s5 -> s1 [100, 65535] { R10124 += 1, R94 += 1 };
  s6 -> s1 [0, 96] { R10124 += 1, R94 += 1 };
  s6 -> s6 [0, 65535] { R10124 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10124 += 1, R94 += 1 };
  s6 -> s1 [98, 65535] { R10124 += 1, R94 += 1 };
  s7 -> s1 [0, 107] { R10124 += 1, R94 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10124 += 1 };
  s7 -> s8 [108, 108] { R10124 += 1, R94 += 1 };
  s7 -> s1 [109, 65535] { R10124 += 1, R94 += 1 };
  s8 -> s1 [0, 103] { R10124 += 1, R94 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10124 += 1 };
  s8 -> s9 [104, 104] { R10124 += 1, R94 += 1 };
  s8 -> s1 [105, 65535] { R10124 += 1, R94 += 1 };
  s9 -> s1 [0, 110] { R10124 += 1, R94 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10124 += 1 };
  s9 -> s10 [111, 111] { R10124 += 1, R94 += 1 };
  s9 -> s1 [112, 65535] { R10124 += 1, R94 += 1 };
  s10 -> s1 [0, 114] { R10124 += 1, R94 += 1 };
  s10 -> s10 [0, 65535] { R10124 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10124 += 1, R94 += 1 };
  s10 -> s1 [116, 65535] { R10124 += 1, R94 += 1 };
  s11 -> s1 [0, 115] { R10124 += 1, R94 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10124 += 1 };
  s11 -> s12 [116, 116] { R10124 += 1, R94 += 1 };
  s11 -> s1 [117, 65535] { R10124 += 1, R94 += 1 };
  s12 -> s1 [0, 65535] { R10124 += 1, R94 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10124 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10125 += 1, R10126 += 1 };
  s0 -> s1 [0, 65535] { R10126 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R10126 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R10126 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R10126 += 1, R99 += 1, R100 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10126 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R10126 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10126 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R10128 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R10128 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R10127 += 1, R10128 += 1 };
  s1 -> s1 [0, 65535] { R10128 += 1, R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535] { R10128 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10128 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R10128 += 1, R104 += 1, R105 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10128 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10129 += 1, R10130 += 1 };
  s0 -> s1 [0, 65535] { R10130 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10130 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10132 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R10131 += 1, R10132 += 1 };
  s0 -> s2 [0, 65535] { R10132 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R10132 += 1, R110 += 1, R111 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10132 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10132 += 1 };
  s2 -> s2 [0, 65535] { R10132 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10132 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10133 += 1, R10134 += 1 };
  s0 -> s1 [0, 65535] { R10134 += 1 };
  s1 -> s1 [0, 65535] { R10134 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R10136 += 1, R117 += 1, R118 += 1 };
  s0 -> s2 [0, 65535] { R10136 += 1, R116 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R10135 += 1, R10136 += 1 };
  s0 -> s3 [73, 73] { R10136 += 1, R117 += 1, R118 += 1 };
  s0 -> s4 [73, 73] { R10136 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [74, 65535] { R10136 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 72] { R10136 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535] { R10136 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R10136 += 1, R117 += 1, R118 += 1 };
  s1 -> s4 [73, 73] { R10136 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [74, 65535] { R10136 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [0, 72] { R10136 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R10136 += 1, R116 += 1, R117 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R10136 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [73, 73] { R10136 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [74, 65535] { R10136 += 1, R117 += 1, R118 += 1 };
  s3 -> s6 [0, 65535] { R10136 += 1 };
  s3 -> s3 [0, 65535] { R10136 += 1, R117 += 1, R118 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10136 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10136 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R10160 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R10159 += 1, R10160 += 1 };
  s1 -> s1 [0, 65535] { R10160 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R10162 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10161 += 1, R10162 += 1 };
  s0 -> s2 [65, 65] { R10162 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R10162 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R10162 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R10162 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10162 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R10162 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R10162 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10162 += 1, R69 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R10164 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10163 += 1, R10164 += 1 };
  s0 -> s2 [65, 65] { R10164 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R10164 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R10164 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R10164 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10164 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R10164 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R10164 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R10164 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10166 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R10165 += 1, R10166 += 1 };
  s0 -> s2 [65, 65] { R10166 += 1, R73 += 1 };
  s0 -> s3 [65, 65] { R10166 += 1, R73 += 1 };
  s0 -> s1 [66, 65535] { R10166 += 1, R73 += 1 };
  s1 -> s1 [0, 64] { R10166 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10166 += 1, R73 += 1 };
  s1 -> s3 [65, 65] { R10166 += 1, R73 += 1 };
  s1 -> s1 [66, 65535] { R10166 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R10166 += 1, R73 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10168 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R10167 += 1, R10168 += 1 };
  s0 -> s2 [65, 65] { R10168 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [65, 65] { R10168 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [66, 65535] { R10168 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 64] { R10168 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10168 += 1, R75 += 1, R76 += 1 };
  s1 -> s3 [65, 65] { R10168 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [66, 65535] { R10168 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10168 += 1, R75 += 1, R76 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10170 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R10169 += 1, R10170 += 1 };
  s0 -> s2 [65, 65] { R10170 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [65, 65] { R10170 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R10170 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R10170 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10170 += 1, R81 += 1, R82 += 1 };
  s1 -> s3 [65, 65] { R10170 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R10170 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10170 += 1, R81 += 1, R82 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10172 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10171 += 1, R10172 += 1 };
  s0 -> s2 [65, 65] { R10172 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R10172 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R10172 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R10172 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10172 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R10172 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R10172 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10172 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R10174 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R10173 += 1, R10174 += 1 };
  s0 -> s2 [65, 65] { R10174 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R10174 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R10174 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R10174 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10174 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R10174 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R10174 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535] { R10174 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R10176 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10175 += 1, R10176 += 1 };
  s0 -> s2 [65, 65] { R10176 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R10176 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R10176 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R10176 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10176 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R10176 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R10176 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R10176 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10178 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R10177 += 1, R10178 += 1 };
  s0 -> s2 [65, 65] { R10178 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R10178 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R10178 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R10178 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10178 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R10178 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R10178 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10178 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10180 += 1 };
  s0 -> s0 [0, 65535] { R10179 += 1, R10180 += 1 };
  s0 -> s2 [65, 65] { R10180 += 1 };
  s0 -> s3 [65, 65] { R10180 += 1 };
  s0 -> s1 [66, 65535] { R10180 += 1 };
  s1 -> s1 [0, 64] { R10180 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10180 += 1 };
  s1 -> s3 [65, 65] { R10180 += 1 };
  s1 -> s1 [66, 65535] { R10180 += 1 };
  s2 -> s2 [0, 65535] { R10180 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10182 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R10181 += 1, R10182 += 1 };
  s0 -> s2 [65, 65] { R10182 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R10182 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R10182 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R10182 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10182 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R10182 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R10182 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R10182 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10184 += 1 };
  s0 -> s0 [0, 65535] { R10183 += 1, R10184 += 1 };
  s0 -> s2 [65, 65] { R10184 += 1 };
  s0 -> s3 [65, 65] { R10184 += 1 };
  s0 -> s1 [66, 65535] { R10184 += 1 };
  s1 -> s1 [0, 64] { R10184 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10184 += 1 };
  s1 -> s3 [65, 65] { R10184 += 1 };
  s1 -> s1 [66, 65535] { R10184 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10184 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10186 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R10185 += 1, R10186 += 1 };
  s0 -> s2 [65, 65] { R10186 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R10186 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R10186 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R10186 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10186 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R10186 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R10186 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10186 += 1, R113 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R10188 += 1 };
  s0 -> s0 [0, 65535] { R10187 += 1, R10188 += 1 };
  s0 -> s1 [45, 45] { R10188 += 1 };
  s0 -> s2 [46, 46] { R10188 += 1 };
  s0 -> s1 [48, 62] { R10188 += 1 };
  s0 -> s3 [65, 65] { R10188 += 1 };
  s0 -> s1 [66, 65535] { R10188 += 1 };
  s1 -> s1 [0, 43] { R10188 += 1 };
  s1 -> s1 [45, 45] { R10188 += 1 };
  s1 -> s2 [46, 46] { R10188 += 1 };
  s1 -> s1 [48, 62] { R10188 += 1 };
  s1 -> s3 [65, 65] { R10188 += 1 };
  s1 -> s1 [66, 65535] { R10188 += 1 };
  s2 -> s1 [0, 43] { R10188 += 1 };
  s2 -> s1 [45, 45] { R10188 += 1 };
  s2 -> s2 [46, 46] { R10188 += 1 };
  s2 -> s1 [48, 62] { R10188 += 1 };
  s2 -> s3 [65, 65] { R10188 += 1 };
  s2 -> s1 [66, 114] { R10188 += 1 };
  s2 -> s8 [115, 115] { R10188 += 1 };
  s2 -> s1 [116, 65535] { R10188 += 1 };
  s3 -> s3 [0, 43] { R10188 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10188 += 1 };
  s3 -> s4 [46, 46] { R10188 += 1 };
  s3 -> s3 [48, 62] { R10188 += 1 };
  s3 -> s3 [65, 65535] { R10188 += 1 };
  s4 -> s3 [0, 43] { R10188 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10188 += 1 };
  s4 -> s4 [46, 46] { R10188 += 1 };
  s4 -> s3 [48, 62] { R10188 += 1 };
  s4 -> s3 [65, 114] { R10188 += 1 };
  s4 -> s5 [115, 115] { R10188 += 1 };
  s4 -> s3 [116, 65535] { R10188 += 1 };
  s5 -> s3 [0, 43] { R10188 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10188 += 1 };
  s5 -> s4 [46, 46] { R10188 += 1 };
  s5 -> s3 [48, 62] { R10188 += 1 };
  s5 -> s3 [65, 110] { R10188 += 1 };
  s5 -> s6 [111, 111] { R10188 += 1 };
  s5 -> s3 [112, 65535] { R10188 += 1 };
  s6 -> s3 [0, 43] { R10188 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10188 += 1 };
  s6 -> s4 [46, 46] { R10188 += 1 };
  s6 -> s3 [48, 62] { R10188 += 1 };
  s6 -> s3 [65, 98] { R10188 += 1 };
  s6 -> s7 [99, 99] { R10188 += 1 };
  s6 -> s3 [100, 65535] { R10188 += 1 };
  s7 -> s3 [0, 43] { R10188 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10188 += 1 };
  s7 -> s4 [46, 46] { R10188 += 1 };
  s7 -> s3 [48, 62] { R10188 += 1 };
  s7 -> s3 [65, 106] { R10188 += 1 };
  s7 -> s3 [108, 65535] { R10188 += 1 };
  s8 -> s1 [0, 43] { R10188 += 1 };
  s8 -> s1 [45, 45] { R10188 += 1 };
  s8 -> s2 [46, 46] { R10188 += 1 };
  s8 -> s1 [48, 62] { R10188 += 1 };
  s8 -> s3 [65, 65] { R10188 += 1 };
  s8 -> s1 [66, 110] { R10188 += 1 };
  s8 -> s9 [111, 111] { R10188 += 1 };
  s8 -> s1 [112, 65535] { R10188 += 1 };
  s9 -> s1 [0, 43] { R10188 += 1 };
  s9 -> s1 [45, 45] { R10188 += 1 };
  s9 -> s2 [46, 46] { R10188 += 1 };
  s9 -> s1 [48, 62] { R10188 += 1 };
  s9 -> s3 [65, 65] { R10188 += 1 };
  s9 -> s1 [66, 98] { R10188 += 1 };
  s9 -> s10 [99, 99] { R10188 += 1 };
  s9 -> s1 [100, 65535] { R10188 += 1 };
  s10 -> s1 [0, 43] { R10188 += 1 };
  s10 -> s1 [45, 45] { R10188 += 1 };
  s10 -> s2 [46, 46] { R10188 += 1 };
  s10 -> s1 [48, 62] { R10188 += 1 };
  s10 -> s3 [65, 65] { R10188 += 1 };
  s10 -> s1 [66, 106] { R10188 += 1 };
  s10 -> s1 [108, 65535] { R10188 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10190 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10189 += 1, R10190 += 1 };
  s1 -> s1 [0, 65535] { R10190 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R10192 += 1 };
  s0 -> s0 [0, 65535] { R10191 += 1, R10192 += 1 };
  s0 -> s2 [0, 65535] { R10192 += 1, R16 += 1 };
  s0 -> s3 [58, 58] { R10192 += 1 };
  s0 -> s1 [59, 65535] { R10192 += 1 };
  s1 -> s1 [0, 57] { R10192 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10192 += 1 };
  s1 -> s1 [59, 65535] { R10192 += 1 };
  s2 -> s1 [0, 57] { R10192 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10192 += 1, R16 += 1 };
  s2 -> s3 [58, 58] { R10192 += 1 };
  s2 -> s1 [59, 65535] { R10192 += 1 };
  s3 -> s3 [0, 65535] { R10192 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10194 += 1 };
  s0 -> s0 [0, 65535] { R10193 += 1, R10194 += 1 };
  s0 -> s2 [0, 65535] { R10194 += 1, R17 += 1 };
  s0 -> s3 [65, 65] { R10194 += 1 };
  s0 -> s1 [66, 65535] { R10194 += 1 };
  s1 -> s1 [0, 64] { R10194 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10194 += 1 };
  s1 -> s1 [66, 65535] { R10194 += 1 };
  s2 -> s1 [0, 64] { R10194 += 1 };
  s2 -> s2 [0, 65535] { R10194 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10194 += 1 };
  s2 -> s1 [66, 65535] { R10194 += 1 };
  s3 -> s3 [0, 65535] { R10194 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R10196 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R10196 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10195 += 1, R10196 += 1 };
  s0 -> s3 [91, 91] { R10196 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R10196 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R10196 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R10196 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R10196 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R10196 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10196 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R10196 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R10196 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10196 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s0 [0, 65535] { R10197 += 1, R10198 += 1 };
  s0 -> s1 [0, 65535] { R10198 += 1, R36 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R10198 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R10198 += 1, R36 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R10198 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10198 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10198 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10198 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10200 += 1, R10086 += 1 };
  s0 -> s2 [0, 65535] { R10200 += 1, R10085 += 1, R10086 += 1 };
  s0 -> s0 [0, 65535] { R10199 += 1, R10200 += 1 };
  s0 -> s1 [66, 65535] { R10200 += 1, R10086 += 1 };
  s1 -> s1 [0, 64] { R10200 += 1, R10086 += 1 };
  s1 -> s1 [0, 65535] { R10200 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10200 += 1, R10086 += 1 };
  s2 -> s1 [0, 64] { R10200 += 1, R10086 += 1 };
  s2 -> s2 [0, 65535] { R10200 += 1, R10085 += 1, R10086 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10200 += 1, R10086 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R10201 += 1, R10202 += 1 };
  s0 -> s1 [0, 65535] { R10202 += 1, R10088 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R10202 += 1, R10087 += 1, R10088 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10202 += 1 };
  s1 -> s1 [0, 65535] { R10202 += 1, R10088 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10202 += 1, R10088 += 1, R29 += 1 };
  s2 -> s2 [0, 65535] { R10202 += 1, R10087 += 1, R10088 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10202 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10204 += 1, R10090 += 1 };
  s0 -> s2 [0, 65535] { R10204 += 1, R10089 += 1, R10090 += 1 };
  s0 -> s0 [0, 65535] { R10203 += 1, R10204 += 1 };
  s0 -> s1 [81, 65535] { R10204 += 1, R10090 += 1 };
  s1 -> s1 [0, 65] { R10204 += 1, R10090 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10204 += 1 };
  s1 -> s1 [81, 65535] { R10204 += 1, R10090 += 1 };
  s2 -> s1 [0, 65] { R10204 += 1, R10090 += 1 };
  s2 -> s2 [0, 65535] { R10204 += 1, R10089 += 1, R10090 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R10204 += 1, R10090 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R10205 += 1, R10206 += 1 };
  s0 -> s1 [0, 65535] { R10206 += 1, R10092 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R10206 += 1, R10091 += 1, R10092 += 1 };
  s1 -> s4 [0, 65535] { R10206 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10206 += 1, R10092 += 1, R500 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10206 += 1, R10092 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R10206 += 1, R10091 += 1, R10092 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10206 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R10208 += 1, R10094 += 1 };
  s0 -> s0 [0, 65535] { R10207 += 1, R10208 += 1 };
  s0 -> s2 [0, 65535] { R10208 += 1, R10094 += 1, R502 += 1 };
  s0 -> s3 [0, 65535] { R10208 += 1, R10093 += 1, R10094 += 1 };
  s0 -> s1 [82, 65535] { R10208 += 1, R10094 += 1 };
  s1 -> s1 [0, 80] { R10208 += 1, R10094 += 1 };
  s1 -> s1 [0, 65535] { R10208 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R10208 += 1, R10094 += 1 };
  s2 -> s1 [0, 80] { R10208 += 1, R10094 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10208 += 1, R10094 += 1, R502 += 1 };
  s2 -> s5 [0, 65535] { R10208 += 1 };
  s2 -> s1 [82, 65535] { R10208 += 1, R10094 += 1 };
  s3 -> s1 [0, 80] { R10208 += 1, R10094 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10208 += 1, R10094 += 1, R502 += 1 };
  s3 -> s3 [0, 65535] { R10208 += 1, R10093 += 1, R10094 += 1 };
  s3 -> s1 [82, 65535] { R10208 += 1, R10094 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10208 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R10210 += 1, R10096 += 1, R506 += 1 };
  s0 -> s2 [0, 65535] { R10210 += 1, R10095 += 1, R10096 += 1 };
  s0 -> s0 [0, 65535] { R10209 += 1, R10210 += 1 };
  s0 -> s3 [0, 65535] { R10210 += 1, R10096 += 1, R505 += 1, R506 += 1 };
  s0 -> s1 [82, 65535] { R10210 += 1, R10096 += 1, R506 += 1 };
  s1 -> s1 [0, 80] { R10210 += 1, R10096 += 1, R506 += 1 };
  s1 -> s4 [0, 65535] { R10210 += 1 };
  s1 -> s1 [0, 65535] { R10210 += 1, R10096 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R10210 += 1, R10096 += 1, R506 += 1 };
  s2 -> s1 [0, 80] { R10210 += 1, R10096 += 1, R506 += 1 };
  s2 -> s2 [0, 65535] { R10210 += 1, R10095 += 1, R10096 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10210 += 1, R10096 += 1, R505 += 1, R506 += 1 };
  s2 -> s1 [82, 65535] { R10210 += 1, R10096 += 1, R506 += 1 };
  s3 -> s1 [0, 80] { R10210 += 1, R10096 += 1, R506 += 1 };
  s3 -> s4 [0, 65535] { R10210 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10210 += 1, R10096 += 1, R505 += 1, R506 += 1 };
  s3 -> s1 [82, 65535] { R10210 += 1, R10096 += 1, R506 += 1 };
  s4 -> s4 [0, 65535] { R10210 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10212 += 1, R10097 += 1, R10098 += 1 };
  s0 -> s0 [0, 65535] { R10211 += 1, R10212 += 1 };
  s0 -> s2 [0, 65535] { R10212 += 1, R10098 += 1, R511 += 1, R512 += 1 };
  s0 -> s3 [0, 65535] { R10212 += 1, R10098 += 1, R510 += 1, R511 += 1 };
  s1 -> s1 [0, 65535] { R10212 += 1, R10097 += 1, R10098 += 1 };
  s1 -> s2 [0, 65535] { R10212 += 1, R10098 += 1, R511 += 1, R512 += 1 };
  s1 -> s3 [0, 65535] { R10212 += 1, R10098 += 1, R510 += 1, R511 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10212 += 1, R10098 += 1, R511 += 1, R512 += 1 };
  s2 -> s4 [0, 65535] { R10212 += 1 };
  s2 -> s6 [0, 65535] { R10212 += 1, R10098 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10212 += 1, R10098 += 1, R511 += 1, R512 += 1 };
  s3 -> s4 [0, 65535] { R10212 += 1 };
  s3 -> s3 [0, 65535] { R10212 += 1, R10098 += 1, R510 += 1, R511 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10212 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10212 += 1 };
  s6 -> s6 [0, 65535] { R10212 += 1, R10098 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R10214 += 1, R10100 += 1, R8062 += 1 };
  s0 -> s1 [0, 65535] { R10214 += 1, R10100 += 1 };
  s0 -> s0 [0, 65535] { R10213 += 1, R10214 += 1 };
  s0 -> s2 [0, 65535] { R10214 += 1, R10099 += 1, R10100 += 1 };
  s0 -> s1 [91, 65535] { R10214 += 1, R10100 += 1, R8062 += 1 };
  s1 -> s1 [0, 81] { R10214 += 1, R10100 += 1, R8062 += 1 };
  s1 -> s1 [0, 65535] { R10214 += 1, R10100 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10214 += 1 };
  s1 -> s1 [91, 65535] { R10214 += 1, R10100 += 1, R8062 += 1 };
  s2 -> s1 [0, 81] { R10214 += 1, R10100 += 1, R8062 += 1 };
  s2 -> s1 [0, 65535] { R10214 += 1, R10100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10214 += 1, R10099 += 1, R10100 += 1 };
  s2 -> s1 [91, 65535] { R10214 += 1, R10100 += 1, R8062 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10214 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R10216 += 1, R10102 += 1, R8066 += 1, R8067 += 1 };
  s0 -> s2 [0, 65535] { R10216 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s3 [0, 65535] { R10216 += 1, R10102 += 1, R8067 += 1, R8068 += 1 };
  s0 -> s0 [0, 65535] { R10215 += 1, R10216 += 1 };
  s1 -> s1 [0, 65535] { R10216 += 1, R10102 += 1, R8066 += 1, R8067 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R10216 += 1, R10102 += 1, R8067 += 1, R8068 += 1 };
  s1 -> s5 [0, 65535] { R10216 += 1 };
  s2 -> s1 [0, 65535] { R10216 += 1, R10102 += 1, R8066 += 1, R8067 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10216 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s3 [0, 65535] { R10216 += 1, R10102 += 1, R8067 += 1, R8068 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10216 += 1, R10102 += 1, R8067 += 1, R8068 += 1 };
  s3 -> s5 [0, 65535] { R10216 += 1 };
  s3 -> s6 [0, 65535] { R10216 += 1, R10102 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10216 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10216 += 1 };
  s6 -> s6 [0, 65535] { R10216 += 1, R10102 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R10218 += 1, R10104 += 1 };
  s0 -> s0 [0, 65535] { R10217 += 1, R10218 += 1 };
  s0 -> s2 [0, 65535] { R10218 += 1, R10103 += 1, R10104 += 1 };
  s1 -> s1 [0, 65535] { R10218 += 1, R10104 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10218 += 1 };
  s2 -> s1 [0, 65535] { R10218 += 1, R10104 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10218 += 1, R10103 += 1, R10104 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10218 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10220 += 1, R10106 += 1 };
  s0 -> s0 [0, 65535] { R10219 += 1, R10220 += 1 };
  s0 -> s2 [0, 65535] { R10220 += 1, R10105 += 1, R10106 += 1 };
  s1 -> s1 [0, 65535] { R10220 += 1, R10106 += 1 };
  s1 -> s4 [0, 65535] { R10220 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10220 += 1, R10106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10220 += 1, R10105 += 1, R10106 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10220 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R10221 += 1, R10222 += 1 };
  s0 -> s1 [0, 65535] { R10222 += 1, R10107 += 1, R10108 += 1 };
  s0 -> s2 [0, 65535] { R10222 += 1, R10108 += 1 };
  s1 -> s1 [0, 65535] { R10222 += 1, R10107 += 1, R10108 += 1 };
  s1 -> s2 [0, 65535] { R10222 += 1, R10108 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10222 += 1 };
  s2 -> s2 [0, 65535] { R10222 += 1, R10108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10222 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R10223 += 1, R10224 += 1 };
  s0 -> s1 [0, 65535] { R10224 += 1, R10138 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R10224 += 1, R10137 += 1, R10138 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10224 += 1, R10138 += 1, R30 += 1 };
  s1 -> s4 [0, 65535] { R10224 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10224 += 1, R10138 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R10224 += 1, R10137 += 1, R10138 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10224 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10226 += 1, R10140 += 1 };
  s0 -> s2 [0, 65535] { R10226 += 1, R10139 += 1, R10140 += 1 };
  s0 -> s0 [0, 65535] { R10225 += 1, R10226 += 1 };
  s0 -> s3 [65, 65] { R10226 += 1, R10140 += 1 };
  s0 -> s4 [65, 65] { R10226 += 1, R10140 += 1 };
  s0 -> s5 [81, 81] { R10226 += 1, R10140 += 1 };
  s0 -> s1 [82, 65535] { R10226 += 1, R10140 += 1 };
  s1 -> s1 [0, 64] { R10226 += 1, R10140 += 1 };
  s1 -> s3 [65, 65] { R10226 += 1, R10140 += 1 };
  s1 -> s4 [65, 65] { R10226 += 1, R10140 += 1 };
  s1 -> s5 [81, 81] { R10226 += 1, R10140 += 1 };
  s1 -> s1 [82, 65535] { R10226 += 1, R10140 += 1 };
  s2 -> s1 [0, 64] { R10226 += 1, R10140 += 1 };
  s2 -> s2 [0, 65535] { R10226 += 1, R10139 += 1, R10140 += 1 };
  s2 -> s3 [65, 65] { R10226 += 1, R10140 += 1 };
  s2 -> s4 [65, 65] { R10226 += 1, R10140 += 1 };
  s2 -> s5 [81, 81] { R10226 += 1, R10140 += 1 };
  s2 -> s1 [82, 65535] { R10226 += 1, R10140 += 1 };
  s4 -> s4 [0, 65] { R10226 += 1, R10140 += 1 };
  s4 -> s7 [81, 81] { R10226 += 1, R10140 += 1 };
  s4 -> s4 [82, 65535] { R10226 += 1, R10140 += 1 };
  s5 -> s5 [0, 64] { R10226 += 1, R10140 += 1 };
  s5 -> s5 [0, 65535] { R10226 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10226 += 1, R10140 += 1 };
  s5 -> s8 [65, 65] { R10226 += 1, R10140 += 1 };
  s5 -> s5 [81, 65535] { R10226 += 1, R10140 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10226 += 1, R10140 += 1 };
  s7 -> s7 [0, 65535] { R10226 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R10226 += 1, R10140 += 1 };
  s8 -> s8 [0, 65535] { R10226 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10228 += 1, R10142 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R10228 += 1, R10141 += 1, R10142 += 1 };
  s0 -> s0 [0, 65535] { R10227 += 1, R10228 += 1 };
  s0 -> s3 [65, 65] { R10228 += 1, R10142 += 1, R499 += 1 };
  s0 -> s4 [65, 65] { R10228 += 1, R10142 += 1, R499 += 1 };
  s0 -> s1 [66, 65535] { R10228 += 1, R10142 += 1, R499 += 1 };
  s1 -> s1 [0, 64] { R10228 += 1, R10142 += 1, R499 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10228 += 1 };
  s1 -> s3 [65, 65] { R10228 += 1, R10142 += 1, R499 += 1 };
  s1 -> s4 [65, 65] { R10228 += 1, R10142 += 1, R499 += 1 };
  s1 -> s1 [66, 65535] { R10228 += 1, R10142 += 1, R499 += 1 };
  s2 -> s1 [0, 64] { R10228 += 1, R10142 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R10228 += 1, R10141 += 1, R10142 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10228 += 1, R10142 += 1, R499 += 1 };
  s2 -> s4 [65, 65] { R10228 += 1, R10142 += 1, R499 += 1 };
  s2 -> s1 [66, 65535] { R10228 += 1, R10142 += 1, R499 += 1 };
  s3 -> s3 [0, 65535] { R10228 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10228 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10228 += 1, R10142 += 1, R499 += 1 };
  s5 -> s5 [0, 65535] { R10228 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10230 += 1, R10144 += 1, R501 += 1 };
  s0 -> s2 [0, 65535] { R10230 += 1, R10143 += 1, R10144 += 1 };
  s0 -> s0 [0, 65535] { R10229 += 1, R10230 += 1 };
  s0 -> s3 [65, 65] { R10230 += 1, R10144 += 1, R501 += 1 };
  s0 -> s4 [65, 65] { R10230 += 1, R10144 += 1, R501 += 1 };
  s0 -> s1 [66, 65535] { R10230 += 1, R10144 += 1, R501 += 1 };
  s1 -> s1 [0, 64] { R10230 += 1, R10144 += 1, R501 += 1 };
  s1 -> s1 [0, 65535] { R10230 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10230 += 1, R10144 += 1, R501 += 1 };
  s1 -> s4 [65, 65] { R10230 += 1, R10144 += 1, R501 += 1 };
  s1 -> s1 [66, 65535] { R10230 += 1, R10144 += 1, R501 += 1 };
  s2 -> s1 [0, 64] { R10230 += 1, R10144 += 1, R501 += 1 };
  s2 -> s2 [0, 65535] { R10230 += 1, R10143 += 1, R10144 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10230 += 1, R10144 += 1, R501 += 1 };
  s2 -> s4 [65, 65] { R10230 += 1, R10144 += 1, R501 += 1 };
  s2 -> s1 [66, 65535] { R10230 += 1, R10144 += 1, R501 += 1 };
  s3 -> s3 [0, 65535] { R10230 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10230 += 1, R10144 += 1, R501 += 1 };
  s4 -> s5 [0, 65535] { R10230 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10230 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s0 -> s2 [0, 65535] { R10232 += 1, R10145 += 1, R10146 += 1 };
  s0 -> s0 [0, 65535] { R10231 += 1, R10232 += 1 };
  s0 -> s3 [65, 65] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s0 -> s4 [65, 65] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s0 -> s1 [66, 65535] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 64] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 65535] { R10232 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s1 -> s4 [65, 65] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [66, 65535] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [0, 64] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s2 -> s2 [0, 65535] { R10232 += 1, R10145 += 1, R10146 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s2 -> s4 [65, 65] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [66, 65535] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s3 -> s3 [0, 65535] { R10232 += 1, R10146 += 1, R503 += 1, R504 += 1 };
  s3 -> s6 [0, 65535] { R10232 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10232 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10232 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s0 -> s2 [0, 65535] { R10234 += 1, R10147 += 1, R10148 += 1 };
  s0 -> s0 [0, 65535] { R10233 += 1, R10234 += 1 };
  s0 -> s3 [65, 65] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s0 -> s4 [65, 65] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [66, 65535] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 64] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 65535] { R10234 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [65, 65] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [66, 65535] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 64] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 65535] { R10234 += 1, R10147 += 1, R10148 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s2 -> s4 [65, 65] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [66, 65535] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535] { R10234 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10234 += 1, R10148 += 1, R507 += 1, R508 += 1 };
  s4 -> s5 [0, 65535] { R10234 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10234 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s0 -> s2 [0, 64] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s3 [0, 65535] { R10236 += 1, R10149 += 1, R10150 += 1 };
  s0 -> s0 [0, 65535] { R10235 += 1, R10236 += 1 };
  s0 -> s4 [65, 65] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s0 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s0 -> s7 [65, 65] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s0 -> s2 [66, 65535] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s1 [91, 107] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s0 -> s8 [108, 108] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s0 -> s1 [109, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s1 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s1 [0, 65535] { R10236 += 1 };
  s1 -> s5 [65, 65] { R10236 += 1, R10150 += 1 };
  s1 -> s6 [65, 65] { R10236 += 1, R10150 += 1 };
  s1 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s1 -> s1 [66, 65535] { R10236 += 1, R10150 += 1 };
  s1 -> s1 [91, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s2 [0, 64] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s4 [65, 65] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s7 [65, 65] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s2 [66, 65535] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s1 [91, 107] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s8 [108, 108] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s2 -> s1 [109, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s2 [0, 64] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s3 [0, 65535] { R10236 += 1, R10149 += 1, R10150 += 1 };
  s3 -> s4 [65, 65] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s7 [65, 65] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s2 [66, 65535] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s1 [91, 107] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s8 [108, 108] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s3 -> s1 [109, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s4 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s4 -> s4 [0, 65535] { R10236 += 1, R10150 += 1, R8059 += 1, R8060 += 1 };
  s4 -> s6 [91, 107] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s4 -> s9 [108, 108] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s4 -> s6 [109, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s5 [0, 65535] { R10236 += 1 };
  s6 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s35 [0, 65535] { R10236 += 1 };
  s6 -> s6 [0, 65535] { R10236 += 1, R10150 += 1 };
  s6 -> s6 [91, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s8 [0, 64] { R10236 += 1, R10150 += 1 };
  s8 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s9 [65, 65] { R10236 += 1, R10150 += 1 };
  s8 -> s10 [65, 65] { R10236 += 1, R10150 += 1 };
  s8 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s8 [66, 65535] { R10236 += 1, R10150 += 1 };
  s8 -> s1 [91, 110] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s11 [111, 111] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s8 -> s1 [112, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s9 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s9 -> s9 [0, 65535] { R10236 += 1, R10150 += 1 };
  s9 -> s6 [91, 110] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s9 -> s13 [111, 111] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s9 -> s6 [112, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s11 [0, 64] { R10236 += 1, R10150 += 1 };
  s11 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s12 [65, 65] { R10236 += 1, R10150 += 1 };
  s11 -> s13 [65, 65] { R10236 += 1, R10150 += 1 };
  s11 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s11 [66, 65535] { R10236 += 1, R10150 += 1 };
  s11 -> s1 [91, 98] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s14 [99, 99] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s11 -> s1 [100, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s13 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s13 -> s13 [0, 65535] { R10236 += 1, R10150 += 1 };
  s13 -> s6 [91, 98] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s13 -> s16 [99, 99] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s13 -> s6 [100, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s14 [0, 64] { R10236 += 1, R10150 += 1 };
  s14 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s15 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s16 [65, 65] { R10236 += 1, R10150 += 1 };
  s14 -> s17 [65, 65] { R10236 += 1, R10150 += 1 };
  s14 -> s18 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s14 [66, 65535] { R10236 += 1, R10150 += 1 };
  s14 -> s1 [91, 96] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s19 [97, 97] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s14 -> s1 [98, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s16 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s16 -> s16 [0, 65535] { R10236 += 1, R10150 += 1 };
  s16 -> s6 [91, 96] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s16 -> s18 [97, 97] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s16 -> s6 [98, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s18 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s18 -> s18 [0, 65535] { R10236 += 1, R10150 += 1 };
  s18 -> s6 [91, 107] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s18 -> s21 [108, 108] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s18 -> s6 [109, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s19 [0, 64] { R10236 += 1, R10150 += 1 };
  s19 -> s15 [65, 65] { R10236 += 1, R10150 += 1 };
  s19 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s18 [65, 65] { R10236 += 1, R10150 += 1 };
  s19 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s19 [66, 65535] { R10236 += 1, R10150 += 1 };
  s19 -> s1 [91, 107] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s20 [108, 108] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s19 -> s1 [109, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s20 [0, 64] { R10236 += 1, R10150 += 1 };
  s20 -> s21 [65, 65] { R10236 += 1, R10150 += 1 };
  s20 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s22 [65, 65] { R10236 += 1, R10150 += 1 };
  s20 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s20 [66, 65535] { R10236 += 1, R10150 += 1 };
  s20 -> s1 [91, 103] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s23 [104, 104] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s20 -> s1 [105, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s21 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s21 -> s21 [0, 65535] { R10236 += 1, R10150 += 1 };
  s21 -> s6 [91, 103] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s21 -> s25 [104, 104] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s21 -> s6 [105, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s23 [0, 64] { R10236 += 1, R10150 += 1 };
  s23 -> s24 [65, 65] { R10236 += 1, R10150 += 1 };
  s23 -> s25 [65, 65] { R10236 += 1, R10150 += 1 };
  s23 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s23 [66, 65535] { R10236 += 1, R10150 += 1 };
  s23 -> s1 [91, 110] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s26 [111, 111] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s23 -> s1 [112, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s25 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s25 -> s25 [0, 65535] { R10236 += 1, R10150 += 1 };
  s25 -> s6 [91, 110] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s25 -> s28 [111, 111] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s25 -> s6 [112, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s26 [0, 64] { R10236 += 1, R10150 += 1 };
  s26 -> s27 [65, 65] { R10236 += 1, R10150 += 1 };
  s26 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s28 [65, 65] { R10236 += 1, R10150 += 1 };
  s26 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s26 [66, 65535] { R10236 += 1, R10150 += 1 };
  s26 -> s1 [91, 114] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s29 [115, 115] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s26 -> s1 [116, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s28 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s28 -> s28 [0, 65535] { R10236 += 1, R10150 += 1 };
  s28 -> s6 [91, 114] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s28 -> s30 [115, 115] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s28 -> s6 [116, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s29 [0, 64] { R10236 += 1, R10150 += 1 };
  s29 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s30 [65, 65] { R10236 += 1, R10150 += 1 };
  s29 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s31 [65, 65] { R10236 += 1, R10150 += 1 };
  s29 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s29 [66, 65535] { R10236 += 1, R10150 += 1 };
  s29 -> s1 [91, 115] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s32 [116, 116] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s29 -> s1 [117, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s30 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s30 -> s30 [0, 65535] { R10236 += 1, R10150 += 1 };
  s30 -> s6 [91, 115] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s30 -> s33 [116, 116] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s30 -> s6 [117, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s32 -> s1 [0, 64] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s32 -> s5 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s32 -> s6 [65, 65] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s32 -> s1 [66, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s32 -> s1 [91, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s33 -> s6 [0, 81] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s33 -> s6 [91, 65535] { R10236 += 1, R10150 += 1, R8060 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10236 += 1 };
  accepting s34, s5, s6, s1, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s2 [0, 65535] { R10238 += 1, R10151 += 1, R10152 += 1 };
  s0 -> s0 [0, 65535] { R10237 += 1, R10238 += 1 };
  s0 -> s3 [65, 65] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s4 [65, 65] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s1 [66, 65535] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [0, 64] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [0, 65535] { R10238 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s4 [65, 65] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [66, 65535] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [0, 64] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s2 [0, 65535] { R10238 += 1, R10151 += 1, R10152 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s4 [65, 65] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [66, 65535] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s3 -> s3 [0, 65535] { R10238 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10238 += 1 };
  s4 -> s4 [0, 65535] { R10238 += 1, R10152 += 1, R8063 += 1, R8064 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10238 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s2 [0, 64] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s3 [0, 65535] { R10240 += 1, R10153 += 1, R10154 += 1 };
  s0 -> s0 [0, 65535] { R10239 += 1, R10240 += 1 };
  s0 -> s4 [65, 65] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s5 [65, 65] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s6 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s7 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s1 [66, 65535] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s2 [66, 65535] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s1 [0, 64] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s11 [0, 64] { R10240 += 1, R10154 += 1 };
  s1 -> s8 [65, 65] { R10240 += 1, R10154 += 1 };
  s1 -> s6 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s12 [65, 65] { R10240 += 1, R10154 += 1 };
  s1 -> s7 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s1 [66, 65535] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s11 [66, 65535] { R10240 += 1, R10154 += 1 };
  s2 -> s1 [0, 64] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s2 [0, 64] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s2 -> s4 [65, 65] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s2 -> s5 [65, 65] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s2 -> s6 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s7 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s1 [66, 65535] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s2 [66, 65535] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s1 [0, 64] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s2 [0, 64] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s3 [0, 65535] { R10240 += 1, R10153 += 1, R10154 += 1 };
  s3 -> s4 [65, 65] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s5 [65, 65] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s6 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s7 [65, 65] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s1 [66, 65535] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s2 [66, 65535] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s4 -> s4 [0, 65535] { R10240 += 1, R10154 += 1, R9741 += 1, R9742 += 1 };
  s4 -> s6 [0, 65535] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s6 -> s8 [0, 65535] { R10240 += 1, R10154 += 1 };
  s6 -> s6 [0, 65535] { R10240 += 1, R10154 += 1, R9742 += 1, R9743 += 1 };
  s8 -> s9 [0, 65535] { R10240 += 1 };
  s8 -> s8 [0, 65535] { R10240 += 1, R10154 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10240 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10240 += 1, R10154 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10240 += 1 };
  s11 -> s8 [65, 65] { R10240 += 1, R10154 += 1 };
  s11 -> s12 [65, 65] { R10240 += 1, R10154 += 1 };
  s11 -> s11 [66, 65535] { R10240 += 1, R10154 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10240 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10242 += 1, R10156 += 1 };
  s0 -> s2 [0, 65535] { R10242 += 1, R10155 += 1, R10156 += 1 };
  s0 -> s0 [0, 65535] { R10241 += 1, R10242 += 1 };
  s0 -> s3 [65, 65] { R10242 += 1, R10156 += 1 };
  s0 -> s4 [65, 65] { R10242 += 1, R10156 += 1 };
  s0 -> s1 [66, 65535] { R10242 += 1, R10156 += 1 };
  s1 -> s1 [0, 64] { R10242 += 1, R10156 += 1 };
  s1 -> s1 [0, 65535] { R10242 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10242 += 1, R10156 += 1 };
  s1 -> s4 [65, 65] { R10242 += 1, R10156 += 1 };
  s1 -> s1 [66, 65535] { R10242 += 1, R10156 += 1 };
  s2 -> s1 [0, 64] { R10242 += 1, R10156 += 1 };
  s2 -> s2 [0, 65535] { R10242 += 1, R10155 += 1, R10156 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10242 += 1, R10156 += 1 };
  s2 -> s4 [65, 65] { R10242 += 1, R10156 += 1 };
  s2 -> s1 [66, 65535] { R10242 += 1, R10156 += 1 };
  s3 -> s3 [0, 65535] { R10242 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10242 += 1 };
  s4 -> s4 [0, 65535] { R10242 += 1, R10156 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10242 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s0 -> s2 [0, 64] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s0 -> s3 [0, 65535] { R10244 += 1, R10157 += 1, R10158 += 1 };
  s0 -> s0 [0, 65535] { R10243 += 1, R10244 += 1 };
  s0 -> s4 [65, 65] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s0 -> s5 [65, 65] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s0 -> s6 [65, 65] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s0 -> s7 [65, 65] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s0 -> s2 [66, 80] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s0 -> s1 [66, 65535] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s0 -> s8 [81, 81] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s0 -> s2 [82, 65535] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s1 [0, 64] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s1 -> s2 [0, 64] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s4 [65, 65] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s1 -> s5 [65, 65] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s6 [65, 65] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s7 [65, 65] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s1 -> s2 [66, 80] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s1 [66, 65535] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s1 -> s8 [81, 81] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s2 [82, 65535] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s2 -> s2 [0, 64] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s2 -> s5 [65, 65] { R10244 += 1, R10158 += 1 };
  s2 -> s6 [65, 65] { R10244 += 1, R10158 += 1 };
  s2 -> s2 [66, 80] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s2 -> s2 [66, 65535] { R10244 += 1, R10158 += 1 };
  s2 -> s8 [81, 81] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s2 -> s2 [82, 65535] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s3 -> s1 [0, 64] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s3 -> s2 [0, 64] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s3 -> s3 [0, 65535] { R10244 += 1, R10157 += 1, R10158 += 1 };
  s3 -> s4 [65, 65] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s3 -> s5 [65, 65] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s3 -> s6 [65, 65] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s3 -> s7 [65, 65] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s3 -> s2 [66, 80] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s3 -> s1 [66, 65535] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s3 -> s8 [81, 81] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s3 -> s2 [82, 65535] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s4 -> s6 [0, 80] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s4 -> s4 [0, 65535] { R10244 += 1, R10158 += 1, R10079 += 1, R10080 += 1 };
  s4 -> s11 [81, 81] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s4 -> s6 [82, 65535] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s6 -> s6 [0, 80] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s6 -> s6 [0, 65535] { R10244 += 1, R10158 += 1 };
  s6 -> s11 [81, 81] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s6 -> s6 [82, 65535] { R10244 += 1, R10158 += 1, R10080 += 1, R10081 += 1 };
  s8 -> s8 [0, 64] { R10244 += 1, R10158 += 1 };
  s8 -> s8 [0, 65535] { R10244 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R10244 += 1, R10158 += 1 };
  s8 -> s11 [65, 65] { R10244 += 1, R10158 += 1 };
  s8 -> s8 [66, 65535] { R10244 += 1, R10158 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10244 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10244 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10244 += 1, R10158 += 1 };
  s12 -> s12 [0, 65535] { R10244 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R10108 && R5 = R10244 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R70 + R69 + -1*R84 + -1*R82 = 0 && R83 + R81 = 0 && R10085 = 0 && R10086 = R10108 && R10087 = 0 && R10088 = R10108 && R10089 = 0 && R10090 = R10108 && R10091 = 0 && R10092 = R10108 && R10093 = 0 && R10094 = R10108 && R10095 = 0 && R10096 = R10108 && R10097 = 0 && R10098 = R10108 && R10099 = 0 && R10100 = R10108 && R10101 = 0 && R10102 = R10108 && R10103 = 0 && R10104 = R10108 && R10105 = 0 && R10106 = R10108 && R10107 = 0 && R10109 = 0 && R10110 = R10244 && R10111 = 0 && R10112 = R10244 && R10113 = 0 && R10114 = R10244 && R10115 = 0 && R10116 = R10244 && R10117 = 0 && R10118 = R10244 && R10119 = 0 && R10120 = R10244 && R10121 = 0 && R10122 = R10244 && R10123 = 0 && R10124 = R10244 && R10125 = 0 && R10126 = R10244 && R10127 = 0 && R10128 = R10244 && R10129 = 0 && R10130 = R10244 && R10131 = 0 && R10132 = R10244 && R10133 = 0 && R10134 = R10244 && R10135 = 0 && R10136 = R10244 && R10139 = 0 && R10140 = 0 && R10149 = 0 && R10150 = 0 && R10153 = 0 && R10154 = 0 && R10157 = 0 && R10158 = 0 && R10187 = 10 && R10188 = R10244 && R10189 = 10 && R10190 = R10244 && R10191 = 10 && R10192 = R10244 && R10193 = 10 && R10194 = R10244 && R10195 = 10 && R10196 = R10244 && R10197 = 10 && R10198 = R10244 && R10199 = 10 && R10200 = R10244 && R10201 = 10 && R10202 = R10244 && R10203 = 10 && R10204 = R10244 && R10205 = 10 && R10206 = R10244 && R10207 = 10 && R10208 = R10244 && R10209 = 10 && R10210 = R10244 && R10211 = 10 && R10212 = R10244 && R10213 = 10 && R10214 = R10244 && R10215 = 10 && R10216 = R10244 && R10217 = 10 && R10218 = R10244 && R10219 = 10 && R10220 = R10244 && R10221 = 10 && R10222 = R10244 && R10223 = 10 && R10224 = R10244 && R10225 = 10 && R10226 = R10244 && R10227 = 10 && R10228 = R10244 && R10229 = 10 && R10230 = R10244 && R10231 = 10 && R10232 = R10244 && R10233 = 10 && R10234 = R10244 && R10235 = 10 && R10236 = R10244 && R10237 = 10 && R10238 = R10244 && R10239 = 10 && R10240 = R10244 && R10241 = 10 && R10242 = R10244 && R10243 = 10 && R100 + R97 + R118 + R115 != 0 && R8068 + R8065 + R10084 + R10081 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R72 + R71 < 1 && R74 + R73 < 1 && -1*R84 + -1*R82 < 1 && -1*R500 + -1*R499 < 1 && R502 + R501 < 1 && 0 < R10108 && 9 < R10244 && (R80 + R77 != 0 || ((R78 + R75 != 0 || R79 + R76 + -1*R84 + -1*R82 = 0 || R84 + R82 < 1) && (R78 + R75 = 0 || R84 + R82 < 1))) && (R84 + R82 != 0 || R90 + R87 = 0 || (R88 + R85 = 0 && R89 + R86 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R93 + R91 = 0 && R94 + R92 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R88 + R85 != 0 || R84 + R82 + -1*R89 + -1*R86 = 0 || R84 + R82 < 1) && (R93 + R91 != 0 || R84 + R82 + -1*R94 + -1*R92 = 0 || R84 + R82 < 1) && (R98 + R95 != 0 || R84 + R82 + -1*R99 + -1*R96 = 0 || R84 + R82 < 1) && (R500 + R499 != 0 || R512 + R509 = 0 || (R505 + R503 = 0 && R506 + R504 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R510 + R507 = 0 && R511 + R508 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R8061 + R8059 = 0 && R8062 + R8060 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R8066 + R8063 = 0 && R8067 + R8064 = 0)) && (R505 + R503 != 0 || R500 + R499 + -1*R506 + -1*R504 = 0 || R500 + R499 < 1) && (R510 + R507 != 0 || R500 + R499 + -1*R511 + -1*R508 = 0 || R500 + R499 < 1) && (R8061 + R8059 != 0 || R500 + R499 + -1*R8062 + -1*R8060 = 0 || R500 + R499 < 1) && (R8066 + R8063 != 0 || R500 + R499 + -1*R8067 + -1*R8064 = 0 || R500 + R499 < 1) && (R30 = 0 || (R10137 = 0 && R10138 = 0)) && (R30 = 0 || (R10141 = 0 && R10142 = 0)) && (R30 = 0 || (R10143 = 0 && R10144 = 0)) && (R30 = 0 || (R10145 = 0 && R10146 = 0)) && (R30 = 0 || (R10147 = 0 && R10148 = 0)) && (R30 = 0 || (R10151 = 0 && R10152 = 0)) && (R30 = 0 || (R10155 = 0 && R10156 = 0)) && (R32 = 0 || (R10159 = 0 && R10160 = 0)) && (R32 = 0 || (R10161 = 0 && R10162 = 0)) && (R32 = 0 || (R10163 = 0 && R10164 = 0)) && (R32 = 0 || (R10165 = 0 && R10166 = 0)) && (R32 = 0 || (R10167 = 0 && R10168 = 0)) && (R32 = 0 || (R10169 = 0 && R10170 = 0)) && (R32 = 0 || (R10171 = 0 && R10172 = 0)) && (R32 = 0 || (R10173 = 0 && R10174 = 0)) && (R32 = 0 || (R10175 = 0 && R10176 = 0)) && (R32 = 0 || (R10177 = 0 && R10178 = 0)) && (R32 = 0 || (R10179 = 0 && R10180 = 0)) && (R32 = 0 || (R10181 = 0 && R10182 = 0)) && (R32 = 0 || (R10183 = 0 && R10184 = 0)) && (R32 = 0 || (R10185 = 0 && R10186 = 0)) && (R80 + R77 = 0 || (R78 + R75 = 0 && R79 + R76 + -1*R84 + -1*R82 = 0)) && (R88 + R85 = 0 || R84 + R82 < 1) && (R93 + R91 = 0 || R84 + R82 < 1) && (R98 + R95 = 0 || R84 + R82 < 1) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R112 + R109 = 0 || (R116 + R113 = 0 && R117 + R114 = 0)) && (R505 + R503 = 0 || R500 + R499 < 1) && (R510 + R507 = 0 || R500 + R499 < 1) && (R8061 + R8059 = 0 || R500 + R499 < 1) && (R8066 + R8063 = 0 || R500 + R499 < 1) && (R9746 + R9743 = 0 || (R9744 + R9741 = 0 && R9745 + R9742 = 0)) && (R9746 + R9743 = 0 || (R10082 + R10079 = 0 && R10083 + R10080 = 0));
// End of Parikh automata intersection problem
