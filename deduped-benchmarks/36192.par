// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R6, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R9741, R9742, R9743, R9744, R9745, R9746, R98, R99, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R9943 += 1, R9944 += 1 };
  s0 -> s1 [0, 65535] { R9944 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R9944 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R9946 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R9945 += 1, R9946 += 1 };
  s1 -> s1 [0, 65535] { R9946 += 1, R70 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R9948 += 1 };
  s0 -> s2 [0, 65535] { R9948 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R9947 += 1, R9948 += 1 };
  s0 -> s1 [90, 65535] { R9948 += 1 };
  s1 -> s1 [0, 88] { R9948 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R9948 += 1 };
  s2 -> s1 [0, 88] { R9948 += 1 };
  s2 -> s2 [0, 65535] { R9948 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R9948 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R9950 += 1 };
  s0 -> s2 [0, 65535] { R9950 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R9949 += 1, R9950 += 1 };
  s0 -> s1 [74, 65535] { R9950 += 1 };
  s1 -> s1 [0, 72] { R9950 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R9950 += 1 };
  s2 -> s1 [0, 72] { R9950 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9950 += 1, R74 += 1 };
  s2 -> s1 [74, 65535] { R9950 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R9951 += 1, R9952 += 1 };
  s0 -> s1 [0, 65535] { R9952 += 1, R79 += 1, R80 += 1 };
  s0 -> s2 [0, 65535] { R9952 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9952 += 1 };
  s1 -> s1 [0, 65535] { R9952 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9952 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535] { R9952 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9952 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R9953 += 1, R9954 += 1 };
  s0 -> s1 [0, 65535] { R9954 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [108, 108] { R9954 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R9954 += 1, R83 += 1, R84 += 1 };
  s1 -> s2 [108, 108] { R9954 += 1, R84 += 1 };
  s2 -> s3 [111, 111] { R9954 += 1, R84 += 1 };
  s3 -> s4 [99, 99] { R9954 += 1, R84 += 1 };
  s4 -> s5 [97, 97] { R9954 += 1, R84 += 1 };
  s5 -> s6 [108, 108] { R9954 += 1, R84 += 1 };
  s6 -> s7 [104, 104] { R9954 += 1, R84 += 1 };
  s7 -> s8 [111, 111] { R9954 += 1, R84 += 1 };
  s8 -> s9 [115, 115] { R9954 += 1, R84 += 1 };
  s9 -> s10 [116, 116] { R9954 += 1, R84 += 1 };
  s10 -> s10 [0, 65535] { R9954 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R9956 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9955 += 1, R9956 += 1 };
  s0 -> s2 [0, 65535] { R9956 += 1, R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R9956 += 1, R89 += 1, R90 += 1 };
  s1 -> s4 [0, 65535] { R9956 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9956 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R9956 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9956 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R9958 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R9957 += 1, R9958 += 1 };
  s0 -> s2 [0, 65535] { R9958 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [108, 108] { R9958 += 1, R94 += 1 };
  s0 -> s1 [109, 65535] { R9958 += 1, R94 += 1 };
  s1 -> s13 [0, 65535] { R9958 += 1 };
  s1 -> s1 [0, 65535] { R9958 += 1, R94 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R9958 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9958 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [108, 108] { R9958 += 1, R94 += 1 };
  s2 -> s1 [109, 65535] { R9958 += 1, R94 += 1 };
  s3 -> s1 [0, 110] { R9958 += 1, R94 += 1 };
  s3 -> s3 [0, 65535] { R9958 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R9958 += 1, R94 += 1 };
  s3 -> s1 [112, 65535] { R9958 += 1, R94 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R9958 += 1, R94 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9958 += 1 };
  s5 -> s6 [99, 99] { R9958 += 1, R94 += 1 };
  s5 -> s1 [100, 65535] { R9958 += 1, R94 += 1 };
  s6 -> s1 [0, 96] { R9958 += 1, R94 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9958 += 1 };
  s6 -> s7 [97, 97] { R9958 += 1, R94 += 1 };
  s6 -> s1 [98, 65535] { R9958 += 1, R94 += 1 };
  s7 -> s1 [0, 107] { R9958 += 1, R94 += 1 };
  s7 -> s7 [0, 65535] { R9958 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R9958 += 1, R94 += 1 };
  s7 -> s1 [109, 65535] { R9958 += 1, R94 += 1 };
  s8 -> s1 [0, 103] { R9958 += 1, R94 += 1 };
  s8 -> s8 [0, 65535] { R9958 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R9958 += 1, R94 += 1 };
  s8 -> s1 [105, 65535] { R9958 += 1, R94 += 1 };
  s9 -> s1 [0, 110] { R9958 += 1, R94 += 1 };
  s9 -> s9 [0, 65535] { R9958 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R9958 += 1, R94 += 1 };
  s9 -> s1 [112, 65535] { R9958 += 1, R94 += 1 };
  s10 -> s1 [0, 114] { R9958 += 1, R94 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R9958 += 1 };
  s10 -> s11 [115, 115] { R9958 += 1, R94 += 1 };
  s10 -> s1 [116, 65535] { R9958 += 1, R94 += 1 };
  s11 -> s1 [0, 115] { R9958 += 1, R94 += 1 };
  s11 -> s11 [0, 65535] { R9958 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R9958 += 1, R94 += 1 };
  s11 -> s1 [117, 65535] { R9958 += 1, R94 += 1 };
  s12 -> s1 [0, 65535] { R9958 += 1, R94 += 1 };
  s13 -> s13 [0, 65535] { R9958 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R9960 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R9960 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R9959 += 1, R9960 += 1 };
  s1 -> s1 [0, 65535] { R9960 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R9960 += 1, R99 += 1, R100 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9960 += 1 };
  s2 -> s2 [0, 65535] { R9960 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9960 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R9961 += 1, R9962 += 1 };
  s0 -> s1 [0, 65535] { R9962 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R9962 += 1, R104 += 1, R105 += 1 };
  s1 -> s4 [0, 65535] { R9962 += 1 };
  s1 -> s1 [0, 65535] { R9962 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9962 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R9962 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9962 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R9963 += 1, R9964 += 1 };
  s0 -> s1 [0, 65535] { R9964 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9964 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9966 += 1, R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R9966 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R9965 += 1, R9966 += 1 };
  s1 -> s4 [0, 65535] { R9966 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9966 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9966 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R9966 += 1, R110 += 1, R111 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9966 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9968 += 1 };
  s0 -> s0 [0, 65535] { R9967 += 1, R9968 += 1 };
  s1 -> s1 [0, 65535] { R9968 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R9970 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R9969 += 1, R9970 += 1 };
  s0 -> s2 [0, 65535] { R9970 += 1, R116 += 1, R117 += 1 };
  s0 -> s3 [73, 73] { R9970 += 1, R117 += 1, R118 += 1 };
  s0 -> s4 [73, 73] { R9970 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [74, 65535] { R9970 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 72] { R9970 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535] { R9970 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R9970 += 1, R117 += 1, R118 += 1 };
  s1 -> s4 [73, 73] { R9970 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [74, 65535] { R9970 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [0, 72] { R9970 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R9970 += 1, R116 += 1, R117 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R9970 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [73, 73] { R9970 += 1, R117 += 1, R118 += 1 };
  s2 -> s1 [74, 65535] { R9970 += 1, R117 += 1, R118 += 1 };
  s3 -> s6 [0, 65535] { R9970 += 1 };
  s3 -> s3 [0, 65535] { R9970 += 1, R117 += 1, R118 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9970 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9970 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R9994 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R9993 += 1, R9994 += 1 };
  s1 -> s1 [0, 65535] { R9994 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R9996 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R9995 += 1, R9996 += 1 };
  s0 -> s2 [65, 65] { R9996 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R9996 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R9996 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R9996 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9996 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R9996 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R9996 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R9996 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R9998 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R9997 += 1, R9998 += 1 };
  s0 -> s2 [65, 65] { R9998 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R9998 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R9998 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R9998 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9998 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R9998 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R9998 += 1, R71 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9998 += 1, R71 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10000 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R9999 += 1, R10000 += 1 };
  s0 -> s2 [65, 65] { R10000 += 1, R73 += 1 };
  s0 -> s3 [65, 65] { R10000 += 1, R73 += 1 };
  s0 -> s1 [66, 65535] { R10000 += 1, R73 += 1 };
  s1 -> s1 [0, 64] { R10000 += 1, R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10000 += 1, R73 += 1 };
  s1 -> s3 [65, 65] { R10000 += 1, R73 += 1 };
  s1 -> s1 [66, 65535] { R10000 += 1, R73 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10000 += 1, R73 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10002 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R10001 += 1, R10002 += 1 };
  s0 -> s2 [65, 65] { R10002 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [65, 65] { R10002 += 1, R75 += 1, R76 += 1 };
  s0 -> s1 [66, 65535] { R10002 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 64] { R10002 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10002 += 1, R75 += 1, R76 += 1 };
  s1 -> s3 [65, 65] { R10002 += 1, R75 += 1, R76 += 1 };
  s1 -> s1 [66, 65535] { R10002 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10002 += 1, R75 += 1, R76 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10004 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R10003 += 1, R10004 += 1 };
  s0 -> s2 [65, 65] { R10004 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [65, 65] { R10004 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R10004 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R10004 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10004 += 1, R81 += 1, R82 += 1 };
  s1 -> s3 [65, 65] { R10004 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R10004 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R10004 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10006 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10005 += 1, R10006 += 1 };
  s0 -> s2 [65, 65] { R10006 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R10006 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R10006 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R10006 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10006 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R10006 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R10006 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10006 += 1, R85 += 1, R86 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R10008 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R10007 += 1, R10008 += 1 };
  s0 -> s2 [65, 65] { R10008 += 1, R91 += 1, R92 += 1 };
  s0 -> s3 [65, 65] { R10008 += 1, R91 += 1, R92 += 1 };
  s0 -> s1 [66, 65535] { R10008 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 64] { R10008 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10008 += 1, R91 += 1, R92 += 1 };
  s1 -> s3 [65, 65] { R10008 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [66, 65535] { R10008 += 1, R91 += 1, R92 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10008 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R10010 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10009 += 1, R10010 += 1 };
  s0 -> s2 [65, 65] { R10010 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R10010 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R10010 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R10010 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10010 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R10010 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R10010 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10010 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10012 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R10011 += 1, R10012 += 1 };
  s0 -> s2 [65, 65] { R10012 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R10012 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R10012 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R10012 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10012 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R10012 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R10012 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10012 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10014 += 1 };
  s0 -> s0 [0, 65535] { R10013 += 1, R10014 += 1 };
  s0 -> s2 [65, 65] { R10014 += 1 };
  s0 -> s3 [65, 65] { R10014 += 1 };
  s0 -> s1 [66, 65535] { R10014 += 1 };
  s1 -> s1 [0, 64] { R10014 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10014 += 1 };
  s1 -> s3 [65, 65] { R10014 += 1 };
  s1 -> s1 [66, 65535] { R10014 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10014 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10016 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R10015 += 1, R10016 += 1 };
  s0 -> s2 [65, 65] { R10016 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R10016 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R10016 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R10016 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10016 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R10016 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R10016 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10016 += 1, R107 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10018 += 1 };
  s0 -> s0 [0, 65535] { R10017 += 1, R10018 += 1 };
  s0 -> s2 [65, 65] { R10018 += 1 };
  s0 -> s3 [65, 65] { R10018 += 1 };
  s0 -> s1 [66, 65535] { R10018 += 1 };
  s1 -> s1 [0, 64] { R10018 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10018 += 1 };
  s1 -> s3 [65, 65] { R10018 += 1 };
  s1 -> s1 [66, 65535] { R10018 += 1 };
  s2 -> s2 [0, 65535] { R10018 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10020 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R10019 += 1, R10020 += 1 };
  s0 -> s2 [65, 65] { R10020 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R10020 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R10020 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R10020 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10020 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R10020 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R10020 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R10020 += 1, R113 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R10022 += 1 };
  s0 -> s0 [0, 65535] { R10021 += 1, R10022 += 1 };
  s0 -> s1 [45, 45] { R10022 += 1 };
  s0 -> s2 [46, 46] { R10022 += 1 };
  s0 -> s1 [48, 62] { R10022 += 1 };
  s0 -> s3 [65, 65] { R10022 += 1 };
  s0 -> s1 [66, 65535] { R10022 += 1 };
  s1 -> s1 [0, 43] { R10022 += 1 };
  s1 -> s1 [45, 45] { R10022 += 1 };
  s1 -> s2 [46, 46] { R10022 += 1 };
  s1 -> s1 [48, 62] { R10022 += 1 };
  s1 -> s3 [65, 65] { R10022 += 1 };
  s1 -> s1 [66, 65535] { R10022 += 1 };
  s2 -> s1 [0, 43] { R10022 += 1 };
  s2 -> s1 [45, 45] { R10022 += 1 };
  s2 -> s2 [46, 46] { R10022 += 1 };
  s2 -> s1 [48, 62] { R10022 += 1 };
  s2 -> s3 [65, 65] { R10022 += 1 };
  s2 -> s1 [66, 114] { R10022 += 1 };
  s2 -> s8 [115, 115] { R10022 += 1 };
  s2 -> s1 [116, 65535] { R10022 += 1 };
  s3 -> s3 [0, 43] { R10022 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10022 += 1 };
  s3 -> s4 [46, 46] { R10022 += 1 };
  s3 -> s3 [48, 62] { R10022 += 1 };
  s3 -> s3 [65, 65535] { R10022 += 1 };
  s4 -> s3 [0, 43] { R10022 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10022 += 1 };
  s4 -> s4 [46, 46] { R10022 += 1 };
  s4 -> s3 [48, 62] { R10022 += 1 };
  s4 -> s3 [65, 114] { R10022 += 1 };
  s4 -> s5 [115, 115] { R10022 += 1 };
  s4 -> s3 [116, 65535] { R10022 += 1 };
  s5 -> s3 [0, 43] { R10022 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10022 += 1 };
  s5 -> s4 [46, 46] { R10022 += 1 };
  s5 -> s3 [48, 62] { R10022 += 1 };
  s5 -> s3 [65, 110] { R10022 += 1 };
  s5 -> s6 [111, 111] { R10022 += 1 };
  s5 -> s3 [112, 65535] { R10022 += 1 };
  s6 -> s3 [0, 43] { R10022 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10022 += 1 };
  s6 -> s4 [46, 46] { R10022 += 1 };
  s6 -> s3 [48, 62] { R10022 += 1 };
  s6 -> s3 [65, 98] { R10022 += 1 };
  s6 -> s7 [99, 99] { R10022 += 1 };
  s6 -> s3 [100, 65535] { R10022 += 1 };
  s7 -> s3 [0, 43] { R10022 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10022 += 1 };
  s7 -> s4 [46, 46] { R10022 += 1 };
  s7 -> s3 [48, 62] { R10022 += 1 };
  s7 -> s3 [65, 106] { R10022 += 1 };
  s7 -> s3 [108, 65535] { R10022 += 1 };
  s8 -> s1 [0, 43] { R10022 += 1 };
  s8 -> s1 [45, 45] { R10022 += 1 };
  s8 -> s2 [46, 46] { R10022 += 1 };
  s8 -> s1 [48, 62] { R10022 += 1 };
  s8 -> s3 [65, 65] { R10022 += 1 };
  s8 -> s1 [66, 110] { R10022 += 1 };
  s8 -> s9 [111, 111] { R10022 += 1 };
  s8 -> s1 [112, 65535] { R10022 += 1 };
  s9 -> s1 [0, 43] { R10022 += 1 };
  s9 -> s1 [45, 45] { R10022 += 1 };
  s9 -> s2 [46, 46] { R10022 += 1 };
  s9 -> s1 [48, 62] { R10022 += 1 };
  s9 -> s3 [65, 65] { R10022 += 1 };
  s9 -> s1 [66, 98] { R10022 += 1 };
  s9 -> s10 [99, 99] { R10022 += 1 };
  s9 -> s1 [100, 65535] { R10022 += 1 };
  s10 -> s1 [0, 43] { R10022 += 1 };
  s10 -> s1 [45, 45] { R10022 += 1 };
  s10 -> s2 [46, 46] { R10022 += 1 };
  s10 -> s1 [48, 62] { R10022 += 1 };
  s10 -> s3 [65, 65] { R10022 += 1 };
  s10 -> s1 [66, 106] { R10022 += 1 };
  s10 -> s1 [108, 65535] { R10022 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10024 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10023 += 1, R10024 += 1 };
  s1 -> s1 [0, 65535] { R10024 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R10026 += 1 };
  s0 -> s0 [0, 65535] { R10025 += 1, R10026 += 1 };
  s0 -> s2 [0, 65535] { R10026 += 1, R16 += 1 };
  s0 -> s3 [58, 58] { R10026 += 1 };
  s0 -> s1 [59, 65535] { R10026 += 1 };
  s1 -> s1 [0, 57] { R10026 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10026 += 1 };
  s1 -> s1 [59, 65535] { R10026 += 1 };
  s2 -> s1 [0, 57] { R10026 += 1 };
  s2 -> s2 [0, 65535] { R10026 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R10026 += 1 };
  s2 -> s1 [59, 65535] { R10026 += 1 };
  s3 -> s3 [0, 65535] { R10026 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10028 += 1 };
  s0 -> s2 [0, 65535] { R10028 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R10027 += 1, R10028 += 1 };
  s0 -> s3 [65, 65] { R10028 += 1 };
  s0 -> s1 [66, 65535] { R10028 += 1 };
  s1 -> s1 [0, 64] { R10028 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10028 += 1 };
  s1 -> s1 [66, 65535] { R10028 += 1 };
  s2 -> s1 [0, 64] { R10028 += 1 };
  s2 -> s2 [0, 65535] { R10028 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10028 += 1 };
  s2 -> s1 [66, 65535] { R10028 += 1 };
  s3 -> s3 [0, 65535] { R10028 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R10030 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R10030 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10029 += 1, R10030 += 1 };
  s0 -> s3 [91, 91] { R10030 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R10030 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R10030 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10030 += 1, R34 += 1 };
  s2 -> s1 [0, 90] { R10030 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R10030 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10030 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R10030 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R10030 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10030 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10032 += 1, R36 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R10031 += 1, R10032 += 1 };
  s0 -> s2 [0, 65535] { R10032 += 1, R35 += 1, R36 += 1 };
  s1 -> s4 [0, 65535] { R10032 += 1 };
  s1 -> s1 [0, 65535] { R10032 += 1, R36 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10032 += 1, R36 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R10032 += 1, R35 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10032 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10034 += 1, R9920 += 1 };
  s0 -> s0 [0, 65535] { R10033 += 1, R10034 += 1 };
  s0 -> s2 [0, 65535] { R10034 += 1, R9919 += 1, R9920 += 1 };
  s0 -> s1 [66, 65535] { R10034 += 1, R9920 += 1 };
  s1 -> s1 [0, 64] { R10034 += 1, R9920 += 1 };
  s1 -> s1 [0, 65535] { R10034 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10034 += 1, R9920 += 1 };
  s2 -> s1 [0, 64] { R10034 += 1, R9920 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10034 += 1, R9919 += 1, R9920 += 1 };
  s2 -> s1 [66, 65535] { R10034 += 1, R9920 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R10036 += 1, R9922 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R10035 += 1, R10036 += 1 };
  s0 -> s2 [0, 65535] { R10036 += 1, R9921 += 1, R9922 += 1 };
  s1 -> s4 [0, 65535] { R10036 += 1 };
  s1 -> s1 [0, 65535] { R10036 += 1, R9922 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10036 += 1, R9922 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10036 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10036 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10038 += 1, R9924 += 1 };
  s0 -> s2 [0, 65535] { R10038 += 1, R9923 += 1, R9924 += 1 };
  s0 -> s0 [0, 65535] { R10037 += 1, R10038 += 1 };
  s0 -> s1 [81, 65535] { R10038 += 1, R9924 += 1 };
  s1 -> s1 [0, 65] { R10038 += 1, R9924 += 1 };
  s1 -> s1 [0, 65535] { R10038 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R10038 += 1, R9924 += 1 };
  s2 -> s1 [0, 65] { R10038 += 1, R9924 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10038 += 1, R9923 += 1, R9924 += 1 };
  s2 -> s1 [81, 65535] { R10038 += 1, R9924 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R10040 += 1, R9926 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R10040 += 1, R9925 += 1, R9926 += 1 };
  s0 -> s0 [0, 65535] { R10039 += 1, R10040 += 1 };
  s1 -> s1 [0, 65535] { R10040 += 1, R9926 += 1, R500 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10040 += 1 };
  s2 -> s1 [0, 65535] { R10040 += 1, R9926 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R10040 += 1, R9925 += 1, R9926 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10040 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R10042 += 1, R9928 += 1 };
  s0 -> s2 [0, 65535] { R10042 += 1, R9928 += 1, R502 += 1 };
  s0 -> s0 [0, 65535] { R10041 += 1, R10042 += 1 };
  s0 -> s3 [0, 65535] { R10042 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s1 [82, 65535] { R10042 += 1, R9928 += 1 };
  s1 -> s1 [0, 80] { R10042 += 1, R9928 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10042 += 1 };
  s1 -> s1 [82, 65535] { R10042 += 1, R9928 += 1 };
  s2 -> s1 [0, 80] { R10042 += 1, R9928 += 1 };
  s2 -> s2 [0, 65535] { R10042 += 1, R9928 += 1, R502 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10042 += 1 };
  s2 -> s1 [82, 65535] { R10042 += 1, R9928 += 1 };
  s3 -> s1 [0, 80] { R10042 += 1, R9928 += 1 };
  s3 -> s2 [0, 65535] { R10042 += 1, R9928 += 1, R502 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10042 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s1 [82, 65535] { R10042 += 1, R9928 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10042 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R10044 += 1, R9930 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R10043 += 1, R10044 += 1 };
  s0 -> s2 [0, 65535] { R10044 += 1, R9929 += 1, R9930 += 1 };
  s0 -> s3 [0, 65535] { R10044 += 1, R9930 += 1, R505 += 1, R506 += 1 };
  s0 -> s1 [82, 65535] { R10044 += 1, R9930 += 1, R506 += 1 };
  s1 -> s1 [0, 80] { R10044 += 1, R9930 += 1, R506 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10044 += 1, R9930 += 1 };
  s1 -> s5 [0, 65535] { R10044 += 1 };
  s1 -> s1 [82, 65535] { R10044 += 1, R9930 += 1, R506 += 1 };
  s2 -> s1 [0, 80] { R10044 += 1, R9930 += 1, R506 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10044 += 1, R9929 += 1, R9930 += 1 };
  s2 -> s3 [0, 65535] { R10044 += 1, R9930 += 1, R505 += 1, R506 += 1 };
  s2 -> s1 [82, 65535] { R10044 += 1, R9930 += 1, R506 += 1 };
  s3 -> s1 [0, 80] { R10044 += 1, R9930 += 1, R506 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10044 += 1 };
  s3 -> s3 [0, 65535] { R10044 += 1, R9930 += 1, R505 += 1, R506 += 1 };
  s3 -> s1 [82, 65535] { R10044 += 1, R9930 += 1, R506 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10044 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10046 += 1, R9932 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R10045 += 1, R10046 += 1 };
  s0 -> s2 [0, 65535] { R10046 += 1, R9932 += 1, R511 += 1, R512 += 1 };
  s0 -> s3 [0, 65535] { R10046 += 1, R9931 += 1, R9932 += 1 };
  s1 -> s1 [0, 65535] { R10046 += 1, R9932 += 1, R510 += 1, R511 += 1 };
  s1 -> s5 [0, 65535] { R10046 += 1 };
  s1 -> s2 [0, 65535] { R10046 += 1, R9932 += 1, R511 += 1, R512 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10046 += 1 };
  s2 -> s2 [0, 65535] { R10046 += 1, R9932 += 1, R511 += 1, R512 += 1 };
  s2 -> s6 [0, 65535] { R10046 += 1, R9932 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10046 += 1, R9932 += 1, R510 += 1, R511 += 1 };
  s3 -> s2 [0, 65535] { R10046 += 1, R9932 += 1, R511 += 1, R512 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10046 += 1, R9931 += 1, R9932 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10046 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10046 += 1 };
  s6 -> s6 [0, 65535] { R10046 += 1, R9932 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R10048 += 1, R9934 += 1, R8062 += 1 };
  s0 -> s1 [0, 65535] { R10048 += 1, R9934 += 1 };
  s0 -> s2 [0, 65535] { R10048 += 1, R9933 += 1, R9934 += 1 };
  s0 -> s0 [0, 65535] { R10047 += 1, R10048 += 1 };
  s0 -> s1 [91, 65535] { R10048 += 1, R9934 += 1, R8062 += 1 };
  s1 -> s1 [0, 81] { R10048 += 1, R9934 += 1, R8062 += 1 };
  s1 -> s1 [0, 65535] { R10048 += 1, R9934 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10048 += 1 };
  s1 -> s1 [91, 65535] { R10048 += 1, R9934 += 1, R8062 += 1 };
  s2 -> s1 [0, 81] { R10048 += 1, R9934 += 1, R8062 += 1 };
  s2 -> s1 [0, 65535] { R10048 += 1, R9934 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10048 += 1, R9933 += 1, R9934 += 1 };
  s2 -> s1 [91, 65535] { R10048 += 1, R9934 += 1, R8062 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10048 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R10049 += 1, R10050 += 1 };
  s0 -> s1 [0, 65535] { R10050 += 1, R9936 += 1, R8066 += 1, R8067 += 1 };
  s0 -> s2 [0, 65535] { R10050 += 1, R9936 += 1, R8067 += 1, R8068 += 1 };
  s0 -> s3 [0, 65535] { R10050 += 1, R9935 += 1, R9936 += 1 };
  s1 -> s6 [0, 65535] { R10050 += 1 };
  s1 -> s1 [0, 65535] { R10050 += 1, R9936 += 1, R8066 += 1, R8067 += 1 };
  s1 -> s2 [0, 65535] { R10050 += 1, R9936 += 1, R8067 += 1, R8068 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10050 += 1, R9936 += 1 };
  s2 -> s6 [0, 65535] { R10050 += 1 };
  s2 -> s2 [0, 65535] { R10050 += 1, R9936 += 1, R8067 += 1, R8068 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10050 += 1, R9936 += 1, R8066 += 1, R8067 += 1 };
  s3 -> s2 [0, 65535] { R10050 += 1, R9936 += 1, R8067 += 1, R8068 += 1 };
  s3 -> s3 [0, 65535] { R10050 += 1, R9935 += 1, R9936 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10050 += 1, R9936 += 1 };
  s5 -> s6 [0, 65535] { R10050 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10050 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R10052 += 1, R9937 += 1, R9938 += 1 };
  s0 -> s0 [0, 65535] { R10051 += 1, R10052 += 1 };
  s0 -> s2 [0, 65535] { R10052 += 1, R9938 += 1 };
  s1 -> s1 [0, 65535] { R10052 += 1, R9937 += 1, R9938 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10052 += 1, R9938 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10052 += 1 };
  s2 -> s2 [0, 65535] { R10052 += 1, R9938 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10052 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10054 += 1, R9940 += 1 };
  s0 -> s0 [0, 65535] { R10053 += 1, R10054 += 1 };
  s0 -> s2 [0, 65535] { R10054 += 1, R9939 += 1, R9940 += 1 };
  s1 -> s1 [0, 65535] { R10054 += 1, R9940 += 1 };
  s1 -> s4 [0, 65535] { R10054 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10054 += 1, R9940 += 1 };
  s2 -> s2 [0, 65535] { R10054 += 1, R9939 += 1, R9940 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10054 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 80] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s0 -> s0 [0, 65535] { R10055 += 1, R10056 += 1 };
  s0 -> s2 [0, 65535] { R10056 += 1, R9941 += 1, R9942 += 1 };
  s0 -> s1 [0, 65535] { R10056 += 1, R9942 += 1 };
  s0 -> s3 [81, 81] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s0 -> s4 [81, 81] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s0 -> s1 [82, 65535] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s1 -> s1 [0, 80] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s1 -> s5 [0, 65535] { R10056 += 1 };
  s1 -> s1 [0, 65535] { R10056 += 1, R9942 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [81, 81] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s1 -> s4 [81, 81] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s1 -> s1 [82, 65535] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s1 [0, 80] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s2 [0, 65535] { R10056 += 1, R9941 += 1, R9942 += 1 };
  s2 -> s1 [0, 65535] { R10056 += 1, R9942 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [81, 81] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s4 [81, 81] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s1 [82, 65535] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s3 -> s5 [0, 65535] { R10056 += 1 };
  s3 -> s3 [0, 65535] { R10056 += 1, R9942 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R10056 += 1 };
  s4 -> s4 [0, 65535] { R10056 += 1, R9942 += 1, R9917 += 1, R9918 += 1 };
  s4 -> s6 [0, 65535] { R10056 += 1, R9942 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10056 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R10056 += 1 };
  s6 -> s6 [0, 65535] { R10056 += 1, R9942 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R10057 += 1, R10058 += 1 };
  s0 -> s1 [0, 65535] { R10058 += 1, R9972 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R10058 += 1, R9971 += 1, R9972 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10058 += 1 };
  s1 -> s1 [0, 65535] { R10058 += 1, R9972 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10058 += 1, R9972 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R10058 += 1, R9971 += 1, R9972 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10058 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10060 += 1, R9974 += 1 };
  s0 -> s0 [0, 65535] { R10059 += 1, R10060 += 1 };
  s0 -> s2 [0, 65535] { R10060 += 1, R9973 += 1, R9974 += 1 };
  s0 -> s3 [65, 65] { R10060 += 1, R9974 += 1 };
  s0 -> s4 [65, 65] { R10060 += 1, R9974 += 1 };
  s0 -> s5 [81, 81] { R10060 += 1, R9974 += 1 };
  s0 -> s1 [82, 65535] { R10060 += 1, R9974 += 1 };
  s1 -> s1 [0, 64] { R10060 += 1, R9974 += 1 };
  s1 -> s3 [65, 65] { R10060 += 1, R9974 += 1 };
  s1 -> s4 [65, 65] { R10060 += 1, R9974 += 1 };
  s1 -> s5 [81, 81] { R10060 += 1, R9974 += 1 };
  s1 -> s1 [82, 65535] { R10060 += 1, R9974 += 1 };
  s2 -> s1 [0, 64] { R10060 += 1, R9974 += 1 };
  s2 -> s2 [0, 65535] { R10060 += 1, R9973 += 1, R9974 += 1 };
  s2 -> s3 [65, 65] { R10060 += 1, R9974 += 1 };
  s2 -> s4 [65, 65] { R10060 += 1, R9974 += 1 };
  s2 -> s5 [81, 81] { R10060 += 1, R9974 += 1 };
  s2 -> s1 [82, 65535] { R10060 += 1, R9974 += 1 };
  s3 -> s3 [0, 65] { R10060 += 1, R9974 += 1 };
  s3 -> s7 [81, 81] { R10060 += 1, R9974 += 1 };
  s3 -> s3 [82, 65535] { R10060 += 1, R9974 += 1 };
  s5 -> s5 [0, 64] { R10060 += 1, R9974 += 1 };
  s5 -> s5 [0, 65535] { R10060 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10060 += 1, R9974 += 1 };
  s5 -> s8 [65, 65] { R10060 += 1, R9974 += 1 };
  s5 -> s5 [81, 65535] { R10060 += 1, R9974 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10060 += 1, R9974 += 1 };
  s7 -> s7 [0, 65535] { R10060 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R10060 += 1, R9974 += 1 };
  s8 -> s8 [0, 65535] { R10060 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10062 += 1, R9976 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R10062 += 1, R9975 += 1, R9976 += 1 };
  s0 -> s0 [0, 65535] { R10061 += 1, R10062 += 1 };
  s0 -> s3 [65, 65] { R10062 += 1, R9976 += 1, R499 += 1 };
  s0 -> s4 [65, 65] { R10062 += 1, R9976 += 1, R499 += 1 };
  s0 -> s1 [66, 65535] { R10062 += 1, R9976 += 1, R499 += 1 };
  s1 -> s1 [0, 64] { R10062 += 1, R9976 += 1, R499 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10062 += 1 };
  s1 -> s3 [65, 65] { R10062 += 1, R9976 += 1, R499 += 1 };
  s1 -> s4 [65, 65] { R10062 += 1, R9976 += 1, R499 += 1 };
  s1 -> s1 [66, 65535] { R10062 += 1, R9976 += 1, R499 += 1 };
  s2 -> s1 [0, 64] { R10062 += 1, R9976 += 1, R499 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10062 += 1, R9975 += 1, R9976 += 1 };
  s2 -> s3 [65, 65] { R10062 += 1, R9976 += 1, R499 += 1 };
  s2 -> s4 [65, 65] { R10062 += 1, R9976 += 1, R499 += 1 };
  s2 -> s1 [66, 65535] { R10062 += 1, R9976 += 1, R499 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10062 += 1, R9976 += 1, R499 += 1 };
  s3 -> s6 [0, 65535] { R10062 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10062 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10062 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10064 += 1, R9978 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R10063 += 1, R10064 += 1 };
  s0 -> s2 [0, 65535] { R10064 += 1, R9977 += 1, R9978 += 1 };
  s0 -> s3 [65, 65] { R10064 += 1, R9978 += 1, R501 += 1 };
  s0 -> s4 [65, 65] { R10064 += 1, R9978 += 1, R501 += 1 };
  s0 -> s1 [66, 65535] { R10064 += 1, R9978 += 1, R501 += 1 };
  s1 -> s1 [0, 64] { R10064 += 1, R9978 += 1, R501 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10064 += 1 };
  s1 -> s3 [65, 65] { R10064 += 1, R9978 += 1, R501 += 1 };
  s1 -> s4 [65, 65] { R10064 += 1, R9978 += 1, R501 += 1 };
  s1 -> s1 [66, 65535] { R10064 += 1, R9978 += 1, R501 += 1 };
  s2 -> s1 [0, 64] { R10064 += 1, R9978 += 1, R501 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10064 += 1, R9977 += 1, R9978 += 1 };
  s2 -> s3 [65, 65] { R10064 += 1, R9978 += 1, R501 += 1 };
  s2 -> s4 [65, 65] { R10064 += 1, R9978 += 1, R501 += 1 };
  s2 -> s1 [66, 65535] { R10064 += 1, R9978 += 1, R501 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10064 += 1 };
  s4 -> s5 [0, 65535] { R10064 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10064 += 1, R9978 += 1, R501 += 1 };
  s5 -> s5 [0, 65535] { R10064 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s0 -> s0 [0, 65535] { R10065 += 1, R10066 += 1 };
  s0 -> s2 [0, 65535] { R10066 += 1, R9979 += 1, R9980 += 1 };
  s0 -> s3 [65, 65] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s0 -> s4 [65, 65] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s0 -> s1 [66, 65535] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [0, 64] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10066 += 1 };
  s1 -> s3 [65, 65] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s1 -> s4 [65, 65] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s1 -> s1 [66, 65535] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [0, 64] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10066 += 1, R9979 += 1, R9980 += 1 };
  s2 -> s3 [65, 65] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s2 -> s4 [65, 65] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s2 -> s1 [66, 65535] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10066 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10066 += 1 };
  s4 -> s4 [0, 65535] { R10066 += 1, R9980 += 1, R503 += 1, R504 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10066 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R10067 += 1, R10068 += 1 };
  s0 -> s2 [0, 65535] { R10068 += 1, R9981 += 1, R9982 += 1 };
  s0 -> s3 [65, 65] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s0 -> s4 [65, 65] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [66, 65535] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 64] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10068 += 1 };
  s1 -> s3 [65, 65] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [65, 65] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [66, 65535] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 64] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 65535] { R10068 += 1, R9981 += 1, R9982 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s2 -> s4 [65, 65] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [66, 65535] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s3 -> s3 [0, 65535] { R10068 += 1, R9982 += 1, R507 += 1, R508 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10068 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10068 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10068 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s0 -> s2 [0, 64] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s0 [0, 65535] { R10069 += 1, R10070 += 1 };
  s0 -> s3 [0, 65535] { R10070 += 1, R9983 += 1, R9984 += 1 };
  s0 -> s4 [65, 65] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s5 [65, 65] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s0 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s0 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s0 -> s2 [66, 65535] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s1 [91, 107] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s0 -> s8 [108, 108] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s0 -> s1 [109, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s1 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s1 -> s1 [0, 65535] { R10070 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s6 [65, 65] { R10070 += 1, R9984 += 1 };
  s1 -> s7 [65, 65] { R10070 += 1, R9984 += 1 };
  s1 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s1 -> s1 [66, 65535] { R10070 += 1, R9984 += 1 };
  s1 -> s1 [91, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s2 [0, 64] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s4 [65, 65] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s5 [65, 65] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s2 [66, 65535] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s2 -> s1 [91, 107] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s8 [108, 108] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s2 -> s1 [109, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s2 [0, 64] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s3 [0, 65535] { R10070 += 1, R9983 += 1, R9984 += 1 };
  s3 -> s4 [65, 65] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s5 [65, 65] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s2 [66, 65535] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s1 [91, 107] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s8 [108, 108] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s3 -> s1 [109, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s5 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s5 -> s5 [0, 65535] { R10070 += 1, R9984 += 1, R8059 += 1, R8060 += 1 };
  s5 -> s6 [91, 107] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s5 -> s9 [108, 108] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s5 -> s6 [109, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s6 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s6 -> s35 [0, 65535] { R10070 += 1 };
  s6 -> s6 [0, 65535] { R10070 += 1, R9984 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [91, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s7 -> s7 [0, 65535] { R10070 += 1 };
  s7 -> s34 [0, 65535];
  s8 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s8 -> s8 [0, 64] { R10070 += 1, R9984 += 1 };
  s8 -> s9 [65, 65] { R10070 += 1, R9984 += 1 };
  s8 -> s10 [65, 65] { R10070 += 1, R9984 += 1 };
  s8 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s8 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s8 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s8 -> s8 [66, 65535] { R10070 += 1, R9984 += 1 };
  s8 -> s1 [91, 110] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s8 -> s11 [111, 111] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s8 -> s1 [112, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s9 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s9 -> s9 [0, 65535] { R10070 += 1, R9984 += 1 };
  s9 -> s6 [91, 110] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s9 -> s13 [111, 111] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s9 -> s6 [112, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s11 [0, 64] { R10070 += 1, R9984 += 1 };
  s11 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s12 [65, 65] { R10070 += 1, R9984 += 1 };
  s11 -> s13 [65, 65] { R10070 += 1, R9984 += 1 };
  s11 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s11 [66, 65535] { R10070 += 1, R9984 += 1 };
  s11 -> s1 [91, 98] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s14 [99, 99] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s11 -> s1 [100, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s13 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s13 -> s13 [0, 65535] { R10070 += 1, R9984 += 1 };
  s13 -> s6 [91, 98] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s13 -> s17 [99, 99] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s13 -> s6 [100, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s14 [0, 64] { R10070 += 1, R9984 += 1 };
  s14 -> s15 [65, 65] { R10070 += 1, R9984 += 1 };
  s14 -> s16 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s17 [65, 65] { R10070 += 1, R9984 += 1 };
  s14 -> s18 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s14 [66, 65535] { R10070 += 1, R9984 += 1 };
  s14 -> s1 [91, 96] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s19 [97, 97] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s14 -> s1 [98, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s16 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s16 -> s16 [0, 65535] { R10070 += 1, R9984 += 1 };
  s16 -> s6 [91, 107] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s16 -> s22 [108, 108] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s16 -> s6 [109, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s17 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s17 -> s17 [0, 65535] { R10070 += 1, R9984 += 1 };
  s17 -> s6 [91, 96] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s17 -> s16 [97, 97] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s17 -> s6 [98, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s19 [0, 64] { R10070 += 1, R9984 += 1 };
  s19 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s16 [65, 65] { R10070 += 1, R9984 += 1 };
  s19 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s18 [65, 65] { R10070 += 1, R9984 += 1 };
  s19 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s19 [66, 65535] { R10070 += 1, R9984 += 1 };
  s19 -> s1 [91, 107] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s20 [108, 108] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s19 -> s1 [109, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s20 [0, 64] { R10070 += 1, R9984 += 1 };
  s20 -> s21 [65, 65] { R10070 += 1, R9984 += 1 };
  s20 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s22 [65, 65] { R10070 += 1, R9984 += 1 };
  s20 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s20 [66, 65535] { R10070 += 1, R9984 += 1 };
  s20 -> s1 [91, 103] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s23 [104, 104] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s20 -> s1 [105, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s22 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s22 -> s22 [0, 65535] { R10070 += 1, R9984 += 1 };
  s22 -> s6 [91, 103] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s22 -> s25 [104, 104] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s22 -> s6 [105, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s23 [0, 64] { R10070 += 1, R9984 += 1 };
  s23 -> s24 [65, 65] { R10070 += 1, R9984 += 1 };
  s23 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s25 [65, 65] { R10070 += 1, R9984 += 1 };
  s23 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s23 [66, 65535] { R10070 += 1, R9984 += 1 };
  s23 -> s1 [91, 110] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s26 [111, 111] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s23 -> s1 [112, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s25 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s25 -> s25 [0, 65535] { R10070 += 1, R9984 += 1 };
  s25 -> s6 [91, 110] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s25 -> s28 [111, 111] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s25 -> s6 [112, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s26 [0, 64] { R10070 += 1, R9984 += 1 };
  s26 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s27 [65, 65] { R10070 += 1, R9984 += 1 };
  s26 -> s28 [65, 65] { R10070 += 1, R9984 += 1 };
  s26 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s26 [66, 65535] { R10070 += 1, R9984 += 1 };
  s26 -> s1 [91, 114] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s29 [115, 115] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s26 -> s1 [116, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s28 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s28 -> s28 [0, 65535] { R10070 += 1, R9984 += 1 };
  s28 -> s6 [91, 114] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s28 -> s30 [115, 115] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s28 -> s6 [116, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s29 [0, 64] { R10070 += 1, R9984 += 1 };
  s29 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s30 [65, 65] { R10070 += 1, R9984 += 1 };
  s29 -> s31 [65, 65] { R10070 += 1, R9984 += 1 };
  s29 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s29 [66, 65535] { R10070 += 1, R9984 += 1 };
  s29 -> s1 [91, 115] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s32 [116, 116] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s29 -> s1 [117, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s30 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s30 -> s30 [0, 65535] { R10070 += 1, R9984 += 1 };
  s30 -> s6 [91, 115] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s30 -> s33 [116, 116] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s30 -> s6 [117, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s32 -> s1 [0, 64] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s32 -> s6 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s32 -> s7 [65, 65] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s32 -> s1 [66, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s32 -> s1 [91, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s33 -> s6 [0, 81] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s33 -> s6 [91, 65535] { R10070 += 1, R9984 += 1, R8060 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10070 += 1 };
  s35 -> s34 [0, 65535];
  accepting s34, s6, s1, s7, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s0 [0, 65535] { R10071 += 1, R10072 += 1 };
  s0 -> s2 [0, 65535] { R10072 += 1, R9985 += 1, R9986 += 1 };
  s0 -> s3 [65, 65] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s4 [65, 65] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s1 [66, 65535] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [0, 64] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10072 += 1 };
  s1 -> s3 [65, 65] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s4 [65, 65] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [66, 65535] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [0, 64] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10072 += 1, R9985 += 1, R9986 += 1 };
  s2 -> s3 [65, 65] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s4 [65, 65] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [66, 65535] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s3 -> s3 [0, 65535] { R10072 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10072 += 1, R9986 += 1, R8063 += 1, R8064 += 1 };
  s4 -> s6 [0, 65535] { R10072 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10072 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s2 [0, 64] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s3 [0, 65535] { R10074 += 1, R9987 += 1, R9988 += 1 };
  s0 -> s0 [0, 65535] { R10073 += 1, R10074 += 1 };
  s0 -> s4 [65, 65] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s5 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s6 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s7 [65, 65] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s0 -> s1 [66, 65535] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s0 -> s2 [66, 65535] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s1 -> s11 [0, 64] { R10074 += 1, R9988 += 1 };
  s1 -> s1 [0, 64] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s5 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s6 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s1 -> s8 [65, 65] { R10074 += 1, R9988 += 1 };
  s1 -> s12 [65, 65] { R10074 += 1, R9988 += 1 };
  s1 -> s11 [66, 65535] { R10074 += 1, R9988 += 1 };
  s1 -> s1 [66, 65535] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s1 [0, 64] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s2 [0, 64] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s2 -> s4 [65, 65] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s2 -> s5 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s6 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s7 [65, 65] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s2 -> s1 [66, 65535] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s2 -> s2 [66, 65535] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s1 [0, 64] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s2 [0, 64] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s3 [0, 65535] { R10074 += 1, R9987 += 1, R9988 += 1 };
  s3 -> s4 [65, 65] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s5 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s6 [65, 65] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s7 [65, 65] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s3 -> s1 [66, 65535] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s3 -> s2 [66, 65535] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s4 -> s4 [0, 65535] { R10074 += 1, R9988 += 1, R9741 += 1, R9742 += 1 };
  s4 -> s5 [0, 65535] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s5 -> s5 [0, 65535] { R10074 += 1, R9988 += 1, R9742 += 1, R9743 += 1 };
  s5 -> s8 [0, 65535] { R10074 += 1, R9988 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10074 += 1 };
  s8 -> s8 [0, 65535] { R10074 += 1, R9988 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10074 += 1 };
  s11 -> s11 [0, 64] { R10074 += 1, R9988 += 1 };
  s11 -> s11 [0, 65535] { R10074 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [65, 65] { R10074 += 1, R9988 += 1 };
  s11 -> s12 [65, 65] { R10074 += 1, R9988 += 1 };
  s11 -> s11 [66, 65535] { R10074 += 1, R9988 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10074 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10076 += 1, R9990 += 1 };
  s0 -> s0 [0, 65535] { R10075 += 1, R10076 += 1 };
  s0 -> s2 [0, 65535] { R10076 += 1, R9989 += 1, R9990 += 1 };
  s0 -> s3 [65, 65] { R10076 += 1, R9990 += 1 };
  s0 -> s4 [65, 65] { R10076 += 1, R9990 += 1 };
  s0 -> s1 [66, 65535] { R10076 += 1, R9990 += 1 };
  s1 -> s1 [0, 64] { R10076 += 1, R9990 += 1 };
  s1 -> s1 [0, 65535] { R10076 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10076 += 1, R9990 += 1 };
  s1 -> s4 [65, 65] { R10076 += 1, R9990 += 1 };
  s1 -> s1 [66, 65535] { R10076 += 1, R9990 += 1 };
  s2 -> s1 [0, 64] { R10076 += 1, R9990 += 1 };
  s2 -> s2 [0, 65535] { R10076 += 1, R9989 += 1, R9990 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10076 += 1, R9990 += 1 };
  s2 -> s4 [65, 65] { R10076 += 1, R9990 += 1 };
  s2 -> s1 [66, 65535] { R10076 += 1, R9990 += 1 };
  s3 -> s6 [0, 65535] { R10076 += 1 };
  s3 -> s3 [0, 65535] { R10076 += 1, R9990 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10076 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10076 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s2 [0, 64] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s0 -> s0 [0, 65535] { R10077 += 1, R10078 += 1 };
  s0 -> s3 [0, 65535] { R10078 += 1, R9991 += 1, R9992 += 1 };
  s0 -> s4 [65, 65] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s5 [65, 65] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s0 -> s6 [65, 65] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s7 [65, 65] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s0 -> s2 [66, 80] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s0 -> s1 [66, 65535] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s2 [82, 65535] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s1 -> s1 [0, 64] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s1 -> s2 [0, 64] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s1 -> s4 [65, 65] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s1 -> s5 [65, 65] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s1 -> s6 [65, 65] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s1 -> s7 [65, 65] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s1 -> s2 [66, 80] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s1 -> s1 [66, 65535] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s1 -> s2 [82, 65535] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s2 -> s2 [0, 64] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R10078 += 1 };
  s2 -> s5 [65, 65] { R10078 += 1, R9992 += 1 };
  s2 -> s7 [65, 65] { R10078 += 1, R9992 += 1 };
  s2 -> s2 [66, 80] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s2 -> s2 [66, 65535] { R10078 += 1, R9992 += 1 };
  s2 -> s2 [82, 65535] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s3 -> s1 [0, 64] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s2 [0, 64] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s3 -> s3 [0, 65535] { R10078 += 1, R9991 += 1, R9992 += 1 };
  s3 -> s4 [65, 65] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s5 [65, 65] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s3 -> s6 [65, 65] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s7 [65, 65] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s3 -> s2 [66, 80] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s3 -> s1 [66, 65535] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s2 [82, 65535] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s4 -> s7 [0, 80] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s4 -> s4 [0, 65535] { R10078 += 1, R9992 += 1, R9913 += 1, R9914 += 1 };
  s4 -> s7 [82, 65535] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s5 -> s5 [0, 65535] { R10078 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s7 [0, 80] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10078 += 1, R9992 += 1 };
  s7 -> s9 [0, 65535] { R10078 += 1 };
  s7 -> s7 [82, 65535] { R10078 += 1, R9992 += 1, R9914 += 1, R9915 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10078 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R9942 && R5 = R10078 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R70 + R69 + -1*R84 + -1*R82 = 0 && R83 + R81 = 0 && R9919 = 0 && R9920 = R9942 && R9921 = 0 && R9922 = R9942 && R9923 = 0 && R9924 = R9942 && R9925 = 0 && R9926 = R9942 && R9927 = 0 && R9928 = R9942 && R9929 = 0 && R9930 = R9942 && R9931 = 0 && R9932 = R9942 && R9933 = 0 && R9934 = R9942 && R9935 = 0 && R9936 = R9942 && R9937 = 0 && R9938 = R9942 && R9939 = 0 && R9940 = R9942 && R9941 = 0 && R9943 = 0 && R9944 = R10078 && R9945 = 0 && R9946 = R10078 && R9947 = 0 && R9948 = R10078 && R9949 = 0 && R9950 = R10078 && R9951 = 0 && R9952 = R10078 && R9953 = 0 && R9954 = R10078 && R9955 = 0 && R9956 = R10078 && R9957 = 0 && R9958 = R10078 && R9959 = 0 && R9960 = R10078 && R9961 = 0 && R9962 = R10078 && R9963 = 0 && R9964 = R10078 && R9965 = 0 && R9966 = R10078 && R9967 = 0 && R9968 = R10078 && R9969 = 0 && R9970 = R10078 && R9973 = 0 && R9974 = 0 && R9983 = 0 && R9984 = 0 && R9987 = 0 && R9988 = 0 && R9991 = 0 && R9992 = 0 && R10021 = 10 && R10022 = R10078 && R10023 = 10 && R10024 = R10078 && R10025 = 10 && R10026 = R10078 && R10027 = 10 && R10028 = R10078 && R10029 = 10 && R10030 = R10078 && R10031 = 10 && R10032 = R10078 && R10033 = 10 && R10034 = R10078 && R10035 = 10 && R10036 = R10078 && R10037 = 10 && R10038 = R10078 && R10039 = 10 && R10040 = R10078 && R10041 = 10 && R10042 = R10078 && R10043 = 10 && R10044 = R10078 && R10045 = 10 && R10046 = R10078 && R10047 = 10 && R10048 = R10078 && R10049 = 10 && R10050 = R10078 && R10051 = 10 && R10052 = R10078 && R10053 = 10 && R10054 = R10078 && R10055 = 10 && R10056 = R10078 && R10057 = 10 && R10058 = R10078 && R10059 = 10 && R10060 = R10078 && R10061 = 10 && R10062 = R10078 && R10063 = 10 && R10064 = R10078 && R10065 = 10 && R10066 = R10078 && R10067 = 10 && R10068 = R10078 && R10069 = 10 && R10070 = R10078 && R10071 = 10 && R10072 = R10078 && R10073 = 10 && R10074 = R10078 && R10075 = 10 && R10076 = R10078 && R10077 = 10 && R100 + R97 + R118 + R115 != 0 && R8068 + R8065 + R9918 + R9915 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R72 + R71 < 1 && R74 + R73 < 1 && -1*R84 + -1*R82 < 1 && -1*R500 + -1*R499 < 1 && R502 + R501 < 1 && 0 < R9942 && 9 < R10078 && (R80 + R77 != 0 || ((R78 + R75 != 0 || R79 + R76 + -1*R84 + -1*R82 = 0 || R84 + R82 < 1) && (R78 + R75 = 0 || R84 + R82 < 1))) && (R84 + R82 != 0 || R90 + R87 = 0 || (R88 + R85 = 0 && R89 + R86 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R93 + R91 = 0 && R94 + R92 = 0)) && (R84 + R82 != 0 || R90 + R87 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R88 + R85 != 0 || R84 + R82 + -1*R89 + -1*R86 = 0 || R84 + R82 < 1) && (R93 + R91 != 0 || R84 + R82 + -1*R94 + -1*R92 = 0 || R84 + R82 < 1) && (R98 + R95 != 0 || R84 + R82 + -1*R99 + -1*R96 = 0 || R84 + R82 < 1) && (R500 + R499 != 0 || R512 + R509 = 0 || (R505 + R503 = 0 && R506 + R504 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R510 + R507 = 0 && R511 + R508 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R8061 + R8059 = 0 && R8062 + R8060 = 0)) && (R500 + R499 != 0 || R512 + R509 = 0 || (R8066 + R8063 = 0 && R8067 + R8064 = 0)) && (R505 + R503 != 0 || R500 + R499 + -1*R506 + -1*R504 = 0 || R500 + R499 < 1) && (R510 + R507 != 0 || R500 + R499 + -1*R511 + -1*R508 = 0 || R500 + R499 < 1) && (R8061 + R8059 != 0 || R500 + R499 + -1*R8062 + -1*R8060 = 0 || R500 + R499 < 1) && (R8066 + R8063 != 0 || R500 + R499 + -1*R8067 + -1*R8064 = 0 || R500 + R499 < 1) && (R30 = 0 || (R9971 = 0 && R9972 = 0)) && (R30 = 0 || (R9975 = 0 && R9976 = 0)) && (R30 = 0 || (R9977 = 0 && R9978 = 0)) && (R30 = 0 || (R9979 = 0 && R9980 = 0)) && (R30 = 0 || (R9981 = 0 && R9982 = 0)) && (R30 = 0 || (R9985 = 0 && R9986 = 0)) && (R30 = 0 || (R9989 = 0 && R9990 = 0)) && (R32 = 0 || (R9993 = 0 && R9994 = 0)) && (R32 = 0 || (R9995 = 0 && R9996 = 0)) && (R32 = 0 || (R9997 = 0 && R9998 = 0)) && (R32 = 0 || (R9999 = 0 && R10000 = 0)) && (R32 = 0 || (R10001 = 0 && R10002 = 0)) && (R32 = 0 || (R10003 = 0 && R10004 = 0)) && (R32 = 0 || (R10005 = 0 && R10006 = 0)) && (R32 = 0 || (R10007 = 0 && R10008 = 0)) && (R32 = 0 || (R10009 = 0 && R10010 = 0)) && (R32 = 0 || (R10011 = 0 && R10012 = 0)) && (R32 = 0 || (R10013 = 0 && R10014 = 0)) && (R32 = 0 || (R10015 = 0 && R10016 = 0)) && (R32 = 0 || (R10017 = 0 && R10018 = 0)) && (R32 = 0 || (R10019 = 0 && R10020 = 0)) && (R80 + R77 = 0 || (R78 + R75 = 0 && R79 + R76 + -1*R84 + -1*R82 = 0)) && (R88 + R85 = 0 || R84 + R82 < 1) && (R93 + R91 = 0 || R84 + R82 < 1) && (R98 + R95 = 0 || R84 + R82 < 1) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R112 + R109 = 0 || (R116 + R113 = 0 && R117 + R114 = 0)) && (R505 + R503 = 0 || R500 + R499 < 1) && (R510 + R507 = 0 || R500 + R499 < 1) && (R8061 + R8059 = 0 || R500 + R499 < 1) && (R8066 + R8063 = 0 || R500 + R499 < 1) && (R9746 + R9743 = 0 || (R9744 + R9741 = 0 && R9745 + R9742 = 0)) && (R9746 + R9743 = 0 || (R9916 + R9913 = 0 && R9917 + R9914 = 0));
// End of Parikh automata intersection problem
