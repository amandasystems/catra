// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R11782 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R11781 += 1, R11782 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11782 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R11783 += 1, R11784 += 1 };
  s0 -> s1 [0, 65535] { R11784 += 1, R68 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11784 += 1, R68 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R11786 += 1 };
  s0 -> s2 [0, 65535] { R11786 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R11785 += 1, R11786 += 1 };
  s0 -> s1 [90, 65535] { R11786 += 1 };
  s1 -> s1 [0, 88] { R11786 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R11786 += 1 };
  s2 -> s1 [0, 88] { R11786 += 1 };
  s2 -> s2 [0, 65535] { R11786 += 1, R70 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R11786 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R11788 += 1 };
  s0 -> s2 [0, 65535] { R11788 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R11787 += 1, R11788 += 1 };
  s0 -> s1 [74, 65535] { R11788 += 1 };
  s1 -> s1 [0, 72] { R11788 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R11788 += 1 };
  s2 -> s1 [0, 72] { R11788 += 1 };
  s2 -> s2 [0, 65535] { R11788 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R11788 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R11789 += 1, R11790 += 1 };
  s0 -> s1 [0, 65535] { R11790 += 1, R76 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R11790 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R11790 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11790 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11790 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [0, 65535] { R11790 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11790 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R11792 += 1 };
  s0 -> s0 [0, 65535] { R11791 += 1, R11792 += 1 };
  s1 -> s1 [0, 65535] { R11792 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R11794 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R11793 += 1, R11794 += 1 };
  s0 -> s2 [0, 65535] { R11794 += 1, R82 += 1, R83 += 1 };
  s1 -> s4 [0, 65535] { R11794 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11794 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11794 += 1, R83 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R11794 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11794 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R11796 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R11796 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R11795 += 1, R11796 += 1 };
  s0 -> s3 [108, 108] { R11796 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R11796 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R11796 += 1, R88 += 1 };
  s1 -> s13 [0, 65535] { R11796 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R11796 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R11796 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R11796 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R11796 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R11796 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R11796 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R11796 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R11796 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R11796 += 1, R88 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11796 += 1 };
  s5 -> s6 [99, 99] { R11796 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R11796 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R11796 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R11796 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R11796 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R11796 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R11796 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R11796 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R11796 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R11796 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R11796 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R11796 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R11796 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R11796 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R11796 += 1, R88 += 1 };
  s9 -> s9 [0, 65535] { R11796 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R11796 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R11796 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R11796 += 1, R88 += 1 };
  s10 -> s10 [0, 65535] { R11796 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R11796 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R11796 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R11796 += 1, R88 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R11796 += 1 };
  s11 -> s12 [116, 116] { R11796 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R11796 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R11796 += 1, R88 += 1 };
  s13 -> s13 [0, 65535] { R11796 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R11797 += 1, R11798 += 1 };
  s0 -> s1 [0, 65535] { R11798 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R11798 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11798 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R11798 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11798 += 1 };
  s2 -> s2 [0, 65535] { R11798 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11798 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R11800 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R11800 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R11799 += 1, R11800 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11800 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R11800 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11800 += 1 };
  s2 -> s2 [0, 65535] { R11800 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11800 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R11801 += 1, R11802 += 1 };
  s0 -> s1 [0, 65535] { R11802 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11802 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R11803 += 1, R11804 += 1 };
  s0 -> s1 [0, 65535] { R11804 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R11804 += 1, R104 += 1, R105 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11804 += 1 };
  s1 -> s1 [0, 65535] { R11804 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11804 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R11804 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11804 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11806 += 1 };
  s0 -> s0 [0, 65535] { R11805 += 1, R11806 += 1 };
  s1 -> s1 [0, 65535] { R11806 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R11808 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R11807 += 1, R11808 += 1 };
  s0 -> s2 [0, 65535] { R11808 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [73, 73] { R11808 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R11808 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R11808 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R11808 += 1, R111 += 1, R112 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11808 += 1 };
  s1 -> s3 [73, 73] { R11808 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R11808 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R11808 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R11808 += 1, R111 += 1, R112 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11808 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [73, 73] { R11808 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R11808 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R11808 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535] { R11808 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11808 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11808 += 1, R111 += 1, R112 += 1 };
  s5 -> s5 [0, 65535] { R11808 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R11831 += 1, R11832 += 1 };
  s0 -> s1 [0, 65535] { R11832 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11832 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R11834 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R11833 += 1, R11834 += 1 };
  s0 -> s2 [65, 65] { R11834 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R11834 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R11834 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R11834 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11834 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R11834 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R11834 += 1, R67 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11834 += 1, R67 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R11836 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R11835 += 1, R11836 += 1 };
  s0 -> s2 [65, 65] { R11836 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R11836 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R11836 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R11836 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11836 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R11836 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R11836 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R11836 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R11838 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R11837 += 1, R11838 += 1 };
  s0 -> s2 [65, 65] { R11838 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R11838 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R11838 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R11838 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11838 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R11838 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R11838 += 1, R71 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11838 += 1, R71 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R11840 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R11839 += 1, R11840 += 1 };
  s0 -> s2 [65, 65] { R11840 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R11840 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R11840 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R11840 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11840 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R11840 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R11840 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11840 += 1, R73 += 1, R74 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R11842 += 1 };
  s0 -> s0 [0, 65535] { R11841 += 1, R11842 += 1 };
  s0 -> s2 [65, 65] { R11842 += 1 };
  s0 -> s3 [65, 65] { R11842 += 1 };
  s0 -> s1 [66, 65535] { R11842 += 1 };
  s1 -> s1 [0, 64] { R11842 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11842 += 1 };
  s1 -> s3 [65, 65] { R11842 += 1 };
  s1 -> s1 [66, 65535] { R11842 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11842 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R11844 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R11843 += 1, R11844 += 1 };
  s0 -> s2 [65, 65] { R11844 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R11844 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R11844 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R11844 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11844 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R11844 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R11844 += 1, R79 += 1, R80 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11844 += 1, R79 += 1, R80 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R11846 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R11845 += 1, R11846 += 1 };
  s0 -> s2 [65, 65] { R11846 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R11846 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R11846 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R11846 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11846 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R11846 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R11846 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11846 += 1, R85 += 1, R86 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R11848 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R11847 += 1, R11848 += 1 };
  s0 -> s2 [65, 65] { R11848 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R11848 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R11848 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R11848 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11848 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R11848 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R11848 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R11848 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R11850 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R11849 += 1, R11850 += 1 };
  s0 -> s2 [65, 65] { R11850 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R11850 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R11850 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R11850 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11850 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R11850 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R11850 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11850 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R11852 += 1 };
  s0 -> s0 [0, 65535] { R11851 += 1, R11852 += 1 };
  s0 -> s2 [65, 65] { R11852 += 1 };
  s0 -> s3 [65, 65] { R11852 += 1 };
  s0 -> s1 [66, 65535] { R11852 += 1 };
  s1 -> s1 [0, 64] { R11852 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11852 += 1 };
  s1 -> s3 [65, 65] { R11852 += 1 };
  s1 -> s1 [66, 65535] { R11852 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11852 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R11854 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R11853 += 1, R11854 += 1 };
  s0 -> s2 [65, 65] { R11854 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R11854 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R11854 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R11854 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11854 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R11854 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R11854 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11854 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R11856 += 1 };
  s0 -> s0 [0, 65535] { R11855 += 1, R11856 += 1 };
  s0 -> s2 [65, 65] { R11856 += 1 };
  s0 -> s3 [65, 65] { R11856 += 1 };
  s0 -> s1 [66, 65535] { R11856 += 1 };
  s1 -> s1 [0, 64] { R11856 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11856 += 1 };
  s1 -> s3 [65, 65] { R11856 += 1 };
  s1 -> s1 [66, 65535] { R11856 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11856 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R11858 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R11857 += 1, R11858 += 1 };
  s0 -> s2 [65, 65] { R11858 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R11858 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R11858 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R11858 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R11858 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R11858 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R11858 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R11858 += 1, R107 += 1, R108 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R11860 += 1 };
  s0 -> s0 [0, 65535] { R11859 += 1, R11860 += 1 };
  s0 -> s1 [45, 45] { R11860 += 1 };
  s0 -> s2 [46, 46] { R11860 += 1 };
  s0 -> s1 [48, 62] { R11860 += 1 };
  s0 -> s3 [65, 65] { R11860 += 1 };
  s0 -> s1 [66, 65535] { R11860 += 1 };
  s1 -> s1 [0, 43] { R11860 += 1 };
  s1 -> s1 [45, 45] { R11860 += 1 };
  s1 -> s2 [46, 46] { R11860 += 1 };
  s1 -> s1 [48, 62] { R11860 += 1 };
  s1 -> s3 [65, 65] { R11860 += 1 };
  s1 -> s1 [66, 65535] { R11860 += 1 };
  s2 -> s1 [0, 43] { R11860 += 1 };
  s2 -> s1 [45, 45] { R11860 += 1 };
  s2 -> s2 [46, 46] { R11860 += 1 };
  s2 -> s1 [48, 62] { R11860 += 1 };
  s2 -> s3 [65, 65] { R11860 += 1 };
  s2 -> s1 [66, 114] { R11860 += 1 };
  s2 -> s8 [115, 115] { R11860 += 1 };
  s2 -> s1 [116, 65535] { R11860 += 1 };
  s3 -> s3 [0, 43] { R11860 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R11860 += 1 };
  s3 -> s4 [46, 46] { R11860 += 1 };
  s3 -> s3 [48, 62] { R11860 += 1 };
  s3 -> s3 [65, 65535] { R11860 += 1 };
  s4 -> s3 [0, 43] { R11860 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R11860 += 1 };
  s4 -> s4 [46, 46] { R11860 += 1 };
  s4 -> s3 [48, 62] { R11860 += 1 };
  s4 -> s3 [65, 114] { R11860 += 1 };
  s4 -> s5 [115, 115] { R11860 += 1 };
  s4 -> s3 [116, 65535] { R11860 += 1 };
  s5 -> s3 [0, 43] { R11860 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R11860 += 1 };
  s5 -> s4 [46, 46] { R11860 += 1 };
  s5 -> s3 [48, 62] { R11860 += 1 };
  s5 -> s3 [65, 110] { R11860 += 1 };
  s5 -> s6 [111, 111] { R11860 += 1 };
  s5 -> s3 [112, 65535] { R11860 += 1 };
  s6 -> s3 [0, 43] { R11860 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R11860 += 1 };
  s6 -> s4 [46, 46] { R11860 += 1 };
  s6 -> s3 [48, 62] { R11860 += 1 };
  s6 -> s3 [65, 98] { R11860 += 1 };
  s6 -> s7 [99, 99] { R11860 += 1 };
  s6 -> s3 [100, 65535] { R11860 += 1 };
  s7 -> s3 [0, 43] { R11860 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R11860 += 1 };
  s7 -> s4 [46, 46] { R11860 += 1 };
  s7 -> s3 [48, 62] { R11860 += 1 };
  s7 -> s3 [65, 106] { R11860 += 1 };
  s7 -> s3 [108, 65535] { R11860 += 1 };
  s8 -> s1 [0, 43] { R11860 += 1 };
  s8 -> s1 [45, 45] { R11860 += 1 };
  s8 -> s2 [46, 46] { R11860 += 1 };
  s8 -> s1 [48, 62] { R11860 += 1 };
  s8 -> s3 [65, 65] { R11860 += 1 };
  s8 -> s1 [66, 110] { R11860 += 1 };
  s8 -> s9 [111, 111] { R11860 += 1 };
  s8 -> s1 [112, 65535] { R11860 += 1 };
  s9 -> s1 [0, 43] { R11860 += 1 };
  s9 -> s1 [45, 45] { R11860 += 1 };
  s9 -> s2 [46, 46] { R11860 += 1 };
  s9 -> s1 [48, 62] { R11860 += 1 };
  s9 -> s3 [65, 65] { R11860 += 1 };
  s9 -> s1 [66, 98] { R11860 += 1 };
  s9 -> s10 [99, 99] { R11860 += 1 };
  s9 -> s1 [100, 65535] { R11860 += 1 };
  s10 -> s1 [0, 43] { R11860 += 1 };
  s10 -> s1 [45, 45] { R11860 += 1 };
  s10 -> s2 [46, 46] { R11860 += 1 };
  s10 -> s1 [48, 62] { R11860 += 1 };
  s10 -> s3 [65, 65] { R11860 += 1 };
  s10 -> s1 [66, 106] { R11860 += 1 };
  s10 -> s1 [108, 65535] { R11860 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R11861 += 1, R11862 += 1 };
  s0 -> s1 [0, 65535] { R11862 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R11862 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R11864 += 1 };
  s0 -> s2 [0, 65535] { R11864 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R11863 += 1, R11864 += 1 };
  s0 -> s3 [58, 58] { R11864 += 1 };
  s0 -> s1 [59, 65535] { R11864 += 1 };
  s1 -> s1 [0, 57] { R11864 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R11864 += 1 };
  s1 -> s1 [59, 65535] { R11864 += 1 };
  s2 -> s1 [0, 57] { R11864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11864 += 1, R16 += 1 };
  s2 -> s3 [58, 58] { R11864 += 1 };
  s2 -> s1 [59, 65535] { R11864 += 1 };
  s3 -> s3 [0, 65535] { R11864 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R11866 += 1 };
  s0 -> s0 [0, 65535] { R11865 += 1, R11866 += 1 };
  s0 -> s2 [0, 65535] { R11866 += 1, R17 += 1 };
  s0 -> s3 [65, 65] { R11866 += 1 };
  s0 -> s1 [66, 65535] { R11866 += 1 };
  s1 -> s1 [0, 64] { R11866 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R11866 += 1 };
  s1 -> s1 [66, 65535] { R11866 += 1 };
  s2 -> s1 [0, 64] { R11866 += 1 };
  s2 -> s2 [0, 65535] { R11866 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R11866 += 1 };
  s2 -> s1 [66, 65535] { R11866 += 1 };
  s3 -> s3 [0, 65535] { R11866 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R11868 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R11867 += 1, R11868 += 1 };
  s0 -> s2 [0, 65535] { R11868 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [91, 91] { R11868 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R11868 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11868 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R11868 += 1 };
  s2 -> s1 [0, 90] { R11868 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11868 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [91, 91] { R11868 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R11868 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R11868 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11868 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R11870 += 1, R36 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R11870 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R11869 += 1, R11870 += 1 };
  s1 -> s4 [0, 65535] { R11870 += 1 };
  s1 -> s1 [0, 65535] { R11870 += 1, R36 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11870 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11870 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11870 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R11872 += 1, R11758 += 1 };
  s0 -> s0 [0, 65535] { R11871 += 1, R11872 += 1 };
  s0 -> s2 [0, 65535] { R11872 += 1, R11757 += 1, R11758 += 1 };
  s0 -> s1 [66, 65535] { R11872 += 1, R11758 += 1 };
  s1 -> s1 [0, 64] { R11872 += 1, R11758 += 1 };
  s1 -> s1 [0, 65535] { R11872 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R11872 += 1, R11758 += 1 };
  s2 -> s1 [0, 64] { R11872 += 1, R11758 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11872 += 1, R11757 += 1, R11758 += 1 };
  s2 -> s1 [66, 65535] { R11872 += 1, R11758 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R11874 += 1, R11760 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R11874 += 1, R11759 += 1, R11760 += 1 };
  s0 -> s0 [0, 65535] { R11873 += 1, R11874 += 1 };
  s1 -> s1 [0, 65535] { R11874 += 1, R11760 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11874 += 1 };
  s2 -> s1 [0, 65535] { R11874 += 1, R11760 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11874 += 1, R11759 += 1, R11760 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11874 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R11876 += 1, R11762 += 1 };
  s0 -> s0 [0, 65535] { R11875 += 1, R11876 += 1 };
  s0 -> s2 [0, 65535] { R11876 += 1, R11761 += 1, R11762 += 1 };
  s0 -> s1 [81, 65535] { R11876 += 1, R11762 += 1 };
  s1 -> s1 [0, 65] { R11876 += 1, R11762 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11876 += 1 };
  s1 -> s1 [81, 65535] { R11876 += 1, R11762 += 1 };
  s2 -> s1 [0, 65] { R11876 += 1, R11762 += 1 };
  s2 -> s2 [0, 65535] { R11876 += 1, R11761 += 1, R11762 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R11876 += 1, R11762 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R11878 += 1, R11764 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R11878 += 1, R11763 += 1, R11764 += 1 };
  s0 -> s0 [0, 65535] { R11877 += 1, R11878 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11878 += 1, R11764 += 1, R494 += 1 };
  s1 -> s4 [0, 65535] { R11878 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11878 += 1, R11764 += 1, R494 += 1 };
  s2 -> s2 [0, 65535] { R11878 += 1, R11763 += 1, R11764 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11878 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R11880 += 1, R11766 += 1 };
  s0 -> s0 [0, 65535] { R11879 += 1, R11880 += 1 };
  s0 -> s2 [0, 65535] { R11880 += 1, R11765 += 1, R11766 += 1 };
  s0 -> s3 [0, 65535] { R11880 += 1, R11766 += 1, R496 += 1 };
  s0 -> s1 [82, 65535] { R11880 += 1, R11766 += 1 };
  s1 -> s1 [0, 80] { R11880 += 1, R11766 += 1 };
  s1 -> s1 [0, 65535] { R11880 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R11880 += 1, R11766 += 1 };
  s2 -> s1 [0, 80] { R11880 += 1, R11766 += 1 };
  s2 -> s2 [0, 65535] { R11880 += 1, R11765 += 1, R11766 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11880 += 1, R11766 += 1, R496 += 1 };
  s2 -> s1 [82, 65535] { R11880 += 1, R11766 += 1 };
  s3 -> s1 [0, 80] { R11880 += 1, R11766 += 1 };
  s3 -> s4 [0, 65535] { R11880 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11880 += 1, R11766 += 1, R496 += 1 };
  s3 -> s1 [82, 65535] { R11880 += 1, R11766 += 1 };
  s4 -> s4 [0, 65535] { R11880 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R11882 += 1, R11768 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R11882 += 1, R11768 += 1, R499 += 1, R500 += 1 };
  s0 -> s3 [0, 65535] { R11882 += 1, R11767 += 1, R11768 += 1 };
  s0 -> s0 [0, 65535] { R11881 += 1, R11882 += 1 };
  s0 -> s1 [82, 65535] { R11882 += 1, R11768 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R11882 += 1, R11768 += 1, R500 += 1 };
  s1 -> s5 [0, 65535] { R11882 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11882 += 1, R11768 += 1 };
  s1 -> s1 [82, 65535] { R11882 += 1, R11768 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R11882 += 1, R11768 += 1, R500 += 1 };
  s2 -> s5 [0, 65535] { R11882 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11882 += 1, R11768 += 1, R499 += 1, R500 += 1 };
  s2 -> s1 [82, 65535] { R11882 += 1, R11768 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R11882 += 1, R11768 += 1, R500 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11882 += 1, R11768 += 1, R499 += 1, R500 += 1 };
  s3 -> s3 [0, 65535] { R11882 += 1, R11767 += 1, R11768 += 1 };
  s3 -> s1 [82, 65535] { R11882 += 1, R11768 += 1, R500 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11882 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R11884 += 1, R11769 += 1, R11770 += 1 };
  s0 -> s2 [0, 65535] { R11884 += 1, R11770 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [0, 65535] { R11884 += 1, R11770 += 1, R505 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R11883 += 1, R11884 += 1 };
  s1 -> s1 [0, 65535] { R11884 += 1, R11769 += 1, R11770 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11884 += 1, R11770 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [0, 65535] { R11884 += 1, R11770 += 1, R505 += 1, R506 += 1 };
  s2 -> s4 [0, 65535] { R11884 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11884 += 1, R11770 += 1, R504 += 1, R505 += 1 };
  s2 -> s3 [0, 65535] { R11884 += 1, R11770 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535] { R11884 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11884 += 1, R11770 += 1, R505 += 1, R506 += 1 };
  s3 -> s6 [0, 65535] { R11884 += 1, R11770 += 1 };
  s4 -> s4 [0, 65535] { R11884 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11884 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11884 += 1, R11770 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R11886 += 1, R11772 += 1, R8056 += 1 };
  s0 -> s1 [0, 65535] { R11886 += 1, R11772 += 1 };
  s0 -> s2 [0, 65535] { R11886 += 1, R11771 += 1, R11772 += 1 };
  s0 -> s0 [0, 65535] { R11885 += 1, R11886 += 1 };
  s0 -> s1 [91, 65535] { R11886 += 1, R11772 += 1, R8056 += 1 };
  s1 -> s1 [0, 81] { R11886 += 1, R11772 += 1, R8056 += 1 };
  s1 -> s1 [0, 65535] { R11886 += 1, R11772 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11886 += 1 };
  s1 -> s1 [91, 65535] { R11886 += 1, R11772 += 1, R8056 += 1 };
  s2 -> s1 [0, 81] { R11886 += 1, R11772 += 1, R8056 += 1 };
  s2 -> s1 [0, 65535] { R11886 += 1, R11772 += 1 };
  s2 -> s2 [0, 65535] { R11886 += 1, R11771 += 1, R11772 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R11886 += 1, R11772 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11886 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R11888 += 1, R11773 += 1, R11774 += 1 };
  s0 -> s0 [0, 65535] { R11887 += 1, R11888 += 1 };
  s0 -> s2 [0, 65535] { R11888 += 1, R11774 += 1 };
  s0 -> s3 [0, 65535] { R11888 += 1, R11774 += 1, R10575 += 1, R10576 += 1 };
  s1 -> s1 [0, 65535] { R11888 += 1, R11773 += 1, R11774 += 1 };
  s1 -> s2 [0, 65535] { R11888 += 1, R11774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11888 += 1, R11774 += 1, R10575 += 1, R10576 += 1 };
  s2 -> s4 [0, 65535] { R11888 += 1 };
  s2 -> s2 [0, 65535] { R11888 += 1, R11774 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R11888 += 1 };
  s3 -> s2 [0, 65535] { R11888 += 1, R11774 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11888 += 1, R11774 += 1, R10575 += 1, R10576 += 1 };
  s4 -> s4 [0, 65535] { R11888 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R11890 += 1, R11775 += 1, R11776 += 1 };
  s0 -> s2 [0, 65535] { R11890 += 1, R11776 += 1, R11417 += 1, R11418 += 1 };
  s0 -> s0 [0, 65535] { R11889 += 1, R11890 += 1 };
  s0 -> s3 [0, 65535] { R11890 += 1, R11776 += 1 };
  s1 -> s1 [0, 65535] { R11890 += 1, R11775 += 1, R11776 += 1 };
  s1 -> s2 [0, 65535] { R11890 += 1, R11776 += 1, R11417 += 1, R11418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R11890 += 1, R11776 += 1 };
  s2 -> s4 [0, 65535] { R11890 += 1 };
  s2 -> s2 [0, 65535] { R11890 += 1, R11776 += 1, R11417 += 1, R11418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11890 += 1, R11776 += 1 };
  s3 -> s4 [0, 65535] { R11890 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11890 += 1, R11776 += 1 };
  s4 -> s4 [0, 65535] { R11890 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R11891 += 1, R11892 += 1 };
  s0 -> s1 [0, 65535] { R11892 += 1, R11777 += 1, R11778 += 1 };
  s0 -> s2 [0, 65535] { R11892 += 1, R11778 += 1 };
  s1 -> s1 [0, 65535] { R11892 += 1, R11777 += 1, R11778 += 1 };
  s1 -> s2 [0, 65535] { R11892 += 1, R11778 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11892 += 1 };
  s2 -> s2 [0, 65535] { R11892 += 1, R11778 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11892 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R11894 += 1, R11780 += 1 };
  s0 -> s0 [0, 65535] { R11893 += 1, R11894 += 1 };
  s0 -> s2 [0, 65535] { R11894 += 1, R11779 += 1, R11780 += 1 };
  s1 -> s1 [0, 65535] { R11894 += 1, R11780 += 1 };
  s1 -> s4 [0, 65535] { R11894 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11894 += 1, R11780 += 1 };
  s2 -> s2 [0, 65535] { R11894 += 1, R11779 += 1, R11780 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11894 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R11896 += 1, R11810 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R11895 += 1, R11896 += 1 };
  s0 -> s2 [0, 65535] { R11896 += 1, R11809 += 1, R11810 += 1 };
  s1 -> s1 [0, 65535] { R11896 += 1, R11810 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11896 += 1 };
  s2 -> s1 [0, 65535] { R11896 += 1, R11810 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11896 += 1, R11809 += 1, R11810 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11896 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R11898 += 1, R11812 += 1 };
  s0 -> s0 [0, 65535] { R11897 += 1, R11898 += 1 };
  s0 -> s2 [0, 65535] { R11898 += 1, R11811 += 1, R11812 += 1 };
  s0 -> s3 [65, 65] { R11898 += 1, R11812 += 1 };
  s0 -> s4 [65, 65] { R11898 += 1, R11812 += 1 };
  s0 -> s5 [81, 81] { R11898 += 1, R11812 += 1 };
  s0 -> s1 [82, 65535] { R11898 += 1, R11812 += 1 };
  s1 -> s1 [0, 64] { R11898 += 1, R11812 += 1 };
  s1 -> s3 [65, 65] { R11898 += 1, R11812 += 1 };
  s1 -> s4 [65, 65] { R11898 += 1, R11812 += 1 };
  s1 -> s5 [81, 81] { R11898 += 1, R11812 += 1 };
  s1 -> s1 [82, 65535] { R11898 += 1, R11812 += 1 };
  s2 -> s1 [0, 64] { R11898 += 1, R11812 += 1 };
  s2 -> s2 [0, 65535] { R11898 += 1, R11811 += 1, R11812 += 1 };
  s2 -> s3 [65, 65] { R11898 += 1, R11812 += 1 };
  s2 -> s4 [65, 65] { R11898 += 1, R11812 += 1 };
  s2 -> s5 [81, 81] { R11898 += 1, R11812 += 1 };
  s2 -> s1 [82, 65535] { R11898 += 1, R11812 += 1 };
  s3 -> s3 [0, 65] { R11898 += 1, R11812 += 1 };
  s3 -> s7 [81, 81] { R11898 += 1, R11812 += 1 };
  s3 -> s3 [82, 65535] { R11898 += 1, R11812 += 1 };
  s5 -> s5 [0, 64] { R11898 += 1, R11812 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11898 += 1 };
  s5 -> s7 [65, 65] { R11898 += 1, R11812 += 1 };
  s5 -> s8 [65, 65] { R11898 += 1, R11812 += 1 };
  s5 -> s5 [81, 65535] { R11898 += 1, R11812 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R11898 += 1, R11812 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11898 += 1 };
  s7 -> s7 [81, 65535] { R11898 += 1, R11812 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11898 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R11900 += 1, R11814 += 1, R493 += 1 };
  s0 -> s2 [0, 65535] { R11900 += 1, R11813 += 1, R11814 += 1 };
  s0 -> s0 [0, 65535] { R11899 += 1, R11900 += 1 };
  s0 -> s3 [65, 65] { R11900 += 1, R11814 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R11900 += 1, R11814 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R11900 += 1, R11814 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R11900 += 1, R11814 += 1, R493 += 1 };
  s1 -> s1 [0, 65535] { R11900 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R11900 += 1, R11814 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R11900 += 1, R11814 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R11900 += 1, R11814 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R11900 += 1, R11814 += 1, R493 += 1 };
  s2 -> s2 [0, 65535] { R11900 += 1, R11813 += 1, R11814 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R11900 += 1, R11814 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R11900 += 1, R11814 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R11900 += 1, R11814 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R11900 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11900 += 1 };
  s4 -> s4 [0, 65535] { R11900 += 1, R11814 += 1, R493 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11900 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R11902 += 1, R11816 += 1, R495 += 1 };
  s0 -> s0 [0, 65535] { R11901 += 1, R11902 += 1 };
  s0 -> s2 [0, 65535] { R11902 += 1, R11815 += 1, R11816 += 1 };
  s0 -> s3 [65, 65] { R11902 += 1, R11816 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R11902 += 1, R11816 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R11902 += 1, R11816 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R11902 += 1, R11816 += 1, R495 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11902 += 1 };
  s1 -> s3 [65, 65] { R11902 += 1, R11816 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R11902 += 1, R11816 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R11902 += 1, R11816 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R11902 += 1, R11816 += 1, R495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11902 += 1, R11815 += 1, R11816 += 1 };
  s2 -> s3 [65, 65] { R11902 += 1, R11816 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R11902 += 1, R11816 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R11902 += 1, R11816 += 1, R495 += 1 };
  s3 -> s3 [0, 65535] { R11902 += 1, R11816 += 1, R495 += 1 };
  s3 -> s6 [0, 65535] { R11902 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11902 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11902 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s0 -> s2 [0, 65535] { R11904 += 1, R11817 += 1, R11818 += 1 };
  s0 -> s0 [0, 65535] { R11903 += 1, R11904 += 1 };
  s0 -> s3 [65, 65] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 65535] { R11904 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s2 -> s2 [0, 65535] { R11904 += 1, R11817 += 1, R11818 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s3 -> s3 [0, 65535] { R11904 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11904 += 1, R11818 += 1, R497 += 1, R498 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11904 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11904 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s0 -> s0 [0, 65535] { R11905 += 1, R11906 += 1 };
  s0 -> s2 [0, 65535] { R11906 += 1, R11819 += 1, R11820 += 1 };
  s0 -> s3 [65, 65] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 65535] { R11906 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11906 += 1, R11819 += 1, R11820 += 1 };
  s2 -> s3 [65, 65] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11906 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11906 += 1 };
  s4 -> s4 [0, 65535] { R11906 += 1, R11820 += 1, R501 += 1, R502 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11906 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s0 -> s2 [0, 64] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R11908 += 1, R11821 += 1, R11822 += 1 };
  s0 -> s0 [0, 65535] { R11907 += 1, R11908 += 1 };
  s0 -> s4 [65, 65] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s0 -> s6 [65, 65] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s0 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s0 -> s2 [66, 65535] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s1 [91, 107] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s0 -> s8 [108, 108] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s0 -> s1 [109, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s1 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s1 [0, 65535] { R11908 += 1 };
  s1 -> s5 [65, 65] { R11908 += 1, R11822 += 1 };
  s1 -> s7 [65, 65] { R11908 += 1, R11822 += 1 };
  s1 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s1 -> s1 [66, 65535] { R11908 += 1, R11822 += 1 };
  s1 -> s1 [91, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s2 [0, 64] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s4 [65, 65] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s6 [65, 65] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s2 [66, 65535] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s1 [91, 107] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s8 [108, 108] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s2 -> s1 [109, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s2 [0, 64] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R11908 += 1, R11821 += 1, R11822 += 1 };
  s3 -> s4 [65, 65] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s6 [65, 65] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s2 [66, 65535] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s1 [91, 107] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s8 [108, 108] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s3 -> s1 [109, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s4 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s4 -> s4 [0, 65535] { R11908 += 1, R11822 += 1, R8053 += 1, R8054 += 1 };
  s4 -> s7 [91, 107] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s4 -> s10 [108, 108] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s4 -> s7 [109, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s5 -> s5 [0, 65535] { R11908 += 1 };
  s5 -> s34 [0, 65535];
  s7 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s7 [0, 65535] { R11908 += 1, R11822 += 1 };
  s7 -> s35 [0, 65535] { R11908 += 1 };
  s7 -> s7 [91, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s8 [0, 64] { R11908 += 1, R11822 += 1 };
  s8 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s9 [65, 65] { R11908 += 1, R11822 += 1 };
  s8 -> s10 [65, 65] { R11908 += 1, R11822 += 1 };
  s8 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s8 [66, 65535] { R11908 += 1, R11822 += 1 };
  s8 -> s1 [91, 110] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s11 [111, 111] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s8 -> s1 [112, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s10 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s10 -> s10 [0, 65535] { R11908 += 1, R11822 += 1 };
  s10 -> s7 [91, 110] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s10 -> s12 [111, 111] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s10 -> s7 [112, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s11 [0, 64] { R11908 += 1, R11822 += 1 };
  s11 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s12 [65, 65] { R11908 += 1, R11822 += 1 };
  s11 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s13 [65, 65] { R11908 += 1, R11822 += 1 };
  s11 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s11 [66, 65535] { R11908 += 1, R11822 += 1 };
  s11 -> s1 [91, 98] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s14 [99, 99] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s11 -> s1 [100, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s12 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s12 -> s12 [0, 65535] { R11908 += 1, R11822 += 1 };
  s12 -> s7 [91, 98] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s12 -> s18 [99, 99] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s12 -> s7 [100, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s14 [0, 64] { R11908 += 1, R11822 += 1 };
  s14 -> s15 [65, 65] { R11908 += 1, R11822 += 1 };
  s14 -> s16 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s17 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s18 [65, 65] { R11908 += 1, R11822 += 1 };
  s14 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s14 [66, 65535] { R11908 += 1, R11822 += 1 };
  s14 -> s1 [91, 96] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s19 [97, 97] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s14 -> s1 [98, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s16 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s16 -> s16 [0, 65535] { R11908 += 1, R11822 += 1 };
  s16 -> s7 [91, 107] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s16 -> s21 [108, 108] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s16 -> s7 [109, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s18 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s18 -> s18 [0, 65535] { R11908 += 1, R11822 += 1 };
  s18 -> s7 [91, 96] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s18 -> s16 [97, 97] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s18 -> s7 [98, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s19 [0, 64] { R11908 += 1, R11822 += 1 };
  s19 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s16 [65, 65] { R11908 += 1, R11822 += 1 };
  s19 -> s17 [65, 65] { R11908 += 1, R11822 += 1 };
  s19 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s19 [66, 65535] { R11908 += 1, R11822 += 1 };
  s19 -> s1 [91, 107] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s20 [108, 108] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s19 -> s1 [109, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s20 [0, 64] { R11908 += 1, R11822 += 1 };
  s20 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s21 [65, 65] { R11908 += 1, R11822 += 1 };
  s20 -> s22 [65, 65] { R11908 += 1, R11822 += 1 };
  s20 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s20 [66, 65535] { R11908 += 1, R11822 += 1 };
  s20 -> s1 [91, 103] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s23 [104, 104] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s20 -> s1 [105, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s21 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s21 -> s21 [0, 65535] { R11908 += 1, R11822 += 1 };
  s21 -> s7 [91, 103] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s21 -> s24 [104, 104] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s21 -> s7 [105, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s23 [0, 64] { R11908 += 1, R11822 += 1 };
  s23 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s24 [65, 65] { R11908 += 1, R11822 += 1 };
  s23 -> s25 [65, 65] { R11908 += 1, R11822 += 1 };
  s23 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s23 [66, 65535] { R11908 += 1, R11822 += 1 };
  s23 -> s1 [91, 110] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s26 [111, 111] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s23 -> s1 [112, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s24 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s24 -> s24 [0, 65535] { R11908 += 1, R11822 += 1 };
  s24 -> s7 [91, 110] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s24 -> s27 [111, 111] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s24 -> s7 [112, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s26 [0, 64] { R11908 += 1, R11822 += 1 };
  s26 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s27 [65, 65] { R11908 += 1, R11822 += 1 };
  s26 -> s28 [65, 65] { R11908 += 1, R11822 += 1 };
  s26 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s26 [66, 65535] { R11908 += 1, R11822 += 1 };
  s26 -> s1 [91, 114] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s29 [115, 115] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s26 -> s1 [116, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s27 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s27 -> s27 [0, 65535] { R11908 += 1, R11822 += 1 };
  s27 -> s7 [91, 114] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s27 -> s30 [115, 115] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s27 -> s7 [116, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s29 [0, 64] { R11908 += 1, R11822 += 1 };
  s29 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s30 [65, 65] { R11908 += 1, R11822 += 1 };
  s29 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s31 [65, 65] { R11908 += 1, R11822 += 1 };
  s29 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s29 [66, 65535] { R11908 += 1, R11822 += 1 };
  s29 -> s1 [91, 115] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s32 [116, 116] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s29 -> s1 [117, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s30 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s30 -> s30 [0, 65535] { R11908 += 1, R11822 += 1 };
  s30 -> s7 [91, 115] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s30 -> s33 [116, 116] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s30 -> s7 [117, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s32 -> s1 [0, 64] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s32 -> s5 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s32 -> s7 [65, 65] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s32 -> s1 [66, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s32 -> s1 [91, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s33 -> s7 [0, 81] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s33 -> s7 [91, 65535] { R11908 += 1, R11822 += 1, R8054 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R11908 += 1 };
  accepting s34, s5, s1, s7, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s2 [0, 64] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s0 [0, 65535] { R11909 += 1, R11910 += 1 };
  s0 -> s3 [0, 65535] { R11910 += 1, R11823 += 1, R11824 += 1 };
  s0 -> s4 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s5 [65, 65] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s6 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s7 [65, 65] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s1 [66, 65535] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s2 [66, 65535] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s1 -> s1 [0, 64] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s1 [0, 65535] { R11910 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s6 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s1 [66, 65535] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s1 [0, 64] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s2 [0, 64] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s2 -> s4 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s5 [65, 65] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s2 -> s6 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s7 [65, 65] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s2 -> s1 [66, 65535] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s2 [66, 65535] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s1 [0, 64] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s2 [0, 64] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s3 [0, 65535] { R11910 += 1, R11823 += 1, R11824 += 1 };
  s3 -> s4 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s5 [65, 65] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s6 [65, 65] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s7 [65, 65] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s1 [66, 65535] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s2 [66, 65535] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s4 -> s4 [0, 65535] { R11910 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11910 += 1, R11824 += 1, R10571 += 1, R10572 += 1 };
  s5 -> s6 [0, 65535] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s6 -> s6 [0, 65535] { R11910 += 1, R11824 += 1, R10572 += 1, R10573 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R11910 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11910 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s0 -> s2 [0, 64] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s0 -> s3 [0, 65535] { R11912 += 1, R11825 += 1, R11826 += 1 };
  s0 -> s0 [0, 65535] { R11911 += 1, R11912 += 1 };
  s0 -> s4 [65, 65] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s0 -> s5 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s0 -> s6 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s0 -> s7 [65, 65] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s0 -> s1 [66, 65535] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s0 -> s2 [66, 65535] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s1 -> s1 [0, 64] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s1 -> s2 [0, 64] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s1 -> s4 [65, 65] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s1 -> s5 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s1 -> s6 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s1 -> s7 [65, 65] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s1 -> s1 [66, 65535] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s1 -> s2 [66, 65535] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s2 -> s2 [0, 64] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s2 -> s2 [0, 65535] { R11912 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s2 -> s6 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s2 -> s2 [66, 65535] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s3 -> s1 [0, 64] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s3 -> s2 [0, 64] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s3 -> s3 [0, 65535] { R11912 += 1, R11825 += 1, R11826 += 1 };
  s3 -> s4 [65, 65] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s3 -> s5 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s3 -> s6 [65, 65] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s3 -> s7 [65, 65] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s3 -> s1 [66, 65535] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s3 -> s2 [66, 65535] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s4 -> s4 [0, 65535] { R11912 += 1, R11826 += 1, R11413 += 1, R11414 += 1 };
  s4 -> s5 [0, 65535] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s5 -> s5 [0, 65535] { R11912 += 1, R11826 += 1, R11414 += 1, R11415 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R11912 += 1 };
  s6 -> s6 [0, 65535] { R11912 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11912 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R11914 += 1, R11828 += 1 };
  s0 -> s0 [0, 65535] { R11913 += 1, R11914 += 1 };
  s0 -> s2 [0, 65535] { R11914 += 1, R11827 += 1, R11828 += 1 };
  s0 -> s3 [65, 65] { R11914 += 1, R11828 += 1 };
  s0 -> s4 [65, 65] { R11914 += 1, R11828 += 1 };
  s0 -> s1 [66, 65535] { R11914 += 1, R11828 += 1 };
  s1 -> s1 [0, 64] { R11914 += 1, R11828 += 1 };
  s1 -> s1 [0, 65535] { R11914 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R11914 += 1, R11828 += 1 };
  s1 -> s4 [65, 65] { R11914 += 1, R11828 += 1 };
  s1 -> s1 [66, 65535] { R11914 += 1, R11828 += 1 };
  s2 -> s1 [0, 64] { R11914 += 1, R11828 += 1 };
  s2 -> s2 [0, 65535] { R11914 += 1, R11827 += 1, R11828 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R11914 += 1, R11828 += 1 };
  s2 -> s4 [65, 65] { R11914 += 1, R11828 += 1 };
  s2 -> s1 [66, 65535] { R11914 += 1, R11828 += 1 };
  s3 -> s3 [0, 65535] { R11914 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11914 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11914 += 1, R11828 += 1 };
  s5 -> s5 [0, 65535] { R11914 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s0 -> s2 [0, 64] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s0 -> s0 [0, 65535] { R11915 += 1, R11916 += 1 };
  s0 -> s3 [0, 65535] { R11916 += 1, R11829 += 1, R11830 += 1 };
  s0 -> s4 [65, 65] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s0 -> s5 [65, 65] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s0 -> s6 [65, 65] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s0 -> s7 [65, 65] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s0 -> s2 [66, 80] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s0 -> s1 [66, 65535] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s0 -> s8 [81, 81] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s0 -> s2 [82, 65535] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s1 -> s1 [0, 64] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s1 -> s2 [0, 64] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s1 -> s4 [65, 65] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s1 -> s5 [65, 65] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s1 -> s6 [65, 65] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s1 -> s7 [65, 65] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s1 -> s2 [66, 80] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s1 -> s1 [66, 65535] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s1 -> s8 [81, 81] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s1 -> s2 [82, 65535] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s2 -> s2 [0, 64] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s2 -> s5 [65, 65] { R11916 += 1, R11830 += 1 };
  s2 -> s7 [65, 65] { R11916 += 1, R11830 += 1 };
  s2 -> s2 [66, 80] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s2 -> s2 [66, 65535] { R11916 += 1, R11830 += 1 };
  s2 -> s8 [81, 81] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s2 -> s2 [82, 65535] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s3 -> s1 [0, 64] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s3 -> s2 [0, 64] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s3 -> s3 [0, 65535] { R11916 += 1, R11829 += 1, R11830 += 1 };
  s3 -> s4 [65, 65] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s3 -> s5 [65, 65] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s3 -> s6 [65, 65] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s3 -> s7 [65, 65] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s3 -> s2 [66, 80] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s3 -> s1 [66, 65535] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s3 -> s8 [81, 81] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s3 -> s2 [82, 65535] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s4 -> s5 [0, 80] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s4 -> s4 [0, 65535] { R11916 += 1, R11830 += 1, R11751 += 1, R11752 += 1 };
  s4 -> s11 [81, 81] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s4 -> s5 [82, 65535] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s5 -> s5 [0, 80] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s5 -> s5 [0, 65535] { R11916 += 1, R11830 += 1 };
  s5 -> s11 [81, 81] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s5 -> s5 [82, 65535] { R11916 += 1, R11830 += 1, R11752 += 1, R11753 += 1 };
  s8 -> s8 [0, 64] { R11916 += 1, R11830 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11916 += 1 };
  s8 -> s10 [65, 65] { R11916 += 1, R11830 += 1 };
  s8 -> s11 [65, 65] { R11916 += 1, R11830 += 1 };
  s8 -> s8 [66, 65535] { R11916 += 1, R11830 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11916 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11916 += 1, R11830 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R11916 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11916 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R11780 && R5 = R11916 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R11757 = 0 && R11758 = R11780 && R11759 = 0 && R11760 = R11780 && R11761 = 0 && R11762 = R11780 && R11763 = 0 && R11764 = R11780 && R11765 = 0 && R11766 = R11780 && R11767 = 0 && R11768 = R11780 && R11769 = 0 && R11770 = R11780 && R11771 = 0 && R11772 = R11780 && R11773 = 0 && R11774 = R11780 && R11775 = 0 && R11776 = R11780 && R11777 = 0 && R11778 = R11780 && R11779 = 0 && R11781 = 0 && R11782 = R11916 && R11783 = 0 && R11784 = R11916 && R11785 = 0 && R11786 = R11916 && R11787 = 0 && R11788 = R11916 && R11789 = 0 && R11790 = R11916 && R11791 = 0 && R11792 = R11916 && R11793 = 0 && R11794 = R11916 && R11795 = 0 && R11796 = R11916 && R11797 = 0 && R11798 = R11916 && R11799 = 0 && R11800 = R11916 && R11801 = 0 && R11802 = R11916 && R11803 = 0 && R11804 = R11916 && R11805 = 0 && R11806 = R11916 && R11807 = 0 && R11808 = R11916 && R11811 = 0 && R11812 = 0 && R11821 = 0 && R11822 = 0 && R11823 = 0 && R11824 = 0 && R11825 = 0 && R11826 = 0 && R11829 = 0 && R11830 = 0 && R11859 = 10 && R11860 = R11916 && R11861 = 10 && R11862 = R11916 && R11863 = 10 && R11864 = R11916 && R11865 = 10 && R11866 = R11916 && R11867 = 10 && R11868 = R11916 && R11869 = 10 && R11870 = R11916 && R11871 = 10 && R11872 = R11916 && R11873 = 10 && R11874 = R11916 && R11875 = 10 && R11876 = R11916 && R11877 = 10 && R11878 = R11916 && R11879 = 10 && R11880 = R11916 && R11881 = 10 && R11882 = R11916 && R11883 = 10 && R11884 = R11916 && R11885 = 10 && R11886 = R11916 && R11887 = 10 && R11888 = R11916 && R11889 = 10 && R11890 = R11916 && R11891 = 10 && R11892 = R11916 && R11893 = 10 && R11894 = R11916 && R11895 = 10 && R11896 = R11916 && R11897 = 10 && R11898 = R11916 && R11899 = 10 && R11900 = R11916 && R11901 = 10 && R11902 = R11916 && R11903 = 10 && R11904 = R11916 && R11905 = 10 && R11906 = R11916 && R11907 = 10 && R11908 = R11916 && R11909 = 10 && R11910 = R11916 && R11911 = 10 && R11912 = R11916 && R11913 = 10 && R11914 = R11916 && R11915 = 10 && R94 + R91 + R112 + R109 != 0 && R10576 + R10573 + R11756 + R11753 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R11780 && 9 < R11916 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8055 + R8053 = 0 && R8056 + R8054 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R10574 + R10571 = 0 && R10575 + R10572 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R8055 + R8053 != 0 || R494 + R493 + -1*R8056 + -1*R8054 = 0 || R494 + R493 < 1) && (R10574 + R10571 != 0 || R494 + R493 + -1*R10575 + -1*R10572 = 0 || R494 + R493 < 1) && (R30 = 0 || (R11809 = 0 && R11810 = 0)) && (R30 = 0 || (R11813 = 0 && R11814 = 0)) && (R30 = 0 || (R11815 = 0 && R11816 = 0)) && (R30 = 0 || (R11817 = 0 && R11818 = 0)) && (R30 = 0 || (R11819 = 0 && R11820 = 0)) && (R30 = 0 || (R11827 = 0 && R11828 = 0)) && (R32 = 0 || (R11831 = 0 && R11832 = 0)) && (R32 = 0 || (R11833 = 0 && R11834 = 0)) && (R32 = 0 || (R11835 = 0 && R11836 = 0)) && (R32 = 0 || (R11837 = 0 && R11838 = 0)) && (R32 = 0 || (R11839 = 0 && R11840 = 0)) && (R32 = 0 || (R11841 = 0 && R11842 = 0)) && (R32 = 0 || (R11843 = 0 && R11844 = 0)) && (R32 = 0 || (R11845 = 0 && R11846 = 0)) && (R32 = 0 || (R11847 = 0 && R11848 = 0)) && (R32 = 0 || (R11849 = 0 && R11850 = 0)) && (R32 = 0 || (R11851 = 0 && R11852 = 0)) && (R32 = 0 || (R11853 = 0 && R11854 = 0)) && (R32 = 0 || (R11855 = 0 && R11856 = 0)) && (R32 = 0 || (R11857 = 0 && R11858 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R8055 + R8053 = 0 || R494 + R493 < 1) && (R10574 + R10571 = 0 || R494 + R493 < 1) && (R11418 + R11415 = 0 || (R11416 + R11413 = 0 && R11417 + R11414 = 0)) && (R11418 + R11415 = 0 || (R11754 + R11751 = 0 && R11755 + R11752 = 0));
// End of Parikh automata intersection problem
