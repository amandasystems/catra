// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R6, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R81, R82, R83, R84, R85, R86, R87, R88, R8899, R89, R8900, R8901, R8902, R8903, R8904, R8905, R8906, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R8915, R8916, R8917, R8918, R8919, R8920, R8921, R8922, R8923, R8924, R8925, R8926, R8927, R8928, R8929, R8930, R8931, R8932, R8933, R8934, R8935, R8936, R8937, R8938, R8939, R8940, R8941, R8942, R8943, R8944, R8945, R8946, R8947, R8948, R8949, R8950, R8951, R8952, R8953, R8954, R8955, R8956, R8957, R8958, R8959, R8960, R8961, R8962, R8963, R8964, R8965, R8966, R8967, R8968, R8969, R8970, R8971, R8972, R8973, R8974, R8975, R8976, R8977, R8978, R8979, R8980, R8981, R8982, R8983, R8984, R8985, R8986, R8987, R8988, R8989, R8990, R8991, R8992, R8993, R8994, R8995, R8996, R8997, R8998, R8999, R90, R9000, R9001, R9002, R9003, R9004, R9005, R9006, R9007, R9008, R9009, R9010, R9011, R9012, R9013, R9014, R9015, R9016, R9017, R9018, R9019, R9020, R9021, R9022, R9023, R9024, R9025, R9026, R9027, R9028, R9029, R9030, R9031, R9032, R9033, R9034, R9035, R9036, R9037, R9038, R9039, R9040, R9041, R9042, R9043, R9044, R9045, R9046, R9047, R9048, R9049, R9050, R9051, R9052, R9053, R9054, R9055, R9056, R9057, R9058, R9059, R9060, R9061, R9062, R9063, R9064, R9065, R9066, R9067, R9068, R9069, R9070, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R8935 += 1, R8936 += 1 };
  s0 -> s1 [0, 65535] { R8936 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8936 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R8938 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R8937 += 1, R8938 += 1 };
  s1 -> s1 [0, 65535] { R8938 += 1, R68 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R8940 += 1 };
  s0 -> s0 [0, 65535] { R8939 += 1, R8940 += 1 };
  s0 -> s2 [0, 65535] { R8940 += 1, R70 += 1 };
  s0 -> s1 [90, 65535] { R8940 += 1 };
  s1 -> s1 [0, 88] { R8940 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R8940 += 1 };
  s2 -> s1 [0, 88] { R8940 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8940 += 1, R70 += 1 };
  s2 -> s1 [90, 65535] { R8940 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R8942 += 1 };
  s0 -> s0 [0, 65535] { R8941 += 1, R8942 += 1 };
  s0 -> s2 [0, 65535] { R8942 += 1, R72 += 1 };
  s0 -> s1 [74, 65535] { R8942 += 1 };
  s1 -> s1 [0, 72] { R8942 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R8942 += 1 };
  s2 -> s1 [0, 72] { R8942 += 1 };
  s2 -> s2 [0, 65535] { R8942 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8942 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R8944 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R8943 += 1, R8944 += 1 };
  s0 -> s2 [0, 65535] { R8944 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8944 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R8944 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8944 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R8944 += 1, R76 += 1, R77 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8944 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8945 += 1, R8946 += 1 };
  s0 -> s1 [0, 65535] { R8946 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8946 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R8948 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R8948 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R8947 += 1, R8948 += 1 };
  s1 -> s1 [0, 65535] { R8948 += 1, R83 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R8948 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8948 += 1, R83 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R8948 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8948 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R8950 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8949 += 1, R8950 += 1 };
  s0 -> s2 [0, 65535] { R8950 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [108, 108] { R8950 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R8950 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8950 += 1, R88 += 1 };
  s1 -> s13 [0, 65535] { R8950 += 1 };
  s2 -> s1 [0, 107] { R8950 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8950 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [108, 108] { R8950 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R8950 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R8950 += 1, R88 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8950 += 1 };
  s3 -> s5 [111, 111] { R8950 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R8950 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8950 += 1, R88 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8950 += 1 };
  s5 -> s6 [99, 99] { R8950 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R8950 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R8950 += 1, R88 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8950 += 1 };
  s6 -> s7 [97, 97] { R8950 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R8950 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R8950 += 1, R88 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R8950 += 1 };
  s7 -> s8 [108, 108] { R8950 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R8950 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R8950 += 1, R88 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R8950 += 1 };
  s8 -> s9 [104, 104] { R8950 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R8950 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R8950 += 1, R88 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R8950 += 1 };
  s9 -> s10 [111, 111] { R8950 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R8950 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R8950 += 1, R88 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R8950 += 1 };
  s10 -> s11 [115, 115] { R8950 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R8950 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R8950 += 1, R88 += 1 };
  s11 -> s11 [0, 65535] { R8950 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8950 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R8950 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R8950 += 1, R88 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R8950 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R8951 += 1, R8952 += 1 };
  s0 -> s1 [0, 65535] { R8952 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R8952 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R8952 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R8952 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8952 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535] { R8952 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8952 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R8953 += 1, R8954 += 1 };
  s0 -> s1 [0, 65535] { R8954 += 1, R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R8954 += 1, R98 += 1, R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8954 += 1 };
  s1 -> s1 [0, 65535] { R8954 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8954 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R8954 += 1, R98 += 1, R99 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8954 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R8955 += 1, R8956 += 1 };
  s0 -> s1 [0, 65535] { R8956 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8956 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R8957 += 1, R8958 += 1 };
  s0 -> s1 [0, 65535] { R8958 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R8958 += 1, R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R8958 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8958 += 1 };
  s2 -> s1 [0, 65535] { R8958 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R8958 += 1, R104 += 1, R105 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8958 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8959 += 1, R8960 += 1 };
  s0 -> s1 [0, 65535] { R8960 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8960 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R8962 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R8961 += 1, R8962 += 1 };
  s0 -> s2 [0, 65535] { R8962 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [73, 73] { R8962 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R8962 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R8962 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R8962 += 1, R111 += 1, R112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8962 += 1 };
  s1 -> s3 [73, 73] { R8962 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R8962 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R8962 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R8962 += 1, R111 += 1, R112 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8962 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [73, 73] { R8962 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R8962 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R8962 += 1, R111 += 1, R112 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8962 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8962 += 1, R111 += 1, R112 += 1 };
  s4 -> s6 [0, 65535] { R8962 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8962 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8986 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R8985 += 1, R8986 += 1 };
  s1 -> s1 [0, 65535] { R8986 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R8988 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R8987 += 1, R8988 += 1 };
  s0 -> s2 [65, 65] { R8988 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R8988 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R8988 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R8988 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8988 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R8988 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R8988 += 1, R67 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8988 += 1, R67 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R8990 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R8989 += 1, R8990 += 1 };
  s0 -> s2 [65, 65] { R8990 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R8990 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R8990 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R8990 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8990 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R8990 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R8990 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8990 += 1, R69 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R8992 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R8991 += 1, R8992 += 1 };
  s0 -> s2 [65, 65] { R8992 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R8992 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R8992 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R8992 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8992 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R8992 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R8992 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R8992 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R8994 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8993 += 1, R8994 += 1 };
  s0 -> s2 [65, 65] { R8994 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R8994 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R8994 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R8994 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8994 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R8994 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R8994 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8994 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R8996 += 1 };
  s0 -> s0 [0, 65535] { R8995 += 1, R8996 += 1 };
  s0 -> s2 [65, 65] { R8996 += 1 };
  s0 -> s3 [65, 65] { R8996 += 1 };
  s0 -> s1 [66, 65535] { R8996 += 1 };
  s1 -> s1 [0, 64] { R8996 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8996 += 1 };
  s1 -> s3 [65, 65] { R8996 += 1 };
  s1 -> s1 [66, 65535] { R8996 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8996 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R8998 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R8997 += 1, R8998 += 1 };
  s0 -> s2 [65, 65] { R8998 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R8998 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R8998 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R8998 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8998 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R8998 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R8998 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8998 += 1, R79 += 1, R80 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R9000 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R8999 += 1, R9000 += 1 };
  s0 -> s2 [65, 65] { R9000 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R9000 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R9000 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R9000 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9000 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R9000 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R9000 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9000 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R9002 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9001 += 1, R9002 += 1 };
  s0 -> s2 [65, 65] { R9002 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R9002 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R9002 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R9002 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9002 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R9002 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R9002 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R9002 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R9004 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R9003 += 1, R9004 += 1 };
  s0 -> s2 [65, 65] { R9004 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R9004 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R9004 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R9004 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9004 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R9004 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R9004 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R9004 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R9006 += 1 };
  s0 -> s0 [0, 65535] { R9005 += 1, R9006 += 1 };
  s0 -> s2 [65, 65] { R9006 += 1 };
  s0 -> s3 [65, 65] { R9006 += 1 };
  s0 -> s1 [66, 65535] { R9006 += 1 };
  s1 -> s1 [0, 64] { R9006 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9006 += 1 };
  s1 -> s3 [65, 65] { R9006 += 1 };
  s1 -> s1 [66, 65535] { R9006 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9006 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R9008 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R9007 += 1, R9008 += 1 };
  s0 -> s2 [65, 65] { R9008 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R9008 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R9008 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R9008 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9008 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R9008 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R9008 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535] { R9008 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R9010 += 1 };
  s0 -> s0 [0, 65535] { R9009 += 1, R9010 += 1 };
  s0 -> s2 [65, 65] { R9010 += 1 };
  s0 -> s3 [65, 65] { R9010 += 1 };
  s0 -> s1 [66, 65535] { R9010 += 1 };
  s1 -> s1 [0, 64] { R9010 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9010 += 1 };
  s1 -> s3 [65, 65] { R9010 += 1 };
  s1 -> s1 [66, 65535] { R9010 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9010 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R9012 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R9011 += 1, R9012 += 1 };
  s0 -> s2 [65, 65] { R9012 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R9012 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R9012 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R9012 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9012 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R9012 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R9012 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R9012 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R9014 += 1 };
  s0 -> s0 [0, 65535] { R9013 += 1, R9014 += 1 };
  s0 -> s1 [45, 45] { R9014 += 1 };
  s0 -> s2 [46, 46] { R9014 += 1 };
  s0 -> s1 [48, 62] { R9014 += 1 };
  s0 -> s3 [65, 65] { R9014 += 1 };
  s0 -> s1 [66, 65535] { R9014 += 1 };
  s1 -> s1 [0, 43] { R9014 += 1 };
  s1 -> s1 [45, 45] { R9014 += 1 };
  s1 -> s2 [46, 46] { R9014 += 1 };
  s1 -> s1 [48, 62] { R9014 += 1 };
  s1 -> s3 [65, 65] { R9014 += 1 };
  s1 -> s1 [66, 65535] { R9014 += 1 };
  s2 -> s1 [0, 43] { R9014 += 1 };
  s2 -> s1 [45, 45] { R9014 += 1 };
  s2 -> s2 [46, 46] { R9014 += 1 };
  s2 -> s1 [48, 62] { R9014 += 1 };
  s2 -> s3 [65, 65] { R9014 += 1 };
  s2 -> s1 [66, 114] { R9014 += 1 };
  s2 -> s8 [115, 115] { R9014 += 1 };
  s2 -> s1 [116, 65535] { R9014 += 1 };
  s3 -> s3 [0, 43] { R9014 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9014 += 1 };
  s3 -> s4 [46, 46] { R9014 += 1 };
  s3 -> s3 [48, 62] { R9014 += 1 };
  s3 -> s3 [65, 65535] { R9014 += 1 };
  s4 -> s3 [0, 43] { R9014 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9014 += 1 };
  s4 -> s4 [46, 46] { R9014 += 1 };
  s4 -> s3 [48, 62] { R9014 += 1 };
  s4 -> s3 [65, 114] { R9014 += 1 };
  s4 -> s5 [115, 115] { R9014 += 1 };
  s4 -> s3 [116, 65535] { R9014 += 1 };
  s5 -> s3 [0, 43] { R9014 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9014 += 1 };
  s5 -> s4 [46, 46] { R9014 += 1 };
  s5 -> s3 [48, 62] { R9014 += 1 };
  s5 -> s3 [65, 110] { R9014 += 1 };
  s5 -> s6 [111, 111] { R9014 += 1 };
  s5 -> s3 [112, 65535] { R9014 += 1 };
  s6 -> s3 [0, 43] { R9014 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9014 += 1 };
  s6 -> s4 [46, 46] { R9014 += 1 };
  s6 -> s3 [48, 62] { R9014 += 1 };
  s6 -> s3 [65, 98] { R9014 += 1 };
  s6 -> s7 [99, 99] { R9014 += 1 };
  s6 -> s3 [100, 65535] { R9014 += 1 };
  s7 -> s3 [0, 43] { R9014 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9014 += 1 };
  s7 -> s4 [46, 46] { R9014 += 1 };
  s7 -> s3 [48, 62] { R9014 += 1 };
  s7 -> s3 [65, 106] { R9014 += 1 };
  s7 -> s3 [108, 65535] { R9014 += 1 };
  s8 -> s1 [0, 43] { R9014 += 1 };
  s8 -> s1 [45, 45] { R9014 += 1 };
  s8 -> s2 [46, 46] { R9014 += 1 };
  s8 -> s1 [48, 62] { R9014 += 1 };
  s8 -> s3 [65, 65] { R9014 += 1 };
  s8 -> s1 [66, 110] { R9014 += 1 };
  s8 -> s9 [111, 111] { R9014 += 1 };
  s8 -> s1 [112, 65535] { R9014 += 1 };
  s9 -> s1 [0, 43] { R9014 += 1 };
  s9 -> s1 [45, 45] { R9014 += 1 };
  s9 -> s2 [46, 46] { R9014 += 1 };
  s9 -> s1 [48, 62] { R9014 += 1 };
  s9 -> s3 [65, 65] { R9014 += 1 };
  s9 -> s1 [66, 98] { R9014 += 1 };
  s9 -> s10 [99, 99] { R9014 += 1 };
  s9 -> s1 [100, 65535] { R9014 += 1 };
  s10 -> s1 [0, 43] { R9014 += 1 };
  s10 -> s1 [45, 45] { R9014 += 1 };
  s10 -> s2 [46, 46] { R9014 += 1 };
  s10 -> s1 [48, 62] { R9014 += 1 };
  s10 -> s3 [65, 65] { R9014 += 1 };
  s10 -> s1 [66, 106] { R9014 += 1 };
  s10 -> s1 [108, 65535] { R9014 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R9016 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R9015 += 1, R9016 += 1 };
  s1 -> s1 [0, 65535] { R9016 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R9018 += 1 };
  s0 -> s0 [0, 65535] { R9017 += 1, R9018 += 1 };
  s0 -> s2 [0, 65535] { R9018 += 1, R16 += 1 };
  s0 -> s3 [58, 58] { R9018 += 1 };
  s0 -> s1 [59, 65535] { R9018 += 1 };
  s1 -> s1 [0, 57] { R9018 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9018 += 1 };
  s1 -> s1 [59, 65535] { R9018 += 1 };
  s2 -> s1 [0, 57] { R9018 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9018 += 1, R16 += 1 };
  s2 -> s3 [58, 58] { R9018 += 1 };
  s2 -> s1 [59, 65535] { R9018 += 1 };
  s3 -> s3 [0, 65535] { R9018 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R9020 += 1 };
  s0 -> s2 [0, 65535] { R9020 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R9019 += 1, R9020 += 1 };
  s0 -> s3 [65, 65] { R9020 += 1 };
  s0 -> s1 [66, 65535] { R9020 += 1 };
  s1 -> s1 [0, 64] { R9020 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9020 += 1 };
  s1 -> s1 [66, 65535] { R9020 += 1 };
  s2 -> s1 [0, 64] { R9020 += 1 };
  s2 -> s2 [0, 65535] { R9020 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R9020 += 1 };
  s2 -> s1 [66, 65535] { R9020 += 1 };
  s3 -> s3 [0, 65535] { R9020 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R9022 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R9021 += 1, R9022 += 1 };
  s0 -> s2 [0, 65535] { R9022 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [91, 91] { R9022 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R9022 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R9022 += 1 };
  s1 -> s1 [0, 65535] { R9022 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R9022 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9022 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [91, 91] { R9022 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R9022 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R9022 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9022 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s0 [0, 65535] { R9023 += 1, R9024 += 1 };
  s0 -> s1 [0, 65535] { R9024 += 1, R36 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R9024 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R9024 += 1, R36 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R9024 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9024 += 1, R36 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R9024 += 1, R35 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9024 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R9026 += 1, R8912 += 1 };
  s0 -> s2 [0, 65535] { R9026 += 1, R8911 += 1, R8912 += 1 };
  s0 -> s0 [0, 65535] { R9025 += 1, R9026 += 1 };
  s0 -> s1 [66, 65535] { R9026 += 1, R8912 += 1 };
  s1 -> s1 [0, 64] { R9026 += 1, R8912 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9026 += 1 };
  s1 -> s1 [66, 65535] { R9026 += 1, R8912 += 1 };
  s2 -> s1 [0, 64] { R9026 += 1, R8912 += 1 };
  s2 -> s2 [0, 65535] { R9026 += 1, R8911 += 1, R8912 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R9026 += 1, R8912 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R9028 += 1, R8913 += 1, R8914 += 1 };
  s0 -> s2 [0, 65535] { R9028 += 1, R8914 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R9027 += 1, R9028 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9028 += 1, R8913 += 1, R8914 += 1 };
  s1 -> s2 [0, 65535] { R9028 += 1, R8914 += 1, R29 += 1 };
  s2 -> s3 [0, 65535] { R9028 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9028 += 1, R8914 += 1, R29 += 1 };
  s3 -> s3 [0, 65535] { R9028 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R9030 += 1, R8916 += 1 };
  s0 -> s2 [0, 65535] { R9030 += 1, R8915 += 1, R8916 += 1 };
  s0 -> s0 [0, 65535] { R9029 += 1, R9030 += 1 };
  s0 -> s1 [81, 65535] { R9030 += 1, R8916 += 1 };
  s1 -> s1 [0, 65] { R9030 += 1, R8916 += 1 };
  s1 -> s1 [0, 65535] { R9030 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R9030 += 1, R8916 += 1 };
  s2 -> s1 [0, 65] { R9030 += 1, R8916 += 1 };
  s2 -> s2 [0, 65535] { R9030 += 1, R8915 += 1, R8916 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R9030 += 1, R8916 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R9031 += 1, R9032 += 1 };
  s0 -> s1 [0, 65535] { R9032 += 1, R8918 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R9032 += 1, R8917 += 1, R8918 += 1 };
  s1 -> s4 [0, 65535] { R9032 += 1 };
  s1 -> s1 [0, 65535] { R9032 += 1, R8918 += 1, R494 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9032 += 1, R8918 += 1, R494 += 1 };
  s2 -> s2 [0, 65535] { R9032 += 1, R8917 += 1, R8918 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9032 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R9034 += 1, R8920 += 1 };
  s0 -> s2 [0, 65535] { R9034 += 1, R8919 += 1, R8920 += 1 };
  s0 -> s0 [0, 65535] { R9033 += 1, R9034 += 1 };
  s0 -> s3 [0, 65535] { R9034 += 1, R8920 += 1, R496 += 1 };
  s0 -> s1 [82, 65535] { R9034 += 1, R8920 += 1 };
  s1 -> s1 [0, 80] { R9034 += 1, R8920 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9034 += 1 };
  s1 -> s1 [82, 65535] { R9034 += 1, R8920 += 1 };
  s2 -> s1 [0, 80] { R9034 += 1, R8920 += 1 };
  s2 -> s2 [0, 65535] { R9034 += 1, R8919 += 1, R8920 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9034 += 1, R8920 += 1, R496 += 1 };
  s2 -> s1 [82, 65535] { R9034 += 1, R8920 += 1 };
  s3 -> s1 [0, 80] { R9034 += 1, R8920 += 1 };
  s3 -> s4 [0, 65535] { R9034 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9034 += 1, R8920 += 1, R496 += 1 };
  s3 -> s1 [82, 65535] { R9034 += 1, R8920 += 1 };
  s4 -> s4 [0, 65535] { R9034 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R9036 += 1, R8922 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R9036 += 1, R8921 += 1, R8922 += 1 };
  s0 -> s3 [0, 65535] { R9036 += 1, R8922 += 1, R499 += 1, R500 += 1 };
  s0 -> s0 [0, 65535] { R9035 += 1, R9036 += 1 };
  s0 -> s1 [82, 65535] { R9036 += 1, R8922 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R9036 += 1, R8922 += 1, R500 += 1 };
  s1 -> s4 [0, 65535] { R9036 += 1 };
  s1 -> s1 [0, 65535] { R9036 += 1, R8922 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R9036 += 1, R8922 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R9036 += 1, R8922 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R9036 += 1, R8921 += 1, R8922 += 1 };
  s2 -> s3 [0, 65535] { R9036 += 1, R8922 += 1, R499 += 1, R500 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R9036 += 1, R8922 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R9036 += 1, R8922 += 1, R500 += 1 };
  s3 -> s4 [0, 65535] { R9036 += 1 };
  s3 -> s3 [0, 65535] { R9036 += 1, R8922 += 1, R499 += 1, R500 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R9036 += 1, R8922 += 1, R500 += 1 };
  s4 -> s4 [0, 65535] { R9036 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R9038 += 1, R8924 += 1, R505 += 1, R506 += 1 };
  s0 -> s2 [0, 65535] { R9038 += 1, R8923 += 1, R8924 += 1 };
  s0 -> s0 [0, 65535] { R9037 += 1, R9038 += 1 };
  s0 -> s3 [0, 65535] { R9038 += 1, R8924 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R9038 += 1, R8924 += 1, R505 += 1, R506 += 1 };
  s1 -> s4 [0, 65535] { R9038 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9038 += 1, R8924 += 1 };
  s2 -> s1 [0, 65535] { R9038 += 1, R8924 += 1, R505 += 1, R506 += 1 };
  s2 -> s2 [0, 65535] { R9038 += 1, R8923 += 1, R8924 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9038 += 1, R8924 += 1, R504 += 1, R505 += 1 };
  s3 -> s1 [0, 65535] { R9038 += 1, R8924 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535] { R9038 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9038 += 1, R8924 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535] { R9038 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9038 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9038 += 1, R8924 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R9040 += 1, R8926 += 1, R8056 += 1 };
  s0 -> s2 [0, 65535] { R9040 += 1, R8925 += 1, R8926 += 1 };
  s0 -> s1 [0, 65535] { R9040 += 1, R8926 += 1 };
  s0 -> s0 [0, 65535] { R9039 += 1, R9040 += 1 };
  s0 -> s1 [91, 65535] { R9040 += 1, R8926 += 1, R8056 += 1 };
  s1 -> s1 [0, 81] { R9040 += 1, R8926 += 1, R8056 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9040 += 1, R8926 += 1 };
  s1 -> s4 [0, 65535] { R9040 += 1 };
  s1 -> s1 [91, 65535] { R9040 += 1, R8926 += 1, R8056 += 1 };
  s2 -> s1 [0, 81] { R9040 += 1, R8926 += 1, R8056 += 1 };
  s2 -> s2 [0, 65535] { R9040 += 1, R8925 += 1, R8926 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9040 += 1, R8926 += 1 };
  s2 -> s1 [91, 65535] { R9040 += 1, R8926 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9040 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R9042 += 1, R8927 += 1, R8928 += 1 };
  s0 -> s0 [0, 65535] { R9041 += 1, R9042 += 1 };
  s0 -> s2 [0, 65535] { R9042 += 1, R8928 += 1, R8061 += 1, R8062 += 1 };
  s0 -> s3 [0, 65535] { R9042 += 1, R8928 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s1 [0, 65535] { R9042 += 1, R8927 += 1, R8928 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9042 += 1, R8928 += 1, R8061 += 1, R8062 += 1 };
  s1 -> s3 [0, 65535] { R9042 += 1, R8928 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s6 [0, 65535] { R9042 += 1, R8928 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9042 += 1, R8928 += 1, R8061 += 1, R8062 += 1 };
  s2 -> s5 [0, 65535] { R9042 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9042 += 1, R8928 += 1, R8061 += 1, R8062 += 1 };
  s3 -> s3 [0, 65535] { R9042 += 1, R8928 += 1, R8060 += 1, R8061 += 1 };
  s3 -> s5 [0, 65535] { R9042 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9042 += 1 };
  s6 -> s6 [0, 65535] { R9042 += 1, R8928 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9042 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R9044 += 1, R8929 += 1, R8930 += 1 };
  s0 -> s0 [0, 65535] { R9043 += 1, R9044 += 1 };
  s0 -> s2 [0, 65535] { R9044 += 1, R8930 += 1 };
  s0 -> s3 [0, 65535] { R9044 += 1, R8930 += 1, R8903 += 1, R8904 += 1 };
  s1 -> s1 [0, 65535] { R9044 += 1, R8929 += 1, R8930 += 1 };
  s1 -> s2 [0, 65535] { R9044 += 1, R8930 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9044 += 1, R8930 += 1, R8903 += 1, R8904 += 1 };
  s2 -> s2 [0, 65535] { R9044 += 1, R8930 += 1 };
  s2 -> s4 [0, 65535] { R9044 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R9044 += 1, R8930 += 1 };
  s3 -> s4 [0, 65535] { R9044 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9044 += 1, R8930 += 1, R8903 += 1, R8904 += 1 };
  s4 -> s4 [0, 65535] { R9044 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R9046 += 1, R8932 += 1 };
  s0 -> s2 [0, 65535] { R9046 += 1, R8931 += 1, R8932 += 1 };
  s0 -> s0 [0, 65535] { R9045 += 1, R9046 += 1 };
  s1 -> s1 [0, 65535] { R9046 += 1, R8932 += 1 };
  s1 -> s4 [0, 65535] { R9046 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9046 += 1, R8932 += 1 };
  s2 -> s2 [0, 65535] { R9046 += 1, R8931 += 1, R8932 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9046 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 80] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s2 [0, 65535] { R9048 += 1, R8933 += 1, R8934 += 1 };
  s0 -> s0 [0, 65535] { R9047 += 1, R9048 += 1 };
  s0 -> s3 [0, 65535] { R9048 += 1, R8934 += 1, R8908 += 1, R8909 += 1 };
  s0 -> s4 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s5 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s0 -> s1 [82, 65535] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s1 [0, 80] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R9048 += 1, R8934 += 1 };
  s1 -> s8 [0, 65535] { R9048 += 1 };
  s1 -> s4 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s5 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s1 -> s1 [82, 65535] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s2 -> s1 [0, 80] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R9048 += 1, R8933 += 1, R8934 += 1 };
  s2 -> s3 [0, 65535] { R9048 += 1, R8934 += 1, R8908 += 1, R8909 += 1 };
  s2 -> s4 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s2 -> s5 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s2 -> s1 [82, 65535] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s3 -> s1 [0, 80] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R9048 += 1, R8934 += 1, R8908 += 1, R8909 += 1 };
  s3 -> s8 [0, 65535] { R9048 += 1 };
  s3 -> s4 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s3 -> s5 [81, 81] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s3 -> s1 [82, 65535] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s4 -> s4 [0, 65535] { R9048 += 1, R8934 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R9048 += 1 };
  s5 -> s6 [0, 65535] { R9048 += 1, R8934 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R9048 += 1, R8934 += 1, R8909 += 1, R8910 += 1 };
  s5 -> s8 [0, 65535] { R9048 += 1 };
  s6 -> s6 [0, 65535] { R9048 += 1, R8934 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R9048 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R9048 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R9049 += 1, R9050 += 1 };
  s0 -> s1 [0, 65535] { R9050 += 1, R8964 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R9050 += 1, R8963 += 1, R8964 += 1 };
  s1 -> s4 [0, 65535] { R9050 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9050 += 1, R8964 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9050 += 1, R8964 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R9050 += 1, R8963 += 1, R8964 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9050 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R9052 += 1, R8966 += 1 };
  s0 -> s2 [0, 65535] { R9052 += 1, R8965 += 1, R8966 += 1 };
  s0 -> s0 [0, 65535] { R9051 += 1, R9052 += 1 };
  s0 -> s3 [65, 65] { R9052 += 1, R8966 += 1 };
  s0 -> s4 [65, 65] { R9052 += 1, R8966 += 1 };
  s0 -> s5 [81, 81] { R9052 += 1, R8966 += 1 };
  s0 -> s1 [82, 65535] { R9052 += 1, R8966 += 1 };
  s1 -> s1 [0, 64] { R9052 += 1, R8966 += 1 };
  s1 -> s3 [65, 65] { R9052 += 1, R8966 += 1 };
  s1 -> s4 [65, 65] { R9052 += 1, R8966 += 1 };
  s1 -> s5 [81, 81] { R9052 += 1, R8966 += 1 };
  s1 -> s1 [82, 65535] { R9052 += 1, R8966 += 1 };
  s2 -> s1 [0, 64] { R9052 += 1, R8966 += 1 };
  s2 -> s2 [0, 65535] { R9052 += 1, R8965 += 1, R8966 += 1 };
  s2 -> s3 [65, 65] { R9052 += 1, R8966 += 1 };
  s2 -> s4 [65, 65] { R9052 += 1, R8966 += 1 };
  s2 -> s5 [81, 81] { R9052 += 1, R8966 += 1 };
  s2 -> s1 [82, 65535] { R9052 += 1, R8966 += 1 };
  s3 -> s3 [0, 65] { R9052 += 1, R8966 += 1 };
  s3 -> s7 [81, 81] { R9052 += 1, R8966 += 1 };
  s3 -> s3 [82, 65535] { R9052 += 1, R8966 += 1 };
  s5 -> s5 [0, 64] { R9052 += 1, R8966 += 1 };
  s5 -> s5 [0, 65535] { R9052 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R9052 += 1, R8966 += 1 };
  s5 -> s8 [65, 65] { R9052 += 1, R8966 += 1 };
  s5 -> s5 [81, 65535] { R9052 += 1, R8966 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R9052 += 1, R8966 += 1 };
  s7 -> s7 [0, 65535] { R9052 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R9052 += 1, R8966 += 1 };
  s8 -> s8 [0, 65535] { R9052 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R9054 += 1, R8968 += 1, R493 += 1 };
  s0 -> s0 [0, 65535] { R9053 += 1, R9054 += 1 };
  s0 -> s2 [0, 65535] { R9054 += 1, R8967 += 1, R8968 += 1 };
  s0 -> s3 [65, 65] { R9054 += 1, R8968 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R9054 += 1, R8968 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R9054 += 1, R8968 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R9054 += 1, R8968 += 1, R493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9054 += 1 };
  s1 -> s3 [65, 65] { R9054 += 1, R8968 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R9054 += 1, R8968 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R9054 += 1, R8968 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R9054 += 1, R8968 += 1, R493 += 1 };
  s2 -> s2 [0, 65535] { R9054 += 1, R8967 += 1, R8968 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9054 += 1, R8968 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R9054 += 1, R8968 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R9054 += 1, R8968 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R9054 += 1, R8968 += 1, R493 += 1 };
  s3 -> s6 [0, 65535] { R9054 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9054 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9054 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R9056 += 1, R8970 += 1, R495 += 1 };
  s0 -> s2 [0, 65535] { R9056 += 1, R8969 += 1, R8970 += 1 };
  s0 -> s0 [0, 65535] { R9055 += 1, R9056 += 1 };
  s0 -> s3 [65, 65] { R9056 += 1, R8970 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R9056 += 1, R8970 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R9056 += 1, R8970 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R9056 += 1, R8970 += 1, R495 += 1 };
  s1 -> s1 [0, 65535] { R9056 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9056 += 1, R8970 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R9056 += 1, R8970 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R9056 += 1, R8970 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R9056 += 1, R8970 += 1, R495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9056 += 1, R8969 += 1, R8970 += 1 };
  s2 -> s3 [65, 65] { R9056 += 1, R8970 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R9056 += 1, R8970 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R9056 += 1, R8970 += 1, R495 += 1 };
  s3 -> s6 [0, 65535] { R9056 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9056 += 1, R8970 += 1, R495 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9056 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9056 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s0 -> s0 [0, 65535] { R9057 += 1, R9058 += 1 };
  s0 -> s2 [0, 65535] { R9058 += 1, R8971 += 1, R8972 += 1 };
  s0 -> s3 [65, 65] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 65535] { R9058 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9058 += 1, R8971 += 1, R8972 += 1 };
  s2 -> s3 [65, 65] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9058 += 1 };
  s3 -> s3 [0, 65535] { R9058 += 1, R8972 += 1, R497 += 1, R498 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R9060 += 1, R8973 += 1, R8974 += 1 };
  s0 -> s0 [0, 65535] { R9059 += 1, R9060 += 1 };
  s0 -> s3 [65, 65] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9060 += 1 };
  s1 -> s3 [65, 65] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s2 -> s2 [0, 65535] { R9060 += 1, R8973 += 1, R8974 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s3 -> s6 [0, 65535] { R9060 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9060 += 1, R8974 += 1, R501 += 1, R502 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9060 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9060 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R9062 += 1, R8975 += 1, R8976 += 1 };
  s0 -> s0 [0, 65535] { R9061 += 1, R9062 += 1 };
  s0 -> s4 [65, 65] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s5 [65, 65] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s0 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s0 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s0 -> s1 [66, 65535] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [91, 107] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s0 -> s8 [108, 108] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s0 -> s2 [109, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s1 [0, 64] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s4 [65, 65] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s5 [65, 65] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s1 [66, 65535] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [91, 107] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s8 [108, 108] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s1 -> s2 [109, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s2 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s2 -> s2 [0, 65535] { R9062 += 1 };
  s2 -> s35 [0, 65535];
  s2 -> s6 [65, 65] { R9062 += 1, R8976 += 1 };
  s2 -> s7 [65, 65] { R9062 += 1, R8976 += 1 };
  s2 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s2 -> s2 [66, 65535] { R9062 += 1, R8976 += 1 };
  s2 -> s2 [91, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s1 [0, 64] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R9062 += 1, R8975 += 1, R8976 += 1 };
  s3 -> s4 [65, 65] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s5 [65, 65] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s1 [66, 65535] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [91, 107] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s8 [108, 108] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s3 -> s2 [109, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s5 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s5 -> s5 [0, 65535] { R9062 += 1, R8976 += 1, R8053 += 1, R8054 += 1 };
  s5 -> s7 [91, 107] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s5 -> s10 [108, 108] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s5 -> s7 [109, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s6 -> s6 [0, 65535] { R9062 += 1 };
  s6 -> s35 [0, 65535];
  s7 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s7 -> s34 [0, 65535] { R9062 += 1 };
  s7 -> s7 [0, 65535] { R9062 += 1, R8976 += 1 };
  s7 -> s35 [0, 65535];
  s7 -> s7 [91, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s8 [0, 64] { R9062 += 1, R8976 += 1 };
  s8 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s9 [65, 65] { R9062 += 1, R8976 += 1 };
  s8 -> s10 [65, 65] { R9062 += 1, R8976 += 1 };
  s8 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s8 [66, 65535] { R9062 += 1, R8976 += 1 };
  s8 -> s2 [91, 110] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s11 [111, 111] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s8 -> s2 [112, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s10 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s10 -> s10 [0, 65535] { R9062 += 1, R8976 += 1 };
  s10 -> s7 [91, 110] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s10 -> s13 [111, 111] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s10 -> s7 [112, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s11 [0, 64] { R9062 += 1, R8976 += 1 };
  s11 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s12 [65, 65] { R9062 += 1, R8976 += 1 };
  s11 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s13 [65, 65] { R9062 += 1, R8976 += 1 };
  s11 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s11 [66, 65535] { R9062 += 1, R8976 += 1 };
  s11 -> s2 [91, 98] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s14 [99, 99] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s11 -> s2 [100, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s13 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s13 -> s13 [0, 65535] { R9062 += 1, R8976 += 1 };
  s13 -> s7 [91, 98] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s13 -> s15 [99, 99] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s13 -> s7 [100, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s14 [0, 64] { R9062 += 1, R8976 += 1 };
  s14 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s15 [65, 65] { R9062 += 1, R8976 += 1 };
  s14 -> s16 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s17 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s18 [65, 65] { R9062 += 1, R8976 += 1 };
  s14 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s14 [66, 65535] { R9062 += 1, R8976 += 1 };
  s14 -> s2 [91, 96] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s19 [97, 97] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s14 -> s2 [98, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s15 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s15 -> s15 [0, 65535] { R9062 += 1, R8976 += 1 };
  s15 -> s7 [91, 96] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s15 -> s17 [97, 97] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s15 -> s7 [98, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s17 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s17 -> s17 [0, 65535] { R9062 += 1, R8976 += 1 };
  s17 -> s7 [91, 107] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s17 -> s22 [108, 108] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s17 -> s7 [109, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s19 [0, 64] { R9062 += 1, R8976 += 1 };
  s19 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s16 [65, 65] { R9062 += 1, R8976 += 1 };
  s19 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s17 [65, 65] { R9062 += 1, R8976 += 1 };
  s19 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s19 [66, 65535] { R9062 += 1, R8976 += 1 };
  s19 -> s2 [91, 107] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s20 [108, 108] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s19 -> s2 [109, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s20 [0, 64] { R9062 += 1, R8976 += 1 };
  s20 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s21 [65, 65] { R9062 += 1, R8976 += 1 };
  s20 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s22 [65, 65] { R9062 += 1, R8976 += 1 };
  s20 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s20 [66, 65535] { R9062 += 1, R8976 += 1 };
  s20 -> s2 [91, 103] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s23 [104, 104] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s20 -> s2 [105, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s22 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s22 -> s22 [0, 65535] { R9062 += 1, R8976 += 1 };
  s22 -> s7 [91, 103] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s22 -> s24 [104, 104] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s22 -> s7 [105, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s23 [0, 64] { R9062 += 1, R8976 += 1 };
  s23 -> s24 [65, 65] { R9062 += 1, R8976 += 1 };
  s23 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s25 [65, 65] { R9062 += 1, R8976 += 1 };
  s23 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s23 [66, 65535] { R9062 += 1, R8976 += 1 };
  s23 -> s2 [91, 110] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s26 [111, 111] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s23 -> s2 [112, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s24 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s24 -> s24 [0, 65535] { R9062 += 1, R8976 += 1 };
  s24 -> s7 [91, 110] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s24 -> s28 [111, 111] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s24 -> s7 [112, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s26 [0, 64] { R9062 += 1, R8976 += 1 };
  s26 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s27 [65, 65] { R9062 += 1, R8976 += 1 };
  s26 -> s28 [65, 65] { R9062 += 1, R8976 += 1 };
  s26 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s26 [66, 65535] { R9062 += 1, R8976 += 1 };
  s26 -> s2 [91, 114] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s29 [115, 115] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s26 -> s2 [116, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s28 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s28 -> s28 [0, 65535] { R9062 += 1, R8976 += 1 };
  s28 -> s7 [91, 114] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s28 -> s31 [115, 115] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s28 -> s7 [116, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s29 [0, 64] { R9062 += 1, R8976 += 1 };
  s29 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s30 [65, 65] { R9062 += 1, R8976 += 1 };
  s29 -> s31 [65, 65] { R9062 += 1, R8976 += 1 };
  s29 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s29 [66, 65535] { R9062 += 1, R8976 += 1 };
  s29 -> s2 [91, 115] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s32 [116, 116] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s29 -> s2 [117, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s31 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s31 -> s31 [0, 65535] { R9062 += 1, R8976 += 1 };
  s31 -> s7 [91, 115] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s31 -> s33 [116, 116] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s31 -> s7 [117, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s32 -> s2 [0, 64] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s32 -> s6 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s32 -> s7 [65, 65] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s32 -> s2 [66, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s32 -> s2 [91, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s33 -> s7 [0, 81] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s33 -> s7 [91, 65535] { R9062 += 1, R8976 += 1, R8054 += 1 };
  s34 -> s34 [0, 65535] { R9062 += 1 };
  s34 -> s35 [0, 65535];
  s35 -> s35 [0, 65535];
  accepting s34, s2, s6, s7, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s0 [0, 65535] { R9063 += 1, R9064 += 1 };
  s0 -> s2 [0, 65535] { R9064 += 1, R8977 += 1, R8978 += 1 };
  s0 -> s3 [65, 65] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s4 [65, 65] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s1 [66, 65535] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [0, 64] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9064 += 1 };
  s1 -> s3 [65, 65] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s4 [65, 65] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [66, 65535] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s1 [0, 64] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9064 += 1, R8977 += 1, R8978 += 1 };
  s2 -> s3 [65, 65] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s4 [65, 65] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s1 [66, 65535] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9064 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9064 += 1, R8978 += 1, R8057 += 1, R8058 += 1 };
  s4 -> s6 [0, 65535] { R9064 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9064 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s0 -> s2 [0, 64] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s0 -> s3 [0, 65535] { R9066 += 1, R8979 += 1, R8980 += 1 };
  s0 -> s0 [0, 65535] { R9065 += 1, R9066 += 1 };
  s0 -> s4 [65, 65] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s0 -> s5 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s0 -> s6 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s0 -> s7 [65, 65] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s0 -> s1 [66, 65535] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s0 -> s2 [66, 65535] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s1 -> s1 [0, 64] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9066 += 1 };
  s1 -> s5 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s1 -> s6 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s1 -> s1 [66, 65535] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s2 -> s1 [0, 64] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s2 -> s2 [0, 64] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s2 -> s4 [65, 65] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s2 -> s5 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s2 -> s6 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s2 -> s7 [65, 65] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s2 -> s1 [66, 65535] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s2 -> s2 [66, 65535] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s3 -> s1 [0, 64] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s3 -> s2 [0, 64] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s3 -> s3 [0, 65535] { R9066 += 1, R8979 += 1, R8980 += 1 };
  s3 -> s4 [65, 65] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s3 -> s5 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s3 -> s6 [65, 65] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s3 -> s7 [65, 65] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s3 -> s1 [66, 65535] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s3 -> s2 [66, 65535] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s5 -> s5 [0, 65535] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R9066 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9066 += 1 };
  s7 -> s5 [0, 65535] { R9066 += 1, R8980 += 1, R8900 += 1, R8901 += 1 };
  s7 -> s7 [0, 65535] { R9066 += 1, R8980 += 1, R8899 += 1, R8900 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9066 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R9068 += 1, R8982 += 1 };
  s0 -> s2 [0, 65535] { R9068 += 1, R8981 += 1, R8982 += 1 };
  s0 -> s0 [0, 65535] { R9067 += 1, R9068 += 1 };
  s0 -> s3 [65, 65] { R9068 += 1, R8982 += 1 };
  s0 -> s4 [65, 65] { R9068 += 1, R8982 += 1 };
  s0 -> s1 [66, 65535] { R9068 += 1, R8982 += 1 };
  s1 -> s1 [0, 64] { R9068 += 1, R8982 += 1 };
  s1 -> s1 [0, 65535] { R9068 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9068 += 1, R8982 += 1 };
  s1 -> s4 [65, 65] { R9068 += 1, R8982 += 1 };
  s1 -> s1 [66, 65535] { R9068 += 1, R8982 += 1 };
  s2 -> s1 [0, 64] { R9068 += 1, R8982 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9068 += 1, R8981 += 1, R8982 += 1 };
  s2 -> s3 [65, 65] { R9068 += 1, R8982 += 1 };
  s2 -> s4 [65, 65] { R9068 += 1, R8982 += 1 };
  s2 -> s1 [66, 65535] { R9068 += 1, R8982 += 1 };
  s3 -> s3 [0, 65535] { R9068 += 1, R8982 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9068 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9068 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9068 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s0 -> s0 [0, 65535] { R9069 += 1, R9070 += 1 };
  s0 -> s2 [0, 65535] { R9070 += 1, R8983 += 1, R8984 += 1 };
  s0 -> s3 [65, 65] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s0 -> s4 [65, 65] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s0 -> s1 [66, 65535] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s1 -> s1 [0, 64] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s1 -> s1 [0, 65535] { R9070 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s1 -> s4 [65, 65] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s1 -> s1 [66, 65535] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s2 -> s1 [0, 64] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9070 += 1, R8983 += 1, R8984 += 1 };
  s2 -> s3 [65, 65] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s2 -> s4 [65, 65] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s2 -> s1 [66, 65535] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s3 -> s3 [0, 65535] { R9070 += 1, R8984 += 1, R8905 += 1, R8906 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9070 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9070 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R8934 && R5 = R9070 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R8911 = 0 && R8912 = R8934 && R8913 = 0 && R8914 = R8934 && R8915 = 0 && R8916 = R8934 && R8917 = 0 && R8918 = R8934 && R8919 = 0 && R8920 = R8934 && R8921 = 0 && R8922 = R8934 && R8923 = 0 && R8924 = R8934 && R8925 = 0 && R8926 = R8934 && R8927 = 0 && R8928 = R8934 && R8929 = 0 && R8930 = R8934 && R8931 = 0 && R8932 = R8934 && R8933 = 0 && R8935 = 0 && R8936 = R9070 && R8937 = 0 && R8938 = R9070 && R8939 = 0 && R8940 = R9070 && R8941 = 0 && R8942 = R9070 && R8943 = 0 && R8944 = R9070 && R8945 = 0 && R8946 = R9070 && R8947 = 0 && R8948 = R9070 && R8949 = 0 && R8950 = R9070 && R8951 = 0 && R8952 = R9070 && R8953 = 0 && R8954 = R9070 && R8955 = 0 && R8956 = R9070 && R8957 = 0 && R8958 = R9070 && R8959 = 0 && R8960 = R9070 && R8961 = 0 && R8962 = R9070 && R8965 = 0 && R8966 = 0 && R8975 = 0 && R8976 = 0 && R8979 = 0 && R8980 = 0 && R9013 = 10 && R9014 = R9070 && R9015 = 10 && R9016 = R9070 && R9017 = 10 && R9018 = R9070 && R9019 = 10 && R9020 = R9070 && R9021 = 10 && R9022 = R9070 && R9023 = 10 && R9024 = R9070 && R9025 = 10 && R9026 = R9070 && R9027 = 10 && R9028 = R9070 && R9029 = 10 && R9030 = R9070 && R9031 = 10 && R9032 = R9070 && R9033 = 10 && R9034 = R9070 && R9035 = 10 && R9036 = R9070 && R9037 = 10 && R9038 = R9070 && R9039 = 10 && R9040 = R9070 && R9041 = 10 && R9042 = R9070 && R9043 = 10 && R9044 = R9070 && R9045 = 10 && R9046 = R9070 && R9047 = 10 && R9048 = R9070 && R9049 = 10 && R9050 = R9070 && R9051 = 10 && R9052 = R9070 && R9053 = 10 && R9054 = R9070 && R9055 = 10 && R9056 = R9070 && R9057 = 10 && R9058 = R9070 && R9059 = 10 && R9060 = R9070 && R9061 = 10 && R9062 = R9070 && R9063 = 10 && R9064 = R9070 && R9065 = 10 && R9066 = R9070 && R9067 = 10 && R9068 = R9070 && R9069 = 10 && R94 + R91 + R112 + R109 != 0 && R8062 + R8059 + R8910 + R8907 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R8934 && 9 < R9070 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8055 + R8053 = 0 && R8056 + R8054 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8060 + R8057 = 0 && R8061 + R8058 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R8055 + R8053 != 0 || R494 + R493 + -1*R8056 + -1*R8054 = 0 || R494 + R493 < 1) && (R8060 + R8057 != 0 || R494 + R493 + -1*R8061 + -1*R8058 = 0 || R494 + R493 < 1) && (R30 = 0 || (R8963 = 0 && R8964 = 0)) && (R30 = 0 || (R8967 = 0 && R8968 = 0)) && (R30 = 0 || (R8969 = 0 && R8970 = 0)) && (R30 = 0 || (R8971 = 0 && R8972 = 0)) && (R30 = 0 || (R8973 = 0 && R8974 = 0)) && (R30 = 0 || (R8977 = 0 && R8978 = 0)) && (R30 = 0 || (R8981 = 0 && R8982 = 0)) && (R30 = 0 || (R8983 = 0 && R8984 = 0)) && (R32 = 0 || (R8985 = 0 && R8986 = 0)) && (R32 = 0 || (R8987 = 0 && R8988 = 0)) && (R32 = 0 || (R8989 = 0 && R8990 = 0)) && (R32 = 0 || (R8991 = 0 && R8992 = 0)) && (R32 = 0 || (R8993 = 0 && R8994 = 0)) && (R32 = 0 || (R8995 = 0 && R8996 = 0)) && (R32 = 0 || (R8997 = 0 && R8998 = 0)) && (R32 = 0 || (R8999 = 0 && R9000 = 0)) && (R32 = 0 || (R9001 = 0 && R9002 = 0)) && (R32 = 0 || (R9003 = 0 && R9004 = 0)) && (R32 = 0 || (R9005 = 0 && R9006 = 0)) && (R32 = 0 || (R9007 = 0 && R9008 = 0)) && (R32 = 0 || (R9009 = 0 && R9010 = 0)) && (R32 = 0 || (R9011 = 0 && R9012 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R8055 + R8053 = 0 || R494 + R493 < 1) && (R8060 + R8057 = 0 || R494 + R493 < 1) && (R8904 + R8901 = 0 || (R8902 + R8899 = 0 && R8903 + R8900 = 0)) && (R8904 + R8901 = 0 || (R8908 + R8905 = 0 && R8909 + R8906 = 0));
// End of Parikh automata intersection problem
