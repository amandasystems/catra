// Parikh automata intersection problem, generated by OSTRICH+
counter int
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R13293 += 1, R13294 += 1 };
  s0 -> s1 [0, 65535] { R13294 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13294 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R13296 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R13295 += 1, R13296 += 1 };
  s1 -> s1 [0, 65535] { R13296 += 1, R68 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R13298 += 1 };
  s0 -> s2 [0, 65535] { R13298 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R13297 += 1, R13298 += 1 };
  s0 -> s1 [90, 65535] { R13298 += 1 };
  s1 -> s1 [0, 88] { R13298 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R13298 += 1 };
  s2 -> s1 [0, 88] { R13298 += 1 };
  s2 -> s2 [0, 65535] { R13298 += 1, R70 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R13298 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R13300 += 1 };
  s0 -> s2 [0, 65535] { R13300 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R13299 += 1, R13300 += 1 };
  s0 -> s1 [74, 65535] { R13300 += 1 };
  s1 -> s1 [0, 72] { R13300 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R13300 += 1 };
  s2 -> s1 [0, 72] { R13300 += 1 };
  s2 -> s2 [0, 65535] { R13300 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R13300 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R13302 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R13302 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R13301 += 1, R13302 += 1 };
  s1 -> s1 [0, 65535] { R13302 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R13302 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13302 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R13302 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13302 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R13303 += 1, R13304 += 1 };
  s0 -> s1 [0, 65535] { R13304 += 1 };
  s1 -> s1 [0, 65535] { R13304 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R13305 += 1, R13306 += 1 };
  s0 -> s1 [0, 65535] { R13306 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R13306 += 1, R82 += 1, R83 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13306 += 1 };
  s1 -> s1 [0, 65535] { R13306 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13306 += 1, R83 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R13306 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13306 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R13308 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R13308 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R13307 += 1, R13308 += 1 };
  s0 -> s3 [108, 108] { R13308 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R13308 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R13308 += 1 };
  s1 -> s1 [0, 65535] { R13308 += 1, R88 += 1 };
  s2 -> s1 [0, 107] { R13308 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R13308 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R13308 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R13308 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R13308 += 1, R88 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13308 += 1 };
  s3 -> s5 [111, 111] { R13308 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R13308 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R13308 += 1, R88 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13308 += 1 };
  s5 -> s6 [99, 99] { R13308 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R13308 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R13308 += 1, R88 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R13308 += 1 };
  s6 -> s7 [97, 97] { R13308 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R13308 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R13308 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R13308 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R13308 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R13308 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R13308 += 1, R88 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R13308 += 1 };
  s8 -> s9 [104, 104] { R13308 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R13308 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R13308 += 1, R88 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R13308 += 1 };
  s9 -> s10 [111, 111] { R13308 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R13308 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R13308 += 1, R88 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R13308 += 1 };
  s10 -> s11 [115, 115] { R13308 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R13308 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R13308 += 1, R88 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R13308 += 1 };
  s11 -> s12 [116, 116] { R13308 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R13308 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R13308 += 1, R88 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R13308 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R13309 += 1, R13310 += 1 };
  s0 -> s1 [0, 65535] { R13310 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R13310 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13310 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R13310 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13310 += 1 };
  s2 -> s2 [0, 65535] { R13310 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13310 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R13312 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R13312 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R13311 += 1, R13312 += 1 };
  s1 -> s1 [0, 65535] { R13312 += 1, R98 += 1, R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R13312 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13312 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535] { R13312 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13312 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R13313 += 1, R13314 += 1 };
  s0 -> s1 [0, 65535] { R13314 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13314 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R13316 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R13315 += 1, R13316 += 1 };
  s0 -> s2 [0, 65535] { R13316 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13316 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R13316 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13316 += 1 };
  s2 -> s2 [0, 65535] { R13316 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13316 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R13318 += 1 };
  s0 -> s0 [0, 65535] { R13317 += 1, R13318 += 1 };
  s1 -> s1 [0, 65535] { R13318 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R13320 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R13319 += 1, R13320 += 1 };
  s0 -> s2 [0, 65535] { R13320 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [73, 73] { R13320 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R13320 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R13320 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R13320 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R13320 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R13320 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R13320 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R13320 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R13320 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R13320 += 1, R110 += 1, R111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R13320 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R13320 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R13320 += 1, R111 += 1, R112 += 1 };
  s3 -> s6 [0, 65535] { R13320 += 1 };
  s3 -> s3 [0, 65535] { R13320 += 1, R111 += 1, R112 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13320 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13320 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R13344 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R13343 += 1, R13344 += 1 };
  s1 -> s1 [0, 65535] { R13344 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R13346 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R13345 += 1, R13346 += 1 };
  s0 -> s2 [65, 65] { R13346 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R13346 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R13346 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R13346 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13346 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R13346 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R13346 += 1, R67 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13346 += 1, R67 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R13348 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R13347 += 1, R13348 += 1 };
  s0 -> s2 [65, 65] { R13348 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R13348 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R13348 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R13348 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13348 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R13348 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R13348 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13348 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R13350 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R13349 += 1, R13350 += 1 };
  s0 -> s2 [65, 65] { R13350 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R13350 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R13350 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R13350 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13350 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R13350 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R13350 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R13350 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R13352 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R13351 += 1, R13352 += 1 };
  s0 -> s2 [65, 65] { R13352 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R13352 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R13352 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R13352 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13352 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R13352 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R13352 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R13352 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R13354 += 1 };
  s0 -> s0 [0, 65535] { R13353 += 1, R13354 += 1 };
  s0 -> s2 [65, 65] { R13354 += 1 };
  s0 -> s3 [65, 65] { R13354 += 1 };
  s0 -> s1 [66, 65535] { R13354 += 1 };
  s1 -> s1 [0, 64] { R13354 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13354 += 1 };
  s1 -> s3 [65, 65] { R13354 += 1 };
  s1 -> s1 [66, 65535] { R13354 += 1 };
  s2 -> s2 [0, 65535] { R13354 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R13356 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R13355 += 1, R13356 += 1 };
  s0 -> s2 [65, 65] { R13356 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R13356 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R13356 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R13356 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13356 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R13356 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R13356 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13356 += 1, R79 += 1, R80 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R13358 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R13357 += 1, R13358 += 1 };
  s0 -> s2 [65, 65] { R13358 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R13358 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R13358 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R13358 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13358 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R13358 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R13358 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13358 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R13360 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R13359 += 1, R13360 += 1 };
  s0 -> s2 [65, 65] { R13360 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R13360 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R13360 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R13360 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13360 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R13360 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R13360 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13360 += 1, R89 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R13362 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R13361 += 1, R13362 += 1 };
  s0 -> s2 [65, 65] { R13362 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R13362 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R13362 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R13362 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13362 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R13362 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R13362 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R13362 += 1, R95 += 1, R96 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R13364 += 1 };
  s0 -> s0 [0, 65535] { R13363 += 1, R13364 += 1 };
  s0 -> s2 [65, 65] { R13364 += 1 };
  s0 -> s3 [65, 65] { R13364 += 1 };
  s0 -> s1 [66, 65535] { R13364 += 1 };
  s1 -> s1 [0, 64] { R13364 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13364 += 1 };
  s1 -> s3 [65, 65] { R13364 += 1 };
  s1 -> s1 [66, 65535] { R13364 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13364 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R13366 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R13365 += 1, R13366 += 1 };
  s0 -> s2 [65, 65] { R13366 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R13366 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R13366 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R13366 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13366 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R13366 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R13366 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13366 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R13368 += 1 };
  s0 -> s0 [0, 65535] { R13367 += 1, R13368 += 1 };
  s0 -> s2 [65, 65] { R13368 += 1 };
  s0 -> s3 [65, 65] { R13368 += 1 };
  s0 -> s1 [66, 65535] { R13368 += 1 };
  s1 -> s1 [0, 64] { R13368 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13368 += 1 };
  s1 -> s3 [65, 65] { R13368 += 1 };
  s1 -> s1 [66, 65535] { R13368 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13368 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R13370 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R13369 += 1, R13370 += 1 };
  s0 -> s2 [65, 65] { R13370 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R13370 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R13370 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R13370 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R13370 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R13370 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R13370 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R13370 += 1, R107 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R13372 += 1 };
  s0 -> s0 [0, 65535] { R13371 += 1, R13372 += 1 };
  s0 -> s1 [45, 45] { R13372 += 1 };
  s0 -> s2 [46, 46] { R13372 += 1 };
  s0 -> s1 [48, 62] { R13372 += 1 };
  s0 -> s3 [65, 65] { R13372 += 1 };
  s0 -> s1 [66, 65535] { R13372 += 1 };
  s1 -> s1 [0, 43] { R13372 += 1 };
  s1 -> s1 [45, 45] { R13372 += 1 };
  s1 -> s2 [46, 46] { R13372 += 1 };
  s1 -> s1 [48, 62] { R13372 += 1 };
  s1 -> s3 [65, 65] { R13372 += 1 };
  s1 -> s1 [66, 65535] { R13372 += 1 };
  s2 -> s1 [0, 43] { R13372 += 1 };
  s2 -> s1 [45, 45] { R13372 += 1 };
  s2 -> s2 [46, 46] { R13372 += 1 };
  s2 -> s1 [48, 62] { R13372 += 1 };
  s2 -> s3 [65, 65] { R13372 += 1 };
  s2 -> s1 [66, 114] { R13372 += 1 };
  s2 -> s8 [115, 115] { R13372 += 1 };
  s2 -> s1 [116, 65535] { R13372 += 1 };
  s3 -> s3 [0, 43] { R13372 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R13372 += 1 };
  s3 -> s4 [46, 46] { R13372 += 1 };
  s3 -> s3 [48, 62] { R13372 += 1 };
  s3 -> s3 [65, 65535] { R13372 += 1 };
  s4 -> s3 [0, 43] { R13372 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R13372 += 1 };
  s4 -> s4 [46, 46] { R13372 += 1 };
  s4 -> s3 [48, 62] { R13372 += 1 };
  s4 -> s3 [65, 114] { R13372 += 1 };
  s4 -> s5 [115, 115] { R13372 += 1 };
  s4 -> s3 [116, 65535] { R13372 += 1 };
  s5 -> s3 [0, 43] { R13372 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R13372 += 1 };
  s5 -> s4 [46, 46] { R13372 += 1 };
  s5 -> s3 [48, 62] { R13372 += 1 };
  s5 -> s3 [65, 110] { R13372 += 1 };
  s5 -> s6 [111, 111] { R13372 += 1 };
  s5 -> s3 [112, 65535] { R13372 += 1 };
  s6 -> s3 [0, 43] { R13372 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R13372 += 1 };
  s6 -> s4 [46, 46] { R13372 += 1 };
  s6 -> s3 [48, 62] { R13372 += 1 };
  s6 -> s3 [65, 98] { R13372 += 1 };
  s6 -> s7 [99, 99] { R13372 += 1 };
  s6 -> s3 [100, 65535] { R13372 += 1 };
  s7 -> s3 [0, 43] { R13372 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R13372 += 1 };
  s7 -> s4 [46, 46] { R13372 += 1 };
  s7 -> s3 [48, 62] { R13372 += 1 };
  s7 -> s3 [65, 106] { R13372 += 1 };
  s7 -> s3 [108, 65535] { R13372 += 1 };
  s8 -> s1 [0, 43] { R13372 += 1 };
  s8 -> s1 [45, 45] { R13372 += 1 };
  s8 -> s2 [46, 46] { R13372 += 1 };
  s8 -> s1 [48, 62] { R13372 += 1 };
  s8 -> s3 [65, 65] { R13372 += 1 };
  s8 -> s1 [66, 110] { R13372 += 1 };
  s8 -> s9 [111, 111] { R13372 += 1 };
  s8 -> s1 [112, 65535] { R13372 += 1 };
  s9 -> s1 [0, 43] { R13372 += 1 };
  s9 -> s1 [45, 45] { R13372 += 1 };
  s9 -> s2 [46, 46] { R13372 += 1 };
  s9 -> s1 [48, 62] { R13372 += 1 };
  s9 -> s3 [65, 65] { R13372 += 1 };
  s9 -> s1 [66, 98] { R13372 += 1 };
  s9 -> s10 [99, 99] { R13372 += 1 };
  s9 -> s1 [100, 65535] { R13372 += 1 };
  s10 -> s1 [0, 43] { R13372 += 1 };
  s10 -> s1 [45, 45] { R13372 += 1 };
  s10 -> s2 [46, 46] { R13372 += 1 };
  s10 -> s1 [48, 62] { R13372 += 1 };
  s10 -> s3 [65, 65] { R13372 += 1 };
  s10 -> s1 [66, 106] { R13372 += 1 };
  s10 -> s1 [108, 65535] { R13372 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R13373 += 1, R13374 += 1 };
  s0 -> s1 [0, 65535] { R13374 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13374 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R13376 += 1 };
  s0 -> s2 [0, 65535] { R13376 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R13375 += 1, R13376 += 1 };
  s0 -> s3 [58, 58] { R13376 += 1 };
  s0 -> s1 [59, 65535] { R13376 += 1 };
  s1 -> s1 [0, 57] { R13376 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R13376 += 1 };
  s1 -> s1 [59, 65535] { R13376 += 1 };
  s2 -> s1 [0, 57] { R13376 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13376 += 1, R16 += 1 };
  s2 -> s3 [58, 58] { R13376 += 1 };
  s2 -> s1 [59, 65535] { R13376 += 1 };
  s3 -> s3 [0, 65535] { R13376 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R13378 += 1 };
  s0 -> s0 [0, 65535] { R13377 += 1, R13378 += 1 };
  s0 -> s2 [0, 65535] { R13378 += 1, R17 += 1 };
  s0 -> s3 [65, 65] { R13378 += 1 };
  s0 -> s1 [66, 65535] { R13378 += 1 };
  s1 -> s1 [0, 64] { R13378 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R13378 += 1 };
  s1 -> s1 [66, 65535] { R13378 += 1 };
  s2 -> s1 [0, 64] { R13378 += 1 };
  s2 -> s2 [0, 65535] { R13378 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R13378 += 1 };
  s2 -> s1 [66, 65535] { R13378 += 1 };
  s3 -> s3 [0, 65535] { R13378 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R13380 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R13379 += 1, R13380 += 1 };
  s0 -> s2 [0, 65535] { R13380 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [91, 91] { R13380 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R13380 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13380 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R13380 += 1 };
  s2 -> s1 [0, 90] { R13380 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13380 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [91, 91] { R13380 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R13380 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R13380 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13380 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R13382 += 1, R36 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R13381 += 1, R13382 += 1 };
  s0 -> s2 [0, 65535] { R13382 += 1, R35 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R13382 += 1, R36 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13382 += 1 };
  s2 -> s1 [0, 65535] { R13382 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13382 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13382 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R13384 += 1, R13270 += 1 };
  s0 -> s0 [0, 65535] { R13383 += 1, R13384 += 1 };
  s0 -> s2 [0, 65535] { R13384 += 1, R13269 += 1, R13270 += 1 };
  s0 -> s1 [66, 65535] { R13384 += 1, R13270 += 1 };
  s1 -> s1 [0, 64] { R13384 += 1, R13270 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13384 += 1 };
  s1 -> s1 [66, 65535] { R13384 += 1, R13270 += 1 };
  s2 -> s1 [0, 64] { R13384 += 1, R13270 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13384 += 1, R13269 += 1, R13270 += 1 };
  s2 -> s1 [66, 65535] { R13384 += 1, R13270 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R13386 += 1, R13271 += 1, R13272 += 1 };
  s0 -> s2 [0, 65535] { R13386 += 1, R13272 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R13385 += 1, R13386 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13386 += 1, R13271 += 1, R13272 += 1 };
  s1 -> s2 [0, 65535] { R13386 += 1, R13272 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13386 += 1, R13272 += 1, R29 += 1 };
  s2 -> s4 [0, 65535] { R13386 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13386 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R13388 += 1, R13274 += 1 };
  s0 -> s0 [0, 65535] { R13387 += 1, R13388 += 1 };
  s0 -> s2 [0, 65535] { R13388 += 1, R13273 += 1, R13274 += 1 };
  s0 -> s1 [81, 65535] { R13388 += 1, R13274 += 1 };
  s1 -> s1 [0, 65] { R13388 += 1, R13274 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R13388 += 1 };
  s1 -> s1 [81, 65535] { R13388 += 1, R13274 += 1 };
  s2 -> s1 [0, 65] { R13388 += 1, R13274 += 1 };
  s2 -> s2 [0, 65535] { R13388 += 1, R13273 += 1, R13274 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R13388 += 1, R13274 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R13390 += 1, R13276 += 1, R494 += 1 };
  s0 -> s0 [0, 65535] { R13389 += 1, R13390 += 1 };
  s0 -> s2 [0, 65535] { R13390 += 1, R13275 += 1, R13276 += 1 };
  s1 -> s1 [0, 65535] { R13390 += 1, R13276 += 1, R494 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13390 += 1 };
  s2 -> s1 [0, 65535] { R13390 += 1, R13276 += 1, R494 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13390 += 1, R13275 += 1, R13276 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13390 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R13392 += 1, R13278 += 1 };
  s0 -> s2 [0, 65535] { R13392 += 1, R13277 += 1, R13278 += 1 };
  s0 -> s3 [0, 65535] { R13392 += 1, R13278 += 1, R496 += 1 };
  s0 -> s0 [0, 65535] { R13391 += 1, R13392 += 1 };
  s0 -> s1 [82, 65535] { R13392 += 1, R13278 += 1 };
  s1 -> s1 [0, 80] { R13392 += 1, R13278 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R13392 += 1 };
  s1 -> s1 [82, 65535] { R13392 += 1, R13278 += 1 };
  s2 -> s1 [0, 80] { R13392 += 1, R13278 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R13392 += 1, R13277 += 1, R13278 += 1 };
  s2 -> s3 [0, 65535] { R13392 += 1, R13278 += 1, R496 += 1 };
  s2 -> s1 [82, 65535] { R13392 += 1, R13278 += 1 };
  s3 -> s1 [0, 80] { R13392 += 1, R13278 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R13392 += 1 };
  s3 -> s3 [0, 65535] { R13392 += 1, R13278 += 1, R496 += 1 };
  s3 -> s1 [82, 65535] { R13392 += 1, R13278 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R13392 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R13394 += 1, R13280 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R13394 += 1, R13279 += 1, R13280 += 1 };
  s0 -> s0 [0, 65535] { R13393 += 1, R13394 += 1 };
  s0 -> s3 [0, 65535] { R13394 += 1, R13280 += 1, R499 += 1, R500 += 1 };
  s0 -> s1 [82, 65535] { R13394 += 1, R13280 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R13394 += 1, R13280 += 1, R500 += 1 };
  s1 -> s1 [0, 65535] { R13394 += 1, R13280 += 1 };
  s1 -> s4 [0, 65535] { R13394 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R13394 += 1, R13280 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R13394 += 1, R13280 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R13394 += 1, R13279 += 1, R13280 += 1 };
  s2 -> s3 [0, 65535] { R13394 += 1, R13280 += 1, R499 += 1, R500 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R13394 += 1, R13280 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R13394 += 1, R13280 += 1, R500 += 1 };
  s3 -> s4 [0, 65535] { R13394 += 1 };
  s3 -> s3 [0, 65535] { R13394 += 1, R13280 += 1, R499 += 1, R500 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R13394 += 1, R13280 += 1, R500 += 1 };
  s4 -> s4 [0, 65535] { R13394 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R13396 += 1, R13282 += 1, R504 += 1, R505 += 1 };
  s0 -> s2 [0, 65535] { R13396 += 1, R13281 += 1, R13282 += 1 };
  s0 -> s3 [0, 65535] { R13396 += 1, R13282 += 1, R505 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R13395 += 1, R13396 += 1 };
  s1 -> s4 [0, 65535] { R13396 += 1 };
  s1 -> s1 [0, 65535] { R13396 += 1, R13282 += 1, R504 += 1, R505 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R13396 += 1, R13282 += 1, R505 += 1, R506 += 1 };
  s2 -> s1 [0, 65535] { R13396 += 1, R13282 += 1, R504 += 1, R505 += 1 };
  s2 -> s2 [0, 65535] { R13396 += 1, R13281 += 1, R13282 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R13396 += 1, R13282 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535] { R13396 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13396 += 1, R13282 += 1, R505 += 1, R506 += 1 };
  s3 -> s6 [0, 65535] { R13396 += 1, R13282 += 1 };
  s4 -> s4 [0, 65535] { R13396 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R13396 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13396 += 1, R13282 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R13398 += 1, R13284 += 1, R8056 += 1 };
  s0 -> s1 [0, 65535] { R13398 += 1, R13284 += 1 };
  s0 -> s0 [0, 65535] { R13397 += 1, R13398 += 1 };
  s0 -> s2 [0, 65535] { R13398 += 1, R13283 += 1, R13284 += 1 };
  s0 -> s1 [91, 65535] { R13398 += 1, R13284 += 1, R8056 += 1 };
  s1 -> s1 [0, 81] { R13398 += 1, R13284 += 1, R8056 += 1 };
  s1 -> s1 [0, 65535] { R13398 += 1, R13284 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13398 += 1 };
  s1 -> s1 [91, 65535] { R13398 += 1, R13284 += 1, R8056 += 1 };
  s2 -> s1 [0, 81] { R13398 += 1, R13284 += 1, R8056 += 1 };
  s2 -> s1 [0, 65535] { R13398 += 1, R13284 += 1 };
  s2 -> s2 [0, 65535] { R13398 += 1, R13283 += 1, R13284 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R13398 += 1, R13284 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13398 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R13400 += 1, R13285 += 1, R13286 += 1 };
  s0 -> s0 [0, 65535] { R13399 += 1, R13400 += 1 };
  s0 -> s2 [0, 65535] { R13400 += 1, R13286 += 1 };
  s1 -> s1 [0, 65535] { R13400 += 1, R13285 += 1, R13286 += 1 };
  s1 -> s2 [0, 65535] { R13400 += 1, R13286 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R13400 += 1, R13286 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R13400 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13400 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R13402 += 1, R13287 += 1, R13288 += 1 };
  s0 -> s0 [0, 65535] { R13401 += 1, R13402 += 1 };
  s0 -> s2 [0, 65535] { R13402 += 1, R13288 += 1, R13094 += 1, R13095 += 1 };
  s0 -> s3 [0, 65535] { R13402 += 1, R13288 += 1, R13095 += 1, R13096 += 1 };
  s1 -> s1 [0, 65535] { R13402 += 1, R13287 += 1, R13288 += 1 };
  s1 -> s2 [0, 65535] { R13402 += 1, R13288 += 1, R13094 += 1, R13095 += 1 };
  s1 -> s3 [0, 65535] { R13402 += 1, R13288 += 1, R13095 += 1, R13096 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R13402 += 1, R13288 += 1, R13094 += 1, R13095 += 1 };
  s2 -> s5 [0, 65535] { R13402 += 1 };
  s2 -> s3 [0, 65535] { R13402 += 1, R13288 += 1, R13095 += 1, R13096 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R13402 += 1, R13288 += 1 };
  s3 -> s5 [0, 65535] { R13402 += 1 };
  s3 -> s3 [0, 65535] { R13402 += 1, R13288 += 1, R13095 += 1, R13096 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R13402 += 1, R13288 += 1 };
  s4 -> s5 [0, 65535] { R13402 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R13402 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R13403 += 1, R13404 += 1 };
  s0 -> s1 [0, 65535] { R13404 += 1, R13290 += 1 };
  s0 -> s2 [0, 65535] { R13404 += 1, R13289 += 1, R13290 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13404 += 1 };
  s1 -> s1 [0, 65535] { R13404 += 1, R13290 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13404 += 1, R13290 += 1 };
  s2 -> s2 [0, 65535] { R13404 += 1, R13289 += 1, R13290 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13404 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 80] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s0 -> s1 [0, 65535] { R13406 += 1, R13292 += 1 };
  s0 -> s2 [0, 65535] { R13406 += 1, R13291 += 1, R13292 += 1 };
  s0 -> s0 [0, 65535] { R13405 += 1, R13406 += 1 };
  s0 -> s3 [81, 81] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s0 -> s4 [81, 81] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s0 -> s1 [82, 65535] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s1 -> s1 [0, 80] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13406 += 1, R13292 += 1 };
  s1 -> s6 [0, 65535] { R13406 += 1 };
  s1 -> s3 [81, 81] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s1 -> s4 [81, 81] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s1 -> s1 [82, 65535] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s2 -> s1 [0, 80] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R13406 += 1, R13292 += 1 };
  s2 -> s2 [0, 65535] { R13406 += 1, R13291 += 1, R13292 += 1 };
  s2 -> s3 [81, 81] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s2 -> s4 [81, 81] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s2 -> s1 [82, 65535] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R13406 += 1, R13292 += 1 };
  s3 -> s3 [0, 65535] { R13406 += 1, R13292 += 1, R13267 += 1, R13268 += 1 };
  s3 -> s6 [0, 65535] { R13406 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13406 += 1 };
  s4 -> s4 [0, 65535] { R13406 += 1, R13292 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13406 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R13406 += 1, R13292 += 1 };
  s7 -> s6 [0, 65535] { R13406 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R13407 += 1, R13408 += 1 };
  s0 -> s1 [0, 65535] { R13408 += 1, R13322 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R13408 += 1, R13321 += 1, R13322 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R13408 += 1 };
  s1 -> s1 [0, 65535] { R13408 += 1, R13322 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R13408 += 1, R13322 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R13408 += 1, R13321 += 1, R13322 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R13408 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R13410 += 1, R13324 += 1 };
  s0 -> s0 [0, 65535] { R13409 += 1, R13410 += 1 };
  s0 -> s2 [0, 65535] { R13410 += 1, R13323 += 1, R13324 += 1 };
  s0 -> s3 [65, 65] { R13410 += 1, R13324 += 1 };
  s0 -> s4 [65, 65] { R13410 += 1, R13324 += 1 };
  s0 -> s5 [81, 81] { R13410 += 1, R13324 += 1 };
  s0 -> s1 [82, 65535] { R13410 += 1, R13324 += 1 };
  s1 -> s1 [0, 64] { R13410 += 1, R13324 += 1 };
  s1 -> s3 [65, 65] { R13410 += 1, R13324 += 1 };
  s1 -> s4 [65, 65] { R13410 += 1, R13324 += 1 };
  s1 -> s5 [81, 81] { R13410 += 1, R13324 += 1 };
  s1 -> s1 [82, 65535] { R13410 += 1, R13324 += 1 };
  s2 -> s1 [0, 64] { R13410 += 1, R13324 += 1 };
  s2 -> s2 [0, 65535] { R13410 += 1, R13323 += 1, R13324 += 1 };
  s2 -> s3 [65, 65] { R13410 += 1, R13324 += 1 };
  s2 -> s4 [65, 65] { R13410 += 1, R13324 += 1 };
  s2 -> s5 [81, 81] { R13410 += 1, R13324 += 1 };
  s2 -> s1 [82, 65535] { R13410 += 1, R13324 += 1 };
  s3 -> s3 [0, 65] { R13410 += 1, R13324 += 1 };
  s3 -> s7 [81, 81] { R13410 += 1, R13324 += 1 };
  s3 -> s3 [82, 65535] { R13410 += 1, R13324 += 1 };
  s5 -> s5 [0, 64] { R13410 += 1, R13324 += 1 };
  s5 -> s5 [0, 65535] { R13410 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R13410 += 1, R13324 += 1 };
  s5 -> s8 [65, 65] { R13410 += 1, R13324 += 1 };
  s5 -> s5 [81, 65535] { R13410 += 1, R13324 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R13410 += 1, R13324 += 1 };
  s7 -> s7 [0, 65535] { R13410 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R13410 += 1, R13324 += 1 };
  s8 -> s8 [0, 65535] { R13410 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R13412 += 1, R13326 += 1, R493 += 1 };
  s0 -> s0 [0, 65535] { R13411 += 1, R13412 += 1 };
  s0 -> s2 [0, 65535] { R13412 += 1, R13325 += 1, R13326 += 1 };
  s0 -> s3 [65, 65] { R13412 += 1, R13326 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R13412 += 1, R13326 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R13412 += 1, R13326 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R13412 += 1, R13326 += 1, R493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13412 += 1 };
  s1 -> s3 [65, 65] { R13412 += 1, R13326 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R13412 += 1, R13326 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R13412 += 1, R13326 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R13412 += 1, R13326 += 1, R493 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13412 += 1, R13325 += 1, R13326 += 1 };
  s2 -> s3 [65, 65] { R13412 += 1, R13326 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R13412 += 1, R13326 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R13412 += 1, R13326 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R13412 += 1, R13326 += 1, R493 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13412 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13412 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13412 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R13414 += 1, R13328 += 1, R495 += 1 };
  s0 -> s2 [0, 65535] { R13414 += 1, R13327 += 1, R13328 += 1 };
  s0 -> s0 [0, 65535] { R13413 += 1, R13414 += 1 };
  s0 -> s3 [65, 65] { R13414 += 1, R13328 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R13414 += 1, R13328 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R13414 += 1, R13328 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R13414 += 1, R13328 += 1, R495 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13414 += 1 };
  s1 -> s3 [65, 65] { R13414 += 1, R13328 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R13414 += 1, R13328 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R13414 += 1, R13328 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R13414 += 1, R13328 += 1, R495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13414 += 1, R13327 += 1, R13328 += 1 };
  s2 -> s3 [65, 65] { R13414 += 1, R13328 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R13414 += 1, R13328 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R13414 += 1, R13328 += 1, R495 += 1 };
  s3 -> s3 [0, 65535] { R13414 += 1, R13328 += 1, R495 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13414 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13414 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13414 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s0 -> s2 [0, 65535] { R13416 += 1, R13329 += 1, R13330 += 1 };
  s0 -> s0 [0, 65535] { R13415 += 1, R13416 += 1 };
  s0 -> s3 [65, 65] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13416 += 1 };
  s1 -> s3 [65, 65] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R13416 += 1, R13329 += 1, R13330 += 1 };
  s2 -> s3 [65, 65] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R13416 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13416 += 1, R13330 += 1, R497 += 1, R498 += 1 };
  s4 -> s6 [0, 65535] { R13416 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13416 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R13418 += 1, R13331 += 1, R13332 += 1 };
  s0 -> s0 [0, 65535] { R13417 += 1, R13418 += 1 };
  s0 -> s3 [65, 65] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 65535] { R13418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s2 -> s2 [0, 65535] { R13418 += 1, R13331 += 1, R13332 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s3 -> s3 [0, 65535] { R13418 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R13418 += 1 };
  s4 -> s4 [0, 65535] { R13418 += 1, R13332 += 1, R501 += 1, R502 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13418 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s0 -> s0 [0, 65535] { R13419 += 1, R13420 += 1 };
  s0 -> s3 [0, 65535] { R13420 += 1, R13333 += 1, R13334 += 1 };
  s0 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s0 -> s5 [65, 65] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s0 -> s7 [65, 65] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s0 -> s1 [66, 65535] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [91, 107] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s0 -> s8 [108, 108] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s0 -> s2 [109, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s1 [0, 64] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s5 [65, 65] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s7 [65, 65] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s1 [66, 65535] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [91, 107] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s8 [108, 108] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s1 -> s2 [109, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s2 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s2 -> s2 [0, 65535] { R13420 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s4 [65, 65] { R13420 += 1, R13334 += 1 };
  s2 -> s6 [65, 65] { R13420 += 1, R13334 += 1 };
  s2 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s2 -> s2 [66, 65535] { R13420 += 1, R13334 += 1 };
  s2 -> s2 [91, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s1 [0, 64] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R13420 += 1, R13333 += 1, R13334 += 1 };
  s3 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s5 [65, 65] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s7 [65, 65] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s1 [66, 65535] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [91, 107] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s8 [108, 108] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s3 -> s2 [109, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s4 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s4 -> s4 [0, 65535] { R13420 += 1, R13334 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s35 [0, 65535] { R13420 += 1 };
  s4 -> s4 [91, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s5 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s5 -> s5 [0, 65535] { R13420 += 1, R13334 += 1, R8053 += 1, R8054 += 1 };
  s5 -> s4 [91, 107] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s5 -> s9 [108, 108] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s5 -> s4 [109, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R13420 += 1 };
  s8 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s8 -> s8 [0, 64] { R13420 += 1, R13334 += 1 };
  s8 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s8 -> s9 [65, 65] { R13420 += 1, R13334 += 1 };
  s8 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s8 -> s10 [65, 65] { R13420 += 1, R13334 += 1 };
  s8 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s8 -> s8 [66, 65535] { R13420 += 1, R13334 += 1 };
  s8 -> s2 [91, 110] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s8 -> s11 [111, 111] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s8 -> s2 [112, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s9 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s9 -> s9 [0, 65535] { R13420 += 1, R13334 += 1 };
  s9 -> s4 [91, 110] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s9 -> s13 [111, 111] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s9 -> s4 [112, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s11 [0, 64] { R13420 += 1, R13334 += 1 };
  s11 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s12 [65, 65] { R13420 += 1, R13334 += 1 };
  s11 -> s13 [65, 65] { R13420 += 1, R13334 += 1 };
  s11 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s11 [66, 65535] { R13420 += 1, R13334 += 1 };
  s11 -> s2 [91, 98] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s14 [99, 99] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s11 -> s2 [100, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s13 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s13 -> s13 [0, 65535] { R13420 += 1, R13334 += 1 };
  s13 -> s4 [91, 98] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s13 -> s17 [99, 99] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s13 -> s4 [100, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s14 [0, 64] { R13420 += 1, R13334 += 1 };
  s14 -> s15 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s16 [65, 65] { R13420 += 1, R13334 += 1 };
  s14 -> s17 [65, 65] { R13420 += 1, R13334 += 1 };
  s14 -> s18 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s14 [66, 65535] { R13420 += 1, R13334 += 1 };
  s14 -> s2 [91, 96] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s19 [97, 97] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s14 -> s2 [98, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s17 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s17 -> s17 [0, 65535] { R13420 += 1, R13334 += 1 };
  s17 -> s4 [91, 96] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s17 -> s18 [97, 97] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s17 -> s4 [98, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s18 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s18 -> s18 [0, 65535] { R13420 += 1, R13334 += 1 };
  s18 -> s4 [91, 107] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s18 -> s22 [108, 108] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s18 -> s4 [109, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s19 [0, 64] { R13420 += 1, R13334 += 1 };
  s19 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s15 [65, 65] { R13420 += 1, R13334 += 1 };
  s19 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s18 [65, 65] { R13420 += 1, R13334 += 1 };
  s19 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s19 [66, 65535] { R13420 += 1, R13334 += 1 };
  s19 -> s2 [91, 107] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s20 [108, 108] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s19 -> s2 [109, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s20 [0, 64] { R13420 += 1, R13334 += 1 };
  s20 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s21 [65, 65] { R13420 += 1, R13334 += 1 };
  s20 -> s22 [65, 65] { R13420 += 1, R13334 += 1 };
  s20 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s20 [66, 65535] { R13420 += 1, R13334 += 1 };
  s20 -> s2 [91, 103] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s23 [104, 104] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s20 -> s2 [105, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s22 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s22 -> s22 [0, 65535] { R13420 += 1, R13334 += 1 };
  s22 -> s4 [91, 103] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s22 -> s24 [104, 104] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s22 -> s4 [105, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s23 [0, 64] { R13420 += 1, R13334 += 1 };
  s23 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s24 [65, 65] { R13420 += 1, R13334 += 1 };
  s23 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s25 [65, 65] { R13420 += 1, R13334 += 1 };
  s23 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s23 [66, 65535] { R13420 += 1, R13334 += 1 };
  s23 -> s2 [91, 110] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s26 [111, 111] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s23 -> s2 [112, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s24 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s24 -> s24 [0, 65535] { R13420 += 1, R13334 += 1 };
  s24 -> s4 [91, 110] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s24 -> s28 [111, 111] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s24 -> s4 [112, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s26 [0, 64] { R13420 += 1, R13334 += 1 };
  s26 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s27 [65, 65] { R13420 += 1, R13334 += 1 };
  s26 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s28 [65, 65] { R13420 += 1, R13334 += 1 };
  s26 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s26 [66, 65535] { R13420 += 1, R13334 += 1 };
  s26 -> s2 [91, 114] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s29 [115, 115] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s26 -> s2 [116, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s28 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s28 -> s28 [0, 65535] { R13420 += 1, R13334 += 1 };
  s28 -> s4 [91, 114] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s28 -> s30 [115, 115] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s28 -> s4 [116, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s29 [0, 64] { R13420 += 1, R13334 += 1 };
  s29 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s30 [65, 65] { R13420 += 1, R13334 += 1 };
  s29 -> s31 [65, 65] { R13420 += 1, R13334 += 1 };
  s29 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s29 [66, 65535] { R13420 += 1, R13334 += 1 };
  s29 -> s2 [91, 115] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s32 [116, 116] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s29 -> s2 [117, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s30 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s30 -> s30 [0, 65535] { R13420 += 1, R13334 += 1 };
  s30 -> s4 [91, 115] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s30 -> s33 [116, 116] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s30 -> s4 [117, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s32 -> s2 [0, 64] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s32 -> s4 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s32 -> s6 [65, 65] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s32 -> s2 [66, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s32 -> s2 [91, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s33 -> s4 [0, 81] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s33 -> s4 [91, 65535] { R13420 += 1, R13334 += 1, R8054 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R13420 += 1 };
  accepting s4, s34, s2, s6, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s0 -> s2 [0, 64] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s0 -> s0 [0, 65535] { R13421 += 1, R13422 += 1 };
  s0 -> s3 [0, 65535] { R13422 += 1, R13335 += 1, R13336 += 1 };
  s0 -> s4 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s0 -> s5 [65, 65] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s0 -> s6 [65, 65] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s0 -> s7 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s0 -> s1 [66, 65535] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s0 -> s2 [66, 65535] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s1 -> s1 [0, 64] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s1 -> s11 [0, 64] { R13422 += 1, R13336 += 1 };
  s1 -> s12 [65, 65] { R13422 += 1, R13336 += 1 };
  s1 -> s4 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s1 -> s7 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s1 -> s8 [65, 65] { R13422 += 1, R13336 += 1 };
  s1 -> s1 [66, 65535] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s1 -> s11 [66, 65535] { R13422 += 1, R13336 += 1 };
  s2 -> s1 [0, 64] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s2 -> s2 [0, 64] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s2 -> s4 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s2 -> s5 [65, 65] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s2 -> s6 [65, 65] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s2 -> s7 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s2 -> s1 [66, 65535] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s2 -> s2 [66, 65535] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s3 -> s1 [0, 64] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s3 -> s2 [0, 64] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s3 -> s3 [0, 65535] { R13422 += 1, R13335 += 1, R13336 += 1 };
  s3 -> s4 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s3 -> s5 [65, 65] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s3 -> s6 [65, 65] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s3 -> s7 [65, 65] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s3 -> s1 [66, 65535] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s3 -> s2 [66, 65535] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s6 -> s6 [0, 65535] { R13422 += 1, R13336 += 1, R13085 += 1, R13086 += 1 };
  s6 -> s7 [0, 65535] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s7 -> s7 [0, 65535] { R13422 += 1, R13336 += 1, R13086 += 1, R13087 += 1 };
  s7 -> s8 [0, 65535] { R13422 += 1, R13336 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R13422 += 1 };
  s8 -> s8 [0, 65535] { R13422 += 1, R13336 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R13422 += 1 };
  s11 -> s11 [0, 64] { R13422 += 1, R13336 += 1 };
  s11 -> s11 [0, 65535] { R13422 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R13422 += 1, R13336 += 1 };
  s11 -> s8 [65, 65] { R13422 += 1, R13336 += 1 };
  s11 -> s11 [66, 65535] { R13422 += 1, R13336 += 1 };
  s12 -> s12 [0, 65535] { R13422 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s0 -> s2 [0, 65535] { R13424 += 1, R13337 += 1, R13338 += 1 };
  s0 -> s0 [0, 65535] { R13423 += 1, R13424 += 1 };
  s0 -> s3 [65, 65] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s0 -> s4 [65, 65] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s0 -> s1 [66, 65535] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s1 -> s1 [0, 64] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13424 += 1 };
  s1 -> s3 [65, 65] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s1 -> s4 [65, 65] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s1 -> s1 [66, 65535] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s2 -> s1 [0, 64] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s2 -> s2 [0, 65535] { R13424 += 1, R13337 += 1, R13338 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s2 -> s4 [65, 65] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s2 -> s1 [66, 65535] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s3 -> s3 [0, 65535] { R13424 += 1, R13338 += 1, R13091 += 1, R13092 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R13424 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13424 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13424 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R13426 += 1, R13340 += 1 };
  s0 -> s2 [0, 65535] { R13426 += 1, R13339 += 1, R13340 += 1 };
  s0 -> s0 [0, 65535] { R13425 += 1, R13426 += 1 };
  s0 -> s3 [65, 65] { R13426 += 1, R13340 += 1 };
  s0 -> s4 [65, 65] { R13426 += 1, R13340 += 1 };
  s0 -> s1 [66, 65535] { R13426 += 1, R13340 += 1 };
  s1 -> s1 [0, 64] { R13426 += 1, R13340 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R13426 += 1 };
  s1 -> s3 [65, 65] { R13426 += 1, R13340 += 1 };
  s1 -> s4 [65, 65] { R13426 += 1, R13340 += 1 };
  s1 -> s1 [66, 65535] { R13426 += 1, R13340 += 1 };
  s2 -> s1 [0, 64] { R13426 += 1, R13340 += 1 };
  s2 -> s2 [0, 65535] { R13426 += 1, R13339 += 1, R13340 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R13426 += 1, R13340 += 1 };
  s2 -> s4 [65, 65] { R13426 += 1, R13340 += 1 };
  s2 -> s1 [66, 65535] { R13426 += 1, R13340 += 1 };
  s3 -> s3 [0, 65535] { R13426 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R13426 += 1, R13340 += 1 };
  s4 -> s6 [0, 65535] { R13426 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R13426 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s0 -> s2 [0, 64] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s0 -> s0 [0, 65535] { R13427 += 1, R13428 += 1 };
  s0 -> s3 [0, 65535] { R13428 += 1, R13341 += 1, R13342 += 1 };
  s0 -> s4 [65, 65] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s0 -> s5 [65, 65] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s0 -> s6 [65, 65] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s0 -> s7 [65, 65] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s0 -> s2 [66, 80] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s0 -> s1 [66, 65535] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s0 -> s2 [82, 65535] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s1 -> s1 [0, 64] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s1 -> s2 [0, 64] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s1 -> s4 [65, 65] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s1 -> s5 [65, 65] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s1 -> s6 [65, 65] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s1 -> s7 [65, 65] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s1 -> s2 [66, 80] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s1 -> s1 [66, 65535] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s1 -> s2 [82, 65535] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s2 -> s2 [0, 64] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R13428 += 1 };
  s2 -> s4 [65, 65] { R13428 += 1, R13342 += 1 };
  s2 -> s7 [65, 65] { R13428 += 1, R13342 += 1 };
  s2 -> s2 [66, 80] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s2 -> s2 [66, 65535] { R13428 += 1, R13342 += 1 };
  s2 -> s2 [82, 65535] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s3 -> s1 [0, 64] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s3 -> s2 [0, 64] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s3 -> s3 [0, 65535] { R13428 += 1, R13341 += 1, R13342 += 1 };
  s3 -> s4 [65, 65] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s3 -> s5 [65, 65] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s3 -> s6 [65, 65] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s3 -> s7 [65, 65] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s3 -> s2 [66, 80] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s3 -> s1 [66, 65535] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s3 -> s2 [82, 65535] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R13428 += 1 };
  s6 -> s7 [0, 80] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s6 -> s6 [0, 65535] { R13428 += 1, R13342 += 1, R13263 += 1, R13264 += 1 };
  s6 -> s7 [82, 65535] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s7 -> s7 [0, 80] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R13428 += 1 };
  s7 -> s7 [0, 65535] { R13428 += 1, R13342 += 1 };
  s7 -> s7 [82, 65535] { R13428 += 1, R13342 += 1, R13264 += 1, R13265 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R13428 += 1 };
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R13292 && R5 = R13428 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R13269 = 0 && R13270 = R13292 && R13271 = 0 && R13272 = R13292 && R13273 = 0 && R13274 = R13292 && R13275 = 0 && R13276 = R13292 && R13277 = 0 && R13278 = R13292 && R13279 = 0 && R13280 = R13292 && R13281 = 0 && R13282 = R13292 && R13283 = 0 && R13284 = R13292 && R13285 = 0 && R13286 = R13292 && R13287 = 0 && R13288 = R13292 && R13289 = 0 && R13290 = R13292 && R13291 = 0 && R13293 = 0 && R13294 = R13428 && R13295 = 0 && R13296 = R13428 && R13297 = 0 && R13298 = R13428 && R13299 = 0 && R13300 = R13428 && R13301 = 0 && R13302 = R13428 && R13303 = 0 && R13304 = R13428 && R13305 = 0 && R13306 = R13428 && R13307 = 0 && R13308 = R13428 && R13309 = 0 && R13310 = R13428 && R13311 = 0 && R13312 = R13428 && R13313 = 0 && R13314 = R13428 && R13315 = 0 && R13316 = R13428 && R13317 = 0 && R13318 = R13428 && R13319 = 0 && R13320 = R13428 && R13323 = 0 && R13324 = 0 && R13333 = 0 && R13334 = 0 && R13335 = 0 && R13336 = 0 && R13341 = 0 && R13342 = 0 && R13371 = 10 && R13372 = R13428 && R13373 = 10 && R13374 = R13428 && R13375 = 10 && R13376 = R13428 && R13377 = 10 && R13378 = R13428 && R13379 = 10 && R13380 = R13428 && R13381 = 10 && R13382 = R13428 && R13383 = 10 && R13384 = R13428 && R13385 = 10 && R13386 = R13428 && R13387 = 10 && R13388 = R13428 && R13389 = 10 && R13390 = R13428 && R13391 = 10 && R13392 = R13428 && R13393 = 10 && R13394 = R13428 && R13395 = 10 && R13396 = R13428 && R13397 = 10 && R13398 = R13428 && R13399 = 10 && R13400 = R13428 && R13401 = 10 && R13402 = R13428 && R13403 = 10 && R13404 = R13428 && R13405 = 10 && R13406 = R13428 && R13407 = 10 && R13408 = R13428 && R13409 = 10 && R13410 = R13428 && R13411 = 10 && R13412 = R13428 && R13413 = 10 && R13414 = R13428 && R13415 = 10 && R13416 = R13428 && R13417 = 10 && R13418 = R13428 && R13419 = 10 && R13420 = R13428 && R13421 = 10 && R13422 = R13428 && R13423 = 10 && R13424 = R13428 && R13425 = 10 && R13426 = R13428 && R13427 = 10 && R94 + R91 + R112 + R109 != 0 && R13090 + R13087 + R13268 + R13265 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R13292 && 9 < R13428 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8055 + R8053 = 0 && R8056 + R8054 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R13088 + R13085 = 0 && R13089 + R13086 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R8055 + R8053 != 0 || R494 + R493 + -1*R8056 + -1*R8054 = 0 || R494 + R493 < 1) && (R13088 + R13085 != 0 || R494 + R493 + -1*R13089 + -1*R13086 = 0 || R494 + R493 < 1) && (R30 = 0 || (R13321 = 0 && R13322 = 0)) && (R30 = 0 || (R13325 = 0 && R13326 = 0)) && (R30 = 0 || (R13327 = 0 && R13328 = 0)) && (R30 = 0 || (R13329 = 0 && R13330 = 0)) && (R30 = 0 || (R13331 = 0 && R13332 = 0)) && (R30 = 0 || (R13337 = 0 && R13338 = 0)) && (R30 = 0 || (R13339 = 0 && R13340 = 0)) && (R32 = 0 || (R13343 = 0 && R13344 = 0)) && (R32 = 0 || (R13345 = 0 && R13346 = 0)) && (R32 = 0 || (R13347 = 0 && R13348 = 0)) && (R32 = 0 || (R13349 = 0 && R13350 = 0)) && (R32 = 0 || (R13351 = 0 && R13352 = 0)) && (R32 = 0 || (R13353 = 0 && R13354 = 0)) && (R32 = 0 || (R13355 = 0 && R13356 = 0)) && (R32 = 0 || (R13357 = 0 && R13358 = 0)) && (R32 = 0 || (R13359 = 0 && R13360 = 0)) && (R32 = 0 || (R13361 = 0 && R13362 = 0)) && (R32 = 0 || (R13363 = 0 && R13364 = 0)) && (R32 = 0 || (R13365 = 0 && R13366 = 0)) && (R32 = 0 || (R13367 = 0 && R13368 = 0)) && (R32 = 0 || (R13369 = 0 && R13370 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R8055 + R8053 = 0 || R494 + R493 < 1) && (R13088 + R13085 = 0 || R494 + R493 < 1) && (R13096 + R13093 = 0 || (R13094 + R13091 = 0 && R13095 + R13092 = 0)) && (R13096 + R13093 = 0 || (R13266 + R13263 = 0 && R13267 + R13264 = 0));
// End of Parikh automata intersection problem
