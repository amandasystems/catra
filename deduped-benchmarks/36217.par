// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R6, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R81, R82, R83, R84, R85, R86, R87, R8733, R8734, R8735, R8736, R8737, R8738, R8739, R8740, R8741, R8742, R8743, R8744, R8745, R8746, R8747, R8748, R8749, R8750, R8751, R8752, R8753, R8754, R8755, R8756, R8757, R8758, R8759, R8760, R8761, R8762, R8763, R8764, R8765, R8766, R8767, R8768, R8769, R8770, R8771, R8772, R8773, R8774, R8775, R8776, R8777, R8778, R8779, R8780, R8781, R8782, R8783, R8784, R8785, R8786, R8787, R8788, R8789, R8790, R8791, R8792, R8793, R8794, R8795, R8796, R8797, R8798, R8799, R88, R8800, R8801, R8802, R8803, R8804, R8805, R8806, R8807, R8808, R8809, R8810, R8811, R8812, R8813, R8814, R8815, R8816, R8817, R8818, R8819, R8820, R8821, R8822, R8823, R8824, R8825, R8826, R8827, R8828, R8829, R8830, R8831, R8832, R8833, R8834, R8835, R8836, R8837, R8838, R8839, R8840, R8841, R8842, R8843, R8844, R8845, R8846, R8847, R8848, R8849, R8850, R8851, R8852, R8853, R8854, R8855, R8856, R8857, R8858, R8859, R8860, R8861, R8862, R8863, R8864, R8865, R8866, R8867, R8868, R8869, R8870, R8871, R8872, R8873, R8874, R8875, R8876, R8877, R8878, R8879, R8880, R8881, R8882, R8883, R8884, R8885, R8886, R8887, R8888, R8889, R8890, R8891, R8892, R8893, R8894, R8895, R8896, R8897, R8898, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8764 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R8763 += 1, R8764 += 1 };
  s1 -> s1 [0, 65535] { R8764 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R8766 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R8765 += 1, R8766 += 1 };
  s1 -> s1 [0, 65535] { R8766 += 1, R68 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R8768 += 1 };
  s0 -> s0 [0, 65535] { R8767 += 1, R8768 += 1 };
  s0 -> s2 [0, 65535] { R8768 += 1, R70 += 1 };
  s0 -> s1 [90, 65535] { R8768 += 1 };
  s1 -> s1 [0, 88] { R8768 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R8768 += 1 };
  s2 -> s1 [0, 88] { R8768 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8768 += 1, R70 += 1 };
  s2 -> s1 [90, 65535] { R8768 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R8770 += 1 };
  s0 -> s0 [0, 65535] { R8769 += 1, R8770 += 1 };
  s0 -> s2 [0, 65535] { R8770 += 1, R72 += 1 };
  s0 -> s1 [74, 65535] { R8770 += 1 };
  s1 -> s1 [0, 72] { R8770 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R8770 += 1 };
  s2 -> s1 [0, 72] { R8770 += 1 };
  s2 -> s2 [0, 65535] { R8770 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R8770 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R8772 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R8772 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R8771 += 1, R8772 += 1 };
  s1 -> s1 [0, 65535] { R8772 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8772 += 1 };
  s2 -> s1 [0, 65535] { R8772 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R8772 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8772 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R8773 += 1, R8774 += 1 };
  s0 -> s1 [0, 65535] { R8774 += 1 };
  s1 -> s1 [0, 65535] { R8774 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R8776 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R8776 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R8775 += 1, R8776 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8776 += 1, R82 += 1, R83 += 1 };
  s1 -> s2 [0, 65535] { R8776 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8776 += 1 };
  s2 -> s2 [0, 65535] { R8776 += 1, R83 += 1, R84 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8776 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R8778 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R8777 += 1, R8778 += 1 };
  s0 -> s2 [0, 65535] { R8778 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [108, 108] { R8778 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R8778 += 1, R88 += 1 };
  s1 -> s13 [0, 65535] { R8778 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8778 += 1, R88 += 1 };
  s2 -> s1 [0, 107] { R8778 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8778 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [108, 108] { R8778 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R8778 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R8778 += 1, R88 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8778 += 1 };
  s3 -> s5 [111, 111] { R8778 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R8778 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8778 += 1, R88 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8778 += 1 };
  s5 -> s6 [99, 99] { R8778 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R8778 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R8778 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R8778 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R8778 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R8778 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R8778 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R8778 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R8778 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R8778 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R8778 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R8778 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R8778 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R8778 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R8778 += 1, R88 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R8778 += 1 };
  s9 -> s10 [111, 111] { R8778 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R8778 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R8778 += 1, R88 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R8778 += 1 };
  s10 -> s11 [115, 115] { R8778 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R8778 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R8778 += 1, R88 += 1 };
  s11 -> s11 [0, 65535] { R8778 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8778 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R8778 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R8778 += 1, R88 += 1 };
  s13 -> s13 [0, 65535] { R8778 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R8780 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R8779 += 1, R8780 += 1 };
  s0 -> s2 [0, 65535] { R8780 += 1, R92 += 1, R93 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8780 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535] { R8780 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8780 += 1, R93 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R8780 += 1, R92 += 1, R93 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8780 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R8781 += 1, R8782 += 1 };
  s0 -> s1 [0, 65535] { R8782 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R8782 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R8782 += 1, R98 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8782 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R8782 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8782 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535] { R8782 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R8784 += 1 };
  s0 -> s0 [0, 65535] { R8783 += 1, R8784 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8784 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8786 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R8786 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R8785 += 1, R8786 += 1 };
  s1 -> s4 [0, 65535] { R8786 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8786 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8786 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R8786 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8786 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8787 += 1, R8788 += 1 };
  s0 -> s1 [0, 65535] { R8788 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8788 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R8790 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R8789 += 1, R8790 += 1 };
  s0 -> s2 [0, 65535] { R8790 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [73, 73] { R8790 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R8790 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R8790 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R8790 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R8790 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R8790 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R8790 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R8790 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R8790 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R8790 += 1, R110 += 1, R111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R8790 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R8790 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R8790 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535] { R8790 += 1, R111 += 1, R112 += 1 };
  s3 -> s6 [0, 65535] { R8790 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8790 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8790 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8814 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R8813 += 1, R8814 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8814 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R8816 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R8815 += 1, R8816 += 1 };
  s0 -> s2 [65, 65] { R8816 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R8816 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R8816 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R8816 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8816 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R8816 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R8816 += 1, R67 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8816 += 1, R67 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R8818 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R8817 += 1, R8818 += 1 };
  s0 -> s2 [65, 65] { R8818 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R8818 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R8818 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R8818 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8818 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R8818 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R8818 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8818 += 1, R69 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R8820 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R8819 += 1, R8820 += 1 };
  s0 -> s2 [65, 65] { R8820 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R8820 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R8820 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R8820 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8820 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R8820 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R8820 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8820 += 1, R71 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R8822 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R8821 += 1, R8822 += 1 };
  s0 -> s2 [65, 65] { R8822 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R8822 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R8822 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R8822 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8822 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R8822 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R8822 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8822 += 1, R73 += 1, R74 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R8824 += 1 };
  s0 -> s0 [0, 65535] { R8823 += 1, R8824 += 1 };
  s0 -> s2 [65, 65] { R8824 += 1 };
  s0 -> s3 [65, 65] { R8824 += 1 };
  s0 -> s1 [66, 65535] { R8824 += 1 };
  s1 -> s1 [0, 64] { R8824 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8824 += 1 };
  s1 -> s3 [65, 65] { R8824 += 1 };
  s1 -> s1 [66, 65535] { R8824 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8824 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R8826 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R8825 += 1, R8826 += 1 };
  s0 -> s2 [65, 65] { R8826 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R8826 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R8826 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R8826 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8826 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R8826 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R8826 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8826 += 1, R79 += 1, R80 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R8828 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R8827 += 1, R8828 += 1 };
  s0 -> s2 [65, 65] { R8828 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R8828 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R8828 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R8828 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8828 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R8828 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R8828 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R8828 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R8830 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R8829 += 1, R8830 += 1 };
  s0 -> s2 [65, 65] { R8830 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R8830 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R8830 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R8830 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8830 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R8830 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R8830 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R8830 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R8832 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R8831 += 1, R8832 += 1 };
  s0 -> s2 [65, 65] { R8832 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R8832 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R8832 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R8832 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8832 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R8832 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R8832 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8832 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R8834 += 1 };
  s0 -> s0 [0, 65535] { R8833 += 1, R8834 += 1 };
  s0 -> s2 [65, 65] { R8834 += 1 };
  s0 -> s3 [65, 65] { R8834 += 1 };
  s0 -> s1 [66, 65535] { R8834 += 1 };
  s1 -> s1 [0, 64] { R8834 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8834 += 1 };
  s1 -> s3 [65, 65] { R8834 += 1 };
  s1 -> s1 [66, 65535] { R8834 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8834 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R8836 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R8835 += 1, R8836 += 1 };
  s0 -> s2 [65, 65] { R8836 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R8836 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R8836 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R8836 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8836 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R8836 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R8836 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8836 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R8838 += 1 };
  s0 -> s0 [0, 65535] { R8837 += 1, R8838 += 1 };
  s0 -> s2 [65, 65] { R8838 += 1 };
  s0 -> s3 [65, 65] { R8838 += 1 };
  s0 -> s1 [66, 65535] { R8838 += 1 };
  s1 -> s1 [0, 64] { R8838 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8838 += 1 };
  s1 -> s3 [65, 65] { R8838 += 1 };
  s1 -> s1 [66, 65535] { R8838 += 1 };
  s2 -> s2 [0, 65535] { R8838 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R8840 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R8839 += 1, R8840 += 1 };
  s0 -> s2 [65, 65] { R8840 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R8840 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R8840 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R8840 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8840 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R8840 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R8840 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R8840 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R8842 += 1 };
  s0 -> s0 [0, 65535] { R8841 += 1, R8842 += 1 };
  s0 -> s1 [45, 45] { R8842 += 1 };
  s0 -> s2 [46, 46] { R8842 += 1 };
  s0 -> s1 [48, 62] { R8842 += 1 };
  s0 -> s3 [65, 65] { R8842 += 1 };
  s0 -> s1 [66, 65535] { R8842 += 1 };
  s1 -> s1 [0, 43] { R8842 += 1 };
  s1 -> s1 [45, 45] { R8842 += 1 };
  s1 -> s2 [46, 46] { R8842 += 1 };
  s1 -> s1 [48, 62] { R8842 += 1 };
  s1 -> s3 [65, 65] { R8842 += 1 };
  s1 -> s1 [66, 65535] { R8842 += 1 };
  s2 -> s1 [0, 43] { R8842 += 1 };
  s2 -> s1 [45, 45] { R8842 += 1 };
  s2 -> s2 [46, 46] { R8842 += 1 };
  s2 -> s1 [48, 62] { R8842 += 1 };
  s2 -> s3 [65, 65] { R8842 += 1 };
  s2 -> s1 [66, 114] { R8842 += 1 };
  s2 -> s8 [115, 115] { R8842 += 1 };
  s2 -> s1 [116, 65535] { R8842 += 1 };
  s3 -> s3 [0, 43] { R8842 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8842 += 1 };
  s3 -> s4 [46, 46] { R8842 += 1 };
  s3 -> s3 [48, 62] { R8842 += 1 };
  s3 -> s3 [65, 65535] { R8842 += 1 };
  s4 -> s3 [0, 43] { R8842 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8842 += 1 };
  s4 -> s4 [46, 46] { R8842 += 1 };
  s4 -> s3 [48, 62] { R8842 += 1 };
  s4 -> s3 [65, 114] { R8842 += 1 };
  s4 -> s5 [115, 115] { R8842 += 1 };
  s4 -> s3 [116, 65535] { R8842 += 1 };
  s5 -> s3 [0, 43] { R8842 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8842 += 1 };
  s5 -> s4 [46, 46] { R8842 += 1 };
  s5 -> s3 [48, 62] { R8842 += 1 };
  s5 -> s3 [65, 110] { R8842 += 1 };
  s5 -> s6 [111, 111] { R8842 += 1 };
  s5 -> s3 [112, 65535] { R8842 += 1 };
  s6 -> s3 [0, 43] { R8842 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8842 += 1 };
  s6 -> s4 [46, 46] { R8842 += 1 };
  s6 -> s3 [48, 62] { R8842 += 1 };
  s6 -> s3 [65, 98] { R8842 += 1 };
  s6 -> s7 [99, 99] { R8842 += 1 };
  s6 -> s3 [100, 65535] { R8842 += 1 };
  s7 -> s3 [0, 43] { R8842 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8842 += 1 };
  s7 -> s4 [46, 46] { R8842 += 1 };
  s7 -> s3 [48, 62] { R8842 += 1 };
  s7 -> s3 [65, 106] { R8842 += 1 };
  s7 -> s3 [108, 65535] { R8842 += 1 };
  s8 -> s1 [0, 43] { R8842 += 1 };
  s8 -> s1 [45, 45] { R8842 += 1 };
  s8 -> s2 [46, 46] { R8842 += 1 };
  s8 -> s1 [48, 62] { R8842 += 1 };
  s8 -> s3 [65, 65] { R8842 += 1 };
  s8 -> s1 [66, 110] { R8842 += 1 };
  s8 -> s9 [111, 111] { R8842 += 1 };
  s8 -> s1 [112, 65535] { R8842 += 1 };
  s9 -> s1 [0, 43] { R8842 += 1 };
  s9 -> s1 [45, 45] { R8842 += 1 };
  s9 -> s2 [46, 46] { R8842 += 1 };
  s9 -> s1 [48, 62] { R8842 += 1 };
  s9 -> s3 [65, 65] { R8842 += 1 };
  s9 -> s1 [66, 98] { R8842 += 1 };
  s9 -> s10 [99, 99] { R8842 += 1 };
  s9 -> s1 [100, 65535] { R8842 += 1 };
  s10 -> s1 [0, 43] { R8842 += 1 };
  s10 -> s1 [45, 45] { R8842 += 1 };
  s10 -> s2 [46, 46] { R8842 += 1 };
  s10 -> s1 [48, 62] { R8842 += 1 };
  s10 -> s3 [65, 65] { R8842 += 1 };
  s10 -> s1 [66, 106] { R8842 += 1 };
  s10 -> s1 [108, 65535] { R8842 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R8843 += 1, R8844 += 1 };
  s0 -> s1 [0, 65535] { R8844 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8844 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R8846 += 1 };
  s0 -> s2 [0, 65535] { R8846 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R8845 += 1, R8846 += 1 };
  s0 -> s3 [58, 58] { R8846 += 1 };
  s0 -> s1 [59, 65535] { R8846 += 1 };
  s1 -> s1 [0, 57] { R8846 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8846 += 1 };
  s1 -> s1 [59, 65535] { R8846 += 1 };
  s2 -> s1 [0, 57] { R8846 += 1 };
  s2 -> s2 [0, 65535] { R8846 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R8846 += 1 };
  s2 -> s1 [59, 65535] { R8846 += 1 };
  s3 -> s3 [0, 65535] { R8846 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R8848 += 1 };
  s0 -> s0 [0, 65535] { R8847 += 1, R8848 += 1 };
  s0 -> s2 [0, 65535] { R8848 += 1, R17 += 1 };
  s0 -> s3 [65, 65] { R8848 += 1 };
  s0 -> s1 [66, 65535] { R8848 += 1 };
  s1 -> s1 [0, 64] { R8848 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8848 += 1 };
  s1 -> s1 [66, 65535] { R8848 += 1 };
  s2 -> s1 [0, 64] { R8848 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8848 += 1, R17 += 1 };
  s2 -> s3 [65, 65] { R8848 += 1 };
  s2 -> s1 [66, 65535] { R8848 += 1 };
  s3 -> s3 [0, 65535] { R8848 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R8850 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R8849 += 1, R8850 += 1 };
  s0 -> s2 [0, 65535] { R8850 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [91, 91] { R8850 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R8850 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R8850 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8850 += 1, R34 += 1 };
  s2 -> s1 [0, 90] { R8850 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8850 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [91, 91] { R8850 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R8850 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R8850 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8850 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R8852 += 1, R36 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R8852 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R8851 += 1, R8852 += 1 };
  s1 -> s4 [0, 65535] { R8852 += 1 };
  s1 -> s1 [0, 65535] { R8852 += 1, R36 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8852 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8852 += 1, R35 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8852 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R8854 += 1, R8740 += 1 };
  s0 -> s0 [0, 65535] { R8853 += 1, R8854 += 1 };
  s0 -> s2 [0, 65535] { R8854 += 1, R8739 += 1, R8740 += 1 };
  s0 -> s1 [66, 65535] { R8854 += 1, R8740 += 1 };
  s1 -> s1 [0, 64] { R8854 += 1, R8740 += 1 };
  s1 -> s1 [0, 65535] { R8854 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R8854 += 1, R8740 += 1 };
  s2 -> s1 [0, 64] { R8854 += 1, R8740 += 1 };
  s2 -> s2 [0, 65535] { R8854 += 1, R8739 += 1, R8740 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R8854 += 1, R8740 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R8855 += 1, R8856 += 1 };
  s0 -> s1 [0, 65535] { R8856 += 1, R8741 += 1, R8742 += 1 };
  s0 -> s2 [0, 65535] { R8856 += 1, R8742 += 1, R29 += 1 };
  s1 -> s1 [0, 65535] { R8856 += 1, R8741 += 1, R8742 += 1 };
  s1 -> s2 [0, 65535] { R8856 += 1, R8742 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8856 += 1, R8742 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8856 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8856 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R8858 += 1, R8744 += 1 };
  s0 -> s2 [0, 65535] { R8858 += 1, R8743 += 1, R8744 += 1 };
  s0 -> s0 [0, 65535] { R8857 += 1, R8858 += 1 };
  s0 -> s1 [81, 65535] { R8858 += 1, R8744 += 1 };
  s1 -> s1 [0, 65] { R8858 += 1, R8744 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8858 += 1 };
  s1 -> s1 [81, 65535] { R8858 += 1, R8744 += 1 };
  s2 -> s1 [0, 65] { R8858 += 1, R8744 += 1 };
  s2 -> s2 [0, 65535] { R8858 += 1, R8743 += 1, R8744 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R8858 += 1, R8744 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R8859 += 1, R8860 += 1 };
  s0 -> s1 [0, 65535] { R8860 += 1, R8745 += 1, R8746 += 1 };
  s0 -> s2 [0, 65535] { R8860 += 1, R8746 += 1, R494 += 1 };
  s1 -> s1 [0, 65535] { R8860 += 1, R8745 += 1, R8746 += 1 };
  s1 -> s2 [0, 65535] { R8860 += 1, R8746 += 1, R494 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8860 += 1 };
  s2 -> s2 [0, 65535] { R8860 += 1, R8746 += 1, R494 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8860 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R8862 += 1, R8748 += 1 };
  s0 -> s0 [0, 65535] { R8861 += 1, R8862 += 1 };
  s0 -> s2 [0, 65535] { R8862 += 1, R8748 += 1, R496 += 1 };
  s0 -> s3 [0, 65535] { R8862 += 1, R8747 += 1, R8748 += 1 };
  s0 -> s1 [82, 65535] { R8862 += 1, R8748 += 1 };
  s1 -> s1 [0, 80] { R8862 += 1, R8748 += 1 };
  s1 -> s1 [0, 65535] { R8862 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R8862 += 1, R8748 += 1 };
  s2 -> s1 [0, 80] { R8862 += 1, R8748 += 1 };
  s2 -> s2 [0, 65535] { R8862 += 1, R8748 += 1, R496 += 1 };
  s2 -> s5 [0, 65535] { R8862 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8862 += 1, R8748 += 1 };
  s3 -> s1 [0, 80] { R8862 += 1, R8748 += 1 };
  s3 -> s2 [0, 65535] { R8862 += 1, R8748 += 1, R496 += 1 };
  s3 -> s3 [0, 65535] { R8862 += 1, R8747 += 1, R8748 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R8862 += 1, R8748 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8862 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R8864 += 1, R8750 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R8864 += 1, R8749 += 1, R8750 += 1 };
  s0 -> s3 [0, 65535] { R8864 += 1, R8750 += 1, R499 += 1, R500 += 1 };
  s0 -> s0 [0, 65535] { R8863 += 1, R8864 += 1 };
  s0 -> s1 [82, 65535] { R8864 += 1, R8750 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R8864 += 1, R8750 += 1, R500 += 1 };
  s1 -> s1 [0, 65535] { R8864 += 1, R8750 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8864 += 1 };
  s1 -> s1 [82, 65535] { R8864 += 1, R8750 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R8864 += 1, R8750 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R8864 += 1, R8749 += 1, R8750 += 1 };
  s2 -> s3 [0, 65535] { R8864 += 1, R8750 += 1, R499 += 1, R500 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R8864 += 1, R8750 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R8864 += 1, R8750 += 1, R500 += 1 };
  s3 -> s3 [0, 65535] { R8864 += 1, R8750 += 1, R499 += 1, R500 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8864 += 1 };
  s3 -> s1 [82, 65535] { R8864 += 1, R8750 += 1, R500 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8864 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R8866 += 1, R8752 += 1, R505 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R8865 += 1, R8866 += 1 };
  s0 -> s2 [0, 65535] { R8866 += 1, R8751 += 1, R8752 += 1 };
  s0 -> s3 [0, 65535] { R8866 += 1, R8752 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R8866 += 1, R8752 += 1, R505 += 1, R506 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8866 += 1 };
  s1 -> s6 [0, 65535] { R8866 += 1, R8752 += 1 };
  s2 -> s1 [0, 65535] { R8866 += 1, R8752 += 1, R505 += 1, R506 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8866 += 1, R8751 += 1, R8752 += 1 };
  s2 -> s3 [0, 65535] { R8866 += 1, R8752 += 1, R504 += 1, R505 += 1 };
  s3 -> s1 [0, 65535] { R8866 += 1, R8752 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8866 += 1 };
  s3 -> s3 [0, 65535] { R8866 += 1, R8752 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8866 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8866 += 1 };
  s6 -> s6 [0, 65535] { R8866 += 1, R8752 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R8868 += 1, R8754 += 1, R8056 += 1 };
  s0 -> s0 [0, 65535] { R8867 += 1, R8868 += 1 };
  s0 -> s2 [0, 65535] { R8868 += 1, R8753 += 1, R8754 += 1 };
  s0 -> s1 [0, 65535] { R8868 += 1, R8754 += 1 };
  s0 -> s1 [91, 65535] { R8868 += 1, R8754 += 1, R8056 += 1 };
  s1 -> s1 [0, 81] { R8868 += 1, R8754 += 1, R8056 += 1 };
  s1 -> s4 [0, 65535] { R8868 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8868 += 1, R8754 += 1 };
  s1 -> s1 [91, 65535] { R8868 += 1, R8754 += 1, R8056 += 1 };
  s2 -> s1 [0, 81] { R8868 += 1, R8754 += 1, R8056 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8868 += 1, R8753 += 1, R8754 += 1 };
  s2 -> s1 [0, 65535] { R8868 += 1, R8754 += 1 };
  s2 -> s1 [91, 65535] { R8868 += 1, R8754 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8868 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R8869 += 1, R8870 += 1 };
  s0 -> s1 [0, 65535] { R8870 += 1, R8756 += 1, R8060 += 1, R8061 += 1 };
  s0 -> s2 [0, 65535] { R8870 += 1, R8755 += 1, R8756 += 1 };
  s0 -> s3 [0, 65535] { R8870 += 1, R8756 += 1, R8061 += 1, R8062 += 1 };
  s1 -> s5 [0, 65535] { R8870 += 1 };
  s1 -> s1 [0, 65535] { R8870 += 1, R8756 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R8870 += 1, R8756 += 1, R8061 += 1, R8062 += 1 };
  s2 -> s1 [0, 65535] { R8870 += 1, R8756 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8870 += 1, R8755 += 1, R8756 += 1 };
  s2 -> s3 [0, 65535] { R8870 += 1, R8756 += 1, R8061 += 1, R8062 += 1 };
  s3 -> s4 [0, 65535] { R8870 += 1, R8756 += 1 };
  s3 -> s5 [0, 65535] { R8870 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8870 += 1, R8756 += 1, R8061 += 1, R8062 += 1 };
  s4 -> s4 [0, 65535] { R8870 += 1, R8756 += 1 };
  s4 -> s5 [0, 65535] { R8870 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8870 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R8871 += 1, R8872 += 1 };
  s0 -> s1 [0, 65535] { R8872 += 1, R8757 += 1, R8758 += 1 };
  s0 -> s2 [0, 65535] { R8872 += 1, R8758 += 1, R8066 += 1, R8067 += 1 };
  s0 -> s3 [0, 65535] { R8872 += 1, R8758 += 1, R8067 += 1, R8068 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8872 += 1, R8757 += 1, R8758 += 1 };
  s1 -> s2 [0, 65535] { R8872 += 1, R8758 += 1, R8066 += 1, R8067 += 1 };
  s1 -> s3 [0, 65535] { R8872 += 1, R8758 += 1, R8067 += 1, R8068 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8872 += 1 };
  s2 -> s2 [0, 65535] { R8872 += 1, R8758 += 1, R8066 += 1, R8067 += 1 };
  s2 -> s3 [0, 65535] { R8872 += 1, R8758 += 1, R8067 += 1, R8068 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8872 += 1 };
  s3 -> s6 [0, 65535] { R8872 += 1, R8758 += 1 };
  s3 -> s3 [0, 65535] { R8872 += 1, R8758 += 1, R8067 += 1, R8068 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8872 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8872 += 1 };
  s6 -> s6 [0, 65535] { R8872 += 1, R8758 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R8873 += 1, R8874 += 1 };
  s0 -> s1 [0, 65535] { R8874 += 1, R8760 += 1 };
  s0 -> s2 [0, 65535] { R8874 += 1, R8759 += 1, R8760 += 1 };
  s1 -> s1 [0, 65535] { R8874 += 1, R8760 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8874 += 1 };
  s2 -> s1 [0, 65535] { R8874 += 1, R8760 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8874 += 1, R8759 += 1, R8760 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8874 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R8875 += 1, R8876 += 1 };
  s0 -> s1 [0, 65535] { R8876 += 1, R8761 += 1, R8762 += 1 };
  s0 -> s2 [0, 65535] { R8876 += 1, R8762 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8876 += 1, R8761 += 1, R8762 += 1 };
  s1 -> s2 [0, 65535] { R8876 += 1, R8762 += 1 };
  s2 -> s3 [0, 65535] { R8876 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8876 += 1, R8762 += 1 };
  s3 -> s3 [0, 65535] { R8876 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R8878 += 1, R8792 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R8878 += 1, R8791 += 1, R8792 += 1 };
  s0 -> s0 [0, 65535] { R8877 += 1, R8878 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8878 += 1, R8792 += 1, R30 += 1 };
  s1 -> s4 [0, 65535] { R8878 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8878 += 1, R8792 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R8878 += 1, R8791 += 1, R8792 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8878 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R8880 += 1, R8794 += 1 };
  s0 -> s2 [0, 65535] { R8880 += 1, R8793 += 1, R8794 += 1 };
  s0 -> s0 [0, 65535] { R8879 += 1, R8880 += 1 };
  s0 -> s3 [65, 65] { R8880 += 1, R8794 += 1 };
  s0 -> s4 [65, 65] { R8880 += 1, R8794 += 1 };
  s0 -> s5 [81, 81] { R8880 += 1, R8794 += 1 };
  s0 -> s1 [82, 65535] { R8880 += 1, R8794 += 1 };
  s1 -> s1 [0, 64] { R8880 += 1, R8794 += 1 };
  s1 -> s3 [65, 65] { R8880 += 1, R8794 += 1 };
  s1 -> s4 [65, 65] { R8880 += 1, R8794 += 1 };
  s1 -> s5 [81, 81] { R8880 += 1, R8794 += 1 };
  s1 -> s1 [82, 65535] { R8880 += 1, R8794 += 1 };
  s2 -> s1 [0, 64] { R8880 += 1, R8794 += 1 };
  s2 -> s2 [0, 65535] { R8880 += 1, R8793 += 1, R8794 += 1 };
  s2 -> s3 [65, 65] { R8880 += 1, R8794 += 1 };
  s2 -> s4 [65, 65] { R8880 += 1, R8794 += 1 };
  s2 -> s5 [81, 81] { R8880 += 1, R8794 += 1 };
  s2 -> s1 [82, 65535] { R8880 += 1, R8794 += 1 };
  s4 -> s4 [0, 65] { R8880 += 1, R8794 += 1 };
  s4 -> s8 [81, 81] { R8880 += 1, R8794 += 1 };
  s4 -> s4 [82, 65535] { R8880 += 1, R8794 += 1 };
  s5 -> s5 [0, 64] { R8880 += 1, R8794 += 1 };
  s5 -> s5 [0, 65535] { R8880 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R8880 += 1, R8794 += 1 };
  s5 -> s8 [65, 65] { R8880 += 1, R8794 += 1 };
  s5 -> s5 [81, 65535] { R8880 += 1, R8794 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8880 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R8880 += 1, R8794 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8880 += 1 };
  s8 -> s8 [81, 65535] { R8880 += 1, R8794 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R8882 += 1, R8796 += 1, R493 += 1 };
  s0 -> s2 [0, 65535] { R8882 += 1, R8795 += 1, R8796 += 1 };
  s0 -> s0 [0, 65535] { R8881 += 1, R8882 += 1 };
  s0 -> s3 [65, 65] { R8882 += 1, R8796 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R8882 += 1, R8796 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R8882 += 1, R8796 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R8882 += 1, R8796 += 1, R493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8882 += 1 };
  s1 -> s3 [65, 65] { R8882 += 1, R8796 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R8882 += 1, R8796 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R8882 += 1, R8796 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R8882 += 1, R8796 += 1, R493 += 1 };
  s2 -> s2 [0, 65535] { R8882 += 1, R8795 += 1, R8796 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8882 += 1, R8796 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R8882 += 1, R8796 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R8882 += 1, R8796 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R8882 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8882 += 1, R8796 += 1, R493 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8882 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8882 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R8884 += 1, R8798 += 1, R495 += 1 };
  s0 -> s0 [0, 65535] { R8883 += 1, R8884 += 1 };
  s0 -> s2 [0, 65535] { R8884 += 1, R8797 += 1, R8798 += 1 };
  s0 -> s3 [65, 65] { R8884 += 1, R8798 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R8884 += 1, R8798 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R8884 += 1, R8798 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R8884 += 1, R8798 += 1, R495 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8884 += 1 };
  s1 -> s3 [65, 65] { R8884 += 1, R8798 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R8884 += 1, R8798 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R8884 += 1, R8798 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R8884 += 1, R8798 += 1, R495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8884 += 1, R8797 += 1, R8798 += 1 };
  s2 -> s3 [65, 65] { R8884 += 1, R8798 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R8884 += 1, R8798 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R8884 += 1, R8798 += 1, R495 += 1 };
  s3 -> s3 [0, 65535] { R8884 += 1, R8798 += 1, R495 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8884 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8884 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8884 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s0 -> s0 [0, 65535] { R8885 += 1, R8886 += 1 };
  s0 -> s2 [0, 65535] { R8886 += 1, R8799 += 1, R8800 += 1 };
  s0 -> s3 [65, 65] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8886 += 1 };
  s1 -> s3 [65, 65] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8886 += 1, R8799 += 1, R8800 += 1 };
  s2 -> s3 [65, 65] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8886 += 1 };
  s4 -> s5 [0, 65535] { R8886 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8886 += 1, R8800 += 1, R497 += 1, R498 += 1 };
  s5 -> s5 [0, 65535] { R8886 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s0 -> s0 [0, 65535] { R8887 += 1, R8888 += 1 };
  s0 -> s2 [0, 65535] { R8888 += 1, R8801 += 1, R8802 += 1 };
  s0 -> s3 [65, 65] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 65535] { R8888 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8888 += 1, R8801 += 1, R8802 += 1 };
  s2 -> s3 [65, 65] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s3 -> s3 [0, 65535] { R8888 += 1, R8802 += 1, R501 += 1, R502 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8888 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8888 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8888 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R8890 += 1, R8803 += 1, R8804 += 1 };
  s0 -> s0 [0, 65535] { R8889 += 1, R8890 += 1 };
  s0 -> s4 [65, 65] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s0 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s0 -> s7 [65, 65] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s0 -> s1 [66, 65535] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [91, 107] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s0 -> s8 [108, 108] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s0 -> s2 [109, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s1 [0, 64] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s4 [65, 65] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s7 [65, 65] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s1 [66, 65535] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [91, 107] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s8 [108, 108] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s1 -> s2 [109, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s2 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s2 -> s35 [0, 65535];
  s2 -> s2 [0, 65535] { R8890 += 1 };
  s2 -> s5 [65, 65] { R8890 += 1, R8804 += 1 };
  s2 -> s6 [65, 65] { R8890 += 1, R8804 += 1 };
  s2 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s2 -> s2 [66, 65535] { R8890 += 1, R8804 += 1 };
  s2 -> s2 [91, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s1 [0, 64] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R8890 += 1, R8803 += 1, R8804 += 1 };
  s3 -> s4 [65, 65] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s7 [65, 65] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s1 [66, 65535] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [91, 107] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s8 [108, 108] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s3 -> s2 [109, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s5 -> s35 [0, 65535];
  s5 -> s5 [0, 65535] { R8890 += 1 };
  s6 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s6 -> s34 [0, 65535] { R8890 += 1 };
  s6 -> s35 [0, 65535];
  s6 -> s6 [0, 65535] { R8890 += 1, R8804 += 1 };
  s6 -> s6 [91, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s7 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s7 -> s7 [0, 65535] { R8890 += 1, R8804 += 1, R8053 += 1, R8054 += 1 };
  s7 -> s6 [91, 107] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s7 -> s10 [108, 108] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s7 -> s6 [109, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s8 [0, 64] { R8890 += 1, R8804 += 1 };
  s8 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s9 [65, 65] { R8890 += 1, R8804 += 1 };
  s8 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s10 [65, 65] { R8890 += 1, R8804 += 1 };
  s8 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s8 [66, 65535] { R8890 += 1, R8804 += 1 };
  s8 -> s2 [91, 110] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s11 [111, 111] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s8 -> s2 [112, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s10 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s10 -> s10 [0, 65535] { R8890 += 1, R8804 += 1 };
  s10 -> s6 [91, 110] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s10 -> s13 [111, 111] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s10 -> s6 [112, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s11 [0, 64] { R8890 += 1, R8804 += 1 };
  s11 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s12 [65, 65] { R8890 += 1, R8804 += 1 };
  s11 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s13 [65, 65] { R8890 += 1, R8804 += 1 };
  s11 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s11 [66, 65535] { R8890 += 1, R8804 += 1 };
  s11 -> s2 [91, 98] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s14 [99, 99] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s11 -> s2 [100, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s13 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s13 -> s13 [0, 65535] { R8890 += 1, R8804 += 1 };
  s13 -> s6 [91, 98] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s13 -> s17 [99, 99] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s13 -> s6 [100, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s14 [0, 64] { R8890 += 1, R8804 += 1 };
  s14 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s15 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s16 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s17 [65, 65] { R8890 += 1, R8804 += 1 };
  s14 -> s18 [65, 65] { R8890 += 1, R8804 += 1 };
  s14 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s14 [66, 65535] { R8890 += 1, R8804 += 1 };
  s14 -> s2 [91, 96] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s19 [97, 97] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s14 -> s2 [98, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s15 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s15 -> s15 [0, 65535] { R8890 += 1, R8804 += 1 };
  s15 -> s6 [91, 107] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s15 -> s21 [108, 108] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s15 -> s6 [109, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s17 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s17 -> s17 [0, 65535] { R8890 += 1, R8804 += 1 };
  s17 -> s6 [91, 96] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s17 -> s15 [97, 97] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s17 -> s6 [98, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s19 [0, 64] { R8890 += 1, R8804 += 1 };
  s19 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s15 [65, 65] { R8890 += 1, R8804 += 1 };
  s19 -> s16 [65, 65] { R8890 += 1, R8804 += 1 };
  s19 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s19 [66, 65535] { R8890 += 1, R8804 += 1 };
  s19 -> s2 [91, 107] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s20 [108, 108] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s19 -> s2 [109, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s20 [0, 64] { R8890 += 1, R8804 += 1 };
  s20 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s21 [65, 65] { R8890 += 1, R8804 += 1 };
  s20 -> s22 [65, 65] { R8890 += 1, R8804 += 1 };
  s20 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s20 [66, 65535] { R8890 += 1, R8804 += 1 };
  s20 -> s2 [91, 103] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s23 [104, 104] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s20 -> s2 [105, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s21 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s21 -> s21 [0, 65535] { R8890 += 1, R8804 += 1 };
  s21 -> s6 [91, 103] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s21 -> s24 [104, 104] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s21 -> s6 [105, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s23 [0, 64] { R8890 += 1, R8804 += 1 };
  s23 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s24 [65, 65] { R8890 += 1, R8804 += 1 };
  s23 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s25 [65, 65] { R8890 += 1, R8804 += 1 };
  s23 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s23 [66, 65535] { R8890 += 1, R8804 += 1 };
  s23 -> s2 [91, 110] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s26 [111, 111] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s23 -> s2 [112, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s24 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s24 -> s24 [0, 65535] { R8890 += 1, R8804 += 1 };
  s24 -> s6 [91, 110] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s24 -> s27 [111, 111] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s24 -> s6 [112, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s26 [0, 64] { R8890 += 1, R8804 += 1 };
  s26 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s27 [65, 65] { R8890 += 1, R8804 += 1 };
  s26 -> s28 [65, 65] { R8890 += 1, R8804 += 1 };
  s26 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s26 [66, 65535] { R8890 += 1, R8804 += 1 };
  s26 -> s2 [91, 114] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s29 [115, 115] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s26 -> s2 [116, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s27 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s27 -> s27 [0, 65535] { R8890 += 1, R8804 += 1 };
  s27 -> s6 [91, 114] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s27 -> s31 [115, 115] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s27 -> s6 [116, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s29 [0, 64] { R8890 += 1, R8804 += 1 };
  s29 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s30 [65, 65] { R8890 += 1, R8804 += 1 };
  s29 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s31 [65, 65] { R8890 += 1, R8804 += 1 };
  s29 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s29 [66, 65535] { R8890 += 1, R8804 += 1 };
  s29 -> s2 [91, 115] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s32 [116, 116] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s29 -> s2 [117, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s31 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s31 -> s31 [0, 65535] { R8890 += 1, R8804 += 1 };
  s31 -> s6 [91, 115] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s31 -> s33 [116, 116] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s31 -> s6 [117, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s32 -> s2 [0, 64] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s32 -> s5 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s32 -> s6 [65, 65] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s32 -> s2 [66, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s32 -> s2 [91, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s33 -> s6 [0, 81] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s33 -> s6 [91, 65535] { R8890 += 1, R8804 += 1, R8054 += 1 };
  s34 -> s34 [0, 65535] { R8890 += 1 };
  s34 -> s35 [0, 65535];
  s35 -> s35 [0, 65535];
  accepting s34, s5, s2, s6, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s2 [0, 65535] { R8892 += 1, R8805 += 1, R8806 += 1 };
  s0 -> s0 [0, 65535] { R8891 += 1, R8892 += 1 };
  s0 -> s3 [65, 65] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s4 [65, 65] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s1 [66, 65535] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [0, 64] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8892 += 1 };
  s1 -> s3 [65, 65] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s4 [65, 65] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [66, 65535] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s1 [0, 64] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8892 += 1, R8805 += 1, R8806 += 1 };
  s2 -> s3 [65, 65] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s4 [65, 65] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s1 [66, 65535] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8892 += 1, R8806 += 1, R8057 += 1, R8058 += 1 };
  s3 -> s6 [0, 65535] { R8892 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8892 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8892 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s0 [0, 65535] { R8893 += 1, R8894 += 1 };
  s0 -> s2 [0, 65535] { R8894 += 1, R8807 += 1, R8808 += 1 };
  s0 -> s3 [65, 65] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s4 [65, 65] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s1 [66, 65535] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [0, 64] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [0, 65535] { R8894 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s4 [65, 65] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s1 -> s1 [66, 65535] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [0, 64] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8894 += 1, R8807 += 1, R8808 += 1 };
  s2 -> s3 [65, 65] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s4 [65, 65] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s1 [66, 65535] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8894 += 1 };
  s4 -> s5 [0, 65535] { R8894 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8894 += 1, R8808 += 1, R8063 += 1, R8064 += 1 };
  s5 -> s5 [0, 65535] { R8894 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R8896 += 1, R8810 += 1 };
  s0 -> s0 [0, 65535] { R8895 += 1, R8896 += 1 };
  s0 -> s2 [0, 65535] { R8896 += 1, R8809 += 1, R8810 += 1 };
  s0 -> s3 [65, 65] { R8896 += 1, R8810 += 1 };
  s0 -> s4 [65, 65] { R8896 += 1, R8810 += 1 };
  s0 -> s1 [66, 65535] { R8896 += 1, R8810 += 1 };
  s1 -> s1 [0, 64] { R8896 += 1, R8810 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8896 += 1 };
  s1 -> s3 [65, 65] { R8896 += 1, R8810 += 1 };
  s1 -> s4 [65, 65] { R8896 += 1, R8810 += 1 };
  s1 -> s1 [66, 65535] { R8896 += 1, R8810 += 1 };
  s2 -> s1 [0, 64] { R8896 += 1, R8810 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8896 += 1, R8809 += 1, R8810 += 1 };
  s2 -> s3 [65, 65] { R8896 += 1, R8810 += 1 };
  s2 -> s4 [65, 65] { R8896 += 1, R8810 += 1 };
  s2 -> s1 [66, 65535] { R8896 += 1, R8810 += 1 };
  s3 -> s3 [0, 65535] { R8896 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8896 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8896 += 1, R8810 += 1 };
  s5 -> s5 [0, 65535] { R8896 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s0 -> s2 [0, 64] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s0 -> s0 [0, 65535] { R8897 += 1, R8898 += 1 };
  s0 -> s3 [0, 65535] { R8898 += 1, R8811 += 1, R8812 += 1 };
  s0 -> s4 [65, 65] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s0 -> s5 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s0 -> s6 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s0 -> s7 [65, 65] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s0 -> s2 [66, 80] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s0 -> s1 [66, 65535] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s0 -> s8 [81, 81] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s0 -> s2 [82, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s1 -> s1 [0, 64] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s1 -> s2 [0, 64] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s1 -> s4 [65, 65] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s1 -> s5 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s1 -> s6 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s1 -> s7 [65, 65] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s1 -> s2 [66, 80] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s1 -> s1 [66, 65535] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s1 -> s8 [81, 81] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s1 -> s2 [82, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s2 -> s2 [0, 64] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s2 -> s5 [65, 65] { R8898 += 1, R8812 += 1 };
  s2 -> s6 [65, 65] { R8898 += 1, R8812 += 1 };
  s2 -> s2 [66, 80] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s2 -> s2 [66, 65535] { R8898 += 1, R8812 += 1 };
  s2 -> s8 [81, 81] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s2 -> s2 [82, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s1 [0, 64] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s3 -> s2 [0, 64] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s3 [0, 65535] { R8898 += 1, R8811 += 1, R8812 += 1 };
  s3 -> s4 [65, 65] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s3 -> s5 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s6 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s7 [65, 65] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s3 -> s2 [66, 80] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s1 [66, 65535] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s3 -> s8 [81, 81] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s3 -> s2 [82, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s4 -> s6 [0, 80] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s4 -> s4 [0, 65535] { R8898 += 1, R8812 += 1, R8733 += 1, R8734 += 1 };
  s4 -> s13 [81, 81] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s4 -> s6 [82, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s6 -> s6 [0, 80] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s6 -> s6 [0, 65535] { R8898 += 1, R8812 += 1 };
  s6 -> s13 [81, 81] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s6 -> s6 [82, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s8 -> s9 [0, 64] { R8898 += 1, R8812 += 1 };
  s8 -> s8 [0, 64] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s8 -> s10 [65, 65] { R8898 += 1, R8812 += 1 };
  s8 -> s11 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s8 -> s12 [65, 65] { R8898 += 1, R8812 += 1 };
  s8 -> s13 [65, 65] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s8 -> s9 [66, 65535] { R8898 += 1, R8812 += 1 };
  s8 -> s8 [66, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s9 -> s9 [0, 64] { R8898 += 1, R8812 += 1 };
  s9 -> s9 [0, 65535] { R8898 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s10 [65, 65] { R8898 += 1, R8812 += 1 };
  s9 -> s12 [65, 65] { R8898 += 1, R8812 += 1 };
  s9 -> s9 [66, 65535] { R8898 += 1, R8812 += 1 };
  s10 -> s10 [0, 65535] { R8898 += 1, R8812 += 1 };
  s10 -> s15 [0, 65535] { R8898 += 1 };
  s10 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R8898 += 1 };
  s12 -> s14 [0, 65535];
  s13 -> s10 [0, 65535] { R8898 += 1, R8812 += 1 };
  s13 -> s13 [0, 65535] { R8898 += 1, R8812 += 1, R8734 += 1, R8735 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R8898 += 1 };
  s15 -> s14 [0, 65535];
  accepting s12, s9, s14, s15, s10;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R8762 && R5 = R8898 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R8739 = 0 && R8740 = R8762 && R8741 = 0 && R8742 = R8762 && R8743 = 0 && R8744 = R8762 && R8745 = 0 && R8746 = R8762 && R8747 = 0 && R8748 = R8762 && R8749 = 0 && R8750 = R8762 && R8751 = 0 && R8752 = R8762 && R8753 = 0 && R8754 = R8762 && R8755 = 0 && R8756 = R8762 && R8757 = 0 && R8758 = R8762 && R8759 = 0 && R8760 = R8762 && R8761 = 0 && R8763 = 0 && R8764 = R8898 && R8765 = 0 && R8766 = R8898 && R8767 = 0 && R8768 = R8898 && R8769 = 0 && R8770 = R8898 && R8771 = 0 && R8772 = R8898 && R8773 = 0 && R8774 = R8898 && R8775 = 0 && R8776 = R8898 && R8777 = 0 && R8778 = R8898 && R8779 = 0 && R8780 = R8898 && R8781 = 0 && R8782 = R8898 && R8783 = 0 && R8784 = R8898 && R8785 = 0 && R8786 = R8898 && R8787 = 0 && R8788 = R8898 && R8789 = 0 && R8790 = R8898 && R8793 = 0 && R8794 = 0 && R8803 = 0 && R8804 = 0 && R8811 = 0 && R8812 = 0 && R8841 = 10 && R8842 = R8898 && R8843 = 10 && R8844 = R8898 && R8845 = 10 && R8846 = R8898 && R8847 = 10 && R8848 = R8898 && R8849 = 10 && R8850 = R8898 && R8851 = 10 && R8852 = R8898 && R8853 = 10 && R8854 = R8898 && R8855 = 10 && R8856 = R8898 && R8857 = 10 && R8858 = R8898 && R8859 = 10 && R8860 = R8898 && R8861 = 10 && R8862 = R8898 && R8863 = 10 && R8864 = R8898 && R8865 = 10 && R8866 = R8898 && R8867 = 10 && R8868 = R8898 && R8869 = 10 && R8870 = R8898 && R8871 = 10 && R8872 = R8898 && R8873 = 10 && R8874 = R8898 && R8875 = 10 && R8876 = R8898 && R8877 = 10 && R8878 = R8898 && R8879 = 10 && R8880 = R8898 && R8881 = 10 && R8882 = R8898 && R8883 = 10 && R8884 = R8898 && R8885 = 10 && R8886 = R8898 && R8887 = 10 && R8888 = R8898 && R8889 = 10 && R8890 = R8898 && R8891 = 10 && R8892 = R8898 && R8893 = 10 && R8894 = R8898 && R8895 = 10 && R8896 = R8898 && R8897 = 10 && R94 + R91 + R112 + R109 != 0 && R8062 + R8059 + R8738 + R8735 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R8762 && 9 < R8898 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8055 + R8053 = 0 && R8056 + R8054 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8060 + R8057 = 0 && R8061 + R8058 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R8055 + R8053 != 0 || R494 + R493 + -1*R8056 + -1*R8054 = 0 || R494 + R493 < 1) && (R8060 + R8057 != 0 || R494 + R493 + -1*R8061 + -1*R8058 = 0 || R494 + R493 < 1) && (R30 = 0 || (R8791 = 0 && R8792 = 0)) && (R30 = 0 || (R8795 = 0 && R8796 = 0)) && (R30 = 0 || (R8797 = 0 && R8798 = 0)) && (R30 = 0 || (R8799 = 0 && R8800 = 0)) && (R30 = 0 || (R8801 = 0 && R8802 = 0)) && (R30 = 0 || (R8805 = 0 && R8806 = 0)) && (R30 = 0 || (R8807 = 0 && R8808 = 0)) && (R30 = 0 || (R8809 = 0 && R8810 = 0)) && (R32 = 0 || (R8813 = 0 && R8814 = 0)) && (R32 = 0 || (R8815 = 0 && R8816 = 0)) && (R32 = 0 || (R8817 = 0 && R8818 = 0)) && (R32 = 0 || (R8819 = 0 && R8820 = 0)) && (R32 = 0 || (R8821 = 0 && R8822 = 0)) && (R32 = 0 || (R8823 = 0 && R8824 = 0)) && (R32 = 0 || (R8825 = 0 && R8826 = 0)) && (R32 = 0 || (R8827 = 0 && R8828 = 0)) && (R32 = 0 || (R8829 = 0 && R8830 = 0)) && (R32 = 0 || (R8831 = 0 && R8832 = 0)) && (R32 = 0 || (R8833 = 0 && R8834 = 0)) && (R32 = 0 || (R8835 = 0 && R8836 = 0)) && (R32 = 0 || (R8837 = 0 && R8838 = 0)) && (R32 = 0 || (R8839 = 0 && R8840 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R8055 + R8053 = 0 || R494 + R493 < 1) && (R8060 + R8057 = 0 || R494 + R493 < 1) && (R8068 + R8065 = 0 || (R8066 + R8063 = 0 && R8067 + R8064 = 0)) && (R8068 + R8065 = 0 || (R8736 + R8733 = 0 && R8737 + R8734 = 0));
// End of Parikh automata intersection problem
