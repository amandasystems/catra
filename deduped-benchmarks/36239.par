// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R16, R17, R20, R29, R30, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R31, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R3173, R3174, R3175, R3176, R3177, R3178, R3179, R3180, R3181, R3182, R3183, R3184, R3185, R3186, R3187, R3188, R3189, R3190, R3191, R3192, R3193, R3194, R3195, R3196, R3197, R3198, R3199, R32, R3200, R3201, R3202, R33, R34, R35, R36, R4, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R6, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3068 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R3067 += 1, R3068 += 1 };
  s1 -> s1 [0, 65535] { R3068 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R3070 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R3069 += 1, R3070 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3070 += 1, R68 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R3072 += 1 };
  s0 -> s0 [0, 65535] { R3071 += 1, R3072 += 1 };
  s0 -> s2 [0, 65535] { R3072 += 1, R70 += 1 };
  s0 -> s1 [90, 65535] { R3072 += 1 };
  s1 -> s1 [0, 88] { R3072 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R3072 += 1 };
  s2 -> s1 [0, 88] { R3072 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3072 += 1, R70 += 1 };
  s2 -> s1 [90, 65535] { R3072 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R3074 += 1 };
  s0 -> s0 [0, 65535] { R3073 += 1, R3074 += 1 };
  s0 -> s2 [0, 65535] { R3074 += 1, R72 += 1 };
  s0 -> s1 [74, 65535] { R3074 += 1 };
  s1 -> s1 [0, 72] { R3074 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R3074 += 1 };
  s2 -> s1 [0, 72] { R3074 += 1 };
  s2 -> s2 [0, 65535] { R3074 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R3074 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3076 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R3076 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R3075 += 1, R3076 += 1 };
  s1 -> s1 [0, 65535] { R3076 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3076 += 1 };
  s2 -> s1 [0, 65535] { R3076 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R3076 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3076 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3078 += 1 };
  s0 -> s0 [0, 65535] { R3077 += 1, R3078 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3078 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3080 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R3080 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R3079 += 1, R3080 += 1 };
  s1 -> s1 [0, 65535] { R3080 += 1, R83 += 1, R84 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3080 += 1 };
  s2 -> s1 [0, 65535] { R3080 += 1, R83 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R3080 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3080 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R3082 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R3082 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3081 += 1, R3082 += 1 };
  s0 -> s3 [108, 108] { R3082 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R3082 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3082 += 1 };
  s1 -> s1 [0, 65535] { R3082 += 1, R88 += 1 };
  s2 -> s1 [0, 107] { R3082 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3082 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [108, 108] { R3082 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R3082 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R3082 += 1, R88 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3082 += 1 };
  s3 -> s5 [111, 111] { R3082 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R3082 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3082 += 1, R88 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3082 += 1 };
  s5 -> s6 [99, 99] { R3082 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R3082 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R3082 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R3082 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3082 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R3082 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R3082 += 1, R88 += 1 };
  s7 -> s7 [0, 65535] { R3082 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3082 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R3082 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R3082 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R3082 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3082 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R3082 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R3082 += 1, R88 += 1 };
  s9 -> s9 [0, 65535] { R3082 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3082 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R3082 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R3082 += 1, R88 += 1 };
  s10 -> s10 [0, 65535] { R3082 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3082 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R3082 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R3082 += 1, R88 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3082 += 1 };
  s11 -> s12 [116, 116] { R3082 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R3082 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R3082 += 1, R88 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3082 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3083 += 1, R3084 += 1 };
  s0 -> s1 [0, 65535] { R3084 += 1, R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R3084 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3084 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R3084 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3084 += 1 };
  s2 -> s2 [0, 65535] { R3084 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3084 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R3085 += 1, R3086 += 1 };
  s0 -> s1 [0, 65535] { R3086 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R3086 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R3086 += 1, R98 += 1, R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3086 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3086 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535] { R3086 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3086 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R3087 += 1, R3088 += 1 };
  s0 -> s1 [0, 65535] { R3088 += 1 };
  s1 -> s1 [0, 65535] { R3088 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3090 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R3090 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R3089 += 1, R3090 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3090 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R3090 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3090 += 1, R105 += 1, R106 += 1 };
  s2 -> s4 [0, 65535] { R3090 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3090 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3092 += 1 };
  s0 -> s0 [0, 65535] { R3091 += 1, R3092 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3092 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R3094 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R3093 += 1, R3094 += 1 };
  s0 -> s2 [0, 65535] { R3094 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [73, 73] { R3094 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R3094 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R3094 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R3094 += 1, R111 += 1, R112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3094 += 1 };
  s1 -> s3 [73, 73] { R3094 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R3094 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R3094 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R3094 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535] { R3094 += 1, R110 += 1, R111 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [73, 73] { R3094 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R3094 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R3094 += 1, R111 += 1, R112 += 1 };
  s3 -> s6 [0, 65535] { R3094 += 1 };
  s3 -> s3 [0, 65535] { R3094 += 1, R111 += 1, R112 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3094 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3094 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3118 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R3117 += 1, R3118 += 1 };
  s1 -> s1 [0, 65535] { R3118 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R3120 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R3119 += 1, R3120 += 1 };
  s0 -> s2 [65, 65] { R3120 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R3120 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R3120 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R3120 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3120 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R3120 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R3120 += 1, R67 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3120 += 1, R67 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3122 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R3121 += 1, R3122 += 1 };
  s0 -> s2 [65, 65] { R3122 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R3122 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R3122 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R3122 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3122 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R3122 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R3122 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3122 += 1, R69 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3124 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R3123 += 1, R3124 += 1 };
  s0 -> s2 [65, 65] { R3124 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R3124 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R3124 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R3124 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3124 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R3124 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R3124 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R3124 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3126 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3125 += 1, R3126 += 1 };
  s0 -> s2 [65, 65] { R3126 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R3126 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R3126 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R3126 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3126 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R3126 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R3126 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3126 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3128 += 1 };
  s0 -> s0 [0, 65535] { R3127 += 1, R3128 += 1 };
  s0 -> s2 [65, 65] { R3128 += 1 };
  s0 -> s3 [65, 65] { R3128 += 1 };
  s0 -> s1 [66, 65535] { R3128 += 1 };
  s1 -> s1 [0, 64] { R3128 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3128 += 1 };
  s1 -> s3 [65, 65] { R3128 += 1 };
  s1 -> s1 [66, 65535] { R3128 += 1 };
  s2 -> s2 [0, 65535] { R3128 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3130 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R3129 += 1, R3130 += 1 };
  s0 -> s2 [65, 65] { R3130 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R3130 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R3130 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R3130 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3130 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R3130 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R3130 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3130 += 1, R79 += 1, R80 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3132 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R3131 += 1, R3132 += 1 };
  s0 -> s2 [65, 65] { R3132 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R3132 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R3132 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R3132 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3132 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R3132 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R3132 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3132 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3134 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R3133 += 1, R3134 += 1 };
  s0 -> s2 [65, 65] { R3134 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R3134 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R3134 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R3134 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3134 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R3134 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R3134 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3134 += 1, R89 += 1, R90 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3136 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R3135 += 1, R3136 += 1 };
  s0 -> s2 [65, 65] { R3136 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R3136 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R3136 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R3136 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3136 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R3136 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R3136 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R3136 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3138 += 1 };
  s0 -> s0 [0, 65535] { R3137 += 1, R3138 += 1 };
  s0 -> s2 [65, 65] { R3138 += 1 };
  s0 -> s3 [65, 65] { R3138 += 1 };
  s0 -> s1 [66, 65535] { R3138 += 1 };
  s1 -> s1 [0, 64] { R3138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3138 += 1 };
  s1 -> s3 [65, 65] { R3138 += 1 };
  s1 -> s1 [66, 65535] { R3138 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3138 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3140 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R3139 += 1, R3140 += 1 };
  s0 -> s2 [65, 65] { R3140 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R3140 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R3140 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R3140 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3140 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R3140 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R3140 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535] { R3140 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3142 += 1 };
  s0 -> s0 [0, 65535] { R3141 += 1, R3142 += 1 };
  s0 -> s2 [65, 65] { R3142 += 1 };
  s0 -> s3 [65, 65] { R3142 += 1 };
  s0 -> s1 [66, 65535] { R3142 += 1 };
  s1 -> s1 [0, 64] { R3142 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3142 += 1 };
  s1 -> s3 [65, 65] { R3142 += 1 };
  s1 -> s1 [66, 65535] { R3142 += 1 };
  s2 -> s2 [0, 65535] { R3142 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3144 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R3143 += 1, R3144 += 1 };
  s0 -> s2 [65, 65] { R3144 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R3144 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R3144 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R3144 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3144 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R3144 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R3144 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3144 += 1, R107 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R3146 += 1 };
  s0 -> s0 [0, 65535] { R3145 += 1, R3146 += 1 };
  s0 -> s1 [45, 45] { R3146 += 1 };
  s0 -> s2 [46, 46] { R3146 += 1 };
  s0 -> s1 [48, 62] { R3146 += 1 };
  s0 -> s3 [65, 65] { R3146 += 1 };
  s0 -> s1 [66, 65535] { R3146 += 1 };
  s1 -> s1 [0, 43] { R3146 += 1 };
  s1 -> s1 [45, 45] { R3146 += 1 };
  s1 -> s2 [46, 46] { R3146 += 1 };
  s1 -> s1 [48, 62] { R3146 += 1 };
  s1 -> s3 [65, 65] { R3146 += 1 };
  s1 -> s1 [66, 65535] { R3146 += 1 };
  s2 -> s1 [0, 43] { R3146 += 1 };
  s2 -> s1 [45, 45] { R3146 += 1 };
  s2 -> s2 [46, 46] { R3146 += 1 };
  s2 -> s1 [48, 62] { R3146 += 1 };
  s2 -> s3 [65, 65] { R3146 += 1 };
  s2 -> s1 [66, 114] { R3146 += 1 };
  s2 -> s8 [115, 115] { R3146 += 1 };
  s2 -> s1 [116, 65535] { R3146 += 1 };
  s3 -> s3 [0, 43] { R3146 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3146 += 1 };
  s3 -> s4 [46, 46] { R3146 += 1 };
  s3 -> s3 [48, 62] { R3146 += 1 };
  s3 -> s3 [65, 65535] { R3146 += 1 };
  s4 -> s3 [0, 43] { R3146 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3146 += 1 };
  s4 -> s4 [46, 46] { R3146 += 1 };
  s4 -> s3 [48, 62] { R3146 += 1 };
  s4 -> s3 [65, 114] { R3146 += 1 };
  s4 -> s5 [115, 115] { R3146 += 1 };
  s4 -> s3 [116, 65535] { R3146 += 1 };
  s5 -> s3 [0, 43] { R3146 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3146 += 1 };
  s5 -> s4 [46, 46] { R3146 += 1 };
  s5 -> s3 [48, 62] { R3146 += 1 };
  s5 -> s3 [65, 110] { R3146 += 1 };
  s5 -> s6 [111, 111] { R3146 += 1 };
  s5 -> s3 [112, 65535] { R3146 += 1 };
  s6 -> s3 [0, 43] { R3146 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3146 += 1 };
  s6 -> s4 [46, 46] { R3146 += 1 };
  s6 -> s3 [48, 62] { R3146 += 1 };
  s6 -> s3 [65, 98] { R3146 += 1 };
  s6 -> s7 [99, 99] { R3146 += 1 };
  s6 -> s3 [100, 65535] { R3146 += 1 };
  s7 -> s3 [0, 43] { R3146 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3146 += 1 };
  s7 -> s4 [46, 46] { R3146 += 1 };
  s7 -> s3 [48, 62] { R3146 += 1 };
  s7 -> s3 [65, 106] { R3146 += 1 };
  s7 -> s3 [108, 65535] { R3146 += 1 };
  s8 -> s1 [0, 43] { R3146 += 1 };
  s8 -> s1 [45, 45] { R3146 += 1 };
  s8 -> s2 [46, 46] { R3146 += 1 };
  s8 -> s1 [48, 62] { R3146 += 1 };
  s8 -> s3 [65, 65] { R3146 += 1 };
  s8 -> s1 [66, 110] { R3146 += 1 };
  s8 -> s9 [111, 111] { R3146 += 1 };
  s8 -> s1 [112, 65535] { R3146 += 1 };
  s9 -> s1 [0, 43] { R3146 += 1 };
  s9 -> s1 [45, 45] { R3146 += 1 };
  s9 -> s2 [46, 46] { R3146 += 1 };
  s9 -> s1 [48, 62] { R3146 += 1 };
  s9 -> s3 [65, 65] { R3146 += 1 };
  s9 -> s1 [66, 98] { R3146 += 1 };
  s9 -> s10 [99, 99] { R3146 += 1 };
  s9 -> s1 [100, 65535] { R3146 += 1 };
  s10 -> s1 [0, 43] { R3146 += 1 };
  s10 -> s1 [45, 45] { R3146 += 1 };
  s10 -> s2 [46, 46] { R3146 += 1 };
  s10 -> s1 [48, 62] { R3146 += 1 };
  s10 -> s3 [65, 65] { R3146 += 1 };
  s10 -> s1 [66, 106] { R3146 += 1 };
  s10 -> s1 [108, 65535] { R3146 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R3147 += 1, R3148 += 1 };
  s0 -> s1 [0, 65535] { R3148 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R3148 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R3150 += 1 };
  s0 -> s0 [0, 65535] { R3149 += 1, R3150 += 1 };
  s0 -> s2 [0, 65535] { R3150 += 1, R16 += 1 };
  s0 -> s3 [58, 58] { R3150 += 1 };
  s0 -> s1 [59, 65535] { R3150 += 1 };
  s1 -> s1 [0, 57] { R3150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3150 += 1 };
  s1 -> s1 [59, 65535] { R3150 += 1 };
  s2 -> s1 [0, 57] { R3150 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3150 += 1, R16 += 1 };
  s2 -> s3 [58, 58] { R3150 += 1 };
  s2 -> s1 [59, 65535] { R3150 += 1 };
  s3 -> s3 [0, 65535] { R3150 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3152 += 1 };
  s0 -> s2 [0, 65535] { R3152 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R3151 += 1, R3152 += 1 };
  s0 -> s3 [65, 65] { R3152 += 1 };
  s0 -> s1 [66, 65535] { R3152 += 1 };
  s1 -> s1 [0, 64] { R3152 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3152 += 1 };
  s1 -> s1 [66, 65535] { R3152 += 1 };
  s2 -> s1 [0, 64] { R3152 += 1 };
  s2 -> s2 [0, 65535] { R3152 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3152 += 1 };
  s2 -> s1 [66, 65535] { R3152 += 1 };
  s3 -> s3 [0, 65535] { R3152 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R3154 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R3153 += 1, R3154 += 1 };
  s0 -> s2 [0, 65535] { R3154 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [91, 91] { R3154 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R3154 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R3154 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3154 += 1 };
  s2 -> s1 [0, 90] { R3154 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3154 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [91, 91] { R3154 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R3154 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R3154 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3154 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s0 [0, 65535] { R3155 += 1, R3156 += 1 };
  s0 -> s1 [0, 65535] { R3156 += 1, R35 += 1, R36 += 1 };
  s0 -> s2 [0, 65535] { R3156 += 1, R36 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3156 += 1, R35 += 1, R36 += 1 };
  s1 -> s2 [0, 65535] { R3156 += 1, R36 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R3156 += 1, R36 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3156 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3158 += 1, R3044 += 1 };
  s0 -> s2 [0, 65535] { R3158 += 1, R3043 += 1, R3044 += 1 };
  s0 -> s0 [0, 65535] { R3157 += 1, R3158 += 1 };
  s0 -> s1 [66, 65535] { R3158 += 1, R3044 += 1 };
  s1 -> s1 [0, 64] { R3158 += 1, R3044 += 1 };
  s1 -> s1 [0, 65535] { R3158 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3158 += 1, R3044 += 1 };
  s2 -> s1 [0, 64] { R3158 += 1, R3044 += 1 };
  s2 -> s2 [0, 65535] { R3158 += 1, R3043 += 1, R3044 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3158 += 1, R3044 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R3160 += 1, R3046 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R3160 += 1, R3045 += 1, R3046 += 1 };
  s0 -> s0 [0, 65535] { R3159 += 1, R3160 += 1 };
  s1 -> s1 [0, 65535] { R3160 += 1, R3046 += 1, R29 += 1 };
  s1 -> s4 [0, 65535] { R3160 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3160 += 1, R3046 += 1, R29 += 1 };
  s2 -> s2 [0, 65535] { R3160 += 1, R3045 += 1, R3046 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3160 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R3162 += 1, R3048 += 1 };
  s0 -> s2 [0, 65535] { R3162 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s0 [0, 65535] { R3161 += 1, R3162 += 1 };
  s0 -> s1 [81, 65535] { R3162 += 1, R3048 += 1 };
  s1 -> s1 [0, 65] { R3162 += 1, R3048 += 1 };
  s1 -> s1 [0, 65535] { R3162 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R3162 += 1, R3048 += 1 };
  s2 -> s1 [0, 65] { R3162 += 1, R3048 += 1 };
  s2 -> s2 [0, 65535] { R3162 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R3162 += 1, R3048 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R3164 += 1, R3049 += 1, R3050 += 1 };
  s0 -> s0 [0, 65535] { R3163 += 1, R3164 += 1 };
  s0 -> s2 [0, 65535] { R3164 += 1, R3050 += 1, R494 += 1 };
  s1 -> s1 [0, 65535] { R3164 += 1, R3049 += 1, R3050 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3164 += 1, R3050 += 1, R494 += 1 };
  s2 -> s3 [0, 65535] { R3164 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3164 += 1, R3050 += 1, R494 += 1 };
  s3 -> s3 [0, 65535] { R3164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R3166 += 1, R3052 += 1 };
  s0 -> s0 [0, 65535] { R3165 += 1, R3166 += 1 };
  s0 -> s2 [0, 65535] { R3166 += 1, R3052 += 1, R496 += 1 };
  s0 -> s3 [0, 65535] { R3166 += 1, R3051 += 1, R3052 += 1 };
  s0 -> s1 [82, 65535] { R3166 += 1, R3052 += 1 };
  s1 -> s1 [0, 80] { R3166 += 1, R3052 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3166 += 1 };
  s1 -> s1 [82, 65535] { R3166 += 1, R3052 += 1 };
  s2 -> s1 [0, 80] { R3166 += 1, R3052 += 1 };
  s2 -> s5 [0, 65535] { R3166 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3166 += 1, R3052 += 1, R496 += 1 };
  s2 -> s1 [82, 65535] { R3166 += 1, R3052 += 1 };
  s3 -> s1 [0, 80] { R3166 += 1, R3052 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3166 += 1, R3052 += 1, R496 += 1 };
  s3 -> s3 [0, 65535] { R3166 += 1, R3051 += 1, R3052 += 1 };
  s3 -> s1 [82, 65535] { R3166 += 1, R3052 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3166 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R3168 += 1, R3054 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R3168 += 1, R3054 += 1, R499 += 1, R500 += 1 };
  s0 -> s3 [0, 65535] { R3168 += 1, R3053 += 1, R3054 += 1 };
  s0 -> s0 [0, 65535] { R3167 += 1, R3168 += 1 };
  s0 -> s1 [82, 65535] { R3168 += 1, R3054 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R3168 += 1, R3054 += 1, R500 += 1 };
  s1 -> s1 [0, 65535] { R3168 += 1, R3054 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3168 += 1 };
  s1 -> s1 [82, 65535] { R3168 += 1, R3054 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R3168 += 1, R3054 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R3168 += 1, R3054 += 1, R499 += 1, R500 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3168 += 1 };
  s2 -> s1 [82, 65535] { R3168 += 1, R3054 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R3168 += 1, R3054 += 1, R500 += 1 };
  s3 -> s2 [0, 65535] { R3168 += 1, R3054 += 1, R499 += 1, R500 += 1 };
  s3 -> s3 [0, 65535] { R3168 += 1, R3053 += 1, R3054 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R3168 += 1, R3054 += 1, R500 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3168 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R3170 += 1, R3056 += 1, R505 += 1, R506 += 1 };
  s0 -> s2 [0, 65535] { R3170 += 1, R3055 += 1, R3056 += 1 };
  s0 -> s0 [0, 65535] { R3169 += 1, R3170 += 1 };
  s0 -> s3 [0, 65535] { R3170 += 1, R3056 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R3170 += 1, R3056 += 1, R505 += 1, R506 += 1 };
  s1 -> s6 [0, 65535] { R3170 += 1, R3056 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3170 += 1 };
  s2 -> s1 [0, 65535] { R3170 += 1, R3056 += 1, R505 += 1, R506 += 1 };
  s2 -> s2 [0, 65535] { R3170 += 1, R3055 += 1, R3056 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3170 += 1, R3056 += 1, R504 += 1, R505 += 1 };
  s3 -> s1 [0, 65535] { R3170 += 1, R3056 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3170 += 1 };
  s3 -> s3 [0, 65535] { R3170 += 1, R3056 += 1, R504 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3170 += 1 };
  s6 -> s6 [0, 65535] { R3170 += 1, R3056 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s0 -> s2 [0, 65535] { R3172 += 1, R3057 += 1, R3058 += 1 };
  s0 -> s3 [0, 65535] { R3172 += 1, R3058 += 1, R509 += 1, R510 += 1 };
  s0 -> s0 [0, 65535] { R3171 += 1, R3172 += 1 };
  s0 -> s1 [91, 107] { R3172 += 1, R3058 += 1, R510 += 1 };
  s0 -> s4 [108, 108] { R3172 += 1, R3058 += 1, R510 += 1 };
  s0 -> s1 [109, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s1 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s1 -> s5 [0, 65535] { R3172 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3172 += 1, R3058 += 1 };
  s1 -> s1 [91, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s2 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3172 += 1, R3057 += 1, R3058 += 1 };
  s2 -> s3 [0, 65535] { R3172 += 1, R3058 += 1, R509 += 1, R510 += 1 };
  s2 -> s1 [91, 107] { R3172 += 1, R3058 += 1, R510 += 1 };
  s2 -> s4 [108, 108] { R3172 += 1, R3058 += 1, R510 += 1 };
  s2 -> s1 [109, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s3 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s3 -> s5 [0, 65535] { R3172 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3172 += 1, R3058 += 1, R509 += 1, R510 += 1 };
  s3 -> s1 [91, 107] { R3172 += 1, R3058 += 1, R510 += 1 };
  s3 -> s4 [108, 108] { R3172 += 1, R3058 += 1, R510 += 1 };
  s3 -> s1 [109, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s4 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s4 -> s5 [0, 65535] { R3172 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3172 += 1, R3058 += 1 };
  s4 -> s1 [91, 110] { R3172 += 1, R3058 += 1, R510 += 1 };
  s4 -> s7 [111, 111] { R3172 += 1, R3058 += 1, R510 += 1 };
  s4 -> s1 [112, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s5 -> s5 [0, 65535] { R3172 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s7 -> s5 [0, 65535] { R3172 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3172 += 1, R3058 += 1 };
  s7 -> s1 [91, 98] { R3172 += 1, R3058 += 1, R510 += 1 };
  s7 -> s8 [99, 99] { R3172 += 1, R3058 += 1, R510 += 1 };
  s7 -> s1 [100, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s8 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s8 -> s5 [0, 65535] { R3172 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3172 += 1, R3058 += 1 };
  s8 -> s1 [91, 96] { R3172 += 1, R3058 += 1, R510 += 1 };
  s8 -> s9 [97, 97] { R3172 += 1, R3058 += 1, R510 += 1 };
  s8 -> s1 [98, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s9 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s9 -> s5 [0, 65535] { R3172 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3172 += 1, R3058 += 1 };
  s9 -> s1 [91, 107] { R3172 += 1, R3058 += 1, R510 += 1 };
  s9 -> s10 [108, 108] { R3172 += 1, R3058 += 1, R510 += 1 };
  s9 -> s1 [109, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s10 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s10 -> s5 [0, 65535] { R3172 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R3172 += 1, R3058 += 1 };
  s10 -> s1 [91, 103] { R3172 += 1, R3058 += 1, R510 += 1 };
  s10 -> s11 [104, 104] { R3172 += 1, R3058 += 1, R510 += 1 };
  s10 -> s1 [105, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s11 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s11 -> s5 [0, 65535] { R3172 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R3172 += 1, R3058 += 1 };
  s11 -> s1 [91, 110] { R3172 += 1, R3058 += 1, R510 += 1 };
  s11 -> s12 [111, 111] { R3172 += 1, R3058 += 1, R510 += 1 };
  s11 -> s1 [112, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s12 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s12 -> s5 [0, 65535] { R3172 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R3172 += 1, R3058 += 1 };
  s12 -> s1 [91, 114] { R3172 += 1, R3058 += 1, R510 += 1 };
  s12 -> s13 [115, 115] { R3172 += 1, R3058 += 1, R510 += 1 };
  s12 -> s1 [116, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s13 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s13 -> s5 [0, 65535] { R3172 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R3172 += 1, R3058 += 1 };
  s13 -> s1 [91, 115] { R3172 += 1, R3058 += 1, R510 += 1 };
  s13 -> s14 [116, 116] { R3172 += 1, R3058 += 1, R510 += 1 };
  s13 -> s1 [117, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  s14 -> s1 [0, 81] { R3172 += 1, R3058 += 1, R510 += 1 };
  s14 -> s1 [91, 65535] { R3172 += 1, R3058 += 1, R510 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R3174 += 1, R3060 += 1 };
  s0 -> s2 [0, 65535] { R3174 += 1, R3060 += 1, R3029 += 1, R3030 += 1 };
  s0 -> s3 [0, 65535] { R3174 += 1, R3059 += 1, R3060 += 1 };
  s0 -> s0 [0, 65535] { R3173 += 1, R3174 += 1 };
  s1 -> s1 [0, 65535] { R3174 += 1, R3060 += 1 };
  s1 -> s5 [0, 65535] { R3174 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3174 += 1, R3060 += 1 };
  s2 -> s5 [0, 65535] { R3174 += 1 };
  s2 -> s2 [0, 65535] { R3174 += 1, R3060 += 1, R3029 += 1, R3030 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3174 += 1, R3060 += 1 };
  s3 -> s2 [0, 65535] { R3174 += 1, R3060 += 1, R3029 += 1, R3030 += 1 };
  s3 -> s3 [0, 65535] { R3174 += 1, R3059 += 1, R3060 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3174 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R3175 += 1, R3176 += 1 };
  s0 -> s1 [0, 65535] { R3176 += 1, R3061 += 1, R3062 += 1 };
  s0 -> s2 [0, 65535] { R3176 += 1, R3062 += 1, R3035 += 1, R3036 += 1 };
  s0 -> s3 [0, 65535] { R3176 += 1, R3062 += 1, R3034 += 1, R3035 += 1 };
  s1 -> s1 [0, 65535] { R3176 += 1, R3061 += 1, R3062 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R3176 += 1, R3062 += 1, R3035 += 1, R3036 += 1 };
  s1 -> s3 [0, 65535] { R3176 += 1, R3062 += 1, R3034 += 1, R3035 += 1 };
  s2 -> s4 [0, 65535] { R3176 += 1 };
  s2 -> s6 [0, 65535] { R3176 += 1, R3062 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3176 += 1, R3062 += 1, R3035 += 1, R3036 += 1 };
  s3 -> s4 [0, 65535] { R3176 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3176 += 1, R3062 += 1, R3035 += 1, R3036 += 1 };
  s3 -> s3 [0, 65535] { R3176 += 1, R3062 += 1, R3034 += 1, R3035 += 1 };
  s4 -> s4 [0, 65535] { R3176 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3176 += 1 };
  s6 -> s6 [0, 65535] { R3176 += 1, R3062 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R3178 += 1, R3064 += 1 };
  s0 -> s0 [0, 65535] { R3177 += 1, R3178 += 1 };
  s0 -> s2 [0, 65535] { R3178 += 1, R3063 += 1, R3064 += 1 };
  s1 -> s1 [0, 65535] { R3178 += 1, R3064 += 1 };
  s1 -> s4 [0, 65535] { R3178 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3178 += 1, R3064 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3178 += 1, R3063 += 1, R3064 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3178 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 80] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s0 -> s0 [0, 65535] { R3179 += 1, R3180 += 1 };
  s0 -> s2 [0, 65535] { R3180 += 1, R3066 += 1, R3040 += 1, R3041 += 1 };
  s0 -> s3 [0, 65535] { R3180 += 1, R3065 += 1, R3066 += 1 };
  s0 -> s4 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s0 -> s5 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s0 -> s1 [82, 65535] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s1 -> s1 [0, 80] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s1 -> s1 [0, 65535] { R3180 += 1, R3066 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R3180 += 1 };
  s1 -> s4 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s1 -> s5 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s1 -> s1 [82, 65535] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s2 -> s1 [0, 80] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3180 += 1, R3066 += 1, R3040 += 1, R3041 += 1 };
  s2 -> s7 [0, 65535] { R3180 += 1 };
  s2 -> s4 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s2 -> s5 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s2 -> s1 [82, 65535] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s3 -> s1 [0, 80] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R3180 += 1, R3066 += 1, R3040 += 1, R3041 += 1 };
  s3 -> s3 [0, 65535] { R3180 += 1, R3065 += 1, R3066 += 1 };
  s3 -> s4 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s3 -> s5 [81, 81] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s3 -> s1 [82, 65535] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s4 -> s4 [0, 65535] { R3180 += 1, R3066 += 1, R3041 += 1, R3042 += 1 };
  s4 -> s8 [0, 65535] { R3180 += 1, R3066 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3180 += 1 };
  s5 -> s5 [0, 65535] { R3180 += 1, R3066 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R3180 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3180 += 1 };
  s8 -> s8 [0, 65535] { R3180 += 1, R3066 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3180 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R3182 += 1, R3095 += 1, R3096 += 1 };
  s0 -> s2 [0, 65535] { R3182 += 1, R3096 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R3181 += 1, R3182 += 1 };
  s1 -> s1 [0, 65535] { R3182 += 1, R3095 += 1, R3096 += 1 };
  s1 -> s2 [0, 65535] { R3182 += 1, R3096 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3182 += 1, R3096 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3182 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3182 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3184 += 1, R3098 += 1 };
  s0 -> s0 [0, 65535] { R3183 += 1, R3184 += 1 };
  s0 -> s2 [0, 65535] { R3184 += 1, R3097 += 1, R3098 += 1 };
  s0 -> s3 [65, 65] { R3184 += 1, R3098 += 1 };
  s0 -> s4 [65, 65] { R3184 += 1, R3098 += 1 };
  s0 -> s5 [81, 81] { R3184 += 1, R3098 += 1 };
  s0 -> s1 [82, 65535] { R3184 += 1, R3098 += 1 };
  s1 -> s1 [0, 64] { R3184 += 1, R3098 += 1 };
  s1 -> s3 [65, 65] { R3184 += 1, R3098 += 1 };
  s1 -> s4 [65, 65] { R3184 += 1, R3098 += 1 };
  s1 -> s5 [81, 81] { R3184 += 1, R3098 += 1 };
  s1 -> s1 [82, 65535] { R3184 += 1, R3098 += 1 };
  s2 -> s1 [0, 64] { R3184 += 1, R3098 += 1 };
  s2 -> s2 [0, 65535] { R3184 += 1, R3097 += 1, R3098 += 1 };
  s2 -> s3 [65, 65] { R3184 += 1, R3098 += 1 };
  s2 -> s4 [65, 65] { R3184 += 1, R3098 += 1 };
  s2 -> s5 [81, 81] { R3184 += 1, R3098 += 1 };
  s2 -> s1 [82, 65535] { R3184 += 1, R3098 += 1 };
  s4 -> s4 [0, 65] { R3184 += 1, R3098 += 1 };
  s4 -> s8 [81, 81] { R3184 += 1, R3098 += 1 };
  s4 -> s4 [82, 65535] { R3184 += 1, R3098 += 1 };
  s5 -> s5 [0, 64] { R3184 += 1, R3098 += 1 };
  s5 -> s5 [0, 65535] { R3184 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3184 += 1, R3098 += 1 };
  s5 -> s8 [65, 65] { R3184 += 1, R3098 += 1 };
  s5 -> s5 [81, 65535] { R3184 += 1, R3098 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3184 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3184 += 1, R3098 += 1 };
  s8 -> s8 [0, 65535] { R3184 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R3184 += 1, R3098 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3186 += 1, R3100 += 1, R493 += 1 };
  s0 -> s0 [0, 65535] { R3185 += 1, R3186 += 1 };
  s0 -> s2 [0, 65535] { R3186 += 1, R3099 += 1, R3100 += 1 };
  s0 -> s3 [65, 65] { R3186 += 1, R3100 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R3186 += 1, R3100 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R3186 += 1, R3100 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R3186 += 1, R3100 += 1, R493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3186 += 1 };
  s1 -> s3 [65, 65] { R3186 += 1, R3100 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R3186 += 1, R3100 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R3186 += 1, R3100 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R3186 += 1, R3100 += 1, R493 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3186 += 1, R3099 += 1, R3100 += 1 };
  s2 -> s3 [65, 65] { R3186 += 1, R3100 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R3186 += 1, R3100 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R3186 += 1, R3100 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R3186 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3186 += 1 };
  s4 -> s4 [0, 65535] { R3186 += 1, R3100 += 1, R493 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3186 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3188 += 1, R3102 += 1, R495 += 1 };
  s0 -> s0 [0, 65535] { R3187 += 1, R3188 += 1 };
  s0 -> s2 [0, 65535] { R3188 += 1, R3101 += 1, R3102 += 1 };
  s0 -> s3 [65, 65] { R3188 += 1, R3102 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R3188 += 1, R3102 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R3188 += 1, R3102 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R3188 += 1, R3102 += 1, R495 += 1 };
  s1 -> s1 [0, 65535] { R3188 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3188 += 1, R3102 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R3188 += 1, R3102 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R3188 += 1, R3102 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R3188 += 1, R3102 += 1, R495 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3188 += 1, R3101 += 1, R3102 += 1 };
  s2 -> s3 [65, 65] { R3188 += 1, R3102 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R3188 += 1, R3102 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R3188 += 1, R3102 += 1, R495 += 1 };
  s3 -> s6 [0, 65535] { R3188 += 1 };
  s3 -> s3 [0, 65535] { R3188 += 1, R3102 += 1, R495 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3188 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3188 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s0 -> s2 [0, 65535] { R3190 += 1, R3103 += 1, R3104 += 1 };
  s0 -> s0 [0, 65535] { R3189 += 1, R3190 += 1 };
  s0 -> s3 [65, 65] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3190 += 1 };
  s1 -> s3 [65, 65] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3190 += 1, R3103 += 1, R3104 += 1 };
  s2 -> s3 [65, 65] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s3 -> s3 [0, 65535] { R3190 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3190 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3190 += 1, R3104 += 1, R497 += 1, R498 += 1 };
  s5 -> s5 [0, 65535] { R3190 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R3192 += 1, R3105 += 1, R3106 += 1 };
  s0 -> s0 [0, 65535] { R3191 += 1, R3192 += 1 };
  s0 -> s3 [65, 65] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3192 += 1 };
  s1 -> s3 [65, 65] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s2 -> s2 [0, 65535] { R3192 += 1, R3105 += 1, R3106 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s3 -> s6 [0, 65535] { R3192 += 1 };
  s3 -> s3 [0, 65535] { R3192 += 1, R3106 += 1, R501 += 1, R502 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3192 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3192 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R3193 += 1, R3194 += 1 };
  s0 -> s2 [0, 65535] { R3194 += 1, R3107 += 1, R3108 += 1 };
  s0 -> s3 [65, 65] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s0 -> s4 [65, 65] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s0 -> s1 [66, 65535] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [0, 64] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3194 += 1 };
  s1 -> s3 [65, 65] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s1 -> s4 [65, 65] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s1 -> s1 [66, 65535] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [0, 64] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s2 -> s2 [0, 65535] { R3194 += 1, R3107 += 1, R3108 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s2 -> s4 [65, 65] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s2 -> s1 [66, 65535] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s3 -> s6 [0, 65535] { R3194 += 1 };
  s3 -> s3 [0, 65535] { R3194 += 1, R3108 += 1, R507 += 1, R508 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3194 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3194 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s0 -> s2 [0, 64] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s0 -> s0 [0, 65535] { R3195 += 1, R3196 += 1 };
  s0 -> s3 [0, 65535] { R3196 += 1, R3109 += 1, R3110 += 1 };
  s0 -> s4 [65, 65] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s0 -> s5 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s0 -> s6 [65, 65] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s0 -> s7 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s0 -> s1 [66, 65535] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s0 -> s2 [66, 65535] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s1 -> s1 [0, 64] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s1 -> s2 [0, 64] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s1 -> s4 [65, 65] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s1 -> s5 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s1 -> s6 [65, 65] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s1 -> s7 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s1 -> s1 [66, 65535] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s1 -> s2 [66, 65535] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s2 -> s2 [0, 64] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3196 += 1 };
  s2 -> s5 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s2 -> s7 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s2 -> s2 [66, 65535] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s3 -> s1 [0, 64] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s3 -> s2 [0, 64] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s3 -> s3 [0, 65535] { R3196 += 1, R3109 += 1, R3110 += 1 };
  s3 -> s4 [65, 65] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s3 -> s5 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s3 -> s6 [65, 65] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s3 -> s7 [65, 65] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s3 -> s1 [66, 65535] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s3 -> s2 [66, 65535] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s5 -> s9 [0, 65535] { R3196 += 1 };
  s6 -> s5 [0, 65535] { R3196 += 1, R3110 += 1, R3026 += 1, R3027 += 1 };
  s6 -> s6 [0, 65535] { R3196 += 1, R3110 += 1, R3025 += 1, R3026 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3196 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3196 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s0 -> s0 [0, 65535] { R3197 += 1, R3198 += 1 };
  s0 -> s2 [0, 65535] { R3198 += 1, R3111 += 1, R3112 += 1 };
  s0 -> s3 [65, 65] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s0 -> s4 [65, 65] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s0 -> s1 [66, 65535] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s1 -> s1 [0, 64] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3198 += 1 };
  s1 -> s3 [65, 65] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s1 -> s4 [65, 65] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s1 -> s1 [66, 65535] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s2 -> s1 [0, 64] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3198 += 1, R3111 += 1, R3112 += 1 };
  s2 -> s3 [65, 65] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s2 -> s4 [65, 65] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s2 -> s1 [66, 65535] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s3 -> s6 [0, 65535] { R3198 += 1 };
  s3 -> s3 [0, 65535] { R3198 += 1, R3112 += 1, R3031 += 1, R3032 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3198 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3198 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R3200 += 1, R3114 += 1 };
  s0 -> s2 [0, 65535] { R3200 += 1, R3113 += 1, R3114 += 1 };
  s0 -> s0 [0, 65535] { R3199 += 1, R3200 += 1 };
  s0 -> s3 [65, 65] { R3200 += 1, R3114 += 1 };
  s0 -> s4 [65, 65] { R3200 += 1, R3114 += 1 };
  s0 -> s1 [66, 65535] { R3200 += 1, R3114 += 1 };
  s1 -> s1 [0, 64] { R3200 += 1, R3114 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3200 += 1 };
  s1 -> s3 [65, 65] { R3200 += 1, R3114 += 1 };
  s1 -> s4 [65, 65] { R3200 += 1, R3114 += 1 };
  s1 -> s1 [66, 65535] { R3200 += 1, R3114 += 1 };
  s2 -> s1 [0, 64] { R3200 += 1, R3114 += 1 };
  s2 -> s2 [0, 65535] { R3200 += 1, R3113 += 1, R3114 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3200 += 1, R3114 += 1 };
  s2 -> s4 [65, 65] { R3200 += 1, R3114 += 1 };
  s2 -> s1 [66, 65535] { R3200 += 1, R3114 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3200 += 1, R3114 += 1 };
  s3 -> s6 [0, 65535] { R3200 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3200 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3200 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s0 -> s0 [0, 65535] { R3201 += 1, R3202 += 1 };
  s0 -> s2 [0, 65535] { R3202 += 1, R3115 += 1, R3116 += 1 };
  s0 -> s3 [65, 65] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s0 -> s4 [65, 65] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s0 -> s1 [66, 65535] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s1 -> s1 [0, 64] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3202 += 1 };
  s1 -> s3 [65, 65] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s1 -> s4 [65, 65] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s1 -> s1 [66, 65535] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s2 -> s1 [0, 64] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3202 += 1, R3115 += 1, R3116 += 1 };
  s2 -> s3 [65, 65] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s2 -> s4 [65, 65] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s2 -> s1 [66, 65535] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s3 -> s3 [0, 65535] { R3202 += 1, R3116 += 1, R3037 += 1, R3038 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3202 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3202 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3202 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R3066 && R5 = R3202 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R3043 = 0 && R3044 = R3066 && R3045 = 0 && R3046 = R3066 && R3047 = 0 && R3048 = R3066 && R3049 = 0 && R3050 = R3066 && R3051 = 0 && R3052 = R3066 && R3053 = 0 && R3054 = R3066 && R3055 = 0 && R3056 = R3066 && R3057 = 0 && R3058 = R3066 && R3059 = 0 && R3060 = R3066 && R3061 = 0 && R3062 = R3066 && R3063 = 0 && R3064 = R3066 && R3065 = 0 && R3067 = 0 && R3068 = R3202 && R3069 = 0 && R3070 = R3202 && R3071 = 0 && R3072 = R3202 && R3073 = 0 && R3074 = R3202 && R3075 = 0 && R3076 = R3202 && R3077 = 0 && R3078 = R3202 && R3079 = 0 && R3080 = R3202 && R3081 = 0 && R3082 = R3202 && R3083 = 0 && R3084 = R3202 && R3085 = 0 && R3086 = R3202 && R3087 = 0 && R3088 = R3202 && R3089 = 0 && R3090 = R3202 && R3091 = 0 && R3092 = R3202 && R3093 = 0 && R3094 = R3202 && R3097 = 0 && R3098 = 0 && R3109 = 0 && R3110 = 0 && R3145 = 10 && R3146 = R3202 && R3147 = 10 && R3148 = R3202 && R3149 = 10 && R3150 = R3202 && R3151 = 10 && R3152 = R3202 && R3153 = 10 && R3154 = R3202 && R3155 = 10 && R3156 = R3202 && R3157 = 10 && R3158 = R3202 && R3159 = 10 && R3160 = R3202 && R3161 = 10 && R3162 = R3202 && R3163 = 10 && R3164 = R3202 && R3165 = 10 && R3166 = R3202 && R3167 = 10 && R3168 = R3202 && R3169 = 10 && R3170 = R3202 && R3171 = 10 && R3172 = R3202 && R3173 = 10 && R3174 = R3202 && R3175 = 10 && R3176 = R3202 && R3177 = 10 && R3178 = R3202 && R3179 = 10 && R3180 = R3202 && R3181 = 10 && R3182 = R3202 && R3183 = 10 && R3184 = R3202 && R3185 = 10 && R3186 = R3202 && R3187 = 10 && R3188 = R3202 && R3189 = 10 && R3190 = R3202 && R3191 = 10 && R3192 = R3202 && R3193 = 10 && R3194 = R3202 && R3195 = 10 && R3196 = R3202 && R3197 = 10 && R3198 = R3202 && R3199 = 10 && R3200 = R3202 && R3201 = 10 && R94 + R91 + R112 + R109 != 0 && R3030 + R3027 + R3042 + R3039 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R3066 && 9 < R3202 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R509 + R507 = 0 && R510 + R508 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R3028 + R3025 = 0 && R3029 + R3026 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R509 + R507 != 0 || R494 + R493 + -1*R510 + -1*R508 = 0 || R494 + R493 < 1) && (R3028 + R3025 != 0 || R494 + R493 + -1*R3029 + -1*R3026 = 0 || R494 + R493 < 1) && (R30 = 0 || (R3095 = 0 && R3096 = 0)) && (R30 = 0 || (R3099 = 0 && R3100 = 0)) && (R30 = 0 || (R3101 = 0 && R3102 = 0)) && (R30 = 0 || (R3103 = 0 && R3104 = 0)) && (R30 = 0 || (R3105 = 0 && R3106 = 0)) && (R30 = 0 || (R3107 = 0 && R3108 = 0)) && (R30 = 0 || (R3111 = 0 && R3112 = 0)) && (R30 = 0 || (R3113 = 0 && R3114 = 0)) && (R30 = 0 || (R3115 = 0 && R3116 = 0)) && (R32 = 0 || (R3117 = 0 && R3118 = 0)) && (R32 = 0 || (R3119 = 0 && R3120 = 0)) && (R32 = 0 || (R3121 = 0 && R3122 = 0)) && (R32 = 0 || (R3123 = 0 && R3124 = 0)) && (R32 = 0 || (R3125 = 0 && R3126 = 0)) && (R32 = 0 || (R3127 = 0 && R3128 = 0)) && (R32 = 0 || (R3129 = 0 && R3130 = 0)) && (R32 = 0 || (R3131 = 0 && R3132 = 0)) && (R32 = 0 || (R3133 = 0 && R3134 = 0)) && (R32 = 0 || (R3135 = 0 && R3136 = 0)) && (R32 = 0 || (R3137 = 0 && R3138 = 0)) && (R32 = 0 || (R3139 = 0 && R3140 = 0)) && (R32 = 0 || (R3141 = 0 && R3142 = 0)) && (R32 = 0 || (R3143 = 0 && R3144 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R509 + R507 = 0 || R494 + R493 < 1) && (R3028 + R3025 = 0 || R494 + R493 < 1) && (R3036 + R3033 = 0 || (R3034 + R3031 = 0 && R3035 + R3032 = 0)) && (R3036 + R3033 = 0 || (R3040 + R3037 = 0 && R3041 + R3038 = 0));
// End of Parikh automata intersection problem
