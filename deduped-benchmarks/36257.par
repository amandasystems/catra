// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R10405, R10406, R10407, R10408, R10409, R10410, R10411, R10412, R10413, R10414, R10415, R10416, R10417, R10418, R10419, R10420, R10421, R10422, R10423, R10424, R10425, R10426, R10427, R10428, R10429, R10430, R10431, R10432, R10433, R10434, R10435, R10436, R10437, R10438, R10439, R10440, R10441, R10442, R10443, R10444, R10445, R10446, R10447, R10448, R10449, R10450, R10451, R10452, R10453, R10454, R10455, R10456, R10457, R10458, R10459, R10460, R10461, R10462, R10463, R10464, R10465, R10466, R10467, R10468, R10469, R10470, R10471, R10472, R10473, R10474, R10475, R10476, R10477, R10478, R10479, R10480, R10481, R10482, R10483, R10484, R10485, R10486, R10487, R10488, R10489, R10490, R10491, R10492, R10493, R10494, R10495, R10496, R10497, R10498, R10499, R105, R10500, R10501, R10502, R10503, R10504, R10505, R10506, R10507, R10508, R10509, R10510, R10511, R10512, R10513, R10514, R10515, R10516, R10517, R10518, R10519, R10520, R10521, R10522, R10523, R10524, R10525, R10526, R10527, R10528, R10529, R10530, R10531, R10532, R10533, R10534, R10535, R10536, R10537, R10538, R10539, R10540, R10541, R10542, R10543, R10544, R10545, R10546, R10547, R10548, R10549, R10550, R10551, R10552, R10553, R10554, R10555, R10556, R10557, R10558, R10559, R10560, R10561, R10562, R10563, R10564, R10565, R10566, R10567, R10568, R10569, R10570, R106, R107, R108, R109, R110, R111, R112, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R6, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R9735, R9736, R9737, R9738, R9739, R9740, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R10436 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R10435 += 1, R10436 += 1 };
  s1 -> s1 [0, 65535] { R10436 += 1, R31 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R10438 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R10437 += 1, R10438 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10438 += 1, R68 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R10440 += 1 };
  s0 -> s0 [0, 65535] { R10439 += 1, R10440 += 1 };
  s0 -> s2 [0, 65535] { R10440 += 1, R70 += 1 };
  s0 -> s1 [90, 65535] { R10440 += 1 };
  s1 -> s1 [0, 88] { R10440 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R10440 += 1 };
  s2 -> s1 [0, 88] { R10440 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10440 += 1, R70 += 1 };
  s2 -> s1 [90, 65535] { R10440 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R10442 += 1 };
  s0 -> s2 [0, 65535] { R10442 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R10441 += 1, R10442 += 1 };
  s0 -> s1 [74, 65535] { R10442 += 1 };
  s1 -> s1 [0, 72] { R10442 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R10442 += 1 };
  s2 -> s1 [0, 72] { R10442 += 1 };
  s2 -> s2 [0, 65535] { R10442 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R10442 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R10443 += 1, R10444 += 1 };
  s0 -> s1 [0, 65535] { R10444 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R10444 += 1, R76 += 1, R77 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10444 += 1 };
  s1 -> s1 [0, 65535] { R10444 += 1, R77 += 1, R78 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10444 += 1, R77 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R10444 += 1, R76 += 1, R77 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10444 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10446 += 1 };
  s0 -> s0 [0, 65535] { R10445 += 1, R10446 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10446 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R10447 += 1, R10448 += 1 };
  s0 -> s1 [0, 65535] { R10448 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R10448 += 1, R83 += 1, R84 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10448 += 1, R82 += 1, R83 += 1 };
  s1 -> s2 [0, 65535] { R10448 += 1, R83 += 1, R84 += 1 };
  s2 -> s3 [0, 65535] { R10448 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10448 += 1, R83 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R10448 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R10450 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10449 += 1, R10450 += 1 };
  s0 -> s2 [0, 65535] { R10450 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [108, 108] { R10450 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R10450 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R10450 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R10450 += 1 };
  s2 -> s1 [0, 107] { R10450 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10450 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [108, 108] { R10450 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R10450 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R10450 += 1, R88 += 1 };
  s3 -> s3 [0, 65535] { R10450 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10450 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R10450 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10450 += 1, R88 += 1 };
  s5 -> s5 [0, 65535] { R10450 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10450 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R10450 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R10450 += 1, R88 += 1 };
  s6 -> s6 [0, 65535] { R10450 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10450 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R10450 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R10450 += 1, R88 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10450 += 1 };
  s7 -> s8 [108, 108] { R10450 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R10450 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R10450 += 1, R88 += 1 };
  s8 -> s8 [0, 65535] { R10450 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10450 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R10450 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R10450 += 1, R88 += 1 };
  s9 -> s9 [0, 65535] { R10450 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10450 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R10450 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R10450 += 1, R88 += 1 };
  s10 -> s10 [0, 65535] { R10450 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10450 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R10450 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R10450 += 1, R88 += 1 };
  s11 -> s11 [0, 65535] { R10450 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R10450 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R10450 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R10450 += 1, R88 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10450 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10452 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R10451 += 1, R10452 += 1 };
  s0 -> s2 [0, 65535] { R10452 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R10452 += 1, R92 += 1, R93 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10452 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10452 += 1 };
  s2 -> s2 [0, 65535] { R10452 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10452 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R10453 += 1, R10454 += 1 };
  s0 -> s1 [0, 65535] { R10454 += 1, R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R10454 += 1, R98 += 1, R99 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10454 += 1 };
  s1 -> s1 [0, 65535] { R10454 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10454 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R10454 += 1, R98 += 1, R99 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10454 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10455 += 1, R10456 += 1 };
  s0 -> s1 [0, 65535] { R10456 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10456 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10458 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R10458 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R10457 += 1, R10458 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10458 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R10458 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535] { R10458 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10458 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535] { R10458 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10460 += 1 };
  s0 -> s0 [0, 65535] { R10459 += 1, R10460 += 1 };
  s1 -> s1 [0, 65535] { R10460 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R10462 += 1, R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R10462 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R10461 += 1, R10462 += 1 };
  s0 -> s3 [73, 73] { R10462 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R10462 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R10462 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R10462 += 1, R111 += 1, R112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10462 += 1 };
  s1 -> s3 [73, 73] { R10462 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R10462 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R10462 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R10462 += 1, R111 += 1, R112 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10462 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [73, 73] { R10462 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R10462 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R10462 += 1, R111 += 1, R112 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10462 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10462 += 1 };
  s4 -> s4 [0, 65535] { R10462 += 1, R111 += 1, R112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10462 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10485 += 1, R10486 += 1 };
  s0 -> s1 [0, 65535] { R10486 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10486 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R10488 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10487 += 1, R10488 += 1 };
  s0 -> s2 [65, 65] { R10488 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R10488 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R10488 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R10488 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10488 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R10488 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R10488 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R10488 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R10490 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10489 += 1, R10490 += 1 };
  s0 -> s2 [65, 65] { R10490 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R10490 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R10490 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R10490 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10490 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R10490 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R10490 += 1, R69 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10490 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10492 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10491 += 1, R10492 += 1 };
  s0 -> s2 [65, 65] { R10492 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R10492 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R10492 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R10492 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10492 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R10492 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R10492 += 1, R71 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10492 += 1, R71 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10494 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10493 += 1, R10494 += 1 };
  s0 -> s2 [65, 65] { R10494 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R10494 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R10494 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R10494 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10494 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R10494 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R10494 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10494 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10496 += 1 };
  s0 -> s0 [0, 65535] { R10495 += 1, R10496 += 1 };
  s0 -> s2 [65, 65] { R10496 += 1 };
  s0 -> s3 [65, 65] { R10496 += 1 };
  s0 -> s1 [66, 65535] { R10496 += 1 };
  s1 -> s1 [0, 64] { R10496 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10496 += 1 };
  s1 -> s3 [65, 65] { R10496 += 1 };
  s1 -> s1 [66, 65535] { R10496 += 1 };
  s2 -> s2 [0, 65535] { R10496 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10498 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R10497 += 1, R10498 += 1 };
  s0 -> s2 [65, 65] { R10498 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R10498 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R10498 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R10498 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10498 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R10498 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R10498 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10498 += 1, R79 += 1, R80 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R10500 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10499 += 1, R10500 += 1 };
  s0 -> s2 [65, 65] { R10500 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R10500 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R10500 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R10500 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10500 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R10500 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R10500 += 1, R85 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10500 += 1, R85 += 1, R86 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R10502 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10501 += 1, R10502 += 1 };
  s0 -> s2 [65, 65] { R10502 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R10502 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R10502 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R10502 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10502 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R10502 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R10502 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535] { R10502 += 1, R89 += 1, R90 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10504 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10503 += 1, R10504 += 1 };
  s0 -> s2 [65, 65] { R10504 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R10504 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R10504 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R10504 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10504 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R10504 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R10504 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R10504 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10506 += 1 };
  s0 -> s0 [0, 65535] { R10505 += 1, R10506 += 1 };
  s0 -> s2 [65, 65] { R10506 += 1 };
  s0 -> s3 [65, 65] { R10506 += 1 };
  s0 -> s1 [66, 65535] { R10506 += 1 };
  s1 -> s1 [0, 64] { R10506 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10506 += 1 };
  s1 -> s3 [65, 65] { R10506 += 1 };
  s1 -> s1 [66, 65535] { R10506 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10506 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10508 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R10507 += 1, R10508 += 1 };
  s0 -> s2 [65, 65] { R10508 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R10508 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R10508 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R10508 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10508 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R10508 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R10508 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10508 += 1, R101 += 1, R102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10510 += 1 };
  s0 -> s0 [0, 65535] { R10509 += 1, R10510 += 1 };
  s0 -> s2 [65, 65] { R10510 += 1 };
  s0 -> s3 [65, 65] { R10510 += 1 };
  s0 -> s1 [66, 65535] { R10510 += 1 };
  s1 -> s1 [0, 64] { R10510 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10510 += 1 };
  s1 -> s3 [65, 65] { R10510 += 1 };
  s1 -> s1 [66, 65535] { R10510 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10510 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10512 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R10511 += 1, R10512 += 1 };
  s0 -> s2 [65, 65] { R10512 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R10512 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R10512 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R10512 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10512 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R10512 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R10512 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R10512 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R10514 += 1 };
  s0 -> s0 [0, 65535] { R10513 += 1, R10514 += 1 };
  s0 -> s1 [45, 45] { R10514 += 1 };
  s0 -> s2 [46, 46] { R10514 += 1 };
  s0 -> s1 [48, 62] { R10514 += 1 };
  s0 -> s3 [65, 65] { R10514 += 1 };
  s0 -> s1 [66, 65535] { R10514 += 1 };
  s1 -> s1 [0, 43] { R10514 += 1 };
  s1 -> s1 [45, 45] { R10514 += 1 };
  s1 -> s2 [46, 46] { R10514 += 1 };
  s1 -> s1 [48, 62] { R10514 += 1 };
  s1 -> s3 [65, 65] { R10514 += 1 };
  s1 -> s1 [66, 65535] { R10514 += 1 };
  s2 -> s1 [0, 43] { R10514 += 1 };
  s2 -> s1 [45, 45] { R10514 += 1 };
  s2 -> s2 [46, 46] { R10514 += 1 };
  s2 -> s1 [48, 62] { R10514 += 1 };
  s2 -> s3 [65, 65] { R10514 += 1 };
  s2 -> s1 [66, 114] { R10514 += 1 };
  s2 -> s8 [115, 115] { R10514 += 1 };
  s2 -> s1 [116, 65535] { R10514 += 1 };
  s3 -> s3 [0, 43] { R10514 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10514 += 1 };
  s3 -> s4 [46, 46] { R10514 += 1 };
  s3 -> s3 [48, 62] { R10514 += 1 };
  s3 -> s3 [65, 65535] { R10514 += 1 };
  s4 -> s3 [0, 43] { R10514 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10514 += 1 };
  s4 -> s4 [46, 46] { R10514 += 1 };
  s4 -> s3 [48, 62] { R10514 += 1 };
  s4 -> s3 [65, 114] { R10514 += 1 };
  s4 -> s5 [115, 115] { R10514 += 1 };
  s4 -> s3 [116, 65535] { R10514 += 1 };
  s5 -> s3 [0, 43] { R10514 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10514 += 1 };
  s5 -> s4 [46, 46] { R10514 += 1 };
  s5 -> s3 [48, 62] { R10514 += 1 };
  s5 -> s3 [65, 110] { R10514 += 1 };
  s5 -> s6 [111, 111] { R10514 += 1 };
  s5 -> s3 [112, 65535] { R10514 += 1 };
  s6 -> s3 [0, 43] { R10514 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10514 += 1 };
  s6 -> s4 [46, 46] { R10514 += 1 };
  s6 -> s3 [48, 62] { R10514 += 1 };
  s6 -> s3 [65, 98] { R10514 += 1 };
  s6 -> s7 [99, 99] { R10514 += 1 };
  s6 -> s3 [100, 65535] { R10514 += 1 };
  s7 -> s3 [0, 43] { R10514 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10514 += 1 };
  s7 -> s4 [46, 46] { R10514 += 1 };
  s7 -> s3 [48, 62] { R10514 += 1 };
  s7 -> s3 [65, 106] { R10514 += 1 };
  s7 -> s3 [108, 65535] { R10514 += 1 };
  s8 -> s1 [0, 43] { R10514 += 1 };
  s8 -> s1 [45, 45] { R10514 += 1 };
  s8 -> s2 [46, 46] { R10514 += 1 };
  s8 -> s1 [48, 62] { R10514 += 1 };
  s8 -> s3 [65, 65] { R10514 += 1 };
  s8 -> s1 [66, 110] { R10514 += 1 };
  s8 -> s9 [111, 111] { R10514 += 1 };
  s8 -> s1 [112, 65535] { R10514 += 1 };
  s9 -> s1 [0, 43] { R10514 += 1 };
  s9 -> s1 [45, 45] { R10514 += 1 };
  s9 -> s2 [46, 46] { R10514 += 1 };
  s9 -> s1 [48, 62] { R10514 += 1 };
  s9 -> s3 [65, 65] { R10514 += 1 };
  s9 -> s1 [66, 98] { R10514 += 1 };
  s9 -> s10 [99, 99] { R10514 += 1 };
  s9 -> s1 [100, 65535] { R10514 += 1 };
  s10 -> s1 [0, 43] { R10514 += 1 };
  s10 -> s1 [45, 45] { R10514 += 1 };
  s10 -> s2 [46, 46] { R10514 += 1 };
  s10 -> s1 [48, 62] { R10514 += 1 };
  s10 -> s3 [65, 65] { R10514 += 1 };
  s10 -> s1 [66, 106] { R10514 += 1 };
  s10 -> s1 [108, 65535] { R10514 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10516 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10515 += 1, R10516 += 1 };
  s1 -> s1 [0, 65535] { R10516 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R10518 += 1 };
  s0 -> s2 [0, 65535] { R10518 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10517 += 1, R10518 += 1 };
  s0 -> s3 [58, 58] { R10518 += 1 };
  s0 -> s1 [59, 65535] { R10518 += 1 };
  s1 -> s1 [0, 57] { R10518 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10518 += 1 };
  s1 -> s1 [59, 65535] { R10518 += 1 };
  s2 -> s1 [0, 57] { R10518 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10518 += 1, R16 += 1 };
  s2 -> s3 [58, 58] { R10518 += 1 };
  s2 -> s1 [59, 65535] { R10518 += 1 };
  s3 -> s3 [0, 65535] { R10518 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10520 += 1 };
  s0 -> s0 [0, 65535] { R10519 += 1, R10520 += 1 };
  s0 -> s2 [0, 65535] { R10520 += 1, R17 += 1 };
  s0 -> s3 [65, 65] { R10520 += 1 };
  s0 -> s1 [66, 65535] { R10520 += 1 };
  s1 -> s1 [0, 64] { R10520 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10520 += 1 };
  s1 -> s1 [66, 65535] { R10520 += 1 };
  s2 -> s1 [0, 64] { R10520 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10520 += 1, R17 += 1 };
  s2 -> s3 [65, 65] { R10520 += 1 };
  s2 -> s1 [66, 65535] { R10520 += 1 };
  s3 -> s3 [0, 65535] { R10520 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R10522 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R10522 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10521 += 1, R10522 += 1 };
  s0 -> s3 [91, 91] { R10522 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R10522 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R10522 += 1 };
  s1 -> s1 [0, 65535] { R10522 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R10522 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R10522 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10522 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R10522 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R10522 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10522 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10524 += 1, R35 += 1, R36 += 1 };
  s0 -> s2 [0, 65535] { R10524 += 1, R36 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R10523 += 1, R10524 += 1 };
  s1 -> s1 [0, 65535] { R10524 += 1, R35 += 1, R36 += 1 };
  s1 -> s2 [0, 65535] { R10524 += 1, R36 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10524 += 1 };
  s2 -> s2 [0, 65535] { R10524 += 1, R36 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10524 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10526 += 1, R10412 += 1 };
  s0 -> s2 [0, 65535] { R10526 += 1, R10411 += 1, R10412 += 1 };
  s0 -> s0 [0, 65535] { R10525 += 1, R10526 += 1 };
  s0 -> s1 [66, 65535] { R10526 += 1, R10412 += 1 };
  s1 -> s1 [0, 64] { R10526 += 1, R10412 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10526 += 1 };
  s1 -> s1 [66, 65535] { R10526 += 1, R10412 += 1 };
  s2 -> s1 [0, 64] { R10526 += 1, R10412 += 1 };
  s2 -> s2 [0, 65535] { R10526 += 1, R10411 += 1, R10412 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10526 += 1, R10412 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R10527 += 1, R10528 += 1 };
  s0 -> s1 [0, 65535] { R10528 += 1, R10414 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R10528 += 1, R10413 += 1, R10414 += 1 };
  s1 -> s1 [0, 65535] { R10528 += 1, R10414 += 1, R29 += 1 };
  s1 -> s4 [0, 65535] { R10528 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10528 += 1, R10414 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10528 += 1, R10413 += 1, R10414 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10528 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10530 += 1, R10416 += 1 };
  s0 -> s0 [0, 65535] { R10529 += 1, R10530 += 1 };
  s0 -> s2 [0, 65535] { R10530 += 1, R10415 += 1, R10416 += 1 };
  s0 -> s1 [81, 65535] { R10530 += 1, R10416 += 1 };
  s1 -> s1 [0, 65] { R10530 += 1, R10416 += 1 };
  s1 -> s1 [0, 65535] { R10530 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R10530 += 1, R10416 += 1 };
  s2 -> s1 [0, 65] { R10530 += 1, R10416 += 1 };
  s2 -> s2 [0, 65535] { R10530 += 1, R10415 += 1, R10416 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R10530 += 1, R10416 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R10532 += 1, R10418 += 1, R494 += 1 };
  s0 -> s2 [0, 65535] { R10532 += 1, R10417 += 1, R10418 += 1 };
  s0 -> s0 [0, 65535] { R10531 += 1, R10532 += 1 };
  s1 -> s1 [0, 65535] { R10532 += 1, R10418 += 1, R494 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10532 += 1 };
  s2 -> s1 [0, 65535] { R10532 += 1, R10418 += 1, R494 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10532 += 1, R10417 += 1, R10418 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10532 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R10534 += 1, R10420 += 1 };
  s0 -> s2 [0, 65535] { R10534 += 1, R10420 += 1, R496 += 1 };
  s0 -> s0 [0, 65535] { R10533 += 1, R10534 += 1 };
  s0 -> s3 [0, 65535] { R10534 += 1, R10419 += 1, R10420 += 1 };
  s0 -> s1 [82, 65535] { R10534 += 1, R10420 += 1 };
  s1 -> s1 [0, 80] { R10534 += 1, R10420 += 1 };
  s1 -> s1 [0, 65535] { R10534 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R10534 += 1, R10420 += 1 };
  s2 -> s1 [0, 80] { R10534 += 1, R10420 += 1 };
  s2 -> s2 [0, 65535] { R10534 += 1, R10420 += 1, R496 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10534 += 1 };
  s2 -> s1 [82, 65535] { R10534 += 1, R10420 += 1 };
  s3 -> s1 [0, 80] { R10534 += 1, R10420 += 1 };
  s3 -> s2 [0, 65535] { R10534 += 1, R10420 += 1, R496 += 1 };
  s3 -> s3 [0, 65535] { R10534 += 1, R10419 += 1, R10420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R10534 += 1, R10420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10534 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R10536 += 1, R10422 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R10536 += 1, R10421 += 1, R10422 += 1 };
  s0 -> s3 [0, 65535] { R10536 += 1, R10422 += 1, R499 += 1, R500 += 1 };
  s0 -> s0 [0, 65535] { R10535 += 1, R10536 += 1 };
  s0 -> s1 [82, 65535] { R10536 += 1, R10422 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R10536 += 1, R10422 += 1, R500 += 1 };
  s1 -> s4 [0, 65535] { R10536 += 1 };
  s1 -> s1 [0, 65535] { R10536 += 1, R10422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R10536 += 1, R10422 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R10536 += 1, R10422 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R10536 += 1, R10421 += 1, R10422 += 1 };
  s2 -> s3 [0, 65535] { R10536 += 1, R10422 += 1, R499 += 1, R500 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R10536 += 1, R10422 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R10536 += 1, R10422 += 1, R500 += 1 };
  s3 -> s3 [0, 65535] { R10536 += 1, R10422 += 1, R499 += 1, R500 += 1 };
  s3 -> s4 [0, 65535] { R10536 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R10536 += 1, R10422 += 1, R500 += 1 };
  s4 -> s4 [0, 65535] { R10536 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10538 += 1, R10423 += 1, R10424 += 1 };
  s0 -> s2 [0, 65535] { R10538 += 1, R10424 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [0, 65535] { R10538 += 1, R10424 += 1, R505 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R10537 += 1, R10538 += 1 };
  s1 -> s1 [0, 65535] { R10538 += 1, R10423 += 1, R10424 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10538 += 1, R10424 += 1, R504 += 1, R505 += 1 };
  s1 -> s3 [0, 65535] { R10538 += 1, R10424 += 1, R505 += 1, R506 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10538 += 1 };
  s2 -> s2 [0, 65535] { R10538 += 1, R10424 += 1, R504 += 1, R505 += 1 };
  s2 -> s3 [0, 65535] { R10538 += 1, R10424 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535] { R10538 += 1, R10424 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10538 += 1 };
  s3 -> s3 [0, 65535] { R10538 += 1, R10424 += 1, R505 += 1, R506 += 1 };
  s4 -> s4 [0, 65535] { R10538 += 1, R10424 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10538 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10538 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R10540 += 1, R10426 += 1, R8056 += 1 };
  s0 -> s1 [0, 65535] { R10540 += 1, R10426 += 1 };
  s0 -> s2 [0, 65535] { R10540 += 1, R10425 += 1, R10426 += 1 };
  s0 -> s0 [0, 65535] { R10539 += 1, R10540 += 1 };
  s0 -> s1 [91, 65535] { R10540 += 1, R10426 += 1, R8056 += 1 };
  s1 -> s1 [0, 81] { R10540 += 1, R10426 += 1, R8056 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10540 += 1 };
  s1 -> s1 [0, 65535] { R10540 += 1, R10426 += 1 };
  s1 -> s1 [91, 65535] { R10540 += 1, R10426 += 1, R8056 += 1 };
  s2 -> s1 [0, 81] { R10540 += 1, R10426 += 1, R8056 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10540 += 1, R10426 += 1 };
  s2 -> s2 [0, 65535] { R10540 += 1, R10425 += 1, R10426 += 1 };
  s2 -> s1 [91, 65535] { R10540 += 1, R10426 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10540 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R10542 += 1, R10427 += 1, R10428 += 1 };
  s0 -> s2 [0, 65535] { R10542 += 1, R10428 += 1, R8060 += 1, R8061 += 1 };
  s0 -> s3 [0, 65535] { R10542 += 1, R10428 += 1, R8061 += 1, R8062 += 1 };
  s0 -> s0 [0, 65535] { R10541 += 1, R10542 += 1 };
  s1 -> s1 [0, 65535] { R10542 += 1, R10427 += 1, R10428 += 1 };
  s1 -> s2 [0, 65535] { R10542 += 1, R10428 += 1, R8060 += 1, R8061 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10542 += 1, R10428 += 1, R8061 += 1, R8062 += 1 };
  s2 -> s2 [0, 65535] { R10542 += 1, R10428 += 1, R8060 += 1, R8061 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10542 += 1, R10428 += 1, R8061 += 1, R8062 += 1 };
  s2 -> s6 [0, 65535] { R10542 += 1 };
  s3 -> s4 [0, 65535] { R10542 += 1, R10428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10542 += 1, R10428 += 1, R8061 += 1, R8062 += 1 };
  s3 -> s6 [0, 65535] { R10542 += 1 };
  s4 -> s4 [0, 65535] { R10542 += 1, R10428 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10542 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10542 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R10544 += 1, R10430 += 1 };
  s0 -> s0 [0, 65535] { R10543 += 1, R10544 += 1 };
  s0 -> s2 [0, 65535] { R10544 += 1, R10429 += 1, R10430 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10544 += 1, R10430 += 1 };
  s1 -> s4 [0, 65535] { R10544 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10544 += 1, R10430 += 1 };
  s2 -> s2 [0, 65535] { R10544 += 1, R10429 += 1, R10430 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10544 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10546 += 1, R10431 += 1, R10432 += 1 };
  s0 -> s2 [0, 65535] { R10546 += 1, R10432 += 1 };
  s0 -> s0 [0, 65535] { R10545 += 1, R10546 += 1 };
  s1 -> s1 [0, 65535] { R10546 += 1, R10431 += 1, R10432 += 1 };
  s1 -> s2 [0, 65535] { R10546 += 1, R10432 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10546 += 1, R10432 += 1 };
  s2 -> s3 [0, 65535] { R10546 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10546 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R10548 += 1, R10433 += 1, R10434 += 1 };
  s0 -> s2 [0, 65535] { R10548 += 1, R10434 += 1 };
  s0 -> s0 [0, 65535] { R10547 += 1, R10548 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10548 += 1, R10433 += 1, R10434 += 1 };
  s1 -> s2 [0, 65535] { R10548 += 1, R10434 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10548 += 1 };
  s2 -> s2 [0, 65535] { R10548 += 1, R10434 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10548 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 65535] { R10550 += 1, R10464 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R10550 += 1, R10463 += 1, R10464 += 1 };
  s0 -> s0 [0, 65535] { R10549 += 1, R10550 += 1 };
  s1 -> s1 [0, 65535] { R10550 += 1, R10464 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10550 += 1 };
  s2 -> s1 [0, 65535] { R10550 += 1, R10464 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10550 += 1, R10463 += 1, R10464 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10550 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10552 += 1, R10466 += 1 };
  s0 -> s0 [0, 65535] { R10551 += 1, R10552 += 1 };
  s0 -> s2 [0, 65535] { R10552 += 1, R10465 += 1, R10466 += 1 };
  s0 -> s3 [65, 65] { R10552 += 1, R10466 += 1 };
  s0 -> s4 [65, 65] { R10552 += 1, R10466 += 1 };
  s0 -> s5 [81, 81] { R10552 += 1, R10466 += 1 };
  s0 -> s1 [82, 65535] { R10552 += 1, R10466 += 1 };
  s1 -> s1 [0, 64] { R10552 += 1, R10466 += 1 };
  s1 -> s3 [65, 65] { R10552 += 1, R10466 += 1 };
  s1 -> s4 [65, 65] { R10552 += 1, R10466 += 1 };
  s1 -> s5 [81, 81] { R10552 += 1, R10466 += 1 };
  s1 -> s1 [82, 65535] { R10552 += 1, R10466 += 1 };
  s2 -> s1 [0, 64] { R10552 += 1, R10466 += 1 };
  s2 -> s2 [0, 65535] { R10552 += 1, R10465 += 1, R10466 += 1 };
  s2 -> s3 [65, 65] { R10552 += 1, R10466 += 1 };
  s2 -> s4 [65, 65] { R10552 += 1, R10466 += 1 };
  s2 -> s5 [81, 81] { R10552 += 1, R10466 += 1 };
  s2 -> s1 [82, 65535] { R10552 += 1, R10466 += 1 };
  s3 -> s3 [0, 65] { R10552 += 1, R10466 += 1 };
  s3 -> s7 [81, 81] { R10552 += 1, R10466 += 1 };
  s3 -> s3 [82, 65535] { R10552 += 1, R10466 += 1 };
  s5 -> s5 [0, 64] { R10552 += 1, R10466 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10552 += 1 };
  s5 -> s7 [65, 65] { R10552 += 1, R10466 += 1 };
  s5 -> s8 [65, 65] { R10552 += 1, R10466 += 1 };
  s5 -> s5 [81, 65535] { R10552 += 1, R10466 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10552 += 1, R10466 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10552 += 1 };
  s7 -> s7 [81, 65535] { R10552 += 1, R10466 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10552 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10554 += 1, R10468 += 1, R493 += 1 };
  s0 -> s0 [0, 65535] { R10553 += 1, R10554 += 1 };
  s0 -> s2 [0, 65535] { R10554 += 1, R10467 += 1, R10468 += 1 };
  s0 -> s3 [65, 65] { R10554 += 1, R10468 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R10554 += 1, R10468 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R10554 += 1, R10468 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R10554 += 1, R10468 += 1, R493 += 1 };
  s1 -> s1 [0, 65535] { R10554 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10554 += 1, R10468 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R10554 += 1, R10468 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R10554 += 1, R10468 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R10554 += 1, R10468 += 1, R493 += 1 };
  s2 -> s2 [0, 65535] { R10554 += 1, R10467 += 1, R10468 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10554 += 1, R10468 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R10554 += 1, R10468 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R10554 += 1, R10468 += 1, R493 += 1 };
  s3 -> s3 [0, 65535] { R10554 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10554 += 1 };
  s4 -> s4 [0, 65535] { R10554 += 1, R10468 += 1, R493 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10554 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10556 += 1, R10470 += 1, R495 += 1 };
  s0 -> s2 [0, 65535] { R10556 += 1, R10469 += 1, R10470 += 1 };
  s0 -> s0 [0, 65535] { R10555 += 1, R10556 += 1 };
  s0 -> s3 [65, 65] { R10556 += 1, R10470 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R10556 += 1, R10470 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R10556 += 1, R10470 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R10556 += 1, R10470 += 1, R495 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10556 += 1 };
  s1 -> s3 [65, 65] { R10556 += 1, R10470 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R10556 += 1, R10470 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R10556 += 1, R10470 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R10556 += 1, R10470 += 1, R495 += 1 };
  s2 -> s2 [0, 65535] { R10556 += 1, R10469 += 1, R10470 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10556 += 1, R10470 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R10556 += 1, R10470 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R10556 += 1, R10470 += 1, R495 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10556 += 1, R10470 += 1, R495 += 1 };
  s3 -> s6 [0, 65535] { R10556 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10556 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10556 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s0 -> s0 [0, 65535] { R10557 += 1, R10558 += 1 };
  s0 -> s2 [0, 65535] { R10558 += 1, R10471 += 1, R10472 += 1 };
  s0 -> s3 [65, 65] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 65535] { R10558 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10558 += 1, R10471 += 1, R10472 += 1 };
  s2 -> s3 [65, 65] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s3 -> s3 [0, 65535] { R10558 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10558 += 1 };
  s4 -> s4 [0, 65535] { R10558 += 1, R10472 += 1, R497 += 1, R498 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10558 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s0 -> s2 [0, 65535] { R10560 += 1, R10473 += 1, R10474 += 1 };
  s0 -> s0 [0, 65535] { R10559 += 1, R10560 += 1 };
  s0 -> s3 [65, 65] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10560 += 1 };
  s1 -> s3 [65, 65] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10560 += 1, R10473 += 1, R10474 += 1 };
  s2 -> s3 [65, 65] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10560 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10560 += 1 };
  s4 -> s4 [0, 65535] { R10560 += 1, R10474 += 1, R501 += 1, R502 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10560 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R10562 += 1, R10475 += 1, R10476 += 1 };
  s0 -> s0 [0, 65535] { R10561 += 1, R10562 += 1 };
  s0 -> s4 [65, 65] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s0 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s0 -> s7 [65, 65] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s0 -> s1 [66, 65535] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [91, 107] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s0 -> s8 [108, 108] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s0 -> s2 [109, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s1 [0, 64] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s4 [65, 65] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s7 [65, 65] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s1 [66, 65535] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s2 [91, 107] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s8 [108, 108] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s1 -> s2 [109, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s2 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s2 -> s2 [0, 65535] { R10562 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s5 [65, 65] { R10562 += 1, R10476 += 1 };
  s2 -> s6 [65, 65] { R10562 += 1, R10476 += 1 };
  s2 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s2 -> s2 [66, 65535] { R10562 += 1, R10476 += 1 };
  s2 -> s2 [91, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s1 [0, 64] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R10562 += 1, R10475 += 1, R10476 += 1 };
  s3 -> s4 [65, 65] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s7 [65, 65] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s1 [66, 65535] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s2 [91, 107] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s8 [108, 108] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s3 -> s2 [109, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s5 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s5 -> s5 [0, 65535] { R10562 += 1, R10476 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s35 [0, 65535] { R10562 += 1 };
  s5 -> s5 [91, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R10562 += 1 };
  s7 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s7 -> s7 [0, 65535] { R10562 += 1, R10476 += 1, R8053 += 1, R8054 += 1 };
  s7 -> s5 [91, 107] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s7 -> s10 [108, 108] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s7 -> s5 [109, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s8 [0, 64] { R10562 += 1, R10476 += 1 };
  s8 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s9 [65, 65] { R10562 += 1, R10476 += 1 };
  s8 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s10 [65, 65] { R10562 += 1, R10476 += 1 };
  s8 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s8 [66, 65535] { R10562 += 1, R10476 += 1 };
  s8 -> s2 [91, 110] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s11 [111, 111] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s8 -> s2 [112, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s10 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s10 -> s10 [0, 65535] { R10562 += 1, R10476 += 1 };
  s10 -> s5 [91, 110] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s10 -> s13 [111, 111] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s10 -> s5 [112, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s11 [0, 64] { R10562 += 1, R10476 += 1 };
  s11 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s12 [65, 65] { R10562 += 1, R10476 += 1 };
  s11 -> s13 [65, 65] { R10562 += 1, R10476 += 1 };
  s11 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s11 [66, 65535] { R10562 += 1, R10476 += 1 };
  s11 -> s2 [91, 98] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s14 [99, 99] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s11 -> s2 [100, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s13 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s13 -> s13 [0, 65535] { R10562 += 1, R10476 += 1 };
  s13 -> s5 [91, 98] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s13 -> s18 [99, 99] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s13 -> s5 [100, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s14 [0, 64] { R10562 += 1, R10476 += 1 };
  s14 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s15 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s16 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s17 [65, 65] { R10562 += 1, R10476 += 1 };
  s14 -> s18 [65, 65] { R10562 += 1, R10476 += 1 };
  s14 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s14 [66, 65535] { R10562 += 1, R10476 += 1 };
  s14 -> s2 [91, 96] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s19 [97, 97] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s14 -> s2 [98, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s15 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s15 -> s15 [0, 65535] { R10562 += 1, R10476 += 1 };
  s15 -> s5 [91, 107] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s15 -> s22 [108, 108] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s15 -> s5 [109, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s18 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s18 -> s18 [0, 65535] { R10562 += 1, R10476 += 1 };
  s18 -> s5 [91, 96] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s18 -> s15 [97, 97] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s18 -> s5 [98, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s19 [0, 64] { R10562 += 1, R10476 += 1 };
  s19 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s15 [65, 65] { R10562 += 1, R10476 += 1 };
  s19 -> s16 [65, 65] { R10562 += 1, R10476 += 1 };
  s19 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s19 [66, 65535] { R10562 += 1, R10476 += 1 };
  s19 -> s2 [91, 107] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s20 [108, 108] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s19 -> s2 [109, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s20 [0, 64] { R10562 += 1, R10476 += 1 };
  s20 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s21 [65, 65] { R10562 += 1, R10476 += 1 };
  s20 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s22 [65, 65] { R10562 += 1, R10476 += 1 };
  s20 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s20 [66, 65535] { R10562 += 1, R10476 += 1 };
  s20 -> s2 [91, 103] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s23 [104, 104] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s20 -> s2 [105, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s22 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s22 -> s22 [0, 65535] { R10562 += 1, R10476 += 1 };
  s22 -> s5 [91, 103] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s22 -> s24 [104, 104] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s22 -> s5 [105, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s23 [0, 64] { R10562 += 1, R10476 += 1 };
  s23 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s24 [65, 65] { R10562 += 1, R10476 += 1 };
  s23 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s25 [65, 65] { R10562 += 1, R10476 += 1 };
  s23 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s23 [66, 65535] { R10562 += 1, R10476 += 1 };
  s23 -> s2 [91, 110] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s26 [111, 111] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s23 -> s2 [112, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s24 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s24 -> s24 [0, 65535] { R10562 += 1, R10476 += 1 };
  s24 -> s5 [91, 110] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s24 -> s27 [111, 111] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s24 -> s5 [112, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s26 [0, 64] { R10562 += 1, R10476 += 1 };
  s26 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s27 [65, 65] { R10562 += 1, R10476 += 1 };
  s26 -> s28 [65, 65] { R10562 += 1, R10476 += 1 };
  s26 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s26 [66, 65535] { R10562 += 1, R10476 += 1 };
  s26 -> s2 [91, 114] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s29 [115, 115] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s26 -> s2 [116, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s27 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s27 -> s27 [0, 65535] { R10562 += 1, R10476 += 1 };
  s27 -> s5 [91, 114] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s27 -> s30 [115, 115] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s27 -> s5 [116, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s29 [0, 64] { R10562 += 1, R10476 += 1 };
  s29 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s30 [65, 65] { R10562 += 1, R10476 += 1 };
  s29 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s31 [65, 65] { R10562 += 1, R10476 += 1 };
  s29 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s29 [66, 65535] { R10562 += 1, R10476 += 1 };
  s29 -> s2 [91, 115] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s32 [116, 116] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s29 -> s2 [117, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s30 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s30 -> s30 [0, 65535] { R10562 += 1, R10476 += 1 };
  s30 -> s5 [91, 115] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s30 -> s33 [116, 116] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s30 -> s5 [117, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s32 -> s2 [0, 64] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s32 -> s5 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s32 -> s6 [65, 65] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s32 -> s2 [66, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s32 -> s2 [91, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s33 -> s5 [0, 81] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s33 -> s5 [91, 65535] { R10562 += 1, R10476 += 1, R8054 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10562 += 1 };
  accepting s34, s5, s2, s6, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s2 [0, 65535] { R10564 += 1, R10477 += 1, R10478 += 1 };
  s0 -> s0 [0, 65535] { R10563 += 1, R10564 += 1 };
  s0 -> s3 [65, 65] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s4 [65, 65] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s1 [66, 65535] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [0, 64] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [0, 65535] { R10564 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s4 [65, 65] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s1 -> s1 [66, 65535] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s1 [0, 64] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s2 [0, 65535] { R10564 += 1, R10477 += 1, R10478 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s4 [65, 65] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s2 -> s1 [66, 65535] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s3 -> s3 [0, 65535] { R10564 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10564 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10564 += 1, R10478 += 1, R8057 += 1, R8058 += 1 };
  s5 -> s5 [0, 65535] { R10564 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s0 -> s2 [0, 64] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s0 -> s0 [0, 65535] { R10565 += 1, R10566 += 1 };
  s0 -> s3 [0, 65535] { R10566 += 1, R10479 += 1, R10480 += 1 };
  s0 -> s4 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s0 -> s5 [65, 65] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s0 -> s6 [65, 65] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s0 -> s7 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s0 -> s1 [66, 65535] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s0 -> s2 [66, 65535] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s1 -> s1 [0, 64] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s1 -> s11 [0, 64] { R10566 += 1, R10480 += 1 };
  s1 -> s4 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s1 -> s8 [65, 65] { R10566 += 1, R10480 += 1 };
  s1 -> s12 [65, 65] { R10566 += 1, R10480 += 1 };
  s1 -> s7 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s1 -> s1 [66, 65535] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s1 -> s11 [66, 65535] { R10566 += 1, R10480 += 1 };
  s2 -> s1 [0, 64] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s2 -> s2 [0, 64] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s2 -> s4 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s2 -> s5 [65, 65] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s2 -> s6 [65, 65] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s2 -> s7 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s2 -> s1 [66, 65535] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s2 -> s2 [66, 65535] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s3 -> s1 [0, 64] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s3 -> s2 [0, 64] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s3 -> s3 [0, 65535] { R10566 += 1, R10479 += 1, R10480 += 1 };
  s3 -> s4 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s3 -> s5 [65, 65] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s3 -> s6 [65, 65] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s3 -> s7 [65, 65] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s3 -> s1 [66, 65535] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s3 -> s2 [66, 65535] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s6 -> s6 [0, 65535] { R10566 += 1, R10480 += 1, R9735 += 1, R9736 += 1 };
  s6 -> s7 [0, 65535] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s7 -> s8 [0, 65535] { R10566 += 1, R10480 += 1 };
  s7 -> s7 [0, 65535] { R10566 += 1, R10480 += 1, R9736 += 1, R9737 += 1 };
  s8 -> s9 [0, 65535] { R10566 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10566 += 1, R10480 += 1 };
  s9 -> s9 [0, 65535] { R10566 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10566 += 1, R10480 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10566 += 1 };
  s11 -> s8 [65, 65] { R10566 += 1, R10480 += 1 };
  s11 -> s12 [65, 65] { R10566 += 1, R10480 += 1 };
  s11 -> s11 [66, 65535] { R10566 += 1, R10480 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10566 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10568 += 1, R10482 += 1 };
  s0 -> s2 [0, 65535] { R10568 += 1, R10481 += 1, R10482 += 1 };
  s0 -> s0 [0, 65535] { R10567 += 1, R10568 += 1 };
  s0 -> s3 [65, 65] { R10568 += 1, R10482 += 1 };
  s0 -> s4 [65, 65] { R10568 += 1, R10482 += 1 };
  s0 -> s1 [66, 65535] { R10568 += 1, R10482 += 1 };
  s1 -> s1 [0, 64] { R10568 += 1, R10482 += 1 };
  s1 -> s1 [0, 65535] { R10568 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10568 += 1, R10482 += 1 };
  s1 -> s4 [65, 65] { R10568 += 1, R10482 += 1 };
  s1 -> s1 [66, 65535] { R10568 += 1, R10482 += 1 };
  s2 -> s1 [0, 64] { R10568 += 1, R10482 += 1 };
  s2 -> s2 [0, 65535] { R10568 += 1, R10481 += 1, R10482 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10568 += 1, R10482 += 1 };
  s2 -> s4 [65, 65] { R10568 += 1, R10482 += 1 };
  s2 -> s1 [66, 65535] { R10568 += 1, R10482 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10568 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10568 += 1 };
  s4 -> s4 [0, 65535] { R10568 += 1, R10482 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10568 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s0 -> s2 [0, 64] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s0 -> s3 [0, 65535] { R10570 += 1, R10483 += 1, R10484 += 1 };
  s0 -> s0 [0, 65535] { R10569 += 1, R10570 += 1 };
  s0 -> s4 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s0 -> s5 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s0 -> s6 [65, 65] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s0 -> s7 [65, 65] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s0 -> s1 [66, 80] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s0 -> s2 [66, 65535] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s0 -> s8 [81, 81] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s0 -> s1 [82, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s1 -> s1 [0, 64] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s1 -> s4 [65, 65] { R10570 += 1, R10484 += 1 };
  s1 -> s5 [65, 65] { R10570 += 1, R10484 += 1 };
  s1 -> s1 [66, 80] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s1 -> s1 [66, 65535] { R10570 += 1, R10484 += 1 };
  s1 -> s8 [81, 81] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s1 -> s1 [82, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s2 -> s1 [0, 64] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s2 -> s2 [0, 64] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s2 -> s4 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s2 -> s5 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s2 -> s6 [65, 65] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s2 -> s7 [65, 65] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s2 -> s1 [66, 80] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s2 -> s2 [66, 65535] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s2 -> s8 [81, 81] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s2 -> s1 [82, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s3 -> s1 [0, 64] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s3 -> s2 [0, 64] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s3 -> s3 [0, 65535] { R10570 += 1, R10483 += 1, R10484 += 1 };
  s3 -> s4 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s3 -> s5 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s3 -> s6 [65, 65] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s3 -> s7 [65, 65] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s3 -> s1 [66, 80] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s3 -> s2 [66, 65535] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s3 -> s8 [81, 81] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s3 -> s1 [82, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s4 -> s4 [0, 80] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s4 -> s4 [0, 65535] { R10570 += 1, R10484 += 1 };
  s4 -> s11 [81, 81] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s4 -> s4 [82, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s6 -> s4 [0, 80] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s6 -> s6 [0, 65535] { R10570 += 1, R10484 += 1, R10405 += 1, R10406 += 1 };
  s6 -> s11 [81, 81] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s6 -> s4 [82, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s8 -> s9 [0, 64] { R10570 += 1, R10484 += 1 };
  s8 -> s8 [0, 64] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s8 -> s10 [65, 65] { R10570 += 1, R10484 += 1 };
  s8 -> s11 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s8 -> s12 [65, 65] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s8 -> s13 [65, 65] { R10570 += 1, R10484 += 1 };
  s8 -> s9 [66, 65535] { R10570 += 1, R10484 += 1 };
  s8 -> s8 [66, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s9 -> s9 [0, 64] { R10570 += 1, R10484 += 1 };
  s9 -> s9 [0, 65535] { R10570 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s10 [65, 65] { R10570 += 1, R10484 += 1 };
  s9 -> s13 [65, 65] { R10570 += 1, R10484 += 1 };
  s9 -> s9 [66, 65535] { R10570 += 1, R10484 += 1 };
  s10 -> s10 [0, 65535] { R10570 += 1, R10484 += 1 };
  s10 -> s15 [0, 65535] { R10570 += 1 };
  s10 -> s14 [0, 65535];
  s11 -> s10 [0, 65535] { R10570 += 1, R10484 += 1 };
  s11 -> s11 [0, 65535] { R10570 += 1, R10484 += 1, R10406 += 1, R10407 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R10570 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R10570 += 1 };
  s15 -> s14 [0, 65535];
  accepting s13, s9, s14, s15, s10;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R10434 && R5 = R10570 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R10411 = 0 && R10412 = R10434 && R10413 = 0 && R10414 = R10434 && R10415 = 0 && R10416 = R10434 && R10417 = 0 && R10418 = R10434 && R10419 = 0 && R10420 = R10434 && R10421 = 0 && R10422 = R10434 && R10423 = 0 && R10424 = R10434 && R10425 = 0 && R10426 = R10434 && R10427 = 0 && R10428 = R10434 && R10429 = 0 && R10430 = R10434 && R10431 = 0 && R10432 = R10434 && R10433 = 0 && R10435 = 0 && R10436 = R10570 && R10437 = 0 && R10438 = R10570 && R10439 = 0 && R10440 = R10570 && R10441 = 0 && R10442 = R10570 && R10443 = 0 && R10444 = R10570 && R10445 = 0 && R10446 = R10570 && R10447 = 0 && R10448 = R10570 && R10449 = 0 && R10450 = R10570 && R10451 = 0 && R10452 = R10570 && R10453 = 0 && R10454 = R10570 && R10455 = 0 && R10456 = R10570 && R10457 = 0 && R10458 = R10570 && R10459 = 0 && R10460 = R10570 && R10461 = 0 && R10462 = R10570 && R10465 = 0 && R10466 = 0 && R10475 = 0 && R10476 = 0 && R10479 = 0 && R10480 = 0 && R10483 = 0 && R10484 = 0 && R10513 = 10 && R10514 = R10570 && R10515 = 10 && R10516 = R10570 && R10517 = 10 && R10518 = R10570 && R10519 = 10 && R10520 = R10570 && R10521 = 10 && R10522 = R10570 && R10523 = 10 && R10524 = R10570 && R10525 = 10 && R10526 = R10570 && R10527 = 10 && R10528 = R10570 && R10529 = 10 && R10530 = R10570 && R10531 = 10 && R10532 = R10570 && R10533 = 10 && R10534 = R10570 && R10535 = 10 && R10536 = R10570 && R10537 = 10 && R10538 = R10570 && R10539 = 10 && R10540 = R10570 && R10541 = 10 && R10542 = R10570 && R10543 = 10 && R10544 = R10570 && R10545 = 10 && R10546 = R10570 && R10547 = 10 && R10548 = R10570 && R10549 = 10 && R10550 = R10570 && R10551 = 10 && R10552 = R10570 && R10553 = 10 && R10554 = R10570 && R10555 = 10 && R10556 = R10570 && R10557 = 10 && R10558 = R10570 && R10559 = 10 && R10560 = R10570 && R10561 = 10 && R10562 = R10570 && R10563 = 10 && R10564 = R10570 && R10565 = 10 && R10566 = R10570 && R10567 = 10 && R10568 = R10570 && R10569 = 10 && R94 + R91 + R112 + R109 != 0 && R8062 + R8059 + R10410 + R10407 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R10434 && 9 < R10570 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8055 + R8053 = 0 && R8056 + R8054 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8060 + R8057 = 0 && R8061 + R8058 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R8055 + R8053 != 0 || R494 + R493 + -1*R8056 + -1*R8054 = 0 || R494 + R493 < 1) && (R8060 + R8057 != 0 || R494 + R493 + -1*R8061 + -1*R8058 = 0 || R494 + R493 < 1) && (R30 = 0 || (R10463 = 0 && R10464 = 0)) && (R30 = 0 || (R10467 = 0 && R10468 = 0)) && (R30 = 0 || (R10469 = 0 && R10470 = 0)) && (R30 = 0 || (R10471 = 0 && R10472 = 0)) && (R30 = 0 || (R10473 = 0 && R10474 = 0)) && (R30 = 0 || (R10477 = 0 && R10478 = 0)) && (R30 = 0 || (R10481 = 0 && R10482 = 0)) && (R32 = 0 || (R10485 = 0 && R10486 = 0)) && (R32 = 0 || (R10487 = 0 && R10488 = 0)) && (R32 = 0 || (R10489 = 0 && R10490 = 0)) && (R32 = 0 || (R10491 = 0 && R10492 = 0)) && (R32 = 0 || (R10493 = 0 && R10494 = 0)) && (R32 = 0 || (R10495 = 0 && R10496 = 0)) && (R32 = 0 || (R10497 = 0 && R10498 = 0)) && (R32 = 0 || (R10499 = 0 && R10500 = 0)) && (R32 = 0 || (R10501 = 0 && R10502 = 0)) && (R32 = 0 || (R10503 = 0 && R10504 = 0)) && (R32 = 0 || (R10505 = 0 && R10506 = 0)) && (R32 = 0 || (R10507 = 0 && R10508 = 0)) && (R32 = 0 || (R10509 = 0 && R10510 = 0)) && (R32 = 0 || (R10511 = 0 && R10512 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R8055 + R8053 = 0 || R494 + R493 < 1) && (R8060 + R8057 = 0 || R494 + R493 < 1) && (R9740 + R9737 = 0 || (R9738 + R9735 = 0 && R9739 + R9736 = 0)) && (R9740 + R9737 = 0 || (R10408 + R10405 = 0 && R10409 + R10406 = 0));
// End of Parikh automata intersection problem
