// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R10571, R10572, R10573, R10574, R10575, R10576, R10577, R10578, R10579, R10580, R10581, R10582, R106, R107, R10749, R10750, R10751, R10752, R10753, R10754, R10755, R10756, R10757, R10758, R10759, R10760, R10761, R10762, R10763, R10764, R10765, R10766, R10767, R10768, R10769, R10770, R10771, R10772, R10773, R10774, R10775, R10776, R10777, R10778, R10779, R10780, R10781, R10782, R10783, R10784, R10785, R10786, R10787, R10788, R10789, R10790, R10791, R10792, R10793, R10794, R10795, R10796, R10797, R10798, R10799, R108, R10800, R10801, R10802, R10803, R10804, R10805, R10806, R10807, R10808, R10809, R10810, R10811, R10812, R10813, R10814, R10815, R10816, R10817, R10818, R10819, R10820, R10821, R10822, R10823, R10824, R10825, R10826, R10827, R10828, R10829, R10830, R10831, R10832, R10833, R10834, R10835, R10836, R10837, R10838, R10839, R10840, R10841, R10842, R10843, R10844, R10845, R10846, R10847, R10848, R10849, R10850, R10851, R10852, R10853, R10854, R10855, R10856, R10857, R10858, R10859, R10860, R10861, R10862, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10871, R10872, R10873, R10874, R10875, R10876, R10877, R10878, R10879, R10880, R10881, R10882, R10883, R10884, R10885, R10886, R10887, R10888, R10889, R10890, R10891, R10892, R10893, R10894, R10895, R10896, R10897, R10898, R10899, R109, R10900, R10901, R10902, R10903, R10904, R10905, R10906, R10907, R10908, R10909, R10910, R10911, R10912, R10913, R10914, R110, R111, R112, R16, R17, R20, R29, R30, R31, R32, R33, R34, R35, R36, R4, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R6, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R8053, R8054, R8055, R8056, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R20 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R10780 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R10779 += 1, R10780 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10780 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R10781 += 1, R10782 += 1 };
  s0 -> s1 [0, 65535] { R10782 += 1, R68 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10782 += 1, R68 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 88] { R10784 += 1 };
  s0 -> s0 [0, 65535] { R10783 += 1, R10784 += 1 };
  s0 -> s2 [0, 65535] { R10784 += 1, R70 += 1 };
  s0 -> s1 [90, 65535] { R10784 += 1 };
  s1 -> s1 [0, 88] { R10784 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R10784 += 1 };
  s2 -> s1 [0, 88] { R10784 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10784 += 1, R70 += 1 };
  s2 -> s1 [90, 65535] { R10784 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 72] { R10786 += 1 };
  s0 -> s0 [0, 65535] { R10785 += 1, R10786 += 1 };
  s0 -> s2 [0, 65535] { R10786 += 1, R72 += 1 };
  s0 -> s1 [74, 65535] { R10786 += 1 };
  s1 -> s1 [0, 72] { R10786 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R10786 += 1 };
  s2 -> s1 [0, 72] { R10786 += 1 };
  s2 -> s2 [0, 65535] { R10786 += 1, R72 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R10786 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R10787 += 1, R10788 += 1 };
  s0 -> s1 [0, 65535] { R10788 += 1, R76 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R10788 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R10788 += 1, R76 += 1, R77 += 1 };
  s1 -> s2 [0, 65535] { R10788 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10788 += 1 };
  s2 -> s2 [0, 65535] { R10788 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10788 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10790 += 1 };
  s0 -> s0 [0, 65535] { R10789 += 1, R10790 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10790 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R10791 += 1, R10792 += 1 };
  s0 -> s1 [0, 65535] { R10792 += 1, R83 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10792 += 1, R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R10792 += 1, R83 += 1, R84 += 1 };
  s1 -> s4 [0, 65535] { R10792 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10792 += 1, R83 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10792 += 1, R82 += 1, R83 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10792 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 107] { R10794 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R10793 += 1, R10794 += 1 };
  s0 -> s2 [0, 65535] { R10794 += 1, R87 += 1, R88 += 1 };
  s0 -> s3 [108, 108] { R10794 += 1, R88 += 1 };
  s0 -> s1 [109, 65535] { R10794 += 1, R88 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10794 += 1, R88 += 1 };
  s1 -> s13 [0, 65535] { R10794 += 1 };
  s2 -> s1 [0, 107] { R10794 += 1, R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10794 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [108, 108] { R10794 += 1, R88 += 1 };
  s2 -> s1 [109, 65535] { R10794 += 1, R88 += 1 };
  s3 -> s1 [0, 110] { R10794 += 1, R88 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10794 += 1 };
  s3 -> s5 [111, 111] { R10794 += 1, R88 += 1 };
  s3 -> s1 [112, 65535] { R10794 += 1, R88 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10794 += 1, R88 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10794 += 1 };
  s5 -> s6 [99, 99] { R10794 += 1, R88 += 1 };
  s5 -> s1 [100, 65535] { R10794 += 1, R88 += 1 };
  s6 -> s1 [0, 96] { R10794 += 1, R88 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10794 += 1 };
  s6 -> s7 [97, 97] { R10794 += 1, R88 += 1 };
  s6 -> s1 [98, 65535] { R10794 += 1, R88 += 1 };
  s7 -> s1 [0, 107] { R10794 += 1, R88 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10794 += 1 };
  s7 -> s8 [108, 108] { R10794 += 1, R88 += 1 };
  s7 -> s1 [109, 65535] { R10794 += 1, R88 += 1 };
  s8 -> s1 [0, 103] { R10794 += 1, R88 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10794 += 1 };
  s8 -> s9 [104, 104] { R10794 += 1, R88 += 1 };
  s8 -> s1 [105, 65535] { R10794 += 1, R88 += 1 };
  s9 -> s1 [0, 110] { R10794 += 1, R88 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10794 += 1 };
  s9 -> s10 [111, 111] { R10794 += 1, R88 += 1 };
  s9 -> s1 [112, 65535] { R10794 += 1, R88 += 1 };
  s10 -> s1 [0, 114] { R10794 += 1, R88 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10794 += 1 };
  s10 -> s11 [115, 115] { R10794 += 1, R88 += 1 };
  s10 -> s1 [116, 65535] { R10794 += 1, R88 += 1 };
  s11 -> s1 [0, 115] { R10794 += 1, R88 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10794 += 1 };
  s11 -> s12 [116, 116] { R10794 += 1, R88 += 1 };
  s11 -> s1 [117, 65535] { R10794 += 1, R88 += 1 };
  s12 -> s1 [0, 65535] { R10794 += 1, R88 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10794 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10796 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R10795 += 1, R10796 += 1 };
  s0 -> s2 [0, 65535] { R10796 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R10796 += 1, R92 += 1, R93 += 1 };
  s1 -> s2 [0, 65535] { R10796 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10796 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [0, 65535] { R10796 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10796 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R10798 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R10797 += 1, R10798 += 1 };
  s0 -> s2 [0, 65535] { R10798 += 1, R98 += 1, R99 += 1 };
  s1 -> s1 [0, 65535] { R10798 += 1, R99 += 1, R100 += 1 };
  s1 -> s4 [0, 65535] { R10798 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10798 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R10798 += 1, R98 += 1, R99 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10798 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10799 += 1, R10800 += 1 };
  s0 -> s1 [0, 65535] { R10800 += 1 };
  s1 -> s1 [0, 65535] { R10800 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10801 += 1, R10802 += 1 };
  s0 -> s1 [0, 65535] { R10802 += 1, R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R10802 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10802 += 1, R104 += 1, R105 += 1 };
  s1 -> s2 [0, 65535] { R10802 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10802 += 1 };
  s2 -> s2 [0, 65535] { R10802 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10802 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10803 += 1, R10804 += 1 };
  s0 -> s1 [0, 65535] { R10804 += 1 };
  s1 -> s1 [0, 65535] { R10804 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 72] { R10806 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R10805 += 1, R10806 += 1 };
  s0 -> s2 [0, 65535] { R10806 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [73, 73] { R10806 += 1, R111 += 1, R112 += 1 };
  s0 -> s4 [73, 73] { R10806 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [74, 65535] { R10806 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 72] { R10806 += 1, R111 += 1, R112 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10806 += 1 };
  s1 -> s3 [73, 73] { R10806 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [73, 73] { R10806 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [74, 65535] { R10806 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [0, 72] { R10806 += 1, R111 += 1, R112 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10806 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [73, 73] { R10806 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [73, 73] { R10806 += 1, R111 += 1, R112 += 1 };
  s2 -> s1 [74, 65535] { R10806 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535] { R10806 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10806 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10806 += 1, R111 += 1, R112 += 1 };
  s5 -> s5 [0, 65535] { R10806 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10829 += 1, R10830 += 1 };
  s0 -> s1 [0, 65535] { R10830 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R10830 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R10832 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R10831 += 1, R10832 += 1 };
  s0 -> s2 [65, 65] { R10832 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R10832 += 1, R67 += 1 };
  s0 -> s1 [66, 65535] { R10832 += 1, R67 += 1 };
  s1 -> s1 [0, 64] { R10832 += 1, R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10832 += 1, R67 += 1 };
  s1 -> s3 [65, 65] { R10832 += 1, R67 += 1 };
  s1 -> s1 [66, 65535] { R10832 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R10832 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R10834 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R10833 += 1, R10834 += 1 };
  s0 -> s2 [65, 65] { R10834 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R10834 += 1, R69 += 1 };
  s0 -> s1 [66, 65535] { R10834 += 1, R69 += 1 };
  s1 -> s1 [0, 64] { R10834 += 1, R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10834 += 1, R69 += 1 };
  s1 -> s3 [65, 65] { R10834 += 1, R69 += 1 };
  s1 -> s1 [66, 65535] { R10834 += 1, R69 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10834 += 1, R69 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R10836 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R10835 += 1, R10836 += 1 };
  s0 -> s2 [65, 65] { R10836 += 1, R71 += 1 };
  s0 -> s3 [65, 65] { R10836 += 1, R71 += 1 };
  s0 -> s1 [66, 65535] { R10836 += 1, R71 += 1 };
  s1 -> s1 [0, 64] { R10836 += 1, R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10836 += 1, R71 += 1 };
  s1 -> s3 [65, 65] { R10836 += 1, R71 += 1 };
  s1 -> s1 [66, 65535] { R10836 += 1, R71 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10836 += 1, R71 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R10838 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10837 += 1, R10838 += 1 };
  s0 -> s2 [65, 65] { R10838 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R10838 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [66, 65535] { R10838 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 64] { R10838 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10838 += 1, R73 += 1, R74 += 1 };
  s1 -> s3 [65, 65] { R10838 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [66, 65535] { R10838 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10838 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10840 += 1 };
  s0 -> s0 [0, 65535] { R10839 += 1, R10840 += 1 };
  s0 -> s2 [65, 65] { R10840 += 1 };
  s0 -> s3 [65, 65] { R10840 += 1 };
  s0 -> s1 [66, 65535] { R10840 += 1 };
  s1 -> s1 [0, 64] { R10840 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10840 += 1 };
  s1 -> s3 [65, 65] { R10840 += 1 };
  s1 -> s1 [66, 65535] { R10840 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10840 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R10842 += 1, R79 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R10841 += 1, R10842 += 1 };
  s0 -> s2 [65, 65] { R10842 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R10842 += 1, R79 += 1, R80 += 1 };
  s0 -> s1 [66, 65535] { R10842 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 64] { R10842 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10842 += 1, R79 += 1, R80 += 1 };
  s1 -> s3 [65, 65] { R10842 += 1, R79 += 1, R80 += 1 };
  s1 -> s1 [66, 65535] { R10842 += 1, R79 += 1, R80 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10842 += 1, R79 += 1, R80 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R10844 += 1, R85 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10843 += 1, R10844 += 1 };
  s0 -> s2 [65, 65] { R10844 += 1, R85 += 1, R86 += 1 };
  s0 -> s3 [65, 65] { R10844 += 1, R85 += 1, R86 += 1 };
  s0 -> s1 [66, 65535] { R10844 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 64] { R10844 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10844 += 1, R85 += 1, R86 += 1 };
  s1 -> s3 [65, 65] { R10844 += 1, R85 += 1, R86 += 1 };
  s1 -> s1 [66, 65535] { R10844 += 1, R85 += 1, R86 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10844 += 1, R85 += 1, R86 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R10846 += 1, R89 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10845 += 1, R10846 += 1 };
  s0 -> s2 [65, 65] { R10846 += 1, R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R10846 += 1, R89 += 1, R90 += 1 };
  s0 -> s1 [66, 65535] { R10846 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 64] { R10846 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10846 += 1, R89 += 1, R90 += 1 };
  s1 -> s3 [65, 65] { R10846 += 1, R89 += 1, R90 += 1 };
  s1 -> s1 [66, 65535] { R10846 += 1, R89 += 1, R90 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10846 += 1, R89 += 1, R90 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10848 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R10847 += 1, R10848 += 1 };
  s0 -> s2 [65, 65] { R10848 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R10848 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R10848 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R10848 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10848 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R10848 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R10848 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R10848 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10850 += 1 };
  s0 -> s0 [0, 65535] { R10849 += 1, R10850 += 1 };
  s0 -> s2 [65, 65] { R10850 += 1 };
  s0 -> s3 [65, 65] { R10850 += 1 };
  s0 -> s1 [66, 65535] { R10850 += 1 };
  s1 -> s1 [0, 64] { R10850 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10850 += 1 };
  s1 -> s3 [65, 65] { R10850 += 1 };
  s1 -> s1 [66, 65535] { R10850 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10850 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10852 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R10851 += 1, R10852 += 1 };
  s0 -> s2 [65, 65] { R10852 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R10852 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R10852 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R10852 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10852 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R10852 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R10852 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10852 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10854 += 1 };
  s0 -> s0 [0, 65535] { R10853 += 1, R10854 += 1 };
  s0 -> s2 [65, 65] { R10854 += 1 };
  s0 -> s3 [65, 65] { R10854 += 1 };
  s0 -> s1 [66, 65535] { R10854 += 1 };
  s1 -> s1 [0, 64] { R10854 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10854 += 1 };
  s1 -> s3 [65, 65] { R10854 += 1 };
  s1 -> s1 [66, 65535] { R10854 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10854 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10856 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R10855 += 1, R10856 += 1 };
  s0 -> s2 [65, 65] { R10856 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R10856 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R10856 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R10856 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10856 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R10856 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R10856 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10856 += 1, R107 += 1, R108 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 43] { R10858 += 1 };
  s0 -> s0 [0, 65535] { R10857 += 1, R10858 += 1 };
  s0 -> s1 [45, 45] { R10858 += 1 };
  s0 -> s2 [46, 46] { R10858 += 1 };
  s0 -> s1 [48, 62] { R10858 += 1 };
  s0 -> s3 [65, 65] { R10858 += 1 };
  s0 -> s1 [66, 65535] { R10858 += 1 };
  s1 -> s1 [0, 43] { R10858 += 1 };
  s1 -> s1 [45, 45] { R10858 += 1 };
  s1 -> s2 [46, 46] { R10858 += 1 };
  s1 -> s1 [48, 62] { R10858 += 1 };
  s1 -> s3 [65, 65] { R10858 += 1 };
  s1 -> s1 [66, 65535] { R10858 += 1 };
  s2 -> s1 [0, 43] { R10858 += 1 };
  s2 -> s1 [45, 45] { R10858 += 1 };
  s2 -> s2 [46, 46] { R10858 += 1 };
  s2 -> s1 [48, 62] { R10858 += 1 };
  s2 -> s3 [65, 65] { R10858 += 1 };
  s2 -> s1 [66, 114] { R10858 += 1 };
  s2 -> s8 [115, 115] { R10858 += 1 };
  s2 -> s1 [116, 65535] { R10858 += 1 };
  s3 -> s3 [0, 43] { R10858 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10858 += 1 };
  s3 -> s4 [46, 46] { R10858 += 1 };
  s3 -> s3 [48, 62] { R10858 += 1 };
  s3 -> s3 [65, 65535] { R10858 += 1 };
  s4 -> s3 [0, 43] { R10858 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10858 += 1 };
  s4 -> s4 [46, 46] { R10858 += 1 };
  s4 -> s3 [48, 62] { R10858 += 1 };
  s4 -> s3 [65, 114] { R10858 += 1 };
  s4 -> s5 [115, 115] { R10858 += 1 };
  s4 -> s3 [116, 65535] { R10858 += 1 };
  s5 -> s3 [0, 43] { R10858 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10858 += 1 };
  s5 -> s4 [46, 46] { R10858 += 1 };
  s5 -> s3 [48, 62] { R10858 += 1 };
  s5 -> s3 [65, 110] { R10858 += 1 };
  s5 -> s6 [111, 111] { R10858 += 1 };
  s5 -> s3 [112, 65535] { R10858 += 1 };
  s6 -> s3 [0, 43] { R10858 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10858 += 1 };
  s6 -> s4 [46, 46] { R10858 += 1 };
  s6 -> s3 [48, 62] { R10858 += 1 };
  s6 -> s3 [65, 98] { R10858 += 1 };
  s6 -> s7 [99, 99] { R10858 += 1 };
  s6 -> s3 [100, 65535] { R10858 += 1 };
  s7 -> s3 [0, 43] { R10858 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10858 += 1 };
  s7 -> s4 [46, 46] { R10858 += 1 };
  s7 -> s3 [48, 62] { R10858 += 1 };
  s7 -> s3 [65, 106] { R10858 += 1 };
  s7 -> s3 [108, 65535] { R10858 += 1 };
  s8 -> s1 [0, 43] { R10858 += 1 };
  s8 -> s1 [45, 45] { R10858 += 1 };
  s8 -> s2 [46, 46] { R10858 += 1 };
  s8 -> s1 [48, 62] { R10858 += 1 };
  s8 -> s3 [65, 65] { R10858 += 1 };
  s8 -> s1 [66, 110] { R10858 += 1 };
  s8 -> s9 [111, 111] { R10858 += 1 };
  s8 -> s1 [112, 65535] { R10858 += 1 };
  s9 -> s1 [0, 43] { R10858 += 1 };
  s9 -> s1 [45, 45] { R10858 += 1 };
  s9 -> s2 [46, 46] { R10858 += 1 };
  s9 -> s1 [48, 62] { R10858 += 1 };
  s9 -> s3 [65, 65] { R10858 += 1 };
  s9 -> s1 [66, 98] { R10858 += 1 };
  s9 -> s10 [99, 99] { R10858 += 1 };
  s9 -> s1 [100, 65535] { R10858 += 1 };
  s10 -> s1 [0, 43] { R10858 += 1 };
  s10 -> s1 [45, 45] { R10858 += 1 };
  s10 -> s2 [46, 46] { R10858 += 1 };
  s10 -> s1 [48, 62] { R10858 += 1 };
  s10 -> s3 [65, 65] { R10858 += 1 };
  s10 -> s1 [66, 106] { R10858 += 1 };
  s10 -> s1 [108, 65535] { R10858 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10860 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10859 += 1, R10860 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10860 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 57] { R10862 += 1 };
  s0 -> s0 [0, 65535] { R10861 += 1, R10862 += 1 };
  s0 -> s2 [0, 65535] { R10862 += 1, R16 += 1 };
  s0 -> s3 [58, 58] { R10862 += 1 };
  s0 -> s1 [59, 65535] { R10862 += 1 };
  s1 -> s1 [0, 57] { R10862 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10862 += 1 };
  s1 -> s1 [59, 65535] { R10862 += 1 };
  s2 -> s1 [0, 57] { R10862 += 1 };
  s2 -> s2 [0, 65535] { R10862 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R10862 += 1 };
  s2 -> s1 [59, 65535] { R10862 += 1 };
  s3 -> s3 [0, 65535] { R10862 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10864 += 1 };
  s0 -> s2 [0, 65535] { R10864 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R10863 += 1, R10864 += 1 };
  s0 -> s3 [65, 65] { R10864 += 1 };
  s0 -> s1 [66, 65535] { R10864 += 1 };
  s1 -> s1 [0, 64] { R10864 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10864 += 1 };
  s1 -> s1 [66, 65535] { R10864 += 1 };
  s2 -> s1 [0, 64] { R10864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10864 += 1, R17 += 1 };
  s2 -> s3 [65, 65] { R10864 += 1 };
  s2 -> s1 [66, 65535] { R10864 += 1 };
  s3 -> s3 [0, 65535] { R10864 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 90] { R10866 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R10866 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10865 += 1, R10866 += 1 };
  s0 -> s3 [91, 91] { R10866 += 1, R34 += 1 };
  s0 -> s1 [92, 65535] { R10866 += 1, R34 += 1 };
  s1 -> s5 [0, 65535] { R10866 += 1 };
  s1 -> s1 [0, 65535] { R10866 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R10866 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R10866 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10866 += 1, R34 += 1 };
  s2 -> s1 [92, 65535] { R10866 += 1, R34 += 1 };
  s3 -> s1 [0, 65535] { R10866 += 1, R34 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10866 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s0 [0, 65535] { R10867 += 1, R10868 += 1 };
  s0 -> s1 [0, 65535] { R10868 += 1, R36 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R10868 += 1, R35 += 1, R36 += 1 };
  s1 -> s4 [0, 65535] { R10868 += 1 };
  s1 -> s1 [0, 65535] { R10868 += 1, R36 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10868 += 1, R36 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R10868 += 1, R35 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10868 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10870 += 1, R10756 += 1 };
  s0 -> s2 [0, 65535] { R10870 += 1, R10755 += 1, R10756 += 1 };
  s0 -> s0 [0, 65535] { R10869 += 1, R10870 += 1 };
  s0 -> s1 [66, 65535] { R10870 += 1, R10756 += 1 };
  s1 -> s1 [0, 64] { R10870 += 1, R10756 += 1 };
  s1 -> s1 [0, 65535] { R10870 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10870 += 1, R10756 += 1 };
  s2 -> s1 [0, 64] { R10870 += 1, R10756 += 1 };
  s2 -> s2 [0, 65535] { R10870 += 1, R10755 += 1, R10756 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10870 += 1, R10756 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R10872 += 1, R10758 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R10872 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s0 [0, 65535] { R10871 += 1, R10872 += 1 };
  s1 -> s1 [0, 65535] { R10872 += 1, R10758 += 1, R29 += 1 };
  s1 -> s4 [0, 65535] { R10872 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10872 += 1, R10758 += 1, R29 += 1 };
  s2 -> s2 [0, 65535] { R10872 += 1, R10757 += 1, R10758 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10872 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65] { R10874 += 1, R10760 += 1 };
  s0 -> s0 [0, 65535] { R10873 += 1, R10874 += 1 };
  s0 -> s2 [0, 65535] { R10874 += 1, R10759 += 1, R10760 += 1 };
  s0 -> s1 [81, 65535] { R10874 += 1, R10760 += 1 };
  s1 -> s1 [0, 65] { R10874 += 1, R10760 += 1 };
  s1 -> s1 [0, 65535] { R10874 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R10874 += 1, R10760 += 1 };
  s2 -> s1 [0, 65] { R10874 += 1, R10760 += 1 };
  s2 -> s2 [0, 65535] { R10874 += 1, R10759 += 1, R10760 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R10874 += 1, R10760 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R10876 += 1, R10761 += 1, R10762 += 1 };
  s0 -> s0 [0, 65535] { R10875 += 1, R10876 += 1 };
  s0 -> s2 [0, 65535] { R10876 += 1, R10762 += 1, R494 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10876 += 1, R10761 += 1, R10762 += 1 };
  s1 -> s2 [0, 65535] { R10876 += 1, R10762 += 1, R494 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10876 += 1 };
  s2 -> s2 [0, 65535] { R10876 += 1, R10762 += 1, R494 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10876 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 80] { R10878 += 1, R10764 += 1 };
  s0 -> s2 [0, 65535] { R10878 += 1, R10764 += 1, R496 += 1 };
  s0 -> s0 [0, 65535] { R10877 += 1, R10878 += 1 };
  s0 -> s3 [0, 65535] { R10878 += 1, R10763 += 1, R10764 += 1 };
  s0 -> s1 [82, 65535] { R10878 += 1, R10764 += 1 };
  s1 -> s1 [0, 80] { R10878 += 1, R10764 += 1 };
  s1 -> s1 [0, 65535] { R10878 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R10878 += 1, R10764 += 1 };
  s2 -> s1 [0, 80] { R10878 += 1, R10764 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10878 += 1 };
  s2 -> s2 [0, 65535] { R10878 += 1, R10764 += 1, R496 += 1 };
  s2 -> s1 [82, 65535] { R10878 += 1, R10764 += 1 };
  s3 -> s1 [0, 80] { R10878 += 1, R10764 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10878 += 1, R10764 += 1, R496 += 1 };
  s3 -> s3 [0, 65535] { R10878 += 1, R10763 += 1, R10764 += 1 };
  s3 -> s1 [82, 65535] { R10878 += 1, R10764 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10878 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 80] { R10880 += 1, R10766 += 1, R500 += 1 };
  s0 -> s2 [0, 65535] { R10880 += 1, R10765 += 1, R10766 += 1 };
  s0 -> s3 [0, 65535] { R10880 += 1, R10766 += 1, R499 += 1, R500 += 1 };
  s0 -> s0 [0, 65535] { R10879 += 1, R10880 += 1 };
  s0 -> s1 [82, 65535] { R10880 += 1, R10766 += 1, R500 += 1 };
  s1 -> s1 [0, 80] { R10880 += 1, R10766 += 1, R500 += 1 };
  s1 -> s4 [0, 65535] { R10880 += 1 };
  s1 -> s1 [0, 65535] { R10880 += 1, R10766 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R10880 += 1, R10766 += 1, R500 += 1 };
  s2 -> s1 [0, 80] { R10880 += 1, R10766 += 1, R500 += 1 };
  s2 -> s2 [0, 65535] { R10880 += 1, R10765 += 1, R10766 += 1 };
  s2 -> s3 [0, 65535] { R10880 += 1, R10766 += 1, R499 += 1, R500 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R10880 += 1, R10766 += 1, R500 += 1 };
  s3 -> s1 [0, 80] { R10880 += 1, R10766 += 1, R500 += 1 };
  s3 -> s4 [0, 65535] { R10880 += 1 };
  s3 -> s3 [0, 65535] { R10880 += 1, R10766 += 1, R499 += 1, R500 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R10880 += 1, R10766 += 1, R500 += 1 };
  s4 -> s4 [0, 65535] { R10880 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10882 += 1, R10768 += 1, R505 += 1, R506 += 1 };
  s0 -> s2 [0, 65535] { R10882 += 1, R10768 += 1, R504 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R10881 += 1, R10882 += 1 };
  s0 -> s3 [0, 65535] { R10882 += 1, R10767 += 1, R10768 += 1 };
  s1 -> s5 [0, 65535] { R10882 += 1 };
  s1 -> s1 [0, 65535] { R10882 += 1, R10768 += 1, R505 += 1, R506 += 1 };
  s1 -> s6 [0, 65535] { R10882 += 1, R10768 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10882 += 1 };
  s2 -> s1 [0, 65535] { R10882 += 1, R10768 += 1, R505 += 1, R506 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10882 += 1, R10768 += 1, R504 += 1, R505 += 1 };
  s3 -> s1 [0, 65535] { R10882 += 1, R10768 += 1, R505 += 1, R506 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10882 += 1, R10768 += 1, R504 += 1, R505 += 1 };
  s3 -> s3 [0, 65535] { R10882 += 1, R10767 += 1, R10768 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10882 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10882 += 1 };
  s6 -> s6 [0, 65535] { R10882 += 1, R10768 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 81] { R10884 += 1, R10770 += 1, R8056 += 1 };
  s0 -> s0 [0, 65535] { R10883 += 1, R10884 += 1 };
  s0 -> s1 [0, 65535] { R10884 += 1, R10770 += 1 };
  s0 -> s2 [0, 65535] { R10884 += 1, R10769 += 1, R10770 += 1 };
  s0 -> s1 [91, 65535] { R10884 += 1, R10770 += 1, R8056 += 1 };
  s1 -> s1 [0, 81] { R10884 += 1, R10770 += 1, R8056 += 1 };
  s1 -> s4 [0, 65535] { R10884 += 1 };
  s1 -> s1 [0, 65535] { R10884 += 1, R10770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R10884 += 1, R10770 += 1, R8056 += 1 };
  s2 -> s1 [0, 81] { R10884 += 1, R10770 += 1, R8056 += 1 };
  s2 -> s1 [0, 65535] { R10884 += 1, R10770 += 1 };
  s2 -> s2 [0, 65535] { R10884 += 1, R10769 += 1, R10770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R10884 += 1, R10770 += 1, R8056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10884 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R10886 += 1, R10771 += 1, R10772 += 1 };
  s0 -> s2 [0, 65535] { R10886 += 1, R10772 += 1, R10575 += 1, R10576 += 1 };
  s0 -> s0 [0, 65535] { R10885 += 1, R10886 += 1 };
  s0 -> s3 [0, 65535] { R10886 += 1, R10772 += 1 };
  s1 -> s1 [0, 65535] { R10886 += 1, R10771 += 1, R10772 += 1 };
  s1 -> s2 [0, 65535] { R10886 += 1, R10772 += 1, R10575 += 1, R10576 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R10886 += 1, R10772 += 1 };
  s2 -> s2 [0, 65535] { R10886 += 1, R10772 += 1, R10575 += 1, R10576 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10886 += 1 };
  s2 -> s3 [0, 65535] { R10886 += 1, R10772 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10886 += 1 };
  s3 -> s3 [0, 65535] { R10886 += 1, R10772 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10886 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R10888 += 1, R10774 += 1, R10581 += 1, R10582 += 1 };
  s0 -> s2 [0, 65535] { R10888 += 1, R10774 += 1, R10580 += 1, R10581 += 1 };
  s0 -> s3 [0, 65535] { R10888 += 1, R10773 += 1, R10774 += 1 };
  s0 -> s0 [0, 65535] { R10887 += 1, R10888 += 1 };
  s1 -> s1 [0, 65535] { R10888 += 1, R10774 += 1, R10581 += 1, R10582 += 1 };
  s1 -> s5 [0, 65535] { R10888 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10888 += 1, R10774 += 1 };
  s2 -> s1 [0, 65535] { R10888 += 1, R10774 += 1, R10581 += 1, R10582 += 1 };
  s2 -> s5 [0, 65535] { R10888 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10888 += 1, R10774 += 1, R10580 += 1, R10581 += 1 };
  s3 -> s1 [0, 65535] { R10888 += 1, R10774 += 1, R10581 += 1, R10582 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10888 += 1, R10774 += 1, R10580 += 1, R10581 += 1 };
  s3 -> s3 [0, 65535] { R10888 += 1, R10773 += 1, R10774 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10888 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10888 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10888 += 1, R10774 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R10890 += 1, R10776 += 1 };
  s0 -> s2 [0, 65535] { R10890 += 1, R10775 += 1, R10776 += 1 };
  s0 -> s0 [0, 65535] { R10889 += 1, R10890 += 1 };
  s1 -> s1 [0, 65535] { R10890 += 1, R10776 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10890 += 1 };
  s2 -> s1 [0, 65535] { R10890 += 1, R10776 += 1 };
  s2 -> s2 [0, 65535] { R10890 += 1, R10775 += 1, R10776 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10890 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 80] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s0 -> s0 [0, 65535] { R10891 += 1, R10892 += 1 };
  s0 -> s2 [0, 65535] { R10892 += 1, R10777 += 1, R10778 += 1 };
  s0 -> s1 [0, 65535] { R10892 += 1, R10778 += 1 };
  s0 -> s3 [81, 81] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s0 -> s4 [81, 81] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s0 -> s1 [82, 65535] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s1 -> s1 [0, 80] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s1 -> s6 [0, 65535] { R10892 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R10892 += 1, R10778 += 1 };
  s1 -> s3 [81, 81] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s1 -> s4 [81, 81] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s1 -> s1 [82, 65535] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s2 -> s1 [0, 80] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s2 -> s2 [0, 65535] { R10892 += 1, R10777 += 1, R10778 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R10892 += 1, R10778 += 1 };
  s2 -> s3 [81, 81] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s2 -> s4 [81, 81] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s2 -> s1 [82, 65535] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s3 -> s3 [0, 65535] { R10892 += 1, R10778 += 1 };
  s3 -> s6 [0, 65535] { R10892 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R10892 += 1, R10778 += 1 };
  s4 -> s6 [0, 65535] { R10892 += 1 };
  s4 -> s4 [0, 65535] { R10892 += 1, R10778 += 1, R10753 += 1, R10754 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10892 += 1, R10778 += 1 };
  s5 -> s6 [0, 65535] { R10892 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10892 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R10893 += 1, R10894 += 1 };
  s0 -> s1 [0, 65535] { R10894 += 1, R10807 += 1, R10808 += 1 };
  s0 -> s2 [0, 65535] { R10894 += 1, R10808 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10894 += 1, R10807 += 1, R10808 += 1 };
  s1 -> s2 [0, 65535] { R10894 += 1, R10808 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10894 += 1 };
  s2 -> s2 [0, 65535] { R10894 += 1, R10808 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10894 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10896 += 1, R10810 += 1 };
  s0 -> s2 [0, 65535] { R10896 += 1, R10809 += 1, R10810 += 1 };
  s0 -> s0 [0, 65535] { R10895 += 1, R10896 += 1 };
  s0 -> s3 [65, 65] { R10896 += 1, R10810 += 1 };
  s0 -> s4 [65, 65] { R10896 += 1, R10810 += 1 };
  s0 -> s5 [81, 81] { R10896 += 1, R10810 += 1 };
  s0 -> s1 [82, 65535] { R10896 += 1, R10810 += 1 };
  s1 -> s1 [0, 64] { R10896 += 1, R10810 += 1 };
  s1 -> s3 [65, 65] { R10896 += 1, R10810 += 1 };
  s1 -> s4 [65, 65] { R10896 += 1, R10810 += 1 };
  s1 -> s5 [81, 81] { R10896 += 1, R10810 += 1 };
  s1 -> s1 [82, 65535] { R10896 += 1, R10810 += 1 };
  s2 -> s1 [0, 64] { R10896 += 1, R10810 += 1 };
  s2 -> s2 [0, 65535] { R10896 += 1, R10809 += 1, R10810 += 1 };
  s2 -> s3 [65, 65] { R10896 += 1, R10810 += 1 };
  s2 -> s4 [65, 65] { R10896 += 1, R10810 += 1 };
  s2 -> s5 [81, 81] { R10896 += 1, R10810 += 1 };
  s2 -> s1 [82, 65535] { R10896 += 1, R10810 += 1 };
  s3 -> s3 [0, 65] { R10896 += 1, R10810 += 1 };
  s3 -> s7 [81, 81] { R10896 += 1, R10810 += 1 };
  s3 -> s3 [82, 65535] { R10896 += 1, R10810 += 1 };
  s5 -> s5 [0, 64] { R10896 += 1, R10810 += 1 };
  s5 -> s5 [0, 65535] { R10896 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10896 += 1, R10810 += 1 };
  s5 -> s8 [65, 65] { R10896 += 1, R10810 += 1 };
  s5 -> s5 [81, 65535] { R10896 += 1, R10810 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10896 += 1, R10810 += 1 };
  s7 -> s7 [0, 65535] { R10896 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R10896 += 1, R10810 += 1 };
  s8 -> s8 [0, 65535] { R10896 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10898 += 1, R10812 += 1, R493 += 1 };
  s0 -> s2 [0, 65535] { R10898 += 1, R10811 += 1, R10812 += 1 };
  s0 -> s0 [0, 65535] { R10897 += 1, R10898 += 1 };
  s0 -> s3 [65, 65] { R10898 += 1, R10812 += 1, R493 += 1 };
  s0 -> s4 [65, 65] { R10898 += 1, R10812 += 1, R493 += 1 };
  s0 -> s1 [66, 65535] { R10898 += 1, R10812 += 1, R493 += 1 };
  s1 -> s1 [0, 64] { R10898 += 1, R10812 += 1, R493 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10898 += 1 };
  s1 -> s3 [65, 65] { R10898 += 1, R10812 += 1, R493 += 1 };
  s1 -> s4 [65, 65] { R10898 += 1, R10812 += 1, R493 += 1 };
  s1 -> s1 [66, 65535] { R10898 += 1, R10812 += 1, R493 += 1 };
  s2 -> s1 [0, 64] { R10898 += 1, R10812 += 1, R493 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10898 += 1, R10811 += 1, R10812 += 1 };
  s2 -> s3 [65, 65] { R10898 += 1, R10812 += 1, R493 += 1 };
  s2 -> s4 [65, 65] { R10898 += 1, R10812 += 1, R493 += 1 };
  s2 -> s1 [66, 65535] { R10898 += 1, R10812 += 1, R493 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10898 += 1 };
  s3 -> s3 [0, 65535] { R10898 += 1, R10812 += 1, R493 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10898 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10898 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10900 += 1, R10814 += 1, R495 += 1 };
  s0 -> s2 [0, 65535] { R10900 += 1, R10813 += 1, R10814 += 1 };
  s0 -> s0 [0, 65535] { R10899 += 1, R10900 += 1 };
  s0 -> s3 [65, 65] { R10900 += 1, R10814 += 1, R495 += 1 };
  s0 -> s4 [65, 65] { R10900 += 1, R10814 += 1, R495 += 1 };
  s0 -> s1 [66, 65535] { R10900 += 1, R10814 += 1, R495 += 1 };
  s1 -> s1 [0, 64] { R10900 += 1, R10814 += 1, R495 += 1 };
  s1 -> s1 [0, 65535] { R10900 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10900 += 1, R10814 += 1, R495 += 1 };
  s1 -> s4 [65, 65] { R10900 += 1, R10814 += 1, R495 += 1 };
  s1 -> s1 [66, 65535] { R10900 += 1, R10814 += 1, R495 += 1 };
  s2 -> s1 [0, 64] { R10900 += 1, R10814 += 1, R495 += 1 };
  s2 -> s2 [0, 65535] { R10900 += 1, R10813 += 1, R10814 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10900 += 1, R10814 += 1, R495 += 1 };
  s2 -> s4 [65, 65] { R10900 += 1, R10814 += 1, R495 += 1 };
  s2 -> s1 [66, 65535] { R10900 += 1, R10814 += 1, R495 += 1 };
  s3 -> s3 [0, 65535] { R10900 += 1, R10814 += 1, R495 += 1 };
  s3 -> s6 [0, 65535] { R10900 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10900 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10900 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s0 -> s0 [0, 65535] { R10901 += 1, R10902 += 1 };
  s0 -> s2 [0, 65535] { R10902 += 1, R10815 += 1, R10816 += 1 };
  s0 -> s3 [65, 65] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s0 -> s4 [65, 65] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s0 -> s1 [66, 65535] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 64] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [0, 65535] { R10902 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s1 -> s4 [65, 65] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s1 -> s1 [66, 65535] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [0, 64] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10902 += 1, R10815 += 1, R10816 += 1 };
  s2 -> s3 [65, 65] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s2 -> s4 [65, 65] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s2 -> s1 [66, 65535] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s3 -> s3 [0, 65535] { R10902 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10902 += 1, R10816 += 1, R497 += 1, R498 += 1 };
  s4 -> s5 [0, 65535] { R10902 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10902 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s0 -> s0 [0, 65535] { R10903 += 1, R10904 += 1 };
  s0 -> s2 [0, 65535] { R10904 += 1, R10817 += 1, R10818 += 1 };
  s0 -> s3 [65, 65] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s0 -> s4 [65, 65] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s0 -> s1 [66, 65535] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 64] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [0, 65535] { R10904 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s1 -> s4 [65, 65] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s1 -> s1 [66, 65535] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [0, 64] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10904 += 1, R10817 += 1, R10818 += 1 };
  s2 -> s3 [65, 65] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s2 -> s4 [65, 65] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s2 -> s1 [66, 65535] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s3 -> s3 [0, 65535] { R10904 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10904 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10904 += 1, R10818 += 1, R501 += 1, R502 += 1 };
  s5 -> s5 [0, 65535] { R10904 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s0 -> s2 [0, 64] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s3 [0, 65535] { R10906 += 1, R10819 += 1, R10820 += 1 };
  s0 -> s0 [0, 65535] { R10905 += 1, R10906 += 1 };
  s0 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s0 -> s5 [65, 65] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s0 -> s7 [65, 65] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s0 -> s2 [66, 65535] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s1 [91, 107] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s0 -> s8 [108, 108] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s0 -> s1 [109, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s1 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s1 -> s1 [0, 65535] { R10906 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s4 [65, 65] { R10906 += 1, R10820 += 1 };
  s1 -> s6 [65, 65] { R10906 += 1, R10820 += 1 };
  s1 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s1 -> s1 [66, 65535] { R10906 += 1, R10820 += 1 };
  s1 -> s1 [91, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s2 [0, 64] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s5 [65, 65] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s7 [65, 65] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s2 [66, 65535] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s2 -> s1 [91, 107] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s8 [108, 108] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s2 -> s1 [109, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s2 [0, 64] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s3 [0, 65535] { R10906 += 1, R10819 += 1, R10820 += 1 };
  s3 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s5 [65, 65] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s7 [65, 65] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s2 [66, 65535] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s3 -> s1 [91, 107] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s8 [108, 108] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s3 -> s1 [109, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s4 -> s4 [0, 65535] { R10906 += 1 };
  s4 -> s34 [0, 65535];
  s5 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s5 -> s5 [0, 65535] { R10906 += 1, R10820 += 1, R8053 += 1, R8054 += 1 };
  s5 -> s6 [91, 107] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s5 -> s9 [108, 108] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s5 -> s6 [109, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s6 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s6 -> s6 [0, 65535] { R10906 += 1, R10820 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s35 [0, 65535] { R10906 += 1 };
  s6 -> s6 [91, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s8 [0, 64] { R10906 += 1, R10820 += 1 };
  s8 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s9 [65, 65] { R10906 += 1, R10820 += 1 };
  s8 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s10 [65, 65] { R10906 += 1, R10820 += 1 };
  s8 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s8 [66, 65535] { R10906 += 1, R10820 += 1 };
  s8 -> s1 [91, 110] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s11 [111, 111] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s8 -> s1 [112, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s9 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s9 -> s9 [0, 65535] { R10906 += 1, R10820 += 1 };
  s9 -> s6 [91, 110] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s9 -> s13 [111, 111] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s9 -> s6 [112, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s11 [0, 64] { R10906 += 1, R10820 += 1 };
  s11 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s12 [65, 65] { R10906 += 1, R10820 += 1 };
  s11 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s13 [65, 65] { R10906 += 1, R10820 += 1 };
  s11 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s11 [66, 65535] { R10906 += 1, R10820 += 1 };
  s11 -> s1 [91, 98] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s14 [99, 99] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s11 -> s1 [100, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s13 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s13 -> s13 [0, 65535] { R10906 += 1, R10820 += 1 };
  s13 -> s6 [91, 98] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s13 -> s16 [99, 99] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s13 -> s6 [100, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s14 [0, 64] { R10906 += 1, R10820 += 1 };
  s14 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s15 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s16 [65, 65] { R10906 += 1, R10820 += 1 };
  s14 -> s17 [65, 65] { R10906 += 1, R10820 += 1 };
  s14 -> s18 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s14 [66, 65535] { R10906 += 1, R10820 += 1 };
  s14 -> s1 [91, 96] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s19 [97, 97] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s14 -> s1 [98, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s15 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s15 -> s15 [0, 65535] { R10906 += 1, R10820 += 1 };
  s15 -> s6 [91, 107] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s15 -> s21 [108, 108] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s15 -> s6 [109, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s16 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s16 -> s16 [0, 65535] { R10906 += 1, R10820 += 1 };
  s16 -> s6 [91, 96] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s16 -> s15 [97, 97] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s16 -> s6 [98, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s19 [0, 64] { R10906 += 1, R10820 += 1 };
  s19 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s15 [65, 65] { R10906 += 1, R10820 += 1 };
  s19 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s18 [65, 65] { R10906 += 1, R10820 += 1 };
  s19 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s19 [66, 65535] { R10906 += 1, R10820 += 1 };
  s19 -> s1 [91, 107] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s20 [108, 108] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s19 -> s1 [109, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s20 [0, 64] { R10906 += 1, R10820 += 1 };
  s20 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s21 [65, 65] { R10906 += 1, R10820 += 1 };
  s20 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s22 [65, 65] { R10906 += 1, R10820 += 1 };
  s20 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s20 [66, 65535] { R10906 += 1, R10820 += 1 };
  s20 -> s1 [91, 103] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s23 [104, 104] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s20 -> s1 [105, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s21 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s21 -> s21 [0, 65535] { R10906 += 1, R10820 += 1 };
  s21 -> s6 [91, 103] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s21 -> s25 [104, 104] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s21 -> s6 [105, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s23 [0, 64] { R10906 += 1, R10820 += 1 };
  s23 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s24 [65, 65] { R10906 += 1, R10820 += 1 };
  s23 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s25 [65, 65] { R10906 += 1, R10820 += 1 };
  s23 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s23 [66, 65535] { R10906 += 1, R10820 += 1 };
  s23 -> s1 [91, 110] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s26 [111, 111] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s23 -> s1 [112, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s25 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s25 -> s25 [0, 65535] { R10906 += 1, R10820 += 1 };
  s25 -> s6 [91, 110] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s25 -> s28 [111, 111] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s25 -> s6 [112, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s26 [0, 64] { R10906 += 1, R10820 += 1 };
  s26 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s27 [65, 65] { R10906 += 1, R10820 += 1 };
  s26 -> s28 [65, 65] { R10906 += 1, R10820 += 1 };
  s26 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s26 [66, 65535] { R10906 += 1, R10820 += 1 };
  s26 -> s1 [91, 114] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s29 [115, 115] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s26 -> s1 [116, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s28 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s28 -> s28 [0, 65535] { R10906 += 1, R10820 += 1 };
  s28 -> s6 [91, 114] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s28 -> s30 [115, 115] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s28 -> s6 [116, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s29 [0, 64] { R10906 += 1, R10820 += 1 };
  s29 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s30 [65, 65] { R10906 += 1, R10820 += 1 };
  s29 -> s31 [65, 65] { R10906 += 1, R10820 += 1 };
  s29 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s29 [66, 65535] { R10906 += 1, R10820 += 1 };
  s29 -> s1 [91, 115] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s32 [116, 116] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s29 -> s1 [117, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s30 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s30 -> s30 [0, 65535] { R10906 += 1, R10820 += 1 };
  s30 -> s6 [91, 115] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s30 -> s33 [116, 116] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s30 -> s6 [117, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s32 -> s1 [0, 64] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s32 -> s4 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s32 -> s6 [65, 65] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s32 -> s1 [66, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s32 -> s1 [91, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s33 -> s6 [0, 81] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s33 -> s6 [91, 65535] { R10906 += 1, R10820 += 1, R8054 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10906 += 1 };
  accepting s4, s34, s6, s1, s35;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s2 [0, 64] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s0 [0, 65535] { R10907 += 1, R10908 += 1 };
  s0 -> s3 [0, 65535] { R10908 += 1, R10821 += 1, R10822 += 1 };
  s0 -> s4 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s5 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s0 -> s6 [65, 65] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s7 [65, 65] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s1 [66, 65535] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s0 -> s2 [66, 65535] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s1 [0, 64] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s1 -> s2 [0, 64] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s4 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s5 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s1 -> s6 [65, 65] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s1 -> s7 [65, 65] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s1 -> s1 [66, 65535] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s1 -> s2 [66, 65535] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s2 [0, 64] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R10908 += 1 };
  s2 -> s4 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s5 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s2 -> s2 [66, 65535] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s1 [0, 64] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s2 [0, 64] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s3 [0, 65535] { R10908 += 1, R10821 += 1, R10822 += 1 };
  s3 -> s4 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s5 [65, 65] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s3 -> s6 [65, 65] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s7 [65, 65] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s1 [66, 65535] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s3 -> s2 [66, 65535] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s4 -> s4 [0, 65535] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R10908 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10908 += 1 };
  s6 -> s4 [0, 65535] { R10908 += 1, R10822 += 1, R10572 += 1, R10573 += 1 };
  s6 -> s6 [0, 65535] { R10908 += 1, R10822 += 1, R10571 += 1, R10572 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10908 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s0 -> s0 [0, 65535] { R10909 += 1, R10910 += 1 };
  s0 -> s2 [0, 65535] { R10910 += 1, R10823 += 1, R10824 += 1 };
  s0 -> s3 [65, 65] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s0 -> s4 [65, 65] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s0 -> s1 [66, 65535] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s1 -> s1 [0, 64] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s1 -> s1 [0, 65535] { R10910 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s1 -> s4 [65, 65] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s1 -> s1 [66, 65535] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s2 -> s1 [0, 64] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s2 -> s2 [0, 65535] { R10910 += 1, R10823 += 1, R10824 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s2 -> s4 [65, 65] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s2 -> s1 [66, 65535] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s3 -> s3 [0, 65535] { R10910 += 1, R10824 += 1, R10577 += 1, R10578 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10910 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10910 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10910 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R10912 += 1, R10826 += 1 };
  s0 -> s0 [0, 65535] { R10911 += 1, R10912 += 1 };
  s0 -> s2 [0, 65535] { R10912 += 1, R10825 += 1, R10826 += 1 };
  s0 -> s3 [65, 65] { R10912 += 1, R10826 += 1 };
  s0 -> s4 [65, 65] { R10912 += 1, R10826 += 1 };
  s0 -> s1 [66, 65535] { R10912 += 1, R10826 += 1 };
  s1 -> s1 [0, 64] { R10912 += 1, R10826 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10912 += 1 };
  s1 -> s3 [65, 65] { R10912 += 1, R10826 += 1 };
  s1 -> s4 [65, 65] { R10912 += 1, R10826 += 1 };
  s1 -> s1 [66, 65535] { R10912 += 1, R10826 += 1 };
  s2 -> s1 [0, 64] { R10912 += 1, R10826 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10912 += 1, R10825 += 1, R10826 += 1 };
  s2 -> s3 [65, 65] { R10912 += 1, R10826 += 1 };
  s2 -> s4 [65, 65] { R10912 += 1, R10826 += 1 };
  s2 -> s1 [66, 65535] { R10912 += 1, R10826 += 1 };
  s3 -> s3 [0, 65535] { R10912 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10912 += 1, R10826 += 1 };
  s4 -> s6 [0, 65535] { R10912 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10912 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s2 [0, 64] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s0 [0, 65535] { R10913 += 1, R10914 += 1 };
  s0 -> s3 [0, 65535] { R10914 += 1, R10827 += 1, R10828 += 1 };
  s0 -> s4 [65, 65] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s5 [65, 65] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s6 [65, 65] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s7 [65, 65] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s2 [66, 80] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s0 -> s1 [66, 65535] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s2 [82, 65535] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s1 -> s1 [0, 64] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s2 [0, 64] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s1 -> s4 [65, 65] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s5 [65, 65] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s1 -> s6 [65, 65] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s7 [65, 65] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s1 -> s2 [66, 80] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s1 -> s1 [66, 65535] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s2 [82, 65535] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s2 -> s2 [0, 64] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s2 -> s2 [0, 65535] { R10914 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [65, 65] { R10914 += 1, R10828 += 1 };
  s2 -> s7 [65, 65] { R10914 += 1, R10828 += 1 };
  s2 -> s2 [66, 80] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s2 -> s2 [66, 65535] { R10914 += 1, R10828 += 1 };
  s2 -> s2 [82, 65535] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s1 [0, 64] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s2 [0, 64] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s3 [0, 65535] { R10914 += 1, R10827 += 1, R10828 += 1 };
  s3 -> s4 [65, 65] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s5 [65, 65] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s6 [65, 65] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s7 [65, 65] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s2 [66, 80] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s3 -> s1 [66, 65535] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s2 [82, 65535] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s4 -> s5 [0, 80] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s4 -> s4 [0, 65535] { R10914 += 1, R10828 += 1, R10749 += 1, R10750 += 1 };
  s4 -> s5 [82, 65535] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s5 -> s5 [0, 80] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s5 -> s5 [0, 65535] { R10914 += 1, R10828 += 1 };
  s5 -> s9 [0, 65535] { R10914 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [82, 65535] { R10914 += 1, R10828 += 1, R10750 += 1, R10751 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10914 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10914 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P89
automaton P89_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P61
automaton P61_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
constraint R4 = R10778 && R5 = R10914 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = 1 && R68 + R67 = 0 && R10755 = 0 && R10756 = R10778 && R10757 = 0 && R10758 = R10778 && R10759 = 0 && R10760 = R10778 && R10761 = 0 && R10762 = R10778 && R10763 = 0 && R10764 = R10778 && R10765 = 0 && R10766 = R10778 && R10767 = 0 && R10768 = R10778 && R10769 = 0 && R10770 = R10778 && R10771 = 0 && R10772 = R10778 && R10773 = 0 && R10774 = R10778 && R10775 = 0 && R10776 = R10778 && R10777 = 0 && R10779 = 0 && R10780 = R10914 && R10781 = 0 && R10782 = R10914 && R10783 = 0 && R10784 = R10914 && R10785 = 0 && R10786 = R10914 && R10787 = 0 && R10788 = R10914 && R10789 = 0 && R10790 = R10914 && R10791 = 0 && R10792 = R10914 && R10793 = 0 && R10794 = R10914 && R10795 = 0 && R10796 = R10914 && R10797 = 0 && R10798 = R10914 && R10799 = 0 && R10800 = R10914 && R10801 = 0 && R10802 = R10914 && R10803 = 0 && R10804 = R10914 && R10805 = 0 && R10806 = R10914 && R10809 = 0 && R10810 = 0 && R10819 = 0 && R10820 = 0 && R10821 = 0 && R10822 = 0 && R10827 = 0 && R10828 = 0 && R10857 = 10 && R10858 = R10914 && R10859 = 10 && R10860 = R10914 && R10861 = 10 && R10862 = R10914 && R10863 = 10 && R10864 = R10914 && R10865 = 10 && R10866 = R10914 && R10867 = 10 && R10868 = R10914 && R10869 = 10 && R10870 = R10914 && R10871 = 10 && R10872 = R10914 && R10873 = 10 && R10874 = R10914 && R10875 = 10 && R10876 = R10914 && R10877 = 10 && R10878 = R10914 && R10879 = 10 && R10880 = R10914 && R10881 = 10 && R10882 = R10914 && R10883 = 10 && R10884 = R10914 && R10885 = 10 && R10886 = R10914 && R10887 = 10 && R10888 = R10914 && R10889 = 10 && R10890 = R10914 && R10891 = 10 && R10892 = R10914 && R10893 = 10 && R10894 = R10914 && R10895 = 10 && R10896 = R10914 && R10897 = 10 && R10898 = R10914 && R10899 = 10 && R10900 = R10914 && R10901 = 10 && R10902 = R10914 && R10903 = 10 && R10904 = R10914 && R10905 = 10 && R10906 = R10914 && R10907 = 10 && R10908 = R10914 && R10909 = 10 && R10910 = R10914 && R10911 = 10 && R10912 = R10914 && R10913 = 10 && R94 + R91 + R112 + R109 != 0 && R10576 + R10573 + R10754 + R10751 != 0 && R16 < 1 && R17 < 1 && R20 < 1 && R70 + R69 < 1 && R72 + R71 < 1 && -1*R494 + -1*R493 < 1 && R496 + R495 < 1 && 0 < R10778 && 9 < R10914 && (R494 + R493 != 0 || R506 + R503 = 0 || (R499 + R497 = 0 && R500 + R498 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R504 + R501 = 0 && R505 + R502 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R8055 + R8053 = 0 && R8056 + R8054 = 0)) && (R494 + R493 != 0 || R506 + R503 = 0 || (R10574 + R10571 = 0 && R10575 + R10572 = 0)) && (R499 + R497 != 0 || R494 + R493 + -1*R500 + -1*R498 = 0 || R494 + R493 < 1) && (R504 + R501 != 0 || R494 + R493 + -1*R505 + -1*R502 = 0 || R494 + R493 < 1) && (R8055 + R8053 != 0 || R494 + R493 + -1*R8056 + -1*R8054 = 0 || R494 + R493 < 1) && (R10574 + R10571 != 0 || R494 + R493 + -1*R10575 + -1*R10572 = 0 || R494 + R493 < 1) && (R30 = 0 || (R10807 = 0 && R10808 = 0)) && (R30 = 0 || (R10811 = 0 && R10812 = 0)) && (R30 = 0 || (R10813 = 0 && R10814 = 0)) && (R30 = 0 || (R10815 = 0 && R10816 = 0)) && (R30 = 0 || (R10817 = 0 && R10818 = 0)) && (R30 = 0 || (R10823 = 0 && R10824 = 0)) && (R30 = 0 || (R10825 = 0 && R10826 = 0)) && (R32 = 0 || (R10829 = 0 && R10830 = 0)) && (R32 = 0 || (R10831 = 0 && R10832 = 0)) && (R32 = 0 || (R10833 = 0 && R10834 = 0)) && (R32 = 0 || (R10835 = 0 && R10836 = 0)) && (R32 = 0 || (R10837 = 0 && R10838 = 0)) && (R32 = 0 || (R10839 = 0 && R10840 = 0)) && (R32 = 0 || (R10841 = 0 && R10842 = 0)) && (R32 = 0 || (R10843 = 0 && R10844 = 0)) && (R32 = 0 || (R10845 = 0 && R10846 = 0)) && (R32 = 0 || (R10847 = 0 && R10848 = 0)) && (R32 = 0 || (R10849 = 0 && R10850 = 0)) && (R32 = 0 || (R10851 = 0 && R10852 = 0)) && (R32 = 0 || (R10853 = 0 && R10854 = 0)) && (R32 = 0 || (R10855 = 0 && R10856 = 0)) && (R78 + R75 = 0 || (R76 + R73 = 0 && R77 + R74 = 0)) && (R84 + R81 = 0 || (R82 + R79 = 0 && R83 + R80 = 0)) && (R84 + R81 = 0 || (R87 + R85 = 0 && R88 + R86 = 0)) && (R84 + R81 = 0 || (R92 + R89 = 0 && R93 + R90 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 = 0)) && (R106 + R103 = 0 || (R104 + R101 = 0 && R105 + R102 = 0)) && (R106 + R103 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R499 + R497 = 0 || R494 + R493 < 1) && (R504 + R501 = 0 || R494 + R493 < 1) && (R8055 + R8053 = 0 || R494 + R493 < 1) && (R10574 + R10571 = 0 || R494 + R493 < 1) && (R10582 + R10579 = 0 || (R10580 + R10577 = 0 && R10581 + R10578 = 0)) && (R10582 + R10579 = 0 || (R10752 + R10749 = 0 && R10753 + R10750 = 0));
// End of Parikh automata intersection problem
