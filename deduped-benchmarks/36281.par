// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R12, R2, R3, R4, R5, R6, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R7;
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R666 += 1 };
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s2 [46, 46] { R666 += 1 };
  s0 -> s3 [47, 47] { R666 += 1 };
  s0 -> s1 [48, 65535] { R666 += 1 };
  s1 -> s1 [0, 45] { R666 += 1 };
  s1 -> s2 [46, 46] { R666 += 1 };
  s1 -> s3 [47, 47] { R666 += 1 };
  s1 -> s1 [48, 65535] { R666 += 1 };
  s2 -> s1 [0, 45] { R666 += 1 };
  s2 -> s2 [46, 46] { R666 += 1 };
  s2 -> s3 [47, 47] { R666 += 1 };
  s2 -> s1 [48, 114] { R666 += 1 };
  s2 -> s8 [115, 115] { R666 += 1 };
  s2 -> s1 [116, 65535] { R666 += 1 };
  s3 -> s3 [0, 45] { R666 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R666 += 1 };
  s3 -> s3 [47, 65535] { R666 += 1 };
  s4 -> s3 [0, 45] { R666 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R666 += 1 };
  s4 -> s3 [47, 114] { R666 += 1 };
  s4 -> s5 [115, 115] { R666 += 1 };
  s4 -> s3 [116, 65535] { R666 += 1 };
  s5 -> s3 [0, 45] { R666 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R666 += 1 };
  s5 -> s3 [47, 110] { R666 += 1 };
  s5 -> s6 [111, 111] { R666 += 1 };
  s5 -> s3 [112, 65535] { R666 += 1 };
  s6 -> s3 [0, 45] { R666 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R666 += 1 };
  s6 -> s3 [47, 98] { R666 += 1 };
  s6 -> s7 [99, 99] { R666 += 1 };
  s6 -> s3 [100, 65535] { R666 += 1 };
  s7 -> s3 [0, 45] { R666 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R666 += 1 };
  s7 -> s3 [47, 106] { R666 += 1 };
  s7 -> s3 [108, 65535] { R666 += 1 };
  s8 -> s1 [0, 45] { R666 += 1 };
  s8 -> s2 [46, 46] { R666 += 1 };
  s8 -> s3 [47, 47] { R666 += 1 };
  s8 -> s1 [48, 110] { R666 += 1 };
  s8 -> s9 [111, 111] { R666 += 1 };
  s8 -> s1 [112, 65535] { R666 += 1 };
  s9 -> s1 [0, 45] { R666 += 1 };
  s9 -> s2 [46, 46] { R666 += 1 };
  s9 -> s3 [47, 47] { R666 += 1 };
  s9 -> s1 [48, 98] { R666 += 1 };
  s9 -> s10 [99, 99] { R666 += 1 };
  s9 -> s1 [100, 65535] { R666 += 1 };
  s10 -> s1 [0, 45] { R666 += 1 };
  s10 -> s2 [46, 46] { R666 += 1 };
  s10 -> s3 [47, 47] { R666 += 1 };
  s10 -> s1 [48, 106] { R666 += 1 };
  s10 -> s1 [108, 65535] { R666 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s0 -> s1 [0, 65535] { R668 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R668 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 64] { R670 += 1 };
  s0 -> s0 [0, 65535] { R669 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R670 += 1, R7 += 1 };
  s0 -> s3 [65, 65] { R670 += 1 };
  s0 -> s1 [66, 65535] { R670 += 1 };
  s1 -> s1 [0, 64] { R670 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R670 += 1 };
  s1 -> s1 [66, 65535] { R670 += 1 };
  s2 -> s1 [0, 64] { R670 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R670 += 1, R7 += 1 };
  s2 -> s3 [65, 65] { R670 += 1 };
  s2 -> s1 [66, 65535] { R670 += 1 };
  s3 -> s3 [0, 65535] { R670 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 46] { R672 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R672 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R671 += 1, R672 += 1 };
  s0 -> s3 [47, 47] { R672 += 1 };
  s0 -> s1 [48, 65535] { R672 += 1, R12 += 1 };
  s1 -> s1 [0, 46] { R672 += 1, R12 += 1 };
  s1 -> s3 [47, 47] { R672 += 1 };
  s1 -> s1 [48, 65535] { R672 += 1, R12 += 1 };
  s2 -> s1 [0, 46] { R672 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R672 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [47, 47] { R672 += 1 };
  s2 -> s1 [48, 65535] { R672 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R672 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R673 += 1, R674 += 1 };
  s0 -> s1 [0, 65535] { R674 += 1, R641 += 1, R642 += 1 };
  s0 -> s2 [0, 65535] { R674 += 1, R642 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R674 += 1, R641 += 1, R642 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R674 += 1, R642 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R674 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R674 += 1, R642 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R674 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R676 += 1, R646 += 1, R635 += 1 };
  s0 -> s2 [0, 65535] { R676 += 1, R645 += 1, R646 += 1 };
  s0 -> s0 [0, 65535] { R675 += 1, R676 += 1 };
  s1 -> s4 [0, 65535] { R676 += 1 };
  s1 -> s1 [0, 65535] { R676 += 1, R646 += 1, R635 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R676 += 1, R646 += 1, R635 += 1 };
  s2 -> s2 [0, 65535] { R676 += 1, R645 += 1, R646 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R676 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 107] { R678 += 1, R648 += 1 };
  s0 -> s0 [0, 65535] { R677 += 1, R678 += 1 };
  s0 -> s2 [0, 65535] { R678 += 1, R647 += 1, R648 += 1 };
  s0 -> s3 [108, 108] { R678 += 1, R648 += 1 };
  s0 -> s1 [109, 65535] { R678 += 1, R648 += 1 };
  s1 -> s1 [0, 65535] { R678 += 1, R648 += 1 };
  s1 -> s13 [0, 65535] { R678 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R678 += 1, R648 += 1 };
  s2 -> s2 [0, 65535] { R678 += 1, R647 += 1, R648 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R678 += 1, R648 += 1 };
  s2 -> s1 [109, 65535] { R678 += 1, R648 += 1 };
  s3 -> s1 [0, 110] { R678 += 1, R648 += 1 };
  s3 -> s3 [0, 65535] { R678 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R678 += 1, R648 += 1 };
  s3 -> s1 [112, 65535] { R678 += 1, R648 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R678 += 1, R648 += 1 };
  s5 -> s5 [0, 65535] { R678 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R678 += 1, R648 += 1 };
  s5 -> s1 [100, 65535] { R678 += 1, R648 += 1 };
  s6 -> s1 [0, 96] { R678 += 1, R648 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R678 += 1 };
  s6 -> s7 [97, 97] { R678 += 1, R648 += 1 };
  s6 -> s1 [98, 65535] { R678 += 1, R648 += 1 };
  s7 -> s1 [0, 107] { R678 += 1, R648 += 1 };
  s7 -> s7 [0, 65535] { R678 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R678 += 1, R648 += 1 };
  s7 -> s1 [109, 65535] { R678 += 1, R648 += 1 };
  s8 -> s1 [0, 103] { R678 += 1, R648 += 1 };
  s8 -> s8 [0, 65535] { R678 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R678 += 1, R648 += 1 };
  s8 -> s1 [105, 65535] { R678 += 1, R648 += 1 };
  s9 -> s1 [0, 110] { R678 += 1, R648 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R678 += 1 };
  s9 -> s10 [111, 111] { R678 += 1, R648 += 1 };
  s9 -> s1 [112, 65535] { R678 += 1, R648 += 1 };
  s10 -> s1 [0, 114] { R678 += 1, R648 += 1 };
  s10 -> s10 [0, 65535] { R678 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R678 += 1, R648 += 1 };
  s10 -> s1 [116, 65535] { R678 += 1, R648 += 1 };
  s11 -> s1 [0, 115] { R678 += 1, R648 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R678 += 1 };
  s11 -> s12 [116, 116] { R678 += 1, R648 += 1 };
  s11 -> s1 [117, 65535] { R678 += 1, R648 += 1 };
  s12 -> s1 [0, 65535] { R678 += 1, R648 += 1 };
  s13 -> s13 [0, 65535] { R678 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R679 += 1, R680 += 1 };
  s0 -> s1 [0, 65535] { R680 += 1, R649 += 1, R650 += 1 };
  s0 -> s2 [0, 65535] { R680 += 1, R650 += 1, R644 += 1 };
  s1 -> s1 [0, 65535] { R680 += 1, R649 += 1, R650 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R680 += 1, R650 += 1, R644 += 1 };
  s2 -> s3 [0, 65535] { R680 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R680 += 1, R650 += 1, R644 += 1 };
  s3 -> s3 [0, 65535] { R680 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 43] { R682 += 1, R652 += 1 };
  s0 -> s0 [0, 65535] { R681 += 1, R682 += 1 };
  s0 -> s2 [0, 65535] { R682 += 1, R651 += 1, R652 += 1 };
  s0 -> s1 [45, 63] { R682 += 1, R652 += 1 };
  s0 -> s1 [65, 65535] { R682 += 1, R652 += 1 };
  s1 -> s1 [0, 43] { R682 += 1, R652 += 1 };
  s1 -> s1 [0, 65535] { R682 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [45, 63] { R682 += 1, R652 += 1 };
  s1 -> s1 [65, 65535] { R682 += 1, R652 += 1 };
  s2 -> s1 [0, 43] { R682 += 1, R652 += 1 };
  s2 -> s2 [0, 65535] { R682 += 1, R651 += 1, R652 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [45, 63] { R682 += 1, R652 += 1 };
  s2 -> s1 [65, 65535] { R682 += 1, R652 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R683 += 1, R684 += 1 };
  s0 -> s1 [0, 65535] { R684 += 1, R654 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R684 += 1, R653 += 1, R654 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R684 += 1 };
  s1 -> s1 [0, 65535] { R684 += 1, R654 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R684 += 1, R654 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R684 += 1, R653 += 1, R654 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R684 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 92] { R686 += 1, R656 += 1 };
  s0 -> s0 [0, 65535] { R685 += 1, R686 += 1 };
  s0 -> s2 [0, 65535] { R686 += 1, R656 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R686 += 1, R655 += 1, R656 += 1 };
  s0 -> s4 [93, 93] { R686 += 1, R656 += 1 };
  s0 -> s1 [94, 65535] { R686 += 1, R656 += 1 };
  s1 -> s1 [0, 92] { R686 += 1, R656 += 1 };
  s1 -> s1 [0, 65535] { R686 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [93, 93] { R686 += 1, R656 += 1 };
  s1 -> s1 [94, 65535] { R686 += 1, R656 += 1 };
  s2 -> s1 [0, 92] { R686 += 1, R656 += 1 };
  s2 -> s2 [0, 65535] { R686 += 1, R656 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R686 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [93, 93] { R686 += 1, R656 += 1 };
  s2 -> s1 [94, 65535] { R686 += 1, R656 += 1 };
  s3 -> s1 [0, 92] { R686 += 1, R656 += 1 };
  s3 -> s2 [0, 65535] { R686 += 1, R656 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R686 += 1, R655 += 1, R656 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [93, 93] { R686 += 1, R656 += 1 };
  s3 -> s1 [94, 65535] { R686 += 1, R656 += 1 };
  s4 -> s4 [0, 65535] { R686 += 1, R656 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R686 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R688 += 1, R658 += 1, R637 += 1, R638 += 1 };
  s0 -> s2 [0, 65535] { R688 += 1, R657 += 1, R658 += 1 };
  s0 -> s0 [0, 65535] { R687 += 1, R688 += 1 };
  s0 -> s3 [91, 91] { R688 += 1, R658 += 1, R638 += 1 };
  s1 -> s1 [0, 65535] { R688 += 1, R658 += 1, R637 += 1, R638 += 1 };
  s1 -> s3 [91, 91] { R688 += 1, R658 += 1, R638 += 1 };
  s2 -> s1 [0, 65535] { R688 += 1, R658 += 1, R637 += 1, R638 += 1 };
  s2 -> s2 [0, 65535] { R688 += 1, R657 += 1, R658 += 1 };
  s2 -> s3 [91, 91] { R688 += 1, R658 += 1, R638 += 1 };
  s3 -> s4 [0, 65535] { R688 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R688 += 1, R658 += 1 };
  s4 -> s4 [0, 65535] { R688 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R690 += 1, R660 += 1, R639 += 1, R640 += 1 };
  s0 -> s0 [0, 65535] { R689 += 1, R690 += 1 };
  s0 -> s2 [0, 65535] { R690 += 1, R659 += 1, R660 += 1 };
  s0 -> s3 [0, 65535] { R690 += 1, R660 += 1, R640 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R690 += 1 };
  s1 -> s1 [0, 65535] { R690 += 1, R660 += 1, R639 += 1, R640 += 1 };
  s1 -> s3 [0, 65535] { R690 += 1, R660 += 1, R640 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R690 += 1, R660 += 1, R639 += 1, R640 += 1 };
  s2 -> s2 [0, 65535] { R690 += 1, R659 += 1, R660 += 1 };
  s2 -> s3 [0, 65535] { R690 += 1, R660 += 1, R640 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R690 += 1 };
  s3 -> s6 [0, 65535] { R690 += 1, R660 += 1 };
  s3 -> s3 [0, 65535] { R690 += 1, R660 += 1, R640 += 1, R5 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R690 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R690 += 1 };
  s6 -> s6 [0, 65535] { R690 += 1, R660 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R692 += 1, R662 += 1, R636 += 1 };
  s0 -> s2 [0, 65535] { R692 += 1, R661 += 1, R662 += 1 };
  s0 -> s0 [0, 65535] { R691 += 1, R692 += 1 };
  s1 -> s1 [0, 65535] { R692 += 1, R662 += 1, R636 += 1 };
  s1 -> s4 [0, 65535] { R692 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R692 += 1, R662 += 1, R636 += 1 };
  s2 -> s2 [0, 65535] { R692 += 1, R661 += 1, R662 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R692 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R693 += 1, R694 += 1 };
  s0 -> s1 [0, 65535] { R694 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R694 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 64] { R696 += 1, R664 += 1, R643 += 1 };
  s0 -> s0 [0, 65535] { R695 += 1, R696 += 1 };
  s0 -> s2 [0, 65535] { R696 += 1, R663 += 1, R664 += 1 };
  s0 -> s3 [65, 65] { R696 += 1, R664 += 1, R643 += 1 };
  s0 -> s4 [65, 65] { R696 += 1, R664 += 1, R643 += 1 };
  s0 -> s1 [66, 65535] { R696 += 1, R664 += 1, R643 += 1 };
  s1 -> s1 [0, 64] { R696 += 1, R664 += 1, R643 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R696 += 1 };
  s1 -> s3 [65, 65] { R696 += 1, R664 += 1, R643 += 1 };
  s1 -> s4 [65, 65] { R696 += 1, R664 += 1, R643 += 1 };
  s1 -> s1 [66, 65535] { R696 += 1, R664 += 1, R643 += 1 };
  s2 -> s1 [0, 64] { R696 += 1, R664 += 1, R643 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R696 += 1, R663 += 1, R664 += 1 };
  s2 -> s3 [65, 65] { R696 += 1, R664 += 1, R643 += 1 };
  s2 -> s4 [65, 65] { R696 += 1, R664 += 1, R643 += 1 };
  s2 -> s1 [66, 65535] { R696 += 1, R664 += 1, R643 += 1 };
  s3 -> s3 [0, 65535] { R696 += 1, R664 += 1, R643 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R696 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R696 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R696 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R3 = R650 && R4 = R696 && R11 = 0 && R12 = R660 && R637 = 0 && R641 - R660 = 1 && R642 = R650 && R645 = 0 && R646 = R650 && R647 = 0 && R648 = R650 && R649 = 0 && R651 = 0 && R652 = R660 && R653 = 0 && R654 = R660 && R655 = 0 && R656 = R660 && R657 = 0 && R658 = R660 && R659 = 0 && R665 = 10 && R666 = R696 && R667 = 10 && R668 = R696 && R669 = 10 && R670 = R696 && R671 = 10 && R672 = R696 && R673 = 10 && R674 = R696 && R675 = 10 && R676 = R696 && R677 = 10 && R678 = R696 && R679 = 10 && R680 = R696 && R681 = 10 && R682 = R696 && R683 = 10 && R684 = R696 && R685 = 10 && R686 = R696 && R687 = 10 && R688 = R696 && R689 = 10 && R690 = R696 && R691 = 10 && R692 = R696 && R693 = 10 && R694 = R696 && R695 = 10 && R1 != 0 && R2 != 0 && R644 + R643 != 0 && R6 < 1 && R7 < 1 && R660 < R650 && -1 < R660 && 9 < R696 && (R1 != R638 || R638 = 1 || R638 < 0) && (R638 != 1 || -1 < R1) && (R639 != 0 || ((R5 != 0 || ((R1 != R640 || R640 = 1 || R640 < 0) && (R1 = R640 || R640 = 1 || R1 < 1))) && (R5 = 0 || ((R1 != R640 || R640 = 1 || R640 < 0) && (R640 != 1 || -1 < R1) && (R1 = R640 || R640 = 1))))) && (R1 = R638 || R638 = 1) && (R636 = 0 || (R661 = 0 && R662 = 0)) && (R636 = 0 || (R663 = 0 && R664 = 0)) && (R639 = 0 || (R5 = 0 && R1 < 0));
// End of Parikh automata intersection problem
