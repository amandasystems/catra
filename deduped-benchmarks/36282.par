// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R8;
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 42] { R48 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [43, 43] { R48 += 1 };
  s0 -> s1 [44, 45] { R48 += 1 };
  s0 -> s3 [46, 46] { R48 += 1 };
  s0 -> s1 [48, 65535] { R48 += 1 };
  s1 -> s1 [0, 42] { R48 += 1 };
  s1 -> s2 [43, 43] { R48 += 1 };
  s1 -> s1 [44, 45] { R48 += 1 };
  s1 -> s3 [46, 46] { R48 += 1 };
  s1 -> s1 [48, 65535] { R48 += 1 };
  s2 -> s2 [0, 45] { R48 += 1 };
  s2 -> s9 [46, 46] { R48 += 1 };
  s2 -> s2 [48, 65535] { R48 += 1 };
  s3 -> s1 [0, 42] { R48 += 1 };
  s3 -> s2 [43, 43] { R48 += 1 };
  s3 -> s1 [44, 45] { R48 += 1 };
  s3 -> s3 [46, 46] { R48 += 1 };
  s3 -> s1 [48, 114] { R48 += 1 };
  s3 -> s4 [115, 115] { R48 += 1 };
  s3 -> s1 [116, 65535] { R48 += 1 };
  s4 -> s1 [0, 42] { R48 += 1 };
  s4 -> s2 [43, 43] { R48 += 1 };
  s4 -> s1 [44, 45] { R48 += 1 };
  s4 -> s3 [46, 46] { R48 += 1 };
  s4 -> s1 [48, 110] { R48 += 1 };
  s4 -> s5 [111, 111] { R48 += 1 };
  s4 -> s1 [112, 65535] { R48 += 1 };
  s5 -> s1 [0, 42] { R48 += 1 };
  s5 -> s2 [43, 43] { R48 += 1 };
  s5 -> s1 [44, 45] { R48 += 1 };
  s5 -> s3 [46, 46] { R48 += 1 };
  s5 -> s1 [48, 98] { R48 += 1 };
  s5 -> s6 [99, 99] { R48 += 1 };
  s5 -> s1 [100, 65535] { R48 += 1 };
  s6 -> s1 [0, 42] { R48 += 1 };
  s6 -> s2 [43, 43] { R48 += 1 };
  s6 -> s1 [44, 45] { R48 += 1 };
  s6 -> s3 [46, 46] { R48 += 1 };
  s6 -> s1 [48, 106] { R48 += 1 };
  s6 -> s7 [107, 107] { R48 += 1 };
  s6 -> s1 [108, 65535] { R48 += 1 };
  s7 -> s7 [0, 42] { R48 += 1 };
  s7 -> s8 [43, 43] { R48 += 1 };
  s7 -> s7 [44, 46] { R48 += 1 };
  s7 -> s7 [48, 65535] { R48 += 1 };
  s8 -> s8 [0, 46] { R48 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s8 [48, 65535] { R48 += 1 };
  s9 -> s2 [0, 45] { R48 += 1 };
  s9 -> s9 [46, 46] { R48 += 1 };
  s9 -> s2 [48, 114] { R48 += 1 };
  s9 -> s10 [115, 115] { R48 += 1 };
  s9 -> s2 [116, 65535] { R48 += 1 };
  s10 -> s2 [0, 45] { R48 += 1 };
  s10 -> s9 [46, 46] { R48 += 1 };
  s10 -> s2 [48, 110] { R48 += 1 };
  s10 -> s11 [111, 111] { R48 += 1 };
  s10 -> s2 [112, 65535] { R48 += 1 };
  s11 -> s2 [0, 45] { R48 += 1 };
  s11 -> s9 [46, 46] { R48 += 1 };
  s11 -> s2 [48, 98] { R48 += 1 };
  s11 -> s12 [99, 99] { R48 += 1 };
  s11 -> s2 [100, 65535] { R48 += 1 };
  s12 -> s2 [0, 45] { R48 += 1 };
  s12 -> s9 [46, 46] { R48 += 1 };
  s12 -> s2 [48, 106] { R48 += 1 };
  s12 -> s8 [107, 107] { R48 += 1 };
  s12 -> s2 [108, 65535] { R48 += 1 };
  accepting s8;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R50 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s1 -> s1 [0, 65535] { R50 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 42] { R52 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s2 [0, 65535] { R52 += 1, R4 += 1 };
  s0 -> s3 [43, 43] { R52 += 1 };
  s0 -> s1 [44, 65535] { R52 += 1 };
  s1 -> s1 [0, 42] { R52 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R52 += 1 };
  s1 -> s1 [44, 65535] { R52 += 1 };
  s2 -> s1 [0, 42] { R52 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R52 += 1, R4 += 1 };
  s2 -> s3 [43, 43] { R52 += 1 };
  s2 -> s1 [44, 65535] { R52 += 1 };
  s3 -> s3 [0, 65535] { R52 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 42] { R54 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R54 += 1, R25 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s0 -> s1 [44, 65535] { R54 += 1, R26 += 1 };
  s1 -> s1 [0, 42] { R54 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R54 += 1 };
  s1 -> s1 [44, 65535] { R54 += 1, R26 += 1 };
  s2 -> s1 [0, 42] { R54 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R54 += 1, R25 += 1, R26 += 1 };
  s2 -> s1 [44, 65535] { R54 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s1 [0, 65535] { R56 += 1, R27 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R56 += 1, R28 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R56 += 1, R27 += 1, R28 += 1 };
  s1 -> s2 [0, 65535] { R56 += 1, R28 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R56 += 1 };
  s2 -> s2 [0, 65535] { R56 += 1, R28 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R56 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 36] { R58 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R58 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [38, 43] { R58 += 1, R30 += 1 };
  s0 -> s1 [45, 62] { R58 += 1, R30 += 1 };
  s0 -> s1 [65, 65535] { R58 += 1, R30 += 1 };
  s1 -> s1 [0, 36] { R58 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R58 += 1 };
  s1 -> s1 [38, 43] { R58 += 1, R30 += 1 };
  s1 -> s1 [45, 62] { R58 += 1, R30 += 1 };
  s1 -> s1 [65, 65535] { R58 += 1, R30 += 1 };
  s2 -> s1 [0, 36] { R58 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R58 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [38, 43] { R58 += 1, R30 += 1 };
  s2 -> s1 [45, 62] { R58 += 1, R30 += 1 };
  s2 -> s1 [65, 65535] { R58 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R60 += 1, R31 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R60 += 1, R32 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R60 += 1, R31 += 1, R32 += 1 };
  s1 -> s2 [0, 65535] { R60 += 1, R32 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R60 += 1, R32 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R60 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R62 += 1, R33 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R62 += 1, R34 += 1, R17 += 1, R18 += 1 };
  s0 -> s3 [91, 91] { R62 += 1, R34 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R62 += 1, R33 += 1, R34 += 1 };
  s1 -> s2 [0, 65535] { R62 += 1, R34 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [91, 91] { R62 += 1, R34 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R62 += 1, R34 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [91, 91] { R62 += 1, R34 += 1, R18 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R62 += 1, R34 += 1 };
  s3 -> s5 [0, 65535] { R62 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R62 += 1 };
  accepting s3, s4, s5;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R64 += 1, R36 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R64 += 1, R35 += 1, R36 += 1 };
  s0 -> s3 [0, 65535] { R64 += 1, R36 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1, R36 += 1, R23 += 1, R24 += 1 };
  s1 -> s6 [0, 65535] { R64 += 1, R36 += 1 };
  s1 -> s4 [0, 65535] { R64 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R64 += 1, R36 += 1, R23 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R64 += 1, R35 += 1, R36 += 1 };
  s2 -> s3 [0, 65535] { R64 += 1, R36 += 1, R22 += 1, R23 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R64 += 1, R36 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535] { R64 += 1, R36 += 1, R22 += 1, R23 += 1 };
  s3 -> s4 [0, 65535] { R64 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R64 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R64 += 1, R36 += 1 };
  s6 -> s4 [0, 65535] { R64 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R66 += 1, R38 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R66 += 1, R38 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R66 += 1 };
  s2 -> s1 [0, 65535] { R66 += 1, R38 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R66 += 1, R37 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R66 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 36] { R68 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s1 [38, 42] { R68 += 1, R40 += 1 };
  s0 -> s3 [43, 43] { R68 += 1, R40 += 1 };
  s0 -> s4 [43, 43] { R68 += 1, R40 += 1 };
  s0 -> s1 [45, 62] { R68 += 1, R40 += 1 };
  s0 -> s1 [65, 65535] { R68 += 1, R40 += 1 };
  s1 -> s1 [0, 36] { R68 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [38, 42] { R68 += 1, R40 += 1 };
  s1 -> s3 [43, 43] { R68 += 1, R40 += 1 };
  s1 -> s4 [43, 43] { R68 += 1, R40 += 1 };
  s1 -> s1 [45, 62] { R68 += 1, R40 += 1 };
  s1 -> s1 [65, 65535] { R68 += 1, R40 += 1 };
  s2 -> s1 [0, 36] { R68 += 1, R40 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1, R39 += 1, R40 += 1 };
  s2 -> s1 [38, 42] { R68 += 1, R40 += 1 };
  s2 -> s3 [43, 43] { R68 += 1, R40 += 1 };
  s2 -> s4 [43, 43] { R68 += 1, R40 += 1 };
  s2 -> s1 [45, 62] { R68 += 1, R40 += 1 };
  s2 -> s1 [65, 65535] { R68 += 1, R40 += 1 };
  s3 -> s3 [0, 36] { R68 += 1, R40 += 1 };
  s3 -> s3 [0, 65535] { R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [38, 43] { R68 += 1, R40 += 1 };
  s3 -> s3 [45, 62] { R68 += 1, R40 += 1 };
  s3 -> s3 [65, 65535] { R68 += 1, R40 += 1 };
  s4 -> s4 [0, 65535] { R68 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 42] { R70 += 1, R42 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s3 [43, 43] { R70 += 1, R42 += 1, R13 += 1 };
  s0 -> s4 [43, 43] { R70 += 1, R42 += 1, R13 += 1 };
  s0 -> s1 [44, 65535] { R70 += 1, R42 += 1, R13 += 1 };
  s1 -> s1 [0, 42] { R70 += 1, R42 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R70 += 1, R42 += 1, R13 += 1 };
  s1 -> s4 [43, 43] { R70 += 1, R42 += 1, R13 += 1 };
  s1 -> s1 [44, 65535] { R70 += 1, R42 += 1, R13 += 1 };
  s2 -> s1 [0, 42] { R70 += 1, R42 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R70 += 1, R41 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R70 += 1, R42 += 1, R13 += 1 };
  s2 -> s4 [43, 43] { R70 += 1, R42 += 1, R13 += 1 };
  s2 -> s1 [44, 65535] { R70 += 1, R42 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R70 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R70 += 1, R42 += 1, R13 += 1 };
  s4 -> s5 [0, 65535] { R70 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R70 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 42] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R43 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s3 [43, 43] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s0 -> s4 [43, 43] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s0 -> s1 [44, 65535] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s1 -> s1 [0, 42] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R72 += 1 };
  s1 -> s3 [43, 43] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s1 -> s4 [43, 43] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s1 -> s1 [44, 65535] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s2 -> s1 [0, 42] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R72 += 1, R43 += 1, R44 += 1 };
  s2 -> s3 [43, 43] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [43, 43] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s2 -> s1 [44, 65535] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R72 += 1 };
  s3 -> s3 [0, 65535] { R72 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R72 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R72 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 42] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s3 [43, 43] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s0 -> s4 [43, 43] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s0 -> s1 [44, 65535] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s1 -> s1 [0, 42] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R74 += 1 };
  s1 -> s3 [43, 43] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s1 -> s4 [43, 43] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s1 -> s1 [44, 65535] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s2 -> s1 [0, 42] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R74 += 1, R45 += 1, R46 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s2 -> s4 [43, 43] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s2 -> s1 [44, 65535] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R74 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R74 += 1, R46 += 1, R19 += 1, R20 += 1 };
  s4 -> s5 [0, 65535] { R74 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R74 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R36 && R2 = R74 && R17 + R15 = 0 && R25 = 0 && R26 = R36 && R27 = 0 && R28 = R36 && R29 = 0 && R30 = R36 && R31 = 0 && R32 = R36 && R33 = 0 && R34 = R36 && R35 = 0 && R47 = 10 && R48 = R74 && R49 = 10 && R50 = R74 && R51 = 10 && R52 = R74 && R53 = 10 && R54 = R74 && R55 = 10 && R56 = R74 && R57 = 10 && R58 = R74 && R59 = 10 && R60 = R74 && R61 = 10 && R62 = R74 && R63 = 10 && R64 = R74 && R65 = 10 && R66 = R74 && R67 = 10 && R68 = R74 && R69 = 10 && R70 = R74 && R71 = 10 && R72 = R74 && R73 = 10 && R14 + R13 != 0 && R4 < 1 && 0 < R36 && 9 < R74 && (R14 + R13 + -1*R18 + -1*R16 != 0 || R18 + R16 = 1 || R18 + R16 < 0) && (R18 + R16 != 1 || -1*R14 + -1*R13 < 1) && (R24 + R21 != 0 || ((R22 + R19 != 0 || ((R14 + R13 + -1*R23 + -1*R20 != 0 || R23 + R20 = 1 || R23 + R20 < 0) && (R14 + R13 + -1*R23 + -1*R20 = 0 || R23 + R20 = 1 || R14 + R13 < 1))) && (R22 + R19 = 0 || R14 + R13 < 1))) && (R8 = 0 || (R37 = 0 && R38 = 0)) && (R8 = 0 || (R39 = 0 && R40 = 0)) && (R8 = 0 || (R41 = 0 && R42 = 0)) && (R8 = 0 || (R43 = 0 && R44 = 0)) && (R8 = 0 || (R45 = 0 && R46 = 0)) && (R14 + R13 + -1*R18 + -1*R16 = 0 || R18 + R16 = 1) && (R24 + R21 = 0 || (R22 + R19 = 0 && (R14 + R13 + -1*R23 + -1*R20 != 0 || R23 + R20 = 1 || R23 + R20 < 0) && (R23 + R20 != 1 || -1*R14 + -1*R13 < 1) && (R14 + R13 + -1*R23 + -1*R20 = 0 || R23 + R20 = 1)));
// End of Parikh automata intersection problem
