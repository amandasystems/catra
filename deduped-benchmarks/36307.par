// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R101, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R102, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R20, R21, R24, R35, R36, R37, R38, R39, R40, R41, R42, R5, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R7, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R9417, R9418, R9419, R9420, R9421, R9422, R9423, R9424, R9425, R9426, R9427, R9428, R9429, R9430, R9431, R9432, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P96
automaton P96_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10045 += 1, R10046 += 1 };
  s0 -> s1 [0, 65535] { R10046 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R10046 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R10048 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R10047 += 1, R10048 += 1 };
  s1 -> s1 [0, 65535] { R10048 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 89] { R10050 += 1 };
  s0 -> s0 [0, 65535] { R10049 += 1, R10050 += 1 };
  s0 -> s2 [0, 65535] { R10050 += 1, R88 += 1 };
  s0 -> s1 [91, 65535] { R10050 += 1 };
  s1 -> s1 [0, 89] { R10050 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R10050 += 1 };
  s2 -> s1 [0, 89] { R10050 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10050 += 1, R88 += 1 };
  s2 -> s1 [91, 65535] { R10050 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 88] { R10052 += 1 };
  s0 -> s2 [0, 65535] { R10052 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R10051 += 1, R10052 += 1 };
  s0 -> s1 [90, 65535] { R10052 += 1 };
  s1 -> s1 [0, 88] { R10052 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R10052 += 1 };
  s2 -> s1 [0, 88] { R10052 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10052 += 1, R90 += 1 };
  s2 -> s1 [90, 65535] { R10052 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 72] { R10054 += 1 };
  s0 -> s0 [0, 65535] { R10053 += 1, R10054 += 1 };
  s0 -> s2 [0, 65535] { R10054 += 1, R92 += 1 };
  s0 -> s1 [74, 65535] { R10054 += 1 };
  s1 -> s1 [0, 72] { R10054 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R10054 += 1 };
  s2 -> s1 [0, 72] { R10054 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10054 += 1, R92 += 1 };
  s2 -> s1 [74, 65535] { R10054 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10055 += 1, R10056 += 1 };
  s0 -> s1 [0, 65535] { R10056 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R10056 += 1, R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535] { R10056 += 1, R97 += 1, R98 += 1 };
  s1 -> s4 [0, 65535] { R10056 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10056 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R10056 += 1, R96 += 1, R97 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10056 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R10058 += 1 };
  s0 -> s0 [0, 65535] { R10057 += 1, R10058 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10058 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R10059 += 1, R10060 += 1 };
  s0 -> s1 [0, 65535] { R10060 += 1, R102 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R10060 += 1, R103 += 1, R104 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10060 += 1, R102 += 1, R103 += 1 };
  s1 -> s2 [0, 65535] { R10060 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10060 += 1 };
  s2 -> s2 [0, 65535] { R10060 += 1, R103 += 1, R104 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10060 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 107] { R10062 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R10061 += 1, R10062 += 1 };
  s0 -> s2 [0, 65535] { R10062 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [108, 108] { R10062 += 1, R108 += 1 };
  s0 -> s1 [109, 65535] { R10062 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R10062 += 1, R108 += 1 };
  s1 -> s13 [0, 65535] { R10062 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R10062 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R10062 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R10062 += 1, R108 += 1 };
  s2 -> s1 [109, 65535] { R10062 += 1, R108 += 1 };
  s3 -> s1 [0, 110] { R10062 += 1, R108 += 1 };
  s3 -> s3 [0, 65535] { R10062 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10062 += 1, R108 += 1 };
  s3 -> s1 [112, 65535] { R10062 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10062 += 1, R108 += 1 };
  s5 -> s5 [0, 65535] { R10062 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10062 += 1, R108 += 1 };
  s5 -> s1 [100, 65535] { R10062 += 1, R108 += 1 };
  s6 -> s1 [0, 96] { R10062 += 1, R108 += 1 };
  s6 -> s6 [0, 65535] { R10062 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10062 += 1, R108 += 1 };
  s6 -> s1 [98, 65535] { R10062 += 1, R108 += 1 };
  s7 -> s1 [0, 107] { R10062 += 1, R108 += 1 };
  s7 -> s7 [0, 65535] { R10062 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R10062 += 1, R108 += 1 };
  s7 -> s1 [109, 65535] { R10062 += 1, R108 += 1 };
  s8 -> s1 [0, 103] { R10062 += 1, R108 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10062 += 1 };
  s8 -> s9 [104, 104] { R10062 += 1, R108 += 1 };
  s8 -> s1 [105, 65535] { R10062 += 1, R108 += 1 };
  s9 -> s1 [0, 110] { R10062 += 1, R108 += 1 };
  s9 -> s9 [0, 65535] { R10062 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10062 += 1, R108 += 1 };
  s9 -> s1 [112, 65535] { R10062 += 1, R108 += 1 };
  s10 -> s1 [0, 114] { R10062 += 1, R108 += 1 };
  s10 -> s10 [0, 65535] { R10062 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10062 += 1, R108 += 1 };
  s10 -> s1 [116, 65535] { R10062 += 1, R108 += 1 };
  s11 -> s1 [0, 115] { R10062 += 1, R108 += 1 };
  s11 -> s11 [0, 65535] { R10062 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R10062 += 1, R108 += 1 };
  s11 -> s1 [117, 65535] { R10062 += 1, R108 += 1 };
  s12 -> s1 [0, 65535] { R10062 += 1, R108 += 1 };
  s13 -> s13 [0, 65535] { R10062 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R10063 += 1, R10064 += 1 };
  s0 -> s1 [0, 65535] { R10064 += 1, R112 += 1, R113 += 1 };
  s0 -> s2 [0, 65535] { R10064 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10064 += 1, R112 += 1, R113 += 1 };
  s1 -> s2 [0, 65535] { R10064 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10064 += 1 };
  s2 -> s2 [0, 65535] { R10064 += 1, R113 += 1, R114 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10064 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10065 += 1, R10066 += 1 };
  s0 -> s1 [0, 65535] { R10066 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R10066 += 1, R118 += 1, R119 += 1 };
  s1 -> s1 [0, 65535] { R10066 += 1, R119 += 1, R120 += 1 };
  s1 -> s4 [0, 65535] { R10066 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10066 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10066 += 1, R118 += 1, R119 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10066 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R10068 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R10067 += 1, R10068 += 1 };
  s0 -> s2 [0, 65535] { R10068 += 1, R123 += 1, R124 += 1 };
  s0 -> s3 [108, 108] { R10068 += 1, R124 += 1 };
  s0 -> s1 [109, 65535] { R10068 += 1, R124 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R10068 += 1 };
  s1 -> s1 [0, 65535] { R10068 += 1, R124 += 1 };
  s2 -> s1 [0, 107] { R10068 += 1, R124 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10068 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [108, 108] { R10068 += 1, R124 += 1 };
  s2 -> s1 [109, 65535] { R10068 += 1, R124 += 1 };
  s3 -> s1 [0, 110] { R10068 += 1, R124 += 1 };
  s3 -> s3 [0, 65535] { R10068 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R10068 += 1, R124 += 1 };
  s3 -> s1 [112, 65535] { R10068 += 1, R124 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10068 += 1, R124 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10068 += 1 };
  s5 -> s6 [99, 99] { R10068 += 1, R124 += 1 };
  s5 -> s1 [100, 65535] { R10068 += 1, R124 += 1 };
  s6 -> s1 [0, 96] { R10068 += 1, R124 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10068 += 1 };
  s6 -> s7 [97, 97] { R10068 += 1, R124 += 1 };
  s6 -> s1 [98, 65535] { R10068 += 1, R124 += 1 };
  s7 -> s1 [0, 107] { R10068 += 1, R124 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10068 += 1 };
  s7 -> s8 [108, 108] { R10068 += 1, R124 += 1 };
  s7 -> s1 [109, 65535] { R10068 += 1, R124 += 1 };
  s8 -> s1 [0, 103] { R10068 += 1, R124 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10068 += 1 };
  s8 -> s9 [104, 104] { R10068 += 1, R124 += 1 };
  s8 -> s1 [105, 65535] { R10068 += 1, R124 += 1 };
  s9 -> s1 [0, 110] { R10068 += 1, R124 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10068 += 1 };
  s9 -> s10 [111, 111] { R10068 += 1, R124 += 1 };
  s9 -> s1 [112, 65535] { R10068 += 1, R124 += 1 };
  s10 -> s1 [0, 114] { R10068 += 1, R124 += 1 };
  s10 -> s10 [0, 65535] { R10068 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10068 += 1, R124 += 1 };
  s10 -> s1 [116, 65535] { R10068 += 1, R124 += 1 };
  s11 -> s1 [0, 115] { R10068 += 1, R124 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10068 += 1 };
  s11 -> s12 [116, 116] { R10068 += 1, R124 += 1 };
  s11 -> s1 [117, 65535] { R10068 += 1, R124 += 1 };
  s12 -> s1 [0, 65535] { R10068 += 1, R124 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10068 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10070 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R10069 += 1, R10070 += 1 };
  s0 -> s2 [0, 65535] { R10070 += 1, R129 += 1, R130 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10070 += 1, R128 += 1, R129 += 1 };
  s1 -> s2 [0, 65535] { R10070 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10070 += 1 };
  s2 -> s2 [0, 65535] { R10070 += 1, R129 += 1, R130 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10070 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10072 += 1, R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R10072 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R10071 += 1, R10072 += 1 };
  s1 -> s1 [0, 65535] { R10072 += 1, R134 += 1, R135 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10072 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10072 += 1 };
  s2 -> s2 [0, 65535] { R10072 += 1, R135 += 1, R136 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10072 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10073 += 1, R10074 += 1 };
  s0 -> s1 [0, 65535] { R10074 += 1 };
  s1 -> s1 [0, 65535] { R10074 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R10076 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R10075 += 1, R10076 += 1 };
  s0 -> s2 [0, 65535] { R10076 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R10076 += 1, R141 += 1, R142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10076 += 1 };
  s2 -> s1 [0, 65535] { R10076 += 1, R141 += 1, R142 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10076 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10076 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R10077 += 1, R10078 += 1 };
  s0 -> s1 [0, 65535] { R10078 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10078 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 88] { R10080 += 1, R147 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R10079 += 1, R10080 += 1 };
  s0 -> s2 [0, 65535] { R10080 += 1, R146 += 1, R147 += 1 };
  s0 -> s3 [89, 89] { R10080 += 1, R147 += 1, R148 += 1 };
  s0 -> s4 [89, 89] { R10080 += 1, R147 += 1, R148 += 1 };
  s0 -> s1 [90, 65535] { R10080 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 88] { R10080 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 65535] { R10080 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [89, 89] { R10080 += 1, R147 += 1, R148 += 1 };
  s1 -> s4 [89, 89] { R10080 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [90, 65535] { R10080 += 1, R147 += 1, R148 += 1 };
  s2 -> s1 [0, 88] { R10080 += 1, R147 += 1, R148 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10080 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [89, 89] { R10080 += 1, R147 += 1, R148 += 1 };
  s2 -> s4 [89, 89] { R10080 += 1, R147 += 1, R148 += 1 };
  s2 -> s1 [90, 65535] { R10080 += 1, R147 += 1, R148 += 1 };
  s3 -> s3 [0, 65535] { R10080 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10080 += 1, R147 += 1, R148 += 1 };
  s4 -> s6 [0, 65535] { R10080 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10080 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s1 [0, 65535] { R10082 += 1, R153 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R10082 += 1, R152 += 1, R153 += 1 };
  s1 -> s4 [0, 65535] { R10082 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10082 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10082 += 1, R153 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R10082 += 1, R152 += 1, R153 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10082 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s0 -> s1 [0, 65535] { R10084 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10084 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 72] { R10086 += 1, R159 += 1, R160 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s2 [0, 65535] { R10086 += 1, R158 += 1, R159 += 1 };
  s0 -> s3 [73, 73] { R10086 += 1, R159 += 1, R160 += 1 };
  s0 -> s4 [73, 73] { R10086 += 1, R159 += 1, R160 += 1 };
  s0 -> s1 [74, 65535] { R10086 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [0, 72] { R10086 += 1, R159 += 1, R160 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10086 += 1 };
  s1 -> s3 [73, 73] { R10086 += 1, R159 += 1, R160 += 1 };
  s1 -> s4 [73, 73] { R10086 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [74, 65535] { R10086 += 1, R159 += 1, R160 += 1 };
  s2 -> s1 [0, 72] { R10086 += 1, R159 += 1, R160 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10086 += 1, R158 += 1, R159 += 1 };
  s2 -> s3 [73, 73] { R10086 += 1, R159 += 1, R160 += 1 };
  s2 -> s4 [73, 73] { R10086 += 1, R159 += 1, R160 += 1 };
  s2 -> s1 [74, 65535] { R10086 += 1, R159 += 1, R160 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10086 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10086 += 1 };
  s4 -> s4 [0, 65535] { R10086 += 1, R159 += 1, R160 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10086 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R10109 += 1, R10110 += 1 };
  s0 -> s1 [0, 65535] { R10110 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10110 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R10112 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R10111 += 1, R10112 += 1 };
  s0 -> s2 [65, 65] { R10112 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R10112 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R10112 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R10112 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10112 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R10112 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R10112 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10112 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10114 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R10113 += 1, R10114 += 1 };
  s0 -> s2 [65, 65] { R10114 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R10114 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R10114 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R10114 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10114 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R10114 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R10114 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10114 += 1, R87 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10116 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R10115 += 1, R10116 += 1 };
  s0 -> s2 [65, 65] { R10116 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R10116 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R10116 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R10116 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10116 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R10116 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R10116 += 1, R89 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10116 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10118 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R10117 += 1, R10118 += 1 };
  s0 -> s2 [65, 65] { R10118 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R10118 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R10118 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R10118 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10118 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R10118 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R10118 += 1, R91 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10118 += 1, R91 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10120 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R10119 += 1, R10120 += 1 };
  s0 -> s2 [65, 65] { R10120 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [65, 65] { R10120 += 1, R93 += 1, R94 += 1 };
  s0 -> s1 [66, 65535] { R10120 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 64] { R10120 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10120 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [65, 65] { R10120 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [66, 65535] { R10120 += 1, R93 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R10120 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10122 += 1 };
  s0 -> s0 [0, 65535] { R10121 += 1, R10122 += 1 };
  s0 -> s2 [65, 65] { R10122 += 1 };
  s0 -> s3 [65, 65] { R10122 += 1 };
  s0 -> s1 [66, 65535] { R10122 += 1 };
  s1 -> s1 [0, 64] { R10122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10122 += 1 };
  s1 -> s3 [65, 65] { R10122 += 1 };
  s1 -> s1 [66, 65535] { R10122 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10124 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R10123 += 1, R10124 += 1 };
  s0 -> s2 [65, 65] { R10124 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [65, 65] { R10124 += 1, R99 += 1, R100 += 1 };
  s0 -> s1 [66, 65535] { R10124 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 64] { R10124 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10124 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [65, 65] { R10124 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [66, 65535] { R10124 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10124 += 1, R99 += 1, R100 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R10126 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R10125 += 1, R10126 += 1 };
  s0 -> s2 [65, 65] { R10126 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [65, 65] { R10126 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R10126 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 64] { R10126 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10126 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [65, 65] { R10126 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [66, 65535] { R10126 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10126 += 1, R105 += 1, R106 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R10128 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R10127 += 1, R10128 += 1 };
  s0 -> s2 [65, 65] { R10128 += 1, R109 += 1, R110 += 1 };
  s0 -> s3 [65, 65] { R10128 += 1, R109 += 1, R110 += 1 };
  s0 -> s1 [66, 65535] { R10128 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 64] { R10128 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10128 += 1, R109 += 1, R110 += 1 };
  s1 -> s3 [65, 65] { R10128 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [66, 65535] { R10128 += 1, R109 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R10128 += 1, R109 += 1, R110 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10130 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R10129 += 1, R10130 += 1 };
  s0 -> s2 [65, 65] { R10130 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R10130 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R10130 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R10130 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10130 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R10130 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R10130 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R10130 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R10132 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R10131 += 1, R10132 += 1 };
  s0 -> s2 [65, 65] { R10132 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R10132 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R10132 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R10132 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10132 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R10132 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R10132 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10132 += 1, R121 += 1, R122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R10134 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R10133 += 1, R10134 += 1 };
  s0 -> s2 [65, 65] { R10134 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [65, 65] { R10134 += 1, R125 += 1, R126 += 1 };
  s0 -> s1 [66, 65535] { R10134 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R10134 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10134 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [65, 65] { R10134 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [66, 65535] { R10134 += 1, R125 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R10134 += 1, R125 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10136 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R10135 += 1, R10136 += 1 };
  s0 -> s2 [65, 65] { R10136 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R10136 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R10136 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R10136 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10136 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R10136 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R10136 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10136 += 1, R131 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R10138 += 1 };
  s0 -> s0 [0, 65535] { R10137 += 1, R10138 += 1 };
  s0 -> s2 [65, 65] { R10138 += 1 };
  s0 -> s3 [65, 65] { R10138 += 1 };
  s0 -> s1 [66, 65535] { R10138 += 1 };
  s1 -> s1 [0, 64] { R10138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10138 += 1 };
  s1 -> s3 [65, 65] { R10138 += 1 };
  s1 -> s1 [66, 65535] { R10138 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10138 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R10140 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R10139 += 1, R10140 += 1 };
  s0 -> s2 [65, 65] { R10140 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [65, 65] { R10140 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [66, 65535] { R10140 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R10140 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10140 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [65, 65] { R10140 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [66, 65535] { R10140 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10140 += 1, R137 += 1, R138 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R10142 += 1 };
  s0 -> s0 [0, 65535] { R10141 += 1, R10142 += 1 };
  s0 -> s2 [65, 65] { R10142 += 1 };
  s0 -> s3 [65, 65] { R10142 += 1 };
  s0 -> s1 [66, 65535] { R10142 += 1 };
  s1 -> s1 [0, 64] { R10142 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10142 += 1 };
  s1 -> s3 [65, 65] { R10142 += 1 };
  s1 -> s1 [66, 65535] { R10142 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R10142 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R10144 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R10143 += 1, R10144 += 1 };
  s0 -> s2 [65, 65] { R10144 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [65, 65] { R10144 += 1, R143 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R10144 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R10144 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10144 += 1, R143 += 1, R144 += 1 };
  s1 -> s3 [65, 65] { R10144 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R10144 += 1, R143 += 1, R144 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10144 += 1, R143 += 1, R144 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R10146 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R10145 += 1, R10146 += 1 };
  s0 -> s2 [65, 65] { R10146 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [65, 65] { R10146 += 1, R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R10146 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 64] { R10146 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10146 += 1, R149 += 1, R150 += 1 };
  s1 -> s3 [65, 65] { R10146 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [66, 65535] { R10146 += 1, R149 += 1, R150 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10146 += 1, R149 += 1, R150 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R10148 += 1 };
  s0 -> s0 [0, 65535] { R10147 += 1, R10148 += 1 };
  s0 -> s2 [65, 65] { R10148 += 1 };
  s0 -> s3 [65, 65] { R10148 += 1 };
  s0 -> s1 [66, 65535] { R10148 += 1 };
  s1 -> s1 [0, 64] { R10148 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10148 += 1 };
  s1 -> s3 [65, 65] { R10148 += 1 };
  s1 -> s1 [66, 65535] { R10148 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10148 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10150 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R10149 += 1, R10150 += 1 };
  s0 -> s2 [65, 65] { R10150 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [65, 65] { R10150 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [66, 65535] { R10150 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 64] { R10150 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R10150 += 1, R155 += 1, R156 += 1 };
  s1 -> s3 [65, 65] { R10150 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [66, 65535] { R10150 += 1, R155 += 1, R156 += 1 };
  s2 -> s2 [0, 65535] { R10150 += 1, R155 += 1, R156 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 43] { R10152 += 1 };
  s0 -> s0 [0, 65535] { R10151 += 1, R10152 += 1 };
  s0 -> s1 [45, 45] { R10152 += 1 };
  s0 -> s2 [46, 46] { R10152 += 1 };
  s0 -> s1 [48, 62] { R10152 += 1 };
  s0 -> s3 [65, 65] { R10152 += 1 };
  s0 -> s1 [66, 65535] { R10152 += 1 };
  s1 -> s1 [0, 43] { R10152 += 1 };
  s1 -> s1 [45, 45] { R10152 += 1 };
  s1 -> s2 [46, 46] { R10152 += 1 };
  s1 -> s1 [48, 62] { R10152 += 1 };
  s1 -> s3 [65, 65] { R10152 += 1 };
  s1 -> s1 [66, 65535] { R10152 += 1 };
  s2 -> s1 [0, 43] { R10152 += 1 };
  s2 -> s1 [45, 45] { R10152 += 1 };
  s2 -> s2 [46, 46] { R10152 += 1 };
  s2 -> s1 [48, 62] { R10152 += 1 };
  s2 -> s3 [65, 65] { R10152 += 1 };
  s2 -> s1 [66, 114] { R10152 += 1 };
  s2 -> s8 [115, 115] { R10152 += 1 };
  s2 -> s1 [116, 65535] { R10152 += 1 };
  s3 -> s3 [0, 43] { R10152 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10152 += 1 };
  s3 -> s4 [46, 46] { R10152 += 1 };
  s3 -> s3 [48, 62] { R10152 += 1 };
  s3 -> s3 [65, 65535] { R10152 += 1 };
  s4 -> s3 [0, 43] { R10152 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10152 += 1 };
  s4 -> s4 [46, 46] { R10152 += 1 };
  s4 -> s3 [48, 62] { R10152 += 1 };
  s4 -> s3 [65, 114] { R10152 += 1 };
  s4 -> s5 [115, 115] { R10152 += 1 };
  s4 -> s3 [116, 65535] { R10152 += 1 };
  s5 -> s3 [0, 43] { R10152 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10152 += 1 };
  s5 -> s4 [46, 46] { R10152 += 1 };
  s5 -> s3 [48, 62] { R10152 += 1 };
  s5 -> s3 [65, 110] { R10152 += 1 };
  s5 -> s6 [111, 111] { R10152 += 1 };
  s5 -> s3 [112, 65535] { R10152 += 1 };
  s6 -> s3 [0, 43] { R10152 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10152 += 1 };
  s6 -> s4 [46, 46] { R10152 += 1 };
  s6 -> s3 [48, 62] { R10152 += 1 };
  s6 -> s3 [65, 98] { R10152 += 1 };
  s6 -> s7 [99, 99] { R10152 += 1 };
  s6 -> s3 [100, 65535] { R10152 += 1 };
  s7 -> s3 [0, 43] { R10152 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10152 += 1 };
  s7 -> s4 [46, 46] { R10152 += 1 };
  s7 -> s3 [48, 62] { R10152 += 1 };
  s7 -> s3 [65, 106] { R10152 += 1 };
  s7 -> s3 [108, 65535] { R10152 += 1 };
  s8 -> s1 [0, 43] { R10152 += 1 };
  s8 -> s1 [45, 45] { R10152 += 1 };
  s8 -> s2 [46, 46] { R10152 += 1 };
  s8 -> s1 [48, 62] { R10152 += 1 };
  s8 -> s3 [65, 65] { R10152 += 1 };
  s8 -> s1 [66, 110] { R10152 += 1 };
  s8 -> s9 [111, 111] { R10152 += 1 };
  s8 -> s1 [112, 65535] { R10152 += 1 };
  s9 -> s1 [0, 43] { R10152 += 1 };
  s9 -> s1 [45, 45] { R10152 += 1 };
  s9 -> s2 [46, 46] { R10152 += 1 };
  s9 -> s1 [48, 62] { R10152 += 1 };
  s9 -> s3 [65, 65] { R10152 += 1 };
  s9 -> s1 [66, 98] { R10152 += 1 };
  s9 -> s10 [99, 99] { R10152 += 1 };
  s9 -> s1 [100, 65535] { R10152 += 1 };
  s10 -> s1 [0, 43] { R10152 += 1 };
  s10 -> s1 [45, 45] { R10152 += 1 };
  s10 -> s2 [46, 46] { R10152 += 1 };
  s10 -> s1 [48, 62] { R10152 += 1 };
  s10 -> s3 [65, 65] { R10152 += 1 };
  s10 -> s1 [66, 106] { R10152 += 1 };
  s10 -> s1 [108, 65535] { R10152 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R10153 += 1, R10154 += 1 };
  s0 -> s1 [0, 65535] { R10154 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10154 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 57] { R10156 += 1 };
  s0 -> s2 [0, 65535] { R10156 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R10155 += 1, R10156 += 1 };
  s0 -> s3 [58, 58] { R10156 += 1 };
  s0 -> s1 [59, 65535] { R10156 += 1 };
  s1 -> s1 [0, 57] { R10156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10156 += 1 };
  s1 -> s1 [59, 65535] { R10156 += 1 };
  s2 -> s1 [0, 57] { R10156 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10156 += 1, R20 += 1 };
  s2 -> s3 [58, 58] { R10156 += 1 };
  s2 -> s1 [59, 65535] { R10156 += 1 };
  s3 -> s3 [0, 65535] { R10156 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10158 += 1 };
  s0 -> s0 [0, 65535] { R10157 += 1, R10158 += 1 };
  s0 -> s2 [0, 65535] { R10158 += 1, R21 += 1 };
  s0 -> s3 [65, 65] { R10158 += 1 };
  s0 -> s1 [66, 65535] { R10158 += 1 };
  s1 -> s1 [0, 64] { R10158 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10158 += 1 };
  s1 -> s1 [66, 65535] { R10158 += 1 };
  s2 -> s1 [0, 64] { R10158 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10158 += 1, R21 += 1 };
  s2 -> s3 [65, 65] { R10158 += 1 };
  s2 -> s1 [66, 65535] { R10158 += 1 };
  s3 -> s3 [0, 65535] { R10158 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 90] { R10160 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R10159 += 1, R10160 += 1 };
  s0 -> s2 [0, 65535] { R10160 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [91, 91] { R10160 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R10160 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R10160 += 1 };
  s1 -> s1 [0, 65535] { R10160 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R10160 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10160 += 1, R39 += 1, R40 += 1 };
  s2 -> s3 [91, 91] { R10160 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R10160 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R10160 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10160 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s0 [0, 65535] { R10161 += 1, R10162 += 1 };
  s0 -> s1 [0, 65535] { R10162 += 1, R42 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R10162 += 1, R41 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R10162 += 1, R42 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10162 += 1 };
  s2 -> s1 [0, 65535] { R10162 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10162 += 1, R41 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10162 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10164 += 1, R10022 += 1 };
  s0 -> s2 [0, 65535] { R10164 += 1, R10021 += 1, R10022 += 1 };
  s0 -> s0 [0, 65535] { R10163 += 1, R10164 += 1 };
  s0 -> s1 [66, 65535] { R10164 += 1, R10022 += 1 };
  s1 -> s1 [0, 64] { R10164 += 1, R10022 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10164 += 1 };
  s1 -> s1 [66, 65535] { R10164 += 1, R10022 += 1 };
  s2 -> s1 [0, 64] { R10164 += 1, R10022 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10164 += 1, R10021 += 1, R10022 += 1 };
  s2 -> s1 [66, 65535] { R10164 += 1, R10022 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s0 [0, 65535] { R10165 += 1, R10166 += 1 };
  s0 -> s1 [0, 65535] { R10166 += 1, R10023 += 1, R10024 += 1 };
  s0 -> s2 [0, 65535] { R10166 += 1, R10024 += 1, R35 += 1 };
  s1 -> s1 [0, 65535] { R10166 += 1, R10023 += 1, R10024 += 1 };
  s1 -> s2 [0, 65535] { R10166 += 1, R10024 += 1, R35 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10166 += 1, R10024 += 1, R35 += 1 };
  s2 -> s3 [0, 65535] { R10166 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10166 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R10168 += 1, R10026 += 1 };
  s0 -> s2 [0, 65535] { R10168 += 1, R10025 += 1, R10026 += 1 };
  s0 -> s0 [0, 65535] { R10167 += 1, R10168 += 1 };
  s0 -> s1 [81, 65535] { R10168 += 1, R10026 += 1 };
  s1 -> s1 [0, 65] { R10168 += 1, R10026 += 1 };
  s1 -> s1 [0, 65535] { R10168 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R10168 += 1, R10026 += 1 };
  s2 -> s1 [0, 65] { R10168 += 1, R10026 += 1 };
  s2 -> s2 [0, 65535] { R10168 += 1, R10025 += 1, R10026 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R10168 += 1, R10026 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R10169 += 1, R10170 += 1 };
  s0 -> s1 [0, 65535] { R10170 += 1, R10027 += 1, R10028 += 1 };
  s0 -> s2 [0, 65535] { R10170 += 1, R10028 += 1, R598 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10170 += 1, R10027 += 1, R10028 += 1 };
  s1 -> s2 [0, 65535] { R10170 += 1, R10028 += 1, R598 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10170 += 1 };
  s2 -> s2 [0, 65535] { R10170 += 1, R10028 += 1, R598 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10170 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 80] { R10172 += 1, R10030 += 1 };
  s0 -> s2 [0, 65535] { R10172 += 1, R10029 += 1, R10030 += 1 };
  s0 -> s3 [0, 65535] { R10172 += 1, R10030 += 1, R600 += 1 };
  s0 -> s0 [0, 65535] { R10171 += 1, R10172 += 1 };
  s0 -> s1 [82, 65535] { R10172 += 1, R10030 += 1 };
  s1 -> s1 [0, 80] { R10172 += 1, R10030 += 1 };
  s1 -> s1 [0, 65535] { R10172 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R10172 += 1, R10030 += 1 };
  s2 -> s1 [0, 80] { R10172 += 1, R10030 += 1 };
  s2 -> s2 [0, 65535] { R10172 += 1, R10029 += 1, R10030 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10172 += 1, R10030 += 1, R600 += 1 };
  s2 -> s1 [82, 65535] { R10172 += 1, R10030 += 1 };
  s3 -> s1 [0, 80] { R10172 += 1, R10030 += 1 };
  s3 -> s4 [0, 65535] { R10172 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10172 += 1, R10030 += 1, R600 += 1 };
  s3 -> s1 [82, 65535] { R10172 += 1, R10030 += 1 };
  s4 -> s4 [0, 65535] { R10172 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 80] { R10174 += 1, R10032 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R10173 += 1, R10174 += 1 };
  s0 -> s2 [0, 65535] { R10174 += 1, R10031 += 1, R10032 += 1 };
  s0 -> s3 [0, 65535] { R10174 += 1, R10032 += 1, R603 += 1, R604 += 1 };
  s0 -> s1 [82, 65535] { R10174 += 1, R10032 += 1, R604 += 1 };
  s1 -> s1 [0, 80] { R10174 += 1, R10032 += 1, R604 += 1 };
  s1 -> s4 [0, 65535] { R10174 += 1 };
  s1 -> s1 [0, 65535] { R10174 += 1, R10032 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R10174 += 1, R10032 += 1, R604 += 1 };
  s2 -> s1 [0, 80] { R10174 += 1, R10032 += 1, R604 += 1 };
  s2 -> s2 [0, 65535] { R10174 += 1, R10031 += 1, R10032 += 1 };
  s2 -> s3 [0, 65535] { R10174 += 1, R10032 += 1, R603 += 1, R604 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R10174 += 1, R10032 += 1, R604 += 1 };
  s3 -> s1 [0, 80] { R10174 += 1, R10032 += 1, R604 += 1 };
  s3 -> s4 [0, 65535] { R10174 += 1 };
  s3 -> s3 [0, 65535] { R10174 += 1, R10032 += 1, R603 += 1, R604 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R10174 += 1, R10032 += 1, R604 += 1 };
  s4 -> s4 [0, 65535] { R10174 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R10176 += 1, R10034 += 1, R609 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R10176 += 1, R10033 += 1, R10034 += 1 };
  s0 -> s0 [0, 65535] { R10175 += 1, R10176 += 1 };
  s0 -> s3 [0, 65535] { R10176 += 1, R10034 += 1, R608 += 1, R609 += 1 };
  s1 -> s1 [0, 65535] { R10176 += 1, R10034 += 1, R609 += 1, R610 += 1 };
  s1 -> s6 [0, 65535] { R10176 += 1, R10034 += 1 };
  s1 -> s4 [0, 65535] { R10176 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10176 += 1, R10034 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10176 += 1, R10033 += 1, R10034 += 1 };
  s2 -> s3 [0, 65535] { R10176 += 1, R10034 += 1, R608 += 1, R609 += 1 };
  s3 -> s1 [0, 65535] { R10176 += 1, R10034 += 1, R609 += 1, R610 += 1 };
  s3 -> s4 [0, 65535] { R10176 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10176 += 1, R10034 += 1, R608 += 1, R609 += 1 };
  s4 -> s4 [0, 65535] { R10176 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10176 += 1, R10034 += 1 };
  s6 -> s4 [0, 65535] { R10176 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 81] { R10178 += 1, R10036 += 1, R9420 += 1 };
  s0 -> s1 [0, 65535] { R10178 += 1, R10036 += 1 };
  s0 -> s0 [0, 65535] { R10177 += 1, R10178 += 1 };
  s0 -> s2 [0, 65535] { R10178 += 1, R10035 += 1, R10036 += 1 };
  s0 -> s1 [91, 65535] { R10178 += 1, R10036 += 1, R9420 += 1 };
  s1 -> s1 [0, 81] { R10178 += 1, R10036 += 1, R9420 += 1 };
  s1 -> s1 [0, 65535] { R10178 += 1, R10036 += 1 };
  s1 -> s4 [0, 65535] { R10178 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R10178 += 1, R10036 += 1, R9420 += 1 };
  s2 -> s1 [0, 81] { R10178 += 1, R10036 += 1, R9420 += 1 };
  s2 -> s1 [0, 65535] { R10178 += 1, R10036 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10178 += 1, R10035 += 1, R10036 += 1 };
  s2 -> s1 [91, 65535] { R10178 += 1, R10036 += 1, R9420 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10178 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 65535] { R10180 += 1, R10037 += 1, R10038 += 1 };
  s0 -> s2 [0, 65535] { R10180 += 1, R10038 += 1, R9424 += 1, R9425 += 1 };
  s0 -> s3 [0, 65535] { R10180 += 1, R10038 += 1, R9425 += 1, R9426 += 1 };
  s0 -> s0 [0, 65535] { R10179 += 1, R10180 += 1 };
  s1 -> s1 [0, 65535] { R10180 += 1, R10037 += 1, R10038 += 1 };
  s1 -> s2 [0, 65535] { R10180 += 1, R10038 += 1, R9424 += 1, R9425 += 1 };
  s1 -> s3 [0, 65535] { R10180 += 1, R10038 += 1, R9425 += 1, R9426 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10180 += 1, R10038 += 1, R9425 += 1, R9426 += 1 };
  s2 -> s2 [0, 65535] { R10180 += 1, R10038 += 1, R9424 += 1, R9425 += 1 };
  s2 -> s5 [0, 65535] { R10180 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10180 += 1, R10038 += 1 };
  s3 -> s3 [0, 65535] { R10180 += 1, R10038 += 1, R9425 += 1, R9426 += 1 };
  s3 -> s5 [0, 65535] { R10180 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10180 += 1, R10038 += 1 };
  s4 -> s5 [0, 65535] { R10180 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10180 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R10182 += 1, R10039 += 1, R10040 += 1 };
  s0 -> s2 [0, 65535] { R10182 += 1, R10040 += 1, R9430 += 1, R9431 += 1 };
  s0 -> s0 [0, 65535] { R10181 += 1, R10182 += 1 };
  s0 -> s3 [0, 65535] { R10182 += 1, R10040 += 1, R9431 += 1, R9432 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10182 += 1, R10039 += 1, R10040 += 1 };
  s1 -> s2 [0, 65535] { R10182 += 1, R10040 += 1, R9430 += 1, R9431 += 1 };
  s1 -> s3 [0, 65535] { R10182 += 1, R10040 += 1, R9431 += 1, R9432 += 1 };
  s2 -> s4 [0, 65535] { R10182 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10182 += 1, R10040 += 1, R9430 += 1, R9431 += 1 };
  s2 -> s3 [0, 65535] { R10182 += 1, R10040 += 1, R9431 += 1, R9432 += 1 };
  s3 -> s4 [0, 65535] { R10182 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10182 += 1, R10040 += 1 };
  s3 -> s3 [0, 65535] { R10182 += 1, R10040 += 1, R9431 += 1, R9432 += 1 };
  s4 -> s4 [0, 65535] { R10182 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10182 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10182 += 1, R10040 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s0 [0, 65535] { R10183 += 1, R10184 += 1 };
  s0 -> s1 [0, 65535] { R10184 += 1, R10041 += 1, R10042 += 1 };
  s0 -> s2 [0, 65535] { R10184 += 1, R10042 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10184 += 1, R10041 += 1, R10042 += 1 };
  s1 -> s2 [0, 65535] { R10184 += 1, R10042 += 1 };
  s2 -> s3 [0, 65535] { R10184 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10184 += 1, R10042 += 1 };
  s3 -> s3 [0, 65535] { R10184 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s0 [0, 65535] { R10185 += 1, R10186 += 1 };
  s0 -> s1 [0, 65535] { R10186 += 1, R10043 += 1, R10044 += 1 };
  s0 -> s2 [0, 65535] { R10186 += 1, R10044 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10186 += 1, R10043 += 1, R10044 += 1 };
  s1 -> s2 [0, 65535] { R10186 += 1, R10044 += 1 };
  s2 -> s3 [0, 65535] { R10186 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10186 += 1, R10044 += 1 };
  s3 -> s3 [0, 65535] { R10186 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s0 [0, 65535] { R10187 += 1, R10188 += 1 };
  s0 -> s1 [0, 65535] { R10188 += 1, R10087 += 1, R10088 += 1 };
  s0 -> s2 [0, 65535] { R10188 += 1, R10088 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R10188 += 1, R10087 += 1, R10088 += 1 };
  s1 -> s2 [0, 65535] { R10188 += 1, R10088 += 1, R36 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10188 += 1 };
  s2 -> s2 [0, 65535] { R10188 += 1, R10088 += 1, R36 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10188 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R10190 += 1, R10090 += 1 };
  s0 -> s0 [0, 65535] { R10189 += 1, R10190 += 1 };
  s0 -> s2 [0, 65535] { R10190 += 1, R10089 += 1, R10090 += 1 };
  s0 -> s3 [65, 65] { R10190 += 1, R10090 += 1 };
  s0 -> s4 [65, 65] { R10190 += 1, R10090 += 1 };
  s0 -> s5 [81, 81] { R10190 += 1, R10090 += 1 };
  s0 -> s1 [82, 65535] { R10190 += 1, R10090 += 1 };
  s1 -> s1 [0, 64] { R10190 += 1, R10090 += 1 };
  s1 -> s3 [65, 65] { R10190 += 1, R10090 += 1 };
  s1 -> s4 [65, 65] { R10190 += 1, R10090 += 1 };
  s1 -> s5 [81, 81] { R10190 += 1, R10090 += 1 };
  s1 -> s1 [82, 65535] { R10190 += 1, R10090 += 1 };
  s2 -> s1 [0, 64] { R10190 += 1, R10090 += 1 };
  s2 -> s2 [0, 65535] { R10190 += 1, R10089 += 1, R10090 += 1 };
  s2 -> s3 [65, 65] { R10190 += 1, R10090 += 1 };
  s2 -> s4 [65, 65] { R10190 += 1, R10090 += 1 };
  s2 -> s5 [81, 81] { R10190 += 1, R10090 += 1 };
  s2 -> s1 [82, 65535] { R10190 += 1, R10090 += 1 };
  s4 -> s4 [0, 65] { R10190 += 1, R10090 += 1 };
  s4 -> s8 [81, 81] { R10190 += 1, R10090 += 1 };
  s4 -> s4 [82, 65535] { R10190 += 1, R10090 += 1 };
  s5 -> s5 [0, 64] { R10190 += 1, R10090 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10190 += 1 };
  s5 -> s7 [65, 65] { R10190 += 1, R10090 += 1 };
  s5 -> s8 [65, 65] { R10190 += 1, R10090 += 1 };
  s5 -> s5 [81, 65535] { R10190 += 1, R10090 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10190 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R10190 += 1, R10090 += 1 };
  s8 -> s8 [0, 65535] { R10190 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [81, 65535] { R10190 += 1, R10090 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R10192 += 1, R10092 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R10192 += 1, R10091 += 1, R10092 += 1 };
  s0 -> s0 [0, 65535] { R10191 += 1, R10192 += 1 };
  s0 -> s3 [65, 65] { R10192 += 1, R10092 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R10192 += 1, R10092 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R10192 += 1, R10092 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R10192 += 1, R10092 += 1, R597 += 1 };
  s1 -> s1 [0, 65535] { R10192 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10192 += 1, R10092 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R10192 += 1, R10092 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R10192 += 1, R10092 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R10192 += 1, R10092 += 1, R597 += 1 };
  s2 -> s2 [0, 65535] { R10192 += 1, R10091 += 1, R10092 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10192 += 1, R10092 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R10192 += 1, R10092 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R10192 += 1, R10092 += 1, R597 += 1 };
  s3 -> s6 [0, 65535] { R10192 += 1 };
  s3 -> s3 [0, 65535] { R10192 += 1, R10092 += 1, R597 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10192 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10192 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R10194 += 1, R10094 += 1, R599 += 1 };
  s0 -> s0 [0, 65535] { R10193 += 1, R10194 += 1 };
  s0 -> s2 [0, 65535] { R10194 += 1, R10093 += 1, R10094 += 1 };
  s0 -> s3 [65, 65] { R10194 += 1, R10094 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R10194 += 1, R10094 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R10194 += 1, R10094 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R10194 += 1, R10094 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R10194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10194 += 1, R10094 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R10194 += 1, R10094 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R10194 += 1, R10094 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R10194 += 1, R10094 += 1, R599 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10194 += 1, R10093 += 1, R10094 += 1 };
  s2 -> s3 [65, 65] { R10194 += 1, R10094 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R10194 += 1, R10094 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R10194 += 1, R10094 += 1, R599 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10194 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10194 += 1 };
  s4 -> s4 [0, 65535] { R10194 += 1, R10094 += 1, R599 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10194 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s0 -> s2 [0, 65535] { R10196 += 1, R10095 += 1, R10096 += 1 };
  s0 -> s0 [0, 65535] { R10195 += 1, R10196 += 1 };
  s0 -> s3 [65, 65] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s0 -> s4 [65, 65] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s0 -> s1 [66, 65535] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [0, 64] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10196 += 1 };
  s1 -> s3 [65, 65] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s1 -> s4 [65, 65] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [66, 65535] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s2 -> s1 [0, 64] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s2 -> s2 [0, 65535] { R10196 += 1, R10095 += 1, R10096 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s2 -> s4 [65, 65] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s2 -> s1 [66, 65535] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s3 -> s3 [0, 65535] { R10196 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10196 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10196 += 1, R10096 += 1, R601 += 1, R602 += 1 };
  s5 -> s5 [0, 65535] { R10196 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s0 -> s2 [0, 65535] { R10198 += 1, R10097 += 1, R10098 += 1 };
  s0 -> s0 [0, 65535] { R10197 += 1, R10198 += 1 };
  s0 -> s3 [65, 65] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s0 -> s4 [65, 65] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s0 -> s1 [66, 65535] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 64] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10198 += 1 };
  s1 -> s3 [65, 65] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [65, 65] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [66, 65535] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [0, 64] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s2 -> s2 [0, 65535] { R10198 += 1, R10097 += 1, R10098 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [65, 65] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [66, 65535] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s3 -> s3 [0, 65535] { R10198 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10198 += 1 };
  s4 -> s4 [0, 65535] { R10198 += 1, R10098 += 1, R605 += 1, R606 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10198 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s0 -> s3 [0, 65535] { R10200 += 1, R10099 += 1, R10100 += 1 };
  s0 -> s0 [0, 65535] { R10199 += 1, R10200 += 1 };
  s0 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s0 -> s5 [65, 65] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s6 [65, 65] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s0 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s0 -> s1 [66, 65535] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s2 [91, 107] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s0 -> s8 [108, 108] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s0 -> s2 [109, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s1 [0, 64] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s1 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s5 [65, 65] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s1 -> s6 [65, 65] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s1 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s1 [66, 65535] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s1 -> s2 [91, 107] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s8 [108, 108] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s1 -> s2 [109, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s2 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R10200 += 1 };
  s2 -> s4 [65, 65] { R10200 += 1, R10100 += 1 };
  s2 -> s7 [65, 65] { R10200 += 1, R10100 += 1 };
  s2 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s2 -> s2 [66, 65535] { R10200 += 1, R10100 += 1 };
  s2 -> s2 [91, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s1 [0, 64] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s3 [0, 65535] { R10200 += 1, R10099 += 1, R10100 += 1 };
  s3 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s5 [65, 65] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s6 [65, 65] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s1 [66, 65535] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s2 [91, 107] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s8 [108, 108] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s3 -> s2 [109, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [0, 65535] { R10200 += 1 };
  s5 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s5 -> s5 [0, 65535] { R10200 += 1, R10100 += 1, R9417 += 1, R9418 += 1 };
  s5 -> s7 [91, 107] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s5 -> s9 [108, 108] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s5 -> s7 [109, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s7 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s35 [0, 65535] { R10200 += 1 };
  s7 -> s7 [0, 65535] { R10200 += 1, R10100 += 1 };
  s7 -> s7 [91, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s8 [0, 64] { R10200 += 1, R10100 += 1 };
  s8 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s9 [65, 65] { R10200 += 1, R10100 += 1 };
  s8 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s10 [65, 65] { R10200 += 1, R10100 += 1 };
  s8 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s8 [66, 65535] { R10200 += 1, R10100 += 1 };
  s8 -> s2 [91, 110] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s11 [111, 111] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s8 -> s2 [112, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s9 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s9 -> s9 [0, 65535] { R10200 += 1, R10100 += 1 };
  s9 -> s7 [91, 110] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s9 -> s13 [111, 111] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s9 -> s7 [112, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s11 [0, 64] { R10200 += 1, R10100 += 1 };
  s11 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s12 [65, 65] { R10200 += 1, R10100 += 1 };
  s11 -> s13 [65, 65] { R10200 += 1, R10100 += 1 };
  s11 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s11 [66, 65535] { R10200 += 1, R10100 += 1 };
  s11 -> s2 [91, 98] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s14 [99, 99] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s11 -> s2 [100, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s13 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s13 -> s13 [0, 65535] { R10200 += 1, R10100 += 1 };
  s13 -> s7 [91, 98] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s13 -> s17 [99, 99] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s13 -> s7 [100, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s14 [0, 64] { R10200 += 1, R10100 += 1 };
  s14 -> s15 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s16 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s17 [65, 65] { R10200 += 1, R10100 += 1 };
  s14 -> s18 [65, 65] { R10200 += 1, R10100 += 1 };
  s14 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s14 [66, 65535] { R10200 += 1, R10100 += 1 };
  s14 -> s2 [91, 96] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s19 [97, 97] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s14 -> s2 [98, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s15 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s15 -> s15 [0, 65535] { R10200 += 1, R10100 += 1 };
  s15 -> s7 [91, 107] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s15 -> s22 [108, 108] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s15 -> s7 [109, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s17 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s17 -> s17 [0, 65535] { R10200 += 1, R10100 += 1 };
  s17 -> s7 [91, 96] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s17 -> s15 [97, 97] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s17 -> s7 [98, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s19 [0, 64] { R10200 += 1, R10100 += 1 };
  s19 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s15 [65, 65] { R10200 += 1, R10100 += 1 };
  s19 -> s16 [65, 65] { R10200 += 1, R10100 += 1 };
  s19 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s19 [66, 65535] { R10200 += 1, R10100 += 1 };
  s19 -> s2 [91, 107] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s20 [108, 108] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s19 -> s2 [109, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s20 [0, 64] { R10200 += 1, R10100 += 1 };
  s20 -> s21 [65, 65] { R10200 += 1, R10100 += 1 };
  s20 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s22 [65, 65] { R10200 += 1, R10100 += 1 };
  s20 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s20 [66, 65535] { R10200 += 1, R10100 += 1 };
  s20 -> s2 [91, 103] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s23 [104, 104] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s20 -> s2 [105, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s22 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s22 -> s22 [0, 65535] { R10200 += 1, R10100 += 1 };
  s22 -> s7 [91, 103] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s22 -> s25 [104, 104] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s22 -> s7 [105, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s23 [0, 64] { R10200 += 1, R10100 += 1 };
  s23 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s24 [65, 65] { R10200 += 1, R10100 += 1 };
  s23 -> s25 [65, 65] { R10200 += 1, R10100 += 1 };
  s23 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s23 [66, 65535] { R10200 += 1, R10100 += 1 };
  s23 -> s2 [91, 110] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s26 [111, 111] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s23 -> s2 [112, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s25 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s25 -> s25 [0, 65535] { R10200 += 1, R10100 += 1 };
  s25 -> s7 [91, 110] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s25 -> s28 [111, 111] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s25 -> s7 [112, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s26 [0, 64] { R10200 += 1, R10100 += 1 };
  s26 -> s27 [65, 65] { R10200 += 1, R10100 += 1 };
  s26 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s28 [65, 65] { R10200 += 1, R10100 += 1 };
  s26 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s26 [66, 65535] { R10200 += 1, R10100 += 1 };
  s26 -> s2 [91, 114] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s29 [115, 115] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s26 -> s2 [116, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s28 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s28 -> s28 [0, 65535] { R10200 += 1, R10100 += 1 };
  s28 -> s7 [91, 114] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s28 -> s30 [115, 115] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s28 -> s7 [116, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s29 [0, 64] { R10200 += 1, R10100 += 1 };
  s29 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s30 [65, 65] { R10200 += 1, R10100 += 1 };
  s29 -> s31 [65, 65] { R10200 += 1, R10100 += 1 };
  s29 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s29 [66, 65535] { R10200 += 1, R10100 += 1 };
  s29 -> s2 [91, 115] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s32 [116, 116] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s29 -> s2 [117, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s30 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s30 -> s30 [0, 65535] { R10200 += 1, R10100 += 1 };
  s30 -> s7 [91, 115] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s30 -> s33 [116, 116] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s30 -> s7 [117, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s32 -> s2 [0, 64] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s32 -> s4 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s32 -> s7 [65, 65] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s32 -> s2 [66, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s32 -> s2 [91, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s33 -> s7 [0, 81] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s33 -> s7 [91, 65535] { R10200 += 1, R10100 += 1, R9418 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10200 += 1 };
  accepting s4, s34, s2, s7, s35;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s0 -> s0 [0, 65535] { R10201 += 1, R10202 += 1 };
  s0 -> s2 [0, 65535] { R10202 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s3 [65, 65] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s0 -> s4 [65, 65] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s0 -> s1 [66, 65535] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s1 [0, 64] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10202 += 1 };
  s1 -> s3 [65, 65] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s4 [65, 65] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s1 [66, 65535] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s1 [0, 64] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10202 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s3 [65, 65] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s4 [65, 65] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s1 [66, 65535] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s3 -> s6 [0, 65535] { R10202 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10202 += 1, R10102 += 1, R9421 += 1, R9422 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10202 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10202 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s0 -> s2 [0, 65535] { R10204 += 1, R10103 += 1, R10104 += 1 };
  s0 -> s0 [0, 65535] { R10203 += 1, R10204 += 1 };
  s0 -> s3 [65, 65] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s0 -> s4 [65, 65] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s0 -> s1 [66, 65535] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s1 [0, 64] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10204 += 1 };
  s1 -> s3 [65, 65] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s4 [65, 65] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s1 [66, 65535] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s1 [0, 64] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10204 += 1, R10103 += 1, R10104 += 1 };
  s2 -> s3 [65, 65] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s4 [65, 65] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s1 [66, 65535] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s3 -> s6 [0, 65535] { R10204 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10204 += 1, R10104 += 1, R9427 += 1, R9428 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10204 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10204 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R10206 += 1, R10106 += 1 };
  s0 -> s2 [0, 65535] { R10206 += 1, R10105 += 1, R10106 += 1 };
  s0 -> s0 [0, 65535] { R10205 += 1, R10206 += 1 };
  s0 -> s3 [65, 65] { R10206 += 1, R10106 += 1 };
  s0 -> s4 [65, 65] { R10206 += 1, R10106 += 1 };
  s0 -> s1 [66, 65535] { R10206 += 1, R10106 += 1 };
  s1 -> s1 [0, 64] { R10206 += 1, R10106 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10206 += 1 };
  s1 -> s3 [65, 65] { R10206 += 1, R10106 += 1 };
  s1 -> s4 [65, 65] { R10206 += 1, R10106 += 1 };
  s1 -> s1 [66, 65535] { R10206 += 1, R10106 += 1 };
  s2 -> s1 [0, 64] { R10206 += 1, R10106 += 1 };
  s2 -> s2 [0, 65535] { R10206 += 1, R10105 += 1, R10106 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10206 += 1, R10106 += 1 };
  s2 -> s4 [65, 65] { R10206 += 1, R10106 += 1 };
  s2 -> s1 [66, 65535] { R10206 += 1, R10106 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10206 += 1 };
  s4 -> s5 [0, 65535] { R10206 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10206 += 1, R10106 += 1 };
  s5 -> s5 [0, 65535] { R10206 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s2 [0, 64] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s0 -> s0 [0, 65535] { R10207 += 1, R10208 += 1 };
  s0 -> s3 [0, 65535] { R10208 += 1, R10107 += 1, R10108 += 1 };
  s0 -> s4 [65, 65] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s5 [65, 65] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s6 [65, 65] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s0 -> s7 [65, 65] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s0 -> s2 [66, 80] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s0 -> s1 [66, 65535] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s8 [81, 81] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s0 -> s2 [82, 65535] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s1 -> s1 [0, 64] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s2 [0, 64] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s1 -> s4 [65, 65] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s5 [65, 65] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s6 [65, 65] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s1 -> s7 [65, 65] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s1 -> s2 [66, 80] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s1 -> s1 [66, 65535] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s1 -> s8 [81, 81] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s1 -> s2 [82, 65535] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s2 -> s2 [0, 64] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s2 -> s6 [65, 65] { R10208 += 1, R10108 += 1 };
  s2 -> s7 [65, 65] { R10208 += 1, R10108 += 1 };
  s2 -> s2 [66, 80] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s2 -> s2 [66, 65535] { R10208 += 1, R10108 += 1 };
  s2 -> s8 [81, 81] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s2 -> s2 [82, 65535] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s3 -> s1 [0, 64] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s2 [0, 64] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s3 -> s3 [0, 65535] { R10208 += 1, R10107 += 1, R10108 += 1 };
  s3 -> s4 [65, 65] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s5 [65, 65] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s6 [65, 65] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s3 -> s7 [65, 65] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s3 -> s2 [66, 80] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s3 -> s1 [66, 65535] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s3 -> s8 [81, 81] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s3 -> s2 [82, 65535] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s4 -> s7 [0, 80] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s4 -> s4 [0, 65535] { R10208 += 1, R10108 += 1, R10015 += 1, R10016 += 1 };
  s4 -> s10 [81, 81] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s4 -> s7 [82, 65535] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s7 -> s7 [0, 80] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s7 -> s7 [0, 65535] { R10208 += 1, R10108 += 1 };
  s7 -> s10 [81, 81] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s7 -> s7 [82, 65535] { R10208 += 1, R10108 += 1, R10016 += 1, R10017 += 1 };
  s8 -> s8 [0, 64] { R10208 += 1, R10108 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10208 += 1 };
  s8 -> s10 [65, 65] { R10208 += 1, R10108 += 1 };
  s8 -> s11 [65, 65] { R10208 += 1, R10108 += 1 };
  s8 -> s8 [66, 65535] { R10208 += 1, R10108 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10208 += 1 };
  s10 -> s10 [0, 65535] { R10208 += 1, R10108 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10208 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10208 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P90
automaton P90_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
constraint R5 = R10044 && R6 = R10208 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R86 + R85 = 0 && R598 + R597 + -1*R9425 + -1*R9422 = 0 && R603 + R601 = 0 && R604 + R602 + -1*R9425 + -1*R9422 = 0 && R608 + R605 = 0 && R609 + R606 + -1*R9425 + -1*R9422 = 0 && R9419 + R9417 = 0 && R9420 + R9418 + -1*R9425 + -1*R9422 = 0 && R9424 + R9421 = 0 && R10021 = 0 && R10022 = R10044 && R10023 = 0 && R10024 = R10044 && R10025 = 0 && R10026 = R10044 && R10027 = 0 && R10028 = R10044 && R10029 = 0 && R10030 = R10044 && R10031 = 0 && R10032 = R10044 && R10033 = 0 && R10034 = R10044 && R10035 = 0 && R10036 = R10044 && R10037 = 0 && R10038 = R10044 && R10039 = 0 && R10040 = R10044 && R10041 = 0 && R10042 = R10044 && R10043 = 0 && R10045 = 0 && R10046 = R10208 && R10047 = 0 && R10048 = R10208 && R10049 = 0 && R10050 = R10208 && R10051 = 0 && R10052 = R10208 && R10053 = 0 && R10054 = R10208 && R10055 = 0 && R10056 = R10208 && R10057 = 0 && R10058 = R10208 && R10059 = 0 && R10060 = R10208 && R10061 = 0 && R10062 = R10208 && R10063 = 0 && R10064 = R10208 && R10065 = 0 && R10066 = R10208 && R10067 = 0 && R10068 = R10208 && R10069 = 0 && R10070 = R10208 && R10071 = 0 && R10072 = R10208 && R10073 = 0 && R10074 = R10208 && R10075 = 0 && R10076 = R10208 && R10077 = 0 && R10078 = R10208 && R10079 = 0 && R10080 = R10208 && R10081 = 0 && R10082 = R10208 && R10083 = 0 && R10084 = R10208 && R10085 = 0 && R10086 = R10208 && R10089 = 0 && R10090 = 0 && R10099 = 0 && R10100 = 0 && R10107 = 0 && R10108 = 0 && R10151 = 10 && R10152 = R10208 && R10153 = 10 && R10154 = R10208 && R10155 = 10 && R10156 = R10208 && R10157 = 10 && R10158 = R10208 && R10159 = 10 && R10160 = R10208 && R10161 = 10 && R10162 = R10208 && R10163 = 10 && R10164 = R10208 && R10165 = 10 && R10166 = R10208 && R10167 = 10 && R10168 = R10208 && R10169 = 10 && R10170 = R10208 && R10171 = 10 && R10172 = R10208 && R10173 = 10 && R10174 = R10208 && R10175 = 10 && R10176 = R10208 && R10177 = 10 && R10178 = R10208 && R10179 = 10 && R10180 = R10208 && R10181 = 10 && R10182 = R10208 && R10183 = 10 && R10184 = R10208 && R10185 = 10 && R10186 = R10208 && R10187 = 10 && R10188 = R10208 && R10189 = 10 && R10190 = R10208 && R10191 = 10 && R10192 = R10208 && R10193 = 10 && R10194 = R10208 && R10195 = 10 && R10196 = R10208 && R10197 = 10 && R10198 = R10208 && R10199 = 10 && R10200 = R10208 && R10201 = 10 && R10202 = R10208 && R10203 = 10 && R10204 = R10208 && R10205 = 10 && R10206 = R10208 && R10207 = 10 && R114 + R111 + R148 + R145 != 0 && R130 + R127 + R160 + R157 != 0 && R9426 + R9423 + R10020 + R10017 != 0 && R20 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && R90 + R89 < 1 && R92 + R91 < 1 && R600 + R599 < 1 && -1*R9425 < R9422 && 0 < R10044 && 9 < R10208 && (R36 = 0 || (R10087 = 0 && R10088 = 0)) && (R36 = 0 || (R10091 = 0 && R10092 = 0)) && (R36 = 0 || (R10093 = 0 && R10094 = 0)) && (R36 = 0 || (R10095 = 0 && R10096 = 0)) && (R36 = 0 || (R10097 = 0 && R10098 = 0)) && (R36 = 0 || (R10101 = 0 && R10102 = 0)) && (R36 = 0 || (R10103 = 0 && R10104 = 0)) && (R36 = 0 || (R10105 = 0 && R10106 = 0)) && (R38 = 0 || (R10109 = 0 && R10110 = 0)) && (R38 = 0 || (R10111 = 0 && R10112 = 0)) && (R38 = 0 || (R10113 = 0 && R10114 = 0)) && (R38 = 0 || (R10115 = 0 && R10116 = 0)) && (R38 = 0 || (R10117 = 0 && R10118 = 0)) && (R38 = 0 || (R10119 = 0 && R10120 = 0)) && (R38 = 0 || (R10121 = 0 && R10122 = 0)) && (R38 = 0 || (R10123 = 0 && R10124 = 0)) && (R38 = 0 || (R10125 = 0 && R10126 = 0)) && (R38 = 0 || (R10127 = 0 && R10128 = 0)) && (R38 = 0 || (R10129 = 0 && R10130 = 0)) && (R38 = 0 || (R10131 = 0 && R10132 = 0)) && (R38 = 0 || (R10133 = 0 && R10134 = 0)) && (R38 = 0 || (R10135 = 0 && R10136 = 0)) && (R38 = 0 || (R10137 = 0 && R10138 = 0)) && (R38 = 0 || (R10139 = 0 && R10140 = 0)) && (R38 = 0 || (R10141 = 0 && R10142 = 0)) && (R38 = 0 || (R10143 = 0 && R10144 = 0)) && (R38 = 0 || (R10145 = 0 && R10146 = 0)) && (R38 = 0 || (R10147 = 0 && R10148 = 0)) && (R38 = 0 || (R10149 = 0 && R10150 = 0)) && (R98 + R95 = 0 || (R96 + R93 = 0 && R97 + R94 = 0)) && (R104 + R101 = 0 || (R102 + R99 = 0 && R103 + R100 = 0)) && (R104 + R101 = 0 || (R107 + R105 = 0 && R108 + R106 = 0)) && (R104 + R101 = 0 || (R112 + R109 = 0 && R113 + R110 = 0)) && (R120 + R117 = 0 || (R118 + R115 = 0 && R119 + R116 = 0)) && (R120 + R117 = 0 || (R123 + R121 = 0 && R124 + R122 = 0)) && (R120 + R117 = 0 || (R128 + R125 = 0 && R129 + R126 = 0)) && (R136 + R133 = 0 || (R134 + R131 = 0 && R135 + R132 = 0)) && (R142 + R139 = 0 || (R140 + R137 = 0 && R141 + R138 = 0)) && (R142 + R139 = 0 || (R146 + R143 = 0 && R147 + R144 = 0)) && (R154 + R151 = 0 || (R152 + R149 = 0 && R153 + R150 = 0)) && (R154 + R151 = 0 || (R158 + R155 = 0 && R159 + R156 = 0)) && (R9432 + R9429 = 0 || (R9430 + R9427 = 0 && R9431 + R9428 = 0)) && (R9432 + R9429 = 0 || (R10018 + R10015 = 0 && R10019 + R10016 = 0));
// End of Parikh automata intersection problem
