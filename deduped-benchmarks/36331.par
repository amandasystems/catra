// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R20, R21, R24, R2573, R2574, R2575, R2576, R2577, R2578, R2967, R2968, R2969, R2970, R2971, R2972, R2973, R2974, R2975, R2976, R2977, R2978, R2979, R2980, R2981, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R35, R36, R37, R38, R39, R40, R41, R42, R5, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R7, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P96
automaton P96_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2997 += 1, R2998 += 1 };
  s0 -> s1 [0, 65535] { R2998 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2998 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R3000 += 1, R86 += 1 };
  s0 -> s0 [0, 65535] { R2999 += 1, R3000 += 1 };
  s1 -> s1 [0, 65535] { R3000 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 89] { R3002 += 1 };
  s0 -> s2 [0, 65535] { R3002 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3001 += 1, R3002 += 1 };
  s0 -> s1 [91, 65535] { R3002 += 1 };
  s1 -> s1 [0, 89] { R3002 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R3002 += 1 };
  s2 -> s1 [0, 89] { R3002 += 1 };
  s2 -> s2 [0, 65535] { R3002 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R3002 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 88] { R3004 += 1 };
  s0 -> s2 [0, 65535] { R3004 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R3003 += 1, R3004 += 1 };
  s0 -> s1 [90, 65535] { R3004 += 1 };
  s1 -> s1 [0, 88] { R3004 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R3004 += 1 };
  s2 -> s1 [0, 88] { R3004 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3004 += 1, R90 += 1 };
  s2 -> s1 [90, 65535] { R3004 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 72] { R3006 += 1 };
  s0 -> s0 [0, 65535] { R3005 += 1, R3006 += 1 };
  s0 -> s2 [0, 65535] { R3006 += 1, R92 += 1 };
  s0 -> s1 [74, 65535] { R3006 += 1 };
  s1 -> s1 [0, 72] { R3006 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R3006 += 1 };
  s2 -> s1 [0, 72] { R3006 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3006 += 1, R92 += 1 };
  s2 -> s1 [74, 65535] { R3006 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R3007 += 1, R3008 += 1 };
  s0 -> s1 [0, 65535] { R3008 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R3008 += 1, R96 += 1, R97 += 1 };
  s1 -> s4 [0, 65535] { R3008 += 1 };
  s1 -> s1 [0, 65535] { R3008 += 1, R97 += 1, R98 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3008 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R3008 += 1, R96 += 1, R97 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3008 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3010 += 1 };
  s0 -> s0 [0, 65535] { R3009 += 1, R3010 += 1 };
  s1 -> s1 [0, 65535] { R3010 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3011 += 1, R3012 += 1 };
  s0 -> s1 [0, 65535] { R3012 += 1, R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R3012 += 1, R102 += 1, R103 += 1 };
  s1 -> s1 [0, 65535] { R3012 += 1, R103 += 1, R104 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3012 += 1 };
  s2 -> s1 [0, 65535] { R3012 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3012 += 1, R102 += 1, R103 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3012 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 107] { R3014 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R3014 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R3013 += 1, R3014 += 1 };
  s0 -> s3 [108, 108] { R3014 += 1, R108 += 1 };
  s0 -> s1 [109, 65535] { R3014 += 1, R108 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3014 += 1 };
  s1 -> s1 [0, 65535] { R3014 += 1, R108 += 1 };
  s2 -> s1 [0, 107] { R3014 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3014 += 1, R107 += 1, R108 += 1 };
  s2 -> s3 [108, 108] { R3014 += 1, R108 += 1 };
  s2 -> s1 [109, 65535] { R3014 += 1, R108 += 1 };
  s3 -> s1 [0, 110] { R3014 += 1, R108 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3014 += 1 };
  s3 -> s5 [111, 111] { R3014 += 1, R108 += 1 };
  s3 -> s1 [112, 65535] { R3014 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3014 += 1, R108 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3014 += 1 };
  s5 -> s6 [99, 99] { R3014 += 1, R108 += 1 };
  s5 -> s1 [100, 65535] { R3014 += 1, R108 += 1 };
  s6 -> s1 [0, 96] { R3014 += 1, R108 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3014 += 1 };
  s6 -> s7 [97, 97] { R3014 += 1, R108 += 1 };
  s6 -> s1 [98, 65535] { R3014 += 1, R108 += 1 };
  s7 -> s1 [0, 107] { R3014 += 1, R108 += 1 };
  s7 -> s7 [0, 65535] { R3014 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3014 += 1, R108 += 1 };
  s7 -> s1 [109, 65535] { R3014 += 1, R108 += 1 };
  s8 -> s1 [0, 103] { R3014 += 1, R108 += 1 };
  s8 -> s8 [0, 65535] { R3014 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3014 += 1, R108 += 1 };
  s8 -> s1 [105, 65535] { R3014 += 1, R108 += 1 };
  s9 -> s1 [0, 110] { R3014 += 1, R108 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3014 += 1 };
  s9 -> s10 [111, 111] { R3014 += 1, R108 += 1 };
  s9 -> s1 [112, 65535] { R3014 += 1, R108 += 1 };
  s10 -> s1 [0, 114] { R3014 += 1, R108 += 1 };
  s10 -> s10 [0, 65535] { R3014 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3014 += 1, R108 += 1 };
  s10 -> s1 [116, 65535] { R3014 += 1, R108 += 1 };
  s11 -> s1 [0, 115] { R3014 += 1, R108 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3014 += 1 };
  s11 -> s12 [116, 116] { R3014 += 1, R108 += 1 };
  s11 -> s1 [117, 65535] { R3014 += 1, R108 += 1 };
  s12 -> s1 [0, 65535] { R3014 += 1, R108 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3014 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R3015 += 1, R3016 += 1 };
  s0 -> s1 [0, 65535] { R3016 += 1, R112 += 1, R113 += 1 };
  s0 -> s2 [0, 65535] { R3016 += 1, R113 += 1, R114 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3016 += 1, R112 += 1, R113 += 1 };
  s1 -> s2 [0, 65535] { R3016 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [0, 65535] { R3016 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3016 += 1, R113 += 1, R114 += 1 };
  s3 -> s3 [0, 65535] { R3016 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R3018 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R3017 += 1, R3018 += 1 };
  s0 -> s2 [0, 65535] { R3018 += 1, R119 += 1, R120 += 1 };
  s1 -> s1 [0, 65535] { R3018 += 1, R118 += 1, R119 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3018 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3018 += 1 };
  s2 -> s2 [0, 65535] { R3018 += 1, R119 += 1, R120 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3018 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R3020 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R3020 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R3019 += 1, R3020 += 1 };
  s0 -> s3 [108, 108] { R3020 += 1, R124 += 1 };
  s0 -> s1 [109, 65535] { R3020 += 1, R124 += 1 };
  s1 -> s13 [0, 65535] { R3020 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3020 += 1, R124 += 1 };
  s2 -> s1 [0, 107] { R3020 += 1, R124 += 1 };
  s2 -> s2 [0, 65535] { R3020 += 1, R123 += 1, R124 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3020 += 1, R124 += 1 };
  s2 -> s1 [109, 65535] { R3020 += 1, R124 += 1 };
  s3 -> s1 [0, 110] { R3020 += 1, R124 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3020 += 1 };
  s3 -> s5 [111, 111] { R3020 += 1, R124 += 1 };
  s3 -> s1 [112, 65535] { R3020 += 1, R124 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3020 += 1, R124 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3020 += 1 };
  s5 -> s6 [99, 99] { R3020 += 1, R124 += 1 };
  s5 -> s1 [100, 65535] { R3020 += 1, R124 += 1 };
  s6 -> s1 [0, 96] { R3020 += 1, R124 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3020 += 1 };
  s6 -> s7 [97, 97] { R3020 += 1, R124 += 1 };
  s6 -> s1 [98, 65535] { R3020 += 1, R124 += 1 };
  s7 -> s1 [0, 107] { R3020 += 1, R124 += 1 };
  s7 -> s7 [0, 65535] { R3020 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3020 += 1, R124 += 1 };
  s7 -> s1 [109, 65535] { R3020 += 1, R124 += 1 };
  s8 -> s1 [0, 103] { R3020 += 1, R124 += 1 };
  s8 -> s8 [0, 65535] { R3020 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3020 += 1, R124 += 1 };
  s8 -> s1 [105, 65535] { R3020 += 1, R124 += 1 };
  s9 -> s1 [0, 110] { R3020 += 1, R124 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3020 += 1 };
  s9 -> s10 [111, 111] { R3020 += 1, R124 += 1 };
  s9 -> s1 [112, 65535] { R3020 += 1, R124 += 1 };
  s10 -> s1 [0, 114] { R3020 += 1, R124 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3020 += 1 };
  s10 -> s11 [115, 115] { R3020 += 1, R124 += 1 };
  s10 -> s1 [116, 65535] { R3020 += 1, R124 += 1 };
  s11 -> s1 [0, 115] { R3020 += 1, R124 += 1 };
  s11 -> s11 [0, 65535] { R3020 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3020 += 1, R124 += 1 };
  s11 -> s1 [117, 65535] { R3020 += 1, R124 += 1 };
  s12 -> s1 [0, 65535] { R3020 += 1, R124 += 1 };
  s13 -> s13 [0, 65535] { R3020 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3022 += 1, R128 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R3022 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R3021 += 1, R3022 += 1 };
  s1 -> s1 [0, 65535] { R3022 += 1, R128 += 1, R129 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3022 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3022 += 1, R129 += 1, R130 += 1 };
  s2 -> s4 [0, 65535] { R3022 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3022 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3024 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R3023 += 1, R3024 += 1 };
  s0 -> s2 [0, 65535] { R3024 += 1, R135 += 1, R136 += 1 };
  s1 -> s1 [0, 65535] { R3024 += 1, R134 += 1, R135 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3024 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3024 += 1 };
  s2 -> s2 [0, 65535] { R3024 += 1, R135 += 1, R136 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3024 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3025 += 1, R3026 += 1 };
  s0 -> s1 [0, 65535] { R3026 += 1 };
  s1 -> s1 [0, 65535] { R3026 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3028 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R3027 += 1, R3028 += 1 };
  s0 -> s2 [0, 65535] { R3028 += 1, R141 += 1, R142 += 1 };
  s1 -> s1 [0, 65535] { R3028 += 1, R140 += 1, R141 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3028 += 1, R141 += 1, R142 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3028 += 1 };
  s2 -> s2 [0, 65535] { R3028 += 1, R141 += 1, R142 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3028 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3029 += 1, R3030 += 1 };
  s0 -> s1 [0, 65535] { R3030 += 1 };
  s1 -> s1 [0, 65535] { R3030 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 88] { R3032 += 1, R147 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R3032 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R3031 += 1, R3032 += 1 };
  s0 -> s3 [89, 89] { R3032 += 1, R147 += 1, R148 += 1 };
  s0 -> s4 [89, 89] { R3032 += 1, R147 += 1, R148 += 1 };
  s0 -> s1 [90, 65535] { R3032 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 88] { R3032 += 1, R147 += 1, R148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3032 += 1 };
  s1 -> s3 [89, 89] { R3032 += 1, R147 += 1, R148 += 1 };
  s1 -> s4 [89, 89] { R3032 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [90, 65535] { R3032 += 1, R147 += 1, R148 += 1 };
  s2 -> s1 [0, 88] { R3032 += 1, R147 += 1, R148 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3032 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [89, 89] { R3032 += 1, R147 += 1, R148 += 1 };
  s2 -> s4 [89, 89] { R3032 += 1, R147 += 1, R148 += 1 };
  s2 -> s1 [90, 65535] { R3032 += 1, R147 += 1, R148 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3032 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3032 += 1 };
  s4 -> s4 [0, 65535] { R3032 += 1, R147 += 1, R148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3032 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3034 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R3033 += 1, R3034 += 1 };
  s0 -> s2 [0, 65535] { R3034 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [0, 65535] { R3034 += 1, R152 += 1, R153 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3034 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [0, 65535] { R3034 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3034 += 1, R153 += 1, R154 += 1 };
  s3 -> s3 [0, 65535] { R3034 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R3035 += 1, R3036 += 1 };
  s0 -> s1 [0, 65535] { R3036 += 1 };
  s1 -> s1 [0, 65535] { R3036 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 72] { R3038 += 1, R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R3038 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R3037 += 1, R3038 += 1 };
  s0 -> s3 [73, 73] { R3038 += 1, R159 += 1, R160 += 1 };
  s0 -> s4 [73, 73] { R3038 += 1, R159 += 1, R160 += 1 };
  s0 -> s1 [74, 65535] { R3038 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [0, 72] { R3038 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [0, 65535] { R3038 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [73, 73] { R3038 += 1, R159 += 1, R160 += 1 };
  s1 -> s4 [73, 73] { R3038 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [74, 65535] { R3038 += 1, R159 += 1, R160 += 1 };
  s2 -> s1 [0, 72] { R3038 += 1, R159 += 1, R160 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3038 += 1, R158 += 1, R159 += 1 };
  s2 -> s3 [73, 73] { R3038 += 1, R159 += 1, R160 += 1 };
  s2 -> s4 [73, 73] { R3038 += 1, R159 += 1, R160 += 1 };
  s2 -> s1 [74, 65535] { R3038 += 1, R159 += 1, R160 += 1 };
  s3 -> s3 [0, 65535] { R3038 += 1, R159 += 1, R160 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3038 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3038 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3062 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R3061 += 1, R3062 += 1 };
  s1 -> s1 [0, 65535] { R3062 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3064 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3063 += 1, R3064 += 1 };
  s0 -> s2 [65, 65] { R3064 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R3064 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R3064 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R3064 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3064 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R3064 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R3064 += 1, R85 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3064 += 1, R85 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3066 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3065 += 1, R3066 += 1 };
  s0 -> s2 [65, 65] { R3066 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R3066 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R3066 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R3066 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3066 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R3066 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R3066 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3066 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3068 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R3067 += 1, R3068 += 1 };
  s0 -> s2 [65, 65] { R3068 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R3068 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R3068 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R3068 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3068 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R3068 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R3068 += 1, R89 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3068 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3070 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R3069 += 1, R3070 += 1 };
  s0 -> s2 [65, 65] { R3070 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R3070 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R3070 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R3070 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3070 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R3070 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R3070 += 1, R91 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3070 += 1, R91 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3072 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R3071 += 1, R3072 += 1 };
  s0 -> s2 [65, 65] { R3072 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [65, 65] { R3072 += 1, R93 += 1, R94 += 1 };
  s0 -> s1 [66, 65535] { R3072 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 64] { R3072 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3072 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [65, 65] { R3072 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [66, 65535] { R3072 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3072 += 1, R93 += 1, R94 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3074 += 1 };
  s0 -> s0 [0, 65535] { R3073 += 1, R3074 += 1 };
  s0 -> s2 [65, 65] { R3074 += 1 };
  s0 -> s3 [65, 65] { R3074 += 1 };
  s0 -> s1 [66, 65535] { R3074 += 1 };
  s1 -> s1 [0, 64] { R3074 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3074 += 1 };
  s1 -> s3 [65, 65] { R3074 += 1 };
  s1 -> s1 [66, 65535] { R3074 += 1 };
  s2 -> s2 [0, 65535] { R3074 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3076 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R3075 += 1, R3076 += 1 };
  s0 -> s2 [65, 65] { R3076 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [65, 65] { R3076 += 1, R99 += 1, R100 += 1 };
  s0 -> s1 [66, 65535] { R3076 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 64] { R3076 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3076 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [65, 65] { R3076 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [66, 65535] { R3076 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3076 += 1, R99 += 1, R100 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3078 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R3077 += 1, R3078 += 1 };
  s0 -> s2 [65, 65] { R3078 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [65, 65] { R3078 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R3078 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 64] { R3078 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3078 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [65, 65] { R3078 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [66, 65535] { R3078 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3078 += 1, R105 += 1, R106 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3080 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R3079 += 1, R3080 += 1 };
  s0 -> s2 [65, 65] { R3080 += 1, R109 += 1, R110 += 1 };
  s0 -> s3 [65, 65] { R3080 += 1, R109 += 1, R110 += 1 };
  s0 -> s1 [66, 65535] { R3080 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 64] { R3080 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3080 += 1, R109 += 1, R110 += 1 };
  s1 -> s3 [65, 65] { R3080 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [66, 65535] { R3080 += 1, R109 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R3080 += 1, R109 += 1, R110 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3082 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3081 += 1, R3082 += 1 };
  s0 -> s2 [65, 65] { R3082 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3082 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3082 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3082 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3082 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3082 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3082 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3082 += 1, R115 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3084 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R3083 += 1, R3084 += 1 };
  s0 -> s2 [65, 65] { R3084 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R3084 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R3084 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R3084 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3084 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R3084 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R3084 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R3084 += 1, R121 += 1, R122 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3086 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R3085 += 1, R3086 += 1 };
  s0 -> s2 [65, 65] { R3086 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [65, 65] { R3086 += 1, R125 += 1, R126 += 1 };
  s0 -> s1 [66, 65535] { R3086 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R3086 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3086 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [65, 65] { R3086 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [66, 65535] { R3086 += 1, R125 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3086 += 1, R125 += 1, R126 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3088 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R3087 += 1, R3088 += 1 };
  s0 -> s2 [65, 65] { R3088 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R3088 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R3088 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R3088 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3088 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R3088 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R3088 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3088 += 1, R131 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3090 += 1 };
  s0 -> s0 [0, 65535] { R3089 += 1, R3090 += 1 };
  s0 -> s2 [65, 65] { R3090 += 1 };
  s0 -> s3 [65, 65] { R3090 += 1 };
  s0 -> s1 [66, 65535] { R3090 += 1 };
  s1 -> s1 [0, 64] { R3090 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3090 += 1 };
  s1 -> s3 [65, 65] { R3090 += 1 };
  s1 -> s1 [66, 65535] { R3090 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3090 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3092 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R3091 += 1, R3092 += 1 };
  s0 -> s2 [65, 65] { R3092 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [65, 65] { R3092 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [66, 65535] { R3092 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R3092 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3092 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [65, 65] { R3092 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [66, 65535] { R3092 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3092 += 1, R137 += 1, R138 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3094 += 1 };
  s0 -> s0 [0, 65535] { R3093 += 1, R3094 += 1 };
  s0 -> s2 [65, 65] { R3094 += 1 };
  s0 -> s3 [65, 65] { R3094 += 1 };
  s0 -> s1 [66, 65535] { R3094 += 1 };
  s1 -> s1 [0, 64] { R3094 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3094 += 1 };
  s1 -> s3 [65, 65] { R3094 += 1 };
  s1 -> s1 [66, 65535] { R3094 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3094 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R3096 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R3095 += 1, R3096 += 1 };
  s0 -> s2 [65, 65] { R3096 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [65, 65] { R3096 += 1, R143 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R3096 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R3096 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3096 += 1, R143 += 1, R144 += 1 };
  s1 -> s3 [65, 65] { R3096 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R3096 += 1, R143 += 1, R144 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3096 += 1, R143 += 1, R144 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3098 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R3097 += 1, R3098 += 1 };
  s0 -> s2 [65, 65] { R3098 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [65, 65] { R3098 += 1, R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R3098 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 64] { R3098 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3098 += 1, R149 += 1, R150 += 1 };
  s1 -> s3 [65, 65] { R3098 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [66, 65535] { R3098 += 1, R149 += 1, R150 += 1 };
  s2 -> s2 [0, 65535] { R3098 += 1, R149 += 1, R150 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R3100 += 1 };
  s0 -> s0 [0, 65535] { R3099 += 1, R3100 += 1 };
  s0 -> s2 [65, 65] { R3100 += 1 };
  s0 -> s3 [65, 65] { R3100 += 1 };
  s0 -> s1 [66, 65535] { R3100 += 1 };
  s1 -> s1 [0, 64] { R3100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3100 += 1 };
  s1 -> s3 [65, 65] { R3100 += 1 };
  s1 -> s1 [66, 65535] { R3100 += 1 };
  s2 -> s2 [0, 65535] { R3100 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3102 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R3101 += 1, R3102 += 1 };
  s0 -> s2 [65, 65] { R3102 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [65, 65] { R3102 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [66, 65535] { R3102 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 64] { R3102 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3102 += 1, R155 += 1, R156 += 1 };
  s1 -> s3 [65, 65] { R3102 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [66, 65535] { R3102 += 1, R155 += 1, R156 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3102 += 1, R155 += 1, R156 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 43] { R3104 += 1 };
  s0 -> s0 [0, 65535] { R3103 += 1, R3104 += 1 };
  s0 -> s1 [45, 45] { R3104 += 1 };
  s0 -> s2 [46, 46] { R3104 += 1 };
  s0 -> s1 [48, 62] { R3104 += 1 };
  s0 -> s3 [65, 65] { R3104 += 1 };
  s0 -> s1 [66, 65535] { R3104 += 1 };
  s1 -> s1 [0, 43] { R3104 += 1 };
  s1 -> s1 [45, 45] { R3104 += 1 };
  s1 -> s2 [46, 46] { R3104 += 1 };
  s1 -> s1 [48, 62] { R3104 += 1 };
  s1 -> s3 [65, 65] { R3104 += 1 };
  s1 -> s1 [66, 65535] { R3104 += 1 };
  s2 -> s1 [0, 43] { R3104 += 1 };
  s2 -> s1 [45, 45] { R3104 += 1 };
  s2 -> s2 [46, 46] { R3104 += 1 };
  s2 -> s1 [48, 62] { R3104 += 1 };
  s2 -> s3 [65, 65] { R3104 += 1 };
  s2 -> s1 [66, 114] { R3104 += 1 };
  s2 -> s8 [115, 115] { R3104 += 1 };
  s2 -> s1 [116, 65535] { R3104 += 1 };
  s3 -> s3 [0, 43] { R3104 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3104 += 1 };
  s3 -> s4 [46, 46] { R3104 += 1 };
  s3 -> s3 [48, 62] { R3104 += 1 };
  s3 -> s3 [65, 65535] { R3104 += 1 };
  s4 -> s3 [0, 43] { R3104 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3104 += 1 };
  s4 -> s4 [46, 46] { R3104 += 1 };
  s4 -> s3 [48, 62] { R3104 += 1 };
  s4 -> s3 [65, 114] { R3104 += 1 };
  s4 -> s5 [115, 115] { R3104 += 1 };
  s4 -> s3 [116, 65535] { R3104 += 1 };
  s5 -> s3 [0, 43] { R3104 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3104 += 1 };
  s5 -> s4 [46, 46] { R3104 += 1 };
  s5 -> s3 [48, 62] { R3104 += 1 };
  s5 -> s3 [65, 110] { R3104 += 1 };
  s5 -> s6 [111, 111] { R3104 += 1 };
  s5 -> s3 [112, 65535] { R3104 += 1 };
  s6 -> s3 [0, 43] { R3104 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3104 += 1 };
  s6 -> s4 [46, 46] { R3104 += 1 };
  s6 -> s3 [48, 62] { R3104 += 1 };
  s6 -> s3 [65, 98] { R3104 += 1 };
  s6 -> s7 [99, 99] { R3104 += 1 };
  s6 -> s3 [100, 65535] { R3104 += 1 };
  s7 -> s3 [0, 43] { R3104 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3104 += 1 };
  s7 -> s4 [46, 46] { R3104 += 1 };
  s7 -> s3 [48, 62] { R3104 += 1 };
  s7 -> s3 [65, 106] { R3104 += 1 };
  s7 -> s3 [108, 65535] { R3104 += 1 };
  s8 -> s1 [0, 43] { R3104 += 1 };
  s8 -> s1 [45, 45] { R3104 += 1 };
  s8 -> s2 [46, 46] { R3104 += 1 };
  s8 -> s1 [48, 62] { R3104 += 1 };
  s8 -> s3 [65, 65] { R3104 += 1 };
  s8 -> s1 [66, 110] { R3104 += 1 };
  s8 -> s9 [111, 111] { R3104 += 1 };
  s8 -> s1 [112, 65535] { R3104 += 1 };
  s9 -> s1 [0, 43] { R3104 += 1 };
  s9 -> s1 [45, 45] { R3104 += 1 };
  s9 -> s2 [46, 46] { R3104 += 1 };
  s9 -> s1 [48, 62] { R3104 += 1 };
  s9 -> s3 [65, 65] { R3104 += 1 };
  s9 -> s1 [66, 98] { R3104 += 1 };
  s9 -> s10 [99, 99] { R3104 += 1 };
  s9 -> s1 [100, 65535] { R3104 += 1 };
  s10 -> s1 [0, 43] { R3104 += 1 };
  s10 -> s1 [45, 45] { R3104 += 1 };
  s10 -> s2 [46, 46] { R3104 += 1 };
  s10 -> s1 [48, 62] { R3104 += 1 };
  s10 -> s3 [65, 65] { R3104 += 1 };
  s10 -> s1 [66, 106] { R3104 += 1 };
  s10 -> s1 [108, 65535] { R3104 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R3105 += 1, R3106 += 1 };
  s0 -> s1 [0, 65535] { R3106 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3106 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 57] { R3108 += 1 };
  s0 -> s0 [0, 65535] { R3107 += 1, R3108 += 1 };
  s0 -> s2 [0, 65535] { R3108 += 1, R20 += 1 };
  s0 -> s3 [58, 58] { R3108 += 1 };
  s0 -> s1 [59, 65535] { R3108 += 1 };
  s1 -> s1 [0, 57] { R3108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3108 += 1 };
  s1 -> s1 [59, 65535] { R3108 += 1 };
  s2 -> s1 [0, 57] { R3108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3108 += 1, R20 += 1 };
  s2 -> s3 [58, 58] { R3108 += 1 };
  s2 -> s1 [59, 65535] { R3108 += 1 };
  s3 -> s3 [0, 65535] { R3108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3110 += 1 };
  s0 -> s0 [0, 65535] { R3109 += 1, R3110 += 1 };
  s0 -> s2 [0, 65535] { R3110 += 1, R21 += 1 };
  s0 -> s3 [65, 65] { R3110 += 1 };
  s0 -> s1 [66, 65535] { R3110 += 1 };
  s1 -> s1 [0, 64] { R3110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3110 += 1 };
  s1 -> s1 [66, 65535] { R3110 += 1 };
  s2 -> s1 [0, 64] { R3110 += 1 };
  s2 -> s2 [0, 65535] { R3110 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3110 += 1 };
  s2 -> s1 [66, 65535] { R3110 += 1 };
  s3 -> s3 [0, 65535] { R3110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 90] { R3112 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R3112 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3111 += 1, R3112 += 1 };
  s0 -> s3 [91, 91] { R3112 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R3112 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R3112 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3112 += 1 };
  s2 -> s1 [0, 90] { R3112 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3112 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3112 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R3112 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R3112 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3112 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R3114 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R3113 += 1, R3114 += 1 };
  s0 -> s2 [0, 65535] { R3114 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3114 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R3114 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R3114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3114 += 1, R42 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R3114 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3116 += 1, R2974 += 1 };
  s0 -> s0 [0, 65535] { R3115 += 1, R3116 += 1 };
  s0 -> s2 [0, 65535] { R3116 += 1, R2973 += 1, R2974 += 1 };
  s0 -> s1 [66, 65535] { R3116 += 1, R2974 += 1 };
  s1 -> s1 [0, 64] { R3116 += 1, R2974 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3116 += 1 };
  s1 -> s1 [66, 65535] { R3116 += 1, R2974 += 1 };
  s2 -> s1 [0, 64] { R3116 += 1, R2974 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3116 += 1, R2973 += 1, R2974 += 1 };
  s2 -> s1 [66, 65535] { R3116 += 1, R2974 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R3118 += 1, R2976 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R3118 += 1, R2975 += 1, R2976 += 1 };
  s0 -> s0 [0, 65535] { R3117 += 1, R3118 += 1 };
  s1 -> s1 [0, 65535] { R3118 += 1, R2976 += 1, R35 += 1 };
  s1 -> s4 [0, 65535] { R3118 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3118 += 1, R2976 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R3118 += 1, R2975 += 1, R2976 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3118 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R3120 += 1, R2978 += 1 };
  s0 -> s2 [0, 65535] { R3120 += 1, R2977 += 1, R2978 += 1 };
  s0 -> s0 [0, 65535] { R3119 += 1, R3120 += 1 };
  s0 -> s1 [81, 65535] { R3120 += 1, R2978 += 1 };
  s1 -> s1 [0, 65] { R3120 += 1, R2978 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3120 += 1 };
  s1 -> s1 [81, 65535] { R3120 += 1, R2978 += 1 };
  s2 -> s1 [0, 65] { R3120 += 1, R2978 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3120 += 1, R2977 += 1, R2978 += 1 };
  s2 -> s1 [81, 65535] { R3120 += 1, R2978 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R3122 += 1, R2980 += 1, R598 += 1 };
  s0 -> s0 [0, 65535] { R3121 += 1, R3122 += 1 };
  s0 -> s2 [0, 65535] { R3122 += 1, R2979 += 1, R2980 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3122 += 1, R2980 += 1, R598 += 1 };
  s1 -> s4 [0, 65535] { R3122 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3122 += 1, R2980 += 1, R598 += 1 };
  s2 -> s2 [0, 65535] { R3122 += 1, R2979 += 1, R2980 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3122 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 80] { R3124 += 1, R2982 += 1 };
  s0 -> s2 [0, 65535] { R3124 += 1, R2982 += 1, R600 += 1 };
  s0 -> s0 [0, 65535] { R3123 += 1, R3124 += 1 };
  s0 -> s3 [0, 65535] { R3124 += 1, R2981 += 1, R2982 += 1 };
  s0 -> s1 [82, 65535] { R3124 += 1, R2982 += 1 };
  s1 -> s1 [0, 80] { R3124 += 1, R2982 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3124 += 1 };
  s1 -> s1 [82, 65535] { R3124 += 1, R2982 += 1 };
  s2 -> s1 [0, 80] { R3124 += 1, R2982 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3124 += 1, R2982 += 1, R600 += 1 };
  s2 -> s5 [0, 65535] { R3124 += 1 };
  s2 -> s1 [82, 65535] { R3124 += 1, R2982 += 1 };
  s3 -> s1 [0, 80] { R3124 += 1, R2982 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3124 += 1, R2982 += 1, R600 += 1 };
  s3 -> s3 [0, 65535] { R3124 += 1, R2981 += 1, R2982 += 1 };
  s3 -> s1 [82, 65535] { R3124 += 1, R2982 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3124 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 80] { R3126 += 1, R2984 += 1, R604 += 1 };
  s0 -> s2 [0, 65535] { R3126 += 1, R2984 += 1, R603 += 1, R604 += 1 };
  s0 -> s3 [0, 65535] { R3126 += 1, R2983 += 1, R2984 += 1 };
  s0 -> s0 [0, 65535] { R3125 += 1, R3126 += 1 };
  s0 -> s1 [82, 65535] { R3126 += 1, R2984 += 1, R604 += 1 };
  s1 -> s1 [0, 80] { R3126 += 1, R2984 += 1, R604 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3126 += 1 };
  s1 -> s1 [0, 65535] { R3126 += 1, R2984 += 1 };
  s1 -> s1 [82, 65535] { R3126 += 1, R2984 += 1, R604 += 1 };
  s2 -> s1 [0, 80] { R3126 += 1, R2984 += 1, R604 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3126 += 1 };
  s2 -> s2 [0, 65535] { R3126 += 1, R2984 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [82, 65535] { R3126 += 1, R2984 += 1, R604 += 1 };
  s3 -> s1 [0, 80] { R3126 += 1, R2984 += 1, R604 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3126 += 1, R2984 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R3126 += 1, R2983 += 1, R2984 += 1 };
  s3 -> s1 [82, 65535] { R3126 += 1, R2984 += 1, R604 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3126 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R3128 += 1, R2986 += 1, R608 += 1, R609 += 1 };
  s0 -> s2 [0, 65535] { R3128 += 1, R2986 += 1, R609 += 1, R610 += 1 };
  s0 -> s3 [0, 65535] { R3128 += 1, R2985 += 1, R2986 += 1 };
  s0 -> s0 [0, 65535] { R3127 += 1, R3128 += 1 };
  s1 -> s1 [0, 65535] { R3128 += 1, R2986 += 1, R608 += 1, R609 += 1 };
  s1 -> s2 [0, 65535] { R3128 += 1, R2986 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3128 += 1 };
  s2 -> s2 [0, 65535] { R3128 += 1, R2986 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3128 += 1 };
  s2 -> s6 [0, 65535] { R3128 += 1, R2986 += 1 };
  s3 -> s1 [0, 65535] { R3128 += 1, R2986 += 1, R608 += 1, R609 += 1 };
  s3 -> s2 [0, 65535] { R3128 += 1, R2986 += 1, R609 += 1, R610 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3128 += 1, R2985 += 1, R2986 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3128 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3128 += 1 };
  s6 -> s6 [0, 65535] { R3128 += 1, R2986 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s0 -> s2 [0, 65535] { R3130 += 1, R2988 += 1, R613 += 1, R614 += 1 };
  s0 -> s0 [0, 65535] { R3129 += 1, R3130 += 1 };
  s0 -> s3 [0, 65535] { R3130 += 1, R2987 += 1, R2988 += 1 };
  s0 -> s1 [91, 107] { R3130 += 1, R2988 += 1, R614 += 1 };
  s0 -> s4 [108, 108] { R3130 += 1, R2988 += 1, R614 += 1 };
  s0 -> s1 [109, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s1 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s1 -> s1 [0, 65535] { R3130 += 1, R2988 += 1 };
  s1 -> s5 [0, 65535] { R3130 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s2 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s2 -> s2 [0, 65535] { R3130 += 1, R2988 += 1, R613 += 1, R614 += 1 };
  s2 -> s5 [0, 65535] { R3130 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R3130 += 1, R2988 += 1, R614 += 1 };
  s2 -> s4 [108, 108] { R3130 += 1, R2988 += 1, R614 += 1 };
  s2 -> s1 [109, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s3 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s3 -> s2 [0, 65535] { R3130 += 1, R2988 += 1, R613 += 1, R614 += 1 };
  s3 -> s3 [0, 65535] { R3130 += 1, R2987 += 1, R2988 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R3130 += 1, R2988 += 1, R614 += 1 };
  s3 -> s4 [108, 108] { R3130 += 1, R2988 += 1, R614 += 1 };
  s3 -> s1 [109, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s4 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s4 -> s5 [0, 65535] { R3130 += 1 };
  s4 -> s4 [0, 65535] { R3130 += 1, R2988 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R3130 += 1, R2988 += 1, R614 += 1 };
  s4 -> s7 [111, 111] { R3130 += 1, R2988 += 1, R614 += 1 };
  s4 -> s1 [112, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s5 -> s5 [0, 65535] { R3130 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s7 -> s5 [0, 65535] { R3130 += 1 };
  s7 -> s7 [0, 65535] { R3130 += 1, R2988 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3130 += 1, R2988 += 1, R614 += 1 };
  s7 -> s8 [99, 99] { R3130 += 1, R2988 += 1, R614 += 1 };
  s7 -> s1 [100, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s8 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s8 -> s5 [0, 65535] { R3130 += 1 };
  s8 -> s8 [0, 65535] { R3130 += 1, R2988 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R3130 += 1, R2988 += 1, R614 += 1 };
  s8 -> s9 [97, 97] { R3130 += 1, R2988 += 1, R614 += 1 };
  s8 -> s1 [98, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s9 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s9 -> s5 [0, 65535] { R3130 += 1 };
  s9 -> s9 [0, 65535] { R3130 += 1, R2988 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R3130 += 1, R2988 += 1, R614 += 1 };
  s9 -> s10 [108, 108] { R3130 += 1, R2988 += 1, R614 += 1 };
  s9 -> s1 [109, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s10 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s10 -> s5 [0, 65535] { R3130 += 1 };
  s10 -> s10 [0, 65535] { R3130 += 1, R2988 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R3130 += 1, R2988 += 1, R614 += 1 };
  s10 -> s11 [104, 104] { R3130 += 1, R2988 += 1, R614 += 1 };
  s10 -> s1 [105, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s11 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s11 -> s5 [0, 65535] { R3130 += 1 };
  s11 -> s11 [0, 65535] { R3130 += 1, R2988 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R3130 += 1, R2988 += 1, R614 += 1 };
  s11 -> s12 [111, 111] { R3130 += 1, R2988 += 1, R614 += 1 };
  s11 -> s1 [112, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s12 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s12 -> s5 [0, 65535] { R3130 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R3130 += 1, R2988 += 1 };
  s12 -> s1 [91, 114] { R3130 += 1, R2988 += 1, R614 += 1 };
  s12 -> s13 [115, 115] { R3130 += 1, R2988 += 1, R614 += 1 };
  s12 -> s1 [116, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s13 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s13 -> s5 [0, 65535] { R3130 += 1 };
  s13 -> s13 [0, 65535] { R3130 += 1, R2988 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R3130 += 1, R2988 += 1, R614 += 1 };
  s13 -> s14 [116, 116] { R3130 += 1, R2988 += 1, R614 += 1 };
  s13 -> s1 [117, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  s14 -> s1 [0, 81] { R3130 += 1, R2988 += 1, R614 += 1 };
  s14 -> s1 [91, 65535] { R3130 += 1, R2988 += 1, R614 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 65535] { R3132 += 1, R2989 += 1, R2990 += 1 };
  s0 -> s0 [0, 65535] { R3131 += 1, R3132 += 1 };
  s0 -> s2 [0, 65535] { R3132 += 1, R2990 += 1, R619 += 1, R620 += 1 };
  s0 -> s3 [0, 65535] { R3132 += 1, R2990 += 1, R618 += 1, R619 += 1 };
  s1 -> s1 [0, 65535] { R3132 += 1, R2989 += 1, R2990 += 1 };
  s1 -> s2 [0, 65535] { R3132 += 1, R2990 += 1, R619 += 1, R620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3132 += 1, R2990 += 1, R618 += 1, R619 += 1 };
  s2 -> s6 [0, 65535] { R3132 += 1, R2990 += 1 };
  s2 -> s4 [0, 65535] { R3132 += 1 };
  s2 -> s2 [0, 65535] { R3132 += 1, R2990 += 1, R619 += 1, R620 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3132 += 1 };
  s3 -> s2 [0, 65535] { R3132 += 1, R2990 += 1, R619 += 1, R620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3132 += 1, R2990 += 1, R618 += 1, R619 += 1 };
  s4 -> s4 [0, 65535] { R3132 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3132 += 1, R2990 += 1 };
  s6 -> s4 [0, 65535] { R3132 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R3133 += 1, R3134 += 1 };
  s0 -> s1 [0, 65535] { R3134 += 1, R2991 += 1, R2992 += 1 };
  s0 -> s2 [0, 65535] { R3134 += 1, R2992 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3134 += 1, R2991 += 1, R2992 += 1 };
  s1 -> s2 [0, 65535] { R3134 += 1, R2992 += 1 };
  s2 -> s3 [0, 65535] { R3134 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3134 += 1, R2992 += 1 };
  s3 -> s3 [0, 65535] { R3134 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 65535] { R3136 += 1, R2993 += 1, R2994 += 1 };
  s0 -> s0 [0, 65535] { R3135 += 1, R3136 += 1 };
  s0 -> s2 [0, 65535] { R3136 += 1, R2994 += 1 };
  s1 -> s1 [0, 65535] { R3136 += 1, R2993 += 1, R2994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3136 += 1, R2994 += 1 };
  s2 -> s3 [0, 65535] { R3136 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3136 += 1, R2994 += 1 };
  s3 -> s3 [0, 65535] { R3136 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R3138 += 1, R2996 += 1, R2971 += 1, R2972 += 1 };
  s0 -> s0 [0, 65535] { R3137 += 1, R3138 += 1 };
  s0 -> s2 [0, 65535] { R3138 += 1, R2996 += 1 };
  s0 -> s3 [0, 65535] { R3138 += 1, R2995 += 1, R2996 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3138 += 1, R2996 += 1, R2971 += 1, R2972 += 1 };
  s1 -> s5 [0, 65535] { R3138 += 1 };
  s1 -> s2 [0, 65535] { R3138 += 1, R2996 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3138 += 1 };
  s2 -> s2 [0, 65535] { R3138 += 1, R2996 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3138 += 1, R2996 += 1, R2971 += 1, R2972 += 1 };
  s3 -> s2 [0, 65535] { R3138 += 1, R2996 += 1 };
  s3 -> s3 [0, 65535] { R3138 += 1, R2995 += 1, R2996 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3138 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R3140 += 1, R3040 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R3139 += 1, R3140 += 1 };
  s0 -> s2 [0, 65535] { R3140 += 1, R3039 += 1, R3040 += 1 };
  s1 -> s4 [0, 65535] { R3140 += 1 };
  s1 -> s1 [0, 65535] { R3140 += 1, R3040 += 1, R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3140 += 1, R3040 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3140 += 1, R3039 += 1, R3040 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3140 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R3142 += 1, R3042 += 1 };
  s0 -> s0 [0, 65535] { R3141 += 1, R3142 += 1 };
  s0 -> s2 [0, 65535] { R3142 += 1, R3041 += 1, R3042 += 1 };
  s0 -> s3 [65, 65] { R3142 += 1, R3042 += 1 };
  s0 -> s4 [65, 65] { R3142 += 1, R3042 += 1 };
  s0 -> s5 [81, 81] { R3142 += 1, R3042 += 1 };
  s0 -> s1 [82, 65535] { R3142 += 1, R3042 += 1 };
  s1 -> s1 [0, 64] { R3142 += 1, R3042 += 1 };
  s1 -> s3 [65, 65] { R3142 += 1, R3042 += 1 };
  s1 -> s4 [65, 65] { R3142 += 1, R3042 += 1 };
  s1 -> s5 [81, 81] { R3142 += 1, R3042 += 1 };
  s1 -> s1 [82, 65535] { R3142 += 1, R3042 += 1 };
  s2 -> s1 [0, 64] { R3142 += 1, R3042 += 1 };
  s2 -> s2 [0, 65535] { R3142 += 1, R3041 += 1, R3042 += 1 };
  s2 -> s3 [65, 65] { R3142 += 1, R3042 += 1 };
  s2 -> s4 [65, 65] { R3142 += 1, R3042 += 1 };
  s2 -> s5 [81, 81] { R3142 += 1, R3042 += 1 };
  s2 -> s1 [82, 65535] { R3142 += 1, R3042 += 1 };
  s3 -> s3 [0, 65] { R3142 += 1, R3042 += 1 };
  s3 -> s7 [81, 81] { R3142 += 1, R3042 += 1 };
  s3 -> s3 [82, 65535] { R3142 += 1, R3042 += 1 };
  s5 -> s5 [0, 64] { R3142 += 1, R3042 += 1 };
  s5 -> s5 [0, 65535] { R3142 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3142 += 1, R3042 += 1 };
  s5 -> s8 [65, 65] { R3142 += 1, R3042 += 1 };
  s5 -> s5 [81, 65535] { R3142 += 1, R3042 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3142 += 1, R3042 += 1 };
  s7 -> s7 [0, 65535] { R3142 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R3142 += 1, R3042 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3142 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R3144 += 1, R3044 += 1, R597 += 1 };
  s0 -> s0 [0, 65535] { R3143 += 1, R3144 += 1 };
  s0 -> s2 [0, 65535] { R3144 += 1, R3043 += 1, R3044 += 1 };
  s0 -> s3 [65, 65] { R3144 += 1, R3044 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R3144 += 1, R3044 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R3144 += 1, R3044 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R3144 += 1, R3044 += 1, R597 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3144 += 1 };
  s1 -> s3 [65, 65] { R3144 += 1, R3044 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R3144 += 1, R3044 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R3144 += 1, R3044 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R3144 += 1, R3044 += 1, R597 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3144 += 1, R3043 += 1, R3044 += 1 };
  s2 -> s3 [65, 65] { R3144 += 1, R3044 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R3144 += 1, R3044 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R3144 += 1, R3044 += 1, R597 += 1 };
  s3 -> s3 [0, 65535] { R3144 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3144 += 1, R3044 += 1, R597 += 1 };
  s4 -> s6 [0, 65535] { R3144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3144 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R3146 += 1, R3046 += 1, R599 += 1 };
  s0 -> s2 [0, 65535] { R3146 += 1, R3045 += 1, R3046 += 1 };
  s0 -> s0 [0, 65535] { R3145 += 1, R3146 += 1 };
  s0 -> s3 [65, 65] { R3146 += 1, R3046 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R3146 += 1, R3046 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R3146 += 1, R3046 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R3146 += 1, R3046 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R3146 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3146 += 1, R3046 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R3146 += 1, R3046 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R3146 += 1, R3046 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R3146 += 1, R3046 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R3146 += 1, R3045 += 1, R3046 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3146 += 1, R3046 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R3146 += 1, R3046 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R3146 += 1, R3046 += 1, R599 += 1 };
  s3 -> s3 [0, 65535] { R3146 += 1, R3046 += 1, R599 += 1 };
  s3 -> s6 [0, 65535] { R3146 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3146 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s0 -> s0 [0, 65535] { R3147 += 1, R3148 += 1 };
  s0 -> s2 [0, 65535] { R3148 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s3 [65, 65] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s0 -> s4 [65, 65] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s0 -> s1 [66, 65535] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [0, 64] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [0, 65535] { R3148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s1 -> s4 [65, 65] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [66, 65535] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s2 -> s1 [0, 64] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s2 -> s2 [0, 65535] { R3148 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s2 -> s4 [65, 65] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s2 -> s1 [66, 65535] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s3 -> s3 [0, 65535] { R3148 += 1, R3048 += 1, R601 += 1, R602 += 1 };
  s3 -> s6 [0, 65535] { R3148 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3148 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3148 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s0 -> s2 [0, 65535] { R3150 += 1, R3049 += 1, R3050 += 1 };
  s0 -> s0 [0, 65535] { R3149 += 1, R3150 += 1 };
  s0 -> s3 [65, 65] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s0 -> s4 [65, 65] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s0 -> s1 [66, 65535] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 64] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3150 += 1 };
  s1 -> s3 [65, 65] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [65, 65] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [66, 65535] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [0, 64] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3150 += 1, R3049 += 1, R3050 += 1 };
  s2 -> s3 [65, 65] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [65, 65] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [66, 65535] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3150 += 1 };
  s3 -> s3 [0, 65535] { R3150 += 1, R3050 += 1, R605 += 1, R606 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3150 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3150 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R3151 += 1, R3152 += 1 };
  s0 -> s2 [0, 65535] { R3152 += 1, R3051 += 1, R3052 += 1 };
  s0 -> s3 [65, 65] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s0 -> s4 [65, 65] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s0 -> s1 [66, 65535] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [0, 64] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3152 += 1 };
  s1 -> s3 [65, 65] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s1 -> s4 [65, 65] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [66, 65535] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [0, 64] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3152 += 1, R3051 += 1, R3052 += 1 };
  s2 -> s3 [65, 65] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s2 -> s4 [65, 65] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [66, 65535] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s3 -> s3 [0, 65535] { R3152 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3152 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3152 += 1, R3052 += 1, R611 += 1, R612 += 1 };
  s5 -> s5 [0, 65535] { R3152 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R3154 += 1, R3053 += 1, R3054 += 1 };
  s0 -> s0 [0, 65535] { R3153 += 1, R3154 += 1 };
  s0 -> s3 [65, 65] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s0 -> s4 [65, 65] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s0 -> s1 [66, 65535] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 64] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3154 += 1 };
  s1 -> s3 [65, 65] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [65, 65] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [66, 65535] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [0, 64] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3154 += 1, R3053 += 1, R3054 += 1 };
  s2 -> s3 [65, 65] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s2 -> s4 [65, 65] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [66, 65535] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3154 += 1 };
  s3 -> s3 [0, 65535] { R3154 += 1, R3054 += 1, R615 += 1, R616 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3154 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3154 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s0 -> s2 [0, 64] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s0 -> s3 [0, 65535] { R3156 += 1, R3055 += 1, R3056 += 1 };
  s0 -> s0 [0, 65535] { R3155 += 1, R3156 += 1 };
  s0 -> s4 [65, 65] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s0 -> s5 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s0 -> s6 [65, 65] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s0 -> s7 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s0 -> s1 [66, 65535] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s0 -> s2 [66, 65535] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s1 -> s1 [0, 64] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s1 -> s2 [0, 64] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s1 -> s4 [65, 65] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s1 -> s5 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s1 -> s6 [65, 65] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s1 -> s7 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s1 -> s1 [66, 65535] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s1 -> s2 [66, 65535] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s2 -> s2 [0, 64] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s2 -> s11 [0, 64] { R3156 += 1, R3056 += 1 };
  s2 -> s5 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s2 -> s12 [65, 65] { R3156 += 1, R3056 += 1 };
  s2 -> s7 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s2 -> s8 [65, 65] { R3156 += 1, R3056 += 1 };
  s2 -> s2 [66, 65535] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s2 -> s11 [66, 65535] { R3156 += 1, R3056 += 1 };
  s3 -> s1 [0, 64] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s3 -> s2 [0, 64] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s3 -> s3 [0, 65535] { R3156 += 1, R3055 += 1, R3056 += 1 };
  s3 -> s4 [65, 65] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s3 -> s5 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s3 -> s6 [65, 65] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s3 -> s7 [65, 65] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s3 -> s1 [66, 65535] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s3 -> s2 [66, 65535] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s6 -> s6 [0, 65535] { R3156 += 1, R3056 += 1, R2573 += 1, R2574 += 1 };
  s6 -> s7 [0, 65535] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s7 -> s7 [0, 65535] { R3156 += 1, R3056 += 1, R2574 += 1, R2575 += 1 };
  s7 -> s8 [0, 65535] { R3156 += 1, R3056 += 1 };
  s8 -> s9 [0, 65535] { R3156 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R3156 += 1, R3056 += 1 };
  s9 -> s9 [0, 65535] { R3156 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3156 += 1, R3056 += 1 };
  s11 -> s11 [0, 65535] { R3156 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R3156 += 1, R3056 += 1 };
  s11 -> s8 [65, 65] { R3156 += 1, R3056 += 1 };
  s11 -> s11 [66, 65535] { R3156 += 1, R3056 += 1 };
  s12 -> s12 [0, 65535] { R3156 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R3158 += 1, R3058 += 1 };
  s0 -> s0 [0, 65535] { R3157 += 1, R3158 += 1 };
  s0 -> s2 [0, 65535] { R3158 += 1, R3057 += 1, R3058 += 1 };
  s0 -> s3 [65, 65] { R3158 += 1, R3058 += 1 };
  s0 -> s4 [65, 65] { R3158 += 1, R3058 += 1 };
  s0 -> s1 [66, 65535] { R3158 += 1, R3058 += 1 };
  s1 -> s1 [0, 64] { R3158 += 1, R3058 += 1 };
  s1 -> s1 [0, 65535] { R3158 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3158 += 1, R3058 += 1 };
  s1 -> s4 [65, 65] { R3158 += 1, R3058 += 1 };
  s1 -> s1 [66, 65535] { R3158 += 1, R3058 += 1 };
  s2 -> s1 [0, 64] { R3158 += 1, R3058 += 1 };
  s2 -> s2 [0, 65535] { R3158 += 1, R3057 += 1, R3058 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3158 += 1, R3058 += 1 };
  s2 -> s4 [65, 65] { R3158 += 1, R3058 += 1 };
  s2 -> s1 [66, 65535] { R3158 += 1, R3058 += 1 };
  s3 -> s3 [0, 65535] { R3158 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3158 += 1, R3058 += 1 };
  s4 -> s5 [0, 65535] { R3158 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3158 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s2 [0, 64] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s0 -> s0 [0, 65535] { R3159 += 1, R3160 += 1 };
  s0 -> s3 [0, 65535] { R3160 += 1, R3059 += 1, R3060 += 1 };
  s0 -> s4 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s0 -> s5 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s0 -> s6 [65, 65] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s7 [65, 65] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s2 [66, 80] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s0 -> s1 [66, 65535] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s8 [81, 81] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s0 -> s2 [82, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s1 [0, 64] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s1 -> s2 [0, 64] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s4 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s5 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s6 [65, 65] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s1 -> s7 [65, 65] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s1 -> s2 [66, 80] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s1 [66, 65535] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s1 -> s8 [81, 81] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s2 [82, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s2 -> s2 [0, 64] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s2 -> s4 [65, 65] { R3160 += 1, R3060 += 1 };
  s2 -> s5 [65, 65] { R3160 += 1, R3060 += 1 };
  s2 -> s2 [66, 80] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s2 -> s2 [66, 65535] { R3160 += 1, R3060 += 1 };
  s2 -> s8 [81, 81] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s2 -> s2 [82, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s3 -> s1 [0, 64] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s3 -> s2 [0, 64] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s3 -> s3 [0, 65535] { R3160 += 1, R3059 += 1, R3060 += 1 };
  s3 -> s4 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s3 -> s5 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s3 -> s6 [65, 65] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s3 -> s7 [65, 65] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s3 -> s2 [66, 80] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s3 -> s1 [66, 65535] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s3 -> s8 [81, 81] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s3 -> s2 [82, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s5 -> s5 [0, 80] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s5 -> s5 [0, 65535] { R3160 += 1, R3060 += 1 };
  s5 -> s10 [81, 81] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s5 -> s5 [82, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s7 -> s5 [0, 80] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s7 -> s7 [0, 65535] { R3160 += 1, R3060 += 1, R2967 += 1, R2968 += 1 };
  s7 -> s10 [81, 81] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s7 -> s5 [82, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s8 -> s8 [0, 64] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3160 += 1 };
  s8 -> s10 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s8 -> s11 [65, 65] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s8 -> s8 [66, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R3160 += 1 };
  s10 -> s10 [0, 65535] { R3160 += 1, R3060 += 1, R2968 += 1, R2969 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3160 += 1 };
  s12 -> s12 [0, 65535] { R3160 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P90
automaton P90_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
constraint R5 = R2996 && R6 = R3160 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R86 + R85 = 0 && R598 + R597 + -1*R619 + -1*R616 = 0 && R603 + R601 = 0 && R604 + R602 + -1*R619 + -1*R616 = 0 && R608 + R605 = 0 && R609 + R606 + -1*R619 + -1*R616 = 0 && R613 + R611 = 0 && R614 + R612 + -1*R619 + -1*R616 = 0 && R618 + R615 = 0 && R2973 = 0 && R2974 = R2996 && R2975 = 0 && R2976 = R2996 && R2977 = 0 && R2978 = R2996 && R2979 = 0 && R2980 = R2996 && R2981 = 0 && R2982 = R2996 && R2983 = 0 && R2984 = R2996 && R2985 = 0 && R2986 = R2996 && R2987 = 0 && R2988 = R2996 && R2989 = 0 && R2990 = R2996 && R2991 = 0 && R2992 = R2996 && R2993 = 0 && R2994 = R2996 && R2995 = 0 && R2997 = 0 && R2998 = R3160 && R2999 = 0 && R3000 = R3160 && R3001 = 0 && R3002 = R3160 && R3003 = 0 && R3004 = R3160 && R3005 = 0 && R3006 = R3160 && R3007 = 0 && R3008 = R3160 && R3009 = 0 && R3010 = R3160 && R3011 = 0 && R3012 = R3160 && R3013 = 0 && R3014 = R3160 && R3015 = 0 && R3016 = R3160 && R3017 = 0 && R3018 = R3160 && R3019 = 0 && R3020 = R3160 && R3021 = 0 && R3022 = R3160 && R3023 = 0 && R3024 = R3160 && R3025 = 0 && R3026 = R3160 && R3027 = 0 && R3028 = R3160 && R3029 = 0 && R3030 = R3160 && R3031 = 0 && R3032 = R3160 && R3033 = 0 && R3034 = R3160 && R3035 = 0 && R3036 = R3160 && R3037 = 0 && R3038 = R3160 && R3041 = 0 && R3042 = 0 && R3055 = 0 && R3056 = 0 && R3059 = 0 && R3060 = 0 && R3103 = 10 && R3104 = R3160 && R3105 = 10 && R3106 = R3160 && R3107 = 10 && R3108 = R3160 && R3109 = 10 && R3110 = R3160 && R3111 = 10 && R3112 = R3160 && R3113 = 10 && R3114 = R3160 && R3115 = 10 && R3116 = R3160 && R3117 = 10 && R3118 = R3160 && R3119 = 10 && R3120 = R3160 && R3121 = 10 && R3122 = R3160 && R3123 = 10 && R3124 = R3160 && R3125 = 10 && R3126 = R3160 && R3127 = 10 && R3128 = R3160 && R3129 = 10 && R3130 = R3160 && R3131 = 10 && R3132 = R3160 && R3133 = 10 && R3134 = R3160 && R3135 = 10 && R3136 = R3160 && R3137 = 10 && R3138 = R3160 && R3139 = 10 && R3140 = R3160 && R3141 = 10 && R3142 = R3160 && R3143 = 10 && R3144 = R3160 && R3145 = 10 && R3146 = R3160 && R3147 = 10 && R3148 = R3160 && R3149 = 10 && R3150 = R3160 && R3151 = 10 && R3152 = R3160 && R3153 = 10 && R3154 = R3160 && R3155 = 10 && R3156 = R3160 && R3157 = 10 && R3158 = R3160 && R3159 = 10 && R114 + R111 + R148 + R145 != 0 && R130 + R127 + R160 + R157 != 0 && R620 + R617 + R2972 + R2969 != 0 && R20 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && R90 + R89 < 1 && R92 + R91 < 1 && R600 + R599 < 1 && -1*R619 < R616 && 0 < R2996 && 9 < R3160 && (R36 = 0 || (R3039 = 0 && R3040 = 0)) && (R36 = 0 || (R3043 = 0 && R3044 = 0)) && (R36 = 0 || (R3045 = 0 && R3046 = 0)) && (R36 = 0 || (R3047 = 0 && R3048 = 0)) && (R36 = 0 || (R3049 = 0 && R3050 = 0)) && (R36 = 0 || (R3051 = 0 && R3052 = 0)) && (R36 = 0 || (R3053 = 0 && R3054 = 0)) && (R36 = 0 || (R3057 = 0 && R3058 = 0)) && (R38 = 0 || (R3061 = 0 && R3062 = 0)) && (R38 = 0 || (R3063 = 0 && R3064 = 0)) && (R38 = 0 || (R3065 = 0 && R3066 = 0)) && (R38 = 0 || (R3067 = 0 && R3068 = 0)) && (R38 = 0 || (R3069 = 0 && R3070 = 0)) && (R38 = 0 || (R3071 = 0 && R3072 = 0)) && (R38 = 0 || (R3073 = 0 && R3074 = 0)) && (R38 = 0 || (R3075 = 0 && R3076 = 0)) && (R38 = 0 || (R3077 = 0 && R3078 = 0)) && (R38 = 0 || (R3079 = 0 && R3080 = 0)) && (R38 = 0 || (R3081 = 0 && R3082 = 0)) && (R38 = 0 || (R3083 = 0 && R3084 = 0)) && (R38 = 0 || (R3085 = 0 && R3086 = 0)) && (R38 = 0 || (R3087 = 0 && R3088 = 0)) && (R38 = 0 || (R3089 = 0 && R3090 = 0)) && (R38 = 0 || (R3091 = 0 && R3092 = 0)) && (R38 = 0 || (R3093 = 0 && R3094 = 0)) && (R38 = 0 || (R3095 = 0 && R3096 = 0)) && (R38 = 0 || (R3097 = 0 && R3098 = 0)) && (R38 = 0 || (R3099 = 0 && R3100 = 0)) && (R38 = 0 || (R3101 = 0 && R3102 = 0)) && (R98 + R95 = 0 || (R96 + R93 = 0 && R97 + R94 = 0)) && (R104 + R101 = 0 || (R102 + R99 = 0 && R103 + R100 = 0)) && (R104 + R101 = 0 || (R107 + R105 = 0 && R108 + R106 = 0)) && (R104 + R101 = 0 || (R112 + R109 = 0 && R113 + R110 = 0)) && (R120 + R117 = 0 || (R118 + R115 = 0 && R119 + R116 = 0)) && (R120 + R117 = 0 || (R123 + R121 = 0 && R124 + R122 = 0)) && (R120 + R117 = 0 || (R128 + R125 = 0 && R129 + R126 = 0)) && (R136 + R133 = 0 || (R134 + R131 = 0 && R135 + R132 = 0)) && (R142 + R139 = 0 || (R140 + R137 = 0 && R141 + R138 = 0)) && (R142 + R139 = 0 || (R146 + R143 = 0 && R147 + R144 = 0)) && (R154 + R151 = 0 || (R152 + R149 = 0 && R153 + R150 = 0)) && (R154 + R151 = 0 || (R158 + R155 = 0 && R159 + R156 = 0)) && (R2578 + R2575 = 0 || (R2576 + R2573 = 0 && R2577 + R2574 = 0)) && (R2578 + R2575 = 0 || (R2970 + R2967 = 0 && R2971 + R2968 = 0));
// End of Parikh automata intersection problem
