// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R20, R21, R24, R35, R36, R37, R38, R39, R40, R41, R42, R5, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R7, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R9417, R9418, R9419, R9420, R9421, R9422, R9423, R9424, R9425, R9426, R9427, R9428, R9429, R9430, R9431, R9432, R95, R96, R97, R98, R9821, R9822, R9823, R9824, R9825, R9826, R9827, R9828, R9829, R9830, R9831, R9832, R9833, R9834, R9835, R9836, R9837, R9838, R9839, R9840, R9841, R9842, R9843, R9844, R9845, R9846, R9847, R9848, R9849, R9850, R9851, R9852, R9853, R9854, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R99, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining P96
automaton P96_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R9852 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R9851 += 1, R9852 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9852 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R9853 += 1, R9854 += 1 };
  s0 -> s1 [0, 65535] { R9854 += 1, R86 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9854 += 1, R86 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 89] { R9856 += 1 };
  s0 -> s2 [0, 65535] { R9856 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R9855 += 1, R9856 += 1 };
  s0 -> s1 [91, 65535] { R9856 += 1 };
  s1 -> s1 [0, 89] { R9856 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R9856 += 1 };
  s2 -> s1 [0, 89] { R9856 += 1 };
  s2 -> s2 [0, 65535] { R9856 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R9856 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 88] { R9858 += 1 };
  s0 -> s2 [0, 65535] { R9858 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R9857 += 1, R9858 += 1 };
  s0 -> s1 [90, 65535] { R9858 += 1 };
  s1 -> s1 [0, 88] { R9858 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R9858 += 1 };
  s2 -> s1 [0, 88] { R9858 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9858 += 1, R90 += 1 };
  s2 -> s1 [90, 65535] { R9858 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 72] { R9860 += 1 };
  s0 -> s0 [0, 65535] { R9859 += 1, R9860 += 1 };
  s0 -> s2 [0, 65535] { R9860 += 1, R92 += 1 };
  s0 -> s1 [74, 65535] { R9860 += 1 };
  s1 -> s1 [0, 72] { R9860 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R9860 += 1 };
  s2 -> s1 [0, 72] { R9860 += 1 };
  s2 -> s2 [0, 65535] { R9860 += 1, R92 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R9860 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R9862 += 1, R96 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R9862 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R9861 += 1, R9862 += 1 };
  s1 -> s1 [0, 65535] { R9862 += 1, R96 += 1, R97 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9862 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [0, 65535] { R9862 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9862 += 1, R97 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R9862 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R9864 += 1 };
  s0 -> s0 [0, 65535] { R9863 += 1, R9864 += 1 };
  s1 -> s1 [0, 65535] { R9864 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R9865 += 1, R9866 += 1 };
  s0 -> s1 [0, 65535] { R9866 += 1, R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R9866 += 1, R102 += 1, R103 += 1 };
  s1 -> s4 [0, 65535] { R9866 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9866 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9866 += 1, R103 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R9866 += 1, R102 += 1, R103 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9866 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 107] { R9868 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R9868 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R9867 += 1, R9868 += 1 };
  s0 -> s3 [108, 108] { R9868 += 1, R108 += 1 };
  s0 -> s1 [109, 65535] { R9868 += 1, R108 += 1 };
  s1 -> s13 [0, 65535] { R9868 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9868 += 1, R108 += 1 };
  s2 -> s1 [0, 107] { R9868 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R9868 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R9868 += 1, R108 += 1 };
  s2 -> s1 [109, 65535] { R9868 += 1, R108 += 1 };
  s3 -> s1 [0, 110] { R9868 += 1, R108 += 1 };
  s3 -> s3 [0, 65535] { R9868 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R9868 += 1, R108 += 1 };
  s3 -> s1 [112, 65535] { R9868 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R9868 += 1, R108 += 1 };
  s5 -> s5 [0, 65535] { R9868 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R9868 += 1, R108 += 1 };
  s5 -> s1 [100, 65535] { R9868 += 1, R108 += 1 };
  s6 -> s1 [0, 96] { R9868 += 1, R108 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9868 += 1 };
  s6 -> s7 [97, 97] { R9868 += 1, R108 += 1 };
  s6 -> s1 [98, 65535] { R9868 += 1, R108 += 1 };
  s7 -> s1 [0, 107] { R9868 += 1, R108 += 1 };
  s7 -> s7 [0, 65535] { R9868 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R9868 += 1, R108 += 1 };
  s7 -> s1 [109, 65535] { R9868 += 1, R108 += 1 };
  s8 -> s1 [0, 103] { R9868 += 1, R108 += 1 };
  s8 -> s8 [0, 65535] { R9868 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R9868 += 1, R108 += 1 };
  s8 -> s1 [105, 65535] { R9868 += 1, R108 += 1 };
  s9 -> s1 [0, 110] { R9868 += 1, R108 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R9868 += 1 };
  s9 -> s10 [111, 111] { R9868 += 1, R108 += 1 };
  s9 -> s1 [112, 65535] { R9868 += 1, R108 += 1 };
  s10 -> s1 [0, 114] { R9868 += 1, R108 += 1 };
  s10 -> s10 [0, 65535] { R9868 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R9868 += 1, R108 += 1 };
  s10 -> s1 [116, 65535] { R9868 += 1, R108 += 1 };
  s11 -> s1 [0, 115] { R9868 += 1, R108 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R9868 += 1 };
  s11 -> s12 [116, 116] { R9868 += 1, R108 += 1 };
  s11 -> s1 [117, 65535] { R9868 += 1, R108 += 1 };
  s12 -> s1 [0, 65535] { R9868 += 1, R108 += 1 };
  s13 -> s13 [0, 65535] { R9868 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R9870 += 1, R113 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R9870 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R9869 += 1, R9870 += 1 };
  s1 -> s4 [0, 65535] { R9870 += 1 };
  s1 -> s1 [0, 65535] { R9870 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9870 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R9870 += 1, R112 += 1, R113 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9870 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R9872 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R9872 += 1, R119 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R9871 += 1, R9872 += 1 };
  s1 -> s1 [0, 65535] { R9872 += 1, R118 += 1, R119 += 1 };
  s1 -> s2 [0, 65535] { R9872 += 1, R119 += 1, R120 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9872 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R9872 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9872 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R9874 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R9874 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R9873 += 1, R9874 += 1 };
  s0 -> s3 [108, 108] { R9874 += 1, R124 += 1 };
  s0 -> s1 [109, 65535] { R9874 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R9874 += 1, R124 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R9874 += 1 };
  s2 -> s1 [0, 107] { R9874 += 1, R124 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9874 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [108, 108] { R9874 += 1, R124 += 1 };
  s2 -> s1 [109, 65535] { R9874 += 1, R124 += 1 };
  s3 -> s1 [0, 110] { R9874 += 1, R124 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9874 += 1 };
  s3 -> s5 [111, 111] { R9874 += 1, R124 += 1 };
  s3 -> s1 [112, 65535] { R9874 += 1, R124 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R9874 += 1, R124 += 1 };
  s5 -> s5 [0, 65535] { R9874 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R9874 += 1, R124 += 1 };
  s5 -> s1 [100, 65535] { R9874 += 1, R124 += 1 };
  s6 -> s1 [0, 96] { R9874 += 1, R124 += 1 };
  s6 -> s6 [0, 65535] { R9874 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R9874 += 1, R124 += 1 };
  s6 -> s1 [98, 65535] { R9874 += 1, R124 += 1 };
  s7 -> s1 [0, 107] { R9874 += 1, R124 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R9874 += 1 };
  s7 -> s8 [108, 108] { R9874 += 1, R124 += 1 };
  s7 -> s1 [109, 65535] { R9874 += 1, R124 += 1 };
  s8 -> s1 [0, 103] { R9874 += 1, R124 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R9874 += 1 };
  s8 -> s9 [104, 104] { R9874 += 1, R124 += 1 };
  s8 -> s1 [105, 65535] { R9874 += 1, R124 += 1 };
  s9 -> s1 [0, 110] { R9874 += 1, R124 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R9874 += 1 };
  s9 -> s10 [111, 111] { R9874 += 1, R124 += 1 };
  s9 -> s1 [112, 65535] { R9874 += 1, R124 += 1 };
  s10 -> s1 [0, 114] { R9874 += 1, R124 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R9874 += 1 };
  s10 -> s11 [115, 115] { R9874 += 1, R124 += 1 };
  s10 -> s1 [116, 65535] { R9874 += 1, R124 += 1 };
  s11 -> s1 [0, 115] { R9874 += 1, R124 += 1 };
  s11 -> s11 [0, 65535] { R9874 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R9874 += 1, R124 += 1 };
  s11 -> s1 [117, 65535] { R9874 += 1, R124 += 1 };
  s12 -> s1 [0, 65535] { R9874 += 1, R124 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R9874 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9876 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R9875 += 1, R9876 += 1 };
  s0 -> s2 [0, 65535] { R9876 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535] { R9876 += 1, R128 += 1, R129 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R9876 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9876 += 1 };
  s2 -> s2 [0, 65535] { R9876 += 1, R129 += 1, R130 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9876 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R9878 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R9877 += 1, R9878 += 1 };
  s0 -> s2 [0, 65535] { R9878 += 1, R135 += 1, R136 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9878 += 1, R134 += 1, R135 += 1 };
  s1 -> s2 [0, 65535] { R9878 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9878 += 1 };
  s2 -> s2 [0, 65535] { R9878 += 1, R135 += 1, R136 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9878 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R9879 += 1, R9880 += 1 };
  s0 -> s1 [0, 65535] { R9880 += 1 };
  s1 -> s1 [0, 65535] { R9880 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R9882 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R9881 += 1, R9882 += 1 };
  s0 -> s2 [0, 65535] { R9882 += 1, R140 += 1, R141 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9882 += 1, R141 += 1, R142 += 1 };
  s1 -> s4 [0, 65535] { R9882 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9882 += 1, R141 += 1, R142 += 1 };
  s2 -> s2 [0, 65535] { R9882 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9882 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R9884 += 1 };
  s0 -> s0 [0, 65535] { R9883 += 1, R9884 += 1 };
  s1 -> s1 [0, 65535] { R9884 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 88] { R9886 += 1, R147 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R9886 += 1, R146 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R9885 += 1, R9886 += 1 };
  s0 -> s3 [89, 89] { R9886 += 1, R147 += 1, R148 += 1 };
  s0 -> s4 [89, 89] { R9886 += 1, R147 += 1, R148 += 1 };
  s0 -> s1 [90, 65535] { R9886 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 88] { R9886 += 1, R147 += 1, R148 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9886 += 1 };
  s1 -> s3 [89, 89] { R9886 += 1, R147 += 1, R148 += 1 };
  s1 -> s4 [89, 89] { R9886 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [90, 65535] { R9886 += 1, R147 += 1, R148 += 1 };
  s2 -> s1 [0, 88] { R9886 += 1, R147 += 1, R148 += 1 };
  s2 -> s2 [0, 65535] { R9886 += 1, R146 += 1, R147 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [89, 89] { R9886 += 1, R147 += 1, R148 += 1 };
  s2 -> s4 [89, 89] { R9886 += 1, R147 += 1, R148 += 1 };
  s2 -> s1 [90, 65535] { R9886 += 1, R147 += 1, R148 += 1 };
  s3 -> s3 [0, 65535] { R9886 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9886 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9886 += 1, R147 += 1, R148 += 1 };
  s5 -> s5 [0, 65535] { R9886 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9887 += 1, R9888 += 1 };
  s0 -> s1 [0, 65535] { R9888 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R9888 += 1, R153 += 1, R154 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9888 += 1, R152 += 1, R153 += 1 };
  s1 -> s2 [0, 65535] { R9888 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9888 += 1, R153 += 1, R154 += 1 };
  s2 -> s4 [0, 65535] { R9888 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9888 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9890 += 1 };
  s0 -> s0 [0, 65535] { R9889 += 1, R9890 += 1 };
  s1 -> s1 [0, 65535] { R9890 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 72] { R9892 += 1, R159 += 1, R160 += 1 };
  s0 -> s0 [0, 65535] { R9891 += 1, R9892 += 1 };
  s0 -> s2 [0, 65535] { R9892 += 1, R158 += 1, R159 += 1 };
  s0 -> s3 [73, 73] { R9892 += 1, R159 += 1, R160 += 1 };
  s0 -> s4 [73, 73] { R9892 += 1, R159 += 1, R160 += 1 };
  s0 -> s1 [74, 65535] { R9892 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [0, 72] { R9892 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [0, 65535] { R9892 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R9892 += 1, R159 += 1, R160 += 1 };
  s1 -> s4 [73, 73] { R9892 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [74, 65535] { R9892 += 1, R159 += 1, R160 += 1 };
  s2 -> s1 [0, 72] { R9892 += 1, R159 += 1, R160 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9892 += 1, R158 += 1, R159 += 1 };
  s2 -> s3 [73, 73] { R9892 += 1, R159 += 1, R160 += 1 };
  s2 -> s4 [73, 73] { R9892 += 1, R159 += 1, R160 += 1 };
  s2 -> s1 [74, 65535] { R9892 += 1, R159 += 1, R160 += 1 };
  s3 -> s3 [0, 65535] { R9892 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9892 += 1, R159 += 1, R160 += 1 };
  s4 -> s5 [0, 65535] { R9892 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9892 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9916 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R9915 += 1, R9916 += 1 };
  s1 -> s1 [0, 65535] { R9916 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R9918 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R9917 += 1, R9918 += 1 };
  s0 -> s2 [65, 65] { R9918 += 1, R85 += 1 };
  s0 -> s3 [65, 65] { R9918 += 1, R85 += 1 };
  s0 -> s1 [66, 65535] { R9918 += 1, R85 += 1 };
  s1 -> s1 [0, 64] { R9918 += 1, R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9918 += 1, R85 += 1 };
  s1 -> s3 [65, 65] { R9918 += 1, R85 += 1 };
  s1 -> s1 [66, 65535] { R9918 += 1, R85 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9918 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R9920 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R9919 += 1, R9920 += 1 };
  s0 -> s2 [65, 65] { R9920 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R9920 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R9920 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R9920 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9920 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R9920 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R9920 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9920 += 1, R87 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R9922 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R9921 += 1, R9922 += 1 };
  s0 -> s2 [65, 65] { R9922 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R9922 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R9922 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R9922 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9922 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R9922 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R9922 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R9922 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R9924 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R9923 += 1, R9924 += 1 };
  s0 -> s2 [65, 65] { R9924 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R9924 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R9924 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R9924 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9924 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R9924 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R9924 += 1, R91 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9924 += 1, R91 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R9926 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R9925 += 1, R9926 += 1 };
  s0 -> s2 [65, 65] { R9926 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [65, 65] { R9926 += 1, R93 += 1, R94 += 1 };
  s0 -> s1 [66, 65535] { R9926 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 64] { R9926 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9926 += 1, R93 += 1, R94 += 1 };
  s1 -> s3 [65, 65] { R9926 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [66, 65535] { R9926 += 1, R93 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R9926 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R9928 += 1 };
  s0 -> s0 [0, 65535] { R9927 += 1, R9928 += 1 };
  s0 -> s2 [65, 65] { R9928 += 1 };
  s0 -> s3 [65, 65] { R9928 += 1 };
  s0 -> s1 [66, 65535] { R9928 += 1 };
  s1 -> s1 [0, 64] { R9928 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9928 += 1 };
  s1 -> s3 [65, 65] { R9928 += 1 };
  s1 -> s1 [66, 65535] { R9928 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9928 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R9930 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R9929 += 1, R9930 += 1 };
  s0 -> s2 [65, 65] { R9930 += 1, R99 += 1, R100 += 1 };
  s0 -> s3 [65, 65] { R9930 += 1, R99 += 1, R100 += 1 };
  s0 -> s1 [66, 65535] { R9930 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 64] { R9930 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9930 += 1, R99 += 1, R100 += 1 };
  s1 -> s3 [65, 65] { R9930 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [66, 65535] { R9930 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R9930 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R9932 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R9931 += 1, R9932 += 1 };
  s0 -> s2 [65, 65] { R9932 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [65, 65] { R9932 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R9932 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 64] { R9932 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9932 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [65, 65] { R9932 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [66, 65535] { R9932 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R9932 += 1, R105 += 1, R106 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R9934 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R9933 += 1, R9934 += 1 };
  s0 -> s2 [65, 65] { R9934 += 1, R109 += 1, R110 += 1 };
  s0 -> s3 [65, 65] { R9934 += 1, R109 += 1, R110 += 1 };
  s0 -> s1 [66, 65535] { R9934 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 64] { R9934 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9934 += 1, R109 += 1, R110 += 1 };
  s1 -> s3 [65, 65] { R9934 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [66, 65535] { R9934 += 1, R109 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R9934 += 1, R109 += 1, R110 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R9936 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R9935 += 1, R9936 += 1 };
  s0 -> s2 [65, 65] { R9936 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R9936 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R9936 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R9936 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9936 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R9936 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R9936 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9936 += 1, R115 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R9938 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R9937 += 1, R9938 += 1 };
  s0 -> s2 [65, 65] { R9938 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R9938 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R9938 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R9938 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9938 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R9938 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R9938 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9938 += 1, R121 += 1, R122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R9940 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R9939 += 1, R9940 += 1 };
  s0 -> s2 [65, 65] { R9940 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [65, 65] { R9940 += 1, R125 += 1, R126 += 1 };
  s0 -> s1 [66, 65535] { R9940 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R9940 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9940 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [65, 65] { R9940 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [66, 65535] { R9940 += 1, R125 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R9940 += 1, R125 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R9942 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R9941 += 1, R9942 += 1 };
  s0 -> s2 [65, 65] { R9942 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R9942 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R9942 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R9942 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9942 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R9942 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R9942 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9942 += 1, R131 += 1, R132 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R9944 += 1 };
  s0 -> s0 [0, 65535] { R9943 += 1, R9944 += 1 };
  s0 -> s2 [65, 65] { R9944 += 1 };
  s0 -> s3 [65, 65] { R9944 += 1 };
  s0 -> s1 [66, 65535] { R9944 += 1 };
  s1 -> s1 [0, 64] { R9944 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9944 += 1 };
  s1 -> s3 [65, 65] { R9944 += 1 };
  s1 -> s1 [66, 65535] { R9944 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9944 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R9946 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R9945 += 1, R9946 += 1 };
  s0 -> s2 [65, 65] { R9946 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [65, 65] { R9946 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [66, 65535] { R9946 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R9946 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9946 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [65, 65] { R9946 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [66, 65535] { R9946 += 1, R137 += 1, R138 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9946 += 1, R137 += 1, R138 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R9948 += 1 };
  s0 -> s0 [0, 65535] { R9947 += 1, R9948 += 1 };
  s0 -> s2 [65, 65] { R9948 += 1 };
  s0 -> s3 [65, 65] { R9948 += 1 };
  s0 -> s1 [66, 65535] { R9948 += 1 };
  s1 -> s1 [0, 64] { R9948 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9948 += 1 };
  s1 -> s3 [65, 65] { R9948 += 1 };
  s1 -> s1 [66, 65535] { R9948 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R9948 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R9950 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R9949 += 1, R9950 += 1 };
  s0 -> s2 [65, 65] { R9950 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [65, 65] { R9950 += 1, R143 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R9950 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R9950 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9950 += 1, R143 += 1, R144 += 1 };
  s1 -> s3 [65, 65] { R9950 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R9950 += 1, R143 += 1, R144 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9950 += 1, R143 += 1, R144 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R9952 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R9951 += 1, R9952 += 1 };
  s0 -> s2 [65, 65] { R9952 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [65, 65] { R9952 += 1, R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R9952 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 64] { R9952 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9952 += 1, R149 += 1, R150 += 1 };
  s1 -> s3 [65, 65] { R9952 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [66, 65535] { R9952 += 1, R149 += 1, R150 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9952 += 1, R149 += 1, R150 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R9954 += 1 };
  s0 -> s0 [0, 65535] { R9953 += 1, R9954 += 1 };
  s0 -> s2 [65, 65] { R9954 += 1 };
  s0 -> s3 [65, 65] { R9954 += 1 };
  s0 -> s1 [66, 65535] { R9954 += 1 };
  s1 -> s1 [0, 64] { R9954 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9954 += 1 };
  s1 -> s3 [65, 65] { R9954 += 1 };
  s1 -> s1 [66, 65535] { R9954 += 1 };
  s2 -> s2 [0, 65535] { R9954 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R9956 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R9955 += 1, R9956 += 1 };
  s0 -> s2 [65, 65] { R9956 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [65, 65] { R9956 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [66, 65535] { R9956 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 64] { R9956 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R9956 += 1, R155 += 1, R156 += 1 };
  s1 -> s3 [65, 65] { R9956 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [66, 65535] { R9956 += 1, R155 += 1, R156 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9956 += 1, R155 += 1, R156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 43] { R9958 += 1 };
  s0 -> s0 [0, 65535] { R9957 += 1, R9958 += 1 };
  s0 -> s1 [45, 45] { R9958 += 1 };
  s0 -> s2 [46, 46] { R9958 += 1 };
  s0 -> s1 [48, 62] { R9958 += 1 };
  s0 -> s3 [65, 65] { R9958 += 1 };
  s0 -> s1 [66, 65535] { R9958 += 1 };
  s1 -> s1 [0, 43] { R9958 += 1 };
  s1 -> s1 [45, 45] { R9958 += 1 };
  s1 -> s2 [46, 46] { R9958 += 1 };
  s1 -> s1 [48, 62] { R9958 += 1 };
  s1 -> s3 [65, 65] { R9958 += 1 };
  s1 -> s1 [66, 65535] { R9958 += 1 };
  s2 -> s1 [0, 43] { R9958 += 1 };
  s2 -> s1 [45, 45] { R9958 += 1 };
  s2 -> s2 [46, 46] { R9958 += 1 };
  s2 -> s1 [48, 62] { R9958 += 1 };
  s2 -> s3 [65, 65] { R9958 += 1 };
  s2 -> s1 [66, 114] { R9958 += 1 };
  s2 -> s8 [115, 115] { R9958 += 1 };
  s2 -> s1 [116, 65535] { R9958 += 1 };
  s3 -> s3 [0, 43] { R9958 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9958 += 1 };
  s3 -> s4 [46, 46] { R9958 += 1 };
  s3 -> s3 [48, 62] { R9958 += 1 };
  s3 -> s3 [65, 65535] { R9958 += 1 };
  s4 -> s3 [0, 43] { R9958 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9958 += 1 };
  s4 -> s4 [46, 46] { R9958 += 1 };
  s4 -> s3 [48, 62] { R9958 += 1 };
  s4 -> s3 [65, 114] { R9958 += 1 };
  s4 -> s5 [115, 115] { R9958 += 1 };
  s4 -> s3 [116, 65535] { R9958 += 1 };
  s5 -> s3 [0, 43] { R9958 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9958 += 1 };
  s5 -> s4 [46, 46] { R9958 += 1 };
  s5 -> s3 [48, 62] { R9958 += 1 };
  s5 -> s3 [65, 110] { R9958 += 1 };
  s5 -> s6 [111, 111] { R9958 += 1 };
  s5 -> s3 [112, 65535] { R9958 += 1 };
  s6 -> s3 [0, 43] { R9958 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9958 += 1 };
  s6 -> s4 [46, 46] { R9958 += 1 };
  s6 -> s3 [48, 62] { R9958 += 1 };
  s6 -> s3 [65, 98] { R9958 += 1 };
  s6 -> s7 [99, 99] { R9958 += 1 };
  s6 -> s3 [100, 65535] { R9958 += 1 };
  s7 -> s3 [0, 43] { R9958 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9958 += 1 };
  s7 -> s4 [46, 46] { R9958 += 1 };
  s7 -> s3 [48, 62] { R9958 += 1 };
  s7 -> s3 [65, 106] { R9958 += 1 };
  s7 -> s3 [108, 65535] { R9958 += 1 };
  s8 -> s1 [0, 43] { R9958 += 1 };
  s8 -> s1 [45, 45] { R9958 += 1 };
  s8 -> s2 [46, 46] { R9958 += 1 };
  s8 -> s1 [48, 62] { R9958 += 1 };
  s8 -> s3 [65, 65] { R9958 += 1 };
  s8 -> s1 [66, 110] { R9958 += 1 };
  s8 -> s9 [111, 111] { R9958 += 1 };
  s8 -> s1 [112, 65535] { R9958 += 1 };
  s9 -> s1 [0, 43] { R9958 += 1 };
  s9 -> s1 [45, 45] { R9958 += 1 };
  s9 -> s2 [46, 46] { R9958 += 1 };
  s9 -> s1 [48, 62] { R9958 += 1 };
  s9 -> s3 [65, 65] { R9958 += 1 };
  s9 -> s1 [66, 98] { R9958 += 1 };
  s9 -> s10 [99, 99] { R9958 += 1 };
  s9 -> s1 [100, 65535] { R9958 += 1 };
  s10 -> s1 [0, 43] { R9958 += 1 };
  s10 -> s1 [45, 45] { R9958 += 1 };
  s10 -> s2 [46, 46] { R9958 += 1 };
  s10 -> s1 [48, 62] { R9958 += 1 };
  s10 -> s3 [65, 65] { R9958 += 1 };
  s10 -> s1 [66, 106] { R9958 += 1 };
  s10 -> s1 [108, 65535] { R9958 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R9959 += 1, R9960 += 1 };
  s0 -> s1 [0, 65535] { R9960 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9960 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 57] { R9962 += 1 };
  s0 -> s0 [0, 65535] { R9961 += 1, R9962 += 1 };
  s0 -> s2 [0, 65535] { R9962 += 1, R20 += 1 };
  s0 -> s3 [58, 58] { R9962 += 1 };
  s0 -> s1 [59, 65535] { R9962 += 1 };
  s1 -> s1 [0, 57] { R9962 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9962 += 1 };
  s1 -> s1 [59, 65535] { R9962 += 1 };
  s2 -> s1 [0, 57] { R9962 += 1 };
  s2 -> s2 [0, 65535] { R9962 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R9962 += 1 };
  s2 -> s1 [59, 65535] { R9962 += 1 };
  s3 -> s3 [0, 65535] { R9962 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R9964 += 1 };
  s0 -> s2 [0, 65535] { R9964 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R9963 += 1, R9964 += 1 };
  s0 -> s3 [65, 65] { R9964 += 1 };
  s0 -> s1 [66, 65535] { R9964 += 1 };
  s1 -> s1 [0, 64] { R9964 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9964 += 1 };
  s1 -> s1 [66, 65535] { R9964 += 1 };
  s2 -> s1 [0, 64] { R9964 += 1 };
  s2 -> s2 [0, 65535] { R9964 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R9964 += 1 };
  s2 -> s1 [66, 65535] { R9964 += 1 };
  s3 -> s3 [0, 65535] { R9964 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 90] { R9966 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R9966 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R9965 += 1, R9966 += 1 };
  s0 -> s3 [91, 91] { R9966 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R9966 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R9966 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R9966 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R9966 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R9966 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R9966 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R9966 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R9966 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9966 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R9968 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R9968 += 1, R42 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R9967 += 1, R9968 += 1 };
  s1 -> s1 [0, 65535] { R9968 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R9968 += 1, R42 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9968 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9968 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9968 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R9970 += 1, R9828 += 1 };
  s0 -> s0 [0, 65535] { R9969 += 1, R9970 += 1 };
  s0 -> s2 [0, 65535] { R9970 += 1, R9827 += 1, R9828 += 1 };
  s0 -> s1 [66, 65535] { R9970 += 1, R9828 += 1 };
  s1 -> s1 [0, 64] { R9970 += 1, R9828 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9970 += 1 };
  s1 -> s1 [66, 65535] { R9970 += 1, R9828 += 1 };
  s2 -> s1 [0, 64] { R9970 += 1, R9828 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9970 += 1, R9827 += 1, R9828 += 1 };
  s2 -> s1 [66, 65535] { R9970 += 1, R9828 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R9972 += 1, R9830 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R9971 += 1, R9972 += 1 };
  s0 -> s2 [0, 65535] { R9972 += 1, R9829 += 1, R9830 += 1 };
  s1 -> s4 [0, 65535] { R9972 += 1 };
  s1 -> s1 [0, 65535] { R9972 += 1, R9830 += 1, R35 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9972 += 1, R9830 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R9972 += 1, R9829 += 1, R9830 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9972 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R9974 += 1, R9832 += 1 };
  s0 -> s0 [0, 65535] { R9973 += 1, R9974 += 1 };
  s0 -> s2 [0, 65535] { R9974 += 1, R9831 += 1, R9832 += 1 };
  s0 -> s1 [81, 65535] { R9974 += 1, R9832 += 1 };
  s1 -> s1 [0, 65] { R9974 += 1, R9832 += 1 };
  s1 -> s1 [0, 65535] { R9974 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R9974 += 1, R9832 += 1 };
  s2 -> s1 [0, 65] { R9974 += 1, R9832 += 1 };
  s2 -> s2 [0, 65535] { R9974 += 1, R9831 += 1, R9832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R9974 += 1, R9832 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R9975 += 1, R9976 += 1 };
  s0 -> s1 [0, 65535] { R9976 += 1, R9834 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R9976 += 1, R9833 += 1, R9834 += 1 };
  s1 -> s4 [0, 65535] { R9976 += 1 };
  s1 -> s1 [0, 65535] { R9976 += 1, R9834 += 1, R598 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9976 += 1, R9834 += 1, R598 += 1 };
  s2 -> s2 [0, 65535] { R9976 += 1, R9833 += 1, R9834 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9976 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 80] { R9978 += 1, R9836 += 1 };
  s0 -> s0 [0, 65535] { R9977 += 1, R9978 += 1 };
  s0 -> s2 [0, 65535] { R9978 += 1, R9835 += 1, R9836 += 1 };
  s0 -> s3 [0, 65535] { R9978 += 1, R9836 += 1, R600 += 1 };
  s0 -> s1 [82, 65535] { R9978 += 1, R9836 += 1 };
  s1 -> s1 [0, 80] { R9978 += 1, R9836 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9978 += 1 };
  s1 -> s1 [82, 65535] { R9978 += 1, R9836 += 1 };
  s2 -> s1 [0, 80] { R9978 += 1, R9836 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9978 += 1, R9835 += 1, R9836 += 1 };
  s2 -> s3 [0, 65535] { R9978 += 1, R9836 += 1, R600 += 1 };
  s2 -> s1 [82, 65535] { R9978 += 1, R9836 += 1 };
  s3 -> s1 [0, 80] { R9978 += 1, R9836 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9978 += 1, R9836 += 1, R600 += 1 };
  s3 -> s5 [0, 65535] { R9978 += 1 };
  s3 -> s1 [82, 65535] { R9978 += 1, R9836 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9978 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 80] { R9980 += 1, R9838 += 1, R604 += 1 };
  s0 -> s2 [0, 65535] { R9980 += 1, R9838 += 1, R603 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R9979 += 1, R9980 += 1 };
  s0 -> s3 [0, 65535] { R9980 += 1, R9837 += 1, R9838 += 1 };
  s0 -> s1 [82, 65535] { R9980 += 1, R9838 += 1, R604 += 1 };
  s1 -> s1 [0, 80] { R9980 += 1, R9838 += 1, R604 += 1 };
  s1 -> s5 [0, 65535] { R9980 += 1 };
  s1 -> s1 [0, 65535] { R9980 += 1, R9838 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R9980 += 1, R9838 += 1, R604 += 1 };
  s2 -> s1 [0, 80] { R9980 += 1, R9838 += 1, R604 += 1 };
  s2 -> s5 [0, 65535] { R9980 += 1 };
  s2 -> s2 [0, 65535] { R9980 += 1, R9838 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R9980 += 1, R9838 += 1, R604 += 1 };
  s3 -> s1 [0, 80] { R9980 += 1, R9838 += 1, R604 += 1 };
  s3 -> s2 [0, 65535] { R9980 += 1, R9838 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R9980 += 1, R9837 += 1, R9838 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R9980 += 1, R9838 += 1, R604 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9980 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R9982 += 1, R9839 += 1, R9840 += 1 };
  s0 -> s2 [0, 65535] { R9982 += 1, R9840 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R9981 += 1, R9982 += 1 };
  s0 -> s3 [0, 65535] { R9982 += 1, R9840 += 1, R608 += 1, R609 += 1 };
  s1 -> s1 [0, 65535] { R9982 += 1, R9839 += 1, R9840 += 1 };
  s1 -> s2 [0, 65535] { R9982 += 1, R9840 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R9982 += 1, R9840 += 1, R608 += 1, R609 += 1 };
  s2 -> s6 [0, 65535] { R9982 += 1, R9840 += 1 };
  s2 -> s2 [0, 65535] { R9982 += 1, R9840 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9982 += 1 };
  s3 -> s2 [0, 65535] { R9982 += 1, R9840 += 1, R609 += 1, R610 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9982 += 1 };
  s3 -> s3 [0, 65535] { R9982 += 1, R9840 += 1, R608 += 1, R609 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9982 += 1 };
  s6 -> s6 [0, 65535] { R9982 += 1, R9840 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9982 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 81] { R9984 += 1, R9842 += 1, R9420 += 1 };
  s0 -> s0 [0, 65535] { R9983 += 1, R9984 += 1 };
  s0 -> s1 [0, 65535] { R9984 += 1, R9842 += 1 };
  s0 -> s2 [0, 65535] { R9984 += 1, R9841 += 1, R9842 += 1 };
  s0 -> s1 [91, 65535] { R9984 += 1, R9842 += 1, R9420 += 1 };
  s1 -> s1 [0, 81] { R9984 += 1, R9842 += 1, R9420 += 1 };
  s1 -> s1 [0, 65535] { R9984 += 1, R9842 += 1 };
  s1 -> s4 [0, 65535] { R9984 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R9984 += 1, R9842 += 1, R9420 += 1 };
  s2 -> s1 [0, 81] { R9984 += 1, R9842 += 1, R9420 += 1 };
  s2 -> s1 [0, 65535] { R9984 += 1, R9842 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9984 += 1, R9841 += 1, R9842 += 1 };
  s2 -> s1 [91, 65535] { R9984 += 1, R9842 += 1, R9420 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9984 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 65535] { R9986 += 1, R9844 += 1, R9425 += 1, R9426 += 1 };
  s0 -> s2 [0, 65535] { R9986 += 1, R9844 += 1, R9424 += 1, R9425 += 1 };
  s0 -> s0 [0, 65535] { R9985 += 1, R9986 += 1 };
  s0 -> s3 [0, 65535] { R9986 += 1, R9843 += 1, R9844 += 1 };
  s1 -> s1 [0, 65535] { R9986 += 1, R9844 += 1, R9425 += 1, R9426 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R9986 += 1, R9844 += 1 };
  s1 -> s5 [0, 65535] { R9986 += 1 };
  s2 -> s1 [0, 65535] { R9986 += 1, R9844 += 1, R9425 += 1, R9426 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9986 += 1, R9844 += 1, R9424 += 1, R9425 += 1 };
  s2 -> s5 [0, 65535] { R9986 += 1 };
  s3 -> s1 [0, 65535] { R9986 += 1, R9844 += 1, R9425 += 1, R9426 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9986 += 1, R9844 += 1, R9424 += 1, R9425 += 1 };
  s3 -> s3 [0, 65535] { R9986 += 1, R9843 += 1, R9844 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9986 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9986 += 1, R9844 += 1 };
  s6 -> s5 [0, 65535] { R9986 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R9987 += 1, R9988 += 1 };
  s0 -> s1 [0, 65535] { R9988 += 1, R9845 += 1, R9846 += 1 };
  s0 -> s2 [0, 65535] { R9988 += 1, R9846 += 1, R9430 += 1, R9431 += 1 };
  s0 -> s3 [0, 65535] { R9988 += 1, R9846 += 1, R9431 += 1, R9432 += 1 };
  s1 -> s1 [0, 65535] { R9988 += 1, R9845 += 1, R9846 += 1 };
  s1 -> s2 [0, 65535] { R9988 += 1, R9846 += 1, R9430 += 1, R9431 += 1 };
  s1 -> s3 [0, 65535] { R9988 += 1, R9846 += 1, R9431 += 1, R9432 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R9988 += 1 };
  s2 -> s2 [0, 65535] { R9988 += 1, R9846 += 1, R9430 += 1, R9431 += 1 };
  s2 -> s3 [0, 65535] { R9988 += 1, R9846 += 1, R9431 += 1, R9432 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R9988 += 1, R9846 += 1 };
  s3 -> s5 [0, 65535] { R9988 += 1 };
  s3 -> s3 [0, 65535] { R9988 += 1, R9846 += 1, R9431 += 1, R9432 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9988 += 1, R9846 += 1 };
  s4 -> s5 [0, 65535] { R9988 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9988 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 65535] { R9990 += 1, R9847 += 1, R9848 += 1 };
  s0 -> s2 [0, 65535] { R9990 += 1, R9848 += 1 };
  s0 -> s0 [0, 65535] { R9989 += 1, R9990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9990 += 1, R9847 += 1, R9848 += 1 };
  s1 -> s2 [0, 65535] { R9990 += 1, R9848 += 1 };
  s2 -> s3 [0, 65535] { R9990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9990 += 1, R9848 += 1 };
  s3 -> s3 [0, 65535] { R9990 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R9992 += 1, R9850 += 1 };
  s0 -> s2 [0, 65535] { R9992 += 1, R9850 += 1, R9825 += 1, R9826 += 1 };
  s0 -> s0 [0, 65535] { R9991 += 1, R9992 += 1 };
  s0 -> s3 [0, 65535] { R9992 += 1, R9849 += 1, R9850 += 1 };
  s1 -> s1 [0, 65535] { R9992 += 1, R9850 += 1 };
  s1 -> s5 [0, 65535] { R9992 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R9992 += 1, R9850 += 1 };
  s2 -> s2 [0, 65535] { R9992 += 1, R9850 += 1, R9825 += 1, R9826 += 1 };
  s2 -> s5 [0, 65535] { R9992 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R9992 += 1, R9850 += 1 };
  s3 -> s2 [0, 65535] { R9992 += 1, R9850 += 1, R9825 += 1, R9826 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9992 += 1, R9849 += 1, R9850 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9992 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s0 [0, 65535] { R9993 += 1, R9994 += 1 };
  s0 -> s1 [0, 65535] { R9994 += 1, R9893 += 1, R9894 += 1 };
  s0 -> s2 [0, 65535] { R9994 += 1, R9894 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R9994 += 1, R9893 += 1, R9894 += 1 };
  s1 -> s2 [0, 65535] { R9994 += 1, R9894 += 1, R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9994 += 1, R9894 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R9994 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9994 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R9996 += 1, R9896 += 1 };
  s0 -> s0 [0, 65535] { R9995 += 1, R9996 += 1 };
  s0 -> s2 [0, 65535] { R9996 += 1, R9895 += 1, R9896 += 1 };
  s0 -> s3 [65, 65] { R9996 += 1, R9896 += 1 };
  s0 -> s4 [65, 65] { R9996 += 1, R9896 += 1 };
  s0 -> s5 [81, 81] { R9996 += 1, R9896 += 1 };
  s0 -> s1 [82, 65535] { R9996 += 1, R9896 += 1 };
  s1 -> s1 [0, 64] { R9996 += 1, R9896 += 1 };
  s1 -> s3 [65, 65] { R9996 += 1, R9896 += 1 };
  s1 -> s4 [65, 65] { R9996 += 1, R9896 += 1 };
  s1 -> s5 [81, 81] { R9996 += 1, R9896 += 1 };
  s1 -> s1 [82, 65535] { R9996 += 1, R9896 += 1 };
  s2 -> s1 [0, 64] { R9996 += 1, R9896 += 1 };
  s2 -> s2 [0, 65535] { R9996 += 1, R9895 += 1, R9896 += 1 };
  s2 -> s3 [65, 65] { R9996 += 1, R9896 += 1 };
  s2 -> s4 [65, 65] { R9996 += 1, R9896 += 1 };
  s2 -> s5 [81, 81] { R9996 += 1, R9896 += 1 };
  s2 -> s1 [82, 65535] { R9996 += 1, R9896 += 1 };
  s3 -> s3 [0, 65] { R9996 += 1, R9896 += 1 };
  s3 -> s7 [81, 81] { R9996 += 1, R9896 += 1 };
  s3 -> s3 [82, 65535] { R9996 += 1, R9896 += 1 };
  s5 -> s5 [0, 64] { R9996 += 1, R9896 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9996 += 1 };
  s5 -> s7 [65, 65] { R9996 += 1, R9896 += 1 };
  s5 -> s8 [65, 65] { R9996 += 1, R9896 += 1 };
  s5 -> s5 [81, 65535] { R9996 += 1, R9896 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R9996 += 1, R9896 += 1 };
  s7 -> s7 [0, 65535] { R9996 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R9996 += 1, R9896 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9996 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R9998 += 1, R9898 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R9998 += 1, R9897 += 1, R9898 += 1 };
  s0 -> s0 [0, 65535] { R9997 += 1, R9998 += 1 };
  s0 -> s3 [65, 65] { R9998 += 1, R9898 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R9998 += 1, R9898 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R9998 += 1, R9898 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R9998 += 1, R9898 += 1, R597 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9998 += 1 };
  s1 -> s3 [65, 65] { R9998 += 1, R9898 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R9998 += 1, R9898 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R9998 += 1, R9898 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R9998 += 1, R9898 += 1, R597 += 1 };
  s2 -> s2 [0, 65535] { R9998 += 1, R9897 += 1, R9898 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9998 += 1, R9898 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R9998 += 1, R9898 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R9998 += 1, R9898 += 1, R597 += 1 };
  s3 -> s6 [0, 65535] { R9998 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9998 += 1, R9898 += 1, R597 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9998 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9998 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R10000 += 1, R9900 += 1, R599 += 1 };
  s0 -> s2 [0, 65535] { R10000 += 1, R9899 += 1, R9900 += 1 };
  s0 -> s0 [0, 65535] { R9999 += 1, R10000 += 1 };
  s0 -> s3 [65, 65] { R10000 += 1, R9900 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R10000 += 1, R9900 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R10000 += 1, R9900 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R10000 += 1, R9900 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R10000 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10000 += 1, R9900 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R10000 += 1, R9900 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R10000 += 1, R9900 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R10000 += 1, R9900 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R10000 += 1, R9899 += 1, R9900 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10000 += 1, R9900 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R10000 += 1, R9900 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R10000 += 1, R9900 += 1, R599 += 1 };
  s3 -> s3 [0, 65535] { R10000 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10000 += 1 };
  s4 -> s4 [0, 65535] { R10000 += 1, R9900 += 1, R599 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10000 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s0 -> s2 [0, 65535] { R10002 += 1, R9901 += 1, R9902 += 1 };
  s0 -> s0 [0, 65535] { R10001 += 1, R10002 += 1 };
  s0 -> s3 [65, 65] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s0 -> s4 [65, 65] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s0 -> s1 [66, 65535] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [0, 64] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10002 += 1 };
  s1 -> s3 [65, 65] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s1 -> s4 [65, 65] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s1 -> s1 [66, 65535] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s2 -> s1 [0, 64] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s2 -> s2 [0, 65535] { R10002 += 1, R9901 += 1, R9902 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s2 -> s4 [65, 65] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s2 -> s1 [66, 65535] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10002 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10002 += 1 };
  s4 -> s4 [0, 65535] { R10002 += 1, R9902 += 1, R601 += 1, R602 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10002 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s0 -> s0 [0, 65535] { R10003 += 1, R10004 += 1 };
  s0 -> s2 [0, 65535] { R10004 += 1, R9903 += 1, R9904 += 1 };
  s0 -> s3 [65, 65] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s0 -> s4 [65, 65] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s0 -> s1 [66, 65535] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 64] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 65535] { R10004 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [65, 65] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [66, 65535] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [0, 64] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10004 += 1, R9903 += 1, R9904 += 1 };
  s2 -> s3 [65, 65] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [65, 65] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [66, 65535] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s3 -> s3 [0, 65535] { R10004 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10004 += 1, R9904 += 1, R605 += 1, R606 += 1 };
  s4 -> s6 [0, 65535] { R10004 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10004 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s0 -> s2 [0, 64] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s0 [0, 65535] { R10005 += 1, R10006 += 1 };
  s0 -> s3 [0, 65535] { R10006 += 1, R9905 += 1, R9906 += 1 };
  s0 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s0 -> s5 [65, 65] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s0 -> s7 [65, 65] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s0 -> s2 [66, 65535] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s0 -> s1 [91, 107] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s0 -> s8 [108, 108] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s0 -> s1 [109, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s1 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s1 -> s1 [0, 65535] { R10006 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s4 [65, 65] { R10006 += 1, R9906 += 1 };
  s1 -> s6 [65, 65] { R10006 += 1, R9906 += 1 };
  s1 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s1 -> s1 [66, 65535] { R10006 += 1, R9906 += 1 };
  s1 -> s1 [91, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s2 [0, 64] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s2 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s5 [65, 65] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s2 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s7 [65, 65] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s2 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s2 [66, 65535] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s2 -> s1 [91, 107] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s8 [108, 108] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s2 -> s1 [109, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s2 [0, 64] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s3 [0, 65535] { R10006 += 1, R9905 += 1, R9906 += 1 };
  s3 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s5 [65, 65] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s7 [65, 65] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s2 [66, 65535] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s3 -> s1 [91, 107] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s8 [108, 108] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s3 -> s1 [109, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s4 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s4 -> s35 [0, 65535] { R10006 += 1 };
  s4 -> s4 [0, 65535] { R10006 += 1, R9906 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [91, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R10006 += 1 };
  s7 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s7 -> s7 [0, 65535] { R10006 += 1, R9906 += 1, R9417 += 1, R9418 += 1 };
  s7 -> s4 [91, 107] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s7 -> s10 [108, 108] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s7 -> s4 [109, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s8 [0, 64] { R10006 += 1, R9906 += 1 };
  s8 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s9 [65, 65] { R10006 += 1, R9906 += 1 };
  s8 -> s10 [65, 65] { R10006 += 1, R9906 += 1 };
  s8 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s8 [66, 65535] { R10006 += 1, R9906 += 1 };
  s8 -> s1 [91, 110] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s11 [111, 111] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s8 -> s1 [112, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s10 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s10 -> s10 [0, 65535] { R10006 += 1, R9906 += 1 };
  s10 -> s4 [91, 110] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s10 -> s13 [111, 111] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s10 -> s4 [112, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s11 [0, 64] { R10006 += 1, R9906 += 1 };
  s11 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s12 [65, 65] { R10006 += 1, R9906 += 1 };
  s11 -> s13 [65, 65] { R10006 += 1, R9906 += 1 };
  s11 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s11 [66, 65535] { R10006 += 1, R9906 += 1 };
  s11 -> s1 [91, 98] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s14 [99, 99] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s11 -> s1 [100, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s13 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s13 -> s13 [0, 65535] { R10006 += 1, R9906 += 1 };
  s13 -> s4 [91, 98] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s13 -> s17 [99, 99] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s13 -> s4 [100, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s14 [0, 64] { R10006 += 1, R9906 += 1 };
  s14 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s15 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s16 [65, 65] { R10006 += 1, R9906 += 1 };
  s14 -> s17 [65, 65] { R10006 += 1, R9906 += 1 };
  s14 -> s18 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s14 [66, 65535] { R10006 += 1, R9906 += 1 };
  s14 -> s1 [91, 96] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s19 [97, 97] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s14 -> s1 [98, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s17 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s17 -> s17 [0, 65535] { R10006 += 1, R9906 += 1 };
  s17 -> s4 [91, 96] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s17 -> s18 [97, 97] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s17 -> s4 [98, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s18 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s18 -> s18 [0, 65535] { R10006 += 1, R9906 += 1 };
  s18 -> s4 [91, 107] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s18 -> s21 [108, 108] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s18 -> s4 [109, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s19 [0, 64] { R10006 += 1, R9906 += 1 };
  s19 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s15 [65, 65] { R10006 += 1, R9906 += 1 };
  s19 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s18 [65, 65] { R10006 += 1, R9906 += 1 };
  s19 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s19 [66, 65535] { R10006 += 1, R9906 += 1 };
  s19 -> s1 [91, 107] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s20 [108, 108] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s19 -> s1 [109, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s20 [0, 64] { R10006 += 1, R9906 += 1 };
  s20 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s21 [65, 65] { R10006 += 1, R9906 += 1 };
  s20 -> s22 [65, 65] { R10006 += 1, R9906 += 1 };
  s20 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s20 [66, 65535] { R10006 += 1, R9906 += 1 };
  s20 -> s1 [91, 103] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s23 [104, 104] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s20 -> s1 [105, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s21 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s21 -> s21 [0, 65535] { R10006 += 1, R9906 += 1 };
  s21 -> s4 [91, 103] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s21 -> s24 [104, 104] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s21 -> s4 [105, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s23 [0, 64] { R10006 += 1, R9906 += 1 };
  s23 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s24 [65, 65] { R10006 += 1, R9906 += 1 };
  s23 -> s25 [65, 65] { R10006 += 1, R9906 += 1 };
  s23 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s23 [66, 65535] { R10006 += 1, R9906 += 1 };
  s23 -> s1 [91, 110] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s26 [111, 111] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s23 -> s1 [112, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s24 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s24 -> s24 [0, 65535] { R10006 += 1, R9906 += 1 };
  s24 -> s4 [91, 110] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s24 -> s28 [111, 111] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s24 -> s4 [112, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s26 [0, 64] { R10006 += 1, R9906 += 1 };
  s26 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s27 [65, 65] { R10006 += 1, R9906 += 1 };
  s26 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s28 [65, 65] { R10006 += 1, R9906 += 1 };
  s26 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s26 [66, 65535] { R10006 += 1, R9906 += 1 };
  s26 -> s1 [91, 114] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s29 [115, 115] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s26 -> s1 [116, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s28 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s28 -> s28 [0, 65535] { R10006 += 1, R9906 += 1 };
  s28 -> s4 [91, 114] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s28 -> s30 [115, 115] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s28 -> s4 [116, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s29 [0, 64] { R10006 += 1, R9906 += 1 };
  s29 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s30 [65, 65] { R10006 += 1, R9906 += 1 };
  s29 -> s31 [65, 65] { R10006 += 1, R9906 += 1 };
  s29 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s29 [66, 65535] { R10006 += 1, R9906 += 1 };
  s29 -> s1 [91, 115] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s32 [116, 116] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s29 -> s1 [117, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s30 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s30 -> s30 [0, 65535] { R10006 += 1, R9906 += 1 };
  s30 -> s4 [91, 115] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s30 -> s33 [116, 116] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s30 -> s4 [117, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s32 -> s1 [0, 64] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s32 -> s4 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s32 -> s6 [65, 65] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s32 -> s1 [66, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s32 -> s1 [91, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s33 -> s4 [0, 81] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s33 -> s4 [91, 65535] { R10006 += 1, R9906 += 1, R9418 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10006 += 1 };
  s35 -> s34 [0, 65535];
  accepting s4, s34, s6, s1, s35;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s0 -> s0 [0, 65535] { R10007 += 1, R10008 += 1 };
  s0 -> s2 [0, 65535] { R10008 += 1, R9907 += 1, R9908 += 1 };
  s0 -> s3 [65, 65] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s0 -> s4 [65, 65] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s0 -> s1 [66, 65535] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s1 [0, 64] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s1 [0, 65535] { R10008 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s4 [65, 65] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s1 -> s1 [66, 65535] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s1 [0, 64] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10008 += 1, R9907 += 1, R9908 += 1 };
  s2 -> s3 [65, 65] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s4 [65, 65] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s2 -> s1 [66, 65535] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10008 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10008 += 1 };
  s4 -> s4 [0, 65535] { R10008 += 1, R9908 += 1, R9421 += 1, R9422 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10008 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s0 -> s0 [0, 65535] { R10009 += 1, R10010 += 1 };
  s0 -> s2 [0, 65535] { R10010 += 1, R9909 += 1, R9910 += 1 };
  s0 -> s3 [65, 65] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s0 -> s4 [65, 65] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s0 -> s1 [66, 65535] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s1 [0, 64] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10010 += 1 };
  s1 -> s3 [65, 65] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s4 [65, 65] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s1 -> s1 [66, 65535] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s1 [0, 64] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10010 += 1, R9909 += 1, R9910 += 1 };
  s2 -> s3 [65, 65] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s4 [65, 65] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s2 -> s1 [66, 65535] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10010 += 1, R9910 += 1, R9427 += 1, R9428 += 1 };
  s3 -> s6 [0, 65535] { R10010 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10010 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10010 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R10012 += 1, R9912 += 1 };
  s0 -> s2 [0, 65535] { R10012 += 1, R9911 += 1, R9912 += 1 };
  s0 -> s0 [0, 65535] { R10011 += 1, R10012 += 1 };
  s0 -> s3 [65, 65] { R10012 += 1, R9912 += 1 };
  s0 -> s4 [65, 65] { R10012 += 1, R9912 += 1 };
  s0 -> s1 [66, 65535] { R10012 += 1, R9912 += 1 };
  s1 -> s1 [0, 64] { R10012 += 1, R9912 += 1 };
  s1 -> s1 [0, 65535] { R10012 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10012 += 1, R9912 += 1 };
  s1 -> s4 [65, 65] { R10012 += 1, R9912 += 1 };
  s1 -> s1 [66, 65535] { R10012 += 1, R9912 += 1 };
  s2 -> s1 [0, 64] { R10012 += 1, R9912 += 1 };
  s2 -> s2 [0, 65535] { R10012 += 1, R9911 += 1, R9912 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10012 += 1, R9912 += 1 };
  s2 -> s4 [65, 65] { R10012 += 1, R9912 += 1 };
  s2 -> s1 [66, 65535] { R10012 += 1, R9912 += 1 };
  s3 -> s6 [0, 65535] { R10012 += 1 };
  s3 -> s3 [0, 65535] { R10012 += 1, R9912 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10012 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10012 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s0 -> s2 [0, 64] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s0 -> s3 [0, 65535] { R10014 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s0 [0, 65535] { R10013 += 1, R10014 += 1 };
  s0 -> s4 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s0 -> s5 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s0 -> s6 [65, 65] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s0 -> s7 [65, 65] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s0 -> s2 [66, 80] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s0 -> s1 [66, 65535] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s0 -> s8 [81, 81] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s0 -> s2 [82, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s1 -> s1 [0, 64] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s1 -> s2 [0, 64] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s1 -> s4 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s1 -> s5 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s1 -> s6 [65, 65] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s1 -> s7 [65, 65] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s1 -> s2 [66, 80] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s1 -> s1 [66, 65535] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s1 -> s8 [81, 81] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s1 -> s2 [82, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s2 -> s2 [0, 64] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s2 -> s4 [65, 65] { R10014 += 1, R9914 += 1 };
  s2 -> s5 [65, 65] { R10014 += 1, R9914 += 1 };
  s2 -> s2 [66, 80] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s2 -> s2 [66, 65535] { R10014 += 1, R9914 += 1 };
  s2 -> s8 [81, 81] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s2 -> s2 [82, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s3 -> s1 [0, 64] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s3 -> s2 [0, 64] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s3 -> s3 [0, 65535] { R10014 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s4 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s3 -> s5 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s3 -> s6 [65, 65] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s3 -> s7 [65, 65] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s3 -> s2 [66, 80] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s3 -> s1 [66, 65535] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s3 -> s8 [81, 81] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s3 -> s2 [82, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s4 -> s4 [0, 80] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s4 -> s4 [0, 65535] { R10014 += 1, R9914 += 1 };
  s4 -> s10 [81, 81] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s4 -> s4 [82, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s7 -> s4 [0, 80] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s7 -> s7 [0, 65535] { R10014 += 1, R9914 += 1, R9821 += 1, R9822 += 1 };
  s7 -> s10 [81, 81] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s7 -> s4 [82, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s8 -> s8 [0, 64] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10014 += 1 };
  s8 -> s10 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s8 -> s11 [65, 65] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s8 -> s8 [66, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10014 += 1, R9914 += 1, R9822 += 1, R9823 += 1 };
  s10 -> s12 [0, 65535] { R10014 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10014 += 1 };
  s12 -> s12 [0, 65535] { R10014 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P90
automaton P90_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
constraint R5 = R9850 && R6 = R10014 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R86 + R85 = 0 && R598 + R597 + -1*R9425 + -1*R9422 = 0 && R603 + R601 = 0 && R604 + R602 + -1*R9425 + -1*R9422 = 0 && R608 + R605 = 0 && R609 + R606 + -1*R9425 + -1*R9422 = 0 && R9419 + R9417 = 0 && R9420 + R9418 + -1*R9425 + -1*R9422 = 0 && R9424 + R9421 = 0 && R9827 = 0 && R9828 = R9850 && R9829 = 0 && R9830 = R9850 && R9831 = 0 && R9832 = R9850 && R9833 = 0 && R9834 = R9850 && R9835 = 0 && R9836 = R9850 && R9837 = 0 && R9838 = R9850 && R9839 = 0 && R9840 = R9850 && R9841 = 0 && R9842 = R9850 && R9843 = 0 && R9844 = R9850 && R9845 = 0 && R9846 = R9850 && R9847 = 0 && R9848 = R9850 && R9849 = 0 && R9851 = 0 && R9852 = R10014 && R9853 = 0 && R9854 = R10014 && R9855 = 0 && R9856 = R10014 && R9857 = 0 && R9858 = R10014 && R9859 = 0 && R9860 = R10014 && R9861 = 0 && R9862 = R10014 && R9863 = 0 && R9864 = R10014 && R9865 = 0 && R9866 = R10014 && R9867 = 0 && R9868 = R10014 && R9869 = 0 && R9870 = R10014 && R9871 = 0 && R9872 = R10014 && R9873 = 0 && R9874 = R10014 && R9875 = 0 && R9876 = R10014 && R9877 = 0 && R9878 = R10014 && R9879 = 0 && R9880 = R10014 && R9881 = 0 && R9882 = R10014 && R9883 = 0 && R9884 = R10014 && R9885 = 0 && R9886 = R10014 && R9887 = 0 && R9888 = R10014 && R9889 = 0 && R9890 = R10014 && R9891 = 0 && R9892 = R10014 && R9895 = 0 && R9896 = 0 && R9905 = 0 && R9906 = 0 && R9913 = 0 && R9914 = 0 && R9957 = 10 && R9958 = R10014 && R9959 = 10 && R9960 = R10014 && R9961 = 10 && R9962 = R10014 && R9963 = 10 && R9964 = R10014 && R9965 = 10 && R9966 = R10014 && R9967 = 10 && R9968 = R10014 && R9969 = 10 && R9970 = R10014 && R9971 = 10 && R9972 = R10014 && R9973 = 10 && R9974 = R10014 && R9975 = 10 && R9976 = R10014 && R9977 = 10 && R9978 = R10014 && R9979 = 10 && R9980 = R10014 && R9981 = 10 && R9982 = R10014 && R9983 = 10 && R9984 = R10014 && R9985 = 10 && R9986 = R10014 && R9987 = 10 && R9988 = R10014 && R9989 = 10 && R9990 = R10014 && R9991 = 10 && R9992 = R10014 && R9993 = 10 && R9994 = R10014 && R9995 = 10 && R9996 = R10014 && R9997 = 10 && R9998 = R10014 && R9999 = 10 && R10000 = R10014 && R10001 = 10 && R10002 = R10014 && R10003 = 10 && R10004 = R10014 && R10005 = 10 && R10006 = R10014 && R10007 = 10 && R10008 = R10014 && R10009 = 10 && R10010 = R10014 && R10011 = 10 && R10012 = R10014 && R10013 = 10 && R114 + R111 + R148 + R145 != 0 && R130 + R127 + R160 + R157 != 0 && R9426 + R9423 + R9826 + R9823 != 0 && R20 < 1 && R21 < 1 && R24 < 1 && R88 + R87 < 1 && R90 + R89 < 1 && R92 + R91 < 1 && R600 + R599 < 1 && -1*R9425 < R9422 && 0 < R9850 && 9 < R10014 && (R36 = 0 || (R9893 = 0 && R9894 = 0)) && (R36 = 0 || (R9897 = 0 && R9898 = 0)) && (R36 = 0 || (R9899 = 0 && R9900 = 0)) && (R36 = 0 || (R9901 = 0 && R9902 = 0)) && (R36 = 0 || (R9903 = 0 && R9904 = 0)) && (R36 = 0 || (R9907 = 0 && R9908 = 0)) && (R36 = 0 || (R9909 = 0 && R9910 = 0)) && (R36 = 0 || (R9911 = 0 && R9912 = 0)) && (R38 = 0 || (R9915 = 0 && R9916 = 0)) && (R38 = 0 || (R9917 = 0 && R9918 = 0)) && (R38 = 0 || (R9919 = 0 && R9920 = 0)) && (R38 = 0 || (R9921 = 0 && R9922 = 0)) && (R38 = 0 || (R9923 = 0 && R9924 = 0)) && (R38 = 0 || (R9925 = 0 && R9926 = 0)) && (R38 = 0 || (R9927 = 0 && R9928 = 0)) && (R38 = 0 || (R9929 = 0 && R9930 = 0)) && (R38 = 0 || (R9931 = 0 && R9932 = 0)) && (R38 = 0 || (R9933 = 0 && R9934 = 0)) && (R38 = 0 || (R9935 = 0 && R9936 = 0)) && (R38 = 0 || (R9937 = 0 && R9938 = 0)) && (R38 = 0 || (R9939 = 0 && R9940 = 0)) && (R38 = 0 || (R9941 = 0 && R9942 = 0)) && (R38 = 0 || (R9943 = 0 && R9944 = 0)) && (R38 = 0 || (R9945 = 0 && R9946 = 0)) && (R38 = 0 || (R9947 = 0 && R9948 = 0)) && (R38 = 0 || (R9949 = 0 && R9950 = 0)) && (R38 = 0 || (R9951 = 0 && R9952 = 0)) && (R38 = 0 || (R9953 = 0 && R9954 = 0)) && (R38 = 0 || (R9955 = 0 && R9956 = 0)) && (R98 + R95 = 0 || (R96 + R93 = 0 && R97 + R94 = 0)) && (R104 + R101 = 0 || (R102 + R99 = 0 && R103 + R100 = 0)) && (R104 + R101 = 0 || (R107 + R105 = 0 && R108 + R106 = 0)) && (R104 + R101 = 0 || (R112 + R109 = 0 && R113 + R110 = 0)) && (R120 + R117 = 0 || (R118 + R115 = 0 && R119 + R116 = 0)) && (R120 + R117 = 0 || (R123 + R121 = 0 && R124 + R122 = 0)) && (R120 + R117 = 0 || (R128 + R125 = 0 && R129 + R126 = 0)) && (R136 + R133 = 0 || (R134 + R131 = 0 && R135 + R132 = 0)) && (R142 + R139 = 0 || (R140 + R137 = 0 && R141 + R138 = 0)) && (R142 + R139 = 0 || (R146 + R143 = 0 && R147 + R144 = 0)) && (R154 + R151 = 0 || (R152 + R149 = 0 && R153 + R150 = 0)) && (R154 + R151 = 0 || (R158 + R155 = 0 && R159 + R156 = 0)) && (R9432 + R9429 = 0 || (R9430 + R9427 = 0 && R9431 + R9428 = 0)) && (R9432 + R9429 = 0 || (R9824 + R9821 = 0 && R9825 + R9822 = 0));
// End of Parikh automata intersection problem
