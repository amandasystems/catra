// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R9;
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 42] { R55 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s2 [43, 43] { R55 += 1 };
  s0 -> s1 [44, 45] { R55 += 1 };
  s0 -> s3 [46, 46] { R55 += 1 };
  s0 -> s1 [48, 65535] { R55 += 1 };
  s1 -> s1 [0, 42] { R55 += 1 };
  s1 -> s2 [43, 43] { R55 += 1 };
  s1 -> s1 [44, 45] { R55 += 1 };
  s1 -> s3 [46, 46] { R55 += 1 };
  s1 -> s1 [48, 65535] { R55 += 1 };
  s2 -> s2 [0, 45] { R55 += 1 };
  s2 -> s9 [46, 46] { R55 += 1 };
  s2 -> s2 [48, 65535] { R55 += 1 };
  s3 -> s1 [0, 42] { R55 += 1 };
  s3 -> s2 [43, 43] { R55 += 1 };
  s3 -> s1 [44, 45] { R55 += 1 };
  s3 -> s3 [46, 46] { R55 += 1 };
  s3 -> s1 [48, 114] { R55 += 1 };
  s3 -> s4 [115, 115] { R55 += 1 };
  s3 -> s1 [116, 65535] { R55 += 1 };
  s4 -> s1 [0, 42] { R55 += 1 };
  s4 -> s2 [43, 43] { R55 += 1 };
  s4 -> s1 [44, 45] { R55 += 1 };
  s4 -> s3 [46, 46] { R55 += 1 };
  s4 -> s1 [48, 110] { R55 += 1 };
  s4 -> s5 [111, 111] { R55 += 1 };
  s4 -> s1 [112, 65535] { R55 += 1 };
  s5 -> s1 [0, 42] { R55 += 1 };
  s5 -> s2 [43, 43] { R55 += 1 };
  s5 -> s1 [44, 45] { R55 += 1 };
  s5 -> s3 [46, 46] { R55 += 1 };
  s5 -> s1 [48, 98] { R55 += 1 };
  s5 -> s6 [99, 99] { R55 += 1 };
  s5 -> s1 [100, 65535] { R55 += 1 };
  s6 -> s1 [0, 42] { R55 += 1 };
  s6 -> s2 [43, 43] { R55 += 1 };
  s6 -> s1 [44, 45] { R55 += 1 };
  s6 -> s3 [46, 46] { R55 += 1 };
  s6 -> s1 [48, 106] { R55 += 1 };
  s6 -> s7 [107, 107] { R55 += 1 };
  s6 -> s1 [108, 65535] { R55 += 1 };
  s7 -> s7 [0, 42] { R55 += 1 };
  s7 -> s8 [43, 43] { R55 += 1 };
  s7 -> s7 [44, 46] { R55 += 1 };
  s7 -> s7 [48, 65535] { R55 += 1 };
  s8 -> s8 [0, 46] { R55 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s8 [48, 65535] { R55 += 1 };
  s9 -> s2 [0, 45] { R55 += 1 };
  s9 -> s9 [46, 46] { R55 += 1 };
  s9 -> s2 [48, 114] { R55 += 1 };
  s9 -> s10 [115, 115] { R55 += 1 };
  s9 -> s2 [116, 65535] { R55 += 1 };
  s10 -> s2 [0, 45] { R55 += 1 };
  s10 -> s9 [46, 46] { R55 += 1 };
  s10 -> s2 [48, 110] { R55 += 1 };
  s10 -> s11 [111, 111] { R55 += 1 };
  s10 -> s2 [112, 65535] { R55 += 1 };
  s11 -> s2 [0, 45] { R55 += 1 };
  s11 -> s9 [46, 46] { R55 += 1 };
  s11 -> s2 [48, 98] { R55 += 1 };
  s11 -> s12 [99, 99] { R55 += 1 };
  s11 -> s2 [100, 65535] { R55 += 1 };
  s12 -> s2 [0, 45] { R55 += 1 };
  s12 -> s9 [46, 46] { R55 += 1 };
  s12 -> s2 [48, 106] { R55 += 1 };
  s12 -> s8 [107, 107] { R55 += 1 };
  s12 -> s2 [108, 65535] { R55 += 1 };
  accepting s8;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s1 [0, 65535] { R57 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 42] { R59 += 1 };
  s0 -> s0 [0, 65535] { R58 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R59 += 1, R5 += 1 };
  s0 -> s3 [43, 43] { R59 += 1 };
  s0 -> s1 [44, 65535] { R59 += 1 };
  s1 -> s1 [0, 42] { R59 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R59 += 1 };
  s1 -> s1 [44, 65535] { R59 += 1 };
  s2 -> s1 [0, 42] { R59 += 1 };
  s2 -> s2 [0, 65535] { R59 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R59 += 1 };
  s2 -> s1 [44, 65535] { R59 += 1 };
  s3 -> s3 [0, 65535] { R59 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 42] { R61 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R61 += 1, R28 += 1, R29 += 1 };
  s0 -> s0 [0, 65535] { R60 += 1, R61 += 1 };
  s0 -> s1 [44, 65535] { R61 += 1, R29 += 1 };
  s1 -> s1 [0, 42] { R61 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R61 += 1 };
  s1 -> s1 [44, 65535] { R61 += 1, R29 += 1 };
  s2 -> s1 [0, 42] { R61 += 1, R29 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R61 += 1, R28 += 1, R29 += 1 };
  s2 -> s1 [44, 65535] { R61 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [0, 65535] { R63 += 1, R30 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R63 += 1, R31 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R30 += 1, R31 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R63 += 1, R31 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R63 += 1, R31 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R63 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 36] { R65 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R65 += 1, R32 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s1 [38, 43] { R65 += 1, R33 += 1 };
  s0 -> s1 [45, 62] { R65 += 1, R33 += 1 };
  s0 -> s3 [82, 82] { R65 += 1, R33 += 1 };
  s0 -> s1 [83, 65535] { R65 += 1, R33 += 1 };
  s1 -> s1 [0, 36] { R65 += 1, R33 += 1 };
  s1 -> s1 [38, 43] { R65 += 1, R33 += 1 };
  s1 -> s1 [45, 62] { R65 += 1, R33 += 1 };
  s1 -> s3 [82, 82] { R65 += 1, R33 += 1 };
  s1 -> s1 [83, 65535] { R65 += 1, R33 += 1 };
  s2 -> s1 [0, 36] { R65 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R65 += 1, R32 += 1, R33 += 1 };
  s2 -> s1 [38, 43] { R65 += 1, R33 += 1 };
  s2 -> s1 [45, 62] { R65 += 1, R33 += 1 };
  s2 -> s3 [82, 82] { R65 += 1, R33 += 1 };
  s2 -> s1 [83, 65535] { R65 += 1, R33 += 1 };
  s3 -> s3 [0, 36] { R65 += 1, R33 += 1 };
  s3 -> s3 [0, 65535] { R65 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [38, 43] { R65 += 1, R33 += 1 };
  s3 -> s3 [45, 62] { R65 += 1, R33 += 1 };
  s3 -> s3 [82, 65535] { R65 += 1, R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R35 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R34 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R67 += 1, R35 += 1, R15 += 1 };
  s1 -> s4 [0, 65535] { R67 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R67 += 1, R35 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R67 += 1, R34 += 1, R35 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R67 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 57] { R69 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R37 += 1, R17 += 1 };
  s0 -> s3 [0, 65535] { R69 += 1, R36 += 1, R37 += 1 };
  s0 -> s1 [59, 65535] { R69 += 1, R37 += 1 };
  s1 -> s1 [0, 57] { R69 += 1, R37 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R69 += 1 };
  s1 -> s1 [59, 65535] { R69 += 1, R37 += 1 };
  s2 -> s1 [0, 57] { R69 += 1, R37 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R69 += 1 };
  s2 -> s2 [0, 65535] { R69 += 1, R37 += 1, R17 += 1 };
  s2 -> s1 [59, 65535] { R69 += 1, R37 += 1 };
  s3 -> s1 [0, 57] { R69 += 1, R37 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R69 += 1, R37 += 1, R17 += 1 };
  s3 -> s3 [0, 65535] { R69 += 1, R36 += 1, R37 += 1 };
  s3 -> s1 [59, 65535] { R69 += 1, R37 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R69 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R71 += 1, R39 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [0, 65535] { R71 += 1, R39 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s4 [91, 91] { R71 += 1, R39 += 1, R21 += 1 };
  s0 -> s1 [92, 65535] { R71 += 1, R39 += 1, R21 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R71 += 1 };
  s1 -> s7 [0, 65535] { R71 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R71 += 1, R39 += 1, R21 += 1 };
  s2 -> s1 [0, 90] { R71 += 1, R39 += 1, R21 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R71 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [0, 65535] { R71 += 1, R39 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [91, 91] { R71 += 1, R39 += 1, R21 += 1 };
  s2 -> s1 [92, 65535] { R71 += 1, R39 += 1, R21 += 1 };
  s3 -> s1 [0, 90] { R71 += 1, R39 += 1, R21 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R71 += 1 };
  s3 -> s3 [0, 65535] { R71 += 1, R39 += 1, R20 += 1, R21 += 1 };
  s3 -> s4 [91, 91] { R71 += 1, R39 += 1, R21 += 1 };
  s3 -> s1 [92, 65535] { R71 += 1, R39 += 1, R21 += 1 };
  s4 -> s1 [0, 65535] { R71 += 1, R39 += 1, R21 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R71 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R71 += 1 };
  s7 -> s7 [0, 65535] { R71 += 1, R39 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R73 += 1, R41 += 1, R26 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R41 += 1, R25 += 1, R26 += 1 };
  s0 -> s3 [0, 65535] { R73 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R41 += 1, R26 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R73 += 1 };
  s1 -> s6 [0, 65535] { R73 += 1, R41 += 1 };
  s2 -> s1 [0, 65535] { R73 += 1, R41 += 1, R26 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1, R41 += 1, R25 += 1, R26 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R73 += 1 };
  s3 -> s1 [0, 65535] { R73 += 1, R41 += 1, R26 += 1, R27 += 1 };
  s3 -> s2 [0, 65535] { R73 += 1, R41 += 1, R25 += 1, R26 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R73 += 1, R40 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R73 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R73 += 1 };
  s6 -> s6 [0, 65535] { R73 += 1, R41 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R75 += 1, R43 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R43 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R75 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R75 += 1, R43 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R75 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R75 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 36] { R77 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R44 += 1, R45 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [38, 42] { R77 += 1, R45 += 1 };
  s0 -> s3 [43, 43] { R77 += 1, R45 += 1 };
  s0 -> s4 [43, 43] { R77 += 1, R45 += 1 };
  s0 -> s1 [45, 62] { R77 += 1, R45 += 1 };
  s0 -> s1 [83, 65535] { R77 += 1, R45 += 1 };
  s1 -> s1 [0, 36] { R77 += 1, R45 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1 };
  s1 -> s1 [38, 42] { R77 += 1, R45 += 1 };
  s1 -> s3 [43, 43] { R77 += 1, R45 += 1 };
  s1 -> s4 [43, 43] { R77 += 1, R45 += 1 };
  s1 -> s1 [45, 62] { R77 += 1, R45 += 1 };
  s1 -> s1 [83, 65535] { R77 += 1, R45 += 1 };
  s2 -> s1 [0, 36] { R77 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R77 += 1, R44 += 1, R45 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [38, 42] { R77 += 1, R45 += 1 };
  s2 -> s3 [43, 43] { R77 += 1, R45 += 1 };
  s2 -> s4 [43, 43] { R77 += 1, R45 += 1 };
  s2 -> s1 [45, 62] { R77 += 1, R45 += 1 };
  s2 -> s1 [83, 65535] { R77 += 1, R45 += 1 };
  s3 -> s3 [0, 65535] { R77 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 36] { R77 += 1, R45 += 1 };
  s4 -> s4 [0, 65535] { R77 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [38, 43] { R77 += 1, R45 += 1 };
  s4 -> s4 [45, 62] { R77 += 1, R45 += 1 };
  s4 -> s4 [83, 65535] { R77 += 1, R45 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 42] { R79 += 1, R47 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s3 [43, 43] { R79 += 1, R47 += 1, R14 += 1 };
  s0 -> s4 [43, 43] { R79 += 1, R47 += 1, R14 += 1 };
  s0 -> s1 [44, 65535] { R79 += 1, R47 += 1, R14 += 1 };
  s1 -> s1 [0, 42] { R79 += 1, R47 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R79 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R79 += 1, R47 += 1, R14 += 1 };
  s1 -> s4 [43, 43] { R79 += 1, R47 += 1, R14 += 1 };
  s1 -> s1 [44, 65535] { R79 += 1, R47 += 1, R14 += 1 };
  s2 -> s1 [0, 42] { R79 += 1, R47 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R46 += 1, R47 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R79 += 1, R47 += 1, R14 += 1 };
  s2 -> s4 [43, 43] { R79 += 1, R47 += 1, R14 += 1 };
  s2 -> s1 [44, 65535] { R79 += 1, R47 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R79 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R79 += 1, R47 += 1, R14 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R79 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R79 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 42] { R81 += 1, R49 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R48 += 1, R49 += 1 };
  s0 -> s3 [43, 43] { R81 += 1, R49 += 1, R16 += 1 };
  s0 -> s4 [43, 43] { R81 += 1, R49 += 1, R16 += 1 };
  s0 -> s1 [44, 65535] { R81 += 1, R49 += 1, R16 += 1 };
  s1 -> s1 [0, 42] { R81 += 1, R49 += 1, R16 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1 };
  s1 -> s3 [43, 43] { R81 += 1, R49 += 1, R16 += 1 };
  s1 -> s4 [43, 43] { R81 += 1, R49 += 1, R16 += 1 };
  s1 -> s1 [44, 65535] { R81 += 1, R49 += 1, R16 += 1 };
  s2 -> s1 [0, 42] { R81 += 1, R49 += 1, R16 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R81 += 1, R48 += 1, R49 += 1 };
  s2 -> s3 [43, 43] { R81 += 1, R49 += 1, R16 += 1 };
  s2 -> s4 [43, 43] { R81 += 1, R49 += 1, R16 += 1 };
  s2 -> s1 [44, 65535] { R81 += 1, R49 += 1, R16 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R81 += 1 };
  s4 -> s5 [0, 65535] { R81 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R81 += 1, R49 += 1, R16 += 1 };
  s5 -> s5 [0, 65535] { R81 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 42] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s3 [43, 43] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s0 -> s4 [43, 43] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s0 -> s1 [44, 65535] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s1 -> s1 [0, 42] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [43, 43] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s1 -> s1 [44, 65535] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s2 -> s1 [0, 42] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R50 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s2 -> s4 [43, 43] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s2 -> s1 [44, 65535] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535] { R83 += 1, R51 += 1, R18 += 1, R19 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R83 += 1 };
  s4 -> s4 [0, 65535] { R83 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R83 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 42] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [43, 43] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s0 -> s4 [43, 43] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s0 -> s1 [44, 65535] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 42] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R85 += 1 };
  s1 -> s3 [43, 43] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [43, 43] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [44, 65535] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s2 -> s1 [0, 42] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R85 += 1, R52 += 1, R53 += 1 };
  s2 -> s3 [43, 43] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s2 -> s4 [43, 43] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s2 -> s1 [44, 65535] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535] { R85 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R85 += 1 };
  s4 -> s4 [0, 65535] { R85 += 1, R53 += 1, R22 += 1, R23 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R85 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R41 && R2 = R85 && R28 = 0 && R29 = R41 && R30 = 0 && R31 = R41 && R32 = 0 && R33 = R41 && R34 = 0 && R35 = R41 && R36 = 0 && R37 = R41 && R38 = 0 && R39 = R41 && R40 = 0 && R54 = 10 && R55 = R85 && R56 = 10 && R57 = R85 && R58 = 10 && R59 = R85 && R60 = 10 && R61 = R85 && R62 = 10 && R63 = R85 && R64 = 10 && R65 = R85 && R66 = 10 && R67 = R85 && R68 = 10 && R69 = R85 && R70 = 10 && R71 = R85 && R72 = 10 && R73 = R85 && R74 = 10 && R75 = R85 && R76 = 10 && R77 = R85 && R78 = 10 && R79 = R85 && R80 = 10 && R81 = R85 && R82 = 10 && R83 = R85 && R84 = 10 && R15 + R14 != 0 && R5 < 1 && R17 + R16 < 1 && 0 < R41 && 9 < R85 && (R27 + R24 != 0 || ((R20 + R18 != 0 || ((R15 + R14 + -1*R21 + -1*R19 != 0 || R21 + R19 = 1 || R21 + R19 < 0) && (R15 + R14 + -1*R21 + -1*R19 = 0 || R21 + R19 = 1 || R15 + R14 < 1))) && (R20 + R18 = 0 || R15 + R14 < 1))) && (R27 + R24 != 0 || ((R25 + R22 != 0 || ((R15 + R14 + -1*R26 + -1*R23 != 0 || R26 + R23 = 1 || R26 + R23 < 0) && (R15 + R14 + -1*R26 + -1*R23 = 0 || R26 + R23 = 1 || R15 + R14 < 1))) && (R25 + R22 = 0 || R15 + R14 < 1))) && (R9 = 0 || (R42 = 0 && R43 = 0)) && (R9 = 0 || (R44 = 0 && R45 = 0)) && (R9 = 0 || (R46 = 0 && R47 = 0)) && (R9 = 0 || (R48 = 0 && R49 = 0)) && (R9 = 0 || (R50 = 0 && R51 = 0)) && (R9 = 0 || (R52 = 0 && R53 = 0)) && (R27 + R24 = 0 || (R20 + R18 = 0 && (R15 + R14 + -1*R21 + -1*R19 != 0 || R21 + R19 = 1 || R21 + R19 < 0) && (R21 + R19 != 1 || -1*R15 + -1*R14 < 1) && (R15 + R14 + -1*R21 + -1*R19 = 0 || R21 + R19 = 1))) && (R27 + R24 = 0 || (R25 + R22 = 0 && (R15 + R14 + -1*R26 + -1*R23 != 0 || R26 + R23 = 1 || R26 + R23 < 0) && (R26 + R23 != 1 || -1*R15 + -1*R14 < 1) && (R15 + R14 + -1*R26 + -1*R23 = 0 || R26 + R23 = 1)));
// End of Parikh automata intersection problem
