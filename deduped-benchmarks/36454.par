// Parikh automata intersection problem, generated by OSTRICH+
counter int R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R21, R22, R25, R28, R2926, R2927, R2928, R2929, R2930, R2931, R31, R3592, R3593, R3594, R3595, R3596, R3597, R3598, R3599, R3600, R3601, R3602, R3603, R3604, R3605, R3606, R3607, R3608, R3609, R3610, R3611, R3612, R3613, R3614, R3615, R3616, R3617, R3618, R3619, R3620, R3621, R3622, R3623, R3624, R3625, R3626, R3627, R3628, R3629, R3630, R3631, R3632, R3633, R3634, R3635, R3636, R3637, R3638, R3639, R3640, R3641, R3642, R3643, R3644, R3645, R3646, R3647, R3648, R3649, R3650, R3651, R3652, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R3665, R3666, R3667, R3668, R3669, R3670, R3671, R3672, R3673, R3674, R3675, R3676, R3677, R3678, R3679, R3680, R3681, R3682, R3683, R3684, R3685, R3686, R3687, R3688, R3689, R3690, R3691, R3692, R3693, R3694, R3695, R3696, R3697, R3698, R3699, R3700, R3701, R3702, R3703, R3704, R3705, R3706, R3707, R3708, R3709, R3710, R3711, R3712, R3713, R3714, R3715, R3716, R3717, R3718, R3719, R3720, R3721, R3722, R3723, R3724, R3725, R3726, R3727, R3728, R3729, R3730, R3731, R3732, R3733, R3734, R3735, R3736, R3737, R3738, R3739, R3740, R3741, R3742, R3743, R3744, R3745, R3746, R3747, R3748, R3749, R3750, R3751, R3752, R3753, R3754, R3755, R3756, R3757, R3758, R3759, R3760, R3761, R3762, R3763, R3764, R3765, R3766, R3767, R3768, R3769, R3770, R3771, R3772, R3773, R3774, R3775, R3776, R3777, R3778, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R3795, R3796, R3797, R3798, R3799, R3800, R3801, R3802, R3803, R3804, R3805, R3806, R3807, R3808, R3809, R3810, R3811, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R712, R713, R8, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s1 [0, 65535] { R91 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R93 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [108, 108] { R93 += 1 };
  s0 -> s1 [109, 65535] { R93 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1 };
  s1 -> s11 [0, 65535];
  s2 -> s1 [0, 110] { R93 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R93 += 1 };
  s2 -> s1 [112, 65535] { R93 += 1 };
  s3 -> s1 [0, 98] { R93 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R93 += 1 };
  s3 -> s1 [100, 65535] { R93 += 1 };
  s4 -> s1 [0, 96] { R93 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R93 += 1 };
  s4 -> s1 [98, 65535] { R93 += 1 };
  s5 -> s1 [0, 107] { R93 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R93 += 1 };
  s5 -> s1 [109, 65535] { R93 += 1 };
  s6 -> s1 [0, 103] { R93 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R93 += 1 };
  s6 -> s1 [105, 65535] { R93 += 1 };
  s7 -> s1 [0, 110] { R93 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R93 += 1 };
  s7 -> s1 [112, 65535] { R93 += 1 };
  s8 -> s1 [0, 114] { R93 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R93 += 1 };
  s8 -> s1 [116, 65535] { R93 += 1 };
  s9 -> s1 [0, 115] { R93 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R93 += 1 };
  s9 -> s1 [117, 65535] { R93 += 1 };
  s10 -> s1 [0, 65535] { R93 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R95 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R95 += 1, R59 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s1 [0, 65535] { R113 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R113 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R115 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s2 [66, 66] { R115 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R115 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R115 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R115 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R115 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R115 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R115 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R115 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3632 += 1, R3633 += 1 };
  s0 -> s1 [0, 65535] { R3633 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R3633 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3635 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R3634 += 1, R3635 += 1 };
  s1 -> s1 [0, 65535] { R3635 += 1, R117 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R3637 += 1 };
  s0 -> s2 [0, 65535] { R3637 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R3636 += 1, R3637 += 1 };
  s0 -> s1 [76, 65535] { R3637 += 1 };
  s1 -> s1 [0, 74] { R3637 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R3637 += 1 };
  s2 -> s1 [0, 74] { R3637 += 1 };
  s2 -> s2 [0, 65535] { R3637 += 1, R119 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R3637 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R3639 += 1 };
  s0 -> s2 [0, 65535] { R3639 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R3638 += 1, R3639 += 1 };
  s0 -> s1 [78, 65535] { R3639 += 1 };
  s1 -> s1 [0, 76] { R3639 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R3639 += 1 };
  s2 -> s1 [0, 76] { R3639 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3639 += 1, R121 += 1 };
  s2 -> s1 [78, 65535] { R3639 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3641 += 1, R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R3641 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R3640 += 1, R3641 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3641 += 1, R126 += 1, R127 += 1 };
  s1 -> s4 [0, 65535] { R3641 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3641 += 1, R126 += 1, R127 += 1 };
  s2 -> s2 [0, 65535] { R3641 += 1, R125 += 1, R126 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3641 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3642 += 1, R3643 += 1 };
  s0 -> s1 [0, 65535] { R3643 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [108, 108] { R3643 += 1, R131 += 1 };
  s1 -> s1 [0, 65535] { R3643 += 1, R130 += 1, R131 += 1 };
  s1 -> s2 [108, 108] { R3643 += 1, R131 += 1 };
  s2 -> s3 [111, 111] { R3643 += 1, R131 += 1 };
  s3 -> s4 [99, 99] { R3643 += 1, R131 += 1 };
  s4 -> s5 [97, 97] { R3643 += 1, R131 += 1 };
  s5 -> s6 [108, 108] { R3643 += 1, R131 += 1 };
  s6 -> s7 [104, 104] { R3643 += 1, R131 += 1 };
  s7 -> s8 [111, 111] { R3643 += 1, R131 += 1 };
  s8 -> s9 [115, 115] { R3643 += 1, R131 += 1 };
  s9 -> s10 [116, 116] { R3643 += 1, R131 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R3643 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3644 += 1, R3645 += 1 };
  s0 -> s1 [0, 65535] { R3645 += 1, R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R3645 += 1, R136 += 1, R137 += 1 };
  s1 -> s1 [0, 65535] { R3645 += 1, R135 += 1, R136 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3645 += 1, R136 += 1, R137 += 1 };
  s2 -> s3 [0, 65535] { R3645 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3645 += 1, R136 += 1, R137 += 1 };
  s3 -> s3 [0, 65535] { R3645 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R3647 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R3647 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R3646 += 1, R3647 += 1 };
  s0 -> s3 [108, 108] { R3647 += 1, R141 += 1 };
  s0 -> s1 [109, 65535] { R3647 += 1, R141 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3647 += 1 };
  s1 -> s1 [0, 65535] { R3647 += 1, R141 += 1 };
  s2 -> s1 [0, 107] { R3647 += 1, R141 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3647 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [108, 108] { R3647 += 1, R141 += 1 };
  s2 -> s1 [109, 65535] { R3647 += 1, R141 += 1 };
  s3 -> s1 [0, 110] { R3647 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R3647 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3647 += 1, R141 += 1 };
  s3 -> s1 [112, 65535] { R3647 += 1, R141 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3647 += 1, R141 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3647 += 1 };
  s5 -> s6 [99, 99] { R3647 += 1, R141 += 1 };
  s5 -> s1 [100, 65535] { R3647 += 1, R141 += 1 };
  s6 -> s1 [0, 96] { R3647 += 1, R141 += 1 };
  s6 -> s6 [0, 65535] { R3647 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3647 += 1, R141 += 1 };
  s6 -> s1 [98, 65535] { R3647 += 1, R141 += 1 };
  s7 -> s1 [0, 107] { R3647 += 1, R141 += 1 };
  s7 -> s7 [0, 65535] { R3647 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3647 += 1, R141 += 1 };
  s7 -> s1 [109, 65535] { R3647 += 1, R141 += 1 };
  s8 -> s1 [0, 103] { R3647 += 1, R141 += 1 };
  s8 -> s8 [0, 65535] { R3647 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3647 += 1, R141 += 1 };
  s8 -> s1 [105, 65535] { R3647 += 1, R141 += 1 };
  s9 -> s1 [0, 110] { R3647 += 1, R141 += 1 };
  s9 -> s9 [0, 65535] { R3647 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3647 += 1, R141 += 1 };
  s9 -> s1 [112, 65535] { R3647 += 1, R141 += 1 };
  s10 -> s1 [0, 114] { R3647 += 1, R141 += 1 };
  s10 -> s10 [0, 65535] { R3647 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3647 += 1, R141 += 1 };
  s10 -> s1 [116, 65535] { R3647 += 1, R141 += 1 };
  s11 -> s1 [0, 115] { R3647 += 1, R141 += 1 };
  s11 -> s11 [0, 65535] { R3647 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3647 += 1, R141 += 1 };
  s11 -> s1 [117, 65535] { R3647 += 1, R141 += 1 };
  s12 -> s1 [0, 65535] { R3647 += 1, R141 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3647 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3648 += 1, R3649 += 1 };
  s0 -> s1 [0, 65535] { R3649 += 1, R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R3649 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 65535] { R3649 += 1, R145 += 1, R146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3649 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3649 += 1, R146 += 1, R147 += 1 };
  s2 -> s4 [0, 65535] { R3649 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3649 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3650 += 1, R3651 += 1 };
  s0 -> s1 [0, 65535] { R3651 += 1, R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R3651 += 1, R151 += 1, R152 += 1 };
  s1 -> s4 [0, 65535] { R3651 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3651 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3651 += 1, R152 += 1, R153 += 1 };
  s2 -> s2 [0, 65535] { R3651 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3651 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R3653 += 1 };
  s0 -> s0 [0, 65535] { R3652 += 1, R3653 += 1 };
  s1 -> s1 [0, 65535] { R3653 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3655 += 1, R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R3655 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R3654 += 1, R3655 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3655 += 1, R157 += 1, R158 += 1 };
  s1 -> s2 [0, 65535] { R3655 += 1, R158 += 1, R159 += 1 };
  s2 -> s3 [0, 65535] { R3655 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3655 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535] { R3655 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R3656 += 1, R3657 += 1 };
  s0 -> s1 [0, 65535] { R3657 += 1 };
  s1 -> s1 [0, 65535] { R3657 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R3659 += 1, R164 += 1, R165 += 1 };
  s0 -> s2 [0, 65535] { R3659 += 1, R163 += 1, R164 += 1 };
  s0 -> s0 [0, 65535] { R3658 += 1, R3659 += 1 };
  s0 -> s3 [77, 77] { R3659 += 1, R164 += 1, R165 += 1 };
  s0 -> s4 [77, 77] { R3659 += 1, R164 += 1, R165 += 1 };
  s0 -> s1 [78, 65535] { R3659 += 1, R164 += 1, R165 += 1 };
  s1 -> s1 [0, 76] { R3659 += 1, R164 += 1, R165 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3659 += 1 };
  s1 -> s3 [77, 77] { R3659 += 1, R164 += 1, R165 += 1 };
  s1 -> s4 [77, 77] { R3659 += 1, R164 += 1, R165 += 1 };
  s1 -> s1 [78, 65535] { R3659 += 1, R164 += 1, R165 += 1 };
  s2 -> s1 [0, 76] { R3659 += 1, R164 += 1, R165 += 1 };
  s2 -> s2 [0, 65535] { R3659 += 1, R163 += 1, R164 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R3659 += 1, R164 += 1, R165 += 1 };
  s2 -> s4 [77, 77] { R3659 += 1, R164 += 1, R165 += 1 };
  s2 -> s1 [78, 65535] { R3659 += 1, R164 += 1, R165 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3659 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3659 += 1, R164 += 1, R165 += 1 };
  s4 -> s6 [0, 65535] { R3659 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3659 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3693 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R3692 += 1, R3693 += 1 };
  s1 -> s1 [0, 65535] { R3693 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3695 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3694 += 1, R3695 += 1 };
  s0 -> s2 [65, 65] { R3695 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3695 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3695 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3695 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3695 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3695 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3695 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3695 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3697 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R3696 += 1, R3697 += 1 };
  s0 -> s2 [65, 65] { R3697 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R3697 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R3697 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R3697 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3697 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R3697 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R3697 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R3697 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3699 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R3698 += 1, R3699 += 1 };
  s0 -> s2 [65, 65] { R3699 += 1, R120 += 1 };
  s0 -> s3 [65, 65] { R3699 += 1, R120 += 1 };
  s0 -> s1 [66, 65535] { R3699 += 1, R120 += 1 };
  s1 -> s1 [0, 64] { R3699 += 1, R120 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3699 += 1, R120 += 1 };
  s1 -> s3 [65, 65] { R3699 += 1, R120 += 1 };
  s1 -> s1 [66, 65535] { R3699 += 1, R120 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3699 += 1, R120 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3701 += 1, R122 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R3700 += 1, R3701 += 1 };
  s0 -> s2 [65, 65] { R3701 += 1, R122 += 1, R123 += 1 };
  s0 -> s3 [65, 65] { R3701 += 1, R122 += 1, R123 += 1 };
  s0 -> s1 [66, 65535] { R3701 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 64] { R3701 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3701 += 1, R122 += 1, R123 += 1 };
  s1 -> s3 [65, 65] { R3701 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [66, 65535] { R3701 += 1, R122 += 1, R123 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3701 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3703 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R3702 += 1, R3703 += 1 };
  s0 -> s2 [65, 65] { R3703 += 1, R128 += 1, R129 += 1 };
  s0 -> s3 [65, 65] { R3703 += 1, R128 += 1, R129 += 1 };
  s0 -> s1 [66, 65535] { R3703 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [0, 64] { R3703 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3703 += 1, R128 += 1, R129 += 1 };
  s1 -> s3 [65, 65] { R3703 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [66, 65535] { R3703 += 1, R128 += 1, R129 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3703 += 1, R128 += 1, R129 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3705 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R3704 += 1, R3705 += 1 };
  s0 -> s2 [65, 65] { R3705 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R3705 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R3705 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R3705 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3705 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R3705 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R3705 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3705 += 1, R132 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3707 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R3706 += 1, R3707 += 1 };
  s0 -> s2 [65, 65] { R3707 += 1, R138 += 1, R139 += 1 };
  s0 -> s3 [65, 65] { R3707 += 1, R138 += 1, R139 += 1 };
  s0 -> s1 [66, 65535] { R3707 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [0, 64] { R3707 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3707 += 1, R138 += 1, R139 += 1 };
  s1 -> s3 [65, 65] { R3707 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [66, 65535] { R3707 += 1, R138 += 1, R139 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3707 += 1, R138 += 1, R139 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3709 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R3708 += 1, R3709 += 1 };
  s0 -> s2 [65, 65] { R3709 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R3709 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R3709 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R3709 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3709 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R3709 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R3709 += 1, R142 += 1, R143 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3709 += 1, R142 += 1, R143 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3711 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R3710 += 1, R3711 += 1 };
  s0 -> s2 [65, 65] { R3711 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R3711 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R3711 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R3711 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3711 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R3711 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R3711 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3711 += 1, R148 += 1, R149 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3713 += 1 };
  s0 -> s0 [0, 65535] { R3712 += 1, R3713 += 1 };
  s0 -> s2 [65, 65] { R3713 += 1 };
  s0 -> s3 [65, 65] { R3713 += 1 };
  s0 -> s1 [66, 65535] { R3713 += 1 };
  s1 -> s1 [0, 64] { R3713 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3713 += 1 };
  s1 -> s3 [65, 65] { R3713 += 1 };
  s1 -> s1 [66, 65535] { R3713 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3713 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3715 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R3714 += 1, R3715 += 1 };
  s0 -> s2 [65, 65] { R3715 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R3715 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R3715 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R3715 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3715 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R3715 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R3715 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3715 += 1, R154 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3717 += 1 };
  s0 -> s0 [0, 65535] { R3716 += 1, R3717 += 1 };
  s0 -> s2 [65, 65] { R3717 += 1 };
  s0 -> s3 [65, 65] { R3717 += 1 };
  s0 -> s1 [66, 65535] { R3717 += 1 };
  s1 -> s1 [0, 64] { R3717 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3717 += 1 };
  s1 -> s3 [65, 65] { R3717 += 1 };
  s1 -> s1 [66, 65535] { R3717 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3717 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3719 += 1, R160 += 1, R161 += 1 };
  s0 -> s0 [0, 65535] { R3718 += 1, R3719 += 1 };
  s0 -> s2 [65, 65] { R3719 += 1, R160 += 1, R161 += 1 };
  s0 -> s3 [65, 65] { R3719 += 1, R160 += 1, R161 += 1 };
  s0 -> s1 [66, 65535] { R3719 += 1, R160 += 1, R161 += 1 };
  s1 -> s1 [0, 64] { R3719 += 1, R160 += 1, R161 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3719 += 1, R160 += 1, R161 += 1 };
  s1 -> s3 [65, 65] { R3719 += 1, R160 += 1, R161 += 1 };
  s1 -> s1 [66, 65535] { R3719 += 1, R160 += 1, R161 += 1 };
  s2 -> s2 [0, 65535] { R3719 += 1, R160 += 1, R161 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R3721 += 1 };
  s0 -> s0 [0, 65535] { R3720 += 1, R3721 += 1 };
  s0 -> s1 [45, 45] { R3721 += 1 };
  s0 -> s2 [46, 46] { R3721 += 1 };
  s0 -> s1 [48, 62] { R3721 += 1 };
  s0 -> s3 [65, 65] { R3721 += 1 };
  s0 -> s1 [66, 65535] { R3721 += 1 };
  s1 -> s1 [0, 43] { R3721 += 1 };
  s1 -> s1 [45, 45] { R3721 += 1 };
  s1 -> s2 [46, 46] { R3721 += 1 };
  s1 -> s1 [48, 62] { R3721 += 1 };
  s1 -> s3 [65, 65] { R3721 += 1 };
  s1 -> s1 [66, 65535] { R3721 += 1 };
  s2 -> s1 [0, 43] { R3721 += 1 };
  s2 -> s1 [45, 45] { R3721 += 1 };
  s2 -> s2 [46, 46] { R3721 += 1 };
  s2 -> s1 [48, 62] { R3721 += 1 };
  s2 -> s3 [65, 65] { R3721 += 1 };
  s2 -> s1 [66, 114] { R3721 += 1 };
  s2 -> s8 [115, 115] { R3721 += 1 };
  s2 -> s1 [116, 65535] { R3721 += 1 };
  s3 -> s3 [0, 43] { R3721 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3721 += 1 };
  s3 -> s4 [46, 46] { R3721 += 1 };
  s3 -> s3 [48, 62] { R3721 += 1 };
  s3 -> s3 [65, 65535] { R3721 += 1 };
  s4 -> s3 [0, 43] { R3721 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3721 += 1 };
  s4 -> s4 [46, 46] { R3721 += 1 };
  s4 -> s3 [48, 62] { R3721 += 1 };
  s4 -> s3 [65, 114] { R3721 += 1 };
  s4 -> s5 [115, 115] { R3721 += 1 };
  s4 -> s3 [116, 65535] { R3721 += 1 };
  s5 -> s3 [0, 43] { R3721 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3721 += 1 };
  s5 -> s4 [46, 46] { R3721 += 1 };
  s5 -> s3 [48, 62] { R3721 += 1 };
  s5 -> s3 [65, 110] { R3721 += 1 };
  s5 -> s6 [111, 111] { R3721 += 1 };
  s5 -> s3 [112, 65535] { R3721 += 1 };
  s6 -> s3 [0, 43] { R3721 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3721 += 1 };
  s6 -> s4 [46, 46] { R3721 += 1 };
  s6 -> s3 [48, 62] { R3721 += 1 };
  s6 -> s3 [65, 98] { R3721 += 1 };
  s6 -> s7 [99, 99] { R3721 += 1 };
  s6 -> s3 [100, 65535] { R3721 += 1 };
  s7 -> s3 [0, 43] { R3721 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3721 += 1 };
  s7 -> s4 [46, 46] { R3721 += 1 };
  s7 -> s3 [48, 62] { R3721 += 1 };
  s7 -> s3 [65, 106] { R3721 += 1 };
  s7 -> s3 [108, 65535] { R3721 += 1 };
  s8 -> s1 [0, 43] { R3721 += 1 };
  s8 -> s1 [45, 45] { R3721 += 1 };
  s8 -> s2 [46, 46] { R3721 += 1 };
  s8 -> s1 [48, 62] { R3721 += 1 };
  s8 -> s3 [65, 65] { R3721 += 1 };
  s8 -> s1 [66, 110] { R3721 += 1 };
  s8 -> s9 [111, 111] { R3721 += 1 };
  s8 -> s1 [112, 65535] { R3721 += 1 };
  s9 -> s1 [0, 43] { R3721 += 1 };
  s9 -> s1 [45, 45] { R3721 += 1 };
  s9 -> s2 [46, 46] { R3721 += 1 };
  s9 -> s1 [48, 62] { R3721 += 1 };
  s9 -> s3 [65, 65] { R3721 += 1 };
  s9 -> s1 [66, 98] { R3721 += 1 };
  s9 -> s10 [99, 99] { R3721 += 1 };
  s9 -> s1 [100, 65535] { R3721 += 1 };
  s10 -> s1 [0, 43] { R3721 += 1 };
  s10 -> s1 [45, 45] { R3721 += 1 };
  s10 -> s2 [46, 46] { R3721 += 1 };
  s10 -> s1 [48, 62] { R3721 += 1 };
  s10 -> s3 [65, 65] { R3721 += 1 };
  s10 -> s1 [66, 106] { R3721 += 1 };
  s10 -> s1 [108, 65535] { R3721 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R3722 += 1, R3723 += 1 };
  s0 -> s1 [0, 65535] { R3723 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3723 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R3725 += 1 };
  s0 -> s2 [0, 65535] { R3725 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R3724 += 1, R3725 += 1 };
  s0 -> s3 [58, 58] { R3725 += 1 };
  s0 -> s1 [59, 65535] { R3725 += 1 };
  s1 -> s1 [0, 57] { R3725 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3725 += 1 };
  s1 -> s1 [59, 65535] { R3725 += 1 };
  s2 -> s1 [0, 57] { R3725 += 1 };
  s2 -> s2 [0, 65535] { R3725 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3725 += 1 };
  s2 -> s1 [59, 65535] { R3725 += 1 };
  s3 -> s3 [0, 65535] { R3725 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R3727 += 1 };
  s0 -> s0 [0, 65535] { R3726 += 1, R3727 += 1 };
  s0 -> s2 [0, 65535] { R3727 += 1, R22 += 1 };
  s0 -> s3 [43, 43] { R3727 += 1 };
  s0 -> s1 [44, 65535] { R3727 += 1 };
  s1 -> s1 [0, 42] { R3727 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3727 += 1 };
  s1 -> s1 [44, 65535] { R3727 += 1 };
  s2 -> s1 [0, 42] { R3727 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3727 += 1, R22 += 1 };
  s2 -> s3 [43, 43] { R3727 += 1 };
  s2 -> s1 [44, 65535] { R3727 += 1 };
  s3 -> s3 [0, 65535] { R3727 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3729 += 1 };
  s0 -> s2 [0, 65535] { R3729 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R3728 += 1, R3729 += 1 };
  s0 -> s3 [65, 65] { R3729 += 1 };
  s0 -> s1 [66, 65535] { R3729 += 1 };
  s1 -> s1 [0, 64] { R3729 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3729 += 1 };
  s1 -> s1 [66, 65535] { R3729 += 1 };
  s2 -> s1 [0, 64] { R3729 += 1 };
  s2 -> s2 [0, 65535] { R3729 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3729 += 1 };
  s2 -> s1 [66, 65535] { R3729 += 1 };
  s3 -> s3 [0, 65535] { R3729 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R3731 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R3730 += 1, R3731 += 1 };
  s0 -> s2 [0, 65535] { R3731 += 1, R50 += 1, R51 += 1 };
  s0 -> s3 [91, 91] { R3731 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R3731 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R3731 += 1 };
  s1 -> s1 [0, 65535] { R3731 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3731 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3731 += 1, R50 += 1, R51 += 1 };
  s2 -> s3 [91, 91] { R3731 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R3731 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R3731 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3731 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s0 [0, 65535] { R3732 += 1, R3733 += 1 };
  s0 -> s1 [0, 65535] { R3733 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R3733 += 1, R53 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R3733 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3733 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3733 += 1, R53 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R3733 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3733 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 65535] { R3735 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R3735 += 1, R85 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R3734 += 1, R3735 += 1 };
  s1 -> s1 [0, 65535] { R3735 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R3735 += 1, R85 += 1, R42 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3735 += 1, R85 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3735 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3735 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R3737 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R3737 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3736 += 1, R3737 += 1 };
  s0 -> s3 [108, 108] { R3737 += 1, R87 += 1 };
  s0 -> s1 [109, 65535] { R3737 += 1, R87 += 1 };
  s1 -> s13 [0, 65535] { R3737 += 1 };
  s1 -> s1 [0, 65535] { R3737 += 1, R87 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3737 += 1, R87 += 1 };
  s2 -> s2 [0, 65535] { R3737 += 1, R86 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3737 += 1, R87 += 1 };
  s2 -> s1 [109, 65535] { R3737 += 1, R87 += 1 };
  s3 -> s1 [0, 110] { R3737 += 1, R87 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3737 += 1 };
  s3 -> s5 [111, 111] { R3737 += 1, R87 += 1 };
  s3 -> s1 [112, 65535] { R3737 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3737 += 1, R87 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3737 += 1 };
  s5 -> s6 [99, 99] { R3737 += 1, R87 += 1 };
  s5 -> s1 [100, 65535] { R3737 += 1, R87 += 1 };
  s6 -> s1 [0, 96] { R3737 += 1, R87 += 1 };
  s6 -> s6 [0, 65535] { R3737 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3737 += 1, R87 += 1 };
  s6 -> s1 [98, 65535] { R3737 += 1, R87 += 1 };
  s7 -> s1 [0, 107] { R3737 += 1, R87 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3737 += 1 };
  s7 -> s8 [108, 108] { R3737 += 1, R87 += 1 };
  s7 -> s1 [109, 65535] { R3737 += 1, R87 += 1 };
  s8 -> s1 [0, 103] { R3737 += 1, R87 += 1 };
  s8 -> s8 [0, 65535] { R3737 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3737 += 1, R87 += 1 };
  s8 -> s1 [105, 65535] { R3737 += 1, R87 += 1 };
  s9 -> s1 [0, 110] { R3737 += 1, R87 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3737 += 1 };
  s9 -> s10 [111, 111] { R3737 += 1, R87 += 1 };
  s9 -> s1 [112, 65535] { R3737 += 1, R87 += 1 };
  s10 -> s1 [0, 114] { R3737 += 1, R87 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3737 += 1 };
  s10 -> s11 [115, 115] { R3737 += 1, R87 += 1 };
  s10 -> s1 [116, 65535] { R3737 += 1, R87 += 1 };
  s11 -> s1 [0, 115] { R3737 += 1, R87 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3737 += 1 };
  s11 -> s12 [116, 116] { R3737 += 1, R87 += 1 };
  s11 -> s1 [117, 65535] { R3737 += 1, R87 += 1 };
  s12 -> s1 [0, 65535] { R3737 += 1, R87 += 1 };
  s13 -> s13 [0, 65535] { R3737 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R3739 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R3738 += 1, R3739 += 1 };
  s0 -> s2 [0, 65535] { R3739 += 1, R89 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3739 += 1, R88 += 1, R89 += 1 };
  s1 -> s2 [0, 65535] { R3739 += 1, R89 += 1, R57 += 1 };
  s2 -> s3 [0, 65535] { R3739 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3739 += 1, R89 += 1, R57 += 1 };
  s3 -> s3 [0, 65535] { R3739 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R3741 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R3740 += 1, R3741 += 1 };
  s0 -> s2 [0, 65535] { R3741 += 1, R109 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R3741 += 1, R108 += 1, R109 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3741 += 1, R109 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3741 += 1, R109 += 1, R44 += 1 };
  s2 -> s4 [0, 65535] { R3741 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3741 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R3742 += 1, R3743 += 1 };
  s0 -> s1 [0, 65535] { R3743 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3743 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R3745 += 1, R111 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R3744 += 1, R3745 += 1 };
  s0 -> s2 [0, 65535] { R3745 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [43, 43] { R3745 += 1, R111 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R3745 += 1, R111 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R3745 += 1, R111 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R3745 += 1, R111 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R3745 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R3745 += 1, R111 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R3745 += 1, R111 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R3745 += 1, R111 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R3745 += 1, R111 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R3745 += 1, R110 += 1, R111 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R3745 += 1, R111 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R3745 += 1, R111 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R3745 += 1, R111 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R3745 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3745 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3745 += 1, R111 += 1, R56 += 1 };
  s5 -> s5 [0, 65535] { R3745 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3747 += 1, R3599 += 1 };
  s0 -> s0 [0, 65535] { R3746 += 1, R3747 += 1 };
  s0 -> s2 [0, 65535] { R3747 += 1, R3598 += 1, R3599 += 1 };
  s0 -> s1 [66, 65535] { R3747 += 1, R3599 += 1 };
  s1 -> s1 [0, 64] { R3747 += 1, R3599 += 1 };
  s1 -> s1 [0, 65535] { R3747 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3747 += 1, R3599 += 1 };
  s2 -> s1 [0, 64] { R3747 += 1, R3599 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3747 += 1, R3598 += 1, R3599 += 1 };
  s2 -> s1 [66, 65535] { R3747 += 1, R3599 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s0 [0, 65535] { R3748 += 1, R3749 += 1 };
  s0 -> s1 [0, 65535] { R3749 += 1, R3600 += 1, R3601 += 1 };
  s0 -> s2 [0, 65535] { R3749 += 1, R3601 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R3749 += 1, R3600 += 1, R3601 += 1 };
  s1 -> s2 [0, 65535] { R3749 += 1, R3601 += 1, R43 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3749 += 1 };
  s2 -> s2 [0, 65535] { R3749 += 1, R3601 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3749 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R3751 += 1, R3603 += 1 };
  s0 -> s2 [0, 65535] { R3751 += 1, R3602 += 1, R3603 += 1 };
  s0 -> s0 [0, 65535] { R3750 += 1, R3751 += 1 };
  s0 -> s1 [80, 65535] { R3751 += 1, R3603 += 1 };
  s1 -> s1 [0, 65] { R3751 += 1, R3603 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3751 += 1 };
  s1 -> s1 [80, 65535] { R3751 += 1, R3603 += 1 };
  s2 -> s1 [0, 65] { R3751 += 1, R3603 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3751 += 1, R3602 += 1, R3603 += 1 };
  s2 -> s1 [80, 65535] { R3751 += 1, R3603 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R3752 += 1, R3753 += 1 };
  s0 -> s1 [0, 65535] { R3753 += 1, R3604 += 1, R3605 += 1 };
  s0 -> s2 [0, 65535] { R3753 += 1, R3605 += 1, R673 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3753 += 1, R3604 += 1, R3605 += 1 };
  s1 -> s2 [0, 65535] { R3753 += 1, R3605 += 1, R673 += 1 };
  s2 -> s3 [0, 65535] { R3753 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3753 += 1, R3605 += 1, R673 += 1 };
  s3 -> s3 [0, 65535] { R3753 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R3755 += 1, R3607 += 1 };
  s0 -> s2 [0, 65535] { R3755 += 1, R3606 += 1, R3607 += 1 };
  s0 -> s0 [0, 65535] { R3754 += 1, R3755 += 1 };
  s0 -> s3 [0, 65535] { R3755 += 1, R3607 += 1, R675 += 1 };
  s0 -> s1 [83, 65535] { R3755 += 1, R3607 += 1 };
  s1 -> s1 [0, 81] { R3755 += 1, R3607 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3755 += 1 };
  s1 -> s1 [83, 65535] { R3755 += 1, R3607 += 1 };
  s2 -> s1 [0, 81] { R3755 += 1, R3607 += 1 };
  s2 -> s2 [0, 65535] { R3755 += 1, R3606 += 1, R3607 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3755 += 1, R3607 += 1, R675 += 1 };
  s2 -> s1 [83, 65535] { R3755 += 1, R3607 += 1 };
  s3 -> s1 [0, 81] { R3755 += 1, R3607 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3755 += 1 };
  s3 -> s3 [0, 65535] { R3755 += 1, R3607 += 1, R675 += 1 };
  s3 -> s1 [83, 65535] { R3755 += 1, R3607 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3755 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R3757 += 1, R3609 += 1 };
  s0 -> s0 [0, 65535] { R3756 += 1, R3757 += 1 };
  s0 -> s2 [0, 65535] { R3757 += 1, R3609 += 1, R677 += 1 };
  s0 -> s3 [0, 65535] { R3757 += 1, R3608 += 1, R3609 += 1 };
  s0 -> s1 [81, 65535] { R3757 += 1, R3609 += 1 };
  s1 -> s1 [0, 79] { R3757 += 1, R3609 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3757 += 1 };
  s1 -> s1 [81, 65535] { R3757 += 1, R3609 += 1 };
  s2 -> s1 [0, 79] { R3757 += 1, R3609 += 1 };
  s2 -> s2 [0, 65535] { R3757 += 1, R3609 += 1, R677 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3757 += 1 };
  s2 -> s1 [81, 65535] { R3757 += 1, R3609 += 1 };
  s3 -> s1 [0, 79] { R3757 += 1, R3609 += 1 };
  s3 -> s2 [0, 65535] { R3757 += 1, R3609 += 1, R677 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3757 += 1, R3608 += 1, R3609 += 1 };
  s3 -> s1 [81, 65535] { R3757 += 1, R3609 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3757 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s0 [0, 65535] { R3758 += 1, R3759 += 1 };
  s0 -> s1 [0, 65535] { R3759 += 1, R3611 += 1, R681 += 1, R682 += 1 };
  s0 -> s2 [0, 65535] { R3759 += 1, R3610 += 1, R3611 += 1 };
  s0 -> s3 [0, 65535] { R3759 += 1, R3611 += 1, R682 += 1, R683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3759 += 1, R3611 += 1, R681 += 1, R682 += 1 };
  s1 -> s6 [0, 65535] { R3759 += 1 };
  s1 -> s3 [0, 65535] { R3759 += 1, R3611 += 1, R682 += 1, R683 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3759 += 1, R3611 += 1, R681 += 1, R682 += 1 };
  s2 -> s2 [0, 65535] { R3759 += 1, R3610 += 1, R3611 += 1 };
  s2 -> s3 [0, 65535] { R3759 += 1, R3611 += 1, R682 += 1, R683 += 1 };
  s3 -> s4 [0, 65535] { R3759 += 1, R3611 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3759 += 1 };
  s3 -> s3 [0, 65535] { R3759 += 1, R3611 += 1, R682 += 1, R683 += 1 };
  s4 -> s4 [0, 65535] { R3759 += 1, R3611 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3759 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3759 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R3761 += 1, R3613 += 1, R687 += 1 };
  s0 -> s0 [0, 65535] { R3760 += 1, R3761 += 1 };
  s0 -> s2 [0, 65535] { R3761 += 1, R3613 += 1, R686 += 1, R687 += 1 };
  s0 -> s3 [0, 65535] { R3761 += 1, R3612 += 1, R3613 += 1 };
  s0 -> s4 [108, 108] { R3761 += 1, R3613 += 1, R687 += 1 };
  s0 -> s1 [109, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s15 [0, 65535] { R3761 += 1, R3613 += 1 };
  s1 -> s1 [0, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s1 -> s6 [0, 65535] { R3761 += 1 };
  s2 -> s1 [0, 107] { R3761 += 1, R3613 += 1, R687 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3761 += 1, R3613 += 1, R686 += 1, R687 += 1 };
  s2 -> s6 [0, 65535] { R3761 += 1 };
  s2 -> s4 [108, 108] { R3761 += 1, R3613 += 1, R687 += 1 };
  s2 -> s1 [109, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s3 -> s1 [0, 107] { R3761 += 1, R3613 += 1, R687 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3761 += 1, R3613 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R3761 += 1, R3612 += 1, R3613 += 1 };
  s3 -> s4 [108, 108] { R3761 += 1, R3613 += 1, R687 += 1 };
  s3 -> s1 [109, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s4 -> s1 [0, 110] { R3761 += 1, R3613 += 1, R687 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3761 += 1, R3613 += 1 };
  s4 -> s6 [0, 65535] { R3761 += 1 };
  s4 -> s7 [111, 111] { R3761 += 1, R3613 += 1, R687 += 1 };
  s4 -> s1 [112, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3761 += 1 };
  s7 -> s1 [0, 98] { R3761 += 1, R3613 += 1, R687 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3761 += 1, R3613 += 1 };
  s7 -> s6 [0, 65535] { R3761 += 1 };
  s7 -> s8 [99, 99] { R3761 += 1, R3613 += 1, R687 += 1 };
  s7 -> s1 [100, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s8 -> s1 [0, 96] { R3761 += 1, R3613 += 1, R687 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3761 += 1 };
  s8 -> s8 [0, 65535] { R3761 += 1, R3613 += 1 };
  s8 -> s9 [97, 97] { R3761 += 1, R3613 += 1, R687 += 1 };
  s8 -> s1 [98, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s9 -> s1 [0, 107] { R3761 += 1, R3613 += 1, R687 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R3761 += 1, R3613 += 1 };
  s9 -> s6 [0, 65535] { R3761 += 1 };
  s9 -> s10 [108, 108] { R3761 += 1, R3613 += 1, R687 += 1 };
  s9 -> s1 [109, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s10 -> s1 [0, 103] { R3761 += 1, R3613 += 1, R687 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R3761 += 1, R3613 += 1 };
  s10 -> s6 [0, 65535] { R3761 += 1 };
  s10 -> s11 [104, 104] { R3761 += 1, R3613 += 1, R687 += 1 };
  s10 -> s1 [105, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s11 -> s1 [0, 110] { R3761 += 1, R3613 += 1, R687 += 1 };
  s11 -> s11 [0, 65535] { R3761 += 1, R3613 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3761 += 1 };
  s11 -> s12 [111, 111] { R3761 += 1, R3613 += 1, R687 += 1 };
  s11 -> s1 [112, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s12 -> s1 [0, 114] { R3761 += 1, R3613 += 1, R687 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R3761 += 1, R3613 += 1 };
  s12 -> s6 [0, 65535] { R3761 += 1 };
  s12 -> s13 [115, 115] { R3761 += 1, R3613 += 1, R687 += 1 };
  s12 -> s1 [116, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s13 -> s1 [0, 115] { R3761 += 1, R3613 += 1, R687 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3761 += 1 };
  s13 -> s13 [0, 65535] { R3761 += 1, R3613 += 1 };
  s13 -> s14 [116, 116] { R3761 += 1, R3613 += 1, R687 += 1 };
  s13 -> s1 [117, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s14 -> s1 [0, 65535] { R3761 += 1, R3613 += 1, R687 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s15 [0, 65535] { R3761 += 1, R3613 += 1 };
  s15 -> s6 [0, 65535] { R3761 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R3763 += 1, R3615 += 1, R691 += 1 };
  s0 -> s2 [0, 65535] { R3763 += 1, R3614 += 1, R3615 += 1 };
  s0 -> s3 [0, 65535] { R3763 += 1, R3615 += 1, R690 += 1, R691 += 1 };
  s0 -> s0 [0, 65535] { R3762 += 1, R3763 += 1 };
  s0 -> s1 [81, 65535] { R3763 += 1, R3615 += 1, R691 += 1 };
  s1 -> s1 [0, 79] { R3763 += 1, R3615 += 1, R691 += 1 };
  s1 -> s4 [0, 65535] { R3763 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3763 += 1, R3615 += 1 };
  s1 -> s1 [81, 65535] { R3763 += 1, R3615 += 1, R691 += 1 };
  s2 -> s1 [0, 79] { R3763 += 1, R3615 += 1, R691 += 1 };
  s2 -> s2 [0, 65535] { R3763 += 1, R3614 += 1, R3615 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3763 += 1, R3615 += 1, R690 += 1, R691 += 1 };
  s2 -> s1 [81, 65535] { R3763 += 1, R3615 += 1, R691 += 1 };
  s3 -> s1 [0, 79] { R3763 += 1, R3615 += 1, R691 += 1 };
  s3 -> s4 [0, 65535] { R3763 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3763 += 1, R3615 += 1, R690 += 1, R691 += 1 };
  s3 -> s1 [81, 65535] { R3763 += 1, R3615 += 1, R691 += 1 };
  s4 -> s4 [0, 65535] { R3763 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R3764 += 1, R3765 += 1 };
  s0 -> s1 [0, 65535] { R3765 += 1, R3616 += 1, R3617 += 1 };
  s0 -> s2 [0, 65535] { R3765 += 1, R3617 += 1, R695 += 1, R696 += 1 };
  s0 -> s3 [0, 65535] { R3765 += 1, R3617 += 1, R696 += 1, R697 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3765 += 1, R3616 += 1, R3617 += 1 };
  s1 -> s2 [0, 65535] { R3765 += 1, R3617 += 1, R695 += 1, R696 += 1 };
  s1 -> s3 [0, 65535] { R3765 += 1, R3617 += 1, R696 += 1, R697 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3765 += 1 };
  s2 -> s2 [0, 65535] { R3765 += 1, R3617 += 1, R695 += 1, R696 += 1 };
  s2 -> s3 [0, 65535] { R3765 += 1, R3617 += 1, R696 += 1, R697 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3765 += 1, R3617 += 1 };
  s3 -> s6 [0, 65535] { R3765 += 1 };
  s3 -> s3 [0, 65535] { R3765 += 1, R3617 += 1, R696 += 1, R697 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3765 += 1, R3617 += 1 };
  s5 -> s6 [0, 65535] { R3765 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3765 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s0 -> s0 [0, 65535] { R3766 += 1, R3767 += 1 };
  s0 -> s2 [0, 65535] { R3767 += 1, R3618 += 1, R3619 += 1 };
  s0 -> s3 [0, 65535] { R3767 += 1, R3619 += 1, R700 += 1, R701 += 1 };
  s0 -> s1 [91, 107] { R3767 += 1, R3619 += 1, R701 += 1 };
  s0 -> s4 [108, 108] { R3767 += 1, R3619 += 1, R701 += 1 };
  s0 -> s1 [109, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s1 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s1 -> s1 [0, 65535] { R3767 += 1, R3619 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3767 += 1 };
  s1 -> s1 [91, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s2 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s2 -> s2 [0, 65535] { R3767 += 1, R3618 += 1, R3619 += 1 };
  s2 -> s3 [0, 65535] { R3767 += 1, R3619 += 1, R700 += 1, R701 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 107] { R3767 += 1, R3619 += 1, R701 += 1 };
  s2 -> s4 [108, 108] { R3767 += 1, R3619 += 1, R701 += 1 };
  s2 -> s1 [109, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s3 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s3 -> s3 [0, 65535] { R3767 += 1, R3619 += 1, R700 += 1, R701 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3767 += 1 };
  s3 -> s1 [91, 107] { R3767 += 1, R3619 += 1, R701 += 1 };
  s3 -> s4 [108, 108] { R3767 += 1, R3619 += 1, R701 += 1 };
  s3 -> s1 [109, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s4 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3767 += 1 };
  s4 -> s4 [0, 65535] { R3767 += 1, R3619 += 1 };
  s4 -> s1 [91, 110] { R3767 += 1, R3619 += 1, R701 += 1 };
  s4 -> s7 [111, 111] { R3767 += 1, R3619 += 1, R701 += 1 };
  s4 -> s1 [112, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3767 += 1 };
  s7 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s7 -> s7 [0, 65535] { R3767 += 1, R3619 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3767 += 1 };
  s7 -> s1 [91, 98] { R3767 += 1, R3619 += 1, R701 += 1 };
  s7 -> s8 [99, 99] { R3767 += 1, R3619 += 1, R701 += 1 };
  s7 -> s1 [100, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s8 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s8 -> s8 [0, 65535] { R3767 += 1, R3619 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3767 += 1 };
  s8 -> s1 [91, 96] { R3767 += 1, R3619 += 1, R701 += 1 };
  s8 -> s9 [97, 97] { R3767 += 1, R3619 += 1, R701 += 1 };
  s8 -> s1 [98, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s9 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3767 += 1 };
  s9 -> s9 [0, 65535] { R3767 += 1, R3619 += 1 };
  s9 -> s1 [91, 107] { R3767 += 1, R3619 += 1, R701 += 1 };
  s9 -> s10 [108, 108] { R3767 += 1, R3619 += 1, R701 += 1 };
  s9 -> s1 [109, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s10 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s10 -> s10 [0, 65535] { R3767 += 1, R3619 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3767 += 1 };
  s10 -> s1 [91, 103] { R3767 += 1, R3619 += 1, R701 += 1 };
  s10 -> s11 [104, 104] { R3767 += 1, R3619 += 1, R701 += 1 };
  s10 -> s1 [105, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s11 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s11 -> s11 [0, 65535] { R3767 += 1, R3619 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3767 += 1 };
  s11 -> s1 [91, 110] { R3767 += 1, R3619 += 1, R701 += 1 };
  s11 -> s12 [111, 111] { R3767 += 1, R3619 += 1, R701 += 1 };
  s11 -> s1 [112, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s12 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s12 -> s12 [0, 65535] { R3767 += 1, R3619 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3767 += 1 };
  s12 -> s1 [91, 114] { R3767 += 1, R3619 += 1, R701 += 1 };
  s12 -> s13 [115, 115] { R3767 += 1, R3619 += 1, R701 += 1 };
  s12 -> s1 [116, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s13 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s13 -> s13 [0, 65535] { R3767 += 1, R3619 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3767 += 1 };
  s13 -> s1 [91, 115] { R3767 += 1, R3619 += 1, R701 += 1 };
  s13 -> s14 [116, 116] { R3767 += 1, R3619 += 1, R701 += 1 };
  s13 -> s1 [117, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  s14 -> s1 [0, 80] { R3767 += 1, R3619 += 1, R701 += 1 };
  s14 -> s1 [91, 65535] { R3767 += 1, R3619 += 1, R701 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R3769 += 1, R3620 += 1, R3621 += 1 };
  s0 -> s2 [0, 65535] { R3769 += 1, R3621 += 1, R705 += 1, R706 += 1 };
  s0 -> s3 [0, 65535] { R3769 += 1, R3621 += 1, R706 += 1, R707 += 1 };
  s0 -> s0 [0, 65535] { R3768 += 1, R3769 += 1 };
  s1 -> s1 [0, 65535] { R3769 += 1, R3620 += 1, R3621 += 1 };
  s1 -> s2 [0, 65535] { R3769 += 1, R3621 += 1, R705 += 1, R706 += 1 };
  s1 -> s3 [0, 65535] { R3769 += 1, R3621 += 1, R706 += 1, R707 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3769 += 1, R3621 += 1, R705 += 1, R706 += 1 };
  s2 -> s3 [0, 65535] { R3769 += 1, R3621 += 1, R706 += 1, R707 += 1 };
  s2 -> s5 [0, 65535] { R3769 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3769 += 1, R3621 += 1, R706 += 1, R707 += 1 };
  s3 -> s4 [0, 65535] { R3769 += 1, R3621 += 1 };
  s3 -> s5 [0, 65535] { R3769 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3769 += 1, R3621 += 1 };
  s4 -> s5 [0, 65535] { R3769 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3769 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s0 [0, 65535] { R3770 += 1, R3771 += 1 };
  s0 -> s1 [0, 65535] { R3771 += 1, R3622 += 1, R3623 += 1 };
  s0 -> s2 [0, 65535] { R3771 += 1, R3623 += 1, R711 += 1, R712 += 1 };
  s0 -> s3 [0, 65535] { R3771 += 1, R3623 += 1, R712 += 1, R713 += 1 };
  s1 -> s1 [0, 65535] { R3771 += 1, R3622 += 1, R3623 += 1 };
  s1 -> s2 [0, 65535] { R3771 += 1, R3623 += 1, R711 += 1, R712 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R3771 += 1, R3623 += 1, R712 += 1, R713 += 1 };
  s2 -> s5 [0, 65535] { R3771 += 1 };
  s2 -> s2 [0, 65535] { R3771 += 1, R3623 += 1, R711 += 1, R712 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R3771 += 1, R3623 += 1, R712 += 1, R713 += 1 };
  s3 -> s4 [0, 65535] { R3771 += 1, R3623 += 1 };
  s3 -> s5 [0, 65535] { R3771 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3771 += 1, R3623 += 1, R712 += 1, R713 += 1 };
  s4 -> s4 [0, 65535] { R3771 += 1, R3623 += 1 };
  s4 -> s5 [0, 65535] { R3771 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3771 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R3773 += 1, R3624 += 1, R3625 += 1 };
  s0 -> s0 [0, 65535] { R3772 += 1, R3773 += 1 };
  s0 -> s2 [0, 65535] { R3773 += 1, R3625 += 1 };
  s1 -> s1 [0, 65535] { R3773 += 1, R3624 += 1, R3625 += 1 };
  s1 -> s2 [0, 65535] { R3773 += 1, R3625 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3773 += 1, R3625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3773 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3773 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R3775 += 1, R3627 += 1 };
  s0 -> s2 [0, 65535] { R3775 += 1, R3626 += 1, R3627 += 1 };
  s0 -> s0 [0, 65535] { R3774 += 1, R3775 += 1 };
  s1 -> s1 [0, 65535] { R3775 += 1, R3627 += 1 };
  s1 -> s4 [0, 65535] { R3775 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3775 += 1, R3627 += 1 };
  s2 -> s2 [0, 65535] { R3775 += 1, R3626 += 1, R3627 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3775 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 65535] { R3777 += 1, R3628 += 1, R3629 += 1 };
  s0 -> s0 [0, 65535] { R3776 += 1, R3777 += 1 };
  s0 -> s2 [0, 65535] { R3777 += 1, R3629 += 1 };
  s1 -> s1 [0, 65535] { R3777 += 1, R3628 += 1, R3629 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3777 += 1, R3629 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3777 += 1, R3629 += 1 };
  s2 -> s4 [0, 65535] { R3777 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3777 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s0 [0, 65535] { R3778 += 1, R3779 += 1 };
  s0 -> s1 [0, 65535] { R3779 += 1, R3630 += 1, R3631 += 1 };
  s0 -> s2 [0, 65535] { R3779 += 1, R3631 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3779 += 1, R3630 += 1, R3631 += 1 };
  s1 -> s2 [0, 65535] { R3779 += 1, R3631 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3779 += 1, R3631 += 1 };
  s2 -> s4 [0, 65535] { R3779 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3779 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 65535] { R3781 += 1, R3661 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R3781 += 1, R3660 += 1, R3661 += 1 };
  s0 -> s0 [0, 65535] { R3780 += 1, R3781 += 1 };
  s1 -> s1 [0, 65535] { R3781 += 1, R3661 += 1, R45 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3781 += 1 };
  s2 -> s1 [0, 65535] { R3781 += 1, R3661 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R3781 += 1, R3660 += 1, R3661 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3781 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R3783 += 1, R3663 += 1 };
  s0 -> s2 [0, 65535] { R3783 += 1, R3662 += 1, R3663 += 1 };
  s0 -> s0 [0, 65535] { R3782 += 1, R3783 += 1 };
  s0 -> s3 [65, 65] { R3783 += 1, R3663 += 1 };
  s0 -> s4 [65, 65] { R3783 += 1, R3663 += 1 };
  s0 -> s5 [80, 80] { R3783 += 1, R3663 += 1 };
  s0 -> s1 [81, 65535] { R3783 += 1, R3663 += 1 };
  s1 -> s1 [0, 64] { R3783 += 1, R3663 += 1 };
  s1 -> s3 [65, 65] { R3783 += 1, R3663 += 1 };
  s1 -> s4 [65, 65] { R3783 += 1, R3663 += 1 };
  s1 -> s5 [80, 80] { R3783 += 1, R3663 += 1 };
  s1 -> s1 [81, 65535] { R3783 += 1, R3663 += 1 };
  s2 -> s1 [0, 64] { R3783 += 1, R3663 += 1 };
  s2 -> s2 [0, 65535] { R3783 += 1, R3662 += 1, R3663 += 1 };
  s2 -> s3 [65, 65] { R3783 += 1, R3663 += 1 };
  s2 -> s4 [65, 65] { R3783 += 1, R3663 += 1 };
  s2 -> s5 [80, 80] { R3783 += 1, R3663 += 1 };
  s2 -> s1 [81, 65535] { R3783 += 1, R3663 += 1 };
  s3 -> s3 [0, 65] { R3783 += 1, R3663 += 1 };
  s3 -> s7 [80, 80] { R3783 += 1, R3663 += 1 };
  s3 -> s3 [81, 65535] { R3783 += 1, R3663 += 1 };
  s5 -> s5 [0, 64] { R3783 += 1, R3663 += 1 };
  s5 -> s5 [0, 65535] { R3783 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3783 += 1, R3663 += 1 };
  s5 -> s8 [65, 65] { R3783 += 1, R3663 += 1 };
  s5 -> s5 [80, 65535] { R3783 += 1, R3663 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3783 += 1, R3663 += 1 };
  s7 -> s7 [0, 65535] { R3783 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R3783 += 1, R3663 += 1 };
  s8 -> s8 [0, 65535] { R3783 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R3785 += 1, R3665 += 1, R672 += 1 };
  s0 -> s2 [0, 65535] { R3785 += 1, R3664 += 1, R3665 += 1 };
  s0 -> s0 [0, 65535] { R3784 += 1, R3785 += 1 };
  s0 -> s3 [65, 65] { R3785 += 1, R3665 += 1, R672 += 1 };
  s0 -> s4 [65, 65] { R3785 += 1, R3665 += 1, R672 += 1 };
  s0 -> s1 [66, 65535] { R3785 += 1, R3665 += 1, R672 += 1 };
  s1 -> s1 [0, 64] { R3785 += 1, R3665 += 1, R672 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3785 += 1 };
  s1 -> s3 [65, 65] { R3785 += 1, R3665 += 1, R672 += 1 };
  s1 -> s4 [65, 65] { R3785 += 1, R3665 += 1, R672 += 1 };
  s1 -> s1 [66, 65535] { R3785 += 1, R3665 += 1, R672 += 1 };
  s2 -> s1 [0, 64] { R3785 += 1, R3665 += 1, R672 += 1 };
  s2 -> s2 [0, 65535] { R3785 += 1, R3664 += 1, R3665 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3785 += 1, R3665 += 1, R672 += 1 };
  s2 -> s4 [65, 65] { R3785 += 1, R3665 += 1, R672 += 1 };
  s2 -> s1 [66, 65535] { R3785 += 1, R3665 += 1, R672 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3785 += 1 };
  s4 -> s5 [0, 65535] { R3785 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3785 += 1, R3665 += 1, R672 += 1 };
  s5 -> s5 [0, 65535] { R3785 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R3787 += 1, R3667 += 1, R674 += 1 };
  s0 -> s2 [0, 65535] { R3787 += 1, R3666 += 1, R3667 += 1 };
  s0 -> s0 [0, 65535] { R3786 += 1, R3787 += 1 };
  s0 -> s3 [65, 65] { R3787 += 1, R3667 += 1, R674 += 1 };
  s0 -> s4 [65, 65] { R3787 += 1, R3667 += 1, R674 += 1 };
  s0 -> s1 [66, 65535] { R3787 += 1, R3667 += 1, R674 += 1 };
  s1 -> s1 [0, 64] { R3787 += 1, R3667 += 1, R674 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3787 += 1 };
  s1 -> s3 [65, 65] { R3787 += 1, R3667 += 1, R674 += 1 };
  s1 -> s4 [65, 65] { R3787 += 1, R3667 += 1, R674 += 1 };
  s1 -> s1 [66, 65535] { R3787 += 1, R3667 += 1, R674 += 1 };
  s2 -> s1 [0, 64] { R3787 += 1, R3667 += 1, R674 += 1 };
  s2 -> s2 [0, 65535] { R3787 += 1, R3666 += 1, R3667 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3787 += 1, R3667 += 1, R674 += 1 };
  s2 -> s4 [65, 65] { R3787 += 1, R3667 += 1, R674 += 1 };
  s2 -> s1 [66, 65535] { R3787 += 1, R3667 += 1, R674 += 1 };
  s3 -> s3 [0, 65535] { R3787 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3787 += 1 };
  s4 -> s4 [0, 65535] { R3787 += 1, R3667 += 1, R674 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3787 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R3789 += 1, R3669 += 1, R676 += 1 };
  s0 -> s2 [0, 65535] { R3789 += 1, R3668 += 1, R3669 += 1 };
  s0 -> s0 [0, 65535] { R3788 += 1, R3789 += 1 };
  s0 -> s3 [65, 65] { R3789 += 1, R3669 += 1, R676 += 1 };
  s0 -> s4 [65, 65] { R3789 += 1, R3669 += 1, R676 += 1 };
  s0 -> s1 [66, 65535] { R3789 += 1, R3669 += 1, R676 += 1 };
  s1 -> s1 [0, 64] { R3789 += 1, R3669 += 1, R676 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3789 += 1 };
  s1 -> s3 [65, 65] { R3789 += 1, R3669 += 1, R676 += 1 };
  s1 -> s4 [65, 65] { R3789 += 1, R3669 += 1, R676 += 1 };
  s1 -> s1 [66, 65535] { R3789 += 1, R3669 += 1, R676 += 1 };
  s2 -> s1 [0, 64] { R3789 += 1, R3669 += 1, R676 += 1 };
  s2 -> s2 [0, 65535] { R3789 += 1, R3668 += 1, R3669 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3789 += 1, R3669 += 1, R676 += 1 };
  s2 -> s4 [65, 65] { R3789 += 1, R3669 += 1, R676 += 1 };
  s2 -> s1 [66, 65535] { R3789 += 1, R3669 += 1, R676 += 1 };
  s3 -> s3 [0, 65535] { R3789 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3789 += 1, R3669 += 1, R676 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3789 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3789 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s0 -> s2 [0, 65535] { R3791 += 1, R3670 += 1, R3671 += 1 };
  s0 -> s0 [0, 65535] { R3790 += 1, R3791 += 1 };
  s0 -> s3 [65, 65] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3791 += 1 };
  s1 -> s3 [65, 65] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s2 -> s2 [0, 65535] { R3791 += 1, R3670 += 1, R3671 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3791 += 1 };
  s3 -> s3 [0, 65535] { R3791 += 1, R3671 += 1, R678 += 1, R679 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3791 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3791 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s0 -> s2 [0, 65535] { R3793 += 1, R3672 += 1, R3673 += 1 };
  s0 -> s0 [0, 65535] { R3792 += 1, R3793 += 1 };
  s0 -> s3 [65, 65] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s0 -> s4 [65, 65] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s0 -> s1 [66, 65535] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s1 -> s1 [0, 64] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s1 -> s1 [0, 65535] { R3793 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s1 -> s4 [65, 65] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s1 -> s1 [66, 65535] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [0, 64] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3793 += 1, R3672 += 1, R3673 += 1 };
  s2 -> s3 [65, 65] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s2 -> s4 [65, 65] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [66, 65535] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s3 -> s6 [0, 65535] { R3793 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3793 += 1, R3673 += 1, R684 += 1, R685 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3793 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3793 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s0 -> s0 [0, 65535] { R3794 += 1, R3795 += 1 };
  s0 -> s2 [0, 65535] { R3795 += 1, R3674 += 1, R3675 += 1 };
  s0 -> s3 [65, 65] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s0 -> s4 [65, 65] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s0 -> s1 [66, 65535] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s1 -> s1 [0, 64] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3795 += 1 };
  s1 -> s3 [65, 65] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s1 -> s4 [65, 65] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s1 -> s1 [66, 65535] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s2 -> s1 [0, 64] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3795 += 1, R3674 += 1, R3675 += 1 };
  s2 -> s3 [65, 65] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s2 -> s4 [65, 65] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s2 -> s1 [66, 65535] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3795 += 1 };
  s4 -> s5 [0, 65535] { R3795 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3795 += 1, R3675 += 1, R688 += 1, R689 += 1 };
  s5 -> s5 [0, 65535] { R3795 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R3797 += 1, R3676 += 1, R3677 += 1 };
  s0 -> s0 [0, 65535] { R3796 += 1, R3797 += 1 };
  s0 -> s3 [65, 65] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3797 += 1 };
  s1 -> s3 [65, 65] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s2 -> s2 [0, 65535] { R3797 += 1, R3676 += 1, R3677 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s3 -> s6 [0, 65535] { R3797 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3797 += 1, R3677 += 1, R692 += 1, R693 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3797 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3797 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s0 -> s2 [0, 65535] { R3799 += 1, R3678 += 1, R3679 += 1 };
  s0 -> s0 [0, 65535] { R3798 += 1, R3799 += 1 };
  s0 -> s3 [65, 65] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s0 -> s4 [65, 65] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s0 -> s1 [66, 65535] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s1 -> s1 [0, 64] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s1 -> s1 [0, 65535] { R3799 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s1 -> s4 [65, 65] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s1 -> s1 [66, 65535] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s2 -> s1 [0, 64] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s2 -> s2 [0, 65535] { R3799 += 1, R3678 += 1, R3679 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s2 -> s4 [65, 65] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s2 -> s1 [66, 65535] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s3 -> s3 [0, 65535] { R3799 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3799 += 1 };
  s4 -> s4 [0, 65535] { R3799 += 1, R3679 += 1, R698 += 1, R699 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3799 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s0 -> s2 [0, 65535] { R3801 += 1, R3680 += 1, R3681 += 1 };
  s0 -> s0 [0, 65535] { R3800 += 1, R3801 += 1 };
  s0 -> s3 [65, 65] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s0 -> s4 [65, 65] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s0 -> s1 [66, 65535] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 64] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 65535] { R3801 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s1 -> s4 [65, 65] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [66, 65535] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [0, 64] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s2 -> s2 [0, 65535] { R3801 += 1, R3680 += 1, R3681 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s2 -> s4 [65, 65] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [66, 65535] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s3 -> s3 [0, 65535] { R3801 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3801 += 1 };
  s4 -> s4 [0, 65535] { R3801 += 1, R3681 += 1, R702 += 1, R703 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3801 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [0, 65535] { R3803 += 1, R3682 += 1, R3683 += 1 };
  s0 -> s0 [0, 65535] { R3802 += 1, R3803 += 1 };
  s0 -> s3 [65, 65] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s0 -> s4 [65, 65] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s0 -> s1 [66, 65535] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [0, 64] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [0, 65535] { R3803 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s1 -> s4 [65, 65] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [66, 65535] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s2 -> s1 [0, 64] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3803 += 1, R3682 += 1, R3683 += 1 };
  s2 -> s3 [65, 65] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s2 -> s4 [65, 65] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s2 -> s1 [66, 65535] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s3 -> s3 [0, 65535] { R3803 += 1, R3683 += 1, R708 += 1, R709 += 1 };
  s3 -> s6 [0, 65535] { R3803 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3803 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3803 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R3805 += 1, R3685 += 1 };
  s0 -> s0 [0, 65535] { R3804 += 1, R3805 += 1 };
  s0 -> s2 [0, 65535] { R3805 += 1, R3684 += 1, R3685 += 1 };
  s0 -> s3 [65, 65] { R3805 += 1, R3685 += 1 };
  s0 -> s4 [65, 65] { R3805 += 1, R3685 += 1 };
  s0 -> s1 [66, 65535] { R3805 += 1, R3685 += 1 };
  s1 -> s1 [0, 64] { R3805 += 1, R3685 += 1 };
  s1 -> s1 [0, 65535] { R3805 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3805 += 1, R3685 += 1 };
  s1 -> s4 [65, 65] { R3805 += 1, R3685 += 1 };
  s1 -> s1 [66, 65535] { R3805 += 1, R3685 += 1 };
  s2 -> s1 [0, 64] { R3805 += 1, R3685 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3805 += 1, R3684 += 1, R3685 += 1 };
  s2 -> s3 [65, 65] { R3805 += 1, R3685 += 1 };
  s2 -> s4 [65, 65] { R3805 += 1, R3685 += 1 };
  s2 -> s1 [66, 65535] { R3805 += 1, R3685 += 1 };
  s3 -> s6 [0, 65535] { R3805 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3805 += 1, R3685 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3805 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3805 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s2 [0, 64] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s3 [0, 65535] { R3807 += 1, R3686 += 1, R3687 += 1 };
  s0 -> s0 [0, 65535] { R3806 += 1, R3807 += 1 };
  s0 -> s4 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s5 [65, 65] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s6 [65, 65] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s7 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s1 [66, 65535] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s2 [66, 65535] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s1 [0, 64] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s2 [0, 64] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s4 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s5 [65, 65] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s6 [65, 65] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s7 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s1 [66, 65535] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s2 [66, 65535] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s11 [0, 64] { R3807 += 1, R3687 += 1 };
  s2 -> s2 [0, 64] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s4 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s12 [65, 65] { R3807 += 1, R3687 += 1 };
  s2 -> s8 [65, 65] { R3807 += 1, R3687 += 1 };
  s2 -> s7 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s11 [66, 65535] { R3807 += 1, R3687 += 1 };
  s2 -> s2 [66, 65535] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s1 [0, 64] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s2 [0, 64] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s3 [0, 65535] { R3807 += 1, R3686 += 1, R3687 += 1 };
  s3 -> s4 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s5 [65, 65] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s6 [65, 65] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s7 [65, 65] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s1 [66, 65535] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s2 [66, 65535] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s6 -> s6 [0, 65535] { R3807 += 1, R3687 += 1, R2926 += 1, R2927 += 1 };
  s6 -> s7 [0, 65535] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s7 -> s8 [0, 65535] { R3807 += 1, R3687 += 1 };
  s7 -> s7 [0, 65535] { R3807 += 1, R3687 += 1, R2927 += 1, R2928 += 1 };
  s8 -> s9 [0, 65535] { R3807 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R3807 += 1, R3687 += 1 };
  s9 -> s9 [0, 65535] { R3807 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3807 += 1, R3687 += 1 };
  s11 -> s11 [0, 65535] { R3807 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R3807 += 1, R3687 += 1 };
  s11 -> s8 [65, 65] { R3807 += 1, R3687 += 1 };
  s11 -> s11 [66, 65535] { R3807 += 1, R3687 += 1 };
  s12 -> s12 [0, 65535] { R3807 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R3809 += 1, R3689 += 1 };
  s0 -> s2 [0, 65535] { R3809 += 1, R3688 += 1, R3689 += 1 };
  s0 -> s0 [0, 65535] { R3808 += 1, R3809 += 1 };
  s0 -> s3 [65, 65] { R3809 += 1, R3689 += 1 };
  s0 -> s4 [65, 65] { R3809 += 1, R3689 += 1 };
  s0 -> s1 [66, 65535] { R3809 += 1, R3689 += 1 };
  s1 -> s1 [0, 64] { R3809 += 1, R3689 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3809 += 1 };
  s1 -> s3 [65, 65] { R3809 += 1, R3689 += 1 };
  s1 -> s4 [65, 65] { R3809 += 1, R3689 += 1 };
  s1 -> s1 [66, 65535] { R3809 += 1, R3689 += 1 };
  s2 -> s1 [0, 64] { R3809 += 1, R3689 += 1 };
  s2 -> s2 [0, 65535] { R3809 += 1, R3688 += 1, R3689 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3809 += 1, R3689 += 1 };
  s2 -> s4 [65, 65] { R3809 += 1, R3689 += 1 };
  s2 -> s1 [66, 65535] { R3809 += 1, R3689 += 1 };
  s3 -> s3 [0, 65535] { R3809 += 1, R3689 += 1 };
  s3 -> s6 [0, 65535] { R3809 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3809 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3809 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s0 -> s2 [0, 64] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s0 -> s0 [0, 65535] { R3810 += 1, R3811 += 1 };
  s0 -> s3 [0, 65535] { R3811 += 1, R3690 += 1, R3691 += 1 };
  s0 -> s4 [65, 65] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s0 -> s5 [65, 65] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s0 -> s6 [65, 65] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s0 -> s7 [65, 65] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s0 -> s1 [66, 79] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s0 -> s2 [66, 65535] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s0 -> s8 [80, 80] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s0 -> s1 [81, 65535] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s1 -> s1 [0, 64] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s1 -> s5 [65, 65] { R3811 += 1, R3691 += 1 };
  s1 -> s6 [65, 65] { R3811 += 1, R3691 += 1 };
  s1 -> s1 [66, 79] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s1 -> s1 [66, 65535] { R3811 += 1, R3691 += 1 };
  s1 -> s8 [80, 80] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s1 -> s1 [81, 65535] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s2 -> s1 [0, 64] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s2 -> s2 [0, 64] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s2 -> s4 [65, 65] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s2 -> s5 [65, 65] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s2 -> s6 [65, 65] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s2 -> s7 [65, 65] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s2 -> s1 [66, 79] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s2 -> s2 [66, 65535] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s2 -> s8 [80, 80] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s2 -> s1 [81, 65535] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s1 [0, 64] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s2 [0, 64] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s3 -> s3 [0, 65535] { R3811 += 1, R3690 += 1, R3691 += 1 };
  s3 -> s4 [65, 65] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s3 -> s5 [65, 65] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s6 [65, 65] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s7 [65, 65] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s3 -> s1 [66, 79] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s2 [66, 65535] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s3 -> s8 [80, 80] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s3 -> s1 [81, 65535] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s6 -> s6 [0, 79] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s6 -> s6 [0, 65535] { R3811 += 1, R3691 += 1 };
  s6 -> s10 [80, 80] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s6 -> s6 [81, 65535] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s7 -> s6 [0, 79] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s7 -> s7 [0, 65535] { R3811 += 1, R3691 += 1, R3592 += 1, R3593 += 1 };
  s7 -> s10 [80, 80] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s7 -> s6 [81, 65535] { R3811 += 1, R3691 += 1, R3593 += 1, R3594 += 1 };
  s8 -> s8 [0, 64] { R3811 += 1, R3691 += 1 };
  s8 -> s8 [0, 65535] { R3811 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R3811 += 1, R3691 += 1 };
  s8 -> s11 [65, 65] { R3811 += 1, R3691 += 1 };
  s8 -> s8 [66, 65535] { R3811 += 1, R3691 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3811 += 1, R3691 += 1 };
  s10 -> s12 [0, 65535] { R3811 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3811 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3811 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R3631 && R7 = R3811 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R84 = 0 && R85 = R3631 && R86 = 0 && R87 = R3631 && R88 = 0 && R89 = R3631 && R90 = 0 && R91 = R3811 && R92 = 0 && R93 = R3811 && R94 = 0 && R95 = R3811 && R117 + R116 + -1*R131 + -1*R129 = 0 && R130 + R128 = 0 && R3598 = 0 && R3599 = R3631 && R3600 = 0 && R3601 = R3631 && R3602 = 0 && R3603 = R3631 && R3604 = 0 && R3605 = R3631 && R3606 = 0 && R3607 = R3631 && R3608 = 0 && R3609 = R3631 && R3610 = 0 && R3611 = R3631 && R3612 = 0 && R3613 = R3631 && R3614 = 0 && R3615 = R3631 && R3616 = 0 && R3617 = R3631 && R3618 = 0 && R3619 = R3631 && R3620 = 0 && R3621 = R3631 && R3622 = 0 && R3623 = R3631 && R3624 = 0 && R3625 = R3631 && R3626 = 0 && R3627 = R3631 && R3628 = 0 && R3629 = R3631 && R3630 = 0 && R3632 = 0 && R3633 = R3811 && R3634 = 0 && R3635 = R3811 && R3636 = 0 && R3637 = R3811 && R3638 = 0 && R3639 = R3811 && R3640 = 0 && R3641 = R3811 && R3642 = 0 && R3643 = R3811 && R3644 = 0 && R3645 = R3811 && R3646 = 0 && R3647 = R3811 && R3648 = 0 && R3649 = R3811 && R3650 = 0 && R3651 = R3811 && R3652 = 0 && R3653 = R3811 && R3654 = 0 && R3655 = R3811 && R3656 = 0 && R3657 = R3811 && R3658 = 0 && R3659 = R3811 && R3662 = 0 && R3663 = 0 && R3686 = 0 && R3687 = 0 && R3690 = 0 && R3691 = 0 && R3720 = 10 && R3721 = R3811 && R3722 = 10 && R3723 = R3811 && R3724 = 10 && R3725 = R3811 && R3726 = 10 && R3727 = R3811 && R3728 = 10 && R3729 = R3811 && R3730 = 10 && R3731 = R3811 && R3732 = 10 && R3733 = R3811 && R3734 = 10 && R3735 = R3811 && R3736 = 10 && R3737 = R3811 && R3738 = 10 && R3739 = R3811 && R3740 = 10 && R3741 = R3811 && R3742 = 10 && R3743 = R3811 && R3744 = 10 && R3745 = R3811 && R3746 = 10 && R3747 = R3811 && R3748 = 10 && R3749 = R3811 && R3750 = 10 && R3751 = R3811 && R3752 = 10 && R3753 = R3811 && R3754 = 10 && R3755 = R3811 && R3756 = 10 && R3757 = R3811 && R3758 = 10 && R3759 = R3811 && R3760 = 10 && R3761 = R3811 && R3762 = 10 && R3763 = R3811 && R3764 = 10 && R3765 = R3811 && R3766 = 10 && R3767 = R3811 && R3768 = 10 && R3769 = R3811 && R3770 = 10 && R3771 = R3811 && R3772 = 10 && R3773 = R3811 && R3774 = 10 && R3775 = R3811 && R3776 = 10 && R3777 = R3811 && R3778 = 10 && R3779 = R3811 && R3780 = 10 && R3781 = R3811 && R3782 = 10 && R3783 = R3811 && R3784 = 10 && R3785 = R3811 && R3786 = 10 && R3787 = R3811 && R3788 = 10 && R3789 = R3811 && R3790 = 10 && R3791 = R3811 && R3792 = 10 && R3793 = R3811 && R3794 = 10 && R3795 = R3811 && R3796 = 10 && R3797 = R3811 && R3798 = 10 && R3799 = R3811 && R3800 = 10 && R3801 = R3811 && R3802 = 10 && R3803 = R3811 && R3804 = 10 && R3805 = R3811 && R3806 = 10 && R3807 = R3811 && R3808 = 10 && R3809 = R3811 && R3810 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R147 + R144 + R165 + R162 != 0 && R707 + R704 + R3597 + R3594 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R119 + R118 < 1 && R121 + R120 < 1 && -1*R131 + -1*R129 < 1 && -1*R673 + -1*R672 < 1 && R675 + R674 < 1 && R677 + R676 < 1 && 0 < R3631 && 9 < R3811 && (R127 + R124 != 0 || ((R125 + R122 != 0 || R126 + R123 + -1*R131 + -1*R129 = 0 || R131 + R129 < 1) && (R125 + R122 = 0 || R131 + R129 < 1))) && (R131 + R129 != 0 || R137 + R134 = 0 || (R135 + R132 = 0 && R136 + R133 = 0)) && (R131 + R129 != 0 || R137 + R134 = 0 || (R140 + R138 = 0 && R141 + R139 = 0)) && (R131 + R129 != 0 || R137 + R134 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R135 + R132 != 0 || R131 + R129 + -1*R136 + -1*R133 = 0 || R131 + R129 < 1) && (R140 + R138 != 0 || R131 + R129 + -1*R141 + -1*R139 = 0 || R131 + R129 < 1) && (R145 + R142 != 0 || R131 + R129 + -1*R146 + -1*R143 = 0 || R131 + R129 < 1) && (R673 + R672 != 0 || R683 + R680 = 0 || (R681 + R678 = 0 && R682 + R679 = 0)) && (R673 + R672 != 0 || R683 + R680 = 0 || (R686 + R684 = 0 && R687 + R685 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R690 + R688 = 0 && R691 + R689 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R695 + R692 = 0 && R696 + R693 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R700 + R698 = 0 && R701 + R699 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R705 + R702 = 0 && R706 + R703 = 0)) && (R681 + R678 != 0 || R673 + R672 + -1*R682 + -1*R679 = 0 || R673 + R672 < 1) && (R686 + R684 != 0 || R673 + R672 + -1*R687 + -1*R685 = 0 || R673 + R672 < 1) && (R690 + R688 != 0 || R673 + R672 + -1*R691 + -1*R689 = 0 || R673 + R672 < 1) && (R695 + R692 != 0 || R673 + R672 + -1*R696 + -1*R693 = 0 || R673 + R672 < 1) && (R700 + R698 != 0 || R673 + R672 + -1*R701 + -1*R699 = 0 || R673 + R672 < 1) && (R705 + R702 != 0 || R673 + R672 + -1*R706 + -1*R703 = 0 || R673 + R672 < 1) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R44 = 0 || (R110 = 0 && R111 = 0)) && (R45 = 0 || (R3660 = 0 && R3661 = 0)) && (R45 = 0 || (R3664 = 0 && R3665 = 0)) && (R45 = 0 || (R3666 = 0 && R3667 = 0)) && (R45 = 0 || (R3668 = 0 && R3669 = 0)) && (R45 = 0 || (R3670 = 0 && R3671 = 0)) && (R45 = 0 || (R3672 = 0 && R3673 = 0)) && (R45 = 0 || (R3674 = 0 && R3675 = 0)) && (R45 = 0 || (R3676 = 0 && R3677 = 0)) && (R45 = 0 || (R3678 = 0 && R3679 = 0)) && (R45 = 0 || (R3680 = 0 && R3681 = 0)) && (R45 = 0 || (R3682 = 0 && R3683 = 0)) && (R45 = 0 || (R3684 = 0 && R3685 = 0)) && (R45 = 0 || (R3688 = 0 && R3689 = 0)) && (R48 = 0 || (R3692 = 0 && R3693 = 0)) && (R48 = 0 || (R3694 = 0 && R3695 = 0)) && (R48 = 0 || (R3696 = 0 && R3697 = 0)) && (R48 = 0 || (R3698 = 0 && R3699 = 0)) && (R48 = 0 || (R3700 = 0 && R3701 = 0)) && (R48 = 0 || (R3702 = 0 && R3703 = 0)) && (R48 = 0 || (R3704 = 0 && R3705 = 0)) && (R48 = 0 || (R3706 = 0 && R3707 = 0)) && (R48 = 0 || (R3708 = 0 && R3709 = 0)) && (R48 = 0 || (R3710 = 0 && R3711 = 0)) && (R48 = 0 || (R3712 = 0 && R3713 = 0)) && (R48 = 0 || (R3714 = 0 && R3715 = 0)) && (R48 = 0 || (R3716 = 0 && R3717 = 0)) && (R48 = 0 || (R3718 = 0 && R3719 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R49 = 0 || (R114 = 0 && R115 = 0)) && (R127 + R124 = 0 || (R125 + R122 = 0 && R126 + R123 + -1*R131 + -1*R129 = 0)) && (R135 + R132 = 0 || R131 + R129 < 1) && (R140 + R138 = 0 || R131 + R129 < 1) && (R145 + R142 = 0 || R131 + R129 < 1) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R159 + R156 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R159 + R156 = 0 || (R163 + R160 = 0 && R164 + R161 = 0)) && (R681 + R678 = 0 || R673 + R672 < 1) && (R686 + R684 = 0 || R673 + R672 < 1) && (R690 + R688 = 0 || R673 + R672 < 1) && (R695 + R692 = 0 || R673 + R672 < 1) && (R700 + R698 = 0 || R673 + R672 < 1) && (R705 + R702 = 0 || R673 + R672 < 1) && (R713 + R710 = 0 || (R711 + R708 = 0 && R712 + R709 = 0)) && (R2931 + R2928 = 0 || (R2929 + R2926 = 0 && R2930 + R2927 = 0)) && (R2931 + R2928 = 0 || (R3595 + R3592 = 0 && R3596 + R3593 = 0));
// End of Parikh automata intersection problem
