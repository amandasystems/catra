// Parikh automata intersection problem, generated by OSTRICH+
counter int R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R21, R22, R25, R28, R2926, R2927, R2928, R2929, R2930, R2931, R2932, R2933, R2934, R2935, R2936, R2937, R2938, R2939, R2940, R2941, R2942, R2943, R2944, R2945, R2946, R2947, R2948, R2949, R2950, R2951, R2952, R2953, R2954, R2955, R2956, R2957, R2958, R2959, R2960, R2961, R2962, R2963, R2964, R2965, R2966, R2967, R2968, R2969, R2970, R2971, R2972, R2973, R2974, R2975, R2976, R2977, R2978, R2979, R2980, R2981, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R31, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R56, R57, R58, R59, R6, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R712, R713, R8, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95;
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P93
automaton P93_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R31 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s1 [0, 65535] { R91 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R91 += 1, R47 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R93 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [108, 108] { R93 += 1 };
  s0 -> s1 [109, 65535] { R93 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1 };
  s1 -> s11 [0, 65535];
  s2 -> s1 [0, 110] { R93 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R93 += 1 };
  s2 -> s1 [112, 65535] { R93 += 1 };
  s3 -> s1 [0, 98] { R93 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R93 += 1 };
  s3 -> s1 [100, 65535] { R93 += 1 };
  s4 -> s1 [0, 96] { R93 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R93 += 1 };
  s4 -> s1 [98, 65535] { R93 += 1 };
  s5 -> s1 [0, 107] { R93 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R93 += 1 };
  s5 -> s1 [109, 65535] { R93 += 1 };
  s6 -> s1 [0, 103] { R93 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R93 += 1 };
  s6 -> s1 [105, 65535] { R93 += 1 };
  s7 -> s1 [0, 110] { R93 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R93 += 1 };
  s7 -> s1 [112, 65535] { R93 += 1 };
  s8 -> s1 [0, 114] { R93 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R93 += 1 };
  s8 -> s1 [116, 65535] { R93 += 1 };
  s9 -> s1 [0, 115] { R93 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R93 += 1 };
  s9 -> s1 [117, 65535] { R93 += 1 };
  s10 -> s1 [0, 65535] { R93 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R95 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R95 += 1, R59 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s1 [0, 65535] { R113 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R113 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R115 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s2 [66, 66] { R115 += 1, R58 += 1 };
  s0 -> s3 [66, 66] { R115 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R115 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R115 += 1, R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R115 += 1, R58 += 1 };
  s1 -> s3 [66, 66] { R115 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R115 += 1, R58 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R115 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R2972 += 1, R2973 += 1 };
  s0 -> s1 [0, 65535] { R2973 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R2973 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2975 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R2974 += 1, R2975 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2975 += 1, R117 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 74] { R2977 += 1 };
  s0 -> s2 [0, 65535] { R2977 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R2976 += 1, R2977 += 1 };
  s0 -> s1 [76, 65535] { R2977 += 1 };
  s1 -> s1 [0, 74] { R2977 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [76, 65535] { R2977 += 1 };
  s2 -> s1 [0, 74] { R2977 += 1 };
  s2 -> s2 [0, 65535] { R2977 += 1, R119 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [76, 65535] { R2977 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 76] { R2979 += 1 };
  s0 -> s2 [0, 65535] { R2979 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R2978 += 1, R2979 += 1 };
  s0 -> s1 [78, 65535] { R2979 += 1 };
  s1 -> s1 [0, 76] { R2979 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R2979 += 1 };
  s2 -> s1 [0, 76] { R2979 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2979 += 1, R121 += 1 };
  s2 -> s1 [78, 65535] { R2979 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2981 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R2980 += 1, R2981 += 1 };
  s0 -> s2 [0, 65535] { R2981 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R2981 += 1, R126 += 1, R127 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2981 += 1 };
  s2 -> s1 [0, 65535] { R2981 += 1, R126 += 1, R127 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2981 += 1, R125 += 1, R126 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2981 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2982 += 1, R2983 += 1 };
  s0 -> s1 [0, 65535] { R2983 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [108, 108] { R2983 += 1, R131 += 1 };
  s1 -> s1 [0, 65535] { R2983 += 1, R130 += 1, R131 += 1 };
  s1 -> s2 [108, 108] { R2983 += 1, R131 += 1 };
  s2 -> s3 [111, 111] { R2983 += 1, R131 += 1 };
  s3 -> s4 [99, 99] { R2983 += 1, R131 += 1 };
  s4 -> s5 [97, 97] { R2983 += 1, R131 += 1 };
  s5 -> s6 [108, 108] { R2983 += 1, R131 += 1 };
  s6 -> s7 [104, 104] { R2983 += 1, R131 += 1 };
  s7 -> s8 [111, 111] { R2983 += 1, R131 += 1 };
  s8 -> s9 [115, 115] { R2983 += 1, R131 += 1 };
  s9 -> s10 [116, 116] { R2983 += 1, R131 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2983 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2984 += 1, R2985 += 1 };
  s0 -> s1 [0, 65535] { R2985 += 1, R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R2985 += 1, R136 += 1, R137 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2985 += 1, R135 += 1, R136 += 1 };
  s1 -> s2 [0, 65535] { R2985 += 1, R136 += 1, R137 += 1 };
  s2 -> s3 [0, 65535] { R2985 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2985 += 1, R136 += 1, R137 += 1 };
  s3 -> s3 [0, 65535] { R2985 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 107] { R2987 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R2986 += 1, R2987 += 1 };
  s0 -> s2 [0, 65535] { R2987 += 1, R140 += 1, R141 += 1 };
  s0 -> s3 [108, 108] { R2987 += 1, R141 += 1 };
  s0 -> s1 [109, 65535] { R2987 += 1, R141 += 1 };
  s1 -> s13 [0, 65535] { R2987 += 1 };
  s1 -> s1 [0, 65535] { R2987 += 1, R141 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R2987 += 1, R141 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2987 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [108, 108] { R2987 += 1, R141 += 1 };
  s2 -> s1 [109, 65535] { R2987 += 1, R141 += 1 };
  s3 -> s1 [0, 110] { R2987 += 1, R141 += 1 };
  s3 -> s3 [0, 65535] { R2987 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R2987 += 1, R141 += 1 };
  s3 -> s1 [112, 65535] { R2987 += 1, R141 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2987 += 1, R141 += 1 };
  s5 -> s5 [0, 65535] { R2987 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R2987 += 1, R141 += 1 };
  s5 -> s1 [100, 65535] { R2987 += 1, R141 += 1 };
  s6 -> s1 [0, 96] { R2987 += 1, R141 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2987 += 1 };
  s6 -> s7 [97, 97] { R2987 += 1, R141 += 1 };
  s6 -> s1 [98, 65535] { R2987 += 1, R141 += 1 };
  s7 -> s1 [0, 107] { R2987 += 1, R141 += 1 };
  s7 -> s7 [0, 65535] { R2987 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R2987 += 1, R141 += 1 };
  s7 -> s1 [109, 65535] { R2987 += 1, R141 += 1 };
  s8 -> s1 [0, 103] { R2987 += 1, R141 += 1 };
  s8 -> s8 [0, 65535] { R2987 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R2987 += 1, R141 += 1 };
  s8 -> s1 [105, 65535] { R2987 += 1, R141 += 1 };
  s9 -> s1 [0, 110] { R2987 += 1, R141 += 1 };
  s9 -> s9 [0, 65535] { R2987 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R2987 += 1, R141 += 1 };
  s9 -> s1 [112, 65535] { R2987 += 1, R141 += 1 };
  s10 -> s1 [0, 114] { R2987 += 1, R141 += 1 };
  s10 -> s10 [0, 65535] { R2987 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R2987 += 1, R141 += 1 };
  s10 -> s1 [116, 65535] { R2987 += 1, R141 += 1 };
  s11 -> s1 [0, 115] { R2987 += 1, R141 += 1 };
  s11 -> s11 [0, 65535] { R2987 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R2987 += 1, R141 += 1 };
  s11 -> s1 [117, 65535] { R2987 += 1, R141 += 1 };
  s12 -> s1 [0, 65535] { R2987 += 1, R141 += 1 };
  s13 -> s13 [0, 65535] { R2987 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2989 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R2988 += 1, R2989 += 1 };
  s0 -> s2 [0, 65535] { R2989 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 65535] { R2989 += 1, R145 += 1, R146 += 1 };
  s1 -> s2 [0, 65535] { R2989 += 1, R146 += 1, R147 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2989 += 1 };
  s2 -> s2 [0, 65535] { R2989 += 1, R146 += 1, R147 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2989 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2990 += 1, R2991 += 1 };
  s0 -> s1 [0, 65535] { R2991 += 1, R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R2991 += 1, R152 += 1, R153 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2991 += 1, R151 += 1, R152 += 1 };
  s1 -> s2 [0, 65535] { R2991 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2991 += 1, R152 += 1, R153 += 1 };
  s2 -> s4 [0, 65535] { R2991 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2991 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2993 += 1 };
  s0 -> s0 [0, 65535] { R2992 += 1, R2993 += 1 };
  s1 -> s1 [0, 65535] { R2993 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2995 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R2994 += 1, R2995 += 1 };
  s0 -> s2 [0, 65535] { R2995 += 1, R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R2995 += 1, R157 += 1, R158 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2995 += 1, R158 += 1, R159 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2995 += 1 };
  s2 -> s2 [0, 65535] { R2995 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2995 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R2996 += 1, R2997 += 1 };
  s0 -> s1 [0, 65535] { R2997 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2997 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 76] { R2999 += 1, R164 += 1, R165 += 1 };
  s0 -> s0 [0, 65535] { R2998 += 1, R2999 += 1 };
  s0 -> s2 [0, 65535] { R2999 += 1, R163 += 1, R164 += 1 };
  s0 -> s3 [77, 77] { R2999 += 1, R164 += 1, R165 += 1 };
  s0 -> s4 [77, 77] { R2999 += 1, R164 += 1, R165 += 1 };
  s0 -> s1 [78, 65535] { R2999 += 1, R164 += 1, R165 += 1 };
  s1 -> s1 [0, 76] { R2999 += 1, R164 += 1, R165 += 1 };
  s1 -> s1 [0, 65535] { R2999 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R2999 += 1, R164 += 1, R165 += 1 };
  s1 -> s4 [77, 77] { R2999 += 1, R164 += 1, R165 += 1 };
  s1 -> s1 [78, 65535] { R2999 += 1, R164 += 1, R165 += 1 };
  s2 -> s1 [0, 76] { R2999 += 1, R164 += 1, R165 += 1 };
  s2 -> s2 [0, 65535] { R2999 += 1, R163 += 1, R164 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R2999 += 1, R164 += 1, R165 += 1 };
  s2 -> s4 [77, 77] { R2999 += 1, R164 += 1, R165 += 1 };
  s2 -> s1 [78, 65535] { R2999 += 1, R164 += 1, R165 += 1 };
  s3 -> s3 [0, 65535] { R2999 += 1, R164 += 1, R165 += 1 };
  s3 -> s6 [0, 65535] { R2999 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2999 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2999 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R3032 += 1, R3033 += 1 };
  s0 -> s1 [0, 65535] { R3033 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3033 += 1, R48 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3035 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3034 += 1, R3035 += 1 };
  s0 -> s2 [65, 65] { R3035 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3035 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3035 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3035 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3035 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3035 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3035 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3035 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3037 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R3036 += 1, R3037 += 1 };
  s0 -> s2 [65, 65] { R3037 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R3037 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R3037 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R3037 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3037 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R3037 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R3037 += 1, R118 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3037 += 1, R118 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3039 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R3038 += 1, R3039 += 1 };
  s0 -> s2 [65, 65] { R3039 += 1, R120 += 1 };
  s0 -> s3 [65, 65] { R3039 += 1, R120 += 1 };
  s0 -> s1 [66, 65535] { R3039 += 1, R120 += 1 };
  s1 -> s1 [0, 64] { R3039 += 1, R120 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3039 += 1, R120 += 1 };
  s1 -> s3 [65, 65] { R3039 += 1, R120 += 1 };
  s1 -> s1 [66, 65535] { R3039 += 1, R120 += 1 };
  s2 -> s2 [0, 65535] { R3039 += 1, R120 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3041 += 1, R122 += 1, R123 += 1 };
  s0 -> s0 [0, 65535] { R3040 += 1, R3041 += 1 };
  s0 -> s2 [65, 65] { R3041 += 1, R122 += 1, R123 += 1 };
  s0 -> s3 [65, 65] { R3041 += 1, R122 += 1, R123 += 1 };
  s0 -> s1 [66, 65535] { R3041 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 64] { R3041 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3041 += 1, R122 += 1, R123 += 1 };
  s1 -> s3 [65, 65] { R3041 += 1, R122 += 1, R123 += 1 };
  s1 -> s1 [66, 65535] { R3041 += 1, R122 += 1, R123 += 1 };
  s2 -> s2 [0, 65535] { R3041 += 1, R122 += 1, R123 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3043 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R3042 += 1, R3043 += 1 };
  s0 -> s2 [65, 65] { R3043 += 1, R128 += 1, R129 += 1 };
  s0 -> s3 [65, 65] { R3043 += 1, R128 += 1, R129 += 1 };
  s0 -> s1 [66, 65535] { R3043 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [0, 64] { R3043 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3043 += 1, R128 += 1, R129 += 1 };
  s1 -> s3 [65, 65] { R3043 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [66, 65535] { R3043 += 1, R128 += 1, R129 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3043 += 1, R128 += 1, R129 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3045 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R3044 += 1, R3045 += 1 };
  s0 -> s2 [65, 65] { R3045 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [65, 65] { R3045 += 1, R132 += 1, R133 += 1 };
  s0 -> s1 [66, 65535] { R3045 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 64] { R3045 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3045 += 1, R132 += 1, R133 += 1 };
  s1 -> s3 [65, 65] { R3045 += 1, R132 += 1, R133 += 1 };
  s1 -> s1 [66, 65535] { R3045 += 1, R132 += 1, R133 += 1 };
  s2 -> s2 [0, 65535] { R3045 += 1, R132 += 1, R133 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3047 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R3046 += 1, R3047 += 1 };
  s0 -> s2 [65, 65] { R3047 += 1, R138 += 1, R139 += 1 };
  s0 -> s3 [65, 65] { R3047 += 1, R138 += 1, R139 += 1 };
  s0 -> s1 [66, 65535] { R3047 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [0, 64] { R3047 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3047 += 1, R138 += 1, R139 += 1 };
  s1 -> s3 [65, 65] { R3047 += 1, R138 += 1, R139 += 1 };
  s1 -> s1 [66, 65535] { R3047 += 1, R138 += 1, R139 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3047 += 1, R138 += 1, R139 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3049 += 1, R142 += 1, R143 += 1 };
  s0 -> s0 [0, 65535] { R3048 += 1, R3049 += 1 };
  s0 -> s2 [65, 65] { R3049 += 1, R142 += 1, R143 += 1 };
  s0 -> s3 [65, 65] { R3049 += 1, R142 += 1, R143 += 1 };
  s0 -> s1 [66, 65535] { R3049 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 64] { R3049 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3049 += 1, R142 += 1, R143 += 1 };
  s1 -> s3 [65, 65] { R3049 += 1, R142 += 1, R143 += 1 };
  s1 -> s1 [66, 65535] { R3049 += 1, R142 += 1, R143 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3049 += 1, R142 += 1, R143 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3051 += 1, R148 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R3050 += 1, R3051 += 1 };
  s0 -> s2 [65, 65] { R3051 += 1, R148 += 1, R149 += 1 };
  s0 -> s3 [65, 65] { R3051 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [66, 65535] { R3051 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 64] { R3051 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3051 += 1, R148 += 1, R149 += 1 };
  s1 -> s3 [65, 65] { R3051 += 1, R148 += 1, R149 += 1 };
  s1 -> s1 [66, 65535] { R3051 += 1, R148 += 1, R149 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3051 += 1, R148 += 1, R149 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3053 += 1 };
  s0 -> s0 [0, 65535] { R3052 += 1, R3053 += 1 };
  s0 -> s2 [65, 65] { R3053 += 1 };
  s0 -> s3 [65, 65] { R3053 += 1 };
  s0 -> s1 [66, 65535] { R3053 += 1 };
  s1 -> s1 [0, 64] { R3053 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3053 += 1 };
  s1 -> s3 [65, 65] { R3053 += 1 };
  s1 -> s1 [66, 65535] { R3053 += 1 };
  s2 -> s2 [0, 65535] { R3053 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3055 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R3054 += 1, R3055 += 1 };
  s0 -> s2 [65, 65] { R3055 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [65, 65] { R3055 += 1, R154 += 1, R155 += 1 };
  s0 -> s1 [66, 65535] { R3055 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 64] { R3055 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3055 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [65, 65] { R3055 += 1, R154 += 1, R155 += 1 };
  s1 -> s1 [66, 65535] { R3055 += 1, R154 += 1, R155 += 1 };
  s2 -> s2 [0, 65535] { R3055 += 1, R154 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3057 += 1 };
  s0 -> s0 [0, 65535] { R3056 += 1, R3057 += 1 };
  s0 -> s2 [65, 65] { R3057 += 1 };
  s0 -> s3 [65, 65] { R3057 += 1 };
  s0 -> s1 [66, 65535] { R3057 += 1 };
  s1 -> s1 [0, 64] { R3057 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3057 += 1 };
  s1 -> s3 [65, 65] { R3057 += 1 };
  s1 -> s1 [66, 65535] { R3057 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3057 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3059 += 1, R160 += 1, R161 += 1 };
  s0 -> s0 [0, 65535] { R3058 += 1, R3059 += 1 };
  s0 -> s2 [65, 65] { R3059 += 1, R160 += 1, R161 += 1 };
  s0 -> s3 [65, 65] { R3059 += 1, R160 += 1, R161 += 1 };
  s0 -> s1 [66, 65535] { R3059 += 1, R160 += 1, R161 += 1 };
  s1 -> s1 [0, 64] { R3059 += 1, R160 += 1, R161 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3059 += 1, R160 += 1, R161 += 1 };
  s1 -> s3 [65, 65] { R3059 += 1, R160 += 1, R161 += 1 };
  s1 -> s1 [66, 65535] { R3059 += 1, R160 += 1, R161 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3059 += 1, R160 += 1, R161 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 43] { R3061 += 1 };
  s0 -> s0 [0, 65535] { R3060 += 1, R3061 += 1 };
  s0 -> s1 [45, 45] { R3061 += 1 };
  s0 -> s2 [46, 46] { R3061 += 1 };
  s0 -> s1 [48, 62] { R3061 += 1 };
  s0 -> s3 [65, 65] { R3061 += 1 };
  s0 -> s1 [66, 65535] { R3061 += 1 };
  s1 -> s1 [0, 43] { R3061 += 1 };
  s1 -> s1 [45, 45] { R3061 += 1 };
  s1 -> s2 [46, 46] { R3061 += 1 };
  s1 -> s1 [48, 62] { R3061 += 1 };
  s1 -> s3 [65, 65] { R3061 += 1 };
  s1 -> s1 [66, 65535] { R3061 += 1 };
  s2 -> s1 [0, 43] { R3061 += 1 };
  s2 -> s1 [45, 45] { R3061 += 1 };
  s2 -> s2 [46, 46] { R3061 += 1 };
  s2 -> s1 [48, 62] { R3061 += 1 };
  s2 -> s3 [65, 65] { R3061 += 1 };
  s2 -> s1 [66, 114] { R3061 += 1 };
  s2 -> s8 [115, 115] { R3061 += 1 };
  s2 -> s1 [116, 65535] { R3061 += 1 };
  s3 -> s3 [0, 43] { R3061 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3061 += 1 };
  s3 -> s4 [46, 46] { R3061 += 1 };
  s3 -> s3 [48, 62] { R3061 += 1 };
  s3 -> s3 [65, 65535] { R3061 += 1 };
  s4 -> s3 [0, 43] { R3061 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3061 += 1 };
  s4 -> s4 [46, 46] { R3061 += 1 };
  s4 -> s3 [48, 62] { R3061 += 1 };
  s4 -> s3 [65, 114] { R3061 += 1 };
  s4 -> s5 [115, 115] { R3061 += 1 };
  s4 -> s3 [116, 65535] { R3061 += 1 };
  s5 -> s3 [0, 43] { R3061 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3061 += 1 };
  s5 -> s4 [46, 46] { R3061 += 1 };
  s5 -> s3 [48, 62] { R3061 += 1 };
  s5 -> s3 [65, 110] { R3061 += 1 };
  s5 -> s6 [111, 111] { R3061 += 1 };
  s5 -> s3 [112, 65535] { R3061 += 1 };
  s6 -> s3 [0, 43] { R3061 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3061 += 1 };
  s6 -> s4 [46, 46] { R3061 += 1 };
  s6 -> s3 [48, 62] { R3061 += 1 };
  s6 -> s3 [65, 98] { R3061 += 1 };
  s6 -> s7 [99, 99] { R3061 += 1 };
  s6 -> s3 [100, 65535] { R3061 += 1 };
  s7 -> s3 [0, 43] { R3061 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3061 += 1 };
  s7 -> s4 [46, 46] { R3061 += 1 };
  s7 -> s3 [48, 62] { R3061 += 1 };
  s7 -> s3 [65, 106] { R3061 += 1 };
  s7 -> s3 [108, 65535] { R3061 += 1 };
  s8 -> s1 [0, 43] { R3061 += 1 };
  s8 -> s1 [45, 45] { R3061 += 1 };
  s8 -> s2 [46, 46] { R3061 += 1 };
  s8 -> s1 [48, 62] { R3061 += 1 };
  s8 -> s3 [65, 65] { R3061 += 1 };
  s8 -> s1 [66, 110] { R3061 += 1 };
  s8 -> s9 [111, 111] { R3061 += 1 };
  s8 -> s1 [112, 65535] { R3061 += 1 };
  s9 -> s1 [0, 43] { R3061 += 1 };
  s9 -> s1 [45, 45] { R3061 += 1 };
  s9 -> s2 [46, 46] { R3061 += 1 };
  s9 -> s1 [48, 62] { R3061 += 1 };
  s9 -> s3 [65, 65] { R3061 += 1 };
  s9 -> s1 [66, 98] { R3061 += 1 };
  s9 -> s10 [99, 99] { R3061 += 1 };
  s9 -> s1 [100, 65535] { R3061 += 1 };
  s10 -> s1 [0, 43] { R3061 += 1 };
  s10 -> s1 [45, 45] { R3061 += 1 };
  s10 -> s2 [46, 46] { R3061 += 1 };
  s10 -> s1 [48, 62] { R3061 += 1 };
  s10 -> s3 [65, 65] { R3061 += 1 };
  s10 -> s1 [66, 106] { R3061 += 1 };
  s10 -> s1 [108, 65535] { R3061 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R3062 += 1, R3063 += 1 };
  s0 -> s1 [0, 65535] { R3063 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3063 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 57] { R3065 += 1 };
  s0 -> s2 [0, 65535] { R3065 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R3064 += 1, R3065 += 1 };
  s0 -> s3 [58, 58] { R3065 += 1 };
  s0 -> s1 [59, 65535] { R3065 += 1 };
  s1 -> s1 [0, 57] { R3065 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3065 += 1 };
  s1 -> s1 [59, 65535] { R3065 += 1 };
  s2 -> s1 [0, 57] { R3065 += 1 };
  s2 -> s2 [0, 65535] { R3065 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3065 += 1 };
  s2 -> s1 [59, 65535] { R3065 += 1 };
  s3 -> s3 [0, 65535] { R3065 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 42] { R3067 += 1 };
  s0 -> s2 [0, 65535] { R3067 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3066 += 1, R3067 += 1 };
  s0 -> s3 [43, 43] { R3067 += 1 };
  s0 -> s1 [44, 65535] { R3067 += 1 };
  s1 -> s1 [0, 42] { R3067 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3067 += 1 };
  s1 -> s1 [44, 65535] { R3067 += 1 };
  s2 -> s1 [0, 42] { R3067 += 1 };
  s2 -> s2 [0, 65535] { R3067 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R3067 += 1 };
  s2 -> s1 [44, 65535] { R3067 += 1 };
  s3 -> s3 [0, 65535] { R3067 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3069 += 1 };
  s0 -> s0 [0, 65535] { R3068 += 1, R3069 += 1 };
  s0 -> s2 [0, 65535] { R3069 += 1, R25 += 1 };
  s0 -> s3 [65, 65] { R3069 += 1 };
  s0 -> s1 [66, 65535] { R3069 += 1 };
  s1 -> s1 [0, 64] { R3069 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3069 += 1 };
  s1 -> s1 [66, 65535] { R3069 += 1 };
  s2 -> s1 [0, 64] { R3069 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3069 += 1, R25 += 1 };
  s2 -> s3 [65, 65] { R3069 += 1 };
  s2 -> s1 [66, 65535] { R3069 += 1 };
  s3 -> s3 [0, 65535] { R3069 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 90] { R3071 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R3071 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R3070 += 1, R3071 += 1 };
  s0 -> s3 [91, 91] { R3071 += 1, R51 += 1 };
  s0 -> s1 [92, 65535] { R3071 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R3071 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3071 += 1 };
  s2 -> s1 [0, 90] { R3071 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R3071 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3071 += 1, R51 += 1 };
  s2 -> s1 [92, 65535] { R3071 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R3071 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3071 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R3073 += 1, R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R3073 += 1, R53 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3072 += 1, R3073 += 1 };
  s1 -> s1 [0, 65535] { R3073 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3073 += 1, R53 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3073 += 1, R53 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R3073 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3073 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s0 [0, 65535] { R3074 += 1, R3075 += 1 };
  s0 -> s1 [0, 65535] { R3075 += 1, R85 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R3075 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3075 += 1 };
  s1 -> s1 [0, 65535] { R3075 += 1, R85 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3075 += 1, R85 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R3075 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3075 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 107] { R3077 += 1, R87 += 1 };
  s0 -> s2 [0, 65535] { R3077 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3076 += 1, R3077 += 1 };
  s0 -> s3 [108, 108] { R3077 += 1, R87 += 1 };
  s0 -> s1 [109, 65535] { R3077 += 1, R87 += 1 };
  s1 -> s1 [0, 65535] { R3077 += 1, R87 += 1 };
  s1 -> s13 [0, 65535] { R3077 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3077 += 1, R87 += 1 };
  s2 -> s2 [0, 65535] { R3077 += 1, R86 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3077 += 1, R87 += 1 };
  s2 -> s1 [109, 65535] { R3077 += 1, R87 += 1 };
  s3 -> s1 [0, 110] { R3077 += 1, R87 += 1 };
  s3 -> s3 [0, 65535] { R3077 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3077 += 1, R87 += 1 };
  s3 -> s1 [112, 65535] { R3077 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3077 += 1, R87 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3077 += 1 };
  s5 -> s6 [99, 99] { R3077 += 1, R87 += 1 };
  s5 -> s1 [100, 65535] { R3077 += 1, R87 += 1 };
  s6 -> s1 [0, 96] { R3077 += 1, R87 += 1 };
  s6 -> s6 [0, 65535] { R3077 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3077 += 1, R87 += 1 };
  s6 -> s1 [98, 65535] { R3077 += 1, R87 += 1 };
  s7 -> s1 [0, 107] { R3077 += 1, R87 += 1 };
  s7 -> s7 [0, 65535] { R3077 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3077 += 1, R87 += 1 };
  s7 -> s1 [109, 65535] { R3077 += 1, R87 += 1 };
  s8 -> s1 [0, 103] { R3077 += 1, R87 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3077 += 1 };
  s8 -> s9 [104, 104] { R3077 += 1, R87 += 1 };
  s8 -> s1 [105, 65535] { R3077 += 1, R87 += 1 };
  s9 -> s1 [0, 110] { R3077 += 1, R87 += 1 };
  s9 -> s9 [0, 65535] { R3077 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3077 += 1, R87 += 1 };
  s9 -> s1 [112, 65535] { R3077 += 1, R87 += 1 };
  s10 -> s1 [0, 114] { R3077 += 1, R87 += 1 };
  s10 -> s10 [0, 65535] { R3077 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3077 += 1, R87 += 1 };
  s10 -> s1 [116, 65535] { R3077 += 1, R87 += 1 };
  s11 -> s1 [0, 115] { R3077 += 1, R87 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3077 += 1 };
  s11 -> s12 [116, 116] { R3077 += 1, R87 += 1 };
  s11 -> s1 [117, 65535] { R3077 += 1, R87 += 1 };
  s12 -> s1 [0, 65535] { R3077 += 1, R87 += 1 };
  s13 -> s13 [0, 65535] { R3077 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R3079 += 1, R89 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R3079 += 1, R88 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R3078 += 1, R3079 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3079 += 1, R89 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R3079 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3079 += 1, R89 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R3079 += 1, R88 += 1, R89 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3079 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R3080 += 1, R3081 += 1 };
  s0 -> s1 [0, 65535] { R3081 += 1, R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R3081 += 1, R109 += 1, R44 += 1 };
  s1 -> s1 [0, 65535] { R3081 += 1, R108 += 1, R109 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3081 += 1, R109 += 1, R44 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3081 += 1, R109 += 1, R44 += 1 };
  s2 -> s4 [0, 65535] { R3081 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3081 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s0 [0, 65535] { R3082 += 1, R3083 += 1 };
  s0 -> s1 [0, 65535] { R3083 += 1 };
  s1 -> s1 [0, 65535] { R3083 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 42] { R3085 += 1, R111 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R3085 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R3084 += 1, R3085 += 1 };
  s0 -> s3 [43, 43] { R3085 += 1, R111 += 1, R56 += 1 };
  s0 -> s4 [43, 43] { R3085 += 1, R111 += 1, R56 += 1 };
  s0 -> s1 [44, 65535] { R3085 += 1, R111 += 1, R56 += 1 };
  s1 -> s1 [0, 42] { R3085 += 1, R111 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R3085 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R3085 += 1, R111 += 1, R56 += 1 };
  s1 -> s4 [43, 43] { R3085 += 1, R111 += 1, R56 += 1 };
  s1 -> s1 [44, 65535] { R3085 += 1, R111 += 1, R56 += 1 };
  s2 -> s1 [0, 42] { R3085 += 1, R111 += 1, R56 += 1 };
  s2 -> s2 [0, 65535] { R3085 += 1, R110 += 1, R111 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R3085 += 1, R111 += 1, R56 += 1 };
  s2 -> s4 [43, 43] { R3085 += 1, R111 += 1, R56 += 1 };
  s2 -> s1 [44, 65535] { R3085 += 1, R111 += 1, R56 += 1 };
  s3 -> s3 [0, 65535] { R3085 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3085 += 1 };
  s4 -> s4 [0, 65535] { R3085 += 1, R111 += 1, R56 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3085 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3087 += 1, R2939 += 1 };
  s0 -> s2 [0, 65535] { R3087 += 1, R2938 += 1, R2939 += 1 };
  s0 -> s0 [0, 65535] { R3086 += 1, R3087 += 1 };
  s0 -> s1 [66, 65535] { R3087 += 1, R2939 += 1 };
  s1 -> s1 [0, 64] { R3087 += 1, R2939 += 1 };
  s1 -> s1 [0, 65535] { R3087 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3087 += 1, R2939 += 1 };
  s2 -> s1 [0, 64] { R3087 += 1, R2939 += 1 };
  s2 -> s2 [0, 65535] { R3087 += 1, R2938 += 1, R2939 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3087 += 1, R2939 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R3089 += 1, R2940 += 1, R2941 += 1 };
  s0 -> s2 [0, 65535] { R3089 += 1, R2941 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3088 += 1, R3089 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3089 += 1, R2940 += 1, R2941 += 1 };
  s1 -> s2 [0, 65535] { R3089 += 1, R2941 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3089 += 1 };
  s2 -> s2 [0, 65535] { R3089 += 1, R2941 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3089 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R3091 += 1, R2943 += 1 };
  s0 -> s2 [0, 65535] { R3091 += 1, R2942 += 1, R2943 += 1 };
  s0 -> s0 [0, 65535] { R3090 += 1, R3091 += 1 };
  s0 -> s1 [80, 65535] { R3091 += 1, R2943 += 1 };
  s1 -> s1 [0, 65] { R3091 += 1, R2943 += 1 };
  s1 -> s1 [0, 65535] { R3091 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3091 += 1, R2943 += 1 };
  s2 -> s1 [0, 65] { R3091 += 1, R2943 += 1 };
  s2 -> s2 [0, 65535] { R3091 += 1, R2942 += 1, R2943 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3091 += 1, R2943 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R3092 += 1, R3093 += 1 };
  s0 -> s1 [0, 65535] { R3093 += 1, R2944 += 1, R2945 += 1 };
  s0 -> s2 [0, 65535] { R3093 += 1, R2945 += 1, R673 += 1 };
  s1 -> s1 [0, 65535] { R3093 += 1, R2944 += 1, R2945 += 1 };
  s1 -> s2 [0, 65535] { R3093 += 1, R2945 += 1, R673 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3093 += 1, R2945 += 1, R673 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3093 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3093 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 81] { R3095 += 1, R2947 += 1 };
  s0 -> s2 [0, 65535] { R3095 += 1, R2947 += 1, R675 += 1 };
  s0 -> s3 [0, 65535] { R3095 += 1, R2946 += 1, R2947 += 1 };
  s0 -> s0 [0, 65535] { R3094 += 1, R3095 += 1 };
  s0 -> s1 [83, 65535] { R3095 += 1, R2947 += 1 };
  s1 -> s1 [0, 81] { R3095 += 1, R2947 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3095 += 1 };
  s1 -> s1 [83, 65535] { R3095 += 1, R2947 += 1 };
  s2 -> s1 [0, 81] { R3095 += 1, R2947 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3095 += 1, R2947 += 1, R675 += 1 };
  s2 -> s5 [0, 65535] { R3095 += 1 };
  s2 -> s1 [83, 65535] { R3095 += 1, R2947 += 1 };
  s3 -> s1 [0, 81] { R3095 += 1, R2947 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3095 += 1, R2947 += 1, R675 += 1 };
  s3 -> s3 [0, 65535] { R3095 += 1, R2946 += 1, R2947 += 1 };
  s3 -> s1 [83, 65535] { R3095 += 1, R2947 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3095 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 79] { R3097 += 1, R2949 += 1 };
  s0 -> s2 [0, 65535] { R3097 += 1, R2949 += 1, R677 += 1 };
  s0 -> s0 [0, 65535] { R3096 += 1, R3097 += 1 };
  s0 -> s3 [0, 65535] { R3097 += 1, R2948 += 1, R2949 += 1 };
  s0 -> s1 [81, 65535] { R3097 += 1, R2949 += 1 };
  s1 -> s1 [0, 79] { R3097 += 1, R2949 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3097 += 1 };
  s1 -> s1 [81, 65535] { R3097 += 1, R2949 += 1 };
  s2 -> s1 [0, 79] { R3097 += 1, R2949 += 1 };
  s2 -> s5 [0, 65535] { R3097 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3097 += 1, R2949 += 1, R677 += 1 };
  s2 -> s1 [81, 65535] { R3097 += 1, R2949 += 1 };
  s3 -> s1 [0, 79] { R3097 += 1, R2949 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3097 += 1, R2949 += 1, R677 += 1 };
  s3 -> s3 [0, 65535] { R3097 += 1, R2948 += 1, R2949 += 1 };
  s3 -> s1 [81, 65535] { R3097 += 1, R2949 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3097 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R3099 += 1, R2950 += 1, R2951 += 1 };
  s0 -> s2 [0, 65535] { R3099 += 1, R2951 += 1, R682 += 1, R683 += 1 };
  s0 -> s0 [0, 65535] { R3098 += 1, R3099 += 1 };
  s0 -> s3 [0, 65535] { R3099 += 1, R2951 += 1, R681 += 1, R682 += 1 };
  s1 -> s1 [0, 65535] { R3099 += 1, R2950 += 1, R2951 += 1 };
  s1 -> s2 [0, 65535] { R3099 += 1, R2951 += 1, R682 += 1, R683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3099 += 1, R2951 += 1, R681 += 1, R682 += 1 };
  s2 -> s2 [0, 65535] { R3099 += 1, R2951 += 1, R682 += 1, R683 += 1 };
  s2 -> s6 [0, 65535] { R3099 += 1, R2951 += 1 };
  s2 -> s4 [0, 65535] { R3099 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3099 += 1, R2951 += 1, R682 += 1, R683 += 1 };
  s3 -> s4 [0, 65535] { R3099 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3099 += 1, R2951 += 1, R681 += 1, R682 += 1 };
  s4 -> s4 [0, 65535] { R3099 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3099 += 1, R2951 += 1 };
  s6 -> s4 [0, 65535] { R3099 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 107] { R3101 += 1, R2953 += 1, R687 += 1 };
  s0 -> s0 [0, 65535] { R3100 += 1, R3101 += 1 };
  s0 -> s2 [0, 65535] { R3101 += 1, R2953 += 1, R686 += 1, R687 += 1 };
  s0 -> s3 [0, 65535] { R3101 += 1, R2952 += 1, R2953 += 1 };
  s0 -> s4 [108, 108] { R3101 += 1, R2953 += 1, R687 += 1 };
  s0 -> s1 [109, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s1 -> s1 [0, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s1 -> s5 [0, 65535] { R3101 += 1 };
  s1 -> s15 [0, 65535] { R3101 += 1, R2953 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 107] { R3101 += 1, R2953 += 1, R687 += 1 };
  s2 -> s5 [0, 65535] { R3101 += 1 };
  s2 -> s2 [0, 65535] { R3101 += 1, R2953 += 1, R686 += 1, R687 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R3101 += 1, R2953 += 1, R687 += 1 };
  s2 -> s1 [109, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s3 -> s1 [0, 107] { R3101 += 1, R2953 += 1, R687 += 1 };
  s3 -> s2 [0, 65535] { R3101 += 1, R2953 += 1, R686 += 1, R687 += 1 };
  s3 -> s3 [0, 65535] { R3101 += 1, R2952 += 1, R2953 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [108, 108] { R3101 += 1, R2953 += 1, R687 += 1 };
  s3 -> s1 [109, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s4 -> s1 [0, 110] { R3101 += 1, R2953 += 1, R687 += 1 };
  s4 -> s4 [0, 65535] { R3101 += 1, R2953 += 1 };
  s4 -> s5 [0, 65535] { R3101 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R3101 += 1, R2953 += 1, R687 += 1 };
  s4 -> s1 [112, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s5 -> s5 [0, 65535] { R3101 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R3101 += 1, R2953 += 1, R687 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R3101 += 1 };
  s7 -> s7 [0, 65535] { R3101 += 1, R2953 += 1 };
  s7 -> s8 [99, 99] { R3101 += 1, R2953 += 1, R687 += 1 };
  s7 -> s1 [100, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s8 -> s1 [0, 96] { R3101 += 1, R2953 += 1, R687 += 1 };
  s8 -> s8 [0, 65535] { R3101 += 1, R2953 += 1 };
  s8 -> s5 [0, 65535] { R3101 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R3101 += 1, R2953 += 1, R687 += 1 };
  s8 -> s1 [98, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s9 -> s1 [0, 107] { R3101 += 1, R2953 += 1, R687 += 1 };
  s9 -> s9 [0, 65535] { R3101 += 1, R2953 += 1 };
  s9 -> s5 [0, 65535] { R3101 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s10 [108, 108] { R3101 += 1, R2953 += 1, R687 += 1 };
  s9 -> s1 [109, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s10 -> s1 [0, 103] { R3101 += 1, R2953 += 1, R687 += 1 };
  s10 -> s5 [0, 65535] { R3101 += 1 };
  s10 -> s10 [0, 65535] { R3101 += 1, R2953 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R3101 += 1, R2953 += 1, R687 += 1 };
  s10 -> s1 [105, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s11 -> s1 [0, 110] { R3101 += 1, R2953 += 1, R687 += 1 };
  s11 -> s5 [0, 65535] { R3101 += 1 };
  s11 -> s11 [0, 65535] { R3101 += 1, R2953 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R3101 += 1, R2953 += 1, R687 += 1 };
  s11 -> s1 [112, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s12 -> s1 [0, 114] { R3101 += 1, R2953 += 1, R687 += 1 };
  s12 -> s5 [0, 65535] { R3101 += 1 };
  s12 -> s12 [0, 65535] { R3101 += 1, R2953 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s13 [115, 115] { R3101 += 1, R2953 += 1, R687 += 1 };
  s12 -> s1 [116, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s13 -> s1 [0, 115] { R3101 += 1, R2953 += 1, R687 += 1 };
  s13 -> s5 [0, 65535] { R3101 += 1 };
  s13 -> s13 [0, 65535] { R3101 += 1, R2953 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s14 [116, 116] { R3101 += 1, R2953 += 1, R687 += 1 };
  s13 -> s1 [117, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s14 -> s1 [0, 65535] { R3101 += 1, R2953 += 1, R687 += 1 };
  s15 -> s5 [0, 65535] { R3101 += 1 };
  s15 -> s15 [0, 65535] { R3101 += 1, R2953 += 1 };
  s15 -> s6 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 79] { R3103 += 1, R2955 += 1, R691 += 1 };
  s0 -> s0 [0, 65535] { R3102 += 1, R3103 += 1 };
  s0 -> s2 [0, 65535] { R3103 += 1, R2955 += 1, R690 += 1, R691 += 1 };
  s0 -> s3 [0, 65535] { R3103 += 1, R2954 += 1, R2955 += 1 };
  s0 -> s1 [81, 65535] { R3103 += 1, R2955 += 1, R691 += 1 };
  s1 -> s1 [0, 79] { R3103 += 1, R2955 += 1, R691 += 1 };
  s1 -> s1 [0, 65535] { R3103 += 1, R2955 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3103 += 1 };
  s1 -> s1 [81, 65535] { R3103 += 1, R2955 += 1, R691 += 1 };
  s2 -> s1 [0, 79] { R3103 += 1, R2955 += 1, R691 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3103 += 1 };
  s2 -> s2 [0, 65535] { R3103 += 1, R2955 += 1, R690 += 1, R691 += 1 };
  s2 -> s1 [81, 65535] { R3103 += 1, R2955 += 1, R691 += 1 };
  s3 -> s1 [0, 79] { R3103 += 1, R2955 += 1, R691 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3103 += 1, R2955 += 1, R690 += 1, R691 += 1 };
  s3 -> s3 [0, 65535] { R3103 += 1, R2954 += 1, R2955 += 1 };
  s3 -> s1 [81, 65535] { R3103 += 1, R2955 += 1, R691 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3103 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R3105 += 1, R2957 += 1, R695 += 1, R696 += 1 };
  s0 -> s2 [0, 65535] { R3105 += 1, R2956 += 1, R2957 += 1 };
  s0 -> s3 [0, 65535] { R3105 += 1, R2957 += 1, R696 += 1, R697 += 1 };
  s0 -> s0 [0, 65535] { R3104 += 1, R3105 += 1 };
  s1 -> s4 [0, 65535] { R3105 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3105 += 1, R2957 += 1, R695 += 1, R696 += 1 };
  s1 -> s3 [0, 65535] { R3105 += 1, R2957 += 1, R696 += 1, R697 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3105 += 1, R2957 += 1, R695 += 1, R696 += 1 };
  s2 -> s2 [0, 65535] { R3105 += 1, R2956 += 1, R2957 += 1 };
  s2 -> s3 [0, 65535] { R3105 += 1, R2957 += 1, R696 += 1, R697 += 1 };
  s3 -> s4 [0, 65535] { R3105 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3105 += 1, R2957 += 1 };
  s3 -> s3 [0, 65535] { R3105 += 1, R2957 += 1, R696 += 1, R697 += 1 };
  s4 -> s4 [0, 65535] { R3105 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3105 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3105 += 1, R2957 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s0 -> s2 [0, 65535] { R3107 += 1, R2958 += 1, R2959 += 1 };
  s0 -> s3 [0, 65535] { R3107 += 1, R2959 += 1, R700 += 1, R701 += 1 };
  s0 -> s0 [0, 65535] { R3106 += 1, R3107 += 1 };
  s0 -> s1 [91, 107] { R3107 += 1, R2959 += 1, R701 += 1 };
  s0 -> s4 [108, 108] { R3107 += 1, R2959 += 1, R701 += 1 };
  s0 -> s1 [109, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s1 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s1 -> s1 [0, 65535] { R3107 += 1, R2959 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3107 += 1 };
  s1 -> s1 [91, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s2 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s2 -> s2 [0, 65535] { R3107 += 1, R2958 += 1, R2959 += 1 };
  s2 -> s3 [0, 65535] { R3107 += 1, R2959 += 1, R700 += 1, R701 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 107] { R3107 += 1, R2959 += 1, R701 += 1 };
  s2 -> s4 [108, 108] { R3107 += 1, R2959 += 1, R701 += 1 };
  s2 -> s1 [109, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s3 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s3 -> s3 [0, 65535] { R3107 += 1, R2959 += 1, R700 += 1, R701 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3107 += 1 };
  s3 -> s1 [91, 107] { R3107 += 1, R2959 += 1, R701 += 1 };
  s3 -> s4 [108, 108] { R3107 += 1, R2959 += 1, R701 += 1 };
  s3 -> s1 [109, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s4 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s4 -> s4 [0, 65535] { R3107 += 1, R2959 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3107 += 1 };
  s4 -> s1 [91, 110] { R3107 += 1, R2959 += 1, R701 += 1 };
  s4 -> s7 [111, 111] { R3107 += 1, R2959 += 1, R701 += 1 };
  s4 -> s1 [112, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3107 += 1 };
  s7 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s7 -> s7 [0, 65535] { R3107 += 1, R2959 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3107 += 1 };
  s7 -> s1 [91, 98] { R3107 += 1, R2959 += 1, R701 += 1 };
  s7 -> s8 [99, 99] { R3107 += 1, R2959 += 1, R701 += 1 };
  s7 -> s1 [100, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s8 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s8 -> s8 [0, 65535] { R3107 += 1, R2959 += 1 };
  s8 -> s6 [0, 65535] { R3107 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s1 [91, 96] { R3107 += 1, R2959 += 1, R701 += 1 };
  s8 -> s9 [97, 97] { R3107 += 1, R2959 += 1, R701 += 1 };
  s8 -> s1 [98, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s9 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s9 -> s9 [0, 65535] { R3107 += 1, R2959 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3107 += 1 };
  s9 -> s1 [91, 107] { R3107 += 1, R2959 += 1, R701 += 1 };
  s9 -> s10 [108, 108] { R3107 += 1, R2959 += 1, R701 += 1 };
  s9 -> s1 [109, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s10 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s10 -> s10 [0, 65535] { R3107 += 1, R2959 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3107 += 1 };
  s10 -> s1 [91, 103] { R3107 += 1, R2959 += 1, R701 += 1 };
  s10 -> s11 [104, 104] { R3107 += 1, R2959 += 1, R701 += 1 };
  s10 -> s1 [105, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s11 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s11 -> s11 [0, 65535] { R3107 += 1, R2959 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3107 += 1 };
  s11 -> s1 [91, 110] { R3107 += 1, R2959 += 1, R701 += 1 };
  s11 -> s12 [111, 111] { R3107 += 1, R2959 += 1, R701 += 1 };
  s11 -> s1 [112, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s12 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s12 -> s12 [0, 65535] { R3107 += 1, R2959 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3107 += 1 };
  s12 -> s1 [91, 114] { R3107 += 1, R2959 += 1, R701 += 1 };
  s12 -> s13 [115, 115] { R3107 += 1, R2959 += 1, R701 += 1 };
  s12 -> s1 [116, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s13 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s13 -> s13 [0, 65535] { R3107 += 1, R2959 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3107 += 1 };
  s13 -> s1 [91, 115] { R3107 += 1, R2959 += 1, R701 += 1 };
  s13 -> s14 [116, 116] { R3107 += 1, R2959 += 1, R701 += 1 };
  s13 -> s1 [117, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  s14 -> s1 [0, 80] { R3107 += 1, R2959 += 1, R701 += 1 };
  s14 -> s1 [91, 65535] { R3107 += 1, R2959 += 1, R701 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R3109 += 1, R2961 += 1, R705 += 1, R706 += 1 };
  s0 -> s0 [0, 65535] { R3108 += 1, R3109 += 1 };
  s0 -> s2 [0, 65535] { R3109 += 1, R2960 += 1, R2961 += 1 };
  s0 -> s3 [0, 65535] { R3109 += 1, R2961 += 1, R706 += 1, R707 += 1 };
  s1 -> s1 [0, 65535] { R3109 += 1, R2961 += 1, R705 += 1, R706 += 1 };
  s1 -> s3 [0, 65535] { R3109 += 1, R2961 += 1, R706 += 1, R707 += 1 };
  s1 -> s5 [0, 65535] { R3109 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R3109 += 1, R2961 += 1, R705 += 1, R706 += 1 };
  s2 -> s2 [0, 65535] { R3109 += 1, R2960 += 1, R2961 += 1 };
  s2 -> s3 [0, 65535] { R3109 += 1, R2961 += 1, R706 += 1, R707 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3109 += 1, R2961 += 1 };
  s3 -> s3 [0, 65535] { R3109 += 1, R2961 += 1, R706 += 1, R707 += 1 };
  s3 -> s5 [0, 65535] { R3109 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3109 += 1, R2961 += 1 };
  s4 -> s5 [0, 65535] { R3109 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3109 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R3111 += 1, R2962 += 1, R2963 += 1 };
  s0 -> s2 [0, 65535] { R3111 += 1, R2963 += 1, R711 += 1, R712 += 1 };
  s0 -> s0 [0, 65535] { R3110 += 1, R3111 += 1 };
  s0 -> s3 [0, 65535] { R3111 += 1, R2963 += 1, R712 += 1, R713 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3111 += 1, R2962 += 1, R2963 += 1 };
  s1 -> s2 [0, 65535] { R3111 += 1, R2963 += 1, R711 += 1, R712 += 1 };
  s1 -> s3 [0, 65535] { R3111 += 1, R2963 += 1, R712 += 1, R713 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3111 += 1 };
  s2 -> s2 [0, 65535] { R3111 += 1, R2963 += 1, R711 += 1, R712 += 1 };
  s2 -> s3 [0, 65535] { R3111 += 1, R2963 += 1, R712 += 1, R713 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3111 += 1 };
  s3 -> s3 [0, 65535] { R3111 += 1, R2963 += 1, R712 += 1, R713 += 1 };
  s3 -> s6 [0, 65535] { R3111 += 1, R2963 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3111 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3111 += 1 };
  s6 -> s6 [0, 65535] { R3111 += 1, R2963 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 65535] { R3113 += 1, R2965 += 1 };
  s0 -> s0 [0, 65535] { R3112 += 1, R3113 += 1 };
  s0 -> s2 [0, 65535] { R3113 += 1, R2964 += 1, R2965 += 1 };
  s1 -> s1 [0, 65535] { R3113 += 1, R2965 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3113 += 1 };
  s2 -> s1 [0, 65535] { R3113 += 1, R2965 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3113 += 1, R2964 += 1, R2965 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3113 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 65535] { R3115 += 1, R2966 += 1, R2967 += 1 };
  s0 -> s2 [0, 65535] { R3115 += 1, R2967 += 1 };
  s0 -> s0 [0, 65535] { R3114 += 1, R3115 += 1 };
  s1 -> s1 [0, 65535] { R3115 += 1, R2966 += 1, R2967 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3115 += 1, R2967 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3115 += 1, R2967 += 1 };
  s2 -> s4 [0, 65535] { R3115 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3115 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s0 [0, 65535] { R3116 += 1, R3117 += 1 };
  s0 -> s1 [0, 65535] { R3117 += 1, R2968 += 1, R2969 += 1 };
  s0 -> s2 [0, 65535] { R3117 += 1, R2969 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3117 += 1, R2968 += 1, R2969 += 1 };
  s1 -> s2 [0, 65535] { R3117 += 1, R2969 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3117 += 1 };
  s2 -> s2 [0, 65535] { R3117 += 1, R2969 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3117 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 79] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s0 -> s2 [0, 65535] { R3119 += 1, R2970 += 1, R2971 += 1 };
  s0 -> s3 [0, 65535] { R3119 += 1, R2971 += 1, R2935 += 1, R2936 += 1 };
  s0 -> s0 [0, 65535] { R3118 += 1, R3119 += 1 };
  s0 -> s4 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s0 -> s5 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s0 -> s1 [81, 65535] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s1 -> s1 [0, 79] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s1 -> s1 [0, 65535] { R3119 += 1, R2971 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R3119 += 1 };
  s1 -> s4 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s1 -> s5 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s1 -> s1 [81, 65535] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s2 -> s1 [0, 79] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3119 += 1, R2970 += 1, R2971 += 1 };
  s2 -> s3 [0, 65535] { R3119 += 1, R2971 += 1, R2935 += 1, R2936 += 1 };
  s2 -> s4 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s2 -> s5 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s2 -> s1 [81, 65535] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s3 -> s1 [0, 79] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3119 += 1 };
  s3 -> s3 [0, 65535] { R3119 += 1, R2971 += 1, R2935 += 1, R2936 += 1 };
  s3 -> s4 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s3 -> s5 [80, 80] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s3 -> s1 [81, 65535] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3119 += 1, R2971 += 1, R2936 += 1, R2937 += 1 };
  s4 -> s8 [0, 65535] { R3119 += 1, R2971 += 1 };
  s4 -> s7 [0, 65535] { R3119 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R3119 += 1 };
  s5 -> s5 [0, 65535] { R3119 += 1, R2971 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3119 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3119 += 1, R2971 += 1 };
  s8 -> s7 [0, 65535] { R3119 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 65535] { R3121 += 1, R3001 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R3121 += 1, R3000 += 1, R3001 += 1 };
  s0 -> s0 [0, 65535] { R3120 += 1, R3121 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3121 += 1, R3001 += 1, R45 += 1 };
  s1 -> s4 [0, 65535] { R3121 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3121 += 1, R3001 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R3121 += 1, R3000 += 1, R3001 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3121 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R3123 += 1, R3003 += 1 };
  s0 -> s2 [0, 65535] { R3123 += 1, R3002 += 1, R3003 += 1 };
  s0 -> s0 [0, 65535] { R3122 += 1, R3123 += 1 };
  s0 -> s3 [65, 65] { R3123 += 1, R3003 += 1 };
  s0 -> s4 [65, 65] { R3123 += 1, R3003 += 1 };
  s0 -> s5 [80, 80] { R3123 += 1, R3003 += 1 };
  s0 -> s1 [81, 65535] { R3123 += 1, R3003 += 1 };
  s1 -> s1 [0, 64] { R3123 += 1, R3003 += 1 };
  s1 -> s3 [65, 65] { R3123 += 1, R3003 += 1 };
  s1 -> s4 [65, 65] { R3123 += 1, R3003 += 1 };
  s1 -> s5 [80, 80] { R3123 += 1, R3003 += 1 };
  s1 -> s1 [81, 65535] { R3123 += 1, R3003 += 1 };
  s2 -> s1 [0, 64] { R3123 += 1, R3003 += 1 };
  s2 -> s2 [0, 65535] { R3123 += 1, R3002 += 1, R3003 += 1 };
  s2 -> s3 [65, 65] { R3123 += 1, R3003 += 1 };
  s2 -> s4 [65, 65] { R3123 += 1, R3003 += 1 };
  s2 -> s5 [80, 80] { R3123 += 1, R3003 += 1 };
  s2 -> s1 [81, 65535] { R3123 += 1, R3003 += 1 };
  s3 -> s3 [0, 65] { R3123 += 1, R3003 += 1 };
  s3 -> s8 [80, 80] { R3123 += 1, R3003 += 1 };
  s3 -> s3 [81, 65535] { R3123 += 1, R3003 += 1 };
  s5 -> s5 [0, 64] { R3123 += 1, R3003 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3123 += 1 };
  s5 -> s7 [65, 65] { R3123 += 1, R3003 += 1 };
  s5 -> s8 [65, 65] { R3123 += 1, R3003 += 1 };
  s5 -> s5 [80, 65535] { R3123 += 1, R3003 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3123 += 1 };
  s8 -> s8 [0, 65] { R3123 += 1, R3003 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3123 += 1 };
  s8 -> s8 [80, 65535] { R3123 += 1, R3003 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R3125 += 1, R3005 += 1, R672 += 1 };
  s0 -> s2 [0, 65535] { R3125 += 1, R3004 += 1, R3005 += 1 };
  s0 -> s0 [0, 65535] { R3124 += 1, R3125 += 1 };
  s0 -> s3 [65, 65] { R3125 += 1, R3005 += 1, R672 += 1 };
  s0 -> s4 [65, 65] { R3125 += 1, R3005 += 1, R672 += 1 };
  s0 -> s1 [66, 65535] { R3125 += 1, R3005 += 1, R672 += 1 };
  s1 -> s1 [0, 64] { R3125 += 1, R3005 += 1, R672 += 1 };
  s1 -> s1 [0, 65535] { R3125 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3125 += 1, R3005 += 1, R672 += 1 };
  s1 -> s4 [65, 65] { R3125 += 1, R3005 += 1, R672 += 1 };
  s1 -> s1 [66, 65535] { R3125 += 1, R3005 += 1, R672 += 1 };
  s2 -> s1 [0, 64] { R3125 += 1, R3005 += 1, R672 += 1 };
  s2 -> s2 [0, 65535] { R3125 += 1, R3004 += 1, R3005 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3125 += 1, R3005 += 1, R672 += 1 };
  s2 -> s4 [65, 65] { R3125 += 1, R3005 += 1, R672 += 1 };
  s2 -> s1 [66, 65535] { R3125 += 1, R3005 += 1, R672 += 1 };
  s3 -> s6 [0, 65535] { R3125 += 1 };
  s3 -> s3 [0, 65535] { R3125 += 1, R3005 += 1, R672 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3125 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3125 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R3127 += 1, R3007 += 1, R674 += 1 };
  s0 -> s0 [0, 65535] { R3126 += 1, R3127 += 1 };
  s0 -> s2 [0, 65535] { R3127 += 1, R3006 += 1, R3007 += 1 };
  s0 -> s3 [65, 65] { R3127 += 1, R3007 += 1, R674 += 1 };
  s0 -> s4 [65, 65] { R3127 += 1, R3007 += 1, R674 += 1 };
  s0 -> s1 [66, 65535] { R3127 += 1, R3007 += 1, R674 += 1 };
  s1 -> s1 [0, 64] { R3127 += 1, R3007 += 1, R674 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3127 += 1 };
  s1 -> s3 [65, 65] { R3127 += 1, R3007 += 1, R674 += 1 };
  s1 -> s4 [65, 65] { R3127 += 1, R3007 += 1, R674 += 1 };
  s1 -> s1 [66, 65535] { R3127 += 1, R3007 += 1, R674 += 1 };
  s2 -> s1 [0, 64] { R3127 += 1, R3007 += 1, R674 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3127 += 1, R3006 += 1, R3007 += 1 };
  s2 -> s3 [65, 65] { R3127 += 1, R3007 += 1, R674 += 1 };
  s2 -> s4 [65, 65] { R3127 += 1, R3007 += 1, R674 += 1 };
  s2 -> s1 [66, 65535] { R3127 += 1, R3007 += 1, R674 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3127 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3127 += 1 };
  s4 -> s4 [0, 65535] { R3127 += 1, R3007 += 1, R674 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3127 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R3129 += 1, R3009 += 1, R676 += 1 };
  s0 -> s2 [0, 65535] { R3129 += 1, R3008 += 1, R3009 += 1 };
  s0 -> s0 [0, 65535] { R3128 += 1, R3129 += 1 };
  s0 -> s3 [65, 65] { R3129 += 1, R3009 += 1, R676 += 1 };
  s0 -> s4 [65, 65] { R3129 += 1, R3009 += 1, R676 += 1 };
  s0 -> s1 [66, 65535] { R3129 += 1, R3009 += 1, R676 += 1 };
  s1 -> s1 [0, 64] { R3129 += 1, R3009 += 1, R676 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3129 += 1 };
  s1 -> s3 [65, 65] { R3129 += 1, R3009 += 1, R676 += 1 };
  s1 -> s4 [65, 65] { R3129 += 1, R3009 += 1, R676 += 1 };
  s1 -> s1 [66, 65535] { R3129 += 1, R3009 += 1, R676 += 1 };
  s2 -> s1 [0, 64] { R3129 += 1, R3009 += 1, R676 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3129 += 1, R3008 += 1, R3009 += 1 };
  s2 -> s3 [65, 65] { R3129 += 1, R3009 += 1, R676 += 1 };
  s2 -> s4 [65, 65] { R3129 += 1, R3009 += 1, R676 += 1 };
  s2 -> s1 [66, 65535] { R3129 += 1, R3009 += 1, R676 += 1 };
  s3 -> s3 [0, 65535] { R3129 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3129 += 1 };
  s4 -> s4 [0, 65535] { R3129 += 1, R3009 += 1, R676 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3129 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s0 -> s0 [0, 65535] { R3130 += 1, R3131 += 1 };
  s0 -> s2 [0, 65535] { R3131 += 1, R3010 += 1, R3011 += 1 };
  s0 -> s3 [65, 65] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s0 -> s4 [65, 65] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s0 -> s1 [66, 65535] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 64] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [0, 65535] { R3131 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s1 -> s4 [65, 65] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s1 -> s1 [66, 65535] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [0, 64] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s2 -> s2 [0, 65535] { R3131 += 1, R3010 += 1, R3011 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s2 -> s4 [65, 65] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s2 -> s1 [66, 65535] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s3 -> s3 [0, 65535] { R3131 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3131 += 1, R3011 += 1, R678 += 1, R679 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3131 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3131 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 64] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s0 -> s0 [0, 65535] { R3132 += 1, R3133 += 1 };
  s0 -> s2 [0, 65535] { R3133 += 1, R3012 += 1, R3013 += 1 };
  s0 -> s3 [65, 65] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s0 -> s4 [65, 65] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s0 -> s1 [66, 65535] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s1 -> s1 [0, 64] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3133 += 1 };
  s1 -> s3 [65, 65] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s1 -> s4 [65, 65] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s1 -> s1 [66, 65535] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [0, 64] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3133 += 1, R3012 += 1, R3013 += 1 };
  s2 -> s3 [65, 65] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s2 -> s4 [65, 65] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s2 -> s1 [66, 65535] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3133 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3133 += 1 };
  s4 -> s4 [0, 65535] { R3133 += 1, R3013 += 1, R684 += 1, R685 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3133 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s1 [0, 64] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s0 -> s0 [0, 65535] { R3134 += 1, R3135 += 1 };
  s0 -> s2 [0, 65535] { R3135 += 1, R3014 += 1, R3015 += 1 };
  s0 -> s3 [65, 65] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s0 -> s4 [65, 65] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s0 -> s1 [66, 65535] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s1 -> s1 [0, 64] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3135 += 1 };
  s1 -> s3 [65, 65] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s1 -> s4 [65, 65] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s1 -> s1 [66, 65535] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s2 -> s1 [0, 64] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3135 += 1, R3014 += 1, R3015 += 1 };
  s2 -> s3 [65, 65] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s2 -> s4 [65, 65] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s2 -> s1 [66, 65535] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s3 -> s3 [0, 65535] { R3135 += 1, R3015 += 1, R688 += 1, R689 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3135 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3135 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3135 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 64] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s0 -> s2 [0, 65535] { R3137 += 1, R3016 += 1, R3017 += 1 };
  s0 -> s0 [0, 65535] { R3136 += 1, R3137 += 1 };
  s0 -> s3 [65, 65] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s0 -> s4 [65, 65] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s0 -> s1 [66, 65535] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [0, 64] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3137 += 1 };
  s1 -> s3 [65, 65] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s1 -> s4 [65, 65] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s1 -> s1 [66, 65535] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [0, 64] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3137 += 1, R3016 += 1, R3017 += 1 };
  s2 -> s3 [65, 65] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s2 -> s4 [65, 65] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s2 -> s1 [66, 65535] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3137 += 1, R3017 += 1, R692 += 1, R693 += 1 };
  s3 -> s6 [0, 65535] { R3137 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3137 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3137 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s1 [0, 64] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s0 -> s2 [0, 65535] { R3139 += 1, R3018 += 1, R3019 += 1 };
  s0 -> s0 [0, 65535] { R3138 += 1, R3139 += 1 };
  s0 -> s3 [65, 65] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s0 -> s4 [65, 65] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s0 -> s1 [66, 65535] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s1 -> s1 [0, 64] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3139 += 1 };
  s1 -> s3 [65, 65] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s1 -> s4 [65, 65] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s1 -> s1 [66, 65535] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s2 -> s1 [0, 64] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s2 -> s2 [0, 65535] { R3139 += 1, R3018 += 1, R3019 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s2 -> s4 [65, 65] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s2 -> s1 [66, 65535] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s3 -> s3 [0, 65535] { R3139 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3139 += 1 };
  s4 -> s4 [0, 65535] { R3139 += 1, R3019 += 1, R698 += 1, R699 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3139 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s0 -> s0 [0, 65535] { R3140 += 1, R3141 += 1 };
  s0 -> s2 [0, 65535] { R3141 += 1, R3020 += 1, R3021 += 1 };
  s0 -> s3 [65, 65] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s0 -> s4 [65, 65] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s0 -> s1 [66, 65535] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 64] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [0, 65535] { R3141 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s1 -> s4 [65, 65] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s1 -> s1 [66, 65535] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [0, 64] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3141 += 1, R3020 += 1, R3021 += 1 };
  s2 -> s3 [65, 65] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s2 -> s4 [65, 65] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s2 -> s1 [66, 65535] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3141 += 1 };
  s3 -> s3 [0, 65535] { R3141 += 1, R3021 += 1, R702 += 1, R703 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3141 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3141 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [0, 65535] { R3143 += 1, R3022 += 1, R3023 += 1 };
  s0 -> s0 [0, 65535] { R3142 += 1, R3143 += 1 };
  s0 -> s3 [65, 65] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s0 -> s4 [65, 65] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s0 -> s1 [66, 65535] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [0, 64] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [0, 65535] { R3143 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s1 -> s4 [65, 65] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [66, 65535] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s2 -> s1 [0, 64] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s2 -> s2 [0, 65535] { R3143 += 1, R3022 += 1, R3023 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s2 -> s4 [65, 65] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s2 -> s1 [66, 65535] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s3 -> s3 [0, 65535] { R3143 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3143 += 1, R3023 += 1, R708 += 1, R709 += 1 };
  s4 -> s5 [0, 65535] { R3143 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3143 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R3145 += 1, R3025 += 1 };
  s0 -> s2 [0, 65535] { R3145 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s0 [0, 65535] { R3144 += 1, R3145 += 1 };
  s0 -> s3 [65, 65] { R3145 += 1, R3025 += 1 };
  s0 -> s4 [65, 65] { R3145 += 1, R3025 += 1 };
  s0 -> s1 [66, 65535] { R3145 += 1, R3025 += 1 };
  s1 -> s1 [0, 64] { R3145 += 1, R3025 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3145 += 1 };
  s1 -> s3 [65, 65] { R3145 += 1, R3025 += 1 };
  s1 -> s4 [65, 65] { R3145 += 1, R3025 += 1 };
  s1 -> s1 [66, 65535] { R3145 += 1, R3025 += 1 };
  s2 -> s1 [0, 64] { R3145 += 1, R3025 += 1 };
  s2 -> s2 [0, 65535] { R3145 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3145 += 1, R3025 += 1 };
  s2 -> s4 [65, 65] { R3145 += 1, R3025 += 1 };
  s2 -> s1 [66, 65535] { R3145 += 1, R3025 += 1 };
  s3 -> s3 [0, 65535] { R3145 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3145 += 1, R3025 += 1 };
  s4 -> s5 [0, 65535] { R3145 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3145 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s2 [0, 64] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s0 [0, 65535] { R3146 += 1, R3147 += 1 };
  s0 -> s3 [0, 65535] { R3147 += 1, R3026 += 1, R3027 += 1 };
  s0 -> s4 [65, 65] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s5 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s6 [65, 65] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s7 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s1 [66, 65535] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s0 -> s2 [66, 65535] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s1 [0, 64] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s2 [0, 64] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s4 [65, 65] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s5 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s6 [65, 65] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s7 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s1 -> s1 [66, 65535] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s1 -> s2 [66, 65535] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s2 [0, 64] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s11 [0, 64] { R3147 += 1, R3027 += 1 };
  s2 -> s8 [65, 65] { R3147 += 1, R3027 += 1 };
  s2 -> s12 [65, 65] { R3147 += 1, R3027 += 1 };
  s2 -> s5 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s7 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s2 [66, 65535] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s11 [66, 65535] { R3147 += 1, R3027 += 1 };
  s3 -> s1 [0, 64] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s2 [0, 64] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s3 [0, 65535] { R3147 += 1, R3026 += 1, R3027 += 1 };
  s3 -> s4 [65, 65] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s5 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s6 [65, 65] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s7 [65, 65] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s3 -> s1 [66, 65535] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s3 -> s2 [66, 65535] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s4 -> s4 [0, 65535] { R3147 += 1, R3027 += 1, R2926 += 1, R2927 += 1 };
  s4 -> s5 [0, 65535] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s5 -> s8 [0, 65535] { R3147 += 1, R3027 += 1 };
  s5 -> s5 [0, 65535] { R3147 += 1, R3027 += 1, R2927 += 1, R2928 += 1 };
  s8 -> s8 [0, 65535] { R3147 += 1, R3027 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R3147 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3147 += 1 };
  s11 -> s11 [0, 64] { R3147 += 1, R3027 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3147 += 1 };
  s11 -> s8 [65, 65] { R3147 += 1, R3027 += 1 };
  s11 -> s12 [65, 65] { R3147 += 1, R3027 += 1 };
  s11 -> s11 [66, 65535] { R3147 += 1, R3027 += 1 };
  s12 -> s12 [0, 65535] { R3147 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R3149 += 1, R3029 += 1 };
  s0 -> s2 [0, 65535] { R3149 += 1, R3028 += 1, R3029 += 1 };
  s0 -> s0 [0, 65535] { R3148 += 1, R3149 += 1 };
  s0 -> s3 [65, 65] { R3149 += 1, R3029 += 1 };
  s0 -> s4 [65, 65] { R3149 += 1, R3029 += 1 };
  s0 -> s1 [66, 65535] { R3149 += 1, R3029 += 1 };
  s1 -> s1 [0, 64] { R3149 += 1, R3029 += 1 };
  s1 -> s1 [0, 65535] { R3149 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3149 += 1, R3029 += 1 };
  s1 -> s4 [65, 65] { R3149 += 1, R3029 += 1 };
  s1 -> s1 [66, 65535] { R3149 += 1, R3029 += 1 };
  s2 -> s1 [0, 64] { R3149 += 1, R3029 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3149 += 1, R3028 += 1, R3029 += 1 };
  s2 -> s3 [65, 65] { R3149 += 1, R3029 += 1 };
  s2 -> s4 [65, 65] { R3149 += 1, R3029 += 1 };
  s2 -> s1 [66, 65535] { R3149 += 1, R3029 += 1 };
  s3 -> s3 [0, 65535] { R3149 += 1, R3029 += 1 };
  s3 -> s6 [0, 65535] { R3149 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3149 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3149 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s0 -> s0 [0, 65535] { R3150 += 1, R3151 += 1 };
  s0 -> s2 [0, 65535] { R3151 += 1, R3030 += 1, R3031 += 1 };
  s0 -> s3 [65, 65] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s0 -> s4 [65, 65] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s0 -> s1 [66, 65535] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s1 -> s1 [0, 64] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s1 -> s1 [0, 65535] { R3151 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s1 -> s4 [65, 65] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s1 -> s1 [66, 65535] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s2 -> s1 [0, 64] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s2 -> s2 [0, 65535] { R3151 += 1, R3030 += 1, R3031 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s2 -> s4 [65, 65] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s2 -> s1 [66, 65535] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s3 -> s3 [0, 65535] { R3151 += 1, R3031 += 1, R2932 += 1, R2933 += 1 };
  s3 -> s6 [0, 65535] { R3151 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3151 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3151 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P105
automaton P105_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P39
automaton P39_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R6 = R2971 && R7 = R3151 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R84 = 0 && R85 = R2971 && R86 = 0 && R87 = R2971 && R88 = 0 && R89 = R2971 && R90 = 0 && R91 = R3151 && R92 = 0 && R93 = R3151 && R94 = 0 && R95 = R3151 && R117 + R116 + -1*R131 + -1*R129 = 0 && R130 + R128 = 0 && R2938 = 0 && R2939 = R2971 && R2940 = 0 && R2941 = R2971 && R2942 = 0 && R2943 = R2971 && R2944 = 0 && R2945 = R2971 && R2946 = 0 && R2947 = R2971 && R2948 = 0 && R2949 = R2971 && R2950 = 0 && R2951 = R2971 && R2952 = 0 && R2953 = R2971 && R2954 = 0 && R2955 = R2971 && R2956 = 0 && R2957 = R2971 && R2958 = 0 && R2959 = R2971 && R2960 = 0 && R2961 = R2971 && R2962 = 0 && R2963 = R2971 && R2964 = 0 && R2965 = R2971 && R2966 = 0 && R2967 = R2971 && R2968 = 0 && R2969 = R2971 && R2970 = 0 && R2972 = 0 && R2973 = R3151 && R2974 = 0 && R2975 = R3151 && R2976 = 0 && R2977 = R3151 && R2978 = 0 && R2979 = R3151 && R2980 = 0 && R2981 = R3151 && R2982 = 0 && R2983 = R3151 && R2984 = 0 && R2985 = R3151 && R2986 = 0 && R2987 = R3151 && R2988 = 0 && R2989 = R3151 && R2990 = 0 && R2991 = R3151 && R2992 = 0 && R2993 = R3151 && R2994 = 0 && R2995 = R3151 && R2996 = 0 && R2997 = R3151 && R2998 = 0 && R2999 = R3151 && R3002 = 0 && R3003 = 0 && R3026 = 0 && R3027 = 0 && R3060 = 10 && R3061 = R3151 && R3062 = 10 && R3063 = R3151 && R3064 = 10 && R3065 = R3151 && R3066 = 10 && R3067 = R3151 && R3068 = 10 && R3069 = R3151 && R3070 = 10 && R3071 = R3151 && R3072 = 10 && R3073 = R3151 && R3074 = 10 && R3075 = R3151 && R3076 = 10 && R3077 = R3151 && R3078 = 10 && R3079 = R3151 && R3080 = 10 && R3081 = R3151 && R3082 = 10 && R3083 = R3151 && R3084 = 10 && R3085 = R3151 && R3086 = 10 && R3087 = R3151 && R3088 = 10 && R3089 = R3151 && R3090 = 10 && R3091 = R3151 && R3092 = 10 && R3093 = R3151 && R3094 = 10 && R3095 = R3151 && R3096 = 10 && R3097 = R3151 && R3098 = 10 && R3099 = R3151 && R3100 = 10 && R3101 = R3151 && R3102 = 10 && R3103 = R3151 && R3104 = 10 && R3105 = R3151 && R3106 = 10 && R3107 = R3151 && R3108 = 10 && R3109 = R3151 && R3110 = 10 && R3111 = R3151 && R3112 = 10 && R3113 = R3151 && R3114 = 10 && R3115 = R3151 && R3116 = 10 && R3117 = R3151 && R3118 = 10 && R3119 = R3151 && R3120 = 10 && R3121 = R3151 && R3122 = 10 && R3123 = R3151 && R3124 = 10 && R3125 = R3151 && R3126 = 10 && R3127 = R3151 && R3128 = 10 && R3129 = R3151 && R3130 = 10 && R3131 = R3151 && R3132 = 10 && R3133 = R3151 && R3134 = 10 && R3135 = R3151 && R3136 = 10 && R3137 = R3151 && R3138 = 10 && R3139 = R3151 && R3140 = 10 && R3141 = R3151 && R3142 = 10 && R3143 = R3151 && R3144 = 10 && R3145 = R3151 && R3146 = 10 && R3147 = R3151 && R3148 = 10 && R3149 = R3151 && R3150 = 10 && R57 + R56 != 0 && R59 + R58 != 0 && R147 + R144 + R165 + R162 != 0 && R707 + R704 + R2937 + R2934 != 0 && R21 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && R31 < 1 && R119 + R118 < 1 && R121 + R120 < 1 && -1*R131 + -1*R129 < 1 && -1*R673 + -1*R672 < 1 && R675 + R674 < 1 && R677 + R676 < 1 && 0 < R2971 && 9 < R3151 && (R127 + R124 != 0 || ((R125 + R122 != 0 || R126 + R123 + -1*R131 + -1*R129 = 0 || R131 + R129 < 1) && (R125 + R122 = 0 || R131 + R129 < 1))) && (R131 + R129 != 0 || R137 + R134 = 0 || (R135 + R132 = 0 && R136 + R133 = 0)) && (R131 + R129 != 0 || R137 + R134 = 0 || (R140 + R138 = 0 && R141 + R139 = 0)) && (R131 + R129 != 0 || R137 + R134 = 0 || (R145 + R142 = 0 && R146 + R143 = 0)) && (R135 + R132 != 0 || R131 + R129 + -1*R136 + -1*R133 = 0 || R131 + R129 < 1) && (R140 + R138 != 0 || R131 + R129 + -1*R141 + -1*R139 = 0 || R131 + R129 < 1) && (R145 + R142 != 0 || R131 + R129 + -1*R146 + -1*R143 = 0 || R131 + R129 < 1) && (R673 + R672 != 0 || R683 + R680 = 0 || (R681 + R678 = 0 && R682 + R679 = 0)) && (R673 + R672 != 0 || R683 + R680 = 0 || (R686 + R684 = 0 && R687 + R685 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R690 + R688 = 0 && R691 + R689 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R695 + R692 = 0 && R696 + R693 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R700 + R698 = 0 && R701 + R699 = 0)) && (R673 + R672 != 0 || R697 + R694 = 0 || (R705 + R702 = 0 && R706 + R703 = 0)) && (R681 + R678 != 0 || R673 + R672 + -1*R682 + -1*R679 = 0 || R673 + R672 < 1) && (R686 + R684 != 0 || R673 + R672 + -1*R687 + -1*R685 = 0 || R673 + R672 < 1) && (R690 + R688 != 0 || R673 + R672 + -1*R691 + -1*R689 = 0 || R673 + R672 < 1) && (R695 + R692 != 0 || R673 + R672 + -1*R696 + -1*R693 = 0 || R673 + R672 < 1) && (R700 + R698 != 0 || R673 + R672 + -1*R701 + -1*R699 = 0 || R673 + R672 < 1) && (R705 + R702 != 0 || R673 + R672 + -1*R706 + -1*R703 = 0 || R673 + R672 < 1) && (R44 = 0 || (R108 = 0 && R109 = 0)) && (R44 = 0 || (R110 = 0 && R111 = 0)) && (R45 = 0 || (R3000 = 0 && R3001 = 0)) && (R45 = 0 || (R3004 = 0 && R3005 = 0)) && (R45 = 0 || (R3006 = 0 && R3007 = 0)) && (R45 = 0 || (R3008 = 0 && R3009 = 0)) && (R45 = 0 || (R3010 = 0 && R3011 = 0)) && (R45 = 0 || (R3012 = 0 && R3013 = 0)) && (R45 = 0 || (R3014 = 0 && R3015 = 0)) && (R45 = 0 || (R3016 = 0 && R3017 = 0)) && (R45 = 0 || (R3018 = 0 && R3019 = 0)) && (R45 = 0 || (R3020 = 0 && R3021 = 0)) && (R45 = 0 || (R3022 = 0 && R3023 = 0)) && (R45 = 0 || (R3024 = 0 && R3025 = 0)) && (R45 = 0 || (R3028 = 0 && R3029 = 0)) && (R45 = 0 || (R3030 = 0 && R3031 = 0)) && (R48 = 0 || (R3032 = 0 && R3033 = 0)) && (R48 = 0 || (R3034 = 0 && R3035 = 0)) && (R48 = 0 || (R3036 = 0 && R3037 = 0)) && (R48 = 0 || (R3038 = 0 && R3039 = 0)) && (R48 = 0 || (R3040 = 0 && R3041 = 0)) && (R48 = 0 || (R3042 = 0 && R3043 = 0)) && (R48 = 0 || (R3044 = 0 && R3045 = 0)) && (R48 = 0 || (R3046 = 0 && R3047 = 0)) && (R48 = 0 || (R3048 = 0 && R3049 = 0)) && (R48 = 0 || (R3050 = 0 && R3051 = 0)) && (R48 = 0 || (R3052 = 0 && R3053 = 0)) && (R48 = 0 || (R3054 = 0 && R3055 = 0)) && (R48 = 0 || (R3056 = 0 && R3057 = 0)) && (R48 = 0 || (R3058 = 0 && R3059 = 0)) && (R49 = 0 || (R112 = 0 && R113 = 0)) && (R49 = 0 || (R114 = 0 && R115 = 0)) && (R127 + R124 = 0 || (R125 + R122 = 0 && R126 + R123 + -1*R131 + -1*R129 = 0)) && (R135 + R132 = 0 || R131 + R129 < 1) && (R140 + R138 = 0 || R131 + R129 < 1) && (R145 + R142 = 0 || R131 + R129 < 1) && (R153 + R150 = 0 || (R151 + R148 = 0 && R152 + R149 = 0)) && (R159 + R156 = 0 || (R157 + R154 = 0 && R158 + R155 = 0)) && (R159 + R156 = 0 || (R163 + R160 = 0 && R164 + R161 = 0)) && (R681 + R678 = 0 || R673 + R672 < 1) && (R686 + R684 = 0 || R673 + R672 < 1) && (R690 + R688 = 0 || R673 + R672 < 1) && (R695 + R692 = 0 || R673 + R672 < 1) && (R700 + R698 = 0 || R673 + R672 < 1) && (R705 + R702 = 0 || R673 + R672 < 1) && (R713 + R710 = 0 || (R711 + R708 = 0 && R712 + R709 = 0)) && (R2931 + R2928 = 0 || (R2929 + R2926 = 0 && R2930 + R2927 = 0)) && (R2931 + R2928 = 0 || (R2935 + R2932 = 0 && R2936 + R2933 = 0));
// End of Parikh automata intersection problem
