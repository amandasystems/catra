// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R3, R6, R7, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s2 [44, 44] { R11 += 1 };
  s0 -> s1 [45, 45] { R11 += 1 };
  s0 -> s3 [46, 46] { R11 += 1 };
  s0 -> s1 [48, 62] { R11 += 1 };
  s0 -> s1 [65, 65535] { R11 += 1 };
  s1 -> s1 [0, 43] { R11 += 1 };
  s1 -> s2 [44, 44] { R11 += 1 };
  s1 -> s1 [45, 45] { R11 += 1 };
  s1 -> s3 [46, 46] { R11 += 1 };
  s1 -> s1 [48, 62] { R11 += 1 };
  s1 -> s1 [65, 65535] { R11 += 1 };
  s2 -> s2 [0, 45] { R11 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R11 += 1 };
  s2 -> s2 [48, 62] { R11 += 1 };
  s2 -> s2 [65, 65535] { R11 += 1 };
  s3 -> s1 [0, 43] { R11 += 1 };
  s3 -> s2 [44, 44] { R11 += 1 };
  s3 -> s1 [45, 45] { R11 += 1 };
  s3 -> s3 [46, 46] { R11 += 1 };
  s3 -> s1 [48, 62] { R11 += 1 };
  s3 -> s1 [65, 114] { R11 += 1 };
  s3 -> s4 [115, 115] { R11 += 1 };
  s3 -> s1 [116, 65535] { R11 += 1 };
  s4 -> s1 [0, 43] { R11 += 1 };
  s4 -> s2 [44, 44] { R11 += 1 };
  s4 -> s1 [45, 45] { R11 += 1 };
  s4 -> s3 [46, 46] { R11 += 1 };
  s4 -> s1 [48, 62] { R11 += 1 };
  s4 -> s1 [65, 110] { R11 += 1 };
  s4 -> s5 [111, 111] { R11 += 1 };
  s4 -> s1 [112, 65535] { R11 += 1 };
  s5 -> s1 [0, 43] { R11 += 1 };
  s5 -> s2 [44, 44] { R11 += 1 };
  s5 -> s1 [45, 45] { R11 += 1 };
  s5 -> s3 [46, 46] { R11 += 1 };
  s5 -> s1 [48, 62] { R11 += 1 };
  s5 -> s1 [65, 98] { R11 += 1 };
  s5 -> s6 [99, 99] { R11 += 1 };
  s5 -> s1 [100, 65535] { R11 += 1 };
  s6 -> s1 [0, 43] { R11 += 1 };
  s6 -> s2 [44, 44] { R11 += 1 };
  s6 -> s1 [45, 45] { R11 += 1 };
  s6 -> s3 [46, 46] { R11 += 1 };
  s6 -> s1 [48, 62] { R11 += 1 };
  s6 -> s1 [65, 106] { R11 += 1 };
  s6 -> s1 [108, 65535] { R11 += 1 };
  s7 -> s2 [0, 45] { R11 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R11 += 1 };
  s7 -> s2 [48, 62] { R11 += 1 };
  s7 -> s2 [65, 114] { R11 += 1 };
  s7 -> s8 [115, 115] { R11 += 1 };
  s7 -> s2 [116, 65535] { R11 += 1 };
  s8 -> s2 [0, 45] { R11 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R11 += 1 };
  s8 -> s2 [48, 62] { R11 += 1 };
  s8 -> s2 [65, 110] { R11 += 1 };
  s8 -> s9 [111, 111] { R11 += 1 };
  s8 -> s2 [112, 65535] { R11 += 1 };
  s9 -> s2 [0, 45] { R11 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R11 += 1 };
  s9 -> s2 [48, 62] { R11 += 1 };
  s9 -> s2 [65, 98] { R11 += 1 };
  s9 -> s10 [99, 99] { R11 += 1 };
  s9 -> s2 [100, 65535] { R11 += 1 };
  s10 -> s2 [0, 45] { R11 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R11 += 1 };
  s10 -> s2 [48, 62] { R11 += 1 };
  s10 -> s2 [65, 106] { R11 += 1 };
  s10 -> s2 [108, 65535] { R11 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s1 [0, 65535] { R13 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R13 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R15 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R15 += 1, R3 += 1 };
  s0 -> s3 [44, 44] { R15 += 1 };
  s0 -> s1 [45, 65535] { R15 += 1 };
  s1 -> s1 [0, 43] { R15 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [44, 44] { R15 += 1 };
  s1 -> s1 [45, 65535] { R15 += 1 };
  s2 -> s1 [0, 43] { R15 += 1 };
  s2 -> s2 [0, 65535] { R15 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [44, 44] { R15 += 1 };
  s2 -> s1 [45, 65535] { R15 += 1 };
  s3 -> s3 [0, 65535] { R15 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 43] { R17 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R17 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s3 [44, 44] { R17 += 1, R7 += 1 };
  s0 -> s1 [45, 65535] { R17 += 1, R7 += 1 };
  s1 -> s1 [0, 43] { R17 += 1, R7 += 1 };
  s1 -> s3 [44, 44] { R17 += 1, R7 += 1 };
  s1 -> s1 [45, 65535] { R17 += 1, R7 += 1 };
  s2 -> s1 [0, 43] { R17 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R17 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [44, 44] { R17 += 1, R7 += 1 };
  s2 -> s1 [45, 65535] { R17 += 1, R7 += 1 };
  s3 -> s4 [0, 65535] { R17 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R17 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R17 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R19 += 1, R8 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R19 += 1, R9 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R19 += 1, R8 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R19 += 1, R9 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R19 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R19 += 1, R9 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R19 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R9 && R2 = R19 && R6 = 0 && R7 = R9 && R8 = 0 && R10 = 10 && R11 = R19 && R12 = 10 && R13 = R19 && R14 = 10 && R15 = R19 && R16 = 10 && R17 = R19 && R18 = 10 && R0 != 0 && R3 < 1 && 0 < R9 && 9 < R19;
// End of Parikh automata intersection problem
