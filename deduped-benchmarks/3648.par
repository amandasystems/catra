// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R15, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R20, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R136 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [13, 13] { R168 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s1 [0, 65535] { R170 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R170 += 1, R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R172 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [9, 13] { R172 += 1 };
  s0 -> s1 [14, 31] { R172 += 1 };
  s0 -> s2 [32, 32] { R172 += 1 };
  s0 -> s1 [33, 65535] { R172 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1 };
  s2 -> s1 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R194 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s1 [91, 65535] { R194 += 1 };
  s1 -> s1 [0, 64] { R194 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R194 += 1 };
  accepting s0, s1;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s1 [0, 65535] { R196 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R196 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R198 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R147 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s3 [9, 13] { R198 += 1, R148 += 1 };
  s0 -> s1 [14, 31] { R198 += 1, R148 += 1 };
  s0 -> s3 [32, 32] { R198 += 1, R148 += 1 };
  s0 -> s1 [33, 65535] { R198 += 1, R148 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1, R148 += 1 };
  s1 -> s5 [0, 65535] { R198 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R198 += 1, R148 += 1 };
  s2 -> s2 [0, 65535] { R198 += 1, R147 += 1, R148 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R198 += 1, R148 += 1 };
  s2 -> s1 [14, 31] { R198 += 1, R148 += 1 };
  s2 -> s3 [32, 32] { R198 += 1, R148 += 1 };
  s2 -> s1 [33, 65535] { R198 += 1, R148 += 1 };
  s3 -> s1 [0, 65535] { R198 += 1, R148 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R198 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R200 += 1, R150 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1, R150 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R200 += 1 };
  s2 -> s1 [0, 65535] { R200 += 1, R150 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R149 += 1, R150 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R202 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R151 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s3 [9, 13] { R202 += 1, R152 += 1 };
  s0 -> s1 [14, 31] { R202 += 1, R152 += 1 };
  s0 -> s3 [32, 32] { R202 += 1, R152 += 1 };
  s0 -> s1 [33, 65535] { R202 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R202 += 1, R152 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R202 += 1 };
  s2 -> s1 [0, 8] { R202 += 1, R152 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R202 += 1, R151 += 1, R152 += 1 };
  s2 -> s3 [9, 13] { R202 += 1, R152 += 1 };
  s2 -> s1 [14, 31] { R202 += 1, R152 += 1 };
  s2 -> s3 [32, 32] { R202 += 1, R152 += 1 };
  s2 -> s1 [33, 65535] { R202 += 1, R152 += 1 };
  s3 -> s1 [0, 65535] { R202 += 1, R152 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R202 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s1 [0, 65535] { R204 += 1, R154 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R153 += 1, R154 += 1 };
  s1 -> s4 [0, 65535] { R204 += 1 };
  s1 -> s1 [0, 65535] { R204 += 1, R154 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R204 += 1, R154 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R204 += 1, R153 += 1, R154 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R204 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R20 += 1 };
  s1 -> s1 [0, 60] { R20 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R20 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R210 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R210 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s1 [0, 65535] { R212 += 1, R163 += 1, R164 += 1 };
  s0 -> s2 [12, 12] { R212 += 1, R164 += 1 };
  s1 -> s1 [0, 65535] { R212 += 1, R163 += 1, R164 += 1 };
  s1 -> s2 [12, 12] { R212 += 1, R164 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R214 += 1, R165 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R166 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R165 += 1, R166 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R214 += 1, R166 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R214 += 1, R166 += 1, R12 += 1 };
  s2 -> s4 [0, 65535] { R214 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R214 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R216 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R181 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s1 [91, 65535] { R216 += 1, R182 += 1 };
  s1 -> s1 [0, 64] { R216 += 1, R182 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R216 += 1 };
  s1 -> s1 [91, 65535] { R216 += 1, R182 += 1 };
  s2 -> s1 [0, 64] { R216 += 1, R182 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R216 += 1, R181 += 1, R182 += 1 };
  s2 -> s1 [91, 65535] { R216 += 1, R182 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R218 += 1, R184 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R183 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R184 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R218 += 1 };
  s2 -> s1 [0, 65535] { R218 += 1, R184 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R218 += 1, R183 += 1, R184 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R218 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R220 += 1, R186 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R185 += 1, R186 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s3 [0, 65535] { R220 += 1, R186 += 1, R139 += 1, R140 += 1 };
  s0 -> s4 [9, 13] { R220 += 1, R186 += 1, R140 += 1 };
  s0 -> s1 [14, 31] { R220 += 1, R186 += 1, R140 += 1 };
  s0 -> s4 [32, 32] { R220 += 1, R186 += 1, R140 += 1 };
  s0 -> s1 [33, 65535] { R220 += 1, R186 += 1, R140 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R220 += 1 };
  s1 -> s1 [0, 65535] { R220 += 1, R186 += 1, R140 += 1 };
  s1 -> s7 [0, 65535] { R220 += 1, R186 += 1 };
  s2 -> s1 [0, 8] { R220 += 1, R186 += 1, R140 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R220 += 1, R185 += 1, R186 += 1 };
  s2 -> s3 [0, 65535] { R220 += 1, R186 += 1, R139 += 1, R140 += 1 };
  s2 -> s4 [9, 13] { R220 += 1, R186 += 1, R140 += 1 };
  s2 -> s1 [14, 31] { R220 += 1, R186 += 1, R140 += 1 };
  s2 -> s4 [32, 32] { R220 += 1, R186 += 1, R140 += 1 };
  s2 -> s1 [33, 65535] { R220 += 1, R186 += 1, R140 += 1 };
  s3 -> s1 [0, 8] { R220 += 1, R186 += 1, R140 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R220 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R186 += 1, R139 += 1, R140 += 1 };
  s3 -> s4 [9, 13] { R220 += 1, R186 += 1, R140 += 1 };
  s3 -> s1 [14, 31] { R220 += 1, R186 += 1, R140 += 1 };
  s3 -> s4 [32, 32] { R220 += 1, R186 += 1, R140 += 1 };
  s3 -> s1 [33, 65535] { R220 += 1, R186 += 1, R140 += 1 };
  s4 -> s1 [0, 65535] { R220 += 1, R186 += 1, R140 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R220 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R220 += 1 };
  s7 -> s7 [0, 65535] { R220 += 1, R186 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R222 += 1, R188 += 1, R141 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R188 += 1, R142 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R222 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s1 -> s5 [0, 65535] { R222 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R222 += 1, R188 += 1, R141 += 1, R142 += 1 };
  s1 -> s2 [0, 65535] { R222 += 1, R188 += 1, R142 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R222 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R222 += 1, R188 += 1, R142 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R222 += 1, R188 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R222 += 1, R188 += 1, R141 += 1, R142 += 1 };
  s3 -> s2 [0, 65535] { R222 += 1, R188 += 1, R142 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R222 += 1, R187 += 1, R188 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R222 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R222 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R222 += 1, R188 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R224 += 1, R190 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R190 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [0, 65535] { R224 += 1, R189 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s0 -> s4 [9, 13] { R224 += 1, R190 += 1, R144 += 1 };
  s0 -> s1 [14, 31] { R224 += 1, R190 += 1, R144 += 1 };
  s0 -> s4 [32, 32] { R224 += 1, R190 += 1, R144 += 1 };
  s0 -> s1 [33, 65535] { R224 += 1, R190 += 1, R144 += 1 };
  s1 -> s6 [0, 65535] { R224 += 1 };
  s1 -> s7 [0, 65535] { R224 += 1, R190 += 1 };
  s1 -> s1 [0, 65535] { R224 += 1, R190 += 1, R144 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R224 += 1, R190 += 1, R144 += 1 };
  s2 -> s6 [0, 65535] { R224 += 1 };
  s2 -> s2 [0, 65535] { R224 += 1, R190 += 1, R143 += 1, R144 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R224 += 1, R190 += 1, R144 += 1 };
  s2 -> s1 [14, 31] { R224 += 1, R190 += 1, R144 += 1 };
  s2 -> s4 [32, 32] { R224 += 1, R190 += 1, R144 += 1 };
  s2 -> s1 [33, 65535] { R224 += 1, R190 += 1, R144 += 1 };
  s3 -> s1 [0, 8] { R224 += 1, R190 += 1, R144 += 1 };
  s3 -> s2 [0, 65535] { R224 += 1, R190 += 1, R143 += 1, R144 += 1 };
  s3 -> s3 [0, 65535] { R224 += 1, R189 += 1, R190 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R224 += 1, R190 += 1, R144 += 1 };
  s3 -> s1 [14, 31] { R224 += 1, R190 += 1, R144 += 1 };
  s3 -> s4 [32, 32] { R224 += 1, R190 += 1, R144 += 1 };
  s3 -> s1 [33, 65535] { R224 += 1, R190 += 1, R144 += 1 };
  s4 -> s1 [0, 65535] { R224 += 1, R190 += 1, R144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R224 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R224 += 1 };
  s7 -> s7 [0, 65535] { R224 += 1, R190 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R226 += 1, R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R192 += 1, R146 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R226 += 1, R192 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s1 -> s1 [0, 65535] { R226 += 1, R191 += 1, R192 += 1 };
  s1 -> s2 [0, 65535] { R226 += 1, R192 += 1, R146 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R226 += 1, R192 += 1, R145 += 1, R146 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R226 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R192 += 1, R146 += 1, R7 += 1 };
  s2 -> s6 [0, 65535] { R226 += 1, R192 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R226 += 1 };
  s3 -> s2 [0, 65535] { R226 += 1, R192 += 1, R146 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R226 += 1, R192 += 1, R145 += 1, R146 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R226 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R226 += 1 };
  s6 -> s6 [0, 65535] { R226 += 1, R192 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R228 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s2 [66, 66] { R228 += 1 };
  s0 -> s1 [67, 65535] { R228 += 1 };
  s1 -> s1 [0, 64] { R228 += 1 };
  s1 -> s2 [66, 66] { R228 += 1 };
  s1 -> s1 [67, 65535] { R228 += 1 };
  s2 -> s2 [0, 64] { R228 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R228 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R230 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R230 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65] { R232 += 1 };
  s0 -> s2 [0, 65535] { R232 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s3 [66, 66] { R232 += 1 };
  s0 -> s1 [67, 65535] { R232 += 1 };
  s1 -> s1 [0, 65] { R232 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R232 += 1 };
  s1 -> s1 [67, 65535] { R232 += 1 };
  s2 -> s1 [0, 65] { R232 += 1 };
  s2 -> s2 [0, 65535] { R232 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R232 += 1 };
  s2 -> s1 [67, 65535] { R232 += 1 };
  s3 -> s3 [0, 65535] { R232 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R234 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s2 [0, 65535] { R234 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [9, 13] { R234 += 1, R156 += 1 };
  s0 -> s1 [14, 31] { R234 += 1, R156 += 1 };
  s0 -> s3 [32, 32] { R234 += 1, R156 += 1 };
  s0 -> s1 [33, 65535] { R234 += 1, R156 += 1 };
  s1 -> s5 [0, 65535] { R234 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R234 += 1, R156 += 1 };
  s2 -> s1 [0, 8] { R234 += 1, R156 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R234 += 1, R155 += 1, R156 += 1 };
  s2 -> s3 [9, 13] { R234 += 1, R156 += 1 };
  s2 -> s1 [14, 31] { R234 += 1, R156 += 1 };
  s2 -> s3 [32, 32] { R234 += 1, R156 += 1 };
  s2 -> s1 [33, 65535] { R234 += 1, R156 += 1 };
  s3 -> s1 [0, 65535] { R234 += 1, R156 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R234 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R236 += 1, R158 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s2 [0, 65535] { R236 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1, R158 += 1, R10 += 1 };
  s1 -> s4 [0, 65535] { R236 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R236 += 1, R158 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R236 += 1, R157 += 1, R158 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R236 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R238 += 1, R160 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R159 += 1, R160 += 1 };
  s0 -> s3 [9, 13] { R238 += 1, R160 += 1 };
  s0 -> s1 [14, 31] { R238 += 1, R160 += 1 };
  s0 -> s3 [32, 32] { R238 += 1, R160 += 1 };
  s0 -> s1 [33, 65535] { R238 += 1, R160 += 1 };
  s1 -> s1 [0, 65535] { R238 += 1, R160 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R238 += 1 };
  s2 -> s1 [0, 8] { R238 += 1, R160 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R238 += 1, R159 += 1, R160 += 1 };
  s2 -> s3 [9, 13] { R238 += 1, R160 += 1 };
  s2 -> s1 [14, 31] { R238 += 1, R160 += 1 };
  s2 -> s3 [32, 32] { R238 += 1, R160 += 1 };
  s2 -> s1 [33, 65535] { R238 += 1, R160 += 1 };
  s3 -> s1 [0, 65535] { R238 += 1, R160 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R238 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R240 += 1, R161 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s2 [0, 65535] { R240 += 1, R162 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R161 += 1, R162 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R240 += 1, R162 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R240 += 1 };
  s2 -> s2 [0, 65535] { R240 += 1, R162 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R240 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65] { R242 += 1, R176 += 1 };
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R175 += 1, R176 += 1 };
  s0 -> s1 [67, 65535] { R242 += 1, R176 += 1 };
  s1 -> s1 [0, 65] { R242 += 1, R176 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R242 += 1 };
  s1 -> s1 [67, 65535] { R242 += 1, R176 += 1 };
  s2 -> s1 [0, 65] { R242 += 1, R176 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R242 += 1, R175 += 1, R176 += 1 };
  s2 -> s1 [67, 65535] { R242 += 1, R176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R244 += 1, R177 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R178 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1, R177 += 1, R178 += 1 };
  s1 -> s2 [0, 65535] { R244 += 1, R178 += 1, R137 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R244 += 1, R178 += 1, R137 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R244 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R244 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 66] { R246 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R179 += 1, R180 += 1 };
  s0 -> s1 [85, 65535] { R246 += 1, R180 += 1 };
  s1 -> s1 [0, 66] { R246 += 1, R180 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R246 += 1, R180 += 1 };
  s2 -> s1 [0, 66] { R246 += 1, R180 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R246 += 1, R179 += 1, R180 += 1 };
  s2 -> s1 [85, 65535] { R246 += 1, R180 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R248 += 1, R205 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R206 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s1 -> s1 [0, 65535] { R248 += 1, R205 += 1, R206 += 1 };
  s1 -> s2 [0, 65535] { R248 += 1, R206 += 1, R138 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R248 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R206 += 1, R138 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R248 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65] { R250 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R207 += 1, R208 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s0 -> s3 [66, 66] { R250 += 1, R208 += 1 };
  s0 -> s4 [66, 66] { R250 += 1, R208 += 1 };
  s0 -> s1 [85, 65535] { R250 += 1, R208 += 1 };
  s1 -> s1 [0, 65] { R250 += 1, R208 += 1 };
  s1 -> s1 [0, 65535] { R250 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R250 += 1, R208 += 1 };
  s1 -> s4 [66, 66] { R250 += 1, R208 += 1 };
  s1 -> s1 [85, 65535] { R250 += 1, R208 += 1 };
  s2 -> s1 [0, 65] { R250 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R250 += 1, R207 += 1, R208 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R250 += 1, R208 += 1 };
  s2 -> s4 [66, 66] { R250 += 1, R208 += 1 };
  s2 -> s1 [85, 65535] { R250 += 1, R208 += 1 };
  s3 -> s3 [0, 65535] { R250 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R250 += 1, R208 += 1 };
  s4 -> s4 [0, 65535] { R250 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [85, 65535] { R250 += 1, R208 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R2 = R180 && R3 = R192 && R4 = R250 && R5 - R204 = 1 && R19 = 0 && R20 - R249 = -1 && R155 - R180 = -1 && R156 = R180 && R157 - R180 = -1 && R158 = R180 && R159 = 0 && R160 = 1 && R161 = 0 && R162 = 1 && R163 = 0 && R164 = 1 && R165 = 0 && R166 = 1 && R167 = R204 && R168 - R204 = 1 && R169 = R204 && R170 - R204 = 1 && R171 = 0 && R172 = 1 && R173 = 0 && R174 = 1 && R175 = 0 && R176 = R180 && R177 = 0 && R178 = R180 && R179 = 0 && R181 = 1 && R182 = R192 && R183 = 1 && R184 = R192 && R185 = 1 && R186 = R192 && R187 = 1 && R188 = R192 && R189 = 1 && R190 = R192 && R191 = 1 && R193 = 0 && R194 = R204 && R195 = 0 && R196 = R204 && R197 = 0 && R198 = R204 && R199 = 0 && R200 = R204 && R201 = 0 && R202 = R204 && R203 = 0 && R209 = 0 && R210 - R249 = -1 && R211 = 0 && R212 - R249 = -1 && R213 = 0 && R214 - R249 = -1 && R215 = 0 && R216 - R249 = -1 && R217 = 0 && R218 - R249 = -1 && R219 = 0 && R220 - R249 = -1 && R221 = 0 && R222 - R249 = -1 && R223 = 0 && R224 - R249 = -1 && R225 = 0 && R226 - R249 = -1 && R227 = R249 && R228 = R250 && R229 = R249 && R230 = R250 && R231 = R249 && R232 = R250 && R233 = R249 && R234 = R250 && R235 = R249 && R236 = R250 && R237 = R249 && R238 = R250 && R239 = R249 && R240 = R250 && R241 = R249 && R242 = R250 && R243 = R249 && R244 = R250 && R245 = R249 && R246 = R250 && R247 = R249 && R248 = R250 && R0 != 0 && R1 != 0 && R15 < 1 && R136 < 1 && 0 < R180 && 0 < R192 && -1 < R204 && R249 - R250 < 1 && 0 < R249 && (R6 != 0 || ((R0 != R140 || R139 - R140 = -1 || R140 < 0) && (R0 = R140 || R0 < 1))) && (R6 != 0 || ((R0 != R142 || R141 - R142 = -1 || R142 < 0) && (R0 = R142 || R0 < 1))) && (R8 != 0 || ((R1 != R148 || R147 - R148 = -1 || R148 < 0) && (R1 = R148 || R1 < 1))) && (R8 != 0 || ((R1 != R150 || R149 - R150 = -1 || R150 < 0) && (R1 = R150 || R1 < 1))) && (R143 != 0 || ((R7 != 0 || ((R0 != R144 || R144 = 1 || R144 < 0) && (R0 = R144 || R144 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R144 || R144 = 1 || R144 < 0) && (R144 != 1 || -1 < R0) && (R0 = R144 || R144 = 1))))) && (R145 != 0 || ((R7 != 0 || ((R0 != R146 || R146 = 1 || R146 < 0) && (R0 = R146 || R146 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R146 || R146 = 1 || R146 < 0) && (R146 != 1 || -1 < R0) && (R0 = R146 || R146 = 1))))) && (R151 != 0 || ((R9 != 0 || ((R1 != R152 || R152 = 1 || R152 < 0) && (R1 = R152 || R152 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R152 || R152 = 1 || R152 < 0) && (R152 != 1 || -1 < R1) && (R1 = R152 || R152 = 1))))) && (R153 != 0 || ((R9 != 0 || ((R1 != R154 || R154 = 1 || R154 < 0) && (R1 = R154 || R154 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R154 || R154 = 1 || R154 < 0) && (R154 != 1 || -1 < R1) && (R1 = R154 || R154 = 1))))) && (R6 = 0 || (R0 = R140 && R139 - R140 = -1)) && (R6 = 0 || (R0 = R142 && R141 - R142 = -1)) && (R8 = 0 || (R1 = R148 && R147 - R148 = -1)) && (R8 = 0 || (R1 = R150 && R149 - R150 = -1)) && (R138 = 0 || (R205 = 0 && R206 = 0)) && (R138 = 0 || (R207 = 0 && R208 = 0)) && (R143 = 0 || (R7 = 0 && R0 < 0)) && (R145 = 0 || (R7 = 0 && R0 < 0)) && (R151 = 0 || (R9 = 0 && R1 < 0)) && (R153 = 0 || (R9 = 0 && R1 < 0));
// End of Parikh automata intersection problem
