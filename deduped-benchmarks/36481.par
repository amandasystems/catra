// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R1641, R1642, R1643, R1644, R1645, R1646, R18, R1847, R1848, R1849, R1850, R1851, R1852, R1853, R1854, R1855, R1856, R1857, R1858, R1859, R1860, R1861, R1862, R1863, R1864, R1865, R1866, R1867, R1868, R1869, R1870, R1871, R1872, R1873, R1874, R1875, R1876, R1877, R1878, R1879, R1880, R1881, R1882, R1883, R1884, R1885, R1886, R1887, R1888, R1889, R1890, R1891, R1892, R1893, R1894, R1895, R1896, R1897, R1898, R1899, R19, R1900, R1901, R1902, R1903, R1904, R1905, R1906, R1907, R1908, R1909, R1910, R1911, R1912, R1913, R1914, R1915, R1916, R1917, R1918, R1919, R1920, R1921, R1922, R1923, R1924, R1925, R1926, R1927, R1928, R1929, R1930, R1931, R1932, R1933, R1934, R1935, R1936, R1937, R1938, R1939, R1940, R1941, R1942, R1943, R1944, R1945, R1946, R1947, R1948, R1949, R1950, R1951, R1952, R1953, R1954, R1955, R1956, R1957, R1958, R1959, R1960, R1961, R1962, R1963, R1964, R1965, R1966, R1967, R1968, R1969, R1970, R1971, R1972, R1973, R1974, R1975, R1976, R1977, R1978, R1979, R1980, R1981, R1982, R1983, R1984, R1985, R1986, R1987, R1988, R1989, R1990, R1991, R1992, R1993, R1994, R1995, R1996, R1997, R1998, R1999, R2000, R2001, R2002, R2003, R2004, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R22, R25, R28, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R51, R52, R53, R54, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R7, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P104
automaton P104_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R25 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [108, 108] { R82 += 1 };
  s0 -> s1 [109, 65535] { R82 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1 };
  s2 -> s1 [0, 110] { R82 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R82 += 1 };
  s2 -> s1 [112, 65535] { R82 += 1 };
  s3 -> s1 [0, 98] { R82 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R82 += 1 };
  s3 -> s1 [100, 65535] { R82 += 1 };
  s4 -> s1 [0, 96] { R82 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R82 += 1 };
  s4 -> s1 [98, 65535] { R82 += 1 };
  s5 -> s1 [0, 107] { R82 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R82 += 1 };
  s5 -> s1 [109, 65535] { R82 += 1 };
  s6 -> s1 [0, 103] { R82 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R82 += 1 };
  s6 -> s1 [105, 65535] { R82 += 1 };
  s7 -> s1 [0, 110] { R82 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R82 += 1 };
  s7 -> s1 [112, 65535] { R82 += 1 };
  s8 -> s1 [0, 114] { R82 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R82 += 1 };
  s8 -> s1 [116, 65535] { R82 += 1 };
  s9 -> s1 [0, 115] { R82 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R82 += 1 };
  s9 -> s1 [117, 65535] { R82 += 1 };
  s10 -> s1 [0, 65535] { R82 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1887 += 1, R1888 += 1 };
  s0 -> s1 [0, 65535] { R1888 += 1, R41 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1888 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1890 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R1889 += 1, R1890 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1890 += 1, R104 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R1892 += 1 };
  s0 -> s0 [0, 65535] { R1891 += 1, R1892 += 1 };
  s0 -> s2 [0, 65535] { R1892 += 1, R106 += 1 };
  s0 -> s1 [78, 65535] { R1892 += 1 };
  s1 -> s1 [0, 76] { R1892 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R1892 += 1 };
  s2 -> s1 [0, 76] { R1892 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1892 += 1, R106 += 1 };
  s2 -> s1 [78, 65535] { R1892 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1894 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R1893 += 1, R1894 += 1 };
  s0 -> s2 [0, 65535] { R1894 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R1894 += 1, R110 += 1, R111 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1894 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535] { R1894 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1894 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535] { R1894 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R1896 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R1896 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R1895 += 1, R1896 += 1 };
  s0 -> s3 [108, 108] { R1896 += 1, R116 += 1 };
  s0 -> s1 [109, 65535] { R1896 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R1896 += 1, R116 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R1896 += 1 };
  s2 -> s1 [0, 107] { R1896 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R1896 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R1896 += 1, R116 += 1 };
  s2 -> s1 [109, 65535] { R1896 += 1, R116 += 1 };
  s3 -> s1 [0, 110] { R1896 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1896 += 1 };
  s3 -> s5 [111, 111] { R1896 += 1, R116 += 1 };
  s3 -> s1 [112, 65535] { R1896 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R1896 += 1, R116 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1896 += 1 };
  s5 -> s6 [99, 99] { R1896 += 1, R116 += 1 };
  s5 -> s1 [100, 65535] { R1896 += 1, R116 += 1 };
  s6 -> s1 [0, 96] { R1896 += 1, R116 += 1 };
  s6 -> s6 [0, 65535] { R1896 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R1896 += 1, R116 += 1 };
  s6 -> s1 [98, 65535] { R1896 += 1, R116 += 1 };
  s7 -> s1 [0, 107] { R1896 += 1, R116 += 1 };
  s7 -> s7 [0, 65535] { R1896 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R1896 += 1, R116 += 1 };
  s7 -> s1 [109, 65535] { R1896 += 1, R116 += 1 };
  s8 -> s1 [0, 103] { R1896 += 1, R116 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R1896 += 1 };
  s8 -> s9 [104, 104] { R1896 += 1, R116 += 1 };
  s8 -> s1 [105, 65535] { R1896 += 1, R116 += 1 };
  s9 -> s1 [0, 110] { R1896 += 1, R116 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R1896 += 1 };
  s9 -> s10 [111, 111] { R1896 += 1, R116 += 1 };
  s9 -> s1 [112, 65535] { R1896 += 1, R116 += 1 };
  s10 -> s1 [0, 114] { R1896 += 1, R116 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R1896 += 1 };
  s10 -> s11 [115, 115] { R1896 += 1, R116 += 1 };
  s10 -> s1 [116, 65535] { R1896 += 1, R116 += 1 };
  s11 -> s1 [0, 115] { R1896 += 1, R116 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R1896 += 1 };
  s11 -> s12 [116, 116] { R1896 += 1, R116 += 1 };
  s11 -> s1 [117, 65535] { R1896 += 1, R116 += 1 };
  s12 -> s1 [0, 65535] { R1896 += 1, R116 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R1896 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1898 += 1, R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R1898 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R1897 += 1, R1898 += 1 };
  s1 -> s4 [0, 65535] { R1898 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1898 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1898 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R1898 += 1, R120 += 1, R121 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1898 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R1899 += 1, R1900 += 1 };
  s0 -> s1 [0, 65535] { R1900 += 1, R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R1900 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 65535] { R1900 += 1, R126 += 1, R127 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1900 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [0, 65535] { R1900 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1900 += 1, R127 += 1, R128 += 1 };
  s3 -> s3 [0, 65535] { R1900 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1901 += 1, R1902 += 1 };
  s0 -> s1 [0, 65535] { R1902 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1902 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 76] { R1904 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R1903 += 1, R1904 += 1 };
  s0 -> s2 [0, 65535] { R1904 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [77, 77] { R1904 += 1, R133 += 1, R134 += 1 };
  s0 -> s4 [77, 77] { R1904 += 1, R133 += 1, R134 += 1 };
  s0 -> s1 [78, 65535] { R1904 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [0, 76] { R1904 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [0, 65535] { R1904 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [77, 77] { R1904 += 1, R133 += 1, R134 += 1 };
  s1 -> s4 [77, 77] { R1904 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [78, 65535] { R1904 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [0, 76] { R1904 += 1, R133 += 1, R134 += 1 };
  s2 -> s2 [0, 65535] { R1904 += 1, R132 += 1, R133 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [77, 77] { R1904 += 1, R133 += 1, R134 += 1 };
  s2 -> s4 [77, 77] { R1904 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [78, 65535] { R1904 += 1, R133 += 1, R134 += 1 };
  s3 -> s3 [0, 65535] { R1904 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1904 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1904 += 1, R133 += 1, R134 += 1 };
  s5 -> s5 [0, 65535] { R1904 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1938 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R1937 += 1, R1938 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1938 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1940 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R1939 += 1, R1940 += 1 };
  s0 -> s2 [65, 65] { R1940 += 1, R103 += 1 };
  s0 -> s3 [65, 65] { R1940 += 1, R103 += 1 };
  s0 -> s1 [66, 65535] { R1940 += 1, R103 += 1 };
  s1 -> s1 [0, 64] { R1940 += 1, R103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1940 += 1, R103 += 1 };
  s1 -> s3 [65, 65] { R1940 += 1, R103 += 1 };
  s1 -> s1 [66, 65535] { R1940 += 1, R103 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1940 += 1, R103 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1942 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R1941 += 1, R1942 += 1 };
  s0 -> s2 [65, 65] { R1942 += 1, R105 += 1 };
  s0 -> s3 [65, 65] { R1942 += 1, R105 += 1 };
  s0 -> s1 [66, 65535] { R1942 += 1, R105 += 1 };
  s1 -> s1 [0, 64] { R1942 += 1, R105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1942 += 1, R105 += 1 };
  s1 -> s3 [65, 65] { R1942 += 1, R105 += 1 };
  s1 -> s1 [66, 65535] { R1942 += 1, R105 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R1942 += 1, R105 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1944 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R1943 += 1, R1944 += 1 };
  s0 -> s2 [65, 65] { R1944 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R1944 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R1944 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R1944 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1944 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R1944 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R1944 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1944 += 1, R107 += 1, R108 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1946 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R1945 += 1, R1946 += 1 };
  s0 -> s2 [65, 65] { R1946 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R1946 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R1946 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R1946 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1946 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R1946 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R1946 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1946 += 1, R113 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1948 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R1947 += 1, R1948 += 1 };
  s0 -> s2 [65, 65] { R1948 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R1948 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R1948 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R1948 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1948 += 1, R117 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R1948 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R1948 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R1948 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1950 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R1949 += 1, R1950 += 1 };
  s0 -> s2 [65, 65] { R1950 += 1, R123 += 1, R124 += 1 };
  s0 -> s3 [65, 65] { R1950 += 1, R123 += 1, R124 += 1 };
  s0 -> s1 [66, 65535] { R1950 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 64] { R1950 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1950 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [65, 65] { R1950 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [66, 65535] { R1950 += 1, R123 += 1, R124 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1950 += 1, R123 += 1, R124 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1952 += 1 };
  s0 -> s0 [0, 65535] { R1951 += 1, R1952 += 1 };
  s0 -> s2 [65, 65] { R1952 += 1 };
  s0 -> s3 [65, 65] { R1952 += 1 };
  s0 -> s1 [66, 65535] { R1952 += 1 };
  s1 -> s1 [0, 64] { R1952 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1952 += 1 };
  s1 -> s3 [65, 65] { R1952 += 1 };
  s1 -> s1 [66, 65535] { R1952 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1952 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R1954 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R1953 += 1, R1954 += 1 };
  s0 -> s2 [65, 65] { R1954 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [65, 65] { R1954 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [66, 65535] { R1954 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 64] { R1954 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R1954 += 1, R129 += 1, R130 += 1 };
  s1 -> s3 [65, 65] { R1954 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [66, 65535] { R1954 += 1, R129 += 1, R130 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1954 += 1, R129 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 43] { R1956 += 1 };
  s0 -> s0 [0, 65535] { R1955 += 1, R1956 += 1 };
  s0 -> s1 [45, 45] { R1956 += 1 };
  s0 -> s2 [46, 46] { R1956 += 1 };
  s0 -> s1 [48, 62] { R1956 += 1 };
  s0 -> s3 [65, 65] { R1956 += 1 };
  s0 -> s1 [66, 65535] { R1956 += 1 };
  s1 -> s1 [0, 43] { R1956 += 1 };
  s1 -> s1 [45, 45] { R1956 += 1 };
  s1 -> s2 [46, 46] { R1956 += 1 };
  s1 -> s1 [48, 62] { R1956 += 1 };
  s1 -> s3 [65, 65] { R1956 += 1 };
  s1 -> s1 [66, 65535] { R1956 += 1 };
  s2 -> s1 [0, 43] { R1956 += 1 };
  s2 -> s1 [45, 45] { R1956 += 1 };
  s2 -> s2 [46, 46] { R1956 += 1 };
  s2 -> s1 [48, 62] { R1956 += 1 };
  s2 -> s3 [65, 65] { R1956 += 1 };
  s2 -> s1 [66, 114] { R1956 += 1 };
  s2 -> s8 [115, 115] { R1956 += 1 };
  s2 -> s1 [116, 65535] { R1956 += 1 };
  s3 -> s3 [0, 43] { R1956 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1956 += 1 };
  s3 -> s4 [46, 46] { R1956 += 1 };
  s3 -> s3 [48, 62] { R1956 += 1 };
  s3 -> s3 [65, 65535] { R1956 += 1 };
  s4 -> s3 [0, 43] { R1956 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1956 += 1 };
  s4 -> s4 [46, 46] { R1956 += 1 };
  s4 -> s3 [48, 62] { R1956 += 1 };
  s4 -> s3 [65, 114] { R1956 += 1 };
  s4 -> s5 [115, 115] { R1956 += 1 };
  s4 -> s3 [116, 65535] { R1956 += 1 };
  s5 -> s3 [0, 43] { R1956 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1956 += 1 };
  s5 -> s4 [46, 46] { R1956 += 1 };
  s5 -> s3 [48, 62] { R1956 += 1 };
  s5 -> s3 [65, 110] { R1956 += 1 };
  s5 -> s6 [111, 111] { R1956 += 1 };
  s5 -> s3 [112, 65535] { R1956 += 1 };
  s6 -> s3 [0, 43] { R1956 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1956 += 1 };
  s6 -> s4 [46, 46] { R1956 += 1 };
  s6 -> s3 [48, 62] { R1956 += 1 };
  s6 -> s3 [65, 98] { R1956 += 1 };
  s6 -> s7 [99, 99] { R1956 += 1 };
  s6 -> s3 [100, 65535] { R1956 += 1 };
  s7 -> s3 [0, 43] { R1956 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1956 += 1 };
  s7 -> s4 [46, 46] { R1956 += 1 };
  s7 -> s3 [48, 62] { R1956 += 1 };
  s7 -> s3 [65, 106] { R1956 += 1 };
  s7 -> s3 [108, 65535] { R1956 += 1 };
  s8 -> s1 [0, 43] { R1956 += 1 };
  s8 -> s1 [45, 45] { R1956 += 1 };
  s8 -> s2 [46, 46] { R1956 += 1 };
  s8 -> s1 [48, 62] { R1956 += 1 };
  s8 -> s3 [65, 65] { R1956 += 1 };
  s8 -> s1 [66, 110] { R1956 += 1 };
  s8 -> s9 [111, 111] { R1956 += 1 };
  s8 -> s1 [112, 65535] { R1956 += 1 };
  s9 -> s1 [0, 43] { R1956 += 1 };
  s9 -> s1 [45, 45] { R1956 += 1 };
  s9 -> s2 [46, 46] { R1956 += 1 };
  s9 -> s1 [48, 62] { R1956 += 1 };
  s9 -> s3 [65, 65] { R1956 += 1 };
  s9 -> s1 [66, 98] { R1956 += 1 };
  s9 -> s10 [99, 99] { R1956 += 1 };
  s9 -> s1 [100, 65535] { R1956 += 1 };
  s10 -> s1 [0, 43] { R1956 += 1 };
  s10 -> s1 [45, 45] { R1956 += 1 };
  s10 -> s2 [46, 46] { R1956 += 1 };
  s10 -> s1 [48, 62] { R1956 += 1 };
  s10 -> s3 [65, 65] { R1956 += 1 };
  s10 -> s1 [66, 106] { R1956 += 1 };
  s10 -> s1 [108, 65535] { R1956 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1958 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R1957 += 1, R1958 += 1 };
  s1 -> s1 [0, 65535] { R1958 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 57] { R1960 += 1 };
  s0 -> s2 [0, 65535] { R1960 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1959 += 1, R1960 += 1 };
  s0 -> s3 [58, 58] { R1960 += 1 };
  s0 -> s1 [59, 65535] { R1960 += 1 };
  s1 -> s1 [0, 57] { R1960 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1960 += 1 };
  s1 -> s1 [59, 65535] { R1960 += 1 };
  s2 -> s1 [0, 57] { R1960 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1960 += 1, R18 += 1 };
  s2 -> s3 [58, 58] { R1960 += 1 };
  s2 -> s1 [59, 65535] { R1960 += 1 };
  s3 -> s3 [0, 65535] { R1960 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 42] { R1962 += 1 };
  s0 -> s0 [0, 65535] { R1961 += 1, R1962 += 1 };
  s0 -> s2 [0, 65535] { R1962 += 1, R19 += 1 };
  s0 -> s3 [43, 43] { R1962 += 1 };
  s0 -> s1 [44, 65535] { R1962 += 1 };
  s1 -> s1 [0, 42] { R1962 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R1962 += 1 };
  s1 -> s1 [44, 65535] { R1962 += 1 };
  s2 -> s1 [0, 42] { R1962 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1962 += 1, R19 += 1 };
  s2 -> s3 [43, 43] { R1962 += 1 };
  s2 -> s1 [44, 65535] { R1962 += 1 };
  s3 -> s3 [0, 65535] { R1962 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R1964 += 1 };
  s0 -> s0 [0, 65535] { R1963 += 1, R1964 += 1 };
  s0 -> s2 [0, 65535] { R1964 += 1, R22 += 1 };
  s0 -> s3 [65, 65] { R1964 += 1 };
  s0 -> s1 [66, 65535] { R1964 += 1 };
  s1 -> s1 [0, 64] { R1964 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1964 += 1 };
  s1 -> s1 [66, 65535] { R1964 += 1 };
  s2 -> s1 [0, 64] { R1964 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1964 += 1, R22 += 1 };
  s2 -> s3 [65, 65] { R1964 += 1 };
  s2 -> s1 [66, 65535] { R1964 += 1 };
  s3 -> s3 [0, 65535] { R1964 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 90] { R1966 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R1965 += 1, R1966 += 1 };
  s0 -> s2 [0, 65535] { R1966 += 1, R45 += 1, R46 += 1 };
  s0 -> s3 [91, 91] { R1966 += 1, R46 += 1 };
  s0 -> s1 [92, 65535] { R1966 += 1, R46 += 1 };
  s1 -> s5 [0, 65535] { R1966 += 1 };
  s1 -> s1 [0, 65535] { R1966 += 1, R46 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R1966 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1966 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [91, 91] { R1966 += 1, R46 += 1 };
  s2 -> s1 [92, 65535] { R1966 += 1, R46 += 1 };
  s3 -> s1 [0, 65535] { R1966 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1966 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R1968 += 1, R48 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R1968 += 1, R47 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R1967 += 1, R1968 += 1 };
  s1 -> s1 [0, 65535] { R1968 += 1, R48 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1968 += 1 };
  s2 -> s1 [0, 65535] { R1968 += 1, R48 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1968 += 1, R47 += 1, R48 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1968 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s0 [0, 65535] { R1969 += 1, R1970 += 1 };
  s0 -> s1 [0, 65535] { R1970 += 1, R74 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R1970 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R1970 += 1, R74 += 1, R37 += 1 };
  s1 -> s4 [0, 65535] { R1970 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1970 += 1, R74 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R1970 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1970 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 107] { R1972 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R1972 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R1971 += 1, R1972 += 1 };
  s0 -> s3 [108, 108] { R1972 += 1, R76 += 1 };
  s0 -> s1 [109, 65535] { R1972 += 1, R76 += 1 };
  s1 -> s13 [0, 65535] { R1972 += 1 };
  s1 -> s1 [0, 65535] { R1972 += 1, R76 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R1972 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R1972 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R1972 += 1, R76 += 1 };
  s2 -> s1 [109, 65535] { R1972 += 1, R76 += 1 };
  s3 -> s1 [0, 110] { R1972 += 1, R76 += 1 };
  s3 -> s3 [0, 65535] { R1972 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R1972 += 1, R76 += 1 };
  s3 -> s1 [112, 65535] { R1972 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R1972 += 1, R76 += 1 };
  s5 -> s5 [0, 65535] { R1972 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R1972 += 1, R76 += 1 };
  s5 -> s1 [100, 65535] { R1972 += 1, R76 += 1 };
  s6 -> s1 [0, 96] { R1972 += 1, R76 += 1 };
  s6 -> s6 [0, 65535] { R1972 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R1972 += 1, R76 += 1 };
  s6 -> s1 [98, 65535] { R1972 += 1, R76 += 1 };
  s7 -> s1 [0, 107] { R1972 += 1, R76 += 1 };
  s7 -> s7 [0, 65535] { R1972 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R1972 += 1, R76 += 1 };
  s7 -> s1 [109, 65535] { R1972 += 1, R76 += 1 };
  s8 -> s1 [0, 103] { R1972 += 1, R76 += 1 };
  s8 -> s8 [0, 65535] { R1972 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R1972 += 1, R76 += 1 };
  s8 -> s1 [105, 65535] { R1972 += 1, R76 += 1 };
  s9 -> s1 [0, 110] { R1972 += 1, R76 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R1972 += 1 };
  s9 -> s10 [111, 111] { R1972 += 1, R76 += 1 };
  s9 -> s1 [112, 65535] { R1972 += 1, R76 += 1 };
  s10 -> s1 [0, 114] { R1972 += 1, R76 += 1 };
  s10 -> s10 [0, 65535] { R1972 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R1972 += 1, R76 += 1 };
  s10 -> s1 [116, 65535] { R1972 += 1, R76 += 1 };
  s11 -> s1 [0, 115] { R1972 += 1, R76 += 1 };
  s11 -> s11 [0, 65535] { R1972 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R1972 += 1, R76 += 1 };
  s11 -> s1 [117, 65535] { R1972 += 1, R76 += 1 };
  s12 -> s1 [0, 65535] { R1972 += 1, R76 += 1 };
  s13 -> s13 [0, 65535] { R1972 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R1974 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R1974 += 1, R78 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R1973 += 1, R1974 += 1 };
  s1 -> s1 [0, 65535] { R1974 += 1, R77 += 1, R78 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1974 += 1, R78 += 1, R52 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1974 += 1, R78 += 1, R52 += 1 };
  s2 -> s4 [0, 65535] { R1974 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1974 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R1976 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R1975 += 1, R1976 += 1 };
  s0 -> s2 [0, 65535] { R1976 += 1, R96 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R1976 += 1, R95 += 1, R96 += 1 };
  s1 -> s2 [0, 65535] { R1976 += 1, R96 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1976 += 1 };
  s2 -> s2 [0, 65535] { R1976 += 1, R96 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1976 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R1977 += 1, R1978 += 1 };
  s0 -> s1 [0, 65535] { R1978 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1978 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 42] { R1980 += 1, R98 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R1980 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R1979 += 1, R1980 += 1 };
  s0 -> s3 [43, 43] { R1980 += 1, R98 += 1, R51 += 1 };
  s0 -> s4 [43, 43] { R1980 += 1, R98 += 1, R51 += 1 };
  s0 -> s1 [44, 65535] { R1980 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [0, 42] { R1980 += 1, R98 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1980 += 1 };
  s1 -> s3 [43, 43] { R1980 += 1, R98 += 1, R51 += 1 };
  s1 -> s4 [43, 43] { R1980 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [44, 65535] { R1980 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [0, 42] { R1980 += 1, R98 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R1980 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R1980 += 1, R98 += 1, R51 += 1 };
  s2 -> s4 [43, 43] { R1980 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [44, 65535] { R1980 += 1, R98 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R1980 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1980 += 1, R98 += 1, R51 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1980 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1980 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R1982 += 1, R1854 += 1 };
  s0 -> s2 [0, 65535] { R1982 += 1, R1853 += 1, R1854 += 1 };
  s0 -> s0 [0, 65535] { R1981 += 1, R1982 += 1 };
  s0 -> s1 [66, 65535] { R1982 += 1, R1854 += 1 };
  s1 -> s1 [0, 64] { R1982 += 1, R1854 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1982 += 1 };
  s1 -> s1 [66, 65535] { R1982 += 1, R1854 += 1 };
  s2 -> s1 [0, 64] { R1982 += 1, R1854 += 1 };
  s2 -> s2 [0, 65535] { R1982 += 1, R1853 += 1, R1854 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1982 += 1, R1854 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_42 {
  init s0;
  s0 -> s0 [0, 65535] { R1983 += 1, R1984 += 1 };
  s0 -> s1 [0, 65535] { R1984 += 1, R1855 += 1, R1856 += 1 };
  s0 -> s2 [0, 65535] { R1984 += 1, R1856 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1984 += 1, R1855 += 1, R1856 += 1 };
  s1 -> s2 [0, 65535] { R1984 += 1, R1856 += 1, R38 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1984 += 1 };
  s2 -> s2 [0, 65535] { R1984 += 1, R1856 += 1, R38 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1984 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65] { R1986 += 1, R1858 += 1 };
  s0 -> s2 [0, 65535] { R1986 += 1, R1857 += 1, R1858 += 1 };
  s0 -> s0 [0, 65535] { R1985 += 1, R1986 += 1 };
  s0 -> s1 [80, 65535] { R1986 += 1, R1858 += 1 };
  s1 -> s1 [0, 65] { R1986 += 1, R1858 += 1 };
  s1 -> s1 [0, 65535] { R1986 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R1986 += 1, R1858 += 1 };
  s2 -> s1 [0, 65] { R1986 += 1, R1858 += 1 };
  s2 -> s2 [0, 65535] { R1986 += 1, R1857 += 1, R1858 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R1986 += 1, R1858 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R1988 += 1, R1859 += 1, R1860 += 1 };
  s0 -> s0 [0, 65535] { R1987 += 1, R1988 += 1 };
  s0 -> s2 [0, 65535] { R1988 += 1, R1860 += 1, R598 += 1 };
  s1 -> s1 [0, 65535] { R1988 += 1, R1859 += 1, R1860 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1988 += 1, R1860 += 1, R598 += 1 };
  s2 -> s3 [0, 65535] { R1988 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1988 += 1, R1860 += 1, R598 += 1 };
  s3 -> s3 [0, 65535] { R1988 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 81] { R1990 += 1, R1862 += 1 };
  s0 -> s2 [0, 65535] { R1990 += 1, R1861 += 1, R1862 += 1 };
  s0 -> s3 [0, 65535] { R1990 += 1, R1862 += 1, R600 += 1 };
  s0 -> s0 [0, 65535] { R1989 += 1, R1990 += 1 };
  s0 -> s1 [83, 65535] { R1990 += 1, R1862 += 1 };
  s1 -> s1 [0, 81] { R1990 += 1, R1862 += 1 };
  s1 -> s1 [0, 65535] { R1990 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [83, 65535] { R1990 += 1, R1862 += 1 };
  s2 -> s1 [0, 81] { R1990 += 1, R1862 += 1 };
  s2 -> s2 [0, 65535] { R1990 += 1, R1861 += 1, R1862 += 1 };
  s2 -> s3 [0, 65535] { R1990 += 1, R1862 += 1, R600 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [83, 65535] { R1990 += 1, R1862 += 1 };
  s3 -> s1 [0, 81] { R1990 += 1, R1862 += 1 };
  s3 -> s4 [0, 65535] { R1990 += 1 };
  s3 -> s3 [0, 65535] { R1990 += 1, R1862 += 1, R600 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [83, 65535] { R1990 += 1, R1862 += 1 };
  s4 -> s4 [0, 65535] { R1990 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 79] { R1992 += 1, R1864 += 1 };
  s0 -> s2 [0, 65535] { R1992 += 1, R1863 += 1, R1864 += 1 };
  s0 -> s0 [0, 65535] { R1991 += 1, R1992 += 1 };
  s0 -> s3 [0, 65535] { R1992 += 1, R1864 += 1, R602 += 1 };
  s0 -> s1 [81, 65535] { R1992 += 1, R1864 += 1 };
  s1 -> s1 [0, 79] { R1992 += 1, R1864 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1992 += 1 };
  s1 -> s1 [81, 65535] { R1992 += 1, R1864 += 1 };
  s2 -> s1 [0, 79] { R1992 += 1, R1864 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1992 += 1, R1863 += 1, R1864 += 1 };
  s2 -> s3 [0, 65535] { R1992 += 1, R1864 += 1, R602 += 1 };
  s2 -> s1 [81, 65535] { R1992 += 1, R1864 += 1 };
  s3 -> s1 [0, 79] { R1992 += 1, R1864 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1992 += 1 };
  s3 -> s3 [0, 65535] { R1992 += 1, R1864 += 1, R602 += 1 };
  s3 -> s1 [81, 65535] { R1992 += 1, R1864 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1992 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R1993 += 1, R1994 += 1 };
  s0 -> s1 [0, 65535] { R1994 += 1, R1865 += 1, R1866 += 1 };
  s0 -> s2 [0, 65535] { R1994 += 1, R1866 += 1, R606 += 1, R607 += 1 };
  s0 -> s3 [0, 65535] { R1994 += 1, R1866 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R1994 += 1, R1865 += 1, R1866 += 1 };
  s1 -> s2 [0, 65535] { R1994 += 1, R1866 += 1, R606 += 1, R607 += 1 };
  s1 -> s3 [0, 65535] { R1994 += 1, R1866 += 1, R607 += 1, R608 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1994 += 1, R1866 += 1, R606 += 1, R607 += 1 };
  s2 -> s3 [0, 65535] { R1994 += 1, R1866 += 1, R607 += 1, R608 += 1 };
  s2 -> s5 [0, 65535] { R1994 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1994 += 1, R1866 += 1 };
  s3 -> s3 [0, 65535] { R1994 += 1, R1866 += 1, R607 += 1, R608 += 1 };
  s3 -> s5 [0, 65535] { R1994 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1994 += 1, R1866 += 1 };
  s4 -> s5 [0, 65535] { R1994 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1994 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R1996 += 1, R1868 += 1 };
  s0 -> s2 [0, 65535] { R1996 += 1, R1867 += 1, R1868 += 1 };
  s0 -> s0 [0, 65535] { R1995 += 1, R1996 += 1 };
  s1 -> s1 [0, 65535] { R1996 += 1, R1868 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1996 += 1 };
  s2 -> s1 [0, 65535] { R1996 += 1, R1868 += 1 };
  s2 -> s2 [0, 65535] { R1996 += 1, R1867 += 1, R1868 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1996 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 79] { R1998 += 1, R1870 += 1, R612 += 1 };
  s0 -> s2 [0, 65535] { R1998 += 1, R1869 += 1, R1870 += 1 };
  s0 -> s3 [0, 65535] { R1998 += 1, R1870 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R1997 += 1, R1998 += 1 };
  s0 -> s1 [81, 65535] { R1998 += 1, R1870 += 1, R612 += 1 };
  s1 -> s1 [0, 79] { R1998 += 1, R1870 += 1, R612 += 1 };
  s1 -> s1 [0, 65535] { R1998 += 1, R1870 += 1 };
  s1 -> s4 [0, 65535] { R1998 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R1998 += 1, R1870 += 1, R612 += 1 };
  s2 -> s1 [0, 79] { R1998 += 1, R1870 += 1, R612 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1998 += 1, R1869 += 1, R1870 += 1 };
  s2 -> s3 [0, 65535] { R1998 += 1, R1870 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [81, 65535] { R1998 += 1, R1870 += 1, R612 += 1 };
  s3 -> s1 [0, 79] { R1998 += 1, R1870 += 1, R612 += 1 };
  s3 -> s4 [0, 65535] { R1998 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1998 += 1, R1870 += 1, R611 += 1, R612 += 1 };
  s3 -> s1 [81, 65535] { R1998 += 1, R1870 += 1, R612 += 1 };
  s4 -> s4 [0, 65535] { R1998 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R2000 += 1, R1871 += 1, R1872 += 1 };
  s0 -> s0 [0, 65535] { R1999 += 1, R2000 += 1 };
  s0 -> s2 [0, 65535] { R2000 += 1, R1872 += 1, R616 += 1, R617 += 1 };
  s0 -> s3 [0, 65535] { R2000 += 1, R1872 += 1, R617 += 1, R618 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2000 += 1, R1871 += 1, R1872 += 1 };
  s1 -> s2 [0, 65535] { R2000 += 1, R1872 += 1, R616 += 1, R617 += 1 };
  s1 -> s3 [0, 65535] { R2000 += 1, R1872 += 1, R617 += 1, R618 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2000 += 1, R1872 += 1, R616 += 1, R617 += 1 };
  s2 -> s6 [0, 65535] { R2000 += 1 };
  s2 -> s3 [0, 65535] { R2000 += 1, R1872 += 1, R617 += 1, R618 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2000 += 1, R1872 += 1 };
  s3 -> s6 [0, 65535] { R2000 += 1 };
  s3 -> s3 [0, 65535] { R2000 += 1, R1872 += 1, R617 += 1, R618 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2000 += 1, R1872 += 1 };
  s5 -> s6 [0, 65535] { R2000 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2000 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R2002 += 1, R1873 += 1, R1874 += 1 };
  s0 -> s3 [0, 65535] { R2002 += 1, R1874 += 1, R621 += 1, R622 += 1 };
  s0 -> s0 [0, 65535] { R2001 += 1, R2002 += 1 };
  s0 -> s1 [91, 107] { R2002 += 1, R1874 += 1, R622 += 1 };
  s0 -> s4 [108, 108] { R2002 += 1, R1874 += 1, R622 += 1 };
  s0 -> s1 [109, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s1 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s1 -> s1 [0, 65535] { R2002 += 1, R1874 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2002 += 1 };
  s1 -> s1 [91, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s2 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s2 -> s2 [0, 65535] { R2002 += 1, R1873 += 1, R1874 += 1 };
  s2 -> s3 [0, 65535] { R2002 += 1, R1874 += 1, R621 += 1, R622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 107] { R2002 += 1, R1874 += 1, R622 += 1 };
  s2 -> s4 [108, 108] { R2002 += 1, R1874 += 1, R622 += 1 };
  s2 -> s1 [109, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s3 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s3 -> s3 [0, 65535] { R2002 += 1, R1874 += 1, R621 += 1, R622 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2002 += 1 };
  s3 -> s1 [91, 107] { R2002 += 1, R1874 += 1, R622 += 1 };
  s3 -> s4 [108, 108] { R2002 += 1, R1874 += 1, R622 += 1 };
  s3 -> s1 [109, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s4 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s4 -> s4 [0, 65535] { R2002 += 1, R1874 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2002 += 1 };
  s4 -> s1 [91, 110] { R2002 += 1, R1874 += 1, R622 += 1 };
  s4 -> s7 [111, 111] { R2002 += 1, R1874 += 1, R622 += 1 };
  s4 -> s1 [112, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2002 += 1 };
  s7 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2002 += 1 };
  s7 -> s7 [0, 65535] { R2002 += 1, R1874 += 1 };
  s7 -> s1 [91, 98] { R2002 += 1, R1874 += 1, R622 += 1 };
  s7 -> s8 [99, 99] { R2002 += 1, R1874 += 1, R622 += 1 };
  s7 -> s1 [100, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s8 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s8 -> s8 [0, 65535] { R2002 += 1, R1874 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2002 += 1 };
  s8 -> s1 [91, 96] { R2002 += 1, R1874 += 1, R622 += 1 };
  s8 -> s9 [97, 97] { R2002 += 1, R1874 += 1, R622 += 1 };
  s8 -> s1 [98, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s9 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s9 -> s9 [0, 65535] { R2002 += 1, R1874 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2002 += 1 };
  s9 -> s1 [91, 107] { R2002 += 1, R1874 += 1, R622 += 1 };
  s9 -> s10 [108, 108] { R2002 += 1, R1874 += 1, R622 += 1 };
  s9 -> s1 [109, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s10 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R2002 += 1 };
  s10 -> s10 [0, 65535] { R2002 += 1, R1874 += 1 };
  s10 -> s1 [91, 103] { R2002 += 1, R1874 += 1, R622 += 1 };
  s10 -> s11 [104, 104] { R2002 += 1, R1874 += 1, R622 += 1 };
  s10 -> s1 [105, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s11 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s11 -> s11 [0, 65535] { R2002 += 1, R1874 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2002 += 1 };
  s11 -> s1 [91, 110] { R2002 += 1, R1874 += 1, R622 += 1 };
  s11 -> s12 [111, 111] { R2002 += 1, R1874 += 1, R622 += 1 };
  s11 -> s1 [112, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s12 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s12 -> s12 [0, 65535] { R2002 += 1, R1874 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R2002 += 1 };
  s12 -> s1 [91, 114] { R2002 += 1, R1874 += 1, R622 += 1 };
  s12 -> s13 [115, 115] { R2002 += 1, R1874 += 1, R622 += 1 };
  s12 -> s1 [116, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s13 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s13 -> s13 [0, 65535] { R2002 += 1, R1874 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R2002 += 1 };
  s13 -> s1 [91, 115] { R2002 += 1, R1874 += 1, R622 += 1 };
  s13 -> s14 [116, 116] { R2002 += 1, R1874 += 1, R622 += 1 };
  s13 -> s1 [117, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  s14 -> s1 [0, 80] { R2002 += 1, R1874 += 1, R622 += 1 };
  s14 -> s1 [91, 65535] { R2002 += 1, R1874 += 1, R622 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R2004 += 1, R1875 += 1, R1876 += 1 };
  s0 -> s0 [0, 65535] { R2003 += 1, R2004 += 1 };
  s0 -> s2 [0, 65535] { R2004 += 1, R1876 += 1, R627 += 1, R628 += 1 };
  s0 -> s3 [0, 65535] { R2004 += 1, R1876 += 1, R626 += 1, R627 += 1 };
  s1 -> s1 [0, 65535] { R2004 += 1, R1875 += 1, R1876 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R2004 += 1, R1876 += 1, R627 += 1, R628 += 1 };
  s1 -> s3 [0, 65535] { R2004 += 1, R1876 += 1, R626 += 1, R627 += 1 };
  s2 -> s6 [0, 65535] { R2004 += 1, R1876 += 1 };
  s2 -> s4 [0, 65535] { R2004 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2004 += 1, R1876 += 1, R627 += 1, R628 += 1 };
  s3 -> s4 [0, 65535] { R2004 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2004 += 1, R1876 += 1, R627 += 1, R628 += 1 };
  s3 -> s3 [0, 65535] { R2004 += 1, R1876 += 1, R626 += 1, R627 += 1 };
  s4 -> s4 [0, 65535] { R2004 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2004 += 1, R1876 += 1 };
  s6 -> s4 [0, 65535] { R2004 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s0 [0, 65535] { R2005 += 1, R2006 += 1 };
  s0 -> s1 [0, 65535] { R2006 += 1, R1878 += 1, R632 += 1, R633 += 1 };
  s0 -> s2 [0, 65535] { R2006 += 1, R1877 += 1, R1878 += 1 };
  s0 -> s3 [0, 65535] { R2006 += 1, R1878 += 1, R633 += 1, R634 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2006 += 1, R1878 += 1, R632 += 1, R633 += 1 };
  s1 -> s6 [0, 65535] { R2006 += 1 };
  s1 -> s3 [0, 65535] { R2006 += 1, R1878 += 1, R633 += 1, R634 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2006 += 1, R1878 += 1, R632 += 1, R633 += 1 };
  s2 -> s2 [0, 65535] { R2006 += 1, R1877 += 1, R1878 += 1 };
  s2 -> s3 [0, 65535] { R2006 += 1, R1878 += 1, R633 += 1, R634 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2006 += 1, R1878 += 1 };
  s3 -> s6 [0, 65535] { R2006 += 1 };
  s3 -> s3 [0, 65535] { R2006 += 1, R1878 += 1, R633 += 1, R634 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2006 += 1, R1878 += 1 };
  s5 -> s6 [0, 65535] { R2006 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2006 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R2007 += 1, R2008 += 1 };
  s0 -> s1 [0, 65535] { R2008 += 1, R1879 += 1, R1880 += 1 };
  s0 -> s2 [0, 65535] { R2008 += 1, R1880 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2008 += 1, R1879 += 1, R1880 += 1 };
  s1 -> s2 [0, 65535] { R2008 += 1, R1880 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2008 += 1 };
  s2 -> s2 [0, 65535] { R2008 += 1, R1880 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2008 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 65535] { R2010 += 1, R1882 += 1, R1645 += 1, R1646 += 1 };
  s0 -> s0 [0, 65535] { R2009 += 1, R2010 += 1 };
  s0 -> s2 [0, 65535] { R2010 += 1, R1882 += 1 };
  s0 -> s3 [0, 65535] { R2010 += 1, R1881 += 1, R1882 += 1 };
  s1 -> s1 [0, 65535] { R2010 += 1, R1882 += 1, R1645 += 1, R1646 += 1 };
  s1 -> s5 [0, 65535] { R2010 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2010 += 1, R1882 += 1 };
  s2 -> s5 [0, 65535] { R2010 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2010 += 1, R1882 += 1 };
  s3 -> s1 [0, 65535] { R2010 += 1, R1882 += 1, R1645 += 1, R1646 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2010 += 1, R1882 += 1 };
  s3 -> s3 [0, 65535] { R2010 += 1, R1881 += 1, R1882 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2010 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 65535] { R2012 += 1, R1884 += 1 };
  s0 -> s2 [0, 65535] { R2012 += 1, R1883 += 1, R1884 += 1 };
  s0 -> s0 [0, 65535] { R2011 += 1, R2012 += 1 };
  s1 -> s1 [0, 65535] { R2012 += 1, R1884 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2012 += 1 };
  s2 -> s1 [0, 65535] { R2012 += 1, R1884 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2012 += 1, R1883 += 1, R1884 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2012 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 79] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s0 -> s2 [0, 65535] { R2014 += 1, R1885 += 1, R1886 += 1 };
  s0 -> s1 [0, 65535] { R2014 += 1, R1886 += 1 };
  s0 -> s0 [0, 65535] { R2013 += 1, R2014 += 1 };
  s0 -> s3 [80, 80] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s0 -> s4 [80, 80] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s0 -> s1 [81, 65535] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s1 -> s1 [0, 79] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s1 -> s5 [0, 65535] { R2014 += 1 };
  s1 -> s1 [0, 65535] { R2014 += 1, R1886 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [80, 80] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s1 -> s4 [80, 80] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s1 -> s1 [81, 65535] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s2 -> s1 [0, 79] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s2 -> s2 [0, 65535] { R2014 += 1, R1885 += 1, R1886 += 1 };
  s2 -> s1 [0, 65535] { R2014 += 1, R1886 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [80, 80] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s2 -> s4 [80, 80] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s2 -> s1 [81, 65535] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s3 -> s3 [0, 65535] { R2014 += 1, R1886 += 1, R1851 += 1, R1852 += 1 };
  s3 -> s7 [0, 65535] { R2014 += 1, R1886 += 1 };
  s3 -> s5 [0, 65535] { R2014 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2014 += 1, R1886 += 1 };
  s4 -> s5 [0, 65535] { R2014 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2014 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2014 += 1, R1886 += 1 };
  s7 -> s5 [0, 65535] { R2014 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s0 [0, 65535] { R2015 += 1, R2016 += 1 };
  s0 -> s1 [0, 65535] { R2016 += 1, R1906 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R2016 += 1, R1905 += 1, R1906 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2016 += 1, R1906 += 1, R40 += 1 };
  s1 -> s4 [0, 65535] { R2016 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2016 += 1, R1906 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R2016 += 1, R1905 += 1, R1906 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2016 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R2018 += 1, R1908 += 1 };
  s0 -> s0 [0, 65535] { R2017 += 1, R2018 += 1 };
  s0 -> s2 [0, 65535] { R2018 += 1, R1907 += 1, R1908 += 1 };
  s0 -> s3 [65, 65] { R2018 += 1, R1908 += 1 };
  s0 -> s4 [65, 65] { R2018 += 1, R1908 += 1 };
  s0 -> s5 [80, 80] { R2018 += 1, R1908 += 1 };
  s0 -> s1 [81, 65535] { R2018 += 1, R1908 += 1 };
  s1 -> s1 [0, 64] { R2018 += 1, R1908 += 1 };
  s1 -> s3 [65, 65] { R2018 += 1, R1908 += 1 };
  s1 -> s4 [65, 65] { R2018 += 1, R1908 += 1 };
  s1 -> s5 [80, 80] { R2018 += 1, R1908 += 1 };
  s1 -> s1 [81, 65535] { R2018 += 1, R1908 += 1 };
  s2 -> s1 [0, 64] { R2018 += 1, R1908 += 1 };
  s2 -> s2 [0, 65535] { R2018 += 1, R1907 += 1, R1908 += 1 };
  s2 -> s3 [65, 65] { R2018 += 1, R1908 += 1 };
  s2 -> s4 [65, 65] { R2018 += 1, R1908 += 1 };
  s2 -> s5 [80, 80] { R2018 += 1, R1908 += 1 };
  s2 -> s1 [81, 65535] { R2018 += 1, R1908 += 1 };
  s4 -> s4 [0, 65] { R2018 += 1, R1908 += 1 };
  s4 -> s8 [80, 80] { R2018 += 1, R1908 += 1 };
  s4 -> s4 [81, 65535] { R2018 += 1, R1908 += 1 };
  s5 -> s5 [0, 64] { R2018 += 1, R1908 += 1 };
  s5 -> s5 [0, 65535] { R2018 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2018 += 1, R1908 += 1 };
  s5 -> s8 [65, 65] { R2018 += 1, R1908 += 1 };
  s5 -> s5 [80, 65535] { R2018 += 1, R1908 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2018 += 1 };
  s8 -> s8 [0, 65] { R2018 += 1, R1908 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2018 += 1 };
  s8 -> s8 [80, 65535] { R2018 += 1, R1908 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 64] { R2020 += 1, R1910 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R2020 += 1, R1909 += 1, R1910 += 1 };
  s0 -> s0 [0, 65535] { R2019 += 1, R2020 += 1 };
  s0 -> s3 [65, 65] { R2020 += 1, R1910 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R2020 += 1, R1910 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R2020 += 1, R1910 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R2020 += 1, R1910 += 1, R597 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2020 += 1 };
  s1 -> s3 [65, 65] { R2020 += 1, R1910 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R2020 += 1, R1910 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R2020 += 1, R1910 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R2020 += 1, R1910 += 1, R597 += 1 };
  s2 -> s2 [0, 65535] { R2020 += 1, R1909 += 1, R1910 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2020 += 1, R1910 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R2020 += 1, R1910 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R2020 += 1, R1910 += 1, R597 += 1 };
  s3 -> s3 [0, 65535] { R2020 += 1, R1910 += 1, R597 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2020 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2020 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 64] { R2022 += 1, R1912 += 1, R599 += 1 };
  s0 -> s0 [0, 65535] { R2021 += 1, R2022 += 1 };
  s0 -> s2 [0, 65535] { R2022 += 1, R1911 += 1, R1912 += 1 };
  s0 -> s3 [65, 65] { R2022 += 1, R1912 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R2022 += 1, R1912 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R2022 += 1, R1912 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R2022 += 1, R1912 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R2022 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2022 += 1, R1912 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R2022 += 1, R1912 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R2022 += 1, R1912 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R2022 += 1, R1912 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R2022 += 1, R1911 += 1, R1912 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2022 += 1, R1912 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R2022 += 1, R1912 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R2022 += 1, R1912 += 1, R599 += 1 };
  s3 -> s3 [0, 65535] { R2022 += 1, R1912 += 1, R599 += 1 };
  s3 -> s6 [0, 65535] { R2022 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2022 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2022 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 64] { R2024 += 1, R1914 += 1, R601 += 1 };
  s0 -> s2 [0, 65535] { R2024 += 1, R1913 += 1, R1914 += 1 };
  s0 -> s0 [0, 65535] { R2023 += 1, R2024 += 1 };
  s0 -> s3 [65, 65] { R2024 += 1, R1914 += 1, R601 += 1 };
  s0 -> s4 [65, 65] { R2024 += 1, R1914 += 1, R601 += 1 };
  s0 -> s1 [66, 65535] { R2024 += 1, R1914 += 1, R601 += 1 };
  s1 -> s1 [0, 64] { R2024 += 1, R1914 += 1, R601 += 1 };
  s1 -> s1 [0, 65535] { R2024 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2024 += 1, R1914 += 1, R601 += 1 };
  s1 -> s4 [65, 65] { R2024 += 1, R1914 += 1, R601 += 1 };
  s1 -> s1 [66, 65535] { R2024 += 1, R1914 += 1, R601 += 1 };
  s2 -> s1 [0, 64] { R2024 += 1, R1914 += 1, R601 += 1 };
  s2 -> s2 [0, 65535] { R2024 += 1, R1913 += 1, R1914 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2024 += 1, R1914 += 1, R601 += 1 };
  s2 -> s4 [65, 65] { R2024 += 1, R1914 += 1, R601 += 1 };
  s2 -> s1 [66, 65535] { R2024 += 1, R1914 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R2024 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2024 += 1, R1914 += 1, R601 += 1 };
  s4 -> s5 [0, 65535] { R2024 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2024 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 64] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R2025 += 1, R2026 += 1 };
  s0 -> s2 [0, 65535] { R2026 += 1, R1915 += 1, R1916 += 1 };
  s0 -> s3 [65, 65] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s0 -> s4 [65, 65] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s0 -> s1 [66, 65535] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 64] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 65535] { R2026 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s1 -> s4 [65, 65] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [66, 65535] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [0, 64] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2026 += 1, R1915 += 1, R1916 += 1 };
  s2 -> s3 [65, 65] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [65, 65] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [66, 65535] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2026 += 1 };
  s3 -> s3 [0, 65535] { R2026 += 1, R1916 += 1, R603 += 1, R604 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2026 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2026 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R2028 += 1, R1918 += 1 };
  s0 -> s2 [0, 65535] { R2028 += 1, R1917 += 1, R1918 += 1 };
  s0 -> s0 [0, 65535] { R2027 += 1, R2028 += 1 };
  s0 -> s3 [65, 65] { R2028 += 1, R1918 += 1 };
  s0 -> s4 [65, 65] { R2028 += 1, R1918 += 1 };
  s0 -> s1 [66, 65535] { R2028 += 1, R1918 += 1 };
  s1 -> s1 [0, 64] { R2028 += 1, R1918 += 1 };
  s1 -> s1 [0, 65535] { R2028 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2028 += 1, R1918 += 1 };
  s1 -> s4 [65, 65] { R2028 += 1, R1918 += 1 };
  s1 -> s1 [66, 65535] { R2028 += 1, R1918 += 1 };
  s2 -> s1 [0, 64] { R2028 += 1, R1918 += 1 };
  s2 -> s2 [0, 65535] { R2028 += 1, R1917 += 1, R1918 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2028 += 1, R1918 += 1 };
  s2 -> s4 [65, 65] { R2028 += 1, R1918 += 1 };
  s2 -> s1 [66, 65535] { R2028 += 1, R1918 += 1 };
  s3 -> s6 [0, 65535] { R2028 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2028 += 1, R1918 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2028 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2028 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R2029 += 1, R2030 += 1 };
  s0 -> s2 [0, 65535] { R2030 += 1, R1919 += 1, R1920 += 1 };
  s0 -> s3 [65, 65] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2030 += 1 };
  s1 -> s3 [65, 65] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2030 += 1, R1919 += 1, R1920 += 1 };
  s2 -> s3 [65, 65] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s3 -> s3 [0, 65535] { R2030 += 1, R1920 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2030 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2030 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s0 -> s2 [0, 65535] { R2032 += 1, R1921 += 1, R1922 += 1 };
  s0 -> s0 [0, 65535] { R2031 += 1, R2032 += 1 };
  s0 -> s3 [65, 65] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s0 -> s4 [65, 65] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s0 -> s1 [66, 65535] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [0, 64] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [0, 65535] { R2032 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s1 -> s4 [65, 65] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [66, 65535] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [0, 64] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2032 += 1, R1921 += 1, R1922 += 1 };
  s2 -> s3 [65, 65] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [65, 65] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [66, 65535] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2032 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2032 += 1 };
  s4 -> s4 [0, 65535] { R2032 += 1, R1922 += 1, R613 += 1, R614 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2032 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s0 -> s2 [0, 65535] { R2034 += 1, R1923 += 1, R1924 += 1 };
  s0 -> s0 [0, 65535] { R2033 += 1, R2034 += 1 };
  s0 -> s3 [65, 65] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s0 -> s4 [65, 65] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s0 -> s1 [66, 65535] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 64] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2034 += 1 };
  s1 -> s3 [65, 65] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s1 -> s4 [65, 65] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [66, 65535] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [0, 64] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R2034 += 1, R1923 += 1, R1924 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s2 -> s4 [65, 65] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [66, 65535] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s3 -> s3 [0, 65535] { R2034 += 1, R1924 += 1, R619 += 1, R620 += 1 };
  s3 -> s6 [0, 65535] { R2034 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2034 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2034 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R2036 += 1, R1925 += 1, R1926 += 1 };
  s0 -> s0 [0, 65535] { R2035 += 1, R2036 += 1 };
  s0 -> s3 [65, 65] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s0 -> s4 [65, 65] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s0 -> s1 [66, 65535] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [0, 64] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2036 += 1 };
  s1 -> s3 [65, 65] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s1 -> s4 [65, 65] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [66, 65535] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [0, 64] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s2 -> s2 [0, 65535] { R2036 += 1, R1925 += 1, R1926 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s2 -> s4 [65, 65] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [66, 65535] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s3 -> s3 [0, 65535] { R2036 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2036 += 1 };
  s4 -> s4 [0, 65535] { R2036 += 1, R1926 += 1, R623 += 1, R624 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2036 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s0 -> s0 [0, 65535] { R2037 += 1, R2038 += 1 };
  s0 -> s2 [0, 65535] { R2038 += 1, R1927 += 1, R1928 += 1 };
  s0 -> s3 [65, 65] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s0 -> s4 [65, 65] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s0 -> s1 [66, 65535] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s1 -> s1 [0, 64] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2038 += 1 };
  s1 -> s3 [65, 65] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s1 -> s4 [65, 65] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s1 -> s1 [66, 65535] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s2 -> s1 [0, 64] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2038 += 1, R1927 += 1, R1928 += 1 };
  s2 -> s3 [65, 65] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s2 -> s4 [65, 65] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s2 -> s1 [66, 65535] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2038 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2038 += 1, R1928 += 1, R629 += 1, R630 += 1 };
  s4 -> s6 [0, 65535] { R2038 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R2040 += 1, R1930 += 1 };
  s0 -> s2 [0, 65535] { R2040 += 1, R1929 += 1, R1930 += 1 };
  s0 -> s0 [0, 65535] { R2039 += 1, R2040 += 1 };
  s0 -> s3 [65, 65] { R2040 += 1, R1930 += 1 };
  s0 -> s4 [65, 65] { R2040 += 1, R1930 += 1 };
  s0 -> s1 [66, 65535] { R2040 += 1, R1930 += 1 };
  s1 -> s1 [0, 64] { R2040 += 1, R1930 += 1 };
  s1 -> s1 [0, 65535] { R2040 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2040 += 1, R1930 += 1 };
  s1 -> s4 [65, 65] { R2040 += 1, R1930 += 1 };
  s1 -> s1 [66, 65535] { R2040 += 1, R1930 += 1 };
  s2 -> s1 [0, 64] { R2040 += 1, R1930 += 1 };
  s2 -> s2 [0, 65535] { R2040 += 1, R1929 += 1, R1930 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2040 += 1, R1930 += 1 };
  s2 -> s4 [65, 65] { R2040 += 1, R1930 += 1 };
  s2 -> s1 [66, 65535] { R2040 += 1, R1930 += 1 };
  s3 -> s3 [0, 65535] { R2040 += 1, R1930 += 1 };
  s3 -> s6 [0, 65535] { R2040 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2040 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2040 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s0 -> s2 [0, 64] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s0 -> s3 [0, 65535] { R2042 += 1, R1931 += 1, R1932 += 1 };
  s0 -> s0 [0, 65535] { R2041 += 1, R2042 += 1 };
  s0 -> s4 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s0 -> s5 [65, 65] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s0 -> s6 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s0 -> s7 [65, 65] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s0 -> s1 [66, 65535] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s0 -> s2 [66, 65535] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s1 -> s1 [0, 64] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s1 -> s1 [0, 65535] { R2042 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s1 -> s6 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s1 -> s1 [66, 65535] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s2 -> s1 [0, 64] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s2 -> s2 [0, 64] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s2 -> s4 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s2 -> s5 [65, 65] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s2 -> s6 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s2 -> s7 [65, 65] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s2 -> s1 [66, 65535] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s2 -> s2 [66, 65535] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s3 -> s1 [0, 64] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s3 -> s2 [0, 64] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s3 -> s3 [0, 65535] { R2042 += 1, R1931 += 1, R1932 += 1 };
  s3 -> s4 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s3 -> s5 [65, 65] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s3 -> s6 [65, 65] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s3 -> s7 [65, 65] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s3 -> s1 [66, 65535] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s3 -> s2 [66, 65535] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s4 -> s4 [0, 65535] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s4 -> s9 [0, 65535] { R2042 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R2042 += 1, R1932 += 1, R1642 += 1, R1643 += 1 };
  s5 -> s5 [0, 65535] { R2042 += 1, R1932 += 1, R1641 += 1, R1642 += 1 };
  s6 -> s6 [0, 65535] { R2042 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2042 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R2044 += 1, R1934 += 1 };
  s0 -> s0 [0, 65535] { R2043 += 1, R2044 += 1 };
  s0 -> s2 [0, 65535] { R2044 += 1, R1933 += 1, R1934 += 1 };
  s0 -> s3 [65, 65] { R2044 += 1, R1934 += 1 };
  s0 -> s4 [65, 65] { R2044 += 1, R1934 += 1 };
  s0 -> s1 [66, 65535] { R2044 += 1, R1934 += 1 };
  s1 -> s1 [0, 64] { R2044 += 1, R1934 += 1 };
  s1 -> s1 [0, 65535] { R2044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2044 += 1, R1934 += 1 };
  s1 -> s4 [65, 65] { R2044 += 1, R1934 += 1 };
  s1 -> s1 [66, 65535] { R2044 += 1, R1934 += 1 };
  s2 -> s1 [0, 64] { R2044 += 1, R1934 += 1 };
  s2 -> s2 [0, 65535] { R2044 += 1, R1933 += 1, R1934 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2044 += 1, R1934 += 1 };
  s2 -> s4 [65, 65] { R2044 += 1, R1934 += 1 };
  s2 -> s1 [66, 65535] { R2044 += 1, R1934 += 1 };
  s3 -> s3 [0, 65535] { R2044 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2044 += 1 };
  s4 -> s4 [0, 65535] { R2044 += 1, R1934 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2044 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s0 -> s2 [0, 64] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s0 -> s3 [0, 65535] { R2046 += 1, R1935 += 1, R1936 += 1 };
  s0 -> s0 [0, 65535] { R2045 += 1, R2046 += 1 };
  s0 -> s4 [65, 65] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s0 -> s5 [65, 65] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s0 -> s6 [65, 65] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s0 -> s7 [65, 65] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s0 -> s1 [66, 79] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s0 -> s2 [66, 65535] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s0 -> s1 [81, 65535] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s1 -> s1 [0, 64] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R2046 += 1 };
  s1 -> s6 [65, 65] { R2046 += 1, R1936 += 1 };
  s1 -> s7 [65, 65] { R2046 += 1, R1936 += 1 };
  s1 -> s1 [66, 79] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s1 -> s1 [66, 65535] { R2046 += 1, R1936 += 1 };
  s1 -> s1 [81, 65535] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s2 -> s1 [0, 64] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s2 -> s2 [0, 64] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s2 -> s4 [65, 65] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s2 -> s5 [65, 65] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s2 -> s6 [65, 65] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s2 -> s7 [65, 65] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s2 -> s1 [66, 79] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s2 -> s2 [66, 65535] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s2 -> s1 [81, 65535] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s3 -> s1 [0, 64] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s3 -> s2 [0, 64] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s3 -> s3 [0, 65535] { R2046 += 1, R1935 += 1, R1936 += 1 };
  s3 -> s4 [65, 65] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s3 -> s5 [65, 65] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s3 -> s6 [65, 65] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s3 -> s7 [65, 65] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s3 -> s1 [66, 79] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s3 -> s2 [66, 65535] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s3 -> s1 [81, 65535] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s4 -> s7 [0, 79] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s4 -> s4 [0, 65535] { R2046 += 1, R1936 += 1, R1847 += 1, R1848 += 1 };
  s4 -> s7 [81, 65535] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2046 += 1 };
  s7 -> s7 [0, 79] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R2046 += 1 };
  s7 -> s7 [0, 65535] { R2046 += 1, R1936 += 1 };
  s7 -> s7 [81, 65535] { R2046 += 1, R1936 += 1, R1848 += 1, R1849 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2046 += 1 };
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P92
automaton P92_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R6 = R1886 && R7 = R2046 && R45 = 0 && R46 = 1 && R47 = 0 && R48 = 1 && R73 = 0 && R74 = R1886 && R75 = 0 && R76 = R1886 && R77 = 0 && R78 = R1886 && R79 = 0 && R80 = R2046 && R81 = 0 && R82 = R2046 && R83 = 0 && R84 = R2046 && R598 + R597 = 0 && R1853 = 0 && R1854 = R1886 && R1855 = 0 && R1856 = R1886 && R1857 = 0 && R1858 = R1886 && R1859 = 0 && R1860 = R1886 && R1861 = 0 && R1862 = R1886 && R1863 = 0 && R1864 = R1886 && R1865 = 0 && R1866 = R1886 && R1867 = 0 && R1868 = R1886 && R1869 = 0 && R1870 = R1886 && R1871 = 0 && R1872 = R1886 && R1873 = 0 && R1874 = R1886 && R1875 = 0 && R1876 = R1886 && R1877 = 0 && R1878 = R1886 && R1879 = 0 && R1880 = R1886 && R1881 = 0 && R1882 = R1886 && R1883 = 0 && R1884 = R1886 && R1885 = 0 && R1887 = 0 && R1888 = R2046 && R1889 = 0 && R1890 = R2046 && R1891 = 0 && R1892 = R2046 && R1893 = 0 && R1894 = R2046 && R1895 = 0 && R1896 = R2046 && R1897 = 0 && R1898 = R2046 && R1899 = 0 && R1900 = R2046 && R1901 = 0 && R1902 = R2046 && R1903 = 0 && R1904 = R2046 && R1907 = 0 && R1908 = 0 && R1931 = 0 && R1932 = 0 && R1935 = 0 && R1936 = 0 && R1955 = 10 && R1956 = R2046 && R1957 = 10 && R1958 = R2046 && R1959 = 10 && R1960 = R2046 && R1961 = 10 && R1962 = R2046 && R1963 = 10 && R1964 = R2046 && R1965 = 10 && R1966 = R2046 && R1967 = 10 && R1968 = R2046 && R1969 = 10 && R1970 = R2046 && R1971 = 10 && R1972 = R2046 && R1973 = 10 && R1974 = R2046 && R1975 = 10 && R1976 = R2046 && R1977 = 10 && R1978 = R2046 && R1979 = 10 && R1980 = R2046 && R1981 = 10 && R1982 = R2046 && R1983 = 10 && R1984 = R2046 && R1985 = 10 && R1986 = R2046 && R1987 = 10 && R1988 = R2046 && R1989 = 10 && R1990 = R2046 && R1991 = 10 && R1992 = R2046 && R1993 = 10 && R1994 = R2046 && R1995 = 10 && R1996 = R2046 && R1997 = 10 && R1998 = R2046 && R1999 = 10 && R2000 = R2046 && R2001 = 10 && R2002 = R2046 && R2003 = 10 && R2004 = R2046 && R2005 = 10 && R2006 = R2046 && R2007 = 10 && R2008 = R2046 && R2009 = 10 && R2010 = R2046 && R2011 = 10 && R2012 = R2046 && R2013 = 10 && R2014 = R2046 && R2015 = 10 && R2016 = R2046 && R2017 = 10 && R2018 = R2046 && R2019 = 10 && R2020 = R2046 && R2021 = 10 && R2022 = R2046 && R2023 = 10 && R2024 = R2046 && R2025 = 10 && R2026 = R2046 && R2027 = 10 && R2028 = R2046 && R2029 = 10 && R2030 = R2046 && R2031 = 10 && R2032 = R2046 && R2033 = 10 && R2034 = R2046 && R2035 = 10 && R2036 = R2046 && R2037 = 10 && R2038 = R2046 && R2039 = 10 && R2040 = R2046 && R2041 = 10 && R2042 = R2046 && R2043 = 10 && R2044 = R2046 && R2045 = 10 && R52 + R51 != 0 && R54 + R53 != 0 && R122 + R119 + R134 + R131 != 0 && R628 + R625 + R1852 + R1849 != 0 && R18 < 1 && R19 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && -1*R104 + -1*R103 < 1 && R106 + R105 < 1 && R600 + R599 < 1 && R602 + R601 < 1 && 0 < R1886 && 9 < R2046 && (R104 + R103 != 0 || R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R115 + R113 = 0 && R116 + R114 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R120 + R117 = 0 && R121 + R118 = 0)) && (R110 + R107 != 0 || R104 + R103 + -1*R111 + -1*R108 = 0 || R104 + R103 < 1) && (R115 + R113 != 0 || R104 + R103 + -1*R116 + -1*R114 = 0 || R104 + R103 < 1) && (R120 + R117 != 0 || R104 + R103 + -1*R121 + -1*R118 = 0 || R104 + R103 < 1) && (R39 = 0 || (R95 = 0 && R96 = 0)) && (R39 = 0 || (R97 = 0 && R98 = 0)) && (R40 = 0 || (R1905 = 0 && R1906 = 0)) && (R40 = 0 || (R1909 = 0 && R1910 = 0)) && (R40 = 0 || (R1911 = 0 && R1912 = 0)) && (R40 = 0 || (R1913 = 0 && R1914 = 0)) && (R40 = 0 || (R1915 = 0 && R1916 = 0)) && (R40 = 0 || (R1917 = 0 && R1918 = 0)) && (R40 = 0 || (R1919 = 0 && R1920 = 0)) && (R40 = 0 || (R1921 = 0 && R1922 = 0)) && (R40 = 0 || (R1923 = 0 && R1924 = 0)) && (R40 = 0 || (R1925 = 0 && R1926 = 0)) && (R40 = 0 || (R1927 = 0 && R1928 = 0)) && (R40 = 0 || (R1929 = 0 && R1930 = 0)) && (R40 = 0 || (R1933 = 0 && R1934 = 0)) && (R43 = 0 || (R1937 = 0 && R1938 = 0)) && (R43 = 0 || (R1939 = 0 && R1940 = 0)) && (R43 = 0 || (R1941 = 0 && R1942 = 0)) && (R43 = 0 || (R1943 = 0 && R1944 = 0)) && (R43 = 0 || (R1945 = 0 && R1946 = 0)) && (R43 = 0 || (R1947 = 0 && R1948 = 0)) && (R43 = 0 || (R1949 = 0 && R1950 = 0)) && (R43 = 0 || (R1951 = 0 && R1952 = 0)) && (R43 = 0 || (R1953 = 0 && R1954 = 0)) && (R44 = 0 || (R99 = 0 && R100 = 0)) && (R44 = 0 || (R101 = 0 && R102 = 0)) && (R110 + R107 = 0 || R104 + R103 < 1) && (R115 + R113 = 0 || R104 + R103 < 1) && (R120 + R117 = 0 || R104 + R103 < 1) && (R128 + R125 = 0 || (R126 + R123 = 0 && R127 + R124 = 0)) && (R128 + R125 = 0 || (R132 + R129 = 0 && R133 + R130 = 0)) && (R608 + R605 = 0 || (R606 + R603 = 0 && R607 + R604 = 0)) && (R618 + R615 = 0 || (R611 + R609 = 0 && R612 + R610 = 0)) && (R618 + R615 = 0 || (R616 + R613 = 0 && R617 + R614 = 0)) && (R618 + R615 = 0 || (R621 + R619 = 0 && R622 + R620 = 0)) && (R618 + R615 = 0 || (R626 + R623 = 0 && R627 + R624 = 0)) && (R634 + R631 = 0 || (R632 + R629 = 0 && R633 + R630 = 0)) && (R1646 + R1643 = 0 || (R1644 + R1641 = 0 && R1645 + R1642 = 0)) && (R1646 + R1643 = 0 || (R1850 + R1847 = 0 && R1851 + R1848 = 0));
// End of Parikh automata intersection problem
