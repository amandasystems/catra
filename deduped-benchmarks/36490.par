// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R18, R19, R22, R25, R28, R3653, R3654, R3655, R3656, R3657, R3658, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R4665, R4666, R4667, R4668, R4669, R4670, R47, R48, R4871, R4872, R4873, R4874, R4875, R4876, R4877, R4878, R4879, R4880, R4881, R4882, R4883, R4884, R4885, R4886, R4887, R4888, R4889, R4890, R4891, R4892, R4893, R4894, R4895, R4896, R4897, R4898, R4899, R4900, R4901, R4902, R4903, R4904, R4905, R4906, R4907, R4908, R4909, R4910, R4911, R4912, R4913, R4914, R4915, R4916, R4917, R4918, R4919, R4920, R4921, R4922, R4923, R4924, R4925, R4926, R4927, R4928, R4929, R4930, R4931, R4932, R4933, R4934, R4935, R4936, R4937, R4938, R4939, R4940, R4941, R4942, R4943, R4944, R4945, R4946, R4947, R4948, R4949, R4950, R4951, R4952, R4953, R4954, R4955, R4956, R4957, R4958, R4959, R4960, R4961, R4962, R4963, R4964, R4965, R4966, R4967, R4968, R4969, R4970, R4971, R4972, R4973, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R5056, R5057, R5058, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R51, R52, R53, R54, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R7, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P104
automaton P104_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R25 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [108, 108] { R82 += 1 };
  s0 -> s1 [109, 65535] { R82 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1 };
  s2 -> s1 [0, 110] { R82 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R82 += 1 };
  s2 -> s1 [112, 65535] { R82 += 1 };
  s3 -> s1 [0, 98] { R82 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R82 += 1 };
  s3 -> s1 [100, 65535] { R82 += 1 };
  s4 -> s1 [0, 96] { R82 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R82 += 1 };
  s4 -> s1 [98, 65535] { R82 += 1 };
  s5 -> s1 [0, 107] { R82 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R82 += 1 };
  s5 -> s1 [109, 65535] { R82 += 1 };
  s6 -> s1 [0, 103] { R82 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R82 += 1 };
  s6 -> s1 [105, 65535] { R82 += 1 };
  s7 -> s1 [0, 110] { R82 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R82 += 1 };
  s7 -> s1 [112, 65535] { R82 += 1 };
  s8 -> s1 [0, 114] { R82 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R82 += 1 };
  s8 -> s1 [116, 65535] { R82 += 1 };
  s9 -> s1 [0, 115] { R82 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R82 += 1 };
  s9 -> s1 [117, 65535] { R82 += 1 };
  s10 -> s1 [0, 65535] { R82 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R4911 += 1, R4912 += 1 };
  s0 -> s1 [0, 65535] { R4912 += 1, R41 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4912 += 1, R41 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R4913 += 1, R4914 += 1 };
  s0 -> s1 [0, 65535] { R4914 += 1, R104 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4914 += 1, R104 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R4916 += 1 };
  s0 -> s2 [0, 65535] { R4916 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R4915 += 1, R4916 += 1 };
  s0 -> s1 [78, 65535] { R4916 += 1 };
  s1 -> s1 [0, 76] { R4916 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R4916 += 1 };
  s2 -> s1 [0, 76] { R4916 += 1 };
  s2 -> s2 [0, 65535] { R4916 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R4916 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R4918 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R4917 += 1, R4918 += 1 };
  s0 -> s2 [0, 65535] { R4918 += 1, R110 += 1, R111 += 1 };
  s1 -> s1 [0, 65535] { R4918 += 1, R111 += 1, R112 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4918 += 1 };
  s2 -> s1 [0, 65535] { R4918 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4918 += 1, R110 += 1, R111 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4918 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R4920 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R4920 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R4919 += 1, R4920 += 1 };
  s0 -> s3 [108, 108] { R4920 += 1, R116 += 1 };
  s0 -> s1 [109, 65535] { R4920 += 1, R116 += 1 };
  s1 -> s13 [0, 65535] { R4920 += 1 };
  s1 -> s1 [0, 65535] { R4920 += 1, R116 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R4920 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R4920 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R4920 += 1, R116 += 1 };
  s2 -> s1 [109, 65535] { R4920 += 1, R116 += 1 };
  s3 -> s1 [0, 110] { R4920 += 1, R116 += 1 };
  s3 -> s3 [0, 65535] { R4920 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R4920 += 1, R116 += 1 };
  s3 -> s1 [112, 65535] { R4920 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4920 += 1, R116 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4920 += 1 };
  s5 -> s6 [99, 99] { R4920 += 1, R116 += 1 };
  s5 -> s1 [100, 65535] { R4920 += 1, R116 += 1 };
  s6 -> s1 [0, 96] { R4920 += 1, R116 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4920 += 1 };
  s6 -> s7 [97, 97] { R4920 += 1, R116 += 1 };
  s6 -> s1 [98, 65535] { R4920 += 1, R116 += 1 };
  s7 -> s1 [0, 107] { R4920 += 1, R116 += 1 };
  s7 -> s7 [0, 65535] { R4920 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R4920 += 1, R116 += 1 };
  s7 -> s1 [109, 65535] { R4920 += 1, R116 += 1 };
  s8 -> s1 [0, 103] { R4920 += 1, R116 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R4920 += 1 };
  s8 -> s9 [104, 104] { R4920 += 1, R116 += 1 };
  s8 -> s1 [105, 65535] { R4920 += 1, R116 += 1 };
  s9 -> s1 [0, 110] { R4920 += 1, R116 += 1 };
  s9 -> s9 [0, 65535] { R4920 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R4920 += 1, R116 += 1 };
  s9 -> s1 [112, 65535] { R4920 += 1, R116 += 1 };
  s10 -> s1 [0, 114] { R4920 += 1, R116 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4920 += 1 };
  s10 -> s11 [115, 115] { R4920 += 1, R116 += 1 };
  s10 -> s1 [116, 65535] { R4920 += 1, R116 += 1 };
  s11 -> s1 [0, 115] { R4920 += 1, R116 += 1 };
  s11 -> s11 [0, 65535] { R4920 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R4920 += 1, R116 += 1 };
  s11 -> s1 [117, 65535] { R4920 += 1, R116 += 1 };
  s12 -> s1 [0, 65535] { R4920 += 1, R116 += 1 };
  s13 -> s13 [0, 65535] { R4920 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4921 += 1, R4922 += 1 };
  s0 -> s1 [0, 65535] { R4922 += 1, R120 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R4922 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535] { R4922 += 1, R120 += 1, R121 += 1 };
  s1 -> s2 [0, 65535] { R4922 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4922 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4922 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4922 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R4923 += 1, R4924 += 1 };
  s0 -> s1 [0, 65535] { R4924 += 1, R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R4924 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 65535] { R4924 += 1, R126 += 1, R127 += 1 };
  s1 -> s2 [0, 65535] { R4924 += 1, R127 += 1, R128 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4924 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [0, 65535] { R4924 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4924 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4925 += 1, R4926 += 1 };
  s0 -> s1 [0, 65535] { R4926 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4926 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 76] { R4928 += 1, R133 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R4928 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R4927 += 1, R4928 += 1 };
  s0 -> s3 [77, 77] { R4928 += 1, R133 += 1, R134 += 1 };
  s0 -> s4 [77, 77] { R4928 += 1, R133 += 1, R134 += 1 };
  s0 -> s1 [78, 65535] { R4928 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [0, 76] { R4928 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [0, 65535] { R4928 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [77, 77] { R4928 += 1, R133 += 1, R134 += 1 };
  s1 -> s4 [77, 77] { R4928 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [78, 65535] { R4928 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [0, 76] { R4928 += 1, R133 += 1, R134 += 1 };
  s2 -> s2 [0, 65535] { R4928 += 1, R132 += 1, R133 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R4928 += 1, R133 += 1, R134 += 1 };
  s2 -> s4 [77, 77] { R4928 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [78, 65535] { R4928 += 1, R133 += 1, R134 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4928 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4928 += 1 };
  s4 -> s4 [0, 65535] { R4928 += 1, R133 += 1, R134 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4928 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R4961 += 1, R4962 += 1 };
  s0 -> s1 [0, 65535] { R4962 += 1, R43 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4962 += 1, R43 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4964 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R4963 += 1, R4964 += 1 };
  s0 -> s2 [65, 65] { R4964 += 1, R103 += 1 };
  s0 -> s3 [65, 65] { R4964 += 1, R103 += 1 };
  s0 -> s1 [66, 65535] { R4964 += 1, R103 += 1 };
  s1 -> s1 [0, 64] { R4964 += 1, R103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4964 += 1, R103 += 1 };
  s1 -> s3 [65, 65] { R4964 += 1, R103 += 1 };
  s1 -> s1 [66, 65535] { R4964 += 1, R103 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4964 += 1, R103 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4966 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R4965 += 1, R4966 += 1 };
  s0 -> s2 [65, 65] { R4966 += 1, R105 += 1 };
  s0 -> s3 [65, 65] { R4966 += 1, R105 += 1 };
  s0 -> s1 [66, 65535] { R4966 += 1, R105 += 1 };
  s1 -> s1 [0, 64] { R4966 += 1, R105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4966 += 1, R105 += 1 };
  s1 -> s3 [65, 65] { R4966 += 1, R105 += 1 };
  s1 -> s1 [66, 65535] { R4966 += 1, R105 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4966 += 1, R105 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4968 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R4967 += 1, R4968 += 1 };
  s0 -> s2 [65, 65] { R4968 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R4968 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R4968 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R4968 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4968 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R4968 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R4968 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4968 += 1, R107 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4970 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R4969 += 1, R4970 += 1 };
  s0 -> s2 [65, 65] { R4970 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R4970 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R4970 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R4970 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4970 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R4970 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R4970 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4970 += 1, R113 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4972 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R4971 += 1, R4972 += 1 };
  s0 -> s2 [65, 65] { R4972 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R4972 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R4972 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R4972 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4972 += 1, R117 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R4972 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R4972 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4972 += 1, R117 += 1, R118 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4974 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R4973 += 1, R4974 += 1 };
  s0 -> s2 [65, 65] { R4974 += 1, R123 += 1, R124 += 1 };
  s0 -> s3 [65, 65] { R4974 += 1, R123 += 1, R124 += 1 };
  s0 -> s1 [66, 65535] { R4974 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 64] { R4974 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4974 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [65, 65] { R4974 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [66, 65535] { R4974 += 1, R123 += 1, R124 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4974 += 1, R123 += 1, R124 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4976 += 1 };
  s0 -> s0 [0, 65535] { R4975 += 1, R4976 += 1 };
  s0 -> s2 [65, 65] { R4976 += 1 };
  s0 -> s3 [65, 65] { R4976 += 1 };
  s0 -> s1 [66, 65535] { R4976 += 1 };
  s1 -> s1 [0, 64] { R4976 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4976 += 1 };
  s1 -> s3 [65, 65] { R4976 += 1 };
  s1 -> s1 [66, 65535] { R4976 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4976 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R4978 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R4977 += 1, R4978 += 1 };
  s0 -> s2 [65, 65] { R4978 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [65, 65] { R4978 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [66, 65535] { R4978 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 64] { R4978 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R4978 += 1, R129 += 1, R130 += 1 };
  s1 -> s3 [65, 65] { R4978 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [66, 65535] { R4978 += 1, R129 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R4978 += 1, R129 += 1, R130 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 43] { R4980 += 1 };
  s0 -> s0 [0, 65535] { R4979 += 1, R4980 += 1 };
  s0 -> s1 [45, 45] { R4980 += 1 };
  s0 -> s2 [46, 46] { R4980 += 1 };
  s0 -> s1 [48, 62] { R4980 += 1 };
  s0 -> s3 [65, 65] { R4980 += 1 };
  s0 -> s1 [66, 65535] { R4980 += 1 };
  s1 -> s1 [0, 43] { R4980 += 1 };
  s1 -> s1 [45, 45] { R4980 += 1 };
  s1 -> s2 [46, 46] { R4980 += 1 };
  s1 -> s1 [48, 62] { R4980 += 1 };
  s1 -> s3 [65, 65] { R4980 += 1 };
  s1 -> s1 [66, 65535] { R4980 += 1 };
  s2 -> s1 [0, 43] { R4980 += 1 };
  s2 -> s1 [45, 45] { R4980 += 1 };
  s2 -> s2 [46, 46] { R4980 += 1 };
  s2 -> s1 [48, 62] { R4980 += 1 };
  s2 -> s3 [65, 65] { R4980 += 1 };
  s2 -> s1 [66, 114] { R4980 += 1 };
  s2 -> s8 [115, 115] { R4980 += 1 };
  s2 -> s1 [116, 65535] { R4980 += 1 };
  s3 -> s3 [0, 43] { R4980 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4980 += 1 };
  s3 -> s4 [46, 46] { R4980 += 1 };
  s3 -> s3 [48, 62] { R4980 += 1 };
  s3 -> s3 [65, 65535] { R4980 += 1 };
  s4 -> s3 [0, 43] { R4980 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4980 += 1 };
  s4 -> s4 [46, 46] { R4980 += 1 };
  s4 -> s3 [48, 62] { R4980 += 1 };
  s4 -> s3 [65, 114] { R4980 += 1 };
  s4 -> s5 [115, 115] { R4980 += 1 };
  s4 -> s3 [116, 65535] { R4980 += 1 };
  s5 -> s3 [0, 43] { R4980 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4980 += 1 };
  s5 -> s4 [46, 46] { R4980 += 1 };
  s5 -> s3 [48, 62] { R4980 += 1 };
  s5 -> s3 [65, 110] { R4980 += 1 };
  s5 -> s6 [111, 111] { R4980 += 1 };
  s5 -> s3 [112, 65535] { R4980 += 1 };
  s6 -> s3 [0, 43] { R4980 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4980 += 1 };
  s6 -> s4 [46, 46] { R4980 += 1 };
  s6 -> s3 [48, 62] { R4980 += 1 };
  s6 -> s3 [65, 98] { R4980 += 1 };
  s6 -> s7 [99, 99] { R4980 += 1 };
  s6 -> s3 [100, 65535] { R4980 += 1 };
  s7 -> s3 [0, 43] { R4980 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4980 += 1 };
  s7 -> s4 [46, 46] { R4980 += 1 };
  s7 -> s3 [48, 62] { R4980 += 1 };
  s7 -> s3 [65, 106] { R4980 += 1 };
  s7 -> s3 [108, 65535] { R4980 += 1 };
  s8 -> s1 [0, 43] { R4980 += 1 };
  s8 -> s1 [45, 45] { R4980 += 1 };
  s8 -> s2 [46, 46] { R4980 += 1 };
  s8 -> s1 [48, 62] { R4980 += 1 };
  s8 -> s3 [65, 65] { R4980 += 1 };
  s8 -> s1 [66, 110] { R4980 += 1 };
  s8 -> s9 [111, 111] { R4980 += 1 };
  s8 -> s1 [112, 65535] { R4980 += 1 };
  s9 -> s1 [0, 43] { R4980 += 1 };
  s9 -> s1 [45, 45] { R4980 += 1 };
  s9 -> s2 [46, 46] { R4980 += 1 };
  s9 -> s1 [48, 62] { R4980 += 1 };
  s9 -> s3 [65, 65] { R4980 += 1 };
  s9 -> s1 [66, 98] { R4980 += 1 };
  s9 -> s10 [99, 99] { R4980 += 1 };
  s9 -> s1 [100, 65535] { R4980 += 1 };
  s10 -> s1 [0, 43] { R4980 += 1 };
  s10 -> s1 [45, 45] { R4980 += 1 };
  s10 -> s2 [46, 46] { R4980 += 1 };
  s10 -> s1 [48, 62] { R4980 += 1 };
  s10 -> s3 [65, 65] { R4980 += 1 };
  s10 -> s1 [66, 106] { R4980 += 1 };
  s10 -> s1 [108, 65535] { R4980 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R4982 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R4981 += 1, R4982 += 1 };
  s1 -> s1 [0, 65535] { R4982 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 57] { R4984 += 1 };
  s0 -> s2 [0, 65535] { R4984 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4983 += 1, R4984 += 1 };
  s0 -> s3 [58, 58] { R4984 += 1 };
  s0 -> s1 [59, 65535] { R4984 += 1 };
  s1 -> s1 [0, 57] { R4984 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4984 += 1 };
  s1 -> s1 [59, 65535] { R4984 += 1 };
  s2 -> s1 [0, 57] { R4984 += 1 };
  s2 -> s2 [0, 65535] { R4984 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4984 += 1 };
  s2 -> s1 [59, 65535] { R4984 += 1 };
  s3 -> s3 [0, 65535] { R4984 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 42] { R4986 += 1 };
  s0 -> s0 [0, 65535] { R4985 += 1, R4986 += 1 };
  s0 -> s2 [0, 65535] { R4986 += 1, R19 += 1 };
  s0 -> s3 [43, 43] { R4986 += 1 };
  s0 -> s1 [44, 65535] { R4986 += 1 };
  s1 -> s1 [0, 42] { R4986 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R4986 += 1 };
  s1 -> s1 [44, 65535] { R4986 += 1 };
  s2 -> s1 [0, 42] { R4986 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4986 += 1, R19 += 1 };
  s2 -> s3 [43, 43] { R4986 += 1 };
  s2 -> s1 [44, 65535] { R4986 += 1 };
  s3 -> s3 [0, 65535] { R4986 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R4988 += 1 };
  s0 -> s0 [0, 65535] { R4987 += 1, R4988 += 1 };
  s0 -> s2 [0, 65535] { R4988 += 1, R22 += 1 };
  s0 -> s3 [65, 65] { R4988 += 1 };
  s0 -> s1 [66, 65535] { R4988 += 1 };
  s1 -> s1 [0, 64] { R4988 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4988 += 1 };
  s1 -> s1 [66, 65535] { R4988 += 1 };
  s2 -> s1 [0, 64] { R4988 += 1 };
  s2 -> s2 [0, 65535] { R4988 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4988 += 1 };
  s2 -> s1 [66, 65535] { R4988 += 1 };
  s3 -> s3 [0, 65535] { R4988 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 90] { R4990 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R4990 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R4989 += 1, R4990 += 1 };
  s0 -> s3 [91, 91] { R4990 += 1, R46 += 1 };
  s0 -> s1 [92, 65535] { R4990 += 1, R46 += 1 };
  s1 -> s5 [0, 65535] { R4990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4990 += 1, R46 += 1 };
  s2 -> s1 [0, 90] { R4990 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R4990 += 1, R45 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4990 += 1, R46 += 1 };
  s2 -> s1 [92, 65535] { R4990 += 1, R46 += 1 };
  s3 -> s1 [0, 65535] { R4990 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4990 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R4991 += 1, R4992 += 1 };
  s0 -> s1 [0, 65535] { R4992 += 1, R47 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R4992 += 1, R48 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4992 += 1, R47 += 1, R48 += 1 };
  s1 -> s2 [0, 65535] { R4992 += 1, R48 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4992 += 1, R48 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R4992 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4992 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R4994 += 1, R74 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R4994 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R4993 += 1, R4994 += 1 };
  s1 -> s1 [0, 65535] { R4994 += 1, R74 += 1, R37 += 1 };
  s1 -> s4 [0, 65535] { R4994 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4994 += 1, R74 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R4994 += 1, R73 += 1, R74 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4994 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 107] { R4996 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R4996 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R4995 += 1, R4996 += 1 };
  s0 -> s3 [108, 108] { R4996 += 1, R76 += 1 };
  s0 -> s1 [109, 65535] { R4996 += 1, R76 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4996 += 1, R76 += 1 };
  s1 -> s13 [0, 65535] { R4996 += 1 };
  s2 -> s1 [0, 107] { R4996 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4996 += 1, R75 += 1, R76 += 1 };
  s2 -> s3 [108, 108] { R4996 += 1, R76 += 1 };
  s2 -> s1 [109, 65535] { R4996 += 1, R76 += 1 };
  s3 -> s1 [0, 110] { R4996 += 1, R76 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4996 += 1 };
  s3 -> s5 [111, 111] { R4996 += 1, R76 += 1 };
  s3 -> s1 [112, 65535] { R4996 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4996 += 1, R76 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4996 += 1 };
  s5 -> s6 [99, 99] { R4996 += 1, R76 += 1 };
  s5 -> s1 [100, 65535] { R4996 += 1, R76 += 1 };
  s6 -> s1 [0, 96] { R4996 += 1, R76 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4996 += 1 };
  s6 -> s7 [97, 97] { R4996 += 1, R76 += 1 };
  s6 -> s1 [98, 65535] { R4996 += 1, R76 += 1 };
  s7 -> s1 [0, 107] { R4996 += 1, R76 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R4996 += 1 };
  s7 -> s8 [108, 108] { R4996 += 1, R76 += 1 };
  s7 -> s1 [109, 65535] { R4996 += 1, R76 += 1 };
  s8 -> s1 [0, 103] { R4996 += 1, R76 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R4996 += 1 };
  s8 -> s9 [104, 104] { R4996 += 1, R76 += 1 };
  s8 -> s1 [105, 65535] { R4996 += 1, R76 += 1 };
  s9 -> s1 [0, 110] { R4996 += 1, R76 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R4996 += 1 };
  s9 -> s10 [111, 111] { R4996 += 1, R76 += 1 };
  s9 -> s1 [112, 65535] { R4996 += 1, R76 += 1 };
  s10 -> s1 [0, 114] { R4996 += 1, R76 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4996 += 1 };
  s10 -> s11 [115, 115] { R4996 += 1, R76 += 1 };
  s10 -> s1 [116, 65535] { R4996 += 1, R76 += 1 };
  s11 -> s1 [0, 115] { R4996 += 1, R76 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R4996 += 1 };
  s11 -> s12 [116, 116] { R4996 += 1, R76 += 1 };
  s11 -> s1 [117, 65535] { R4996 += 1, R76 += 1 };
  s12 -> s1 [0, 65535] { R4996 += 1, R76 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R4996 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R4997 += 1, R4998 += 1 };
  s0 -> s1 [0, 65535] { R4998 += 1, R77 += 1, R78 += 1 };
  s0 -> s2 [0, 65535] { R4998 += 1, R78 += 1, R52 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4998 += 1, R77 += 1, R78 += 1 };
  s1 -> s2 [0, 65535] { R4998 += 1, R78 += 1, R52 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4998 += 1 };
  s2 -> s2 [0, 65535] { R4998 += 1, R78 += 1, R52 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4998 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R4999 += 1, R5000 += 1 };
  s0 -> s1 [0, 65535] { R5000 += 1, R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R5000 += 1, R96 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R5000 += 1, R95 += 1, R96 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5000 += 1, R96 += 1, R39 += 1 };
  s2 -> s3 [0, 65535] { R5000 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5000 += 1, R96 += 1, R39 += 1 };
  s3 -> s3 [0, 65535] { R5000 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R5002 += 1 };
  s0 -> s0 [0, 65535] { R5001 += 1, R5002 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5002 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 42] { R5004 += 1, R98 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R5004 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R5003 += 1, R5004 += 1 };
  s0 -> s3 [43, 43] { R5004 += 1, R98 += 1, R51 += 1 };
  s0 -> s4 [43, 43] { R5004 += 1, R98 += 1, R51 += 1 };
  s0 -> s1 [44, 65535] { R5004 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [0, 42] { R5004 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R5004 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R5004 += 1, R98 += 1, R51 += 1 };
  s1 -> s4 [43, 43] { R5004 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [44, 65535] { R5004 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [0, 42] { R5004 += 1, R98 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5004 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [43, 43] { R5004 += 1, R98 += 1, R51 += 1 };
  s2 -> s4 [43, 43] { R5004 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [44, 65535] { R5004 += 1, R98 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5004 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5004 += 1, R98 += 1, R51 += 1 };
  s4 -> s6 [0, 65535] { R5004 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5004 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R5006 += 1, R4878 += 1 };
  s0 -> s2 [0, 65535] { R5006 += 1, R4877 += 1, R4878 += 1 };
  s0 -> s0 [0, 65535] { R5005 += 1, R5006 += 1 };
  s0 -> s1 [66, 65535] { R5006 += 1, R4878 += 1 };
  s1 -> s1 [0, 64] { R5006 += 1, R4878 += 1 };
  s1 -> s1 [0, 65535] { R5006 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R5006 += 1, R4878 += 1 };
  s2 -> s1 [0, 64] { R5006 += 1, R4878 += 1 };
  s2 -> s2 [0, 65535] { R5006 += 1, R4877 += 1, R4878 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R5006 += 1, R4878 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R5008 += 1, R4879 += 1, R4880 += 1 };
  s0 -> s2 [0, 65535] { R5008 += 1, R4880 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5007 += 1, R5008 += 1 };
  s1 -> s1 [0, 65535] { R5008 += 1, R4879 += 1, R4880 += 1 };
  s1 -> s2 [0, 65535] { R5008 += 1, R4880 += 1, R38 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5008 += 1 };
  s2 -> s2 [0, 65535] { R5008 += 1, R4880 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5008 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65] { R5010 += 1, R4882 += 1 };
  s0 -> s0 [0, 65535] { R5009 += 1, R5010 += 1 };
  s0 -> s2 [0, 65535] { R5010 += 1, R4881 += 1, R4882 += 1 };
  s0 -> s1 [80, 65535] { R5010 += 1, R4882 += 1 };
  s1 -> s1 [0, 65] { R5010 += 1, R4882 += 1 };
  s1 -> s1 [0, 65535] { R5010 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R5010 += 1, R4882 += 1 };
  s2 -> s1 [0, 65] { R5010 += 1, R4882 += 1 };
  s2 -> s2 [0, 65535] { R5010 += 1, R4881 += 1, R4882 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R5010 += 1, R4882 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_44 {
  init s0;
  s0 -> s0 [0, 65535] { R5011 += 1, R5012 += 1 };
  s0 -> s1 [0, 65535] { R5012 += 1, R4884 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R5012 += 1, R4883 += 1, R4884 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5012 += 1, R4884 += 1, R598 += 1 };
  s1 -> s4 [0, 65535] { R5012 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5012 += 1, R4884 += 1, R598 += 1 };
  s2 -> s2 [0, 65535] { R5012 += 1, R4883 += 1, R4884 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5012 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 81] { R5014 += 1, R4886 += 1 };
  s0 -> s2 [0, 65535] { R5014 += 1, R4886 += 1, R600 += 1 };
  s0 -> s3 [0, 65535] { R5014 += 1, R4885 += 1, R4886 += 1 };
  s0 -> s0 [0, 65535] { R5013 += 1, R5014 += 1 };
  s0 -> s1 [83, 65535] { R5014 += 1, R4886 += 1 };
  s1 -> s1 [0, 81] { R5014 += 1, R4886 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5014 += 1 };
  s1 -> s1 [83, 65535] { R5014 += 1, R4886 += 1 };
  s2 -> s1 [0, 81] { R5014 += 1, R4886 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5014 += 1, R4886 += 1, R600 += 1 };
  s2 -> s5 [0, 65535] { R5014 += 1 };
  s2 -> s1 [83, 65535] { R5014 += 1, R4886 += 1 };
  s3 -> s1 [0, 81] { R5014 += 1, R4886 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5014 += 1, R4886 += 1, R600 += 1 };
  s3 -> s3 [0, 65535] { R5014 += 1, R4885 += 1, R4886 += 1 };
  s3 -> s1 [83, 65535] { R5014 += 1, R4886 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5014 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 79] { R5016 += 1, R4888 += 1 };
  s0 -> s0 [0, 65535] { R5015 += 1, R5016 += 1 };
  s0 -> s2 [0, 65535] { R5016 += 1, R4887 += 1, R4888 += 1 };
  s0 -> s3 [0, 65535] { R5016 += 1, R4888 += 1, R602 += 1 };
  s0 -> s1 [81, 65535] { R5016 += 1, R4888 += 1 };
  s1 -> s1 [0, 79] { R5016 += 1, R4888 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5016 += 1 };
  s1 -> s1 [81, 65535] { R5016 += 1, R4888 += 1 };
  s2 -> s1 [0, 79] { R5016 += 1, R4888 += 1 };
  s2 -> s2 [0, 65535] { R5016 += 1, R4887 += 1, R4888 += 1 };
  s2 -> s3 [0, 65535] { R5016 += 1, R4888 += 1, R602 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R5016 += 1, R4888 += 1 };
  s3 -> s1 [0, 79] { R5016 += 1, R4888 += 1 };
  s3 -> s4 [0, 65535] { R5016 += 1 };
  s3 -> s3 [0, 65535] { R5016 += 1, R4888 += 1, R602 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R5016 += 1, R4888 += 1 };
  s4 -> s4 [0, 65535] { R5016 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 65535] { R5018 += 1, R4890 += 1, R607 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R5018 += 1, R4890 += 1, R606 += 1, R607 += 1 };
  s0 -> s3 [0, 65535] { R5018 += 1, R4889 += 1, R4890 += 1 };
  s0 -> s0 [0, 65535] { R5017 += 1, R5018 += 1 };
  s1 -> s6 [0, 65535] { R5018 += 1, R4890 += 1 };
  s1 -> s5 [0, 65535] { R5018 += 1 };
  s1 -> s1 [0, 65535] { R5018 += 1, R4890 += 1, R607 += 1, R608 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5018 += 1 };
  s2 -> s1 [0, 65535] { R5018 += 1, R4890 += 1, R607 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R5018 += 1, R4890 += 1, R606 += 1, R607 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5018 += 1, R4890 += 1, R607 += 1, R608 += 1 };
  s3 -> s2 [0, 65535] { R5018 += 1, R4890 += 1, R606 += 1, R607 += 1 };
  s3 -> s3 [0, 65535] { R5018 += 1, R4889 += 1, R4890 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5018 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R5018 += 1, R4890 += 1 };
  s6 -> s5 [0, 65535] { R5018 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R5019 += 1, R5020 += 1 };
  s0 -> s1 [0, 65535] { R5020 += 1, R4891 += 1, R4892 += 1 };
  s0 -> s2 [0, 65535] { R5020 += 1, R4892 += 1 };
  s1 -> s1 [0, 65535] { R5020 += 1, R4891 += 1, R4892 += 1 };
  s1 -> s2 [0, 65535] { R5020 += 1, R4892 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5020 += 1, R4892 += 1 };
  s2 -> s3 [0, 65535] { R5020 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5020 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 79] { R5022 += 1, R4894 += 1, R612 += 1 };
  s0 -> s2 [0, 65535] { R5022 += 1, R4894 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R5021 += 1, R5022 += 1 };
  s0 -> s3 [0, 65535] { R5022 += 1, R4893 += 1, R4894 += 1 };
  s0 -> s1 [81, 65535] { R5022 += 1, R4894 += 1, R612 += 1 };
  s1 -> s1 [0, 79] { R5022 += 1, R4894 += 1, R612 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5022 += 1 };
  s1 -> s1 [0, 65535] { R5022 += 1, R4894 += 1 };
  s1 -> s1 [81, 65535] { R5022 += 1, R4894 += 1, R612 += 1 };
  s2 -> s1 [0, 79] { R5022 += 1, R4894 += 1, R612 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5022 += 1 };
  s2 -> s2 [0, 65535] { R5022 += 1, R4894 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [81, 65535] { R5022 += 1, R4894 += 1, R612 += 1 };
  s3 -> s1 [0, 79] { R5022 += 1, R4894 += 1, R612 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R5022 += 1, R4894 += 1, R611 += 1, R612 += 1 };
  s3 -> s3 [0, 65535] { R5022 += 1, R4893 += 1, R4894 += 1 };
  s3 -> s1 [81, 65535] { R5022 += 1, R4894 += 1, R612 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5022 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R5024 += 1, R4896 += 1, R616 += 1, R617 += 1 };
  s0 -> s0 [0, 65535] { R5023 += 1, R5024 += 1 };
  s0 -> s2 [0, 65535] { R5024 += 1, R4895 += 1, R4896 += 1 };
  s0 -> s3 [0, 65535] { R5024 += 1, R4896 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [0, 65535] { R5024 += 1, R4896 += 1, R616 += 1, R617 += 1 };
  s1 -> s5 [0, 65535] { R5024 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R5024 += 1, R4896 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [0, 65535] { R5024 += 1, R4896 += 1, R616 += 1, R617 += 1 };
  s2 -> s2 [0, 65535] { R5024 += 1, R4895 += 1, R4896 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R5024 += 1, R4896 += 1, R617 += 1, R618 += 1 };
  s3 -> s4 [0, 65535] { R5024 += 1, R4896 += 1 };
  s3 -> s5 [0, 65535] { R5024 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R5024 += 1, R4896 += 1, R617 += 1, R618 += 1 };
  s4 -> s4 [0, 65535] { R5024 += 1, R4896 += 1 };
  s4 -> s5 [0, 65535] { R5024 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5024 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s0 -> s0 [0, 65535] { R5025 += 1, R5026 += 1 };
  s0 -> s2 [0, 65535] { R5026 += 1, R4898 += 1, R621 += 1, R622 += 1 };
  s0 -> s3 [0, 65535] { R5026 += 1, R4897 += 1, R4898 += 1 };
  s0 -> s1 [91, 107] { R5026 += 1, R4898 += 1, R622 += 1 };
  s0 -> s4 [108, 108] { R5026 += 1, R4898 += 1, R622 += 1 };
  s0 -> s1 [109, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s1 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5026 += 1, R4898 += 1 };
  s1 -> s6 [0, 65535] { R5026 += 1 };
  s1 -> s1 [91, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s2 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R5026 += 1 };
  s2 -> s2 [0, 65535] { R5026 += 1, R4898 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [91, 107] { R5026 += 1, R4898 += 1, R622 += 1 };
  s2 -> s4 [108, 108] { R5026 += 1, R4898 += 1, R622 += 1 };
  s2 -> s1 [109, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s3 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R5026 += 1, R4898 += 1, R621 += 1, R622 += 1 };
  s3 -> s3 [0, 65535] { R5026 += 1, R4897 += 1, R4898 += 1 };
  s3 -> s1 [91, 107] { R5026 += 1, R4898 += 1, R622 += 1 };
  s3 -> s4 [108, 108] { R5026 += 1, R4898 += 1, R622 += 1 };
  s3 -> s1 [109, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s4 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5026 += 1, R4898 += 1 };
  s4 -> s6 [0, 65535] { R5026 += 1 };
  s4 -> s1 [91, 110] { R5026 += 1, R4898 += 1, R622 += 1 };
  s4 -> s7 [111, 111] { R5026 += 1, R4898 += 1, R622 += 1 };
  s4 -> s1 [112, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5026 += 1 };
  s7 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R5026 += 1, R4898 += 1 };
  s7 -> s6 [0, 65535] { R5026 += 1 };
  s7 -> s1 [91, 98] { R5026 += 1, R4898 += 1, R622 += 1 };
  s7 -> s8 [99, 99] { R5026 += 1, R4898 += 1, R622 += 1 };
  s7 -> s1 [100, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s8 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R5026 += 1 };
  s8 -> s8 [0, 65535] { R5026 += 1, R4898 += 1 };
  s8 -> s1 [91, 96] { R5026 += 1, R4898 += 1, R622 += 1 };
  s8 -> s9 [97, 97] { R5026 += 1, R4898 += 1, R622 += 1 };
  s8 -> s1 [98, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s9 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R5026 += 1, R4898 += 1 };
  s9 -> s6 [0, 65535] { R5026 += 1 };
  s9 -> s1 [91, 107] { R5026 += 1, R4898 += 1, R622 += 1 };
  s9 -> s10 [108, 108] { R5026 += 1, R4898 += 1, R622 += 1 };
  s9 -> s1 [109, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s10 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R5026 += 1 };
  s10 -> s10 [0, 65535] { R5026 += 1, R4898 += 1 };
  s10 -> s1 [91, 103] { R5026 += 1, R4898 += 1, R622 += 1 };
  s10 -> s11 [104, 104] { R5026 += 1, R4898 += 1, R622 += 1 };
  s10 -> s1 [105, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s11 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R5026 += 1, R4898 += 1 };
  s11 -> s6 [0, 65535] { R5026 += 1 };
  s11 -> s1 [91, 110] { R5026 += 1, R4898 += 1, R622 += 1 };
  s11 -> s12 [111, 111] { R5026 += 1, R4898 += 1, R622 += 1 };
  s11 -> s1 [112, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s12 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R5026 += 1 };
  s12 -> s12 [0, 65535] { R5026 += 1, R4898 += 1 };
  s12 -> s1 [91, 114] { R5026 += 1, R4898 += 1, R622 += 1 };
  s12 -> s13 [115, 115] { R5026 += 1, R4898 += 1, R622 += 1 };
  s12 -> s1 [116, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s13 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R5026 += 1, R4898 += 1 };
  s13 -> s6 [0, 65535] { R5026 += 1 };
  s13 -> s1 [91, 115] { R5026 += 1, R4898 += 1, R622 += 1 };
  s13 -> s14 [116, 116] { R5026 += 1, R4898 += 1, R622 += 1 };
  s13 -> s1 [117, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  s14 -> s1 [0, 80] { R5026 += 1, R4898 += 1, R622 += 1 };
  s14 -> s1 [91, 65535] { R5026 += 1, R4898 += 1, R622 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R5028 += 1, R4900 += 1, R626 += 1, R627 += 1 };
  s0 -> s2 [0, 65535] { R5028 += 1, R4899 += 1, R4900 += 1 };
  s0 -> s3 [0, 65535] { R5028 += 1, R4900 += 1, R627 += 1, R628 += 1 };
  s0 -> s0 [0, 65535] { R5027 += 1, R5028 += 1 };
  s1 -> s1 [0, 65535] { R5028 += 1, R4900 += 1, R626 += 1, R627 += 1 };
  s1 -> s3 [0, 65535] { R5028 += 1, R4900 += 1, R627 += 1, R628 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R5028 += 1 };
  s2 -> s1 [0, 65535] { R5028 += 1, R4900 += 1, R626 += 1, R627 += 1 };
  s2 -> s2 [0, 65535] { R5028 += 1, R4899 += 1, R4900 += 1 };
  s2 -> s3 [0, 65535] { R5028 += 1, R4900 += 1, R627 += 1, R628 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5028 += 1, R4900 += 1, R627 += 1, R628 += 1 };
  s3 -> s4 [0, 65535] { R5028 += 1, R4900 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5028 += 1 };
  s4 -> s4 [0, 65535] { R5028 += 1, R4900 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5028 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5028 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65535] { R5030 += 1, R4902 += 1, R3657 += 1, R3658 += 1 };
  s0 -> s2 [0, 65535] { R5030 += 1, R4902 += 1 };
  s0 -> s0 [0, 65535] { R5029 += 1, R5030 += 1 };
  s0 -> s3 [0, 65535] { R5030 += 1, R4901 += 1, R4902 += 1 };
  s1 -> s1 [0, 65535] { R5030 += 1, R4902 += 1, R3657 += 1, R3658 += 1 };
  s1 -> s2 [0, 65535] { R5030 += 1, R4902 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5030 += 1 };
  s2 -> s2 [0, 65535] { R5030 += 1, R4902 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5030 += 1 };
  s3 -> s1 [0, 65535] { R5030 += 1, R4902 += 1, R3657 += 1, R3658 += 1 };
  s3 -> s2 [0, 65535] { R5030 += 1, R4902 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5030 += 1, R4901 += 1, R4902 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5030 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R5032 += 1, R4903 += 1, R4904 += 1 };
  s0 -> s2 [0, 65535] { R5032 += 1, R4904 += 1 };
  s0 -> s0 [0, 65535] { R5031 += 1, R5032 += 1 };
  s1 -> s1 [0, 65535] { R5032 += 1, R4903 += 1, R4904 += 1 };
  s1 -> s2 [0, 65535] { R5032 += 1, R4904 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5032 += 1, R4904 += 1 };
  s2 -> s3 [0, 65535] { R5032 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5032 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 65535] { R5034 += 1, R4906 += 1 };
  s0 -> s0 [0, 65535] { R5033 += 1, R5034 += 1 };
  s0 -> s2 [0, 65535] { R5034 += 1, R4905 += 1, R4906 += 1 };
  s0 -> s3 [0, 65535] { R5034 += 1, R4906 += 1, R4669 += 1, R4670 += 1 };
  s1 -> s1 [0, 65535] { R5034 += 1, R4906 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5034 += 1 };
  s2 -> s1 [0, 65535] { R5034 += 1, R4906 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5034 += 1, R4905 += 1, R4906 += 1 };
  s2 -> s3 [0, 65535] { R5034 += 1, R4906 += 1, R4669 += 1, R4670 += 1 };
  s3 -> s1 [0, 65535] { R5034 += 1, R4906 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5034 += 1 };
  s3 -> s3 [0, 65535] { R5034 += 1, R4906 += 1, R4669 += 1, R4670 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5034 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 65535] { R5036 += 1, R4907 += 1, R4908 += 1 };
  s0 -> s2 [0, 65535] { R5036 += 1, R4908 += 1 };
  s0 -> s0 [0, 65535] { R5035 += 1, R5036 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5036 += 1, R4907 += 1, R4908 += 1 };
  s1 -> s2 [0, 65535] { R5036 += 1, R4908 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5036 += 1 };
  s2 -> s2 [0, 65535] { R5036 += 1, R4908 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5036 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 79] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s0 -> s2 [0, 65535] { R5038 += 1, R4909 += 1, R4910 += 1 };
  s0 -> s0 [0, 65535] { R5037 += 1, R5038 += 1 };
  s0 -> s1 [0, 65535] { R5038 += 1, R4910 += 1 };
  s0 -> s3 [80, 80] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s0 -> s4 [80, 80] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s0 -> s1 [81, 65535] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s1 -> s1 [0, 79] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R5038 += 1 };
  s1 -> s1 [0, 65535] { R5038 += 1, R4910 += 1 };
  s1 -> s3 [80, 80] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s1 -> s4 [80, 80] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s1 -> s1 [81, 65535] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s2 -> s1 [0, 79] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5038 += 1, R4909 += 1, R4910 += 1 };
  s2 -> s1 [0, 65535] { R5038 += 1, R4910 += 1 };
  s2 -> s3 [80, 80] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s2 -> s4 [80, 80] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s2 -> s1 [81, 65535] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5038 += 1 };
  s3 -> s3 [0, 65535] { R5038 += 1, R4910 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5038 += 1 };
  s4 -> s4 [0, 65535] { R5038 += 1, R4910 += 1, R4875 += 1, R4876 += 1 };
  s4 -> s7 [0, 65535] { R5038 += 1, R4910 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5038 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R5038 += 1 };
  s7 -> s7 [0, 65535] { R5038 += 1, R4910 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 65535] { R5040 += 1, R4929 += 1, R4930 += 1 };
  s0 -> s0 [0, 65535] { R5039 += 1, R5040 += 1 };
  s0 -> s2 [0, 65535] { R5040 += 1, R4930 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R5040 += 1, R4929 += 1, R4930 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5040 += 1, R4930 += 1, R40 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5040 += 1, R4930 += 1, R40 += 1 };
  s2 -> s4 [0, 65535] { R5040 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5040 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R5042 += 1, R4932 += 1 };
  s0 -> s0 [0, 65535] { R5041 += 1, R5042 += 1 };
  s0 -> s2 [0, 65535] { R5042 += 1, R4931 += 1, R4932 += 1 };
  s0 -> s3 [65, 65] { R5042 += 1, R4932 += 1 };
  s0 -> s4 [65, 65] { R5042 += 1, R4932 += 1 };
  s0 -> s5 [80, 80] { R5042 += 1, R4932 += 1 };
  s0 -> s1 [81, 65535] { R5042 += 1, R4932 += 1 };
  s1 -> s1 [0, 64] { R5042 += 1, R4932 += 1 };
  s1 -> s3 [65, 65] { R5042 += 1, R4932 += 1 };
  s1 -> s4 [65, 65] { R5042 += 1, R4932 += 1 };
  s1 -> s5 [80, 80] { R5042 += 1, R4932 += 1 };
  s1 -> s1 [81, 65535] { R5042 += 1, R4932 += 1 };
  s2 -> s1 [0, 64] { R5042 += 1, R4932 += 1 };
  s2 -> s2 [0, 65535] { R5042 += 1, R4931 += 1, R4932 += 1 };
  s2 -> s3 [65, 65] { R5042 += 1, R4932 += 1 };
  s2 -> s4 [65, 65] { R5042 += 1, R4932 += 1 };
  s2 -> s5 [80, 80] { R5042 += 1, R4932 += 1 };
  s2 -> s1 [81, 65535] { R5042 += 1, R4932 += 1 };
  s4 -> s4 [0, 65] { R5042 += 1, R4932 += 1 };
  s4 -> s8 [80, 80] { R5042 += 1, R4932 += 1 };
  s4 -> s4 [81, 65535] { R5042 += 1, R4932 += 1 };
  s5 -> s5 [0, 64] { R5042 += 1, R4932 += 1 };
  s5 -> s5 [0, 65535] { R5042 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R5042 += 1, R4932 += 1 };
  s5 -> s8 [65, 65] { R5042 += 1, R4932 += 1 };
  s5 -> s5 [80, 65535] { R5042 += 1, R4932 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5042 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R5042 += 1, R4932 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5042 += 1 };
  s8 -> s8 [80, 65535] { R5042 += 1, R4932 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 64] { R5044 += 1, R4934 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R5044 += 1, R4933 += 1, R4934 += 1 };
  s0 -> s0 [0, 65535] { R5043 += 1, R5044 += 1 };
  s0 -> s3 [65, 65] { R5044 += 1, R4934 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R5044 += 1, R4934 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R5044 += 1, R4934 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R5044 += 1, R4934 += 1, R597 += 1 };
  s1 -> s1 [0, 65535] { R5044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5044 += 1, R4934 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R5044 += 1, R4934 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R5044 += 1, R4934 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R5044 += 1, R4934 += 1, R597 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5044 += 1, R4933 += 1, R4934 += 1 };
  s2 -> s3 [65, 65] { R5044 += 1, R4934 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R5044 += 1, R4934 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R5044 += 1, R4934 += 1, R597 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5044 += 1, R4934 += 1, R597 += 1 };
  s3 -> s6 [0, 65535] { R5044 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5044 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5044 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 64] { R5046 += 1, R4936 += 1, R599 += 1 };
  s0 -> s2 [0, 65535] { R5046 += 1, R4935 += 1, R4936 += 1 };
  s0 -> s0 [0, 65535] { R5045 += 1, R5046 += 1 };
  s0 -> s3 [65, 65] { R5046 += 1, R4936 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R5046 += 1, R4936 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R5046 += 1, R4936 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R5046 += 1, R4936 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R5046 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5046 += 1, R4936 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R5046 += 1, R4936 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R5046 += 1, R4936 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R5046 += 1, R4936 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R5046 += 1, R4935 += 1, R4936 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5046 += 1, R4936 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R5046 += 1, R4936 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R5046 += 1, R4936 += 1, R599 += 1 };
  s3 -> s3 [0, 65535] { R5046 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5046 += 1, R4936 += 1, R599 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5046 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 64] { R5048 += 1, R4938 += 1, R601 += 1 };
  s0 -> s2 [0, 65535] { R5048 += 1, R4937 += 1, R4938 += 1 };
  s0 -> s0 [0, 65535] { R5047 += 1, R5048 += 1 };
  s0 -> s3 [65, 65] { R5048 += 1, R4938 += 1, R601 += 1 };
  s0 -> s4 [65, 65] { R5048 += 1, R4938 += 1, R601 += 1 };
  s0 -> s1 [66, 65535] { R5048 += 1, R4938 += 1, R601 += 1 };
  s1 -> s1 [0, 64] { R5048 += 1, R4938 += 1, R601 += 1 };
  s1 -> s1 [0, 65535] { R5048 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5048 += 1, R4938 += 1, R601 += 1 };
  s1 -> s4 [65, 65] { R5048 += 1, R4938 += 1, R601 += 1 };
  s1 -> s1 [66, 65535] { R5048 += 1, R4938 += 1, R601 += 1 };
  s2 -> s1 [0, 64] { R5048 += 1, R4938 += 1, R601 += 1 };
  s2 -> s2 [0, 65535] { R5048 += 1, R4937 += 1, R4938 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5048 += 1, R4938 += 1, R601 += 1 };
  s2 -> s4 [65, 65] { R5048 += 1, R4938 += 1, R601 += 1 };
  s2 -> s1 [66, 65535] { R5048 += 1, R4938 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R5048 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5048 += 1 };
  s4 -> s4 [0, 65535] { R5048 += 1, R4938 += 1, R601 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5048 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 64] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s0 -> s2 [0, 65535] { R5050 += 1, R4939 += 1, R4940 += 1 };
  s0 -> s0 [0, 65535] { R5049 += 1, R5050 += 1 };
  s0 -> s3 [65, 65] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s0 -> s4 [65, 65] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s0 -> s1 [66, 65535] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 64] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 65535] { R5050 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s1 -> s4 [65, 65] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [66, 65535] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [0, 64] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s2 -> s2 [0, 65535] { R5050 += 1, R4939 += 1, R4940 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [65, 65] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [66, 65535] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5050 += 1 };
  s3 -> s3 [0, 65535] { R5050 += 1, R4940 += 1, R603 += 1, R604 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5050 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5050 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R5052 += 1, R4942 += 1 };
  s0 -> s2 [0, 65535] { R5052 += 1, R4941 += 1, R4942 += 1 };
  s0 -> s0 [0, 65535] { R5051 += 1, R5052 += 1 };
  s0 -> s3 [65, 65] { R5052 += 1, R4942 += 1 };
  s0 -> s4 [65, 65] { R5052 += 1, R4942 += 1 };
  s0 -> s1 [66, 65535] { R5052 += 1, R4942 += 1 };
  s1 -> s1 [0, 64] { R5052 += 1, R4942 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5052 += 1 };
  s1 -> s3 [65, 65] { R5052 += 1, R4942 += 1 };
  s1 -> s4 [65, 65] { R5052 += 1, R4942 += 1 };
  s1 -> s1 [66, 65535] { R5052 += 1, R4942 += 1 };
  s2 -> s1 [0, 64] { R5052 += 1, R4942 += 1 };
  s2 -> s2 [0, 65535] { R5052 += 1, R4941 += 1, R4942 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5052 += 1, R4942 += 1 };
  s2 -> s4 [65, 65] { R5052 += 1, R4942 += 1 };
  s2 -> s1 [66, 65535] { R5052 += 1, R4942 += 1 };
  s3 -> s3 [0, 65535] { R5052 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5052 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5052 += 1, R4942 += 1 };
  s5 -> s5 [0, 65535] { R5052 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R5053 += 1, R5054 += 1 };
  s0 -> s2 [0, 65535] { R5054 += 1, R4943 += 1, R4944 += 1 };
  s0 -> s3 [65, 65] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5054 += 1 };
  s1 -> s3 [65, 65] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5054 += 1, R4943 += 1, R4944 += 1 };
  s2 -> s3 [65, 65] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5054 += 1, R4944 += 1, R609 += 1, R610 += 1 };
  s3 -> s6 [0, 65535] { R5054 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5054 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5054 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s0 -> s0 [0, 65535] { R5055 += 1, R5056 += 1 };
  s0 -> s2 [0, 65535] { R5056 += 1, R4945 += 1, R4946 += 1 };
  s0 -> s3 [65, 65] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s0 -> s4 [65, 65] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s0 -> s1 [66, 65535] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [0, 64] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [0, 65535] { R5056 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s1 -> s4 [65, 65] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [66, 65535] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [0, 64] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5056 += 1, R4945 += 1, R4946 += 1 };
  s2 -> s3 [65, 65] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [65, 65] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [66, 65535] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s3 -> s3 [0, 65535] { R5056 += 1, R4946 += 1, R613 += 1, R614 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5056 += 1 };
  s4 -> s4 [0, 65535] { R5056 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5056 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s0 -> s2 [0, 65535] { R5058 += 1, R4947 += 1, R4948 += 1 };
  s0 -> s0 [0, 65535] { R5057 += 1, R5058 += 1 };
  s0 -> s3 [65, 65] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s0 -> s4 [65, 65] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s0 -> s1 [66, 65535] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 64] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 65535] { R5058 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s1 -> s4 [65, 65] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [66, 65535] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [0, 64] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R5058 += 1, R4947 += 1, R4948 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s2 -> s4 [65, 65] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [66, 65535] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s3 -> s6 [0, 65535] { R5058 += 1 };
  s3 -> s3 [0, 65535] { R5058 += 1, R4948 += 1, R619 += 1, R620 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5058 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5058 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s0 -> s0 [0, 65535] { R5059 += 1, R5060 += 1 };
  s0 -> s2 [0, 65535] { R5060 += 1, R4949 += 1, R4950 += 1 };
  s0 -> s3 [65, 65] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s0 -> s4 [65, 65] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s0 -> s1 [66, 65535] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [0, 64] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5060 += 1 };
  s1 -> s3 [65, 65] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s1 -> s4 [65, 65] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [66, 65535] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [0, 64] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5060 += 1, R4949 += 1, R4950 += 1 };
  s2 -> s3 [65, 65] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s2 -> s4 [65, 65] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [66, 65535] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5060 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5060 += 1 };
  s4 -> s4 [0, 65535] { R5060 += 1, R4950 += 1, R623 += 1, R624 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5060 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s2 [0, 64] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s0 [0, 65535] { R5061 += 1, R5062 += 1 };
  s0 -> s3 [0, 65535] { R5062 += 1, R4951 += 1, R4952 += 1 };
  s0 -> s4 [65, 65] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s5 [65, 65] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s6 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s7 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s1 [66, 65535] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s2 [66, 65535] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s1 [0, 64] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s1 -> s2 [0, 64] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s4 [65, 65] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s1 -> s5 [65, 65] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s1 -> s6 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s7 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s1 [66, 65535] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s1 -> s2 [66, 65535] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s2 [0, 64] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5062 += 1 };
  s2 -> s6 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s7 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s2 [66, 65535] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s1 [0, 64] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s2 [0, 64] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s3 [0, 65535] { R5062 += 1, R4951 += 1, R4952 += 1 };
  s3 -> s4 [65, 65] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s5 [65, 65] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s6 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s7 [65, 65] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s1 [66, 65535] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s2 [66, 65535] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s5 -> s5 [0, 65535] { R5062 += 1, R4952 += 1, R3653 += 1, R3654 += 1 };
  s5 -> s7 [0, 65535] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s6 -> s6 [0, 65535] { R5062 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R5062 += 1, R4952 += 1, R3654 += 1, R3655 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R5062 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5062 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R5064 += 1, R4954 += 1 };
  s0 -> s2 [0, 65535] { R5064 += 1, R4953 += 1, R4954 += 1 };
  s0 -> s0 [0, 65535] { R5063 += 1, R5064 += 1 };
  s0 -> s3 [65, 65] { R5064 += 1, R4954 += 1 };
  s0 -> s4 [65, 65] { R5064 += 1, R4954 += 1 };
  s0 -> s1 [66, 65535] { R5064 += 1, R4954 += 1 };
  s1 -> s1 [0, 64] { R5064 += 1, R4954 += 1 };
  s1 -> s1 [0, 65535] { R5064 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5064 += 1, R4954 += 1 };
  s1 -> s4 [65, 65] { R5064 += 1, R4954 += 1 };
  s1 -> s1 [66, 65535] { R5064 += 1, R4954 += 1 };
  s2 -> s1 [0, 64] { R5064 += 1, R4954 += 1 };
  s2 -> s2 [0, 65535] { R5064 += 1, R4953 += 1, R4954 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5064 += 1, R4954 += 1 };
  s2 -> s4 [65, 65] { R5064 += 1, R4954 += 1 };
  s2 -> s1 [66, 65535] { R5064 += 1, R4954 += 1 };
  s3 -> s3 [0, 65535] { R5064 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5064 += 1 };
  s4 -> s4 [0, 65535] { R5064 += 1, R4954 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5064 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s0 -> s2 [0, 64] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s0 -> s0 [0, 65535] { R5065 += 1, R5066 += 1 };
  s0 -> s3 [0, 65535] { R5066 += 1, R4955 += 1, R4956 += 1 };
  s0 -> s4 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s0 -> s5 [65, 65] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s0 -> s6 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s0 -> s7 [65, 65] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s0 -> s1 [66, 65535] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s0 -> s2 [66, 65535] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s1 -> s1 [0, 64] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R5066 += 1 };
  s1 -> s4 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s1 -> s6 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s1 -> s1 [66, 65535] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s2 -> s1 [0, 64] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s2 -> s2 [0, 64] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s2 -> s4 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s2 -> s5 [65, 65] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s2 -> s6 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s2 -> s7 [65, 65] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s2 -> s1 [66, 65535] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s2 -> s2 [66, 65535] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s3 -> s1 [0, 64] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s3 -> s2 [0, 64] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s3 -> s3 [0, 65535] { R5066 += 1, R4955 += 1, R4956 += 1 };
  s3 -> s4 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s3 -> s5 [65, 65] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s3 -> s6 [65, 65] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s3 -> s7 [65, 65] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s3 -> s1 [66, 65535] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s3 -> s2 [66, 65535] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s4 -> s4 [0, 65535] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R5066 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5066 += 1 };
  s7 -> s4 [0, 65535] { R5066 += 1, R4956 += 1, R4666 += 1, R4667 += 1 };
  s7 -> s7 [0, 65535] { R5066 += 1, R4956 += 1, R4665 += 1, R4666 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5066 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R5068 += 1, R4958 += 1 };
  s0 -> s2 [0, 65535] { R5068 += 1, R4957 += 1, R4958 += 1 };
  s0 -> s0 [0, 65535] { R5067 += 1, R5068 += 1 };
  s0 -> s3 [65, 65] { R5068 += 1, R4958 += 1 };
  s0 -> s4 [65, 65] { R5068 += 1, R4958 += 1 };
  s0 -> s1 [66, 65535] { R5068 += 1, R4958 += 1 };
  s1 -> s1 [0, 64] { R5068 += 1, R4958 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5068 += 1 };
  s1 -> s3 [65, 65] { R5068 += 1, R4958 += 1 };
  s1 -> s4 [65, 65] { R5068 += 1, R4958 += 1 };
  s1 -> s1 [66, 65535] { R5068 += 1, R4958 += 1 };
  s2 -> s1 [0, 64] { R5068 += 1, R4958 += 1 };
  s2 -> s2 [0, 65535] { R5068 += 1, R4957 += 1, R4958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5068 += 1, R4958 += 1 };
  s2 -> s4 [65, 65] { R5068 += 1, R4958 += 1 };
  s2 -> s1 [66, 65535] { R5068 += 1, R4958 += 1 };
  s3 -> s3 [0, 65535] { R5068 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5068 += 1 };
  s4 -> s4 [0, 65535] { R5068 += 1, R4958 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5068 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s0 -> s2 [0, 64] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s0 -> s0 [0, 65535] { R5069 += 1, R5070 += 1 };
  s0 -> s3 [0, 65535] { R5070 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s4 [65, 65] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s0 -> s5 [65, 65] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s0 -> s6 [65, 65] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s0 -> s7 [65, 65] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s0 -> s1 [66, 79] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s0 -> s2 [66, 65535] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s0 -> s1 [81, 65535] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s1 -> s1 [0, 64] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R5070 += 1 };
  s1 -> s4 [65, 65] { R5070 += 1, R4960 += 1 };
  s1 -> s6 [65, 65] { R5070 += 1, R4960 += 1 };
  s1 -> s1 [66, 79] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s1 -> s1 [66, 65535] { R5070 += 1, R4960 += 1 };
  s1 -> s1 [81, 65535] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s2 -> s1 [0, 64] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s2 -> s2 [0, 64] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s2 -> s4 [65, 65] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s2 -> s5 [65, 65] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s2 -> s6 [65, 65] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s2 -> s7 [65, 65] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s2 -> s1 [66, 79] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s2 -> s2 [66, 65535] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s2 -> s1 [81, 65535] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s3 -> s1 [0, 64] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s3 -> s2 [0, 64] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s3 -> s3 [0, 65535] { R5070 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s4 [65, 65] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s3 -> s5 [65, 65] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s3 -> s6 [65, 65] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s3 -> s7 [65, 65] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s3 -> s1 [66, 79] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s3 -> s2 [66, 65535] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s3 -> s1 [81, 65535] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s4 -> s4 [0, 79] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R5070 += 1, R4960 += 1 };
  s4 -> s9 [0, 65535] { R5070 += 1 };
  s4 -> s4 [81, 65535] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5070 += 1 };
  s7 -> s4 [0, 79] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s7 -> s7 [0, 65535] { R5070 += 1, R4960 += 1, R4871 += 1, R4872 += 1 };
  s7 -> s4 [81, 65535] { R5070 += 1, R4960 += 1, R4872 += 1, R4873 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5070 += 1 };
  accepting s4, s8, s9, s6, s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P92
automaton P92_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R6 = R4910 && R7 = R5070 && R45 = 0 && R46 = 1 && R47 = 0 && R48 = 1 && R73 = 0 && R74 = R4910 && R75 = 0 && R76 = R4910 && R77 = 0 && R78 = R4910 && R79 = 0 && R80 = R5070 && R81 = 0 && R82 = R5070 && R83 = 0 && R84 = R5070 && R598 + R597 = 0 && R4877 = 0 && R4878 = R4910 && R4879 = 0 && R4880 = R4910 && R4881 = 0 && R4882 = R4910 && R4883 = 0 && R4884 = R4910 && R4885 = 0 && R4886 = R4910 && R4887 = 0 && R4888 = R4910 && R4889 = 0 && R4890 = R4910 && R4891 = 0 && R4892 = R4910 && R4893 = 0 && R4894 = R4910 && R4895 = 0 && R4896 = R4910 && R4897 = 0 && R4898 = R4910 && R4899 = 0 && R4900 = R4910 && R4901 = 0 && R4902 = R4910 && R4903 = 0 && R4904 = R4910 && R4905 = 0 && R4906 = R4910 && R4907 = 0 && R4908 = R4910 && R4909 = 0 && R4911 = 0 && R4912 = R5070 && R4913 = 0 && R4914 = R5070 && R4915 = 0 && R4916 = R5070 && R4917 = 0 && R4918 = R5070 && R4919 = 0 && R4920 = R5070 && R4921 = 0 && R4922 = R5070 && R4923 = 0 && R4924 = R5070 && R4925 = 0 && R4926 = R5070 && R4927 = 0 && R4928 = R5070 && R4931 = 0 && R4932 = 0 && R4951 = 0 && R4952 = 0 && R4955 = 0 && R4956 = 0 && R4959 = 0 && R4960 = 0 && R4979 = 10 && R4980 = R5070 && R4981 = 10 && R4982 = R5070 && R4983 = 10 && R4984 = R5070 && R4985 = 10 && R4986 = R5070 && R4987 = 10 && R4988 = R5070 && R4989 = 10 && R4990 = R5070 && R4991 = 10 && R4992 = R5070 && R4993 = 10 && R4994 = R5070 && R4995 = 10 && R4996 = R5070 && R4997 = 10 && R4998 = R5070 && R4999 = 10 && R5000 = R5070 && R5001 = 10 && R5002 = R5070 && R5003 = 10 && R5004 = R5070 && R5005 = 10 && R5006 = R5070 && R5007 = 10 && R5008 = R5070 && R5009 = 10 && R5010 = R5070 && R5011 = 10 && R5012 = R5070 && R5013 = 10 && R5014 = R5070 && R5015 = 10 && R5016 = R5070 && R5017 = 10 && R5018 = R5070 && R5019 = 10 && R5020 = R5070 && R5021 = 10 && R5022 = R5070 && R5023 = 10 && R5024 = R5070 && R5025 = 10 && R5026 = R5070 && R5027 = 10 && R5028 = R5070 && R5029 = 10 && R5030 = R5070 && R5031 = 10 && R5032 = R5070 && R5033 = 10 && R5034 = R5070 && R5035 = 10 && R5036 = R5070 && R5037 = 10 && R5038 = R5070 && R5039 = 10 && R5040 = R5070 && R5041 = 10 && R5042 = R5070 && R5043 = 10 && R5044 = R5070 && R5045 = 10 && R5046 = R5070 && R5047 = 10 && R5048 = R5070 && R5049 = 10 && R5050 = R5070 && R5051 = 10 && R5052 = R5070 && R5053 = 10 && R5054 = R5070 && R5055 = 10 && R5056 = R5070 && R5057 = 10 && R5058 = R5070 && R5059 = 10 && R5060 = R5070 && R5061 = 10 && R5062 = R5070 && R5063 = 10 && R5064 = R5070 && R5065 = 10 && R5066 = R5070 && R5067 = 10 && R5068 = R5070 && R5069 = 10 && R52 + R51 != 0 && R54 + R53 != 0 && R122 + R119 + R134 + R131 != 0 && R628 + R625 + R4876 + R4873 != 0 && R18 < 1 && R19 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && -1*R104 + -1*R103 < 1 && R106 + R105 < 1 && R600 + R599 < 1 && R602 + R601 < 1 && 0 < R4910 && 9 < R5070 && (R104 + R103 != 0 || R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R115 + R113 = 0 && R116 + R114 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R120 + R117 = 0 && R121 + R118 = 0)) && (R110 + R107 != 0 || R104 + R103 + -1*R111 + -1*R108 = 0 || R104 + R103 < 1) && (R115 + R113 != 0 || R104 + R103 + -1*R116 + -1*R114 = 0 || R104 + R103 < 1) && (R120 + R117 != 0 || R104 + R103 + -1*R121 + -1*R118 = 0 || R104 + R103 < 1) && (R39 = 0 || (R95 = 0 && R96 = 0)) && (R39 = 0 || (R97 = 0 && R98 = 0)) && (R40 = 0 || (R4929 = 0 && R4930 = 0)) && (R40 = 0 || (R4933 = 0 && R4934 = 0)) && (R40 = 0 || (R4935 = 0 && R4936 = 0)) && (R40 = 0 || (R4937 = 0 && R4938 = 0)) && (R40 = 0 || (R4939 = 0 && R4940 = 0)) && (R40 = 0 || (R4941 = 0 && R4942 = 0)) && (R40 = 0 || (R4943 = 0 && R4944 = 0)) && (R40 = 0 || (R4945 = 0 && R4946 = 0)) && (R40 = 0 || (R4947 = 0 && R4948 = 0)) && (R40 = 0 || (R4949 = 0 && R4950 = 0)) && (R40 = 0 || (R4953 = 0 && R4954 = 0)) && (R40 = 0 || (R4957 = 0 && R4958 = 0)) && (R43 = 0 || (R4961 = 0 && R4962 = 0)) && (R43 = 0 || (R4963 = 0 && R4964 = 0)) && (R43 = 0 || (R4965 = 0 && R4966 = 0)) && (R43 = 0 || (R4967 = 0 && R4968 = 0)) && (R43 = 0 || (R4969 = 0 && R4970 = 0)) && (R43 = 0 || (R4971 = 0 && R4972 = 0)) && (R43 = 0 || (R4973 = 0 && R4974 = 0)) && (R43 = 0 || (R4975 = 0 && R4976 = 0)) && (R43 = 0 || (R4977 = 0 && R4978 = 0)) && (R44 = 0 || (R99 = 0 && R100 = 0)) && (R44 = 0 || (R101 = 0 && R102 = 0)) && (R110 + R107 = 0 || R104 + R103 < 1) && (R115 + R113 = 0 || R104 + R103 < 1) && (R120 + R117 = 0 || R104 + R103 < 1) && (R128 + R125 = 0 || (R126 + R123 = 0 && R127 + R124 = 0)) && (R128 + R125 = 0 || (R132 + R129 = 0 && R133 + R130 = 0)) && (R608 + R605 = 0 || (R606 + R603 = 0 && R607 + R604 = 0)) && (R618 + R615 = 0 || (R611 + R609 = 0 && R612 + R610 = 0)) && (R618 + R615 = 0 || (R616 + R613 = 0 && R617 + R614 = 0)) && (R618 + R615 = 0 || (R621 + R619 = 0 && R622 + R620 = 0)) && (R618 + R615 = 0 || (R626 + R623 = 0 && R627 + R624 = 0)) && (R3658 + R3655 = 0 || (R3656 + R3653 = 0 && R3657 + R3654 = 0)) && (R4670 + R4667 = 0 || (R4668 + R4665 = 0 && R4669 + R4666 = 0)) && (R4670 + R4667 = 0 || (R4874 + R4871 = 0 && R4875 + R4872 = 0));
// End of Parikh automata intersection problem
