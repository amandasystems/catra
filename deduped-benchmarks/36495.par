// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R18, R19, R22, R25, R28, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R37, R38, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R39, R3900, R3901, R3902, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R3929, R3930, R3931, R3932, R3933, R3934, R3935, R3936, R3937, R3938, R3939, R3940, R3941, R3942, R3943, R3944, R3945, R3946, R3947, R3948, R3949, R3950, R3951, R3952, R3953, R3954, R3955, R3956, R3957, R3958, R3959, R3960, R3961, R3962, R3963, R3964, R3965, R3966, R3967, R3968, R3969, R3970, R3971, R3972, R3973, R3974, R3975, R3976, R3977, R3978, R3979, R3980, R3981, R3982, R3983, R3984, R3985, R3986, R3987, R3988, R3989, R3990, R3991, R3992, R3993, R3994, R3995, R3996, R3997, R3998, R3999, R40, R4000, R4001, R4002, R4003, R4004, R4005, R4006, R4007, R4008, R4009, R4010, R4011, R4012, R4013, R4014, R4015, R4016, R4017, R4018, R4019, R4020, R4021, R4022, R4023, R4024, R4025, R4026, R4027, R4028, R4029, R4030, R4031, R4032, R4033, R4034, R4035, R4036, R4037, R4038, R4039, R4040, R4041, R4042, R4043, R4044, R4045, R4046, R4047, R4048, R4049, R4050, R4051, R4052, R4053, R4054, R4055, R4056, R4057, R4058, R4059, R4060, R4061, R4062, R4063, R4064, R41, R42, R43, R44, R45, R46, R47, R48, R51, R52, R53, R54, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R7, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P104
automaton P104_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R25 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [108, 108] { R82 += 1 };
  s0 -> s1 [109, 65535] { R82 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1 };
  s2 -> s1 [0, 110] { R82 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R82 += 1 };
  s2 -> s1 [112, 65535] { R82 += 1 };
  s3 -> s1 [0, 98] { R82 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R82 += 1 };
  s3 -> s1 [100, 65535] { R82 += 1 };
  s4 -> s1 [0, 96] { R82 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R82 += 1 };
  s4 -> s1 [98, 65535] { R82 += 1 };
  s5 -> s1 [0, 107] { R82 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R82 += 1 };
  s5 -> s1 [109, 65535] { R82 += 1 };
  s6 -> s1 [0, 103] { R82 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R82 += 1 };
  s6 -> s1 [105, 65535] { R82 += 1 };
  s7 -> s1 [0, 110] { R82 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R82 += 1 };
  s7 -> s1 [112, 65535] { R82 += 1 };
  s8 -> s1 [0, 114] { R82 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R82 += 1 };
  s8 -> s1 [116, 65535] { R82 += 1 };
  s9 -> s1 [0, 115] { R82 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R82 += 1 };
  s9 -> s1 [117, 65535] { R82 += 1 };
  s10 -> s1 [0, 65535] { R82 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3905 += 1, R3906 += 1 };
  s0 -> s1 [0, 65535] { R3906 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R3906 += 1, R41 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3908 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R3907 += 1, R3908 += 1 };
  s1 -> s1 [0, 65535] { R3908 += 1, R104 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R3910 += 1 };
  s0 -> s0 [0, 65535] { R3909 += 1, R3910 += 1 };
  s0 -> s2 [0, 65535] { R3910 += 1, R106 += 1 };
  s0 -> s1 [78, 65535] { R3910 += 1 };
  s1 -> s1 [0, 76] { R3910 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R3910 += 1 };
  s2 -> s1 [0, 76] { R3910 += 1 };
  s2 -> s2 [0, 65535] { R3910 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R3910 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R3911 += 1, R3912 += 1 };
  s0 -> s1 [0, 65535] { R3912 += 1, R110 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R3912 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R3912 += 1, R110 += 1, R111 += 1 };
  s1 -> s2 [0, 65535] { R3912 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3912 += 1 };
  s2 -> s2 [0, 65535] { R3912 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3912 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R3914 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R3914 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3913 += 1, R3914 += 1 };
  s0 -> s3 [108, 108] { R3914 += 1, R116 += 1 };
  s0 -> s1 [109, 65535] { R3914 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R3914 += 1, R116 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3914 += 1 };
  s2 -> s1 [0, 107] { R3914 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R3914 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3914 += 1, R116 += 1 };
  s2 -> s1 [109, 65535] { R3914 += 1, R116 += 1 };
  s3 -> s1 [0, 110] { R3914 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3914 += 1 };
  s3 -> s5 [111, 111] { R3914 += 1, R116 += 1 };
  s3 -> s1 [112, 65535] { R3914 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3914 += 1, R116 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3914 += 1 };
  s5 -> s6 [99, 99] { R3914 += 1, R116 += 1 };
  s5 -> s1 [100, 65535] { R3914 += 1, R116 += 1 };
  s6 -> s1 [0, 96] { R3914 += 1, R116 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3914 += 1 };
  s6 -> s7 [97, 97] { R3914 += 1, R116 += 1 };
  s6 -> s1 [98, 65535] { R3914 += 1, R116 += 1 };
  s7 -> s1 [0, 107] { R3914 += 1, R116 += 1 };
  s7 -> s7 [0, 65535] { R3914 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3914 += 1, R116 += 1 };
  s7 -> s1 [109, 65535] { R3914 += 1, R116 += 1 };
  s8 -> s1 [0, 103] { R3914 += 1, R116 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3914 += 1 };
  s8 -> s9 [104, 104] { R3914 += 1, R116 += 1 };
  s8 -> s1 [105, 65535] { R3914 += 1, R116 += 1 };
  s9 -> s1 [0, 110] { R3914 += 1, R116 += 1 };
  s9 -> s9 [0, 65535] { R3914 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3914 += 1, R116 += 1 };
  s9 -> s1 [112, 65535] { R3914 += 1, R116 += 1 };
  s10 -> s1 [0, 114] { R3914 += 1, R116 += 1 };
  s10 -> s10 [0, 65535] { R3914 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3914 += 1, R116 += 1 };
  s10 -> s1 [116, 65535] { R3914 += 1, R116 += 1 };
  s11 -> s1 [0, 115] { R3914 += 1, R116 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3914 += 1 };
  s11 -> s12 [116, 116] { R3914 += 1, R116 += 1 };
  s11 -> s1 [117, 65535] { R3914 += 1, R116 += 1 };
  s12 -> s1 [0, 65535] { R3914 += 1, R116 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3914 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3916 += 1, R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R3916 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R3915 += 1, R3916 += 1 };
  s1 -> s4 [0, 65535] { R3916 += 1 };
  s1 -> s1 [0, 65535] { R3916 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3916 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535] { R3916 += 1, R120 += 1, R121 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3916 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3918 += 1, R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R3918 += 1, R126 += 1, R127 += 1 };
  s0 -> s0 [0, 65535] { R3917 += 1, R3918 += 1 };
  s1 -> s1 [0, 65535] { R3918 += 1, R127 += 1, R128 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3918 += 1 };
  s2 -> s1 [0, 65535] { R3918 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3918 += 1, R126 += 1, R127 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3918 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3920 += 1 };
  s0 -> s0 [0, 65535] { R3919 += 1, R3920 += 1 };
  s1 -> s1 [0, 65535] { R3920 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 76] { R3922 += 1, R133 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R3922 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R3921 += 1, R3922 += 1 };
  s0 -> s3 [77, 77] { R3922 += 1, R133 += 1, R134 += 1 };
  s0 -> s4 [77, 77] { R3922 += 1, R133 += 1, R134 += 1 };
  s0 -> s1 [78, 65535] { R3922 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [0, 76] { R3922 += 1, R133 += 1, R134 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3922 += 1 };
  s1 -> s3 [77, 77] { R3922 += 1, R133 += 1, R134 += 1 };
  s1 -> s4 [77, 77] { R3922 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [78, 65535] { R3922 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [0, 76] { R3922 += 1, R133 += 1, R134 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3922 += 1, R132 += 1, R133 += 1 };
  s2 -> s3 [77, 77] { R3922 += 1, R133 += 1, R134 += 1 };
  s2 -> s4 [77, 77] { R3922 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [78, 65535] { R3922 += 1, R133 += 1, R134 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3922 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3922 += 1 };
  s4 -> s4 [0, 65535] { R3922 += 1, R133 += 1, R134 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3922 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3955 += 1, R3956 += 1 };
  s0 -> s1 [0, 65535] { R3956 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R3956 += 1, R43 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3958 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R3957 += 1, R3958 += 1 };
  s0 -> s2 [65, 65] { R3958 += 1, R103 += 1 };
  s0 -> s3 [65, 65] { R3958 += 1, R103 += 1 };
  s0 -> s1 [66, 65535] { R3958 += 1, R103 += 1 };
  s1 -> s1 [0, 64] { R3958 += 1, R103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3958 += 1, R103 += 1 };
  s1 -> s3 [65, 65] { R3958 += 1, R103 += 1 };
  s1 -> s1 [66, 65535] { R3958 += 1, R103 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3958 += 1, R103 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3960 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R3959 += 1, R3960 += 1 };
  s0 -> s2 [65, 65] { R3960 += 1, R105 += 1 };
  s0 -> s3 [65, 65] { R3960 += 1, R105 += 1 };
  s0 -> s1 [66, 65535] { R3960 += 1, R105 += 1 };
  s1 -> s1 [0, 64] { R3960 += 1, R105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3960 += 1, R105 += 1 };
  s1 -> s3 [65, 65] { R3960 += 1, R105 += 1 };
  s1 -> s1 [66, 65535] { R3960 += 1, R105 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3960 += 1, R105 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3962 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R3961 += 1, R3962 += 1 };
  s0 -> s2 [65, 65] { R3962 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R3962 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R3962 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R3962 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3962 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R3962 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R3962 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R3962 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3964 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R3963 += 1, R3964 += 1 };
  s0 -> s2 [65, 65] { R3964 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R3964 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R3964 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R3964 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3964 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R3964 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R3964 += 1, R113 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R3964 += 1, R113 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3966 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R3965 += 1, R3966 += 1 };
  s0 -> s2 [65, 65] { R3966 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R3966 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R3966 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R3966 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3966 += 1, R117 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R3966 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R3966 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3966 += 1, R117 += 1, R118 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3968 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R3967 += 1, R3968 += 1 };
  s0 -> s2 [65, 65] { R3968 += 1, R123 += 1, R124 += 1 };
  s0 -> s3 [65, 65] { R3968 += 1, R123 += 1, R124 += 1 };
  s0 -> s1 [66, 65535] { R3968 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 64] { R3968 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3968 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [65, 65] { R3968 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [66, 65535] { R3968 += 1, R123 += 1, R124 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3968 += 1, R123 += 1, R124 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3970 += 1 };
  s0 -> s0 [0, 65535] { R3969 += 1, R3970 += 1 };
  s0 -> s2 [65, 65] { R3970 += 1 };
  s0 -> s3 [65, 65] { R3970 += 1 };
  s0 -> s1 [66, 65535] { R3970 += 1 };
  s1 -> s1 [0, 64] { R3970 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3970 += 1 };
  s1 -> s3 [65, 65] { R3970 += 1 };
  s1 -> s1 [66, 65535] { R3970 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3970 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3972 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R3971 += 1, R3972 += 1 };
  s0 -> s2 [65, 65] { R3972 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [65, 65] { R3972 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [66, 65535] { R3972 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 64] { R3972 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3972 += 1, R129 += 1, R130 += 1 };
  s1 -> s3 [65, 65] { R3972 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [66, 65535] { R3972 += 1, R129 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R3972 += 1, R129 += 1, R130 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 43] { R3974 += 1 };
  s0 -> s0 [0, 65535] { R3973 += 1, R3974 += 1 };
  s0 -> s1 [45, 45] { R3974 += 1 };
  s0 -> s2 [46, 46] { R3974 += 1 };
  s0 -> s1 [48, 62] { R3974 += 1 };
  s0 -> s3 [65, 65] { R3974 += 1 };
  s0 -> s1 [66, 65535] { R3974 += 1 };
  s1 -> s1 [0, 43] { R3974 += 1 };
  s1 -> s1 [45, 45] { R3974 += 1 };
  s1 -> s2 [46, 46] { R3974 += 1 };
  s1 -> s1 [48, 62] { R3974 += 1 };
  s1 -> s3 [65, 65] { R3974 += 1 };
  s1 -> s1 [66, 65535] { R3974 += 1 };
  s2 -> s1 [0, 43] { R3974 += 1 };
  s2 -> s1 [45, 45] { R3974 += 1 };
  s2 -> s2 [46, 46] { R3974 += 1 };
  s2 -> s1 [48, 62] { R3974 += 1 };
  s2 -> s3 [65, 65] { R3974 += 1 };
  s2 -> s1 [66, 114] { R3974 += 1 };
  s2 -> s8 [115, 115] { R3974 += 1 };
  s2 -> s1 [116, 65535] { R3974 += 1 };
  s3 -> s3 [0, 43] { R3974 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3974 += 1 };
  s3 -> s4 [46, 46] { R3974 += 1 };
  s3 -> s3 [48, 62] { R3974 += 1 };
  s3 -> s3 [65, 65535] { R3974 += 1 };
  s4 -> s3 [0, 43] { R3974 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3974 += 1 };
  s4 -> s4 [46, 46] { R3974 += 1 };
  s4 -> s3 [48, 62] { R3974 += 1 };
  s4 -> s3 [65, 114] { R3974 += 1 };
  s4 -> s5 [115, 115] { R3974 += 1 };
  s4 -> s3 [116, 65535] { R3974 += 1 };
  s5 -> s3 [0, 43] { R3974 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3974 += 1 };
  s5 -> s4 [46, 46] { R3974 += 1 };
  s5 -> s3 [48, 62] { R3974 += 1 };
  s5 -> s3 [65, 110] { R3974 += 1 };
  s5 -> s6 [111, 111] { R3974 += 1 };
  s5 -> s3 [112, 65535] { R3974 += 1 };
  s6 -> s3 [0, 43] { R3974 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3974 += 1 };
  s6 -> s4 [46, 46] { R3974 += 1 };
  s6 -> s3 [48, 62] { R3974 += 1 };
  s6 -> s3 [65, 98] { R3974 += 1 };
  s6 -> s7 [99, 99] { R3974 += 1 };
  s6 -> s3 [100, 65535] { R3974 += 1 };
  s7 -> s3 [0, 43] { R3974 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3974 += 1 };
  s7 -> s4 [46, 46] { R3974 += 1 };
  s7 -> s3 [48, 62] { R3974 += 1 };
  s7 -> s3 [65, 106] { R3974 += 1 };
  s7 -> s3 [108, 65535] { R3974 += 1 };
  s8 -> s1 [0, 43] { R3974 += 1 };
  s8 -> s1 [45, 45] { R3974 += 1 };
  s8 -> s2 [46, 46] { R3974 += 1 };
  s8 -> s1 [48, 62] { R3974 += 1 };
  s8 -> s3 [65, 65] { R3974 += 1 };
  s8 -> s1 [66, 110] { R3974 += 1 };
  s8 -> s9 [111, 111] { R3974 += 1 };
  s8 -> s1 [112, 65535] { R3974 += 1 };
  s9 -> s1 [0, 43] { R3974 += 1 };
  s9 -> s1 [45, 45] { R3974 += 1 };
  s9 -> s2 [46, 46] { R3974 += 1 };
  s9 -> s1 [48, 62] { R3974 += 1 };
  s9 -> s3 [65, 65] { R3974 += 1 };
  s9 -> s1 [66, 98] { R3974 += 1 };
  s9 -> s10 [99, 99] { R3974 += 1 };
  s9 -> s1 [100, 65535] { R3974 += 1 };
  s10 -> s1 [0, 43] { R3974 += 1 };
  s10 -> s1 [45, 45] { R3974 += 1 };
  s10 -> s2 [46, 46] { R3974 += 1 };
  s10 -> s1 [48, 62] { R3974 += 1 };
  s10 -> s3 [65, 65] { R3974 += 1 };
  s10 -> s1 [66, 106] { R3974 += 1 };
  s10 -> s1 [108, 65535] { R3974 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3975 += 1, R3976 += 1 };
  s0 -> s1 [0, 65535] { R3976 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3976 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 57] { R3978 += 1 };
  s0 -> s0 [0, 65535] { R3977 += 1, R3978 += 1 };
  s0 -> s2 [0, 65535] { R3978 += 1, R18 += 1 };
  s0 -> s3 [58, 58] { R3978 += 1 };
  s0 -> s1 [59, 65535] { R3978 += 1 };
  s1 -> s1 [0, 57] { R3978 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3978 += 1 };
  s1 -> s1 [59, 65535] { R3978 += 1 };
  s2 -> s1 [0, 57] { R3978 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3978 += 1, R18 += 1 };
  s2 -> s3 [58, 58] { R3978 += 1 };
  s2 -> s1 [59, 65535] { R3978 += 1 };
  s3 -> s3 [0, 65535] { R3978 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 42] { R3980 += 1 };
  s0 -> s0 [0, 65535] { R3979 += 1, R3980 += 1 };
  s0 -> s2 [0, 65535] { R3980 += 1, R19 += 1 };
  s0 -> s3 [43, 43] { R3980 += 1 };
  s0 -> s1 [44, 65535] { R3980 += 1 };
  s1 -> s1 [0, 42] { R3980 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3980 += 1 };
  s1 -> s1 [44, 65535] { R3980 += 1 };
  s2 -> s1 [0, 42] { R3980 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3980 += 1, R19 += 1 };
  s2 -> s3 [43, 43] { R3980 += 1 };
  s2 -> s1 [44, 65535] { R3980 += 1 };
  s3 -> s3 [0, 65535] { R3980 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3982 += 1 };
  s0 -> s0 [0, 65535] { R3981 += 1, R3982 += 1 };
  s0 -> s2 [0, 65535] { R3982 += 1, R22 += 1 };
  s0 -> s3 [65, 65] { R3982 += 1 };
  s0 -> s1 [66, 65535] { R3982 += 1 };
  s1 -> s1 [0, 64] { R3982 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3982 += 1 };
  s1 -> s1 [66, 65535] { R3982 += 1 };
  s2 -> s1 [0, 64] { R3982 += 1 };
  s2 -> s2 [0, 65535] { R3982 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3982 += 1 };
  s2 -> s1 [66, 65535] { R3982 += 1 };
  s3 -> s3 [0, 65535] { R3982 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 90] { R3984 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R3984 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R3983 += 1, R3984 += 1 };
  s0 -> s3 [91, 91] { R3984 += 1, R46 += 1 };
  s0 -> s1 [92, 65535] { R3984 += 1, R46 += 1 };
  s1 -> s5 [0, 65535] { R3984 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3984 += 1, R46 += 1 };
  s2 -> s1 [0, 90] { R3984 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3984 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [91, 91] { R3984 += 1, R46 += 1 };
  s2 -> s1 [92, 65535] { R3984 += 1, R46 += 1 };
  s3 -> s1 [0, 65535] { R3984 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3984 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R3985 += 1, R3986 += 1 };
  s0 -> s1 [0, 65535] { R3986 += 1, R47 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R3986 += 1, R48 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R3986 += 1, R47 += 1, R48 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3986 += 1, R48 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R3986 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3986 += 1, R48 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R3986 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R3988 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R3987 += 1, R3988 += 1 };
  s0 -> s2 [0, 65535] { R3988 += 1, R74 += 1, R37 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3988 += 1, R73 += 1, R74 += 1 };
  s1 -> s2 [0, 65535] { R3988 += 1, R74 += 1, R37 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3988 += 1 };
  s2 -> s2 [0, 65535] { R3988 += 1, R74 += 1, R37 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3988 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 107] { R3990 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R3989 += 1, R3990 += 1 };
  s0 -> s2 [0, 65535] { R3990 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [108, 108] { R3990 += 1, R76 += 1 };
  s0 -> s1 [109, 65535] { R3990 += 1, R76 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3990 += 1, R76 += 1 };
  s1 -> s13 [0, 65535] { R3990 += 1 };
  s2 -> s1 [0, 107] { R3990 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3990 += 1, R75 += 1, R76 += 1 };
  s2 -> s3 [108, 108] { R3990 += 1, R76 += 1 };
  s2 -> s1 [109, 65535] { R3990 += 1, R76 += 1 };
  s3 -> s1 [0, 110] { R3990 += 1, R76 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3990 += 1 };
  s3 -> s5 [111, 111] { R3990 += 1, R76 += 1 };
  s3 -> s1 [112, 65535] { R3990 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3990 += 1, R76 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3990 += 1 };
  s5 -> s6 [99, 99] { R3990 += 1, R76 += 1 };
  s5 -> s1 [100, 65535] { R3990 += 1, R76 += 1 };
  s6 -> s1 [0, 96] { R3990 += 1, R76 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3990 += 1 };
  s6 -> s7 [97, 97] { R3990 += 1, R76 += 1 };
  s6 -> s1 [98, 65535] { R3990 += 1, R76 += 1 };
  s7 -> s1 [0, 107] { R3990 += 1, R76 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3990 += 1 };
  s7 -> s8 [108, 108] { R3990 += 1, R76 += 1 };
  s7 -> s1 [109, 65535] { R3990 += 1, R76 += 1 };
  s8 -> s1 [0, 103] { R3990 += 1, R76 += 1 };
  s8 -> s8 [0, 65535] { R3990 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3990 += 1, R76 += 1 };
  s8 -> s1 [105, 65535] { R3990 += 1, R76 += 1 };
  s9 -> s1 [0, 110] { R3990 += 1, R76 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3990 += 1 };
  s9 -> s10 [111, 111] { R3990 += 1, R76 += 1 };
  s9 -> s1 [112, 65535] { R3990 += 1, R76 += 1 };
  s10 -> s1 [0, 114] { R3990 += 1, R76 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3990 += 1 };
  s10 -> s11 [115, 115] { R3990 += 1, R76 += 1 };
  s10 -> s1 [116, 65535] { R3990 += 1, R76 += 1 };
  s11 -> s1 [0, 115] { R3990 += 1, R76 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3990 += 1 };
  s11 -> s12 [116, 116] { R3990 += 1, R76 += 1 };
  s11 -> s1 [117, 65535] { R3990 += 1, R76 += 1 };
  s12 -> s1 [0, 65535] { R3990 += 1, R76 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3990 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R3992 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R3991 += 1, R3992 += 1 };
  s0 -> s2 [0, 65535] { R3992 += 1, R78 += 1, R52 += 1 };
  s1 -> s1 [0, 65535] { R3992 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3992 += 1, R78 += 1, R52 += 1 };
  s2 -> s3 [0, 65535] { R3992 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3992 += 1, R78 += 1, R52 += 1 };
  s3 -> s3 [0, 65535] { R3992 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s0 [0, 65535] { R3993 += 1, R3994 += 1 };
  s0 -> s1 [0, 65535] { R3994 += 1, R96 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R3994 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3994 += 1 };
  s1 -> s1 [0, 65535] { R3994 += 1, R96 += 1, R39 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3994 += 1, R96 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R3994 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3994 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R3996 += 1 };
  s0 -> s0 [0, 65535] { R3995 += 1, R3996 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3996 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 42] { R3998 += 1, R98 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R3997 += 1, R3998 += 1 };
  s0 -> s2 [0, 65535] { R3998 += 1, R97 += 1, R98 += 1 };
  s0 -> s3 [43, 43] { R3998 += 1, R98 += 1, R51 += 1 };
  s0 -> s4 [43, 43] { R3998 += 1, R98 += 1, R51 += 1 };
  s0 -> s1 [44, 65535] { R3998 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [0, 42] { R3998 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R3998 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R3998 += 1, R98 += 1, R51 += 1 };
  s1 -> s4 [43, 43] { R3998 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [44, 65535] { R3998 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [0, 42] { R3998 += 1, R98 += 1, R51 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3998 += 1, R97 += 1, R98 += 1 };
  s2 -> s3 [43, 43] { R3998 += 1, R98 += 1, R51 += 1 };
  s2 -> s4 [43, 43] { R3998 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [44, 65535] { R3998 += 1, R98 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R3998 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3998 += 1 };
  s4 -> s4 [0, 65535] { R3998 += 1, R98 += 1, R51 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3998 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R4000 += 1, R3872 += 1 };
  s0 -> s0 [0, 65535] { R3999 += 1, R4000 += 1 };
  s0 -> s2 [0, 65535] { R4000 += 1, R3871 += 1, R3872 += 1 };
  s0 -> s1 [66, 65535] { R4000 += 1, R3872 += 1 };
  s1 -> s1 [0, 64] { R4000 += 1, R3872 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4000 += 1 };
  s1 -> s1 [66, 65535] { R4000 += 1, R3872 += 1 };
  s2 -> s1 [0, 64] { R4000 += 1, R3872 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4000 += 1, R3871 += 1, R3872 += 1 };
  s2 -> s1 [66, 65535] { R4000 += 1, R3872 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R4002 += 1, R3874 += 1, R38 += 1 };
  s0 -> s2 [0, 65535] { R4002 += 1, R3873 += 1, R3874 += 1 };
  s0 -> s0 [0, 65535] { R4001 += 1, R4002 += 1 };
  s1 -> s1 [0, 65535] { R4002 += 1, R3874 += 1, R38 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4002 += 1 };
  s2 -> s1 [0, 65535] { R4002 += 1, R3874 += 1, R38 += 1 };
  s2 -> s2 [0, 65535] { R4002 += 1, R3873 += 1, R3874 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4002 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65] { R4004 += 1, R3876 += 1 };
  s0 -> s2 [0, 65535] { R4004 += 1, R3875 += 1, R3876 += 1 };
  s0 -> s0 [0, 65535] { R4003 += 1, R4004 += 1 };
  s0 -> s1 [80, 65535] { R4004 += 1, R3876 += 1 };
  s1 -> s1 [0, 65] { R4004 += 1, R3876 += 1 };
  s1 -> s1 [0, 65535] { R4004 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4004 += 1, R3876 += 1 };
  s2 -> s1 [0, 65] { R4004 += 1, R3876 += 1 };
  s2 -> s2 [0, 65535] { R4004 += 1, R3875 += 1, R3876 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4004 += 1, R3876 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 65535] { R4006 += 1, R3877 += 1, R3878 += 1 };
  s0 -> s2 [0, 65535] { R4006 += 1, R3878 += 1, R598 += 1 };
  s0 -> s0 [0, 65535] { R4005 += 1, R4006 += 1 };
  s1 -> s1 [0, 65535] { R4006 += 1, R3877 += 1, R3878 += 1 };
  s1 -> s2 [0, 65535] { R4006 += 1, R3878 += 1, R598 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4006 += 1, R3878 += 1, R598 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4006 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4006 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 81] { R4008 += 1, R3880 += 1 };
  s0 -> s0 [0, 65535] { R4007 += 1, R4008 += 1 };
  s0 -> s2 [0, 65535] { R4008 += 1, R3879 += 1, R3880 += 1 };
  s0 -> s3 [0, 65535] { R4008 += 1, R3880 += 1, R600 += 1 };
  s0 -> s1 [83, 65535] { R4008 += 1, R3880 += 1 };
  s1 -> s1 [0, 81] { R4008 += 1, R3880 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4008 += 1 };
  s1 -> s1 [83, 65535] { R4008 += 1, R3880 += 1 };
  s2 -> s1 [0, 81] { R4008 += 1, R3880 += 1 };
  s2 -> s2 [0, 65535] { R4008 += 1, R3879 += 1, R3880 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4008 += 1, R3880 += 1, R600 += 1 };
  s2 -> s1 [83, 65535] { R4008 += 1, R3880 += 1 };
  s3 -> s1 [0, 81] { R4008 += 1, R3880 += 1 };
  s3 -> s4 [0, 65535] { R4008 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4008 += 1, R3880 += 1, R600 += 1 };
  s3 -> s1 [83, 65535] { R4008 += 1, R3880 += 1 };
  s4 -> s4 [0, 65535] { R4008 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 79] { R4010 += 1, R3882 += 1 };
  s0 -> s0 [0, 65535] { R4009 += 1, R4010 += 1 };
  s0 -> s2 [0, 65535] { R4010 += 1, R3882 += 1, R602 += 1 };
  s0 -> s3 [0, 65535] { R4010 += 1, R3881 += 1, R3882 += 1 };
  s0 -> s1 [81, 65535] { R4010 += 1, R3882 += 1 };
  s1 -> s1 [0, 79] { R4010 += 1, R3882 += 1 };
  s1 -> s1 [0, 65535] { R4010 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R4010 += 1, R3882 += 1 };
  s2 -> s1 [0, 79] { R4010 += 1, R3882 += 1 };
  s2 -> s5 [0, 65535] { R4010 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4010 += 1, R3882 += 1, R602 += 1 };
  s2 -> s1 [81, 65535] { R4010 += 1, R3882 += 1 };
  s3 -> s1 [0, 79] { R4010 += 1, R3882 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4010 += 1, R3882 += 1, R602 += 1 };
  s3 -> s3 [0, 65535] { R4010 += 1, R3881 += 1, R3882 += 1 };
  s3 -> s1 [81, 65535] { R4010 += 1, R3882 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4010 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R4011 += 1, R4012 += 1 };
  s0 -> s1 [0, 65535] { R4012 += 1, R3884 += 1, R606 += 1, R607 += 1 };
  s0 -> s2 [0, 65535] { R4012 += 1, R3884 += 1, R607 += 1, R608 += 1 };
  s0 -> s3 [0, 65535] { R4012 += 1, R3883 += 1, R3884 += 1 };
  s1 -> s6 [0, 65535] { R4012 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4012 += 1, R3884 += 1, R606 += 1, R607 += 1 };
  s1 -> s2 [0, 65535] { R4012 += 1, R3884 += 1, R607 += 1, R608 += 1 };
  s2 -> s5 [0, 65535] { R4012 += 1, R3884 += 1 };
  s2 -> s6 [0, 65535] { R4012 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4012 += 1, R3884 += 1, R607 += 1, R608 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4012 += 1, R3884 += 1, R606 += 1, R607 += 1 };
  s3 -> s2 [0, 65535] { R4012 += 1, R3884 += 1, R607 += 1, R608 += 1 };
  s3 -> s3 [0, 65535] { R4012 += 1, R3883 += 1, R3884 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4012 += 1, R3884 += 1 };
  s5 -> s6 [0, 65535] { R4012 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4012 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 65535] { R4014 += 1, R3885 += 1, R3886 += 1 };
  s0 -> s2 [0, 65535] { R4014 += 1, R3886 += 1 };
  s0 -> s0 [0, 65535] { R4013 += 1, R4014 += 1 };
  s1 -> s1 [0, 65535] { R4014 += 1, R3885 += 1, R3886 += 1 };
  s1 -> s2 [0, 65535] { R4014 += 1, R3886 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4014 += 1 };
  s2 -> s2 [0, 65535] { R4014 += 1, R3886 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4014 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 79] { R4016 += 1, R3888 += 1, R612 += 1 };
  s0 -> s2 [0, 65535] { R4016 += 1, R3888 += 1, R611 += 1, R612 += 1 };
  s0 -> s3 [0, 65535] { R4016 += 1, R3887 += 1, R3888 += 1 };
  s0 -> s0 [0, 65535] { R4015 += 1, R4016 += 1 };
  s0 -> s1 [81, 65535] { R4016 += 1, R3888 += 1, R612 += 1 };
  s1 -> s1 [0, 79] { R4016 += 1, R3888 += 1, R612 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4016 += 1, R3888 += 1 };
  s1 -> s5 [0, 65535] { R4016 += 1 };
  s1 -> s1 [81, 65535] { R4016 += 1, R3888 += 1, R612 += 1 };
  s2 -> s1 [0, 79] { R4016 += 1, R3888 += 1, R612 += 1 };
  s2 -> s2 [0, 65535] { R4016 += 1, R3888 += 1, R611 += 1, R612 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4016 += 1 };
  s2 -> s1 [81, 65535] { R4016 += 1, R3888 += 1, R612 += 1 };
  s3 -> s1 [0, 79] { R4016 += 1, R3888 += 1, R612 += 1 };
  s3 -> s2 [0, 65535] { R4016 += 1, R3888 += 1, R611 += 1, R612 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4016 += 1, R3887 += 1, R3888 += 1 };
  s3 -> s1 [81, 65535] { R4016 += 1, R3888 += 1, R612 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4016 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R4018 += 1, R3890 += 1, R617 += 1, R618 += 1 };
  s0 -> s2 [0, 65535] { R4018 += 1, R3890 += 1, R616 += 1, R617 += 1 };
  s0 -> s0 [0, 65535] { R4017 += 1, R4018 += 1 };
  s0 -> s3 [0, 65535] { R4018 += 1, R3889 += 1, R3890 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4018 += 1 };
  s1 -> s1 [0, 65535] { R4018 += 1, R3890 += 1, R617 += 1, R618 += 1 };
  s1 -> s6 [0, 65535] { R4018 += 1, R3890 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4018 += 1 };
  s2 -> s1 [0, 65535] { R4018 += 1, R3890 += 1, R617 += 1, R618 += 1 };
  s2 -> s2 [0, 65535] { R4018 += 1, R3890 += 1, R616 += 1, R617 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4018 += 1, R3890 += 1, R617 += 1, R618 += 1 };
  s3 -> s2 [0, 65535] { R4018 += 1, R3890 += 1, R616 += 1, R617 += 1 };
  s3 -> s3 [0, 65535] { R4018 += 1, R3889 += 1, R3890 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4018 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4018 += 1 };
  s6 -> s6 [0, 65535] { R4018 += 1, R3890 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s0 -> s0 [0, 65535] { R4019 += 1, R4020 += 1 };
  s0 -> s2 [0, 65535] { R4020 += 1, R3891 += 1, R3892 += 1 };
  s0 -> s3 [0, 65535] { R4020 += 1, R3892 += 1, R621 += 1, R622 += 1 };
  s0 -> s1 [91, 107] { R4020 += 1, R3892 += 1, R622 += 1 };
  s0 -> s4 [108, 108] { R4020 += 1, R3892 += 1, R622 += 1 };
  s0 -> s1 [109, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s1 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s1 -> s1 [0, 65535] { R4020 += 1, R3892 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R4020 += 1 };
  s1 -> s1 [91, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s2 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s2 -> s2 [0, 65535] { R4020 += 1, R3891 += 1, R3892 += 1 };
  s2 -> s3 [0, 65535] { R4020 += 1, R3892 += 1, R621 += 1, R622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 107] { R4020 += 1, R3892 += 1, R622 += 1 };
  s2 -> s4 [108, 108] { R4020 += 1, R3892 += 1, R622 += 1 };
  s2 -> s1 [109, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s3 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s3 -> s3 [0, 65535] { R4020 += 1, R3892 += 1, R621 += 1, R622 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4020 += 1 };
  s3 -> s1 [91, 107] { R4020 += 1, R3892 += 1, R622 += 1 };
  s3 -> s4 [108, 108] { R4020 += 1, R3892 += 1, R622 += 1 };
  s3 -> s1 [109, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s4 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4020 += 1, R3892 += 1 };
  s4 -> s6 [0, 65535] { R4020 += 1 };
  s4 -> s1 [91, 110] { R4020 += 1, R3892 += 1, R622 += 1 };
  s4 -> s7 [111, 111] { R4020 += 1, R3892 += 1, R622 += 1 };
  s4 -> s1 [112, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4020 += 1 };
  s7 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R4020 += 1, R3892 += 1 };
  s7 -> s6 [0, 65535] { R4020 += 1 };
  s7 -> s1 [91, 98] { R4020 += 1, R3892 += 1, R622 += 1 };
  s7 -> s8 [99, 99] { R4020 += 1, R3892 += 1, R622 += 1 };
  s7 -> s1 [100, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s8 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s8 -> s8 [0, 65535] { R4020 += 1, R3892 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R4020 += 1 };
  s8 -> s1 [91, 96] { R4020 += 1, R3892 += 1, R622 += 1 };
  s8 -> s9 [97, 97] { R4020 += 1, R3892 += 1, R622 += 1 };
  s8 -> s1 [98, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s9 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s9 -> s9 [0, 65535] { R4020 += 1, R3892 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R4020 += 1 };
  s9 -> s1 [91, 107] { R4020 += 1, R3892 += 1, R622 += 1 };
  s9 -> s10 [108, 108] { R4020 += 1, R3892 += 1, R622 += 1 };
  s9 -> s1 [109, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s10 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R4020 += 1, R3892 += 1 };
  s10 -> s6 [0, 65535] { R4020 += 1 };
  s10 -> s1 [91, 103] { R4020 += 1, R3892 += 1, R622 += 1 };
  s10 -> s11 [104, 104] { R4020 += 1, R3892 += 1, R622 += 1 };
  s10 -> s1 [105, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s11 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s11 -> s11 [0, 65535] { R4020 += 1, R3892 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R4020 += 1 };
  s11 -> s1 [91, 110] { R4020 += 1, R3892 += 1, R622 += 1 };
  s11 -> s12 [111, 111] { R4020 += 1, R3892 += 1, R622 += 1 };
  s11 -> s1 [112, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s12 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s12 -> s12 [0, 65535] { R4020 += 1, R3892 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R4020 += 1 };
  s12 -> s1 [91, 114] { R4020 += 1, R3892 += 1, R622 += 1 };
  s12 -> s13 [115, 115] { R4020 += 1, R3892 += 1, R622 += 1 };
  s12 -> s1 [116, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s13 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s13 -> s13 [0, 65535] { R4020 += 1, R3892 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R4020 += 1 };
  s13 -> s1 [91, 115] { R4020 += 1, R3892 += 1, R622 += 1 };
  s13 -> s14 [116, 116] { R4020 += 1, R3892 += 1, R622 += 1 };
  s13 -> s1 [117, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  s14 -> s1 [0, 80] { R4020 += 1, R3892 += 1, R622 += 1 };
  s14 -> s1 [91, 65535] { R4020 += 1, R3892 += 1, R622 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s0 [0, 65535] { R4021 += 1, R4022 += 1 };
  s0 -> s1 [0, 65535] { R4022 += 1, R3894 += 1, R627 += 1, R628 += 1 };
  s0 -> s2 [0, 65535] { R4022 += 1, R3894 += 1, R626 += 1, R627 += 1 };
  s0 -> s3 [0, 65535] { R4022 += 1, R3893 += 1, R3894 += 1 };
  s1 -> s5 [0, 65535] { R4022 += 1 };
  s1 -> s6 [0, 65535] { R4022 += 1, R3894 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4022 += 1, R3894 += 1, R627 += 1, R628 += 1 };
  s2 -> s5 [0, 65535] { R4022 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4022 += 1, R3894 += 1, R627 += 1, R628 += 1 };
  s2 -> s2 [0, 65535] { R4022 += 1, R3894 += 1, R626 += 1, R627 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4022 += 1, R3894 += 1, R627 += 1, R628 += 1 };
  s3 -> s2 [0, 65535] { R4022 += 1, R3894 += 1, R626 += 1, R627 += 1 };
  s3 -> s3 [0, 65535] { R4022 += 1, R3893 += 1, R3894 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4022 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4022 += 1 };
  s6 -> s6 [0, 65535] { R4022 += 1, R3894 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65535] { R4024 += 1, R3896 += 1, R3657 += 1, R3658 += 1 };
  s0 -> s2 [0, 65535] { R4024 += 1, R3895 += 1, R3896 += 1 };
  s0 -> s0 [0, 65535] { R4023 += 1, R4024 += 1 };
  s0 -> s3 [0, 65535] { R4024 += 1, R3896 += 1 };
  s1 -> s1 [0, 65535] { R4024 += 1, R3896 += 1, R3657 += 1, R3658 += 1 };
  s1 -> s4 [0, 65535] { R4024 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R4024 += 1, R3896 += 1 };
  s2 -> s1 [0, 65535] { R4024 += 1, R3896 += 1, R3657 += 1, R3658 += 1 };
  s2 -> s2 [0, 65535] { R4024 += 1, R3895 += 1, R3896 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4024 += 1, R3896 += 1 };
  s3 -> s4 [0, 65535] { R4024 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4024 += 1, R3896 += 1 };
  s4 -> s4 [0, 65535] { R4024 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R4026 += 1, R3897 += 1, R3898 += 1 };
  s0 -> s0 [0, 65535] { R4025 += 1, R4026 += 1 };
  s0 -> s2 [0, 65535] { R4026 += 1, R3898 += 1 };
  s1 -> s1 [0, 65535] { R4026 += 1, R3897 += 1, R3898 += 1 };
  s1 -> s2 [0, 65535] { R4026 += 1, R3898 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4026 += 1 };
  s2 -> s2 [0, 65535] { R4026 += 1, R3898 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4026 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 65535] { R4028 += 1, R3900 += 1, R3663 += 1, R3664 += 1 };
  s0 -> s0 [0, 65535] { R4027 += 1, R4028 += 1 };
  s0 -> s2 [0, 65535] { R4028 += 1, R3899 += 1, R3900 += 1 };
  s0 -> s3 [0, 65535] { R4028 += 1, R3900 += 1, R3662 += 1, R3663 += 1 };
  s1 -> s1 [0, 65535] { R4028 += 1, R3900 += 1, R3663 += 1, R3664 += 1 };
  s1 -> s4 [0, 65535] { R4028 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R4028 += 1, R3900 += 1 };
  s2 -> s1 [0, 65535] { R4028 += 1, R3900 += 1, R3663 += 1, R3664 += 1 };
  s2 -> s2 [0, 65535] { R4028 += 1, R3899 += 1, R3900 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R4028 += 1, R3900 += 1, R3662 += 1, R3663 += 1 };
  s3 -> s1 [0, 65535] { R4028 += 1, R3900 += 1, R3663 += 1, R3664 += 1 };
  s3 -> s4 [0, 65535] { R4028 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4028 += 1, R3900 += 1, R3662 += 1, R3663 += 1 };
  s4 -> s4 [0, 65535] { R4028 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R4028 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4028 += 1, R3900 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 65535] { R4030 += 1, R3901 += 1, R3902 += 1 };
  s0 -> s2 [0, 65535] { R4030 += 1, R3902 += 1 };
  s0 -> s0 [0, 65535] { R4029 += 1, R4030 += 1 };
  s1 -> s1 [0, 65535] { R4030 += 1, R3901 += 1, R3902 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4030 += 1, R3902 += 1 };
  s2 -> s3 [0, 65535] { R4030 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4030 += 1, R3902 += 1 };
  s3 -> s3 [0, 65535] { R4030 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 79] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s0 -> s0 [0, 65535] { R4031 += 1, R4032 += 1 };
  s0 -> s2 [0, 65535] { R4032 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s1 [0, 65535] { R4032 += 1, R3904 += 1 };
  s0 -> s3 [80, 80] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s0 -> s4 [80, 80] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s0 -> s1 [81, 65535] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s1 -> s1 [0, 79] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R4032 += 1 };
  s1 -> s1 [0, 65535] { R4032 += 1, R3904 += 1 };
  s1 -> s3 [80, 80] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s1 -> s4 [80, 80] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s1 -> s1 [81, 65535] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s2 -> s1 [0, 79] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4032 += 1, R3903 += 1, R3904 += 1 };
  s2 -> s1 [0, 65535] { R4032 += 1, R3904 += 1 };
  s2 -> s3 [80, 80] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s2 -> s4 [80, 80] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s2 -> s1 [81, 65535] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s3 -> s7 [0, 65535] { R4032 += 1, R3904 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4032 += 1, R3904 += 1, R3869 += 1, R3870 += 1 };
  s3 -> s6 [0, 65535] { R4032 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4032 += 1, R3904 += 1 };
  s4 -> s6 [0, 65535] { R4032 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4032 += 1 };
  s7 -> s7 [0, 65535] { R4032 += 1, R3904 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R4032 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 65535] { R4034 += 1, R3923 += 1, R3924 += 1 };
  s0 -> s0 [0, 65535] { R4033 += 1, R4034 += 1 };
  s0 -> s2 [0, 65535] { R4034 += 1, R3924 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R4034 += 1, R3923 += 1, R3924 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4034 += 1, R3924 += 1, R40 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4034 += 1 };
  s2 -> s2 [0, 65535] { R4034 += 1, R3924 += 1, R40 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4034 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R4036 += 1, R3926 += 1 };
  s0 -> s2 [0, 65535] { R4036 += 1, R3925 += 1, R3926 += 1 };
  s0 -> s0 [0, 65535] { R4035 += 1, R4036 += 1 };
  s0 -> s3 [65, 65] { R4036 += 1, R3926 += 1 };
  s0 -> s4 [65, 65] { R4036 += 1, R3926 += 1 };
  s0 -> s5 [80, 80] { R4036 += 1, R3926 += 1 };
  s0 -> s1 [81, 65535] { R4036 += 1, R3926 += 1 };
  s1 -> s1 [0, 64] { R4036 += 1, R3926 += 1 };
  s1 -> s3 [65, 65] { R4036 += 1, R3926 += 1 };
  s1 -> s4 [65, 65] { R4036 += 1, R3926 += 1 };
  s1 -> s5 [80, 80] { R4036 += 1, R3926 += 1 };
  s1 -> s1 [81, 65535] { R4036 += 1, R3926 += 1 };
  s2 -> s1 [0, 64] { R4036 += 1, R3926 += 1 };
  s2 -> s2 [0, 65535] { R4036 += 1, R3925 += 1, R3926 += 1 };
  s2 -> s3 [65, 65] { R4036 += 1, R3926 += 1 };
  s2 -> s4 [65, 65] { R4036 += 1, R3926 += 1 };
  s2 -> s5 [80, 80] { R4036 += 1, R3926 += 1 };
  s2 -> s1 [81, 65535] { R4036 += 1, R3926 += 1 };
  s4 -> s4 [0, 65] { R4036 += 1, R3926 += 1 };
  s4 -> s8 [80, 80] { R4036 += 1, R3926 += 1 };
  s4 -> s4 [81, 65535] { R4036 += 1, R3926 += 1 };
  s5 -> s5 [0, 64] { R4036 += 1, R3926 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4036 += 1 };
  s5 -> s7 [65, 65] { R4036 += 1, R3926 += 1 };
  s5 -> s8 [65, 65] { R4036 += 1, R3926 += 1 };
  s5 -> s5 [80, 65535] { R4036 += 1, R3926 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4036 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R4036 += 1, R3926 += 1 };
  s8 -> s8 [0, 65535] { R4036 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R4036 += 1, R3926 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 64] { R4038 += 1, R3928 += 1, R597 += 1 };
  s0 -> s2 [0, 65535] { R4038 += 1, R3927 += 1, R3928 += 1 };
  s0 -> s0 [0, 65535] { R4037 += 1, R4038 += 1 };
  s0 -> s3 [65, 65] { R4038 += 1, R3928 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R4038 += 1, R3928 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R4038 += 1, R3928 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R4038 += 1, R3928 += 1, R597 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4038 += 1 };
  s1 -> s3 [65, 65] { R4038 += 1, R3928 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R4038 += 1, R3928 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R4038 += 1, R3928 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R4038 += 1, R3928 += 1, R597 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4038 += 1, R3927 += 1, R3928 += 1 };
  s2 -> s3 [65, 65] { R4038 += 1, R3928 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R4038 += 1, R3928 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R4038 += 1, R3928 += 1, R597 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4038 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4038 += 1 };
  s4 -> s4 [0, 65535] { R4038 += 1, R3928 += 1, R597 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 64] { R4040 += 1, R3930 += 1, R599 += 1 };
  s0 -> s0 [0, 65535] { R4039 += 1, R4040 += 1 };
  s0 -> s2 [0, 65535] { R4040 += 1, R3929 += 1, R3930 += 1 };
  s0 -> s3 [65, 65] { R4040 += 1, R3930 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R4040 += 1, R3930 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R4040 += 1, R3930 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R4040 += 1, R3930 += 1, R599 += 1 };
  s1 -> s1 [0, 65535] { R4040 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4040 += 1, R3930 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R4040 += 1, R3930 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R4040 += 1, R3930 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R4040 += 1, R3930 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R4040 += 1, R3929 += 1, R3930 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4040 += 1, R3930 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R4040 += 1, R3930 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R4040 += 1, R3930 += 1, R599 += 1 };
  s3 -> s3 [0, 65535] { R4040 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4040 += 1 };
  s4 -> s4 [0, 65535] { R4040 += 1, R3930 += 1, R599 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4040 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 64] { R4042 += 1, R3932 += 1, R601 += 1 };
  s0 -> s0 [0, 65535] { R4041 += 1, R4042 += 1 };
  s0 -> s2 [0, 65535] { R4042 += 1, R3931 += 1, R3932 += 1 };
  s0 -> s3 [65, 65] { R4042 += 1, R3932 += 1, R601 += 1 };
  s0 -> s4 [65, 65] { R4042 += 1, R3932 += 1, R601 += 1 };
  s0 -> s1 [66, 65535] { R4042 += 1, R3932 += 1, R601 += 1 };
  s1 -> s1 [0, 64] { R4042 += 1, R3932 += 1, R601 += 1 };
  s1 -> s1 [0, 65535] { R4042 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4042 += 1, R3932 += 1, R601 += 1 };
  s1 -> s4 [65, 65] { R4042 += 1, R3932 += 1, R601 += 1 };
  s1 -> s1 [66, 65535] { R4042 += 1, R3932 += 1, R601 += 1 };
  s2 -> s1 [0, 64] { R4042 += 1, R3932 += 1, R601 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4042 += 1, R3931 += 1, R3932 += 1 };
  s2 -> s3 [65, 65] { R4042 += 1, R3932 += 1, R601 += 1 };
  s2 -> s4 [65, 65] { R4042 += 1, R3932 += 1, R601 += 1 };
  s2 -> s1 [66, 65535] { R4042 += 1, R3932 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R4042 += 1, R3932 += 1, R601 += 1 };
  s3 -> s6 [0, 65535] { R4042 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4042 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4042 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 64] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R4043 += 1, R4044 += 1 };
  s0 -> s2 [0, 65535] { R4044 += 1, R3933 += 1, R3934 += 1 };
  s0 -> s3 [65, 65] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s0 -> s4 [65, 65] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s0 -> s1 [66, 65535] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 64] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4044 += 1 };
  s1 -> s3 [65, 65] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s1 -> s4 [65, 65] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [66, 65535] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [0, 64] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4044 += 1, R3933 += 1, R3934 += 1 };
  s2 -> s3 [65, 65] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [65, 65] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [66, 65535] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R4044 += 1, R3934 += 1, R603 += 1, R604 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4044 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4044 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4044 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R4046 += 1, R3936 += 1 };
  s0 -> s2 [0, 65535] { R4046 += 1, R3935 += 1, R3936 += 1 };
  s0 -> s0 [0, 65535] { R4045 += 1, R4046 += 1 };
  s0 -> s3 [65, 65] { R4046 += 1, R3936 += 1 };
  s0 -> s4 [65, 65] { R4046 += 1, R3936 += 1 };
  s0 -> s1 [66, 65535] { R4046 += 1, R3936 += 1 };
  s1 -> s1 [0, 64] { R4046 += 1, R3936 += 1 };
  s1 -> s1 [0, 65535] { R4046 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4046 += 1, R3936 += 1 };
  s1 -> s4 [65, 65] { R4046 += 1, R3936 += 1 };
  s1 -> s1 [66, 65535] { R4046 += 1, R3936 += 1 };
  s2 -> s1 [0, 64] { R4046 += 1, R3936 += 1 };
  s2 -> s2 [0, 65535] { R4046 += 1, R3935 += 1, R3936 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4046 += 1, R3936 += 1 };
  s2 -> s4 [65, 65] { R4046 += 1, R3936 += 1 };
  s2 -> s1 [66, 65535] { R4046 += 1, R3936 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4046 += 1 };
  s3 -> s3 [0, 65535] { R4046 += 1, R3936 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4046 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R4048 += 1, R3937 += 1, R3938 += 1 };
  s0 -> s0 [0, 65535] { R4047 += 1, R4048 += 1 };
  s0 -> s3 [65, 65] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R4048 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R4048 += 1, R3937 += 1, R3938 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4048 += 1, R3938 += 1, R609 += 1, R610 += 1 };
  s3 -> s6 [0, 65535] { R4048 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4048 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4048 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s0 -> s2 [0, 65535] { R4050 += 1, R3939 += 1, R3940 += 1 };
  s0 -> s0 [0, 65535] { R4049 += 1, R4050 += 1 };
  s0 -> s3 [65, 65] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s0 -> s4 [65, 65] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s0 -> s1 [66, 65535] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [0, 64] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4050 += 1 };
  s1 -> s3 [65, 65] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s1 -> s4 [65, 65] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [66, 65535] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [0, 64] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4050 += 1, R3939 += 1, R3940 += 1 };
  s2 -> s3 [65, 65] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [65, 65] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [66, 65535] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s3 -> s3 [0, 65535] { R4050 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4050 += 1 };
  s4 -> s4 [0, 65535] { R4050 += 1, R3940 += 1, R613 += 1, R614 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4050 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s0 -> s0 [0, 65535] { R4051 += 1, R4052 += 1 };
  s0 -> s2 [0, 65535] { R4052 += 1, R3941 += 1, R3942 += 1 };
  s0 -> s3 [65, 65] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s0 -> s4 [65, 65] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s0 -> s1 [66, 65535] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 64] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4052 += 1 };
  s1 -> s3 [65, 65] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s1 -> s4 [65, 65] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [66, 65535] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [0, 64] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R4052 += 1, R3941 += 1, R3942 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s2 -> s4 [65, 65] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [66, 65535] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s3 -> s3 [0, 65535] { R4052 += 1, R3942 += 1, R619 += 1, R620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4052 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4052 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s0 -> s0 [0, 65535] { R4053 += 1, R4054 += 1 };
  s0 -> s2 [0, 65535] { R4054 += 1, R3943 += 1, R3944 += 1 };
  s0 -> s3 [65, 65] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s0 -> s4 [65, 65] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s0 -> s1 [66, 65535] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [0, 64] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4054 += 1 };
  s1 -> s3 [65, 65] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s1 -> s4 [65, 65] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [66, 65535] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [0, 64] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4054 += 1, R3943 += 1, R3944 += 1 };
  s2 -> s3 [65, 65] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s2 -> s4 [65, 65] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [66, 65535] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s3 -> s3 [0, 65535] { R4054 += 1, R3944 += 1, R623 += 1, R624 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4054 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4054 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4054 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s2 [0, 64] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s0 [0, 65535] { R4055 += 1, R4056 += 1 };
  s0 -> s3 [0, 65535] { R4056 += 1, R3945 += 1, R3946 += 1 };
  s0 -> s4 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s5 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s6 [65, 65] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s7 [65, 65] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s1 [66, 65535] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s2 [66, 65535] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s1 -> s1 [0, 64] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s1 [0, 65535] { R4056 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s5 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s1 -> s1 [66, 65535] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s1 [0, 64] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s2 [0, 64] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s2 -> s4 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s5 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s6 [65, 65] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s2 -> s7 [65, 65] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s2 -> s1 [66, 65535] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s2 [66, 65535] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s1 [0, 64] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s2 [0, 64] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s3 [0, 65535] { R4056 += 1, R3945 += 1, R3946 += 1 };
  s3 -> s4 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s5 [65, 65] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s6 [65, 65] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s7 [65, 65] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s3 -> s1 [66, 65535] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s3 -> s2 [66, 65535] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s4 -> s4 [0, 65535] { R4056 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s5 -> s8 [0, 65535] { R4056 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R4056 += 1, R3946 += 1, R3654 += 1, R3655 += 1 };
  s7 -> s7 [0, 65535] { R4056 += 1, R3946 += 1, R3653 += 1, R3654 += 1 };
  s8 -> s8 [0, 65535] { R4056 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R4058 += 1, R3948 += 1 };
  s0 -> s0 [0, 65535] { R4057 += 1, R4058 += 1 };
  s0 -> s2 [0, 65535] { R4058 += 1, R3947 += 1, R3948 += 1 };
  s0 -> s3 [65, 65] { R4058 += 1, R3948 += 1 };
  s0 -> s4 [65, 65] { R4058 += 1, R3948 += 1 };
  s0 -> s1 [66, 65535] { R4058 += 1, R3948 += 1 };
  s1 -> s1 [0, 64] { R4058 += 1, R3948 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4058 += 1 };
  s1 -> s3 [65, 65] { R4058 += 1, R3948 += 1 };
  s1 -> s4 [65, 65] { R4058 += 1, R3948 += 1 };
  s1 -> s1 [66, 65535] { R4058 += 1, R3948 += 1 };
  s2 -> s1 [0, 64] { R4058 += 1, R3948 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4058 += 1, R3947 += 1, R3948 += 1 };
  s2 -> s3 [65, 65] { R4058 += 1, R3948 += 1 };
  s2 -> s4 [65, 65] { R4058 += 1, R3948 += 1 };
  s2 -> s1 [66, 65535] { R4058 += 1, R3948 += 1 };
  s3 -> s3 [0, 65535] { R4058 += 1, R3948 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4058 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s0 -> s0 [0, 65535] { R4059 += 1, R4060 += 1 };
  s0 -> s2 [0, 65535] { R4060 += 1, R3949 += 1, R3950 += 1 };
  s0 -> s3 [65, 65] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s0 -> s4 [65, 65] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s0 -> s1 [66, 65535] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s1 -> s1 [0, 64] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s1 -> s1 [0, 65535] { R4060 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s1 -> s4 [65, 65] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s1 -> s1 [66, 65535] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s2 -> s1 [0, 64] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s2 -> s2 [0, 65535] { R4060 += 1, R3949 += 1, R3950 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s2 -> s4 [65, 65] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s2 -> s1 [66, 65535] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s3 -> s3 [0, 65535] { R4060 += 1, R3950 += 1, R3659 += 1, R3660 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4060 += 1 };
  s4 -> s4 [0, 65535] { R4060 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4060 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R4062 += 1, R3952 += 1 };
  s0 -> s0 [0, 65535] { R4061 += 1, R4062 += 1 };
  s0 -> s2 [0, 65535] { R4062 += 1, R3951 += 1, R3952 += 1 };
  s0 -> s3 [65, 65] { R4062 += 1, R3952 += 1 };
  s0 -> s4 [65, 65] { R4062 += 1, R3952 += 1 };
  s0 -> s1 [66, 65535] { R4062 += 1, R3952 += 1 };
  s1 -> s1 [0, 64] { R4062 += 1, R3952 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4062 += 1 };
  s1 -> s3 [65, 65] { R4062 += 1, R3952 += 1 };
  s1 -> s4 [65, 65] { R4062 += 1, R3952 += 1 };
  s1 -> s1 [66, 65535] { R4062 += 1, R3952 += 1 };
  s2 -> s1 [0, 64] { R4062 += 1, R3952 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4062 += 1, R3951 += 1, R3952 += 1 };
  s2 -> s3 [65, 65] { R4062 += 1, R3952 += 1 };
  s2 -> s4 [65, 65] { R4062 += 1, R3952 += 1 };
  s2 -> s1 [66, 65535] { R4062 += 1, R3952 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4062 += 1, R3952 += 1 };
  s3 -> s6 [0, 65535] { R4062 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4062 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4062 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s0 -> s2 [0, 64] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s3 [0, 65535] { R4064 += 1, R3953 += 1, R3954 += 1 };
  s0 -> s0 [0, 65535] { R4063 += 1, R4064 += 1 };
  s0 -> s4 [65, 65] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s0 -> s5 [65, 65] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s6 [65, 65] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s0 -> s7 [65, 65] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s2 [66, 79] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s1 [66, 65535] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s0 -> s2 [81, 65535] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s1 [0, 64] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s1 -> s2 [0, 64] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s4 [65, 65] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s1 -> s5 [65, 65] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s6 [65, 65] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s1 -> s7 [65, 65] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s2 [66, 79] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s1 [66, 65535] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s1 -> s2 [81, 65535] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s2 -> s2 [0, 64] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4064 += 1 };
  s2 -> s5 [65, 65] { R4064 += 1, R3954 += 1 };
  s2 -> s7 [65, 65] { R4064 += 1, R3954 += 1 };
  s2 -> s2 [66, 79] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s2 -> s2 [66, 65535] { R4064 += 1, R3954 += 1 };
  s2 -> s2 [81, 65535] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s1 [0, 64] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s3 -> s2 [0, 64] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s3 [0, 65535] { R4064 += 1, R3953 += 1, R3954 += 1 };
  s3 -> s4 [65, 65] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s3 -> s5 [65, 65] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s6 [65, 65] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s3 -> s7 [65, 65] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s2 [66, 79] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s1 [66, 65535] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s3 -> s2 [81, 65535] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s5 -> s5 [0, 79] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s5 -> s5 [0, 65535] { R4064 += 1, R3954 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R4064 += 1 };
  s5 -> s5 [81, 65535] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s6 -> s5 [0, 79] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s6 -> s6 [0, 65535] { R4064 += 1, R3954 += 1, R3865 += 1, R3866 += 1 };
  s6 -> s5 [81, 65535] { R4064 += 1, R3954 += 1, R3866 += 1, R3867 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4064 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4064 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P92
automaton P92_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R6 = R3904 && R7 = R4064 && R45 = 0 && R46 = 1 && R47 = 0 && R48 = 1 && R73 = 0 && R74 = R3904 && R75 = 0 && R76 = R3904 && R77 = 0 && R78 = R3904 && R79 = 0 && R80 = R4064 && R81 = 0 && R82 = R4064 && R83 = 0 && R84 = R4064 && R598 + R597 = 0 && R3871 = 0 && R3872 = R3904 && R3873 = 0 && R3874 = R3904 && R3875 = 0 && R3876 = R3904 && R3877 = 0 && R3878 = R3904 && R3879 = 0 && R3880 = R3904 && R3881 = 0 && R3882 = R3904 && R3883 = 0 && R3884 = R3904 && R3885 = 0 && R3886 = R3904 && R3887 = 0 && R3888 = R3904 && R3889 = 0 && R3890 = R3904 && R3891 = 0 && R3892 = R3904 && R3893 = 0 && R3894 = R3904 && R3895 = 0 && R3896 = R3904 && R3897 = 0 && R3898 = R3904 && R3899 = 0 && R3900 = R3904 && R3901 = 0 && R3902 = R3904 && R3903 = 0 && R3905 = 0 && R3906 = R4064 && R3907 = 0 && R3908 = R4064 && R3909 = 0 && R3910 = R4064 && R3911 = 0 && R3912 = R4064 && R3913 = 0 && R3914 = R4064 && R3915 = 0 && R3916 = R4064 && R3917 = 0 && R3918 = R4064 && R3919 = 0 && R3920 = R4064 && R3921 = 0 && R3922 = R4064 && R3925 = 0 && R3926 = 0 && R3945 = 0 && R3946 = 0 && R3953 = 0 && R3954 = 0 && R3973 = 10 && R3974 = R4064 && R3975 = 10 && R3976 = R4064 && R3977 = 10 && R3978 = R4064 && R3979 = 10 && R3980 = R4064 && R3981 = 10 && R3982 = R4064 && R3983 = 10 && R3984 = R4064 && R3985 = 10 && R3986 = R4064 && R3987 = 10 && R3988 = R4064 && R3989 = 10 && R3990 = R4064 && R3991 = 10 && R3992 = R4064 && R3993 = 10 && R3994 = R4064 && R3995 = 10 && R3996 = R4064 && R3997 = 10 && R3998 = R4064 && R3999 = 10 && R4000 = R4064 && R4001 = 10 && R4002 = R4064 && R4003 = 10 && R4004 = R4064 && R4005 = 10 && R4006 = R4064 && R4007 = 10 && R4008 = R4064 && R4009 = 10 && R4010 = R4064 && R4011 = 10 && R4012 = R4064 && R4013 = 10 && R4014 = R4064 && R4015 = 10 && R4016 = R4064 && R4017 = 10 && R4018 = R4064 && R4019 = 10 && R4020 = R4064 && R4021 = 10 && R4022 = R4064 && R4023 = 10 && R4024 = R4064 && R4025 = 10 && R4026 = R4064 && R4027 = 10 && R4028 = R4064 && R4029 = 10 && R4030 = R4064 && R4031 = 10 && R4032 = R4064 && R4033 = 10 && R4034 = R4064 && R4035 = 10 && R4036 = R4064 && R4037 = 10 && R4038 = R4064 && R4039 = 10 && R4040 = R4064 && R4041 = 10 && R4042 = R4064 && R4043 = 10 && R4044 = R4064 && R4045 = 10 && R4046 = R4064 && R4047 = 10 && R4048 = R4064 && R4049 = 10 && R4050 = R4064 && R4051 = 10 && R4052 = R4064 && R4053 = 10 && R4054 = R4064 && R4055 = 10 && R4056 = R4064 && R4057 = 10 && R4058 = R4064 && R4059 = 10 && R4060 = R4064 && R4061 = 10 && R4062 = R4064 && R4063 = 10 && R52 + R51 != 0 && R54 + R53 != 0 && R122 + R119 + R134 + R131 != 0 && R628 + R625 + R3870 + R3867 != 0 && R18 < 1 && R19 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && -1*R104 + -1*R103 < 1 && R106 + R105 < 1 && R600 + R599 < 1 && R602 + R601 < 1 && 0 < R3904 && 9 < R4064 && (R104 + R103 != 0 || R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R115 + R113 = 0 && R116 + R114 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R120 + R117 = 0 && R121 + R118 = 0)) && (R110 + R107 != 0 || R104 + R103 + -1*R111 + -1*R108 = 0 || R104 + R103 < 1) && (R115 + R113 != 0 || R104 + R103 + -1*R116 + -1*R114 = 0 || R104 + R103 < 1) && (R120 + R117 != 0 || R104 + R103 + -1*R121 + -1*R118 = 0 || R104 + R103 < 1) && (R39 = 0 || (R95 = 0 && R96 = 0)) && (R39 = 0 || (R97 = 0 && R98 = 0)) && (R40 = 0 || (R3923 = 0 && R3924 = 0)) && (R40 = 0 || (R3927 = 0 && R3928 = 0)) && (R40 = 0 || (R3929 = 0 && R3930 = 0)) && (R40 = 0 || (R3931 = 0 && R3932 = 0)) && (R40 = 0 || (R3933 = 0 && R3934 = 0)) && (R40 = 0 || (R3935 = 0 && R3936 = 0)) && (R40 = 0 || (R3937 = 0 && R3938 = 0)) && (R40 = 0 || (R3939 = 0 && R3940 = 0)) && (R40 = 0 || (R3941 = 0 && R3942 = 0)) && (R40 = 0 || (R3943 = 0 && R3944 = 0)) && (R40 = 0 || (R3947 = 0 && R3948 = 0)) && (R40 = 0 || (R3949 = 0 && R3950 = 0)) && (R40 = 0 || (R3951 = 0 && R3952 = 0)) && (R43 = 0 || (R3955 = 0 && R3956 = 0)) && (R43 = 0 || (R3957 = 0 && R3958 = 0)) && (R43 = 0 || (R3959 = 0 && R3960 = 0)) && (R43 = 0 || (R3961 = 0 && R3962 = 0)) && (R43 = 0 || (R3963 = 0 && R3964 = 0)) && (R43 = 0 || (R3965 = 0 && R3966 = 0)) && (R43 = 0 || (R3967 = 0 && R3968 = 0)) && (R43 = 0 || (R3969 = 0 && R3970 = 0)) && (R43 = 0 || (R3971 = 0 && R3972 = 0)) && (R44 = 0 || (R99 = 0 && R100 = 0)) && (R44 = 0 || (R101 = 0 && R102 = 0)) && (R110 + R107 = 0 || R104 + R103 < 1) && (R115 + R113 = 0 || R104 + R103 < 1) && (R120 + R117 = 0 || R104 + R103 < 1) && (R128 + R125 = 0 || (R126 + R123 = 0 && R127 + R124 = 0)) && (R128 + R125 = 0 || (R132 + R129 = 0 && R133 + R130 = 0)) && (R608 + R605 = 0 || (R606 + R603 = 0 && R607 + R604 = 0)) && (R618 + R615 = 0 || (R611 + R609 = 0 && R612 + R610 = 0)) && (R618 + R615 = 0 || (R616 + R613 = 0 && R617 + R614 = 0)) && (R618 + R615 = 0 || (R621 + R619 = 0 && R622 + R620 = 0)) && (R618 + R615 = 0 || (R626 + R623 = 0 && R627 + R624 = 0)) && (R3658 + R3655 = 0 || (R3656 + R3653 = 0 && R3657 + R3654 = 0)) && (R3664 + R3661 = 0 || (R3662 + R3659 = 0 && R3663 + R3660 = 0)) && (R3664 + R3661 = 0 || (R3868 + R3865 = 0 && R3869 + R3866 = 0));
// End of Parikh automata intersection problem
