// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R18, R19, R22, R25, R28, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R51, R52, R53, R54, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R6677, R6678, R6679, R6680, R6681, R6682, R7, R73, R74, R75, R76, R7689, R7690, R7691, R7692, R7693, R7694, R77, R78, R7895, R7896, R7897, R7898, R7899, R79, R7900, R7901, R7902, R7903, R7904, R7905, R7906, R7907, R7908, R7909, R7910, R7911, R7912, R7913, R7914, R7915, R7916, R7917, R7918, R7919, R7920, R7921, R7922, R7923, R7924, R7925, R7926, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8, R80, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R81, R82, R83, R84, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P104
automaton P104_0 {
  init s0;
  s0 -> s1 [114, 114];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R25 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R42 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R82 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s2 [108, 108] { R82 += 1 };
  s0 -> s1 [109, 65535] { R82 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R82 += 1 };
  s2 -> s1 [0, 110] { R82 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R82 += 1 };
  s2 -> s1 [112, 65535] { R82 += 1 };
  s3 -> s1 [0, 98] { R82 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R82 += 1 };
  s3 -> s1 [100, 65535] { R82 += 1 };
  s4 -> s1 [0, 96] { R82 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R82 += 1 };
  s4 -> s1 [98, 65535] { R82 += 1 };
  s5 -> s1 [0, 107] { R82 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R82 += 1 };
  s5 -> s1 [109, 65535] { R82 += 1 };
  s6 -> s1 [0, 103] { R82 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R82 += 1 };
  s6 -> s1 [105, 65535] { R82 += 1 };
  s7 -> s1 [0, 110] { R82 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R82 += 1 };
  s7 -> s1 [112, 65535] { R82 += 1 };
  s8 -> s1 [0, 114] { R82 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R82 += 1 };
  s8 -> s1 [116, 65535] { R82 += 1 };
  s9 -> s1 [0, 115] { R82 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R82 += 1 };
  s9 -> s1 [117, 65535] { R82 += 1 };
  s10 -> s1 [0, 65535] { R82 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R84 += 1, R54 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R100 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s0 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65] { R102 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s3 [66, 66] { R102 += 1, R53 += 1 };
  s1 -> s1 [67, 65535] { R102 += 1, R53 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R53 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R7936 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7935 += 1, R7936 += 1 };
  s1 -> s1 [0, 65535] { R7936 += 1, R41 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R7937 += 1, R7938 += 1 };
  s0 -> s1 [0, 65535] { R7938 += 1, R104 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7938 += 1, R104 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 76] { R7940 += 1 };
  s0 -> s2 [0, 65535] { R7940 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R7939 += 1, R7940 += 1 };
  s0 -> s1 [78, 65535] { R7940 += 1 };
  s1 -> s1 [0, 76] { R7940 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [78, 65535] { R7940 += 1 };
  s2 -> s1 [0, 76] { R7940 += 1 };
  s2 -> s2 [0, 65535] { R7940 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [78, 65535] { R7940 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s0 [0, 65535] { R7941 += 1, R7942 += 1 };
  s0 -> s1 [0, 65535] { R7942 += 1, R110 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R7942 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535] { R7942 += 1, R110 += 1, R111 += 1 };
  s1 -> s2 [0, 65535] { R7942 += 1, R111 += 1, R112 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7942 += 1 };
  s2 -> s2 [0, 65535] { R7942 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7942 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R7944 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R7943 += 1, R7944 += 1 };
  s0 -> s2 [0, 65535] { R7944 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [108, 108] { R7944 += 1, R116 += 1 };
  s0 -> s1 [109, 65535] { R7944 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R7944 += 1, R116 += 1 };
  s1 -> s13 [0, 65535] { R7944 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R7944 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7944 += 1, R115 += 1, R116 += 1 };
  s2 -> s3 [108, 108] { R7944 += 1, R116 += 1 };
  s2 -> s1 [109, 65535] { R7944 += 1, R116 += 1 };
  s3 -> s1 [0, 110] { R7944 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7944 += 1 };
  s3 -> s5 [111, 111] { R7944 += 1, R116 += 1 };
  s3 -> s1 [112, 65535] { R7944 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7944 += 1, R116 += 1 };
  s5 -> s5 [0, 65535] { R7944 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R7944 += 1, R116 += 1 };
  s5 -> s1 [100, 65535] { R7944 += 1, R116 += 1 };
  s6 -> s1 [0, 96] { R7944 += 1, R116 += 1 };
  s6 -> s6 [0, 65535] { R7944 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R7944 += 1, R116 += 1 };
  s6 -> s1 [98, 65535] { R7944 += 1, R116 += 1 };
  s7 -> s1 [0, 107] { R7944 += 1, R116 += 1 };
  s7 -> s7 [0, 65535] { R7944 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R7944 += 1, R116 += 1 };
  s7 -> s1 [109, 65535] { R7944 += 1, R116 += 1 };
  s8 -> s1 [0, 103] { R7944 += 1, R116 += 1 };
  s8 -> s8 [0, 65535] { R7944 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R7944 += 1, R116 += 1 };
  s8 -> s1 [105, 65535] { R7944 += 1, R116 += 1 };
  s9 -> s1 [0, 110] { R7944 += 1, R116 += 1 };
  s9 -> s9 [0, 65535] { R7944 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R7944 += 1, R116 += 1 };
  s9 -> s1 [112, 65535] { R7944 += 1, R116 += 1 };
  s10 -> s1 [0, 114] { R7944 += 1, R116 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R7944 += 1 };
  s10 -> s11 [115, 115] { R7944 += 1, R116 += 1 };
  s10 -> s1 [116, 65535] { R7944 += 1, R116 += 1 };
  s11 -> s1 [0, 115] { R7944 += 1, R116 += 1 };
  s11 -> s11 [0, 65535] { R7944 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R7944 += 1, R116 += 1 };
  s11 -> s1 [117, 65535] { R7944 += 1, R116 += 1 };
  s12 -> s1 [0, 65535] { R7944 += 1, R116 += 1 };
  s13 -> s13 [0, 65535] { R7944 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7946 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R7945 += 1, R7946 += 1 };
  s0 -> s2 [0, 65535] { R7946 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535] { R7946 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7946 += 1, R121 += 1, R122 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7946 += 1, R121 += 1, R122 += 1 };
  s2 -> s4 [0, 65535] { R7946 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7946 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R7948 += 1, R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R7948 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R7947 += 1, R7948 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7948 += 1, R126 += 1, R127 += 1 };
  s1 -> s2 [0, 65535] { R7948 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7948 += 1, R127 += 1, R128 += 1 };
  s2 -> s4 [0, 65535] { R7948 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7948 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R7949 += 1, R7950 += 1 };
  s0 -> s1 [0, 65535] { R7950 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7950 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 76] { R7952 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R7951 += 1, R7952 += 1 };
  s0 -> s2 [0, 65535] { R7952 += 1, R132 += 1, R133 += 1 };
  s0 -> s3 [77, 77] { R7952 += 1, R133 += 1, R134 += 1 };
  s0 -> s4 [77, 77] { R7952 += 1, R133 += 1, R134 += 1 };
  s0 -> s1 [78, 65535] { R7952 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [0, 76] { R7952 += 1, R133 += 1, R134 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7952 += 1 };
  s1 -> s3 [77, 77] { R7952 += 1, R133 += 1, R134 += 1 };
  s1 -> s4 [77, 77] { R7952 += 1, R133 += 1, R134 += 1 };
  s1 -> s1 [78, 65535] { R7952 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [0, 76] { R7952 += 1, R133 += 1, R134 += 1 };
  s2 -> s2 [0, 65535] { R7952 += 1, R132 += 1, R133 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [77, 77] { R7952 += 1, R133 += 1, R134 += 1 };
  s2 -> s4 [77, 77] { R7952 += 1, R133 += 1, R134 += 1 };
  s2 -> s1 [78, 65535] { R7952 += 1, R133 += 1, R134 += 1 };
  s3 -> s6 [0, 65535] { R7952 += 1 };
  s3 -> s3 [0, 65535] { R7952 += 1, R133 += 1, R134 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7952 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7952 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R7986 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R7985 += 1, R7986 += 1 };
  s1 -> s1 [0, 65535] { R7986 += 1, R43 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R7988 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R7987 += 1, R7988 += 1 };
  s0 -> s2 [65, 65] { R7988 += 1, R103 += 1 };
  s0 -> s3 [65, 65] { R7988 += 1, R103 += 1 };
  s0 -> s1 [66, 65535] { R7988 += 1, R103 += 1 };
  s1 -> s1 [0, 64] { R7988 += 1, R103 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7988 += 1, R103 += 1 };
  s1 -> s3 [65, 65] { R7988 += 1, R103 += 1 };
  s1 -> s1 [66, 65535] { R7988 += 1, R103 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7988 += 1, R103 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R7990 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R7989 += 1, R7990 += 1 };
  s0 -> s2 [65, 65] { R7990 += 1, R105 += 1 };
  s0 -> s3 [65, 65] { R7990 += 1, R105 += 1 };
  s0 -> s1 [66, 65535] { R7990 += 1, R105 += 1 };
  s1 -> s1 [0, 64] { R7990 += 1, R105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7990 += 1, R105 += 1 };
  s1 -> s3 [65, 65] { R7990 += 1, R105 += 1 };
  s1 -> s1 [66, 65535] { R7990 += 1, R105 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R7990 += 1, R105 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R7992 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R7991 += 1, R7992 += 1 };
  s0 -> s2 [65, 65] { R7992 += 1, R107 += 1, R108 += 1 };
  s0 -> s3 [65, 65] { R7992 += 1, R107 += 1, R108 += 1 };
  s0 -> s1 [66, 65535] { R7992 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 64] { R7992 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7992 += 1, R107 += 1, R108 += 1 };
  s1 -> s3 [65, 65] { R7992 += 1, R107 += 1, R108 += 1 };
  s1 -> s1 [66, 65535] { R7992 += 1, R107 += 1, R108 += 1 };
  s2 -> s2 [0, 65535] { R7992 += 1, R107 += 1, R108 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R7994 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R7993 += 1, R7994 += 1 };
  s0 -> s2 [65, 65] { R7994 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [65, 65] { R7994 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [66, 65535] { R7994 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 64] { R7994 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7994 += 1, R113 += 1, R114 += 1 };
  s1 -> s3 [65, 65] { R7994 += 1, R113 += 1, R114 += 1 };
  s1 -> s1 [66, 65535] { R7994 += 1, R113 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7994 += 1, R113 += 1, R114 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R7996 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R7995 += 1, R7996 += 1 };
  s0 -> s2 [65, 65] { R7996 += 1, R117 += 1, R118 += 1 };
  s0 -> s3 [65, 65] { R7996 += 1, R117 += 1, R118 += 1 };
  s0 -> s1 [66, 65535] { R7996 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 64] { R7996 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7996 += 1, R117 += 1, R118 += 1 };
  s1 -> s3 [65, 65] { R7996 += 1, R117 += 1, R118 += 1 };
  s1 -> s1 [66, 65535] { R7996 += 1, R117 += 1, R118 += 1 };
  s2 -> s2 [0, 65535] { R7996 += 1, R117 += 1, R118 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R7998 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R7997 += 1, R7998 += 1 };
  s0 -> s2 [65, 65] { R7998 += 1, R123 += 1, R124 += 1 };
  s0 -> s3 [65, 65] { R7998 += 1, R123 += 1, R124 += 1 };
  s0 -> s1 [66, 65535] { R7998 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 64] { R7998 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R7998 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [65, 65] { R7998 += 1, R123 += 1, R124 += 1 };
  s1 -> s1 [66, 65535] { R7998 += 1, R123 += 1, R124 += 1 };
  s2 -> s2 [0, 65535] { R7998 += 1, R123 += 1, R124 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R8000 += 1 };
  s0 -> s0 [0, 65535] { R7999 += 1, R8000 += 1 };
  s0 -> s2 [65, 65] { R8000 += 1 };
  s0 -> s3 [65, 65] { R8000 += 1 };
  s0 -> s1 [66, 65535] { R8000 += 1 };
  s1 -> s1 [0, 64] { R8000 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8000 += 1 };
  s1 -> s3 [65, 65] { R8000 += 1 };
  s1 -> s1 [66, 65535] { R8000 += 1 };
  s2 -> s2 [0, 65535] { R8000 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R8002 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R8001 += 1, R8002 += 1 };
  s0 -> s2 [65, 65] { R8002 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [65, 65] { R8002 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [66, 65535] { R8002 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 64] { R8002 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R8002 += 1, R129 += 1, R130 += 1 };
  s1 -> s3 [65, 65] { R8002 += 1, R129 += 1, R130 += 1 };
  s1 -> s1 [66, 65535] { R8002 += 1, R129 += 1, R130 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8002 += 1, R129 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 43] { R8004 += 1 };
  s0 -> s0 [0, 65535] { R8003 += 1, R8004 += 1 };
  s0 -> s1 [45, 45] { R8004 += 1 };
  s0 -> s2 [46, 46] { R8004 += 1 };
  s0 -> s1 [48, 62] { R8004 += 1 };
  s0 -> s3 [65, 65] { R8004 += 1 };
  s0 -> s1 [66, 65535] { R8004 += 1 };
  s1 -> s1 [0, 43] { R8004 += 1 };
  s1 -> s1 [45, 45] { R8004 += 1 };
  s1 -> s2 [46, 46] { R8004 += 1 };
  s1 -> s1 [48, 62] { R8004 += 1 };
  s1 -> s3 [65, 65] { R8004 += 1 };
  s1 -> s1 [66, 65535] { R8004 += 1 };
  s2 -> s1 [0, 43] { R8004 += 1 };
  s2 -> s1 [45, 45] { R8004 += 1 };
  s2 -> s2 [46, 46] { R8004 += 1 };
  s2 -> s1 [48, 62] { R8004 += 1 };
  s2 -> s3 [65, 65] { R8004 += 1 };
  s2 -> s1 [66, 114] { R8004 += 1 };
  s2 -> s8 [115, 115] { R8004 += 1 };
  s2 -> s1 [116, 65535] { R8004 += 1 };
  s3 -> s3 [0, 43] { R8004 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8004 += 1 };
  s3 -> s4 [46, 46] { R8004 += 1 };
  s3 -> s3 [48, 62] { R8004 += 1 };
  s3 -> s3 [65, 65535] { R8004 += 1 };
  s4 -> s3 [0, 43] { R8004 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8004 += 1 };
  s4 -> s4 [46, 46] { R8004 += 1 };
  s4 -> s3 [48, 62] { R8004 += 1 };
  s4 -> s3 [65, 114] { R8004 += 1 };
  s4 -> s5 [115, 115] { R8004 += 1 };
  s4 -> s3 [116, 65535] { R8004 += 1 };
  s5 -> s3 [0, 43] { R8004 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8004 += 1 };
  s5 -> s4 [46, 46] { R8004 += 1 };
  s5 -> s3 [48, 62] { R8004 += 1 };
  s5 -> s3 [65, 110] { R8004 += 1 };
  s5 -> s6 [111, 111] { R8004 += 1 };
  s5 -> s3 [112, 65535] { R8004 += 1 };
  s6 -> s3 [0, 43] { R8004 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8004 += 1 };
  s6 -> s4 [46, 46] { R8004 += 1 };
  s6 -> s3 [48, 62] { R8004 += 1 };
  s6 -> s3 [65, 98] { R8004 += 1 };
  s6 -> s7 [99, 99] { R8004 += 1 };
  s6 -> s3 [100, 65535] { R8004 += 1 };
  s7 -> s3 [0, 43] { R8004 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8004 += 1 };
  s7 -> s4 [46, 46] { R8004 += 1 };
  s7 -> s3 [48, 62] { R8004 += 1 };
  s7 -> s3 [65, 106] { R8004 += 1 };
  s7 -> s3 [108, 65535] { R8004 += 1 };
  s8 -> s1 [0, 43] { R8004 += 1 };
  s8 -> s1 [45, 45] { R8004 += 1 };
  s8 -> s2 [46, 46] { R8004 += 1 };
  s8 -> s1 [48, 62] { R8004 += 1 };
  s8 -> s3 [65, 65] { R8004 += 1 };
  s8 -> s1 [66, 110] { R8004 += 1 };
  s8 -> s9 [111, 111] { R8004 += 1 };
  s8 -> s1 [112, 65535] { R8004 += 1 };
  s9 -> s1 [0, 43] { R8004 += 1 };
  s9 -> s1 [45, 45] { R8004 += 1 };
  s9 -> s2 [46, 46] { R8004 += 1 };
  s9 -> s1 [48, 62] { R8004 += 1 };
  s9 -> s3 [65, 65] { R8004 += 1 };
  s9 -> s1 [66, 98] { R8004 += 1 };
  s9 -> s10 [99, 99] { R8004 += 1 };
  s9 -> s1 [100, 65535] { R8004 += 1 };
  s10 -> s1 [0, 43] { R8004 += 1 };
  s10 -> s1 [45, 45] { R8004 += 1 };
  s10 -> s2 [46, 46] { R8004 += 1 };
  s10 -> s1 [48, 62] { R8004 += 1 };
  s10 -> s3 [65, 65] { R8004 += 1 };
  s10 -> s1 [66, 106] { R8004 += 1 };
  s10 -> s1 [108, 65535] { R8004 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8006 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R8005 += 1, R8006 += 1 };
  s1 -> s1 [0, 65535] { R8006 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 57] { R8008 += 1 };
  s0 -> s2 [0, 65535] { R8008 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R8007 += 1, R8008 += 1 };
  s0 -> s3 [58, 58] { R8008 += 1 };
  s0 -> s1 [59, 65535] { R8008 += 1 };
  s1 -> s1 [0, 57] { R8008 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8008 += 1 };
  s1 -> s1 [59, 65535] { R8008 += 1 };
  s2 -> s1 [0, 57] { R8008 += 1 };
  s2 -> s2 [0, 65535] { R8008 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R8008 += 1 };
  s2 -> s1 [59, 65535] { R8008 += 1 };
  s3 -> s3 [0, 65535] { R8008 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 42] { R8010 += 1 };
  s0 -> s0 [0, 65535] { R8009 += 1, R8010 += 1 };
  s0 -> s2 [0, 65535] { R8010 += 1, R19 += 1 };
  s0 -> s3 [43, 43] { R8010 += 1 };
  s0 -> s1 [44, 65535] { R8010 += 1 };
  s1 -> s1 [0, 42] { R8010 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R8010 += 1 };
  s1 -> s1 [44, 65535] { R8010 += 1 };
  s2 -> s1 [0, 42] { R8010 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8010 += 1, R19 += 1 };
  s2 -> s3 [43, 43] { R8010 += 1 };
  s2 -> s1 [44, 65535] { R8010 += 1 };
  s3 -> s3 [0, 65535] { R8010 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R8012 += 1 };
  s0 -> s0 [0, 65535] { R8011 += 1, R8012 += 1 };
  s0 -> s2 [0, 65535] { R8012 += 1, R22 += 1 };
  s0 -> s3 [65, 65] { R8012 += 1 };
  s0 -> s1 [66, 65535] { R8012 += 1 };
  s1 -> s1 [0, 64] { R8012 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8012 += 1 };
  s1 -> s1 [66, 65535] { R8012 += 1 };
  s2 -> s1 [0, 64] { R8012 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8012 += 1, R22 += 1 };
  s2 -> s3 [65, 65] { R8012 += 1 };
  s2 -> s1 [66, 65535] { R8012 += 1 };
  s3 -> s3 [0, 65535] { R8012 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 90] { R8014 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R8014 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R8013 += 1, R8014 += 1 };
  s0 -> s3 [91, 91] { R8014 += 1, R46 += 1 };
  s0 -> s1 [92, 65535] { R8014 += 1, R46 += 1 };
  s1 -> s5 [0, 65535] { R8014 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8014 += 1, R46 += 1 };
  s2 -> s1 [0, 90] { R8014 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R8014 += 1, R45 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R8014 += 1, R46 += 1 };
  s2 -> s1 [92, 65535] { R8014 += 1, R46 += 1 };
  s3 -> s1 [0, 65535] { R8014 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8014 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R8016 += 1, R47 += 1, R48 += 1 };
  s0 -> s0 [0, 65535] { R8015 += 1, R8016 += 1 };
  s0 -> s2 [0, 65535] { R8016 += 1, R48 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R8016 += 1, R47 += 1, R48 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8016 += 1, R48 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R8016 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8016 += 1, R48 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R8016 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 65535] { R8018 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R8018 += 1, R74 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R8017 += 1, R8018 += 1 };
  s1 -> s1 [0, 65535] { R8018 += 1, R73 += 1, R74 += 1 };
  s1 -> s2 [0, 65535] { R8018 += 1, R74 += 1, R37 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8018 += 1 };
  s2 -> s2 [0, 65535] { R8018 += 1, R74 += 1, R37 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8018 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 107] { R8020 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R8019 += 1, R8020 += 1 };
  s0 -> s2 [0, 65535] { R8020 += 1, R75 += 1, R76 += 1 };
  s0 -> s3 [108, 108] { R8020 += 1, R76 += 1 };
  s0 -> s1 [109, 65535] { R8020 += 1, R76 += 1 };
  s1 -> s1 [0, 65535] { R8020 += 1, R76 += 1 };
  s1 -> s13 [0, 65535] { R8020 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R8020 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R8020 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R8020 += 1, R76 += 1 };
  s2 -> s1 [109, 65535] { R8020 += 1, R76 += 1 };
  s3 -> s1 [0, 110] { R8020 += 1, R76 += 1 };
  s3 -> s3 [0, 65535] { R8020 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R8020 += 1, R76 += 1 };
  s3 -> s1 [112, 65535] { R8020 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8020 += 1, R76 += 1 };
  s5 -> s5 [0, 65535] { R8020 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R8020 += 1, R76 += 1 };
  s5 -> s1 [100, 65535] { R8020 += 1, R76 += 1 };
  s6 -> s1 [0, 96] { R8020 += 1, R76 += 1 };
  s6 -> s6 [0, 65535] { R8020 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R8020 += 1, R76 += 1 };
  s6 -> s1 [98, 65535] { R8020 += 1, R76 += 1 };
  s7 -> s1 [0, 107] { R8020 += 1, R76 += 1 };
  s7 -> s7 [0, 65535] { R8020 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R8020 += 1, R76 += 1 };
  s7 -> s1 [109, 65535] { R8020 += 1, R76 += 1 };
  s8 -> s1 [0, 103] { R8020 += 1, R76 += 1 };
  s8 -> s8 [0, 65535] { R8020 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R8020 += 1, R76 += 1 };
  s8 -> s1 [105, 65535] { R8020 += 1, R76 += 1 };
  s9 -> s1 [0, 110] { R8020 += 1, R76 += 1 };
  s9 -> s9 [0, 65535] { R8020 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R8020 += 1, R76 += 1 };
  s9 -> s1 [112, 65535] { R8020 += 1, R76 += 1 };
  s10 -> s1 [0, 114] { R8020 += 1, R76 += 1 };
  s10 -> s10 [0, 65535] { R8020 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R8020 += 1, R76 += 1 };
  s10 -> s1 [116, 65535] { R8020 += 1, R76 += 1 };
  s11 -> s1 [0, 115] { R8020 += 1, R76 += 1 };
  s11 -> s11 [0, 65535] { R8020 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8020 += 1, R76 += 1 };
  s11 -> s1 [117, 65535] { R8020 += 1, R76 += 1 };
  s12 -> s1 [0, 65535] { R8020 += 1, R76 += 1 };
  s13 -> s13 [0, 65535] { R8020 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R8022 += 1, R78 += 1, R52 += 1 };
  s0 -> s0 [0, 65535] { R8021 += 1, R8022 += 1 };
  s0 -> s2 [0, 65535] { R8022 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R8022 += 1, R78 += 1, R52 += 1 };
  s1 -> s4 [0, 65535] { R8022 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8022 += 1, R78 += 1, R52 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8022 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8022 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 65535] { R8024 += 1, R96 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R8024 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R8023 += 1, R8024 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8024 += 1 };
  s1 -> s1 [0, 65535] { R8024 += 1, R96 += 1, R39 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8024 += 1, R96 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R8024 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8024 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R8025 += 1, R8026 += 1 };
  s0 -> s1 [0, 65535] { R8026 += 1 };
  s1 -> s1 [0, 65535] { R8026 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 42] { R8028 += 1, R98 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R8028 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R8027 += 1, R8028 += 1 };
  s0 -> s3 [43, 43] { R8028 += 1, R98 += 1, R51 += 1 };
  s0 -> s4 [43, 43] { R8028 += 1, R98 += 1, R51 += 1 };
  s0 -> s1 [44, 65535] { R8028 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [0, 42] { R8028 += 1, R98 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8028 += 1 };
  s1 -> s3 [43, 43] { R8028 += 1, R98 += 1, R51 += 1 };
  s1 -> s4 [43, 43] { R8028 += 1, R98 += 1, R51 += 1 };
  s1 -> s1 [44, 65535] { R8028 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [0, 42] { R8028 += 1, R98 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R8028 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R8028 += 1, R98 += 1, R51 += 1 };
  s2 -> s4 [43, 43] { R8028 += 1, R98 += 1, R51 += 1 };
  s2 -> s1 [44, 65535] { R8028 += 1, R98 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R8028 += 1, R98 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R8028 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8028 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8028 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R8030 += 1, R7902 += 1 };
  s0 -> s0 [0, 65535] { R8029 += 1, R8030 += 1 };
  s0 -> s2 [0, 65535] { R8030 += 1, R7901 += 1, R7902 += 1 };
  s0 -> s1 [66, 65535] { R8030 += 1, R7902 += 1 };
  s1 -> s1 [0, 64] { R8030 += 1, R7902 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8030 += 1 };
  s1 -> s1 [66, 65535] { R8030 += 1, R7902 += 1 };
  s2 -> s1 [0, 64] { R8030 += 1, R7902 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8030 += 1, R7901 += 1, R7902 += 1 };
  s2 -> s1 [66, 65535] { R8030 += 1, R7902 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R8032 += 1, R7903 += 1, R7904 += 1 };
  s0 -> s2 [0, 65535] { R8032 += 1, R7904 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R8031 += 1, R8032 += 1 };
  s1 -> s1 [0, 65535] { R8032 += 1, R7903 += 1, R7904 += 1 };
  s1 -> s2 [0, 65535] { R8032 += 1, R7904 += 1, R38 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8032 += 1 };
  s2 -> s2 [0, 65535] { R8032 += 1, R7904 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8032 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65] { R8034 += 1, R7906 += 1 };
  s0 -> s0 [0, 65535] { R8033 += 1, R8034 += 1 };
  s0 -> s2 [0, 65535] { R8034 += 1, R7905 += 1, R7906 += 1 };
  s0 -> s1 [80, 65535] { R8034 += 1, R7906 += 1 };
  s1 -> s1 [0, 65] { R8034 += 1, R7906 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8034 += 1 };
  s1 -> s1 [80, 65535] { R8034 += 1, R7906 += 1 };
  s2 -> s1 [0, 65] { R8034 += 1, R7906 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8034 += 1, R7905 += 1, R7906 += 1 };
  s2 -> s1 [80, 65535] { R8034 += 1, R7906 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_44 {
  init s0;
  s0 -> s0 [0, 65535] { R8035 += 1, R8036 += 1 };
  s0 -> s1 [0, 65535] { R8036 += 1, R7908 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R8036 += 1, R7907 += 1, R7908 += 1 };
  s1 -> s1 [0, 65535] { R8036 += 1, R7908 += 1, R598 += 1 };
  s1 -> s4 [0, 65535] { R8036 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8036 += 1, R7908 += 1, R598 += 1 };
  s2 -> s2 [0, 65535] { R8036 += 1, R7907 += 1, R7908 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8036 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 81] { R8038 += 1, R7910 += 1 };
  s0 -> s0 [0, 65535] { R8037 += 1, R8038 += 1 };
  s0 -> s2 [0, 65535] { R8038 += 1, R7910 += 1, R600 += 1 };
  s0 -> s3 [0, 65535] { R8038 += 1, R7909 += 1, R7910 += 1 };
  s0 -> s1 [83, 65535] { R8038 += 1, R7910 += 1 };
  s1 -> s1 [0, 81] { R8038 += 1, R7910 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8038 += 1 };
  s1 -> s1 [83, 65535] { R8038 += 1, R7910 += 1 };
  s2 -> s1 [0, 81] { R8038 += 1, R7910 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8038 += 1 };
  s2 -> s2 [0, 65535] { R8038 += 1, R7910 += 1, R600 += 1 };
  s2 -> s1 [83, 65535] { R8038 += 1, R7910 += 1 };
  s3 -> s1 [0, 81] { R8038 += 1, R7910 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8038 += 1, R7910 += 1, R600 += 1 };
  s3 -> s3 [0, 65535] { R8038 += 1, R7909 += 1, R7910 += 1 };
  s3 -> s1 [83, 65535] { R8038 += 1, R7910 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8038 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 79] { R8040 += 1, R7912 += 1 };
  s0 -> s2 [0, 65535] { R8040 += 1, R7912 += 1, R602 += 1 };
  s0 -> s3 [0, 65535] { R8040 += 1, R7911 += 1, R7912 += 1 };
  s0 -> s0 [0, 65535] { R8039 += 1, R8040 += 1 };
  s0 -> s1 [81, 65535] { R8040 += 1, R7912 += 1 };
  s1 -> s1 [0, 79] { R8040 += 1, R7912 += 1 };
  s1 -> s1 [0, 65535] { R8040 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R8040 += 1, R7912 += 1 };
  s2 -> s1 [0, 79] { R8040 += 1, R7912 += 1 };
  s2 -> s2 [0, 65535] { R8040 += 1, R7912 += 1, R602 += 1 };
  s2 -> s5 [0, 65535] { R8040 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R8040 += 1, R7912 += 1 };
  s3 -> s1 [0, 79] { R8040 += 1, R7912 += 1 };
  s3 -> s2 [0, 65535] { R8040 += 1, R7912 += 1, R602 += 1 };
  s3 -> s3 [0, 65535] { R8040 += 1, R7911 += 1, R7912 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R8040 += 1, R7912 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8040 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s0 [0, 65535] { R8041 += 1, R8042 += 1 };
  s0 -> s1 [0, 65535] { R8042 += 1, R7914 += 1, R606 += 1, R607 += 1 };
  s0 -> s2 [0, 65535] { R8042 += 1, R7913 += 1, R7914 += 1 };
  s0 -> s3 [0, 65535] { R8042 += 1, R7914 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R8042 += 1, R7914 += 1, R606 += 1, R607 += 1 };
  s1 -> s5 [0, 65535] { R8042 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R8042 += 1, R7914 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [0, 65535] { R8042 += 1, R7914 += 1, R606 += 1, R607 += 1 };
  s2 -> s2 [0, 65535] { R8042 += 1, R7913 += 1, R7914 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8042 += 1, R7914 += 1, R607 += 1, R608 += 1 };
  s3 -> s4 [0, 65535] { R8042 += 1, R7914 += 1 };
  s3 -> s5 [0, 65535] { R8042 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8042 += 1, R7914 += 1, R607 += 1, R608 += 1 };
  s4 -> s4 [0, 65535] { R8042 += 1, R7914 += 1 };
  s4 -> s5 [0, 65535] { R8042 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8042 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s0 [0, 65535] { R8043 += 1, R8044 += 1 };
  s0 -> s1 [0, 65535] { R8044 += 1, R7916 += 1 };
  s0 -> s2 [0, 65535] { R8044 += 1, R7915 += 1, R7916 += 1 };
  s1 -> s4 [0, 65535] { R8044 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8044 += 1, R7916 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8044 += 1, R7916 += 1 };
  s2 -> s2 [0, 65535] { R8044 += 1, R7915 += 1, R7916 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8044 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 79] { R8046 += 1, R7918 += 1, R612 += 1 };
  s0 -> s2 [0, 65535] { R8046 += 1, R7918 += 1, R611 += 1, R612 += 1 };
  s0 -> s3 [0, 65535] { R8046 += 1, R7917 += 1, R7918 += 1 };
  s0 -> s0 [0, 65535] { R8045 += 1, R8046 += 1 };
  s0 -> s1 [81, 65535] { R8046 += 1, R7918 += 1, R612 += 1 };
  s1 -> s1 [0, 79] { R8046 += 1, R7918 += 1, R612 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8046 += 1, R7918 += 1 };
  s1 -> s5 [0, 65535] { R8046 += 1 };
  s1 -> s1 [81, 65535] { R8046 += 1, R7918 += 1, R612 += 1 };
  s2 -> s1 [0, 79] { R8046 += 1, R7918 += 1, R612 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8046 += 1, R7918 += 1, R611 += 1, R612 += 1 };
  s2 -> s5 [0, 65535] { R8046 += 1 };
  s2 -> s1 [81, 65535] { R8046 += 1, R7918 += 1, R612 += 1 };
  s3 -> s1 [0, 79] { R8046 += 1, R7918 += 1, R612 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8046 += 1, R7918 += 1, R611 += 1, R612 += 1 };
  s3 -> s3 [0, 65535] { R8046 += 1, R7917 += 1, R7918 += 1 };
  s3 -> s1 [81, 65535] { R8046 += 1, R7918 += 1, R612 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8046 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R8048 += 1, R7920 += 1, R617 += 1, R618 += 1 };
  s0 -> s2 [0, 65535] { R8048 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s3 [0, 65535] { R8048 += 1, R7920 += 1, R616 += 1, R617 += 1 };
  s0 -> s0 [0, 65535] { R8047 += 1, R8048 += 1 };
  s1 -> s1 [0, 65535] { R8048 += 1, R7920 += 1, R617 += 1, R618 += 1 };
  s1 -> s6 [0, 65535] { R8048 += 1, R7920 += 1 };
  s1 -> s4 [0, 65535] { R8048 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8048 += 1, R7920 += 1, R617 += 1, R618 += 1 };
  s2 -> s2 [0, 65535] { R8048 += 1, R7919 += 1, R7920 += 1 };
  s2 -> s3 [0, 65535] { R8048 += 1, R7920 += 1, R616 += 1, R617 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8048 += 1, R7920 += 1, R617 += 1, R618 += 1 };
  s3 -> s4 [0, 65535] { R8048 += 1 };
  s3 -> s3 [0, 65535] { R8048 += 1, R7920 += 1, R616 += 1, R617 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8048 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8048 += 1, R7920 += 1 };
  s6 -> s4 [0, 65535] { R8048 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R8050 += 1, R7921 += 1, R7922 += 1 };
  s0 -> s0 [0, 65535] { R8049 += 1, R8050 += 1 };
  s0 -> s3 [0, 65535] { R8050 += 1, R7922 += 1, R621 += 1, R622 += 1 };
  s0 -> s1 [91, 107] { R8050 += 1, R7922 += 1, R622 += 1 };
  s0 -> s4 [108, 108] { R8050 += 1, R7922 += 1, R622 += 1 };
  s0 -> s1 [109, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s1 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s1 -> s1 [0, 65535] { R8050 += 1, R7922 += 1 };
  s1 -> s5 [0, 65535] { R8050 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s2 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s2 -> s2 [0, 65535] { R8050 += 1, R7921 += 1, R7922 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8050 += 1, R7922 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [91, 107] { R8050 += 1, R7922 += 1, R622 += 1 };
  s2 -> s4 [108, 108] { R8050 += 1, R7922 += 1, R622 += 1 };
  s2 -> s1 [109, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s3 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s3 -> s5 [0, 65535] { R8050 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8050 += 1, R7922 += 1, R621 += 1, R622 += 1 };
  s3 -> s1 [91, 107] { R8050 += 1, R7922 += 1, R622 += 1 };
  s3 -> s4 [108, 108] { R8050 += 1, R7922 += 1, R622 += 1 };
  s3 -> s1 [109, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s4 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s4 -> s5 [0, 65535] { R8050 += 1 };
  s4 -> s4 [0, 65535] { R8050 += 1, R7922 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R8050 += 1, R7922 += 1, R622 += 1 };
  s4 -> s7 [111, 111] { R8050 += 1, R7922 += 1, R622 += 1 };
  s4 -> s1 [112, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s5 -> s5 [0, 65535] { R8050 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s7 -> s5 [0, 65535] { R8050 += 1 };
  s7 -> s7 [0, 65535] { R8050 += 1, R7922 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R8050 += 1, R7922 += 1, R622 += 1 };
  s7 -> s8 [99, 99] { R8050 += 1, R7922 += 1, R622 += 1 };
  s7 -> s1 [100, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s8 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s8 -> s5 [0, 65535] { R8050 += 1 };
  s8 -> s8 [0, 65535] { R8050 += 1, R7922 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R8050 += 1, R7922 += 1, R622 += 1 };
  s8 -> s9 [97, 97] { R8050 += 1, R7922 += 1, R622 += 1 };
  s8 -> s1 [98, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s9 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s9 -> s9 [0, 65535] { R8050 += 1, R7922 += 1 };
  s9 -> s5 [0, 65535] { R8050 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R8050 += 1, R7922 += 1, R622 += 1 };
  s9 -> s10 [108, 108] { R8050 += 1, R7922 += 1, R622 += 1 };
  s9 -> s1 [109, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s10 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s10 -> s5 [0, 65535] { R8050 += 1 };
  s10 -> s10 [0, 65535] { R8050 += 1, R7922 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R8050 += 1, R7922 += 1, R622 += 1 };
  s10 -> s11 [104, 104] { R8050 += 1, R7922 += 1, R622 += 1 };
  s10 -> s1 [105, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s11 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s11 -> s11 [0, 65535] { R8050 += 1, R7922 += 1 };
  s11 -> s5 [0, 65535] { R8050 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R8050 += 1, R7922 += 1, R622 += 1 };
  s11 -> s12 [111, 111] { R8050 += 1, R7922 += 1, R622 += 1 };
  s11 -> s1 [112, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s12 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s12 -> s12 [0, 65535] { R8050 += 1, R7922 += 1 };
  s12 -> s5 [0, 65535] { R8050 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R8050 += 1, R7922 += 1, R622 += 1 };
  s12 -> s13 [115, 115] { R8050 += 1, R7922 += 1, R622 += 1 };
  s12 -> s1 [116, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s13 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s13 -> s5 [0, 65535] { R8050 += 1 };
  s13 -> s13 [0, 65535] { R8050 += 1, R7922 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R8050 += 1, R7922 += 1, R622 += 1 };
  s13 -> s14 [116, 116] { R8050 += 1, R7922 += 1, R622 += 1 };
  s13 -> s1 [117, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  s14 -> s1 [0, 80] { R8050 += 1, R7922 += 1, R622 += 1 };
  s14 -> s1 [91, 65535] { R8050 += 1, R7922 += 1, R622 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s0 [0, 65535] { R8051 += 1, R8052 += 1 };
  s0 -> s1 [0, 65535] { R8052 += 1, R7923 += 1, R7924 += 1 };
  s0 -> s2 [0, 65535] { R8052 += 1, R7924 += 1, R626 += 1, R627 += 1 };
  s0 -> s3 [0, 65535] { R8052 += 1, R7924 += 1, R627 += 1, R628 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8052 += 1, R7923 += 1, R7924 += 1 };
  s1 -> s2 [0, 65535] { R8052 += 1, R7924 += 1, R626 += 1, R627 += 1 };
  s1 -> s3 [0, 65535] { R8052 += 1, R7924 += 1, R627 += 1, R628 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8052 += 1 };
  s2 -> s2 [0, 65535] { R8052 += 1, R7924 += 1, R626 += 1, R627 += 1 };
  s2 -> s3 [0, 65535] { R8052 += 1, R7924 += 1, R627 += 1, R628 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8052 += 1 };
  s3 -> s6 [0, 65535] { R8052 += 1, R7924 += 1 };
  s3 -> s3 [0, 65535] { R8052 += 1, R7924 += 1, R627 += 1, R628 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8052 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8052 += 1 };
  s6 -> s6 [0, 65535] { R8052 += 1, R7924 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65535] { R8054 += 1, R7926 += 1 };
  s0 -> s0 [0, 65535] { R8053 += 1, R8054 += 1 };
  s0 -> s2 [0, 65535] { R8054 += 1, R7925 += 1, R7926 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8054 += 1, R7926 += 1 };
  s1 -> s4 [0, 65535] { R8054 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8054 += 1, R7926 += 1 };
  s2 -> s2 [0, 65535] { R8054 += 1, R7925 += 1, R7926 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8054 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R8056 += 1, R7928 += 1 };
  s0 -> s2 [0, 65535] { R8056 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s0 [0, 65535] { R8055 += 1, R8056 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8056 += 1, R7928 += 1 };
  s1 -> s4 [0, 65535] { R8056 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8056 += 1, R7928 += 1 };
  s2 -> s2 [0, 65535] { R8056 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8056 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s0 [0, 65535] { R8057 += 1, R8058 += 1 };
  s0 -> s1 [0, 65535] { R8058 += 1, R7930 += 1, R7693 += 1, R7694 += 1 };
  s0 -> s2 [0, 65535] { R8058 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [0, 65535] { R8058 += 1, R7930 += 1 };
  s1 -> s1 [0, 65535] { R8058 += 1, R7930 += 1, R7693 += 1, R7694 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8058 += 1 };
  s1 -> s3 [0, 65535] { R8058 += 1, R7930 += 1 };
  s2 -> s1 [0, 65535] { R8058 += 1, R7930 += 1, R7693 += 1, R7694 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8058 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s3 [0, 65535] { R8058 += 1, R7930 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8058 += 1 };
  s3 -> s3 [0, 65535] { R8058 += 1, R7930 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8058 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 65535] { R8060 += 1, R7931 += 1, R7932 += 1 };
  s0 -> s2 [0, 65535] { R8060 += 1, R7932 += 1 };
  s0 -> s0 [0, 65535] { R8059 += 1, R8060 += 1 };
  s1 -> s1 [0, 65535] { R8060 += 1, R7931 += 1, R7932 += 1 };
  s1 -> s2 [0, 65535] { R8060 += 1, R7932 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8060 += 1 };
  s2 -> s2 [0, 65535] { R8060 += 1, R7932 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8060 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 79] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s0 -> s2 [0, 65535] { R8062 += 1, R7933 += 1, R7934 += 1 };
  s0 -> s1 [0, 65535] { R8062 += 1, R7934 += 1 };
  s0 -> s0 [0, 65535] { R8061 += 1, R8062 += 1 };
  s0 -> s3 [80, 80] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s0 -> s4 [80, 80] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s0 -> s1 [81, 65535] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s1 -> s1 [0, 79] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8062 += 1, R7934 += 1 };
  s1 -> s6 [0, 65535] { R8062 += 1 };
  s1 -> s3 [80, 80] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s1 -> s4 [80, 80] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s1 -> s1 [81, 65535] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s2 -> s1 [0, 79] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s2 -> s2 [0, 65535] { R8062 += 1, R7933 += 1, R7934 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R8062 += 1, R7934 += 1 };
  s2 -> s3 [80, 80] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s2 -> s4 [80, 80] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s2 -> s1 [81, 65535] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s3 -> s3 [0, 65535] { R8062 += 1, R7934 += 1, R7899 += 1, R7900 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R8062 += 1, R7934 += 1 };
  s3 -> s6 [0, 65535] { R8062 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8062 += 1, R7934 += 1 };
  s4 -> s6 [0, 65535] { R8062 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8062 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8062 += 1, R7934 += 1 };
  s7 -> s6 [0, 65535] { R8062 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s0 [0, 65535] { R8063 += 1, R8064 += 1 };
  s0 -> s1 [0, 65535] { R8064 += 1, R7953 += 1, R7954 += 1 };
  s0 -> s2 [0, 65535] { R8064 += 1, R7954 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8064 += 1, R7953 += 1, R7954 += 1 };
  s1 -> s2 [0, 65535] { R8064 += 1, R7954 += 1, R40 += 1 };
  s2 -> s3 [0, 65535] { R8064 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8064 += 1, R7954 += 1, R40 += 1 };
  s3 -> s3 [0, 65535] { R8064 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 64] { R8066 += 1, R7956 += 1 };
  s0 -> s0 [0, 65535] { R8065 += 1, R8066 += 1 };
  s0 -> s2 [0, 65535] { R8066 += 1, R7955 += 1, R7956 += 1 };
  s0 -> s3 [65, 65] { R8066 += 1, R7956 += 1 };
  s0 -> s4 [65, 65] { R8066 += 1, R7956 += 1 };
  s0 -> s5 [80, 80] { R8066 += 1, R7956 += 1 };
  s0 -> s1 [81, 65535] { R8066 += 1, R7956 += 1 };
  s1 -> s1 [0, 64] { R8066 += 1, R7956 += 1 };
  s1 -> s3 [65, 65] { R8066 += 1, R7956 += 1 };
  s1 -> s4 [65, 65] { R8066 += 1, R7956 += 1 };
  s1 -> s5 [80, 80] { R8066 += 1, R7956 += 1 };
  s1 -> s1 [81, 65535] { R8066 += 1, R7956 += 1 };
  s2 -> s1 [0, 64] { R8066 += 1, R7956 += 1 };
  s2 -> s2 [0, 65535] { R8066 += 1, R7955 += 1, R7956 += 1 };
  s2 -> s3 [65, 65] { R8066 += 1, R7956 += 1 };
  s2 -> s4 [65, 65] { R8066 += 1, R7956 += 1 };
  s2 -> s5 [80, 80] { R8066 += 1, R7956 += 1 };
  s2 -> s1 [81, 65535] { R8066 += 1, R7956 += 1 };
  s3 -> s3 [0, 65] { R8066 += 1, R7956 += 1 };
  s3 -> s7 [80, 80] { R8066 += 1, R7956 += 1 };
  s3 -> s3 [81, 65535] { R8066 += 1, R7956 += 1 };
  s5 -> s5 [0, 64] { R8066 += 1, R7956 += 1 };
  s5 -> s5 [0, 65535] { R8066 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R8066 += 1, R7956 += 1 };
  s5 -> s8 [65, 65] { R8066 += 1, R7956 += 1 };
  s5 -> s5 [80, 65535] { R8066 += 1, R7956 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R8066 += 1, R7956 += 1 };
  s7 -> s7 [0, 65535] { R8066 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R8066 += 1, R7956 += 1 };
  s8 -> s8 [0, 65535] { R8066 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 64] { R8068 += 1, R7958 += 1, R597 += 1 };
  s0 -> s0 [0, 65535] { R8067 += 1, R8068 += 1 };
  s0 -> s2 [0, 65535] { R8068 += 1, R7957 += 1, R7958 += 1 };
  s0 -> s3 [65, 65] { R8068 += 1, R7958 += 1, R597 += 1 };
  s0 -> s4 [65, 65] { R8068 += 1, R7958 += 1, R597 += 1 };
  s0 -> s1 [66, 65535] { R8068 += 1, R7958 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R8068 += 1, R7958 += 1, R597 += 1 };
  s1 -> s1 [0, 65535] { R8068 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8068 += 1, R7958 += 1, R597 += 1 };
  s1 -> s4 [65, 65] { R8068 += 1, R7958 += 1, R597 += 1 };
  s1 -> s1 [66, 65535] { R8068 += 1, R7958 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R8068 += 1, R7958 += 1, R597 += 1 };
  s2 -> s2 [0, 65535] { R8068 += 1, R7957 += 1, R7958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8068 += 1, R7958 += 1, R597 += 1 };
  s2 -> s4 [65, 65] { R8068 += 1, R7958 += 1, R597 += 1 };
  s2 -> s1 [66, 65535] { R8068 += 1, R7958 += 1, R597 += 1 };
  s3 -> s3 [0, 65535] { R8068 += 1, R7958 += 1, R597 += 1 };
  s3 -> s6 [0, 65535] { R8068 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8068 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8068 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 64] { R8070 += 1, R7960 += 1, R599 += 1 };
  s0 -> s2 [0, 65535] { R8070 += 1, R7959 += 1, R7960 += 1 };
  s0 -> s0 [0, 65535] { R8069 += 1, R8070 += 1 };
  s0 -> s3 [65, 65] { R8070 += 1, R7960 += 1, R599 += 1 };
  s0 -> s4 [65, 65] { R8070 += 1, R7960 += 1, R599 += 1 };
  s0 -> s1 [66, 65535] { R8070 += 1, R7960 += 1, R599 += 1 };
  s1 -> s1 [0, 64] { R8070 += 1, R7960 += 1, R599 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8070 += 1 };
  s1 -> s3 [65, 65] { R8070 += 1, R7960 += 1, R599 += 1 };
  s1 -> s4 [65, 65] { R8070 += 1, R7960 += 1, R599 += 1 };
  s1 -> s1 [66, 65535] { R8070 += 1, R7960 += 1, R599 += 1 };
  s2 -> s1 [0, 64] { R8070 += 1, R7960 += 1, R599 += 1 };
  s2 -> s2 [0, 65535] { R8070 += 1, R7959 += 1, R7960 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8070 += 1, R7960 += 1, R599 += 1 };
  s2 -> s4 [65, 65] { R8070 += 1, R7960 += 1, R599 += 1 };
  s2 -> s1 [66, 65535] { R8070 += 1, R7960 += 1, R599 += 1 };
  s3 -> s3 [0, 65535] { R8070 += 1, R7960 += 1, R599 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8070 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8070 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 64] { R8072 += 1, R7962 += 1, R601 += 1 };
  s0 -> s0 [0, 65535] { R8071 += 1, R8072 += 1 };
  s0 -> s2 [0, 65535] { R8072 += 1, R7961 += 1, R7962 += 1 };
  s0 -> s3 [65, 65] { R8072 += 1, R7962 += 1, R601 += 1 };
  s0 -> s4 [65, 65] { R8072 += 1, R7962 += 1, R601 += 1 };
  s0 -> s1 [66, 65535] { R8072 += 1, R7962 += 1, R601 += 1 };
  s1 -> s1 [0, 64] { R8072 += 1, R7962 += 1, R601 += 1 };
  s1 -> s1 [0, 65535] { R8072 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8072 += 1, R7962 += 1, R601 += 1 };
  s1 -> s4 [65, 65] { R8072 += 1, R7962 += 1, R601 += 1 };
  s1 -> s1 [66, 65535] { R8072 += 1, R7962 += 1, R601 += 1 };
  s2 -> s1 [0, 64] { R8072 += 1, R7962 += 1, R601 += 1 };
  s2 -> s2 [0, 65535] { R8072 += 1, R7961 += 1, R7962 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8072 += 1, R7962 += 1, R601 += 1 };
  s2 -> s4 [65, 65] { R8072 += 1, R7962 += 1, R601 += 1 };
  s2 -> s1 [66, 65535] { R8072 += 1, R7962 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R8072 += 1, R7962 += 1, R601 += 1 };
  s3 -> s6 [0, 65535] { R8072 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8072 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8072 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 64] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s0 -> s2 [0, 65535] { R8074 += 1, R7963 += 1, R7964 += 1 };
  s0 -> s0 [0, 65535] { R8073 += 1, R8074 += 1 };
  s0 -> s3 [65, 65] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s0 -> s4 [65, 65] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s0 -> s1 [66, 65535] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 64] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [0, 65535] { R8074 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s1 -> s4 [65, 65] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s1 -> s1 [66, 65535] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [0, 64] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s2 -> s2 [0, 65535] { R8074 += 1, R7963 += 1, R7964 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [65, 65] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s2 -> s1 [66, 65535] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R8074 += 1, R7964 += 1, R603 += 1, R604 += 1 };
  s3 -> s6 [0, 65535] { R8074 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8074 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8074 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R8076 += 1, R7966 += 1 };
  s0 -> s0 [0, 65535] { R8075 += 1, R8076 += 1 };
  s0 -> s2 [0, 65535] { R8076 += 1, R7965 += 1, R7966 += 1 };
  s0 -> s3 [65, 65] { R8076 += 1, R7966 += 1 };
  s0 -> s4 [65, 65] { R8076 += 1, R7966 += 1 };
  s0 -> s1 [66, 65535] { R8076 += 1, R7966 += 1 };
  s1 -> s1 [0, 64] { R8076 += 1, R7966 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8076 += 1 };
  s1 -> s3 [65, 65] { R8076 += 1, R7966 += 1 };
  s1 -> s4 [65, 65] { R8076 += 1, R7966 += 1 };
  s1 -> s1 [66, 65535] { R8076 += 1, R7966 += 1 };
  s2 -> s1 [0, 64] { R8076 += 1, R7966 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8076 += 1, R7965 += 1, R7966 += 1 };
  s2 -> s3 [65, 65] { R8076 += 1, R7966 += 1 };
  s2 -> s4 [65, 65] { R8076 += 1, R7966 += 1 };
  s2 -> s1 [66, 65535] { R8076 += 1, R7966 += 1 };
  s3 -> s3 [0, 65535] { R8076 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8076 += 1 };
  s4 -> s4 [0, 65535] { R8076 += 1, R7966 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8076 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R8078 += 1, R7967 += 1, R7968 += 1 };
  s0 -> s0 [0, 65535] { R8077 += 1, R8078 += 1 };
  s0 -> s3 [65, 65] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R8078 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R8078 += 1, R7967 += 1, R7968 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s3 -> s6 [0, 65535] { R8078 += 1 };
  s3 -> s3 [0, 65535] { R8078 += 1, R7968 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8078 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8078 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s0 -> s0 [0, 65535] { R8079 += 1, R8080 += 1 };
  s0 -> s2 [0, 65535] { R8080 += 1, R7969 += 1, R7970 += 1 };
  s0 -> s3 [65, 65] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s0 -> s4 [65, 65] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s0 -> s1 [66, 65535] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [0, 64] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8080 += 1 };
  s1 -> s3 [65, 65] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s1 -> s4 [65, 65] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s1 -> s1 [66, 65535] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [0, 64] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8080 += 1, R7969 += 1, R7970 += 1 };
  s2 -> s3 [65, 65] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [65, 65] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s2 -> s1 [66, 65535] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8080 += 1, R7970 += 1, R613 += 1, R614 += 1 };
  s3 -> s6 [0, 65535] { R8080 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8080 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8080 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s0 -> s2 [0, 65535] { R8082 += 1, R7971 += 1, R7972 += 1 };
  s0 -> s0 [0, 65535] { R8081 += 1, R8082 += 1 };
  s0 -> s3 [65, 65] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s0 -> s4 [65, 65] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s0 -> s1 [66, 65535] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 64] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8082 += 1 };
  s1 -> s3 [65, 65] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s1 -> s4 [65, 65] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [66, 65535] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [0, 64] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8082 += 1, R7971 += 1, R7972 += 1 };
  s2 -> s3 [65, 65] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s2 -> s4 [65, 65] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [66, 65535] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s3 -> s3 [0, 65535] { R8082 += 1, R7972 += 1, R619 += 1, R620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8082 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8082 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8082 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R8084 += 1, R7973 += 1, R7974 += 1 };
  s0 -> s0 [0, 65535] { R8083 += 1, R8084 += 1 };
  s0 -> s3 [65, 65] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s0 -> s4 [65, 65] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s0 -> s1 [66, 65535] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [0, 64] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8084 += 1 };
  s1 -> s3 [65, 65] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s1 -> s4 [65, 65] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s1 -> s1 [66, 65535] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [0, 64] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s2 -> s2 [0, 65535] { R8084 += 1, R7973 += 1, R7974 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s2 -> s4 [65, 65] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s2 -> s1 [66, 65535] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s3 -> s3 [0, 65535] { R8084 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8084 += 1, R7974 += 1, R623 += 1, R624 += 1 };
  s4 -> s6 [0, 65535] { R8084 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8084 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s0 -> s2 [0, 64] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s0 -> s0 [0, 65535] { R8085 += 1, R8086 += 1 };
  s0 -> s3 [0, 65535] { R8086 += 1, R7975 += 1, R7976 += 1 };
  s0 -> s4 [65, 65] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s0 -> s5 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s0 -> s6 [65, 65] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s0 -> s7 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s0 -> s1 [66, 65535] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s0 -> s2 [66, 65535] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s1 -> s1 [0, 64] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s1 -> s2 [0, 64] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s1 -> s4 [65, 65] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s1 -> s5 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s1 -> s6 [65, 65] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s1 -> s7 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s1 -> s1 [66, 65535] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s1 -> s2 [66, 65535] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s2 -> s2 [0, 64] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s2 -> s11 [0, 64] { R8086 += 1, R7976 += 1 };
  s2 -> s8 [65, 65] { R8086 += 1, R7976 += 1 };
  s2 -> s5 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s2 -> s12 [65, 65] { R8086 += 1, R7976 += 1 };
  s2 -> s7 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s2 -> s2 [66, 65535] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s2 -> s11 [66, 65535] { R8086 += 1, R7976 += 1 };
  s3 -> s1 [0, 64] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s3 -> s2 [0, 64] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s3 -> s3 [0, 65535] { R8086 += 1, R7975 += 1, R7976 += 1 };
  s3 -> s4 [65, 65] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s3 -> s5 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s3 -> s6 [65, 65] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s3 -> s7 [65, 65] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s3 -> s1 [66, 65535] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s3 -> s2 [66, 65535] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s4 -> s4 [0, 65535] { R8086 += 1, R7976 += 1, R6677 += 1, R6678 += 1 };
  s4 -> s7 [0, 65535] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s7 -> s8 [0, 65535] { R8086 += 1, R7976 += 1 };
  s7 -> s7 [0, 65535] { R8086 += 1, R7976 += 1, R6678 += 1, R6679 += 1 };
  s8 -> s8 [0, 65535] { R8086 += 1, R7976 += 1 };
  s8 -> s9 [0, 65535] { R8086 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R8086 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R8086 += 1, R7976 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8086 += 1 };
  s11 -> s8 [65, 65] { R8086 += 1, R7976 += 1 };
  s11 -> s12 [65, 65] { R8086 += 1, R7976 += 1 };
  s11 -> s11 [66, 65535] { R8086 += 1, R7976 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R8086 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R8088 += 1, R7978 += 1 };
  s0 -> s0 [0, 65535] { R8087 += 1, R8088 += 1 };
  s0 -> s2 [0, 65535] { R8088 += 1, R7977 += 1, R7978 += 1 };
  s0 -> s3 [65, 65] { R8088 += 1, R7978 += 1 };
  s0 -> s4 [65, 65] { R8088 += 1, R7978 += 1 };
  s0 -> s1 [66, 65535] { R8088 += 1, R7978 += 1 };
  s1 -> s1 [0, 64] { R8088 += 1, R7978 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8088 += 1 };
  s1 -> s3 [65, 65] { R8088 += 1, R7978 += 1 };
  s1 -> s4 [65, 65] { R8088 += 1, R7978 += 1 };
  s1 -> s1 [66, 65535] { R8088 += 1, R7978 += 1 };
  s2 -> s1 [0, 64] { R8088 += 1, R7978 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8088 += 1, R7977 += 1, R7978 += 1 };
  s2 -> s3 [65, 65] { R8088 += 1, R7978 += 1 };
  s2 -> s4 [65, 65] { R8088 += 1, R7978 += 1 };
  s2 -> s1 [66, 65535] { R8088 += 1, R7978 += 1 };
  s3 -> s3 [0, 65535] { R8088 += 1, R7978 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8088 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8088 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8088 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s0 -> s2 [0, 64] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s0 -> s3 [0, 65535] { R8090 += 1, R7979 += 1, R7980 += 1 };
  s0 -> s0 [0, 65535] { R8089 += 1, R8090 += 1 };
  s0 -> s4 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s0 -> s5 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s0 -> s6 [65, 65] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s0 -> s7 [65, 65] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s0 -> s1 [66, 65535] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s0 -> s2 [66, 65535] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s1 -> s1 [0, 64] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s1 -> s1 [0, 65535] { R8090 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s1 -> s5 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s1 -> s1 [66, 65535] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s2 -> s1 [0, 64] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s2 -> s2 [0, 64] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s2 -> s4 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s2 -> s5 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s2 -> s6 [65, 65] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s2 -> s7 [65, 65] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s2 -> s1 [66, 65535] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s2 -> s2 [66, 65535] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s3 -> s1 [0, 64] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s3 -> s2 [0, 64] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s3 -> s3 [0, 65535] { R8090 += 1, R7979 += 1, R7980 += 1 };
  s3 -> s4 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s3 -> s5 [65, 65] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s3 -> s6 [65, 65] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s3 -> s7 [65, 65] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s3 -> s1 [66, 65535] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s3 -> s2 [66, 65535] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s4 -> s4 [0, 65535] { R8090 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s8 [0, 65535] { R8090 += 1 };
  s5 -> s5 [0, 65535] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R8090 += 1, R7980 += 1, R7690 += 1, R7691 += 1 };
  s7 -> s7 [0, 65535] { R8090 += 1, R7980 += 1, R7689 += 1, R7690 += 1 };
  s8 -> s8 [0, 65535] { R8090 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R8092 += 1, R7982 += 1 };
  s0 -> s2 [0, 65535] { R8092 += 1, R7981 += 1, R7982 += 1 };
  s0 -> s0 [0, 65535] { R8091 += 1, R8092 += 1 };
  s0 -> s3 [65, 65] { R8092 += 1, R7982 += 1 };
  s0 -> s4 [65, 65] { R8092 += 1, R7982 += 1 };
  s0 -> s1 [66, 65535] { R8092 += 1, R7982 += 1 };
  s1 -> s1 [0, 64] { R8092 += 1, R7982 += 1 };
  s1 -> s1 [0, 65535] { R8092 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8092 += 1, R7982 += 1 };
  s1 -> s4 [65, 65] { R8092 += 1, R7982 += 1 };
  s1 -> s1 [66, 65535] { R8092 += 1, R7982 += 1 };
  s2 -> s1 [0, 64] { R8092 += 1, R7982 += 1 };
  s2 -> s2 [0, 65535] { R8092 += 1, R7981 += 1, R7982 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8092 += 1, R7982 += 1 };
  s2 -> s4 [65, 65] { R8092 += 1, R7982 += 1 };
  s2 -> s1 [66, 65535] { R8092 += 1, R7982 += 1 };
  s3 -> s3 [0, 65535] { R8092 += 1, R7982 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8092 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8092 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8092 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s0 -> s2 [0, 64] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s0 -> s3 [0, 65535] { R8094 += 1, R7983 += 1, R7984 += 1 };
  s0 -> s0 [0, 65535] { R8093 += 1, R8094 += 1 };
  s0 -> s4 [65, 65] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s0 -> s5 [65, 65] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s0 -> s6 [65, 65] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s0 -> s7 [65, 65] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s0 -> s1 [66, 79] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s0 -> s2 [66, 65535] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s0 -> s1 [81, 65535] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s1 -> s1 [0, 64] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R8094 += 1 };
  s1 -> s5 [65, 65] { R8094 += 1, R7984 += 1 };
  s1 -> s6 [65, 65] { R8094 += 1, R7984 += 1 };
  s1 -> s1 [66, 79] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s1 -> s1 [66, 65535] { R8094 += 1, R7984 += 1 };
  s1 -> s1 [81, 65535] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s2 -> s1 [0, 64] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s2 -> s2 [0, 64] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s2 -> s4 [65, 65] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s2 -> s5 [65, 65] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s2 -> s6 [65, 65] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s2 -> s7 [65, 65] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s2 -> s1 [66, 79] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s2 -> s2 [66, 65535] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s2 -> s1 [81, 65535] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s3 -> s1 [0, 64] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s3 -> s2 [0, 64] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s3 -> s3 [0, 65535] { R8094 += 1, R7983 += 1, R7984 += 1 };
  s3 -> s4 [65, 65] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s3 -> s5 [65, 65] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s3 -> s6 [65, 65] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s3 -> s7 [65, 65] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s3 -> s1 [66, 79] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s3 -> s2 [66, 65535] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s3 -> s1 [81, 65535] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s5 -> s5 [0, 65535] { R8094 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 79] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s6 -> s6 [0, 65535] { R8094 += 1, R7984 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R8094 += 1 };
  s6 -> s6 [81, 65535] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s7 -> s6 [0, 79] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s7 -> s7 [0, 65535] { R8094 += 1, R7984 += 1, R7895 += 1, R7896 += 1 };
  s7 -> s6 [81, 65535] { R8094 += 1, R7984 += 1, R7896 += 1, R7897 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8094 += 1 };
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining c8
automaton c8_0 {
  init s0;
  s0 -> s1 [109, 109];
  accepting s1;
};
};
synchronised {  // Automata constraining P92
automaton P92_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R6 = R7934 && R7 = R8094 && R45 = 0 && R46 = 1 && R47 = 0 && R48 = 1 && R73 = 0 && R74 = R7934 && R75 = 0 && R76 = R7934 && R77 = 0 && R78 = R7934 && R79 = 0 && R80 = R8094 && R81 = 0 && R82 = R8094 && R83 = 0 && R84 = R8094 && R598 + R597 = 0 && R7901 = 0 && R7902 = R7934 && R7903 = 0 && R7904 = R7934 && R7905 = 0 && R7906 = R7934 && R7907 = 0 && R7908 = R7934 && R7909 = 0 && R7910 = R7934 && R7911 = 0 && R7912 = R7934 && R7913 = 0 && R7914 = R7934 && R7915 = 0 && R7916 = R7934 && R7917 = 0 && R7918 = R7934 && R7919 = 0 && R7920 = R7934 && R7921 = 0 && R7922 = R7934 && R7923 = 0 && R7924 = R7934 && R7925 = 0 && R7926 = R7934 && R7927 = 0 && R7928 = R7934 && R7929 = 0 && R7930 = R7934 && R7931 = 0 && R7932 = R7934 && R7933 = 0 && R7935 = 0 && R7936 = R8094 && R7937 = 0 && R7938 = R8094 && R7939 = 0 && R7940 = R8094 && R7941 = 0 && R7942 = R8094 && R7943 = 0 && R7944 = R8094 && R7945 = 0 && R7946 = R8094 && R7947 = 0 && R7948 = R8094 && R7949 = 0 && R7950 = R8094 && R7951 = 0 && R7952 = R8094 && R7955 = 0 && R7956 = 0 && R7975 = 0 && R7976 = 0 && R7979 = 0 && R7980 = 0 && R7983 = 0 && R7984 = 0 && R8003 = 10 && R8004 = R8094 && R8005 = 10 && R8006 = R8094 && R8007 = 10 && R8008 = R8094 && R8009 = 10 && R8010 = R8094 && R8011 = 10 && R8012 = R8094 && R8013 = 10 && R8014 = R8094 && R8015 = 10 && R8016 = R8094 && R8017 = 10 && R8018 = R8094 && R8019 = 10 && R8020 = R8094 && R8021 = 10 && R8022 = R8094 && R8023 = 10 && R8024 = R8094 && R8025 = 10 && R8026 = R8094 && R8027 = 10 && R8028 = R8094 && R8029 = 10 && R8030 = R8094 && R8031 = 10 && R8032 = R8094 && R8033 = 10 && R8034 = R8094 && R8035 = 10 && R8036 = R8094 && R8037 = 10 && R8038 = R8094 && R8039 = 10 && R8040 = R8094 && R8041 = 10 && R8042 = R8094 && R8043 = 10 && R8044 = R8094 && R8045 = 10 && R8046 = R8094 && R8047 = 10 && R8048 = R8094 && R8049 = 10 && R8050 = R8094 && R8051 = 10 && R8052 = R8094 && R8053 = 10 && R8054 = R8094 && R8055 = 10 && R8056 = R8094 && R8057 = 10 && R8058 = R8094 && R8059 = 10 && R8060 = R8094 && R8061 = 10 && R8062 = R8094 && R8063 = 10 && R8064 = R8094 && R8065 = 10 && R8066 = R8094 && R8067 = 10 && R8068 = R8094 && R8069 = 10 && R8070 = R8094 && R8071 = 10 && R8072 = R8094 && R8073 = 10 && R8074 = R8094 && R8075 = 10 && R8076 = R8094 && R8077 = 10 && R8078 = R8094 && R8079 = 10 && R8080 = R8094 && R8081 = 10 && R8082 = R8094 && R8083 = 10 && R8084 = R8094 && R8085 = 10 && R8086 = R8094 && R8087 = 10 && R8088 = R8094 && R8089 = 10 && R8090 = R8094 && R8091 = 10 && R8092 = R8094 && R8093 = 10 && R52 + R51 != 0 && R54 + R53 != 0 && R122 + R119 + R134 + R131 != 0 && R628 + R625 + R7900 + R7897 != 0 && R18 < 1 && R19 < 1 && R22 < 1 && R25 < 1 && R28 < 1 && -1*R104 + -1*R103 < 1 && R106 + R105 < 1 && R600 + R599 < 1 && R602 + R601 < 1 && 0 < R7934 && 9 < R8094 && (R104 + R103 != 0 || R112 + R109 = 0 || (R110 + R107 = 0 && R111 + R108 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R115 + R113 = 0 && R116 + R114 = 0)) && (R104 + R103 != 0 || R112 + R109 = 0 || (R120 + R117 = 0 && R121 + R118 = 0)) && (R110 + R107 != 0 || R104 + R103 + -1*R111 + -1*R108 = 0 || R104 + R103 < 1) && (R115 + R113 != 0 || R104 + R103 + -1*R116 + -1*R114 = 0 || R104 + R103 < 1) && (R120 + R117 != 0 || R104 + R103 + -1*R121 + -1*R118 = 0 || R104 + R103 < 1) && (R39 = 0 || (R95 = 0 && R96 = 0)) && (R39 = 0 || (R97 = 0 && R98 = 0)) && (R40 = 0 || (R7953 = 0 && R7954 = 0)) && (R40 = 0 || (R7957 = 0 && R7958 = 0)) && (R40 = 0 || (R7959 = 0 && R7960 = 0)) && (R40 = 0 || (R7961 = 0 && R7962 = 0)) && (R40 = 0 || (R7963 = 0 && R7964 = 0)) && (R40 = 0 || (R7965 = 0 && R7966 = 0)) && (R40 = 0 || (R7967 = 0 && R7968 = 0)) && (R40 = 0 || (R7969 = 0 && R7970 = 0)) && (R40 = 0 || (R7971 = 0 && R7972 = 0)) && (R40 = 0 || (R7973 = 0 && R7974 = 0)) && (R40 = 0 || (R7977 = 0 && R7978 = 0)) && (R40 = 0 || (R7981 = 0 && R7982 = 0)) && (R43 = 0 || (R7985 = 0 && R7986 = 0)) && (R43 = 0 || (R7987 = 0 && R7988 = 0)) && (R43 = 0 || (R7989 = 0 && R7990 = 0)) && (R43 = 0 || (R7991 = 0 && R7992 = 0)) && (R43 = 0 || (R7993 = 0 && R7994 = 0)) && (R43 = 0 || (R7995 = 0 && R7996 = 0)) && (R43 = 0 || (R7997 = 0 && R7998 = 0)) && (R43 = 0 || (R7999 = 0 && R8000 = 0)) && (R43 = 0 || (R8001 = 0 && R8002 = 0)) && (R44 = 0 || (R99 = 0 && R100 = 0)) && (R44 = 0 || (R101 = 0 && R102 = 0)) && (R110 + R107 = 0 || R104 + R103 < 1) && (R115 + R113 = 0 || R104 + R103 < 1) && (R120 + R117 = 0 || R104 + R103 < 1) && (R128 + R125 = 0 || (R126 + R123 = 0 && R127 + R124 = 0)) && (R128 + R125 = 0 || (R132 + R129 = 0 && R133 + R130 = 0)) && (R608 + R605 = 0 || (R606 + R603 = 0 && R607 + R604 = 0)) && (R618 + R615 = 0 || (R611 + R609 = 0 && R612 + R610 = 0)) && (R618 + R615 = 0 || (R616 + R613 = 0 && R617 + R614 = 0)) && (R618 + R615 = 0 || (R621 + R619 = 0 && R622 + R620 = 0)) && (R618 + R615 = 0 || (R626 + R623 = 0 && R627 + R624 = 0)) && (R6682 + R6679 = 0 || (R6680 + R6677 = 0 && R6681 + R6678 = 0)) && (R7694 + R7691 = 0 || (R7692 + R7689 = 0 && R7693 + R7690 = 0)) && (R7694 + R7691 = 0 || (R7898 + R7895 = 0 && R7899 + R7896 = 0));
// End of Parikh automata intersection problem
