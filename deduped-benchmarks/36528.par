// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R145, R146, R2, R215, R216, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R3, R5, R6;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R264 += 1 };
  s0 -> s0 [0, 65535] { R263 += 1, R264 += 1 };
  s0 -> s2 [44, 44] { R264 += 1 };
  s0 -> s1 [45, 45] { R264 += 1 };
  s0 -> s3 [46, 46] { R264 += 1 };
  s0 -> s1 [48, 62] { R264 += 1 };
  s0 -> s1 [65, 65535] { R264 += 1 };
  s1 -> s1 [0, 43] { R264 += 1 };
  s1 -> s2 [44, 44] { R264 += 1 };
  s1 -> s1 [45, 45] { R264 += 1 };
  s1 -> s3 [46, 46] { R264 += 1 };
  s1 -> s1 [48, 62] { R264 += 1 };
  s1 -> s1 [65, 65535] { R264 += 1 };
  s2 -> s2 [0, 45] { R264 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R264 += 1 };
  s2 -> s2 [48, 62] { R264 += 1 };
  s2 -> s2 [65, 65535] { R264 += 1 };
  s3 -> s1 [0, 43] { R264 += 1 };
  s3 -> s2 [44, 44] { R264 += 1 };
  s3 -> s1 [45, 45] { R264 += 1 };
  s3 -> s3 [46, 46] { R264 += 1 };
  s3 -> s1 [48, 62] { R264 += 1 };
  s3 -> s1 [65, 114] { R264 += 1 };
  s3 -> s4 [115, 115] { R264 += 1 };
  s3 -> s1 [116, 65535] { R264 += 1 };
  s4 -> s1 [0, 43] { R264 += 1 };
  s4 -> s2 [44, 44] { R264 += 1 };
  s4 -> s1 [45, 45] { R264 += 1 };
  s4 -> s3 [46, 46] { R264 += 1 };
  s4 -> s1 [48, 62] { R264 += 1 };
  s4 -> s1 [65, 110] { R264 += 1 };
  s4 -> s5 [111, 111] { R264 += 1 };
  s4 -> s1 [112, 65535] { R264 += 1 };
  s5 -> s1 [0, 43] { R264 += 1 };
  s5 -> s2 [44, 44] { R264 += 1 };
  s5 -> s1 [45, 45] { R264 += 1 };
  s5 -> s3 [46, 46] { R264 += 1 };
  s5 -> s1 [48, 62] { R264 += 1 };
  s5 -> s1 [65, 98] { R264 += 1 };
  s5 -> s6 [99, 99] { R264 += 1 };
  s5 -> s1 [100, 65535] { R264 += 1 };
  s6 -> s1 [0, 43] { R264 += 1 };
  s6 -> s2 [44, 44] { R264 += 1 };
  s6 -> s1 [45, 45] { R264 += 1 };
  s6 -> s3 [46, 46] { R264 += 1 };
  s6 -> s1 [48, 62] { R264 += 1 };
  s6 -> s1 [65, 106] { R264 += 1 };
  s6 -> s1 [108, 65535] { R264 += 1 };
  s7 -> s2 [0, 45] { R264 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R264 += 1 };
  s7 -> s2 [48, 62] { R264 += 1 };
  s7 -> s2 [65, 114] { R264 += 1 };
  s7 -> s8 [115, 115] { R264 += 1 };
  s7 -> s2 [116, 65535] { R264 += 1 };
  s8 -> s2 [0, 45] { R264 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R264 += 1 };
  s8 -> s2 [48, 62] { R264 += 1 };
  s8 -> s2 [65, 110] { R264 += 1 };
  s8 -> s9 [111, 111] { R264 += 1 };
  s8 -> s2 [112, 65535] { R264 += 1 };
  s9 -> s2 [0, 45] { R264 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R264 += 1 };
  s9 -> s2 [48, 62] { R264 += 1 };
  s9 -> s2 [65, 98] { R264 += 1 };
  s9 -> s10 [99, 99] { R264 += 1 };
  s9 -> s2 [100, 65535] { R264 += 1 };
  s10 -> s2 [0, 45] { R264 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R264 += 1 };
  s10 -> s2 [48, 62] { R264 += 1 };
  s10 -> s2 [65, 106] { R264 += 1 };
  s10 -> s2 [108, 65535] { R264 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R266 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R265 += 1, R266 += 1 };
  s1 -> s1 [0, 65535] { R266 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R268 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R267 += 1, R268 += 1 };
  s0 -> s2 [0, 65535] { R268 += 1, R215 += 1, R216 += 1 };
  s0 -> s3 [44, 44] { R268 += 1 };
  s0 -> s1 [45, 65535] { R268 += 1, R216 += 1 };
  s1 -> s1 [0, 43] { R268 += 1, R216 += 1 };
  s1 -> s3 [44, 44] { R268 += 1 };
  s1 -> s1 [45, 65535] { R268 += 1, R216 += 1 };
  s2 -> s1 [0, 43] { R268 += 1, R216 += 1 };
  s2 -> s2 [0, 65535] { R268 += 1, R215 += 1, R216 += 1 };
  s2 -> s3 [44, 44] { R268 += 1 };
  s2 -> s1 [45, 65535] { R268 += 1, R216 += 1 };
  s3 -> s3 [0, 65535] { R268 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s1 [0, 65535] { R270 += 1 };
  s1 -> s1 [0, 65535] { R270 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R272 += 1, R254 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R272 += 1, R253 += 1, R254 += 1 };
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s1 -> s1 [0, 65535] { R272 += 1, R254 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R272 += 1 };
  s2 -> s1 [0, 65535] { R272 += 1, R254 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R272 += 1, R253 += 1, R254 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R272 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 92] { R274 += 1, R256 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R274 += 1, R256 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R274 += 1, R255 += 1, R256 += 1 };
  s0 -> s0 [0, 65535] { R273 += 1, R274 += 1 };
  s0 -> s4 [93, 93] { R274 += 1, R256 += 1 };
  s0 -> s1 [94, 65535] { R274 += 1, R256 += 1, R6 += 1 };
  s1 -> s1 [0, 92] { R274 += 1, R256 += 1, R6 += 1 };
  s1 -> s4 [93, 93] { R274 += 1, R256 += 1 };
  s1 -> s1 [94, 65535] { R274 += 1, R256 += 1, R6 += 1 };
  s2 -> s1 [0, 92] { R274 += 1, R256 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R274 += 1, R256 += 1, R5 += 1, R6 += 1 };
  s2 -> s4 [93, 93] { R274 += 1, R256 += 1 };
  s2 -> s1 [94, 65535] { R274 += 1, R256 += 1, R6 += 1 };
  s3 -> s1 [0, 92] { R274 += 1, R256 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R274 += 1, R256 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R274 += 1, R255 += 1, R256 += 1 };
  s3 -> s4 [93, 93] { R274 += 1, R256 += 1 };
  s3 -> s1 [94, 65535] { R274 += 1, R256 += 1, R6 += 1 };
  s4 -> s1 [0, 57] { R274 += 1, R256 += 1, R6 += 2 };
  s4 -> s5 [58, 58] { R274 += 1, R256 += 1 };
  s4 -> s1 [59, 92] { R274 += 1, R256 += 1, R6 += 2 };
  s4 -> s4 [93, 93] { R274 += 1, R256 += 1, R6 += 1 };
  s4 -> s1 [94, 65535] { R274 += 1, R256 += 1, R6 += 2 };
  s5 -> s6 [0, 65535] { R274 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R274 += 1, R256 += 1 };
  s6 -> s6 [0, 65535] { R274 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s5, s6, s7;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 92] { R276 += 1, R258 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R276 += 1, R258 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R275 += 1, R276 += 1 };
  s0 -> s3 [0, 65535] { R276 += 1, R257 += 1, R258 += 1 };
  s0 -> s4 [93, 93] { R276 += 1, R258 += 1 };
  s0 -> s1 [94, 65535] { R276 += 1, R258 += 1, R146 += 1 };
  s1 -> s1 [0, 92] { R276 += 1, R258 += 1, R146 += 1 };
  s1 -> s4 [93, 93] { R276 += 1, R258 += 1 };
  s1 -> s1 [94, 65535] { R276 += 1, R258 += 1, R146 += 1 };
  s2 -> s1 [0, 92] { R276 += 1, R258 += 1, R146 += 1 };
  s2 -> s2 [0, 65535] { R276 += 1, R258 += 1, R145 += 1, R146 += 1 };
  s2 -> s4 [93, 93] { R276 += 1, R258 += 1 };
  s2 -> s1 [94, 65535] { R276 += 1, R258 += 1, R146 += 1 };
  s3 -> s1 [0, 92] { R276 += 1, R258 += 1, R146 += 1 };
  s3 -> s2 [0, 65535] { R276 += 1, R258 += 1, R145 += 1, R146 += 1 };
  s3 -> s3 [0, 65535] { R276 += 1, R257 += 1, R258 += 1 };
  s3 -> s4 [93, 93] { R276 += 1, R258 += 1 };
  s3 -> s1 [94, 65535] { R276 += 1, R258 += 1, R146 += 1 };
  s4 -> s5 [0, 65535] { R276 += 1 };
  s4 -> s4 [0, 65535] { R276 += 1, R258 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R276 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R277 += 1, R278 += 1 };
  s0 -> s1 [0, 65535] { R278 += 1, R260 += 1, R249 += 1, R250 += 1 };
  s0 -> s2 [0, 65535] { R278 += 1, R259 += 1, R260 += 1 };
  s0 -> s3 [91, 91] { R278 += 1, R260 += 1, R250 += 1 };
  s1 -> s1 [0, 65535] { R278 += 1, R260 += 1, R249 += 1, R250 += 1 };
  s1 -> s3 [91, 91] { R278 += 1, R260 += 1, R250 += 1 };
  s2 -> s1 [0, 65535] { R278 += 1, R260 += 1, R249 += 1, R250 += 1 };
  s2 -> s2 [0, 65535] { R278 += 1, R259 += 1, R260 += 1 };
  s2 -> s3 [91, 91] { R278 += 1, R260 += 1, R250 += 1 };
  s3 -> s3 [0, 65535] { R278 += 1, R260 += 1 };
  s3 -> s4 [0, 65535] { R278 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R278 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R279 += 1, R280 += 1 };
  s0 -> s1 [0, 65535] { R280 += 1, R262 += 1, R251 += 1, R252 += 1 };
  s0 -> s2 [0, 65535] { R280 += 1, R262 += 1, R252 += 1, R3 += 1 };
  s0 -> s3 [0, 65535] { R280 += 1, R261 += 1, R262 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R280 += 1, R262 += 1, R251 += 1, R252 += 1 };
  s1 -> s2 [0, 65535] { R280 += 1, R262 += 1, R252 += 1, R3 += 1 };
  s1 -> s6 [0, 65535] { R280 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R280 += 1, R262 += 1, R252 += 1, R3 += 1 };
  s2 -> s5 [0, 65535] { R280 += 1, R262 += 1 };
  s2 -> s6 [0, 65535] { R280 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R280 += 1, R262 += 1, R251 += 1, R252 += 1 };
  s3 -> s2 [0, 65535] { R280 += 1, R262 += 1, R252 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R280 += 1, R261 += 1, R262 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R280 += 1, R262 += 1 };
  s5 -> s6 [0, 65535] { R280 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R280 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 - R262 = 1 && R2 = R280 && R5 = 0 && R145 = 0 && R215 = 0 && R216 = R262 && R249 = 0 && R253 = 0 && R254 = R262 && R255 = 0 && R256 = R262 && R257 = 0 && R258 = R262 && R259 = 0 && R260 = R262 && R261 = 0 && R263 = 10 && R264 = R280 && R265 = 10 && R266 = R280 && R267 = 10 && R268 = R280 && R269 = 10 && R270 = R280 && R271 = 10 && R272 = R280 && R273 = 10 && R274 = R280 && R275 = 10 && R276 = R280 && R277 = 10 && R278 = R280 && R279 = 10 && R0 != 0 && R6 != -1 && R146 != -1 && -1 < R262 && 9 < R280 && (R0 != R250 || R250 = 1 || R250 < 0) && (R250 != 1 || -1 < R0) && (R251 != 0 || ((R3 != 0 || ((R0 != R252 || R252 = 1 || R252 < 0) && (R0 = R252 || R252 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R252 || R252 = 1 || R252 < 0) && (R252 != 1 || -1 < R0) && (R0 = R252 || R252 = 1))))) && (R0 = R250 || R250 = 1) && (R251 = 0 || (R3 = 0 && R0 < 0));
// End of Parikh automata intersection problem
