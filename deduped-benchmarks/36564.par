// Parikh automata intersection problem, generated by OSTRICH+
counter int R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R24, R25, R28, R2963, R2964, R2965, R2966, R2967, R2968, R3635, R3636, R3637, R3638, R3639, R3640, R3641, R3642, R3643, R3644, R3645, R3646, R3647, R3648, R3649, R3650, R3651, R3652, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R3665, R3666, R3667, R3668, R3669, R3670, R3671, R3672, R3673, R3674, R3675, R3676, R3677, R3678, R3679, R3680, R3681, R3682, R3683, R3684, R3685, R3686, R3687, R3688, R3689, R3690, R3691, R3692, R3693, R3694, R3695, R3696, R3697, R3698, R3699, R3700, R3701, R3702, R3703, R3704, R3705, R3706, R3707, R3708, R3709, R3710, R3711, R3712, R3713, R3714, R3715, R3716, R3717, R3718, R3719, R3720, R3721, R3722, R3723, R3724, R3725, R3726, R3727, R3728, R3729, R3730, R3731, R3732, R3733, R3734, R3735, R3736, R3737, R3738, R3739, R3740, R3741, R3742, R3743, R3744, R3745, R3746, R3747, R3748, R3749, R3750, R3751, R3752, R3753, R3754, R3755, R3756, R3757, R3758, R3759, R3760, R3761, R3762, R3763, R3764, R3765, R3766, R3767, R3768, R3769, R3770, R3771, R3772, R3773, R3774, R3775, R3776, R3777, R3778, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R3795, R3796, R3797, R3798, R3799, R3800, R3801, R3802, R3803, R3804, R3805, R3806, R3807, R3808, R3809, R3810, R3811, R3812, R3813, R3814, R3815, R3816, R3817, R3818, R3819, R3820, R3821, R3822, R3823, R3824, R3825, R3826, R3827, R3828, R3829, R3830, R3831, R3832, R3833, R3834, R3835, R3836, R3837, R3838, R3839, R3840, R3841, R3842, R3843, R3844, R3845, R3846, R3847, R3848, R3849, R3850, R3851, R3852, R3853, R3854, R3855, R3856, R41, R42, R43, R44, R45, R46, R47, R48, R6, R7, R707, R708, R709, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R730, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R28 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3666 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R3665 += 1, R3666 += 1 };
  s1 -> s1 [0, 65535] { R3666 += 1, R43 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R3667 += 1, R3668 += 1 };
  s0 -> s1 [0, 65535] { R3668 += 1, R106 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3668 += 1, R106 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 84] { R3670 += 1 };
  s0 -> s0 [0, 65535] { R3669 += 1, R3670 += 1 };
  s0 -> s2 [0, 65535] { R3670 += 1, R108 += 1 };
  s0 -> s1 [86, 65535] { R3670 += 1 };
  s1 -> s1 [0, 84] { R3670 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [86, 65535] { R3670 += 1 };
  s2 -> s1 [0, 84] { R3670 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3670 += 1, R108 += 1 };
  s2 -> s1 [86, 65535] { R3670 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 89] { R3672 += 1 };
  s0 -> s2 [0, 65535] { R3672 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R3671 += 1, R3672 += 1 };
  s0 -> s1 [91, 65535] { R3672 += 1 };
  s1 -> s1 [0, 89] { R3672 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R3672 += 1 };
  s2 -> s1 [0, 89] { R3672 += 1 };
  s2 -> s2 [0, 65535] { R3672 += 1, R110 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R3672 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 88] { R3674 += 1 };
  s0 -> s0 [0, 65535] { R3673 += 1, R3674 += 1 };
  s0 -> s2 [0, 65535] { R3674 += 1, R112 += 1 };
  s0 -> s1 [90, 65535] { R3674 += 1 };
  s1 -> s1 [0, 88] { R3674 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R3674 += 1 };
  s2 -> s1 [0, 88] { R3674 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3674 += 1, R112 += 1 };
  s2 -> s1 [90, 65535] { R3674 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 72] { R3676 += 1 };
  s0 -> s2 [0, 65535] { R3676 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R3675 += 1, R3676 += 1 };
  s0 -> s1 [74, 65535] { R3676 += 1 };
  s1 -> s1 [0, 72] { R3676 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R3676 += 1 };
  s2 -> s1 [0, 72] { R3676 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3676 += 1, R114 += 1 };
  s2 -> s1 [74, 65535] { R3676 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R3677 += 1, R3678 += 1 };
  s0 -> s1 [0, 65535] { R3678 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R3678 += 1, R119 += 1, R120 += 1 };
  s1 -> s1 [0, 65535] { R3678 += 1, R118 += 1, R119 += 1 };
  s1 -> s2 [0, 65535] { R3678 += 1, R119 += 1, R120 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3678 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3678 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3678 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R3679 += 1, R3680 += 1 };
  s0 -> s1 [0, 65535] { R3680 += 1, R123 += 1, R124 += 1 };
  s0 -> s2 [108, 108] { R3680 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R3680 += 1, R123 += 1, R124 += 1 };
  s1 -> s2 [108, 108] { R3680 += 1, R124 += 1 };
  s2 -> s3 [111, 111] { R3680 += 1, R124 += 1 };
  s3 -> s4 [99, 99] { R3680 += 1, R124 += 1 };
  s4 -> s5 [97, 97] { R3680 += 1, R124 += 1 };
  s5 -> s6 [108, 108] { R3680 += 1, R124 += 1 };
  s6 -> s7 [104, 104] { R3680 += 1, R124 += 1 };
  s7 -> s8 [111, 111] { R3680 += 1, R124 += 1 };
  s8 -> s9 [115, 115] { R3680 += 1, R124 += 1 };
  s9 -> s10 [116, 116] { R3680 += 1, R124 += 1 };
  s10 -> s10 [0, 65535] { R3680 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3682 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R3681 += 1, R3682 += 1 };
  s0 -> s2 [0, 65535] { R3682 += 1, R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R3682 += 1, R129 += 1, R130 += 1 };
  s1 -> s4 [0, 65535] { R3682 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3682 += 1, R129 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R3682 += 1, R128 += 1, R129 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3682 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 107] { R3684 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R3683 += 1, R3684 += 1 };
  s0 -> s2 [0, 65535] { R3684 += 1, R133 += 1, R134 += 1 };
  s0 -> s3 [108, 108] { R3684 += 1, R134 += 1 };
  s0 -> s1 [109, 65535] { R3684 += 1, R134 += 1 };
  s1 -> s13 [0, 65535] { R3684 += 1 };
  s1 -> s1 [0, 65535] { R3684 += 1, R134 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3684 += 1, R134 += 1 };
  s2 -> s2 [0, 65535] { R3684 += 1, R133 += 1, R134 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3684 += 1, R134 += 1 };
  s2 -> s1 [109, 65535] { R3684 += 1, R134 += 1 };
  s3 -> s1 [0, 110] { R3684 += 1, R134 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3684 += 1 };
  s3 -> s5 [111, 111] { R3684 += 1, R134 += 1 };
  s3 -> s1 [112, 65535] { R3684 += 1, R134 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3684 += 1, R134 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3684 += 1 };
  s5 -> s6 [99, 99] { R3684 += 1, R134 += 1 };
  s5 -> s1 [100, 65535] { R3684 += 1, R134 += 1 };
  s6 -> s1 [0, 96] { R3684 += 1, R134 += 1 };
  s6 -> s6 [0, 65535] { R3684 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3684 += 1, R134 += 1 };
  s6 -> s1 [98, 65535] { R3684 += 1, R134 += 1 };
  s7 -> s1 [0, 107] { R3684 += 1, R134 += 1 };
  s7 -> s7 [0, 65535] { R3684 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3684 += 1, R134 += 1 };
  s7 -> s1 [109, 65535] { R3684 += 1, R134 += 1 };
  s8 -> s1 [0, 103] { R3684 += 1, R134 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3684 += 1 };
  s8 -> s9 [104, 104] { R3684 += 1, R134 += 1 };
  s8 -> s1 [105, 65535] { R3684 += 1, R134 += 1 };
  s9 -> s1 [0, 110] { R3684 += 1, R134 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3684 += 1 };
  s9 -> s10 [111, 111] { R3684 += 1, R134 += 1 };
  s9 -> s1 [112, 65535] { R3684 += 1, R134 += 1 };
  s10 -> s1 [0, 114] { R3684 += 1, R134 += 1 };
  s10 -> s10 [0, 65535] { R3684 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3684 += 1, R134 += 1 };
  s10 -> s1 [116, 65535] { R3684 += 1, R134 += 1 };
  s11 -> s1 [0, 115] { R3684 += 1, R134 += 1 };
  s11 -> s11 [0, 65535] { R3684 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3684 += 1, R134 += 1 };
  s11 -> s1 [117, 65535] { R3684 += 1, R134 += 1 };
  s12 -> s1 [0, 65535] { R3684 += 1, R134 += 1 };
  s13 -> s13 [0, 65535] { R3684 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R3686 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R3685 += 1, R3686 += 1 };
  s0 -> s2 [0, 65535] { R3686 += 1, R139 += 1, R140 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3686 += 1, R138 += 1, R139 += 1 };
  s1 -> s2 [0, 65535] { R3686 += 1, R139 += 1, R140 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3686 += 1 };
  s2 -> s2 [0, 65535] { R3686 += 1, R139 += 1, R140 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3686 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3688 += 1, R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R3688 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R3687 += 1, R3688 += 1 };
  s1 -> s1 [0, 65535] { R3688 += 1, R145 += 1, R146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3688 += 1 };
  s2 -> s1 [0, 65535] { R3688 += 1, R145 += 1, R146 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3688 += 1, R144 += 1, R145 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3688 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 107] { R3690 += 1, R150 += 1 };
  s0 -> s2 [0, 65535] { R3690 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R3689 += 1, R3690 += 1 };
  s0 -> s3 [108, 108] { R3690 += 1, R150 += 1 };
  s0 -> s1 [109, 65535] { R3690 += 1, R150 += 1 };
  s1 -> s13 [0, 65535] { R3690 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3690 += 1, R150 += 1 };
  s2 -> s1 [0, 107] { R3690 += 1, R150 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3690 += 1, R149 += 1, R150 += 1 };
  s2 -> s3 [108, 108] { R3690 += 1, R150 += 1 };
  s2 -> s1 [109, 65535] { R3690 += 1, R150 += 1 };
  s3 -> s1 [0, 110] { R3690 += 1, R150 += 1 };
  s3 -> s3 [0, 65535] { R3690 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3690 += 1, R150 += 1 };
  s3 -> s1 [112, 65535] { R3690 += 1, R150 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3690 += 1, R150 += 1 };
  s5 -> s5 [0, 65535] { R3690 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R3690 += 1, R150 += 1 };
  s5 -> s1 [100, 65535] { R3690 += 1, R150 += 1 };
  s6 -> s1 [0, 96] { R3690 += 1, R150 += 1 };
  s6 -> s6 [0, 65535] { R3690 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3690 += 1, R150 += 1 };
  s6 -> s1 [98, 65535] { R3690 += 1, R150 += 1 };
  s7 -> s1 [0, 107] { R3690 += 1, R150 += 1 };
  s7 -> s7 [0, 65535] { R3690 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3690 += 1, R150 += 1 };
  s7 -> s1 [109, 65535] { R3690 += 1, R150 += 1 };
  s8 -> s1 [0, 103] { R3690 += 1, R150 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3690 += 1 };
  s8 -> s9 [104, 104] { R3690 += 1, R150 += 1 };
  s8 -> s1 [105, 65535] { R3690 += 1, R150 += 1 };
  s9 -> s1 [0, 110] { R3690 += 1, R150 += 1 };
  s9 -> s9 [0, 65535] { R3690 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3690 += 1, R150 += 1 };
  s9 -> s1 [112, 65535] { R3690 += 1, R150 += 1 };
  s10 -> s1 [0, 114] { R3690 += 1, R150 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3690 += 1 };
  s10 -> s11 [115, 115] { R3690 += 1, R150 += 1 };
  s10 -> s1 [116, 65535] { R3690 += 1, R150 += 1 };
  s11 -> s1 [0, 115] { R3690 += 1, R150 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3690 += 1 };
  s11 -> s12 [116, 116] { R3690 += 1, R150 += 1 };
  s11 -> s1 [117, 65535] { R3690 += 1, R150 += 1 };
  s12 -> s1 [0, 65535] { R3690 += 1, R150 += 1 };
  s13 -> s13 [0, 65535] { R3690 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3692 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R3691 += 1, R3692 += 1 };
  s0 -> s2 [0, 65535] { R3692 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535] { R3692 += 1, R154 += 1, R155 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3692 += 1, R155 += 1, R156 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3692 += 1 };
  s2 -> s2 [0, 65535] { R3692 += 1, R155 += 1, R156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3692 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3693 += 1, R3694 += 1 };
  s0 -> s1 [0, 65535] { R3694 += 1, R160 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R3694 += 1, R161 += 1, R162 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3694 += 1, R160 += 1, R161 += 1 };
  s1 -> s2 [0, 65535] { R3694 += 1, R161 += 1, R162 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3694 += 1 };
  s2 -> s2 [0, 65535] { R3694 += 1, R161 += 1, R162 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3694 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 107] { R3696 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R3695 += 1, R3696 += 1 };
  s0 -> s2 [0, 65535] { R3696 += 1, R165 += 1, R166 += 1 };
  s0 -> s3 [108, 108] { R3696 += 1, R166 += 1 };
  s0 -> s1 [109, 65535] { R3696 += 1, R166 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3696 += 1, R166 += 1 };
  s1 -> s13 [0, 65535] { R3696 += 1 };
  s2 -> s1 [0, 107] { R3696 += 1, R166 += 1 };
  s2 -> s2 [0, 65535] { R3696 += 1, R165 += 1, R166 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3696 += 1, R166 += 1 };
  s2 -> s1 [109, 65535] { R3696 += 1, R166 += 1 };
  s3 -> s1 [0, 110] { R3696 += 1, R166 += 1 };
  s3 -> s3 [0, 65535] { R3696 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3696 += 1, R166 += 1 };
  s3 -> s1 [112, 65535] { R3696 += 1, R166 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3696 += 1, R166 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3696 += 1 };
  s5 -> s6 [99, 99] { R3696 += 1, R166 += 1 };
  s5 -> s1 [100, 65535] { R3696 += 1, R166 += 1 };
  s6 -> s1 [0, 96] { R3696 += 1, R166 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3696 += 1 };
  s6 -> s7 [97, 97] { R3696 += 1, R166 += 1 };
  s6 -> s1 [98, 65535] { R3696 += 1, R166 += 1 };
  s7 -> s1 [0, 107] { R3696 += 1, R166 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3696 += 1 };
  s7 -> s8 [108, 108] { R3696 += 1, R166 += 1 };
  s7 -> s1 [109, 65535] { R3696 += 1, R166 += 1 };
  s8 -> s1 [0, 103] { R3696 += 1, R166 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3696 += 1 };
  s8 -> s9 [104, 104] { R3696 += 1, R166 += 1 };
  s8 -> s1 [105, 65535] { R3696 += 1, R166 += 1 };
  s9 -> s1 [0, 110] { R3696 += 1, R166 += 1 };
  s9 -> s9 [0, 65535] { R3696 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3696 += 1, R166 += 1 };
  s9 -> s1 [112, 65535] { R3696 += 1, R166 += 1 };
  s10 -> s1 [0, 114] { R3696 += 1, R166 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3696 += 1 };
  s10 -> s11 [115, 115] { R3696 += 1, R166 += 1 };
  s10 -> s1 [116, 65535] { R3696 += 1, R166 += 1 };
  s11 -> s1 [0, 115] { R3696 += 1, R166 += 1 };
  s11 -> s11 [0, 65535] { R3696 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3696 += 1, R166 += 1 };
  s11 -> s1 [117, 65535] { R3696 += 1, R166 += 1 };
  s12 -> s1 [0, 65535] { R3696 += 1, R166 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3696 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3697 += 1, R3698 += 1 };
  s0 -> s1 [0, 65535] { R3698 += 1, R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R3698 += 1, R170 += 1, R171 += 1 };
  s1 -> s4 [0, 65535] { R3698 += 1 };
  s1 -> s1 [0, 65535] { R3698 += 1, R171 += 1, R172 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3698 += 1, R171 += 1, R172 += 1 };
  s2 -> s2 [0, 65535] { R3698 += 1, R170 += 1, R171 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3698 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R3700 += 1, R176 += 1, R177 += 1 };
  s0 -> s0 [0, 65535] { R3699 += 1, R3700 += 1 };
  s0 -> s2 [0, 65535] { R3700 += 1, R177 += 1, R178 += 1 };
  s1 -> s1 [0, 65535] { R3700 += 1, R176 += 1, R177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3700 += 1, R177 += 1, R178 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3700 += 1, R177 += 1, R178 += 1 };
  s2 -> s4 [0, 65535] { R3700 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3700 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R3701 += 1, R3702 += 1 };
  s0 -> s1 [0, 65535] { R3702 += 1 };
  s1 -> s1 [0, 65535] { R3702 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R3704 += 1, R182 += 1, R183 += 1 };
  s0 -> s0 [0, 65535] { R3703 += 1, R3704 += 1 };
  s0 -> s2 [0, 65535] { R3704 += 1, R183 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R3704 += 1, R182 += 1, R183 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3704 += 1, R183 += 1, R184 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3704 += 1, R183 += 1, R184 += 1 };
  s2 -> s4 [0, 65535] { R3704 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3704 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3706 += 1 };
  s0 -> s0 [0, 65535] { R3705 += 1, R3706 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3706 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 89] { R3708 += 1, R189 += 1, R190 += 1 };
  s0 -> s2 [0, 65535] { R3708 += 1, R188 += 1, R189 += 1 };
  s0 -> s0 [0, 65535] { R3707 += 1, R3708 += 1 };
  s0 -> s3 [90, 90] { R3708 += 1, R189 += 1, R190 += 1 };
  s0 -> s4 [90, 90] { R3708 += 1, R189 += 1, R190 += 1 };
  s0 -> s1 [91, 65535] { R3708 += 1, R189 += 1, R190 += 1 };
  s1 -> s1 [0, 89] { R3708 += 1, R189 += 1, R190 += 1 };
  s1 -> s1 [0, 65535] { R3708 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [90, 90] { R3708 += 1, R189 += 1, R190 += 1 };
  s1 -> s4 [90, 90] { R3708 += 1, R189 += 1, R190 += 1 };
  s1 -> s1 [91, 65535] { R3708 += 1, R189 += 1, R190 += 1 };
  s2 -> s1 [0, 89] { R3708 += 1, R189 += 1, R190 += 1 };
  s2 -> s2 [0, 65535] { R3708 += 1, R188 += 1, R189 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [90, 90] { R3708 += 1, R189 += 1, R190 += 1 };
  s2 -> s4 [90, 90] { R3708 += 1, R189 += 1, R190 += 1 };
  s2 -> s1 [91, 65535] { R3708 += 1, R189 += 1, R190 += 1 };
  s3 -> s3 [0, 65535] { R3708 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3708 += 1 };
  s4 -> s4 [0, 65535] { R3708 += 1, R189 += 1, R190 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3708 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3710 += 1, R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R3710 += 1, R194 += 1, R195 += 1 };
  s0 -> s0 [0, 65535] { R3709 += 1, R3710 += 1 };
  s1 -> s1 [0, 65535] { R3710 += 1, R195 += 1, R196 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3710 += 1 };
  s2 -> s1 [0, 65535] { R3710 += 1, R195 += 1, R196 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3710 += 1, R194 += 1, R195 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3710 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3712 += 1 };
  s0 -> s0 [0, 65535] { R3711 += 1, R3712 += 1 };
  s1 -> s1 [0, 65535] { R3712 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 88] { R3714 += 1, R201 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R3714 += 1, R200 += 1, R201 += 1 };
  s0 -> s0 [0, 65535] { R3713 += 1, R3714 += 1 };
  s0 -> s3 [89, 89] { R3714 += 1, R201 += 1, R202 += 1 };
  s0 -> s4 [89, 89] { R3714 += 1, R201 += 1, R202 += 1 };
  s0 -> s1 [90, 65535] { R3714 += 1, R201 += 1, R202 += 1 };
  s1 -> s1 [0, 88] { R3714 += 1, R201 += 1, R202 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3714 += 1 };
  s1 -> s3 [89, 89] { R3714 += 1, R201 += 1, R202 += 1 };
  s1 -> s4 [89, 89] { R3714 += 1, R201 += 1, R202 += 1 };
  s1 -> s1 [90, 65535] { R3714 += 1, R201 += 1, R202 += 1 };
  s2 -> s1 [0, 88] { R3714 += 1, R201 += 1, R202 += 1 };
  s2 -> s2 [0, 65535] { R3714 += 1, R200 += 1, R201 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [89, 89] { R3714 += 1, R201 += 1, R202 += 1 };
  s2 -> s4 [89, 89] { R3714 += 1, R201 += 1, R202 += 1 };
  s2 -> s1 [90, 65535] { R3714 += 1, R201 += 1, R202 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3714 += 1 };
  s4 -> s5 [0, 65535] { R3714 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3714 += 1, R201 += 1, R202 += 1 };
  s5 -> s5 [0, 65535] { R3714 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3716 += 1, R207 += 1, R208 += 1 };
  s0 -> s0 [0, 65535] { R3715 += 1, R3716 += 1 };
  s0 -> s2 [0, 65535] { R3716 += 1, R206 += 1, R207 += 1 };
  s1 -> s4 [0, 65535] { R3716 += 1 };
  s1 -> s1 [0, 65535] { R3716 += 1, R207 += 1, R208 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3716 += 1, R207 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R3716 += 1, R206 += 1, R207 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3716 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3718 += 1 };
  s0 -> s0 [0, 65535] { R3717 += 1, R3718 += 1 };
  s1 -> s1 [0, 65535] { R3718 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 72] { R3720 += 1, R213 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R3720 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R3719 += 1, R3720 += 1 };
  s0 -> s3 [73, 73] { R3720 += 1, R213 += 1, R214 += 1 };
  s0 -> s4 [73, 73] { R3720 += 1, R213 += 1, R214 += 1 };
  s0 -> s1 [74, 65535] { R3720 += 1, R213 += 1, R214 += 1 };
  s1 -> s1 [0, 72] { R3720 += 1, R213 += 1, R214 += 1 };
  s1 -> s1 [0, 65535] { R3720 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3720 += 1, R213 += 1, R214 += 1 };
  s1 -> s4 [73, 73] { R3720 += 1, R213 += 1, R214 += 1 };
  s1 -> s1 [74, 65535] { R3720 += 1, R213 += 1, R214 += 1 };
  s2 -> s1 [0, 72] { R3720 += 1, R213 += 1, R214 += 1 };
  s2 -> s2 [0, 65535] { R3720 += 1, R212 += 1, R213 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R3720 += 1, R213 += 1, R214 += 1 };
  s2 -> s4 [73, 73] { R3720 += 1, R213 += 1, R214 += 1 };
  s2 -> s1 [74, 65535] { R3720 += 1, R213 += 1, R214 += 1 };
  s3 -> s3 [0, 65535] { R3720 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3720 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3720 += 1, R213 += 1, R214 += 1 };
  s5 -> s5 [0, 65535] { R3720 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s0 [0, 65535] { R3743 += 1, R3744 += 1 };
  s0 -> s1 [0, 65535] { R3744 += 1, R44 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3744 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3746 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R3745 += 1, R3746 += 1 };
  s0 -> s2 [65, 65] { R3746 += 1, R105 += 1 };
  s0 -> s3 [65, 65] { R3746 += 1, R105 += 1 };
  s0 -> s1 [66, 65535] { R3746 += 1, R105 += 1 };
  s1 -> s1 [0, 64] { R3746 += 1, R105 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3746 += 1, R105 += 1 };
  s1 -> s3 [65, 65] { R3746 += 1, R105 += 1 };
  s1 -> s1 [66, 65535] { R3746 += 1, R105 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3746 += 1, R105 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3748 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R3747 += 1, R3748 += 1 };
  s0 -> s2 [65, 65] { R3748 += 1, R107 += 1 };
  s0 -> s3 [65, 65] { R3748 += 1, R107 += 1 };
  s0 -> s1 [66, 65535] { R3748 += 1, R107 += 1 };
  s1 -> s1 [0, 64] { R3748 += 1, R107 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3748 += 1, R107 += 1 };
  s1 -> s3 [65, 65] { R3748 += 1, R107 += 1 };
  s1 -> s1 [66, 65535] { R3748 += 1, R107 += 1 };
  s2 -> s2 [0, 65535] { R3748 += 1, R107 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3750 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R3749 += 1, R3750 += 1 };
  s0 -> s2 [65, 65] { R3750 += 1, R109 += 1 };
  s0 -> s3 [65, 65] { R3750 += 1, R109 += 1 };
  s0 -> s1 [66, 65535] { R3750 += 1, R109 += 1 };
  s1 -> s1 [0, 64] { R3750 += 1, R109 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3750 += 1, R109 += 1 };
  s1 -> s3 [65, 65] { R3750 += 1, R109 += 1 };
  s1 -> s1 [66, 65535] { R3750 += 1, R109 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3750 += 1, R109 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3752 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R3751 += 1, R3752 += 1 };
  s0 -> s2 [65, 65] { R3752 += 1, R111 += 1 };
  s0 -> s3 [65, 65] { R3752 += 1, R111 += 1 };
  s0 -> s1 [66, 65535] { R3752 += 1, R111 += 1 };
  s1 -> s1 [0, 64] { R3752 += 1, R111 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3752 += 1, R111 += 1 };
  s1 -> s3 [65, 65] { R3752 += 1, R111 += 1 };
  s1 -> s1 [66, 65535] { R3752 += 1, R111 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3752 += 1, R111 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3754 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R3753 += 1, R3754 += 1 };
  s0 -> s2 [65, 65] { R3754 += 1, R113 += 1 };
  s0 -> s3 [65, 65] { R3754 += 1, R113 += 1 };
  s0 -> s1 [66, 65535] { R3754 += 1, R113 += 1 };
  s1 -> s1 [0, 64] { R3754 += 1, R113 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3754 += 1, R113 += 1 };
  s1 -> s3 [65, 65] { R3754 += 1, R113 += 1 };
  s1 -> s1 [66, 65535] { R3754 += 1, R113 += 1 };
  s2 -> s2 [0, 65535] { R3754 += 1, R113 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3756 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3755 += 1, R3756 += 1 };
  s0 -> s2 [65, 65] { R3756 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3756 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3756 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3756 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3756 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3756 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3756 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3756 += 1, R115 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3758 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R3757 += 1, R3758 += 1 };
  s0 -> s2 [65, 65] { R3758 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R3758 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R3758 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R3758 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3758 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R3758 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R3758 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3758 += 1, R121 += 1, R122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3760 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R3759 += 1, R3760 += 1 };
  s0 -> s2 [65, 65] { R3760 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [65, 65] { R3760 += 1, R125 += 1, R126 += 1 };
  s0 -> s1 [66, 65535] { R3760 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R3760 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3760 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [65, 65] { R3760 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [66, 65535] { R3760 += 1, R125 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3760 += 1, R125 += 1, R126 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3762 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R3761 += 1, R3762 += 1 };
  s0 -> s2 [65, 65] { R3762 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R3762 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R3762 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R3762 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3762 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R3762 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R3762 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3762 += 1, R131 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R3764 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R3763 += 1, R3764 += 1 };
  s0 -> s2 [65, 65] { R3764 += 1, R135 += 1, R136 += 1 };
  s0 -> s3 [65, 65] { R3764 += 1, R135 += 1, R136 += 1 };
  s0 -> s1 [66, 65535] { R3764 += 1, R135 += 1, R136 += 1 };
  s1 -> s1 [0, 64] { R3764 += 1, R135 += 1, R136 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3764 += 1, R135 += 1, R136 += 1 };
  s1 -> s3 [65, 65] { R3764 += 1, R135 += 1, R136 += 1 };
  s1 -> s1 [66, 65535] { R3764 += 1, R135 += 1, R136 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3764 += 1, R135 += 1, R136 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3766 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R3765 += 1, R3766 += 1 };
  s0 -> s2 [65, 65] { R3766 += 1, R141 += 1, R142 += 1 };
  s0 -> s3 [65, 65] { R3766 += 1, R141 += 1, R142 += 1 };
  s0 -> s1 [66, 65535] { R3766 += 1, R141 += 1, R142 += 1 };
  s1 -> s1 [0, 64] { R3766 += 1, R141 += 1, R142 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3766 += 1, R141 += 1, R142 += 1 };
  s1 -> s3 [65, 65] { R3766 += 1, R141 += 1, R142 += 1 };
  s1 -> s1 [66, 65535] { R3766 += 1, R141 += 1, R142 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3766 += 1, R141 += 1, R142 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R3768 += 1, R147 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R3767 += 1, R3768 += 1 };
  s0 -> s2 [65, 65] { R3768 += 1, R147 += 1, R148 += 1 };
  s0 -> s3 [65, 65] { R3768 += 1, R147 += 1, R148 += 1 };
  s0 -> s1 [66, 65535] { R3768 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 64] { R3768 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3768 += 1, R147 += 1, R148 += 1 };
  s1 -> s3 [65, 65] { R3768 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [66, 65535] { R3768 += 1, R147 += 1, R148 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3768 += 1, R147 += 1, R148 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3770 += 1, R151 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R3769 += 1, R3770 += 1 };
  s0 -> s2 [65, 65] { R3770 += 1, R151 += 1, R152 += 1 };
  s0 -> s3 [65, 65] { R3770 += 1, R151 += 1, R152 += 1 };
  s0 -> s1 [66, 65535] { R3770 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [0, 64] { R3770 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3770 += 1, R151 += 1, R152 += 1 };
  s1 -> s3 [65, 65] { R3770 += 1, R151 += 1, R152 += 1 };
  s1 -> s1 [66, 65535] { R3770 += 1, R151 += 1, R152 += 1 };
  s2 -> s2 [0, 65535] { R3770 += 1, R151 += 1, R152 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R3772 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R3771 += 1, R3772 += 1 };
  s0 -> s2 [65, 65] { R3772 += 1, R157 += 1, R158 += 1 };
  s0 -> s3 [65, 65] { R3772 += 1, R157 += 1, R158 += 1 };
  s0 -> s1 [66, 65535] { R3772 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [0, 64] { R3772 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3772 += 1, R157 += 1, R158 += 1 };
  s1 -> s3 [65, 65] { R3772 += 1, R157 += 1, R158 += 1 };
  s1 -> s1 [66, 65535] { R3772 += 1, R157 += 1, R158 += 1 };
  s2 -> s2 [0, 65535] { R3772 += 1, R157 += 1, R158 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R3774 += 1, R163 += 1, R164 += 1 };
  s0 -> s0 [0, 65535] { R3773 += 1, R3774 += 1 };
  s0 -> s2 [65, 65] { R3774 += 1, R163 += 1, R164 += 1 };
  s0 -> s3 [65, 65] { R3774 += 1, R163 += 1, R164 += 1 };
  s0 -> s1 [66, 65535] { R3774 += 1, R163 += 1, R164 += 1 };
  s1 -> s1 [0, 64] { R3774 += 1, R163 += 1, R164 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3774 += 1, R163 += 1, R164 += 1 };
  s1 -> s3 [65, 65] { R3774 += 1, R163 += 1, R164 += 1 };
  s1 -> s1 [66, 65535] { R3774 += 1, R163 += 1, R164 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3774 += 1, R163 += 1, R164 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R3776 += 1, R167 += 1, R168 += 1 };
  s0 -> s0 [0, 65535] { R3775 += 1, R3776 += 1 };
  s0 -> s2 [65, 65] { R3776 += 1, R167 += 1, R168 += 1 };
  s0 -> s3 [65, 65] { R3776 += 1, R167 += 1, R168 += 1 };
  s0 -> s1 [66, 65535] { R3776 += 1, R167 += 1, R168 += 1 };
  s1 -> s1 [0, 64] { R3776 += 1, R167 += 1, R168 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3776 += 1, R167 += 1, R168 += 1 };
  s1 -> s3 [65, 65] { R3776 += 1, R167 += 1, R168 += 1 };
  s1 -> s1 [66, 65535] { R3776 += 1, R167 += 1, R168 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3776 += 1, R167 += 1, R168 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3778 += 1, R173 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R3777 += 1, R3778 += 1 };
  s0 -> s2 [65, 65] { R3778 += 1, R173 += 1, R174 += 1 };
  s0 -> s3 [65, 65] { R3778 += 1, R173 += 1, R174 += 1 };
  s0 -> s1 [66, 65535] { R3778 += 1, R173 += 1, R174 += 1 };
  s1 -> s1 [0, 64] { R3778 += 1, R173 += 1, R174 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3778 += 1, R173 += 1, R174 += 1 };
  s1 -> s3 [65, 65] { R3778 += 1, R173 += 1, R174 += 1 };
  s1 -> s1 [66, 65535] { R3778 += 1, R173 += 1, R174 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3778 += 1, R173 += 1, R174 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R3780 += 1 };
  s0 -> s0 [0, 65535] { R3779 += 1, R3780 += 1 };
  s0 -> s2 [65, 65] { R3780 += 1 };
  s0 -> s3 [65, 65] { R3780 += 1 };
  s0 -> s1 [66, 65535] { R3780 += 1 };
  s1 -> s1 [0, 64] { R3780 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3780 += 1 };
  s1 -> s3 [65, 65] { R3780 += 1 };
  s1 -> s1 [66, 65535] { R3780 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3780 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3782 += 1, R179 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R3781 += 1, R3782 += 1 };
  s0 -> s2 [65, 65] { R3782 += 1, R179 += 1, R180 += 1 };
  s0 -> s3 [65, 65] { R3782 += 1, R179 += 1, R180 += 1 };
  s0 -> s1 [66, 65535] { R3782 += 1, R179 += 1, R180 += 1 };
  s1 -> s1 [0, 64] { R3782 += 1, R179 += 1, R180 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3782 += 1, R179 += 1, R180 += 1 };
  s1 -> s3 [65, 65] { R3782 += 1, R179 += 1, R180 += 1 };
  s1 -> s1 [66, 65535] { R3782 += 1, R179 += 1, R180 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R3782 += 1, R179 += 1, R180 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3784 += 1 };
  s0 -> s0 [0, 65535] { R3783 += 1, R3784 += 1 };
  s0 -> s2 [65, 65] { R3784 += 1 };
  s0 -> s3 [65, 65] { R3784 += 1 };
  s0 -> s1 [66, 65535] { R3784 += 1 };
  s1 -> s1 [0, 64] { R3784 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3784 += 1 };
  s1 -> s3 [65, 65] { R3784 += 1 };
  s1 -> s1 [66, 65535] { R3784 += 1 };
  s2 -> s2 [0, 65535] { R3784 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3786 += 1, R185 += 1, R186 += 1 };
  s0 -> s0 [0, 65535] { R3785 += 1, R3786 += 1 };
  s0 -> s2 [65, 65] { R3786 += 1, R185 += 1, R186 += 1 };
  s0 -> s3 [65, 65] { R3786 += 1, R185 += 1, R186 += 1 };
  s0 -> s1 [66, 65535] { R3786 += 1, R185 += 1, R186 += 1 };
  s1 -> s1 [0, 64] { R3786 += 1, R185 += 1, R186 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3786 += 1, R185 += 1, R186 += 1 };
  s1 -> s3 [65, 65] { R3786 += 1, R185 += 1, R186 += 1 };
  s1 -> s1 [66, 65535] { R3786 += 1, R185 += 1, R186 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3786 += 1, R185 += 1, R186 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3788 += 1, R191 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R3787 += 1, R3788 += 1 };
  s0 -> s2 [65, 65] { R3788 += 1, R191 += 1, R192 += 1 };
  s0 -> s3 [65, 65] { R3788 += 1, R191 += 1, R192 += 1 };
  s0 -> s1 [66, 65535] { R3788 += 1, R191 += 1, R192 += 1 };
  s1 -> s1 [0, 64] { R3788 += 1, R191 += 1, R192 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3788 += 1, R191 += 1, R192 += 1 };
  s1 -> s3 [65, 65] { R3788 += 1, R191 += 1, R192 += 1 };
  s1 -> s1 [66, 65535] { R3788 += 1, R191 += 1, R192 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3788 += 1, R191 += 1, R192 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R3790 += 1 };
  s0 -> s0 [0, 65535] { R3789 += 1, R3790 += 1 };
  s0 -> s2 [65, 65] { R3790 += 1 };
  s0 -> s3 [65, 65] { R3790 += 1 };
  s0 -> s1 [66, 65535] { R3790 += 1 };
  s1 -> s1 [0, 64] { R3790 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3790 += 1 };
  s1 -> s3 [65, 65] { R3790 += 1 };
  s1 -> s1 [66, 65535] { R3790 += 1 };
  s2 -> s2 [0, 65535] { R3790 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 64] { R3792 += 1, R197 += 1, R198 += 1 };
  s0 -> s0 [0, 65535] { R3791 += 1, R3792 += 1 };
  s0 -> s2 [65, 65] { R3792 += 1, R197 += 1, R198 += 1 };
  s0 -> s3 [65, 65] { R3792 += 1, R197 += 1, R198 += 1 };
  s0 -> s1 [66, 65535] { R3792 += 1, R197 += 1, R198 += 1 };
  s1 -> s1 [0, 64] { R3792 += 1, R197 += 1, R198 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3792 += 1, R197 += 1, R198 += 1 };
  s1 -> s3 [65, 65] { R3792 += 1, R197 += 1, R198 += 1 };
  s1 -> s1 [66, 65535] { R3792 += 1, R197 += 1, R198 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3792 += 1, R197 += 1, R198 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 64] { R3794 += 1, R203 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R3793 += 1, R3794 += 1 };
  s0 -> s2 [65, 65] { R3794 += 1, R203 += 1, R204 += 1 };
  s0 -> s3 [65, 65] { R3794 += 1, R203 += 1, R204 += 1 };
  s0 -> s1 [66, 65535] { R3794 += 1, R203 += 1, R204 += 1 };
  s1 -> s1 [0, 64] { R3794 += 1, R203 += 1, R204 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3794 += 1, R203 += 1, R204 += 1 };
  s1 -> s3 [65, 65] { R3794 += 1, R203 += 1, R204 += 1 };
  s1 -> s1 [66, 65535] { R3794 += 1, R203 += 1, R204 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3794 += 1, R203 += 1, R204 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 64] { R3796 += 1 };
  s0 -> s0 [0, 65535] { R3795 += 1, R3796 += 1 };
  s0 -> s2 [65, 65] { R3796 += 1 };
  s0 -> s3 [65, 65] { R3796 += 1 };
  s0 -> s1 [66, 65535] { R3796 += 1 };
  s1 -> s1 [0, 64] { R3796 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3796 += 1 };
  s1 -> s3 [65, 65] { R3796 += 1 };
  s1 -> s1 [66, 65535] { R3796 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3796 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 64] { R3798 += 1, R209 += 1, R210 += 1 };
  s0 -> s0 [0, 65535] { R3797 += 1, R3798 += 1 };
  s0 -> s2 [65, 65] { R3798 += 1, R209 += 1, R210 += 1 };
  s0 -> s3 [65, 65] { R3798 += 1, R209 += 1, R210 += 1 };
  s0 -> s1 [66, 65535] { R3798 += 1, R209 += 1, R210 += 1 };
  s1 -> s1 [0, 64] { R3798 += 1, R209 += 1, R210 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3798 += 1, R209 += 1, R210 += 1 };
  s1 -> s3 [65, 65] { R3798 += 1, R209 += 1, R210 += 1 };
  s1 -> s1 [66, 65535] { R3798 += 1, R209 += 1, R210 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3798 += 1, R209 += 1, R210 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 43] { R3800 += 1 };
  s0 -> s0 [0, 65535] { R3799 += 1, R3800 += 1 };
  s0 -> s1 [45, 45] { R3800 += 1 };
  s0 -> s2 [46, 46] { R3800 += 1 };
  s0 -> s1 [48, 62] { R3800 += 1 };
  s0 -> s3 [65, 65] { R3800 += 1 };
  s0 -> s1 [66, 65535] { R3800 += 1 };
  s1 -> s1 [0, 43] { R3800 += 1 };
  s1 -> s1 [45, 45] { R3800 += 1 };
  s1 -> s2 [46, 46] { R3800 += 1 };
  s1 -> s1 [48, 62] { R3800 += 1 };
  s1 -> s3 [65, 65] { R3800 += 1 };
  s1 -> s1 [66, 65535] { R3800 += 1 };
  s2 -> s1 [0, 43] { R3800 += 1 };
  s2 -> s1 [45, 45] { R3800 += 1 };
  s2 -> s2 [46, 46] { R3800 += 1 };
  s2 -> s1 [48, 62] { R3800 += 1 };
  s2 -> s3 [65, 65] { R3800 += 1 };
  s2 -> s1 [66, 114] { R3800 += 1 };
  s2 -> s8 [115, 115] { R3800 += 1 };
  s2 -> s1 [116, 65535] { R3800 += 1 };
  s3 -> s3 [0, 43] { R3800 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3800 += 1 };
  s3 -> s4 [46, 46] { R3800 += 1 };
  s3 -> s3 [48, 62] { R3800 += 1 };
  s3 -> s3 [65, 65535] { R3800 += 1 };
  s4 -> s3 [0, 43] { R3800 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3800 += 1 };
  s4 -> s4 [46, 46] { R3800 += 1 };
  s4 -> s3 [48, 62] { R3800 += 1 };
  s4 -> s3 [65, 114] { R3800 += 1 };
  s4 -> s5 [115, 115] { R3800 += 1 };
  s4 -> s3 [116, 65535] { R3800 += 1 };
  s5 -> s3 [0, 43] { R3800 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3800 += 1 };
  s5 -> s4 [46, 46] { R3800 += 1 };
  s5 -> s3 [48, 62] { R3800 += 1 };
  s5 -> s3 [65, 110] { R3800 += 1 };
  s5 -> s6 [111, 111] { R3800 += 1 };
  s5 -> s3 [112, 65535] { R3800 += 1 };
  s6 -> s3 [0, 43] { R3800 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3800 += 1 };
  s6 -> s4 [46, 46] { R3800 += 1 };
  s6 -> s3 [48, 62] { R3800 += 1 };
  s6 -> s3 [65, 98] { R3800 += 1 };
  s6 -> s7 [99, 99] { R3800 += 1 };
  s6 -> s3 [100, 65535] { R3800 += 1 };
  s7 -> s3 [0, 43] { R3800 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3800 += 1 };
  s7 -> s4 [46, 46] { R3800 += 1 };
  s7 -> s3 [48, 62] { R3800 += 1 };
  s7 -> s3 [65, 106] { R3800 += 1 };
  s7 -> s3 [108, 65535] { R3800 += 1 };
  s8 -> s1 [0, 43] { R3800 += 1 };
  s8 -> s1 [45, 45] { R3800 += 1 };
  s8 -> s2 [46, 46] { R3800 += 1 };
  s8 -> s1 [48, 62] { R3800 += 1 };
  s8 -> s3 [65, 65] { R3800 += 1 };
  s8 -> s1 [66, 110] { R3800 += 1 };
  s8 -> s9 [111, 111] { R3800 += 1 };
  s8 -> s1 [112, 65535] { R3800 += 1 };
  s9 -> s1 [0, 43] { R3800 += 1 };
  s9 -> s1 [45, 45] { R3800 += 1 };
  s9 -> s2 [46, 46] { R3800 += 1 };
  s9 -> s1 [48, 62] { R3800 += 1 };
  s9 -> s3 [65, 65] { R3800 += 1 };
  s9 -> s1 [66, 98] { R3800 += 1 };
  s9 -> s10 [99, 99] { R3800 += 1 };
  s9 -> s1 [100, 65535] { R3800 += 1 };
  s10 -> s1 [0, 43] { R3800 += 1 };
  s10 -> s1 [45, 45] { R3800 += 1 };
  s10 -> s2 [46, 46] { R3800 += 1 };
  s10 -> s1 [48, 62] { R3800 += 1 };
  s10 -> s3 [65, 65] { R3800 += 1 };
  s10 -> s1 [66, 106] { R3800 += 1 };
  s10 -> s1 [108, 65535] { R3800 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_60 {
  init s0;
  s0 -> s0 [0, 65535] { R3801 += 1, R3802 += 1 };
  s0 -> s1 [0, 65535] { R3802 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3802 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 57] { R3804 += 1 };
  s0 -> s0 [0, 65535] { R3803 += 1, R3804 += 1 };
  s0 -> s2 [0, 65535] { R3804 += 1, R24 += 1 };
  s0 -> s3 [58, 58] { R3804 += 1 };
  s0 -> s1 [59, 65535] { R3804 += 1 };
  s1 -> s1 [0, 57] { R3804 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3804 += 1 };
  s1 -> s1 [59, 65535] { R3804 += 1 };
  s2 -> s1 [0, 57] { R3804 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3804 += 1, R24 += 1 };
  s2 -> s3 [58, 58] { R3804 += 1 };
  s2 -> s1 [59, 65535] { R3804 += 1 };
  s3 -> s3 [0, 65535] { R3804 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 64] { R3806 += 1 };
  s0 -> s2 [0, 65535] { R3806 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R3805 += 1, R3806 += 1 };
  s0 -> s3 [65, 65] { R3806 += 1 };
  s0 -> s1 [66, 65535] { R3806 += 1 };
  s1 -> s1 [0, 64] { R3806 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3806 += 1 };
  s1 -> s1 [66, 65535] { R3806 += 1 };
  s2 -> s1 [0, 64] { R3806 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3806 += 1, R25 += 1 };
  s2 -> s3 [65, 65] { R3806 += 1 };
  s2 -> s1 [66, 65535] { R3806 += 1 };
  s3 -> s3 [0, 65535] { R3806 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 90] { R3808 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R3807 += 1, R3808 += 1 };
  s0 -> s2 [0, 65535] { R3808 += 1, R45 += 1, R46 += 1 };
  s0 -> s3 [91, 91] { R3808 += 1, R46 += 1 };
  s0 -> s1 [92, 65535] { R3808 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R3808 += 1, R46 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3808 += 1 };
  s2 -> s1 [0, 90] { R3808 += 1, R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3808 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [91, 91] { R3808 += 1, R46 += 1 };
  s2 -> s1 [92, 65535] { R3808 += 1, R46 += 1 };
  s3 -> s1 [0, 65535] { R3808 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3808 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s0 [0, 65535] { R3809 += 1, R3810 += 1 };
  s0 -> s1 [0, 65535] { R3810 += 1, R47 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R3810 += 1, R48 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3810 += 1, R47 += 1, R48 += 1 };
  s1 -> s2 [0, 65535] { R3810 += 1, R48 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3810 += 1 };
  s2 -> s2 [0, 65535] { R3810 += 1, R48 += 1, R8 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3810 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R3812 += 1, R3642 += 1 };
  s0 -> s2 [0, 65535] { R3812 += 1, R3641 += 1, R3642 += 1 };
  s0 -> s0 [0, 65535] { R3811 += 1, R3812 += 1 };
  s0 -> s1 [66, 65535] { R3812 += 1, R3642 += 1 };
  s1 -> s1 [0, 64] { R3812 += 1, R3642 += 1 };
  s1 -> s1 [0, 65535] { R3812 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3812 += 1, R3642 += 1 };
  s2 -> s1 [0, 64] { R3812 += 1, R3642 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3812 += 1, R3641 += 1, R3642 += 1 };
  s2 -> s1 [66, 65535] { R3812 += 1, R3642 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_66 {
  init s0;
  s0 -> s0 [0, 65535] { R3813 += 1, R3814 += 1 };
  s0 -> s1 [0, 65535] { R3814 += 1, R3644 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R3814 += 1, R3643 += 1, R3644 += 1 };
  s1 -> s4 [0, 65535] { R3814 += 1 };
  s1 -> s1 [0, 65535] { R3814 += 1, R3644 += 1, R41 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3814 += 1, R3644 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R3814 += 1, R3643 += 1, R3644 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3814 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 65] { R3816 += 1, R3646 += 1 };
  s0 -> s2 [0, 65535] { R3816 += 1, R3645 += 1, R3646 += 1 };
  s0 -> s0 [0, 65535] { R3815 += 1, R3816 += 1 };
  s0 -> s1 [81, 65535] { R3816 += 1, R3646 += 1 };
  s1 -> s1 [0, 65] { R3816 += 1, R3646 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3816 += 1 };
  s1 -> s1 [81, 65535] { R3816 += 1, R3646 += 1 };
  s2 -> s1 [0, 65] { R3816 += 1, R3646 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3816 += 1, R3645 += 1, R3646 += 1 };
  s2 -> s1 [81, 65535] { R3816 += 1, R3646 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_68 {
  init s0;
  s0 -> s0 [0, 65535] { R3817 += 1, R3818 += 1 };
  s0 -> s1 [0, 65535] { R3818 += 1, R3648 += 1, R708 += 1 };
  s0 -> s2 [0, 65535] { R3818 += 1, R3647 += 1, R3648 += 1 };
  s1 -> s1 [0, 65535] { R3818 += 1, R3648 += 1, R708 += 1 };
  s1 -> s4 [0, 65535] { R3818 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3818 += 1, R3648 += 1, R708 += 1 };
  s2 -> s2 [0, 65535] { R3818 += 1, R3647 += 1, R3648 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3818 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 80] { R3820 += 1, R3650 += 1 };
  s0 -> s2 [0, 65535] { R3820 += 1, R3650 += 1, R710 += 1 };
  s0 -> s0 [0, 65535] { R3819 += 1, R3820 += 1 };
  s0 -> s3 [0, 65535] { R3820 += 1, R3649 += 1, R3650 += 1 };
  s0 -> s1 [82, 65535] { R3820 += 1, R3650 += 1 };
  s1 -> s1 [0, 80] { R3820 += 1, R3650 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3820 += 1 };
  s1 -> s1 [82, 65535] { R3820 += 1, R3650 += 1 };
  s2 -> s1 [0, 80] { R3820 += 1, R3650 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3820 += 1 };
  s2 -> s2 [0, 65535] { R3820 += 1, R3650 += 1, R710 += 1 };
  s2 -> s1 [82, 65535] { R3820 += 1, R3650 += 1 };
  s3 -> s1 [0, 80] { R3820 += 1, R3650 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3820 += 1, R3650 += 1, R710 += 1 };
  s3 -> s3 [0, 65535] { R3820 += 1, R3649 += 1, R3650 += 1 };
  s3 -> s1 [82, 65535] { R3820 += 1, R3650 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3820 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 80] { R3822 += 1, R3652 += 1, R714 += 1 };
  s0 -> s0 [0, 65535] { R3821 += 1, R3822 += 1 };
  s0 -> s2 [0, 65535] { R3822 += 1, R3651 += 1, R3652 += 1 };
  s0 -> s3 [0, 65535] { R3822 += 1, R3652 += 1, R713 += 1, R714 += 1 };
  s0 -> s1 [82, 65535] { R3822 += 1, R3652 += 1, R714 += 1 };
  s1 -> s1 [0, 80] { R3822 += 1, R3652 += 1, R714 += 1 };
  s1 -> s1 [0, 65535] { R3822 += 1, R3652 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3822 += 1 };
  s1 -> s1 [82, 65535] { R3822 += 1, R3652 += 1, R714 += 1 };
  s2 -> s1 [0, 80] { R3822 += 1, R3652 += 1, R714 += 1 };
  s2 -> s2 [0, 65535] { R3822 += 1, R3651 += 1, R3652 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3822 += 1, R3652 += 1, R713 += 1, R714 += 1 };
  s2 -> s1 [82, 65535] { R3822 += 1, R3652 += 1, R714 += 1 };
  s3 -> s1 [0, 80] { R3822 += 1, R3652 += 1, R714 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3822 += 1, R3652 += 1, R713 += 1, R714 += 1 };
  s3 -> s5 [0, 65535] { R3822 += 1 };
  s3 -> s1 [82, 65535] { R3822 += 1, R3652 += 1, R714 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3822 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s0 [0, 65535] { R3823 += 1, R3824 += 1 };
  s0 -> s1 [0, 65535] { R3824 += 1, R3654 += 1, R719 += 1, R720 += 1 };
  s0 -> s2 [0, 65535] { R3824 += 1, R3654 += 1, R718 += 1, R719 += 1 };
  s0 -> s3 [0, 65535] { R3824 += 1, R3653 += 1, R3654 += 1 };
  s1 -> s6 [0, 65535] { R3824 += 1, R3654 += 1 };
  s1 -> s1 [0, 65535] { R3824 += 1, R3654 += 1, R719 += 1, R720 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3824 += 1 };
  s2 -> s1 [0, 65535] { R3824 += 1, R3654 += 1, R719 += 1, R720 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3824 += 1, R3654 += 1, R718 += 1, R719 += 1 };
  s2 -> s5 [0, 65535] { R3824 += 1 };
  s3 -> s1 [0, 65535] { R3824 += 1, R3654 += 1, R719 += 1, R720 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3824 += 1, R3654 += 1, R718 += 1, R719 += 1 };
  s3 -> s3 [0, 65535] { R3824 += 1, R3653 += 1, R3654 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3824 += 1 };
  s6 -> s6 [0, 65535] { R3824 += 1, R3654 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3824 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s0 -> s2 [0, 65535] { R3826 += 1, R3655 += 1, R3656 += 1 };
  s0 -> s3 [0, 65535] { R3826 += 1, R3656 += 1, R723 += 1, R724 += 1 };
  s0 -> s0 [0, 65535] { R3825 += 1, R3826 += 1 };
  s0 -> s1 [91, 107] { R3826 += 1, R3656 += 1, R724 += 1 };
  s0 -> s4 [108, 108] { R3826 += 1, R3656 += 1, R724 += 1 };
  s0 -> s1 [109, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s1 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s1 -> s1 [0, 65535] { R3826 += 1, R3656 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3826 += 1 };
  s1 -> s1 [91, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s2 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s2 -> s2 [0, 65535] { R3826 += 1, R3655 += 1, R3656 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3826 += 1, R3656 += 1, R723 += 1, R724 += 1 };
  s2 -> s1 [91, 107] { R3826 += 1, R3656 += 1, R724 += 1 };
  s2 -> s4 [108, 108] { R3826 += 1, R3656 += 1, R724 += 1 };
  s2 -> s1 [109, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s3 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3826 += 1, R3656 += 1, R723 += 1, R724 += 1 };
  s3 -> s6 [0, 65535] { R3826 += 1 };
  s3 -> s1 [91, 107] { R3826 += 1, R3656 += 1, R724 += 1 };
  s3 -> s4 [108, 108] { R3826 += 1, R3656 += 1, R724 += 1 };
  s3 -> s1 [109, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s4 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3826 += 1, R3656 += 1 };
  s4 -> s6 [0, 65535] { R3826 += 1 };
  s4 -> s1 [91, 110] { R3826 += 1, R3656 += 1, R724 += 1 };
  s4 -> s7 [111, 111] { R3826 += 1, R3656 += 1, R724 += 1 };
  s4 -> s1 [112, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3826 += 1 };
  s7 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3826 += 1, R3656 += 1 };
  s7 -> s6 [0, 65535] { R3826 += 1 };
  s7 -> s1 [91, 98] { R3826 += 1, R3656 += 1, R724 += 1 };
  s7 -> s8 [99, 99] { R3826 += 1, R3656 += 1, R724 += 1 };
  s7 -> s1 [100, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s8 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s8 -> s8 [0, 65535] { R3826 += 1, R3656 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3826 += 1 };
  s8 -> s1 [91, 96] { R3826 += 1, R3656 += 1, R724 += 1 };
  s8 -> s9 [97, 97] { R3826 += 1, R3656 += 1, R724 += 1 };
  s8 -> s1 [98, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s9 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s9 -> s9 [0, 65535] { R3826 += 1, R3656 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3826 += 1 };
  s9 -> s1 [91, 107] { R3826 += 1, R3656 += 1, R724 += 1 };
  s9 -> s10 [108, 108] { R3826 += 1, R3656 += 1, R724 += 1 };
  s9 -> s1 [109, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s10 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s10 -> s10 [0, 65535] { R3826 += 1, R3656 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3826 += 1 };
  s10 -> s1 [91, 103] { R3826 += 1, R3656 += 1, R724 += 1 };
  s10 -> s11 [104, 104] { R3826 += 1, R3656 += 1, R724 += 1 };
  s10 -> s1 [105, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s11 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R3826 += 1, R3656 += 1 };
  s11 -> s6 [0, 65535] { R3826 += 1 };
  s11 -> s1 [91, 110] { R3826 += 1, R3656 += 1, R724 += 1 };
  s11 -> s12 [111, 111] { R3826 += 1, R3656 += 1, R724 += 1 };
  s11 -> s1 [112, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s12 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R3826 += 1, R3656 += 1 };
  s12 -> s6 [0, 65535] { R3826 += 1 };
  s12 -> s1 [91, 114] { R3826 += 1, R3656 += 1, R724 += 1 };
  s12 -> s13 [115, 115] { R3826 += 1, R3656 += 1, R724 += 1 };
  s12 -> s1 [116, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s13 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s13 -> s13 [0, 65535] { R3826 += 1, R3656 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3826 += 1 };
  s13 -> s1 [91, 115] { R3826 += 1, R3656 += 1, R724 += 1 };
  s13 -> s14 [116, 116] { R3826 += 1, R3656 += 1, R724 += 1 };
  s13 -> s1 [117, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  s14 -> s1 [0, 81] { R3826 += 1, R3656 += 1, R724 += 1 };
  s14 -> s1 [91, 65535] { R3826 += 1, R3656 += 1, R724 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 65535] { R3828 += 1, R3658 += 1, R729 += 1, R730 += 1 };
  s0 -> s0 [0, 65535] { R3827 += 1, R3828 += 1 };
  s0 -> s2 [0, 65535] { R3828 += 1, R3658 += 1, R728 += 1, R729 += 1 };
  s0 -> s3 [0, 65535] { R3828 += 1, R3657 += 1, R3658 += 1 };
  s1 -> s6 [0, 65535] { R3828 += 1, R3658 += 1 };
  s1 -> s5 [0, 65535] { R3828 += 1 };
  s1 -> s1 [0, 65535] { R3828 += 1, R3658 += 1, R729 += 1, R730 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3828 += 1 };
  s2 -> s1 [0, 65535] { R3828 += 1, R3658 += 1, R729 += 1, R730 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3828 += 1, R3658 += 1, R728 += 1, R729 += 1 };
  s3 -> s1 [0, 65535] { R3828 += 1, R3658 += 1, R729 += 1, R730 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3828 += 1, R3658 += 1, R728 += 1, R729 += 1 };
  s3 -> s3 [0, 65535] { R3828 += 1, R3657 += 1, R3658 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3828 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3828 += 1, R3658 += 1 };
  s6 -> s5 [0, 65535] { R3828 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_74 {
  init s0;
  s0 -> s1 [0, 65535] { R3830 += 1, R3659 += 1, R3660 += 1 };
  s0 -> s0 [0, 65535] { R3829 += 1, R3830 += 1 };
  s0 -> s2 [0, 65535] { R3830 += 1, R3660 += 1 };
  s1 -> s1 [0, 65535] { R3830 += 1, R3659 += 1, R3660 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3830 += 1, R3660 += 1 };
  s2 -> s3 [0, 65535] { R3830 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3830 += 1, R3660 += 1 };
  s3 -> s3 [0, 65535] { R3830 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_75 {
  init s0;
  s0 -> s0 [0, 65535] { R3831 += 1, R3832 += 1 };
  s0 -> s1 [0, 65535] { R3832 += 1, R3661 += 1, R3662 += 1 };
  s0 -> s2 [0, 65535] { R3832 += 1, R3662 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3832 += 1, R3661 += 1, R3662 += 1 };
  s1 -> s2 [0, 65535] { R3832 += 1, R3662 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3832 += 1 };
  s2 -> s2 [0, 65535] { R3832 += 1, R3662 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3832 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_76 {
  init s0;
  s0 -> s1 [0, 65535] { R3834 += 1, R3664 += 1, R3639 += 1, R3640 += 1 };
  s0 -> s2 [0, 65535] { R3834 += 1, R3664 += 1 };
  s0 -> s0 [0, 65535] { R3833 += 1, R3834 += 1 };
  s0 -> s3 [0, 65535] { R3834 += 1, R3663 += 1, R3664 += 1 };
  s1 -> s1 [0, 65535] { R3834 += 1, R3664 += 1, R3639 += 1, R3640 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3834 += 1, R3664 += 1 };
  s1 -> s5 [0, 65535] { R3834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3834 += 1, R3664 += 1 };
  s2 -> s5 [0, 65535] { R3834 += 1 };
  s3 -> s1 [0, 65535] { R3834 += 1, R3664 += 1, R3639 += 1, R3640 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3834 += 1, R3664 += 1 };
  s3 -> s3 [0, 65535] { R3834 += 1, R3663 += 1, R3664 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3834 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_77 {
  init s0;
  s0 -> s0 [0, 65535] { R3835 += 1, R3836 += 1 };
  s0 -> s1 [0, 65535] { R3836 += 1, R3722 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R3836 += 1, R3721 += 1, R3722 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3836 += 1, R3722 += 1, R42 += 1 };
  s1 -> s4 [0, 65535] { R3836 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3836 += 1, R3722 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R3836 += 1, R3721 += 1, R3722 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3836 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_78 {
  init s0;
  s0 -> s1 [0, 64] { R3838 += 1, R3724 += 1 };
  s0 -> s0 [0, 65535] { R3837 += 1, R3838 += 1 };
  s0 -> s2 [0, 65535] { R3838 += 1, R3723 += 1, R3724 += 1 };
  s0 -> s3 [65, 65] { R3838 += 1, R3724 += 1 };
  s0 -> s4 [65, 65] { R3838 += 1, R3724 += 1 };
  s0 -> s5 [81, 81] { R3838 += 1, R3724 += 1 };
  s0 -> s1 [82, 65535] { R3838 += 1, R3724 += 1 };
  s1 -> s1 [0, 64] { R3838 += 1, R3724 += 1 };
  s1 -> s3 [65, 65] { R3838 += 1, R3724 += 1 };
  s1 -> s4 [65, 65] { R3838 += 1, R3724 += 1 };
  s1 -> s5 [81, 81] { R3838 += 1, R3724 += 1 };
  s1 -> s1 [82, 65535] { R3838 += 1, R3724 += 1 };
  s2 -> s1 [0, 64] { R3838 += 1, R3724 += 1 };
  s2 -> s2 [0, 65535] { R3838 += 1, R3723 += 1, R3724 += 1 };
  s2 -> s3 [65, 65] { R3838 += 1, R3724 += 1 };
  s2 -> s4 [65, 65] { R3838 += 1, R3724 += 1 };
  s2 -> s5 [81, 81] { R3838 += 1, R3724 += 1 };
  s2 -> s1 [82, 65535] { R3838 += 1, R3724 += 1 };
  s3 -> s3 [0, 65] { R3838 += 1, R3724 += 1 };
  s3 -> s7 [81, 81] { R3838 += 1, R3724 += 1 };
  s3 -> s3 [82, 65535] { R3838 += 1, R3724 += 1 };
  s5 -> s5 [0, 64] { R3838 += 1, R3724 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3838 += 1 };
  s5 -> s7 [65, 65] { R3838 += 1, R3724 += 1 };
  s5 -> s8 [65, 65] { R3838 += 1, R3724 += 1 };
  s5 -> s5 [81, 65535] { R3838 += 1, R3724 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3838 += 1, R3724 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3838 += 1 };
  s7 -> s7 [81, 65535] { R3838 += 1, R3724 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3838 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_79 {
  init s0;
  s0 -> s1 [0, 64] { R3840 += 1, R3726 += 1, R707 += 1 };
  s0 -> s0 [0, 65535] { R3839 += 1, R3840 += 1 };
  s0 -> s2 [0, 65535] { R3840 += 1, R3725 += 1, R3726 += 1 };
  s0 -> s3 [65, 65] { R3840 += 1, R3726 += 1, R707 += 1 };
  s0 -> s4 [65, 65] { R3840 += 1, R3726 += 1, R707 += 1 };
  s0 -> s1 [66, 65535] { R3840 += 1, R3726 += 1, R707 += 1 };
  s1 -> s1 [0, 64] { R3840 += 1, R3726 += 1, R707 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3840 += 1 };
  s1 -> s3 [65, 65] { R3840 += 1, R3726 += 1, R707 += 1 };
  s1 -> s4 [65, 65] { R3840 += 1, R3726 += 1, R707 += 1 };
  s1 -> s1 [66, 65535] { R3840 += 1, R3726 += 1, R707 += 1 };
  s2 -> s1 [0, 64] { R3840 += 1, R3726 += 1, R707 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3840 += 1, R3725 += 1, R3726 += 1 };
  s2 -> s3 [65, 65] { R3840 += 1, R3726 += 1, R707 += 1 };
  s2 -> s4 [65, 65] { R3840 += 1, R3726 += 1, R707 += 1 };
  s2 -> s1 [66, 65535] { R3840 += 1, R3726 += 1, R707 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3840 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3840 += 1, R3726 += 1, R707 += 1 };
  s4 -> s6 [0, 65535] { R3840 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3840 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_80 {
  init s0;
  s0 -> s1 [0, 64] { R3842 += 1, R3728 += 1, R709 += 1 };
  s0 -> s2 [0, 65535] { R3842 += 1, R3727 += 1, R3728 += 1 };
  s0 -> s0 [0, 65535] { R3841 += 1, R3842 += 1 };
  s0 -> s3 [65, 65] { R3842 += 1, R3728 += 1, R709 += 1 };
  s0 -> s4 [65, 65] { R3842 += 1, R3728 += 1, R709 += 1 };
  s0 -> s1 [66, 65535] { R3842 += 1, R3728 += 1, R709 += 1 };
  s1 -> s1 [0, 64] { R3842 += 1, R3728 += 1, R709 += 1 };
  s1 -> s1 [0, 65535] { R3842 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3842 += 1, R3728 += 1, R709 += 1 };
  s1 -> s4 [65, 65] { R3842 += 1, R3728 += 1, R709 += 1 };
  s1 -> s1 [66, 65535] { R3842 += 1, R3728 += 1, R709 += 1 };
  s2 -> s1 [0, 64] { R3842 += 1, R3728 += 1, R709 += 1 };
  s2 -> s2 [0, 65535] { R3842 += 1, R3727 += 1, R3728 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3842 += 1, R3728 += 1, R709 += 1 };
  s2 -> s4 [65, 65] { R3842 += 1, R3728 += 1, R709 += 1 };
  s2 -> s1 [66, 65535] { R3842 += 1, R3728 += 1, R709 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3842 += 1 };
  s4 -> s5 [0, 65535] { R3842 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3842 += 1, R3728 += 1, R709 += 1 };
  s5 -> s5 [0, 65535] { R3842 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_81 {
  init s0;
  s0 -> s1 [0, 64] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s0 -> s0 [0, 65535] { R3843 += 1, R3844 += 1 };
  s0 -> s2 [0, 65535] { R3844 += 1, R3729 += 1, R3730 += 1 };
  s0 -> s3 [65, 65] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s0 -> s4 [65, 65] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s0 -> s1 [66, 65535] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s1 -> s1 [0, 64] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s1 -> s1 [0, 65535] { R3844 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s1 -> s4 [65, 65] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s1 -> s1 [66, 65535] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s2 -> s1 [0, 64] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s2 -> s2 [0, 65535] { R3844 += 1, R3729 += 1, R3730 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s2 -> s4 [65, 65] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s2 -> s1 [66, 65535] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s3 -> s3 [0, 65535] { R3844 += 1, R3730 += 1, R711 += 1, R712 += 1 };
  s3 -> s6 [0, 65535] { R3844 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3844 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3844 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_82 {
  init s0;
  s0 -> s1 [0, 64] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s0 -> s2 [0, 65535] { R3846 += 1, R3731 += 1, R3732 += 1 };
  s0 -> s0 [0, 65535] { R3845 += 1, R3846 += 1 };
  s0 -> s3 [65, 65] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s0 -> s4 [65, 65] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s0 -> s1 [66, 65535] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s1 -> s1 [0, 64] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s1 -> s1 [0, 65535] { R3846 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s1 -> s4 [65, 65] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s1 -> s1 [66, 65535] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s2 -> s1 [0, 64] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s2 -> s2 [0, 65535] { R3846 += 1, R3731 += 1, R3732 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s2 -> s4 [65, 65] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s2 -> s1 [66, 65535] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s3 -> s3 [0, 65535] { R3846 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3846 += 1 };
  s4 -> s4 [0, 65535] { R3846 += 1, R3732 += 1, R715 += 1, R716 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3846 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_83 {
  init s0;
  s0 -> s1 [0, 64] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s0 -> s2 [0, 65535] { R3848 += 1, R3733 += 1, R3734 += 1 };
  s0 -> s0 [0, 65535] { R3847 += 1, R3848 += 1 };
  s0 -> s3 [65, 65] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s0 -> s4 [65, 65] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s0 -> s1 [66, 65535] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s1 -> s1 [0, 64] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s1 -> s1 [0, 65535] { R3848 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s1 -> s4 [65, 65] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s1 -> s1 [66, 65535] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s2 -> s1 [0, 64] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3848 += 1, R3733 += 1, R3734 += 1 };
  s2 -> s3 [65, 65] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s2 -> s4 [65, 65] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s2 -> s1 [66, 65535] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3848 += 1 };
  s3 -> s3 [0, 65535] { R3848 += 1, R3734 += 1, R721 += 1, R722 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3848 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3848 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_84 {
  init s0;
  s0 -> s1 [0, 64] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s0 -> s2 [0, 65535] { R3850 += 1, R3735 += 1, R3736 += 1 };
  s0 -> s0 [0, 65535] { R3849 += 1, R3850 += 1 };
  s0 -> s3 [65, 65] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s0 -> s4 [65, 65] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s0 -> s1 [66, 65535] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s1 -> s1 [0, 64] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s1 -> s1 [0, 65535] { R3850 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s1 -> s4 [65, 65] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s1 -> s1 [66, 65535] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s2 -> s1 [0, 64] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s2 -> s2 [0, 65535] { R3850 += 1, R3735 += 1, R3736 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s2 -> s4 [65, 65] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s2 -> s1 [66, 65535] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s3 -> s3 [0, 65535] { R3850 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3850 += 1, R3736 += 1, R725 += 1, R726 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3850 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3850 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_85 {
  init s0;
  s0 -> s1 [0, 64] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s0 -> s2 [0, 64] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s0 -> s3 [0, 65535] { R3852 += 1, R3737 += 1, R3738 += 1 };
  s0 -> s0 [0, 65535] { R3851 += 1, R3852 += 1 };
  s0 -> s4 [65, 65] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s0 -> s5 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s0 -> s6 [65, 65] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s0 -> s7 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s0 -> s1 [66, 65535] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s0 -> s2 [66, 65535] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s1 -> s1 [0, 64] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s1 -> s11 [0, 64] { R3852 += 1, R3738 += 1 };
  s1 -> s5 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s1 -> s7 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s1 -> s8 [65, 65] { R3852 += 1, R3738 += 1 };
  s1 -> s12 [65, 65] { R3852 += 1, R3738 += 1 };
  s1 -> s1 [66, 65535] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s1 -> s11 [66, 65535] { R3852 += 1, R3738 += 1 };
  s2 -> s1 [0, 64] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s2 -> s2 [0, 64] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s2 -> s4 [65, 65] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s2 -> s5 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s2 -> s6 [65, 65] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s2 -> s7 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s2 -> s1 [66, 65535] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s2 -> s2 [66, 65535] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s3 -> s1 [0, 64] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s3 -> s2 [0, 64] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s3 -> s3 [0, 65535] { R3852 += 1, R3737 += 1, R3738 += 1 };
  s3 -> s4 [65, 65] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s3 -> s5 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s3 -> s6 [65, 65] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s3 -> s7 [65, 65] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s3 -> s1 [66, 65535] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s3 -> s2 [66, 65535] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s4 -> s4 [0, 65535] { R3852 += 1, R3738 += 1, R2963 += 1, R2964 += 1 };
  s4 -> s5 [0, 65535] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s5 -> s5 [0, 65535] { R3852 += 1, R3738 += 1, R2964 += 1, R2965 += 1 };
  s5 -> s8 [0, 65535] { R3852 += 1, R3738 += 1 };
  s8 -> s9 [0, 65535] { R3852 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R3852 += 1, R3738 += 1 };
  s9 -> s9 [0, 65535] { R3852 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3852 += 1, R3738 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R3852 += 1 };
  s11 -> s8 [65, 65] { R3852 += 1, R3738 += 1 };
  s11 -> s12 [65, 65] { R3852 += 1, R3738 += 1 };
  s11 -> s11 [66, 65535] { R3852 += 1, R3738 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R3852 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_86 {
  init s0;
  s0 -> s1 [0, 64] { R3854 += 1, R3740 += 1 };
  s0 -> s2 [0, 65535] { R3854 += 1, R3739 += 1, R3740 += 1 };
  s0 -> s0 [0, 65535] { R3853 += 1, R3854 += 1 };
  s0 -> s3 [65, 65] { R3854 += 1, R3740 += 1 };
  s0 -> s4 [65, 65] { R3854 += 1, R3740 += 1 };
  s0 -> s1 [66, 65535] { R3854 += 1, R3740 += 1 };
  s1 -> s1 [0, 64] { R3854 += 1, R3740 += 1 };
  s1 -> s1 [0, 65535] { R3854 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3854 += 1, R3740 += 1 };
  s1 -> s4 [65, 65] { R3854 += 1, R3740 += 1 };
  s1 -> s1 [66, 65535] { R3854 += 1, R3740 += 1 };
  s2 -> s1 [0, 64] { R3854 += 1, R3740 += 1 };
  s2 -> s2 [0, 65535] { R3854 += 1, R3739 += 1, R3740 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3854 += 1, R3740 += 1 };
  s2 -> s4 [65, 65] { R3854 += 1, R3740 += 1 };
  s2 -> s1 [66, 65535] { R3854 += 1, R3740 += 1 };
  s3 -> s3 [0, 65535] { R3854 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3854 += 1 };
  s4 -> s4 [0, 65535] { R3854 += 1, R3740 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3854 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_87 {
  init s0;
  s0 -> s1 [0, 64] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s0 -> s2 [0, 64] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s0 -> s3 [0, 65535] { R3856 += 1, R3741 += 1, R3742 += 1 };
  s0 -> s0 [0, 65535] { R3855 += 1, R3856 += 1 };
  s0 -> s4 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s0 -> s5 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s0 -> s6 [65, 65] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s0 -> s7 [65, 65] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s0 -> s1 [66, 80] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s0 -> s2 [66, 65535] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s0 -> s8 [81, 81] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s0 -> s1 [82, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s1 -> s1 [0, 64] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s1 -> s4 [65, 65] { R3856 += 1, R3742 += 1 };
  s1 -> s5 [65, 65] { R3856 += 1, R3742 += 1 };
  s1 -> s1 [66, 80] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s1 -> s1 [66, 65535] { R3856 += 1, R3742 += 1 };
  s1 -> s8 [81, 81] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s1 -> s1 [82, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s2 -> s1 [0, 64] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s2 -> s2 [0, 64] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s2 -> s4 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s2 -> s5 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s2 -> s6 [65, 65] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s2 -> s7 [65, 65] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s2 -> s1 [66, 80] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s2 -> s2 [66, 65535] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s2 -> s8 [81, 81] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s2 -> s1 [82, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s1 [0, 64] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s2 [0, 64] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s3 -> s3 [0, 65535] { R3856 += 1, R3741 += 1, R3742 += 1 };
  s3 -> s4 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s5 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s6 [65, 65] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s3 -> s7 [65, 65] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s3 -> s1 [66, 80] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s2 [66, 65535] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s3 -> s8 [81, 81] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s1 [82, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s5 -> s5 [0, 80] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s5 -> s5 [0, 65535] { R3856 += 1, R3742 += 1 };
  s5 -> s11 [81, 81] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s5 -> s5 [82, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s6 -> s5 [0, 80] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s6 -> s6 [0, 65535] { R3856 += 1, R3742 += 1, R3635 += 1, R3636 += 1 };
  s6 -> s11 [81, 81] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s6 -> s5 [82, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s8 -> s8 [0, 64] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s8 -> s8 [0, 65535] { R3856 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s8 -> s11 [65, 65] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s8 -> s8 [66, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3856 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R3856 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3856 += 1, R3742 += 1, R3636 += 1, R3637 += 1 };
  s12 -> s12 [0, 65535] { R3856 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P65
automaton P65_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining P97
automaton P97_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P103
automaton P103_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
synchronised {  // Automata constraining P91
automaton P91_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining P85
automaton P85_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
constraint R6 = R3664 && R7 = R3856 && R45 = 0 && R46 = 1 && R47 = 0 && R48 = 1 && R106 + R105 + -1*R124 + -1*R122 = 0 && R123 + R121 = 0 && R708 + R707 + -1*R729 + -1*R726 = 0 && R713 + R711 = 0 && R714 + R712 + -1*R729 + -1*R726 = 0 && R718 + R715 = 0 && R719 + R716 + -1*R729 + -1*R726 = 0 && R723 + R721 = 0 && R724 + R722 + -1*R729 + -1*R726 = 0 && R728 + R725 = 0 && R3641 = 0 && R3642 = R3664 && R3643 = 0 && R3644 = R3664 && R3645 = 0 && R3646 = R3664 && R3647 = 0 && R3648 = R3664 && R3649 = 0 && R3650 = R3664 && R3651 = 0 && R3652 = R3664 && R3653 = 0 && R3654 = R3664 && R3655 = 0 && R3656 = R3664 && R3657 = 0 && R3658 = R3664 && R3659 = 0 && R3660 = R3664 && R3661 = 0 && R3662 = R3664 && R3663 = 0 && R3665 = 0 && R3666 = R3856 && R3667 = 0 && R3668 = R3856 && R3669 = 0 && R3670 = R3856 && R3671 = 0 && R3672 = R3856 && R3673 = 0 && R3674 = R3856 && R3675 = 0 && R3676 = R3856 && R3677 = 0 && R3678 = R3856 && R3679 = 0 && R3680 = R3856 && R3681 = 0 && R3682 = R3856 && R3683 = 0 && R3684 = R3856 && R3685 = 0 && R3686 = R3856 && R3687 = 0 && R3688 = R3856 && R3689 = 0 && R3690 = R3856 && R3691 = 0 && R3692 = R3856 && R3693 = 0 && R3694 = R3856 && R3695 = 0 && R3696 = R3856 && R3697 = 0 && R3698 = R3856 && R3699 = 0 && R3700 = R3856 && R3701 = 0 && R3702 = R3856 && R3703 = 0 && R3704 = R3856 && R3705 = 0 && R3706 = R3856 && R3707 = 0 && R3708 = R3856 && R3709 = 0 && R3710 = R3856 && R3711 = 0 && R3712 = R3856 && R3713 = 0 && R3714 = R3856 && R3715 = 0 && R3716 = R3856 && R3717 = 0 && R3718 = R3856 && R3719 = 0 && R3720 = R3856 && R3723 = 0 && R3724 = 0 && R3737 = 0 && R3738 = 0 && R3741 = 0 && R3742 = 0 && R3799 = 10 && R3800 = R3856 && R3801 = 10 && R3802 = R3856 && R3803 = 10 && R3804 = R3856 && R3805 = 10 && R3806 = R3856 && R3807 = 10 && R3808 = R3856 && R3809 = 10 && R3810 = R3856 && R3811 = 10 && R3812 = R3856 && R3813 = 10 && R3814 = R3856 && R3815 = 10 && R3816 = R3856 && R3817 = 10 && R3818 = R3856 && R3819 = 10 && R3820 = R3856 && R3821 = 10 && R3822 = R3856 && R3823 = 10 && R3824 = R3856 && R3825 = 10 && R3826 = R3856 && R3827 = 10 && R3828 = R3856 && R3829 = 10 && R3830 = R3856 && R3831 = 10 && R3832 = R3856 && R3833 = 10 && R3834 = R3856 && R3835 = 10 && R3836 = R3856 && R3837 = 10 && R3838 = R3856 && R3839 = 10 && R3840 = R3856 && R3841 = 10 && R3842 = R3856 && R3843 = 10 && R3844 = R3856 && R3845 = 10 && R3846 = R3856 && R3847 = 10 && R3848 = R3856 && R3849 = 10 && R3850 = R3856 && R3851 = 10 && R3852 = R3856 && R3853 = 10 && R3854 = R3856 && R3855 = 10 && R140 + R137 + R190 + R187 != 0 && R156 + R153 + R202 + R199 != 0 && R172 + R169 + R214 + R211 != 0 && R730 + R727 + R3640 + R3637 != 0 && R24 < 1 && R25 < 1 && R28 < 1 && R108 + R107 < 1 && R110 + R109 < 1 && R112 + R111 < 1 && R114 + R113 < 1 && -1*R124 + -1*R122 < 1 && R710 + R709 < 1 && -1*R729 < R726 && 0 < R3664 && 9 < R3856 && (R120 + R117 != 0 || ((R118 + R115 != 0 || R119 + R116 + -1*R124 + -1*R122 = 0 || R124 + R122 < 1) && (R118 + R115 = 0 || R124 + R122 < 1))) && (R124 + R122 != 0 || R130 + R127 = 0 || (R128 + R125 = 0 && R129 + R126 = 0)) && (R124 + R122 != 0 || R130 + R127 = 0 || (R133 + R131 = 0 && R134 + R132 = 0)) && (R124 + R122 != 0 || R130 + R127 = 0 || (R138 + R135 = 0 && R139 + R136 = 0)) && (R124 + R122 != 0 || R146 + R143 = 0 || (R144 + R141 = 0 && R145 + R142 = 0)) && (R124 + R122 != 0 || R146 + R143 = 0 || (R149 + R147 = 0 && R150 + R148 = 0)) && (R124 + R122 != 0 || R146 + R143 = 0 || (R154 + R151 = 0 && R155 + R152 = 0)) && (R124 + R122 != 0 || R162 + R159 = 0 || (R160 + R157 = 0 && R161 + R158 = 0)) && (R124 + R122 != 0 || R162 + R159 = 0 || (R165 + R163 = 0 && R166 + R164 = 0)) && (R124 + R122 != 0 || R162 + R159 = 0 || (R170 + R167 = 0 && R171 + R168 = 0)) && (R128 + R125 != 0 || R124 + R122 + -1*R129 + -1*R126 = 0 || R124 + R122 < 1) && (R133 + R131 != 0 || R124 + R122 + -1*R134 + -1*R132 = 0 || R124 + R122 < 1) && (R138 + R135 != 0 || R124 + R122 + -1*R139 + -1*R136 = 0 || R124 + R122 < 1) && (R144 + R141 != 0 || R124 + R122 + -1*R145 + -1*R142 = 0 || R124 + R122 < 1) && (R149 + R147 != 0 || R124 + R122 + -1*R150 + -1*R148 = 0 || R124 + R122 < 1) && (R154 + R151 != 0 || R124 + R122 + -1*R155 + -1*R152 = 0 || R124 + R122 < 1) && (R160 + R157 != 0 || R124 + R122 + -1*R161 + -1*R158 = 0 || R124 + R122 < 1) && (R165 + R163 != 0 || R124 + R122 + -1*R166 + -1*R164 = 0 || R124 + R122 < 1) && (R170 + R167 != 0 || R124 + R122 + -1*R171 + -1*R168 = 0 || R124 + R122 < 1) && (R42 = 0 || (R3721 = 0 && R3722 = 0)) && (R42 = 0 || (R3725 = 0 && R3726 = 0)) && (R42 = 0 || (R3727 = 0 && R3728 = 0)) && (R42 = 0 || (R3729 = 0 && R3730 = 0)) && (R42 = 0 || (R3731 = 0 && R3732 = 0)) && (R42 = 0 || (R3733 = 0 && R3734 = 0)) && (R42 = 0 || (R3735 = 0 && R3736 = 0)) && (R42 = 0 || (R3739 = 0 && R3740 = 0)) && (R44 = 0 || (R3743 = 0 && R3744 = 0)) && (R44 = 0 || (R3745 = 0 && R3746 = 0)) && (R44 = 0 || (R3747 = 0 && R3748 = 0)) && (R44 = 0 || (R3749 = 0 && R3750 = 0)) && (R44 = 0 || (R3751 = 0 && R3752 = 0)) && (R44 = 0 || (R3753 = 0 && R3754 = 0)) && (R44 = 0 || (R3755 = 0 && R3756 = 0)) && (R44 = 0 || (R3757 = 0 && R3758 = 0)) && (R44 = 0 || (R3759 = 0 && R3760 = 0)) && (R44 = 0 || (R3761 = 0 && R3762 = 0)) && (R44 = 0 || (R3763 = 0 && R3764 = 0)) && (R44 = 0 || (R3765 = 0 && R3766 = 0)) && (R44 = 0 || (R3767 = 0 && R3768 = 0)) && (R44 = 0 || (R3769 = 0 && R3770 = 0)) && (R44 = 0 || (R3771 = 0 && R3772 = 0)) && (R44 = 0 || (R3773 = 0 && R3774 = 0)) && (R44 = 0 || (R3775 = 0 && R3776 = 0)) && (R44 = 0 || (R3777 = 0 && R3778 = 0)) && (R44 = 0 || (R3779 = 0 && R3780 = 0)) && (R44 = 0 || (R3781 = 0 && R3782 = 0)) && (R44 = 0 || (R3783 = 0 && R3784 = 0)) && (R44 = 0 || (R3785 = 0 && R3786 = 0)) && (R44 = 0 || (R3787 = 0 && R3788 = 0)) && (R44 = 0 || (R3789 = 0 && R3790 = 0)) && (R44 = 0 || (R3791 = 0 && R3792 = 0)) && (R44 = 0 || (R3793 = 0 && R3794 = 0)) && (R44 = 0 || (R3795 = 0 && R3796 = 0)) && (R44 = 0 || (R3797 = 0 && R3798 = 0)) && (R120 + R117 = 0 || (R118 + R115 = 0 && R119 + R116 + -1*R124 + -1*R122 = 0)) && (R128 + R125 = 0 || R124 + R122 < 1) && (R133 + R131 = 0 || R124 + R122 < 1) && (R138 + R135 = 0 || R124 + R122 < 1) && (R144 + R141 = 0 || R124 + R122 < 1) && (R149 + R147 = 0 || R124 + R122 < 1) && (R154 + R151 = 0 || R124 + R122 < 1) && (R160 + R157 = 0 || R124 + R122 < 1) && (R165 + R163 = 0 || R124 + R122 < 1) && (R170 + R167 = 0 || R124 + R122 < 1) && (R178 + R175 = 0 || (R176 + R173 = 0 && R177 + R174 = 0)) && (R184 + R181 = 0 || (R182 + R179 = 0 && R183 + R180 = 0)) && (R184 + R181 = 0 || (R188 + R185 = 0 && R189 + R186 = 0)) && (R196 + R193 = 0 || (R194 + R191 = 0 && R195 + R192 = 0)) && (R196 + R193 = 0 || (R200 + R197 = 0 && R201 + R198 = 0)) && (R208 + R205 = 0 || (R206 + R203 = 0 && R207 + R204 = 0)) && (R208 + R205 = 0 || (R212 + R209 = 0 && R213 + R210 = 0)) && (R2968 + R2965 = 0 || (R2966 + R2963 = 0 && R2967 + R2964 = 0)) && (R2968 + R2965 = 0 || (R3638 + R3635 = 0 && R3639 + R3636 = 0));
// End of Parikh automata intersection problem
