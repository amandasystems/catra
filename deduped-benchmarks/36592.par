// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R4, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 57];
  s0 -> s2 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s4 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s0 [0, 43];
  s2 -> s1 [44, 44];
  s2 -> s0 [45, 46];
  s2 -> s3 [47, 47];
  s2 -> s0 [48, 57];
  s2 -> s2 [58, 58];
  s2 -> s0 [59, 65535];
  s3 -> s0 [0, 43];
  s3 -> s1 [44, 44];
  s3 -> s0 [45, 46];
  s3 -> s0 [48, 57];
  s3 -> s2 [58, 58];
  s3 -> s0 [59, 65535];
  s4 -> s1 [0, 46];
  s4 -> s5 [47, 47];
  s4 -> s1 [48, 57];
  s4 -> s4 [58, 58];
  s4 -> s1 [59, 65535];
  s5 -> s1 [0, 46];
  s5 -> s1 [48, 57];
  s5 -> s4 [58, 58];
  s5 -> s1 [59, 65535];
  accepting s1, s4, s5;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4 += 1 };
  s0 -> s0 [0, 65535] { R3 += 1, R4 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R4 += 1 };
  s1 -> s1 [0, 43] { R4 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s1 [0, 65535] { R8 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 - R8 = 1 && R3 = 0 && R4 = R8 && R7 = 0 && R0 != 0 && -1 < R8;
// End of Parikh automata intersection problem
