// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R2, R3, R5, R6, R63, R64, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R102 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [44, 44] { R102 += 1 };
  s0 -> s1 [45, 45] { R102 += 1 };
  s0 -> s3 [46, 46] { R102 += 1 };
  s0 -> s1 [48, 62] { R102 += 1 };
  s0 -> s1 [65, 65535] { R102 += 1 };
  s1 -> s1 [0, 43] { R102 += 1 };
  s1 -> s2 [44, 44] { R102 += 1 };
  s1 -> s1 [45, 45] { R102 += 1 };
  s1 -> s3 [46, 46] { R102 += 1 };
  s1 -> s1 [48, 62] { R102 += 1 };
  s1 -> s1 [65, 65535] { R102 += 1 };
  s2 -> s2 [0, 45] { R102 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R102 += 1 };
  s2 -> s2 [48, 62] { R102 += 1 };
  s2 -> s2 [65, 65535] { R102 += 1 };
  s3 -> s1 [0, 43] { R102 += 1 };
  s3 -> s2 [44, 44] { R102 += 1 };
  s3 -> s1 [45, 45] { R102 += 1 };
  s3 -> s3 [46, 46] { R102 += 1 };
  s3 -> s1 [48, 62] { R102 += 1 };
  s3 -> s1 [65, 114] { R102 += 1 };
  s3 -> s4 [115, 115] { R102 += 1 };
  s3 -> s1 [116, 65535] { R102 += 1 };
  s4 -> s1 [0, 43] { R102 += 1 };
  s4 -> s2 [44, 44] { R102 += 1 };
  s4 -> s1 [45, 45] { R102 += 1 };
  s4 -> s3 [46, 46] { R102 += 1 };
  s4 -> s1 [48, 62] { R102 += 1 };
  s4 -> s1 [65, 110] { R102 += 1 };
  s4 -> s5 [111, 111] { R102 += 1 };
  s4 -> s1 [112, 65535] { R102 += 1 };
  s5 -> s1 [0, 43] { R102 += 1 };
  s5 -> s2 [44, 44] { R102 += 1 };
  s5 -> s1 [45, 45] { R102 += 1 };
  s5 -> s3 [46, 46] { R102 += 1 };
  s5 -> s1 [48, 62] { R102 += 1 };
  s5 -> s1 [65, 98] { R102 += 1 };
  s5 -> s6 [99, 99] { R102 += 1 };
  s5 -> s1 [100, 65535] { R102 += 1 };
  s6 -> s1 [0, 43] { R102 += 1 };
  s6 -> s2 [44, 44] { R102 += 1 };
  s6 -> s1 [45, 45] { R102 += 1 };
  s6 -> s3 [46, 46] { R102 += 1 };
  s6 -> s1 [48, 62] { R102 += 1 };
  s6 -> s1 [65, 106] { R102 += 1 };
  s6 -> s1 [108, 65535] { R102 += 1 };
  s7 -> s2 [0, 45] { R102 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R102 += 1 };
  s7 -> s2 [48, 62] { R102 += 1 };
  s7 -> s2 [65, 114] { R102 += 1 };
  s7 -> s8 [115, 115] { R102 += 1 };
  s7 -> s2 [116, 65535] { R102 += 1 };
  s8 -> s2 [0, 45] { R102 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R102 += 1 };
  s8 -> s2 [48, 62] { R102 += 1 };
  s8 -> s2 [65, 110] { R102 += 1 };
  s8 -> s9 [111, 111] { R102 += 1 };
  s8 -> s2 [112, 65535] { R102 += 1 };
  s9 -> s2 [0, 45] { R102 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R102 += 1 };
  s9 -> s2 [48, 62] { R102 += 1 };
  s9 -> s2 [65, 98] { R102 += 1 };
  s9 -> s10 [99, 99] { R102 += 1 };
  s9 -> s2 [100, 65535] { R102 += 1 };
  s10 -> s2 [0, 45] { R102 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R102 += 1 };
  s10 -> s2 [48, 62] { R102 += 1 };
  s10 -> s2 [65, 106] { R102 += 1 };
  s10 -> s2 [108, 65535] { R102 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s1 [0, 65535] { R104 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R104 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R106 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s3 [44, 44] { R106 += 1 };
  s0 -> s1 [45, 65535] { R106 += 1, R64 += 1 };
  s1 -> s1 [0, 43] { R106 += 1, R64 += 1 };
  s1 -> s3 [44, 44] { R106 += 1 };
  s1 -> s1 [45, 65535] { R106 += 1, R64 += 1 };
  s2 -> s1 [0, 43] { R106 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R106 += 1, R63 += 1, R64 += 1 };
  s2 -> s3 [44, 44] { R106 += 1 };
  s2 -> s1 [45, 65535] { R106 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R106 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R92 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R91 += 1, R92 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R92 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R108 += 1 };
  s2 -> s1 [0, 65535] { R108 += 1, R92 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R108 += 1, R91 += 1, R92 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R108 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R110 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R93 += 1, R94 += 1 };
  s0 -> s3 [44, 44] { R110 += 1, R94 += 1 };
  s0 -> s1 [45, 65535] { R110 += 1, R94 += 1 };
  s1 -> s1 [0, 43] { R110 += 1, R94 += 1 };
  s1 -> s3 [44, 44] { R110 += 1, R94 += 1 };
  s1 -> s1 [45, 65535] { R110 += 1, R94 += 1 };
  s2 -> s1 [0, 43] { R110 += 1, R94 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [44, 44] { R110 += 1, R94 += 1 };
  s2 -> s1 [45, 65535] { R110 += 1, R94 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R110 += 1 };
  s3 -> s3 [0, 65535] { R110 += 1, R94 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R110 += 1 };
  accepting s3, s4, s5;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R96 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R112 += 1, R96 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R112 += 1, R96 += 1, R1 += 1 };
  s2 -> s4 [0, 65535] { R112 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R112 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R114 += 1, R98 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R98 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R114 += 1, R97 += 1, R98 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s4 [44, 44] { R114 += 1, R98 += 1 };
  s0 -> s1 [45, 65535] { R114 += 1, R98 += 1, R6 += 1 };
  s1 -> s1 [0, 43] { R114 += 1, R98 += 1, R6 += 1 };
  s1 -> s4 [44, 44] { R114 += 1, R98 += 1 };
  s1 -> s1 [45, 65535] { R114 += 1, R98 += 1, R6 += 1 };
  s2 -> s1 [0, 43] { R114 += 1, R98 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R98 += 1, R5 += 1, R6 += 1 };
  s2 -> s4 [44, 44] { R114 += 1, R98 += 1 };
  s2 -> s1 [45, 65535] { R114 += 1, R98 += 1, R6 += 1 };
  s3 -> s1 [0, 43] { R114 += 1, R98 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R114 += 1, R98 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R114 += 1, R97 += 1, R98 += 1 };
  s3 -> s4 [44, 44] { R114 += 1, R98 += 1 };
  s3 -> s1 [45, 65535] { R114 += 1, R98 += 1, R6 += 1 };
  s4 -> s5 [0, 65535] { R114 += 1 };
  s4 -> s4 [0, 65535] { R114 += 1, R98 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R114 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R116 += 1, R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R99 += 1, R100 += 1 };
  s1 -> s2 [0, 65535] { R116 += 1, R100 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R116 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R116 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 - R6 = 1 && R2 = R100 && R3 = R116 && R5 = 0 && R63 = 0 && R64 - R99 = -1 && R91 = 0 && R92 - R99 = -1 && R93 = R99 && R94 = R100 && R95 = R99 && R96 = R100 && R97 = R99 && R98 = R100 && R101 = 10 && R102 = R116 && R103 = 10 && R104 = R116 && R105 = 10 && R106 = R116 && R107 = 10 && R108 = R116 && R109 = 10 && R110 = R116 && R111 = 10 && R112 = R116 && R113 = 10 && R114 = R116 && R115 = 10 && R0 != 0 && -1 < R6 && R99 - R100 < 1 && 0 < R99 && 9 < R116;
// End of Parikh automata intersection problem
