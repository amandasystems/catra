// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R20, R21, R24, R35, R3555, R3556, R3557, R3558, R3559, R3560, R3561, R3562, R3563, R3564, R3565, R3566, R36, R37, R3761, R3762, R3763, R3764, R3765, R3766, R3767, R3768, R3769, R3770, R3771, R3772, R3773, R3774, R3775, R3776, R3777, R3778, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R3795, R3796, R3797, R3798, R3799, R38, R3800, R3801, R3802, R3803, R3804, R3805, R3806, R3807, R3808, R3809, R3810, R3811, R3812, R3813, R3814, R3815, R3816, R3817, R3818, R3819, R3820, R3821, R3822, R3823, R3824, R3825, R3826, R3827, R3828, R3829, R3830, R3831, R3832, R3833, R3834, R3835, R3836, R3837, R3838, R3839, R3840, R3841, R3842, R3843, R3844, R3845, R3846, R3847, R3848, R3849, R3850, R3851, R3852, R3853, R3854, R3855, R3856, R3857, R3858, R3859, R3860, R3861, R3862, R3863, R3864, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R39, R3900, R3901, R3902, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R3929, R3930, R3931, R3932, R3933, R3934, R3935, R3936, R3937, R3938, R3939, R3940, R3941, R3942, R3943, R3944, R3945, R3946, R3947, R3948, R3949, R3950, R3951, R3952, R3953, R3954, R40, R41, R42, R5, R6, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R7, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P96
automaton P96_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3792 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R3791 += 1, R3792 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3792 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R3794 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R3793 += 1, R3794 += 1 };
  s1 -> s1 [0, 65535] { R3794 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 89] { R3796 += 1 };
  s0 -> s2 [0, 65535] { R3796 += 1, R90 += 1 };
  s0 -> s0 [0, 65535] { R3795 += 1, R3796 += 1 };
  s0 -> s1 [91, 65535] { R3796 += 1 };
  s1 -> s1 [0, 89] { R3796 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R3796 += 1 };
  s2 -> s1 [0, 89] { R3796 += 1 };
  s2 -> s2 [0, 65535] { R3796 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R3796 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 88] { R3798 += 1 };
  s0 -> s0 [0, 65535] { R3797 += 1, R3798 += 1 };
  s0 -> s2 [0, 65535] { R3798 += 1, R92 += 1 };
  s0 -> s1 [90, 65535] { R3798 += 1 };
  s1 -> s1 [0, 88] { R3798 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R3798 += 1 };
  s2 -> s1 [0, 88] { R3798 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3798 += 1, R92 += 1 };
  s2 -> s1 [90, 65535] { R3798 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 72] { R3800 += 1 };
  s0 -> s0 [0, 65535] { R3799 += 1, R3800 += 1 };
  s0 -> s2 [0, 65535] { R3800 += 1, R94 += 1 };
  s0 -> s1 [74, 65535] { R3800 += 1 };
  s1 -> s1 [0, 72] { R3800 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R3800 += 1 };
  s2 -> s1 [0, 72] { R3800 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3800 += 1, R94 += 1 };
  s2 -> s1 [74, 65535] { R3800 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R3802 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R3801 += 1, R3802 += 1 };
  s0 -> s2 [0, 65535] { R3802 += 1, R99 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R3802 += 1, R98 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3802 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535] { R3802 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3802 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535] { R3802 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R3803 += 1, R3804 += 1 };
  s0 -> s1 [0, 65535] { R3804 += 1, R103 += 1, R104 += 1 };
  s0 -> s2 [108, 108] { R3804 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R3804 += 1, R103 += 1, R104 += 1 };
  s1 -> s2 [108, 108] { R3804 += 1, R104 += 1 };
  s2 -> s3 [111, 111] { R3804 += 1, R104 += 1 };
  s3 -> s4 [99, 99] { R3804 += 1, R104 += 1 };
  s4 -> s5 [97, 97] { R3804 += 1, R104 += 1 };
  s5 -> s6 [108, 108] { R3804 += 1, R104 += 1 };
  s6 -> s7 [104, 104] { R3804 += 1, R104 += 1 };
  s7 -> s8 [111, 111] { R3804 += 1, R104 += 1 };
  s8 -> s9 [115, 115] { R3804 += 1, R104 += 1 };
  s9 -> s10 [116, 116] { R3804 += 1, R104 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R3804 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R3806 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R3805 += 1, R3806 += 1 };
  s0 -> s2 [0, 65535] { R3806 += 1, R108 += 1, R109 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3806 += 1, R109 += 1, R110 += 1 };
  s1 -> s4 [0, 65535] { R3806 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3806 += 1, R109 += 1, R110 += 1 };
  s2 -> s2 [0, 65535] { R3806 += 1, R108 += 1, R109 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3806 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 107] { R3808 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R3808 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R3807 += 1, R3808 += 1 };
  s0 -> s3 [108, 108] { R3808 += 1, R114 += 1 };
  s0 -> s1 [109, 65535] { R3808 += 1, R114 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3808 += 1, R114 += 1 };
  s1 -> s13 [0, 65535] { R3808 += 1 };
  s2 -> s1 [0, 107] { R3808 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3808 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [108, 108] { R3808 += 1, R114 += 1 };
  s2 -> s1 [109, 65535] { R3808 += 1, R114 += 1 };
  s3 -> s1 [0, 110] { R3808 += 1, R114 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3808 += 1 };
  s3 -> s5 [111, 111] { R3808 += 1, R114 += 1 };
  s3 -> s1 [112, 65535] { R3808 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3808 += 1, R114 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3808 += 1 };
  s5 -> s6 [99, 99] { R3808 += 1, R114 += 1 };
  s5 -> s1 [100, 65535] { R3808 += 1, R114 += 1 };
  s6 -> s1 [0, 96] { R3808 += 1, R114 += 1 };
  s6 -> s6 [0, 65535] { R3808 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3808 += 1, R114 += 1 };
  s6 -> s1 [98, 65535] { R3808 += 1, R114 += 1 };
  s7 -> s1 [0, 107] { R3808 += 1, R114 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3808 += 1 };
  s7 -> s8 [108, 108] { R3808 += 1, R114 += 1 };
  s7 -> s1 [109, 65535] { R3808 += 1, R114 += 1 };
  s8 -> s1 [0, 103] { R3808 += 1, R114 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3808 += 1 };
  s8 -> s9 [104, 104] { R3808 += 1, R114 += 1 };
  s8 -> s1 [105, 65535] { R3808 += 1, R114 += 1 };
  s9 -> s1 [0, 110] { R3808 += 1, R114 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3808 += 1 };
  s9 -> s10 [111, 111] { R3808 += 1, R114 += 1 };
  s9 -> s1 [112, 65535] { R3808 += 1, R114 += 1 };
  s10 -> s1 [0, 114] { R3808 += 1, R114 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3808 += 1 };
  s10 -> s11 [115, 115] { R3808 += 1, R114 += 1 };
  s10 -> s1 [116, 65535] { R3808 += 1, R114 += 1 };
  s11 -> s1 [0, 115] { R3808 += 1, R114 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3808 += 1 };
  s11 -> s12 [116, 116] { R3808 += 1, R114 += 1 };
  s11 -> s1 [117, 65535] { R3808 += 1, R114 += 1 };
  s12 -> s1 [0, 65535] { R3808 += 1, R114 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3808 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R3810 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R3810 += 1, R119 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R3809 += 1, R3810 += 1 };
  s1 -> s1 [0, 65535] { R3810 += 1, R118 += 1, R119 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3810 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R3810 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3810 += 1, R119 += 1, R120 += 1 };
  s3 -> s3 [0, 65535] { R3810 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R3812 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R3811 += 1, R3812 += 1 };
  s0 -> s2 [0, 65535] { R3812 += 1, R125 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R3812 += 1, R124 += 1, R125 += 1 };
  s1 -> s2 [0, 65535] { R3812 += 1, R125 += 1, R126 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3812 += 1 };
  s2 -> s2 [0, 65535] { R3812 += 1, R125 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3812 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R3814 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R3813 += 1, R3814 += 1 };
  s0 -> s2 [0, 65535] { R3814 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [108, 108] { R3814 += 1, R130 += 1 };
  s0 -> s1 [109, 65535] { R3814 += 1, R130 += 1 };
  s1 -> s13 [0, 65535] { R3814 += 1 };
  s1 -> s1 [0, 65535] { R3814 += 1, R130 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3814 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R3814 += 1, R129 += 1, R130 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R3814 += 1, R130 += 1 };
  s2 -> s1 [109, 65535] { R3814 += 1, R130 += 1 };
  s3 -> s1 [0, 110] { R3814 += 1, R130 += 1 };
  s3 -> s3 [0, 65535] { R3814 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3814 += 1, R130 += 1 };
  s3 -> s1 [112, 65535] { R3814 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3814 += 1, R130 += 1 };
  s5 -> s5 [0, 65535] { R3814 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R3814 += 1, R130 += 1 };
  s5 -> s1 [100, 65535] { R3814 += 1, R130 += 1 };
  s6 -> s1 [0, 96] { R3814 += 1, R130 += 1 };
  s6 -> s6 [0, 65535] { R3814 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3814 += 1, R130 += 1 };
  s6 -> s1 [98, 65535] { R3814 += 1, R130 += 1 };
  s7 -> s1 [0, 107] { R3814 += 1, R130 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3814 += 1 };
  s7 -> s8 [108, 108] { R3814 += 1, R130 += 1 };
  s7 -> s1 [109, 65535] { R3814 += 1, R130 += 1 };
  s8 -> s1 [0, 103] { R3814 += 1, R130 += 1 };
  s8 -> s8 [0, 65535] { R3814 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3814 += 1, R130 += 1 };
  s8 -> s1 [105, 65535] { R3814 += 1, R130 += 1 };
  s9 -> s1 [0, 110] { R3814 += 1, R130 += 1 };
  s9 -> s9 [0, 65535] { R3814 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R3814 += 1, R130 += 1 };
  s9 -> s1 [112, 65535] { R3814 += 1, R130 += 1 };
  s10 -> s1 [0, 114] { R3814 += 1, R130 += 1 };
  s10 -> s10 [0, 65535] { R3814 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3814 += 1, R130 += 1 };
  s10 -> s1 [116, 65535] { R3814 += 1, R130 += 1 };
  s11 -> s1 [0, 115] { R3814 += 1, R130 += 1 };
  s11 -> s11 [0, 65535] { R3814 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R3814 += 1, R130 += 1 };
  s11 -> s1 [117, 65535] { R3814 += 1, R130 += 1 };
  s12 -> s1 [0, 65535] { R3814 += 1, R130 += 1 };
  s13 -> s13 [0, 65535] { R3814 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3816 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R3815 += 1, R3816 += 1 };
  s0 -> s2 [0, 65535] { R3816 += 1, R135 += 1, R136 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3816 += 1, R134 += 1, R135 += 1 };
  s1 -> s2 [0, 65535] { R3816 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535] { R3816 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3816 += 1, R135 += 1, R136 += 1 };
  s3 -> s3 [0, 65535] { R3816 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3818 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R3817 += 1, R3818 += 1 };
  s0 -> s2 [0, 65535] { R3818 += 1, R141 += 1, R142 += 1 };
  s1 -> s1 [0, 65535] { R3818 += 1, R140 += 1, R141 += 1 };
  s1 -> s2 [0, 65535] { R3818 += 1, R141 += 1, R142 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3818 += 1 };
  s2 -> s2 [0, 65535] { R3818 += 1, R141 += 1, R142 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3818 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3820 += 1 };
  s0 -> s0 [0, 65535] { R3819 += 1, R3820 += 1 };
  s1 -> s1 [0, 65535] { R3820 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3822 += 1, R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R3822 += 1, R147 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R3821 += 1, R3822 += 1 };
  s1 -> s1 [0, 65535] { R3822 += 1, R146 += 1, R147 += 1 };
  s1 -> s2 [0, 65535] { R3822 += 1, R147 += 1, R148 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3822 += 1, R147 += 1, R148 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3822 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3822 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R3824 += 1 };
  s0 -> s0 [0, 65535] { R3823 += 1, R3824 += 1 };
  s1 -> s1 [0, 65535] { R3824 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 88] { R3826 += 1, R153 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R3826 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R3825 += 1, R3826 += 1 };
  s0 -> s3 [89, 89] { R3826 += 1, R153 += 1, R154 += 1 };
  s0 -> s4 [89, 89] { R3826 += 1, R153 += 1, R154 += 1 };
  s0 -> s1 [90, 65535] { R3826 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [0, 88] { R3826 += 1, R153 += 1, R154 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3826 += 1 };
  s1 -> s3 [89, 89] { R3826 += 1, R153 += 1, R154 += 1 };
  s1 -> s4 [89, 89] { R3826 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [90, 65535] { R3826 += 1, R153 += 1, R154 += 1 };
  s2 -> s1 [0, 88] { R3826 += 1, R153 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R3826 += 1, R152 += 1, R153 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [89, 89] { R3826 += 1, R153 += 1, R154 += 1 };
  s2 -> s4 [89, 89] { R3826 += 1, R153 += 1, R154 += 1 };
  s2 -> s1 [90, 65535] { R3826 += 1, R153 += 1, R154 += 1 };
  s3 -> s3 [0, 65535] { R3826 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3826 += 1, R153 += 1, R154 += 1 };
  s4 -> s6 [0, 65535] { R3826 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3826 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R3828 += 1, R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R3828 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R3827 += 1, R3828 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3828 += 1, R159 += 1, R160 += 1 };
  s1 -> s4 [0, 65535] { R3828 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3828 += 1, R159 += 1, R160 += 1 };
  s2 -> s2 [0, 65535] { R3828 += 1, R158 += 1, R159 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3828 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R3829 += 1, R3830 += 1 };
  s0 -> s1 [0, 65535] { R3830 += 1 };
  s1 -> s1 [0, 65535] { R3830 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 72] { R3832 += 1, R165 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R3831 += 1, R3832 += 1 };
  s0 -> s2 [0, 65535] { R3832 += 1, R164 += 1, R165 += 1 };
  s0 -> s3 [73, 73] { R3832 += 1, R165 += 1, R166 += 1 };
  s0 -> s4 [73, 73] { R3832 += 1, R165 += 1, R166 += 1 };
  s0 -> s1 [74, 65535] { R3832 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [0, 72] { R3832 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [0, 65535] { R3832 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R3832 += 1, R165 += 1, R166 += 1 };
  s1 -> s4 [73, 73] { R3832 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [74, 65535] { R3832 += 1, R165 += 1, R166 += 1 };
  s2 -> s1 [0, 72] { R3832 += 1, R165 += 1, R166 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3832 += 1, R164 += 1, R165 += 1 };
  s2 -> s3 [73, 73] { R3832 += 1, R165 += 1, R166 += 1 };
  s2 -> s4 [73, 73] { R3832 += 1, R165 += 1, R166 += 1 };
  s2 -> s1 [74, 65535] { R3832 += 1, R165 += 1, R166 += 1 };
  s3 -> s3 [0, 65535] { R3832 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3832 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3832 += 1, R165 += 1, R166 += 1 };
  s5 -> s5 [0, 65535] { R3832 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R3855 += 1, R3856 += 1 };
  s0 -> s1 [0, 65535] { R3856 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3856 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3858 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R3857 += 1, R3858 += 1 };
  s0 -> s2 [65, 65] { R3858 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R3858 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R3858 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R3858 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3858 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R3858 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R3858 += 1, R87 += 1 };
  s2 -> s2 [0, 65535] { R3858 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3860 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R3859 += 1, R3860 += 1 };
  s0 -> s2 [65, 65] { R3860 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R3860 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R3860 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R3860 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3860 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R3860 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R3860 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R3860 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3862 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R3861 += 1, R3862 += 1 };
  s0 -> s2 [65, 65] { R3862 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R3862 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R3862 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R3862 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3862 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R3862 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R3862 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R3862 += 1, R91 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3864 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R3863 += 1, R3864 += 1 };
  s0 -> s2 [65, 65] { R3864 += 1, R93 += 1 };
  s0 -> s3 [65, 65] { R3864 += 1, R93 += 1 };
  s0 -> s1 [66, 65535] { R3864 += 1, R93 += 1 };
  s1 -> s1 [0, 64] { R3864 += 1, R93 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3864 += 1, R93 += 1 };
  s1 -> s3 [65, 65] { R3864 += 1, R93 += 1 };
  s1 -> s1 [66, 65535] { R3864 += 1, R93 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3864 += 1, R93 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3866 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R3865 += 1, R3866 += 1 };
  s0 -> s2 [65, 65] { R3866 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R3866 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R3866 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R3866 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3866 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R3866 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R3866 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535] { R3866 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3868 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R3867 += 1, R3868 += 1 };
  s0 -> s2 [65, 65] { R3868 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R3868 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R3868 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R3868 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3868 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R3868 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R3868 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535] { R3868 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3870 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R3869 += 1, R3870 += 1 };
  s0 -> s2 [65, 65] { R3870 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [65, 65] { R3870 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R3870 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 64] { R3870 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3870 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [65, 65] { R3870 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [66, 65535] { R3870 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R3870 += 1, R105 += 1, R106 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3872 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R3871 += 1, R3872 += 1 };
  s0 -> s2 [65, 65] { R3872 += 1, R111 += 1, R112 += 1 };
  s0 -> s3 [65, 65] { R3872 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [66, 65535] { R3872 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 64] { R3872 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3872 += 1, R111 += 1, R112 += 1 };
  s1 -> s3 [65, 65] { R3872 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [66, 65535] { R3872 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3872 += 1, R111 += 1, R112 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3874 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R3873 += 1, R3874 += 1 };
  s0 -> s2 [65, 65] { R3874 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R3874 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R3874 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R3874 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3874 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R3874 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R3874 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3874 += 1, R115 += 1, R116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3876 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R3875 += 1, R3876 += 1 };
  s0 -> s2 [65, 65] { R3876 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R3876 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R3876 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R3876 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3876 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R3876 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R3876 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3876 += 1, R121 += 1, R122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3878 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R3877 += 1, R3878 += 1 };
  s0 -> s2 [65, 65] { R3878 += 1, R127 += 1, R128 += 1 };
  s0 -> s3 [65, 65] { R3878 += 1, R127 += 1, R128 += 1 };
  s0 -> s1 [66, 65535] { R3878 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 64] { R3878 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3878 += 1, R127 += 1, R128 += 1 };
  s1 -> s3 [65, 65] { R3878 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [66, 65535] { R3878 += 1, R127 += 1, R128 += 1 };
  s2 -> s2 [0, 65535] { R3878 += 1, R127 += 1, R128 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3880 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R3879 += 1, R3880 += 1 };
  s0 -> s2 [65, 65] { R3880 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R3880 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R3880 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R3880 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3880 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R3880 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R3880 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3880 += 1, R131 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3882 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R3881 += 1, R3882 += 1 };
  s0 -> s2 [65, 65] { R3882 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [65, 65] { R3882 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [66, 65535] { R3882 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R3882 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3882 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [65, 65] { R3882 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [66, 65535] { R3882 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3882 += 1, R137 += 1, R138 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3884 += 1 };
  s0 -> s0 [0, 65535] { R3883 += 1, R3884 += 1 };
  s0 -> s2 [65, 65] { R3884 += 1 };
  s0 -> s3 [65, 65] { R3884 += 1 };
  s0 -> s1 [66, 65535] { R3884 += 1 };
  s1 -> s1 [0, 64] { R3884 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3884 += 1 };
  s1 -> s3 [65, 65] { R3884 += 1 };
  s1 -> s1 [66, 65535] { R3884 += 1 };
  s2 -> s2 [0, 65535] { R3884 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3886 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R3885 += 1, R3886 += 1 };
  s0 -> s2 [65, 65] { R3886 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [65, 65] { R3886 += 1, R143 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R3886 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R3886 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3886 += 1, R143 += 1, R144 += 1 };
  s1 -> s3 [65, 65] { R3886 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R3886 += 1, R143 += 1, R144 += 1 };
  s2 -> s2 [0, 65535] { R3886 += 1, R143 += 1, R144 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3888 += 1 };
  s0 -> s0 [0, 65535] { R3887 += 1, R3888 += 1 };
  s0 -> s2 [65, 65] { R3888 += 1 };
  s0 -> s3 [65, 65] { R3888 += 1 };
  s0 -> s1 [66, 65535] { R3888 += 1 };
  s1 -> s1 [0, 64] { R3888 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3888 += 1 };
  s1 -> s3 [65, 65] { R3888 += 1 };
  s1 -> s1 [66, 65535] { R3888 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3888 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R3890 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R3889 += 1, R3890 += 1 };
  s0 -> s2 [65, 65] { R3890 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [65, 65] { R3890 += 1, R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R3890 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 64] { R3890 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3890 += 1, R149 += 1, R150 += 1 };
  s1 -> s3 [65, 65] { R3890 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [66, 65535] { R3890 += 1, R149 += 1, R150 += 1 };
  s2 -> s2 [0, 65535] { R3890 += 1, R149 += 1, R150 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3892 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R3891 += 1, R3892 += 1 };
  s0 -> s2 [65, 65] { R3892 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [65, 65] { R3892 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [66, 65535] { R3892 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 64] { R3892 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3892 += 1, R155 += 1, R156 += 1 };
  s1 -> s3 [65, 65] { R3892 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [66, 65535] { R3892 += 1, R155 += 1, R156 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3892 += 1, R155 += 1, R156 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R3894 += 1 };
  s0 -> s0 [0, 65535] { R3893 += 1, R3894 += 1 };
  s0 -> s2 [65, 65] { R3894 += 1 };
  s0 -> s3 [65, 65] { R3894 += 1 };
  s0 -> s1 [66, 65535] { R3894 += 1 };
  s1 -> s1 [0, 64] { R3894 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3894 += 1 };
  s1 -> s3 [65, 65] { R3894 += 1 };
  s1 -> s1 [66, 65535] { R3894 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3894 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3896 += 1, R161 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R3895 += 1, R3896 += 1 };
  s0 -> s2 [65, 65] { R3896 += 1, R161 += 1, R162 += 1 };
  s0 -> s3 [65, 65] { R3896 += 1, R161 += 1, R162 += 1 };
  s0 -> s1 [66, 65535] { R3896 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [0, 64] { R3896 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R3896 += 1, R161 += 1, R162 += 1 };
  s1 -> s3 [65, 65] { R3896 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [66, 65535] { R3896 += 1, R161 += 1, R162 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3896 += 1, R161 += 1, R162 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 43] { R3898 += 1 };
  s0 -> s0 [0, 65535] { R3897 += 1, R3898 += 1 };
  s0 -> s1 [45, 45] { R3898 += 1 };
  s0 -> s2 [46, 46] { R3898 += 1 };
  s0 -> s1 [48, 62] { R3898 += 1 };
  s0 -> s3 [65, 65] { R3898 += 1 };
  s0 -> s1 [66, 65535] { R3898 += 1 };
  s1 -> s1 [0, 43] { R3898 += 1 };
  s1 -> s1 [45, 45] { R3898 += 1 };
  s1 -> s2 [46, 46] { R3898 += 1 };
  s1 -> s1 [48, 62] { R3898 += 1 };
  s1 -> s3 [65, 65] { R3898 += 1 };
  s1 -> s1 [66, 65535] { R3898 += 1 };
  s2 -> s1 [0, 43] { R3898 += 1 };
  s2 -> s1 [45, 45] { R3898 += 1 };
  s2 -> s2 [46, 46] { R3898 += 1 };
  s2 -> s1 [48, 62] { R3898 += 1 };
  s2 -> s3 [65, 65] { R3898 += 1 };
  s2 -> s1 [66, 114] { R3898 += 1 };
  s2 -> s8 [115, 115] { R3898 += 1 };
  s2 -> s1 [116, 65535] { R3898 += 1 };
  s3 -> s3 [0, 43] { R3898 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3898 += 1 };
  s3 -> s4 [46, 46] { R3898 += 1 };
  s3 -> s3 [48, 62] { R3898 += 1 };
  s3 -> s3 [65, 65535] { R3898 += 1 };
  s4 -> s3 [0, 43] { R3898 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3898 += 1 };
  s4 -> s4 [46, 46] { R3898 += 1 };
  s4 -> s3 [48, 62] { R3898 += 1 };
  s4 -> s3 [65, 114] { R3898 += 1 };
  s4 -> s5 [115, 115] { R3898 += 1 };
  s4 -> s3 [116, 65535] { R3898 += 1 };
  s5 -> s3 [0, 43] { R3898 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3898 += 1 };
  s5 -> s4 [46, 46] { R3898 += 1 };
  s5 -> s3 [48, 62] { R3898 += 1 };
  s5 -> s3 [65, 110] { R3898 += 1 };
  s5 -> s6 [111, 111] { R3898 += 1 };
  s5 -> s3 [112, 65535] { R3898 += 1 };
  s6 -> s3 [0, 43] { R3898 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3898 += 1 };
  s6 -> s4 [46, 46] { R3898 += 1 };
  s6 -> s3 [48, 62] { R3898 += 1 };
  s6 -> s3 [65, 98] { R3898 += 1 };
  s6 -> s7 [99, 99] { R3898 += 1 };
  s6 -> s3 [100, 65535] { R3898 += 1 };
  s7 -> s3 [0, 43] { R3898 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3898 += 1 };
  s7 -> s4 [46, 46] { R3898 += 1 };
  s7 -> s3 [48, 62] { R3898 += 1 };
  s7 -> s3 [65, 106] { R3898 += 1 };
  s7 -> s3 [108, 65535] { R3898 += 1 };
  s8 -> s1 [0, 43] { R3898 += 1 };
  s8 -> s1 [45, 45] { R3898 += 1 };
  s8 -> s2 [46, 46] { R3898 += 1 };
  s8 -> s1 [48, 62] { R3898 += 1 };
  s8 -> s3 [65, 65] { R3898 += 1 };
  s8 -> s1 [66, 110] { R3898 += 1 };
  s8 -> s9 [111, 111] { R3898 += 1 };
  s8 -> s1 [112, 65535] { R3898 += 1 };
  s9 -> s1 [0, 43] { R3898 += 1 };
  s9 -> s1 [45, 45] { R3898 += 1 };
  s9 -> s2 [46, 46] { R3898 += 1 };
  s9 -> s1 [48, 62] { R3898 += 1 };
  s9 -> s3 [65, 65] { R3898 += 1 };
  s9 -> s1 [66, 98] { R3898 += 1 };
  s9 -> s10 [99, 99] { R3898 += 1 };
  s9 -> s1 [100, 65535] { R3898 += 1 };
  s10 -> s1 [0, 43] { R3898 += 1 };
  s10 -> s1 [45, 45] { R3898 += 1 };
  s10 -> s2 [46, 46] { R3898 += 1 };
  s10 -> s1 [48, 62] { R3898 += 1 };
  s10 -> s3 [65, 65] { R3898 += 1 };
  s10 -> s1 [66, 106] { R3898 += 1 };
  s10 -> s1 [108, 65535] { R3898 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_46 {
  init s0;
  s0 -> s0 [0, 65535] { R3899 += 1, R3900 += 1 };
  s0 -> s1 [0, 65535] { R3900 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R3900 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 57] { R3902 += 1 };
  s0 -> s2 [0, 65535] { R3902 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R3901 += 1, R3902 += 1 };
  s0 -> s3 [58, 58] { R3902 += 1 };
  s0 -> s1 [59, 65535] { R3902 += 1 };
  s1 -> s1 [0, 57] { R3902 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3902 += 1 };
  s1 -> s1 [59, 65535] { R3902 += 1 };
  s2 -> s1 [0, 57] { R3902 += 1 };
  s2 -> s2 [0, 65535] { R3902 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3902 += 1 };
  s2 -> s1 [59, 65535] { R3902 += 1 };
  s3 -> s3 [0, 65535] { R3902 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3904 += 1 };
  s0 -> s2 [0, 65535] { R3904 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R3903 += 1, R3904 += 1 };
  s0 -> s3 [65, 65] { R3904 += 1 };
  s0 -> s1 [66, 65535] { R3904 += 1 };
  s1 -> s1 [0, 64] { R3904 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3904 += 1 };
  s1 -> s1 [66, 65535] { R3904 += 1 };
  s2 -> s1 [0, 64] { R3904 += 1 };
  s2 -> s2 [0, 65535] { R3904 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3904 += 1 };
  s2 -> s1 [66, 65535] { R3904 += 1 };
  s3 -> s3 [0, 65535] { R3904 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 90] { R3906 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R3906 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R3905 += 1, R3906 += 1 };
  s0 -> s3 [91, 91] { R3906 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R3906 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R3906 += 1 };
  s1 -> s1 [0, 65535] { R3906 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3906 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R3906 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3906 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R3906 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R3906 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3906 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s0 [0, 65535] { R3907 += 1, R3908 += 1 };
  s0 -> s1 [0, 65535] { R3908 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R3908 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3908 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R3908 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R3908 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3908 += 1, R42 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R3908 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3910 += 1, R3768 += 1 };
  s0 -> s2 [0, 65535] { R3910 += 1, R3767 += 1, R3768 += 1 };
  s0 -> s0 [0, 65535] { R3909 += 1, R3910 += 1 };
  s0 -> s1 [66, 65535] { R3910 += 1, R3768 += 1 };
  s1 -> s1 [0, 64] { R3910 += 1, R3768 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3910 += 1 };
  s1 -> s1 [66, 65535] { R3910 += 1, R3768 += 1 };
  s2 -> s1 [0, 64] { R3910 += 1, R3768 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3910 += 1, R3767 += 1, R3768 += 1 };
  s2 -> s1 [66, 65535] { R3910 += 1, R3768 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R3912 += 1, R3770 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R3911 += 1, R3912 += 1 };
  s0 -> s2 [0, 65535] { R3912 += 1, R3769 += 1, R3770 += 1 };
  s1 -> s4 [0, 65535] { R3912 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3912 += 1, R3770 += 1, R35 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3912 += 1, R3770 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R3912 += 1, R3769 += 1, R3770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3912 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R3914 += 1, R3772 += 1 };
  s0 -> s2 [0, 65535] { R3914 += 1, R3771 += 1, R3772 += 1 };
  s0 -> s0 [0, 65535] { R3913 += 1, R3914 += 1 };
  s0 -> s1 [81, 65535] { R3914 += 1, R3772 += 1 };
  s1 -> s1 [0, 65] { R3914 += 1, R3772 += 1 };
  s1 -> s1 [0, 65535] { R3914 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R3914 += 1, R3772 += 1 };
  s2 -> s1 [0, 65] { R3914 += 1, R3772 += 1 };
  s2 -> s2 [0, 65535] { R3914 += 1, R3771 += 1, R3772 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R3914 += 1, R3772 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R3916 += 1, R3773 += 1, R3774 += 1 };
  s0 -> s0 [0, 65535] { R3915 += 1, R3916 += 1 };
  s0 -> s2 [0, 65535] { R3916 += 1, R3774 += 1, R604 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3916 += 1, R3773 += 1, R3774 += 1 };
  s1 -> s2 [0, 65535] { R3916 += 1, R3774 += 1, R604 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3916 += 1 };
  s2 -> s2 [0, 65535] { R3916 += 1, R3774 += 1, R604 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3916 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 80] { R3918 += 1, R3776 += 1 };
  s0 -> s2 [0, 65535] { R3918 += 1, R3775 += 1, R3776 += 1 };
  s0 -> s3 [0, 65535] { R3918 += 1, R3776 += 1, R606 += 1 };
  s0 -> s0 [0, 65535] { R3917 += 1, R3918 += 1 };
  s0 -> s1 [82, 65535] { R3918 += 1, R3776 += 1 };
  s1 -> s1 [0, 80] { R3918 += 1, R3776 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3918 += 1 };
  s1 -> s1 [82, 65535] { R3918 += 1, R3776 += 1 };
  s2 -> s1 [0, 80] { R3918 += 1, R3776 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3918 += 1, R3775 += 1, R3776 += 1 };
  s2 -> s3 [0, 65535] { R3918 += 1, R3776 += 1, R606 += 1 };
  s2 -> s1 [82, 65535] { R3918 += 1, R3776 += 1 };
  s3 -> s1 [0, 80] { R3918 += 1, R3776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3918 += 1 };
  s3 -> s3 [0, 65535] { R3918 += 1, R3776 += 1, R606 += 1 };
  s3 -> s1 [82, 65535] { R3918 += 1, R3776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3918 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 80] { R3920 += 1, R3778 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R3920 += 1, R3777 += 1, R3778 += 1 };
  s0 -> s3 [0, 65535] { R3920 += 1, R3778 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R3919 += 1, R3920 += 1 };
  s0 -> s1 [82, 65535] { R3920 += 1, R3778 += 1, R610 += 1 };
  s1 -> s1 [0, 80] { R3920 += 1, R3778 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R3920 += 1, R3778 += 1 };
  s1 -> s4 [0, 65535] { R3920 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R3920 += 1, R3778 += 1, R610 += 1 };
  s2 -> s1 [0, 80] { R3920 += 1, R3778 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R3920 += 1, R3777 += 1, R3778 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3920 += 1, R3778 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [82, 65535] { R3920 += 1, R3778 += 1, R610 += 1 };
  s3 -> s1 [0, 80] { R3920 += 1, R3778 += 1, R610 += 1 };
  s3 -> s4 [0, 65535] { R3920 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3920 += 1, R3778 += 1, R609 += 1, R610 += 1 };
  s3 -> s1 [82, 65535] { R3920 += 1, R3778 += 1, R610 += 1 };
  s4 -> s4 [0, 65535] { R3920 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s0 [0, 65535] { R3921 += 1, R3922 += 1 };
  s0 -> s1 [0, 65535] { R3922 += 1, R3780 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R3922 += 1, R3779 += 1, R3780 += 1 };
  s0 -> s3 [0, 65535] { R3922 += 1, R3780 += 1, R614 += 1, R615 += 1 };
  s1 -> s6 [0, 65535] { R3922 += 1, R3780 += 1 };
  s1 -> s1 [0, 65535] { R3922 += 1, R3780 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [0, 65535] { R3922 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3922 += 1, R3780 += 1, R615 += 1, R616 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3922 += 1, R3779 += 1, R3780 += 1 };
  s2 -> s3 [0, 65535] { R3922 += 1, R3780 += 1, R614 += 1, R615 += 1 };
  s3 -> s1 [0, 65535] { R3922 += 1, R3780 += 1, R615 += 1, R616 += 1 };
  s3 -> s4 [0, 65535] { R3922 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3922 += 1, R3780 += 1, R614 += 1, R615 += 1 };
  s4 -> s4 [0, 65535] { R3922 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3922 += 1, R3780 += 1 };
  s6 -> s4 [0, 65535] { R3922 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s0 -> s2 [0, 65535] { R3924 += 1, R3781 += 1, R3782 += 1 };
  s0 -> s0 [0, 65535] { R3923 += 1, R3924 += 1 };
  s0 -> s3 [0, 65535] { R3924 += 1, R3782 += 1, R619 += 1, R620 += 1 };
  s0 -> s1 [91, 107] { R3924 += 1, R3782 += 1, R620 += 1 };
  s0 -> s4 [108, 108] { R3924 += 1, R3782 += 1, R620 += 1 };
  s0 -> s1 [109, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s1 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s1 -> s5 [0, 65535] { R3924 += 1 };
  s1 -> s1 [0, 65535] { R3924 += 1, R3782 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s2 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R3924 += 1, R3781 += 1, R3782 += 1 };
  s2 -> s3 [0, 65535] { R3924 += 1, R3782 += 1, R619 += 1, R620 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R3924 += 1, R3782 += 1, R620 += 1 };
  s2 -> s4 [108, 108] { R3924 += 1, R3782 += 1, R620 += 1 };
  s2 -> s1 [109, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s3 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s3 -> s5 [0, 65535] { R3924 += 1 };
  s3 -> s3 [0, 65535] { R3924 += 1, R3782 += 1, R619 += 1, R620 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R3924 += 1, R3782 += 1, R620 += 1 };
  s3 -> s4 [108, 108] { R3924 += 1, R3782 += 1, R620 += 1 };
  s3 -> s1 [109, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s4 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s4 -> s5 [0, 65535] { R3924 += 1 };
  s4 -> s4 [0, 65535] { R3924 += 1, R3782 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R3924 += 1, R3782 += 1, R620 += 1 };
  s4 -> s7 [111, 111] { R3924 += 1, R3782 += 1, R620 += 1 };
  s4 -> s1 [112, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s5 -> s5 [0, 65535] { R3924 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s7 -> s5 [0, 65535] { R3924 += 1 };
  s7 -> s7 [0, 65535] { R3924 += 1, R3782 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3924 += 1, R3782 += 1, R620 += 1 };
  s7 -> s8 [99, 99] { R3924 += 1, R3782 += 1, R620 += 1 };
  s7 -> s1 [100, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s8 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s8 -> s5 [0, 65535] { R3924 += 1 };
  s8 -> s8 [0, 65535] { R3924 += 1, R3782 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R3924 += 1, R3782 += 1, R620 += 1 };
  s8 -> s9 [97, 97] { R3924 += 1, R3782 += 1, R620 += 1 };
  s8 -> s1 [98, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s9 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s9 -> s5 [0, 65535] { R3924 += 1 };
  s9 -> s9 [0, 65535] { R3924 += 1, R3782 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R3924 += 1, R3782 += 1, R620 += 1 };
  s9 -> s10 [108, 108] { R3924 += 1, R3782 += 1, R620 += 1 };
  s9 -> s1 [109, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s10 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s10 -> s10 [0, 65535] { R3924 += 1, R3782 += 1 };
  s10 -> s5 [0, 65535] { R3924 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R3924 += 1, R3782 += 1, R620 += 1 };
  s10 -> s11 [104, 104] { R3924 += 1, R3782 += 1, R620 += 1 };
  s10 -> s1 [105, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s11 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s11 -> s5 [0, 65535] { R3924 += 1 };
  s11 -> s11 [0, 65535] { R3924 += 1, R3782 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R3924 += 1, R3782 += 1, R620 += 1 };
  s11 -> s12 [111, 111] { R3924 += 1, R3782 += 1, R620 += 1 };
  s11 -> s1 [112, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s12 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s12 -> s5 [0, 65535] { R3924 += 1 };
  s12 -> s12 [0, 65535] { R3924 += 1, R3782 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R3924 += 1, R3782 += 1, R620 += 1 };
  s12 -> s13 [115, 115] { R3924 += 1, R3782 += 1, R620 += 1 };
  s12 -> s1 [116, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s13 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s13 -> s13 [0, 65535] { R3924 += 1, R3782 += 1 };
  s13 -> s5 [0, 65535] { R3924 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R3924 += 1, R3782 += 1, R620 += 1 };
  s13 -> s14 [116, 116] { R3924 += 1, R3782 += 1, R620 += 1 };
  s13 -> s1 [117, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  s14 -> s1 [0, 81] { R3924 += 1, R3782 += 1, R620 += 1 };
  s14 -> s1 [91, 65535] { R3924 += 1, R3782 += 1, R620 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s1 [0, 65535] { R3926 += 1, R3784 += 1 };
  s0 -> s2 [0, 65535] { R3926 += 1, R3784 += 1, R3559 += 1, R3560 += 1 };
  s0 -> s3 [0, 65535] { R3926 += 1, R3783 += 1, R3784 += 1 };
  s0 -> s0 [0, 65535] { R3925 += 1, R3926 += 1 };
  s1 -> s1 [0, 65535] { R3926 += 1, R3784 += 1 };
  s1 -> s5 [0, 65535] { R3926 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3926 += 1, R3784 += 1 };
  s2 -> s5 [0, 65535] { R3926 += 1 };
  s2 -> s2 [0, 65535] { R3926 += 1, R3784 += 1, R3559 += 1, R3560 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3926 += 1, R3784 += 1 };
  s3 -> s2 [0, 65535] { R3926 += 1, R3784 += 1, R3559 += 1, R3560 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3926 += 1, R3783 += 1, R3784 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3926 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R3928 += 1, R3786 += 1, R3565 += 1, R3566 += 1 };
  s0 -> s0 [0, 65535] { R3927 += 1, R3928 += 1 };
  s0 -> s2 [0, 65535] { R3928 += 1, R3786 += 1, R3564 += 1, R3565 += 1 };
  s0 -> s3 [0, 65535] { R3928 += 1, R3785 += 1, R3786 += 1 };
  s1 -> s6 [0, 65535] { R3928 += 1, R3786 += 1 };
  s1 -> s1 [0, 65535] { R3928 += 1, R3786 += 1, R3565 += 1, R3566 += 1 };
  s1 -> s5 [0, 65535] { R3928 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3928 += 1, R3786 += 1, R3565 += 1, R3566 += 1 };
  s2 -> s2 [0, 65535] { R3928 += 1, R3786 += 1, R3564 += 1, R3565 += 1 };
  s2 -> s5 [0, 65535] { R3928 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3928 += 1, R3786 += 1, R3565 += 1, R3566 += 1 };
  s3 -> s2 [0, 65535] { R3928 += 1, R3786 += 1, R3564 += 1, R3565 += 1 };
  s3 -> s3 [0, 65535] { R3928 += 1, R3785 += 1, R3786 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3928 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3928 += 1, R3786 += 1 };
  s6 -> s5 [0, 65535] { R3928 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 65535] { R3930 += 1, R3788 += 1 };
  s0 -> s2 [0, 65535] { R3930 += 1, R3787 += 1, R3788 += 1 };
  s0 -> s0 [0, 65535] { R3929 += 1, R3930 += 1 };
  s1 -> s1 [0, 65535] { R3930 += 1, R3788 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3930 += 1 };
  s2 -> s1 [0, 65535] { R3930 += 1, R3788 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3930 += 1, R3787 += 1, R3788 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3930 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 80] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s0 -> s1 [0, 65535] { R3932 += 1, R3790 += 1 };
  s0 -> s0 [0, 65535] { R3931 += 1, R3932 += 1 };
  s0 -> s2 [0, 65535] { R3932 += 1, R3789 += 1, R3790 += 1 };
  s0 -> s3 [81, 81] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s0 -> s4 [81, 81] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s0 -> s1 [82, 65535] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s1 -> s1 [0, 80] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s1 -> s1 [0, 65535] { R3932 += 1, R3790 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3932 += 1 };
  s1 -> s3 [81, 81] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s1 -> s4 [81, 81] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s1 -> s1 [82, 65535] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s2 -> s1 [0, 80] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s2 -> s1 [0, 65535] { R3932 += 1, R3790 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3932 += 1, R3789 += 1, R3790 += 1 };
  s2 -> s3 [81, 81] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s2 -> s4 [81, 81] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s2 -> s1 [82, 65535] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s3 -> s3 [0, 65535] { R3932 += 1, R3790 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3932 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3932 += 1 };
  s4 -> s7 [0, 65535] { R3932 += 1, R3790 += 1 };
  s4 -> s4 [0, 65535] { R3932 += 1, R3790 += 1, R3765 += 1, R3766 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3932 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3932 += 1 };
  s7 -> s7 [0, 65535] { R3932 += 1, R3790 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R3934 += 1, R3833 += 1, R3834 += 1 };
  s0 -> s0 [0, 65535] { R3933 += 1, R3934 += 1 };
  s0 -> s2 [0, 65535] { R3934 += 1, R3834 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R3934 += 1, R3833 += 1, R3834 += 1 };
  s1 -> s2 [0, 65535] { R3934 += 1, R3834 += 1, R36 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3934 += 1, R3834 += 1, R36 += 1 };
  s2 -> s3 [0, 65535] { R3934 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3934 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R3936 += 1, R3836 += 1 };
  s0 -> s0 [0, 65535] { R3935 += 1, R3936 += 1 };
  s0 -> s2 [0, 65535] { R3936 += 1, R3835 += 1, R3836 += 1 };
  s0 -> s3 [65, 65] { R3936 += 1, R3836 += 1 };
  s0 -> s4 [65, 65] { R3936 += 1, R3836 += 1 };
  s0 -> s5 [81, 81] { R3936 += 1, R3836 += 1 };
  s0 -> s1 [82, 65535] { R3936 += 1, R3836 += 1 };
  s1 -> s1 [0, 64] { R3936 += 1, R3836 += 1 };
  s1 -> s3 [65, 65] { R3936 += 1, R3836 += 1 };
  s1 -> s4 [65, 65] { R3936 += 1, R3836 += 1 };
  s1 -> s5 [81, 81] { R3936 += 1, R3836 += 1 };
  s1 -> s1 [82, 65535] { R3936 += 1, R3836 += 1 };
  s2 -> s1 [0, 64] { R3936 += 1, R3836 += 1 };
  s2 -> s2 [0, 65535] { R3936 += 1, R3835 += 1, R3836 += 1 };
  s2 -> s3 [65, 65] { R3936 += 1, R3836 += 1 };
  s2 -> s4 [65, 65] { R3936 += 1, R3836 += 1 };
  s2 -> s5 [81, 81] { R3936 += 1, R3836 += 1 };
  s2 -> s1 [82, 65535] { R3936 += 1, R3836 += 1 };
  s4 -> s4 [0, 65] { R3936 += 1, R3836 += 1 };
  s4 -> s7 [81, 81] { R3936 += 1, R3836 += 1 };
  s4 -> s4 [82, 65535] { R3936 += 1, R3836 += 1 };
  s5 -> s5 [0, 64] { R3936 += 1, R3836 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3936 += 1 };
  s5 -> s7 [65, 65] { R3936 += 1, R3836 += 1 };
  s5 -> s8 [65, 65] { R3936 += 1, R3836 += 1 };
  s5 -> s5 [81, 65535] { R3936 += 1, R3836 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3936 += 1, R3836 += 1 };
  s7 -> s7 [0, 65535] { R3936 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R3936 += 1, R3836 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3936 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R3938 += 1, R3838 += 1, R603 += 1 };
  s0 -> s0 [0, 65535] { R3937 += 1, R3938 += 1 };
  s0 -> s2 [0, 65535] { R3938 += 1, R3837 += 1, R3838 += 1 };
  s0 -> s3 [65, 65] { R3938 += 1, R3838 += 1, R603 += 1 };
  s0 -> s4 [65, 65] { R3938 += 1, R3838 += 1, R603 += 1 };
  s0 -> s1 [66, 65535] { R3938 += 1, R3838 += 1, R603 += 1 };
  s1 -> s1 [0, 64] { R3938 += 1, R3838 += 1, R603 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3938 += 1 };
  s1 -> s3 [65, 65] { R3938 += 1, R3838 += 1, R603 += 1 };
  s1 -> s4 [65, 65] { R3938 += 1, R3838 += 1, R603 += 1 };
  s1 -> s1 [66, 65535] { R3938 += 1, R3838 += 1, R603 += 1 };
  s2 -> s1 [0, 64] { R3938 += 1, R3838 += 1, R603 += 1 };
  s2 -> s2 [0, 65535] { R3938 += 1, R3837 += 1, R3838 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3938 += 1, R3838 += 1, R603 += 1 };
  s2 -> s4 [65, 65] { R3938 += 1, R3838 += 1, R603 += 1 };
  s2 -> s1 [66, 65535] { R3938 += 1, R3838 += 1, R603 += 1 };
  s3 -> s3 [0, 65535] { R3938 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3938 += 1 };
  s4 -> s4 [0, 65535] { R3938 += 1, R3838 += 1, R603 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3938 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R3940 += 1, R3840 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R3940 += 1, R3839 += 1, R3840 += 1 };
  s0 -> s0 [0, 65535] { R3939 += 1, R3940 += 1 };
  s0 -> s3 [65, 65] { R3940 += 1, R3840 += 1, R605 += 1 };
  s0 -> s4 [65, 65] { R3940 += 1, R3840 += 1, R605 += 1 };
  s0 -> s1 [66, 65535] { R3940 += 1, R3840 += 1, R605 += 1 };
  s1 -> s1 [0, 64] { R3940 += 1, R3840 += 1, R605 += 1 };
  s1 -> s1 [0, 65535] { R3940 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3940 += 1, R3840 += 1, R605 += 1 };
  s1 -> s4 [65, 65] { R3940 += 1, R3840 += 1, R605 += 1 };
  s1 -> s1 [66, 65535] { R3940 += 1, R3840 += 1, R605 += 1 };
  s2 -> s1 [0, 64] { R3940 += 1, R3840 += 1, R605 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3940 += 1, R3839 += 1, R3840 += 1 };
  s2 -> s3 [65, 65] { R3940 += 1, R3840 += 1, R605 += 1 };
  s2 -> s4 [65, 65] { R3940 += 1, R3840 += 1, R605 += 1 };
  s2 -> s1 [66, 65535] { R3940 += 1, R3840 += 1, R605 += 1 };
  s3 -> s6 [0, 65535] { R3940 += 1 };
  s3 -> s3 [0, 65535] { R3940 += 1, R3840 += 1, R605 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3940 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3940 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R3942 += 1, R3841 += 1, R3842 += 1 };
  s0 -> s0 [0, 65535] { R3941 += 1, R3942 += 1 };
  s0 -> s3 [65, 65] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s0 -> s4 [65, 65] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s0 -> s1 [66, 65535] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 64] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3942 += 1 };
  s1 -> s3 [65, 65] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s1 -> s4 [65, 65] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [66, 65535] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [0, 64] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R3942 += 1, R3841 += 1, R3842 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s2 -> s4 [65, 65] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [66, 65535] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s3 -> s3 [0, 65535] { R3942 += 1, R3842 += 1, R607 += 1, R608 += 1 };
  s3 -> s6 [0, 65535] { R3942 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3942 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3942 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R3943 += 1, R3944 += 1 };
  s0 -> s2 [0, 65535] { R3944 += 1, R3843 += 1, R3844 += 1 };
  s0 -> s3 [65, 65] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s0 -> s4 [65, 65] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s0 -> s1 [66, 65535] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [0, 64] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [0, 65535] { R3944 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s1 -> s4 [65, 65] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [66, 65535] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [0, 64] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3944 += 1, R3843 += 1, R3844 += 1 };
  s2 -> s3 [65, 65] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s2 -> s4 [65, 65] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [66, 65535] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3944 += 1, R3844 += 1, R611 += 1, R612 += 1 };
  s3 -> s6 [0, 65535] { R3944 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3944 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3944 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s0 -> s0 [0, 65535] { R3945 += 1, R3946 += 1 };
  s0 -> s2 [0, 65535] { R3946 += 1, R3845 += 1, R3846 += 1 };
  s0 -> s3 [65, 65] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s0 -> s4 [65, 65] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s0 -> s1 [66, 65535] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [0, 64] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3946 += 1 };
  s1 -> s3 [65, 65] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s1 -> s4 [65, 65] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [66, 65535] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [0, 64] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3946 += 1, R3845 += 1, R3846 += 1 };
  s2 -> s3 [65, 65] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s2 -> s4 [65, 65] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [66, 65535] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3946 += 1 };
  s3 -> s3 [0, 65535] { R3946 += 1, R3846 += 1, R617 += 1, R618 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3946 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3946 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s2 [0, 64] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s3 [0, 65535] { R3948 += 1, R3847 += 1, R3848 += 1 };
  s0 -> s0 [0, 65535] { R3947 += 1, R3948 += 1 };
  s0 -> s4 [65, 65] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s5 [65, 65] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s6 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s7 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s1 [66, 65535] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s2 [66, 65535] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s1 [0, 64] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s1 -> s2 [0, 64] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s4 [65, 65] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s1 -> s5 [65, 65] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s1 -> s6 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s7 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s1 [66, 65535] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s1 -> s2 [66, 65535] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s2 [0, 64] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3948 += 1 };
  s2 -> s6 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s7 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s2 [66, 65535] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s1 [0, 64] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s2 [0, 64] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s3 [0, 65535] { R3948 += 1, R3847 += 1, R3848 += 1 };
  s3 -> s4 [65, 65] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s5 [65, 65] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s6 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s7 [65, 65] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s1 [66, 65535] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s2 [66, 65535] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s5 -> s5 [0, 65535] { R3948 += 1, R3848 += 1, R3555 += 1, R3556 += 1 };
  s5 -> s6 [0, 65535] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s6 -> s6 [0, 65535] { R3948 += 1, R3848 += 1, R3556 += 1, R3557 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R3948 += 1 };
  s7 -> s7 [0, 65535] { R3948 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3948 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s0 -> s2 [0, 65535] { R3950 += 1, R3849 += 1, R3850 += 1 };
  s0 -> s0 [0, 65535] { R3949 += 1, R3950 += 1 };
  s0 -> s3 [65, 65] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s0 -> s4 [65, 65] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s0 -> s1 [66, 65535] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s1 -> s1 [0, 64] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s1 -> s1 [0, 65535] { R3950 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s1 -> s4 [65, 65] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s1 -> s1 [66, 65535] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s2 -> s1 [0, 64] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s2 -> s2 [0, 65535] { R3950 += 1, R3849 += 1, R3850 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s2 -> s4 [65, 65] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s2 -> s1 [66, 65535] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s3 -> s3 [0, 65535] { R3950 += 1, R3850 += 1, R3561 += 1, R3562 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3950 += 1 };
  s4 -> s4 [0, 65535] { R3950 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3950 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R3952 += 1, R3852 += 1 };
  s0 -> s2 [0, 65535] { R3952 += 1, R3851 += 1, R3852 += 1 };
  s0 -> s0 [0, 65535] { R3951 += 1, R3952 += 1 };
  s0 -> s3 [65, 65] { R3952 += 1, R3852 += 1 };
  s0 -> s4 [65, 65] { R3952 += 1, R3852 += 1 };
  s0 -> s1 [66, 65535] { R3952 += 1, R3852 += 1 };
  s1 -> s1 [0, 64] { R3952 += 1, R3852 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3952 += 1 };
  s1 -> s3 [65, 65] { R3952 += 1, R3852 += 1 };
  s1 -> s4 [65, 65] { R3952 += 1, R3852 += 1 };
  s1 -> s1 [66, 65535] { R3952 += 1, R3852 += 1 };
  s2 -> s1 [0, 64] { R3952 += 1, R3852 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3952 += 1, R3851 += 1, R3852 += 1 };
  s2 -> s3 [65, 65] { R3952 += 1, R3852 += 1 };
  s2 -> s4 [65, 65] { R3952 += 1, R3852 += 1 };
  s2 -> s1 [66, 65535] { R3952 += 1, R3852 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3952 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3952 += 1 };
  s4 -> s4 [0, 65535] { R3952 += 1, R3852 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3952 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s0 -> s2 [0, 64] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s0 -> s0 [0, 65535] { R3953 += 1, R3954 += 1 };
  s0 -> s3 [0, 65535] { R3954 += 1, R3853 += 1, R3854 += 1 };
  s0 -> s4 [65, 65] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s0 -> s5 [65, 65] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s0 -> s6 [65, 65] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s0 -> s7 [65, 65] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s0 -> s1 [66, 80] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s0 -> s2 [66, 65535] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s0 -> s1 [82, 65535] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s1 -> s1 [0, 64] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s1 -> s1 [0, 65535] { R3954 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R3954 += 1, R3854 += 1 };
  s1 -> s7 [65, 65] { R3954 += 1, R3854 += 1 };
  s1 -> s1 [66, 80] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s1 -> s1 [66, 65535] { R3954 += 1, R3854 += 1 };
  s1 -> s1 [82, 65535] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s2 -> s1 [0, 64] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s2 -> s2 [0, 64] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s2 -> s4 [65, 65] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s2 -> s5 [65, 65] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s2 -> s6 [65, 65] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s2 -> s7 [65, 65] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s2 -> s1 [66, 80] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s2 -> s2 [66, 65535] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s2 -> s1 [82, 65535] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s3 -> s1 [0, 64] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s3 -> s2 [0, 64] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s3 -> s3 [0, 65535] { R3954 += 1, R3853 += 1, R3854 += 1 };
  s3 -> s4 [65, 65] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s3 -> s5 [65, 65] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s3 -> s6 [65, 65] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s3 -> s7 [65, 65] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s3 -> s1 [66, 80] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s3 -> s2 [66, 65535] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s3 -> s1 [82, 65535] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s4 -> s4 [0, 80] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s4 -> s4 [0, 65535] { R3954 += 1, R3854 += 1 };
  s4 -> s9 [0, 65535] { R3954 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [82, 65535] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s5 -> s4 [0, 80] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s5 -> s5 [0, 65535] { R3954 += 1, R3854 += 1, R3761 += 1, R3762 += 1 };
  s5 -> s4 [82, 65535] { R3954 += 1, R3854 += 1, R3762 += 1, R3763 += 1 };
  s7 -> s7 [0, 65535] { R3954 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3954 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P90
automaton P90_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
constraint R5 = R3790 && R6 = R3954 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R88 + R87 + -1*R104 + -1*R102 = 0 && R103 + R101 = 0 && R604 + R603 + -1*R3559 + -1*R3556 = 0 && R609 + R607 = 0 && R610 + R608 + -1*R3559 + -1*R3556 = 0 && R614 + R611 = 0 && R615 + R612 + -1*R3559 + -1*R3556 = 0 && R619 + R617 = 0 && R620 + R618 + -1*R3559 + -1*R3556 = 0 && R3558 + R3555 = 0 && R3767 = 0 && R3768 = R3790 && R3769 = 0 && R3770 = R3790 && R3771 = 0 && R3772 = R3790 && R3773 = 0 && R3774 = R3790 && R3775 = 0 && R3776 = R3790 && R3777 = 0 && R3778 = R3790 && R3779 = 0 && R3780 = R3790 && R3781 = 0 && R3782 = R3790 && R3783 = 0 && R3784 = R3790 && R3785 = 0 && R3786 = R3790 && R3787 = 0 && R3788 = R3790 && R3789 = 0 && R3791 = 0 && R3792 = R3954 && R3793 = 0 && R3794 = R3954 && R3795 = 0 && R3796 = R3954 && R3797 = 0 && R3798 = R3954 && R3799 = 0 && R3800 = R3954 && R3801 = 0 && R3802 = R3954 && R3803 = 0 && R3804 = R3954 && R3805 = 0 && R3806 = R3954 && R3807 = 0 && R3808 = R3954 && R3809 = 0 && R3810 = R3954 && R3811 = 0 && R3812 = R3954 && R3813 = 0 && R3814 = R3954 && R3815 = 0 && R3816 = R3954 && R3817 = 0 && R3818 = R3954 && R3819 = 0 && R3820 = R3954 && R3821 = 0 && R3822 = R3954 && R3823 = 0 && R3824 = R3954 && R3825 = 0 && R3826 = R3954 && R3827 = 0 && R3828 = R3954 && R3829 = 0 && R3830 = R3954 && R3831 = 0 && R3832 = R3954 && R3835 = 0 && R3836 = 0 && R3847 = 0 && R3848 = 0 && R3853 = 0 && R3854 = 0 && R3897 = 10 && R3898 = R3954 && R3899 = 10 && R3900 = R3954 && R3901 = 10 && R3902 = R3954 && R3903 = 10 && R3904 = R3954 && R3905 = 10 && R3906 = R3954 && R3907 = 10 && R3908 = R3954 && R3909 = 10 && R3910 = R3954 && R3911 = 10 && R3912 = R3954 && R3913 = 10 && R3914 = R3954 && R3915 = 10 && R3916 = R3954 && R3917 = 10 && R3918 = R3954 && R3919 = 10 && R3920 = R3954 && R3921 = 10 && R3922 = R3954 && R3923 = 10 && R3924 = R3954 && R3925 = 10 && R3926 = R3954 && R3927 = 10 && R3928 = R3954 && R3929 = 10 && R3930 = R3954 && R3931 = 10 && R3932 = R3954 && R3933 = 10 && R3934 = R3954 && R3935 = 10 && R3936 = R3954 && R3937 = 10 && R3938 = R3954 && R3939 = 10 && R3940 = R3954 && R3941 = 10 && R3942 = R3954 && R3943 = 10 && R3944 = R3954 && R3945 = 10 && R3946 = R3954 && R3947 = 10 && R3948 = R3954 && R3949 = 10 && R3950 = R3954 && R3951 = 10 && R3952 = R3954 && R3953 = 10 && R120 + R117 + R154 + R151 != 0 && R136 + R133 + R166 + R163 != 0 && R3560 + R3557 + R3766 + R3763 != 0 && R20 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && R92 + R91 < 1 && R94 + R93 < 1 && -1*R104 + -1*R102 < 1 && R606 + R605 < 1 && -1*R3559 < R3556 && 0 < R3790 && 9 < R3954 && (R100 + R97 != 0 || ((R98 + R95 != 0 || R99 + R96 + -1*R104 + -1*R102 = 0 || R104 + R102 < 1) && (R98 + R95 = 0 || R104 + R102 < 1))) && (R104 + R102 != 0 || R110 + R107 = 0 || (R108 + R105 = 0 && R109 + R106 = 0)) && (R104 + R102 != 0 || R110 + R107 = 0 || (R113 + R111 = 0 && R114 + R112 = 0)) && (R104 + R102 != 0 || R110 + R107 = 0 || (R118 + R115 = 0 && R119 + R116 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R124 + R121 = 0 && R125 + R122 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R129 + R127 = 0 && R130 + R128 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R134 + R131 = 0 && R135 + R132 = 0)) && (R108 + R105 != 0 || R104 + R102 + -1*R109 + -1*R106 = 0 || R104 + R102 < 1) && (R113 + R111 != 0 || R104 + R102 + -1*R114 + -1*R112 = 0 || R104 + R102 < 1) && (R118 + R115 != 0 || R104 + R102 + -1*R119 + -1*R116 = 0 || R104 + R102 < 1) && (R124 + R121 != 0 || R104 + R102 + -1*R125 + -1*R122 = 0 || R104 + R102 < 1) && (R129 + R127 != 0 || R104 + R102 + -1*R130 + -1*R128 = 0 || R104 + R102 < 1) && (R134 + R131 != 0 || R104 + R102 + -1*R135 + -1*R132 = 0 || R104 + R102 < 1) && (R36 = 0 || (R3833 = 0 && R3834 = 0)) && (R36 = 0 || (R3837 = 0 && R3838 = 0)) && (R36 = 0 || (R3839 = 0 && R3840 = 0)) && (R36 = 0 || (R3841 = 0 && R3842 = 0)) && (R36 = 0 || (R3843 = 0 && R3844 = 0)) && (R36 = 0 || (R3845 = 0 && R3846 = 0)) && (R36 = 0 || (R3849 = 0 && R3850 = 0)) && (R36 = 0 || (R3851 = 0 && R3852 = 0)) && (R38 = 0 || (R3855 = 0 && R3856 = 0)) && (R38 = 0 || (R3857 = 0 && R3858 = 0)) && (R38 = 0 || (R3859 = 0 && R3860 = 0)) && (R38 = 0 || (R3861 = 0 && R3862 = 0)) && (R38 = 0 || (R3863 = 0 && R3864 = 0)) && (R38 = 0 || (R3865 = 0 && R3866 = 0)) && (R38 = 0 || (R3867 = 0 && R3868 = 0)) && (R38 = 0 || (R3869 = 0 && R3870 = 0)) && (R38 = 0 || (R3871 = 0 && R3872 = 0)) && (R38 = 0 || (R3873 = 0 && R3874 = 0)) && (R38 = 0 || (R3875 = 0 && R3876 = 0)) && (R38 = 0 || (R3877 = 0 && R3878 = 0)) && (R38 = 0 || (R3879 = 0 && R3880 = 0)) && (R38 = 0 || (R3881 = 0 && R3882 = 0)) && (R38 = 0 || (R3883 = 0 && R3884 = 0)) && (R38 = 0 || (R3885 = 0 && R3886 = 0)) && (R38 = 0 || (R3887 = 0 && R3888 = 0)) && (R38 = 0 || (R3889 = 0 && R3890 = 0)) && (R38 = 0 || (R3891 = 0 && R3892 = 0)) && (R38 = 0 || (R3893 = 0 && R3894 = 0)) && (R38 = 0 || (R3895 = 0 && R3896 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 + -1*R104 + -1*R102 = 0)) && (R108 + R105 = 0 || R104 + R102 < 1) && (R113 + R111 = 0 || R104 + R102 < 1) && (R118 + R115 = 0 || R104 + R102 < 1) && (R124 + R121 = 0 || R104 + R102 < 1) && (R129 + R127 = 0 || R104 + R102 < 1) && (R134 + R131 = 0 || R104 + R102 < 1) && (R142 + R139 = 0 || (R140 + R137 = 0 && R141 + R138 = 0)) && (R148 + R145 = 0 || (R146 + R143 = 0 && R147 + R144 = 0)) && (R148 + R145 = 0 || (R152 + R149 = 0 && R153 + R150 = 0)) && (R160 + R157 = 0 || (R158 + R155 = 0 && R159 + R156 = 0)) && (R160 + R157 = 0 || (R164 + R161 = 0 && R165 + R162 = 0)) && (R3566 + R3563 = 0 || (R3564 + R3561 = 0 && R3565 + R3562 = 0)) && (R3566 + R3563 = 0 || (R3764 + R3761 = 0 && R3765 + R3762 = 0));
// End of Parikh automata intersection problem
