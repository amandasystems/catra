// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R20, R21, R24, R35, R3555, R3556, R3557, R3558, R3559, R3560, R36, R37, R38, R39, R40, R41, R42, R4537, R4538, R4539, R4540, R4541, R4542, R4931, R4932, R4933, R4934, R4935, R4936, R4937, R4938, R4939, R4940, R4941, R4942, R4943, R4944, R4945, R4946, R4947, R4948, R4949, R4950, R4951, R4952, R4953, R4954, R4955, R4956, R4957, R4958, R4959, R4960, R4961, R4962, R4963, R4964, R4965, R4966, R4967, R4968, R4969, R4970, R4971, R4972, R4973, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R5, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R5056, R5057, R5058, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R5071, R5072, R5073, R5074, R5075, R5076, R5077, R5078, R5079, R5080, R5081, R5082, R5083, R5084, R5085, R5086, R5087, R5088, R5089, R5090, R5091, R5092, R5093, R5094, R5095, R5096, R5097, R5098, R5099, R5100, R5101, R5102, R5103, R5104, R5105, R5106, R5107, R5108, R5109, R5110, R5111, R5112, R5113, R5114, R5115, R5116, R5117, R5118, R5119, R5120, R5121, R5122, R5123, R5124, R6, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R7, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P96
automaton P96_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R4961 += 1, R4962 += 1 };
  s0 -> s1 [0, 65535] { R4962 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4962 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R4963 += 1, R4964 += 1 };
  s0 -> s1 [0, 65535] { R4964 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4964 += 1, R88 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 89] { R4966 += 1 };
  s0 -> s0 [0, 65535] { R4965 += 1, R4966 += 1 };
  s0 -> s2 [0, 65535] { R4966 += 1, R90 += 1 };
  s0 -> s1 [91, 65535] { R4966 += 1 };
  s1 -> s1 [0, 89] { R4966 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R4966 += 1 };
  s2 -> s1 [0, 89] { R4966 += 1 };
  s2 -> s2 [0, 65535] { R4966 += 1, R90 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R4966 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 88] { R4968 += 1 };
  s0 -> s0 [0, 65535] { R4967 += 1, R4968 += 1 };
  s0 -> s2 [0, 65535] { R4968 += 1, R92 += 1 };
  s0 -> s1 [90, 65535] { R4968 += 1 };
  s1 -> s1 [0, 88] { R4968 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R4968 += 1 };
  s2 -> s1 [0, 88] { R4968 += 1 };
  s2 -> s2 [0, 65535] { R4968 += 1, R92 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R4968 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 72] { R4970 += 1 };
  s0 -> s2 [0, 65535] { R4970 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R4969 += 1, R4970 += 1 };
  s0 -> s1 [74, 65535] { R4970 += 1 };
  s1 -> s1 [0, 72] { R4970 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R4970 += 1 };
  s2 -> s1 [0, 72] { R4970 += 1 };
  s2 -> s2 [0, 65535] { R4970 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R4970 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R4972 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [0, 65535] { R4972 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R4971 += 1, R4972 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4972 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [0, 65535] { R4972 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4972 += 1 };
  s2 -> s2 [0, 65535] { R4972 += 1, R99 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4972 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R4973 += 1, R4974 += 1 };
  s0 -> s1 [0, 65535] { R4974 += 1, R103 += 1, R104 += 1 };
  s0 -> s2 [108, 108] { R4974 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R4974 += 1, R103 += 1, R104 += 1 };
  s1 -> s2 [108, 108] { R4974 += 1, R104 += 1 };
  s2 -> s3 [111, 111] { R4974 += 1, R104 += 1 };
  s3 -> s4 [99, 99] { R4974 += 1, R104 += 1 };
  s4 -> s5 [97, 97] { R4974 += 1, R104 += 1 };
  s5 -> s6 [108, 108] { R4974 += 1, R104 += 1 };
  s6 -> s7 [104, 104] { R4974 += 1, R104 += 1 };
  s7 -> s8 [111, 111] { R4974 += 1, R104 += 1 };
  s8 -> s9 [115, 115] { R4974 += 1, R104 += 1 };
  s9 -> s10 [116, 116] { R4974 += 1, R104 += 1 };
  s10 -> s10 [0, 65535] { R4974 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R4975 += 1, R4976 += 1 };
  s0 -> s1 [0, 65535] { R4976 += 1, R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R4976 += 1, R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535] { R4976 += 1, R108 += 1, R109 += 1 };
  s1 -> s2 [0, 65535] { R4976 += 1, R109 += 1, R110 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4976 += 1, R109 += 1, R110 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4976 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4976 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 107] { R4978 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R4978 += 1, R113 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R4977 += 1, R4978 += 1 };
  s0 -> s3 [108, 108] { R4978 += 1, R114 += 1 };
  s0 -> s1 [109, 65535] { R4978 += 1, R114 += 1 };
  s1 -> s1 [0, 65535] { R4978 += 1, R114 += 1 };
  s1 -> s13 [0, 65535] { R4978 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R4978 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R4978 += 1, R113 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R4978 += 1, R114 += 1 };
  s2 -> s1 [109, 65535] { R4978 += 1, R114 += 1 };
  s3 -> s1 [0, 110] { R4978 += 1, R114 += 1 };
  s3 -> s3 [0, 65535] { R4978 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R4978 += 1, R114 += 1 };
  s3 -> s1 [112, 65535] { R4978 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4978 += 1, R114 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4978 += 1 };
  s5 -> s6 [99, 99] { R4978 += 1, R114 += 1 };
  s5 -> s1 [100, 65535] { R4978 += 1, R114 += 1 };
  s6 -> s1 [0, 96] { R4978 += 1, R114 += 1 };
  s6 -> s6 [0, 65535] { R4978 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R4978 += 1, R114 += 1 };
  s6 -> s1 [98, 65535] { R4978 += 1, R114 += 1 };
  s7 -> s1 [0, 107] { R4978 += 1, R114 += 1 };
  s7 -> s7 [0, 65535] { R4978 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R4978 += 1, R114 += 1 };
  s7 -> s1 [109, 65535] { R4978 += 1, R114 += 1 };
  s8 -> s1 [0, 103] { R4978 += 1, R114 += 1 };
  s8 -> s8 [0, 65535] { R4978 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R4978 += 1, R114 += 1 };
  s8 -> s1 [105, 65535] { R4978 += 1, R114 += 1 };
  s9 -> s1 [0, 110] { R4978 += 1, R114 += 1 };
  s9 -> s9 [0, 65535] { R4978 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R4978 += 1, R114 += 1 };
  s9 -> s1 [112, 65535] { R4978 += 1, R114 += 1 };
  s10 -> s1 [0, 114] { R4978 += 1, R114 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4978 += 1 };
  s10 -> s11 [115, 115] { R4978 += 1, R114 += 1 };
  s10 -> s1 [116, 65535] { R4978 += 1, R114 += 1 };
  s11 -> s1 [0, 115] { R4978 += 1, R114 += 1 };
  s11 -> s11 [0, 65535] { R4978 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R4978 += 1, R114 += 1 };
  s11 -> s1 [117, 65535] { R4978 += 1, R114 += 1 };
  s12 -> s1 [0, 65535] { R4978 += 1, R114 += 1 };
  s13 -> s13 [0, 65535] { R4978 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R4979 += 1, R4980 += 1 };
  s0 -> s1 [0, 65535] { R4980 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R4980 += 1, R118 += 1, R119 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4980 += 1, R119 += 1, R120 += 1 };
  s1 -> s4 [0, 65535] { R4980 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4980 += 1, R119 += 1, R120 += 1 };
  s2 -> s2 [0, 65535] { R4980 += 1, R118 += 1, R119 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4980 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R4982 += 1, R125 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R4982 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R4981 += 1, R4982 += 1 };
  s1 -> s4 [0, 65535] { R4982 += 1 };
  s1 -> s1 [0, 65535] { R4982 += 1, R125 += 1, R126 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4982 += 1, R125 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R4982 += 1, R124 += 1, R125 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4982 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R4984 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R4983 += 1, R4984 += 1 };
  s0 -> s2 [0, 65535] { R4984 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [108, 108] { R4984 += 1, R130 += 1 };
  s0 -> s1 [109, 65535] { R4984 += 1, R130 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R4984 += 1 };
  s1 -> s1 [0, 65535] { R4984 += 1, R130 += 1 };
  s2 -> s1 [0, 107] { R4984 += 1, R130 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4984 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [108, 108] { R4984 += 1, R130 += 1 };
  s2 -> s1 [109, 65535] { R4984 += 1, R130 += 1 };
  s3 -> s1 [0, 110] { R4984 += 1, R130 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4984 += 1 };
  s3 -> s5 [111, 111] { R4984 += 1, R130 += 1 };
  s3 -> s1 [112, 65535] { R4984 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4984 += 1, R130 += 1 };
  s5 -> s5 [0, 65535] { R4984 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R4984 += 1, R130 += 1 };
  s5 -> s1 [100, 65535] { R4984 += 1, R130 += 1 };
  s6 -> s1 [0, 96] { R4984 += 1, R130 += 1 };
  s6 -> s6 [0, 65535] { R4984 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R4984 += 1, R130 += 1 };
  s6 -> s1 [98, 65535] { R4984 += 1, R130 += 1 };
  s7 -> s1 [0, 107] { R4984 += 1, R130 += 1 };
  s7 -> s7 [0, 65535] { R4984 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R4984 += 1, R130 += 1 };
  s7 -> s1 [109, 65535] { R4984 += 1, R130 += 1 };
  s8 -> s1 [0, 103] { R4984 += 1, R130 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R4984 += 1 };
  s8 -> s9 [104, 104] { R4984 += 1, R130 += 1 };
  s8 -> s1 [105, 65535] { R4984 += 1, R130 += 1 };
  s9 -> s1 [0, 110] { R4984 += 1, R130 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R4984 += 1 };
  s9 -> s10 [111, 111] { R4984 += 1, R130 += 1 };
  s9 -> s1 [112, 65535] { R4984 += 1, R130 += 1 };
  s10 -> s1 [0, 114] { R4984 += 1, R130 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4984 += 1 };
  s10 -> s11 [115, 115] { R4984 += 1, R130 += 1 };
  s10 -> s1 [116, 65535] { R4984 += 1, R130 += 1 };
  s11 -> s1 [0, 115] { R4984 += 1, R130 += 1 };
  s11 -> s11 [0, 65535] { R4984 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R4984 += 1, R130 += 1 };
  s11 -> s1 [117, 65535] { R4984 += 1, R130 += 1 };
  s12 -> s1 [0, 65535] { R4984 += 1, R130 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R4984 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4986 += 1, R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R4986 += 1, R134 += 1, R135 += 1 };
  s0 -> s0 [0, 65535] { R4985 += 1, R4986 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4986 += 1, R135 += 1, R136 += 1 };
  s1 -> s4 [0, 65535] { R4986 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4986 += 1, R135 += 1, R136 += 1 };
  s2 -> s2 [0, 65535] { R4986 += 1, R134 += 1, R135 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4986 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4988 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R4987 += 1, R4988 += 1 };
  s0 -> s2 [0, 65535] { R4988 += 1, R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R4988 += 1, R141 += 1, R142 += 1 };
  s1 -> s4 [0, 65535] { R4988 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4988 += 1, R141 += 1, R142 += 1 };
  s2 -> s2 [0, 65535] { R4988 += 1, R140 += 1, R141 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4988 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4990 += 1 };
  s0 -> s0 [0, 65535] { R4989 += 1, R4990 += 1 };
  s1 -> s1 [0, 65535] { R4990 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4992 += 1, R146 += 1, R147 += 1 };
  s0 -> s2 [0, 65535] { R4992 += 1, R147 += 1, R148 += 1 };
  s0 -> s0 [0, 65535] { R4991 += 1, R4992 += 1 };
  s1 -> s1 [0, 65535] { R4992 += 1, R146 += 1, R147 += 1 };
  s1 -> s2 [0, 65535] { R4992 += 1, R147 += 1, R148 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4992 += 1 };
  s2 -> s2 [0, 65535] { R4992 += 1, R147 += 1, R148 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4992 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R4993 += 1, R4994 += 1 };
  s0 -> s1 [0, 65535] { R4994 += 1 };
  s1 -> s1 [0, 65535] { R4994 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 88] { R4996 += 1, R153 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R4996 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R4995 += 1, R4996 += 1 };
  s0 -> s3 [89, 89] { R4996 += 1, R153 += 1, R154 += 1 };
  s0 -> s4 [89, 89] { R4996 += 1, R153 += 1, R154 += 1 };
  s0 -> s1 [90, 65535] { R4996 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [0, 88] { R4996 += 1, R153 += 1, R154 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4996 += 1 };
  s1 -> s3 [89, 89] { R4996 += 1, R153 += 1, R154 += 1 };
  s1 -> s4 [89, 89] { R4996 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [90, 65535] { R4996 += 1, R153 += 1, R154 += 1 };
  s2 -> s1 [0, 88] { R4996 += 1, R153 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R4996 += 1, R152 += 1, R153 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [89, 89] { R4996 += 1, R153 += 1, R154 += 1 };
  s2 -> s4 [89, 89] { R4996 += 1, R153 += 1, R154 += 1 };
  s2 -> s1 [90, 65535] { R4996 += 1, R153 += 1, R154 += 1 };
  s3 -> s3 [0, 65535] { R4996 += 1, R153 += 1, R154 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4996 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4996 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R4998 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R4997 += 1, R4998 += 1 };
  s0 -> s2 [0, 65535] { R4998 += 1, R159 += 1, R160 += 1 };
  s1 -> s1 [0, 65535] { R4998 += 1, R158 += 1, R159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4998 += 1, R159 += 1, R160 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4998 += 1, R159 += 1, R160 += 1 };
  s2 -> s4 [0, 65535] { R4998 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4998 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R5000 += 1 };
  s0 -> s0 [0, 65535] { R4999 += 1, R5000 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5000 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 72] { R5002 += 1, R165 += 1, R166 += 1 };
  s0 -> s0 [0, 65535] { R5001 += 1, R5002 += 1 };
  s0 -> s2 [0, 65535] { R5002 += 1, R164 += 1, R165 += 1 };
  s0 -> s3 [73, 73] { R5002 += 1, R165 += 1, R166 += 1 };
  s0 -> s4 [73, 73] { R5002 += 1, R165 += 1, R166 += 1 };
  s0 -> s1 [74, 65535] { R5002 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [0, 72] { R5002 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [0, 65535] { R5002 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R5002 += 1, R165 += 1, R166 += 1 };
  s1 -> s4 [73, 73] { R5002 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [74, 65535] { R5002 += 1, R165 += 1, R166 += 1 };
  s2 -> s1 [0, 72] { R5002 += 1, R165 += 1, R166 += 1 };
  s2 -> s2 [0, 65535] { R5002 += 1, R164 += 1, R165 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R5002 += 1, R165 += 1, R166 += 1 };
  s2 -> s4 [73, 73] { R5002 += 1, R165 += 1, R166 += 1 };
  s2 -> s1 [74, 65535] { R5002 += 1, R165 += 1, R166 += 1 };
  s3 -> s3 [0, 65535] { R5002 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5002 += 1 };
  s4 -> s4 [0, 65535] { R5002 += 1, R165 += 1, R166 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5002 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R5026 += 1, R38 += 1 };
  s0 -> s0 [0, 65535] { R5025 += 1, R5026 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5026 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R5028 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R5027 += 1, R5028 += 1 };
  s0 -> s2 [65, 65] { R5028 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R5028 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R5028 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R5028 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5028 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R5028 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R5028 += 1, R87 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5028 += 1, R87 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R5030 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R5029 += 1, R5030 += 1 };
  s0 -> s2 [65, 65] { R5030 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R5030 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R5030 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R5030 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5030 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R5030 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R5030 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5030 += 1, R89 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R5032 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R5031 += 1, R5032 += 1 };
  s0 -> s2 [65, 65] { R5032 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R5032 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R5032 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R5032 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5032 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R5032 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R5032 += 1, R91 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5032 += 1, R91 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R5034 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R5033 += 1, R5034 += 1 };
  s0 -> s2 [65, 65] { R5034 += 1, R93 += 1 };
  s0 -> s3 [65, 65] { R5034 += 1, R93 += 1 };
  s0 -> s1 [66, 65535] { R5034 += 1, R93 += 1 };
  s1 -> s1 [0, 64] { R5034 += 1, R93 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5034 += 1, R93 += 1 };
  s1 -> s3 [65, 65] { R5034 += 1, R93 += 1 };
  s1 -> s1 [66, 65535] { R5034 += 1, R93 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5034 += 1, R93 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R5036 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R5035 += 1, R5036 += 1 };
  s0 -> s2 [65, 65] { R5036 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R5036 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R5036 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R5036 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5036 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R5036 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R5036 += 1, R95 += 1, R96 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5036 += 1, R95 += 1, R96 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R5038 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R5037 += 1, R5038 += 1 };
  s0 -> s2 [65, 65] { R5038 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R5038 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R5038 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R5038 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5038 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R5038 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R5038 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5038 += 1, R101 += 1, R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R5040 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R5039 += 1, R5040 += 1 };
  s0 -> s2 [65, 65] { R5040 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [65, 65] { R5040 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R5040 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 64] { R5040 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5040 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [65, 65] { R5040 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [66, 65535] { R5040 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5040 += 1, R105 += 1, R106 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R5042 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R5041 += 1, R5042 += 1 };
  s0 -> s2 [65, 65] { R5042 += 1, R111 += 1, R112 += 1 };
  s0 -> s3 [65, 65] { R5042 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [66, 65535] { R5042 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 64] { R5042 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5042 += 1, R111 += 1, R112 += 1 };
  s1 -> s3 [65, 65] { R5042 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [66, 65535] { R5042 += 1, R111 += 1, R112 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5042 += 1, R111 += 1, R112 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R5044 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R5043 += 1, R5044 += 1 };
  s0 -> s2 [65, 65] { R5044 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R5044 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R5044 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R5044 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5044 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R5044 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R5044 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5044 += 1, R115 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R5046 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R5045 += 1, R5046 += 1 };
  s0 -> s2 [65, 65] { R5046 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R5046 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R5046 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R5046 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5046 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R5046 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R5046 += 1, R121 += 1, R122 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5046 += 1, R121 += 1, R122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R5048 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R5047 += 1, R5048 += 1 };
  s0 -> s2 [65, 65] { R5048 += 1, R127 += 1, R128 += 1 };
  s0 -> s3 [65, 65] { R5048 += 1, R127 += 1, R128 += 1 };
  s0 -> s1 [66, 65535] { R5048 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 64] { R5048 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5048 += 1, R127 += 1, R128 += 1 };
  s1 -> s3 [65, 65] { R5048 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [66, 65535] { R5048 += 1, R127 += 1, R128 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5048 += 1, R127 += 1, R128 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R5050 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R5049 += 1, R5050 += 1 };
  s0 -> s2 [65, 65] { R5050 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R5050 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R5050 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R5050 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5050 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R5050 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R5050 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5050 += 1, R131 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R5052 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R5051 += 1, R5052 += 1 };
  s0 -> s2 [65, 65] { R5052 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [65, 65] { R5052 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [66, 65535] { R5052 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R5052 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5052 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [65, 65] { R5052 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [66, 65535] { R5052 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R5052 += 1, R137 += 1, R138 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R5054 += 1 };
  s0 -> s0 [0, 65535] { R5053 += 1, R5054 += 1 };
  s0 -> s2 [65, 65] { R5054 += 1 };
  s0 -> s3 [65, 65] { R5054 += 1 };
  s0 -> s1 [66, 65535] { R5054 += 1 };
  s1 -> s1 [0, 64] { R5054 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5054 += 1 };
  s1 -> s3 [65, 65] { R5054 += 1 };
  s1 -> s1 [66, 65535] { R5054 += 1 };
  s2 -> s2 [0, 65535] { R5054 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R5056 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R5055 += 1, R5056 += 1 };
  s0 -> s2 [65, 65] { R5056 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [65, 65] { R5056 += 1, R143 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R5056 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R5056 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5056 += 1, R143 += 1, R144 += 1 };
  s1 -> s3 [65, 65] { R5056 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R5056 += 1, R143 += 1, R144 += 1 };
  s2 -> s2 [0, 65535] { R5056 += 1, R143 += 1, R144 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R5058 += 1 };
  s0 -> s0 [0, 65535] { R5057 += 1, R5058 += 1 };
  s0 -> s2 [65, 65] { R5058 += 1 };
  s0 -> s3 [65, 65] { R5058 += 1 };
  s0 -> s1 [66, 65535] { R5058 += 1 };
  s1 -> s1 [0, 64] { R5058 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5058 += 1 };
  s1 -> s3 [65, 65] { R5058 += 1 };
  s1 -> s1 [66, 65535] { R5058 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5058 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R5060 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R5059 += 1, R5060 += 1 };
  s0 -> s2 [65, 65] { R5060 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [65, 65] { R5060 += 1, R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R5060 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 64] { R5060 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5060 += 1, R149 += 1, R150 += 1 };
  s1 -> s3 [65, 65] { R5060 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [66, 65535] { R5060 += 1, R149 += 1, R150 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5060 += 1, R149 += 1, R150 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R5062 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R5061 += 1, R5062 += 1 };
  s0 -> s2 [65, 65] { R5062 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [65, 65] { R5062 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [66, 65535] { R5062 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 64] { R5062 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5062 += 1, R155 += 1, R156 += 1 };
  s1 -> s3 [65, 65] { R5062 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [66, 65535] { R5062 += 1, R155 += 1, R156 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5062 += 1, R155 += 1, R156 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R5064 += 1 };
  s0 -> s0 [0, 65535] { R5063 += 1, R5064 += 1 };
  s0 -> s2 [65, 65] { R5064 += 1 };
  s0 -> s3 [65, 65] { R5064 += 1 };
  s0 -> s1 [66, 65535] { R5064 += 1 };
  s1 -> s1 [0, 64] { R5064 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5064 += 1 };
  s1 -> s3 [65, 65] { R5064 += 1 };
  s1 -> s1 [66, 65535] { R5064 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R5064 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R5066 += 1, R161 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R5065 += 1, R5066 += 1 };
  s0 -> s2 [65, 65] { R5066 += 1, R161 += 1, R162 += 1 };
  s0 -> s3 [65, 65] { R5066 += 1, R161 += 1, R162 += 1 };
  s0 -> s1 [66, 65535] { R5066 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [0, 64] { R5066 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R5066 += 1, R161 += 1, R162 += 1 };
  s1 -> s3 [65, 65] { R5066 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [66, 65535] { R5066 += 1, R161 += 1, R162 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5066 += 1, R161 += 1, R162 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 43] { R5068 += 1 };
  s0 -> s0 [0, 65535] { R5067 += 1, R5068 += 1 };
  s0 -> s1 [45, 45] { R5068 += 1 };
  s0 -> s2 [46, 46] { R5068 += 1 };
  s0 -> s1 [48, 62] { R5068 += 1 };
  s0 -> s3 [65, 65] { R5068 += 1 };
  s0 -> s1 [66, 65535] { R5068 += 1 };
  s1 -> s1 [0, 43] { R5068 += 1 };
  s1 -> s1 [45, 45] { R5068 += 1 };
  s1 -> s2 [46, 46] { R5068 += 1 };
  s1 -> s1 [48, 62] { R5068 += 1 };
  s1 -> s3 [65, 65] { R5068 += 1 };
  s1 -> s1 [66, 65535] { R5068 += 1 };
  s2 -> s1 [0, 43] { R5068 += 1 };
  s2 -> s1 [45, 45] { R5068 += 1 };
  s2 -> s2 [46, 46] { R5068 += 1 };
  s2 -> s1 [48, 62] { R5068 += 1 };
  s2 -> s3 [65, 65] { R5068 += 1 };
  s2 -> s1 [66, 114] { R5068 += 1 };
  s2 -> s8 [115, 115] { R5068 += 1 };
  s2 -> s1 [116, 65535] { R5068 += 1 };
  s3 -> s3 [0, 43] { R5068 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5068 += 1 };
  s3 -> s4 [46, 46] { R5068 += 1 };
  s3 -> s3 [48, 62] { R5068 += 1 };
  s3 -> s3 [65, 65535] { R5068 += 1 };
  s4 -> s3 [0, 43] { R5068 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5068 += 1 };
  s4 -> s4 [46, 46] { R5068 += 1 };
  s4 -> s3 [48, 62] { R5068 += 1 };
  s4 -> s3 [65, 114] { R5068 += 1 };
  s4 -> s5 [115, 115] { R5068 += 1 };
  s4 -> s3 [116, 65535] { R5068 += 1 };
  s5 -> s3 [0, 43] { R5068 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5068 += 1 };
  s5 -> s4 [46, 46] { R5068 += 1 };
  s5 -> s3 [48, 62] { R5068 += 1 };
  s5 -> s3 [65, 110] { R5068 += 1 };
  s5 -> s6 [111, 111] { R5068 += 1 };
  s5 -> s3 [112, 65535] { R5068 += 1 };
  s6 -> s3 [0, 43] { R5068 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5068 += 1 };
  s6 -> s4 [46, 46] { R5068 += 1 };
  s6 -> s3 [48, 62] { R5068 += 1 };
  s6 -> s3 [65, 98] { R5068 += 1 };
  s6 -> s7 [99, 99] { R5068 += 1 };
  s6 -> s3 [100, 65535] { R5068 += 1 };
  s7 -> s3 [0, 43] { R5068 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5068 += 1 };
  s7 -> s4 [46, 46] { R5068 += 1 };
  s7 -> s3 [48, 62] { R5068 += 1 };
  s7 -> s3 [65, 106] { R5068 += 1 };
  s7 -> s3 [108, 65535] { R5068 += 1 };
  s8 -> s1 [0, 43] { R5068 += 1 };
  s8 -> s1 [45, 45] { R5068 += 1 };
  s8 -> s2 [46, 46] { R5068 += 1 };
  s8 -> s1 [48, 62] { R5068 += 1 };
  s8 -> s3 [65, 65] { R5068 += 1 };
  s8 -> s1 [66, 110] { R5068 += 1 };
  s8 -> s9 [111, 111] { R5068 += 1 };
  s8 -> s1 [112, 65535] { R5068 += 1 };
  s9 -> s1 [0, 43] { R5068 += 1 };
  s9 -> s1 [45, 45] { R5068 += 1 };
  s9 -> s2 [46, 46] { R5068 += 1 };
  s9 -> s1 [48, 62] { R5068 += 1 };
  s9 -> s3 [65, 65] { R5068 += 1 };
  s9 -> s1 [66, 98] { R5068 += 1 };
  s9 -> s10 [99, 99] { R5068 += 1 };
  s9 -> s1 [100, 65535] { R5068 += 1 };
  s10 -> s1 [0, 43] { R5068 += 1 };
  s10 -> s1 [45, 45] { R5068 += 1 };
  s10 -> s2 [46, 46] { R5068 += 1 };
  s10 -> s1 [48, 62] { R5068 += 1 };
  s10 -> s3 [65, 65] { R5068 += 1 };
  s10 -> s1 [66, 106] { R5068 += 1 };
  s10 -> s1 [108, 65535] { R5068 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R5070 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R5069 += 1, R5070 += 1 };
  s1 -> s1 [0, 65535] { R5070 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 57] { R5072 += 1 };
  s0 -> s0 [0, 65535] { R5071 += 1, R5072 += 1 };
  s0 -> s2 [0, 65535] { R5072 += 1, R20 += 1 };
  s0 -> s3 [58, 58] { R5072 += 1 };
  s0 -> s1 [59, 65535] { R5072 += 1 };
  s1 -> s1 [0, 57] { R5072 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5072 += 1 };
  s1 -> s1 [59, 65535] { R5072 += 1 };
  s2 -> s1 [0, 57] { R5072 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5072 += 1, R20 += 1 };
  s2 -> s3 [58, 58] { R5072 += 1 };
  s2 -> s1 [59, 65535] { R5072 += 1 };
  s3 -> s3 [0, 65535] { R5072 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R5074 += 1 };
  s0 -> s0 [0, 65535] { R5073 += 1, R5074 += 1 };
  s0 -> s2 [0, 65535] { R5074 += 1, R21 += 1 };
  s0 -> s3 [65, 65] { R5074 += 1 };
  s0 -> s1 [66, 65535] { R5074 += 1 };
  s1 -> s1 [0, 64] { R5074 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5074 += 1 };
  s1 -> s1 [66, 65535] { R5074 += 1 };
  s2 -> s1 [0, 64] { R5074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5074 += 1, R21 += 1 };
  s2 -> s3 [65, 65] { R5074 += 1 };
  s2 -> s1 [66, 65535] { R5074 += 1 };
  s3 -> s3 [0, 65535] { R5074 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 90] { R5076 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R5076 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R5075 += 1, R5076 += 1 };
  s0 -> s3 [91, 91] { R5076 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R5076 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R5076 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R5076 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R5076 += 1, R40 += 1 };
  s2 -> s2 [0, 65535] { R5076 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R5076 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R5076 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R5076 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5076 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s0 [0, 65535] { R5077 += 1, R5078 += 1 };
  s0 -> s1 [0, 65535] { R5078 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R5078 += 1, R42 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R5078 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R5078 += 1, R42 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5078 += 1 };
  s2 -> s2 [0, 65535] { R5078 += 1, R42 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5078 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R5080 += 1, R4938 += 1 };
  s0 -> s2 [0, 65535] { R5080 += 1, R4937 += 1, R4938 += 1 };
  s0 -> s0 [0, 65535] { R5079 += 1, R5080 += 1 };
  s0 -> s1 [66, 65535] { R5080 += 1, R4938 += 1 };
  s1 -> s1 [0, 64] { R5080 += 1, R4938 += 1 };
  s1 -> s1 [0, 65535] { R5080 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R5080 += 1, R4938 += 1 };
  s2 -> s1 [0, 64] { R5080 += 1, R4938 += 1 };
  s2 -> s2 [0, 65535] { R5080 += 1, R4937 += 1, R4938 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R5080 += 1, R4938 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R5082 += 1, R4939 += 1, R4940 += 1 };
  s0 -> s2 [0, 65535] { R5082 += 1, R4940 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R5081 += 1, R5082 += 1 };
  s1 -> s1 [0, 65535] { R5082 += 1, R4939 += 1, R4940 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5082 += 1, R4940 += 1, R35 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5082 += 1, R4940 += 1, R35 += 1 };
  s2 -> s4 [0, 65535] { R5082 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5082 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R5084 += 1, R4942 += 1 };
  s0 -> s2 [0, 65535] { R5084 += 1, R4941 += 1, R4942 += 1 };
  s0 -> s0 [0, 65535] { R5083 += 1, R5084 += 1 };
  s0 -> s1 [81, 65535] { R5084 += 1, R4942 += 1 };
  s1 -> s1 [0, 65] { R5084 += 1, R4942 += 1 };
  s1 -> s1 [0, 65535] { R5084 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R5084 += 1, R4942 += 1 };
  s2 -> s1 [0, 65] { R5084 += 1, R4942 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5084 += 1, R4941 += 1, R4942 += 1 };
  s2 -> s1 [81, 65535] { R5084 += 1, R4942 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s0 [0, 65535] { R5085 += 1, R5086 += 1 };
  s0 -> s1 [0, 65535] { R5086 += 1, R4943 += 1, R4944 += 1 };
  s0 -> s2 [0, 65535] { R5086 += 1, R4944 += 1, R604 += 1 };
  s1 -> s1 [0, 65535] { R5086 += 1, R4943 += 1, R4944 += 1 };
  s1 -> s2 [0, 65535] { R5086 += 1, R4944 += 1, R604 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5086 += 1 };
  s2 -> s2 [0, 65535] { R5086 += 1, R4944 += 1, R604 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5086 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 80] { R5088 += 1, R4946 += 1 };
  s0 -> s0 [0, 65535] { R5087 += 1, R5088 += 1 };
  s0 -> s2 [0, 65535] { R5088 += 1, R4945 += 1, R4946 += 1 };
  s0 -> s3 [0, 65535] { R5088 += 1, R4946 += 1, R606 += 1 };
  s0 -> s1 [82, 65535] { R5088 += 1, R4946 += 1 };
  s1 -> s1 [0, 80] { R5088 += 1, R4946 += 1 };
  s1 -> s1 [0, 65535] { R5088 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [82, 65535] { R5088 += 1, R4946 += 1 };
  s2 -> s1 [0, 80] { R5088 += 1, R4946 += 1 };
  s2 -> s2 [0, 65535] { R5088 += 1, R4945 += 1, R4946 += 1 };
  s2 -> s3 [0, 65535] { R5088 += 1, R4946 += 1, R606 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [82, 65535] { R5088 += 1, R4946 += 1 };
  s3 -> s1 [0, 80] { R5088 += 1, R4946 += 1 };
  s3 -> s4 [0, 65535] { R5088 += 1 };
  s3 -> s3 [0, 65535] { R5088 += 1, R4946 += 1, R606 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [82, 65535] { R5088 += 1, R4946 += 1 };
  s4 -> s4 [0, 65535] { R5088 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 80] { R5090 += 1, R4948 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R5090 += 1, R4948 += 1, R609 += 1, R610 += 1 };
  s0 -> s3 [0, 65535] { R5090 += 1, R4947 += 1, R4948 += 1 };
  s0 -> s0 [0, 65535] { R5089 += 1, R5090 += 1 };
  s0 -> s1 [82, 65535] { R5090 += 1, R4948 += 1, R610 += 1 };
  s1 -> s1 [0, 80] { R5090 += 1, R4948 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R5090 += 1, R4948 += 1 };
  s1 -> s5 [0, 65535] { R5090 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R5090 += 1, R4948 += 1, R610 += 1 };
  s2 -> s1 [0, 80] { R5090 += 1, R4948 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R5090 += 1, R4948 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535] { R5090 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R5090 += 1, R4948 += 1, R610 += 1 };
  s3 -> s1 [0, 80] { R5090 += 1, R4948 += 1, R610 += 1 };
  s3 -> s2 [0, 65535] { R5090 += 1, R4948 += 1, R609 += 1, R610 += 1 };
  s3 -> s3 [0, 65535] { R5090 += 1, R4947 += 1, R4948 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [82, 65535] { R5090 += 1, R4948 += 1, R610 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5090 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R5092 += 1, R4950 += 1, R614 += 1, R615 += 1 };
  s0 -> s2 [0, 65535] { R5092 += 1, R4949 += 1, R4950 += 1 };
  s0 -> s0 [0, 65535] { R5091 += 1, R5092 += 1 };
  s0 -> s3 [0, 65535] { R5092 += 1, R4950 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 65535] { R5092 += 1, R4950 += 1, R614 += 1, R615 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R5092 += 1 };
  s1 -> s3 [0, 65535] { R5092 += 1, R4950 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [0, 65535] { R5092 += 1, R4950 += 1, R614 += 1, R615 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5092 += 1, R4949 += 1, R4950 += 1 };
  s2 -> s3 [0, 65535] { R5092 += 1, R4950 += 1, R615 += 1, R616 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R5092 += 1, R4950 += 1 };
  s3 -> s6 [0, 65535] { R5092 += 1 };
  s3 -> s3 [0, 65535] { R5092 += 1, R4950 += 1, R615 += 1, R616 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5092 += 1, R4950 += 1 };
  s5 -> s6 [0, 65535] { R5092 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R5092 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s0 -> s2 [0, 65535] { R5094 += 1, R4952 += 1, R619 += 1, R620 += 1 };
  s0 -> s0 [0, 65535] { R5093 += 1, R5094 += 1 };
  s0 -> s3 [0, 65535] { R5094 += 1, R4951 += 1, R4952 += 1 };
  s0 -> s1 [91, 107] { R5094 += 1, R4952 += 1, R620 += 1 };
  s0 -> s4 [108, 108] { R5094 += 1, R4952 += 1, R620 += 1 };
  s0 -> s1 [109, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s1 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s1 -> s1 [0, 65535] { R5094 += 1, R4952 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R5094 += 1 };
  s1 -> s1 [91, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s2 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R5094 += 1, R4952 += 1, R619 += 1, R620 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R5094 += 1 };
  s2 -> s1 [91, 107] { R5094 += 1, R4952 += 1, R620 += 1 };
  s2 -> s4 [108, 108] { R5094 += 1, R4952 += 1, R620 += 1 };
  s2 -> s1 [109, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s3 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s3 -> s2 [0, 65535] { R5094 += 1, R4952 += 1, R619 += 1, R620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5094 += 1, R4951 += 1, R4952 += 1 };
  s3 -> s1 [91, 107] { R5094 += 1, R4952 += 1, R620 += 1 };
  s3 -> s4 [108, 108] { R5094 += 1, R4952 += 1, R620 += 1 };
  s3 -> s1 [109, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s4 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5094 += 1 };
  s4 -> s4 [0, 65535] { R5094 += 1, R4952 += 1 };
  s4 -> s1 [91, 110] { R5094 += 1, R4952 += 1, R620 += 1 };
  s4 -> s7 [111, 111] { R5094 += 1, R4952 += 1, R620 += 1 };
  s4 -> s1 [112, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5094 += 1 };
  s7 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R5094 += 1 };
  s7 -> s7 [0, 65535] { R5094 += 1, R4952 += 1 };
  s7 -> s1 [91, 98] { R5094 += 1, R4952 += 1, R620 += 1 };
  s7 -> s8 [99, 99] { R5094 += 1, R4952 += 1, R620 += 1 };
  s7 -> s1 [100, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s8 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R5094 += 1 };
  s8 -> s8 [0, 65535] { R5094 += 1, R4952 += 1 };
  s8 -> s1 [91, 96] { R5094 += 1, R4952 += 1, R620 += 1 };
  s8 -> s9 [97, 97] { R5094 += 1, R4952 += 1, R620 += 1 };
  s8 -> s1 [98, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s9 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R5094 += 1 };
  s9 -> s9 [0, 65535] { R5094 += 1, R4952 += 1 };
  s9 -> s1 [91, 107] { R5094 += 1, R4952 += 1, R620 += 1 };
  s9 -> s10 [108, 108] { R5094 += 1, R4952 += 1, R620 += 1 };
  s9 -> s1 [109, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s10 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R5094 += 1 };
  s10 -> s10 [0, 65535] { R5094 += 1, R4952 += 1 };
  s10 -> s1 [91, 103] { R5094 += 1, R4952 += 1, R620 += 1 };
  s10 -> s11 [104, 104] { R5094 += 1, R4952 += 1, R620 += 1 };
  s10 -> s1 [105, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s11 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s11 -> s11 [0, 65535] { R5094 += 1, R4952 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R5094 += 1 };
  s11 -> s1 [91, 110] { R5094 += 1, R4952 += 1, R620 += 1 };
  s11 -> s12 [111, 111] { R5094 += 1, R4952 += 1, R620 += 1 };
  s11 -> s1 [112, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s12 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R5094 += 1 };
  s12 -> s12 [0, 65535] { R5094 += 1, R4952 += 1 };
  s12 -> s1 [91, 114] { R5094 += 1, R4952 += 1, R620 += 1 };
  s12 -> s13 [115, 115] { R5094 += 1, R4952 += 1, R620 += 1 };
  s12 -> s1 [116, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s13 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s13 -> s13 [0, 65535] { R5094 += 1, R4952 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R5094 += 1 };
  s13 -> s1 [91, 115] { R5094 += 1, R4952 += 1, R620 += 1 };
  s13 -> s14 [116, 116] { R5094 += 1, R4952 += 1, R620 += 1 };
  s13 -> s1 [117, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  s14 -> s1 [0, 81] { R5094 += 1, R4952 += 1, R620 += 1 };
  s14 -> s1 [91, 65535] { R5094 += 1, R4952 += 1, R620 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s0 [0, 65535] { R5095 += 1, R5096 += 1 };
  s0 -> s1 [0, 65535] { R5096 += 1, R4954 += 1 };
  s0 -> s2 [0, 65535] { R5096 += 1, R4953 += 1, R4954 += 1 };
  s0 -> s3 [0, 65535] { R5096 += 1, R4954 += 1, R3559 += 1, R3560 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R5096 += 1, R4954 += 1 };
  s1 -> s5 [0, 65535] { R5096 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R5096 += 1, R4954 += 1 };
  s2 -> s2 [0, 65535] { R5096 += 1, R4953 += 1, R4954 += 1 };
  s2 -> s3 [0, 65535] { R5096 += 1, R4954 += 1, R3559 += 1, R3560 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5096 += 1, R4954 += 1 };
  s3 -> s5 [0, 65535] { R5096 += 1 };
  s3 -> s3 [0, 65535] { R5096 += 1, R4954 += 1, R3559 += 1, R3560 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5096 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R5098 += 1, R4956 += 1 };
  s0 -> s2 [0, 65535] { R5098 += 1, R4956 += 1, R4541 += 1, R4542 += 1 };
  s0 -> s3 [0, 65535] { R5098 += 1, R4955 += 1, R4956 += 1 };
  s0 -> s0 [0, 65535] { R5097 += 1, R5098 += 1 };
  s1 -> s5 [0, 65535] { R5098 += 1 };
  s1 -> s1 [0, 65535] { R5098 += 1, R4956 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R5098 += 1 };
  s2 -> s1 [0, 65535] { R5098 += 1, R4956 += 1 };
  s2 -> s2 [0, 65535] { R5098 += 1, R4956 += 1, R4541 += 1, R4542 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R5098 += 1, R4956 += 1 };
  s3 -> s2 [0, 65535] { R5098 += 1, R4956 += 1, R4541 += 1, R4542 += 1 };
  s3 -> s3 [0, 65535] { R5098 += 1, R4955 += 1, R4956 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5098 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s1 [0, 65535] { R5100 += 1, R4957 += 1, R4958 += 1 };
  s0 -> s0 [0, 65535] { R5099 += 1, R5100 += 1 };
  s0 -> s2 [0, 65535] { R5100 += 1, R4958 += 1 };
  s1 -> s1 [0, 65535] { R5100 += 1, R4957 += 1, R4958 += 1 };
  s1 -> s2 [0, 65535] { R5100 += 1, R4958 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5100 += 1 };
  s2 -> s2 [0, 65535] { R5100 += 1, R4958 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5100 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 65535] { R5102 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s0 [0, 65535] { R5101 += 1, R5102 += 1 };
  s0 -> s2 [0, 65535] { R5102 += 1, R4960 += 1 };
  s0 -> s3 [0, 65535] { R5102 += 1, R4960 += 1, R4935 += 1, R4936 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5102 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s2 [0, 65535] { R5102 += 1, R4960 += 1 };
  s1 -> s3 [0, 65535] { R5102 += 1, R4960 += 1, R4935 += 1, R4936 += 1 };
  s2 -> s4 [0, 65535] { R5102 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5102 += 1, R4960 += 1 };
  s3 -> s4 [0, 65535] { R5102 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R5102 += 1, R4960 += 1 };
  s3 -> s3 [0, 65535] { R5102 += 1, R4960 += 1, R4935 += 1, R4936 += 1 };
  s4 -> s4 [0, 65535] { R5102 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s1 [0, 65535] { R5104 += 1, R5003 += 1, R5004 += 1 };
  s0 -> s0 [0, 65535] { R5103 += 1, R5104 += 1 };
  s0 -> s2 [0, 65535] { R5104 += 1, R5004 += 1, R36 += 1 };
  s1 -> s1 [0, 65535] { R5104 += 1, R5003 += 1, R5004 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5104 += 1, R5004 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5104 += 1 };
  s2 -> s2 [0, 65535] { R5104 += 1, R5004 += 1, R36 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5104 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R5106 += 1, R5006 += 1 };
  s0 -> s0 [0, 65535] { R5105 += 1, R5106 += 1 };
  s0 -> s2 [0, 65535] { R5106 += 1, R5005 += 1, R5006 += 1 };
  s0 -> s3 [65, 65] { R5106 += 1, R5006 += 1 };
  s0 -> s4 [65, 65] { R5106 += 1, R5006 += 1 };
  s0 -> s5 [81, 81] { R5106 += 1, R5006 += 1 };
  s0 -> s1 [82, 65535] { R5106 += 1, R5006 += 1 };
  s1 -> s1 [0, 64] { R5106 += 1, R5006 += 1 };
  s1 -> s3 [65, 65] { R5106 += 1, R5006 += 1 };
  s1 -> s4 [65, 65] { R5106 += 1, R5006 += 1 };
  s1 -> s5 [81, 81] { R5106 += 1, R5006 += 1 };
  s1 -> s1 [82, 65535] { R5106 += 1, R5006 += 1 };
  s2 -> s1 [0, 64] { R5106 += 1, R5006 += 1 };
  s2 -> s2 [0, 65535] { R5106 += 1, R5005 += 1, R5006 += 1 };
  s2 -> s3 [65, 65] { R5106 += 1, R5006 += 1 };
  s2 -> s4 [65, 65] { R5106 += 1, R5006 += 1 };
  s2 -> s5 [81, 81] { R5106 += 1, R5006 += 1 };
  s2 -> s1 [82, 65535] { R5106 += 1, R5006 += 1 };
  s4 -> s4 [0, 65] { R5106 += 1, R5006 += 1 };
  s4 -> s7 [81, 81] { R5106 += 1, R5006 += 1 };
  s4 -> s4 [82, 65535] { R5106 += 1, R5006 += 1 };
  s5 -> s5 [0, 64] { R5106 += 1, R5006 += 1 };
  s5 -> s5 [0, 65535] { R5106 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R5106 += 1, R5006 += 1 };
  s5 -> s8 [65, 65] { R5106 += 1, R5006 += 1 };
  s5 -> s5 [81, 65535] { R5106 += 1, R5006 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R5106 += 1, R5006 += 1 };
  s7 -> s7 [0, 65535] { R5106 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R5106 += 1, R5006 += 1 };
  s8 -> s8 [0, 65535] { R5106 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R5108 += 1, R5008 += 1, R603 += 1 };
  s0 -> s0 [0, 65535] { R5107 += 1, R5108 += 1 };
  s0 -> s2 [0, 65535] { R5108 += 1, R5007 += 1, R5008 += 1 };
  s0 -> s3 [65, 65] { R5108 += 1, R5008 += 1, R603 += 1 };
  s0 -> s4 [65, 65] { R5108 += 1, R5008 += 1, R603 += 1 };
  s0 -> s1 [66, 65535] { R5108 += 1, R5008 += 1, R603 += 1 };
  s1 -> s1 [0, 64] { R5108 += 1, R5008 += 1, R603 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5108 += 1 };
  s1 -> s3 [65, 65] { R5108 += 1, R5008 += 1, R603 += 1 };
  s1 -> s4 [65, 65] { R5108 += 1, R5008 += 1, R603 += 1 };
  s1 -> s1 [66, 65535] { R5108 += 1, R5008 += 1, R603 += 1 };
  s2 -> s1 [0, 64] { R5108 += 1, R5008 += 1, R603 += 1 };
  s2 -> s2 [0, 65535] { R5108 += 1, R5007 += 1, R5008 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5108 += 1, R5008 += 1, R603 += 1 };
  s2 -> s4 [65, 65] { R5108 += 1, R5008 += 1, R603 += 1 };
  s2 -> s1 [66, 65535] { R5108 += 1, R5008 += 1, R603 += 1 };
  s3 -> s3 [0, 65535] { R5108 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5108 += 1, R5008 += 1, R603 += 1 };
  s4 -> s5 [0, 65535] { R5108 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5108 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R5110 += 1, R5010 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R5110 += 1, R5009 += 1, R5010 += 1 };
  s0 -> s0 [0, 65535] { R5109 += 1, R5110 += 1 };
  s0 -> s3 [65, 65] { R5110 += 1, R5010 += 1, R605 += 1 };
  s0 -> s4 [65, 65] { R5110 += 1, R5010 += 1, R605 += 1 };
  s0 -> s1 [66, 65535] { R5110 += 1, R5010 += 1, R605 += 1 };
  s1 -> s1 [0, 64] { R5110 += 1, R5010 += 1, R605 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5110 += 1 };
  s1 -> s3 [65, 65] { R5110 += 1, R5010 += 1, R605 += 1 };
  s1 -> s4 [65, 65] { R5110 += 1, R5010 += 1, R605 += 1 };
  s1 -> s1 [66, 65535] { R5110 += 1, R5010 += 1, R605 += 1 };
  s2 -> s1 [0, 64] { R5110 += 1, R5010 += 1, R605 += 1 };
  s2 -> s2 [0, 65535] { R5110 += 1, R5009 += 1, R5010 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5110 += 1, R5010 += 1, R605 += 1 };
  s2 -> s4 [65, 65] { R5110 += 1, R5010 += 1, R605 += 1 };
  s2 -> s1 [66, 65535] { R5110 += 1, R5010 += 1, R605 += 1 };
  s3 -> s3 [0, 65535] { R5110 += 1, R5010 += 1, R605 += 1 };
  s3 -> s6 [0, 65535] { R5110 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5110 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5110 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s0 -> s0 [0, 65535] { R5111 += 1, R5112 += 1 };
  s0 -> s2 [0, 65535] { R5112 += 1, R5011 += 1, R5012 += 1 };
  s0 -> s3 [65, 65] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s0 -> s4 [65, 65] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s0 -> s1 [66, 65535] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 64] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R5112 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s1 -> s4 [65, 65] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [66, 65535] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [0, 64] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R5112 += 1, R5011 += 1, R5012 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s2 -> s4 [65, 65] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [66, 65535] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s3 -> s3 [0, 65535] { R5112 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5112 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5112 += 1, R5012 += 1, R607 += 1, R608 += 1 };
  s5 -> s5 [0, 65535] { R5112 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R5113 += 1, R5114 += 1 };
  s0 -> s2 [0, 65535] { R5114 += 1, R5013 += 1, R5014 += 1 };
  s0 -> s3 [65, 65] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s0 -> s4 [65, 65] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s0 -> s1 [66, 65535] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [0, 64] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5114 += 1 };
  s1 -> s3 [65, 65] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s1 -> s4 [65, 65] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [66, 65535] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [0, 64] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5114 += 1, R5013 += 1, R5014 += 1 };
  s2 -> s3 [65, 65] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s2 -> s4 [65, 65] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [66, 65535] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s3 -> s3 [0, 65535] { R5114 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5114 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5114 += 1, R5014 += 1, R611 += 1, R612 += 1 };
  s5 -> s5 [0, 65535] { R5114 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s0 -> s0 [0, 65535] { R5115 += 1, R5116 += 1 };
  s0 -> s2 [0, 65535] { R5116 += 1, R5015 += 1, R5016 += 1 };
  s0 -> s3 [65, 65] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s0 -> s4 [65, 65] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s0 -> s1 [66, 65535] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [0, 64] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [0, 65535] { R5116 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s1 -> s4 [65, 65] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [66, 65535] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [0, 64] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s2 -> s2 [0, 65535] { R5116 += 1, R5015 += 1, R5016 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s2 -> s4 [65, 65] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [66, 65535] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s3 -> s3 [0, 65535] { R5116 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5116 += 1 };
  s4 -> s4 [0, 65535] { R5116 += 1, R5016 += 1, R617 += 1, R618 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5116 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s2 [0, 64] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s0 [0, 65535] { R5117 += 1, R5118 += 1 };
  s0 -> s3 [0, 65535] { R5118 += 1, R5017 += 1, R5018 += 1 };
  s0 -> s4 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s5 [65, 65] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s6 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s7 [65, 65] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s1 [66, 65535] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s0 -> s2 [66, 65535] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s1 -> s1 [0, 64] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s1 [0, 65535] { R5118 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s6 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s1 -> s1 [66, 65535] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s1 [0, 64] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s2 [0, 64] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s2 -> s4 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s5 [65, 65] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s2 -> s6 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s7 [65, 65] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s2 -> s1 [66, 65535] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s2 -> s2 [66, 65535] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s1 [0, 64] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s2 [0, 64] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s3 [0, 65535] { R5118 += 1, R5017 += 1, R5018 += 1 };
  s3 -> s4 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s5 [65, 65] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s6 [65, 65] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s7 [65, 65] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s3 -> s1 [66, 65535] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s3 -> s2 [66, 65535] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s4 -> s4 [0, 65535] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R5118 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5118 += 1 };
  s7 -> s4 [0, 65535] { R5118 += 1, R5018 += 1, R3556 += 1, R3557 += 1 };
  s7 -> s7 [0, 65535] { R5118 += 1, R5018 += 1, R3555 += 1, R3556 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5118 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s0 -> s2 [0, 64] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s0 -> s0 [0, 65535] { R5119 += 1, R5120 += 1 };
  s0 -> s3 [0, 65535] { R5120 += 1, R5019 += 1, R5020 += 1 };
  s0 -> s4 [65, 65] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s0 -> s5 [65, 65] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s0 -> s6 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s0 -> s7 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s0 -> s1 [66, 65535] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s0 -> s2 [66, 65535] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s1 -> s1 [0, 64] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R5120 += 1 };
  s1 -> s6 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s1 -> s7 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s1 -> s1 [66, 65535] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s2 -> s1 [0, 64] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s2 -> s2 [0, 64] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s2 -> s4 [65, 65] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s2 -> s5 [65, 65] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s2 -> s6 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s2 -> s7 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s2 -> s1 [66, 65535] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s2 -> s2 [66, 65535] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s3 -> s1 [0, 64] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s3 -> s2 [0, 64] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s3 -> s3 [0, 65535] { R5120 += 1, R5019 += 1, R5020 += 1 };
  s3 -> s4 [65, 65] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s3 -> s5 [65, 65] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s3 -> s6 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s3 -> s7 [65, 65] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s3 -> s1 [66, 65535] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s3 -> s2 [66, 65535] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s5 -> s5 [0, 65535] { R5120 += 1, R5020 += 1, R4537 += 1, R4538 += 1 };
  s5 -> s6 [0, 65535] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R5120 += 1 };
  s6 -> s6 [0, 65535] { R5120 += 1, R5020 += 1, R4538 += 1, R4539 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R5120 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5120 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R5122 += 1, R5022 += 1 };
  s0 -> s0 [0, 65535] { R5121 += 1, R5122 += 1 };
  s0 -> s2 [0, 65535] { R5122 += 1, R5021 += 1, R5022 += 1 };
  s0 -> s3 [65, 65] { R5122 += 1, R5022 += 1 };
  s0 -> s4 [65, 65] { R5122 += 1, R5022 += 1 };
  s0 -> s1 [66, 65535] { R5122 += 1, R5022 += 1 };
  s1 -> s1 [0, 64] { R5122 += 1, R5022 += 1 };
  s1 -> s1 [0, 65535] { R5122 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5122 += 1, R5022 += 1 };
  s1 -> s4 [65, 65] { R5122 += 1, R5022 += 1 };
  s1 -> s1 [66, 65535] { R5122 += 1, R5022 += 1 };
  s2 -> s1 [0, 64] { R5122 += 1, R5022 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5122 += 1, R5021 += 1, R5022 += 1 };
  s2 -> s3 [65, 65] { R5122 += 1, R5022 += 1 };
  s2 -> s4 [65, 65] { R5122 += 1, R5022 += 1 };
  s2 -> s1 [66, 65535] { R5122 += 1, R5022 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5122 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5122 += 1 };
  s4 -> s4 [0, 65535] { R5122 += 1, R5022 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5122 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s0 -> s2 [0, 64] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s0 -> s0 [0, 65535] { R5123 += 1, R5124 += 1 };
  s0 -> s3 [0, 65535] { R5124 += 1, R5023 += 1, R5024 += 1 };
  s0 -> s4 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s0 -> s5 [65, 65] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s0 -> s6 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s0 -> s7 [65, 65] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s0 -> s2 [66, 80] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s0 -> s1 [66, 65535] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s0 -> s8 [81, 81] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s0 -> s2 [82, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s1 -> s1 [0, 64] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s1 -> s2 [0, 64] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s1 -> s4 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s1 -> s5 [65, 65] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s1 -> s6 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s1 -> s7 [65, 65] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s1 -> s2 [66, 80] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s1 -> s1 [66, 65535] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s1 -> s8 [81, 81] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s1 -> s2 [82, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s2 -> s2 [0, 64] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s2 -> s4 [65, 65] { R5124 += 1, R5024 += 1 };
  s2 -> s6 [65, 65] { R5124 += 1, R5024 += 1 };
  s2 -> s2 [66, 80] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s2 -> s2 [66, 65535] { R5124 += 1, R5024 += 1 };
  s2 -> s8 [81, 81] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s2 -> s2 [82, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s3 -> s1 [0, 64] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s3 -> s2 [0, 64] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s3 -> s3 [0, 65535] { R5124 += 1, R5023 += 1, R5024 += 1 };
  s3 -> s4 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s3 -> s5 [65, 65] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s3 -> s6 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s3 -> s7 [65, 65] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s3 -> s2 [66, 80] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s3 -> s1 [66, 65535] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s3 -> s8 [81, 81] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s3 -> s2 [82, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s4 -> s4 [0, 80] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s4 -> s4 [0, 65535] { R5124 += 1, R5024 += 1 };
  s4 -> s10 [81, 81] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s4 -> s4 [82, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s5 -> s4 [0, 80] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s5 -> s5 [0, 65535] { R5124 += 1, R5024 += 1, R4931 += 1, R4932 += 1 };
  s5 -> s10 [81, 81] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s5 -> s4 [82, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s8 -> s8 [0, 64] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s8 -> s8 [0, 65535] { R5124 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s8 -> s11 [65, 65] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s8 -> s8 [66, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R5124 += 1 };
  s10 -> s10 [0, 65535] { R5124 += 1, R5024 += 1, R4932 += 1, R4933 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R5124 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R5124 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P90
automaton P90_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
constraint R5 = R4960 && R6 = R5124 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R88 + R87 + -1*R104 + -1*R102 = 0 && R103 + R101 = 0 && R604 + R603 + -1*R3559 + -1*R3556 = 0 && R609 + R607 = 0 && R610 + R608 + -1*R3559 + -1*R3556 = 0 && R614 + R611 = 0 && R615 + R612 + -1*R3559 + -1*R3556 = 0 && R619 + R617 = 0 && R620 + R618 + -1*R3559 + -1*R3556 = 0 && R3558 + R3555 = 0 && R4937 = 0 && R4938 = R4960 && R4939 = 0 && R4940 = R4960 && R4941 = 0 && R4942 = R4960 && R4943 = 0 && R4944 = R4960 && R4945 = 0 && R4946 = R4960 && R4947 = 0 && R4948 = R4960 && R4949 = 0 && R4950 = R4960 && R4951 = 0 && R4952 = R4960 && R4953 = 0 && R4954 = R4960 && R4955 = 0 && R4956 = R4960 && R4957 = 0 && R4958 = R4960 && R4959 = 0 && R4961 = 0 && R4962 = R5124 && R4963 = 0 && R4964 = R5124 && R4965 = 0 && R4966 = R5124 && R4967 = 0 && R4968 = R5124 && R4969 = 0 && R4970 = R5124 && R4971 = 0 && R4972 = R5124 && R4973 = 0 && R4974 = R5124 && R4975 = 0 && R4976 = R5124 && R4977 = 0 && R4978 = R5124 && R4979 = 0 && R4980 = R5124 && R4981 = 0 && R4982 = R5124 && R4983 = 0 && R4984 = R5124 && R4985 = 0 && R4986 = R5124 && R4987 = 0 && R4988 = R5124 && R4989 = 0 && R4990 = R5124 && R4991 = 0 && R4992 = R5124 && R4993 = 0 && R4994 = R5124 && R4995 = 0 && R4996 = R5124 && R4997 = 0 && R4998 = R5124 && R4999 = 0 && R5000 = R5124 && R5001 = 0 && R5002 = R5124 && R5005 = 0 && R5006 = 0 && R5017 = 0 && R5018 = 0 && R5019 = 0 && R5020 = 0 && R5023 = 0 && R5024 = 0 && R5067 = 10 && R5068 = R5124 && R5069 = 10 && R5070 = R5124 && R5071 = 10 && R5072 = R5124 && R5073 = 10 && R5074 = R5124 && R5075 = 10 && R5076 = R5124 && R5077 = 10 && R5078 = R5124 && R5079 = 10 && R5080 = R5124 && R5081 = 10 && R5082 = R5124 && R5083 = 10 && R5084 = R5124 && R5085 = 10 && R5086 = R5124 && R5087 = 10 && R5088 = R5124 && R5089 = 10 && R5090 = R5124 && R5091 = 10 && R5092 = R5124 && R5093 = 10 && R5094 = R5124 && R5095 = 10 && R5096 = R5124 && R5097 = 10 && R5098 = R5124 && R5099 = 10 && R5100 = R5124 && R5101 = 10 && R5102 = R5124 && R5103 = 10 && R5104 = R5124 && R5105 = 10 && R5106 = R5124 && R5107 = 10 && R5108 = R5124 && R5109 = 10 && R5110 = R5124 && R5111 = 10 && R5112 = R5124 && R5113 = 10 && R5114 = R5124 && R5115 = 10 && R5116 = R5124 && R5117 = 10 && R5118 = R5124 && R5119 = 10 && R5120 = R5124 && R5121 = 10 && R5122 = R5124 && R5123 = 10 && R120 + R117 + R154 + R151 != 0 && R136 + R133 + R166 + R163 != 0 && R3560 + R3557 + R4936 + R4933 != 0 && R20 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && R92 + R91 < 1 && R94 + R93 < 1 && -1*R104 + -1*R102 < 1 && R606 + R605 < 1 && -1*R3559 < R3556 && 0 < R4960 && 9 < R5124 && (R100 + R97 != 0 || ((R98 + R95 != 0 || R99 + R96 + -1*R104 + -1*R102 = 0 || R104 + R102 < 1) && (R98 + R95 = 0 || R104 + R102 < 1))) && (R104 + R102 != 0 || R110 + R107 = 0 || (R108 + R105 = 0 && R109 + R106 = 0)) && (R104 + R102 != 0 || R110 + R107 = 0 || (R113 + R111 = 0 && R114 + R112 = 0)) && (R104 + R102 != 0 || R110 + R107 = 0 || (R118 + R115 = 0 && R119 + R116 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R124 + R121 = 0 && R125 + R122 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R129 + R127 = 0 && R130 + R128 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R134 + R131 = 0 && R135 + R132 = 0)) && (R108 + R105 != 0 || R104 + R102 + -1*R109 + -1*R106 = 0 || R104 + R102 < 1) && (R113 + R111 != 0 || R104 + R102 + -1*R114 + -1*R112 = 0 || R104 + R102 < 1) && (R118 + R115 != 0 || R104 + R102 + -1*R119 + -1*R116 = 0 || R104 + R102 < 1) && (R124 + R121 != 0 || R104 + R102 + -1*R125 + -1*R122 = 0 || R104 + R102 < 1) && (R129 + R127 != 0 || R104 + R102 + -1*R130 + -1*R128 = 0 || R104 + R102 < 1) && (R134 + R131 != 0 || R104 + R102 + -1*R135 + -1*R132 = 0 || R104 + R102 < 1) && (R36 = 0 || (R5003 = 0 && R5004 = 0)) && (R36 = 0 || (R5007 = 0 && R5008 = 0)) && (R36 = 0 || (R5009 = 0 && R5010 = 0)) && (R36 = 0 || (R5011 = 0 && R5012 = 0)) && (R36 = 0 || (R5013 = 0 && R5014 = 0)) && (R36 = 0 || (R5015 = 0 && R5016 = 0)) && (R36 = 0 || (R5021 = 0 && R5022 = 0)) && (R38 = 0 || (R5025 = 0 && R5026 = 0)) && (R38 = 0 || (R5027 = 0 && R5028 = 0)) && (R38 = 0 || (R5029 = 0 && R5030 = 0)) && (R38 = 0 || (R5031 = 0 && R5032 = 0)) && (R38 = 0 || (R5033 = 0 && R5034 = 0)) && (R38 = 0 || (R5035 = 0 && R5036 = 0)) && (R38 = 0 || (R5037 = 0 && R5038 = 0)) && (R38 = 0 || (R5039 = 0 && R5040 = 0)) && (R38 = 0 || (R5041 = 0 && R5042 = 0)) && (R38 = 0 || (R5043 = 0 && R5044 = 0)) && (R38 = 0 || (R5045 = 0 && R5046 = 0)) && (R38 = 0 || (R5047 = 0 && R5048 = 0)) && (R38 = 0 || (R5049 = 0 && R5050 = 0)) && (R38 = 0 || (R5051 = 0 && R5052 = 0)) && (R38 = 0 || (R5053 = 0 && R5054 = 0)) && (R38 = 0 || (R5055 = 0 && R5056 = 0)) && (R38 = 0 || (R5057 = 0 && R5058 = 0)) && (R38 = 0 || (R5059 = 0 && R5060 = 0)) && (R38 = 0 || (R5061 = 0 && R5062 = 0)) && (R38 = 0 || (R5063 = 0 && R5064 = 0)) && (R38 = 0 || (R5065 = 0 && R5066 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 + -1*R104 + -1*R102 = 0)) && (R108 + R105 = 0 || R104 + R102 < 1) && (R113 + R111 = 0 || R104 + R102 < 1) && (R118 + R115 = 0 || R104 + R102 < 1) && (R124 + R121 = 0 || R104 + R102 < 1) && (R129 + R127 = 0 || R104 + R102 < 1) && (R134 + R131 = 0 || R104 + R102 < 1) && (R142 + R139 = 0 || (R140 + R137 = 0 && R141 + R138 = 0)) && (R148 + R145 = 0 || (R146 + R143 = 0 && R147 + R144 = 0)) && (R148 + R145 = 0 || (R152 + R149 = 0 && R153 + R150 = 0)) && (R160 + R157 = 0 || (R158 + R155 = 0 && R159 + R156 = 0)) && (R160 + R157 = 0 || (R164 + R161 = 0 && R165 + R162 = 0)) && (R4542 + R4539 = 0 || (R4540 + R4537 = 0 && R4541 + R4538 = 0)) && (R4542 + R4539 = 0 || (R4934 + R4931 = 0 && R4935 + R4932 = 0));
// End of Parikh automata intersection problem
