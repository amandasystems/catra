// Parikh automata intersection problem, generated by OSTRICH+
counter int R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R20, R21, R24, R2579, R2580, R2581, R2582, R2583, R2584, R2779, R2780, R2781, R2782, R2783, R2784, R2785, R2786, R2787, R2788, R2789, R2790, R2791, R2792, R2793, R2794, R2795, R2796, R2797, R2798, R2799, R2800, R2801, R2802, R2803, R2804, R2805, R2806, R2807, R2808, R2809, R2810, R2811, R2812, R2813, R2814, R2815, R2816, R2817, R2818, R2819, R2820, R2821, R2822, R2823, R2824, R2825, R2826, R2827, R2828, R2829, R2830, R2831, R2832, R2833, R2834, R2835, R2836, R2837, R2838, R2839, R2840, R2841, R2842, R2843, R2844, R2845, R2846, R2847, R2848, R2849, R2850, R2851, R2852, R2853, R2854, R2855, R2856, R2857, R2858, R2859, R2860, R2861, R2862, R2863, R2864, R2865, R2866, R2867, R2868, R2869, R2870, R2871, R2872, R2873, R2874, R2875, R2876, R2877, R2878, R2879, R2880, R2881, R2882, R2883, R2884, R2885, R2886, R2887, R2888, R2889, R2890, R2891, R2892, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R2900, R2901, R2902, R2903, R2904, R2905, R2906, R2907, R2908, R2909, R2910, R2911, R2912, R2913, R2914, R2915, R2916, R2917, R2918, R2919, R2920, R2921, R2922, R2923, R2924, R2925, R2926, R2927, R2928, R2929, R2930, R2931, R2932, R2933, R2934, R2935, R2936, R2937, R2938, R2939, R2940, R2941, R2942, R2943, R2944, R2945, R2946, R2947, R2948, R2949, R2950, R2951, R2952, R2953, R2954, R2955, R2956, R2957, R2958, R2959, R2960, R2961, R2962, R2963, R2964, R2965, R2966, R2967, R2968, R2969, R2970, R2971, R2972, R35, R36, R37, R38, R39, R40, R41, R42, R5, R6, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R7, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P96
automaton P96_0 {
  init s0;
  s0 -> s1 [122, 122];
  accepting s1;
};
};
synchronised {  // Automata constraining P63
automaton P63_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2809 += 1, R2810 += 1 };
  s0 -> s1 [0, 65535] { R2810 += 1, R37 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2810 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2811 += 1, R2812 += 1 };
  s0 -> s1 [0, 65535] { R2812 += 1, R88 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2812 += 1, R88 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 89] { R2814 += 1 };
  s0 -> s0 [0, 65535] { R2813 += 1, R2814 += 1 };
  s0 -> s2 [0, 65535] { R2814 += 1, R90 += 1 };
  s0 -> s1 [91, 65535] { R2814 += 1 };
  s1 -> s1 [0, 89] { R2814 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R2814 += 1 };
  s2 -> s1 [0, 89] { R2814 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2814 += 1, R90 += 1 };
  s2 -> s1 [91, 65535] { R2814 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 88] { R2816 += 1 };
  s0 -> s0 [0, 65535] { R2815 += 1, R2816 += 1 };
  s0 -> s2 [0, 65535] { R2816 += 1, R92 += 1 };
  s0 -> s1 [90, 65535] { R2816 += 1 };
  s1 -> s1 [0, 88] { R2816 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R2816 += 1 };
  s2 -> s1 [0, 88] { R2816 += 1 };
  s2 -> s2 [0, 65535] { R2816 += 1, R92 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R2816 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 72] { R2818 += 1 };
  s0 -> s2 [0, 65535] { R2818 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R2817 += 1, R2818 += 1 };
  s0 -> s1 [74, 65535] { R2818 += 1 };
  s1 -> s1 [0, 72] { R2818 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [74, 65535] { R2818 += 1 };
  s2 -> s1 [0, 72] { R2818 += 1 };
  s2 -> s2 [0, 65535] { R2818 += 1, R94 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R2818 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R2820 += 1, R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R2820 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R2819 += 1, R2820 += 1 };
  s1 -> s1 [0, 65535] { R2820 += 1, R99 += 1, R100 += 1 };
  s1 -> s4 [0, 65535] { R2820 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2820 += 1, R99 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R2820 += 1, R98 += 1, R99 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2820 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2822 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R2821 += 1, R2822 += 1 };
  s0 -> s2 [108, 108] { R2822 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R2822 += 1, R103 += 1, R104 += 1 };
  s1 -> s2 [108, 108] { R2822 += 1, R104 += 1 };
  s2 -> s3 [111, 111] { R2822 += 1, R104 += 1 };
  s3 -> s4 [99, 99] { R2822 += 1, R104 += 1 };
  s4 -> s5 [97, 97] { R2822 += 1, R104 += 1 };
  s5 -> s6 [108, 108] { R2822 += 1, R104 += 1 };
  s6 -> s7 [104, 104] { R2822 += 1, R104 += 1 };
  s7 -> s8 [111, 111] { R2822 += 1, R104 += 1 };
  s8 -> s9 [115, 115] { R2822 += 1, R104 += 1 };
  s9 -> s10 [116, 116] { R2822 += 1, R104 += 1 };
  s10 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R2822 += 1 };
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2824 += 1, R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R2824 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R2823 += 1, R2824 += 1 };
  s1 -> s1 [0, 65535] { R2824 += 1, R108 += 1, R109 += 1 };
  s1 -> s2 [0, 65535] { R2824 += 1, R109 += 1, R110 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2824 += 1 };
  s2 -> s2 [0, 65535] { R2824 += 1, R109 += 1, R110 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2824 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 107] { R2826 += 1, R114 += 1 };
  s0 -> s0 [0, 65535] { R2825 += 1, R2826 += 1 };
  s0 -> s2 [0, 65535] { R2826 += 1, R113 += 1, R114 += 1 };
  s0 -> s3 [108, 108] { R2826 += 1, R114 += 1 };
  s0 -> s1 [109, 65535] { R2826 += 1, R114 += 1 };
  s1 -> s13 [0, 65535] { R2826 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2826 += 1, R114 += 1 };
  s2 -> s1 [0, 107] { R2826 += 1, R114 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2826 += 1, R113 += 1, R114 += 1 };
  s2 -> s3 [108, 108] { R2826 += 1, R114 += 1 };
  s2 -> s1 [109, 65535] { R2826 += 1, R114 += 1 };
  s3 -> s1 [0, 110] { R2826 += 1, R114 += 1 };
  s3 -> s3 [0, 65535] { R2826 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R2826 += 1, R114 += 1 };
  s3 -> s1 [112, 65535] { R2826 += 1, R114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2826 += 1, R114 += 1 };
  s5 -> s5 [0, 65535] { R2826 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R2826 += 1, R114 += 1 };
  s5 -> s1 [100, 65535] { R2826 += 1, R114 += 1 };
  s6 -> s1 [0, 96] { R2826 += 1, R114 += 1 };
  s6 -> s6 [0, 65535] { R2826 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R2826 += 1, R114 += 1 };
  s6 -> s1 [98, 65535] { R2826 += 1, R114 += 1 };
  s7 -> s1 [0, 107] { R2826 += 1, R114 += 1 };
  s7 -> s7 [0, 65535] { R2826 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R2826 += 1, R114 += 1 };
  s7 -> s1 [109, 65535] { R2826 += 1, R114 += 1 };
  s8 -> s1 [0, 103] { R2826 += 1, R114 += 1 };
  s8 -> s8 [0, 65535] { R2826 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R2826 += 1, R114 += 1 };
  s8 -> s1 [105, 65535] { R2826 += 1, R114 += 1 };
  s9 -> s1 [0, 110] { R2826 += 1, R114 += 1 };
  s9 -> s9 [0, 65535] { R2826 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R2826 += 1, R114 += 1 };
  s9 -> s1 [112, 65535] { R2826 += 1, R114 += 1 };
  s10 -> s1 [0, 114] { R2826 += 1, R114 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R2826 += 1 };
  s10 -> s11 [115, 115] { R2826 += 1, R114 += 1 };
  s10 -> s1 [116, 65535] { R2826 += 1, R114 += 1 };
  s11 -> s1 [0, 115] { R2826 += 1, R114 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R2826 += 1 };
  s11 -> s12 [116, 116] { R2826 += 1, R114 += 1 };
  s11 -> s1 [117, 65535] { R2826 += 1, R114 += 1 };
  s12 -> s1 [0, 65535] { R2826 += 1, R114 += 1 };
  s13 -> s13 [0, 65535] { R2826 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R2827 += 1, R2828 += 1 };
  s0 -> s1 [0, 65535] { R2828 += 1, R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R2828 += 1, R119 += 1, R120 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2828 += 1, R118 += 1, R119 += 1 };
  s1 -> s2 [0, 65535] { R2828 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2828 += 1 };
  s2 -> s2 [0, 65535] { R2828 += 1, R119 += 1, R120 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2828 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R2830 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R2829 += 1, R2830 += 1 };
  s0 -> s2 [0, 65535] { R2830 += 1, R124 += 1, R125 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2830 += 1 };
  s1 -> s1 [0, 65535] { R2830 += 1, R125 += 1, R126 += 1 };
  s2 -> s1 [0, 65535] { R2830 += 1, R125 += 1, R126 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2830 += 1, R124 += 1, R125 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2830 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 107] { R2832 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R2832 += 1, R129 += 1, R130 += 1 };
  s0 -> s0 [0, 65535] { R2831 += 1, R2832 += 1 };
  s0 -> s3 [108, 108] { R2832 += 1, R130 += 1 };
  s0 -> s1 [109, 65535] { R2832 += 1, R130 += 1 };
  s1 -> s1 [0, 65535] { R2832 += 1, R130 += 1 };
  s1 -> s13 [0, 65535] { R2832 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R2832 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R2832 += 1, R129 += 1, R130 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R2832 += 1, R130 += 1 };
  s2 -> s1 [109, 65535] { R2832 += 1, R130 += 1 };
  s3 -> s1 [0, 110] { R2832 += 1, R130 += 1 };
  s3 -> s3 [0, 65535] { R2832 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R2832 += 1, R130 += 1 };
  s3 -> s1 [112, 65535] { R2832 += 1, R130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2832 += 1, R130 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2832 += 1 };
  s5 -> s6 [99, 99] { R2832 += 1, R130 += 1 };
  s5 -> s1 [100, 65535] { R2832 += 1, R130 += 1 };
  s6 -> s1 [0, 96] { R2832 += 1, R130 += 1 };
  s6 -> s6 [0, 65535] { R2832 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R2832 += 1, R130 += 1 };
  s6 -> s1 [98, 65535] { R2832 += 1, R130 += 1 };
  s7 -> s1 [0, 107] { R2832 += 1, R130 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R2832 += 1 };
  s7 -> s8 [108, 108] { R2832 += 1, R130 += 1 };
  s7 -> s1 [109, 65535] { R2832 += 1, R130 += 1 };
  s8 -> s1 [0, 103] { R2832 += 1, R130 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R2832 += 1 };
  s8 -> s9 [104, 104] { R2832 += 1, R130 += 1 };
  s8 -> s1 [105, 65535] { R2832 += 1, R130 += 1 };
  s9 -> s1 [0, 110] { R2832 += 1, R130 += 1 };
  s9 -> s9 [0, 65535] { R2832 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R2832 += 1, R130 += 1 };
  s9 -> s1 [112, 65535] { R2832 += 1, R130 += 1 };
  s10 -> s1 [0, 114] { R2832 += 1, R130 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R2832 += 1 };
  s10 -> s11 [115, 115] { R2832 += 1, R130 += 1 };
  s10 -> s1 [116, 65535] { R2832 += 1, R130 += 1 };
  s11 -> s1 [0, 115] { R2832 += 1, R130 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R2832 += 1 };
  s11 -> s12 [116, 116] { R2832 += 1, R130 += 1 };
  s11 -> s1 [117, 65535] { R2832 += 1, R130 += 1 };
  s12 -> s1 [0, 65535] { R2832 += 1, R130 += 1 };
  s13 -> s13 [0, 65535] { R2832 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2834 += 1, R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R2834 += 1, R135 += 1, R136 += 1 };
  s0 -> s0 [0, 65535] { R2833 += 1, R2834 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2834 += 1, R134 += 1, R135 += 1 };
  s1 -> s2 [0, 65535] { R2834 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2834 += 1, R135 += 1, R136 += 1 };
  s2 -> s4 [0, 65535] { R2834 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2834 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2836 += 1, R141 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R2836 += 1, R140 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R2835 += 1, R2836 += 1 };
  s1 -> s1 [0, 65535] { R2836 += 1, R141 += 1, R142 += 1 };
  s1 -> s4 [0, 65535] { R2836 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2836 += 1, R141 += 1, R142 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2836 += 1, R140 += 1, R141 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2836 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2838 += 1 };
  s0 -> s0 [0, 65535] { R2837 += 1, R2838 += 1 };
  s1 -> s1 [0, 65535] { R2838 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2839 += 1, R2840 += 1 };
  s0 -> s1 [0, 65535] { R2840 += 1, R147 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R2840 += 1, R146 += 1, R147 += 1 };
  s1 -> s1 [0, 65535] { R2840 += 1, R147 += 1, R148 += 1 };
  s1 -> s4 [0, 65535] { R2840 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2840 += 1, R147 += 1, R148 += 1 };
  s2 -> s2 [0, 65535] { R2840 += 1, R146 += 1, R147 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2840 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2842 += 1 };
  s0 -> s0 [0, 65535] { R2841 += 1, R2842 += 1 };
  s1 -> s1 [0, 65535] { R2842 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 88] { R2844 += 1, R153 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R2843 += 1, R2844 += 1 };
  s0 -> s2 [0, 65535] { R2844 += 1, R152 += 1, R153 += 1 };
  s0 -> s3 [89, 89] { R2844 += 1, R153 += 1, R154 += 1 };
  s0 -> s4 [89, 89] { R2844 += 1, R153 += 1, R154 += 1 };
  s0 -> s1 [90, 65535] { R2844 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [0, 88] { R2844 += 1, R153 += 1, R154 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2844 += 1 };
  s1 -> s3 [89, 89] { R2844 += 1, R153 += 1, R154 += 1 };
  s1 -> s4 [89, 89] { R2844 += 1, R153 += 1, R154 += 1 };
  s1 -> s1 [90, 65535] { R2844 += 1, R153 += 1, R154 += 1 };
  s2 -> s1 [0, 88] { R2844 += 1, R153 += 1, R154 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2844 += 1, R152 += 1, R153 += 1 };
  s2 -> s3 [89, 89] { R2844 += 1, R153 += 1, R154 += 1 };
  s2 -> s4 [89, 89] { R2844 += 1, R153 += 1, R154 += 1 };
  s2 -> s1 [90, 65535] { R2844 += 1, R153 += 1, R154 += 1 };
  s3 -> s3 [0, 65535] { R2844 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2844 += 1, R153 += 1, R154 += 1 };
  s4 -> s6 [0, 65535] { R2844 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2844 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R2845 += 1, R2846 += 1 };
  s0 -> s1 [0, 65535] { R2846 += 1, R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R2846 += 1, R159 += 1, R160 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2846 += 1, R158 += 1, R159 += 1 };
  s1 -> s2 [0, 65535] { R2846 += 1, R159 += 1, R160 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2846 += 1 };
  s2 -> s2 [0, 65535] { R2846 += 1, R159 += 1, R160 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2846 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R2847 += 1, R2848 += 1 };
  s0 -> s1 [0, 65535] { R2848 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2848 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 72] { R2850 += 1, R165 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R2850 += 1, R164 += 1, R165 += 1 };
  s0 -> s0 [0, 65535] { R2849 += 1, R2850 += 1 };
  s0 -> s3 [73, 73] { R2850 += 1, R165 += 1, R166 += 1 };
  s0 -> s4 [73, 73] { R2850 += 1, R165 += 1, R166 += 1 };
  s0 -> s1 [74, 65535] { R2850 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [0, 72] { R2850 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [0, 65535] { R2850 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [73, 73] { R2850 += 1, R165 += 1, R166 += 1 };
  s1 -> s4 [73, 73] { R2850 += 1, R165 += 1, R166 += 1 };
  s1 -> s1 [74, 65535] { R2850 += 1, R165 += 1, R166 += 1 };
  s2 -> s1 [0, 72] { R2850 += 1, R165 += 1, R166 += 1 };
  s2 -> s2 [0, 65535] { R2850 += 1, R164 += 1, R165 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [73, 73] { R2850 += 1, R165 += 1, R166 += 1 };
  s2 -> s4 [73, 73] { R2850 += 1, R165 += 1, R166 += 1 };
  s2 -> s1 [74, 65535] { R2850 += 1, R165 += 1, R166 += 1 };
  s3 -> s3 [0, 65535] { R2850 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2850 += 1, R165 += 1, R166 += 1 };
  s4 -> s5 [0, 65535] { R2850 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2850 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R2873 += 1, R2874 += 1 };
  s0 -> s1 [0, 65535] { R2874 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R2874 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2876 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R2875 += 1, R2876 += 1 };
  s0 -> s2 [65, 65] { R2876 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R2876 += 1, R87 += 1 };
  s0 -> s1 [66, 65535] { R2876 += 1, R87 += 1 };
  s1 -> s1 [0, 64] { R2876 += 1, R87 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2876 += 1, R87 += 1 };
  s1 -> s3 [65, 65] { R2876 += 1, R87 += 1 };
  s1 -> s1 [66, 65535] { R2876 += 1, R87 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2876 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2878 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R2877 += 1, R2878 += 1 };
  s0 -> s2 [65, 65] { R2878 += 1, R89 += 1 };
  s0 -> s3 [65, 65] { R2878 += 1, R89 += 1 };
  s0 -> s1 [66, 65535] { R2878 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R2878 += 1, R89 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2878 += 1, R89 += 1 };
  s1 -> s3 [65, 65] { R2878 += 1, R89 += 1 };
  s1 -> s1 [66, 65535] { R2878 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R2878 += 1, R89 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R2880 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R2879 += 1, R2880 += 1 };
  s0 -> s2 [65, 65] { R2880 += 1, R91 += 1 };
  s0 -> s3 [65, 65] { R2880 += 1, R91 += 1 };
  s0 -> s1 [66, 65535] { R2880 += 1, R91 += 1 };
  s1 -> s1 [0, 64] { R2880 += 1, R91 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2880 += 1, R91 += 1 };
  s1 -> s3 [65, 65] { R2880 += 1, R91 += 1 };
  s1 -> s1 [66, 65535] { R2880 += 1, R91 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2880 += 1, R91 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R2882 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R2881 += 1, R2882 += 1 };
  s0 -> s2 [65, 65] { R2882 += 1, R93 += 1 };
  s0 -> s3 [65, 65] { R2882 += 1, R93 += 1 };
  s0 -> s1 [66, 65535] { R2882 += 1, R93 += 1 };
  s1 -> s1 [0, 64] { R2882 += 1, R93 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2882 += 1, R93 += 1 };
  s1 -> s3 [65, 65] { R2882 += 1, R93 += 1 };
  s1 -> s1 [66, 65535] { R2882 += 1, R93 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2882 += 1, R93 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R2884 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R2883 += 1, R2884 += 1 };
  s0 -> s2 [65, 65] { R2884 += 1, R95 += 1, R96 += 1 };
  s0 -> s3 [65, 65] { R2884 += 1, R95 += 1, R96 += 1 };
  s0 -> s1 [66, 65535] { R2884 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 64] { R2884 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2884 += 1, R95 += 1, R96 += 1 };
  s1 -> s3 [65, 65] { R2884 += 1, R95 += 1, R96 += 1 };
  s1 -> s1 [66, 65535] { R2884 += 1, R95 += 1, R96 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2884 += 1, R95 += 1, R96 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R2886 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R2885 += 1, R2886 += 1 };
  s0 -> s2 [65, 65] { R2886 += 1, R101 += 1, R102 += 1 };
  s0 -> s3 [65, 65] { R2886 += 1, R101 += 1, R102 += 1 };
  s0 -> s1 [66, 65535] { R2886 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 64] { R2886 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2886 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [65, 65] { R2886 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [66, 65535] { R2886 += 1, R101 += 1, R102 += 1 };
  s2 -> s2 [0, 65535] { R2886 += 1, R101 += 1, R102 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R2888 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R2887 += 1, R2888 += 1 };
  s0 -> s2 [65, 65] { R2888 += 1, R105 += 1, R106 += 1 };
  s0 -> s3 [65, 65] { R2888 += 1, R105 += 1, R106 += 1 };
  s0 -> s1 [66, 65535] { R2888 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 64] { R2888 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2888 += 1, R105 += 1, R106 += 1 };
  s1 -> s3 [65, 65] { R2888 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [66, 65535] { R2888 += 1, R105 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R2888 += 1, R105 += 1, R106 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R2890 += 1, R111 += 1, R112 += 1 };
  s0 -> s0 [0, 65535] { R2889 += 1, R2890 += 1 };
  s0 -> s2 [65, 65] { R2890 += 1, R111 += 1, R112 += 1 };
  s0 -> s3 [65, 65] { R2890 += 1, R111 += 1, R112 += 1 };
  s0 -> s1 [66, 65535] { R2890 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 64] { R2890 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2890 += 1, R111 += 1, R112 += 1 };
  s1 -> s3 [65, 65] { R2890 += 1, R111 += 1, R112 += 1 };
  s1 -> s1 [66, 65535] { R2890 += 1, R111 += 1, R112 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2890 += 1, R111 += 1, R112 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R2892 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R2891 += 1, R2892 += 1 };
  s0 -> s2 [65, 65] { R2892 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [65, 65] { R2892 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [66, 65535] { R2892 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 64] { R2892 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2892 += 1, R115 += 1, R116 += 1 };
  s1 -> s3 [65, 65] { R2892 += 1, R115 += 1, R116 += 1 };
  s1 -> s1 [66, 65535] { R2892 += 1, R115 += 1, R116 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2892 += 1, R115 += 1, R116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R2894 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R2893 += 1, R2894 += 1 };
  s0 -> s2 [65, 65] { R2894 += 1, R121 += 1, R122 += 1 };
  s0 -> s3 [65, 65] { R2894 += 1, R121 += 1, R122 += 1 };
  s0 -> s1 [66, 65535] { R2894 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 64] { R2894 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2894 += 1, R121 += 1, R122 += 1 };
  s1 -> s3 [65, 65] { R2894 += 1, R121 += 1, R122 += 1 };
  s1 -> s1 [66, 65535] { R2894 += 1, R121 += 1, R122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2894 += 1, R121 += 1, R122 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R2896 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R2895 += 1, R2896 += 1 };
  s0 -> s2 [65, 65] { R2896 += 1, R127 += 1, R128 += 1 };
  s0 -> s3 [65, 65] { R2896 += 1, R127 += 1, R128 += 1 };
  s0 -> s1 [66, 65535] { R2896 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 64] { R2896 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2896 += 1, R127 += 1, R128 += 1 };
  s1 -> s3 [65, 65] { R2896 += 1, R127 += 1, R128 += 1 };
  s1 -> s1 [66, 65535] { R2896 += 1, R127 += 1, R128 += 1 };
  s2 -> s2 [0, 65535] { R2896 += 1, R127 += 1, R128 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R2898 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R2897 += 1, R2898 += 1 };
  s0 -> s2 [65, 65] { R2898 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [65, 65] { R2898 += 1, R131 += 1, R132 += 1 };
  s0 -> s1 [66, 65535] { R2898 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 64] { R2898 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2898 += 1, R131 += 1, R132 += 1 };
  s1 -> s3 [65, 65] { R2898 += 1, R131 += 1, R132 += 1 };
  s1 -> s1 [66, 65535] { R2898 += 1, R131 += 1, R132 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2898 += 1, R131 += 1, R132 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R2900 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R2899 += 1, R2900 += 1 };
  s0 -> s2 [65, 65] { R2900 += 1, R137 += 1, R138 += 1 };
  s0 -> s3 [65, 65] { R2900 += 1, R137 += 1, R138 += 1 };
  s0 -> s1 [66, 65535] { R2900 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R2900 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2900 += 1, R137 += 1, R138 += 1 };
  s1 -> s3 [65, 65] { R2900 += 1, R137 += 1, R138 += 1 };
  s1 -> s1 [66, 65535] { R2900 += 1, R137 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R2900 += 1, R137 += 1, R138 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R2902 += 1 };
  s0 -> s0 [0, 65535] { R2901 += 1, R2902 += 1 };
  s0 -> s2 [65, 65] { R2902 += 1 };
  s0 -> s3 [65, 65] { R2902 += 1 };
  s0 -> s1 [66, 65535] { R2902 += 1 };
  s1 -> s1 [0, 64] { R2902 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2902 += 1 };
  s1 -> s3 [65, 65] { R2902 += 1 };
  s1 -> s1 [66, 65535] { R2902 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2902 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R2904 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R2903 += 1, R2904 += 1 };
  s0 -> s2 [65, 65] { R2904 += 1, R143 += 1, R144 += 1 };
  s0 -> s3 [65, 65] { R2904 += 1, R143 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R2904 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R2904 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2904 += 1, R143 += 1, R144 += 1 };
  s1 -> s3 [65, 65] { R2904 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R2904 += 1, R143 += 1, R144 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2904 += 1, R143 += 1, R144 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R2906 += 1 };
  s0 -> s0 [0, 65535] { R2905 += 1, R2906 += 1 };
  s0 -> s2 [65, 65] { R2906 += 1 };
  s0 -> s3 [65, 65] { R2906 += 1 };
  s0 -> s1 [66, 65535] { R2906 += 1 };
  s1 -> s1 [0, 64] { R2906 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2906 += 1 };
  s1 -> s3 [65, 65] { R2906 += 1 };
  s1 -> s1 [66, 65535] { R2906 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2906 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R2908 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R2907 += 1, R2908 += 1 };
  s0 -> s2 [65, 65] { R2908 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [65, 65] { R2908 += 1, R149 += 1, R150 += 1 };
  s0 -> s1 [66, 65535] { R2908 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 64] { R2908 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2908 += 1, R149 += 1, R150 += 1 };
  s1 -> s3 [65, 65] { R2908 += 1, R149 += 1, R150 += 1 };
  s1 -> s1 [66, 65535] { R2908 += 1, R149 += 1, R150 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R2908 += 1, R149 += 1, R150 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R2910 += 1, R155 += 1, R156 += 1 };
  s0 -> s0 [0, 65535] { R2909 += 1, R2910 += 1 };
  s0 -> s2 [65, 65] { R2910 += 1, R155 += 1, R156 += 1 };
  s0 -> s3 [65, 65] { R2910 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [66, 65535] { R2910 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 64] { R2910 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2910 += 1, R155 += 1, R156 += 1 };
  s1 -> s3 [65, 65] { R2910 += 1, R155 += 1, R156 += 1 };
  s1 -> s1 [66, 65535] { R2910 += 1, R155 += 1, R156 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2910 += 1, R155 += 1, R156 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R2912 += 1 };
  s0 -> s0 [0, 65535] { R2911 += 1, R2912 += 1 };
  s0 -> s2 [65, 65] { R2912 += 1 };
  s0 -> s3 [65, 65] { R2912 += 1 };
  s0 -> s1 [66, 65535] { R2912 += 1 };
  s1 -> s1 [0, 64] { R2912 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2912 += 1 };
  s1 -> s3 [65, 65] { R2912 += 1 };
  s1 -> s1 [66, 65535] { R2912 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2912 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R2914 += 1, R161 += 1, R162 += 1 };
  s0 -> s0 [0, 65535] { R2913 += 1, R2914 += 1 };
  s0 -> s2 [65, 65] { R2914 += 1, R161 += 1, R162 += 1 };
  s0 -> s3 [65, 65] { R2914 += 1, R161 += 1, R162 += 1 };
  s0 -> s1 [66, 65535] { R2914 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [0, 64] { R2914 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [65, 65] { R2914 += 1, R161 += 1, R162 += 1 };
  s1 -> s3 [65, 65] { R2914 += 1, R161 += 1, R162 += 1 };
  s1 -> s1 [66, 65535] { R2914 += 1, R161 += 1, R162 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2914 += 1, R161 += 1, R162 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 43] { R2916 += 1 };
  s0 -> s0 [0, 65535] { R2915 += 1, R2916 += 1 };
  s0 -> s1 [45, 45] { R2916 += 1 };
  s0 -> s2 [46, 46] { R2916 += 1 };
  s0 -> s1 [48, 62] { R2916 += 1 };
  s0 -> s3 [65, 65] { R2916 += 1 };
  s0 -> s1 [66, 65535] { R2916 += 1 };
  s1 -> s1 [0, 43] { R2916 += 1 };
  s1 -> s1 [45, 45] { R2916 += 1 };
  s1 -> s2 [46, 46] { R2916 += 1 };
  s1 -> s1 [48, 62] { R2916 += 1 };
  s1 -> s3 [65, 65] { R2916 += 1 };
  s1 -> s1 [66, 65535] { R2916 += 1 };
  s2 -> s1 [0, 43] { R2916 += 1 };
  s2 -> s1 [45, 45] { R2916 += 1 };
  s2 -> s2 [46, 46] { R2916 += 1 };
  s2 -> s1 [48, 62] { R2916 += 1 };
  s2 -> s3 [65, 65] { R2916 += 1 };
  s2 -> s1 [66, 114] { R2916 += 1 };
  s2 -> s8 [115, 115] { R2916 += 1 };
  s2 -> s1 [116, 65535] { R2916 += 1 };
  s3 -> s3 [0, 43] { R2916 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2916 += 1 };
  s3 -> s4 [46, 46] { R2916 += 1 };
  s3 -> s3 [48, 62] { R2916 += 1 };
  s3 -> s3 [65, 65535] { R2916 += 1 };
  s4 -> s3 [0, 43] { R2916 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2916 += 1 };
  s4 -> s4 [46, 46] { R2916 += 1 };
  s4 -> s3 [48, 62] { R2916 += 1 };
  s4 -> s3 [65, 114] { R2916 += 1 };
  s4 -> s5 [115, 115] { R2916 += 1 };
  s4 -> s3 [116, 65535] { R2916 += 1 };
  s5 -> s3 [0, 43] { R2916 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2916 += 1 };
  s5 -> s4 [46, 46] { R2916 += 1 };
  s5 -> s3 [48, 62] { R2916 += 1 };
  s5 -> s3 [65, 110] { R2916 += 1 };
  s5 -> s6 [111, 111] { R2916 += 1 };
  s5 -> s3 [112, 65535] { R2916 += 1 };
  s6 -> s3 [0, 43] { R2916 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2916 += 1 };
  s6 -> s4 [46, 46] { R2916 += 1 };
  s6 -> s3 [48, 62] { R2916 += 1 };
  s6 -> s3 [65, 98] { R2916 += 1 };
  s6 -> s7 [99, 99] { R2916 += 1 };
  s6 -> s3 [100, 65535] { R2916 += 1 };
  s7 -> s3 [0, 43] { R2916 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2916 += 1 };
  s7 -> s4 [46, 46] { R2916 += 1 };
  s7 -> s3 [48, 62] { R2916 += 1 };
  s7 -> s3 [65, 106] { R2916 += 1 };
  s7 -> s3 [108, 65535] { R2916 += 1 };
  s8 -> s1 [0, 43] { R2916 += 1 };
  s8 -> s1 [45, 45] { R2916 += 1 };
  s8 -> s2 [46, 46] { R2916 += 1 };
  s8 -> s1 [48, 62] { R2916 += 1 };
  s8 -> s3 [65, 65] { R2916 += 1 };
  s8 -> s1 [66, 110] { R2916 += 1 };
  s8 -> s9 [111, 111] { R2916 += 1 };
  s8 -> s1 [112, 65535] { R2916 += 1 };
  s9 -> s1 [0, 43] { R2916 += 1 };
  s9 -> s1 [45, 45] { R2916 += 1 };
  s9 -> s2 [46, 46] { R2916 += 1 };
  s9 -> s1 [48, 62] { R2916 += 1 };
  s9 -> s3 [65, 65] { R2916 += 1 };
  s9 -> s1 [66, 98] { R2916 += 1 };
  s9 -> s10 [99, 99] { R2916 += 1 };
  s9 -> s1 [100, 65535] { R2916 += 1 };
  s10 -> s1 [0, 43] { R2916 += 1 };
  s10 -> s1 [45, 45] { R2916 += 1 };
  s10 -> s2 [46, 46] { R2916 += 1 };
  s10 -> s1 [48, 62] { R2916 += 1 };
  s10 -> s3 [65, 65] { R2916 += 1 };
  s10 -> s1 [66, 106] { R2916 += 1 };
  s10 -> s1 [108, 65535] { R2916 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 65535] { R2918 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R2917 += 1, R2918 += 1 };
  s1 -> s1 [0, 65535] { R2918 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 57] { R2920 += 1 };
  s0 -> s2 [0, 65535] { R2920 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R2919 += 1, R2920 += 1 };
  s0 -> s3 [58, 58] { R2920 += 1 };
  s0 -> s1 [59, 65535] { R2920 += 1 };
  s1 -> s1 [0, 57] { R2920 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2920 += 1 };
  s1 -> s1 [59, 65535] { R2920 += 1 };
  s2 -> s1 [0, 57] { R2920 += 1 };
  s2 -> s2 [0, 65535] { R2920 += 1, R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2920 += 1 };
  s2 -> s1 [59, 65535] { R2920 += 1 };
  s3 -> s3 [0, 65535] { R2920 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R2922 += 1 };
  s0 -> s2 [0, 65535] { R2922 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R2921 += 1, R2922 += 1 };
  s0 -> s3 [65, 65] { R2922 += 1 };
  s0 -> s1 [66, 65535] { R2922 += 1 };
  s1 -> s1 [0, 64] { R2922 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2922 += 1 };
  s1 -> s1 [66, 65535] { R2922 += 1 };
  s2 -> s1 [0, 64] { R2922 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2922 += 1, R21 += 1 };
  s2 -> s3 [65, 65] { R2922 += 1 };
  s2 -> s1 [66, 65535] { R2922 += 1 };
  s3 -> s3 [0, 65535] { R2922 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 90] { R2924 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R2924 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R2923 += 1, R2924 += 1 };
  s0 -> s3 [91, 91] { R2924 += 1, R40 += 1 };
  s0 -> s1 [92, 65535] { R2924 += 1, R40 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2924 += 1, R40 += 1 };
  s1 -> s5 [0, 65535] { R2924 += 1 };
  s2 -> s1 [0, 90] { R2924 += 1, R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2924 += 1, R39 += 1, R40 += 1 };
  s2 -> s3 [91, 91] { R2924 += 1, R40 += 1 };
  s2 -> s1 [92, 65535] { R2924 += 1, R40 += 1 };
  s3 -> s1 [0, 65535] { R2924 += 1, R40 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2924 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 65535] { R2926 += 1, R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R2926 += 1, R42 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2925 += 1, R2926 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2926 += 1, R41 += 1, R42 += 1 };
  s1 -> s2 [0, 65535] { R2926 += 1, R42 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R2926 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2926 += 1, R42 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R2926 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R2928 += 1, R2786 += 1 };
  s0 -> s0 [0, 65535] { R2927 += 1, R2928 += 1 };
  s0 -> s2 [0, 65535] { R2928 += 1, R2785 += 1, R2786 += 1 };
  s0 -> s1 [66, 65535] { R2928 += 1, R2786 += 1 };
  s1 -> s1 [0, 64] { R2928 += 1, R2786 += 1 };
  s1 -> s1 [0, 65535] { R2928 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2928 += 1, R2786 += 1 };
  s2 -> s1 [0, 64] { R2928 += 1, R2786 += 1 };
  s2 -> s2 [0, 65535] { R2928 += 1, R2785 += 1, R2786 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2928 += 1, R2786 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 65535] { R2930 += 1, R2788 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R2930 += 1, R2787 += 1, R2788 += 1 };
  s0 -> s0 [0, 65535] { R2929 += 1, R2930 += 1 };
  s1 -> s1 [0, 65535] { R2930 += 1, R2788 += 1, R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2930 += 1 };
  s2 -> s1 [0, 65535] { R2930 += 1, R2788 += 1, R35 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2930 += 1, R2787 += 1, R2788 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2930 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 65] { R2932 += 1, R2790 += 1 };
  s0 -> s0 [0, 65535] { R2931 += 1, R2932 += 1 };
  s0 -> s2 [0, 65535] { R2932 += 1, R2789 += 1, R2790 += 1 };
  s0 -> s1 [81, 65535] { R2932 += 1, R2790 += 1 };
  s1 -> s1 [0, 65] { R2932 += 1, R2790 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2932 += 1 };
  s1 -> s1 [81, 65535] { R2932 += 1, R2790 += 1 };
  s2 -> s1 [0, 65] { R2932 += 1, R2790 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2932 += 1, R2789 += 1, R2790 += 1 };
  s2 -> s1 [81, 65535] { R2932 += 1, R2790 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 65535] { R2934 += 1, R2791 += 1, R2792 += 1 };
  s0 -> s2 [0, 65535] { R2934 += 1, R2792 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R2933 += 1, R2934 += 1 };
  s1 -> s1 [0, 65535] { R2934 += 1, R2791 += 1, R2792 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2934 += 1, R2792 += 1, R604 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2934 += 1 };
  s2 -> s2 [0, 65535] { R2934 += 1, R2792 += 1, R604 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2934 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_55 {
  init s0;
  s0 -> s1 [0, 80] { R2936 += 1, R2794 += 1 };
  s0 -> s2 [0, 65535] { R2936 += 1, R2793 += 1, R2794 += 1 };
  s0 -> s0 [0, 65535] { R2935 += 1, R2936 += 1 };
  s0 -> s3 [0, 65535] { R2936 += 1, R2794 += 1, R606 += 1 };
  s0 -> s1 [82, 65535] { R2936 += 1, R2794 += 1 };
  s1 -> s1 [0, 80] { R2936 += 1, R2794 += 1 };
  s1 -> s1 [0, 65535] { R2936 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [82, 65535] { R2936 += 1, R2794 += 1 };
  s2 -> s1 [0, 80] { R2936 += 1, R2794 += 1 };
  s2 -> s2 [0, 65535] { R2936 += 1, R2793 += 1, R2794 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2936 += 1, R2794 += 1, R606 += 1 };
  s2 -> s1 [82, 65535] { R2936 += 1, R2794 += 1 };
  s3 -> s1 [0, 80] { R2936 += 1, R2794 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2936 += 1, R2794 += 1, R606 += 1 };
  s3 -> s5 [0, 65535] { R2936 += 1 };
  s3 -> s1 [82, 65535] { R2936 += 1, R2794 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2936 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_56 {
  init s0;
  s0 -> s1 [0, 80] { R2938 += 1, R2796 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R2938 += 1, R2796 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R2937 += 1, R2938 += 1 };
  s0 -> s3 [0, 65535] { R2938 += 1, R2795 += 1, R2796 += 1 };
  s0 -> s1 [82, 65535] { R2938 += 1, R2796 += 1, R610 += 1 };
  s1 -> s1 [0, 80] { R2938 += 1, R2796 += 1, R610 += 1 };
  s1 -> s5 [0, 65535] { R2938 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2938 += 1, R2796 += 1 };
  s1 -> s1 [82, 65535] { R2938 += 1, R2796 += 1, R610 += 1 };
  s2 -> s1 [0, 80] { R2938 += 1, R2796 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R2938 += 1, R2796 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535] { R2938 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [82, 65535] { R2938 += 1, R2796 += 1, R610 += 1 };
  s3 -> s1 [0, 80] { R2938 += 1, R2796 += 1, R610 += 1 };
  s3 -> s2 [0, 65535] { R2938 += 1, R2796 += 1, R609 += 1, R610 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2938 += 1, R2795 += 1, R2796 += 1 };
  s3 -> s1 [82, 65535] { R2938 += 1, R2796 += 1, R610 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2938 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_57 {
  init s0;
  s0 -> s1 [0, 65535] { R2940 += 1, R2798 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R2940 += 1, R2798 += 1, R614 += 1, R615 += 1 };
  s0 -> s0 [0, 65535] { R2939 += 1, R2940 += 1 };
  s0 -> s3 [0, 65535] { R2940 += 1, R2797 += 1, R2798 += 1 };
  s1 -> s1 [0, 65535] { R2940 += 1, R2798 += 1, R615 += 1, R616 += 1 };
  s1 -> s5 [0, 65535] { R2940 += 1 };
  s1 -> s6 [0, 65535] { R2940 += 1, R2798 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2940 += 1, R2798 += 1, R615 += 1, R616 += 1 };
  s2 -> s5 [0, 65535] { R2940 += 1 };
  s2 -> s2 [0, 65535] { R2940 += 1, R2798 += 1, R614 += 1, R615 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2940 += 1, R2798 += 1, R615 += 1, R616 += 1 };
  s3 -> s2 [0, 65535] { R2940 += 1, R2798 += 1, R614 += 1, R615 += 1 };
  s3 -> s3 [0, 65535] { R2940 += 1, R2797 += 1, R2798 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2940 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2940 += 1 };
  s6 -> s6 [0, 65535] { R2940 += 1, R2798 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_58 {
  init s0;
  s0 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s0 -> s0 [0, 65535] { R2941 += 1, R2942 += 1 };
  s0 -> s2 [0, 65535] { R2942 += 1, R2799 += 1, R2800 += 1 };
  s0 -> s3 [0, 65535] { R2942 += 1, R2800 += 1, R619 += 1, R620 += 1 };
  s0 -> s1 [91, 107] { R2942 += 1, R2800 += 1, R620 += 1 };
  s0 -> s4 [108, 108] { R2942 += 1, R2800 += 1, R620 += 1 };
  s0 -> s1 [109, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s1 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s1 -> s5 [0, 65535] { R2942 += 1 };
  s1 -> s1 [0, 65535] { R2942 += 1, R2800 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s2 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R2942 += 1, R2799 += 1, R2800 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R2942 += 1, R2800 += 1, R619 += 1, R620 += 1 };
  s2 -> s1 [91, 107] { R2942 += 1, R2800 += 1, R620 += 1 };
  s2 -> s4 [108, 108] { R2942 += 1, R2800 += 1, R620 += 1 };
  s2 -> s1 [109, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s3 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s3 -> s5 [0, 65535] { R2942 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2942 += 1, R2800 += 1, R619 += 1, R620 += 1 };
  s3 -> s1 [91, 107] { R2942 += 1, R2800 += 1, R620 += 1 };
  s3 -> s4 [108, 108] { R2942 += 1, R2800 += 1, R620 += 1 };
  s3 -> s1 [109, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s4 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s4 -> s5 [0, 65535] { R2942 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2942 += 1, R2800 += 1 };
  s4 -> s1 [91, 110] { R2942 += 1, R2800 += 1, R620 += 1 };
  s4 -> s7 [111, 111] { R2942 += 1, R2800 += 1, R620 += 1 };
  s4 -> s1 [112, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s5 -> s5 [0, 65535] { R2942 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s7 -> s5 [0, 65535] { R2942 += 1 };
  s7 -> s7 [0, 65535] { R2942 += 1, R2800 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R2942 += 1, R2800 += 1, R620 += 1 };
  s7 -> s8 [99, 99] { R2942 += 1, R2800 += 1, R620 += 1 };
  s7 -> s1 [100, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s8 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s8 -> s5 [0, 65535] { R2942 += 1 };
  s8 -> s8 [0, 65535] { R2942 += 1, R2800 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R2942 += 1, R2800 += 1, R620 += 1 };
  s8 -> s9 [97, 97] { R2942 += 1, R2800 += 1, R620 += 1 };
  s8 -> s1 [98, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s9 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s9 -> s5 [0, 65535] { R2942 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R2942 += 1, R2800 += 1 };
  s9 -> s1 [91, 107] { R2942 += 1, R2800 += 1, R620 += 1 };
  s9 -> s10 [108, 108] { R2942 += 1, R2800 += 1, R620 += 1 };
  s9 -> s1 [109, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s10 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s10 -> s10 [0, 65535] { R2942 += 1, R2800 += 1 };
  s10 -> s5 [0, 65535] { R2942 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R2942 += 1, R2800 += 1, R620 += 1 };
  s10 -> s11 [104, 104] { R2942 += 1, R2800 += 1, R620 += 1 };
  s10 -> s1 [105, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s11 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s11 -> s5 [0, 65535] { R2942 += 1 };
  s11 -> s11 [0, 65535] { R2942 += 1, R2800 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R2942 += 1, R2800 += 1, R620 += 1 };
  s11 -> s12 [111, 111] { R2942 += 1, R2800 += 1, R620 += 1 };
  s11 -> s1 [112, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s12 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s12 -> s5 [0, 65535] { R2942 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R2942 += 1, R2800 += 1 };
  s12 -> s1 [91, 114] { R2942 += 1, R2800 += 1, R620 += 1 };
  s12 -> s13 [115, 115] { R2942 += 1, R2800 += 1, R620 += 1 };
  s12 -> s1 [116, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s13 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s13 -> s5 [0, 65535] { R2942 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R2942 += 1, R2800 += 1 };
  s13 -> s1 [91, 115] { R2942 += 1, R2800 += 1, R620 += 1 };
  s13 -> s14 [116, 116] { R2942 += 1, R2800 += 1, R620 += 1 };
  s13 -> s1 [117, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  s14 -> s1 [0, 81] { R2942 += 1, R2800 += 1, R620 += 1 };
  s14 -> s1 [91, 65535] { R2942 += 1, R2800 += 1, R620 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_59 {
  init s0;
  s0 -> s0 [0, 65535] { R2943 += 1, R2944 += 1 };
  s0 -> s1 [0, 65535] { R2944 += 1, R2802 += 1, R625 += 1, R626 += 1 };
  s0 -> s2 [0, 65535] { R2944 += 1, R2802 += 1, R624 += 1, R625 += 1 };
  s0 -> s3 [0, 65535] { R2944 += 1, R2801 += 1, R2802 += 1 };
  s1 -> s6 [0, 65535] { R2944 += 1, R2802 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2944 += 1 };
  s1 -> s1 [0, 65535] { R2944 += 1, R2802 += 1, R625 += 1, R626 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2944 += 1 };
  s2 -> s1 [0, 65535] { R2944 += 1, R2802 += 1, R625 += 1, R626 += 1 };
  s2 -> s2 [0, 65535] { R2944 += 1, R2802 += 1, R624 += 1, R625 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2944 += 1, R2802 += 1, R625 += 1, R626 += 1 };
  s3 -> s2 [0, 65535] { R2944 += 1, R2802 += 1, R624 += 1, R625 += 1 };
  s3 -> s3 [0, 65535] { R2944 += 1, R2801 += 1, R2802 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2944 += 1 };
  s6 -> s6 [0, 65535] { R2944 += 1, R2802 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2944 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_60 {
  init s0;
  s0 -> s1 [0, 65535] { R2946 += 1, R2803 += 1, R2804 += 1 };
  s0 -> s0 [0, 65535] { R2945 += 1, R2946 += 1 };
  s0 -> s2 [0, 65535] { R2946 += 1, R2804 += 1 };
  s1 -> s1 [0, 65535] { R2946 += 1, R2803 += 1, R2804 += 1 };
  s1 -> s2 [0, 65535] { R2946 += 1, R2804 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2946 += 1 };
  s2 -> s2 [0, 65535] { R2946 += 1, R2804 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2946 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_61 {
  init s0;
  s0 -> s0 [0, 65535] { R2947 += 1, R2948 += 1 };
  s0 -> s1 [0, 65535] { R2948 += 1, R2806 += 1 };
  s0 -> s2 [0, 65535] { R2948 += 1, R2805 += 1, R2806 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2948 += 1, R2806 += 1 };
  s1 -> s4 [0, 65535] { R2948 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2948 += 1, R2806 += 1 };
  s2 -> s2 [0, 65535] { R2948 += 1, R2805 += 1, R2806 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2948 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_62 {
  init s0;
  s0 -> s1 [0, 80] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s1 [0, 65535] { R2950 += 1, R2808 += 1 };
  s0 -> s2 [0, 65535] { R2950 += 1, R2807 += 1, R2808 += 1 };
  s0 -> s0 [0, 65535] { R2949 += 1, R2950 += 1 };
  s0 -> s3 [81, 81] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s4 [81, 81] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s1 [82, 65535] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s1 [0, 80] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s1 [0, 65535] { R2950 += 1, R2808 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2950 += 1 };
  s1 -> s3 [81, 81] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s4 [81, 81] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s1 -> s1 [82, 65535] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s2 -> s1 [0, 80] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s2 -> s1 [0, 65535] { R2950 += 1, R2808 += 1 };
  s2 -> s2 [0, 65535] { R2950 += 1, R2807 += 1, R2808 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [81, 81] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s2 -> s4 [81, 81] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s2 -> s1 [82, 65535] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s3 -> s3 [0, 65535] { R2950 += 1, R2808 += 1, R2783 += 1, R2784 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2950 += 1 };
  s3 -> s7 [0, 65535] { R2950 += 1, R2808 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2950 += 1, R2808 += 1 };
  s4 -> s6 [0, 65535] { R2950 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2950 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2950 += 1 };
  s7 -> s7 [0, 65535] { R2950 += 1, R2808 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_63 {
  init s0;
  s0 -> s0 [0, 65535] { R2951 += 1, R2952 += 1 };
  s0 -> s1 [0, 65535] { R2952 += 1, R2852 += 1, R36 += 1 };
  s0 -> s2 [0, 65535] { R2952 += 1, R2851 += 1, R2852 += 1 };
  s1 -> s4 [0, 65535] { R2952 += 1 };
  s1 -> s1 [0, 65535] { R2952 += 1, R2852 += 1, R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2952 += 1, R2852 += 1, R36 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2952 += 1, R2851 += 1, R2852 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2952 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_64 {
  init s0;
  s0 -> s1 [0, 64] { R2954 += 1, R2854 += 1 };
  s0 -> s0 [0, 65535] { R2953 += 1, R2954 += 1 };
  s0 -> s2 [0, 65535] { R2954 += 1, R2853 += 1, R2854 += 1 };
  s0 -> s3 [65, 65] { R2954 += 1, R2854 += 1 };
  s0 -> s4 [65, 65] { R2954 += 1, R2854 += 1 };
  s0 -> s5 [81, 81] { R2954 += 1, R2854 += 1 };
  s0 -> s1 [82, 65535] { R2954 += 1, R2854 += 1 };
  s1 -> s1 [0, 64] { R2954 += 1, R2854 += 1 };
  s1 -> s3 [65, 65] { R2954 += 1, R2854 += 1 };
  s1 -> s4 [65, 65] { R2954 += 1, R2854 += 1 };
  s1 -> s5 [81, 81] { R2954 += 1, R2854 += 1 };
  s1 -> s1 [82, 65535] { R2954 += 1, R2854 += 1 };
  s2 -> s1 [0, 64] { R2954 += 1, R2854 += 1 };
  s2 -> s2 [0, 65535] { R2954 += 1, R2853 += 1, R2854 += 1 };
  s2 -> s3 [65, 65] { R2954 += 1, R2854 += 1 };
  s2 -> s4 [65, 65] { R2954 += 1, R2854 += 1 };
  s2 -> s5 [81, 81] { R2954 += 1, R2854 += 1 };
  s2 -> s1 [82, 65535] { R2954 += 1, R2854 += 1 };
  s4 -> s4 [0, 65] { R2954 += 1, R2854 += 1 };
  s4 -> s7 [81, 81] { R2954 += 1, R2854 += 1 };
  s4 -> s4 [82, 65535] { R2954 += 1, R2854 += 1 };
  s5 -> s5 [0, 64] { R2954 += 1, R2854 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2954 += 1 };
  s5 -> s7 [65, 65] { R2954 += 1, R2854 += 1 };
  s5 -> s8 [65, 65] { R2954 += 1, R2854 += 1 };
  s5 -> s5 [81, 65535] { R2954 += 1, R2854 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2954 += 1, R2854 += 1 };
  s7 -> s7 [0, 65535] { R2954 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [81, 65535] { R2954 += 1, R2854 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2954 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_65 {
  init s0;
  s0 -> s1 [0, 64] { R2956 += 1, R2856 += 1, R603 += 1 };
  s0 -> s2 [0, 65535] { R2956 += 1, R2855 += 1, R2856 += 1 };
  s0 -> s0 [0, 65535] { R2955 += 1, R2956 += 1 };
  s0 -> s3 [65, 65] { R2956 += 1, R2856 += 1, R603 += 1 };
  s0 -> s4 [65, 65] { R2956 += 1, R2856 += 1, R603 += 1 };
  s0 -> s1 [66, 65535] { R2956 += 1, R2856 += 1, R603 += 1 };
  s1 -> s1 [0, 64] { R2956 += 1, R2856 += 1, R603 += 1 };
  s1 -> s1 [0, 65535] { R2956 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2956 += 1, R2856 += 1, R603 += 1 };
  s1 -> s4 [65, 65] { R2956 += 1, R2856 += 1, R603 += 1 };
  s1 -> s1 [66, 65535] { R2956 += 1, R2856 += 1, R603 += 1 };
  s2 -> s1 [0, 64] { R2956 += 1, R2856 += 1, R603 += 1 };
  s2 -> s2 [0, 65535] { R2956 += 1, R2855 += 1, R2856 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2956 += 1, R2856 += 1, R603 += 1 };
  s2 -> s4 [65, 65] { R2956 += 1, R2856 += 1, R603 += 1 };
  s2 -> s1 [66, 65535] { R2956 += 1, R2856 += 1, R603 += 1 };
  s3 -> s3 [0, 65535] { R2956 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2956 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2956 += 1, R2856 += 1, R603 += 1 };
  s5 -> s5 [0, 65535] { R2956 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_66 {
  init s0;
  s0 -> s1 [0, 64] { R2958 += 1, R2858 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R2958 += 1, R2857 += 1, R2858 += 1 };
  s0 -> s0 [0, 65535] { R2957 += 1, R2958 += 1 };
  s0 -> s3 [65, 65] { R2958 += 1, R2858 += 1, R605 += 1 };
  s0 -> s4 [65, 65] { R2958 += 1, R2858 += 1, R605 += 1 };
  s0 -> s1 [66, 65535] { R2958 += 1, R2858 += 1, R605 += 1 };
  s1 -> s1 [0, 64] { R2958 += 1, R2858 += 1, R605 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2958 += 1 };
  s1 -> s3 [65, 65] { R2958 += 1, R2858 += 1, R605 += 1 };
  s1 -> s4 [65, 65] { R2958 += 1, R2858 += 1, R605 += 1 };
  s1 -> s1 [66, 65535] { R2958 += 1, R2858 += 1, R605 += 1 };
  s2 -> s1 [0, 64] { R2958 += 1, R2858 += 1, R605 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2958 += 1, R2857 += 1, R2858 += 1 };
  s2 -> s3 [65, 65] { R2958 += 1, R2858 += 1, R605 += 1 };
  s2 -> s4 [65, 65] { R2958 += 1, R2858 += 1, R605 += 1 };
  s2 -> s1 [66, 65535] { R2958 += 1, R2858 += 1, R605 += 1 };
  s3 -> s6 [0, 65535] { R2958 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2958 += 1, R2858 += 1, R605 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2958 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2958 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_67 {
  init s0;
  s0 -> s1 [0, 64] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R2960 += 1, R2859 += 1, R2860 += 1 };
  s0 -> s0 [0, 65535] { R2959 += 1, R2960 += 1 };
  s0 -> s3 [65, 65] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s0 -> s4 [65, 65] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s0 -> s1 [66, 65535] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 64] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R2960 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s1 -> s4 [65, 65] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s1 -> s1 [66, 65535] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [0, 64] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R2960 += 1, R2859 += 1, R2860 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s2 -> s4 [65, 65] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s2 -> s1 [66, 65535] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s3 -> s3 [0, 65535] { R2960 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2960 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2960 += 1, R2860 += 1, R607 += 1, R608 += 1 };
  s5 -> s5 [0, 65535] { R2960 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_68 {
  init s0;
  s0 -> s1 [0, 64] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s0 -> s0 [0, 65535] { R2961 += 1, R2962 += 1 };
  s0 -> s2 [0, 65535] { R2962 += 1, R2861 += 1, R2862 += 1 };
  s0 -> s3 [65, 65] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s0 -> s4 [65, 65] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s0 -> s1 [66, 65535] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [0, 64] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2962 += 1 };
  s1 -> s3 [65, 65] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s1 -> s4 [65, 65] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s1 -> s1 [66, 65535] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [0, 64] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2962 += 1, R2861 += 1, R2862 += 1 };
  s2 -> s3 [65, 65] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s2 -> s4 [65, 65] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s2 -> s1 [66, 65535] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s3 -> s3 [0, 65535] { R2962 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2962 += 1, R2862 += 1, R611 += 1, R612 += 1 };
  s4 -> s6 [0, 65535] { R2962 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2962 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_69 {
  init s0;
  s0 -> s1 [0, 64] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s0 -> s0 [0, 65535] { R2963 += 1, R2964 += 1 };
  s0 -> s2 [0, 65535] { R2964 += 1, R2863 += 1, R2864 += 1 };
  s0 -> s3 [65, 65] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s0 -> s4 [65, 65] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s0 -> s1 [66, 65535] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [0, 64] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [0, 65535] { R2964 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s1 -> s4 [65, 65] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s1 -> s1 [66, 65535] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [0, 64] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2964 += 1, R2863 += 1, R2864 += 1 };
  s2 -> s3 [65, 65] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s2 -> s4 [65, 65] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s2 -> s1 [66, 65535] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s3 -> s3 [0, 65535] { R2964 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2964 += 1, R2864 += 1, R617 += 1, R618 += 1 };
  s4 -> s6 [0, 65535] { R2964 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2964 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_70 {
  init s0;
  s0 -> s1 [0, 64] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R2966 += 1, R2865 += 1, R2866 += 1 };
  s0 -> s0 [0, 65535] { R2965 += 1, R2966 += 1 };
  s0 -> s3 [65, 65] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s0 -> s4 [65, 65] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s0 -> s1 [66, 65535] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 64] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 65535] { R2966 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s1 -> s4 [65, 65] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [66, 65535] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [0, 64] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s2 -> s2 [0, 65535] { R2966 += 1, R2865 += 1, R2866 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s2 -> s4 [65, 65] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [66, 65535] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s3 -> s3 [0, 65535] { R2966 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2966 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2966 += 1, R2866 += 1, R621 += 1, R622 += 1 };
  s5 -> s5 [0, 65535] { R2966 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_71 {
  init s0;
  s0 -> s1 [0, 64] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s0 -> s2 [0, 64] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s0 -> s3 [0, 65535] { R2968 += 1, R2867 += 1, R2868 += 1 };
  s0 -> s0 [0, 65535] { R2967 += 1, R2968 += 1 };
  s0 -> s4 [65, 65] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s0 -> s5 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s0 -> s6 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s0 -> s7 [65, 65] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s0 -> s1 [66, 65535] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s0 -> s2 [66, 65535] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s1 -> s1 [0, 64] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s1 -> s2 [0, 64] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s1 -> s4 [65, 65] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s1 -> s5 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s1 -> s6 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s1 -> s7 [65, 65] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s1 -> s1 [66, 65535] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s1 -> s2 [66, 65535] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s2 -> s11 [0, 64] { R2968 += 1, R2868 += 1 };
  s2 -> s2 [0, 64] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s2 -> s5 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s2 -> s12 [65, 65] { R2968 += 1, R2868 += 1 };
  s2 -> s6 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s2 -> s8 [65, 65] { R2968 += 1, R2868 += 1 };
  s2 -> s11 [66, 65535] { R2968 += 1, R2868 += 1 };
  s2 -> s2 [66, 65535] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s3 -> s1 [0, 64] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s3 -> s2 [0, 64] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s3 -> s3 [0, 65535] { R2968 += 1, R2867 += 1, R2868 += 1 };
  s3 -> s4 [65, 65] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s3 -> s5 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s3 -> s6 [65, 65] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s3 -> s7 [65, 65] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s3 -> s1 [66, 65535] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s3 -> s2 [66, 65535] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s5 -> s5 [0, 65535] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s5 -> s8 [0, 65535] { R2968 += 1, R2868 += 1 };
  s7 -> s5 [0, 65535] { R2968 += 1, R2868 += 1, R2580 += 1, R2581 += 1 };
  s7 -> s7 [0, 65535] { R2968 += 1, R2868 += 1, R2579 += 1, R2580 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2968 += 1, R2868 += 1 };
  s8 -> s10 [0, 65535] { R2968 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2968 += 1 };
  s11 -> s11 [0, 64] { R2968 += 1, R2868 += 1 };
  s11 -> s11 [0, 65535] { R2968 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R2968 += 1, R2868 += 1 };
  s11 -> s8 [65, 65] { R2968 += 1, R2868 += 1 };
  s11 -> s11 [66, 65535] { R2968 += 1, R2868 += 1 };
  s12 -> s12 [0, 65535] { R2968 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_72 {
  init s0;
  s0 -> s1 [0, 64] { R2970 += 1, R2870 += 1 };
  s0 -> s0 [0, 65535] { R2969 += 1, R2970 += 1 };
  s0 -> s2 [0, 65535] { R2970 += 1, R2869 += 1, R2870 += 1 };
  s0 -> s3 [65, 65] { R2970 += 1, R2870 += 1 };
  s0 -> s4 [65, 65] { R2970 += 1, R2870 += 1 };
  s0 -> s1 [66, 65535] { R2970 += 1, R2870 += 1 };
  s1 -> s1 [0, 64] { R2970 += 1, R2870 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2970 += 1 };
  s1 -> s3 [65, 65] { R2970 += 1, R2870 += 1 };
  s1 -> s4 [65, 65] { R2970 += 1, R2870 += 1 };
  s1 -> s1 [66, 65535] { R2970 += 1, R2870 += 1 };
  s2 -> s1 [0, 64] { R2970 += 1, R2870 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2970 += 1, R2869 += 1, R2870 += 1 };
  s2 -> s3 [65, 65] { R2970 += 1, R2870 += 1 };
  s2 -> s4 [65, 65] { R2970 += 1, R2870 += 1 };
  s2 -> s1 [66, 65535] { R2970 += 1, R2870 += 1 };
  s3 -> s3 [0, 65535] { R2970 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2970 += 1, R2870 += 1 };
  s4 -> s6 [0, 65535] { R2970 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2970 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_73 {
  init s0;
  s0 -> s1 [0, 64] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s0 -> s2 [0, 64] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s0 -> s3 [0, 65535] { R2972 += 1, R2871 += 1, R2872 += 1 };
  s0 -> s0 [0, 65535] { R2971 += 1, R2972 += 1 };
  s0 -> s4 [65, 65] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s0 -> s5 [65, 65] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s0 -> s6 [65, 65] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s0 -> s7 [65, 65] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s0 -> s1 [66, 80] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s0 -> s2 [66, 65535] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s0 -> s1 [82, 65535] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s1 -> s1 [0, 64] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s1 -> s1 [0, 65535] { R2972 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R2972 += 1, R2872 += 1 };
  s1 -> s7 [65, 65] { R2972 += 1, R2872 += 1 };
  s1 -> s1 [66, 80] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s1 -> s1 [66, 65535] { R2972 += 1, R2872 += 1 };
  s1 -> s1 [82, 65535] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s2 -> s1 [0, 64] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s2 -> s2 [0, 64] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s2 -> s4 [65, 65] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s2 -> s5 [65, 65] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s2 -> s6 [65, 65] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s2 -> s7 [65, 65] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s2 -> s1 [66, 80] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s2 -> s2 [66, 65535] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s2 -> s1 [82, 65535] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s3 -> s1 [0, 64] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s3 -> s2 [0, 64] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s3 [0, 65535] { R2972 += 1, R2871 += 1, R2872 += 1 };
  s3 -> s4 [65, 65] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s5 [65, 65] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s3 -> s6 [65, 65] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s7 [65, 65] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s3 -> s1 [66, 80] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s3 -> s2 [66, 65535] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s1 [82, 65535] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s5 -> s5 [0, 80] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R2972 += 1 };
  s5 -> s5 [0, 65535] { R2972 += 1, R2872 += 1 };
  s5 -> s5 [82, 65535] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s6 -> s5 [0, 80] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s6 -> s6 [0, 65535] { R2972 += 1, R2872 += 1, R2779 += 1, R2780 += 1 };
  s6 -> s5 [82, 65535] { R2972 += 1, R2872 += 1, R2780 += 1, R2781 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2972 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2972 += 1 };
  accepting s8, s5, s9, s1, s7;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [105, 105];
  accepting s1;
};
};
synchronised {  // Automata constraining P90
automaton P90_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
constraint R5 = R2808 && R6 = R2972 && R39 = 0 && R40 = 1 && R41 = 0 && R42 = 1 && R88 + R87 + -1*R104 + -1*R102 = 0 && R103 + R101 = 0 && R604 + R603 + -1*R625 + -1*R622 = 0 && R609 + R607 = 0 && R610 + R608 + -1*R625 + -1*R622 = 0 && R614 + R611 = 0 && R615 + R612 + -1*R625 + -1*R622 = 0 && R619 + R617 = 0 && R620 + R618 + -1*R625 + -1*R622 = 0 && R624 + R621 = 0 && R2785 = 0 && R2786 = R2808 && R2787 = 0 && R2788 = R2808 && R2789 = 0 && R2790 = R2808 && R2791 = 0 && R2792 = R2808 && R2793 = 0 && R2794 = R2808 && R2795 = 0 && R2796 = R2808 && R2797 = 0 && R2798 = R2808 && R2799 = 0 && R2800 = R2808 && R2801 = 0 && R2802 = R2808 && R2803 = 0 && R2804 = R2808 && R2805 = 0 && R2806 = R2808 && R2807 = 0 && R2809 = 0 && R2810 = R2972 && R2811 = 0 && R2812 = R2972 && R2813 = 0 && R2814 = R2972 && R2815 = 0 && R2816 = R2972 && R2817 = 0 && R2818 = R2972 && R2819 = 0 && R2820 = R2972 && R2821 = 0 && R2822 = R2972 && R2823 = 0 && R2824 = R2972 && R2825 = 0 && R2826 = R2972 && R2827 = 0 && R2828 = R2972 && R2829 = 0 && R2830 = R2972 && R2831 = 0 && R2832 = R2972 && R2833 = 0 && R2834 = R2972 && R2835 = 0 && R2836 = R2972 && R2837 = 0 && R2838 = R2972 && R2839 = 0 && R2840 = R2972 && R2841 = 0 && R2842 = R2972 && R2843 = 0 && R2844 = R2972 && R2845 = 0 && R2846 = R2972 && R2847 = 0 && R2848 = R2972 && R2849 = 0 && R2850 = R2972 && R2853 = 0 && R2854 = 0 && R2867 = 0 && R2868 = 0 && R2871 = 0 && R2872 = 0 && R2915 = 10 && R2916 = R2972 && R2917 = 10 && R2918 = R2972 && R2919 = 10 && R2920 = R2972 && R2921 = 10 && R2922 = R2972 && R2923 = 10 && R2924 = R2972 && R2925 = 10 && R2926 = R2972 && R2927 = 10 && R2928 = R2972 && R2929 = 10 && R2930 = R2972 && R2931 = 10 && R2932 = R2972 && R2933 = 10 && R2934 = R2972 && R2935 = 10 && R2936 = R2972 && R2937 = 10 && R2938 = R2972 && R2939 = 10 && R2940 = R2972 && R2941 = 10 && R2942 = R2972 && R2943 = 10 && R2944 = R2972 && R2945 = 10 && R2946 = R2972 && R2947 = 10 && R2948 = R2972 && R2949 = 10 && R2950 = R2972 && R2951 = 10 && R2952 = R2972 && R2953 = 10 && R2954 = R2972 && R2955 = 10 && R2956 = R2972 && R2957 = 10 && R2958 = R2972 && R2959 = 10 && R2960 = R2972 && R2961 = 10 && R2962 = R2972 && R2963 = 10 && R2964 = R2972 && R2965 = 10 && R2966 = R2972 && R2967 = 10 && R2968 = R2972 && R2969 = 10 && R2970 = R2972 && R2971 = 10 && R120 + R117 + R154 + R151 != 0 && R136 + R133 + R166 + R163 != 0 && R626 + R623 + R2784 + R2781 != 0 && R20 < 1 && R21 < 1 && R24 < 1 && R90 + R89 < 1 && R92 + R91 < 1 && R94 + R93 < 1 && -1*R104 + -1*R102 < 1 && R606 + R605 < 1 && -1*R625 < R622 && 0 < R2808 && 9 < R2972 && (R100 + R97 != 0 || ((R98 + R95 != 0 || R99 + R96 + -1*R104 + -1*R102 = 0 || R104 + R102 < 1) && (R98 + R95 = 0 || R104 + R102 < 1))) && (R104 + R102 != 0 || R110 + R107 = 0 || (R108 + R105 = 0 && R109 + R106 = 0)) && (R104 + R102 != 0 || R110 + R107 = 0 || (R113 + R111 = 0 && R114 + R112 = 0)) && (R104 + R102 != 0 || R110 + R107 = 0 || (R118 + R115 = 0 && R119 + R116 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R124 + R121 = 0 && R125 + R122 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R129 + R127 = 0 && R130 + R128 = 0)) && (R104 + R102 != 0 || R126 + R123 = 0 || (R134 + R131 = 0 && R135 + R132 = 0)) && (R108 + R105 != 0 || R104 + R102 + -1*R109 + -1*R106 = 0 || R104 + R102 < 1) && (R113 + R111 != 0 || R104 + R102 + -1*R114 + -1*R112 = 0 || R104 + R102 < 1) && (R118 + R115 != 0 || R104 + R102 + -1*R119 + -1*R116 = 0 || R104 + R102 < 1) && (R124 + R121 != 0 || R104 + R102 + -1*R125 + -1*R122 = 0 || R104 + R102 < 1) && (R129 + R127 != 0 || R104 + R102 + -1*R130 + -1*R128 = 0 || R104 + R102 < 1) && (R134 + R131 != 0 || R104 + R102 + -1*R135 + -1*R132 = 0 || R104 + R102 < 1) && (R36 = 0 || (R2851 = 0 && R2852 = 0)) && (R36 = 0 || (R2855 = 0 && R2856 = 0)) && (R36 = 0 || (R2857 = 0 && R2858 = 0)) && (R36 = 0 || (R2859 = 0 && R2860 = 0)) && (R36 = 0 || (R2861 = 0 && R2862 = 0)) && (R36 = 0 || (R2863 = 0 && R2864 = 0)) && (R36 = 0 || (R2865 = 0 && R2866 = 0)) && (R36 = 0 || (R2869 = 0 && R2870 = 0)) && (R38 = 0 || (R2873 = 0 && R2874 = 0)) && (R38 = 0 || (R2875 = 0 && R2876 = 0)) && (R38 = 0 || (R2877 = 0 && R2878 = 0)) && (R38 = 0 || (R2879 = 0 && R2880 = 0)) && (R38 = 0 || (R2881 = 0 && R2882 = 0)) && (R38 = 0 || (R2883 = 0 && R2884 = 0)) && (R38 = 0 || (R2885 = 0 && R2886 = 0)) && (R38 = 0 || (R2887 = 0 && R2888 = 0)) && (R38 = 0 || (R2889 = 0 && R2890 = 0)) && (R38 = 0 || (R2891 = 0 && R2892 = 0)) && (R38 = 0 || (R2893 = 0 && R2894 = 0)) && (R38 = 0 || (R2895 = 0 && R2896 = 0)) && (R38 = 0 || (R2897 = 0 && R2898 = 0)) && (R38 = 0 || (R2899 = 0 && R2900 = 0)) && (R38 = 0 || (R2901 = 0 && R2902 = 0)) && (R38 = 0 || (R2903 = 0 && R2904 = 0)) && (R38 = 0 || (R2905 = 0 && R2906 = 0)) && (R38 = 0 || (R2907 = 0 && R2908 = 0)) && (R38 = 0 || (R2909 = 0 && R2910 = 0)) && (R38 = 0 || (R2911 = 0 && R2912 = 0)) && (R38 = 0 || (R2913 = 0 && R2914 = 0)) && (R100 + R97 = 0 || (R98 + R95 = 0 && R99 + R96 + -1*R104 + -1*R102 = 0)) && (R108 + R105 = 0 || R104 + R102 < 1) && (R113 + R111 = 0 || R104 + R102 < 1) && (R118 + R115 = 0 || R104 + R102 < 1) && (R124 + R121 = 0 || R104 + R102 < 1) && (R129 + R127 = 0 || R104 + R102 < 1) && (R134 + R131 = 0 || R104 + R102 < 1) && (R142 + R139 = 0 || (R140 + R137 = 0 && R141 + R138 = 0)) && (R148 + R145 = 0 || (R146 + R143 = 0 && R147 + R144 = 0)) && (R148 + R145 = 0 || (R152 + R149 = 0 && R153 + R150 = 0)) && (R160 + R157 = 0 || (R158 + R155 = 0 && R159 + R156 = 0)) && (R160 + R157 = 0 || (R164 + R161 = 0 && R165 + R162 = 0)) && (R2584 + R2581 = 0 || (R2582 + R2579 = 0 && R2583 + R2580 = 0)) && (R2584 + R2581 = 0 || (R2782 + R2779 = 0 && R2783 + R2780 = 0));
// End of Parikh automata intersection problem
