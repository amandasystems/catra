// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R45 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s2 [44, 44] { R45 += 1 };
  s0 -> s1 [45, 45] { R45 += 1 };
  s0 -> s3 [46, 46] { R45 += 1 };
  s0 -> s1 [48, 62] { R45 += 1 };
  s0 -> s1 [65, 65535] { R45 += 1 };
  s1 -> s1 [0, 43] { R45 += 1 };
  s1 -> s2 [44, 44] { R45 += 1 };
  s1 -> s1 [45, 45] { R45 += 1 };
  s1 -> s3 [46, 46] { R45 += 1 };
  s1 -> s1 [48, 62] { R45 += 1 };
  s1 -> s1 [65, 65535] { R45 += 1 };
  s2 -> s2 [0, 45] { R45 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s7 [46, 46] { R45 += 1 };
  s2 -> s2 [48, 62] { R45 += 1 };
  s2 -> s2 [65, 65535] { R45 += 1 };
  s3 -> s1 [0, 43] { R45 += 1 };
  s3 -> s2 [44, 44] { R45 += 1 };
  s3 -> s1 [45, 45] { R45 += 1 };
  s3 -> s3 [46, 46] { R45 += 1 };
  s3 -> s1 [48, 62] { R45 += 1 };
  s3 -> s1 [65, 114] { R45 += 1 };
  s3 -> s4 [115, 115] { R45 += 1 };
  s3 -> s1 [116, 65535] { R45 += 1 };
  s4 -> s1 [0, 43] { R45 += 1 };
  s4 -> s2 [44, 44] { R45 += 1 };
  s4 -> s1 [45, 45] { R45 += 1 };
  s4 -> s3 [46, 46] { R45 += 1 };
  s4 -> s1 [48, 62] { R45 += 1 };
  s4 -> s1 [65, 110] { R45 += 1 };
  s4 -> s5 [111, 111] { R45 += 1 };
  s4 -> s1 [112, 65535] { R45 += 1 };
  s5 -> s1 [0, 43] { R45 += 1 };
  s5 -> s2 [44, 44] { R45 += 1 };
  s5 -> s1 [45, 45] { R45 += 1 };
  s5 -> s3 [46, 46] { R45 += 1 };
  s5 -> s1 [48, 62] { R45 += 1 };
  s5 -> s1 [65, 98] { R45 += 1 };
  s5 -> s6 [99, 99] { R45 += 1 };
  s5 -> s1 [100, 65535] { R45 += 1 };
  s6 -> s1 [0, 43] { R45 += 1 };
  s6 -> s2 [44, 44] { R45 += 1 };
  s6 -> s1 [45, 45] { R45 += 1 };
  s6 -> s3 [46, 46] { R45 += 1 };
  s6 -> s1 [48, 62] { R45 += 1 };
  s6 -> s1 [65, 106] { R45 += 1 };
  s6 -> s1 [108, 65535] { R45 += 1 };
  s7 -> s2 [0, 45] { R45 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s7 [46, 46] { R45 += 1 };
  s7 -> s2 [48, 62] { R45 += 1 };
  s7 -> s2 [65, 114] { R45 += 1 };
  s7 -> s8 [115, 115] { R45 += 1 };
  s7 -> s2 [116, 65535] { R45 += 1 };
  s8 -> s2 [0, 45] { R45 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s7 [46, 46] { R45 += 1 };
  s8 -> s2 [48, 62] { R45 += 1 };
  s8 -> s2 [65, 110] { R45 += 1 };
  s8 -> s9 [111, 111] { R45 += 1 };
  s8 -> s2 [112, 65535] { R45 += 1 };
  s9 -> s2 [0, 45] { R45 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s7 [46, 46] { R45 += 1 };
  s9 -> s2 [48, 62] { R45 += 1 };
  s9 -> s2 [65, 98] { R45 += 1 };
  s9 -> s10 [99, 99] { R45 += 1 };
  s9 -> s2 [100, 65535] { R45 += 1 };
  s10 -> s2 [0, 45] { R45 += 1 };
  s10 -> s10 [0, 65535];
  s10 -> s7 [46, 46] { R45 += 1 };
  s10 -> s2 [48, 62] { R45 += 1 };
  s10 -> s2 [65, 106] { R45 += 1 };
  s10 -> s2 [108, 65535] { R45 += 1 };
  accepting s8, s2, s9, s7, s10;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R47 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R47 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 43] { R49 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R49 += 1, R8 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s3 [44, 44] { R49 += 1 };
  s0 -> s1 [45, 65535] { R49 += 1, R9 += 1 };
  s1 -> s1 [0, 43] { R49 += 1, R9 += 1 };
  s1 -> s3 [44, 44] { R49 += 1 };
  s1 -> s1 [45, 65535] { R49 += 1, R9 += 1 };
  s2 -> s1 [0, 43] { R49 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R49 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [44, 44] { R49 += 1 };
  s2 -> s1 [45, 65535] { R49 += 1, R9 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R49 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 43] { R51 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R36 += 1, R37 += 1 };
  s0 -> s3 [44, 44] { R51 += 1, R37 += 1 };
  s0 -> s1 [45, 65535] { R51 += 1, R37 += 1 };
  s1 -> s1 [0, 43] { R51 += 1, R37 += 1 };
  s1 -> s3 [44, 44] { R51 += 1, R37 += 1 };
  s1 -> s1 [45, 65535] { R51 += 1, R37 += 1 };
  s2 -> s1 [0, 43] { R51 += 1, R37 += 1 };
  s2 -> s2 [0, 65535] { R51 += 1, R36 += 1, R37 += 1 };
  s2 -> s3 [44, 44] { R51 += 1, R37 += 1 };
  s2 -> s1 [45, 65535] { R51 += 1, R37 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R51 += 1, R37 += 1 };
  s3 -> s5 [0, 65535] { R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R51 += 1 };
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R53 += 1, R39 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R38 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R53 += 1, R39 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R53 += 1 };
  s2 -> s1 [0, 65535] { R53 += 1, R39 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R53 += 1, R38 += 1, R39 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R53 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 43] { R55 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R55 += 1, R41 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R55 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s4 [44, 44] { R55 += 1, R41 += 1 };
  s0 -> s1 [45, 65535] { R55 += 1, R41 += 1 };
  s1 -> s1 [0, 43] { R55 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R55 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [44, 44] { R55 += 1, R41 += 1 };
  s1 -> s1 [45, 65535] { R55 += 1, R41 += 1 };
  s2 -> s1 [0, 43] { R55 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R55 += 1, R41 += 1, R4 += 1 };
  s2 -> s6 [0, 65535] { R55 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [44, 44] { R55 += 1, R41 += 1 };
  s2 -> s1 [45, 65535] { R55 += 1, R41 += 1 };
  s3 -> s1 [0, 43] { R55 += 1, R41 += 1 };
  s3 -> s2 [0, 65535] { R55 += 1, R41 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R55 += 1, R40 += 1, R41 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [44, 44] { R55 += 1, R41 += 1 };
  s3 -> s1 [45, 65535] { R55 += 1, R41 += 1 };
  s4 -> s4 [0, 65535] { R55 += 1, R41 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R55 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R57 += 1, R42 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R57 += 1, R43 += 1, R34 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s0 -> s3 [0, 65535] { R57 += 1, R43 += 1, R35 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R42 += 1, R43 += 1 };
  s1 -> s2 [0, 65535] { R57 += 1, R43 += 1, R34 += 1, R35 += 1 };
  s1 -> s3 [0, 65535] { R57 += 1, R43 += 1, R35 += 1, R0 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R57 += 1 };
  s2 -> s2 [0, 65535] { R57 += 1, R43 += 1, R34 += 1, R35 += 1 };
  s2 -> s3 [0, 65535] { R57 += 1, R43 += 1, R35 += 1, R0 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R57 += 1 };
  s3 -> s3 [0, 65535] { R57 += 1, R43 += 1, R35 += 1, R0 += 1 };
  s3 -> s5 [0, 65535] { R57 += 1, R43 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R57 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R57 += 1 };
  s5 -> s5 [0, 65535] { R57 += 1, R43 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R35 && R2 = R43 && R3 = R57 && R8 = 0 && R9 - R42 = -1 && R34 = 0 && R36 = R42 && R37 = R43 && R38 = R42 && R39 = R43 && R40 = R42 && R41 = R43 && R44 = 10 && R45 = R57 && R46 = 10 && R47 = R57 && R48 = 10 && R49 = R57 && R50 = 10 && R51 = R57 && R52 = 10 && R53 = R57 && R54 = 10 && R55 = R57 && R56 = 10 && R0 != 0 && R4 < 1 && 0 < R35 && R42 - R43 < 1 && -1 < R42 && 0 < R43 && 9 < R57;
// End of Parikh automata intersection problem
