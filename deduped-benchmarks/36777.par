// Parikh automata intersection problem, generated by OSTRICH+
counter int R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R15, R16, R25, R26, R27, R28, R29, R3, R30, R4, R5, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R10082 += 1 };
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s1 [45, 45] { R10082 += 1 };
  s0 -> s2 [46, 46] { R10082 += 1 };
  s0 -> s1 [48, 62] { R10082 += 1 };
  s0 -> s3 [65, 65] { R10082 += 1 };
  s0 -> s1 [66, 65535] { R10082 += 1 };
  s1 -> s1 [0, 43] { R10082 += 1 };
  s1 -> s1 [45, 45] { R10082 += 1 };
  s1 -> s2 [46, 46] { R10082 += 1 };
  s1 -> s1 [48, 62] { R10082 += 1 };
  s1 -> s3 [65, 65] { R10082 += 1 };
  s1 -> s1 [66, 65535] { R10082 += 1 };
  s2 -> s1 [0, 43] { R10082 += 1 };
  s2 -> s1 [45, 45] { R10082 += 1 };
  s2 -> s2 [46, 46] { R10082 += 1 };
  s2 -> s1 [48, 62] { R10082 += 1 };
  s2 -> s3 [65, 65] { R10082 += 1 };
  s2 -> s1 [66, 114] { R10082 += 1 };
  s2 -> s8 [115, 115] { R10082 += 1 };
  s2 -> s1 [116, 65535] { R10082 += 1 };
  s3 -> s3 [0, 43] { R10082 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10082 += 1 };
  s3 -> s4 [46, 46] { R10082 += 1 };
  s3 -> s3 [48, 62] { R10082 += 1 };
  s3 -> s3 [65, 65535] { R10082 += 1 };
  s4 -> s3 [0, 43] { R10082 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10082 += 1 };
  s4 -> s4 [46, 46] { R10082 += 1 };
  s4 -> s3 [48, 62] { R10082 += 1 };
  s4 -> s3 [65, 114] { R10082 += 1 };
  s4 -> s5 [115, 115] { R10082 += 1 };
  s4 -> s3 [116, 65535] { R10082 += 1 };
  s5 -> s3 [0, 43] { R10082 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10082 += 1 };
  s5 -> s4 [46, 46] { R10082 += 1 };
  s5 -> s3 [48, 62] { R10082 += 1 };
  s5 -> s3 [65, 110] { R10082 += 1 };
  s5 -> s6 [111, 111] { R10082 += 1 };
  s5 -> s3 [112, 65535] { R10082 += 1 };
  s6 -> s3 [0, 43] { R10082 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10082 += 1 };
  s6 -> s4 [46, 46] { R10082 += 1 };
  s6 -> s3 [48, 62] { R10082 += 1 };
  s6 -> s3 [65, 98] { R10082 += 1 };
  s6 -> s7 [99, 99] { R10082 += 1 };
  s6 -> s3 [100, 65535] { R10082 += 1 };
  s7 -> s3 [0, 43] { R10082 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10082 += 1 };
  s7 -> s4 [46, 46] { R10082 += 1 };
  s7 -> s3 [48, 62] { R10082 += 1 };
  s7 -> s3 [65, 106] { R10082 += 1 };
  s7 -> s3 [108, 65535] { R10082 += 1 };
  s8 -> s1 [0, 43] { R10082 += 1 };
  s8 -> s1 [45, 45] { R10082 += 1 };
  s8 -> s2 [46, 46] { R10082 += 1 };
  s8 -> s1 [48, 62] { R10082 += 1 };
  s8 -> s3 [65, 65] { R10082 += 1 };
  s8 -> s1 [66, 110] { R10082 += 1 };
  s8 -> s9 [111, 111] { R10082 += 1 };
  s8 -> s1 [112, 65535] { R10082 += 1 };
  s9 -> s1 [0, 43] { R10082 += 1 };
  s9 -> s1 [45, 45] { R10082 += 1 };
  s9 -> s2 [46, 46] { R10082 += 1 };
  s9 -> s1 [48, 62] { R10082 += 1 };
  s9 -> s3 [65, 65] { R10082 += 1 };
  s9 -> s1 [66, 98] { R10082 += 1 };
  s9 -> s10 [99, 99] { R10082 += 1 };
  s9 -> s1 [100, 65535] { R10082 += 1 };
  s10 -> s1 [0, 43] { R10082 += 1 };
  s10 -> s1 [45, 45] { R10082 += 1 };
  s10 -> s2 [46, 46] { R10082 += 1 };
  s10 -> s1 [48, 62] { R10082 += 1 };
  s10 -> s3 [65, 65] { R10082 += 1 };
  s10 -> s1 [66, 106] { R10082 += 1 };
  s10 -> s1 [108, 65535] { R10082 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s0 -> s1 [0, 65535] { R10084 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10084 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R10086 += 1 };
  s0 -> s2 [0, 65535] { R10086 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s3 [58, 58] { R10086 += 1 };
  s0 -> s1 [59, 65535] { R10086 += 1 };
  s1 -> s1 [0, 57] { R10086 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10086 += 1 };
  s1 -> s1 [59, 65535] { R10086 += 1 };
  s2 -> s1 [0, 57] { R10086 += 1 };
  s2 -> s2 [0, 65535] { R10086 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R10086 += 1 };
  s2 -> s1 [59, 65535] { R10086 += 1 };
  s3 -> s3 [0, 65535] { R10086 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R10088 += 1 };
  s0 -> s2 [0, 65535] { R10088 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R10087 += 1, R10088 += 1 };
  s0 -> s3 [65, 65] { R10088 += 1 };
  s0 -> s1 [66, 65535] { R10088 += 1 };
  s1 -> s1 [0, 64] { R10088 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10088 += 1 };
  s1 -> s1 [66, 65535] { R10088 += 1 };
  s2 -> s1 [0, 64] { R10088 += 1 };
  s2 -> s2 [0, 65535] { R10088 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10088 += 1 };
  s2 -> s1 [66, 65535] { R10088 += 1 };
  s3 -> s3 [0, 65535] { R10088 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R10090 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10090 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10089 += 1, R10090 += 1 };
  s0 -> s3 [91, 91] { R10090 += 1, R28 += 1 };
  s0 -> s1 [92, 65535] { R10090 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R10090 += 1 };
  s1 -> s1 [0, 65535] { R10090 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R10090 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10090 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10090 += 1, R28 += 1 };
  s2 -> s1 [92, 65535] { R10090 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10090 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10090 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R10091 += 1, R10092 += 1 };
  s0 -> s1 [0, 65535] { R10092 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R10092 += 1, R30 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10092 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [0, 65535] { R10092 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10092 += 1 };
  s2 -> s2 [0, 65535] { R10092 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10092 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R10094 += 1, R9988 += 1 };
  s0 -> s2 [0, 65535] { R10094 += 1, R9987 += 1, R9988 += 1 };
  s0 -> s0 [0, 65535] { R10093 += 1, R10094 += 1 };
  s0 -> s1 [66, 65535] { R10094 += 1, R9988 += 1 };
  s1 -> s1 [0, 64] { R10094 += 1, R9988 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10094 += 1 };
  s1 -> s1 [66, 65535] { R10094 += 1, R9988 += 1 };
  s2 -> s1 [0, 64] { R10094 += 1, R9988 += 1 };
  s2 -> s2 [0, 65535] { R10094 += 1, R9987 += 1, R9988 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10094 += 1, R9988 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R10096 += 1, R9989 += 1, R9990 += 1 };
  s0 -> s0 [0, 65535] { R10095 += 1, R10096 += 1 };
  s0 -> s2 [0, 65535] { R10096 += 1, R9990 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R10096 += 1, R9989 += 1, R9990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10096 += 1, R9990 += 1, R25 += 1 };
  s2 -> s3 [0, 65535] { R10096 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10096 += 1, R9990 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R10096 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R10098 += 1, R9992 += 1 };
  s0 -> s0 [0, 65535] { R10097 += 1, R10098 += 1 };
  s0 -> s2 [0, 65535] { R10098 += 1, R9991 += 1, R9992 += 1 };
  s0 -> s1 [80, 65535] { R10098 += 1, R9992 += 1 };
  s1 -> s1 [0, 65] { R10098 += 1, R9992 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10098 += 1 };
  s1 -> s1 [80, 65535] { R10098 += 1, R9992 += 1 };
  s2 -> s1 [0, 65] { R10098 += 1, R9992 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10098 += 1, R9991 += 1, R9992 += 1 };
  s2 -> s1 [80, 65535] { R10098 += 1, R9992 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10100 += 1, R9994 += 1, R566 += 1 };
  s0 -> s2 [0, 65535] { R10100 += 1, R9993 += 1, R9994 += 1 };
  s0 -> s0 [0, 65535] { R10099 += 1, R10100 += 1 };
  s1 -> s1 [0, 65535] { R10100 += 1, R9994 += 1, R566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10100 += 1 };
  s2 -> s1 [0, 65535] { R10100 += 1, R9994 += 1, R566 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10100 += 1, R9993 += 1, R9994 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10100 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 84] { R10102 += 1, R9996 += 1 };
  s0 -> s2 [0, 65535] { R10102 += 1, R9995 += 1, R9996 += 1 };
  s0 -> s3 [0, 65535] { R10102 += 1, R9996 += 1, R568 += 1 };
  s0 -> s0 [0, 65535] { R10101 += 1, R10102 += 1 };
  s0 -> s1 [86, 65535] { R10102 += 1, R9996 += 1 };
  s1 -> s1 [0, 84] { R10102 += 1, R9996 += 1 };
  s1 -> s1 [0, 65535] { R10102 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [86, 65535] { R10102 += 1, R9996 += 1 };
  s2 -> s1 [0, 84] { R10102 += 1, R9996 += 1 };
  s2 -> s2 [0, 65535] { R10102 += 1, R9995 += 1, R9996 += 1 };
  s2 -> s3 [0, 65535] { R10102 += 1, R9996 += 1, R568 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [86, 65535] { R10102 += 1, R9996 += 1 };
  s3 -> s1 [0, 84] { R10102 += 1, R9996 += 1 };
  s3 -> s4 [0, 65535] { R10102 += 1 };
  s3 -> s3 [0, 65535] { R10102 += 1, R9996 += 1, R568 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [86, 65535] { R10102 += 1, R9996 += 1 };
  s4 -> s4 [0, 65535] { R10102 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 82] { R10104 += 1, R9998 += 1 };
  s0 -> s2 [0, 65535] { R10104 += 1, R9998 += 1, R570 += 1 };
  s0 -> s3 [0, 65535] { R10104 += 1, R9997 += 1, R9998 += 1 };
  s0 -> s0 [0, 65535] { R10103 += 1, R10104 += 1 };
  s0 -> s1 [84, 65535] { R10104 += 1, R9998 += 1 };
  s1 -> s1 [0, 82] { R10104 += 1, R9998 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10104 += 1 };
  s1 -> s1 [84, 65535] { R10104 += 1, R9998 += 1 };
  s2 -> s1 [0, 82] { R10104 += 1, R9998 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10104 += 1, R9998 += 1, R570 += 1 };
  s2 -> s5 [0, 65535] { R10104 += 1 };
  s2 -> s1 [84, 65535] { R10104 += 1, R9998 += 1 };
  s3 -> s1 [0, 82] { R10104 += 1, R9998 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10104 += 1, R9998 += 1, R570 += 1 };
  s3 -> s3 [0, 65535] { R10104 += 1, R9997 += 1, R9998 += 1 };
  s3 -> s1 [84, 65535] { R10104 += 1, R9998 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10104 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 79] { R10106 += 1, R10000 += 1 };
  s0 -> s0 [0, 65535] { R10105 += 1, R10106 += 1 };
  s0 -> s2 [0, 65535] { R10106 += 1, R9999 += 1, R10000 += 1 };
  s0 -> s3 [0, 65535] { R10106 += 1, R10000 += 1, R572 += 1 };
  s0 -> s1 [81, 65535] { R10106 += 1, R10000 += 1 };
  s1 -> s1 [0, 79] { R10106 += 1, R10000 += 1 };
  s1 -> s1 [0, 65535] { R10106 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R10106 += 1, R10000 += 1 };
  s2 -> s1 [0, 79] { R10106 += 1, R10000 += 1 };
  s2 -> s2 [0, 65535] { R10106 += 1, R9999 += 1, R10000 += 1 };
  s2 -> s3 [0, 65535] { R10106 += 1, R10000 += 1, R572 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R10106 += 1, R10000 += 1 };
  s3 -> s1 [0, 79] { R10106 += 1, R10000 += 1 };
  s3 -> s4 [0, 65535] { R10106 += 1 };
  s3 -> s3 [0, 65535] { R10106 += 1, R10000 += 1, R572 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R10106 += 1, R10000 += 1 };
  s4 -> s4 [0, 65535] { R10106 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10108 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s2 [0, 65535] { R10108 += 1, R10002 += 1, R576 += 1, R577 += 1 };
  s0 -> s3 [0, 65535] { R10108 += 1, R10002 += 1, R577 += 1, R578 += 1 };
  s0 -> s0 [0, 65535] { R10107 += 1, R10108 += 1 };
  s1 -> s1 [0, 65535] { R10108 += 1, R10001 += 1, R10002 += 1 };
  s1 -> s2 [0, 65535] { R10108 += 1, R10002 += 1, R576 += 1, R577 += 1 };
  s1 -> s3 [0, 65535] { R10108 += 1, R10002 += 1, R577 += 1, R578 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10108 += 1, R10002 += 1, R576 += 1, R577 += 1 };
  s2 -> s3 [0, 65535] { R10108 += 1, R10002 += 1, R577 += 1, R578 += 1 };
  s2 -> s4 [0, 65535] { R10108 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10108 += 1, R10002 += 1, R577 += 1, R578 += 1 };
  s3 -> s4 [0, 65535] { R10108 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10108 += 1, R10002 += 1 };
  s4 -> s4 [0, 65535] { R10108 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10108 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10108 += 1, R10002 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R10110 += 1, R10003 += 1, R10004 += 1 };
  s0 -> s2 [0, 65535] { R10110 += 1, R10004 += 1 };
  s0 -> s0 [0, 65535] { R10109 += 1, R10110 += 1 };
  s1 -> s1 [0, 65535] { R10110 += 1, R10003 += 1, R10004 += 1 };
  s1 -> s2 [0, 65535] { R10110 += 1, R10004 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10110 += 1 };
  s2 -> s2 [0, 65535] { R10110 += 1, R10004 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10110 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10111 += 1, R10112 += 1 };
  s0 -> s1 [0, 65535] { R10112 += 1, R10005 += 1, R10006 += 1 };
  s0 -> s2 [0, 65535] { R10112 += 1, R10006 += 1, R583 += 1, R584 += 1 };
  s0 -> s3 [0, 65535] { R10112 += 1, R10006 += 1, R582 += 1, R583 += 1 };
  s1 -> s1 [0, 65535] { R10112 += 1, R10005 += 1, R10006 += 1 };
  s1 -> s2 [0, 65535] { R10112 += 1, R10006 += 1, R583 += 1, R584 += 1 };
  s1 -> s3 [0, 65535] { R10112 += 1, R10006 += 1, R582 += 1, R583 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10112 += 1 };
  s2 -> s6 [0, 65535] { R10112 += 1, R10006 += 1 };
  s2 -> s2 [0, 65535] { R10112 += 1, R10006 += 1, R583 += 1, R584 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10112 += 1 };
  s3 -> s2 [0, 65535] { R10112 += 1, R10006 += 1, R583 += 1, R584 += 1 };
  s3 -> s3 [0, 65535] { R10112 += 1, R10006 += 1, R582 += 1, R583 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10112 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10112 += 1 };
  s6 -> s6 [0, 65535] { R10112 += 1, R10006 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 107] { R10114 += 1, R10008 += 1, R588 += 1 };
  s0 -> s0 [0, 65535] { R10113 += 1, R10114 += 1 };
  s0 -> s2 [0, 65535] { R10114 += 1, R10008 += 1, R587 += 1, R588 += 1 };
  s0 -> s3 [0, 65535] { R10114 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s4 [108, 108] { R10114 += 1, R10008 += 1, R588 += 1 };
  s0 -> s1 [109, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s1 -> s1 [0, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s15 [0, 65535] { R10114 += 1, R10008 += 1 };
  s1 -> s6 [0, 65535] { R10114 += 1 };
  s2 -> s1 [0, 107] { R10114 += 1, R10008 += 1, R588 += 1 };
  s2 -> s2 [0, 65535] { R10114 += 1, R10008 += 1, R587 += 1, R588 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10114 += 1 };
  s2 -> s4 [108, 108] { R10114 += 1, R10008 += 1, R588 += 1 };
  s2 -> s1 [109, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s3 -> s1 [0, 107] { R10114 += 1, R10008 += 1, R588 += 1 };
  s3 -> s2 [0, 65535] { R10114 += 1, R10008 += 1, R587 += 1, R588 += 1 };
  s3 -> s3 [0, 65535] { R10114 += 1, R10007 += 1, R10008 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [108, 108] { R10114 += 1, R10008 += 1, R588 += 1 };
  s3 -> s1 [109, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s4 -> s1 [0, 110] { R10114 += 1, R10008 += 1, R588 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10114 += 1, R10008 += 1 };
  s4 -> s6 [0, 65535] { R10114 += 1 };
  s4 -> s7 [111, 111] { R10114 += 1, R10008 += 1, R588 += 1 };
  s4 -> s1 [112, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10114 += 1 };
  s7 -> s1 [0, 98] { R10114 += 1, R10008 += 1, R588 += 1 };
  s7 -> s7 [0, 65535] { R10114 += 1, R10008 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10114 += 1 };
  s7 -> s8 [99, 99] { R10114 += 1, R10008 += 1, R588 += 1 };
  s7 -> s1 [100, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s8 -> s1 [0, 96] { R10114 += 1, R10008 += 1, R588 += 1 };
  s8 -> s8 [0, 65535] { R10114 += 1, R10008 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R10114 += 1 };
  s8 -> s9 [97, 97] { R10114 += 1, R10008 += 1, R588 += 1 };
  s8 -> s1 [98, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s9 -> s1 [0, 107] { R10114 += 1, R10008 += 1, R588 += 1 };
  s9 -> s9 [0, 65535] { R10114 += 1, R10008 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R10114 += 1 };
  s9 -> s10 [108, 108] { R10114 += 1, R10008 += 1, R588 += 1 };
  s9 -> s1 [109, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s10 -> s1 [0, 103] { R10114 += 1, R10008 += 1, R588 += 1 };
  s10 -> s10 [0, 65535] { R10114 += 1, R10008 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R10114 += 1 };
  s10 -> s11 [104, 104] { R10114 += 1, R10008 += 1, R588 += 1 };
  s10 -> s1 [105, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s11 -> s1 [0, 110] { R10114 += 1, R10008 += 1, R588 += 1 };
  s11 -> s11 [0, 65535] { R10114 += 1, R10008 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R10114 += 1 };
  s11 -> s12 [111, 111] { R10114 += 1, R10008 += 1, R588 += 1 };
  s11 -> s1 [112, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s12 -> s1 [0, 114] { R10114 += 1, R10008 += 1, R588 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R10114 += 1, R10008 += 1 };
  s12 -> s6 [0, 65535] { R10114 += 1 };
  s12 -> s13 [115, 115] { R10114 += 1, R10008 += 1, R588 += 1 };
  s12 -> s1 [116, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s13 -> s1 [0, 115] { R10114 += 1, R10008 += 1, R588 += 1 };
  s13 -> s13 [0, 65535] { R10114 += 1, R10008 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R10114 += 1 };
  s13 -> s14 [116, 116] { R10114 += 1, R10008 += 1, R588 += 1 };
  s13 -> s1 [117, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s14 -> s1 [0, 65535] { R10114 += 1, R10008 += 1, R588 += 1 };
  s15 -> s5 [0, 65535];
  s15 -> s15 [0, 65535] { R10114 += 1, R10008 += 1 };
  s15 -> s6 [0, 65535] { R10114 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10116 += 1, R10009 += 1, R10010 += 1 };
  s0 -> s2 [0, 65535] { R10116 += 1, R10010 += 1, R592 += 1, R593 += 1 };
  s0 -> s0 [0, 65535] { R10115 += 1, R10116 += 1 };
  s0 -> s3 [0, 65535] { R10116 += 1, R10010 += 1, R593 += 1, R594 += 1 };
  s1 -> s1 [0, 65535] { R10116 += 1, R10009 += 1, R10010 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10116 += 1, R10010 += 1, R592 += 1, R593 += 1 };
  s1 -> s3 [0, 65535] { R10116 += 1, R10010 += 1, R593 += 1, R594 += 1 };
  s2 -> s3 [0, 65535] { R10116 += 1, R10010 += 1, R593 += 1, R594 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10116 += 1, R10010 += 1, R592 += 1, R593 += 1 };
  s2 -> s6 [0, 65535] { R10116 += 1 };
  s3 -> s3 [0, 65535] { R10116 += 1, R10010 += 1, R593 += 1, R594 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10116 += 1, R10010 += 1 };
  s3 -> s6 [0, 65535] { R10116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10116 += 1, R10010 += 1 };
  s5 -> s6 [0, 65535] { R10116 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10116 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 79] { R10118 += 1, R10012 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R10118 += 1, R10012 += 1, R597 += 1, R598 += 1 };
  s0 -> s3 [0, 65535] { R10118 += 1, R10011 += 1, R10012 += 1 };
  s0 -> s0 [0, 65535] { R10117 += 1, R10118 += 1 };
  s0 -> s1 [81, 65535] { R10118 += 1, R10012 += 1, R598 += 1 };
  s1 -> s1 [0, 79] { R10118 += 1, R10012 += 1, R598 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10118 += 1, R10012 += 1 };
  s1 -> s5 [0, 65535] { R10118 += 1 };
  s1 -> s1 [81, 65535] { R10118 += 1, R10012 += 1, R598 += 1 };
  s2 -> s1 [0, 79] { R10118 += 1, R10012 += 1, R598 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10118 += 1, R10012 += 1, R597 += 1, R598 += 1 };
  s2 -> s5 [0, 65535] { R10118 += 1 };
  s2 -> s1 [81, 65535] { R10118 += 1, R10012 += 1, R598 += 1 };
  s3 -> s1 [0, 79] { R10118 += 1, R10012 += 1, R598 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10118 += 1, R10012 += 1, R597 += 1, R598 += 1 };
  s3 -> s3 [0, 65535] { R10118 += 1, R10011 += 1, R10012 += 1 };
  s3 -> s1 [81, 65535] { R10118 += 1, R10012 += 1, R598 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10118 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10120 += 1, R10013 += 1, R10014 += 1 };
  s0 -> s0 [0, 65535] { R10119 += 1, R10120 += 1 };
  s0 -> s2 [0, 65535] { R10120 += 1, R10014 += 1, R603 += 1, R604 += 1 };
  s0 -> s3 [0, 65535] { R10120 += 1, R10014 += 1, R602 += 1, R603 += 1 };
  s1 -> s1 [0, 65535] { R10120 += 1, R10013 += 1, R10014 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10120 += 1, R10014 += 1, R603 += 1, R604 += 1 };
  s1 -> s3 [0, 65535] { R10120 += 1, R10014 += 1, R602 += 1, R603 += 1 };
  s2 -> s4 [0, 65535] { R10120 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10120 += 1, R10014 += 1, R603 += 1, R604 += 1 };
  s2 -> s6 [0, 65535] { R10120 += 1, R10014 += 1 };
  s3 -> s4 [0, 65535] { R10120 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10120 += 1, R10014 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R10120 += 1, R10014 += 1, R602 += 1, R603 += 1 };
  s4 -> s4 [0, 65535] { R10120 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10120 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10120 += 1, R10014 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R10122 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s0 [0, 65535] { R10121 += 1, R10122 += 1 };
  s0 -> s3 [0, 65535] { R10122 += 1, R10016 += 1, R607 += 1, R608 += 1 };
  s0 -> s1 [91, 107] { R10122 += 1, R10016 += 1, R608 += 1 };
  s0 -> s4 [108, 108] { R10122 += 1, R10016 += 1, R608 += 1 };
  s0 -> s1 [109, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s1 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s1 -> s5 [0, 65535] { R10122 += 1 };
  s1 -> s1 [0, 65535] { R10122 += 1, R10016 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s2 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R10122 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s3 [0, 65535] { R10122 += 1, R10016 += 1, R607 += 1, R608 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R10122 += 1, R10016 += 1, R608 += 1 };
  s2 -> s4 [108, 108] { R10122 += 1, R10016 += 1, R608 += 1 };
  s2 -> s1 [109, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s3 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s3 -> s5 [0, 65535] { R10122 += 1 };
  s3 -> s3 [0, 65535] { R10122 += 1, R10016 += 1, R607 += 1, R608 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R10122 += 1, R10016 += 1, R608 += 1 };
  s3 -> s4 [108, 108] { R10122 += 1, R10016 += 1, R608 += 1 };
  s3 -> s1 [109, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s4 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s4 -> s4 [0, 65535] { R10122 += 1, R10016 += 1 };
  s4 -> s5 [0, 65535] { R10122 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R10122 += 1, R10016 += 1, R608 += 1 };
  s4 -> s7 [111, 111] { R10122 += 1, R10016 += 1, R608 += 1 };
  s4 -> s1 [112, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s5 -> s5 [0, 65535] { R10122 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s7 -> s7 [0, 65535] { R10122 += 1, R10016 += 1 };
  s7 -> s5 [0, 65535] { R10122 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R10122 += 1, R10016 += 1, R608 += 1 };
  s7 -> s8 [99, 99] { R10122 += 1, R10016 += 1, R608 += 1 };
  s7 -> s1 [100, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s8 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s8 -> s8 [0, 65535] { R10122 += 1, R10016 += 1 };
  s8 -> s5 [0, 65535] { R10122 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R10122 += 1, R10016 += 1, R608 += 1 };
  s8 -> s9 [97, 97] { R10122 += 1, R10016 += 1, R608 += 1 };
  s8 -> s1 [98, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s9 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s9 -> s9 [0, 65535] { R10122 += 1, R10016 += 1 };
  s9 -> s5 [0, 65535] { R10122 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R10122 += 1, R10016 += 1, R608 += 1 };
  s9 -> s10 [108, 108] { R10122 += 1, R10016 += 1, R608 += 1 };
  s9 -> s1 [109, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s10 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s10 -> s5 [0, 65535] { R10122 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R10122 += 1, R10016 += 1 };
  s10 -> s1 [91, 103] { R10122 += 1, R10016 += 1, R608 += 1 };
  s10 -> s11 [104, 104] { R10122 += 1, R10016 += 1, R608 += 1 };
  s10 -> s1 [105, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s11 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s11 -> s11 [0, 65535] { R10122 += 1, R10016 += 1 };
  s11 -> s5 [0, 65535] { R10122 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R10122 += 1, R10016 += 1, R608 += 1 };
  s11 -> s12 [111, 111] { R10122 += 1, R10016 += 1, R608 += 1 };
  s11 -> s1 [112, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s12 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s12 -> s12 [0, 65535] { R10122 += 1, R10016 += 1 };
  s12 -> s5 [0, 65535] { R10122 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R10122 += 1, R10016 += 1, R608 += 1 };
  s12 -> s13 [115, 115] { R10122 += 1, R10016 += 1, R608 += 1 };
  s12 -> s1 [116, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s13 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s13 -> s13 [0, 65535] { R10122 += 1, R10016 += 1 };
  s13 -> s5 [0, 65535] { R10122 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R10122 += 1, R10016 += 1, R608 += 1 };
  s13 -> s14 [116, 116] { R10122 += 1, R10016 += 1, R608 += 1 };
  s13 -> s1 [117, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  s14 -> s1 [0, 80] { R10122 += 1, R10016 += 1, R608 += 1 };
  s14 -> s1 [91, 65535] { R10122 += 1, R10016 += 1, R608 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R10123 += 1, R10124 += 1 };
  s0 -> s1 [0, 65535] { R10124 += 1, R10017 += 1, R10018 += 1 };
  s0 -> s2 [0, 65535] { R10124 += 1, R10018 += 1, R613 += 1, R614 += 1 };
  s0 -> s3 [0, 65535] { R10124 += 1, R10018 += 1, R612 += 1, R613 += 1 };
  s1 -> s1 [0, 65535] { R10124 += 1, R10017 += 1, R10018 += 1 };
  s1 -> s2 [0, 65535] { R10124 += 1, R10018 += 1, R613 += 1, R614 += 1 };
  s1 -> s3 [0, 65535] { R10124 += 1, R10018 += 1, R612 += 1, R613 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10124 += 1, R10018 += 1 };
  s2 -> s2 [0, 65535] { R10124 += 1, R10018 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10124 += 1 };
  s3 -> s2 [0, 65535] { R10124 += 1, R10018 += 1, R613 += 1, R614 += 1 };
  s3 -> s3 [0, 65535] { R10124 += 1, R10018 += 1, R612 += 1, R613 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10124 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10124 += 1 };
  s6 -> s6 [0, 65535] { R10124 += 1, R10018 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10124 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10126 += 1, R10020 += 1, R618 += 1, R619 += 1 };
  s0 -> s0 [0, 65535] { R10125 += 1, R10126 += 1 };
  s0 -> s2 [0, 65535] { R10126 += 1, R10020 += 1, R619 += 1, R620 += 1 };
  s0 -> s3 [0, 65535] { R10126 += 1, R10019 += 1, R10020 += 1 };
  s1 -> s5 [0, 65535] { R10126 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10126 += 1, R10020 += 1, R618 += 1, R619 += 1 };
  s1 -> s2 [0, 65535] { R10126 += 1, R10020 += 1, R619 += 1, R620 += 1 };
  s2 -> s5 [0, 65535] { R10126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10126 += 1, R10020 += 1 };
  s2 -> s2 [0, 65535] { R10126 += 1, R10020 += 1, R619 += 1, R620 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10126 += 1, R10020 += 1, R618 += 1, R619 += 1 };
  s3 -> s2 [0, 65535] { R10126 += 1, R10020 += 1, R619 += 1, R620 += 1 };
  s3 -> s3 [0, 65535] { R10126 += 1, R10019 += 1, R10020 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10126 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10126 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10126 += 1, R10020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10128 += 1, R10022 += 1 };
  s0 -> s2 [0, 65535] { R10128 += 1, R10021 += 1, R10022 += 1 };
  s0 -> s0 [0, 65535] { R10127 += 1, R10128 += 1 };
  s1 -> s1 [0, 65535] { R10128 += 1, R10022 += 1 };
  s1 -> s4 [0, 65535] { R10128 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10128 += 1, R10022 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10128 += 1, R10021 += 1, R10022 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10128 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R10130 += 1, R10024 += 1, R625 += 1, R626 += 1 };
  s0 -> s0 [0, 65535] { R10129 += 1, R10130 += 1 };
  s0 -> s2 [0, 65535] { R10130 += 1, R10023 += 1, R10024 += 1 };
  s0 -> s3 [0, 65535] { R10130 += 1, R10024 += 1, R624 += 1, R625 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10130 += 1, R10024 += 1 };
  s1 -> s1 [0, 65535] { R10130 += 1, R10024 += 1, R625 += 1, R626 += 1 };
  s1 -> s5 [0, 65535] { R10130 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10130 += 1, R10024 += 1, R625 += 1, R626 += 1 };
  s2 -> s2 [0, 65535] { R10130 += 1, R10023 += 1, R10024 += 1 };
  s2 -> s3 [0, 65535] { R10130 += 1, R10024 += 1, R624 += 1, R625 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10130 += 1, R10024 += 1, R625 += 1, R626 += 1 };
  s3 -> s3 [0, 65535] { R10130 += 1, R10024 += 1, R624 += 1, R625 += 1 };
  s3 -> s5 [0, 65535] { R10130 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10130 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10130 += 1, R10024 += 1 };
  s6 -> s5 [0, 65535] { R10130 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10131 += 1, R10132 += 1 };
  s0 -> s1 [0, 65535] { R10132 += 1, R10025 += 1, R10026 += 1 };
  s0 -> s2 [0, 65535] { R10132 += 1, R10026 += 1 };
  s1 -> s1 [0, 65535] { R10132 += 1, R10025 += 1, R10026 += 1 };
  s1 -> s2 [0, 65535] { R10132 += 1, R10026 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10132 += 1, R10026 += 1 };
  s2 -> s3 [0, 65535] { R10132 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10132 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10134 += 1, R10027 += 1, R10028 += 1 };
  s0 -> s0 [0, 65535] { R10133 += 1, R10134 += 1 };
  s0 -> s2 [0, 65535] { R10134 += 1, R10028 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10134 += 1, R10027 += 1, R10028 += 1 };
  s1 -> s2 [0, 65535] { R10134 += 1, R10028 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10134 += 1 };
  s2 -> s2 [0, 65535] { R10134 += 1, R10028 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10136 += 1, R10030 += 1, R9979 += 1, R9980 += 1 };
  s0 -> s2 [0, 65535] { R10136 += 1, R10029 += 1, R10030 += 1 };
  s0 -> s0 [0, 65535] { R10135 += 1, R10136 += 1 };
  s0 -> s3 [0, 65535] { R10136 += 1, R10030 += 1, R9978 += 1, R9979 += 1 };
  s1 -> s1 [0, 65535] { R10136 += 1, R10030 += 1, R9979 += 1, R9980 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10136 += 1 };
  s1 -> s6 [0, 65535] { R10136 += 1, R10030 += 1 };
  s2 -> s1 [0, 65535] { R10136 += 1, R10030 += 1, R9979 += 1, R9980 += 1 };
  s2 -> s2 [0, 65535] { R10136 += 1, R10029 += 1, R10030 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10136 += 1, R10030 += 1, R9978 += 1, R9979 += 1 };
  s3 -> s1 [0, 65535] { R10136 += 1, R10030 += 1, R9979 += 1, R9980 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10136 += 1, R10030 += 1, R9978 += 1, R9979 += 1 };
  s3 -> s5 [0, 65535] { R10136 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10136 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10136 += 1 };
  s6 -> s6 [0, 65535] { R10136 += 1, R10030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R10138 += 1, R10031 += 1, R10032 += 1 };
  s0 -> s2 [0, 65535] { R10138 += 1, R10032 += 1 };
  s0 -> s0 [0, 65535] { R10137 += 1, R10138 += 1 };
  s1 -> s1 [0, 65535] { R10138 += 1, R10031 += 1, R10032 += 1 };
  s1 -> s2 [0, 65535] { R10138 += 1, R10032 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10138 += 1 };
  s2 -> s2 [0, 65535] { R10138 += 1, R10032 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10138 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 79] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s0 -> s0 [0, 65535] { R10139 += 1, R10140 += 1 };
  s0 -> s2 [0, 65535] { R10140 += 1, R10033 += 1, R10034 += 1 };
  s0 -> s3 [0, 65535] { R10140 += 1, R10034 += 1, R9984 += 1, R9985 += 1 };
  s0 -> s4 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s0 -> s5 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s0 -> s1 [81, 65535] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s1 -> s1 [0, 79] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s1 -> s6 [0, 65535] { R10140 += 1 };
  s1 -> s1 [0, 65535] { R10140 += 1, R10034 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s1 -> s5 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s1 -> s1 [81, 65535] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s2 -> s1 [0, 79] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s2 -> s2 [0, 65535] { R10140 += 1, R10033 += 1, R10034 += 1 };
  s2 -> s3 [0, 65535] { R10140 += 1, R10034 += 1, R9984 += 1, R9985 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s2 -> s5 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s2 -> s1 [81, 65535] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s3 -> s1 [0, 79] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s3 -> s6 [0, 65535] { R10140 += 1 };
  s3 -> s3 [0, 65535] { R10140 += 1, R10034 += 1, R9984 += 1, R9985 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s3 -> s5 [80, 80] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s3 -> s1 [81, 65535] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s4 -> s6 [0, 65535] { R10140 += 1 };
  s4 -> s8 [0, 65535] { R10140 += 1, R10034 += 1 };
  s4 -> s4 [0, 65535] { R10140 += 1, R10034 += 1, R9985 += 1, R9986 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R10140 += 1 };
  s5 -> s5 [0, 65535] { R10140 += 1, R10034 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10140 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10140 += 1 };
  s8 -> s8 [0, 65535] { R10140 += 1, R10034 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10142 += 1, R10035 += 1, R10036 += 1 };
  s0 -> s0 [0, 65535] { R10141 += 1, R10142 += 1 };
  s0 -> s2 [0, 65535] { R10142 += 1, R10036 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R10142 += 1, R10035 += 1, R10036 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10142 += 1, R10036 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10142 += 1 };
  s2 -> s2 [0, 65535] { R10142 += 1, R10036 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10142 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R10144 += 1, R10038 += 1 };
  s0 -> s2 [0, 65535] { R10144 += 1, R10037 += 1, R10038 += 1 };
  s0 -> s0 [0, 65535] { R10143 += 1, R10144 += 1 };
  s0 -> s3 [65, 65] { R10144 += 1, R10038 += 1 };
  s0 -> s4 [65, 65] { R10144 += 1, R10038 += 1 };
  s0 -> s5 [80, 80] { R10144 += 1, R10038 += 1 };
  s0 -> s1 [81, 65535] { R10144 += 1, R10038 += 1 };
  s1 -> s1 [0, 64] { R10144 += 1, R10038 += 1 };
  s1 -> s3 [65, 65] { R10144 += 1, R10038 += 1 };
  s1 -> s4 [65, 65] { R10144 += 1, R10038 += 1 };
  s1 -> s5 [80, 80] { R10144 += 1, R10038 += 1 };
  s1 -> s1 [81, 65535] { R10144 += 1, R10038 += 1 };
  s2 -> s1 [0, 64] { R10144 += 1, R10038 += 1 };
  s2 -> s2 [0, 65535] { R10144 += 1, R10037 += 1, R10038 += 1 };
  s2 -> s3 [65, 65] { R10144 += 1, R10038 += 1 };
  s2 -> s4 [65, 65] { R10144 += 1, R10038 += 1 };
  s2 -> s5 [80, 80] { R10144 += 1, R10038 += 1 };
  s2 -> s1 [81, 65535] { R10144 += 1, R10038 += 1 };
  s3 -> s3 [0, 65] { R10144 += 1, R10038 += 1 };
  s3 -> s7 [80, 80] { R10144 += 1, R10038 += 1 };
  s3 -> s3 [81, 65535] { R10144 += 1, R10038 += 1 };
  s5 -> s5 [0, 64] { R10144 += 1, R10038 += 1 };
  s5 -> s5 [0, 65535] { R10144 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10144 += 1, R10038 += 1 };
  s5 -> s8 [65, 65] { R10144 += 1, R10038 += 1 };
  s5 -> s5 [80, 65535] { R10144 += 1, R10038 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10144 += 1, R10038 += 1 };
  s7 -> s7 [0, 65535] { R10144 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R10144 += 1, R10038 += 1 };
  s8 -> s8 [0, 65535] { R10144 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10146 += 1, R10040 += 1, R565 += 1 };
  s0 -> s2 [0, 65535] { R10146 += 1, R10039 += 1, R10040 += 1 };
  s0 -> s0 [0, 65535] { R10145 += 1, R10146 += 1 };
  s0 -> s3 [65, 65] { R10146 += 1, R10040 += 1, R565 += 1 };
  s0 -> s4 [65, 65] { R10146 += 1, R10040 += 1, R565 += 1 };
  s0 -> s1 [66, 65535] { R10146 += 1, R10040 += 1, R565 += 1 };
  s1 -> s1 [0, 64] { R10146 += 1, R10040 += 1, R565 += 1 };
  s1 -> s1 [0, 65535] { R10146 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10146 += 1, R10040 += 1, R565 += 1 };
  s1 -> s4 [65, 65] { R10146 += 1, R10040 += 1, R565 += 1 };
  s1 -> s1 [66, 65535] { R10146 += 1, R10040 += 1, R565 += 1 };
  s2 -> s1 [0, 64] { R10146 += 1, R10040 += 1, R565 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10146 += 1, R10039 += 1, R10040 += 1 };
  s2 -> s3 [65, 65] { R10146 += 1, R10040 += 1, R565 += 1 };
  s2 -> s4 [65, 65] { R10146 += 1, R10040 += 1, R565 += 1 };
  s2 -> s1 [66, 65535] { R10146 += 1, R10040 += 1, R565 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10146 += 1, R10040 += 1, R565 += 1 };
  s4 -> s6 [0, 65535] { R10146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10146 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R10148 += 1, R10042 += 1, R567 += 1 };
  s0 -> s0 [0, 65535] { R10147 += 1, R10148 += 1 };
  s0 -> s2 [0, 65535] { R10148 += 1, R10041 += 1, R10042 += 1 };
  s0 -> s3 [65, 65] { R10148 += 1, R10042 += 1, R567 += 1 };
  s0 -> s4 [65, 65] { R10148 += 1, R10042 += 1, R567 += 1 };
  s0 -> s1 [66, 65535] { R10148 += 1, R10042 += 1, R567 += 1 };
  s1 -> s1 [0, 64] { R10148 += 1, R10042 += 1, R567 += 1 };
  s1 -> s1 [0, 65535] { R10148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10148 += 1, R10042 += 1, R567 += 1 };
  s1 -> s4 [65, 65] { R10148 += 1, R10042 += 1, R567 += 1 };
  s1 -> s1 [66, 65535] { R10148 += 1, R10042 += 1, R567 += 1 };
  s2 -> s1 [0, 64] { R10148 += 1, R10042 += 1, R567 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10148 += 1, R10041 += 1, R10042 += 1 };
  s2 -> s3 [65, 65] { R10148 += 1, R10042 += 1, R567 += 1 };
  s2 -> s4 [65, 65] { R10148 += 1, R10042 += 1, R567 += 1 };
  s2 -> s1 [66, 65535] { R10148 += 1, R10042 += 1, R567 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10148 += 1, R10042 += 1, R567 += 1 };
  s3 -> s6 [0, 65535] { R10148 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10148 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R10150 += 1, R10044 += 1, R569 += 1 };
  s0 -> s0 [0, 65535] { R10149 += 1, R10150 += 1 };
  s0 -> s2 [0, 65535] { R10150 += 1, R10043 += 1, R10044 += 1 };
  s0 -> s3 [65, 65] { R10150 += 1, R10044 += 1, R569 += 1 };
  s0 -> s4 [65, 65] { R10150 += 1, R10044 += 1, R569 += 1 };
  s0 -> s1 [66, 65535] { R10150 += 1, R10044 += 1, R569 += 1 };
  s1 -> s1 [0, 64] { R10150 += 1, R10044 += 1, R569 += 1 };
  s1 -> s1 [0, 65535] { R10150 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10150 += 1, R10044 += 1, R569 += 1 };
  s1 -> s4 [65, 65] { R10150 += 1, R10044 += 1, R569 += 1 };
  s1 -> s1 [66, 65535] { R10150 += 1, R10044 += 1, R569 += 1 };
  s2 -> s1 [0, 64] { R10150 += 1, R10044 += 1, R569 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10150 += 1, R10043 += 1, R10044 += 1 };
  s2 -> s3 [65, 65] { R10150 += 1, R10044 += 1, R569 += 1 };
  s2 -> s4 [65, 65] { R10150 += 1, R10044 += 1, R569 += 1 };
  s2 -> s1 [66, 65535] { R10150 += 1, R10044 += 1, R569 += 1 };
  s3 -> s6 [0, 65535] { R10150 += 1 };
  s3 -> s3 [0, 65535] { R10150 += 1, R10044 += 1, R569 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10150 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10150 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10152 += 1, R10046 += 1, R571 += 1 };
  s0 -> s2 [0, 65535] { R10152 += 1, R10045 += 1, R10046 += 1 };
  s0 -> s0 [0, 65535] { R10151 += 1, R10152 += 1 };
  s0 -> s3 [65, 65] { R10152 += 1, R10046 += 1, R571 += 1 };
  s0 -> s4 [65, 65] { R10152 += 1, R10046 += 1, R571 += 1 };
  s0 -> s1 [66, 65535] { R10152 += 1, R10046 += 1, R571 += 1 };
  s1 -> s1 [0, 64] { R10152 += 1, R10046 += 1, R571 += 1 };
  s1 -> s1 [0, 65535] { R10152 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10152 += 1, R10046 += 1, R571 += 1 };
  s1 -> s4 [65, 65] { R10152 += 1, R10046 += 1, R571 += 1 };
  s1 -> s1 [66, 65535] { R10152 += 1, R10046 += 1, R571 += 1 };
  s2 -> s1 [0, 64] { R10152 += 1, R10046 += 1, R571 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10152 += 1, R10045 += 1, R10046 += 1 };
  s2 -> s3 [65, 65] { R10152 += 1, R10046 += 1, R571 += 1 };
  s2 -> s4 [65, 65] { R10152 += 1, R10046 += 1, R571 += 1 };
  s2 -> s1 [66, 65535] { R10152 += 1, R10046 += 1, R571 += 1 };
  s3 -> s3 [0, 65535] { R10152 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10152 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10152 += 1, R10046 += 1, R571 += 1 };
  s5 -> s5 [0, 65535] { R10152 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s0 -> s0 [0, 65535] { R10153 += 1, R10154 += 1 };
  s0 -> s2 [0, 65535] { R10154 += 1, R10047 += 1, R10048 += 1 };
  s0 -> s3 [65, 65] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s0 -> s4 [65, 65] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s0 -> s1 [66, 65535] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [0, 64] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10154 += 1 };
  s1 -> s3 [65, 65] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s1 -> s4 [65, 65] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [66, 65535] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [0, 64] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10154 += 1, R10047 += 1, R10048 += 1 };
  s2 -> s3 [65, 65] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s2 -> s4 [65, 65] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [66, 65535] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s3 -> s3 [0, 65535] { R10154 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10154 += 1 };
  s4 -> s4 [0, 65535] { R10154 += 1, R10048 += 1, R573 += 1, R574 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10154 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R10156 += 1, R10050 += 1 };
  s0 -> s0 [0, 65535] { R10155 += 1, R10156 += 1 };
  s0 -> s2 [0, 65535] { R10156 += 1, R10049 += 1, R10050 += 1 };
  s0 -> s3 [65, 65] { R10156 += 1, R10050 += 1 };
  s0 -> s4 [65, 65] { R10156 += 1, R10050 += 1 };
  s0 -> s1 [66, 65535] { R10156 += 1, R10050 += 1 };
  s1 -> s1 [0, 64] { R10156 += 1, R10050 += 1 };
  s1 -> s1 [0, 65535] { R10156 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10156 += 1, R10050 += 1 };
  s1 -> s4 [65, 65] { R10156 += 1, R10050 += 1 };
  s1 -> s1 [66, 65535] { R10156 += 1, R10050 += 1 };
  s2 -> s1 [0, 64] { R10156 += 1, R10050 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10156 += 1, R10049 += 1, R10050 += 1 };
  s2 -> s3 [65, 65] { R10156 += 1, R10050 += 1 };
  s2 -> s4 [65, 65] { R10156 += 1, R10050 += 1 };
  s2 -> s1 [66, 65535] { R10156 += 1, R10050 += 1 };
  s3 -> s3 [0, 65535] { R10156 += 1, R10050 += 1 };
  s3 -> s6 [0, 65535] { R10156 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10156 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10156 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R10157 += 1, R10158 += 1 };
  s0 -> s2 [0, 65535] { R10158 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s3 [65, 65] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s0 -> s4 [65, 65] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s0 -> s1 [66, 65535] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [0, 64] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [0, 65535] { R10158 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s1 -> s4 [65, 65] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [66, 65535] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s2 -> s1 [0, 64] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s2 -> s2 [0, 65535] { R10158 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s2 -> s4 [65, 65] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s2 -> s1 [66, 65535] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s3 -> s3 [0, 65535] { R10158 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10158 += 1, R10052 += 1, R579 += 1, R580 += 1 };
  s4 -> s5 [0, 65535] { R10158 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10158 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s0 -> s2 [0, 65535] { R10160 += 1, R10053 += 1, R10054 += 1 };
  s0 -> s0 [0, 65535] { R10159 += 1, R10160 += 1 };
  s0 -> s3 [65, 65] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s0 -> s4 [65, 65] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s0 -> s1 [66, 65535] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [0, 64] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10160 += 1 };
  s1 -> s3 [65, 65] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s1 -> s4 [65, 65] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [66, 65535] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s2 -> s1 [0, 64] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10160 += 1, R10053 += 1, R10054 += 1 };
  s2 -> s3 [65, 65] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s2 -> s4 [65, 65] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s2 -> s1 [66, 65535] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10160 += 1, R10054 += 1, R585 += 1, R586 += 1 };
  s3 -> s6 [0, 65535] { R10160 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10160 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10160 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s0 -> s2 [0, 65535] { R10162 += 1, R10055 += 1, R10056 += 1 };
  s0 -> s0 [0, 65535] { R10161 += 1, R10162 += 1 };
  s0 -> s3 [65, 65] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s0 -> s4 [65, 65] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s0 -> s1 [66, 65535] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [0, 64] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [0, 65535] { R10162 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s1 -> s4 [65, 65] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [66, 65535] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s2 -> s1 [0, 64] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10162 += 1, R10055 += 1, R10056 += 1 };
  s2 -> s3 [65, 65] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s2 -> s4 [65, 65] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s2 -> s1 [66, 65535] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s3 -> s3 [0, 65535] { R10162 += 1, R10056 += 1, R589 += 1, R590 += 1 };
  s3 -> s6 [0, 65535] { R10162 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10162 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10162 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s0 -> s0 [0, 65535] { R10163 += 1, R10164 += 1 };
  s0 -> s2 [0, 65535] { R10164 += 1, R10057 += 1, R10058 += 1 };
  s0 -> s3 [65, 65] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s0 -> s4 [65, 65] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s0 -> s1 [66, 65535] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [0, 64] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [0, 65535] { R10164 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s1 -> s4 [65, 65] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [66, 65535] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s2 -> s1 [0, 64] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10164 += 1, R10057 += 1, R10058 += 1 };
  s2 -> s3 [65, 65] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s2 -> s4 [65, 65] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s2 -> s1 [66, 65535] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10164 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10164 += 1 };
  s4 -> s4 [0, 65535] { R10164 += 1, R10058 += 1, R595 += 1, R596 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10164 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s0 -> s0 [0, 65535] { R10165 += 1, R10166 += 1 };
  s0 -> s2 [0, 65535] { R10166 += 1, R10059 += 1, R10060 += 1 };
  s0 -> s3 [65, 65] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s0 -> s4 [65, 65] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s0 -> s1 [66, 65535] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [0, 64] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10166 += 1 };
  s1 -> s3 [65, 65] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s1 -> s4 [65, 65] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [66, 65535] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s2 -> s1 [0, 64] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10166 += 1, R10059 += 1, R10060 += 1 };
  s2 -> s3 [65, 65] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s2 -> s4 [65, 65] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s2 -> s1 [66, 65535] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s3 -> s3 [0, 65535] { R10166 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10166 += 1 };
  s4 -> s4 [0, 65535] { R10166 += 1, R10060 += 1, R599 += 1, R600 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10166 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s0 -> s2 [0, 65535] { R10168 += 1, R10061 += 1, R10062 += 1 };
  s0 -> s0 [0, 65535] { R10167 += 1, R10168 += 1 };
  s0 -> s3 [65, 65] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s0 -> s4 [65, 65] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s0 -> s1 [66, 65535] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 64] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 65535] { R10168 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [65, 65] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [66, 65535] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [0, 64] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s2 -> s2 [0, 65535] { R10168 += 1, R10061 += 1, R10062 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [65, 65] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [66, 65535] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s3 -> s3 [0, 65535] { R10168 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10168 += 1 };
  s4 -> s4 [0, 65535] { R10168 += 1, R10062 += 1, R605 += 1, R606 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10168 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s0 -> s2 [0, 65535] { R10170 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s0 [0, 65535] { R10169 += 1, R10170 += 1 };
  s0 -> s3 [65, 65] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10170 += 1 };
  s1 -> s3 [65, 65] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10170 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s3 [65, 65] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10170 += 1 };
  s3 -> s3 [0, 65535] { R10170 += 1, R10064 += 1, R609 += 1, R610 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R10172 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s0 [0, 65535] { R10171 += 1, R10172 += 1 };
  s0 -> s3 [65, 65] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s0 -> s4 [65, 65] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s0 -> s1 [66, 65535] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 64] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10172 += 1 };
  s1 -> s3 [65, 65] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [65, 65] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [66, 65535] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [0, 64] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10172 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s3 [65, 65] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s2 -> s4 [65, 65] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [66, 65535] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s3 -> s3 [0, 65535] { R10172 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10172 += 1 };
  s4 -> s4 [0, 65535] { R10172 += 1, R10066 += 1, R615 += 1, R616 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10172 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10174 += 1, R10068 += 1 };
  s0 -> s0 [0, 65535] { R10173 += 1, R10174 += 1 };
  s0 -> s2 [0, 65535] { R10174 += 1, R10067 += 1, R10068 += 1 };
  s0 -> s3 [65, 65] { R10174 += 1, R10068 += 1 };
  s0 -> s4 [65, 65] { R10174 += 1, R10068 += 1 };
  s0 -> s1 [66, 65535] { R10174 += 1, R10068 += 1 };
  s1 -> s1 [0, 64] { R10174 += 1, R10068 += 1 };
  s1 -> s1 [0, 65535] { R10174 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10174 += 1, R10068 += 1 };
  s1 -> s4 [65, 65] { R10174 += 1, R10068 += 1 };
  s1 -> s1 [66, 65535] { R10174 += 1, R10068 += 1 };
  s2 -> s1 [0, 64] { R10174 += 1, R10068 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10174 += 1, R10067 += 1, R10068 += 1 };
  s2 -> s3 [65, 65] { R10174 += 1, R10068 += 1 };
  s2 -> s4 [65, 65] { R10174 += 1, R10068 += 1 };
  s2 -> s1 [66, 65535] { R10174 += 1, R10068 += 1 };
  s3 -> s3 [0, 65535] { R10174 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10174 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10174 += 1, R10068 += 1 };
  s5 -> s5 [0, 65535] { R10174 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R10176 += 1, R10069 += 1, R10070 += 1 };
  s0 -> s0 [0, 65535] { R10175 += 1, R10176 += 1 };
  s0 -> s3 [65, 65] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s0 -> s4 [65, 65] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s0 -> s1 [66, 65535] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 64] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10176 += 1 };
  s1 -> s3 [65, 65] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s1 -> s4 [65, 65] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [66, 65535] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [0, 64] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10176 += 1, R10069 += 1, R10070 += 1 };
  s2 -> s3 [65, 65] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s2 -> s4 [65, 65] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [66, 65535] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10176 += 1 };
  s4 -> s4 [0, 65535] { R10176 += 1, R10070 += 1, R621 += 1, R622 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10176 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10178 += 1, R10072 += 1 };
  s0 -> s0 [0, 65535] { R10177 += 1, R10178 += 1 };
  s0 -> s2 [0, 65535] { R10178 += 1, R10071 += 1, R10072 += 1 };
  s0 -> s3 [65, 65] { R10178 += 1, R10072 += 1 };
  s0 -> s4 [65, 65] { R10178 += 1, R10072 += 1 };
  s0 -> s1 [66, 65535] { R10178 += 1, R10072 += 1 };
  s1 -> s1 [0, 64] { R10178 += 1, R10072 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10178 += 1 };
  s1 -> s3 [65, 65] { R10178 += 1, R10072 += 1 };
  s1 -> s4 [65, 65] { R10178 += 1, R10072 += 1 };
  s1 -> s1 [66, 65535] { R10178 += 1, R10072 += 1 };
  s2 -> s1 [0, 64] { R10178 += 1, R10072 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10178 += 1, R10071 += 1, R10072 += 1 };
  s2 -> s3 [65, 65] { R10178 += 1, R10072 += 1 };
  s2 -> s4 [65, 65] { R10178 += 1, R10072 += 1 };
  s2 -> s1 [66, 65535] { R10178 += 1, R10072 += 1 };
  s3 -> s3 [0, 65535] { R10178 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10178 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10178 += 1, R10072 += 1 };
  s5 -> s5 [0, 65535] { R10178 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s0 -> s2 [0, 64] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s0 -> s0 [0, 65535] { R10179 += 1, R10180 += 1 };
  s0 -> s3 [0, 65535] { R10180 += 1, R10073 += 1, R10074 += 1 };
  s0 -> s4 [65, 65] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s0 -> s5 [65, 65] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s0 -> s6 [65, 65] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s0 -> s7 [65, 65] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s0 -> s1 [66, 82] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s0 -> s2 [66, 65535] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s0 -> s8 [83, 83] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s0 -> s1 [84, 65535] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s1 -> s1 [0, 64] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s1 -> s4 [65, 65] { R10180 += 1, R10074 += 1 };
  s1 -> s7 [65, 65] { R10180 += 1, R10074 += 1 };
  s1 -> s1 [66, 82] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s1 -> s1 [66, 65535] { R10180 += 1, R10074 += 1 };
  s1 -> s8 [83, 83] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s1 -> s1 [84, 65535] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s1 [0, 64] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s2 [0, 64] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s2 -> s4 [65, 65] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s5 [65, 65] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s2 -> s6 [65, 65] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s2 -> s7 [65, 65] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s1 [66, 82] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s2 [66, 65535] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s2 -> s8 [83, 83] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s1 [84, 65535] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s3 -> s1 [0, 64] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s3 -> s2 [0, 64] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s3 -> s3 [0, 65535] { R10180 += 1, R10073 += 1, R10074 += 1 };
  s3 -> s4 [65, 65] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s3 -> s5 [65, 65] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s3 -> s6 [65, 65] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s3 -> s7 [65, 65] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s3 -> s1 [66, 82] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s3 -> s2 [66, 65535] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s3 -> s8 [83, 83] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s3 -> s1 [84, 65535] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s4 -> s4 [0, 82] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s4 -> s4 [0, 65535] { R10180 += 1, R10074 += 1 };
  s4 -> s11 [83, 83] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s4 -> s4 [84, 65535] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s5 -> s4 [0, 82] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s5 -> s5 [0, 65535] { R10180 += 1, R10074 += 1, R9969 += 1, R9970 += 1 };
  s5 -> s11 [83, 83] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s5 -> s4 [84, 65535] { R10180 += 1, R10074 += 1, R9970 += 1, R9971 += 1 };
  s8 -> s8 [0, 64] { R10180 += 1, R10074 += 1 };
  s8 -> s8 [0, 65535] { R10180 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R10180 += 1, R10074 += 1 };
  s8 -> s11 [65, 65] { R10180 += 1, R10074 += 1 };
  s8 -> s8 [66, 65535] { R10180 += 1, R10074 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10180 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10180 += 1 };
  s11 -> s11 [0, 65535] { R10180 += 1, R10074 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10180 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s0 -> s2 [0, 65535] { R10182 += 1, R10075 += 1, R10076 += 1 };
  s0 -> s0 [0, 65535] { R10181 += 1, R10182 += 1 };
  s0 -> s3 [65, 65] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s0 -> s4 [65, 65] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s0 -> s1 [66, 65535] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s1 -> s1 [0, 64] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s1 -> s1 [0, 65535] { R10182 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s1 -> s4 [65, 65] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s1 -> s1 [66, 65535] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s2 -> s1 [0, 64] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s2 -> s2 [0, 65535] { R10182 += 1, R10075 += 1, R10076 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s2 -> s4 [65, 65] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s2 -> s1 [66, 65535] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10182 += 1 };
  s4 -> s5 [0, 65535] { R10182 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10182 += 1, R10076 += 1, R9975 += 1, R9976 += 1 };
  s5 -> s5 [0, 65535] { R10182 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10184 += 1, R10078 += 1 };
  s0 -> s2 [0, 65535] { R10184 += 1, R10077 += 1, R10078 += 1 };
  s0 -> s0 [0, 65535] { R10183 += 1, R10184 += 1 };
  s0 -> s3 [65, 65] { R10184 += 1, R10078 += 1 };
  s0 -> s4 [65, 65] { R10184 += 1, R10078 += 1 };
  s0 -> s1 [66, 65535] { R10184 += 1, R10078 += 1 };
  s1 -> s1 [0, 64] { R10184 += 1, R10078 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10184 += 1 };
  s1 -> s3 [65, 65] { R10184 += 1, R10078 += 1 };
  s1 -> s4 [65, 65] { R10184 += 1, R10078 += 1 };
  s1 -> s1 [66, 65535] { R10184 += 1, R10078 += 1 };
  s2 -> s1 [0, 64] { R10184 += 1, R10078 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10184 += 1, R10077 += 1, R10078 += 1 };
  s2 -> s3 [65, 65] { R10184 += 1, R10078 += 1 };
  s2 -> s4 [65, 65] { R10184 += 1, R10078 += 1 };
  s2 -> s1 [66, 65535] { R10184 += 1, R10078 += 1 };
  s3 -> s3 [0, 65535] { R10184 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10184 += 1 };
  s4 -> s4 [0, 65535] { R10184 += 1, R10078 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10184 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s0 -> s0 [0, 65535] { R10185 += 1, R10186 += 1 };
  s0 -> s2 [0, 65535] { R10186 += 1, R10079 += 1, R10080 += 1 };
  s0 -> s3 [65, 65] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s0 -> s4 [65, 65] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s0 -> s1 [66, 65535] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s1 -> s1 [0, 64] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s1 -> s1 [0, 65535] { R10186 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s1 -> s4 [65, 65] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s1 -> s1 [66, 65535] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s2 -> s1 [0, 64] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s2 -> s2 [0, 65535] { R10186 += 1, R10079 += 1, R10080 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s2 -> s4 [65, 65] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s2 -> s1 [66, 65535] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s3 -> s3 [0, 65535] { R10186 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10186 += 1 };
  s4 -> s4 [0, 65535] { R10186 += 1, R10080 += 1, R9981 += 1, R9982 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10186 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P55
automaton P55_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
constraint R3 = R10034 && R4 = R10186 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R566 + R565 = 0 && R9987 = 0 && R9988 = R10034 && R9989 = 0 && R9990 = R10034 && R9991 = 0 && R9992 = R10034 && R9993 = 0 && R9994 = R10034 && R9995 = 0 && R9996 = R10034 && R9997 = 0 && R9998 = R10034 && R9999 = 0 && R10000 = R10034 && R10001 = 0 && R10002 = R10034 && R10003 = 0 && R10004 = R10034 && R10005 = 0 && R10006 = R10034 && R10007 = 0 && R10008 = R10034 && R10009 = 0 && R10010 = R10034 && R10011 = 0 && R10012 = R10034 && R10013 = 0 && R10014 = R10034 && R10015 = 0 && R10016 = R10034 && R10017 = 0 && R10018 = R10034 && R10019 = 0 && R10020 = R10034 && R10021 = 0 && R10022 = R10034 && R10023 = 0 && R10024 = R10034 && R10025 = 0 && R10026 = R10034 && R10027 = 0 && R10028 = R10034 && R10029 = 0 && R10030 = R10034 && R10031 = 0 && R10032 = R10034 && R10033 = 0 && R10037 = 0 && R10038 = 0 && R10073 = 0 && R10074 = 0 && R10081 = 10 && R10082 = R10186 && R10083 = 10 && R10084 = R10186 && R10085 = 10 && R10086 = R10186 && R10087 = 10 && R10088 = R10186 && R10089 = 10 && R10090 = R10186 && R10091 = 10 && R10092 = R10186 && R10093 = 10 && R10094 = R10186 && R10095 = 10 && R10096 = R10186 && R10097 = 10 && R10098 = R10186 && R10099 = 10 && R10100 = R10186 && R10101 = 10 && R10102 = R10186 && R10103 = 10 && R10104 = R10186 && R10105 = 10 && R10106 = R10186 && R10107 = 10 && R10108 = R10186 && R10109 = 10 && R10110 = R10186 && R10111 = 10 && R10112 = R10186 && R10113 = 10 && R10114 = R10186 && R10115 = 10 && R10116 = R10186 && R10117 = 10 && R10118 = R10186 && R10119 = 10 && R10120 = R10186 && R10121 = 10 && R10122 = R10186 && R10123 = 10 && R10124 = R10186 && R10125 = 10 && R10126 = R10186 && R10127 = 10 && R10128 = R10186 && R10129 = 10 && R10130 = R10186 && R10131 = 10 && R10132 = R10186 && R10133 = 10 && R10134 = R10186 && R10135 = 10 && R10136 = R10186 && R10137 = 10 && R10138 = R10186 && R10139 = 10 && R10140 = R10186 && R10141 = 10 && R10142 = R10186 && R10143 = 10 && R10144 = R10186 && R10145 = 10 && R10146 = R10186 && R10147 = 10 && R10148 = R10186 && R10149 = 10 && R10150 = R10186 && R10151 = 10 && R10152 = R10186 && R10153 = 10 && R10154 = R10186 && R10155 = 10 && R10156 = R10186 && R10157 = 10 && R10158 = R10186 && R10159 = 10 && R10160 = R10186 && R10161 = 10 && R10162 = R10186 && R10163 = 10 && R10164 = R10186 && R10165 = 10 && R10166 = R10186 && R10167 = 10 && R10168 = R10186 && R10169 = 10 && R10170 = R10186 && R10171 = 10 && R10172 = R10186 && R10173 = 10 && R10174 = R10186 && R10175 = 10 && R10176 = R10186 && R10177 = 10 && R10178 = R10186 && R10179 = 10 && R10180 = R10186 && R10181 = 10 && R10182 = R10186 && R10183 = 10 && R10184 = R10186 && R10185 = 10 && R594 + R591 + R9974 + R9971 != 0 && R614 + R611 + R9986 + R9983 != 0 && R15 < 1 && R16 < 1 && R568 + R567 < 1 && R570 + R569 < 1 && R572 + R571 < 1 && 0 < R10034 && 9 < R10186 && (R26 = 0 || (R10035 = 0 && R10036 = 0)) && (R26 = 0 || (R10039 = 0 && R10040 = 0)) && (R26 = 0 || (R10041 = 0 && R10042 = 0)) && (R26 = 0 || (R10043 = 0 && R10044 = 0)) && (R26 = 0 || (R10045 = 0 && R10046 = 0)) && (R26 = 0 || (R10047 = 0 && R10048 = 0)) && (R26 = 0 || (R10049 = 0 && R10050 = 0)) && (R26 = 0 || (R10051 = 0 && R10052 = 0)) && (R26 = 0 || (R10053 = 0 && R10054 = 0)) && (R26 = 0 || (R10055 = 0 && R10056 = 0)) && (R26 = 0 || (R10057 = 0 && R10058 = 0)) && (R26 = 0 || (R10059 = 0 && R10060 = 0)) && (R26 = 0 || (R10061 = 0 && R10062 = 0)) && (R26 = 0 || (R10063 = 0 && R10064 = 0)) && (R26 = 0 || (R10065 = 0 && R10066 = 0)) && (R26 = 0 || (R10067 = 0 && R10068 = 0)) && (R26 = 0 || (R10069 = 0 && R10070 = 0)) && (R26 = 0 || (R10071 = 0 && R10072 = 0)) && (R26 = 0 || (R10075 = 0 && R10076 = 0)) && (R26 = 0 || (R10077 = 0 && R10078 = 0)) && (R26 = 0 || (R10079 = 0 && R10080 = 0)) && (R578 + R575 = 0 || (R576 + R573 = 0 && R577 + R574 = 0)) && (R584 + R581 = 0 || (R582 + R579 = 0 && R583 + R580 = 0)) && (R584 + R581 = 0 || (R587 + R585 = 0 && R588 + R586 = 0)) && (R584 + R581 = 0 || (R592 + R589 = 0 && R593 + R590 = 0)) && (R604 + R601 = 0 || (R597 + R595 = 0 && R598 + R596 = 0)) && (R604 + R601 = 0 || (R602 + R599 = 0 && R603 + R600 = 0)) && (R604 + R601 = 0 || (R607 + R605 = 0 && R608 + R606 = 0)) && (R604 + R601 = 0 || (R612 + R609 = 0 && R613 + R610 = 0)) && (R620 + R617 = 0 || (R618 + R615 = 0 && R619 + R616 = 0)) && (R626 + R623 = 0 || (R624 + R621 = 0 && R625 + R622 = 0)) && (R626 + R623 = 0 || (R9972 + R9969 = 0 && R9973 + R9970 = 0)) && (R9980 + R9977 = 0 || (R9978 + R9975 = 0 && R9979 + R9976 = 0)) && (R9980 + R9977 = 0 || (R9984 + R9981 = 0 && R9985 + R9982 = 0));
// End of Parikh automata intersection problem
