// Parikh automata intersection problem, generated by OSTRICH+
counter int R15, R16, R1669, R1670, R1671, R1672, R1673, R1674, R1881, R1882, R1883, R1884, R1885, R1886, R1887, R1888, R1889, R1890, R1891, R1892, R1893, R1894, R1895, R1896, R1897, R1898, R1899, R1900, R1901, R1902, R1903, R1904, R1905, R1906, R1907, R1908, R1909, R1910, R1911, R1912, R1913, R1914, R1915, R1916, R1917, R1918, R1919, R1920, R1921, R1922, R1923, R1924, R1925, R1926, R1927, R1928, R1929, R1930, R1931, R1932, R1933, R1934, R1935, R1936, R1937, R1938, R1939, R1940, R1941, R1942, R1943, R1944, R1945, R1946, R1947, R1948, R1949, R1950, R1951, R1952, R1953, R1954, R1955, R1956, R1957, R1958, R1959, R1960, R1961, R1962, R1963, R1964, R1965, R1966, R1967, R1968, R1969, R1970, R1971, R1972, R1973, R1974, R1975, R1976, R1977, R1978, R1979, R1980, R1981, R1982, R1983, R1984, R1985, R1986, R1987, R1988, R1989, R1990, R1991, R1992, R1993, R1994, R1995, R1996, R1997, R1998, R1999, R2000, R2001, R2002, R2003, R2004, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R25, R26, R27, R28, R29, R3, R30, R4, R5, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1982 += 1 };
  s0 -> s0 [0, 65535] { R1981 += 1, R1982 += 1 };
  s0 -> s1 [45, 45] { R1982 += 1 };
  s0 -> s2 [46, 46] { R1982 += 1 };
  s0 -> s1 [48, 62] { R1982 += 1 };
  s0 -> s3 [65, 65] { R1982 += 1 };
  s0 -> s1 [66, 65535] { R1982 += 1 };
  s1 -> s1 [0, 43] { R1982 += 1 };
  s1 -> s1 [45, 45] { R1982 += 1 };
  s1 -> s2 [46, 46] { R1982 += 1 };
  s1 -> s1 [48, 62] { R1982 += 1 };
  s1 -> s3 [65, 65] { R1982 += 1 };
  s1 -> s1 [66, 65535] { R1982 += 1 };
  s2 -> s1 [0, 43] { R1982 += 1 };
  s2 -> s1 [45, 45] { R1982 += 1 };
  s2 -> s2 [46, 46] { R1982 += 1 };
  s2 -> s1 [48, 62] { R1982 += 1 };
  s2 -> s3 [65, 65] { R1982 += 1 };
  s2 -> s1 [66, 114] { R1982 += 1 };
  s2 -> s8 [115, 115] { R1982 += 1 };
  s2 -> s1 [116, 65535] { R1982 += 1 };
  s3 -> s3 [0, 43] { R1982 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1982 += 1 };
  s3 -> s4 [46, 46] { R1982 += 1 };
  s3 -> s3 [48, 62] { R1982 += 1 };
  s3 -> s3 [65, 65535] { R1982 += 1 };
  s4 -> s3 [0, 43] { R1982 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1982 += 1 };
  s4 -> s4 [46, 46] { R1982 += 1 };
  s4 -> s3 [48, 62] { R1982 += 1 };
  s4 -> s3 [65, 114] { R1982 += 1 };
  s4 -> s5 [115, 115] { R1982 += 1 };
  s4 -> s3 [116, 65535] { R1982 += 1 };
  s5 -> s3 [0, 43] { R1982 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1982 += 1 };
  s5 -> s4 [46, 46] { R1982 += 1 };
  s5 -> s3 [48, 62] { R1982 += 1 };
  s5 -> s3 [65, 110] { R1982 += 1 };
  s5 -> s6 [111, 111] { R1982 += 1 };
  s5 -> s3 [112, 65535] { R1982 += 1 };
  s6 -> s3 [0, 43] { R1982 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1982 += 1 };
  s6 -> s4 [46, 46] { R1982 += 1 };
  s6 -> s3 [48, 62] { R1982 += 1 };
  s6 -> s3 [65, 98] { R1982 += 1 };
  s6 -> s7 [99, 99] { R1982 += 1 };
  s6 -> s3 [100, 65535] { R1982 += 1 };
  s7 -> s3 [0, 43] { R1982 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1982 += 1 };
  s7 -> s4 [46, 46] { R1982 += 1 };
  s7 -> s3 [48, 62] { R1982 += 1 };
  s7 -> s3 [65, 106] { R1982 += 1 };
  s7 -> s3 [108, 65535] { R1982 += 1 };
  s8 -> s1 [0, 43] { R1982 += 1 };
  s8 -> s1 [45, 45] { R1982 += 1 };
  s8 -> s2 [46, 46] { R1982 += 1 };
  s8 -> s1 [48, 62] { R1982 += 1 };
  s8 -> s3 [65, 65] { R1982 += 1 };
  s8 -> s1 [66, 110] { R1982 += 1 };
  s8 -> s9 [111, 111] { R1982 += 1 };
  s8 -> s1 [112, 65535] { R1982 += 1 };
  s9 -> s1 [0, 43] { R1982 += 1 };
  s9 -> s1 [45, 45] { R1982 += 1 };
  s9 -> s2 [46, 46] { R1982 += 1 };
  s9 -> s1 [48, 62] { R1982 += 1 };
  s9 -> s3 [65, 65] { R1982 += 1 };
  s9 -> s1 [66, 98] { R1982 += 1 };
  s9 -> s10 [99, 99] { R1982 += 1 };
  s9 -> s1 [100, 65535] { R1982 += 1 };
  s10 -> s1 [0, 43] { R1982 += 1 };
  s10 -> s1 [45, 45] { R1982 += 1 };
  s10 -> s2 [46, 46] { R1982 += 1 };
  s10 -> s1 [48, 62] { R1982 += 1 };
  s10 -> s3 [65, 65] { R1982 += 1 };
  s10 -> s1 [66, 106] { R1982 += 1 };
  s10 -> s1 [108, 65535] { R1982 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1984 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1983 += 1, R1984 += 1 };
  s1 -> s1 [0, 65535] { R1984 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1986 += 1 };
  s0 -> s2 [0, 65535] { R1986 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R1985 += 1, R1986 += 1 };
  s0 -> s3 [58, 58] { R1986 += 1 };
  s0 -> s1 [59, 65535] { R1986 += 1 };
  s1 -> s1 [0, 57] { R1986 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1986 += 1 };
  s1 -> s1 [59, 65535] { R1986 += 1 };
  s2 -> s1 [0, 57] { R1986 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1986 += 1, R15 += 1 };
  s2 -> s3 [58, 58] { R1986 += 1 };
  s2 -> s1 [59, 65535] { R1986 += 1 };
  s3 -> s3 [0, 65535] { R1986 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1988 += 1 };
  s0 -> s2 [0, 65535] { R1988 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1987 += 1, R1988 += 1 };
  s0 -> s3 [65, 65] { R1988 += 1 };
  s0 -> s1 [66, 65535] { R1988 += 1 };
  s1 -> s1 [0, 64] { R1988 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1988 += 1 };
  s1 -> s1 [66, 65535] { R1988 += 1 };
  s2 -> s1 [0, 64] { R1988 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1988 += 1, R16 += 1 };
  s2 -> s3 [65, 65] { R1988 += 1 };
  s2 -> s1 [66, 65535] { R1988 += 1 };
  s3 -> s3 [0, 65535] { R1988 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1990 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R1990 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1989 += 1, R1990 += 1 };
  s0 -> s3 [91, 91] { R1990 += 1, R28 += 1 };
  s0 -> s1 [92, 65535] { R1990 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R1990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1990 += 1, R28 += 1 };
  s2 -> s1 [0, 90] { R1990 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1990 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [91, 91] { R1990 += 1, R28 += 1 };
  s2 -> s1 [92, 65535] { R1990 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R1990 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1990 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1991 += 1, R1992 += 1 };
  s0 -> s1 [0, 65535] { R1992 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R1992 += 1, R30 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1992 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [0, 65535] { R1992 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1992 += 1 };
  s2 -> s2 [0, 65535] { R1992 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1992 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1994 += 1, R1888 += 1 };
  s0 -> s2 [0, 65535] { R1994 += 1, R1887 += 1, R1888 += 1 };
  s0 -> s0 [0, 65535] { R1993 += 1, R1994 += 1 };
  s0 -> s1 [66, 65535] { R1994 += 1, R1888 += 1 };
  s1 -> s1 [0, 64] { R1994 += 1, R1888 += 1 };
  s1 -> s1 [0, 65535] { R1994 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1994 += 1, R1888 += 1 };
  s2 -> s1 [0, 64] { R1994 += 1, R1888 += 1 };
  s2 -> s2 [0, 65535] { R1994 += 1, R1887 += 1, R1888 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1994 += 1, R1888 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1996 += 1, R1890 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1995 += 1, R1996 += 1 };
  s0 -> s2 [0, 65535] { R1996 += 1, R1889 += 1, R1890 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1996 += 1, R1890 += 1, R25 += 1 };
  s1 -> s4 [0, 65535] { R1996 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1996 += 1, R1890 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R1996 += 1, R1889 += 1, R1890 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1996 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1998 += 1, R1892 += 1 };
  s0 -> s0 [0, 65535] { R1997 += 1, R1998 += 1 };
  s0 -> s2 [0, 65535] { R1998 += 1, R1891 += 1, R1892 += 1 };
  s0 -> s1 [80, 65535] { R1998 += 1, R1892 += 1 };
  s1 -> s1 [0, 65] { R1998 += 1, R1892 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1998 += 1 };
  s1 -> s1 [80, 65535] { R1998 += 1, R1892 += 1 };
  s2 -> s1 [0, 65] { R1998 += 1, R1892 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1998 += 1, R1891 += 1, R1892 += 1 };
  s2 -> s1 [80, 65535] { R1998 += 1, R1892 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2000 += 1, R1894 += 1, R566 += 1 };
  s0 -> s0 [0, 65535] { R1999 += 1, R2000 += 1 };
  s0 -> s2 [0, 65535] { R2000 += 1, R1893 += 1, R1894 += 1 };
  s1 -> s1 [0, 65535] { R2000 += 1, R1894 += 1, R566 += 1 };
  s1 -> s4 [0, 65535] { R2000 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2000 += 1, R1894 += 1, R566 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2000 += 1, R1893 += 1, R1894 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2000 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 84] { R2002 += 1, R1896 += 1 };
  s0 -> s0 [0, 65535] { R2001 += 1, R2002 += 1 };
  s0 -> s2 [0, 65535] { R2002 += 1, R1896 += 1, R568 += 1 };
  s0 -> s3 [0, 65535] { R2002 += 1, R1895 += 1, R1896 += 1 };
  s0 -> s1 [86, 65535] { R2002 += 1, R1896 += 1 };
  s1 -> s1 [0, 84] { R2002 += 1, R1896 += 1 };
  s1 -> s1 [0, 65535] { R2002 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R2002 += 1, R1896 += 1 };
  s2 -> s1 [0, 84] { R2002 += 1, R1896 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2002 += 1, R1896 += 1, R568 += 1 };
  s2 -> s5 [0, 65535] { R2002 += 1 };
  s2 -> s1 [86, 65535] { R2002 += 1, R1896 += 1 };
  s3 -> s1 [0, 84] { R2002 += 1, R1896 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2002 += 1, R1896 += 1, R568 += 1 };
  s3 -> s3 [0, 65535] { R2002 += 1, R1895 += 1, R1896 += 1 };
  s3 -> s1 [86, 65535] { R2002 += 1, R1896 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2002 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 82] { R2004 += 1, R1898 += 1 };
  s0 -> s0 [0, 65535] { R2003 += 1, R2004 += 1 };
  s0 -> s2 [0, 65535] { R2004 += 1, R1898 += 1, R570 += 1 };
  s0 -> s3 [0, 65535] { R2004 += 1, R1897 += 1, R1898 += 1 };
  s0 -> s1 [84, 65535] { R2004 += 1, R1898 += 1 };
  s1 -> s1 [0, 82] { R2004 += 1, R1898 += 1 };
  s1 -> s1 [0, 65535] { R2004 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [84, 65535] { R2004 += 1, R1898 += 1 };
  s2 -> s1 [0, 82] { R2004 += 1, R1898 += 1 };
  s2 -> s5 [0, 65535] { R2004 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2004 += 1, R1898 += 1, R570 += 1 };
  s2 -> s1 [84, 65535] { R2004 += 1, R1898 += 1 };
  s3 -> s1 [0, 82] { R2004 += 1, R1898 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2004 += 1, R1898 += 1, R570 += 1 };
  s3 -> s3 [0, 65535] { R2004 += 1, R1897 += 1, R1898 += 1 };
  s3 -> s1 [84, 65535] { R2004 += 1, R1898 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2004 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 79] { R2006 += 1, R1900 += 1 };
  s0 -> s0 [0, 65535] { R2005 += 1, R2006 += 1 };
  s0 -> s2 [0, 65535] { R2006 += 1, R1899 += 1, R1900 += 1 };
  s0 -> s3 [0, 65535] { R2006 += 1, R1900 += 1, R572 += 1 };
  s0 -> s1 [81, 65535] { R2006 += 1, R1900 += 1 };
  s1 -> s1 [0, 79] { R2006 += 1, R1900 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2006 += 1 };
  s1 -> s1 [81, 65535] { R2006 += 1, R1900 += 1 };
  s2 -> s1 [0, 79] { R2006 += 1, R1900 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2006 += 1, R1899 += 1, R1900 += 1 };
  s2 -> s3 [0, 65535] { R2006 += 1, R1900 += 1, R572 += 1 };
  s2 -> s1 [81, 65535] { R2006 += 1, R1900 += 1 };
  s3 -> s1 [0, 79] { R2006 += 1, R1900 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2006 += 1, R1900 += 1, R572 += 1 };
  s3 -> s5 [0, 65535] { R2006 += 1 };
  s3 -> s1 [81, 65535] { R2006 += 1, R1900 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2006 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2007 += 1, R2008 += 1 };
  s0 -> s1 [0, 65535] { R2008 += 1, R1902 += 1, R577 += 1, R578 += 1 };
  s0 -> s2 [0, 65535] { R2008 += 1, R1902 += 1, R576 += 1, R577 += 1 };
  s0 -> s3 [0, 65535] { R2008 += 1, R1901 += 1, R1902 += 1 };
  s1 -> s1 [0, 65535] { R2008 += 1, R1902 += 1, R577 += 1, R578 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R2008 += 1, R1902 += 1 };
  s1 -> s5 [0, 65535] { R2008 += 1 };
  s2 -> s1 [0, 65535] { R2008 += 1, R1902 += 1, R577 += 1, R578 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2008 += 1, R1902 += 1, R576 += 1, R577 += 1 };
  s2 -> s5 [0, 65535] { R2008 += 1 };
  s3 -> s1 [0, 65535] { R2008 += 1, R1902 += 1, R577 += 1, R578 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2008 += 1, R1902 += 1, R576 += 1, R577 += 1 };
  s3 -> s3 [0, 65535] { R2008 += 1, R1901 += 1, R1902 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2008 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2008 += 1, R1902 += 1 };
  s6 -> s5 [0, 65535] { R2008 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2010 += 1, R1904 += 1 };
  s0 -> s0 [0, 65535] { R2009 += 1, R2010 += 1 };
  s0 -> s2 [0, 65535] { R2010 += 1, R1903 += 1, R1904 += 1 };
  s1 -> s4 [0, 65535] { R2010 += 1 };
  s1 -> s1 [0, 65535] { R2010 += 1, R1904 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2010 += 1, R1904 += 1 };
  s2 -> s2 [0, 65535] { R2010 += 1, R1903 += 1, R1904 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2010 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2012 += 1, R1905 += 1, R1906 += 1 };
  s0 -> s2 [0, 65535] { R2012 += 1, R1906 += 1, R582 += 1, R583 += 1 };
  s0 -> s0 [0, 65535] { R2011 += 1, R2012 += 1 };
  s0 -> s3 [0, 65535] { R2012 += 1, R1906 += 1, R583 += 1, R584 += 1 };
  s1 -> s1 [0, 65535] { R2012 += 1, R1905 += 1, R1906 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2012 += 1, R1906 += 1, R582 += 1, R583 += 1 };
  s1 -> s3 [0, 65535] { R2012 += 1, R1906 += 1, R583 += 1, R584 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2012 += 1, R1906 += 1, R582 += 1, R583 += 1 };
  s2 -> s5 [0, 65535] { R2012 += 1 };
  s2 -> s3 [0, 65535] { R2012 += 1, R1906 += 1, R583 += 1, R584 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2012 += 1 };
  s3 -> s6 [0, 65535] { R2012 += 1, R1906 += 1 };
  s3 -> s3 [0, 65535] { R2012 += 1, R1906 += 1, R583 += 1, R584 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2012 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2012 += 1 };
  s6 -> s6 [0, 65535] { R2012 += 1, R1906 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 107] { R2014 += 1, R1908 += 1, R588 += 1 };
  s0 -> s0 [0, 65535] { R2013 += 1, R2014 += 1 };
  s0 -> s2 [0, 65535] { R2014 += 1, R1907 += 1, R1908 += 1 };
  s0 -> s3 [0, 65535] { R2014 += 1, R1908 += 1, R587 += 1, R588 += 1 };
  s0 -> s4 [108, 108] { R2014 += 1, R1908 += 1, R588 += 1 };
  s0 -> s1 [109, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s1 -> s15 [0, 65535] { R2014 += 1, R1908 += 1 };
  s1 -> s5 [0, 65535] { R2014 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s2 -> s1 [0, 107] { R2014 += 1, R1908 += 1, R588 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2014 += 1, R1907 += 1, R1908 += 1 };
  s2 -> s3 [0, 65535] { R2014 += 1, R1908 += 1, R587 += 1, R588 += 1 };
  s2 -> s4 [108, 108] { R2014 += 1, R1908 += 1, R588 += 1 };
  s2 -> s1 [109, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s3 -> s1 [0, 107] { R2014 += 1, R1908 += 1, R588 += 1 };
  s3 -> s5 [0, 65535] { R2014 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2014 += 1, R1908 += 1, R587 += 1, R588 += 1 };
  s3 -> s4 [108, 108] { R2014 += 1, R1908 += 1, R588 += 1 };
  s3 -> s1 [109, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s4 -> s1 [0, 110] { R2014 += 1, R1908 += 1, R588 += 1 };
  s4 -> s4 [0, 65535] { R2014 += 1, R1908 += 1 };
  s4 -> s5 [0, 65535] { R2014 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [111, 111] { R2014 += 1, R1908 += 1, R588 += 1 };
  s4 -> s1 [112, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s5 -> s5 [0, 65535] { R2014 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R2014 += 1, R1908 += 1, R588 += 1 };
  s7 -> s7 [0, 65535] { R2014 += 1, R1908 += 1 };
  s7 -> s5 [0, 65535] { R2014 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R2014 += 1, R1908 += 1, R588 += 1 };
  s7 -> s1 [100, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s8 -> s1 [0, 96] { R2014 += 1, R1908 += 1, R588 += 1 };
  s8 -> s5 [0, 65535] { R2014 += 1 };
  s8 -> s8 [0, 65535] { R2014 += 1, R1908 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R2014 += 1, R1908 += 1, R588 += 1 };
  s8 -> s1 [98, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s9 -> s1 [0, 107] { R2014 += 1, R1908 += 1, R588 += 1 };
  s9 -> s5 [0, 65535] { R2014 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R2014 += 1, R1908 += 1 };
  s9 -> s10 [108, 108] { R2014 += 1, R1908 += 1, R588 += 1 };
  s9 -> s1 [109, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s10 -> s1 [0, 103] { R2014 += 1, R1908 += 1, R588 += 1 };
  s10 -> s10 [0, 65535] { R2014 += 1, R1908 += 1 };
  s10 -> s5 [0, 65535] { R2014 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s11 [104, 104] { R2014 += 1, R1908 += 1, R588 += 1 };
  s10 -> s1 [105, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s11 -> s1 [0, 110] { R2014 += 1, R1908 += 1, R588 += 1 };
  s11 -> s11 [0, 65535] { R2014 += 1, R1908 += 1 };
  s11 -> s5 [0, 65535] { R2014 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R2014 += 1, R1908 += 1, R588 += 1 };
  s11 -> s1 [112, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s12 -> s1 [0, 114] { R2014 += 1, R1908 += 1, R588 += 1 };
  s12 -> s5 [0, 65535] { R2014 += 1 };
  s12 -> s12 [0, 65535] { R2014 += 1, R1908 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s13 [115, 115] { R2014 += 1, R1908 += 1, R588 += 1 };
  s12 -> s1 [116, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s13 -> s1 [0, 115] { R2014 += 1, R1908 += 1, R588 += 1 };
  s13 -> s5 [0, 65535] { R2014 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R2014 += 1, R1908 += 1 };
  s13 -> s14 [116, 116] { R2014 += 1, R1908 += 1, R588 += 1 };
  s13 -> s1 [117, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s14 -> s1 [0, 65535] { R2014 += 1, R1908 += 1, R588 += 1 };
  s15 -> s15 [0, 65535] { R2014 += 1, R1908 += 1 };
  s15 -> s5 [0, 65535] { R2014 += 1 };
  s15 -> s6 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2016 += 1, R1910 += 1, R593 += 1, R594 += 1 };
  s0 -> s0 [0, 65535] { R2015 += 1, R2016 += 1 };
  s0 -> s2 [0, 65535] { R2016 += 1, R1909 += 1, R1910 += 1 };
  s0 -> s3 [0, 65535] { R2016 += 1, R1910 += 1, R592 += 1, R593 += 1 };
  s1 -> s6 [0, 65535] { R2016 += 1, R1910 += 1 };
  s1 -> s4 [0, 65535] { R2016 += 1 };
  s1 -> s1 [0, 65535] { R2016 += 1, R1910 += 1, R593 += 1, R594 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2016 += 1, R1910 += 1, R593 += 1, R594 += 1 };
  s2 -> s2 [0, 65535] { R2016 += 1, R1909 += 1, R1910 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2016 += 1, R1910 += 1, R592 += 1, R593 += 1 };
  s3 -> s4 [0, 65535] { R2016 += 1 };
  s3 -> s1 [0, 65535] { R2016 += 1, R1910 += 1, R593 += 1, R594 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2016 += 1, R1910 += 1, R592 += 1, R593 += 1 };
  s4 -> s4 [0, 65535] { R2016 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2016 += 1, R1910 += 1 };
  s6 -> s4 [0, 65535] { R2016 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 79] { R2018 += 1, R1912 += 1, R598 += 1 };
  s0 -> s0 [0, 65535] { R2017 += 1, R2018 += 1 };
  s0 -> s2 [0, 65535] { R2018 += 1, R1912 += 1, R597 += 1, R598 += 1 };
  s0 -> s3 [0, 65535] { R2018 += 1, R1911 += 1, R1912 += 1 };
  s0 -> s1 [81, 65535] { R2018 += 1, R1912 += 1, R598 += 1 };
  s1 -> s1 [0, 79] { R2018 += 1, R1912 += 1, R598 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2018 += 1, R1912 += 1 };
  s1 -> s5 [0, 65535] { R2018 += 1 };
  s1 -> s1 [81, 65535] { R2018 += 1, R1912 += 1, R598 += 1 };
  s2 -> s1 [0, 79] { R2018 += 1, R1912 += 1, R598 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2018 += 1, R1912 += 1, R597 += 1, R598 += 1 };
  s2 -> s5 [0, 65535] { R2018 += 1 };
  s2 -> s1 [81, 65535] { R2018 += 1, R1912 += 1, R598 += 1 };
  s3 -> s1 [0, 79] { R2018 += 1, R1912 += 1, R598 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2018 += 1, R1912 += 1, R597 += 1, R598 += 1 };
  s3 -> s3 [0, 65535] { R2018 += 1, R1911 += 1, R1912 += 1 };
  s3 -> s1 [81, 65535] { R2018 += 1, R1912 += 1, R598 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2018 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2020 += 1, R1913 += 1, R1914 += 1 };
  s0 -> s2 [0, 65535] { R2020 += 1, R1914 += 1, R603 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R2019 += 1, R2020 += 1 };
  s0 -> s3 [0, 65535] { R2020 += 1, R1914 += 1, R602 += 1, R603 += 1 };
  s1 -> s1 [0, 65535] { R2020 += 1, R1913 += 1, R1914 += 1 };
  s1 -> s2 [0, 65535] { R2020 += 1, R1914 += 1, R603 += 1, R604 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2020 += 1, R1914 += 1, R602 += 1, R603 += 1 };
  s2 -> s2 [0, 65535] { R2020 += 1, R1914 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2020 += 1, R1914 += 1 };
  s2 -> s5 [0, 65535] { R2020 += 1 };
  s3 -> s2 [0, 65535] { R2020 += 1, R1914 += 1, R603 += 1, R604 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2020 += 1 };
  s3 -> s3 [0, 65535] { R2020 += 1, R1914 += 1, R602 += 1, R603 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2020 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2020 += 1, R1914 += 1 };
  s6 -> s5 [0, 65535] { R2020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R2022 += 1, R1916 += 1, R607 += 1, R608 += 1 };
  s0 -> s0 [0, 65535] { R2021 += 1, R2022 += 1 };
  s0 -> s3 [0, 65535] { R2022 += 1, R1915 += 1, R1916 += 1 };
  s0 -> s1 [91, 107] { R2022 += 1, R1916 += 1, R608 += 1 };
  s0 -> s4 [108, 108] { R2022 += 1, R1916 += 1, R608 += 1 };
  s0 -> s1 [109, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s1 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R2022 += 1, R1916 += 1 };
  s1 -> s5 [0, 65535] { R2022 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s2 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R2022 += 1, R1916 += 1, R607 += 1, R608 += 1 };
  s2 -> s5 [0, 65535] { R2022 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R2022 += 1, R1916 += 1, R608 += 1 };
  s2 -> s4 [108, 108] { R2022 += 1, R1916 += 1, R608 += 1 };
  s2 -> s1 [109, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s3 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s3 -> s2 [0, 65535] { R2022 += 1, R1916 += 1, R607 += 1, R608 += 1 };
  s3 -> s3 [0, 65535] { R2022 += 1, R1915 += 1, R1916 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R2022 += 1, R1916 += 1, R608 += 1 };
  s3 -> s4 [108, 108] { R2022 += 1, R1916 += 1, R608 += 1 };
  s3 -> s1 [109, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s4 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s4 -> s5 [0, 65535] { R2022 += 1 };
  s4 -> s4 [0, 65535] { R2022 += 1, R1916 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R2022 += 1, R1916 += 1, R608 += 1 };
  s4 -> s7 [111, 111] { R2022 += 1, R1916 += 1, R608 += 1 };
  s4 -> s1 [112, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s5 -> s5 [0, 65535] { R2022 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s7 -> s7 [0, 65535] { R2022 += 1, R1916 += 1 };
  s7 -> s5 [0, 65535] { R2022 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R2022 += 1, R1916 += 1, R608 += 1 };
  s7 -> s8 [99, 99] { R2022 += 1, R1916 += 1, R608 += 1 };
  s7 -> s1 [100, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s8 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s8 -> s8 [0, 65535] { R2022 += 1, R1916 += 1 };
  s8 -> s5 [0, 65535] { R2022 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R2022 += 1, R1916 += 1, R608 += 1 };
  s8 -> s9 [97, 97] { R2022 += 1, R1916 += 1, R608 += 1 };
  s8 -> s1 [98, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s9 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s9 -> s9 [0, 65535] { R2022 += 1, R1916 += 1 };
  s9 -> s5 [0, 65535] { R2022 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R2022 += 1, R1916 += 1, R608 += 1 };
  s9 -> s10 [108, 108] { R2022 += 1, R1916 += 1, R608 += 1 };
  s9 -> s1 [109, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s10 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s10 -> s10 [0, 65535] { R2022 += 1, R1916 += 1 };
  s10 -> s5 [0, 65535] { R2022 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R2022 += 1, R1916 += 1, R608 += 1 };
  s10 -> s11 [104, 104] { R2022 += 1, R1916 += 1, R608 += 1 };
  s10 -> s1 [105, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s11 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s11 -> s11 [0, 65535] { R2022 += 1, R1916 += 1 };
  s11 -> s5 [0, 65535] { R2022 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R2022 += 1, R1916 += 1, R608 += 1 };
  s11 -> s12 [111, 111] { R2022 += 1, R1916 += 1, R608 += 1 };
  s11 -> s1 [112, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s12 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s12 -> s12 [0, 65535] { R2022 += 1, R1916 += 1 };
  s12 -> s5 [0, 65535] { R2022 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R2022 += 1, R1916 += 1, R608 += 1 };
  s12 -> s13 [115, 115] { R2022 += 1, R1916 += 1, R608 += 1 };
  s12 -> s1 [116, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s13 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s13 -> s5 [0, 65535] { R2022 += 1 };
  s13 -> s13 [0, 65535] { R2022 += 1, R1916 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R2022 += 1, R1916 += 1, R608 += 1 };
  s13 -> s14 [116, 116] { R2022 += 1, R1916 += 1, R608 += 1 };
  s13 -> s1 [117, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  s14 -> s1 [0, 80] { R2022 += 1, R1916 += 1, R608 += 1 };
  s14 -> s1 [91, 65535] { R2022 += 1, R1916 += 1, R608 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2024 += 1, R1918 += 1, R612 += 1, R613 += 1 };
  s0 -> s0 [0, 65535] { R2023 += 1, R2024 += 1 };
  s0 -> s2 [0, 65535] { R2024 += 1, R1918 += 1, R613 += 1, R614 += 1 };
  s0 -> s3 [0, 65535] { R2024 += 1, R1917 += 1, R1918 += 1 };
  s1 -> s1 [0, 65535] { R2024 += 1, R1918 += 1, R612 += 1, R613 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2024 += 1 };
  s1 -> s2 [0, 65535] { R2024 += 1, R1918 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2024 += 1 };
  s2 -> s2 [0, 65535] { R2024 += 1, R1918 += 1, R613 += 1, R614 += 1 };
  s2 -> s6 [0, 65535] { R2024 += 1, R1918 += 1 };
  s3 -> s1 [0, 65535] { R2024 += 1, R1918 += 1, R612 += 1, R613 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2024 += 1, R1918 += 1, R613 += 1, R614 += 1 };
  s3 -> s3 [0, 65535] { R2024 += 1, R1917 += 1, R1918 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2024 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2024 += 1 };
  s6 -> s6 [0, 65535] { R2024 += 1, R1918 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R2026 += 1, R1919 += 1, R1920 += 1 };
  s0 -> s2 [0, 65535] { R2026 += 1, R1920 += 1, R619 += 1, R620 += 1 };
  s0 -> s3 [0, 65535] { R2026 += 1, R1920 += 1, R618 += 1, R619 += 1 };
  s0 -> s0 [0, 65535] { R2025 += 1, R2026 += 1 };
  s1 -> s1 [0, 65535] { R2026 += 1, R1919 += 1, R1920 += 1 };
  s1 -> s2 [0, 65535] { R2026 += 1, R1920 += 1, R619 += 1, R620 += 1 };
  s1 -> s3 [0, 65535] { R2026 += 1, R1920 += 1, R618 += 1, R619 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2026 += 1, R1920 += 1, R619 += 1, R620 += 1 };
  s2 -> s6 [0, 65535] { R2026 += 1, R1920 += 1 };
  s2 -> s4 [0, 65535] { R2026 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2026 += 1, R1920 += 1, R619 += 1, R620 += 1 };
  s3 -> s3 [0, 65535] { R2026 += 1, R1920 += 1, R618 += 1, R619 += 1 };
  s3 -> s4 [0, 65535] { R2026 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2026 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2026 += 1, R1920 += 1 };
  s6 -> s4 [0, 65535] { R2026 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2028 += 1, R1922 += 1 };
  s0 -> s0 [0, 65535] { R2027 += 1, R2028 += 1 };
  s0 -> s2 [0, 65535] { R2028 += 1, R1921 += 1, R1922 += 1 };
  s1 -> s1 [0, 65535] { R2028 += 1, R1922 += 1 };
  s1 -> s4 [0, 65535] { R2028 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2028 += 1, R1922 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2028 += 1, R1921 += 1, R1922 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2028 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R2030 += 1, R1924 += 1, R625 += 1, R626 += 1 };
  s0 -> s0 [0, 65535] { R2029 += 1, R2030 += 1 };
  s0 -> s2 [0, 65535] { R2030 += 1, R1923 += 1, R1924 += 1 };
  s0 -> s3 [0, 65535] { R2030 += 1, R1924 += 1, R624 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R2030 += 1, R1924 += 1, R625 += 1, R626 += 1 };
  s1 -> s4 [0, 65535] { R2030 += 1 };
  s1 -> s6 [0, 65535] { R2030 += 1, R1924 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2030 += 1, R1924 += 1, R625 += 1, R626 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2030 += 1, R1923 += 1, R1924 += 1 };
  s2 -> s3 [0, 65535] { R2030 += 1, R1924 += 1, R624 += 1, R625 += 1 };
  s3 -> s1 [0, 65535] { R2030 += 1, R1924 += 1, R625 += 1, R626 += 1 };
  s3 -> s4 [0, 65535] { R2030 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2030 += 1, R1924 += 1, R624 += 1, R625 += 1 };
  s4 -> s4 [0, 65535] { R2030 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2030 += 1 };
  s6 -> s6 [0, 65535] { R2030 += 1, R1924 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R2032 += 1, R1926 += 1 };
  s0 -> s0 [0, 65535] { R2031 += 1, R2032 += 1 };
  s0 -> s2 [0, 65535] { R2032 += 1, R1925 += 1, R1926 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2032 += 1, R1926 += 1 };
  s1 -> s4 [0, 65535] { R2032 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2032 += 1, R1926 += 1 };
  s2 -> s2 [0, 65535] { R2032 += 1, R1925 += 1, R1926 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2032 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 82] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s0 -> s2 [0, 65535] { R2034 += 1, R1928 += 1, R630 += 1, R631 += 1 };
  s0 -> s0 [0, 65535] { R2033 += 1, R2034 += 1 };
  s0 -> s3 [0, 65535] { R2034 += 1, R1927 += 1, R1928 += 1 };
  s0 -> s4 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s0 -> s5 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s0 -> s1 [84, 65535] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s1 -> s1 [0, 82] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2034 += 1, R1928 += 1 };
  s1 -> s7 [0, 65535] { R2034 += 1 };
  s1 -> s4 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s1 -> s5 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s1 -> s1 [84, 65535] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s2 -> s1 [0, 82] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2034 += 1, R1928 += 1, R630 += 1, R631 += 1 };
  s2 -> s7 [0, 65535] { R2034 += 1 };
  s2 -> s4 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s2 -> s5 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s2 -> s1 [84, 65535] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s3 -> s1 [0, 82] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R2034 += 1, R1928 += 1, R630 += 1, R631 += 1 };
  s3 -> s3 [0, 65535] { R2034 += 1, R1927 += 1, R1928 += 1 };
  s3 -> s4 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s3 -> s5 [83, 83] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s3 -> s1 [84, 65535] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2034 += 1, R1928 += 1 };
  s4 -> s7 [0, 65535] { R2034 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2034 += 1, R1928 += 1, R631 += 1, R632 += 1 };
  s5 -> s7 [0, 65535] { R2034 += 1 };
  s5 -> s8 [0, 65535] { R2034 += 1, R1928 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2034 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R2034 += 1 };
  s8 -> s8 [0, 65535] { R2034 += 1, R1928 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R2036 += 1, R1930 += 1 };
  s0 -> s2 [0, 65535] { R2036 += 1, R1929 += 1, R1930 += 1 };
  s0 -> s3 [0, 65535] { R2036 += 1, R1930 += 1, R1673 += 1, R1674 += 1 };
  s0 -> s0 [0, 65535] { R2035 += 1, R2036 += 1 };
  s1 -> s1 [0, 65535] { R2036 += 1, R1930 += 1 };
  s1 -> s4 [0, 65535] { R2036 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2036 += 1, R1930 += 1 };
  s2 -> s2 [0, 65535] { R2036 += 1, R1929 += 1, R1930 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2036 += 1, R1930 += 1, R1673 += 1, R1674 += 1 };
  s3 -> s1 [0, 65535] { R2036 += 1, R1930 += 1 };
  s3 -> s4 [0, 65535] { R2036 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2036 += 1, R1930 += 1, R1673 += 1, R1674 += 1 };
  s4 -> s4 [0, 65535] { R2036 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R2038 += 1, R1931 += 1, R1932 += 1 };
  s0 -> s2 [0, 65535] { R2038 += 1, R1932 += 1 };
  s0 -> s0 [0, 65535] { R2037 += 1, R2038 += 1 };
  s1 -> s1 [0, 65535] { R2038 += 1, R1931 += 1, R1932 += 1 };
  s1 -> s2 [0, 65535] { R2038 += 1, R1932 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2038 += 1, R1932 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2038 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2038 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 79] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s0 -> s0 [0, 65535] { R2039 += 1, R2040 += 1 };
  s0 -> s1 [0, 65535] { R2040 += 1, R1934 += 1 };
  s0 -> s2 [0, 65535] { R2040 += 1, R1933 += 1, R1934 += 1 };
  s0 -> s3 [80, 80] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s0 -> s4 [80, 80] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s0 -> s1 [81, 65535] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s1 -> s1 [0, 79] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s1 -> s5 [0, 65535] { R2040 += 1 };
  s1 -> s1 [0, 65535] { R2040 += 1, R1934 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [80, 80] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s1 -> s4 [80, 80] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s1 -> s1 [81, 65535] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s2 -> s1 [0, 79] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s2 -> s1 [0, 65535] { R2040 += 1, R1934 += 1 };
  s2 -> s2 [0, 65535] { R2040 += 1, R1933 += 1, R1934 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [80, 80] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s2 -> s4 [80, 80] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s2 -> s1 [81, 65535] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s3 -> s5 [0, 65535] { R2040 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2040 += 1, R1934 += 1, R1885 += 1, R1886 += 1 };
  s3 -> s7 [0, 65535] { R2040 += 1, R1934 += 1 };
  s4 -> s5 [0, 65535] { R2040 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2040 += 1, R1934 += 1 };
  s5 -> s5 [0, 65535] { R2040 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R2040 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2040 += 1, R1934 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R2042 += 1, R1935 += 1, R1936 += 1 };
  s0 -> s2 [0, 65535] { R2042 += 1, R1936 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R2041 += 1, R2042 += 1 };
  s1 -> s1 [0, 65535] { R2042 += 1, R1935 += 1, R1936 += 1 };
  s1 -> s2 [0, 65535] { R2042 += 1, R1936 += 1, R26 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2042 += 1, R1936 += 1, R26 += 1 };
  s2 -> s3 [0, 65535] { R2042 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2042 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R2044 += 1, R1938 += 1 };
  s0 -> s0 [0, 65535] { R2043 += 1, R2044 += 1 };
  s0 -> s2 [0, 65535] { R2044 += 1, R1937 += 1, R1938 += 1 };
  s0 -> s3 [65, 65] { R2044 += 1, R1938 += 1 };
  s0 -> s4 [65, 65] { R2044 += 1, R1938 += 1 };
  s0 -> s5 [80, 80] { R2044 += 1, R1938 += 1 };
  s0 -> s1 [81, 65535] { R2044 += 1, R1938 += 1 };
  s1 -> s1 [0, 64] { R2044 += 1, R1938 += 1 };
  s1 -> s3 [65, 65] { R2044 += 1, R1938 += 1 };
  s1 -> s4 [65, 65] { R2044 += 1, R1938 += 1 };
  s1 -> s5 [80, 80] { R2044 += 1, R1938 += 1 };
  s1 -> s1 [81, 65535] { R2044 += 1, R1938 += 1 };
  s2 -> s1 [0, 64] { R2044 += 1, R1938 += 1 };
  s2 -> s2 [0, 65535] { R2044 += 1, R1937 += 1, R1938 += 1 };
  s2 -> s3 [65, 65] { R2044 += 1, R1938 += 1 };
  s2 -> s4 [65, 65] { R2044 += 1, R1938 += 1 };
  s2 -> s5 [80, 80] { R2044 += 1, R1938 += 1 };
  s2 -> s1 [81, 65535] { R2044 += 1, R1938 += 1 };
  s4 -> s4 [0, 65] { R2044 += 1, R1938 += 1 };
  s4 -> s7 [80, 80] { R2044 += 1, R1938 += 1 };
  s4 -> s4 [81, 65535] { R2044 += 1, R1938 += 1 };
  s5 -> s5 [0, 64] { R2044 += 1, R1938 += 1 };
  s5 -> s5 [0, 65535] { R2044 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2044 += 1, R1938 += 1 };
  s5 -> s8 [65, 65] { R2044 += 1, R1938 += 1 };
  s5 -> s5 [80, 65535] { R2044 += 1, R1938 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2044 += 1, R1938 += 1 };
  s7 -> s7 [0, 65535] { R2044 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R2044 += 1, R1938 += 1 };
  s8 -> s8 [0, 65535] { R2044 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R2046 += 1, R1940 += 1, R565 += 1 };
  s0 -> s0 [0, 65535] { R2045 += 1, R2046 += 1 };
  s0 -> s2 [0, 65535] { R2046 += 1, R1939 += 1, R1940 += 1 };
  s0 -> s3 [65, 65] { R2046 += 1, R1940 += 1, R565 += 1 };
  s0 -> s4 [65, 65] { R2046 += 1, R1940 += 1, R565 += 1 };
  s0 -> s1 [66, 65535] { R2046 += 1, R1940 += 1, R565 += 1 };
  s1 -> s1 [0, 64] { R2046 += 1, R1940 += 1, R565 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2046 += 1 };
  s1 -> s3 [65, 65] { R2046 += 1, R1940 += 1, R565 += 1 };
  s1 -> s4 [65, 65] { R2046 += 1, R1940 += 1, R565 += 1 };
  s1 -> s1 [66, 65535] { R2046 += 1, R1940 += 1, R565 += 1 };
  s2 -> s1 [0, 64] { R2046 += 1, R1940 += 1, R565 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2046 += 1, R1939 += 1, R1940 += 1 };
  s2 -> s3 [65, 65] { R2046 += 1, R1940 += 1, R565 += 1 };
  s2 -> s4 [65, 65] { R2046 += 1, R1940 += 1, R565 += 1 };
  s2 -> s1 [66, 65535] { R2046 += 1, R1940 += 1, R565 += 1 };
  s3 -> s3 [0, 65535] { R2046 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2046 += 1, R1940 += 1, R565 += 1 };
  s4 -> s6 [0, 65535] { R2046 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R2048 += 1, R1942 += 1, R567 += 1 };
  s0 -> s2 [0, 65535] { R2048 += 1, R1941 += 1, R1942 += 1 };
  s0 -> s0 [0, 65535] { R2047 += 1, R2048 += 1 };
  s0 -> s3 [65, 65] { R2048 += 1, R1942 += 1, R567 += 1 };
  s0 -> s4 [65, 65] { R2048 += 1, R1942 += 1, R567 += 1 };
  s0 -> s1 [66, 65535] { R2048 += 1, R1942 += 1, R567 += 1 };
  s1 -> s1 [0, 64] { R2048 += 1, R1942 += 1, R567 += 1 };
  s1 -> s1 [0, 65535] { R2048 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2048 += 1, R1942 += 1, R567 += 1 };
  s1 -> s4 [65, 65] { R2048 += 1, R1942 += 1, R567 += 1 };
  s1 -> s1 [66, 65535] { R2048 += 1, R1942 += 1, R567 += 1 };
  s2 -> s1 [0, 64] { R2048 += 1, R1942 += 1, R567 += 1 };
  s2 -> s2 [0, 65535] { R2048 += 1, R1941 += 1, R1942 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2048 += 1, R1942 += 1, R567 += 1 };
  s2 -> s4 [65, 65] { R2048 += 1, R1942 += 1, R567 += 1 };
  s2 -> s1 [66, 65535] { R2048 += 1, R1942 += 1, R567 += 1 };
  s3 -> s3 [0, 65535] { R2048 += 1, R1942 += 1, R567 += 1 };
  s3 -> s6 [0, 65535] { R2048 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2048 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2048 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R2050 += 1, R1944 += 1, R569 += 1 };
  s0 -> s0 [0, 65535] { R2049 += 1, R2050 += 1 };
  s0 -> s2 [0, 65535] { R2050 += 1, R1943 += 1, R1944 += 1 };
  s0 -> s3 [65, 65] { R2050 += 1, R1944 += 1, R569 += 1 };
  s0 -> s4 [65, 65] { R2050 += 1, R1944 += 1, R569 += 1 };
  s0 -> s1 [66, 65535] { R2050 += 1, R1944 += 1, R569 += 1 };
  s1 -> s1 [0, 64] { R2050 += 1, R1944 += 1, R569 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2050 += 1 };
  s1 -> s3 [65, 65] { R2050 += 1, R1944 += 1, R569 += 1 };
  s1 -> s4 [65, 65] { R2050 += 1, R1944 += 1, R569 += 1 };
  s1 -> s1 [66, 65535] { R2050 += 1, R1944 += 1, R569 += 1 };
  s2 -> s1 [0, 64] { R2050 += 1, R1944 += 1, R569 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2050 += 1, R1943 += 1, R1944 += 1 };
  s2 -> s3 [65, 65] { R2050 += 1, R1944 += 1, R569 += 1 };
  s2 -> s4 [65, 65] { R2050 += 1, R1944 += 1, R569 += 1 };
  s2 -> s1 [66, 65535] { R2050 += 1, R1944 += 1, R569 += 1 };
  s3 -> s3 [0, 65535] { R2050 += 1, R1944 += 1, R569 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2050 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2050 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2050 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R2052 += 1, R1946 += 1, R571 += 1 };
  s0 -> s2 [0, 65535] { R2052 += 1, R1945 += 1, R1946 += 1 };
  s0 -> s0 [0, 65535] { R2051 += 1, R2052 += 1 };
  s0 -> s3 [65, 65] { R2052 += 1, R1946 += 1, R571 += 1 };
  s0 -> s4 [65, 65] { R2052 += 1, R1946 += 1, R571 += 1 };
  s0 -> s1 [66, 65535] { R2052 += 1, R1946 += 1, R571 += 1 };
  s1 -> s1 [0, 64] { R2052 += 1, R1946 += 1, R571 += 1 };
  s1 -> s1 [0, 65535] { R2052 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2052 += 1, R1946 += 1, R571 += 1 };
  s1 -> s4 [65, 65] { R2052 += 1, R1946 += 1, R571 += 1 };
  s1 -> s1 [66, 65535] { R2052 += 1, R1946 += 1, R571 += 1 };
  s2 -> s1 [0, 64] { R2052 += 1, R1946 += 1, R571 += 1 };
  s2 -> s2 [0, 65535] { R2052 += 1, R1945 += 1, R1946 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2052 += 1, R1946 += 1, R571 += 1 };
  s2 -> s4 [65, 65] { R2052 += 1, R1946 += 1, R571 += 1 };
  s2 -> s1 [66, 65535] { R2052 += 1, R1946 += 1, R571 += 1 };
  s3 -> s3 [0, 65535] { R2052 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2052 += 1 };
  s4 -> s4 [0, 65535] { R2052 += 1, R1946 += 1, R571 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R2054 += 1, R1947 += 1, R1948 += 1 };
  s0 -> s0 [0, 65535] { R2053 += 1, R2054 += 1 };
  s0 -> s3 [65, 65] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s0 -> s4 [65, 65] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s0 -> s1 [66, 65535] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [0, 64] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2054 += 1 };
  s1 -> s3 [65, 65] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s1 -> s4 [65, 65] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [66, 65535] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [0, 64] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2054 += 1, R1947 += 1, R1948 += 1 };
  s2 -> s3 [65, 65] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s2 -> s4 [65, 65] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [66, 65535] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2054 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2054 += 1, R1948 += 1, R573 += 1, R574 += 1 };
  s4 -> s6 [0, 65535] { R2054 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2054 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R2056 += 1, R1950 += 1 };
  s0 -> s0 [0, 65535] { R2055 += 1, R2056 += 1 };
  s0 -> s2 [0, 65535] { R2056 += 1, R1949 += 1, R1950 += 1 };
  s0 -> s3 [65, 65] { R2056 += 1, R1950 += 1 };
  s0 -> s4 [65, 65] { R2056 += 1, R1950 += 1 };
  s0 -> s1 [66, 65535] { R2056 += 1, R1950 += 1 };
  s1 -> s1 [0, 64] { R2056 += 1, R1950 += 1 };
  s1 -> s1 [0, 65535] { R2056 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2056 += 1, R1950 += 1 };
  s1 -> s4 [65, 65] { R2056 += 1, R1950 += 1 };
  s1 -> s1 [66, 65535] { R2056 += 1, R1950 += 1 };
  s2 -> s1 [0, 64] { R2056 += 1, R1950 += 1 };
  s2 -> s2 [0, 65535] { R2056 += 1, R1949 += 1, R1950 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2056 += 1, R1950 += 1 };
  s2 -> s4 [65, 65] { R2056 += 1, R1950 += 1 };
  s2 -> s1 [66, 65535] { R2056 += 1, R1950 += 1 };
  s3 -> s3 [0, 65535] { R2056 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2056 += 1 };
  s4 -> s4 [0, 65535] { R2056 += 1, R1950 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2056 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R2057 += 1, R2058 += 1 };
  s0 -> s2 [0, 65535] { R2058 += 1, R1951 += 1, R1952 += 1 };
  s0 -> s3 [65, 65] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s0 -> s4 [65, 65] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s0 -> s1 [66, 65535] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [0, 64] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2058 += 1 };
  s1 -> s3 [65, 65] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s1 -> s4 [65, 65] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [66, 65535] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s2 -> s1 [0, 64] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2058 += 1, R1951 += 1, R1952 += 1 };
  s2 -> s3 [65, 65] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s2 -> s4 [65, 65] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s2 -> s1 [66, 65535] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s3 -> s3 [0, 65535] { R2058 += 1, R1952 += 1, R579 += 1, R580 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2058 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s0 -> s0 [0, 65535] { R2059 += 1, R2060 += 1 };
  s0 -> s2 [0, 65535] { R2060 += 1, R1953 += 1, R1954 += 1 };
  s0 -> s3 [65, 65] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s0 -> s4 [65, 65] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s0 -> s1 [66, 65535] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [0, 64] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2060 += 1 };
  s1 -> s3 [65, 65] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s1 -> s4 [65, 65] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [66, 65535] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s2 -> s1 [0, 64] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2060 += 1, R1953 += 1, R1954 += 1 };
  s2 -> s3 [65, 65] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s2 -> s4 [65, 65] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s2 -> s1 [66, 65535] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s3 -> s3 [0, 65535] { R2060 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2060 += 1, R1954 += 1, R585 += 1, R586 += 1 };
  s4 -> s6 [0, 65535] { R2060 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2060 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s0 -> s0 [0, 65535] { R2061 += 1, R2062 += 1 };
  s0 -> s2 [0, 65535] { R2062 += 1, R1955 += 1, R1956 += 1 };
  s0 -> s3 [65, 65] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s0 -> s4 [65, 65] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s0 -> s1 [66, 65535] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [0, 64] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2062 += 1 };
  s1 -> s3 [65, 65] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s1 -> s4 [65, 65] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [66, 65535] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s2 -> s1 [0, 64] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2062 += 1, R1955 += 1, R1956 += 1 };
  s2 -> s3 [65, 65] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s2 -> s4 [65, 65] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s2 -> s1 [66, 65535] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s3 -> s6 [0, 65535] { R2062 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2062 += 1, R1956 += 1, R589 += 1, R590 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2062 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2062 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s0 -> s0 [0, 65535] { R2063 += 1, R2064 += 1 };
  s0 -> s2 [0, 65535] { R2064 += 1, R1957 += 1, R1958 += 1 };
  s0 -> s3 [65, 65] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s0 -> s4 [65, 65] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s0 -> s1 [66, 65535] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [0, 64] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2064 += 1 };
  s1 -> s3 [65, 65] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s1 -> s4 [65, 65] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [66, 65535] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s2 -> s1 [0, 64] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2064 += 1, R1957 += 1, R1958 += 1 };
  s2 -> s3 [65, 65] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s2 -> s4 [65, 65] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s2 -> s1 [66, 65535] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2064 += 1, R1958 += 1, R595 += 1, R596 += 1 };
  s3 -> s6 [0, 65535] { R2064 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2064 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2064 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s0 -> s0 [0, 65535] { R2065 += 1, R2066 += 1 };
  s0 -> s2 [0, 65535] { R2066 += 1, R1959 += 1, R1960 += 1 };
  s0 -> s3 [65, 65] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s0 -> s4 [65, 65] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s0 -> s1 [66, 65535] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [0, 64] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2066 += 1 };
  s1 -> s3 [65, 65] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s1 -> s4 [65, 65] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [66, 65535] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s2 -> s1 [0, 64] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2066 += 1, R1959 += 1, R1960 += 1 };
  s2 -> s3 [65, 65] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s2 -> s4 [65, 65] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s2 -> s1 [66, 65535] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2066 += 1, R1960 += 1, R599 += 1, R600 += 1 };
  s3 -> s6 [0, 65535] { R2066 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2066 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2066 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s0 -> s0 [0, 65535] { R2067 += 1, R2068 += 1 };
  s0 -> s2 [0, 65535] { R2068 += 1, R1961 += 1, R1962 += 1 };
  s0 -> s3 [65, 65] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s0 -> s4 [65, 65] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s0 -> s1 [66, 65535] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 64] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2068 += 1 };
  s1 -> s3 [65, 65] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [65, 65] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [66, 65535] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [0, 64] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2068 += 1, R1961 += 1, R1962 += 1 };
  s2 -> s3 [65, 65] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [65, 65] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [66, 65535] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2068 += 1, R1962 += 1, R605 += 1, R606 += 1 };
  s3 -> s6 [0, 65535] { R2068 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2068 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2068 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R2069 += 1, R2070 += 1 };
  s0 -> s2 [0, 65535] { R2070 += 1, R1963 += 1, R1964 += 1 };
  s0 -> s3 [65, 65] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R2070 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R2070 += 1, R1963 += 1, R1964 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s3 -> s6 [0, 65535] { R2070 += 1 };
  s3 -> s3 [0, 65535] { R2070 += 1, R1964 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2070 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2070 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s0 -> s0 [0, 65535] { R2071 += 1, R2072 += 1 };
  s0 -> s2 [0, 65535] { R2072 += 1, R1965 += 1, R1966 += 1 };
  s0 -> s3 [65, 65] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s0 -> s4 [65, 65] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s0 -> s1 [66, 65535] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 64] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 65535] { R2072 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [65, 65] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [66, 65535] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [0, 64] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s2 -> s2 [0, 65535] { R2072 += 1, R1965 += 1, R1966 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s2 -> s4 [65, 65] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [66, 65535] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s3 -> s3 [0, 65535] { R2072 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2072 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2072 += 1, R1966 += 1, R615 += 1, R616 += 1 };
  s5 -> s5 [0, 65535] { R2072 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R2074 += 1, R1968 += 1 };
  s0 -> s0 [0, 65535] { R2073 += 1, R2074 += 1 };
  s0 -> s2 [0, 65535] { R2074 += 1, R1967 += 1, R1968 += 1 };
  s0 -> s3 [65, 65] { R2074 += 1, R1968 += 1 };
  s0 -> s4 [65, 65] { R2074 += 1, R1968 += 1 };
  s0 -> s1 [66, 65535] { R2074 += 1, R1968 += 1 };
  s1 -> s1 [0, 64] { R2074 += 1, R1968 += 1 };
  s1 -> s1 [0, 65535] { R2074 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2074 += 1, R1968 += 1 };
  s1 -> s4 [65, 65] { R2074 += 1, R1968 += 1 };
  s1 -> s1 [66, 65535] { R2074 += 1, R1968 += 1 };
  s2 -> s1 [0, 64] { R2074 += 1, R1968 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2074 += 1, R1967 += 1, R1968 += 1 };
  s2 -> s3 [65, 65] { R2074 += 1, R1968 += 1 };
  s2 -> s4 [65, 65] { R2074 += 1, R1968 += 1 };
  s2 -> s1 [66, 65535] { R2074 += 1, R1968 += 1 };
  s3 -> s6 [0, 65535] { R2074 += 1 };
  s3 -> s3 [0, 65535] { R2074 += 1, R1968 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2074 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2074 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R2076 += 1, R1969 += 1, R1970 += 1 };
  s0 -> s0 [0, 65535] { R2075 += 1, R2076 += 1 };
  s0 -> s3 [65, 65] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s0 -> s4 [65, 65] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s0 -> s1 [66, 65535] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 64] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 65535] { R2076 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s1 -> s4 [65, 65] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [66, 65535] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [0, 64] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s2 -> s2 [0, 65535] { R2076 += 1, R1969 += 1, R1970 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s2 -> s4 [65, 65] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [66, 65535] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s3 -> s3 [0, 65535] { R2076 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2076 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2076 += 1, R1970 += 1, R621 += 1, R622 += 1 };
  s5 -> s5 [0, 65535] { R2076 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R2078 += 1, R1972 += 1 };
  s0 -> s0 [0, 65535] { R2077 += 1, R2078 += 1 };
  s0 -> s2 [0, 65535] { R2078 += 1, R1971 += 1, R1972 += 1 };
  s0 -> s3 [65, 65] { R2078 += 1, R1972 += 1 };
  s0 -> s4 [65, 65] { R2078 += 1, R1972 += 1 };
  s0 -> s1 [66, 65535] { R2078 += 1, R1972 += 1 };
  s1 -> s1 [0, 64] { R2078 += 1, R1972 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2078 += 1 };
  s1 -> s3 [65, 65] { R2078 += 1, R1972 += 1 };
  s1 -> s4 [65, 65] { R2078 += 1, R1972 += 1 };
  s1 -> s1 [66, 65535] { R2078 += 1, R1972 += 1 };
  s2 -> s1 [0, 64] { R2078 += 1, R1972 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2078 += 1, R1971 += 1, R1972 += 1 };
  s2 -> s3 [65, 65] { R2078 += 1, R1972 += 1 };
  s2 -> s4 [65, 65] { R2078 += 1, R1972 += 1 };
  s2 -> s1 [66, 65535] { R2078 += 1, R1972 += 1 };
  s3 -> s3 [0, 65535] { R2078 += 1, R1972 += 1 };
  s3 -> s6 [0, 65535] { R2078 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2078 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2078 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s0 -> s2 [0, 65535] { R2080 += 1, R1973 += 1, R1974 += 1 };
  s0 -> s0 [0, 65535] { R2079 += 1, R2080 += 1 };
  s0 -> s3 [65, 65] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s0 -> s4 [65, 65] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s0 -> s1 [66, 65535] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [0, 64] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [0, 65535] { R2080 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s1 -> s4 [65, 65] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [66, 65535] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s2 -> s1 [0, 64] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s2 -> s2 [0, 65535] { R2080 += 1, R1973 += 1, R1974 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s2 -> s4 [65, 65] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s2 -> s1 [66, 65535] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s3 -> s3 [0, 65535] { R2080 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2080 += 1 };
  s4 -> s4 [0, 65535] { R2080 += 1, R1974 += 1, R627 += 1, R628 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2080 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s0 -> s2 [0, 64] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s0 [0, 65535] { R2081 += 1, R2082 += 1 };
  s0 -> s3 [0, 65535] { R2082 += 1, R1975 += 1, R1976 += 1 };
  s0 -> s4 [65, 65] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s5 [65, 65] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s6 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s0 -> s7 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s0 -> s1 [66, 65535] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s0 -> s2 [66, 65535] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s1 -> s1 [0, 64] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R2082 += 1 };
  s1 -> s6 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s1 -> s7 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s1 -> s1 [66, 65535] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s2 -> s1 [0, 64] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s2 -> s2 [0, 64] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s4 [65, 65] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s5 [65, 65] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s6 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s2 -> s7 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s2 -> s1 [66, 65535] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s2 -> s2 [66, 65535] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s1 [0, 64] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s3 -> s2 [0, 64] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s3 [0, 65535] { R2082 += 1, R1975 += 1, R1976 += 1 };
  s3 -> s4 [65, 65] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s5 [65, 65] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s3 -> s6 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s3 -> s7 [65, 65] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s3 -> s1 [66, 65535] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s3 -> s2 [66, 65535] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s5 -> s5 [0, 65535] { R2082 += 1, R1976 += 1, R1669 += 1, R1670 += 1 };
  s5 -> s6 [0, 65535] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s6 -> s9 [0, 65535] { R2082 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2082 += 1, R1976 += 1, R1670 += 1, R1671 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2082 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2082 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R2084 += 1, R1978 += 1 };
  s0 -> s0 [0, 65535] { R2083 += 1, R2084 += 1 };
  s0 -> s2 [0, 65535] { R2084 += 1, R1977 += 1, R1978 += 1 };
  s0 -> s3 [65, 65] { R2084 += 1, R1978 += 1 };
  s0 -> s4 [65, 65] { R2084 += 1, R1978 += 1 };
  s0 -> s1 [66, 65535] { R2084 += 1, R1978 += 1 };
  s1 -> s1 [0, 64] { R2084 += 1, R1978 += 1 };
  s1 -> s1 [0, 65535] { R2084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2084 += 1, R1978 += 1 };
  s1 -> s4 [65, 65] { R2084 += 1, R1978 += 1 };
  s1 -> s1 [66, 65535] { R2084 += 1, R1978 += 1 };
  s2 -> s1 [0, 64] { R2084 += 1, R1978 += 1 };
  s2 -> s2 [0, 65535] { R2084 += 1, R1977 += 1, R1978 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2084 += 1, R1978 += 1 };
  s2 -> s4 [65, 65] { R2084 += 1, R1978 += 1 };
  s2 -> s1 [66, 65535] { R2084 += 1, R1978 += 1 };
  s3 -> s3 [0, 65535] { R2084 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2084 += 1 };
  s4 -> s4 [0, 65535] { R2084 += 1, R1978 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2084 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s0 -> s2 [0, 64] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s0 -> s3 [0, 65535] { R2086 += 1, R1979 += 1, R1980 += 1 };
  s0 -> s0 [0, 65535] { R2085 += 1, R2086 += 1 };
  s0 -> s4 [65, 65] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s0 -> s5 [65, 65] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s0 -> s6 [65, 65] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s0 -> s7 [65, 65] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s0 -> s2 [66, 79] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s0 -> s1 [66, 65535] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s0 -> s2 [81, 65535] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s1 -> s1 [0, 64] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s1 -> s2 [0, 64] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s1 -> s4 [65, 65] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s1 -> s5 [65, 65] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s1 -> s6 [65, 65] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s1 -> s7 [65, 65] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s1 -> s2 [66, 79] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s1 -> s1 [66, 65535] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s1 -> s2 [81, 65535] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s2 -> s2 [0, 64] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s2 -> s2 [0, 65535] { R2086 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [65, 65] { R2086 += 1, R1980 += 1 };
  s2 -> s7 [65, 65] { R2086 += 1, R1980 += 1 };
  s2 -> s2 [66, 79] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s2 -> s2 [66, 65535] { R2086 += 1, R1980 += 1 };
  s2 -> s2 [81, 65535] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s3 -> s1 [0, 64] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s3 -> s2 [0, 64] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s3 -> s3 [0, 65535] { R2086 += 1, R1979 += 1, R1980 += 1 };
  s3 -> s4 [65, 65] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s3 -> s5 [65, 65] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s3 -> s6 [65, 65] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s3 -> s7 [65, 65] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s3 -> s2 [66, 79] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s3 -> s1 [66, 65535] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s3 -> s2 [81, 65535] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s5 -> s5 [0, 79] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s5 -> s5 [0, 65535] { R2086 += 1, R1980 += 1 };
  s5 -> s9 [0, 65535] { R2086 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [81, 65535] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s6 -> s5 [0, 79] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s6 -> s6 [0, 65535] { R2086 += 1, R1980 += 1, R1881 += 1, R1882 += 1 };
  s6 -> s5 [81, 65535] { R2086 += 1, R1980 += 1, R1882 += 1, R1883 += 1 };
  s7 -> s7 [0, 65535] { R2086 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2086 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P55
automaton P55_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
constraint R3 = R1934 && R4 = R2086 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R566 + R565 = 0 && R1887 = 0 && R1888 = R1934 && R1889 = 0 && R1890 = R1934 && R1891 = 0 && R1892 = R1934 && R1893 = 0 && R1894 = R1934 && R1895 = 0 && R1896 = R1934 && R1897 = 0 && R1898 = R1934 && R1899 = 0 && R1900 = R1934 && R1901 = 0 && R1902 = R1934 && R1903 = 0 && R1904 = R1934 && R1905 = 0 && R1906 = R1934 && R1907 = 0 && R1908 = R1934 && R1909 = 0 && R1910 = R1934 && R1911 = 0 && R1912 = R1934 && R1913 = 0 && R1914 = R1934 && R1915 = 0 && R1916 = R1934 && R1917 = 0 && R1918 = R1934 && R1919 = 0 && R1920 = R1934 && R1921 = 0 && R1922 = R1934 && R1923 = 0 && R1924 = R1934 && R1925 = 0 && R1926 = R1934 && R1927 = 0 && R1928 = R1934 && R1929 = 0 && R1930 = R1934 && R1931 = 0 && R1932 = R1934 && R1933 = 0 && R1937 = 0 && R1938 = 0 && R1975 = 0 && R1976 = 0 && R1979 = 0 && R1980 = 0 && R1981 = 10 && R1982 = R2086 && R1983 = 10 && R1984 = R2086 && R1985 = 10 && R1986 = R2086 && R1987 = 10 && R1988 = R2086 && R1989 = 10 && R1990 = R2086 && R1991 = 10 && R1992 = R2086 && R1993 = 10 && R1994 = R2086 && R1995 = 10 && R1996 = R2086 && R1997 = 10 && R1998 = R2086 && R1999 = 10 && R2000 = R2086 && R2001 = 10 && R2002 = R2086 && R2003 = 10 && R2004 = R2086 && R2005 = 10 && R2006 = R2086 && R2007 = 10 && R2008 = R2086 && R2009 = 10 && R2010 = R2086 && R2011 = 10 && R2012 = R2086 && R2013 = 10 && R2014 = R2086 && R2015 = 10 && R2016 = R2086 && R2017 = 10 && R2018 = R2086 && R2019 = 10 && R2020 = R2086 && R2021 = 10 && R2022 = R2086 && R2023 = 10 && R2024 = R2086 && R2025 = 10 && R2026 = R2086 && R2027 = 10 && R2028 = R2086 && R2029 = 10 && R2030 = R2086 && R2031 = 10 && R2032 = R2086 && R2033 = 10 && R2034 = R2086 && R2035 = 10 && R2036 = R2086 && R2037 = 10 && R2038 = R2086 && R2039 = 10 && R2040 = R2086 && R2041 = 10 && R2042 = R2086 && R2043 = 10 && R2044 = R2086 && R2045 = 10 && R2046 = R2086 && R2047 = 10 && R2048 = R2086 && R2049 = 10 && R2050 = R2086 && R2051 = 10 && R2052 = R2086 && R2053 = 10 && R2054 = R2086 && R2055 = 10 && R2056 = R2086 && R2057 = 10 && R2058 = R2086 && R2059 = 10 && R2060 = R2086 && R2061 = 10 && R2062 = R2086 && R2063 = 10 && R2064 = R2086 && R2065 = 10 && R2066 = R2086 && R2067 = 10 && R2068 = R2086 && R2069 = 10 && R2070 = R2086 && R2071 = 10 && R2072 = R2086 && R2073 = 10 && R2074 = R2086 && R2075 = 10 && R2076 = R2086 && R2077 = 10 && R2078 = R2086 && R2079 = 10 && R2080 = R2086 && R2081 = 10 && R2082 = R2086 && R2083 = 10 && R2084 = R2086 && R2085 = 10 && R594 + R591 + R632 + R629 != 0 && R614 + R611 + R1886 + R1883 != 0 && R15 < 1 && R16 < 1 && R568 + R567 < 1 && R570 + R569 < 1 && R572 + R571 < 1 && 0 < R1934 && 9 < R2086 && (R26 = 0 || (R1935 = 0 && R1936 = 0)) && (R26 = 0 || (R1939 = 0 && R1940 = 0)) && (R26 = 0 || (R1941 = 0 && R1942 = 0)) && (R26 = 0 || (R1943 = 0 && R1944 = 0)) && (R26 = 0 || (R1945 = 0 && R1946 = 0)) && (R26 = 0 || (R1947 = 0 && R1948 = 0)) && (R26 = 0 || (R1949 = 0 && R1950 = 0)) && (R26 = 0 || (R1951 = 0 && R1952 = 0)) && (R26 = 0 || (R1953 = 0 && R1954 = 0)) && (R26 = 0 || (R1955 = 0 && R1956 = 0)) && (R26 = 0 || (R1957 = 0 && R1958 = 0)) && (R26 = 0 || (R1959 = 0 && R1960 = 0)) && (R26 = 0 || (R1961 = 0 && R1962 = 0)) && (R26 = 0 || (R1963 = 0 && R1964 = 0)) && (R26 = 0 || (R1965 = 0 && R1966 = 0)) && (R26 = 0 || (R1967 = 0 && R1968 = 0)) && (R26 = 0 || (R1969 = 0 && R1970 = 0)) && (R26 = 0 || (R1971 = 0 && R1972 = 0)) && (R26 = 0 || (R1973 = 0 && R1974 = 0)) && (R26 = 0 || (R1977 = 0 && R1978 = 0)) && (R578 + R575 = 0 || (R576 + R573 = 0 && R577 + R574 = 0)) && (R584 + R581 = 0 || (R582 + R579 = 0 && R583 + R580 = 0)) && (R584 + R581 = 0 || (R587 + R585 = 0 && R588 + R586 = 0)) && (R584 + R581 = 0 || (R592 + R589 = 0 && R593 + R590 = 0)) && (R604 + R601 = 0 || (R597 + R595 = 0 && R598 + R596 = 0)) && (R604 + R601 = 0 || (R602 + R599 = 0 && R603 + R600 = 0)) && (R604 + R601 = 0 || (R607 + R605 = 0 && R608 + R606 = 0)) && (R604 + R601 = 0 || (R612 + R609 = 0 && R613 + R610 = 0)) && (R620 + R617 = 0 || (R618 + R615 = 0 && R619 + R616 = 0)) && (R626 + R623 = 0 || (R624 + R621 = 0 && R625 + R622 = 0)) && (R626 + R623 = 0 || (R630 + R627 = 0 && R631 + R628 = 0)) && (R1674 + R1671 = 0 || (R1672 + R1669 = 0 && R1673 + R1670 = 0)) && (R1674 + R1671 = 0 || (R1884 + R1881 = 0 && R1885 + R1882 = 0));
// End of Parikh automata intersection problem
