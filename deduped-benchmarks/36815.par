// Parikh automata intersection problem, generated by OSTRICH+
counter int R15, R16, R25, R26, R27, R2705, R2706, R2707, R2708, R2709, R2710, R28, R29, R2917, R2918, R2919, R2920, R2921, R2922, R2923, R2924, R2925, R2926, R2927, R2928, R2929, R2930, R2931, R2932, R2933, R2934, R2935, R2936, R2937, R2938, R2939, R2940, R2941, R2942, R2943, R2944, R2945, R2946, R2947, R2948, R2949, R2950, R2951, R2952, R2953, R2954, R2955, R2956, R2957, R2958, R2959, R2960, R2961, R2962, R2963, R2964, R2965, R2966, R2967, R2968, R2969, R2970, R2971, R2972, R2973, R2974, R2975, R2976, R2977, R2978, R2979, R2980, R2981, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3, R30, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R4, R5, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632;
synchronised {  // Automata constraining P83
automaton P83_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3018 += 1 };
  s0 -> s0 [0, 65535] { R3017 += 1, R3018 += 1 };
  s0 -> s1 [45, 45] { R3018 += 1 };
  s0 -> s2 [46, 46] { R3018 += 1 };
  s0 -> s1 [48, 62] { R3018 += 1 };
  s0 -> s3 [65, 65] { R3018 += 1 };
  s0 -> s1 [66, 65535] { R3018 += 1 };
  s1 -> s1 [0, 43] { R3018 += 1 };
  s1 -> s1 [45, 45] { R3018 += 1 };
  s1 -> s2 [46, 46] { R3018 += 1 };
  s1 -> s1 [48, 62] { R3018 += 1 };
  s1 -> s3 [65, 65] { R3018 += 1 };
  s1 -> s1 [66, 65535] { R3018 += 1 };
  s2 -> s1 [0, 43] { R3018 += 1 };
  s2 -> s1 [45, 45] { R3018 += 1 };
  s2 -> s2 [46, 46] { R3018 += 1 };
  s2 -> s1 [48, 62] { R3018 += 1 };
  s2 -> s3 [65, 65] { R3018 += 1 };
  s2 -> s1 [66, 114] { R3018 += 1 };
  s2 -> s8 [115, 115] { R3018 += 1 };
  s2 -> s1 [116, 65535] { R3018 += 1 };
  s3 -> s3 [0, 43] { R3018 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3018 += 1 };
  s3 -> s4 [46, 46] { R3018 += 1 };
  s3 -> s3 [48, 62] { R3018 += 1 };
  s3 -> s3 [65, 65535] { R3018 += 1 };
  s4 -> s3 [0, 43] { R3018 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3018 += 1 };
  s4 -> s4 [46, 46] { R3018 += 1 };
  s4 -> s3 [48, 62] { R3018 += 1 };
  s4 -> s3 [65, 114] { R3018 += 1 };
  s4 -> s5 [115, 115] { R3018 += 1 };
  s4 -> s3 [116, 65535] { R3018 += 1 };
  s5 -> s3 [0, 43] { R3018 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3018 += 1 };
  s5 -> s4 [46, 46] { R3018 += 1 };
  s5 -> s3 [48, 62] { R3018 += 1 };
  s5 -> s3 [65, 110] { R3018 += 1 };
  s5 -> s6 [111, 111] { R3018 += 1 };
  s5 -> s3 [112, 65535] { R3018 += 1 };
  s6 -> s3 [0, 43] { R3018 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3018 += 1 };
  s6 -> s4 [46, 46] { R3018 += 1 };
  s6 -> s3 [48, 62] { R3018 += 1 };
  s6 -> s3 [65, 98] { R3018 += 1 };
  s6 -> s7 [99, 99] { R3018 += 1 };
  s6 -> s3 [100, 65535] { R3018 += 1 };
  s7 -> s3 [0, 43] { R3018 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3018 += 1 };
  s7 -> s4 [46, 46] { R3018 += 1 };
  s7 -> s3 [48, 62] { R3018 += 1 };
  s7 -> s3 [65, 106] { R3018 += 1 };
  s7 -> s3 [108, 65535] { R3018 += 1 };
  s8 -> s1 [0, 43] { R3018 += 1 };
  s8 -> s1 [45, 45] { R3018 += 1 };
  s8 -> s2 [46, 46] { R3018 += 1 };
  s8 -> s1 [48, 62] { R3018 += 1 };
  s8 -> s3 [65, 65] { R3018 += 1 };
  s8 -> s1 [66, 110] { R3018 += 1 };
  s8 -> s9 [111, 111] { R3018 += 1 };
  s8 -> s1 [112, 65535] { R3018 += 1 };
  s9 -> s1 [0, 43] { R3018 += 1 };
  s9 -> s1 [45, 45] { R3018 += 1 };
  s9 -> s2 [46, 46] { R3018 += 1 };
  s9 -> s1 [48, 62] { R3018 += 1 };
  s9 -> s3 [65, 65] { R3018 += 1 };
  s9 -> s1 [66, 98] { R3018 += 1 };
  s9 -> s10 [99, 99] { R3018 += 1 };
  s9 -> s1 [100, 65535] { R3018 += 1 };
  s10 -> s1 [0, 43] { R3018 += 1 };
  s10 -> s1 [45, 45] { R3018 += 1 };
  s10 -> s2 [46, 46] { R3018 += 1 };
  s10 -> s1 [48, 62] { R3018 += 1 };
  s10 -> s3 [65, 65] { R3018 += 1 };
  s10 -> s1 [66, 106] { R3018 += 1 };
  s10 -> s1 [108, 65535] { R3018 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3020 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R3019 += 1, R3020 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3020 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3022 += 1 };
  s0 -> s2 [0, 65535] { R3022 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R3021 += 1, R3022 += 1 };
  s0 -> s3 [58, 58] { R3022 += 1 };
  s0 -> s1 [59, 65535] { R3022 += 1 };
  s1 -> s1 [0, 57] { R3022 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3022 += 1 };
  s1 -> s1 [59, 65535] { R3022 += 1 };
  s2 -> s1 [0, 57] { R3022 += 1 };
  s2 -> s2 [0, 65535] { R3022 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3022 += 1 };
  s2 -> s1 [59, 65535] { R3022 += 1 };
  s3 -> s3 [0, 65535] { R3022 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3024 += 1 };
  s0 -> s2 [0, 65535] { R3024 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3023 += 1, R3024 += 1 };
  s0 -> s3 [65, 65] { R3024 += 1 };
  s0 -> s1 [66, 65535] { R3024 += 1 };
  s1 -> s1 [0, 64] { R3024 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3024 += 1 };
  s1 -> s1 [66, 65535] { R3024 += 1 };
  s2 -> s1 [0, 64] { R3024 += 1 };
  s2 -> s2 [0, 65535] { R3024 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3024 += 1 };
  s2 -> s1 [66, 65535] { R3024 += 1 };
  s3 -> s3 [0, 65535] { R3024 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3026 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R3026 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R3025 += 1, R3026 += 1 };
  s0 -> s3 [91, 91] { R3026 += 1, R28 += 1 };
  s0 -> s1 [92, 65535] { R3026 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3026 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R3026 += 1 };
  s2 -> s1 [0, 90] { R3026 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3026 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [91, 91] { R3026 += 1, R28 += 1 };
  s2 -> s1 [92, 65535] { R3026 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R3026 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3026 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3027 += 1, R3028 += 1 };
  s0 -> s1 [0, 65535] { R3028 += 1, R30 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R3028 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R3028 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R3028 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3028 += 1, R30 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R3028 += 1, R29 += 1, R30 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3028 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3030 += 1, R2924 += 1 };
  s0 -> s2 [0, 65535] { R3030 += 1, R2923 += 1, R2924 += 1 };
  s0 -> s0 [0, 65535] { R3029 += 1, R3030 += 1 };
  s0 -> s1 [66, 65535] { R3030 += 1, R2924 += 1 };
  s1 -> s1 [0, 64] { R3030 += 1, R2924 += 1 };
  s1 -> s1 [0, 65535] { R3030 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3030 += 1, R2924 += 1 };
  s2 -> s1 [0, 64] { R3030 += 1, R2924 += 1 };
  s2 -> s2 [0, 65535] { R3030 += 1, R2923 += 1, R2924 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3030 += 1, R2924 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3032 += 1, R2925 += 1, R2926 += 1 };
  s0 -> s0 [0, 65535] { R3031 += 1, R3032 += 1 };
  s0 -> s2 [0, 65535] { R3032 += 1, R2926 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R3032 += 1, R2925 += 1, R2926 += 1 };
  s1 -> s2 [0, 65535] { R3032 += 1, R2926 += 1, R25 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3032 += 1 };
  s2 -> s2 [0, 65535] { R3032 += 1, R2926 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3032 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3034 += 1, R2928 += 1 };
  s0 -> s0 [0, 65535] { R3033 += 1, R3034 += 1 };
  s0 -> s2 [0, 65535] { R3034 += 1, R2927 += 1, R2928 += 1 };
  s0 -> s1 [80, 65535] { R3034 += 1, R2928 += 1 };
  s1 -> s1 [0, 65] { R3034 += 1, R2928 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3034 += 1 };
  s1 -> s1 [80, 65535] { R3034 += 1, R2928 += 1 };
  s2 -> s1 [0, 65] { R3034 += 1, R2928 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3034 += 1, R2927 += 1, R2928 += 1 };
  s2 -> s1 [80, 65535] { R3034 += 1, R2928 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3036 += 1, R2930 += 1, R566 += 1 };
  s0 -> s0 [0, 65535] { R3035 += 1, R3036 += 1 };
  s0 -> s2 [0, 65535] { R3036 += 1, R2929 += 1, R2930 += 1 };
  s1 -> s1 [0, 65535] { R3036 += 1, R2930 += 1, R566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3036 += 1 };
  s2 -> s1 [0, 65535] { R3036 += 1, R2930 += 1, R566 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3036 += 1, R2929 += 1, R2930 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3036 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 84] { R3038 += 1, R2932 += 1 };
  s0 -> s2 [0, 65535] { R3038 += 1, R2932 += 1, R568 += 1 };
  s0 -> s3 [0, 65535] { R3038 += 1, R2931 += 1, R2932 += 1 };
  s0 -> s0 [0, 65535] { R3037 += 1, R3038 += 1 };
  s0 -> s1 [86, 65535] { R3038 += 1, R2932 += 1 };
  s1 -> s1 [0, 84] { R3038 += 1, R2932 += 1 };
  s1 -> s1 [0, 65535] { R3038 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [86, 65535] { R3038 += 1, R2932 += 1 };
  s2 -> s1 [0, 84] { R3038 += 1, R2932 += 1 };
  s2 -> s2 [0, 65535] { R3038 += 1, R2932 += 1, R568 += 1 };
  s2 -> s5 [0, 65535] { R3038 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [86, 65535] { R3038 += 1, R2932 += 1 };
  s3 -> s1 [0, 84] { R3038 += 1, R2932 += 1 };
  s3 -> s2 [0, 65535] { R3038 += 1, R2932 += 1, R568 += 1 };
  s3 -> s3 [0, 65535] { R3038 += 1, R2931 += 1, R2932 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [86, 65535] { R3038 += 1, R2932 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3038 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 82] { R3040 += 1, R2934 += 1 };
  s0 -> s0 [0, 65535] { R3039 += 1, R3040 += 1 };
  s0 -> s2 [0, 65535] { R3040 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s3 [0, 65535] { R3040 += 1, R2934 += 1, R570 += 1 };
  s0 -> s1 [84, 65535] { R3040 += 1, R2934 += 1 };
  s1 -> s1 [0, 82] { R3040 += 1, R2934 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3040 += 1 };
  s1 -> s1 [84, 65535] { R3040 += 1, R2934 += 1 };
  s2 -> s1 [0, 82] { R3040 += 1, R2934 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3040 += 1, R2933 += 1, R2934 += 1 };
  s2 -> s3 [0, 65535] { R3040 += 1, R2934 += 1, R570 += 1 };
  s2 -> s1 [84, 65535] { R3040 += 1, R2934 += 1 };
  s3 -> s1 [0, 82] { R3040 += 1, R2934 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3040 += 1, R2934 += 1, R570 += 1 };
  s3 -> s5 [0, 65535] { R3040 += 1 };
  s3 -> s1 [84, 65535] { R3040 += 1, R2934 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3040 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 79] { R3042 += 1, R2936 += 1 };
  s0 -> s2 [0, 65535] { R3042 += 1, R2936 += 1, R572 += 1 };
  s0 -> s0 [0, 65535] { R3041 += 1, R3042 += 1 };
  s0 -> s3 [0, 65535] { R3042 += 1, R2935 += 1, R2936 += 1 };
  s0 -> s1 [81, 65535] { R3042 += 1, R2936 += 1 };
  s1 -> s1 [0, 79] { R3042 += 1, R2936 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3042 += 1 };
  s1 -> s1 [81, 65535] { R3042 += 1, R2936 += 1 };
  s2 -> s1 [0, 79] { R3042 += 1, R2936 += 1 };
  s2 -> s2 [0, 65535] { R3042 += 1, R2936 += 1, R572 += 1 };
  s2 -> s5 [0, 65535] { R3042 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3042 += 1, R2936 += 1 };
  s3 -> s1 [0, 79] { R3042 += 1, R2936 += 1 };
  s3 -> s2 [0, 65535] { R3042 += 1, R2936 += 1, R572 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3042 += 1, R2935 += 1, R2936 += 1 };
  s3 -> s1 [81, 65535] { R3042 += 1, R2936 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3042 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3044 += 1, R2937 += 1, R2938 += 1 };
  s0 -> s2 [0, 65535] { R3044 += 1, R2938 += 1, R576 += 1, R577 += 1 };
  s0 -> s0 [0, 65535] { R3043 += 1, R3044 += 1 };
  s0 -> s3 [0, 65535] { R3044 += 1, R2938 += 1, R577 += 1, R578 += 1 };
  s1 -> s1 [0, 65535] { R3044 += 1, R2937 += 1, R2938 += 1 };
  s1 -> s2 [0, 65535] { R3044 += 1, R2938 += 1, R576 += 1, R577 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R3044 += 1, R2938 += 1, R577 += 1, R578 += 1 };
  s2 -> s5 [0, 65535] { R3044 += 1 };
  s2 -> s2 [0, 65535] { R3044 += 1, R2938 += 1, R576 += 1, R577 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R3044 += 1, R2938 += 1, R577 += 1, R578 += 1 };
  s3 -> s4 [0, 65535] { R3044 += 1, R2938 += 1 };
  s3 -> s5 [0, 65535] { R3044 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3044 += 1, R2938 += 1, R577 += 1, R578 += 1 };
  s4 -> s4 [0, 65535] { R3044 += 1, R2938 += 1 };
  s4 -> s5 [0, 65535] { R3044 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3044 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3045 += 1, R3046 += 1 };
  s0 -> s1 [0, 65535] { R3046 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s2 [0, 65535] { R3046 += 1, R2940 += 1 };
  s1 -> s1 [0, 65535] { R3046 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3046 += 1, R2940 += 1 };
  s2 -> s3 [0, 65535] { R3046 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3046 += 1, R2940 += 1 };
  s3 -> s3 [0, 65535] { R3046 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3048 += 1, R2942 += 1, R582 += 1, R583 += 1 };
  s0 -> s0 [0, 65535] { R3047 += 1, R3048 += 1 };
  s0 -> s2 [0, 65535] { R3048 += 1, R2942 += 1, R583 += 1, R584 += 1 };
  s0 -> s3 [0, 65535] { R3048 += 1, R2941 += 1, R2942 += 1 };
  s1 -> s5 [0, 65535] { R3048 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3048 += 1, R2942 += 1, R582 += 1, R583 += 1 };
  s1 -> s2 [0, 65535] { R3048 += 1, R2942 += 1, R583 += 1, R584 += 1 };
  s2 -> s5 [0, 65535] { R3048 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3048 += 1, R2942 += 1 };
  s2 -> s2 [0, 65535] { R3048 += 1, R2942 += 1, R583 += 1, R584 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3048 += 1, R2942 += 1, R582 += 1, R583 += 1 };
  s3 -> s2 [0, 65535] { R3048 += 1, R2942 += 1, R583 += 1, R584 += 1 };
  s3 -> s3 [0, 65535] { R3048 += 1, R2941 += 1, R2942 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3048 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3048 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3048 += 1, R2942 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 107] { R3050 += 1, R2944 += 1, R588 += 1 };
  s0 -> s2 [0, 65535] { R3050 += 1, R2944 += 1, R587 += 1, R588 += 1 };
  s0 -> s3 [0, 65535] { R3050 += 1, R2943 += 1, R2944 += 1 };
  s0 -> s0 [0, 65535] { R3049 += 1, R3050 += 1 };
  s0 -> s4 [108, 108] { R3050 += 1, R2944 += 1, R588 += 1 };
  s0 -> s1 [109, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s1 -> s15 [0, 65535] { R3050 += 1, R2944 += 1 };
  s1 -> s5 [0, 65535] { R3050 += 1 };
  s1 -> s1 [0, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 107] { R3050 += 1, R2944 += 1, R588 += 1 };
  s2 -> s2 [0, 65535] { R3050 += 1, R2944 += 1, R587 += 1, R588 += 1 };
  s2 -> s5 [0, 65535] { R3050 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [108, 108] { R3050 += 1, R2944 += 1, R588 += 1 };
  s2 -> s1 [109, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s3 -> s1 [0, 107] { R3050 += 1, R2944 += 1, R588 += 1 };
  s3 -> s2 [0, 65535] { R3050 += 1, R2944 += 1, R587 += 1, R588 += 1 };
  s3 -> s3 [0, 65535] { R3050 += 1, R2943 += 1, R2944 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [108, 108] { R3050 += 1, R2944 += 1, R588 += 1 };
  s3 -> s1 [109, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s4 -> s1 [0, 110] { R3050 += 1, R2944 += 1, R588 += 1 };
  s4 -> s5 [0, 65535] { R3050 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3050 += 1, R2944 += 1 };
  s4 -> s7 [111, 111] { R3050 += 1, R2944 += 1, R588 += 1 };
  s4 -> s1 [112, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s5 -> s5 [0, 65535] { R3050 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 98] { R3050 += 1, R2944 += 1, R588 += 1 };
  s7 -> s5 [0, 65535] { R3050 += 1 };
  s7 -> s7 [0, 65535] { R3050 += 1, R2944 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s8 [99, 99] { R3050 += 1, R2944 += 1, R588 += 1 };
  s7 -> s1 [100, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s8 -> s1 [0, 96] { R3050 += 1, R2944 += 1, R588 += 1 };
  s8 -> s8 [0, 65535] { R3050 += 1, R2944 += 1 };
  s8 -> s5 [0, 65535] { R3050 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [97, 97] { R3050 += 1, R2944 += 1, R588 += 1 };
  s8 -> s1 [98, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s9 -> s1 [0, 107] { R3050 += 1, R2944 += 1, R588 += 1 };
  s9 -> s5 [0, 65535] { R3050 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3050 += 1, R2944 += 1 };
  s9 -> s10 [108, 108] { R3050 += 1, R2944 += 1, R588 += 1 };
  s9 -> s1 [109, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s10 -> s1 [0, 103] { R3050 += 1, R2944 += 1, R588 += 1 };
  s10 -> s5 [0, 65535] { R3050 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R3050 += 1, R2944 += 1 };
  s10 -> s11 [104, 104] { R3050 += 1, R2944 += 1, R588 += 1 };
  s10 -> s1 [105, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s11 -> s1 [0, 110] { R3050 += 1, R2944 += 1, R588 += 1 };
  s11 -> s5 [0, 65535] { R3050 += 1 };
  s11 -> s11 [0, 65535] { R3050 += 1, R2944 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s12 [111, 111] { R3050 += 1, R2944 += 1, R588 += 1 };
  s11 -> s1 [112, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s12 -> s1 [0, 114] { R3050 += 1, R2944 += 1, R588 += 1 };
  s12 -> s12 [0, 65535] { R3050 += 1, R2944 += 1 };
  s12 -> s5 [0, 65535] { R3050 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s13 [115, 115] { R3050 += 1, R2944 += 1, R588 += 1 };
  s12 -> s1 [116, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s13 -> s1 [0, 115] { R3050 += 1, R2944 += 1, R588 += 1 };
  s13 -> s5 [0, 65535] { R3050 += 1 };
  s13 -> s13 [0, 65535] { R3050 += 1, R2944 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s14 [116, 116] { R3050 += 1, R2944 += 1, R588 += 1 };
  s13 -> s1 [117, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s14 -> s1 [0, 65535] { R3050 += 1, R2944 += 1, R588 += 1 };
  s15 -> s15 [0, 65535] { R3050 += 1, R2944 += 1 };
  s15 -> s5 [0, 65535] { R3050 += 1 };
  s15 -> s6 [0, 65535];
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s15, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3051 += 1, R3052 += 1 };
  s0 -> s1 [0, 65535] { R3052 += 1, R2946 += 1, R593 += 1, R594 += 1 };
  s0 -> s2 [0, 65535] { R3052 += 1, R2945 += 1, R2946 += 1 };
  s0 -> s3 [0, 65535] { R3052 += 1, R2946 += 1, R592 += 1, R593 += 1 };
  s1 -> s1 [0, 65535] { R3052 += 1, R2946 += 1, R593 += 1, R594 += 1 };
  s1 -> s6 [0, 65535] { R3052 += 1, R2946 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3052 += 1 };
  s2 -> s1 [0, 65535] { R3052 += 1, R2946 += 1, R593 += 1, R594 += 1 };
  s2 -> s2 [0, 65535] { R3052 += 1, R2945 += 1, R2946 += 1 };
  s2 -> s3 [0, 65535] { R3052 += 1, R2946 += 1, R592 += 1, R593 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3052 += 1, R2946 += 1, R593 += 1, R594 += 1 };
  s3 -> s3 [0, 65535] { R3052 += 1, R2946 += 1, R592 += 1, R593 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3052 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3052 += 1 };
  s6 -> s6 [0, 65535] { R3052 += 1, R2946 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 79] { R3054 += 1, R2948 += 1, R598 += 1 };
  s0 -> s2 [0, 65535] { R3054 += 1, R2947 += 1, R2948 += 1 };
  s0 -> s0 [0, 65535] { R3053 += 1, R3054 += 1 };
  s0 -> s3 [0, 65535] { R3054 += 1, R2948 += 1, R597 += 1, R598 += 1 };
  s0 -> s1 [81, 65535] { R3054 += 1, R2948 += 1, R598 += 1 };
  s1 -> s1 [0, 79] { R3054 += 1, R2948 += 1, R598 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3054 += 1 };
  s1 -> s1 [0, 65535] { R3054 += 1, R2948 += 1 };
  s1 -> s1 [81, 65535] { R3054 += 1, R2948 += 1, R598 += 1 };
  s2 -> s1 [0, 79] { R3054 += 1, R2948 += 1, R598 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3054 += 1, R2947 += 1, R2948 += 1 };
  s2 -> s3 [0, 65535] { R3054 += 1, R2948 += 1, R597 += 1, R598 += 1 };
  s2 -> s1 [81, 65535] { R3054 += 1, R2948 += 1, R598 += 1 };
  s3 -> s1 [0, 79] { R3054 += 1, R2948 += 1, R598 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3054 += 1 };
  s3 -> s3 [0, 65535] { R3054 += 1, R2948 += 1, R597 += 1, R598 += 1 };
  s3 -> s1 [81, 65535] { R3054 += 1, R2948 += 1, R598 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3054 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R3055 += 1, R3056 += 1 };
  s0 -> s1 [0, 65535] { R3056 += 1, R2950 += 1, R602 += 1, R603 += 1 };
  s0 -> s2 [0, 65535] { R3056 += 1, R2950 += 1, R603 += 1, R604 += 1 };
  s0 -> s3 [0, 65535] { R3056 += 1, R2949 += 1, R2950 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3056 += 1, R2950 += 1, R602 += 1, R603 += 1 };
  s1 -> s2 [0, 65535] { R3056 += 1, R2950 += 1, R603 += 1, R604 += 1 };
  s1 -> s6 [0, 65535] { R3056 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3056 += 1, R2950 += 1, R603 += 1, R604 += 1 };
  s2 -> s5 [0, 65535] { R3056 += 1, R2950 += 1 };
  s2 -> s6 [0, 65535] { R3056 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3056 += 1, R2950 += 1, R602 += 1, R603 += 1 };
  s3 -> s2 [0, 65535] { R3056 += 1, R2950 += 1, R603 += 1, R604 += 1 };
  s3 -> s3 [0, 65535] { R3056 += 1, R2949 += 1, R2950 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3056 += 1, R2950 += 1 };
  s5 -> s6 [0, 65535] { R3056 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3056 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R3058 += 1, R2952 += 1, R607 += 1, R608 += 1 };
  s0 -> s3 [0, 65535] { R3058 += 1, R2951 += 1, R2952 += 1 };
  s0 -> s0 [0, 65535] { R3057 += 1, R3058 += 1 };
  s0 -> s1 [91, 107] { R3058 += 1, R2952 += 1, R608 += 1 };
  s0 -> s4 [108, 108] { R3058 += 1, R2952 += 1, R608 += 1 };
  s0 -> s1 [109, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s1 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s1 -> s1 [0, 65535] { R3058 += 1, R2952 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3058 += 1 };
  s1 -> s1 [91, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s2 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s2 -> s2 [0, 65535] { R3058 += 1, R2952 += 1, R607 += 1, R608 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3058 += 1 };
  s2 -> s1 [91, 107] { R3058 += 1, R2952 += 1, R608 += 1 };
  s2 -> s4 [108, 108] { R3058 += 1, R2952 += 1, R608 += 1 };
  s2 -> s1 [109, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s3 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s3 -> s2 [0, 65535] { R3058 += 1, R2952 += 1, R607 += 1, R608 += 1 };
  s3 -> s3 [0, 65535] { R3058 += 1, R2951 += 1, R2952 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [91, 107] { R3058 += 1, R2952 += 1, R608 += 1 };
  s3 -> s4 [108, 108] { R3058 += 1, R2952 += 1, R608 += 1 };
  s3 -> s1 [109, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s4 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3058 += 1, R2952 += 1 };
  s4 -> s6 [0, 65535] { R3058 += 1 };
  s4 -> s1 [91, 110] { R3058 += 1, R2952 += 1, R608 += 1 };
  s4 -> s7 [111, 111] { R3058 += 1, R2952 += 1, R608 += 1 };
  s4 -> s1 [112, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3058 += 1 };
  s7 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3058 += 1, R2952 += 1 };
  s7 -> s6 [0, 65535] { R3058 += 1 };
  s7 -> s1 [91, 98] { R3058 += 1, R2952 += 1, R608 += 1 };
  s7 -> s8 [99, 99] { R3058 += 1, R2952 += 1, R608 += 1 };
  s7 -> s1 [100, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s8 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R3058 += 1, R2952 += 1 };
  s8 -> s6 [0, 65535] { R3058 += 1 };
  s8 -> s1 [91, 96] { R3058 += 1, R2952 += 1, R608 += 1 };
  s8 -> s9 [97, 97] { R3058 += 1, R2952 += 1, R608 += 1 };
  s8 -> s1 [98, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s9 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R3058 += 1, R2952 += 1 };
  s9 -> s6 [0, 65535] { R3058 += 1 };
  s9 -> s1 [91, 107] { R3058 += 1, R2952 += 1, R608 += 1 };
  s9 -> s10 [108, 108] { R3058 += 1, R2952 += 1, R608 += 1 };
  s9 -> s1 [109, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s10 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R3058 += 1, R2952 += 1 };
  s10 -> s6 [0, 65535] { R3058 += 1 };
  s10 -> s1 [91, 103] { R3058 += 1, R2952 += 1, R608 += 1 };
  s10 -> s11 [104, 104] { R3058 += 1, R2952 += 1, R608 += 1 };
  s10 -> s1 [105, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s11 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s11 -> s11 [0, 65535] { R3058 += 1, R2952 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3058 += 1 };
  s11 -> s1 [91, 110] { R3058 += 1, R2952 += 1, R608 += 1 };
  s11 -> s12 [111, 111] { R3058 += 1, R2952 += 1, R608 += 1 };
  s11 -> s1 [112, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s12 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R3058 += 1, R2952 += 1 };
  s12 -> s6 [0, 65535] { R3058 += 1 };
  s12 -> s1 [91, 114] { R3058 += 1, R2952 += 1, R608 += 1 };
  s12 -> s13 [115, 115] { R3058 += 1, R2952 += 1, R608 += 1 };
  s12 -> s1 [116, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s13 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s13 [0, 65535] { R3058 += 1, R2952 += 1 };
  s13 -> s6 [0, 65535] { R3058 += 1 };
  s13 -> s1 [91, 115] { R3058 += 1, R2952 += 1, R608 += 1 };
  s13 -> s14 [116, 116] { R3058 += 1, R2952 += 1, R608 += 1 };
  s13 -> s1 [117, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  s14 -> s1 [0, 80] { R3058 += 1, R2952 += 1, R608 += 1 };
  s14 -> s1 [91, 65535] { R3058 += 1, R2952 += 1, R608 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3060 += 1, R2953 += 1, R2954 += 1 };
  s0 -> s2 [0, 65535] { R3060 += 1, R2954 += 1, R612 += 1, R613 += 1 };
  s0 -> s3 [0, 65535] { R3060 += 1, R2954 += 1, R613 += 1, R614 += 1 };
  s0 -> s0 [0, 65535] { R3059 += 1, R3060 += 1 };
  s1 -> s1 [0, 65535] { R3060 += 1, R2953 += 1, R2954 += 1 };
  s1 -> s2 [0, 65535] { R3060 += 1, R2954 += 1, R612 += 1, R613 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3060 += 1, R2954 += 1, R613 += 1, R614 += 1 };
  s2 -> s4 [0, 65535] { R3060 += 1 };
  s2 -> s2 [0, 65535] { R3060 += 1, R2954 += 1, R612 += 1, R613 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3060 += 1, R2954 += 1, R613 += 1, R614 += 1 };
  s3 -> s4 [0, 65535] { R3060 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3060 += 1, R2954 += 1, R613 += 1, R614 += 1 };
  s3 -> s6 [0, 65535] { R3060 += 1, R2954 += 1 };
  s4 -> s4 [0, 65535] { R3060 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3060 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3060 += 1, R2954 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R3061 += 1, R3062 += 1 };
  s0 -> s1 [0, 65535] { R3062 += 1, R2956 += 1, R618 += 1, R619 += 1 };
  s0 -> s2 [0, 65535] { R3062 += 1, R2955 += 1, R2956 += 1 };
  s0 -> s3 [0, 65535] { R3062 += 1, R2956 += 1, R619 += 1, R620 += 1 };
  s1 -> s1 [0, 65535] { R3062 += 1, R2956 += 1, R618 += 1, R619 += 1 };
  s1 -> s4 [0, 65535] { R3062 += 1 };
  s1 -> s3 [0, 65535] { R3062 += 1, R2956 += 1, R619 += 1, R620 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R3062 += 1, R2956 += 1, R618 += 1, R619 += 1 };
  s2 -> s2 [0, 65535] { R3062 += 1, R2955 += 1, R2956 += 1 };
  s2 -> s3 [0, 65535] { R3062 += 1, R2956 += 1, R619 += 1, R620 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3062 += 1 };
  s3 -> s5 [0, 65535] { R3062 += 1, R2956 += 1 };
  s3 -> s3 [0, 65535] { R3062 += 1, R2956 += 1, R619 += 1, R620 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3062 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R3062 += 1 };
  s5 -> s5 [0, 65535] { R3062 += 1, R2956 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R3063 += 1, R3064 += 1 };
  s0 -> s1 [0, 65535] { R3064 += 1, R2957 += 1, R2958 += 1 };
  s0 -> s2 [0, 65535] { R3064 += 1, R2958 += 1 };
  s1 -> s1 [0, 65535] { R3064 += 1, R2957 += 1, R2958 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3064 += 1, R2958 += 1 };
  s2 -> s3 [0, 65535] { R3064 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3064 += 1, R2958 += 1 };
  s3 -> s3 [0, 65535] { R3064 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 65535] { R3066 += 1, R2959 += 1, R2960 += 1 };
  s0 -> s2 [0, 65535] { R3066 += 1, R2960 += 1, R625 += 1, R626 += 1 };
  s0 -> s0 [0, 65535] { R3065 += 1, R3066 += 1 };
  s0 -> s3 [0, 65535] { R3066 += 1, R2960 += 1, R624 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R3066 += 1, R2959 += 1, R2960 += 1 };
  s1 -> s2 [0, 65535] { R3066 += 1, R2960 += 1, R625 += 1, R626 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3066 += 1, R2960 += 1, R624 += 1, R625 += 1 };
  s2 -> s4 [0, 65535] { R3066 += 1 };
  s2 -> s2 [0, 65535] { R3066 += 1, R2960 += 1, R625 += 1, R626 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3066 += 1, R2960 += 1 };
  s3 -> s4 [0, 65535] { R3066 += 1 };
  s3 -> s2 [0, 65535] { R3066 += 1, R2960 += 1, R625 += 1, R626 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3066 += 1, R2960 += 1, R624 += 1, R625 += 1 };
  s4 -> s4 [0, 65535] { R3066 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3066 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3066 += 1, R2960 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R3068 += 1, R2961 += 1, R2962 += 1 };
  s0 -> s0 [0, 65535] { R3067 += 1, R3068 += 1 };
  s0 -> s2 [0, 65535] { R3068 += 1, R2962 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3068 += 1, R2961 += 1, R2962 += 1 };
  s1 -> s2 [0, 65535] { R3068 += 1, R2962 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3068 += 1, R2962 += 1 };
  s2 -> s4 [0, 65535] { R3068 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3068 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 82] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s0 -> s2 [0, 65535] { R3070 += 1, R2963 += 1, R2964 += 1 };
  s0 -> s0 [0, 65535] { R3069 += 1, R3070 += 1 };
  s0 -> s3 [0, 65535] { R3070 += 1, R2964 += 1, R630 += 1, R631 += 1 };
  s0 -> s4 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s0 -> s5 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s0 -> s1 [84, 65535] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s1 -> s1 [0, 82] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s1 -> s6 [0, 65535] { R3070 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R3070 += 1, R2964 += 1 };
  s1 -> s4 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s1 -> s5 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s1 -> s1 [84, 65535] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s2 -> s1 [0, 82] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s2 -> s2 [0, 65535] { R3070 += 1, R2963 += 1, R2964 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R3070 += 1, R2964 += 1, R630 += 1, R631 += 1 };
  s2 -> s4 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s2 -> s5 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s2 -> s1 [84, 65535] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s3 -> s1 [0, 82] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s3 -> s6 [0, 65535] { R3070 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R3070 += 1, R2964 += 1, R630 += 1, R631 += 1 };
  s3 -> s4 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s3 -> s5 [83, 83] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s3 -> s1 [84, 65535] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s4 -> s6 [0, 65535] { R3070 += 1 };
  s4 -> s4 [0, 65535] { R3070 += 1, R2964 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R3070 += 1 };
  s5 -> s5 [0, 65535] { R3070 += 1, R2964 += 1, R631 += 1, R632 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R3070 += 1, R2964 += 1 };
  s6 -> s6 [0, 65535] { R3070 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R3070 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R3070 += 1, R2964 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3071 += 1, R3072 += 1 };
  s0 -> s1 [0, 65535] { R3072 += 1, R2965 += 1, R2966 += 1 };
  s0 -> s2 [0, 65535] { R3072 += 1, R2966 += 1 };
  s1 -> s1 [0, 65535] { R3072 += 1, R2965 += 1, R2966 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3072 += 1, R2966 += 1 };
  s2 -> s3 [0, 65535] { R3072 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3072 += 1, R2966 += 1 };
  s3 -> s3 [0, 65535] { R3072 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 65535] { R3074 += 1, R2968 += 1 };
  s0 -> s2 [0, 65535] { R3074 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s0 [0, 65535] { R3073 += 1, R3074 += 1 };
  s1 -> s4 [0, 65535] { R3074 += 1 };
  s1 -> s1 [0, 65535] { R3074 += 1, R2968 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3074 += 1, R2968 += 1 };
  s2 -> s2 [0, 65535] { R3074 += 1, R2967 += 1, R2968 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3074 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 79] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s0 [0, 65535] { R3075 += 1, R3076 += 1 };
  s0 -> s2 [0, 65535] { R3076 += 1, R2969 += 1, R2970 += 1 };
  s0 -> s1 [0, 65535] { R3076 += 1, R2970 += 1 };
  s0 -> s3 [80, 80] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s4 [80, 80] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s0 -> s1 [81, 65535] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s1 [0, 79] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3076 += 1, R2970 += 1 };
  s1 -> s7 [0, 65535] { R3076 += 1 };
  s1 -> s3 [80, 80] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s4 [80, 80] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s1 -> s1 [81, 65535] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s1 [0, 79] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s2 [0, 65535] { R3076 += 1, R2969 += 1, R2970 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R3076 += 1, R2970 += 1 };
  s2 -> s3 [80, 80] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s4 [80, 80] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s2 -> s1 [81, 65535] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s3 -> s3 [0, 65535] { R3076 += 1, R2970 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3076 += 1 };
  s4 -> s5 [0, 65535] { R3076 += 1, R2970 += 1 };
  s4 -> s4 [0, 65535] { R3076 += 1, R2970 += 1, R2921 += 1, R2922 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3076 += 1 };
  s5 -> s5 [0, 65535] { R3076 += 1, R2970 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R3076 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3076 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R3077 += 1, R3078 += 1 };
  s0 -> s1 [0, 65535] { R3078 += 1, R2972 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R3078 += 1, R2971 += 1, R2972 += 1 };
  s1 -> s1 [0, 65535] { R3078 += 1, R2972 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3078 += 1 };
  s2 -> s1 [0, 65535] { R3078 += 1, R2972 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3078 += 1, R2971 += 1, R2972 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3078 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3080 += 1, R2974 += 1 };
  s0 -> s0 [0, 65535] { R3079 += 1, R3080 += 1 };
  s0 -> s2 [0, 65535] { R3080 += 1, R2973 += 1, R2974 += 1 };
  s0 -> s3 [65, 65] { R3080 += 1, R2974 += 1 };
  s0 -> s4 [65, 65] { R3080 += 1, R2974 += 1 };
  s0 -> s5 [80, 80] { R3080 += 1, R2974 += 1 };
  s0 -> s1 [81, 65535] { R3080 += 1, R2974 += 1 };
  s1 -> s1 [0, 64] { R3080 += 1, R2974 += 1 };
  s1 -> s3 [65, 65] { R3080 += 1, R2974 += 1 };
  s1 -> s4 [65, 65] { R3080 += 1, R2974 += 1 };
  s1 -> s5 [80, 80] { R3080 += 1, R2974 += 1 };
  s1 -> s1 [81, 65535] { R3080 += 1, R2974 += 1 };
  s2 -> s1 [0, 64] { R3080 += 1, R2974 += 1 };
  s2 -> s2 [0, 65535] { R3080 += 1, R2973 += 1, R2974 += 1 };
  s2 -> s3 [65, 65] { R3080 += 1, R2974 += 1 };
  s2 -> s4 [65, 65] { R3080 += 1, R2974 += 1 };
  s2 -> s5 [80, 80] { R3080 += 1, R2974 += 1 };
  s2 -> s1 [81, 65535] { R3080 += 1, R2974 += 1 };
  s3 -> s3 [0, 65] { R3080 += 1, R2974 += 1 };
  s3 -> s7 [80, 80] { R3080 += 1, R2974 += 1 };
  s3 -> s3 [81, 65535] { R3080 += 1, R2974 += 1 };
  s5 -> s5 [0, 64] { R3080 += 1, R2974 += 1 };
  s5 -> s5 [0, 65535] { R3080 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3080 += 1, R2974 += 1 };
  s5 -> s8 [65, 65] { R3080 += 1, R2974 += 1 };
  s5 -> s5 [80, 65535] { R3080 += 1, R2974 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3080 += 1, R2974 += 1 };
  s7 -> s7 [0, 65535] { R3080 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R3080 += 1, R2974 += 1 };
  s8 -> s8 [0, 65535] { R3080 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3082 += 1, R2976 += 1, R565 += 1 };
  s0 -> s2 [0, 65535] { R3082 += 1, R2975 += 1, R2976 += 1 };
  s0 -> s0 [0, 65535] { R3081 += 1, R3082 += 1 };
  s0 -> s3 [65, 65] { R3082 += 1, R2976 += 1, R565 += 1 };
  s0 -> s4 [65, 65] { R3082 += 1, R2976 += 1, R565 += 1 };
  s0 -> s1 [66, 65535] { R3082 += 1, R2976 += 1, R565 += 1 };
  s1 -> s1 [0, 64] { R3082 += 1, R2976 += 1, R565 += 1 };
  s1 -> s1 [0, 65535] { R3082 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3082 += 1, R2976 += 1, R565 += 1 };
  s1 -> s4 [65, 65] { R3082 += 1, R2976 += 1, R565 += 1 };
  s1 -> s1 [66, 65535] { R3082 += 1, R2976 += 1, R565 += 1 };
  s2 -> s1 [0, 64] { R3082 += 1, R2976 += 1, R565 += 1 };
  s2 -> s2 [0, 65535] { R3082 += 1, R2975 += 1, R2976 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3082 += 1, R2976 += 1, R565 += 1 };
  s2 -> s4 [65, 65] { R3082 += 1, R2976 += 1, R565 += 1 };
  s2 -> s1 [66, 65535] { R3082 += 1, R2976 += 1, R565 += 1 };
  s3 -> s3 [0, 65535] { R3082 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3082 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3082 += 1, R2976 += 1, R565 += 1 };
  s5 -> s5 [0, 65535] { R3082 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3084 += 1, R2978 += 1, R567 += 1 };
  s0 -> s2 [0, 65535] { R3084 += 1, R2977 += 1, R2978 += 1 };
  s0 -> s0 [0, 65535] { R3083 += 1, R3084 += 1 };
  s0 -> s3 [65, 65] { R3084 += 1, R2978 += 1, R567 += 1 };
  s0 -> s4 [65, 65] { R3084 += 1, R2978 += 1, R567 += 1 };
  s0 -> s1 [66, 65535] { R3084 += 1, R2978 += 1, R567 += 1 };
  s1 -> s1 [0, 64] { R3084 += 1, R2978 += 1, R567 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3084 += 1 };
  s1 -> s3 [65, 65] { R3084 += 1, R2978 += 1, R567 += 1 };
  s1 -> s4 [65, 65] { R3084 += 1, R2978 += 1, R567 += 1 };
  s1 -> s1 [66, 65535] { R3084 += 1, R2978 += 1, R567 += 1 };
  s2 -> s1 [0, 64] { R3084 += 1, R2978 += 1, R567 += 1 };
  s2 -> s2 [0, 65535] { R3084 += 1, R2977 += 1, R2978 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3084 += 1, R2978 += 1, R567 += 1 };
  s2 -> s4 [65, 65] { R3084 += 1, R2978 += 1, R567 += 1 };
  s2 -> s1 [66, 65535] { R3084 += 1, R2978 += 1, R567 += 1 };
  s3 -> s3 [0, 65535] { R3084 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3084 += 1 };
  s4 -> s4 [0, 65535] { R3084 += 1, R2978 += 1, R567 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3084 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3086 += 1, R2980 += 1, R569 += 1 };
  s0 -> s2 [0, 65535] { R3086 += 1, R2979 += 1, R2980 += 1 };
  s0 -> s0 [0, 65535] { R3085 += 1, R3086 += 1 };
  s0 -> s3 [65, 65] { R3086 += 1, R2980 += 1, R569 += 1 };
  s0 -> s4 [65, 65] { R3086 += 1, R2980 += 1, R569 += 1 };
  s0 -> s1 [66, 65535] { R3086 += 1, R2980 += 1, R569 += 1 };
  s1 -> s1 [0, 64] { R3086 += 1, R2980 += 1, R569 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3086 += 1 };
  s1 -> s3 [65, 65] { R3086 += 1, R2980 += 1, R569 += 1 };
  s1 -> s4 [65, 65] { R3086 += 1, R2980 += 1, R569 += 1 };
  s1 -> s1 [66, 65535] { R3086 += 1, R2980 += 1, R569 += 1 };
  s2 -> s1 [0, 64] { R3086 += 1, R2980 += 1, R569 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3086 += 1, R2979 += 1, R2980 += 1 };
  s2 -> s3 [65, 65] { R3086 += 1, R2980 += 1, R569 += 1 };
  s2 -> s4 [65, 65] { R3086 += 1, R2980 += 1, R569 += 1 };
  s2 -> s1 [66, 65535] { R3086 += 1, R2980 += 1, R569 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3086 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3086 += 1 };
  s4 -> s4 [0, 65535] { R3086 += 1, R2980 += 1, R569 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3086 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3088 += 1, R2982 += 1, R571 += 1 };
  s0 -> s2 [0, 65535] { R3088 += 1, R2981 += 1, R2982 += 1 };
  s0 -> s0 [0, 65535] { R3087 += 1, R3088 += 1 };
  s0 -> s3 [65, 65] { R3088 += 1, R2982 += 1, R571 += 1 };
  s0 -> s4 [65, 65] { R3088 += 1, R2982 += 1, R571 += 1 };
  s0 -> s1 [66, 65535] { R3088 += 1, R2982 += 1, R571 += 1 };
  s1 -> s1 [0, 64] { R3088 += 1, R2982 += 1, R571 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3088 += 1 };
  s1 -> s3 [65, 65] { R3088 += 1, R2982 += 1, R571 += 1 };
  s1 -> s4 [65, 65] { R3088 += 1, R2982 += 1, R571 += 1 };
  s1 -> s1 [66, 65535] { R3088 += 1, R2982 += 1, R571 += 1 };
  s2 -> s1 [0, 64] { R3088 += 1, R2982 += 1, R571 += 1 };
  s2 -> s2 [0, 65535] { R3088 += 1, R2981 += 1, R2982 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3088 += 1, R2982 += 1, R571 += 1 };
  s2 -> s4 [65, 65] { R3088 += 1, R2982 += 1, R571 += 1 };
  s2 -> s1 [66, 65535] { R3088 += 1, R2982 += 1, R571 += 1 };
  s3 -> s3 [0, 65535] { R3088 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3088 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3088 += 1, R2982 += 1, R571 += 1 };
  s5 -> s5 [0, 65535] { R3088 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R3090 += 1, R2983 += 1, R2984 += 1 };
  s0 -> s0 [0, 65535] { R3089 += 1, R3090 += 1 };
  s0 -> s3 [65, 65] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s0 -> s4 [65, 65] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s0 -> s1 [66, 65535] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [0, 64] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [0, 65535] { R3090 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s1 -> s4 [65, 65] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s1 -> s1 [66, 65535] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [0, 64] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s2 -> s2 [0, 65535] { R3090 += 1, R2983 += 1, R2984 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s2 -> s4 [65, 65] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s2 -> s1 [66, 65535] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3090 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3090 += 1 };
  s4 -> s4 [0, 65535] { R3090 += 1, R2984 += 1, R573 += 1, R574 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3090 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3092 += 1, R2986 += 1 };
  s0 -> s0 [0, 65535] { R3091 += 1, R3092 += 1 };
  s0 -> s2 [0, 65535] { R3092 += 1, R2985 += 1, R2986 += 1 };
  s0 -> s3 [65, 65] { R3092 += 1, R2986 += 1 };
  s0 -> s4 [65, 65] { R3092 += 1, R2986 += 1 };
  s0 -> s1 [66, 65535] { R3092 += 1, R2986 += 1 };
  s1 -> s1 [0, 64] { R3092 += 1, R2986 += 1 };
  s1 -> s1 [0, 65535] { R3092 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3092 += 1, R2986 += 1 };
  s1 -> s4 [65, 65] { R3092 += 1, R2986 += 1 };
  s1 -> s1 [66, 65535] { R3092 += 1, R2986 += 1 };
  s2 -> s1 [0, 64] { R3092 += 1, R2986 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3092 += 1, R2985 += 1, R2986 += 1 };
  s2 -> s3 [65, 65] { R3092 += 1, R2986 += 1 };
  s2 -> s4 [65, 65] { R3092 += 1, R2986 += 1 };
  s2 -> s1 [66, 65535] { R3092 += 1, R2986 += 1 };
  s3 -> s3 [0, 65535] { R3092 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3092 += 1 };
  s4 -> s4 [0, 65535] { R3092 += 1, R2986 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3092 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s0 -> s0 [0, 65535] { R3093 += 1, R3094 += 1 };
  s0 -> s2 [0, 65535] { R3094 += 1, R2987 += 1, R2988 += 1 };
  s0 -> s3 [65, 65] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s0 -> s4 [65, 65] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s0 -> s1 [66, 65535] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [0, 64] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3094 += 1 };
  s1 -> s3 [65, 65] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s1 -> s4 [65, 65] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s1 -> s1 [66, 65535] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s2 -> s1 [0, 64] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3094 += 1, R2987 += 1, R2988 += 1 };
  s2 -> s3 [65, 65] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s2 -> s4 [65, 65] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s2 -> s1 [66, 65535] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3094 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3094 += 1, R2988 += 1, R579 += 1, R580 += 1 };
  s4 -> s6 [0, 65535] { R3094 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3094 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s0 -> s2 [0, 65535] { R3096 += 1, R2989 += 1, R2990 += 1 };
  s0 -> s0 [0, 65535] { R3095 += 1, R3096 += 1 };
  s0 -> s3 [65, 65] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s0 -> s4 [65, 65] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s0 -> s1 [66, 65535] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [0, 64] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [0, 65535] { R3096 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s1 -> s4 [65, 65] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s1 -> s1 [66, 65535] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s2 -> s1 [0, 64] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s2 -> s2 [0, 65535] { R3096 += 1, R2989 += 1, R2990 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s2 -> s4 [65, 65] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s2 -> s1 [66, 65535] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s3 -> s6 [0, 65535] { R3096 += 1 };
  s3 -> s3 [0, 65535] { R3096 += 1, R2990 += 1, R585 += 1, R586 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3096 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3096 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s0 -> s0 [0, 65535] { R3097 += 1, R3098 += 1 };
  s0 -> s2 [0, 65535] { R3098 += 1, R2991 += 1, R2992 += 1 };
  s0 -> s3 [65, 65] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s0 -> s4 [65, 65] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s0 -> s1 [66, 65535] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [0, 64] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [0, 65535] { R3098 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s1 -> s4 [65, 65] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s1 -> s1 [66, 65535] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s2 -> s1 [0, 64] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3098 += 1, R2991 += 1, R2992 += 1 };
  s2 -> s3 [65, 65] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s2 -> s4 [65, 65] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s2 -> s1 [66, 65535] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3098 += 1 };
  s4 -> s5 [0, 65535] { R3098 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3098 += 1, R2992 += 1, R589 += 1, R590 += 1 };
  s5 -> s5 [0, 65535] { R3098 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 64] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s0 -> s2 [0, 65535] { R3100 += 1, R2993 += 1, R2994 += 1 };
  s0 -> s0 [0, 65535] { R3099 += 1, R3100 += 1 };
  s0 -> s3 [65, 65] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s0 -> s4 [65, 65] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s0 -> s1 [66, 65535] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [0, 64] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3100 += 1 };
  s1 -> s3 [65, 65] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s1 -> s4 [65, 65] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s1 -> s1 [66, 65535] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s2 -> s1 [0, 64] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s2 -> s2 [0, 65535] { R3100 += 1, R2993 += 1, R2994 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s2 -> s4 [65, 65] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s2 -> s1 [66, 65535] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3100 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3100 += 1 };
  s4 -> s4 [0, 65535] { R3100 += 1, R2994 += 1, R595 += 1, R596 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3100 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s0 -> s2 [0, 65535] { R3102 += 1, R2995 += 1, R2996 += 1 };
  s0 -> s0 [0, 65535] { R3101 += 1, R3102 += 1 };
  s0 -> s3 [65, 65] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s0 -> s4 [65, 65] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s0 -> s1 [66, 65535] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [0, 64] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [0, 65535] { R3102 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s1 -> s4 [65, 65] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s1 -> s1 [66, 65535] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s2 -> s1 [0, 64] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s2 -> s2 [0, 65535] { R3102 += 1, R2995 += 1, R2996 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s2 -> s4 [65, 65] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s2 -> s1 [66, 65535] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s3 -> s3 [0, 65535] { R3102 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3102 += 1 };
  s4 -> s4 [0, 65535] { R3102 += 1, R2996 += 1, R599 += 1, R600 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s0 -> s0 [0, 65535] { R3103 += 1, R3104 += 1 };
  s0 -> s2 [0, 65535] { R3104 += 1, R2997 += 1, R2998 += 1 };
  s0 -> s3 [65, 65] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s0 -> s4 [65, 65] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s0 -> s1 [66, 65535] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 64] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [0, 65535] { R3104 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s1 -> s4 [65, 65] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s1 -> s1 [66, 65535] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [0, 64] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3104 += 1, R2997 += 1, R2998 += 1 };
  s2 -> s3 [65, 65] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [65, 65] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s2 -> s1 [66, 65535] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3104 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3104 += 1 };
  s4 -> s4 [0, 65535] { R3104 += 1, R2998 += 1, R605 += 1, R606 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3104 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R3105 += 1, R3106 += 1 };
  s0 -> s2 [0, 65535] { R3106 += 1, R2999 += 1, R3000 += 1 };
  s0 -> s3 [65, 65] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s0 -> s4 [65, 65] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R3106 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s1 -> s4 [65, 65] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [66, 65535] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [0, 64] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3106 += 1, R2999 += 1, R3000 += 1 };
  s2 -> s3 [65, 65] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s3 -> s3 [0, 65535] { R3106 += 1, R3000 += 1, R609 += 1, R610 += 1 };
  s3 -> s6 [0, 65535] { R3106 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3106 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3106 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R3108 += 1, R3001 += 1, R3002 += 1 };
  s0 -> s0 [0, 65535] { R3107 += 1, R3108 += 1 };
  s0 -> s3 [65, 65] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s0 -> s4 [65, 65] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s0 -> s1 [66, 65535] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 64] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3108 += 1 };
  s1 -> s3 [65, 65] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [65, 65] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [66, 65535] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [0, 64] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3108 += 1, R3001 += 1, R3002 += 1 };
  s2 -> s3 [65, 65] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s2 -> s4 [65, 65] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [66, 65535] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s3 -> s6 [0, 65535] { R3108 += 1 };
  s3 -> s3 [0, 65535] { R3108 += 1, R3002 += 1, R615 += 1, R616 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3108 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3108 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3110 += 1, R3004 += 1 };
  s0 -> s0 [0, 65535] { R3109 += 1, R3110 += 1 };
  s0 -> s2 [0, 65535] { R3110 += 1, R3003 += 1, R3004 += 1 };
  s0 -> s3 [65, 65] { R3110 += 1, R3004 += 1 };
  s0 -> s4 [65, 65] { R3110 += 1, R3004 += 1 };
  s0 -> s1 [66, 65535] { R3110 += 1, R3004 += 1 };
  s1 -> s1 [0, 64] { R3110 += 1, R3004 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3110 += 1 };
  s1 -> s3 [65, 65] { R3110 += 1, R3004 += 1 };
  s1 -> s4 [65, 65] { R3110 += 1, R3004 += 1 };
  s1 -> s1 [66, 65535] { R3110 += 1, R3004 += 1 };
  s2 -> s1 [0, 64] { R3110 += 1, R3004 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3110 += 1, R3003 += 1, R3004 += 1 };
  s2 -> s3 [65, 65] { R3110 += 1, R3004 += 1 };
  s2 -> s4 [65, 65] { R3110 += 1, R3004 += 1 };
  s2 -> s1 [66, 65535] { R3110 += 1, R3004 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3110 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3110 += 1 };
  s4 -> s4 [0, 65535] { R3110 += 1, R3004 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3110 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s0 -> s0 [0, 65535] { R3111 += 1, R3112 += 1 };
  s0 -> s2 [0, 65535] { R3112 += 1, R3005 += 1, R3006 += 1 };
  s0 -> s3 [65, 65] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s0 -> s4 [65, 65] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s0 -> s1 [66, 65535] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 64] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [0, 65535] { R3112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s1 -> s4 [65, 65] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s1 -> s1 [66, 65535] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [0, 64] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3112 += 1, R3005 += 1, R3006 += 1 };
  s2 -> s3 [65, 65] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s2 -> s4 [65, 65] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [66, 65535] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s3 -> s6 [0, 65535] { R3112 += 1 };
  s3 -> s3 [0, 65535] { R3112 += 1, R3006 += 1, R621 += 1, R622 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3112 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3114 += 1, R3008 += 1 };
  s0 -> s2 [0, 65535] { R3114 += 1, R3007 += 1, R3008 += 1 };
  s0 -> s0 [0, 65535] { R3113 += 1, R3114 += 1 };
  s0 -> s3 [65, 65] { R3114 += 1, R3008 += 1 };
  s0 -> s4 [65, 65] { R3114 += 1, R3008 += 1 };
  s0 -> s1 [66, 65535] { R3114 += 1, R3008 += 1 };
  s1 -> s1 [0, 64] { R3114 += 1, R3008 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3114 += 1 };
  s1 -> s3 [65, 65] { R3114 += 1, R3008 += 1 };
  s1 -> s4 [65, 65] { R3114 += 1, R3008 += 1 };
  s1 -> s1 [66, 65535] { R3114 += 1, R3008 += 1 };
  s2 -> s1 [0, 64] { R3114 += 1, R3008 += 1 };
  s2 -> s2 [0, 65535] { R3114 += 1, R3007 += 1, R3008 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3114 += 1, R3008 += 1 };
  s2 -> s4 [65, 65] { R3114 += 1, R3008 += 1 };
  s2 -> s1 [66, 65535] { R3114 += 1, R3008 += 1 };
  s3 -> s6 [0, 65535] { R3114 += 1 };
  s3 -> s3 [0, 65535] { R3114 += 1, R3008 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3114 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3114 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s0 -> s2 [0, 65535] { R3116 += 1, R3009 += 1, R3010 += 1 };
  s0 -> s0 [0, 65535] { R3115 += 1, R3116 += 1 };
  s0 -> s3 [65, 65] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s0 -> s4 [65, 65] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s0 -> s1 [66, 65535] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [0, 64] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [0, 65535] { R3116 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s1 -> s4 [65, 65] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [66, 65535] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s2 -> s1 [0, 64] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s2 -> s2 [0, 65535] { R3116 += 1, R3009 += 1, R3010 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s2 -> s4 [65, 65] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s2 -> s1 [66, 65535] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s3 -> s3 [0, 65535] { R3116 += 1, R3010 += 1, R627 += 1, R628 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3116 += 1 };
  s4 -> s4 [0, 65535] { R3116 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3116 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s0 -> s2 [0, 64] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s0 -> s0 [0, 65535] { R3117 += 1, R3118 += 1 };
  s0 -> s3 [0, 65535] { R3118 += 1, R3011 += 1, R3012 += 1 };
  s0 -> s4 [65, 65] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s0 -> s5 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s0 -> s6 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s0 -> s7 [65, 65] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s0 -> s1 [66, 65535] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s0 -> s2 [66, 65535] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s1 -> s11 [0, 64] { R3118 += 1, R3012 += 1 };
  s1 -> s1 [0, 64] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s1 -> s5 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s1 -> s12 [65, 65] { R3118 += 1, R3012 += 1 };
  s1 -> s6 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s1 -> s8 [65, 65] { R3118 += 1, R3012 += 1 };
  s1 -> s11 [66, 65535] { R3118 += 1, R3012 += 1 };
  s1 -> s1 [66, 65535] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s1 [0, 64] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s2 [0, 64] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s2 -> s4 [65, 65] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s2 -> s5 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s6 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s7 [65, 65] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s2 -> s1 [66, 65535] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s2 -> s2 [66, 65535] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s3 -> s1 [0, 64] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s3 -> s2 [0, 64] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s3 -> s3 [0, 65535] { R3118 += 1, R3011 += 1, R3012 += 1 };
  s3 -> s4 [65, 65] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s3 -> s5 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s3 -> s6 [65, 65] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s3 -> s7 [65, 65] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s3 -> s1 [66, 65535] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s3 -> s2 [66, 65535] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s5 -> s5 [0, 65535] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s5 -> s8 [0, 65535] { R3118 += 1, R3012 += 1 };
  s7 -> s5 [0, 65535] { R3118 += 1, R3012 += 1, R2706 += 1, R2707 += 1 };
  s7 -> s7 [0, 65535] { R3118 += 1, R3012 += 1, R2705 += 1, R2706 += 1 };
  s8 -> s9 [0, 65535] { R3118 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R3118 += 1, R3012 += 1 };
  s9 -> s9 [0, 65535] { R3118 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3118 += 1, R3012 += 1 };
  s11 -> s11 [0, 65535] { R3118 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R3118 += 1, R3012 += 1 };
  s11 -> s8 [65, 65] { R3118 += 1, R3012 += 1 };
  s11 -> s11 [66, 65535] { R3118 += 1, R3012 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R3118 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3120 += 1, R3014 += 1 };
  s0 -> s2 [0, 65535] { R3120 += 1, R3013 += 1, R3014 += 1 };
  s0 -> s0 [0, 65535] { R3119 += 1, R3120 += 1 };
  s0 -> s3 [65, 65] { R3120 += 1, R3014 += 1 };
  s0 -> s4 [65, 65] { R3120 += 1, R3014 += 1 };
  s0 -> s1 [66, 65535] { R3120 += 1, R3014 += 1 };
  s1 -> s1 [0, 64] { R3120 += 1, R3014 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3120 += 1 };
  s1 -> s3 [65, 65] { R3120 += 1, R3014 += 1 };
  s1 -> s4 [65, 65] { R3120 += 1, R3014 += 1 };
  s1 -> s1 [66, 65535] { R3120 += 1, R3014 += 1 };
  s2 -> s1 [0, 64] { R3120 += 1, R3014 += 1 };
  s2 -> s2 [0, 65535] { R3120 += 1, R3013 += 1, R3014 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3120 += 1, R3014 += 1 };
  s2 -> s4 [65, 65] { R3120 += 1, R3014 += 1 };
  s2 -> s1 [66, 65535] { R3120 += 1, R3014 += 1 };
  s3 -> s3 [0, 65535] { R3120 += 1, R3014 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3120 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3120 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3120 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_54 {
  init s0;
  s0 -> s1 [0, 64] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s0 -> s2 [0, 64] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s0 -> s3 [0, 65535] { R3122 += 1, R3015 += 1, R3016 += 1 };
  s0 -> s0 [0, 65535] { R3121 += 1, R3122 += 1 };
  s0 -> s4 [65, 65] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s0 -> s5 [65, 65] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s0 -> s6 [65, 65] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s0 -> s7 [65, 65] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s0 -> s2 [66, 79] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s0 -> s1 [66, 65535] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s0 -> s2 [81, 65535] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s1 -> s1 [0, 64] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s1 -> s2 [0, 64] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s1 -> s4 [65, 65] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s1 -> s5 [65, 65] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s1 -> s6 [65, 65] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s1 -> s7 [65, 65] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s1 -> s2 [66, 79] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s1 -> s1 [66, 65535] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s1 -> s2 [81, 65535] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s2 -> s2 [0, 64] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s2 -> s2 [0, 65535] { R3122 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R3122 += 1, R3016 += 1 };
  s2 -> s7 [65, 65] { R3122 += 1, R3016 += 1 };
  s2 -> s2 [66, 79] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s2 -> s2 [66, 65535] { R3122 += 1, R3016 += 1 };
  s2 -> s2 [81, 65535] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s3 -> s1 [0, 64] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s3 -> s2 [0, 64] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s3 -> s3 [0, 65535] { R3122 += 1, R3015 += 1, R3016 += 1 };
  s3 -> s4 [65, 65] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s3 -> s5 [65, 65] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s3 -> s6 [65, 65] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s3 -> s7 [65, 65] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s3 -> s2 [66, 79] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s3 -> s1 [66, 65535] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s3 -> s2 [81, 65535] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s4 -> s4 [0, 79] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s4 -> s4 [0, 65535] { R3122 += 1, R3016 += 1 };
  s4 -> s9 [0, 65535] { R3122 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s5 -> s4 [0, 79] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s5 -> s5 [0, 65535] { R3122 += 1, R3016 += 1, R2917 += 1, R2918 += 1 };
  s5 -> s4 [81, 65535] { R3122 += 1, R3016 += 1, R2918 += 1, R2919 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3122 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3122 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P55
automaton P55_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
constraint R3 = R2970 && R4 = R3122 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R566 + R565 = 0 && R2923 = 0 && R2924 = R2970 && R2925 = 0 && R2926 = R2970 && R2927 = 0 && R2928 = R2970 && R2929 = 0 && R2930 = R2970 && R2931 = 0 && R2932 = R2970 && R2933 = 0 && R2934 = R2970 && R2935 = 0 && R2936 = R2970 && R2937 = 0 && R2938 = R2970 && R2939 = 0 && R2940 = R2970 && R2941 = 0 && R2942 = R2970 && R2943 = 0 && R2944 = R2970 && R2945 = 0 && R2946 = R2970 && R2947 = 0 && R2948 = R2970 && R2949 = 0 && R2950 = R2970 && R2951 = 0 && R2952 = R2970 && R2953 = 0 && R2954 = R2970 && R2955 = 0 && R2956 = R2970 && R2957 = 0 && R2958 = R2970 && R2959 = 0 && R2960 = R2970 && R2961 = 0 && R2962 = R2970 && R2963 = 0 && R2964 = R2970 && R2965 = 0 && R2966 = R2970 && R2967 = 0 && R2968 = R2970 && R2969 = 0 && R2973 = 0 && R2974 = 0 && R3011 = 0 && R3012 = 0 && R3015 = 0 && R3016 = 0 && R3017 = 10 && R3018 = R3122 && R3019 = 10 && R3020 = R3122 && R3021 = 10 && R3022 = R3122 && R3023 = 10 && R3024 = R3122 && R3025 = 10 && R3026 = R3122 && R3027 = 10 && R3028 = R3122 && R3029 = 10 && R3030 = R3122 && R3031 = 10 && R3032 = R3122 && R3033 = 10 && R3034 = R3122 && R3035 = 10 && R3036 = R3122 && R3037 = 10 && R3038 = R3122 && R3039 = 10 && R3040 = R3122 && R3041 = 10 && R3042 = R3122 && R3043 = 10 && R3044 = R3122 && R3045 = 10 && R3046 = R3122 && R3047 = 10 && R3048 = R3122 && R3049 = 10 && R3050 = R3122 && R3051 = 10 && R3052 = R3122 && R3053 = 10 && R3054 = R3122 && R3055 = 10 && R3056 = R3122 && R3057 = 10 && R3058 = R3122 && R3059 = 10 && R3060 = R3122 && R3061 = 10 && R3062 = R3122 && R3063 = 10 && R3064 = R3122 && R3065 = 10 && R3066 = R3122 && R3067 = 10 && R3068 = R3122 && R3069 = 10 && R3070 = R3122 && R3071 = 10 && R3072 = R3122 && R3073 = 10 && R3074 = R3122 && R3075 = 10 && R3076 = R3122 && R3077 = 10 && R3078 = R3122 && R3079 = 10 && R3080 = R3122 && R3081 = 10 && R3082 = R3122 && R3083 = 10 && R3084 = R3122 && R3085 = 10 && R3086 = R3122 && R3087 = 10 && R3088 = R3122 && R3089 = 10 && R3090 = R3122 && R3091 = 10 && R3092 = R3122 && R3093 = 10 && R3094 = R3122 && R3095 = 10 && R3096 = R3122 && R3097 = 10 && R3098 = R3122 && R3099 = 10 && R3100 = R3122 && R3101 = 10 && R3102 = R3122 && R3103 = 10 && R3104 = R3122 && R3105 = 10 && R3106 = R3122 && R3107 = 10 && R3108 = R3122 && R3109 = 10 && R3110 = R3122 && R3111 = 10 && R3112 = R3122 && R3113 = 10 && R3114 = R3122 && R3115 = 10 && R3116 = R3122 && R3117 = 10 && R3118 = R3122 && R3119 = 10 && R3120 = R3122 && R3121 = 10 && R594 + R591 + R632 + R629 != 0 && R614 + R611 + R2922 + R2919 != 0 && R15 < 1 && R16 < 1 && R568 + R567 < 1 && R570 + R569 < 1 && R572 + R571 < 1 && 0 < R2970 && 9 < R3122 && (R26 = 0 || (R2971 = 0 && R2972 = 0)) && (R26 = 0 || (R2975 = 0 && R2976 = 0)) && (R26 = 0 || (R2977 = 0 && R2978 = 0)) && (R26 = 0 || (R2979 = 0 && R2980 = 0)) && (R26 = 0 || (R2981 = 0 && R2982 = 0)) && (R26 = 0 || (R2983 = 0 && R2984 = 0)) && (R26 = 0 || (R2985 = 0 && R2986 = 0)) && (R26 = 0 || (R2987 = 0 && R2988 = 0)) && (R26 = 0 || (R2989 = 0 && R2990 = 0)) && (R26 = 0 || (R2991 = 0 && R2992 = 0)) && (R26 = 0 || (R2993 = 0 && R2994 = 0)) && (R26 = 0 || (R2995 = 0 && R2996 = 0)) && (R26 = 0 || (R2997 = 0 && R2998 = 0)) && (R26 = 0 || (R2999 = 0 && R3000 = 0)) && (R26 = 0 || (R3001 = 0 && R3002 = 0)) && (R26 = 0 || (R3003 = 0 && R3004 = 0)) && (R26 = 0 || (R3005 = 0 && R3006 = 0)) && (R26 = 0 || (R3007 = 0 && R3008 = 0)) && (R26 = 0 || (R3009 = 0 && R3010 = 0)) && (R26 = 0 || (R3013 = 0 && R3014 = 0)) && (R578 + R575 = 0 || (R576 + R573 = 0 && R577 + R574 = 0)) && (R584 + R581 = 0 || (R582 + R579 = 0 && R583 + R580 = 0)) && (R584 + R581 = 0 || (R587 + R585 = 0 && R588 + R586 = 0)) && (R584 + R581 = 0 || (R592 + R589 = 0 && R593 + R590 = 0)) && (R604 + R601 = 0 || (R597 + R595 = 0 && R598 + R596 = 0)) && (R604 + R601 = 0 || (R602 + R599 = 0 && R603 + R600 = 0)) && (R604 + R601 = 0 || (R607 + R605 = 0 && R608 + R606 = 0)) && (R604 + R601 = 0 || (R612 + R609 = 0 && R613 + R610 = 0)) && (R620 + R617 = 0 || (R618 + R615 = 0 && R619 + R616 = 0)) && (R626 + R623 = 0 || (R624 + R621 = 0 && R625 + R622 = 0)) && (R626 + R623 = 0 || (R630 + R627 = 0 && R631 + R628 = 0)) && (R2710 + R2707 = 0 || (R2708 + R2705 = 0 && R2709 + R2706 = 0)) && (R2710 + R2707 = 0 || (R2920 + R2917 = 0 && R2921 + R2918 = 0));
// End of Parikh automata intersection problem
