// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R110, R111, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R3, R4, R6, R7;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R187 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s2 [46, 46] { R187 += 1 };
  s0 -> s3 [47, 47] { R187 += 1 };
  s0 -> s1 [48, 65535] { R187 += 1 };
  s1 -> s1 [0, 45] { R187 += 1 };
  s1 -> s2 [46, 46] { R187 += 1 };
  s1 -> s3 [47, 47] { R187 += 1 };
  s1 -> s1 [48, 65535] { R187 += 1 };
  s2 -> s1 [0, 45] { R187 += 1 };
  s2 -> s2 [46, 46] { R187 += 1 };
  s2 -> s3 [47, 47] { R187 += 1 };
  s2 -> s1 [48, 114] { R187 += 1 };
  s2 -> s8 [115, 115] { R187 += 1 };
  s2 -> s1 [116, 65535] { R187 += 1 };
  s3 -> s3 [0, 45] { R187 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R187 += 1 };
  s3 -> s3 [47, 65535] { R187 += 1 };
  s4 -> s3 [0, 45] { R187 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R187 += 1 };
  s4 -> s3 [47, 114] { R187 += 1 };
  s4 -> s5 [115, 115] { R187 += 1 };
  s4 -> s3 [116, 65535] { R187 += 1 };
  s5 -> s3 [0, 45] { R187 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R187 += 1 };
  s5 -> s3 [47, 110] { R187 += 1 };
  s5 -> s6 [111, 111] { R187 += 1 };
  s5 -> s3 [112, 65535] { R187 += 1 };
  s6 -> s3 [0, 45] { R187 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R187 += 1 };
  s6 -> s3 [47, 98] { R187 += 1 };
  s6 -> s7 [99, 99] { R187 += 1 };
  s6 -> s3 [100, 65535] { R187 += 1 };
  s7 -> s3 [0, 45] { R187 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R187 += 1 };
  s7 -> s3 [47, 106] { R187 += 1 };
  s7 -> s3 [108, 65535] { R187 += 1 };
  s8 -> s1 [0, 45] { R187 += 1 };
  s8 -> s2 [46, 46] { R187 += 1 };
  s8 -> s3 [47, 47] { R187 += 1 };
  s8 -> s1 [48, 110] { R187 += 1 };
  s8 -> s9 [111, 111] { R187 += 1 };
  s8 -> s1 [112, 65535] { R187 += 1 };
  s9 -> s1 [0, 45] { R187 += 1 };
  s9 -> s2 [46, 46] { R187 += 1 };
  s9 -> s3 [47, 47] { R187 += 1 };
  s9 -> s1 [48, 98] { R187 += 1 };
  s9 -> s10 [99, 99] { R187 += 1 };
  s9 -> s1 [100, 65535] { R187 += 1 };
  s10 -> s1 [0, 45] { R187 += 1 };
  s10 -> s2 [46, 46] { R187 += 1 };
  s10 -> s3 [47, 47] { R187 += 1 };
  s10 -> s1 [48, 106] { R187 += 1 };
  s10 -> s1 [108, 65535] { R187 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s1 [0, 65535] { R189 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R189 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R191 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R191 += 1, R110 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s0 -> s3 [47, 47] { R191 += 1 };
  s0 -> s1 [48, 65535] { R191 += 1, R111 += 1 };
  s1 -> s1 [0, 46] { R191 += 1, R111 += 1 };
  s1 -> s3 [47, 47] { R191 += 1 };
  s1 -> s1 [48, 65535] { R191 += 1, R111 += 1 };
  s2 -> s1 [0, 46] { R191 += 1, R111 += 1 };
  s2 -> s2 [0, 65535] { R191 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [47, 47] { R191 += 1 };
  s2 -> s1 [48, 65535] { R191 += 1, R111 += 1 };
  s3 -> s3 [0, 65535] { R191 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s1 [0, 65535] { R193 += 1 };
  s1 -> s1 [0, 65535] { R193 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R195 += 1, R171 += 1 };
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s0 -> s2 [0, 65535] { R195 += 1, R170 += 1, R171 += 1 };
  s0 -> s1 [45, 62] { R195 += 1, R171 += 1 };
  s0 -> s3 [65, 65] { R195 += 1, R171 += 1 };
  s0 -> s1 [66, 65535] { R195 += 1, R171 += 1 };
  s1 -> s1 [0, 43] { R195 += 1, R171 += 1 };
  s1 -> s1 [45, 62] { R195 += 1, R171 += 1 };
  s1 -> s3 [65, 65] { R195 += 1, R171 += 1 };
  s1 -> s1 [66, 65535] { R195 += 1, R171 += 1 };
  s2 -> s1 [0, 43] { R195 += 1, R171 += 1 };
  s2 -> s2 [0, 65535] { R195 += 1, R170 += 1, R171 += 1 };
  s2 -> s1 [45, 62] { R195 += 1, R171 += 1 };
  s2 -> s3 [65, 65] { R195 += 1, R171 += 1 };
  s2 -> s1 [66, 65535] { R195 += 1, R171 += 1 };
  s3 -> s3 [0, 43] { R195 += 1, R171 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R195 += 1 };
  s3 -> s3 [45, 62] { R195 += 1, R171 += 1 };
  s3 -> s3 [65, 65535] { R195 += 1, R171 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R197 += 1, R173 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R197 += 1, R172 += 1, R173 += 1 };
  s1 -> s4 [0, 65535] { R197 += 1 };
  s1 -> s1 [0, 65535] { R197 += 1, R173 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R197 += 1, R173 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R197 += 1, R172 += 1, R173 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R197 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R199 += 1, R175 += 1 };
  s0 -> s2 [0, 65535] { R199 += 1, R175 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R199 += 1, R174 += 1, R175 += 1 };
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s0 -> s4 [58, 58] { R199 += 1, R175 += 1 };
  s0 -> s1 [59, 65535] { R199 += 1, R175 += 1 };
  s1 -> s1 [0, 57] { R199 += 1, R175 += 1 };
  s1 -> s1 [0, 65535] { R199 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [58, 58] { R199 += 1, R175 += 1 };
  s1 -> s1 [59, 65535] { R199 += 1, R175 += 1 };
  s2 -> s1 [0, 57] { R199 += 1, R175 += 1 };
  s2 -> s2 [0, 65535] { R199 += 1, R175 += 1, R4 += 1 };
  s2 -> s6 [0, 65535] { R199 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [58, 58] { R199 += 1, R175 += 1 };
  s2 -> s1 [59, 65535] { R199 += 1, R175 += 1 };
  s3 -> s1 [0, 57] { R199 += 1, R175 += 1 };
  s3 -> s2 [0, 65535] { R199 += 1, R175 += 1, R4 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R199 += 1, R174 += 1, R175 += 1 };
  s3 -> s4 [58, 58] { R199 += 1, R175 += 1 };
  s3 -> s1 [59, 65535] { R199 += 1, R175 += 1 };
  s4 -> s4 [0, 65535] { R199 += 1, R175 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R199 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 64] { R201 += 1, R177 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R201 += 1, R176 += 1, R177 += 1 };
  s0 -> s3 [0, 65535] { R201 += 1, R177 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s4 [65, 65] { R201 += 1, R177 += 1 };
  s0 -> s1 [66, 65535] { R201 += 1, R177 += 1, R7 += 1 };
  s1 -> s1 [0, 64] { R201 += 1, R177 += 1, R7 += 1 };
  s1 -> s4 [65, 65] { R201 += 1, R177 += 1 };
  s1 -> s1 [66, 65535] { R201 += 1, R177 += 1, R7 += 1 };
  s2 -> s1 [0, 64] { R201 += 1, R177 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R201 += 1, R176 += 1, R177 += 1 };
  s2 -> s3 [0, 65535] { R201 += 1, R177 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [65, 65] { R201 += 1, R177 += 1 };
  s2 -> s1 [66, 65535] { R201 += 1, R177 += 1, R7 += 1 };
  s3 -> s1 [0, 64] { R201 += 1, R177 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R201 += 1, R177 += 1, R6 += 1, R7 += 1 };
  s3 -> s4 [65, 65] { R201 += 1, R177 += 1 };
  s3 -> s1 [66, 65535] { R201 += 1, R177 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R201 += 1, R177 += 1 };
  s4 -> s5 [0, 65535] { R201 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R201 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 90] { R203 += 1, R179 += 1, R163 += 1 };
  s0 -> s2 [0, 65535] { R203 += 1, R179 += 1, R162 += 1, R163 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s0 -> s3 [0, 65535] { R203 += 1, R178 += 1, R179 += 1 };
  s0 -> s4 [91, 91] { R203 += 1, R179 += 1, R163 += 1 };
  s0 -> s1 [92, 65535] { R203 += 1, R179 += 1, R163 += 1 };
  s1 -> s7 [0, 65535] { R203 += 1, R179 += 1 };
  s1 -> s6 [0, 65535] { R203 += 1 };
  s1 -> s1 [0, 65535] { R203 += 1, R179 += 1, R163 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 90] { R203 += 1, R179 += 1, R163 += 1 };
  s2 -> s6 [0, 65535] { R203 += 1 };
  s2 -> s2 [0, 65535] { R203 += 1, R179 += 1, R162 += 1, R163 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [91, 91] { R203 += 1, R179 += 1, R163 += 1 };
  s2 -> s1 [92, 65535] { R203 += 1, R179 += 1, R163 += 1 };
  s3 -> s1 [0, 90] { R203 += 1, R179 += 1, R163 += 1 };
  s3 -> s2 [0, 65535] { R203 += 1, R179 += 1, R162 += 1, R163 += 1 };
  s3 -> s3 [0, 65535] { R203 += 1, R178 += 1, R179 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [91, 91] { R203 += 1, R179 += 1, R163 += 1 };
  s3 -> s1 [92, 65535] { R203 += 1, R179 += 1, R163 += 1 };
  s4 -> s1 [0, 65535] { R203 += 1, R179 += 1, R163 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R203 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R203 += 1, R179 += 1 };
  s7 -> s6 [0, 65535] { R203 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R205 += 1, R180 += 1, R181 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [0, 65535] { R205 += 1, R181 += 1, R165 += 1, R3 += 1 };
  s0 -> s3 [0, 65535] { R205 += 1, R181 += 1, R164 += 1, R165 += 1 };
  s1 -> s1 [0, 65535] { R205 += 1, R180 += 1, R181 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R205 += 1, R181 += 1, R165 += 1, R3 += 1 };
  s1 -> s3 [0, 65535] { R205 += 1, R181 += 1, R164 += 1, R165 += 1 };
  s2 -> s6 [0, 65535] { R205 += 1, R181 += 1 };
  s2 -> s4 [0, 65535] { R205 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R205 += 1, R181 += 1, R165 += 1, R3 += 1 };
  s3 -> s4 [0, 65535] { R205 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R205 += 1, R181 += 1, R165 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R205 += 1, R181 += 1, R164 += 1, R165 += 1 };
  s4 -> s4 [0, 65535] { R205 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R205 += 1, R181 += 1 };
  s6 -> s4 [0, 65535] { R205 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 64] { R207 += 1, R183 += 1, R167 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R207 += 1, R182 += 1, R183 += 1 };
  s0 -> s3 [0, 65535] { R207 += 1, R183 += 1, R166 += 1, R167 += 1 };
  s0 -> s4 [65, 65] { R207 += 1, R183 += 1, R167 += 1 };
  s0 -> s1 [66, 65535] { R207 += 1, R183 += 1, R167 += 1 };
  s1 -> s1 [0, 64] { R207 += 1, R183 += 1, R167 += 1 };
  s1 -> s4 [65, 65] { R207 += 1, R183 += 1, R167 += 1 };
  s1 -> s1 [66, 65535] { R207 += 1, R183 += 1, R167 += 1 };
  s2 -> s1 [0, 64] { R207 += 1, R183 += 1, R167 += 1 };
  s2 -> s2 [0, 65535] { R207 += 1, R182 += 1, R183 += 1 };
  s2 -> s3 [0, 65535] { R207 += 1, R183 += 1, R166 += 1, R167 += 1 };
  s2 -> s4 [65, 65] { R207 += 1, R183 += 1, R167 += 1 };
  s2 -> s1 [66, 65535] { R207 += 1, R183 += 1, R167 += 1 };
  s3 -> s1 [0, 64] { R207 += 1, R183 += 1, R167 += 1 };
  s3 -> s3 [0, 65535] { R207 += 1, R183 += 1, R166 += 1, R167 += 1 };
  s3 -> s4 [65, 65] { R207 += 1, R183 += 1, R167 += 1 };
  s3 -> s1 [66, 65535] { R207 += 1, R183 += 1, R167 += 1 };
  s4 -> s5 [0, 65535] { R207 += 1, R183 += 1 };
  s4 -> s6 [0, 65535] { R207 += 1 };
  s4 -> s4 [0, 65535] { R207 += 1, R183 += 1, R167 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R207 += 1, R183 += 1 };
  s5 -> s6 [0, 65535] { R207 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R207 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 65535] { R209 += 1, R185 += 1, R168 += 1, R169 += 1 };
  s0 -> s0 [0, 65535] { R208 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R209 += 1, R185 += 1, R169 += 1, R161 += 1 };
  s0 -> s3 [0, 65535] { R209 += 1, R184 += 1, R185 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R209 += 1, R185 += 1, R168 += 1, R169 += 1 };
  s1 -> s5 [0, 65535] { R209 += 1 };
  s1 -> s2 [0, 65535] { R209 += 1, R185 += 1, R169 += 1, R161 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R209 += 1 };
  s2 -> s2 [0, 65535] { R209 += 1, R185 += 1, R169 += 1, R161 += 1 };
  s2 -> s6 [0, 65535] { R209 += 1, R185 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R209 += 1, R185 += 1, R168 += 1, R169 += 1 };
  s3 -> s2 [0, 65535] { R209 += 1, R185 += 1, R169 += 1, R161 += 1 };
  s3 -> s3 [0, 65535] { R209 += 1, R184 += 1, R185 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R209 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R209 += 1 };
  s6 -> s6 [0, 65535] { R209 += 1, R185 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R167 && R1 - R185 = 1 && R2 = R209 && R6 = 0 && R7 - R166 = -1 && R110 = 0 && R111 = R185 && R162 = 0 && R163 = 1 && R164 = 0 && R165 = 1 && R170 = 0 && R171 = R185 && R172 = 0 && R173 = R185 && R174 = 0 && R175 = R185 && R176 = 0 && R177 = R185 && R178 = 0 && R179 = R185 && R180 = 0 && R181 = R185 && R182 = 0 && R183 = R185 && R184 = 0 && R186 = 10 && R187 = R209 && R188 = 10 && R189 = R209 && R190 = 10 && R191 = R209 && R192 = 10 && R193 = R209 && R194 = 10 && R195 = R209 && R196 = 10 && R197 = R209 && R198 = 10 && R199 = R209 && R200 = 10 && R201 = R209 && R202 = 10 && R203 = R209 && R204 = 10 && R205 = R209 && R206 = 10 && R207 = R209 && R208 = 10 && R4 < 1 && R166 - R167 < 1 && -1 < R166 && 0 < R167 && -1 < R185 && 9 < R209 && (R166 != R168 || R167 = R169 || ((R161 != 0 || R167 - R168 < 1 || R168 < 0) && (R161 = 0 || R167 < R168 || R168 < 0))) && (R166 = R168 || (R161 = 0 && R166 = R167));
// End of Parikh automata intersection problem
