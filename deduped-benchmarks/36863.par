// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R6, R7, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 42] { R25 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s2 [43, 43] { R25 += 1 };
  s0 -> s1 [44, 45] { R25 += 1 };
  s0 -> s3 [46, 46] { R25 += 1 };
  s0 -> s1 [48, 65535] { R25 += 1 };
  s1 -> s1 [0, 42] { R25 += 1 };
  s1 -> s2 [43, 43] { R25 += 1 };
  s1 -> s1 [44, 45] { R25 += 1 };
  s1 -> s3 [46, 46] { R25 += 1 };
  s1 -> s1 [48, 65535] { R25 += 1 };
  s2 -> s2 [0, 45] { R25 += 1 };
  s2 -> s9 [46, 46] { R25 += 1 };
  s2 -> s2 [48, 65535] { R25 += 1 };
  s3 -> s1 [0, 42] { R25 += 1 };
  s3 -> s2 [43, 43] { R25 += 1 };
  s3 -> s1 [44, 45] { R25 += 1 };
  s3 -> s3 [46, 46] { R25 += 1 };
  s3 -> s1 [48, 114] { R25 += 1 };
  s3 -> s4 [115, 115] { R25 += 1 };
  s3 -> s1 [116, 65535] { R25 += 1 };
  s4 -> s1 [0, 42] { R25 += 1 };
  s4 -> s2 [43, 43] { R25 += 1 };
  s4 -> s1 [44, 45] { R25 += 1 };
  s4 -> s3 [46, 46] { R25 += 1 };
  s4 -> s1 [48, 110] { R25 += 1 };
  s4 -> s5 [111, 111] { R25 += 1 };
  s4 -> s1 [112, 65535] { R25 += 1 };
  s5 -> s1 [0, 42] { R25 += 1 };
  s5 -> s2 [43, 43] { R25 += 1 };
  s5 -> s1 [44, 45] { R25 += 1 };
  s5 -> s3 [46, 46] { R25 += 1 };
  s5 -> s1 [48, 98] { R25 += 1 };
  s5 -> s6 [99, 99] { R25 += 1 };
  s5 -> s1 [100, 65535] { R25 += 1 };
  s6 -> s1 [0, 42] { R25 += 1 };
  s6 -> s2 [43, 43] { R25 += 1 };
  s6 -> s1 [44, 45] { R25 += 1 };
  s6 -> s3 [46, 46] { R25 += 1 };
  s6 -> s1 [48, 106] { R25 += 1 };
  s6 -> s7 [107, 107] { R25 += 1 };
  s6 -> s1 [108, 65535] { R25 += 1 };
  s7 -> s7 [0, 42] { R25 += 1 };
  s7 -> s8 [43, 43] { R25 += 1 };
  s7 -> s7 [44, 46] { R25 += 1 };
  s7 -> s7 [48, 65535] { R25 += 1 };
  s8 -> s8 [0, 46] { R25 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s8 [48, 65535] { R25 += 1 };
  s9 -> s2 [0, 45] { R25 += 1 };
  s9 -> s9 [46, 46] { R25 += 1 };
  s9 -> s2 [48, 114] { R25 += 1 };
  s9 -> s10 [115, 115] { R25 += 1 };
  s9 -> s2 [116, 65535] { R25 += 1 };
  s10 -> s2 [0, 45] { R25 += 1 };
  s10 -> s9 [46, 46] { R25 += 1 };
  s10 -> s2 [48, 110] { R25 += 1 };
  s10 -> s11 [111, 111] { R25 += 1 };
  s10 -> s2 [112, 65535] { R25 += 1 };
  s11 -> s2 [0, 45] { R25 += 1 };
  s11 -> s9 [46, 46] { R25 += 1 };
  s11 -> s2 [48, 98] { R25 += 1 };
  s11 -> s12 [99, 99] { R25 += 1 };
  s11 -> s2 [100, 65535] { R25 += 1 };
  s12 -> s2 [0, 45] { R25 += 1 };
  s12 -> s9 [46, 46] { R25 += 1 };
  s12 -> s2 [48, 106] { R25 += 1 };
  s12 -> s8 [107, 107] { R25 += 1 };
  s12 -> s2 [108, 65535] { R25 += 1 };
  accepting s8;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 42] { R29 += 1 };
  s0 -> s2 [0, 65535] { R29 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s3 [43, 43] { R29 += 1 };
  s0 -> s1 [44, 65535] { R29 += 1 };
  s1 -> s1 [0, 42] { R29 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R29 += 1 };
  s1 -> s1 [44, 65535] { R29 += 1 };
  s2 -> s1 [0, 42] { R29 += 1 };
  s2 -> s2 [0, 65535] { R29 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R29 += 1 };
  s2 -> s1 [44, 65535] { R29 += 1 };
  s3 -> s3 [0, 65535] { R29 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 42] { R31 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R31 += 1, R10 += 1, R11 += 1 };
  s0 -> s1 [44, 65535] { R31 += 1, R11 += 1 };
  s1 -> s1 [0, 42] { R31 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [44, 65535] { R31 += 1, R11 += 1 };
  s2 -> s1 [0, 42] { R31 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R31 += 1, R10 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [44, 65535] { R31 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R12 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R33 += 1, R13 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R33 += 1, R12 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R33 += 1, R13 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R33 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R33 += 1, R13 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R33 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 36] { R35 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R35 += 1, R14 += 1, R15 += 1 };
  s0 -> s1 [38, 43] { R35 += 1, R15 += 1 };
  s0 -> s3 [44, 44] { R35 += 1, R15 += 1 };
  s0 -> s1 [45, 62] { R35 += 1, R15 += 1 };
  s0 -> s1 [65, 65535] { R35 += 1, R15 += 1 };
  s1 -> s1 [0, 36] { R35 += 1, R15 += 1 };
  s1 -> s1 [38, 43] { R35 += 1, R15 += 1 };
  s1 -> s3 [44, 44] { R35 += 1, R15 += 1 };
  s1 -> s1 [45, 62] { R35 += 1, R15 += 1 };
  s1 -> s1 [65, 65535] { R35 += 1, R15 += 1 };
  s2 -> s1 [0, 36] { R35 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R35 += 1, R14 += 1, R15 += 1 };
  s2 -> s1 [38, 43] { R35 += 1, R15 += 1 };
  s2 -> s3 [44, 44] { R35 += 1, R15 += 1 };
  s2 -> s1 [45, 62] { R35 += 1, R15 += 1 };
  s2 -> s1 [65, 65535] { R35 += 1, R15 += 1 };
  s3 -> s3 [0, 36] { R35 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R35 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [38, 62] { R35 += 1, R15 += 1 };
  s3 -> s3 [65, 65535] { R35 += 1, R15 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s1 [0, 65535] { R37 += 1, R17 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R37 += 1, R16 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R17 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R37 += 1 };
  s2 -> s1 [0, 65535] { R37 += 1, R17 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R37 += 1, R16 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R37 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s1 [0, 65535] { R39 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R39 += 1, R19 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R39 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R39 += 1, R19 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R39 += 1 };
  s2 -> s2 [0, 65535] { R39 += 1, R19 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R39 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 36] { R41 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R41 += 1, R20 += 1, R21 += 1 };
  s0 -> s1 [38, 42] { R41 += 1, R21 += 1 };
  s0 -> s3 [43, 43] { R41 += 1, R21 += 1 };
  s0 -> s4 [43, 43] { R41 += 1, R21 += 1 };
  s0 -> s1 [45, 62] { R41 += 1, R21 += 1 };
  s0 -> s1 [65, 65535] { R41 += 1, R21 += 1 };
  s1 -> s1 [0, 36] { R41 += 1, R21 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R41 += 1 };
  s1 -> s1 [38, 42] { R41 += 1, R21 += 1 };
  s1 -> s3 [43, 43] { R41 += 1, R21 += 1 };
  s1 -> s4 [43, 43] { R41 += 1, R21 += 1 };
  s1 -> s1 [45, 62] { R41 += 1, R21 += 1 };
  s1 -> s1 [65, 65535] { R41 += 1, R21 += 1 };
  s2 -> s1 [0, 36] { R41 += 1, R21 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R41 += 1, R20 += 1, R21 += 1 };
  s2 -> s1 [38, 42] { R41 += 1, R21 += 1 };
  s2 -> s3 [43, 43] { R41 += 1, R21 += 1 };
  s2 -> s4 [43, 43] { R41 += 1, R21 += 1 };
  s2 -> s1 [45, 62] { R41 += 1, R21 += 1 };
  s2 -> s1 [65, 65535] { R41 += 1, R21 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R41 += 1 };
  s4 -> s4 [0, 36] { R41 += 1, R21 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R41 += 1 };
  s4 -> s4 [38, 43] { R41 += 1, R21 += 1 };
  s4 -> s4 [45, 62] { R41 += 1, R21 += 1 };
  s4 -> s4 [65, 65535] { R41 += 1, R21 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 42] { R43 += 1, R23 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R43 += 1, R22 += 1, R23 += 1 };
  s0 -> s3 [43, 43] { R43 += 1, R23 += 1, R8 += 1 };
  s0 -> s4 [43, 43] { R43 += 1, R23 += 1, R8 += 1 };
  s0 -> s1 [44, 65535] { R43 += 1, R23 += 1, R8 += 1 };
  s1 -> s1 [0, 42] { R43 += 1, R23 += 1, R8 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R43 += 1 };
  s1 -> s3 [43, 43] { R43 += 1, R23 += 1, R8 += 1 };
  s1 -> s4 [43, 43] { R43 += 1, R23 += 1, R8 += 1 };
  s1 -> s1 [44, 65535] { R43 += 1, R23 += 1, R8 += 1 };
  s2 -> s1 [0, 42] { R43 += 1, R23 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R43 += 1, R22 += 1, R23 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R43 += 1, R23 += 1, R8 += 1 };
  s2 -> s4 [43, 43] { R43 += 1, R23 += 1, R8 += 1 };
  s2 -> s1 [44, 65535] { R43 += 1, R23 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R43 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R43 += 1, R23 += 1, R8 += 1 };
  s4 -> s6 [0, 65535] { R43 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R43 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R17 && R2 = R43 && R10 = 0 && R11 = R17 && R12 = 0 && R13 = R17 && R14 = 0 && R15 = R17 && R16 = 0 && R24 = 10 && R25 = R43 && R26 = 10 && R27 = R43 && R28 = 10 && R29 = R43 && R30 = 10 && R31 = R43 && R32 = 10 && R33 = R43 && R34 = 10 && R35 = R43 && R36 = 10 && R37 = R43 && R38 = 10 && R39 = R43 && R40 = 10 && R41 = R43 && R42 = 10 && R9 + R8 != 0 && R3 < 1 && 0 < R17 && 9 < R43 && (R7 = 0 || (R18 = 0 && R19 = 0)) && (R7 = 0 || (R20 = 0 && R21 = 0)) && (R7 = 0 || (R22 = 0 && R23 = 0));
// End of Parikh automata intersection problem
