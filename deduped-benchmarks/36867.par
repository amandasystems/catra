// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R4, R42, R43, R5, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s1 [45, 45] { R65 += 1 };
  s0 -> s2 [46, 46] { R65 += 1 };
  s0 -> s1 [48, 62] { R65 += 1 };
  s0 -> s1 [65, 65535] { R65 += 1 };
  s1 -> s1 [0, 43] { R65 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 45] { R65 += 1 };
  s1 -> s2 [46, 46] { R65 += 1 };
  s1 -> s1 [48, 62] { R65 += 1 };
  s1 -> s1 [65, 65535] { R65 += 1 };
  s2 -> s1 [0, 43] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [45, 45] { R65 += 1 };
  s2 -> s2 [46, 46] { R65 += 1 };
  s2 -> s1 [48, 62] { R65 += 1 };
  s2 -> s1 [65, 114] { R65 += 1 };
  s2 -> s3 [115, 115] { R65 += 1 };
  s2 -> s1 [116, 65535] { R65 += 1 };
  s3 -> s1 [0, 43] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [45, 45] { R65 += 1 };
  s3 -> s2 [46, 46] { R65 += 1 };
  s3 -> s1 [48, 62] { R65 += 1 };
  s3 -> s1 [65, 110] { R65 += 1 };
  s3 -> s4 [111, 111] { R65 += 1 };
  s3 -> s1 [112, 65535] { R65 += 1 };
  s4 -> s1 [0, 43] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [45, 45] { R65 += 1 };
  s4 -> s2 [46, 46] { R65 += 1 };
  s4 -> s1 [48, 62] { R65 += 1 };
  s4 -> s1 [65, 98] { R65 += 1 };
  s4 -> s5 [99, 99] { R65 += 1 };
  s4 -> s1 [100, 65535] { R65 += 1 };
  s5 -> s1 [0, 43] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s1 [45, 45] { R65 += 1 };
  s5 -> s2 [46, 46] { R65 += 1 };
  s5 -> s1 [48, 62] { R65 += 1 };
  s5 -> s1 [65, 106] { R65 += 1 };
  s5 -> s1 [108, 65535] { R65 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R67 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R67 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 92] { R69 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s3 [93, 93] { R69 += 1 };
  s0 -> s1 [94, 65535] { R69 += 1, R5 += 1 };
  s1 -> s1 [0, 92] { R69 += 1, R5 += 1 };
  s1 -> s3 [93, 93] { R69 += 1 };
  s1 -> s1 [94, 65535] { R69 += 1, R5 += 1 };
  s2 -> s1 [0, 92] { R69 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R69 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [93, 93] { R69 += 1 };
  s2 -> s1 [94, 65535] { R69 += 1, R5 += 1 };
  s3 -> s1 [0, 57] { R69 += 1, R5 += 2 };
  s3 -> s4 [58, 58] { R69 += 1 };
  s3 -> s1 [59, 92] { R69 += 1, R5 += 2 };
  s3 -> s3 [93, 93] { R69 += 1, R5 += 1 };
  s3 -> s1 [94, 65535] { R69 += 1, R5 += 2 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R69 += 1 };
  s5 -> s5 [0, 65535];
  accepting s4, s5;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 92] { R71 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [93, 93] { R71 += 1 };
  s0 -> s1 [94, 65535] { R71 += 1, R43 += 1 };
  s1 -> s1 [0, 92] { R71 += 1, R43 += 1 };
  s1 -> s3 [93, 93] { R71 += 1 };
  s1 -> s1 [94, 65535] { R71 += 1, R43 += 1 };
  s2 -> s1 [0, 92] { R71 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R71 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [93, 93] { R71 += 1 };
  s2 -> s1 [94, 65535] { R71 += 1, R43 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R71 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s1 [0, 65535] { R73 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [91, 91] { R73 += 1, R61 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [91, 91] { R73 += 1, R61 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [0, 65535] { R75 += 1, R62 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R63 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R75 += 1, R62 += 1, R63 += 1 };
  s1 -> s2 [0, 65535] { R75 += 1, R63 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R75 += 1 };
  s2 -> s2 [0, 65535] { R75 += 1, R63 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R75 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R75 && R4 = 0 && R42 = 0 && R60 = 0 && R64 = 10 && R65 = R75 && R66 = 10 && R67 = R75 && R68 = 10 && R69 = R75 && R70 = 10 && R71 = R75 && R72 = 10 && R73 = R75 && R74 = 10 && R0 != 0 && R5 != -1 && R43 != -1 && 9 < R75 && (R0 != R61 || R61 = 1 || R61 < 0) && (R61 != 1 || -1 < R0) && (R62 != 0 || ((R2 != 0 || ((R0 != R63 || R63 = 1 || R63 < 0) && (R0 = R63 || R63 = 1 || R0 < 1))) && (R2 = 0 || ((R0 != R63 || R63 = 1 || R63 < 0) && (R63 != 1 || -1 < R0) && (R0 = R63 || R63 = 1))))) && (R0 = R61 || R61 = 1) && (R62 = 0 || (R2 = 0 && R0 < 0));
// End of Parikh automata intersection problem
