// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R2, R3, R4, R6, R7;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R169 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s2 [46, 46] { R169 += 1 };
  s0 -> s3 [47, 47] { R169 += 1 };
  s0 -> s1 [48, 65535] { R169 += 1 };
  s1 -> s1 [0, 45] { R169 += 1 };
  s1 -> s2 [46, 46] { R169 += 1 };
  s1 -> s3 [47, 47] { R169 += 1 };
  s1 -> s1 [48, 65535] { R169 += 1 };
  s2 -> s1 [0, 45] { R169 += 1 };
  s2 -> s2 [46, 46] { R169 += 1 };
  s2 -> s3 [47, 47] { R169 += 1 };
  s2 -> s1 [48, 114] { R169 += 1 };
  s2 -> s8 [115, 115] { R169 += 1 };
  s2 -> s1 [116, 65535] { R169 += 1 };
  s3 -> s3 [0, 45] { R169 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R169 += 1 };
  s3 -> s3 [47, 65535] { R169 += 1 };
  s4 -> s3 [0, 45] { R169 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R169 += 1 };
  s4 -> s3 [47, 114] { R169 += 1 };
  s4 -> s5 [115, 115] { R169 += 1 };
  s4 -> s3 [116, 65535] { R169 += 1 };
  s5 -> s3 [0, 45] { R169 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R169 += 1 };
  s5 -> s3 [47, 110] { R169 += 1 };
  s5 -> s6 [111, 111] { R169 += 1 };
  s5 -> s3 [112, 65535] { R169 += 1 };
  s6 -> s3 [0, 45] { R169 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R169 += 1 };
  s6 -> s3 [47, 98] { R169 += 1 };
  s6 -> s7 [99, 99] { R169 += 1 };
  s6 -> s3 [100, 65535] { R169 += 1 };
  s7 -> s3 [0, 45] { R169 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R169 += 1 };
  s7 -> s3 [47, 106] { R169 += 1 };
  s7 -> s3 [108, 65535] { R169 += 1 };
  s8 -> s1 [0, 45] { R169 += 1 };
  s8 -> s2 [46, 46] { R169 += 1 };
  s8 -> s3 [47, 47] { R169 += 1 };
  s8 -> s1 [48, 110] { R169 += 1 };
  s8 -> s9 [111, 111] { R169 += 1 };
  s8 -> s1 [112, 65535] { R169 += 1 };
  s9 -> s1 [0, 45] { R169 += 1 };
  s9 -> s2 [46, 46] { R169 += 1 };
  s9 -> s3 [47, 47] { R169 += 1 };
  s9 -> s1 [48, 98] { R169 += 1 };
  s9 -> s10 [99, 99] { R169 += 1 };
  s9 -> s1 [100, 65535] { R169 += 1 };
  s10 -> s1 [0, 45] { R169 += 1 };
  s10 -> s2 [46, 46] { R169 += 1 };
  s10 -> s3 [47, 47] { R169 += 1 };
  s10 -> s1 [48, 106] { R169 += 1 };
  s10 -> s1 [108, 65535] { R169 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R171 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R173 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s3 [47, 47] { R173 += 1 };
  s0 -> s1 [48, 65535] { R173 += 1, R101 += 1 };
  s1 -> s1 [0, 46] { R173 += 1, R101 += 1 };
  s1 -> s3 [47, 47] { R173 += 1 };
  s1 -> s1 [48, 65535] { R173 += 1, R101 += 1 };
  s2 -> s1 [0, 46] { R173 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R100 += 1, R101 += 1 };
  s2 -> s3 [47, 47] { R173 += 1 };
  s2 -> s1 [48, 65535] { R173 += 1, R101 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R173 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R175 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s1 -> s1 [0, 65535] { R175 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R177 += 1, R155 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R154 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s1 [45, 57] { R177 += 1, R155 += 1 };
  s0 -> s3 [58, 58] { R177 += 1, R155 += 1 };
  s0 -> s1 [59, 62] { R177 += 1, R155 += 1 };
  s0 -> s1 [65, 65535] { R177 += 1, R155 += 1 };
  s1 -> s1 [0, 43] { R177 += 1, R155 += 1 };
  s1 -> s1 [45, 57] { R177 += 1, R155 += 1 };
  s1 -> s3 [58, 58] { R177 += 1, R155 += 1 };
  s1 -> s1 [59, 62] { R177 += 1, R155 += 1 };
  s1 -> s1 [65, 65535] { R177 += 1, R155 += 1 };
  s2 -> s1 [0, 43] { R177 += 1, R155 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R154 += 1, R155 += 1 };
  s2 -> s1 [45, 57] { R177 += 1, R155 += 1 };
  s2 -> s3 [58, 58] { R177 += 1, R155 += 1 };
  s2 -> s1 [59, 62] { R177 += 1, R155 += 1 };
  s2 -> s1 [65, 65535] { R177 += 1, R155 += 1 };
  s3 -> s3 [0, 43] { R177 += 1, R155 += 1 };
  s3 -> s3 [0, 65535] { R177 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [45, 62] { R177 += 1, R155 += 1 };
  s3 -> s3 [65, 65535] { R177 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R179 += 1, R156 += 1, R157 += 1 };
  s0 -> s0 [0, 65535] { R178 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R179 += 1, R157 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R179 += 1, R156 += 1, R157 += 1 };
  s1 -> s2 [0, 65535] { R179 += 1, R157 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R179 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R179 += 1, R157 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R179 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R181 += 1, R159 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R181 += 1, R159 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R181 += 1, R158 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s4 [58, 58] { R181 += 1, R159 += 1 };
  s0 -> s1 [59, 65535] { R181 += 1, R159 += 1, R7 += 1 };
  s1 -> s1 [0, 57] { R181 += 1, R159 += 1, R7 += 1 };
  s1 -> s4 [58, 58] { R181 += 1, R159 += 1 };
  s1 -> s1 [59, 65535] { R181 += 1, R159 += 1, R7 += 1 };
  s2 -> s1 [0, 57] { R181 += 1, R159 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R181 += 1, R159 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [58, 58] { R181 += 1, R159 += 1 };
  s2 -> s1 [59, 65535] { R181 += 1, R159 += 1, R7 += 1 };
  s3 -> s1 [0, 57] { R181 += 1, R159 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R181 += 1, R159 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R181 += 1, R158 += 1, R159 += 1 };
  s3 -> s4 [58, 58] { R181 += 1, R159 += 1 };
  s3 -> s1 [59, 65535] { R181 += 1, R159 += 1, R7 += 1 };
  s4 -> s5 [0, 65535] { R181 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R181 += 1, R159 += 1 };
  s5 -> s5 [0, 65535] { R181 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 90] { R183 += 1, R161 += 1, R147 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s2 [0, 65535] { R183 += 1, R161 += 1, R146 += 1, R147 += 1 };
  s0 -> s3 [0, 65535] { R183 += 1, R160 += 1, R161 += 1 };
  s0 -> s4 [91, 91] { R183 += 1, R161 += 1, R147 += 1 };
  s0 -> s1 [92, 65535] { R183 += 1, R161 += 1, R147 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R183 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R161 += 1, R147 += 1 };
  s1 -> s7 [0, 65535] { R183 += 1, R161 += 1 };
  s2 -> s1 [0, 90] { R183 += 1, R161 += 1, R147 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R183 += 1 };
  s2 -> s2 [0, 65535] { R183 += 1, R161 += 1, R146 += 1, R147 += 1 };
  s2 -> s4 [91, 91] { R183 += 1, R161 += 1, R147 += 1 };
  s2 -> s1 [92, 65535] { R183 += 1, R161 += 1, R147 += 1 };
  s3 -> s1 [0, 90] { R183 += 1, R161 += 1, R147 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R183 += 1, R161 += 1, R146 += 1, R147 += 1 };
  s3 -> s3 [0, 65535] { R183 += 1, R160 += 1, R161 += 1 };
  s3 -> s4 [91, 91] { R183 += 1, R161 += 1, R147 += 1 };
  s3 -> s1 [92, 65535] { R183 += 1, R161 += 1, R147 += 1 };
  s4 -> s1 [0, 65535] { R183 += 1, R161 += 1, R147 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R183 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R183 += 1 };
  s7 -> s7 [0, 65535] { R183 += 1, R161 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65535] { R185 += 1, R163 += 1, R148 += 1, R149 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R163 += 1, R149 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R185 += 1, R162 += 1, R163 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s1 -> s1 [0, 65535] { R185 += 1, R163 += 1, R148 += 1, R149 += 1 };
  s1 -> s2 [0, 65535] { R185 += 1, R163 += 1, R149 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R185 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R163 += 1, R149 += 1, R4 += 1 };
  s2 -> s5 [0, 65535] { R185 += 1, R163 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R185 += 1 };
  s3 -> s1 [0, 65535] { R185 += 1, R163 += 1, R148 += 1, R149 += 1 };
  s3 -> s2 [0, 65535] { R185 += 1, R163 += 1, R149 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R185 += 1, R162 += 1, R163 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R185 += 1, R163 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R185 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R185 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R187 += 1, R165 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R164 += 1, R165 += 1 };
  s0 -> s3 [0, 65535] { R187 += 1, R165 += 1, R150 += 1, R151 += 1 };
  s0 -> s1 [59, 65535] { R187 += 1, R165 += 1, R151 += 1 };
  s1 -> s1 [0, 57] { R187 += 1, R165 += 1, R151 += 1 };
  s1 -> s4 [0, 65535] { R187 += 1 };
  s1 -> s1 [0, 65535] { R187 += 1, R165 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [59, 65535] { R187 += 1, R165 += 1, R151 += 1 };
  s2 -> s1 [0, 57] { R187 += 1, R165 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R187 += 1, R164 += 1, R165 += 1 };
  s2 -> s3 [0, 65535] { R187 += 1, R165 += 1, R150 += 1, R151 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [59, 65535] { R187 += 1, R165 += 1, R151 += 1 };
  s3 -> s1 [0, 57] { R187 += 1, R165 += 1, R151 += 1 };
  s3 -> s4 [0, 65535] { R187 += 1 };
  s3 -> s3 [0, 65535] { R187 += 1, R165 += 1, R150 += 1, R151 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [59, 65535] { R187 += 1, R165 += 1, R151 += 1 };
  s4 -> s4 [0, 65535] { R187 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R189 += 1, R167 += 1, R153 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R189 += 1, R167 += 1, R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R189 += 1, R166 += 1, R167 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1, R167 += 1, R153 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R189 += 1, R167 += 1 };
  s1 -> s5 [0, 65535] { R189 += 1 };
  s2 -> s1 [0, 65535] { R189 += 1, R167 += 1, R153 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R189 += 1, R167 += 1, R152 += 1, R153 += 1 };
  s2 -> s5 [0, 65535] { R189 += 1 };
  s3 -> s1 [0, 65535] { R189 += 1, R167 += 1, R153 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R189 += 1, R167 += 1, R152 += 1, R153 += 1 };
  s3 -> s3 [0, 65535] { R189 += 1, R166 += 1, R167 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R189 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R189 += 1, R167 += 1 };
  s6 -> s5 [0, 65535] { R189 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R153 && R2 - R167 = 1 && R3 = R189 && R6 = 0 && R7 - R152 = -1 && R100 = 0 && R101 = R167 && R146 = 0 && R147 = 1 && R148 = 0 && R149 = 1 && R150 = R152 && R151 = R153 && R154 = 0 && R155 = R167 && R156 = 0 && R157 = R167 && R158 = 0 && R159 = R167 && R160 = 0 && R161 = R167 && R162 = 0 && R163 = R167 && R164 = 0 && R165 = R167 && R166 = 0 && R168 = 10 && R169 = R189 && R170 = 10 && R171 = R189 && R172 = 10 && R173 = R189 && R174 = 10 && R175 = R189 && R176 = 10 && R177 = R189 && R178 = 10 && R179 = R189 && R180 = 10 && R181 = R189 && R182 = 10 && R183 = R189 && R184 = 10 && R185 = R189 && R186 = 10 && R187 = R189 && R188 = 10 && R0 != 0 && R152 - R153 < 1 && 0 < R152 && -1 < R167 && 9 < R189;
// End of Parikh automata intersection problem
