// Parikh automata intersection problem, generated by OSTRICH+
counter int R10748, R10749, R10750, R10751, R10752, R10753, R10754, R10755, R10756, R10757, R10758, R10759, R11168, R11169, R11170, R11171, R11172, R11173, R11174, R11175, R11176, R11177, R11178, R11179, R11180, R11181, R11182, R11183, R11184, R11185, R11186, R11187, R11188, R11189, R11190, R11191, R11192, R11193, R11194, R11195, R11196, R11197, R11198, R11199, R11200, R11201, R11202, R11203, R11204, R11205, R11206, R11207, R11208, R11209, R11210, R11211, R11212, R11213, R11214, R11215, R11216, R11217, R11218, R11219, R11220, R11221, R11222, R11223, R11224, R11225, R11226, R11227, R11228, R11229, R11230, R11231, R11232, R11233, R11234, R11235, R11236, R11237, R11238, R11239, R11240, R11241, R11242, R11243, R11244, R11245, R11246, R11247, R11248, R11249, R11250, R11251, R11252, R11253, R11254, R11255, R11256, R11257, R11258, R11259, R11260, R11261, R11262, R11263, R11264, R11265, R11266, R11267, R11268, R11269, R11270, R11271, R11272, R11273, R11274, R11275, R11276, R11277, R11278, R11279, R11280, R11281, R11282, R11283, R11284, R11285, R11286, R11287, R11288, R11289, R11290, R11291, R11292, R11293, R11294, R11295, R11296, R11297, R11298, R11299, R11300, R11301, R11302, R11303, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R11199 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11198 += 1, R11199 += 1 };
  s1 -> s1 [0, 65535] { R11199 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R11201 += 1 };
  s0 -> s2 [0, 65535] { R11201 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R11200 += 1, R11201 += 1 };
  s0 -> s3 [65, 65] { R11201 += 1 };
  s0 -> s1 [66, 65535] { R11201 += 1 };
  s1 -> s1 [0, 64] { R11201 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R11201 += 1 };
  s1 -> s1 [66, 65535] { R11201 += 1 };
  s2 -> s1 [0, 64] { R11201 += 1 };
  s2 -> s2 [0, 65535] { R11201 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R11201 += 1 };
  s2 -> s1 [66, 65535] { R11201 += 1 };
  s3 -> s3 [0, 65535] { R11201 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R11202 += 1, R11203 += 1 };
  s0 -> s1 [0, 65535] { R11203 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R11203 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R11203 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11203 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11203 += 1 };
  s2 -> s2 [0, 65535] { R11203 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11203 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R11204 += 1, R11205 += 1 };
  s0 -> s1 [0, 65535] { R11205 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11205 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R11206 += 1, R11207 += 1 };
  s0 -> s1 [0, 65535] { R11207 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R11207 += 1, R85 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11207 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R11207 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11207 += 1 };
  s2 -> s2 [0, 65535] { R11207 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11207 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R11209 += 1 };
  s0 -> s0 [0, 65535] { R11208 += 1, R11209 += 1 };
  s1 -> s1 [0, 65535] { R11209 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R11233 += 1 };
  s0 -> s0 [0, 65535] { R11232 += 1, R11233 += 1 };
  s0 -> s1 [45, 45] { R11233 += 1 };
  s0 -> s2 [46, 46] { R11233 += 1 };
  s0 -> s1 [48, 62] { R11233 += 1 };
  s0 -> s3 [65, 65] { R11233 += 1 };
  s0 -> s1 [66, 65535] { R11233 += 1 };
  s1 -> s1 [0, 43] { R11233 += 1 };
  s1 -> s1 [45, 45] { R11233 += 1 };
  s1 -> s2 [46, 46] { R11233 += 1 };
  s1 -> s1 [48, 62] { R11233 += 1 };
  s1 -> s3 [65, 65] { R11233 += 1 };
  s1 -> s1 [66, 65535] { R11233 += 1 };
  s2 -> s1 [0, 43] { R11233 += 1 };
  s2 -> s1 [45, 45] { R11233 += 1 };
  s2 -> s2 [46, 46] { R11233 += 1 };
  s2 -> s1 [48, 62] { R11233 += 1 };
  s2 -> s3 [65, 65] { R11233 += 1 };
  s2 -> s1 [66, 114] { R11233 += 1 };
  s2 -> s8 [115, 115] { R11233 += 1 };
  s2 -> s1 [116, 65535] { R11233 += 1 };
  s3 -> s3 [0, 43] { R11233 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R11233 += 1 };
  s3 -> s4 [46, 46] { R11233 += 1 };
  s3 -> s3 [48, 62] { R11233 += 1 };
  s3 -> s3 [65, 65535] { R11233 += 1 };
  s4 -> s3 [0, 43] { R11233 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R11233 += 1 };
  s4 -> s4 [46, 46] { R11233 += 1 };
  s4 -> s3 [48, 62] { R11233 += 1 };
  s4 -> s3 [65, 114] { R11233 += 1 };
  s4 -> s5 [115, 115] { R11233 += 1 };
  s4 -> s3 [116, 65535] { R11233 += 1 };
  s5 -> s3 [0, 43] { R11233 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R11233 += 1 };
  s5 -> s4 [46, 46] { R11233 += 1 };
  s5 -> s3 [48, 62] { R11233 += 1 };
  s5 -> s3 [65, 110] { R11233 += 1 };
  s5 -> s6 [111, 111] { R11233 += 1 };
  s5 -> s3 [112, 65535] { R11233 += 1 };
  s6 -> s3 [0, 43] { R11233 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R11233 += 1 };
  s6 -> s4 [46, 46] { R11233 += 1 };
  s6 -> s3 [48, 62] { R11233 += 1 };
  s6 -> s3 [65, 98] { R11233 += 1 };
  s6 -> s7 [99, 99] { R11233 += 1 };
  s6 -> s3 [100, 65535] { R11233 += 1 };
  s7 -> s3 [0, 43] { R11233 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R11233 += 1 };
  s7 -> s4 [46, 46] { R11233 += 1 };
  s7 -> s3 [48, 62] { R11233 += 1 };
  s7 -> s3 [65, 106] { R11233 += 1 };
  s7 -> s3 [108, 65535] { R11233 += 1 };
  s8 -> s1 [0, 43] { R11233 += 1 };
  s8 -> s1 [45, 45] { R11233 += 1 };
  s8 -> s2 [46, 46] { R11233 += 1 };
  s8 -> s1 [48, 62] { R11233 += 1 };
  s8 -> s3 [65, 65] { R11233 += 1 };
  s8 -> s1 [66, 110] { R11233 += 1 };
  s8 -> s9 [111, 111] { R11233 += 1 };
  s8 -> s1 [112, 65535] { R11233 += 1 };
  s9 -> s1 [0, 43] { R11233 += 1 };
  s9 -> s1 [45, 45] { R11233 += 1 };
  s9 -> s2 [46, 46] { R11233 += 1 };
  s9 -> s1 [48, 62] { R11233 += 1 };
  s9 -> s3 [65, 65] { R11233 += 1 };
  s9 -> s1 [66, 98] { R11233 += 1 };
  s9 -> s10 [99, 99] { R11233 += 1 };
  s9 -> s1 [100, 65535] { R11233 += 1 };
  s10 -> s1 [0, 43] { R11233 += 1 };
  s10 -> s1 [45, 45] { R11233 += 1 };
  s10 -> s2 [46, 46] { R11233 += 1 };
  s10 -> s1 [48, 62] { R11233 += 1 };
  s10 -> s3 [65, 65] { R11233 += 1 };
  s10 -> s1 [66, 106] { R11233 += 1 };
  s10 -> s1 [108, 65535] { R11233 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R11234 += 1, R11235 += 1 };
  s0 -> s1 [0, 65535] { R11235 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11235 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R11237 += 1 };
  s0 -> s2 [0, 65535] { R11237 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R11236 += 1, R11237 += 1 };
  s0 -> s3 [58, 58] { R11237 += 1 };
  s0 -> s1 [59, 65535] { R11237 += 1 };
  s1 -> s1 [0, 57] { R11237 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R11237 += 1 };
  s1 -> s1 [59, 65535] { R11237 += 1 };
  s2 -> s1 [0, 57] { R11237 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11237 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R11237 += 1 };
  s2 -> s1 [59, 65535] { R11237 += 1 };
  s3 -> s3 [0, 65535] { R11237 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R11239 += 1 };
  s0 -> s0 [0, 65535] { R11238 += 1, R11239 += 1 };
  s0 -> s2 [0, 65535] { R11239 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R11239 += 1 };
  s0 -> s1 [44, 65535] { R11239 += 1 };
  s1 -> s1 [0, 42] { R11239 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R11239 += 1 };
  s1 -> s1 [44, 65535] { R11239 += 1 };
  s2 -> s1 [0, 42] { R11239 += 1 };
  s2 -> s2 [0, 65535] { R11239 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R11239 += 1 };
  s2 -> s1 [44, 65535] { R11239 += 1 };
  s3 -> s3 [0, 65535] { R11239 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R11241 += 1 };
  s0 -> s0 [0, 65535] { R11240 += 1, R11241 += 1 };
  s0 -> s2 [0, 65535] { R11241 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R11241 += 1 };
  s0 -> s1 [66, 65535] { R11241 += 1 };
  s1 -> s1 [0, 64] { R11241 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R11241 += 1 };
  s1 -> s1 [66, 65535] { R11241 += 1 };
  s2 -> s1 [0, 64] { R11241 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11241 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R11241 += 1 };
  s2 -> s1 [66, 65535] { R11241 += 1 };
  s3 -> s3 [0, 65535] { R11241 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R11243 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R11243 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R11242 += 1, R11243 += 1 };
  s0 -> s3 [91, 91] { R11243 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R11243 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R11243 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11243 += 1 };
  s2 -> s1 [0, 90] { R11243 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11243 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R11243 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R11243 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R11243 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11243 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11245 += 1, R41 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R11245 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R11244 += 1, R11245 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11245 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R11245 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11245 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R11245 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11245 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R11247 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R11247 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R11246 += 1, R11247 += 1 };
  s1 -> s1 [0, 65535] { R11247 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11247 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11247 += 1, R57 += 1, R31 += 1 };
  s2 -> s4 [0, 65535] { R11247 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11247 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R11249 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R11248 += 1, R11249 += 1 };
  s0 -> s2 [0, 65535] { R11249 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R11249 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R11249 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R11249 += 1 };
  s1 -> s1 [0, 65535] { R11249 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R11249 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11249 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R11249 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R11249 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R11249 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11249 += 1 };
  s3 -> s5 [111, 111] { R11249 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R11249 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R11249 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11249 += 1 };
  s5 -> s6 [99, 99] { R11249 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R11249 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R11249 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11249 += 1 };
  s6 -> s7 [97, 97] { R11249 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R11249 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R11249 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R11249 += 1 };
  s7 -> s8 [108, 108] { R11249 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R11249 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R11249 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R11249 += 1 };
  s8 -> s9 [104, 104] { R11249 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R11249 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R11249 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R11249 += 1 };
  s9 -> s10 [111, 111] { R11249 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R11249 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R11249 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R11249 += 1 };
  s10 -> s11 [115, 115] { R11249 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R11249 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R11249 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R11249 += 1 };
  s11 -> s12 [116, 116] { R11249 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R11249 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R11249 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R11249 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R11250 += 1, R11251 += 1 };
  s0 -> s1 [0, 65535] { R11251 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R11251 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11251 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R11251 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R11251 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11251 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R11251 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11253 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R11253 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R11252 += 1, R11253 += 1 };
  s1 -> s1 [0, 65535] { R11253 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R11253 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11253 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11253 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11253 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R11254 += 1, R11255 += 1 };
  s0 -> s1 [0, 65535] { R11255 += 1 };
  s1 -> s1 [0, 65535] { R11255 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R11257 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R11256 += 1, R11257 += 1 };
  s0 -> s2 [0, 65535] { R11257 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R11257 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R11257 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R11257 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R11257 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11257 += 1 };
  s1 -> s3 [43, 43] { R11257 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R11257 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R11257 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R11257 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11257 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R11257 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R11257 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R11257 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R11257 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11257 += 1 };
  s4 -> s4 [0, 65535] { R11257 += 1, R77 += 1, R42 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11257 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R11259 += 1, R11175 += 1 };
  s0 -> s0 [0, 65535] { R11258 += 1, R11259 += 1 };
  s0 -> s2 [0, 65535] { R11259 += 1, R11174 += 1, R11175 += 1 };
  s0 -> s1 [66, 65535] { R11259 += 1, R11175 += 1 };
  s1 -> s1 [0, 64] { R11259 += 1, R11175 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11259 += 1 };
  s1 -> s1 [66, 65535] { R11259 += 1, R11175 += 1 };
  s2 -> s1 [0, 64] { R11259 += 1, R11175 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11259 += 1, R11174 += 1, R11175 += 1 };
  s2 -> s1 [66, 65535] { R11259 += 1, R11175 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R11261 += 1, R11177 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R11261 += 1, R11176 += 1, R11177 += 1 };
  s0 -> s0 [0, 65535] { R11260 += 1, R11261 += 1 };
  s1 -> s4 [0, 65535] { R11261 += 1 };
  s1 -> s1 [0, 65535] { R11261 += 1, R11177 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11261 += 1, R11177 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R11261 += 1, R11176 += 1, R11177 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11261 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R11263 += 1, R11179 += 1 };
  s0 -> s2 [0, 65535] { R11263 += 1, R11178 += 1, R11179 += 1 };
  s0 -> s0 [0, 65535] { R11262 += 1, R11263 += 1 };
  s0 -> s1 [80, 65535] { R11263 += 1, R11179 += 1 };
  s1 -> s1 [0, 65] { R11263 += 1, R11179 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11263 += 1 };
  s1 -> s1 [80, 65535] { R11263 += 1, R11179 += 1 };
  s2 -> s1 [0, 65] { R11263 += 1, R11179 += 1 };
  s2 -> s2 [0, 65535] { R11263 += 1, R11178 += 1, R11179 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R11263 += 1, R11179 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R11265 += 1, R11180 += 1, R11181 += 1 };
  s0 -> s2 [0, 65535] { R11265 += 1, R11181 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R11264 += 1, R11265 += 1 };
  s1 -> s1 [0, 65535] { R11265 += 1, R11180 += 1, R11181 += 1 };
  s1 -> s2 [0, 65535] { R11265 += 1, R11181 += 1, R407 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11265 += 1, R11181 += 1, R407 += 1 };
  s2 -> s3 [0, 65535] { R11265 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11265 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R11267 += 1, R11183 += 1 };
  s0 -> s2 [0, 65535] { R11267 += 1, R11183 += 1, R409 += 1 };
  s0 -> s3 [0, 65535] { R11267 += 1, R11182 += 1, R11183 += 1 };
  s0 -> s0 [0, 65535] { R11266 += 1, R11267 += 1 };
  s0 -> s1 [81, 65535] { R11267 += 1, R11183 += 1 };
  s1 -> s1 [0, 79] { R11267 += 1, R11183 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11267 += 1 };
  s1 -> s1 [81, 65535] { R11267 += 1, R11183 += 1 };
  s2 -> s1 [0, 79] { R11267 += 1, R11183 += 1 };
  s2 -> s2 [0, 65535] { R11267 += 1, R11183 += 1, R409 += 1 };
  s2 -> s5 [0, 65535] { R11267 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R11267 += 1, R11183 += 1 };
  s3 -> s1 [0, 79] { R11267 += 1, R11183 += 1 };
  s3 -> s2 [0, 65535] { R11267 += 1, R11183 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R11267 += 1, R11182 += 1, R11183 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R11267 += 1, R11183 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11267 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R11269 += 1, R11185 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R11269 += 1, R11185 += 1, R412 += 1, R413 += 1 };
  s0 -> s3 [0, 65535] { R11269 += 1, R11184 += 1, R11185 += 1 };
  s0 -> s0 [0, 65535] { R11268 += 1, R11269 += 1 };
  s0 -> s1 [81, 65535] { R11269 += 1, R11185 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R11269 += 1, R11185 += 1, R413 += 1 };
  s1 -> s5 [0, 65535] { R11269 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11269 += 1, R11185 += 1 };
  s1 -> s1 [81, 65535] { R11269 += 1, R11185 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R11269 += 1, R11185 += 1, R413 += 1 };
  s2 -> s5 [0, 65535] { R11269 += 1 };
  s2 -> s2 [0, 65535] { R11269 += 1, R11185 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R11269 += 1, R11185 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R11269 += 1, R11185 += 1, R413 += 1 };
  s3 -> s2 [0, 65535] { R11269 += 1, R11185 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R11269 += 1, R11184 += 1, R11185 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R11269 += 1, R11185 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11269 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R11271 += 1, R11187 += 1, R418 += 1, R419 += 1 };
  s0 -> s2 [0, 65535] { R11271 += 1, R11186 += 1, R11187 += 1 };
  s0 -> s0 [0, 65535] { R11270 += 1, R11271 += 1 };
  s0 -> s3 [0, 65535] { R11271 += 1, R11187 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R11271 += 1, R11187 += 1, R418 += 1, R419 += 1 };
  s1 -> s4 [0, 65535] { R11271 += 1 };
  s1 -> s6 [0, 65535] { R11271 += 1, R11187 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R11271 += 1, R11187 += 1, R418 += 1, R419 += 1 };
  s2 -> s2 [0, 65535] { R11271 += 1, R11186 += 1, R11187 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R11271 += 1, R11187 += 1, R417 += 1, R418 += 1 };
  s3 -> s1 [0, 65535] { R11271 += 1, R11187 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [0, 65535] { R11271 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11271 += 1, R11187 += 1, R417 += 1, R418 += 1 };
  s4 -> s4 [0, 65535] { R11271 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R11271 += 1 };
  s6 -> s6 [0, 65535] { R11271 += 1, R11187 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R11273 += 1, R11189 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R11273 += 1, R11189 += 1 };
  s0 -> s2 [0, 65535] { R11273 += 1, R11188 += 1, R11189 += 1 };
  s0 -> s0 [0, 65535] { R11272 += 1, R11273 += 1 };
  s0 -> s1 [91, 65535] { R11273 += 1, R11189 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R11273 += 1, R11189 += 1, R6619 += 1 };
  s1 -> s1 [0, 65535] { R11273 += 1, R11189 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11273 += 1 };
  s1 -> s1 [91, 65535] { R11273 += 1, R11189 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R11273 += 1, R11189 += 1, R6619 += 1 };
  s2 -> s1 [0, 65535] { R11273 += 1, R11189 += 1 };
  s2 -> s2 [0, 65535] { R11273 += 1, R11188 += 1, R11189 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R11273 += 1, R11189 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11273 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R11274 += 1, R11275 += 1 };
  s0 -> s1 [0, 65535] { R11275 += 1, R11191 += 1 };
  s0 -> s2 [0, 65535] { R11275 += 1, R11190 += 1, R11191 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11275 += 1 };
  s1 -> s1 [0, 65535] { R11275 += 1, R11191 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11275 += 1, R11191 += 1 };
  s2 -> s2 [0, 65535] { R11275 += 1, R11190 += 1, R11191 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11275 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R11277 += 1, R11193 += 1, R10758 += 1, R10759 += 1 };
  s0 -> s0 [0, 65535] { R11276 += 1, R11277 += 1 };
  s0 -> s2 [0, 65535] { R11277 += 1, R11193 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s3 [0, 65535] { R11277 += 1, R11192 += 1, R11193 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11277 += 1, R11193 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s6 [0, 65535] { R11277 += 1, R11193 += 1 };
  s1 -> s5 [0, 65535] { R11277 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R11277 += 1, R11193 += 1, R10758 += 1, R10759 += 1 };
  s2 -> s2 [0, 65535] { R11277 += 1, R11193 += 1, R10757 += 1, R10758 += 1 };
  s2 -> s5 [0, 65535] { R11277 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11277 += 1, R11193 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s2 [0, 65535] { R11277 += 1, R11193 += 1, R10757 += 1, R10758 += 1 };
  s3 -> s3 [0, 65535] { R11277 += 1, R11192 += 1, R11193 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11277 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11277 += 1, R11193 += 1 };
  s6 -> s5 [0, 65535] { R11277 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s0 [0, 65535] { R11278 += 1, R11279 += 1 };
  s0 -> s1 [0, 65535] { R11279 += 1, R11194 += 1, R11195 += 1 };
  s0 -> s2 [0, 65535] { R11279 += 1, R11195 += 1 };
  s1 -> s1 [0, 65535] { R11279 += 1, R11194 += 1, R11195 += 1 };
  s1 -> s2 [0, 65535] { R11279 += 1, R11195 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11279 += 1, R11195 += 1 };
  s2 -> s3 [0, 65535] { R11279 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11279 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R11281 += 1, R11197 += 1 };
  s0 -> s2 [0, 65535] { R11281 += 1, R11197 += 1, R11172 += 1, R11173 += 1 };
  s0 -> s3 [0, 65535] { R11281 += 1, R11196 += 1, R11197 += 1 };
  s0 -> s0 [0, 65535] { R11280 += 1, R11281 += 1 };
  s1 -> s1 [0, 65535] { R11281 += 1, R11197 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11281 += 1 };
  s2 -> s1 [0, 65535] { R11281 += 1, R11197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11281 += 1, R11197 += 1, R11172 += 1, R11173 += 1 };
  s2 -> s5 [0, 65535] { R11281 += 1 };
  s3 -> s1 [0, 65535] { R11281 += 1, R11197 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11281 += 1, R11197 += 1, R11172 += 1, R11173 += 1 };
  s3 -> s3 [0, 65535] { R11281 += 1, R11196 += 1, R11197 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11281 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R11282 += 1, R11283 += 1 };
  s0 -> s1 [0, 65535] { R11283 += 1, R11210 += 1, R11211 += 1 };
  s0 -> s2 [0, 65535] { R11283 += 1, R11211 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R11283 += 1, R11210 += 1, R11211 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11283 += 1, R11211 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R11283 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11283 += 1, R11211 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R11283 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R11285 += 1, R11213 += 1 };
  s0 -> s0 [0, 65535] { R11284 += 1, R11285 += 1 };
  s0 -> s2 [0, 65535] { R11285 += 1, R11212 += 1, R11213 += 1 };
  s0 -> s3 [65, 65] { R11285 += 1, R11213 += 1 };
  s0 -> s4 [65, 65] { R11285 += 1, R11213 += 1 };
  s0 -> s5 [80, 80] { R11285 += 1, R11213 += 1 };
  s0 -> s1 [81, 65535] { R11285 += 1, R11213 += 1 };
  s1 -> s1 [0, 64] { R11285 += 1, R11213 += 1 };
  s1 -> s3 [65, 65] { R11285 += 1, R11213 += 1 };
  s1 -> s4 [65, 65] { R11285 += 1, R11213 += 1 };
  s1 -> s5 [80, 80] { R11285 += 1, R11213 += 1 };
  s1 -> s1 [81, 65535] { R11285 += 1, R11213 += 1 };
  s2 -> s1 [0, 64] { R11285 += 1, R11213 += 1 };
  s2 -> s2 [0, 65535] { R11285 += 1, R11212 += 1, R11213 += 1 };
  s2 -> s3 [65, 65] { R11285 += 1, R11213 += 1 };
  s2 -> s4 [65, 65] { R11285 += 1, R11213 += 1 };
  s2 -> s5 [80, 80] { R11285 += 1, R11213 += 1 };
  s2 -> s1 [81, 65535] { R11285 += 1, R11213 += 1 };
  s4 -> s4 [0, 65] { R11285 += 1, R11213 += 1 };
  s4 -> s7 [80, 80] { R11285 += 1, R11213 += 1 };
  s4 -> s4 [81, 65535] { R11285 += 1, R11213 += 1 };
  s5 -> s5 [0, 64] { R11285 += 1, R11213 += 1 };
  s5 -> s5 [0, 65535] { R11285 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R11285 += 1, R11213 += 1 };
  s5 -> s8 [65, 65] { R11285 += 1, R11213 += 1 };
  s5 -> s5 [80, 65535] { R11285 += 1, R11213 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R11285 += 1, R11213 += 1 };
  s7 -> s7 [0, 65535] { R11285 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R11285 += 1, R11213 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R11285 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R11287 += 1, R11215 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R11287 += 1, R11214 += 1, R11215 += 1 };
  s0 -> s0 [0, 65535] { R11286 += 1, R11287 += 1 };
  s0 -> s3 [65, 65] { R11287 += 1, R11215 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R11287 += 1, R11215 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R11287 += 1, R11215 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R11287 += 1, R11215 += 1, R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11287 += 1 };
  s1 -> s3 [65, 65] { R11287 += 1, R11215 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R11287 += 1, R11215 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R11287 += 1, R11215 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R11287 += 1, R11215 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R11287 += 1, R11214 += 1, R11215 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R11287 += 1, R11215 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R11287 += 1, R11215 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R11287 += 1, R11215 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11287 += 1, R11215 += 1, R406 += 1 };
  s3 -> s6 [0, 65535] { R11287 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11287 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11287 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R11289 += 1, R11217 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R11289 += 1, R11216 += 1, R11217 += 1 };
  s0 -> s0 [0, 65535] { R11288 += 1, R11289 += 1 };
  s0 -> s3 [65, 65] { R11289 += 1, R11217 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R11289 += 1, R11217 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R11289 += 1, R11217 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R11289 += 1, R11217 += 1, R408 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R11289 += 1 };
  s1 -> s3 [65, 65] { R11289 += 1, R11217 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R11289 += 1, R11217 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R11289 += 1, R11217 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R11289 += 1, R11217 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R11289 += 1, R11216 += 1, R11217 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R11289 += 1, R11217 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R11289 += 1, R11217 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R11289 += 1, R11217 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R11289 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R11289 += 1 };
  s4 -> s4 [0, 65535] { R11289 += 1, R11217 += 1, R408 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R11289 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R11290 += 1, R11291 += 1 };
  s0 -> s2 [0, 65535] { R11291 += 1, R11218 += 1, R11219 += 1 };
  s0 -> s3 [65, 65] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11291 += 1 };
  s1 -> s3 [65, 65] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11291 += 1, R11218 += 1, R11219 += 1 };
  s2 -> s3 [65, 65] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R11291 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11291 += 1, R11219 += 1, R410 += 1, R411 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11291 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11291 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R11292 += 1, R11293 += 1 };
  s0 -> s2 [0, 65535] { R11293 += 1, R11220 += 1, R11221 += 1 };
  s0 -> s3 [65, 65] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R11293 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11293 += 1, R11220 += 1, R11221 += 1 };
  s2 -> s3 [65, 65] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R11293 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11293 += 1, R11221 += 1, R414 += 1, R415 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11293 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11293 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s3 [0, 65535] { R11295 += 1, R11222 += 1, R11223 += 1 };
  s0 -> s0 [0, 65535] { R11294 += 1, R11295 += 1 };
  s0 -> s4 [65, 65] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s0 -> s2 [66, 65535] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s1 [91, 107] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s0 -> s1 [109, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s1 [0, 65535] { R11295 += 1 };
  s1 -> s5 [65, 65] { R11295 += 1, R11223 += 1 };
  s1 -> s6 [65, 65] { R11295 += 1, R11223 += 1 };
  s1 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R11295 += 1, R11223 += 1 };
  s1 -> s1 [91, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s4 [65, 65] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s7 [65, 65] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s1 [91, 107] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s8 [108, 108] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s2 -> s1 [109, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R11295 += 1, R11222 += 1, R11223 += 1 };
  s3 -> s4 [65, 65] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s2 [66, 65535] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s1 [91, 107] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s3 -> s1 [109, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s4 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s4 -> s4 [0, 65535] { R11295 += 1, R11223 += 1, R6616 += 1, R6617 += 1 };
  s4 -> s5 [91, 107] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s4 -> s9 [108, 108] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s4 -> s5 [109, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s5 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s5 [0, 65535] { R11295 += 1, R11223 += 1 };
  s5 -> s35 [0, 65535] { R11295 += 1 };
  s5 -> s5 [91, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R11295 += 1 };
  s8 -> s8 [0, 64] { R11295 += 1, R11223 += 1 };
  s8 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s8 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s8 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s8 -> s9 [65, 65] { R11295 += 1, R11223 += 1 };
  s8 -> s10 [65, 65] { R11295 += 1, R11223 += 1 };
  s8 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R11295 += 1, R11223 += 1 };
  s8 -> s1 [91, 110] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s8 -> s1 [112, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s9 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s9 -> s9 [0, 65535] { R11295 += 1, R11223 += 1 };
  s9 -> s5 [91, 110] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s9 -> s12 [111, 111] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s9 -> s5 [112, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R11295 += 1, R11223 += 1 };
  s11 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s12 [65, 65] { R11295 += 1, R11223 += 1 };
  s11 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s13 [65, 65] { R11295 += 1, R11223 += 1 };
  s11 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R11295 += 1, R11223 += 1 };
  s11 -> s1 [91, 98] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s11 -> s1 [100, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s12 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s12 -> s12 [0, 65535] { R11295 += 1, R11223 += 1 };
  s12 -> s5 [91, 98] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s12 -> s16 [99, 99] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s12 -> s5 [100, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R11295 += 1, R11223 += 1 };
  s14 -> s15 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s16 [65, 65] { R11295 += 1, R11223 += 1 };
  s14 -> s17 [65, 65] { R11295 += 1, R11223 += 1 };
  s14 -> s18 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R11295 += 1, R11223 += 1 };
  s14 -> s1 [91, 96] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s14 -> s1 [98, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s15 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s15 -> s15 [0, 65535] { R11295 += 1, R11223 += 1 };
  s15 -> s5 [91, 107] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s15 -> s21 [108, 108] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s15 -> s5 [109, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s16 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s16 -> s16 [0, 65535] { R11295 += 1, R11223 += 1 };
  s16 -> s5 [91, 96] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s16 -> s15 [97, 97] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s16 -> s5 [98, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R11295 += 1, R11223 += 1 };
  s19 -> s15 [65, 65] { R11295 += 1, R11223 += 1 };
  s19 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s18 [65, 65] { R11295 += 1, R11223 += 1 };
  s19 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R11295 += 1, R11223 += 1 };
  s19 -> s1 [91, 107] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s19 -> s1 [109, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R11295 += 1, R11223 += 1 };
  s20 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R11295 += 1, R11223 += 1 };
  s20 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s22 [65, 65] { R11295 += 1, R11223 += 1 };
  s20 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R11295 += 1, R11223 += 1 };
  s20 -> s1 [91, 103] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s20 -> s1 [105, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s21 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s21 -> s21 [0, 65535] { R11295 += 1, R11223 += 1 };
  s21 -> s5 [91, 103] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s21 -> s25 [104, 104] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s21 -> s5 [105, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R11295 += 1, R11223 += 1 };
  s23 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R11295 += 1, R11223 += 1 };
  s23 -> s25 [65, 65] { R11295 += 1, R11223 += 1 };
  s23 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R11295 += 1, R11223 += 1 };
  s23 -> s1 [91, 110] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s23 -> s1 [112, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s25 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s25 -> s25 [0, 65535] { R11295 += 1, R11223 += 1 };
  s25 -> s5 [91, 110] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s25 -> s28 [111, 111] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s25 -> s5 [112, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R11295 += 1, R11223 += 1 };
  s26 -> s27 [65, 65] { R11295 += 1, R11223 += 1 };
  s26 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s28 [65, 65] { R11295 += 1, R11223 += 1 };
  s26 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R11295 += 1, R11223 += 1 };
  s26 -> s1 [91, 114] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s26 -> s1 [116, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s28 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s28 -> s28 [0, 65535] { R11295 += 1, R11223 += 1 };
  s28 -> s5 [91, 114] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s28 -> s30 [115, 115] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s28 -> s5 [116, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R11295 += 1, R11223 += 1 };
  s29 -> s30 [65, 65] { R11295 += 1, R11223 += 1 };
  s29 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s31 [65, 65] { R11295 += 1, R11223 += 1 };
  s29 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R11295 += 1, R11223 += 1 };
  s29 -> s1 [91, 115] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s29 -> s1 [117, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s30 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R11295 += 1, R11223 += 1 };
  s30 -> s5 [91, 115] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s30 -> s5 [117, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s32 -> s1 [0, 64] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s32 -> s5 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s32 -> s6 [65, 65] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s32 -> s1 [66, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s32 -> s1 [91, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s33 -> s5 [0, 80] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s33 -> s5 [91, 65535] { R11295 += 1, R11223 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R11295 += 1 };
  accepting s34, s5, s6, s1, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s2 [0, 64] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s0 [0, 65535] { R11296 += 1, R11297 += 1 };
  s0 -> s3 [0, 65535] { R11297 += 1, R11224 += 1, R11225 += 1 };
  s0 -> s4 [65, 65] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s5 [65, 65] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s6 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s7 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s1 [66, 65535] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s2 [66, 65535] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s1 [0, 64] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s2 [0, 64] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s4 [65, 65] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s5 [65, 65] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s6 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s7 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s1 [66, 65535] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s2 [66, 65535] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s11 [0, 64] { R11297 += 1, R11225 += 1 };
  s2 -> s2 [0, 64] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s6 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s8 [65, 65] { R11297 += 1, R11225 += 1 };
  s2 -> s7 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s12 [65, 65] { R11297 += 1, R11225 += 1 };
  s2 -> s11 [66, 65535] { R11297 += 1, R11225 += 1 };
  s2 -> s2 [66, 65535] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s1 [0, 64] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s2 [0, 64] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s3 [0, 65535] { R11297 += 1, R11224 += 1, R11225 += 1 };
  s3 -> s4 [65, 65] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s5 [65, 65] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s6 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s7 [65, 65] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s1 [66, 65535] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s2 [66, 65535] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s4 -> s4 [0, 65535] { R11297 += 1, R11225 += 1, R10748 += 1, R10749 += 1 };
  s4 -> s7 [0, 65535] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s7 -> s8 [0, 65535] { R11297 += 1, R11225 += 1 };
  s7 -> s7 [0, 65535] { R11297 += 1, R11225 += 1, R10749 += 1, R10750 += 1 };
  s8 -> s9 [0, 65535] { R11297 += 1 };
  s8 -> s8 [0, 65535] { R11297 += 1, R11225 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R11297 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R11297 += 1, R11225 += 1 };
  s11 -> s11 [0, 65535] { R11297 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R11297 += 1, R11225 += 1 };
  s11 -> s12 [65, 65] { R11297 += 1, R11225 += 1 };
  s11 -> s11 [66, 65535] { R11297 += 1, R11225 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R11297 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s0 -> s2 [0, 65535] { R11299 += 1, R11226 += 1, R11227 += 1 };
  s0 -> s0 [0, 65535] { R11298 += 1, R11299 += 1 };
  s0 -> s3 [65, 65] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s0 -> s4 [65, 65] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s0 -> s1 [66, 65535] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s1 -> s1 [0, 64] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11299 += 1 };
  s1 -> s3 [65, 65] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s1 -> s4 [65, 65] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s1 -> s1 [66, 65535] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s2 -> s1 [0, 64] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11299 += 1, R11226 += 1, R11227 += 1 };
  s2 -> s3 [65, 65] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s2 -> s4 [65, 65] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s2 -> s1 [66, 65535] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s3 -> s3 [0, 65535] { R11299 += 1, R11227 += 1, R10754 += 1, R10755 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11299 += 1 };
  s4 -> s4 [0, 65535] { R11299 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11299 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R11301 += 1, R11229 += 1 };
  s0 -> s2 [0, 65535] { R11301 += 1, R11228 += 1, R11229 += 1 };
  s0 -> s0 [0, 65535] { R11300 += 1, R11301 += 1 };
  s0 -> s3 [65, 65] { R11301 += 1, R11229 += 1 };
  s0 -> s4 [65, 65] { R11301 += 1, R11229 += 1 };
  s0 -> s1 [66, 65535] { R11301 += 1, R11229 += 1 };
  s1 -> s1 [0, 64] { R11301 += 1, R11229 += 1 };
  s1 -> s1 [0, 65535] { R11301 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R11301 += 1, R11229 += 1 };
  s1 -> s4 [65, 65] { R11301 += 1, R11229 += 1 };
  s1 -> s1 [66, 65535] { R11301 += 1, R11229 += 1 };
  s2 -> s1 [0, 64] { R11301 += 1, R11229 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R11301 += 1, R11228 += 1, R11229 += 1 };
  s2 -> s3 [65, 65] { R11301 += 1, R11229 += 1 };
  s2 -> s4 [65, 65] { R11301 += 1, R11229 += 1 };
  s2 -> s1 [66, 65535] { R11301 += 1, R11229 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R11301 += 1 };
  s4 -> s5 [0, 65535] { R11301 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R11301 += 1, R11229 += 1 };
  s5 -> s5 [0, 65535] { R11301 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s0 -> s2 [0, 64] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s0 -> s0 [0, 65535] { R11302 += 1, R11303 += 1 };
  s0 -> s3 [0, 65535] { R11303 += 1, R11230 += 1, R11231 += 1 };
  s0 -> s4 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s0 -> s5 [65, 65] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s0 -> s6 [65, 65] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s0 -> s7 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s0 -> s2 [66, 79] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s0 -> s1 [66, 65535] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s0 -> s8 [80, 80] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s0 -> s2 [81, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s1 -> s1 [0, 64] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s1 -> s2 [0, 64] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s1 -> s4 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s1 -> s5 [65, 65] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s1 -> s6 [65, 65] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s1 -> s7 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s1 -> s2 [66, 79] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s1 -> s1 [66, 65535] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s1 -> s8 [80, 80] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s1 -> s2 [81, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s2 -> s2 [0, 64] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s2 -> s4 [65, 65] { R11303 += 1, R11231 += 1 };
  s2 -> s7 [65, 65] { R11303 += 1, R11231 += 1 };
  s2 -> s2 [66, 79] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s2 -> s2 [66, 65535] { R11303 += 1, R11231 += 1 };
  s2 -> s8 [80, 80] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s2 -> s2 [81, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s3 -> s1 [0, 64] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s3 -> s2 [0, 64] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s3 -> s3 [0, 65535] { R11303 += 1, R11230 += 1, R11231 += 1 };
  s3 -> s4 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s3 -> s5 [65, 65] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s3 -> s6 [65, 65] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s3 -> s7 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s3 -> s2 [66, 79] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s3 -> s1 [66, 65535] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s3 -> s8 [80, 80] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s3 -> s2 [81, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s6 -> s7 [0, 79] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s6 -> s6 [0, 65535] { R11303 += 1, R11231 += 1, R11168 += 1, R11169 += 1 };
  s6 -> s10 [80, 80] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s6 -> s7 [81, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s7 -> s7 [0, 79] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s7 -> s7 [0, 65535] { R11303 += 1, R11231 += 1 };
  s7 -> s10 [80, 80] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s7 -> s7 [81, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s8 -> s8 [0, 64] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R11303 += 1 };
  s8 -> s10 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s8 -> s11 [65, 65] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s8 -> s8 [66, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11303 += 1, R11231 += 1, R11169 += 1, R11170 += 1 };
  s10 -> s12 [0, 65535] { R11303 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11303 += 1 };
  s12 -> s12 [0, 65535] { R11303 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R11197 && R6 = R11303 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R11197 && R58 = 0 && R59 = R11197 && R60 = 0 && R61 = R11197 && R62 = 0 && R63 = R11303 && R64 = 0 && R65 = R11303 && R66 = 0 && R67 = R11303 && R11174 = 0 && R11175 = R11197 && R11176 = 0 && R11177 = R11197 && R11178 = 0 && R11179 = R11197 && R11180 = 0 && R11181 = R11197 && R11182 = 0 && R11183 = R11197 && R11184 = 0 && R11185 = R11197 && R11186 = 0 && R11187 = R11197 && R11188 = 0 && R11189 = R11197 && R11190 = 0 && R11191 = R11197 && R11192 = 0 && R11193 = R11197 && R11194 = 0 && R11195 = R11197 && R11196 = 0 && R11198 = 0 && R11199 = R11303 && R11200 = 0 && R11201 = R11303 && R11202 = 0 && R11203 = R11303 && R11204 = 0 && R11205 = R11303 && R11206 = 0 && R11207 = R11303 && R11208 = 0 && R11209 = R11303 && R11212 = 0 && R11213 = 0 && R11222 = 0 && R11223 = 0 && R11224 = 0 && R11225 = 0 && R11230 = 0 && R11231 = 0 && R11232 = 10 && R11233 = R11303 && R11234 = 10 && R11235 = R11303 && R11236 = 10 && R11237 = R11303 && R11238 = 10 && R11239 = R11303 && R11240 = 10 && R11241 = R11303 && R11242 = 10 && R11243 = R11303 && R11244 = 10 && R11245 = R11303 && R11246 = 10 && R11247 = R11303 && R11248 = 10 && R11249 = R11303 && R11250 = 10 && R11251 = R11303 && R11252 = 10 && R11253 = R11303 && R11254 = 10 && R11255 = R11303 && R11256 = 10 && R11257 = R11303 && R11258 = 10 && R11259 = R11303 && R11260 = 10 && R11261 = R11303 && R11262 = 10 && R11263 = R11303 && R11264 = 10 && R11265 = R11303 && R11266 = 10 && R11267 = R11303 && R11268 = 10 && R11269 = R11303 && R11270 = 10 && R11271 = R11303 && R11272 = 10 && R11273 = R11303 && R11274 = 10 && R11275 = R11303 && R11276 = 10 && R11277 = R11303 && R11278 = 10 && R11279 = R11303 && R11280 = 10 && R11281 = R11303 && R11282 = 10 && R11283 = R11303 && R11284 = 10 && R11285 = R11303 && R11286 = 10 && R11287 = R11303 && R11288 = 10 && R11289 = R11303 && R11290 = 10 && R11291 = R11303 && R11292 = 10 && R11293 = R11303 && R11294 = 10 && R11295 = R11303 && R11296 = 10 && R11297 = R11303 && R11298 = 10 && R11299 = R11303 && R11300 = 10 && R11301 = R11303 && R11302 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R10753 + R10750 + R11173 + R11170 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R11197 && 9 < R11303 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R10751 + R10748 = 0 && R10752 + R10749 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R10751 + R10748 != 0 || R407 + R406 + -1*R10752 + -1*R10749 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R11210 = 0 && R11211 = 0)) && (R34 = 0 || (R11214 = 0 && R11215 = 0)) && (R34 = 0 || (R11216 = 0 && R11217 = 0)) && (R34 = 0 || (R11218 = 0 && R11219 = 0)) && (R34 = 0 || (R11220 = 0 && R11221 = 0)) && (R34 = 0 || (R11226 = 0 && R11227 = 0)) && (R34 = 0 || (R11228 = 0 && R11229 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R10751 + R10748 = 0 || R407 + R406 < 1) && (R10759 + R10756 = 0 || (R10757 + R10754 = 0 && R10758 + R10755 = 0)) && (R10759 + R10756 = 0 || (R11171 + R11168 = 0 && R11172 + R11169 = 0));
// End of Parikh automata intersection problem
