// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R67, R68, R69, R7, R7312, R7313, R7314, R7315, R7316, R7317, R74, R7454, R7455, R7456, R7457, R7458, R7459, R7460, R7461, R7462, R7463, R7464, R7465, R7466, R7467, R7468, R7469, R7470, R7471, R7472, R7473, R7474, R7475, R7476, R7477, R7478, R7479, R7480, R7481, R7482, R7483, R7484, R7485, R7486, R7487, R7488, R7489, R7490, R7491, R7492, R7493, R7494, R7495, R7496, R7497, R7498, R7499, R75, R7500, R7501, R7502, R7503, R7504, R7505, R7506, R7507, R7508, R7509, R7510, R7511, R7512, R7513, R7514, R7515, R7516, R7517, R7518, R7519, R7520, R7521, R7522, R7523, R7524, R7525, R7526, R7527, R7528, R7529, R7530, R7531, R7532, R7533, R7534, R7535, R7536, R7537, R7538, R7539, R7540, R7541, R7542, R7543, R7544, R7545, R7546, R7547, R7548, R7549, R7550, R7551, R7552, R7553, R7554, R7555, R7556, R7557, R7558, R7559, R7560, R7561, R7562, R7563, R7564, R7565, R7566, R7567, R7568, R7569, R7570, R7571, R7572, R7573, R7574, R7575, R7576, R7577, R7578, R7579, R7580, R7581, R7582, R7583, R7584, R7585, R7586, R7587, R7588, R7589, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R7484 += 1, R7485 += 1 };
  s0 -> s1 [0, 65535] { R7485 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R7485 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R7487 += 1 };
  s0 -> s2 [0, 65535] { R7487 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R7486 += 1, R7487 += 1 };
  s0 -> s3 [65, 65] { R7487 += 1 };
  s0 -> s1 [66, 65535] { R7487 += 1 };
  s1 -> s1 [0, 64] { R7487 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7487 += 1 };
  s1 -> s1 [66, 65535] { R7487 += 1 };
  s2 -> s1 [0, 64] { R7487 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7487 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R7487 += 1 };
  s2 -> s1 [66, 65535] { R7487 += 1 };
  s3 -> s3 [0, 65535] { R7487 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7489 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R7488 += 1, R7489 += 1 };
  s0 -> s2 [0, 65535] { R7489 += 1, R68 += 1, R69 += 1 };
  s1 -> s4 [0, 65535] { R7489 += 1 };
  s1 -> s1 [0, 65535] { R7489 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7489 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7489 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7489 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R7490 += 1, R7491 += 1 };
  s0 -> s1 [0, 65535] { R7491 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7491 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R7492 += 1, R7493 += 1 };
  s0 -> s1 [0, 65535] { R7493 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R7493 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7493 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R7493 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535] { R7493 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7493 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R7493 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R7494 += 1, R7495 += 1 };
  s0 -> s1 [0, 65535] { R7495 += 1 };
  s1 -> s1 [0, 65535] { R7495 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R7519 += 1 };
  s0 -> s0 [0, 65535] { R7518 += 1, R7519 += 1 };
  s0 -> s1 [45, 45] { R7519 += 1 };
  s0 -> s2 [46, 46] { R7519 += 1 };
  s0 -> s1 [48, 62] { R7519 += 1 };
  s0 -> s3 [65, 65] { R7519 += 1 };
  s0 -> s1 [66, 65535] { R7519 += 1 };
  s1 -> s1 [0, 43] { R7519 += 1 };
  s1 -> s1 [45, 45] { R7519 += 1 };
  s1 -> s2 [46, 46] { R7519 += 1 };
  s1 -> s1 [48, 62] { R7519 += 1 };
  s1 -> s3 [65, 65] { R7519 += 1 };
  s1 -> s1 [66, 65535] { R7519 += 1 };
  s2 -> s1 [0, 43] { R7519 += 1 };
  s2 -> s1 [45, 45] { R7519 += 1 };
  s2 -> s2 [46, 46] { R7519 += 1 };
  s2 -> s1 [48, 62] { R7519 += 1 };
  s2 -> s3 [65, 65] { R7519 += 1 };
  s2 -> s1 [66, 114] { R7519 += 1 };
  s2 -> s8 [115, 115] { R7519 += 1 };
  s2 -> s1 [116, 65535] { R7519 += 1 };
  s3 -> s3 [0, 43] { R7519 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7519 += 1 };
  s3 -> s4 [46, 46] { R7519 += 1 };
  s3 -> s3 [48, 62] { R7519 += 1 };
  s3 -> s3 [65, 65535] { R7519 += 1 };
  s4 -> s3 [0, 43] { R7519 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7519 += 1 };
  s4 -> s4 [46, 46] { R7519 += 1 };
  s4 -> s3 [48, 62] { R7519 += 1 };
  s4 -> s3 [65, 114] { R7519 += 1 };
  s4 -> s5 [115, 115] { R7519 += 1 };
  s4 -> s3 [116, 65535] { R7519 += 1 };
  s5 -> s3 [0, 43] { R7519 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7519 += 1 };
  s5 -> s4 [46, 46] { R7519 += 1 };
  s5 -> s3 [48, 62] { R7519 += 1 };
  s5 -> s3 [65, 110] { R7519 += 1 };
  s5 -> s6 [111, 111] { R7519 += 1 };
  s5 -> s3 [112, 65535] { R7519 += 1 };
  s6 -> s3 [0, 43] { R7519 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7519 += 1 };
  s6 -> s4 [46, 46] { R7519 += 1 };
  s6 -> s3 [48, 62] { R7519 += 1 };
  s6 -> s3 [65, 98] { R7519 += 1 };
  s6 -> s7 [99, 99] { R7519 += 1 };
  s6 -> s3 [100, 65535] { R7519 += 1 };
  s7 -> s3 [0, 43] { R7519 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7519 += 1 };
  s7 -> s4 [46, 46] { R7519 += 1 };
  s7 -> s3 [48, 62] { R7519 += 1 };
  s7 -> s3 [65, 106] { R7519 += 1 };
  s7 -> s3 [108, 65535] { R7519 += 1 };
  s8 -> s1 [0, 43] { R7519 += 1 };
  s8 -> s1 [45, 45] { R7519 += 1 };
  s8 -> s2 [46, 46] { R7519 += 1 };
  s8 -> s1 [48, 62] { R7519 += 1 };
  s8 -> s3 [65, 65] { R7519 += 1 };
  s8 -> s1 [66, 110] { R7519 += 1 };
  s8 -> s9 [111, 111] { R7519 += 1 };
  s8 -> s1 [112, 65535] { R7519 += 1 };
  s9 -> s1 [0, 43] { R7519 += 1 };
  s9 -> s1 [45, 45] { R7519 += 1 };
  s9 -> s2 [46, 46] { R7519 += 1 };
  s9 -> s1 [48, 62] { R7519 += 1 };
  s9 -> s3 [65, 65] { R7519 += 1 };
  s9 -> s1 [66, 98] { R7519 += 1 };
  s9 -> s10 [99, 99] { R7519 += 1 };
  s9 -> s1 [100, 65535] { R7519 += 1 };
  s10 -> s1 [0, 43] { R7519 += 1 };
  s10 -> s1 [45, 45] { R7519 += 1 };
  s10 -> s2 [46, 46] { R7519 += 1 };
  s10 -> s1 [48, 62] { R7519 += 1 };
  s10 -> s3 [65, 65] { R7519 += 1 };
  s10 -> s1 [66, 106] { R7519 += 1 };
  s10 -> s1 [108, 65535] { R7519 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R7521 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R7520 += 1, R7521 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7521 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R7523 += 1 };
  s0 -> s2 [0, 65535] { R7523 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R7522 += 1, R7523 += 1 };
  s0 -> s3 [58, 58] { R7523 += 1 };
  s0 -> s1 [59, 65535] { R7523 += 1 };
  s1 -> s1 [0, 57] { R7523 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7523 += 1 };
  s1 -> s1 [59, 65535] { R7523 += 1 };
  s2 -> s1 [0, 57] { R7523 += 1 };
  s2 -> s2 [0, 65535] { R7523 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7523 += 1 };
  s2 -> s1 [59, 65535] { R7523 += 1 };
  s3 -> s3 [0, 65535] { R7523 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R7525 += 1 };
  s0 -> s2 [0, 65535] { R7525 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R7524 += 1, R7525 += 1 };
  s0 -> s3 [43, 43] { R7525 += 1 };
  s0 -> s1 [44, 65535] { R7525 += 1 };
  s1 -> s1 [0, 42] { R7525 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R7525 += 1 };
  s1 -> s1 [44, 65535] { R7525 += 1 };
  s2 -> s1 [0, 42] { R7525 += 1 };
  s2 -> s2 [0, 65535] { R7525 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R7525 += 1 };
  s2 -> s1 [44, 65535] { R7525 += 1 };
  s3 -> s3 [0, 65535] { R7525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R7527 += 1 };
  s0 -> s2 [0, 65535] { R7527 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R7526 += 1, R7527 += 1 };
  s0 -> s3 [65, 65] { R7527 += 1 };
  s0 -> s1 [66, 65535] { R7527 += 1 };
  s1 -> s1 [0, 64] { R7527 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7527 += 1 };
  s1 -> s1 [66, 65535] { R7527 += 1 };
  s2 -> s1 [0, 64] { R7527 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7527 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R7527 += 1 };
  s2 -> s1 [66, 65535] { R7527 += 1 };
  s3 -> s3 [0, 65535] { R7527 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R7529 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R7529 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R7528 += 1, R7529 += 1 };
  s0 -> s3 [91, 91] { R7529 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R7529 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R7529 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7529 += 1 };
  s2 -> s1 [0, 90] { R7529 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7529 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R7529 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R7529 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R7529 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7529 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7531 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R7530 += 1, R7531 += 1 };
  s0 -> s2 [0, 65535] { R7531 += 1, R41 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R7531 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7531 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7531 += 1 };
  s2 -> s2 [0, 65535] { R7531 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7531 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R7532 += 1, R7533 += 1 };
  s0 -> s1 [0, 65535] { R7533 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R7533 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7533 += 1, R56 += 1, R57 += 1 };
  s1 -> s2 [0, 65535] { R7533 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7533 += 1 };
  s2 -> s2 [0, 65535] { R7533 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7533 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R7535 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R7534 += 1, R7535 += 1 };
  s0 -> s2 [0, 65535] { R7535 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R7535 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R7535 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R7535 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R7535 += 1 };
  s2 -> s1 [0, 107] { R7535 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7535 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R7535 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R7535 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R7535 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7535 += 1 };
  s3 -> s5 [111, 111] { R7535 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R7535 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R7535 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7535 += 1 };
  s5 -> s6 [99, 99] { R7535 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R7535 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R7535 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R7535 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R7535 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R7535 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R7535 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R7535 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R7535 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R7535 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R7535 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R7535 += 1 };
  s8 -> s9 [104, 104] { R7535 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R7535 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R7535 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R7535 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R7535 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R7535 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R7535 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R7535 += 1 };
  s10 -> s11 [115, 115] { R7535 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R7535 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R7535 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R7535 += 1 };
  s11 -> s12 [116, 116] { R7535 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R7535 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R7535 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R7535 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R7537 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R7537 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R7536 += 1, R7537 += 1 };
  s1 -> s1 [0, 65535] { R7537 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R7537 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7537 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R7537 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7537 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R7538 += 1, R7539 += 1 };
  s0 -> s1 [0, 65535] { R7539 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R7539 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7539 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R7539 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7539 += 1 };
  s2 -> s2 [0, 65535] { R7539 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7539 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R7540 += 1, R7541 += 1 };
  s0 -> s1 [0, 65535] { R7541 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R7541 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R7543 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R7542 += 1, R7543 += 1 };
  s0 -> s2 [0, 65535] { R7543 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R7543 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R7543 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R7543 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R7543 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R7543 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R7543 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R7543 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R7543 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R7543 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7543 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R7543 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R7543 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R7543 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R7543 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7543 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535] { R7543 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7543 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R7545 += 1, R7461 += 1 };
  s0 -> s0 [0, 65535] { R7544 += 1, R7545 += 1 };
  s0 -> s2 [0, 65535] { R7545 += 1, R7460 += 1, R7461 += 1 };
  s0 -> s1 [66, 65535] { R7545 += 1, R7461 += 1 };
  s1 -> s1 [0, 64] { R7545 += 1, R7461 += 1 };
  s1 -> s1 [0, 65535] { R7545 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R7545 += 1, R7461 += 1 };
  s2 -> s1 [0, 64] { R7545 += 1, R7461 += 1 };
  s2 -> s2 [0, 65535] { R7545 += 1, R7460 += 1, R7461 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R7545 += 1, R7461 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R7547 += 1, R7463 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R7547 += 1, R7462 += 1, R7463 += 1 };
  s0 -> s0 [0, 65535] { R7546 += 1, R7547 += 1 };
  s1 -> s1 [0, 65535] { R7547 += 1, R7463 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7547 += 1 };
  s2 -> s1 [0, 65535] { R7547 += 1, R7463 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R7547 += 1, R7462 += 1, R7463 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7547 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R7549 += 1, R7465 += 1 };
  s0 -> s0 [0, 65535] { R7548 += 1, R7549 += 1 };
  s0 -> s2 [0, 65535] { R7549 += 1, R7464 += 1, R7465 += 1 };
  s0 -> s1 [80, 65535] { R7549 += 1, R7465 += 1 };
  s1 -> s1 [0, 65] { R7549 += 1, R7465 += 1 };
  s1 -> s1 [0, 65535] { R7549 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7549 += 1, R7465 += 1 };
  s2 -> s1 [0, 65] { R7549 += 1, R7465 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7549 += 1, R7464 += 1, R7465 += 1 };
  s2 -> s1 [80, 65535] { R7549 += 1, R7465 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R7550 += 1, R7551 += 1 };
  s0 -> s1 [0, 65535] { R7551 += 1, R7467 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R7551 += 1, R7466 += 1, R7467 += 1 };
  s1 -> s1 [0, 65535] { R7551 += 1, R7467 += 1, R407 += 1 };
  s1 -> s4 [0, 65535] { R7551 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7551 += 1, R7467 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R7551 += 1, R7466 += 1, R7467 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7551 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R7553 += 1, R7469 += 1 };
  s0 -> s2 [0, 65535] { R7553 += 1, R7469 += 1, R409 += 1 };
  s0 -> s3 [0, 65535] { R7553 += 1, R7468 += 1, R7469 += 1 };
  s0 -> s0 [0, 65535] { R7552 += 1, R7553 += 1 };
  s0 -> s1 [81, 65535] { R7553 += 1, R7469 += 1 };
  s1 -> s1 [0, 79] { R7553 += 1, R7469 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7553 += 1 };
  s1 -> s1 [81, 65535] { R7553 += 1, R7469 += 1 };
  s2 -> s1 [0, 79] { R7553 += 1, R7469 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7553 += 1, R7469 += 1, R409 += 1 };
  s2 -> s5 [0, 65535] { R7553 += 1 };
  s2 -> s1 [81, 65535] { R7553 += 1, R7469 += 1 };
  s3 -> s1 [0, 79] { R7553 += 1, R7469 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7553 += 1, R7469 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R7553 += 1, R7468 += 1, R7469 += 1 };
  s3 -> s1 [81, 65535] { R7553 += 1, R7469 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7553 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R7555 += 1, R7471 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R7555 += 1, R7471 += 1, R412 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R7554 += 1, R7555 += 1 };
  s0 -> s3 [0, 65535] { R7555 += 1, R7470 += 1, R7471 += 1 };
  s0 -> s1 [81, 65535] { R7555 += 1, R7471 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R7555 += 1, R7471 += 1, R413 += 1 };
  s1 -> s5 [0, 65535] { R7555 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7555 += 1, R7471 += 1 };
  s1 -> s1 [81, 65535] { R7555 += 1, R7471 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R7555 += 1, R7471 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R7555 += 1, R7471 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535] { R7555 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R7555 += 1, R7471 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R7555 += 1, R7471 += 1, R413 += 1 };
  s3 -> s2 [0, 65535] { R7555 += 1, R7471 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R7555 += 1, R7470 += 1, R7471 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R7555 += 1, R7471 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7555 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R7557 += 1, R7473 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R7557 += 1, R7472 += 1, R7473 += 1 };
  s0 -> s3 [0, 65535] { R7557 += 1, R7473 += 1, R418 += 1, R419 += 1 };
  s0 -> s0 [0, 65535] { R7556 += 1, R7557 += 1 };
  s1 -> s1 [0, 65535] { R7557 += 1, R7473 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [0, 65535] { R7557 += 1 };
  s1 -> s3 [0, 65535] { R7557 += 1, R7473 += 1, R418 += 1, R419 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R7557 += 1, R7473 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R7557 += 1, R7472 += 1, R7473 += 1 };
  s2 -> s3 [0, 65535] { R7557 += 1, R7473 += 1, R418 += 1, R419 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R7557 += 1 };
  s3 -> s5 [0, 65535] { R7557 += 1, R7473 += 1 };
  s3 -> s3 [0, 65535] { R7557 += 1, R7473 += 1, R418 += 1, R419 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7557 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R7557 += 1 };
  s5 -> s5 [0, 65535] { R7557 += 1, R7473 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R7559 += 1, R7475 += 1, R6619 += 1 };
  s0 -> s2 [0, 65535] { R7559 += 1, R7474 += 1, R7475 += 1 };
  s0 -> s0 [0, 65535] { R7558 += 1, R7559 += 1 };
  s0 -> s1 [0, 65535] { R7559 += 1, R7475 += 1 };
  s0 -> s1 [91, 65535] { R7559 += 1, R7475 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R7559 += 1, R7475 += 1, R6619 += 1 };
  s1 -> s4 [0, 65535] { R7559 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7559 += 1, R7475 += 1 };
  s1 -> s1 [91, 65535] { R7559 += 1, R7475 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R7559 += 1, R7475 += 1, R6619 += 1 };
  s2 -> s2 [0, 65535] { R7559 += 1, R7474 += 1, R7475 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7559 += 1, R7475 += 1 };
  s2 -> s1 [91, 65535] { R7559 += 1, R7475 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7559 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R7561 += 1, R7477 += 1, R6623 += 1, R6624 += 1 };
  s0 -> s2 [0, 65535] { R7561 += 1, R7476 += 1, R7477 += 1 };
  s0 -> s3 [0, 65535] { R7561 += 1, R7477 += 1, R6624 += 1, R6625 += 1 };
  s0 -> s0 [0, 65535] { R7560 += 1, R7561 += 1 };
  s1 -> s4 [0, 65535] { R7561 += 1 };
  s1 -> s1 [0, 65535] { R7561 += 1, R7477 += 1, R6623 += 1, R6624 += 1 };
  s1 -> s3 [0, 65535] { R7561 += 1, R7477 += 1, R6624 += 1, R6625 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R7561 += 1, R7477 += 1, R6623 += 1, R6624 += 1 };
  s2 -> s2 [0, 65535] { R7561 += 1, R7476 += 1, R7477 += 1 };
  s2 -> s3 [0, 65535] { R7561 += 1, R7477 += 1, R6624 += 1, R6625 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R7561 += 1 };
  s3 -> s5 [0, 65535] { R7561 += 1, R7477 += 1 };
  s3 -> s3 [0, 65535] { R7561 += 1, R7477 += 1, R6624 += 1, R6625 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7561 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R7561 += 1 };
  s5 -> s5 [0, 65535] { R7561 += 1, R7477 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R7563 += 1, R7479 += 1 };
  s0 -> s2 [0, 65535] { R7563 += 1, R7479 += 1, R7316 += 1, R7317 += 1 };
  s0 -> s0 [0, 65535] { R7562 += 1, R7563 += 1 };
  s0 -> s3 [0, 65535] { R7563 += 1, R7478 += 1, R7479 += 1 };
  s1 -> s1 [0, 65535] { R7563 += 1, R7479 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7563 += 1 };
  s2 -> s1 [0, 65535] { R7563 += 1, R7479 += 1 };
  s2 -> s2 [0, 65535] { R7563 += 1, R7479 += 1, R7316 += 1, R7317 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7563 += 1 };
  s3 -> s1 [0, 65535] { R7563 += 1, R7479 += 1 };
  s3 -> s2 [0, 65535] { R7563 += 1, R7479 += 1, R7316 += 1, R7317 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7563 += 1, R7478 += 1, R7479 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7563 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R7565 += 1, R7481 += 1 };
  s0 -> s2 [0, 65535] { R7565 += 1, R7480 += 1, R7481 += 1 };
  s0 -> s0 [0, 65535] { R7564 += 1, R7565 += 1 };
  s1 -> s1 [0, 65535] { R7565 += 1, R7481 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7565 += 1 };
  s2 -> s1 [0, 65535] { R7565 += 1, R7481 += 1 };
  s2 -> s2 [0, 65535] { R7565 += 1, R7480 += 1, R7481 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7565 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s0 -> s1 [0, 65535] { R7567 += 1, R7483 += 1 };
  s0 -> s0 [0, 65535] { R7566 += 1, R7567 += 1 };
  s0 -> s2 [0, 65535] { R7567 += 1, R7482 += 1, R7483 += 1 };
  s0 -> s3 [80, 80] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s0 -> s4 [80, 80] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s0 -> s1 [81, 65535] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s1 -> s1 [0, 79] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s1 -> s1 [0, 65535] { R7567 += 1, R7483 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R7567 += 1 };
  s1 -> s3 [80, 80] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s1 -> s4 [80, 80] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s1 -> s1 [81, 65535] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s2 -> s1 [0, 79] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s2 -> s1 [0, 65535] { R7567 += 1, R7483 += 1 };
  s2 -> s2 [0, 65535] { R7567 += 1, R7482 += 1, R7483 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [80, 80] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s2 -> s4 [80, 80] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s2 -> s1 [81, 65535] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s3 -> s3 [0, 65535] { R7567 += 1, R7483 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R7567 += 1 };
  s4 -> s5 [0, 65535] { R7567 += 1, R7483 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7567 += 1, R7483 += 1, R7458 += 1, R7459 += 1 };
  s4 -> s7 [0, 65535] { R7567 += 1 };
  s5 -> s5 [0, 65535] { R7567 += 1, R7483 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R7567 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7567 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R7569 += 1, R7496 += 1, R7497 += 1 };
  s0 -> s2 [0, 65535] { R7569 += 1, R7497 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R7568 += 1, R7569 += 1 };
  s1 -> s1 [0, 65535] { R7569 += 1, R7496 += 1, R7497 += 1 };
  s1 -> s2 [0, 65535] { R7569 += 1, R7497 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7569 += 1, R7497 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R7569 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7569 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R7571 += 1, R7499 += 1 };
  s0 -> s2 [0, 65535] { R7571 += 1, R7498 += 1, R7499 += 1 };
  s0 -> s0 [0, 65535] { R7570 += 1, R7571 += 1 };
  s0 -> s3 [65, 65] { R7571 += 1, R7499 += 1 };
  s0 -> s4 [65, 65] { R7571 += 1, R7499 += 1 };
  s0 -> s5 [80, 80] { R7571 += 1, R7499 += 1 };
  s0 -> s1 [81, 65535] { R7571 += 1, R7499 += 1 };
  s1 -> s1 [0, 64] { R7571 += 1, R7499 += 1 };
  s1 -> s3 [65, 65] { R7571 += 1, R7499 += 1 };
  s1 -> s4 [65, 65] { R7571 += 1, R7499 += 1 };
  s1 -> s5 [80, 80] { R7571 += 1, R7499 += 1 };
  s1 -> s1 [81, 65535] { R7571 += 1, R7499 += 1 };
  s2 -> s1 [0, 64] { R7571 += 1, R7499 += 1 };
  s2 -> s2 [0, 65535] { R7571 += 1, R7498 += 1, R7499 += 1 };
  s2 -> s3 [65, 65] { R7571 += 1, R7499 += 1 };
  s2 -> s4 [65, 65] { R7571 += 1, R7499 += 1 };
  s2 -> s5 [80, 80] { R7571 += 1, R7499 += 1 };
  s2 -> s1 [81, 65535] { R7571 += 1, R7499 += 1 };
  s4 -> s4 [0, 65] { R7571 += 1, R7499 += 1 };
  s4 -> s7 [80, 80] { R7571 += 1, R7499 += 1 };
  s4 -> s4 [81, 65535] { R7571 += 1, R7499 += 1 };
  s5 -> s5 [0, 64] { R7571 += 1, R7499 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7571 += 1 };
  s5 -> s7 [65, 65] { R7571 += 1, R7499 += 1 };
  s5 -> s8 [65, 65] { R7571 += 1, R7499 += 1 };
  s5 -> s5 [80, 65535] { R7571 += 1, R7499 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7571 += 1, R7499 += 1 };
  s7 -> s7 [0, 65535] { R7571 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R7571 += 1, R7499 += 1 };
  s8 -> s8 [0, 65535] { R7571 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R7573 += 1, R7501 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R7573 += 1, R7500 += 1, R7501 += 1 };
  s0 -> s0 [0, 65535] { R7572 += 1, R7573 += 1 };
  s0 -> s3 [65, 65] { R7573 += 1, R7501 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R7573 += 1, R7501 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R7573 += 1, R7501 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R7573 += 1, R7501 += 1, R406 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7573 += 1 };
  s1 -> s3 [65, 65] { R7573 += 1, R7501 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R7573 += 1, R7501 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R7573 += 1, R7501 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R7573 += 1, R7501 += 1, R406 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7573 += 1, R7500 += 1, R7501 += 1 };
  s2 -> s3 [65, 65] { R7573 += 1, R7501 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R7573 += 1, R7501 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R7573 += 1, R7501 += 1, R406 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7573 += 1 };
  s4 -> s5 [0, 65535] { R7573 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7573 += 1, R7501 += 1, R406 += 1 };
  s5 -> s5 [0, 65535] { R7573 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R7575 += 1, R7503 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R7575 += 1, R7502 += 1, R7503 += 1 };
  s0 -> s0 [0, 65535] { R7574 += 1, R7575 += 1 };
  s0 -> s3 [65, 65] { R7575 += 1, R7503 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R7575 += 1, R7503 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R7575 += 1, R7503 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R7575 += 1, R7503 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R7575 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7575 += 1, R7503 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R7575 += 1, R7503 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R7575 += 1, R7503 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R7575 += 1, R7503 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R7575 += 1, R7502 += 1, R7503 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7575 += 1, R7503 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R7575 += 1, R7503 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R7575 += 1, R7503 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R7575 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7575 += 1 };
  s4 -> s4 [0, 65535] { R7575 += 1, R7503 += 1, R408 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7575 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R7577 += 1, R7504 += 1, R7505 += 1 };
  s0 -> s0 [0, 65535] { R7576 += 1, R7577 += 1 };
  s0 -> s3 [65, 65] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R7577 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R7577 += 1, R7504 += 1, R7505 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R7577 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7577 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7577 += 1, R7505 += 1, R410 += 1, R411 += 1 };
  s5 -> s5 [0, 65535] { R7577 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R7578 += 1, R7579 += 1 };
  s0 -> s2 [0, 65535] { R7579 += 1, R7506 += 1, R7507 += 1 };
  s0 -> s3 [65, 65] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7579 += 1 };
  s1 -> s3 [65, 65] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7579 += 1, R7506 += 1, R7507 += 1 };
  s2 -> s3 [65, 65] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535] { R7579 += 1 };
  s3 -> s3 [0, 65535] { R7579 += 1, R7507 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7579 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7579 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s0 [0, 65535] { R7580 += 1, R7581 += 1 };
  s0 -> s3 [0, 65535] { R7581 += 1, R7508 += 1, R7509 += 1 };
  s0 -> s4 [65, 65] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s0 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s0 -> s2 [66, 65535] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s1 [91, 107] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s0 -> s1 [109, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s1 [0, 65535] { R7581 += 1 };
  s1 -> s6 [65, 65] { R7581 += 1, R7509 += 1 };
  s1 -> s7 [65, 65] { R7581 += 1, R7509 += 1 };
  s1 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R7581 += 1, R7509 += 1 };
  s1 -> s1 [91, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s4 [65, 65] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s5 [65, 65] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s1 [91, 107] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s8 [108, 108] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s2 -> s1 [109, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R7581 += 1, R7508 += 1, R7509 += 1 };
  s3 -> s4 [65, 65] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s2 [66, 65535] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s1 [91, 107] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s3 -> s1 [109, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s5 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s5 -> s5 [0, 65535] { R7581 += 1, R7509 += 1, R6616 += 1, R6617 += 1 };
  s5 -> s7 [91, 107] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s5 -> s9 [108, 108] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s5 -> s7 [109, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R7581 += 1 };
  s7 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s35 [0, 65535] { R7581 += 1 };
  s7 -> s7 [0, 65535] { R7581 += 1, R7509 += 1 };
  s7 -> s7 [91, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s8 [0, 64] { R7581 += 1, R7509 += 1 };
  s8 -> s9 [65, 65] { R7581 += 1, R7509 += 1 };
  s8 -> s10 [65, 65] { R7581 += 1, R7509 += 1 };
  s8 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R7581 += 1, R7509 += 1 };
  s8 -> s1 [91, 110] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s8 -> s1 [112, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s9 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s9 -> s9 [0, 65535] { R7581 += 1, R7509 += 1 };
  s9 -> s7 [91, 110] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s9 -> s13 [111, 111] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s9 -> s7 [112, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R7581 += 1, R7509 += 1 };
  s11 -> s12 [65, 65] { R7581 += 1, R7509 += 1 };
  s11 -> s13 [65, 65] { R7581 += 1, R7509 += 1 };
  s11 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R7581 += 1, R7509 += 1 };
  s11 -> s1 [91, 98] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s11 -> s1 [100, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s13 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s13 -> s13 [0, 65535] { R7581 += 1, R7509 += 1 };
  s13 -> s7 [91, 98] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s13 -> s18 [99, 99] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s13 -> s7 [100, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R7581 += 1, R7509 += 1 };
  s14 -> s15 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s16 [65, 65] { R7581 += 1, R7509 += 1 };
  s14 -> s17 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s18 [65, 65] { R7581 += 1, R7509 += 1 };
  s14 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R7581 += 1, R7509 += 1 };
  s14 -> s1 [91, 96] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s14 -> s1 [98, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s15 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s15 -> s15 [0, 65535] { R7581 += 1, R7509 += 1 };
  s15 -> s7 [91, 107] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s15 -> s22 [108, 108] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s15 -> s7 [109, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s18 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s18 -> s18 [0, 65535] { R7581 += 1, R7509 += 1 };
  s18 -> s7 [91, 96] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s18 -> s15 [97, 97] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s18 -> s7 [98, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R7581 += 1, R7509 += 1 };
  s19 -> s15 [65, 65] { R7581 += 1, R7509 += 1 };
  s19 -> s17 [65, 65] { R7581 += 1, R7509 += 1 };
  s19 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R7581 += 1, R7509 += 1 };
  s19 -> s1 [91, 107] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s19 -> s1 [109, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R7581 += 1, R7509 += 1 };
  s20 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R7581 += 1, R7509 += 1 };
  s20 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s22 [65, 65] { R7581 += 1, R7509 += 1 };
  s20 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R7581 += 1, R7509 += 1 };
  s20 -> s1 [91, 103] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s20 -> s1 [105, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s22 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s22 -> s22 [0, 65535] { R7581 += 1, R7509 += 1 };
  s22 -> s7 [91, 103] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s22 -> s24 [104, 104] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s22 -> s7 [105, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R7581 += 1, R7509 += 1 };
  s23 -> s24 [65, 65] { R7581 += 1, R7509 += 1 };
  s23 -> s25 [65, 65] { R7581 += 1, R7509 += 1 };
  s23 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R7581 += 1, R7509 += 1 };
  s23 -> s1 [91, 110] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s23 -> s1 [112, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s24 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s24 -> s24 [0, 65535] { R7581 += 1, R7509 += 1 };
  s24 -> s7 [91, 110] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s24 -> s28 [111, 111] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s24 -> s7 [112, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R7581 += 1, R7509 += 1 };
  s26 -> s27 [65, 65] { R7581 += 1, R7509 += 1 };
  s26 -> s28 [65, 65] { R7581 += 1, R7509 += 1 };
  s26 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R7581 += 1, R7509 += 1 };
  s26 -> s1 [91, 114] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s26 -> s1 [116, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s28 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s28 -> s28 [0, 65535] { R7581 += 1, R7509 += 1 };
  s28 -> s7 [91, 114] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s28 -> s30 [115, 115] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s28 -> s7 [116, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R7581 += 1, R7509 += 1 };
  s29 -> s30 [65, 65] { R7581 += 1, R7509 += 1 };
  s29 -> s31 [65, 65] { R7581 += 1, R7509 += 1 };
  s29 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R7581 += 1, R7509 += 1 };
  s29 -> s1 [91, 115] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s29 -> s1 [117, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s30 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R7581 += 1, R7509 += 1 };
  s30 -> s7 [91, 115] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s30 -> s7 [117, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s32 -> s1 [0, 64] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s32 -> s6 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s32 -> s7 [65, 65] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s32 -> s1 [66, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s32 -> s1 [91, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s33 -> s7 [0, 80] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s33 -> s7 [91, 65535] { R7581 += 1, R7509 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R7581 += 1 };
  accepting s34, s6, s1, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s0 -> s2 [0, 65535] { R7583 += 1, R7510 += 1, R7511 += 1 };
  s0 -> s0 [0, 65535] { R7582 += 1, R7583 += 1 };
  s0 -> s3 [65, 65] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s0 -> s4 [65, 65] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s0 -> s1 [66, 65535] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s1 [0, 64] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7583 += 1 };
  s1 -> s3 [65, 65] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s4 [65, 65] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s1 [66, 65535] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s1 [0, 64] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7583 += 1, R7510 += 1, R7511 += 1 };
  s2 -> s3 [65, 65] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s4 [65, 65] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s1 [66, 65535] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7583 += 1 };
  s4 -> s5 [0, 65535] { R7583 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7583 += 1, R7511 += 1, R6620 += 1, R6621 += 1 };
  s5 -> s5 [0, 65535] { R7583 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s0 -> s2 [0, 64] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s0 -> s0 [0, 65535] { R7584 += 1, R7585 += 1 };
  s0 -> s3 [0, 65535] { R7585 += 1, R7512 += 1, R7513 += 1 };
  s0 -> s4 [65, 65] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s0 -> s5 [65, 65] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s0 -> s6 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s0 -> s7 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s0 -> s1 [66, 65535] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s0 -> s2 [66, 65535] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s1 -> s1 [0, 64] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s1 -> s2 [0, 64] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s1 -> s4 [65, 65] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s1 -> s5 [65, 65] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s1 -> s6 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s1 -> s7 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s1 -> s1 [66, 65535] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s1 -> s2 [66, 65535] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s2 -> s2 [0, 64] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s2 -> s2 [0, 65535] { R7585 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s2 -> s7 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s2 -> s2 [66, 65535] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s3 -> s1 [0, 64] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s3 -> s2 [0, 64] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s3 -> s3 [0, 65535] { R7585 += 1, R7512 += 1, R7513 += 1 };
  s3 -> s4 [65, 65] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s3 -> s5 [65, 65] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s3 -> s6 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s3 -> s7 [65, 65] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s3 -> s1 [66, 65535] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s3 -> s2 [66, 65535] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s5 -> s5 [0, 65535] { R7585 += 1, R7513 += 1, R7312 += 1, R7313 += 1 };
  s5 -> s6 [0, 65535] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s6 -> s9 [0, 65535] { R7585 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R7585 += 1, R7513 += 1, R7313 += 1, R7314 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7585 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R7585 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R7587 += 1, R7515 += 1 };
  s0 -> s0 [0, 65535] { R7586 += 1, R7587 += 1 };
  s0 -> s2 [0, 65535] { R7587 += 1, R7514 += 1, R7515 += 1 };
  s0 -> s3 [65, 65] { R7587 += 1, R7515 += 1 };
  s0 -> s4 [65, 65] { R7587 += 1, R7515 += 1 };
  s0 -> s1 [66, 65535] { R7587 += 1, R7515 += 1 };
  s1 -> s1 [0, 64] { R7587 += 1, R7515 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7587 += 1 };
  s1 -> s3 [65, 65] { R7587 += 1, R7515 += 1 };
  s1 -> s4 [65, 65] { R7587 += 1, R7515 += 1 };
  s1 -> s1 [66, 65535] { R7587 += 1, R7515 += 1 };
  s2 -> s1 [0, 64] { R7587 += 1, R7515 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7587 += 1, R7514 += 1, R7515 += 1 };
  s2 -> s3 [65, 65] { R7587 += 1, R7515 += 1 };
  s2 -> s4 [65, 65] { R7587 += 1, R7515 += 1 };
  s2 -> s1 [66, 65535] { R7587 += 1, R7515 += 1 };
  s3 -> s3 [0, 65535] { R7587 += 1, R7515 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7587 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7587 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7587 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s0 -> s2 [0, 64] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s0 -> s3 [0, 65535] { R7589 += 1, R7516 += 1, R7517 += 1 };
  s0 -> s0 [0, 65535] { R7588 += 1, R7589 += 1 };
  s0 -> s4 [65, 65] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s0 -> s5 [65, 65] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s0 -> s6 [65, 65] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s0 -> s7 [65, 65] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s0 -> s2 [66, 79] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s0 -> s1 [66, 65535] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s0 -> s2 [81, 65535] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s1 -> s1 [0, 64] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s1 -> s2 [0, 64] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s1 -> s4 [65, 65] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s1 -> s5 [65, 65] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s1 -> s6 [65, 65] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s1 -> s7 [65, 65] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s1 -> s2 [66, 79] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s1 -> s1 [66, 65535] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s1 -> s2 [81, 65535] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s2 -> s2 [0, 64] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s2 -> s2 [0, 65535] { R7589 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R7589 += 1, R7517 += 1 };
  s2 -> s7 [65, 65] { R7589 += 1, R7517 += 1 };
  s2 -> s2 [66, 79] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s2 -> s2 [66, 65535] { R7589 += 1, R7517 += 1 };
  s2 -> s2 [81, 65535] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s3 -> s1 [0, 64] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s3 -> s2 [0, 64] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s3 -> s3 [0, 65535] { R7589 += 1, R7516 += 1, R7517 += 1 };
  s3 -> s4 [65, 65] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s3 -> s5 [65, 65] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s3 -> s6 [65, 65] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s3 -> s7 [65, 65] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s3 -> s2 [66, 79] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s3 -> s1 [66, 65535] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s3 -> s2 [81, 65535] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s4 -> s4 [0, 65535] { R7589 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s7 [0, 79] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s6 -> s6 [0, 65535] { R7589 += 1, R7517 += 1, R7454 += 1, R7455 += 1 };
  s6 -> s7 [81, 65535] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s7 -> s7 [0, 79] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s7 -> s8 [0, 65535] { R7589 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R7589 += 1, R7517 += 1 };
  s7 -> s7 [81, 65535] { R7589 += 1, R7517 += 1, R7455 += 1, R7456 += 1 };
  s8 -> s8 [0, 65535] { R7589 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R7483 && R6 = R7589 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R7483 && R58 = 0 && R59 = R7483 && R60 = 0 && R61 = R7483 && R62 = 0 && R63 = R7589 && R64 = 0 && R65 = R7589 && R66 = 0 && R67 = R7589 && R7460 = 0 && R7461 = R7483 && R7462 = 0 && R7463 = R7483 && R7464 = 0 && R7465 = R7483 && R7466 = 0 && R7467 = R7483 && R7468 = 0 && R7469 = R7483 && R7470 = 0 && R7471 = R7483 && R7472 = 0 && R7473 = R7483 && R7474 = 0 && R7475 = R7483 && R7476 = 0 && R7477 = R7483 && R7478 = 0 && R7479 = R7483 && R7480 = 0 && R7481 = R7483 && R7482 = 0 && R7484 = 0 && R7485 = R7589 && R7486 = 0 && R7487 = R7589 && R7488 = 0 && R7489 = R7589 && R7490 = 0 && R7491 = R7589 && R7492 = 0 && R7493 = R7589 && R7494 = 0 && R7495 = R7589 && R7498 = 0 && R7499 = 0 && R7508 = 0 && R7509 = 0 && R7512 = 0 && R7513 = 0 && R7516 = 0 && R7517 = 0 && R7518 = 10 && R7519 = R7589 && R7520 = 10 && R7521 = R7589 && R7522 = 10 && R7523 = R7589 && R7524 = 10 && R7525 = R7589 && R7526 = 10 && R7527 = R7589 && R7528 = 10 && R7529 = R7589 && R7530 = 10 && R7531 = R7589 && R7532 = 10 && R7533 = R7589 && R7534 = 10 && R7535 = R7589 && R7536 = 10 && R7537 = R7589 && R7538 = 10 && R7539 = R7589 && R7540 = 10 && R7541 = R7589 && R7542 = 10 && R7543 = R7589 && R7544 = 10 && R7545 = R7589 && R7546 = 10 && R7547 = R7589 && R7548 = 10 && R7549 = R7589 && R7550 = 10 && R7551 = R7589 && R7552 = 10 && R7553 = R7589 && R7554 = 10 && R7555 = R7589 && R7556 = 10 && R7557 = R7589 && R7558 = 10 && R7559 = R7589 && R7560 = 10 && R7561 = R7589 && R7562 = 10 && R7563 = R7589 && R7564 = 10 && R7565 = R7589 && R7566 = 10 && R7567 = R7589 && R7568 = 10 && R7569 = R7589 && R7570 = 10 && R7571 = R7589 && R7572 = 10 && R7573 = R7589 && R7574 = 10 && R7575 = R7589 && R7576 = 10 && R7577 = R7589 && R7578 = 10 && R7579 = R7589 && R7580 = 10 && R7581 = R7589 && R7582 = 10 && R7583 = R7589 && R7584 = 10 && R7585 = R7589 && R7586 = 10 && R7587 = R7589 && R7588 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R6625 + R6622 + R7459 + R7456 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R7483 && 9 < R7589 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6623 + R6620 = 0 && R6624 + R6621 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R6623 + R6620 != 0 || R407 + R406 + -1*R6624 + -1*R6621 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R7496 = 0 && R7497 = 0)) && (R34 = 0 || (R7500 = 0 && R7501 = 0)) && (R34 = 0 || (R7502 = 0 && R7503 = 0)) && (R34 = 0 || (R7504 = 0 && R7505 = 0)) && (R34 = 0 || (R7506 = 0 && R7507 = 0)) && (R34 = 0 || (R7510 = 0 && R7511 = 0)) && (R34 = 0 || (R7514 = 0 && R7515 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R6623 + R6620 = 0 || R407 + R406 < 1) && (R7317 + R7314 = 0 || (R7315 + R7312 = 0 && R7316 + R7313 = 0)) && (R7317 + R7314 = 0 || (R7457 + R7454 = 0 && R7458 + R7455 = 0));
// End of Parikh automata intersection problem
