// Parikh automata intersection problem, generated by OSTRICH+
counter int R10748, R10749, R10750, R10751, R10752, R10753, R11440, R11441, R11442, R11443, R11444, R11445, R11854, R11855, R11856, R11857, R11858, R11859, R11860, R11861, R11862, R11863, R11864, R11865, R11866, R11867, R11868, R11869, R11870, R11871, R11872, R11873, R11874, R11875, R11876, R11877, R11878, R11879, R11880, R11881, R11882, R11883, R11884, R11885, R11886, R11887, R11888, R11889, R11890, R11891, R11892, R11893, R11894, R11895, R11896, R11897, R11898, R11899, R11900, R11901, R11902, R11903, R11904, R11905, R11906, R11907, R11908, R11909, R11910, R11911, R11912, R11913, R11914, R11915, R11916, R11917, R11918, R11919, R11920, R11921, R11922, R11923, R11924, R11925, R11926, R11927, R11928, R11929, R11930, R11931, R11932, R11933, R11934, R11935, R11936, R11937, R11938, R11939, R11940, R11941, R11942, R11943, R11944, R11945, R11946, R11947, R11948, R11949, R11950, R11951, R11952, R11953, R11954, R11955, R11956, R11957, R11958, R11959, R11960, R11961, R11962, R11963, R11964, R11965, R11966, R11967, R11968, R11969, R11970, R11971, R11972, R11973, R11974, R11975, R11976, R11977, R11978, R11979, R11980, R11981, R11982, R11983, R11984, R11985, R11986, R11987, R11988, R11989, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R11885 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R11884 += 1, R11885 += 1 };
  s1 -> s1 [0, 65535] { R11885 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R11887 += 1 };
  s0 -> s2 [0, 65535] { R11887 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R11886 += 1, R11887 += 1 };
  s0 -> s3 [65, 65] { R11887 += 1 };
  s0 -> s1 [66, 65535] { R11887 += 1 };
  s1 -> s1 [0, 64] { R11887 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R11887 += 1 };
  s1 -> s1 [66, 65535] { R11887 += 1 };
  s2 -> s1 [0, 64] { R11887 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11887 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R11887 += 1 };
  s2 -> s1 [66, 65535] { R11887 += 1 };
  s3 -> s3 [0, 65535] { R11887 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R11889 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R11889 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R11888 += 1, R11889 += 1 };
  s1 -> s1 [0, 65535] { R11889 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R11889 += 1 };
  s2 -> s1 [0, 65535] { R11889 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R11889 += 1, R68 += 1, R69 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11889 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R11891 += 1 };
  s0 -> s0 [0, 65535] { R11890 += 1, R11891 += 1 };
  s1 -> s1 [0, 65535] { R11891 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R11892 += 1, R11893 += 1 };
  s0 -> s1 [0, 65535] { R11893 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R11893 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R11893 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R11893 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11893 += 1 };
  s2 -> s2 [0, 65535] { R11893 += 1, R85 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11893 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R11895 += 1 };
  s0 -> s0 [0, 65535] { R11894 += 1, R11895 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11895 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R11919 += 1 };
  s0 -> s0 [0, 65535] { R11918 += 1, R11919 += 1 };
  s0 -> s1 [45, 45] { R11919 += 1 };
  s0 -> s2 [46, 46] { R11919 += 1 };
  s0 -> s1 [48, 62] { R11919 += 1 };
  s0 -> s3 [65, 65] { R11919 += 1 };
  s0 -> s1 [66, 65535] { R11919 += 1 };
  s1 -> s1 [0, 43] { R11919 += 1 };
  s1 -> s1 [45, 45] { R11919 += 1 };
  s1 -> s2 [46, 46] { R11919 += 1 };
  s1 -> s1 [48, 62] { R11919 += 1 };
  s1 -> s3 [65, 65] { R11919 += 1 };
  s1 -> s1 [66, 65535] { R11919 += 1 };
  s2 -> s1 [0, 43] { R11919 += 1 };
  s2 -> s1 [45, 45] { R11919 += 1 };
  s2 -> s2 [46, 46] { R11919 += 1 };
  s2 -> s1 [48, 62] { R11919 += 1 };
  s2 -> s3 [65, 65] { R11919 += 1 };
  s2 -> s1 [66, 114] { R11919 += 1 };
  s2 -> s8 [115, 115] { R11919 += 1 };
  s2 -> s1 [116, 65535] { R11919 += 1 };
  s3 -> s3 [0, 43] { R11919 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R11919 += 1 };
  s3 -> s4 [46, 46] { R11919 += 1 };
  s3 -> s3 [48, 62] { R11919 += 1 };
  s3 -> s3 [65, 65535] { R11919 += 1 };
  s4 -> s3 [0, 43] { R11919 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R11919 += 1 };
  s4 -> s4 [46, 46] { R11919 += 1 };
  s4 -> s3 [48, 62] { R11919 += 1 };
  s4 -> s3 [65, 114] { R11919 += 1 };
  s4 -> s5 [115, 115] { R11919 += 1 };
  s4 -> s3 [116, 65535] { R11919 += 1 };
  s5 -> s3 [0, 43] { R11919 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R11919 += 1 };
  s5 -> s4 [46, 46] { R11919 += 1 };
  s5 -> s3 [48, 62] { R11919 += 1 };
  s5 -> s3 [65, 110] { R11919 += 1 };
  s5 -> s6 [111, 111] { R11919 += 1 };
  s5 -> s3 [112, 65535] { R11919 += 1 };
  s6 -> s3 [0, 43] { R11919 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R11919 += 1 };
  s6 -> s4 [46, 46] { R11919 += 1 };
  s6 -> s3 [48, 62] { R11919 += 1 };
  s6 -> s3 [65, 98] { R11919 += 1 };
  s6 -> s7 [99, 99] { R11919 += 1 };
  s6 -> s3 [100, 65535] { R11919 += 1 };
  s7 -> s3 [0, 43] { R11919 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R11919 += 1 };
  s7 -> s4 [46, 46] { R11919 += 1 };
  s7 -> s3 [48, 62] { R11919 += 1 };
  s7 -> s3 [65, 106] { R11919 += 1 };
  s7 -> s3 [108, 65535] { R11919 += 1 };
  s8 -> s1 [0, 43] { R11919 += 1 };
  s8 -> s1 [45, 45] { R11919 += 1 };
  s8 -> s2 [46, 46] { R11919 += 1 };
  s8 -> s1 [48, 62] { R11919 += 1 };
  s8 -> s3 [65, 65] { R11919 += 1 };
  s8 -> s1 [66, 110] { R11919 += 1 };
  s8 -> s9 [111, 111] { R11919 += 1 };
  s8 -> s1 [112, 65535] { R11919 += 1 };
  s9 -> s1 [0, 43] { R11919 += 1 };
  s9 -> s1 [45, 45] { R11919 += 1 };
  s9 -> s2 [46, 46] { R11919 += 1 };
  s9 -> s1 [48, 62] { R11919 += 1 };
  s9 -> s3 [65, 65] { R11919 += 1 };
  s9 -> s1 [66, 98] { R11919 += 1 };
  s9 -> s10 [99, 99] { R11919 += 1 };
  s9 -> s1 [100, 65535] { R11919 += 1 };
  s10 -> s1 [0, 43] { R11919 += 1 };
  s10 -> s1 [45, 45] { R11919 += 1 };
  s10 -> s2 [46, 46] { R11919 += 1 };
  s10 -> s1 [48, 62] { R11919 += 1 };
  s10 -> s3 [65, 65] { R11919 += 1 };
  s10 -> s1 [66, 106] { R11919 += 1 };
  s10 -> s1 [108, 65535] { R11919 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R11920 += 1, R11921 += 1 };
  s0 -> s1 [0, 65535] { R11921 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R11921 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R11923 += 1 };
  s0 -> s2 [0, 65535] { R11923 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R11922 += 1, R11923 += 1 };
  s0 -> s3 [58, 58] { R11923 += 1 };
  s0 -> s1 [59, 65535] { R11923 += 1 };
  s1 -> s1 [0, 57] { R11923 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R11923 += 1 };
  s1 -> s1 [59, 65535] { R11923 += 1 };
  s2 -> s1 [0, 57] { R11923 += 1 };
  s2 -> s2 [0, 65535] { R11923 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R11923 += 1 };
  s2 -> s1 [59, 65535] { R11923 += 1 };
  s3 -> s3 [0, 65535] { R11923 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R11925 += 1 };
  s0 -> s2 [0, 65535] { R11925 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R11924 += 1, R11925 += 1 };
  s0 -> s3 [43, 43] { R11925 += 1 };
  s0 -> s1 [44, 65535] { R11925 += 1 };
  s1 -> s1 [0, 42] { R11925 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R11925 += 1 };
  s1 -> s1 [44, 65535] { R11925 += 1 };
  s2 -> s1 [0, 42] { R11925 += 1 };
  s2 -> s2 [0, 65535] { R11925 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R11925 += 1 };
  s2 -> s1 [44, 65535] { R11925 += 1 };
  s3 -> s3 [0, 65535] { R11925 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R11927 += 1 };
  s0 -> s2 [0, 65535] { R11927 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R11926 += 1, R11927 += 1 };
  s0 -> s3 [65, 65] { R11927 += 1 };
  s0 -> s1 [66, 65535] { R11927 += 1 };
  s1 -> s1 [0, 64] { R11927 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R11927 += 1 };
  s1 -> s1 [66, 65535] { R11927 += 1 };
  s2 -> s1 [0, 64] { R11927 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11927 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R11927 += 1 };
  s2 -> s1 [66, 65535] { R11927 += 1 };
  s3 -> s3 [0, 65535] { R11927 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R11929 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R11929 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R11928 += 1, R11929 += 1 };
  s0 -> s3 [91, 91] { R11929 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R11929 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11929 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R11929 += 1 };
  s2 -> s1 [0, 90] { R11929 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R11929 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R11929 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R11929 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R11929 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11929 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R11931 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R11931 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R11930 += 1, R11931 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11931 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R11931 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11931 += 1 };
  s2 -> s2 [0, 65535] { R11931 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11931 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R11932 += 1, R11933 += 1 };
  s0 -> s1 [0, 65535] { R11933 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R11933 += 1, R57 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R11933 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R11933 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R11933 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11933 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R11933 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R11935 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R11934 += 1, R11935 += 1 };
  s0 -> s2 [0, 65535] { R11935 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R11935 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R11935 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11935 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R11935 += 1 };
  s2 -> s1 [0, 107] { R11935 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11935 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R11935 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R11935 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R11935 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R11935 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R11935 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R11935 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R11935 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11935 += 1 };
  s5 -> s6 [99, 99] { R11935 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R11935 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R11935 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11935 += 1 };
  s6 -> s7 [97, 97] { R11935 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R11935 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R11935 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R11935 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R11935 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R11935 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R11935 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R11935 += 1 };
  s8 -> s9 [104, 104] { R11935 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R11935 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R11935 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R11935 += 1 };
  s9 -> s10 [111, 111] { R11935 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R11935 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R11935 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R11935 += 1 };
  s10 -> s11 [115, 115] { R11935 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R11935 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R11935 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R11935 += 1 };
  s11 -> s12 [116, 116] { R11935 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R11935 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R11935 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R11935 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R11937 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R11937 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R11936 += 1, R11937 += 1 };
  s1 -> s1 [0, 65535] { R11937 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R11937 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11937 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R11937 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11937 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R11939 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R11938 += 1, R11939 += 1 };
  s0 -> s2 [0, 65535] { R11939 += 1, R75 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R11939 += 1, R74 += 1, R75 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11939 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11939 += 1 };
  s2 -> s2 [0, 65535] { R11939 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11939 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R11941 += 1 };
  s0 -> s0 [0, 65535] { R11940 += 1, R11941 += 1 };
  s1 -> s1 [0, 65535] { R11941 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R11943 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R11943 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R11942 += 1, R11943 += 1 };
  s0 -> s3 [43, 43] { R11943 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R11943 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R11943 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R11943 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R11943 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R11943 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R11943 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R11943 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R11943 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11943 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R11943 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R11943 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R11943 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R11943 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11943 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11943 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11943 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R11945 += 1, R11861 += 1 };
  s0 -> s2 [0, 65535] { R11945 += 1, R11860 += 1, R11861 += 1 };
  s0 -> s0 [0, 65535] { R11944 += 1, R11945 += 1 };
  s0 -> s1 [66, 65535] { R11945 += 1, R11861 += 1 };
  s1 -> s1 [0, 64] { R11945 += 1, R11861 += 1 };
  s1 -> s1 [0, 65535] { R11945 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R11945 += 1, R11861 += 1 };
  s2 -> s1 [0, 64] { R11945 += 1, R11861 += 1 };
  s2 -> s2 [0, 65535] { R11945 += 1, R11860 += 1, R11861 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R11945 += 1, R11861 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R11946 += 1, R11947 += 1 };
  s0 -> s1 [0, 65535] { R11947 += 1, R11862 += 1, R11863 += 1 };
  s0 -> s2 [0, 65535] { R11947 += 1, R11863 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R11947 += 1, R11862 += 1, R11863 += 1 };
  s1 -> s2 [0, 65535] { R11947 += 1, R11863 += 1, R32 += 1 };
  s2 -> s3 [0, 65535] { R11947 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11947 += 1, R11863 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R11947 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R11949 += 1, R11865 += 1 };
  s0 -> s0 [0, 65535] { R11948 += 1, R11949 += 1 };
  s0 -> s2 [0, 65535] { R11949 += 1, R11864 += 1, R11865 += 1 };
  s0 -> s1 [80, 65535] { R11949 += 1, R11865 += 1 };
  s1 -> s1 [0, 65] { R11949 += 1, R11865 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11949 += 1 };
  s1 -> s1 [80, 65535] { R11949 += 1, R11865 += 1 };
  s2 -> s1 [0, 65] { R11949 += 1, R11865 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11949 += 1, R11864 += 1, R11865 += 1 };
  s2 -> s1 [80, 65535] { R11949 += 1, R11865 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R11951 += 1, R11866 += 1, R11867 += 1 };
  s0 -> s0 [0, 65535] { R11950 += 1, R11951 += 1 };
  s0 -> s2 [0, 65535] { R11951 += 1, R11867 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R11951 += 1, R11866 += 1, R11867 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R11951 += 1, R11867 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R11951 += 1 };
  s2 -> s2 [0, 65535] { R11951 += 1, R11867 += 1, R407 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11951 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R11953 += 1, R11869 += 1 };
  s0 -> s0 [0, 65535] { R11952 += 1, R11953 += 1 };
  s0 -> s2 [0, 65535] { R11953 += 1, R11869 += 1, R409 += 1 };
  s0 -> s3 [0, 65535] { R11953 += 1, R11868 += 1, R11869 += 1 };
  s0 -> s1 [81, 65535] { R11953 += 1, R11869 += 1 };
  s1 -> s1 [0, 79] { R11953 += 1, R11869 += 1 };
  s1 -> s1 [0, 65535] { R11953 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R11953 += 1, R11869 += 1 };
  s2 -> s1 [0, 79] { R11953 += 1, R11869 += 1 };
  s2 -> s5 [0, 65535] { R11953 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11953 += 1, R11869 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R11953 += 1, R11869 += 1 };
  s3 -> s1 [0, 79] { R11953 += 1, R11869 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11953 += 1, R11869 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R11953 += 1, R11868 += 1, R11869 += 1 };
  s3 -> s1 [81, 65535] { R11953 += 1, R11869 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11953 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R11955 += 1, R11871 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R11954 += 1, R11955 += 1 };
  s0 -> s2 [0, 65535] { R11955 += 1, R11871 += 1, R412 += 1, R413 += 1 };
  s0 -> s3 [0, 65535] { R11955 += 1, R11870 += 1, R11871 += 1 };
  s0 -> s1 [81, 65535] { R11955 += 1, R11871 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R11955 += 1, R11871 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R11955 += 1, R11871 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R11955 += 1 };
  s1 -> s1 [81, 65535] { R11955 += 1, R11871 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R11955 += 1, R11871 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R11955 += 1 };
  s2 -> s2 [0, 65535] { R11955 += 1, R11871 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R11955 += 1, R11871 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R11955 += 1, R11871 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R11955 += 1, R11871 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R11955 += 1, R11870 += 1, R11871 += 1 };
  s3 -> s1 [81, 65535] { R11955 += 1, R11871 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11955 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R11957 += 1, R11873 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R11957 += 1, R11872 += 1, R11873 += 1 };
  s0 -> s3 [0, 65535] { R11957 += 1, R11873 += 1, R418 += 1, R419 += 1 };
  s0 -> s0 [0, 65535] { R11956 += 1, R11957 += 1 };
  s1 -> s1 [0, 65535] { R11957 += 1, R11873 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R11957 += 1, R11873 += 1, R418 += 1, R419 += 1 };
  s1 -> s6 [0, 65535] { R11957 += 1 };
  s2 -> s1 [0, 65535] { R11957 += 1, R11873 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11957 += 1, R11872 += 1, R11873 += 1 };
  s2 -> s3 [0, 65535] { R11957 += 1, R11873 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R11957 += 1, R11873 += 1 };
  s3 -> s3 [0, 65535] { R11957 += 1, R11873 += 1, R418 += 1, R419 += 1 };
  s3 -> s6 [0, 65535] { R11957 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11957 += 1, R11873 += 1 };
  s5 -> s6 [0, 65535] { R11957 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R11957 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R11959 += 1, R11875 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R11959 += 1, R11875 += 1 };
  s0 -> s2 [0, 65535] { R11959 += 1, R11874 += 1, R11875 += 1 };
  s0 -> s0 [0, 65535] { R11958 += 1, R11959 += 1 };
  s0 -> s1 [91, 65535] { R11959 += 1, R11875 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R11959 += 1, R11875 += 1, R6619 += 1 };
  s1 -> s1 [0, 65535] { R11959 += 1, R11875 += 1 };
  s1 -> s4 [0, 65535] { R11959 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R11959 += 1, R11875 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R11959 += 1, R11875 += 1, R6619 += 1 };
  s2 -> s1 [0, 65535] { R11959 += 1, R11875 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11959 += 1, R11874 += 1, R11875 += 1 };
  s2 -> s1 [91, 65535] { R11959 += 1, R11875 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11959 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R11960 += 1, R11961 += 1 };
  s0 -> s1 [0, 65535] { R11961 += 1, R11877 += 1 };
  s0 -> s2 [0, 65535] { R11961 += 1, R11876 += 1, R11877 += 1 };
  s1 -> s4 [0, 65535] { R11961 += 1 };
  s1 -> s1 [0, 65535] { R11961 += 1, R11877 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R11961 += 1, R11877 += 1 };
  s2 -> s2 [0, 65535] { R11961 += 1, R11876 += 1, R11877 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11961 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R11962 += 1, R11963 += 1 };
  s0 -> s1 [0, 65535] { R11963 += 1, R11879 += 1, R11444 += 1, R11445 += 1 };
  s0 -> s2 [0, 65535] { R11963 += 1, R11879 += 1 };
  s0 -> s3 [0, 65535] { R11963 += 1, R11878 += 1, R11879 += 1 };
  s1 -> s1 [0, 65535] { R11963 += 1, R11879 += 1, R11444 += 1, R11445 += 1 };
  s1 -> s2 [0, 65535] { R11963 += 1, R11879 += 1 };
  s1 -> s5 [0, 65535] { R11963 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R11963 += 1, R11879 += 1 };
  s2 -> s5 [0, 65535] { R11963 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R11963 += 1, R11879 += 1, R11444 += 1, R11445 += 1 };
  s3 -> s2 [0, 65535] { R11963 += 1, R11879 += 1 };
  s3 -> s3 [0, 65535] { R11963 += 1, R11878 += 1, R11879 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R11963 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s0 [0, 65535] { R11964 += 1, R11965 += 1 };
  s0 -> s1 [0, 65535] { R11965 += 1, R11880 += 1, R11881 += 1 };
  s0 -> s2 [0, 65535] { R11965 += 1, R11881 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R11965 += 1, R11880 += 1, R11881 += 1 };
  s1 -> s2 [0, 65535] { R11965 += 1, R11881 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R11965 += 1, R11881 += 1 };
  s2 -> s4 [0, 65535] { R11965 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R11965 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R11967 += 1, R11882 += 1, R11883 += 1 };
  s0 -> s0 [0, 65535] { R11966 += 1, R11967 += 1 };
  s0 -> s2 [0, 65535] { R11967 += 1, R11883 += 1 };
  s0 -> s3 [0, 65535] { R11967 += 1, R11883 += 1, R11858 += 1, R11859 += 1 };
  s1 -> s1 [0, 65535] { R11967 += 1, R11882 += 1, R11883 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R11967 += 1, R11883 += 1 };
  s1 -> s3 [0, 65535] { R11967 += 1, R11883 += 1, R11858 += 1, R11859 += 1 };
  s2 -> s4 [0, 65535] { R11967 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11967 += 1, R11883 += 1 };
  s3 -> s4 [0, 65535] { R11967 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R11967 += 1, R11883 += 1 };
  s3 -> s3 [0, 65535] { R11967 += 1, R11883 += 1, R11858 += 1, R11859 += 1 };
  s4 -> s4 [0, 65535] { R11967 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R11969 += 1, R11896 += 1, R11897 += 1 };
  s0 -> s2 [0, 65535] { R11969 += 1, R11897 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R11968 += 1, R11969 += 1 };
  s1 -> s1 [0, 65535] { R11969 += 1, R11896 += 1, R11897 += 1 };
  s1 -> s2 [0, 65535] { R11969 += 1, R11897 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R11969 += 1 };
  s2 -> s2 [0, 65535] { R11969 += 1, R11897 += 1, R34 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R11969 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R11971 += 1, R11899 += 1 };
  s0 -> s2 [0, 65535] { R11971 += 1, R11898 += 1, R11899 += 1 };
  s0 -> s0 [0, 65535] { R11970 += 1, R11971 += 1 };
  s0 -> s3 [65, 65] { R11971 += 1, R11899 += 1 };
  s0 -> s4 [65, 65] { R11971 += 1, R11899 += 1 };
  s0 -> s5 [80, 80] { R11971 += 1, R11899 += 1 };
  s0 -> s1 [81, 65535] { R11971 += 1, R11899 += 1 };
  s1 -> s1 [0, 64] { R11971 += 1, R11899 += 1 };
  s1 -> s3 [65, 65] { R11971 += 1, R11899 += 1 };
  s1 -> s4 [65, 65] { R11971 += 1, R11899 += 1 };
  s1 -> s5 [80, 80] { R11971 += 1, R11899 += 1 };
  s1 -> s1 [81, 65535] { R11971 += 1, R11899 += 1 };
  s2 -> s1 [0, 64] { R11971 += 1, R11899 += 1 };
  s2 -> s2 [0, 65535] { R11971 += 1, R11898 += 1, R11899 += 1 };
  s2 -> s3 [65, 65] { R11971 += 1, R11899 += 1 };
  s2 -> s4 [65, 65] { R11971 += 1, R11899 += 1 };
  s2 -> s5 [80, 80] { R11971 += 1, R11899 += 1 };
  s2 -> s1 [81, 65535] { R11971 += 1, R11899 += 1 };
  s3 -> s3 [0, 65] { R11971 += 1, R11899 += 1 };
  s3 -> s8 [80, 80] { R11971 += 1, R11899 += 1 };
  s3 -> s3 [81, 65535] { R11971 += 1, R11899 += 1 };
  s5 -> s5 [0, 64] { R11971 += 1, R11899 += 1 };
  s5 -> s5 [0, 65535] { R11971 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R11971 += 1, R11899 += 1 };
  s5 -> s8 [65, 65] { R11971 += 1, R11899 += 1 };
  s5 -> s5 [80, 65535] { R11971 += 1, R11899 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R11971 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R11971 += 1, R11899 += 1 };
  s8 -> s8 [0, 65535] { R11971 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R11971 += 1, R11899 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R11973 += 1, R11901 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R11973 += 1, R11900 += 1, R11901 += 1 };
  s0 -> s0 [0, 65535] { R11972 += 1, R11973 += 1 };
  s0 -> s3 [65, 65] { R11973 += 1, R11901 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R11973 += 1, R11901 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R11973 += 1, R11901 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R11973 += 1, R11901 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R11973 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R11973 += 1, R11901 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R11973 += 1, R11901 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R11973 += 1, R11901 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R11973 += 1, R11901 += 1, R406 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11973 += 1, R11900 += 1, R11901 += 1 };
  s2 -> s3 [65, 65] { R11973 += 1, R11901 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R11973 += 1, R11901 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R11973 += 1, R11901 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R11973 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R11973 += 1 };
  s4 -> s4 [0, 65535] { R11973 += 1, R11901 += 1, R406 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11973 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R11975 += 1, R11903 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R11974 += 1, R11975 += 1 };
  s0 -> s2 [0, 65535] { R11975 += 1, R11902 += 1, R11903 += 1 };
  s0 -> s3 [65, 65] { R11975 += 1, R11903 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R11975 += 1, R11903 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R11975 += 1, R11903 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R11975 += 1, R11903 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11975 += 1 };
  s1 -> s3 [65, 65] { R11975 += 1, R11903 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R11975 += 1, R11903 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R11975 += 1, R11903 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R11975 += 1, R11903 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11975 += 1, R11902 += 1, R11903 += 1 };
  s2 -> s3 [65, 65] { R11975 += 1, R11903 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R11975 += 1, R11903 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R11975 += 1, R11903 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R11975 += 1, R11903 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11975 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11975 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11975 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R11977 += 1, R11904 += 1, R11905 += 1 };
  s0 -> s0 [0, 65535] { R11976 += 1, R11977 += 1 };
  s0 -> s3 [65, 65] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R11977 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R11977 += 1, R11904 += 1, R11905 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R11977 += 1, R11905 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R11977 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11977 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11977 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R11978 += 1, R11979 += 1 };
  s0 -> s2 [0, 65535] { R11979 += 1, R11906 += 1, R11907 += 1 };
  s0 -> s3 [65, 65] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R11979 += 1 };
  s1 -> s3 [65, 65] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R11979 += 1, R11906 += 1, R11907 += 1 };
  s2 -> s3 [65, 65] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R11979 += 1, R11907 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535] { R11979 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R11979 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11979 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s0 -> s0 [0, 65535] { R11980 += 1, R11981 += 1 };
  s0 -> s3 [0, 65535] { R11981 += 1, R11908 += 1, R11909 += 1 };
  s0 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s0 -> s1 [66, 65535] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [91, 107] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s0 -> s2 [109, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s5 [65, 65] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s7 [65, 65] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [91, 107] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s8 [108, 108] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s1 -> s2 [109, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R11981 += 1 };
  s2 -> s4 [65, 65] { R11981 += 1, R11909 += 1 };
  s2 -> s6 [65, 65] { R11981 += 1, R11909 += 1 };
  s2 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R11981 += 1, R11909 += 1 };
  s2 -> s2 [91, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R11981 += 1, R11908 += 1, R11909 += 1 };
  s3 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s1 [66, 65535] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [91, 107] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s3 -> s2 [109, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s4 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [0, 65535] { R11981 += 1, R11909 += 1 };
  s4 -> s35 [0, 65535] { R11981 += 1 };
  s4 -> s4 [91, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s5 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s5 -> s5 [0, 65535] { R11981 += 1, R11909 += 1, R6616 += 1, R6617 += 1 };
  s5 -> s4 [91, 107] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s5 -> s9 [108, 108] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s5 -> s4 [109, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R11981 += 1 };
  s8 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s8 -> s8 [0, 64] { R11981 += 1, R11909 += 1 };
  s8 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s8 -> s9 [65, 65] { R11981 += 1, R11909 += 1 };
  s8 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s8 -> s10 [65, 65] { R11981 += 1, R11909 += 1 };
  s8 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R11981 += 1, R11909 += 1 };
  s8 -> s2 [91, 110] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s8 -> s2 [112, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s9 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s9 -> s9 [0, 65535] { R11981 += 1, R11909 += 1 };
  s9 -> s4 [91, 110] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s9 -> s12 [111, 111] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s9 -> s4 [112, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R11981 += 1, R11909 += 1 };
  s11 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s12 [65, 65] { R11981 += 1, R11909 += 1 };
  s11 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s13 [65, 65] { R11981 += 1, R11909 += 1 };
  s11 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R11981 += 1, R11909 += 1 };
  s11 -> s2 [91, 98] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s11 -> s2 [100, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s12 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s12 -> s12 [0, 65535] { R11981 += 1, R11909 += 1 };
  s12 -> s4 [91, 98] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s12 -> s16 [99, 99] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s12 -> s4 [100, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R11981 += 1, R11909 += 1 };
  s14 -> s15 [65, 65] { R11981 += 1, R11909 += 1 };
  s14 -> s16 [65, 65] { R11981 += 1, R11909 += 1 };
  s14 -> s17 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s18 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R11981 += 1, R11909 += 1 };
  s14 -> s2 [91, 96] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s14 -> s2 [98, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s16 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s16 -> s16 [0, 65535] { R11981 += 1, R11909 += 1 };
  s16 -> s4 [91, 96] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s16 -> s17 [97, 97] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s16 -> s4 [98, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s17 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s17 -> s17 [0, 65535] { R11981 += 1, R11909 += 1 };
  s17 -> s4 [91, 107] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s17 -> s21 [108, 108] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s17 -> s4 [109, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R11981 += 1, R11909 += 1 };
  s19 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s17 [65, 65] { R11981 += 1, R11909 += 1 };
  s19 -> s18 [65, 65] { R11981 += 1, R11909 += 1 };
  s19 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R11981 += 1, R11909 += 1 };
  s19 -> s2 [91, 107] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s19 -> s2 [109, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R11981 += 1, R11909 += 1 };
  s20 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R11981 += 1, R11909 += 1 };
  s20 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s22 [65, 65] { R11981 += 1, R11909 += 1 };
  s20 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R11981 += 1, R11909 += 1 };
  s20 -> s2 [91, 103] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s20 -> s2 [105, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s21 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s21 -> s21 [0, 65535] { R11981 += 1, R11909 += 1 };
  s21 -> s4 [91, 103] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s21 -> s25 [104, 104] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s21 -> s4 [105, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R11981 += 1, R11909 += 1 };
  s23 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R11981 += 1, R11909 += 1 };
  s23 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s25 [65, 65] { R11981 += 1, R11909 += 1 };
  s23 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R11981 += 1, R11909 += 1 };
  s23 -> s2 [91, 110] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s23 -> s2 [112, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s25 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s25 -> s25 [0, 65535] { R11981 += 1, R11909 += 1 };
  s25 -> s4 [91, 110] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s25 -> s27 [111, 111] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s25 -> s4 [112, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R11981 += 1, R11909 += 1 };
  s26 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s27 [65, 65] { R11981 += 1, R11909 += 1 };
  s26 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s28 [65, 65] { R11981 += 1, R11909 += 1 };
  s26 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R11981 += 1, R11909 += 1 };
  s26 -> s2 [91, 114] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s26 -> s2 [116, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s27 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s27 -> s27 [0, 65535] { R11981 += 1, R11909 += 1 };
  s27 -> s4 [91, 114] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s27 -> s30 [115, 115] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s27 -> s4 [116, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R11981 += 1, R11909 += 1 };
  s29 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s30 [65, 65] { R11981 += 1, R11909 += 1 };
  s29 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s31 [65, 65] { R11981 += 1, R11909 += 1 };
  s29 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R11981 += 1, R11909 += 1 };
  s29 -> s2 [91, 115] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s29 -> s2 [117, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s30 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R11981 += 1, R11909 += 1 };
  s30 -> s4 [91, 115] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s30 -> s4 [117, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s32 -> s2 [0, 64] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s32 -> s4 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s32 -> s6 [65, 65] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s32 -> s2 [66, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s32 -> s2 [91, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s33 -> s4 [0, 80] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s33 -> s4 [91, 65535] { R11981 += 1, R11909 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R11981 += 1 };
  accepting s4, s34, s2, s6, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s2 [0, 64] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s3 [0, 65535] { R11983 += 1, R11910 += 1, R11911 += 1 };
  s0 -> s0 [0, 65535] { R11982 += 1, R11983 += 1 };
  s0 -> s4 [65, 65] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s5 [65, 65] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s6 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s7 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s1 [66, 65535] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s0 -> s2 [66, 65535] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s1 [0, 64] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s2 [0, 64] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s4 [65, 65] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s5 [65, 65] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s6 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s7 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s1 -> s1 [66, 65535] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s1 -> s2 [66, 65535] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s11 [0, 64] { R11983 += 1, R11911 += 1 };
  s2 -> s2 [0, 64] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s6 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s7 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s2 -> s12 [65, 65] { R11983 += 1, R11911 += 1 };
  s2 -> s8 [65, 65] { R11983 += 1, R11911 += 1 };
  s2 -> s11 [66, 65535] { R11983 += 1, R11911 += 1 };
  s2 -> s2 [66, 65535] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s1 [0, 64] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s2 [0, 64] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s3 [0, 65535] { R11983 += 1, R11910 += 1, R11911 += 1 };
  s3 -> s4 [65, 65] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s5 [65, 65] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s6 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s7 [65, 65] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s1 [66, 65535] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s3 -> s2 [66, 65535] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s4 -> s4 [0, 65535] { R11983 += 1, R11911 += 1, R10748 += 1, R10749 += 1 };
  s4 -> s7 [0, 65535] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s7 -> s7 [0, 65535] { R11983 += 1, R11911 += 1, R10749 += 1, R10750 += 1 };
  s7 -> s8 [0, 65535] { R11983 += 1, R11911 += 1 };
  s8 -> s8 [0, 65535] { R11983 += 1, R11911 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R11983 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11983 += 1 };
  s11 -> s11 [0, 64] { R11983 += 1, R11911 += 1 };
  s11 -> s11 [0, 65535] { R11983 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R11983 += 1, R11911 += 1 };
  s11 -> s8 [65, 65] { R11983 += 1, R11911 += 1 };
  s11 -> s11 [66, 65535] { R11983 += 1, R11911 += 1 };
  s12 -> s12 [0, 65535] { R11983 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s0 -> s2 [0, 64] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s0 -> s0 [0, 65535] { R11984 += 1, R11985 += 1 };
  s0 -> s3 [0, 65535] { R11985 += 1, R11912 += 1, R11913 += 1 };
  s0 -> s4 [65, 65] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s0 -> s5 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s0 -> s6 [65, 65] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s0 -> s7 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s0 -> s1 [66, 65535] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s0 -> s2 [66, 65535] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s1 -> s1 [0, 64] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R11985 += 1 };
  s1 -> s5 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s1 -> s7 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s1 -> s1 [66, 65535] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s2 -> s1 [0, 64] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s2 -> s2 [0, 64] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s2 -> s4 [65, 65] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s2 -> s5 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s2 -> s6 [65, 65] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s2 -> s7 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s2 -> s1 [66, 65535] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s2 -> s2 [66, 65535] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s3 -> s1 [0, 64] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s3 -> s2 [0, 64] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s3 -> s3 [0, 65535] { R11985 += 1, R11912 += 1, R11913 += 1 };
  s3 -> s4 [65, 65] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s3 -> s5 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s3 -> s6 [65, 65] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s3 -> s7 [65, 65] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s3 -> s1 [66, 65535] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s3 -> s2 [66, 65535] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s5 -> s9 [0, 65535] { R11985 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s6 -> s5 [0, 65535] { R11985 += 1, R11913 += 1, R11441 += 1, R11442 += 1 };
  s6 -> s6 [0, 65535] { R11985 += 1, R11913 += 1, R11440 += 1, R11441 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R11985 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R11985 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R11987 += 1, R11915 += 1 };
  s0 -> s0 [0, 65535] { R11986 += 1, R11987 += 1 };
  s0 -> s2 [0, 65535] { R11987 += 1, R11914 += 1, R11915 += 1 };
  s0 -> s3 [65, 65] { R11987 += 1, R11915 += 1 };
  s0 -> s4 [65, 65] { R11987 += 1, R11915 += 1 };
  s0 -> s1 [66, 65535] { R11987 += 1, R11915 += 1 };
  s1 -> s1 [0, 64] { R11987 += 1, R11915 += 1 };
  s1 -> s1 [0, 65535] { R11987 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R11987 += 1, R11915 += 1 };
  s1 -> s4 [65, 65] { R11987 += 1, R11915 += 1 };
  s1 -> s1 [66, 65535] { R11987 += 1, R11915 += 1 };
  s2 -> s1 [0, 64] { R11987 += 1, R11915 += 1 };
  s2 -> s2 [0, 65535] { R11987 += 1, R11914 += 1, R11915 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R11987 += 1, R11915 += 1 };
  s2 -> s4 [65, 65] { R11987 += 1, R11915 += 1 };
  s2 -> s1 [66, 65535] { R11987 += 1, R11915 += 1 };
  s3 -> s3 [0, 65535] { R11987 += 1, R11915 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R11987 += 1 };
  s4 -> s4 [0, 65535] { R11987 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R11987 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s2 [0, 64] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s0 -> s0 [0, 65535] { R11988 += 1, R11989 += 1 };
  s0 -> s3 [0, 65535] { R11989 += 1, R11916 += 1, R11917 += 1 };
  s0 -> s4 [65, 65] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s5 [65, 65] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s6 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s0 -> s7 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s0 -> s2 [66, 79] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s0 -> s1 [66, 65535] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s0 -> s8 [80, 80] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s0 -> s2 [81, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s1 -> s1 [0, 64] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s1 -> s2 [0, 64] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s1 -> s4 [65, 65] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s1 -> s5 [65, 65] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s1 -> s6 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s1 -> s7 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s1 -> s2 [66, 79] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s1 -> s1 [66, 65535] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s1 -> s8 [80, 80] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s1 -> s2 [81, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s2 -> s2 [0, 64] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s2 -> s6 [65, 65] { R11989 += 1, R11917 += 1 };
  s2 -> s7 [65, 65] { R11989 += 1, R11917 += 1 };
  s2 -> s2 [66, 79] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s2 -> s2 [66, 65535] { R11989 += 1, R11917 += 1 };
  s2 -> s8 [80, 80] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s2 -> s2 [81, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s3 -> s1 [0, 64] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s2 [0, 64] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s3 -> s3 [0, 65535] { R11989 += 1, R11916 += 1, R11917 += 1 };
  s3 -> s4 [65, 65] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s5 [65, 65] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s6 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s3 -> s7 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s3 -> s2 [66, 79] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s3 -> s1 [66, 65535] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s3 -> s8 [80, 80] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s3 -> s2 [81, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s4 -> s7 [0, 79] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s4 -> s4 [0, 65535] { R11989 += 1, R11917 += 1, R11854 += 1, R11855 += 1 };
  s4 -> s10 [80, 80] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s4 -> s7 [81, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s7 -> s7 [0, 79] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s7 -> s7 [0, 65535] { R11989 += 1, R11917 += 1 };
  s7 -> s10 [80, 80] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s7 -> s7 [81, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s8 -> s8 [0, 64] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s8 -> s8 [0, 65535] { R11989 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s8 -> s11 [65, 65] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s8 -> s8 [66, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R11989 += 1, R11917 += 1, R11855 += 1, R11856 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R11989 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R11989 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R11989 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R11883 && R6 = R11989 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R11883 && R58 = 0 && R59 = R11883 && R60 = 0 && R61 = R11883 && R62 = 0 && R63 = R11989 && R64 = 0 && R65 = R11989 && R66 = 0 && R67 = R11989 && R11860 = 0 && R11861 = R11883 && R11862 = 0 && R11863 = R11883 && R11864 = 0 && R11865 = R11883 && R11866 = 0 && R11867 = R11883 && R11868 = 0 && R11869 = R11883 && R11870 = 0 && R11871 = R11883 && R11872 = 0 && R11873 = R11883 && R11874 = 0 && R11875 = R11883 && R11876 = 0 && R11877 = R11883 && R11878 = 0 && R11879 = R11883 && R11880 = 0 && R11881 = R11883 && R11882 = 0 && R11884 = 0 && R11885 = R11989 && R11886 = 0 && R11887 = R11989 && R11888 = 0 && R11889 = R11989 && R11890 = 0 && R11891 = R11989 && R11892 = 0 && R11893 = R11989 && R11894 = 0 && R11895 = R11989 && R11898 = 0 && R11899 = 0 && R11908 = 0 && R11909 = 0 && R11910 = 0 && R11911 = 0 && R11912 = 0 && R11913 = 0 && R11916 = 0 && R11917 = 0 && R11918 = 10 && R11919 = R11989 && R11920 = 10 && R11921 = R11989 && R11922 = 10 && R11923 = R11989 && R11924 = 10 && R11925 = R11989 && R11926 = 10 && R11927 = R11989 && R11928 = 10 && R11929 = R11989 && R11930 = 10 && R11931 = R11989 && R11932 = 10 && R11933 = R11989 && R11934 = 10 && R11935 = R11989 && R11936 = 10 && R11937 = R11989 && R11938 = 10 && R11939 = R11989 && R11940 = 10 && R11941 = R11989 && R11942 = 10 && R11943 = R11989 && R11944 = 10 && R11945 = R11989 && R11946 = 10 && R11947 = R11989 && R11948 = 10 && R11949 = R11989 && R11950 = 10 && R11951 = R11989 && R11952 = 10 && R11953 = R11989 && R11954 = 10 && R11955 = R11989 && R11956 = 10 && R11957 = R11989 && R11958 = 10 && R11959 = R11989 && R11960 = 10 && R11961 = R11989 && R11962 = 10 && R11963 = R11989 && R11964 = 10 && R11965 = R11989 && R11966 = 10 && R11967 = R11989 && R11968 = 10 && R11969 = R11989 && R11970 = 10 && R11971 = R11989 && R11972 = 10 && R11973 = R11989 && R11974 = 10 && R11975 = R11989 && R11976 = 10 && R11977 = R11989 && R11978 = 10 && R11979 = R11989 && R11980 = 10 && R11981 = R11989 && R11982 = 10 && R11983 = R11989 && R11984 = 10 && R11985 = R11989 && R11986 = 10 && R11987 = R11989 && R11988 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R10753 + R10750 + R11859 + R11856 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R11883 && 9 < R11989 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R10751 + R10748 = 0 && R10752 + R10749 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R10751 + R10748 != 0 || R407 + R406 + -1*R10752 + -1*R10749 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R11896 = 0 && R11897 = 0)) && (R34 = 0 || (R11900 = 0 && R11901 = 0)) && (R34 = 0 || (R11902 = 0 && R11903 = 0)) && (R34 = 0 || (R11904 = 0 && R11905 = 0)) && (R34 = 0 || (R11906 = 0 && R11907 = 0)) && (R34 = 0 || (R11914 = 0 && R11915 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R10751 + R10748 = 0 || R407 + R406 < 1) && (R11445 + R11442 = 0 || (R11443 + R11440 = 0 && R11444 + R11441 = 0)) && (R11445 + R11442 = 0 || (R11857 + R11854 = 0 && R11858 + R11855 = 0));
// End of Parikh automata intersection problem
