// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2488, R2489, R2490, R2491, R2492, R2493, R27, R28, R3, R31, R3180, R3181, R3182, R3183, R3184, R3185, R3186, R3187, R3188, R3189, R3190, R3191, R3192, R3193, R3194, R3195, R3196, R3197, R3198, R3199, R32, R3200, R3201, R3202, R3203, R3204, R3205, R3206, R3207, R3208, R3209, R3210, R3211, R3212, R3213, R3214, R3215, R3216, R3217, R3218, R3219, R3220, R3221, R3222, R3223, R3224, R3225, R3226, R3227, R3228, R3229, R3230, R3231, R3232, R3233, R3234, R3235, R3236, R3237, R3238, R3239, R3240, R3241, R3242, R3243, R3244, R3245, R3246, R3247, R3248, R3249, R3250, R3251, R3252, R3253, R3254, R3255, R3256, R3257, R3258, R3259, R3260, R3261, R3262, R3263, R3264, R3265, R3266, R3267, R3268, R3269, R3270, R3271, R3272, R3273, R3274, R3275, R3276, R3277, R3278, R3279, R3280, R3281, R3282, R3283, R3284, R3285, R3286, R3287, R3288, R3289, R3290, R3291, R3292, R3293, R3294, R3295, R3296, R3297, R3298, R3299, R33, R3300, R3301, R3302, R3303, R3304, R3305, R3306, R3307, R3308, R3309, R3310, R3311, R3312, R3313, R3314, R3315, R3316, R3317, R3318, R3319, R3320, R3321, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R3217 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R3216 += 1, R3217 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3217 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R3219 += 1 };
  s0 -> s2 [0, 65535] { R3219 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3218 += 1, R3219 += 1 };
  s0 -> s3 [65, 65] { R3219 += 1 };
  s0 -> s1 [66, 65535] { R3219 += 1 };
  s1 -> s1 [0, 64] { R3219 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3219 += 1 };
  s1 -> s1 [66, 65535] { R3219 += 1 };
  s2 -> s1 [0, 64] { R3219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3219 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R3219 += 1 };
  s2 -> s1 [66, 65535] { R3219 += 1 };
  s3 -> s3 [0, 65535] { R3219 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3220 += 1, R3221 += 1 };
  s0 -> s1 [0, 65535] { R3221 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R3221 += 1, R68 += 1, R69 += 1 };
  s1 -> s4 [0, 65535] { R3221 += 1 };
  s1 -> s1 [0, 65535] { R3221 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3221 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3221 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3221 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3223 += 1 };
  s0 -> s0 [0, 65535] { R3222 += 1, R3223 += 1 };
  s1 -> s1 [0, 65535] { R3223 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3225 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R3225 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3224 += 1, R3225 += 1 };
  s1 -> s1 [0, 65535] { R3225 += 1, R85 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3225 += 1 };
  s2 -> s1 [0, 65535] { R3225 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R3225 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3225 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3227 += 1 };
  s0 -> s0 [0, 65535] { R3226 += 1, R3227 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3227 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R3251 += 1 };
  s0 -> s0 [0, 65535] { R3250 += 1, R3251 += 1 };
  s0 -> s1 [45, 45] { R3251 += 1 };
  s0 -> s2 [46, 46] { R3251 += 1 };
  s0 -> s1 [48, 62] { R3251 += 1 };
  s0 -> s3 [65, 65] { R3251 += 1 };
  s0 -> s1 [66, 65535] { R3251 += 1 };
  s1 -> s1 [0, 43] { R3251 += 1 };
  s1 -> s1 [45, 45] { R3251 += 1 };
  s1 -> s2 [46, 46] { R3251 += 1 };
  s1 -> s1 [48, 62] { R3251 += 1 };
  s1 -> s3 [65, 65] { R3251 += 1 };
  s1 -> s1 [66, 65535] { R3251 += 1 };
  s2 -> s1 [0, 43] { R3251 += 1 };
  s2 -> s1 [45, 45] { R3251 += 1 };
  s2 -> s2 [46, 46] { R3251 += 1 };
  s2 -> s1 [48, 62] { R3251 += 1 };
  s2 -> s3 [65, 65] { R3251 += 1 };
  s2 -> s1 [66, 114] { R3251 += 1 };
  s2 -> s8 [115, 115] { R3251 += 1 };
  s2 -> s1 [116, 65535] { R3251 += 1 };
  s3 -> s3 [0, 43] { R3251 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3251 += 1 };
  s3 -> s4 [46, 46] { R3251 += 1 };
  s3 -> s3 [48, 62] { R3251 += 1 };
  s3 -> s3 [65, 65535] { R3251 += 1 };
  s4 -> s3 [0, 43] { R3251 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3251 += 1 };
  s4 -> s4 [46, 46] { R3251 += 1 };
  s4 -> s3 [48, 62] { R3251 += 1 };
  s4 -> s3 [65, 114] { R3251 += 1 };
  s4 -> s5 [115, 115] { R3251 += 1 };
  s4 -> s3 [116, 65535] { R3251 += 1 };
  s5 -> s3 [0, 43] { R3251 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3251 += 1 };
  s5 -> s4 [46, 46] { R3251 += 1 };
  s5 -> s3 [48, 62] { R3251 += 1 };
  s5 -> s3 [65, 110] { R3251 += 1 };
  s5 -> s6 [111, 111] { R3251 += 1 };
  s5 -> s3 [112, 65535] { R3251 += 1 };
  s6 -> s3 [0, 43] { R3251 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3251 += 1 };
  s6 -> s4 [46, 46] { R3251 += 1 };
  s6 -> s3 [48, 62] { R3251 += 1 };
  s6 -> s3 [65, 98] { R3251 += 1 };
  s6 -> s7 [99, 99] { R3251 += 1 };
  s6 -> s3 [100, 65535] { R3251 += 1 };
  s7 -> s3 [0, 43] { R3251 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3251 += 1 };
  s7 -> s4 [46, 46] { R3251 += 1 };
  s7 -> s3 [48, 62] { R3251 += 1 };
  s7 -> s3 [65, 106] { R3251 += 1 };
  s7 -> s3 [108, 65535] { R3251 += 1 };
  s8 -> s1 [0, 43] { R3251 += 1 };
  s8 -> s1 [45, 45] { R3251 += 1 };
  s8 -> s2 [46, 46] { R3251 += 1 };
  s8 -> s1 [48, 62] { R3251 += 1 };
  s8 -> s3 [65, 65] { R3251 += 1 };
  s8 -> s1 [66, 110] { R3251 += 1 };
  s8 -> s9 [111, 111] { R3251 += 1 };
  s8 -> s1 [112, 65535] { R3251 += 1 };
  s9 -> s1 [0, 43] { R3251 += 1 };
  s9 -> s1 [45, 45] { R3251 += 1 };
  s9 -> s2 [46, 46] { R3251 += 1 };
  s9 -> s1 [48, 62] { R3251 += 1 };
  s9 -> s3 [65, 65] { R3251 += 1 };
  s9 -> s1 [66, 98] { R3251 += 1 };
  s9 -> s10 [99, 99] { R3251 += 1 };
  s9 -> s1 [100, 65535] { R3251 += 1 };
  s10 -> s1 [0, 43] { R3251 += 1 };
  s10 -> s1 [45, 45] { R3251 += 1 };
  s10 -> s2 [46, 46] { R3251 += 1 };
  s10 -> s1 [48, 62] { R3251 += 1 };
  s10 -> s3 [65, 65] { R3251 += 1 };
  s10 -> s1 [66, 106] { R3251 += 1 };
  s10 -> s1 [108, 65535] { R3251 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R3253 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R3252 += 1, R3253 += 1 };
  s1 -> s1 [0, 65535] { R3253 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R3255 += 1 };
  s0 -> s2 [0, 65535] { R3255 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3254 += 1, R3255 += 1 };
  s0 -> s3 [58, 58] { R3255 += 1 };
  s0 -> s1 [59, 65535] { R3255 += 1 };
  s1 -> s1 [0, 57] { R3255 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3255 += 1 };
  s1 -> s1 [59, 65535] { R3255 += 1 };
  s2 -> s1 [0, 57] { R3255 += 1 };
  s2 -> s2 [0, 65535] { R3255 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3255 += 1 };
  s2 -> s1 [59, 65535] { R3255 += 1 };
  s3 -> s3 [0, 65535] { R3255 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R3257 += 1 };
  s0 -> s2 [0, 65535] { R3257 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R3256 += 1, R3257 += 1 };
  s0 -> s3 [43, 43] { R3257 += 1 };
  s0 -> s1 [44, 65535] { R3257 += 1 };
  s1 -> s1 [0, 42] { R3257 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3257 += 1 };
  s1 -> s1 [44, 65535] { R3257 += 1 };
  s2 -> s1 [0, 42] { R3257 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3257 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R3257 += 1 };
  s2 -> s1 [44, 65535] { R3257 += 1 };
  s3 -> s3 [0, 65535] { R3257 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3259 += 1 };
  s0 -> s0 [0, 65535] { R3258 += 1, R3259 += 1 };
  s0 -> s2 [0, 65535] { R3259 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R3259 += 1 };
  s0 -> s1 [66, 65535] { R3259 += 1 };
  s1 -> s1 [0, 64] { R3259 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3259 += 1 };
  s1 -> s1 [66, 65535] { R3259 += 1 };
  s2 -> s1 [0, 64] { R3259 += 1 };
  s2 -> s2 [0, 65535] { R3259 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3259 += 1 };
  s2 -> s1 [66, 65535] { R3259 += 1 };
  s3 -> s3 [0, 65535] { R3259 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R3261 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R3260 += 1, R3261 += 1 };
  s0 -> s2 [0, 65535] { R3261 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R3261 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R3261 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R3261 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3261 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R3261 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R3261 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3261 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R3261 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R3261 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3261 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3263 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R3263 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3262 += 1, R3263 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3263 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R3263 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3263 += 1, R41 += 1, R7 += 1 };
  s2 -> s4 [0, 65535] { R3263 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3263 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3265 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R3264 += 1, R3265 += 1 };
  s0 -> s2 [0, 65535] { R3265 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R3265 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3265 += 1 };
  s2 -> s1 [0, 65535] { R3265 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3265 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3265 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R3267 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R3267 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R3266 += 1, R3267 += 1 };
  s0 -> s3 [108, 108] { R3267 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R3267 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R3267 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3267 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R3267 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3267 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R3267 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R3267 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R3267 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R3267 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R3267 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R3267 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3267 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3267 += 1 };
  s5 -> s6 [99, 99] { R3267 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R3267 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R3267 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R3267 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R3267 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R3267 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R3267 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R3267 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R3267 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R3267 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R3267 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3267 += 1 };
  s8 -> s9 [104, 104] { R3267 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R3267 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R3267 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3267 += 1 };
  s9 -> s10 [111, 111] { R3267 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R3267 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R3267 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R3267 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R3267 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R3267 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R3267 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3267 += 1 };
  s11 -> s12 [116, 116] { R3267 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R3267 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R3267 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R3267 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R3268 += 1, R3269 += 1 };
  s0 -> s1 [0, 65535] { R3269 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R3269 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R3269 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3269 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3269 += 1 };
  s2 -> s2 [0, 65535] { R3269 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3269 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3271 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R3270 += 1, R3271 += 1 };
  s0 -> s2 [0, 65535] { R3271 += 1, R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R3271 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R3271 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3271 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3271 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3271 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3273 += 1 };
  s0 -> s0 [0, 65535] { R3272 += 1, R3273 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3273 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R3275 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R3275 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R3274 += 1, R3275 += 1 };
  s0 -> s3 [43, 43] { R3275 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R3275 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R3275 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R3275 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R3275 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R3275 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R3275 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R3275 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R3275 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R3275 += 1, R76 += 1, R77 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [43, 43] { R3275 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R3275 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R3275 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3275 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R3275 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3275 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3275 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3277 += 1, R3193 += 1 };
  s0 -> s2 [0, 65535] { R3277 += 1, R3192 += 1, R3193 += 1 };
  s0 -> s0 [0, 65535] { R3276 += 1, R3277 += 1 };
  s0 -> s1 [66, 65535] { R3277 += 1, R3193 += 1 };
  s1 -> s1 [0, 64] { R3277 += 1, R3193 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3277 += 1 };
  s1 -> s1 [66, 65535] { R3277 += 1, R3193 += 1 };
  s2 -> s1 [0, 64] { R3277 += 1, R3193 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3277 += 1, R3192 += 1, R3193 += 1 };
  s2 -> s1 [66, 65535] { R3277 += 1, R3193 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R3278 += 1, R3279 += 1 };
  s0 -> s1 [0, 65535] { R3279 += 1, R3195 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R3279 += 1, R3194 += 1, R3195 += 1 };
  s1 -> s4 [0, 65535] { R3279 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3279 += 1, R3195 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3279 += 1, R3195 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R3279 += 1, R3194 += 1, R3195 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3279 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R3281 += 1, R3197 += 1 };
  s0 -> s0 [0, 65535] { R3280 += 1, R3281 += 1 };
  s0 -> s2 [0, 65535] { R3281 += 1, R3196 += 1, R3197 += 1 };
  s0 -> s1 [80, 65535] { R3281 += 1, R3197 += 1 };
  s1 -> s1 [0, 65] { R3281 += 1, R3197 += 1 };
  s1 -> s1 [0, 65535] { R3281 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3281 += 1, R3197 += 1 };
  s2 -> s1 [0, 65] { R3281 += 1, R3197 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3281 += 1, R3196 += 1, R3197 += 1 };
  s2 -> s1 [80, 65535] { R3281 += 1, R3197 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R3283 += 1, R3198 += 1, R3199 += 1 };
  s0 -> s0 [0, 65535] { R3282 += 1, R3283 += 1 };
  s0 -> s2 [0, 65535] { R3283 += 1, R3199 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R3283 += 1, R3198 += 1, R3199 += 1 };
  s1 -> s2 [0, 65535] { R3283 += 1, R3199 += 1, R407 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3283 += 1 };
  s2 -> s2 [0, 65535] { R3283 += 1, R3199 += 1, R407 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3283 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R3285 += 1, R3201 += 1 };
  s0 -> s2 [0, 65535] { R3285 += 1, R3200 += 1, R3201 += 1 };
  s0 -> s0 [0, 65535] { R3284 += 1, R3285 += 1 };
  s0 -> s3 [0, 65535] { R3285 += 1, R3201 += 1, R409 += 1 };
  s0 -> s1 [81, 65535] { R3285 += 1, R3201 += 1 };
  s1 -> s1 [0, 79] { R3285 += 1, R3201 += 1 };
  s1 -> s1 [0, 65535] { R3285 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R3285 += 1, R3201 += 1 };
  s2 -> s1 [0, 79] { R3285 += 1, R3201 += 1 };
  s2 -> s2 [0, 65535] { R3285 += 1, R3200 += 1, R3201 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3285 += 1, R3201 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R3285 += 1, R3201 += 1 };
  s3 -> s1 [0, 79] { R3285 += 1, R3201 += 1 };
  s3 -> s4 [0, 65535] { R3285 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3285 += 1, R3201 += 1, R409 += 1 };
  s3 -> s1 [81, 65535] { R3285 += 1, R3201 += 1 };
  s4 -> s4 [0, 65535] { R3285 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R3287 += 1, R3203 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R3286 += 1, R3287 += 1 };
  s0 -> s2 [0, 65535] { R3287 += 1, R3202 += 1, R3203 += 1 };
  s0 -> s3 [0, 65535] { R3287 += 1, R3203 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R3287 += 1, R3203 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R3287 += 1, R3203 += 1, R413 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3287 += 1 };
  s1 -> s1 [0, 65535] { R3287 += 1, R3203 += 1 };
  s1 -> s1 [81, 65535] { R3287 += 1, R3203 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R3287 += 1, R3203 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3287 += 1, R3202 += 1, R3203 += 1 };
  s2 -> s3 [0, 65535] { R3287 += 1, R3203 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R3287 += 1, R3203 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R3287 += 1, R3203 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3287 += 1 };
  s3 -> s3 [0, 65535] { R3287 += 1, R3203 += 1, R412 += 1, R413 += 1 };
  s3 -> s1 [81, 65535] { R3287 += 1, R3203 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3287 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R3289 += 1, R3205 += 1, R418 += 1, R419 += 1 };
  s0 -> s2 [0, 65535] { R3289 += 1, R3204 += 1, R3205 += 1 };
  s0 -> s3 [0, 65535] { R3289 += 1, R3205 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R3288 += 1, R3289 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3289 += 1, R3205 += 1, R418 += 1, R419 += 1 };
  s1 -> s5 [0, 65535] { R3289 += 1 };
  s1 -> s6 [0, 65535] { R3289 += 1, R3205 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3289 += 1, R3205 += 1, R418 += 1, R419 += 1 };
  s2 -> s2 [0, 65535] { R3289 += 1, R3204 += 1, R3205 += 1 };
  s2 -> s3 [0, 65535] { R3289 += 1, R3205 += 1, R417 += 1, R418 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3289 += 1, R3205 += 1, R418 += 1, R419 += 1 };
  s3 -> s5 [0, 65535] { R3289 += 1 };
  s3 -> s3 [0, 65535] { R3289 += 1, R3205 += 1, R417 += 1, R418 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3289 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3289 += 1 };
  s6 -> s6 [0, 65535] { R3289 += 1, R3205 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R3291 += 1, R3206 += 1, R3207 += 1 };
  s0 -> s3 [0, 65535] { R3291 += 1, R3207 += 1, R422 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R3290 += 1, R3291 += 1 };
  s0 -> s1 [91, 107] { R3291 += 1, R3207 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R3291 += 1, R3207 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s1 -> s1 [0, 65535] { R3291 += 1, R3207 += 1 };
  s1 -> s5 [0, 65535] { R3291 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R3291 += 1, R3206 += 1, R3207 += 1 };
  s2 -> s3 [0, 65535] { R3291 += 1, R3207 += 1, R422 += 1, R423 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R3291 += 1, R3207 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R3291 += 1, R3207 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s3 -> s5 [0, 65535] { R3291 += 1 };
  s3 -> s3 [0, 65535] { R3291 += 1, R3207 += 1, R422 += 1, R423 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R3291 += 1, R3207 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R3291 += 1, R3207 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s4 -> s5 [0, 65535] { R3291 += 1 };
  s4 -> s4 [0, 65535] { R3291 += 1, R3207 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R3291 += 1, R3207 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R3291 += 1, R3207 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s5 -> s5 [0, 65535] { R3291 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s7 -> s5 [0, 65535] { R3291 += 1 };
  s7 -> s7 [0, 65535] { R3291 += 1, R3207 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3291 += 1, R3207 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R3291 += 1, R3207 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s8 -> s8 [0, 65535] { R3291 += 1, R3207 += 1 };
  s8 -> s5 [0, 65535] { R3291 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R3291 += 1, R3207 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R3291 += 1, R3207 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s9 -> s5 [0, 65535] { R3291 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3291 += 1, R3207 += 1 };
  s9 -> s1 [91, 107] { R3291 += 1, R3207 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R3291 += 1, R3207 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s10 -> s5 [0, 65535] { R3291 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R3291 += 1, R3207 += 1 };
  s10 -> s1 [91, 103] { R3291 += 1, R3207 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R3291 += 1, R3207 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s11 -> s5 [0, 65535] { R3291 += 1 };
  s11 -> s11 [0, 65535] { R3291 += 1, R3207 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R3291 += 1, R3207 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R3291 += 1, R3207 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s12 -> s12 [0, 65535] { R3291 += 1, R3207 += 1 };
  s12 -> s5 [0, 65535] { R3291 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R3291 += 1, R3207 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R3291 += 1, R3207 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s13 -> s5 [0, 65535] { R3291 += 1 };
  s13 -> s13 [0, 65535] { R3291 += 1, R3207 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R3291 += 1, R3207 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R3291 += 1, R3207 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R3291 += 1, R3207 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R3291 += 1, R3207 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R3293 += 1, R3209 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s0 [0, 65535] { R3292 += 1, R3293 += 1 };
  s0 -> s2 [0, 65535] { R3293 += 1, R3209 += 1 };
  s0 -> s3 [0, 65535] { R3293 += 1, R3208 += 1, R3209 += 1 };
  s1 -> s5 [0, 65535] { R3293 += 1 };
  s1 -> s1 [0, 65535] { R3293 += 1, R3209 += 1, R2492 += 1, R2493 += 1 };
  s1 -> s2 [0, 65535] { R3293 += 1, R3209 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3293 += 1 };
  s2 -> s2 [0, 65535] { R3293 += 1, R3209 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3293 += 1, R3209 += 1, R2492 += 1, R2493 += 1 };
  s3 -> s2 [0, 65535] { R3293 += 1, R3209 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3293 += 1, R3208 += 1, R3209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3293 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R3295 += 1, R3211 += 1 };
  s0 -> s0 [0, 65535] { R3294 += 1, R3295 += 1 };
  s0 -> s2 [0, 65535] { R3295 += 1, R3210 += 1, R3211 += 1 };
  s0 -> s3 [0, 65535] { R3295 += 1, R3211 += 1, R3184 += 1, R3185 += 1 };
  s1 -> s1 [0, 65535] { R3295 += 1, R3211 += 1 };
  s1 -> s4 [0, 65535] { R3295 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3295 += 1, R3211 += 1 };
  s2 -> s2 [0, 65535] { R3295 += 1, R3210 += 1, R3211 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3295 += 1, R3211 += 1, R3184 += 1, R3185 += 1 };
  s3 -> s1 [0, 65535] { R3295 += 1, R3211 += 1 };
  s3 -> s4 [0, 65535] { R3295 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3295 += 1, R3211 += 1, R3184 += 1, R3185 += 1 };
  s4 -> s4 [0, 65535] { R3295 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R3297 += 1, R3213 += 1 };
  s0 -> s2 [0, 65535] { R3297 += 1, R3212 += 1, R3213 += 1 };
  s0 -> s0 [0, 65535] { R3296 += 1, R3297 += 1 };
  s1 -> s1 [0, 65535] { R3297 += 1, R3213 += 1 };
  s1 -> s4 [0, 65535] { R3297 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3297 += 1, R3213 += 1 };
  s2 -> s2 [0, 65535] { R3297 += 1, R3212 += 1, R3213 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3297 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s0 -> s2 [0, 65535] { R3299 += 1, R3214 += 1, R3215 += 1 };
  s0 -> s3 [0, 65535] { R3299 += 1, R3215 += 1, R3189 += 1, R3190 += 1 };
  s0 -> s0 [0, 65535] { R3298 += 1, R3299 += 1 };
  s0 -> s4 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s0 -> s5 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s0 -> s1 [81, 65535] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s1 -> s1 [0, 79] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s1 -> s1 [0, 65535] { R3299 += 1, R3215 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R3299 += 1 };
  s1 -> s4 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s1 -> s5 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s1 -> s1 [81, 65535] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s2 -> s1 [0, 79] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s2 -> s2 [0, 65535] { R3299 += 1, R3214 += 1, R3215 += 1 };
  s2 -> s3 [0, 65535] { R3299 += 1, R3215 += 1, R3189 += 1, R3190 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s2 -> s5 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s2 -> s1 [81, 65535] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s3 -> s1 [0, 79] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s3 -> s3 [0, 65535] { R3299 += 1, R3215 += 1, R3189 += 1, R3190 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s8 [0, 65535] { R3299 += 1 };
  s3 -> s4 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s3 -> s5 [80, 80] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s3 -> s1 [81, 65535] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R3299 += 1, R3215 += 1 };
  s4 -> s8 [0, 65535] { R3299 += 1 };
  s5 -> s6 [0, 65535] { R3299 += 1, R3215 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R3299 += 1 };
  s5 -> s5 [0, 65535] { R3299 += 1, R3215 += 1, R3190 += 1, R3191 += 1 };
  s6 -> s6 [0, 65535] { R3299 += 1, R3215 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R3299 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R3299 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R3301 += 1, R3229 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R3301 += 1, R3228 += 1, R3229 += 1 };
  s0 -> s0 [0, 65535] { R3300 += 1, R3301 += 1 };
  s1 -> s1 [0, 65535] { R3301 += 1, R3229 += 1, R34 += 1 };
  s1 -> s4 [0, 65535] { R3301 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3301 += 1, R3229 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R3301 += 1, R3228 += 1, R3229 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3301 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3303 += 1, R3231 += 1 };
  s0 -> s2 [0, 65535] { R3303 += 1, R3230 += 1, R3231 += 1 };
  s0 -> s0 [0, 65535] { R3302 += 1, R3303 += 1 };
  s0 -> s3 [65, 65] { R3303 += 1, R3231 += 1 };
  s0 -> s4 [65, 65] { R3303 += 1, R3231 += 1 };
  s0 -> s5 [80, 80] { R3303 += 1, R3231 += 1 };
  s0 -> s1 [81, 65535] { R3303 += 1, R3231 += 1 };
  s1 -> s1 [0, 64] { R3303 += 1, R3231 += 1 };
  s1 -> s3 [65, 65] { R3303 += 1, R3231 += 1 };
  s1 -> s4 [65, 65] { R3303 += 1, R3231 += 1 };
  s1 -> s5 [80, 80] { R3303 += 1, R3231 += 1 };
  s1 -> s1 [81, 65535] { R3303 += 1, R3231 += 1 };
  s2 -> s1 [0, 64] { R3303 += 1, R3231 += 1 };
  s2 -> s2 [0, 65535] { R3303 += 1, R3230 += 1, R3231 += 1 };
  s2 -> s3 [65, 65] { R3303 += 1, R3231 += 1 };
  s2 -> s4 [65, 65] { R3303 += 1, R3231 += 1 };
  s2 -> s5 [80, 80] { R3303 += 1, R3231 += 1 };
  s2 -> s1 [81, 65535] { R3303 += 1, R3231 += 1 };
  s4 -> s4 [0, 65] { R3303 += 1, R3231 += 1 };
  s4 -> s8 [80, 80] { R3303 += 1, R3231 += 1 };
  s4 -> s4 [81, 65535] { R3303 += 1, R3231 += 1 };
  s5 -> s5 [0, 64] { R3303 += 1, R3231 += 1 };
  s5 -> s5 [0, 65535] { R3303 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3303 += 1, R3231 += 1 };
  s5 -> s8 [65, 65] { R3303 += 1, R3231 += 1 };
  s5 -> s5 [80, 65535] { R3303 += 1, R3231 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3303 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3303 += 1, R3231 += 1 };
  s8 -> s8 [0, 65535] { R3303 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R3303 += 1, R3231 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R3305 += 1, R3233 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R3305 += 1, R3232 += 1, R3233 += 1 };
  s0 -> s0 [0, 65535] { R3304 += 1, R3305 += 1 };
  s0 -> s3 [65, 65] { R3305 += 1, R3233 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R3305 += 1, R3233 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R3305 += 1, R3233 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R3305 += 1, R3233 += 1, R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3305 += 1 };
  s1 -> s3 [65, 65] { R3305 += 1, R3233 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R3305 += 1, R3233 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R3305 += 1, R3233 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R3305 += 1, R3233 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R3305 += 1, R3232 += 1, R3233 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3305 += 1, R3233 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R3305 += 1, R3233 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R3305 += 1, R3233 += 1, R406 += 1 };
  s3 -> s6 [0, 65535] { R3305 += 1 };
  s3 -> s3 [0, 65535] { R3305 += 1, R3233 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3305 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3305 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R3307 += 1, R3235 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R3307 += 1, R3234 += 1, R3235 += 1 };
  s0 -> s0 [0, 65535] { R3306 += 1, R3307 += 1 };
  s0 -> s3 [65, 65] { R3307 += 1, R3235 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R3307 += 1, R3235 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R3307 += 1, R3235 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R3307 += 1, R3235 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3307 += 1 };
  s1 -> s3 [65, 65] { R3307 += 1, R3235 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R3307 += 1, R3235 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R3307 += 1, R3235 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R3307 += 1, R3235 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3307 += 1, R3234 += 1, R3235 += 1 };
  s2 -> s3 [65, 65] { R3307 += 1, R3235 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R3307 += 1, R3235 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R3307 += 1, R3235 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3307 += 1 };
  s3 -> s3 [0, 65535] { R3307 += 1, R3235 += 1, R408 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3307 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3307 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R3309 += 1, R3236 += 1, R3237 += 1 };
  s0 -> s0 [0, 65535] { R3308 += 1, R3309 += 1 };
  s0 -> s3 [65, 65] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R3309 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R3309 += 1, R3236 += 1, R3237 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3309 += 1 };
  s4 -> s5 [0, 65535] { R3309 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3309 += 1, R3237 += 1, R410 += 1, R411 += 1 };
  s5 -> s5 [0, 65535] { R3309 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R3310 += 1, R3311 += 1 };
  s0 -> s2 [0, 65535] { R3311 += 1, R3238 += 1, R3239 += 1 };
  s0 -> s3 [65, 65] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R3311 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3311 += 1, R3238 += 1, R3239 += 1 };
  s2 -> s3 [65, 65] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535] { R3311 += 1 };
  s3 -> s3 [0, 65535] { R3311 += 1, R3239 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3311 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3311 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R3312 += 1, R3313 += 1 };
  s0 -> s2 [0, 65535] { R3313 += 1, R3240 += 1, R3241 += 1 };
  s0 -> s3 [65, 65] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3313 += 1 };
  s1 -> s3 [65, 65] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R3313 += 1, R3240 += 1, R3241 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535] { R3313 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3313 += 1, R3241 += 1, R420 += 1, R421 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3313 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3313 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s2 [0, 64] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s3 [0, 65535] { R3315 += 1, R3242 += 1, R3243 += 1 };
  s0 -> s0 [0, 65535] { R3314 += 1, R3315 += 1 };
  s0 -> s4 [65, 65] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s5 [65, 65] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s6 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s7 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s1 [66, 65535] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s2 [66, 65535] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s1 [0, 64] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R3315 += 1 };
  s1 -> s6 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s7 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [66, 65535] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s1 [0, 64] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s2 -> s4 [65, 65] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s2 -> s5 [65, 65] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s2 -> s6 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s7 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s1 [66, 65535] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s1 [0, 64] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s2 [0, 64] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s3 [0, 65535] { R3315 += 1, R3242 += 1, R3243 += 1 };
  s3 -> s4 [65, 65] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s5 [65, 65] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s6 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s7 [65, 65] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [66, 65535] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s2 [66, 65535] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s5 -> s5 [0, 65535] { R3315 += 1, R3243 += 1, R2488 += 1, R2489 += 1 };
  s5 -> s7 [0, 65535] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3315 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3315 += 1, R3243 += 1, R2489 += 1, R2490 += 1 };
  s7 -> s9 [0, 65535] { R3315 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3315 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s2 [0, 64] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s0 [0, 65535] { R3316 += 1, R3317 += 1 };
  s0 -> s3 [0, 65535] { R3317 += 1, R3244 += 1, R3245 += 1 };
  s0 -> s4 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s5 [65, 65] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s6 [65, 65] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s7 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s1 [66, 65535] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s2 [66, 65535] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s1 -> s1 [0, 64] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s1 [0, 65535] { R3317 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s7 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s1 [66, 65535] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s1 [0, 64] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s2 [0, 64] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s4 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s5 [65, 65] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s6 [65, 65] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s7 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s1 [66, 65535] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s2 [66, 65535] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s1 [0, 64] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s2 [0, 64] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s3 [0, 65535] { R3317 += 1, R3244 += 1, R3245 += 1 };
  s3 -> s4 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s5 [65, 65] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s6 [65, 65] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s7 [65, 65] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s1 [66, 65535] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s2 [66, 65535] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s4 -> s4 [0, 65535] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R3317 += 1 };
  s5 -> s4 [0, 65535] { R3317 += 1, R3245 += 1, R3181 += 1, R3182 += 1 };
  s5 -> s5 [0, 65535] { R3317 += 1, R3245 += 1, R3180 += 1, R3181 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3317 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3317 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3319 += 1, R3247 += 1 };
  s0 -> s0 [0, 65535] { R3318 += 1, R3319 += 1 };
  s0 -> s2 [0, 65535] { R3319 += 1, R3246 += 1, R3247 += 1 };
  s0 -> s3 [65, 65] { R3319 += 1, R3247 += 1 };
  s0 -> s4 [65, 65] { R3319 += 1, R3247 += 1 };
  s0 -> s1 [66, 65535] { R3319 += 1, R3247 += 1 };
  s1 -> s1 [0, 64] { R3319 += 1, R3247 += 1 };
  s1 -> s1 [0, 65535] { R3319 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3319 += 1, R3247 += 1 };
  s1 -> s4 [65, 65] { R3319 += 1, R3247 += 1 };
  s1 -> s1 [66, 65535] { R3319 += 1, R3247 += 1 };
  s2 -> s1 [0, 64] { R3319 += 1, R3247 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3319 += 1, R3246 += 1, R3247 += 1 };
  s2 -> s3 [65, 65] { R3319 += 1, R3247 += 1 };
  s2 -> s4 [65, 65] { R3319 += 1, R3247 += 1 };
  s2 -> s1 [66, 65535] { R3319 += 1, R3247 += 1 };
  s3 -> s3 [0, 65535] { R3319 += 1, R3247 += 1 };
  s3 -> s6 [0, 65535] { R3319 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3319 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3319 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s0 -> s0 [0, 65535] { R3320 += 1, R3321 += 1 };
  s0 -> s2 [0, 65535] { R3321 += 1, R3248 += 1, R3249 += 1 };
  s0 -> s3 [65, 65] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s0 -> s4 [65, 65] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s0 -> s1 [66, 65535] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s1 -> s1 [0, 64] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3321 += 1 };
  s1 -> s3 [65, 65] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s1 -> s4 [65, 65] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s1 -> s1 [66, 65535] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s2 -> s1 [0, 64] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3321 += 1, R3248 += 1, R3249 += 1 };
  s2 -> s3 [65, 65] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s2 -> s4 [65, 65] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s2 -> s1 [66, 65535] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3321 += 1, R3249 += 1, R3186 += 1, R3187 += 1 };
  s3 -> s6 [0, 65535] { R3321 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3321 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3321 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R3215 && R6 = R3321 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R3215 && R58 = 0 && R59 = R3215 && R60 = 0 && R61 = R3215 && R62 = 0 && R63 = R3321 && R64 = 0 && R65 = R3321 && R66 = 0 && R67 = R3321 && R3192 = 0 && R3193 = R3215 && R3194 = 0 && R3195 = R3215 && R3196 = 0 && R3197 = R3215 && R3198 = 0 && R3199 = R3215 && R3200 = 0 && R3201 = R3215 && R3202 = 0 && R3203 = R3215 && R3204 = 0 && R3205 = R3215 && R3206 = 0 && R3207 = R3215 && R3208 = 0 && R3209 = R3215 && R3210 = 0 && R3211 = R3215 && R3212 = 0 && R3213 = R3215 && R3214 = 0 && R3216 = 0 && R3217 = R3321 && R3218 = 0 && R3219 = R3321 && R3220 = 0 && R3221 = R3321 && R3222 = 0 && R3223 = R3321 && R3224 = 0 && R3225 = R3321 && R3226 = 0 && R3227 = R3321 && R3230 = 0 && R3231 = 0 && R3242 = 0 && R3243 = 0 && R3244 = 0 && R3245 = 0 && R3250 = 10 && R3251 = R3321 && R3252 = 10 && R3253 = R3321 && R3254 = 10 && R3255 = R3321 && R3256 = 10 && R3257 = R3321 && R3258 = 10 && R3259 = R3321 && R3260 = 10 && R3261 = R3321 && R3262 = 10 && R3263 = R3321 && R3264 = 10 && R3265 = R3321 && R3266 = 10 && R3267 = R3321 && R3268 = 10 && R3269 = R3321 && R3270 = 10 && R3271 = R3321 && R3272 = 10 && R3273 = R3321 && R3274 = 10 && R3275 = R3321 && R3276 = 10 && R3277 = R3321 && R3278 = 10 && R3279 = R3321 && R3280 = 10 && R3281 = R3321 && R3282 = 10 && R3283 = R3321 && R3284 = 10 && R3285 = R3321 && R3286 = 10 && R3287 = R3321 && R3288 = 10 && R3289 = R3321 && R3290 = 10 && R3291 = R3321 && R3292 = 10 && R3293 = R3321 && R3294 = 10 && R3295 = R3321 && R3296 = 10 && R3297 = R3321 && R3298 = 10 && R3299 = R3321 && R3300 = 10 && R3301 = R3321 && R3302 = 10 && R3303 = R3321 && R3304 = 10 && R3305 = R3321 && R3306 = 10 && R3307 = R3321 && R3308 = 10 && R3309 = R3321 && R3310 = 10 && R3311 = R3321 && R3312 = 10 && R3313 = R3321 && R3314 = 10 && R3315 = R3321 && R3316 = 10 && R3317 = R3321 && R3318 = 10 && R3319 = R3321 && R3320 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2493 + R2490 + R3191 + R3188 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R3215 && 9 < R3321 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R2491 + R2488 = 0 && R2492 + R2489 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R2491 + R2488 != 0 || R407 + R406 + -1*R2492 + -1*R2489 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R3228 = 0 && R3229 = 0)) && (R34 = 0 || (R3232 = 0 && R3233 = 0)) && (R34 = 0 || (R3234 = 0 && R3235 = 0)) && (R34 = 0 || (R3236 = 0 && R3237 = 0)) && (R34 = 0 || (R3238 = 0 && R3239 = 0)) && (R34 = 0 || (R3240 = 0 && R3241 = 0)) && (R34 = 0 || (R3246 = 0 && R3247 = 0)) && (R34 = 0 || (R3248 = 0 && R3249 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R2491 + R2488 = 0 || R407 + R406 < 1) && (R3185 + R3182 = 0 || (R3183 + R3180 = 0 && R3184 + R3181 = 0)) && (R3185 + R3182 = 0 || (R3189 + R3186 = 0 && R3190 + R3187 = 0));
// End of Parikh automata intersection problem
