// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2488, R2489, R2490, R2491, R2492, R2493, R27, R28, R3, R31, R3180, R3181, R3182, R3183, R3184, R3185, R32, R33, R34, R3458, R3459, R3460, R3461, R3462, R3463, R3464, R3465, R3466, R3467, R3468, R3469, R3470, R3471, R3472, R3473, R3474, R3475, R3476, R3477, R3478, R3479, R3480, R3481, R3482, R3483, R3484, R3485, R3486, R3487, R3488, R3489, R3490, R3491, R3492, R3493, R3494, R3495, R3496, R3497, R3498, R3499, R35, R3500, R3501, R3502, R3503, R3504, R3505, R3506, R3507, R3508, R3509, R3510, R3511, R3512, R3513, R3514, R3515, R3516, R3517, R3518, R3519, R3520, R3521, R3522, R3523, R3524, R3525, R3526, R3527, R3528, R3529, R3530, R3531, R3532, R3533, R3534, R3535, R3536, R3537, R3538, R3539, R3540, R3541, R3542, R3543, R3544, R3545, R3546, R3547, R3548, R3549, R3550, R3551, R3552, R3553, R3554, R3555, R3556, R3557, R3558, R3559, R3560, R3561, R3562, R3563, R3564, R3565, R3566, R3567, R3568, R3569, R3570, R3571, R3572, R3573, R3574, R3575, R3576, R3577, R3578, R3579, R3580, R3581, R3582, R3583, R3584, R3585, R3586, R3587, R3588, R3589, R3590, R3591, R3592, R3593, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R3488 += 1, R3489 += 1 };
  s0 -> s1 [0, 65535] { R3489 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3489 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R3491 += 1 };
  s0 -> s2 [0, 65535] { R3491 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3490 += 1, R3491 += 1 };
  s0 -> s3 [65, 65] { R3491 += 1 };
  s0 -> s1 [66, 65535] { R3491 += 1 };
  s1 -> s1 [0, 64] { R3491 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3491 += 1 };
  s1 -> s1 [66, 65535] { R3491 += 1 };
  s2 -> s1 [0, 64] { R3491 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3491 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R3491 += 1 };
  s2 -> s1 [66, 65535] { R3491 += 1 };
  s3 -> s3 [0, 65535] { R3491 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3492 += 1, R3493 += 1 };
  s0 -> s1 [0, 65535] { R3493 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R3493 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R3493 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R3493 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3493 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535] { R3493 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3493 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3494 += 1, R3495 += 1 };
  s0 -> s1 [0, 65535] { R3495 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3495 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3497 += 1, R84 += 1, R85 += 1 };
  s0 -> s0 [0, 65535] { R3496 += 1, R3497 += 1 };
  s0 -> s2 [0, 65535] { R3497 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R3497 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3497 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535] { R3497 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3497 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R3497 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3498 += 1, R3499 += 1 };
  s0 -> s1 [0, 65535] { R3499 += 1 };
  s1 -> s1 [0, 65535] { R3499 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R3523 += 1 };
  s0 -> s0 [0, 65535] { R3522 += 1, R3523 += 1 };
  s0 -> s1 [45, 45] { R3523 += 1 };
  s0 -> s2 [46, 46] { R3523 += 1 };
  s0 -> s1 [48, 62] { R3523 += 1 };
  s0 -> s3 [65, 65] { R3523 += 1 };
  s0 -> s1 [66, 65535] { R3523 += 1 };
  s1 -> s1 [0, 43] { R3523 += 1 };
  s1 -> s1 [45, 45] { R3523 += 1 };
  s1 -> s2 [46, 46] { R3523 += 1 };
  s1 -> s1 [48, 62] { R3523 += 1 };
  s1 -> s3 [65, 65] { R3523 += 1 };
  s1 -> s1 [66, 65535] { R3523 += 1 };
  s2 -> s1 [0, 43] { R3523 += 1 };
  s2 -> s1 [45, 45] { R3523 += 1 };
  s2 -> s2 [46, 46] { R3523 += 1 };
  s2 -> s1 [48, 62] { R3523 += 1 };
  s2 -> s3 [65, 65] { R3523 += 1 };
  s2 -> s1 [66, 114] { R3523 += 1 };
  s2 -> s8 [115, 115] { R3523 += 1 };
  s2 -> s1 [116, 65535] { R3523 += 1 };
  s3 -> s3 [0, 43] { R3523 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3523 += 1 };
  s3 -> s4 [46, 46] { R3523 += 1 };
  s3 -> s3 [48, 62] { R3523 += 1 };
  s3 -> s3 [65, 65535] { R3523 += 1 };
  s4 -> s3 [0, 43] { R3523 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3523 += 1 };
  s4 -> s4 [46, 46] { R3523 += 1 };
  s4 -> s3 [48, 62] { R3523 += 1 };
  s4 -> s3 [65, 114] { R3523 += 1 };
  s4 -> s5 [115, 115] { R3523 += 1 };
  s4 -> s3 [116, 65535] { R3523 += 1 };
  s5 -> s3 [0, 43] { R3523 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3523 += 1 };
  s5 -> s4 [46, 46] { R3523 += 1 };
  s5 -> s3 [48, 62] { R3523 += 1 };
  s5 -> s3 [65, 110] { R3523 += 1 };
  s5 -> s6 [111, 111] { R3523 += 1 };
  s5 -> s3 [112, 65535] { R3523 += 1 };
  s6 -> s3 [0, 43] { R3523 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3523 += 1 };
  s6 -> s4 [46, 46] { R3523 += 1 };
  s6 -> s3 [48, 62] { R3523 += 1 };
  s6 -> s3 [65, 98] { R3523 += 1 };
  s6 -> s7 [99, 99] { R3523 += 1 };
  s6 -> s3 [100, 65535] { R3523 += 1 };
  s7 -> s3 [0, 43] { R3523 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3523 += 1 };
  s7 -> s4 [46, 46] { R3523 += 1 };
  s7 -> s3 [48, 62] { R3523 += 1 };
  s7 -> s3 [65, 106] { R3523 += 1 };
  s7 -> s3 [108, 65535] { R3523 += 1 };
  s8 -> s1 [0, 43] { R3523 += 1 };
  s8 -> s1 [45, 45] { R3523 += 1 };
  s8 -> s2 [46, 46] { R3523 += 1 };
  s8 -> s1 [48, 62] { R3523 += 1 };
  s8 -> s3 [65, 65] { R3523 += 1 };
  s8 -> s1 [66, 110] { R3523 += 1 };
  s8 -> s9 [111, 111] { R3523 += 1 };
  s8 -> s1 [112, 65535] { R3523 += 1 };
  s9 -> s1 [0, 43] { R3523 += 1 };
  s9 -> s1 [45, 45] { R3523 += 1 };
  s9 -> s2 [46, 46] { R3523 += 1 };
  s9 -> s1 [48, 62] { R3523 += 1 };
  s9 -> s3 [65, 65] { R3523 += 1 };
  s9 -> s1 [66, 98] { R3523 += 1 };
  s9 -> s10 [99, 99] { R3523 += 1 };
  s9 -> s1 [100, 65535] { R3523 += 1 };
  s10 -> s1 [0, 43] { R3523 += 1 };
  s10 -> s1 [45, 45] { R3523 += 1 };
  s10 -> s2 [46, 46] { R3523 += 1 };
  s10 -> s1 [48, 62] { R3523 += 1 };
  s10 -> s3 [65, 65] { R3523 += 1 };
  s10 -> s1 [66, 106] { R3523 += 1 };
  s10 -> s1 [108, 65535] { R3523 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R3525 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R3524 += 1, R3525 += 1 };
  s1 -> s1 [0, 65535] { R3525 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R3527 += 1 };
  s0 -> s2 [0, 65535] { R3527 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3526 += 1, R3527 += 1 };
  s0 -> s3 [58, 58] { R3527 += 1 };
  s0 -> s1 [59, 65535] { R3527 += 1 };
  s1 -> s1 [0, 57] { R3527 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3527 += 1 };
  s1 -> s1 [59, 65535] { R3527 += 1 };
  s2 -> s1 [0, 57] { R3527 += 1 };
  s2 -> s2 [0, 65535] { R3527 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3527 += 1 };
  s2 -> s1 [59, 65535] { R3527 += 1 };
  s3 -> s3 [0, 65535] { R3527 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R3529 += 1 };
  s0 -> s0 [0, 65535] { R3528 += 1, R3529 += 1 };
  s0 -> s2 [0, 65535] { R3529 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R3529 += 1 };
  s0 -> s1 [44, 65535] { R3529 += 1 };
  s1 -> s1 [0, 42] { R3529 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3529 += 1 };
  s1 -> s1 [44, 65535] { R3529 += 1 };
  s2 -> s1 [0, 42] { R3529 += 1 };
  s2 -> s2 [0, 65535] { R3529 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R3529 += 1 };
  s2 -> s1 [44, 65535] { R3529 += 1 };
  s3 -> s3 [0, 65535] { R3529 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3531 += 1 };
  s0 -> s0 [0, 65535] { R3530 += 1, R3531 += 1 };
  s0 -> s2 [0, 65535] { R3531 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R3531 += 1 };
  s0 -> s1 [66, 65535] { R3531 += 1 };
  s1 -> s1 [0, 64] { R3531 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3531 += 1 };
  s1 -> s1 [66, 65535] { R3531 += 1 };
  s2 -> s1 [0, 64] { R3531 += 1 };
  s2 -> s2 [0, 65535] { R3531 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3531 += 1 };
  s2 -> s1 [66, 65535] { R3531 += 1 };
  s3 -> s3 [0, 65535] { R3531 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R3533 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R3533 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R3532 += 1, R3533 += 1 };
  s0 -> s3 [91, 91] { R3533 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R3533 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R3533 += 1 };
  s1 -> s1 [0, 65535] { R3533 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3533 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R3533 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3533 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R3533 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R3533 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3533 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3535 += 1, R41 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R3535 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R3534 += 1, R3535 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3535 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R3535 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3535 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R3535 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3535 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R3536 += 1, R3537 += 1 };
  s0 -> s1 [0, 65535] { R3537 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R3537 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R3537 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3537 += 1 };
  s2 -> s1 [0, 65535] { R3537 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3537 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3537 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R3539 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R3539 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R3538 += 1, R3539 += 1 };
  s0 -> s3 [108, 108] { R3539 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R3539 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R3539 += 1 };
  s1 -> s1 [0, 65535] { R3539 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R3539 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3539 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R3539 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R3539 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R3539 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3539 += 1 };
  s3 -> s5 [111, 111] { R3539 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R3539 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3539 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3539 += 1 };
  s5 -> s6 [99, 99] { R3539 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R3539 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R3539 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3539 += 1 };
  s6 -> s7 [97, 97] { R3539 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R3539 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R3539 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3539 += 1 };
  s7 -> s8 [108, 108] { R3539 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R3539 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R3539 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R3539 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R3539 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R3539 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R3539 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3539 += 1 };
  s9 -> s10 [111, 111] { R3539 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R3539 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R3539 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3539 += 1 };
  s10 -> s11 [115, 115] { R3539 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R3539 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R3539 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3539 += 1 };
  s11 -> s12 [116, 116] { R3539 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R3539 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R3539 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R3539 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R3541 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R3540 += 1, R3541 += 1 };
  s0 -> s2 [0, 65535] { R3541 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R3541 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3541 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3541 += 1 };
  s2 -> s2 [0, 65535] { R3541 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3541 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R3542 += 1, R3543 += 1 };
  s0 -> s1 [0, 65535] { R3543 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R3543 += 1, R74 += 1, R75 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3543 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535] { R3543 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3543 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R3543 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3543 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R3544 += 1, R3545 += 1 };
  s0 -> s1 [0, 65535] { R3545 += 1 };
  s1 -> s1 [0, 65535] { R3545 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R3547 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R3546 += 1, R3547 += 1 };
  s0 -> s2 [0, 65535] { R3547 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R3547 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R3547 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R3547 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R3547 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R3547 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R3547 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R3547 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R3547 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R3547 += 1, R77 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3547 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R3547 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R3547 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R3547 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R3547 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3547 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3547 += 1, R77 += 1, R42 += 1 };
  s5 -> s5 [0, 65535] { R3547 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3549 += 1, R3465 += 1 };
  s0 -> s0 [0, 65535] { R3548 += 1, R3549 += 1 };
  s0 -> s2 [0, 65535] { R3549 += 1, R3464 += 1, R3465 += 1 };
  s0 -> s1 [66, 65535] { R3549 += 1, R3465 += 1 };
  s1 -> s1 [0, 64] { R3549 += 1, R3465 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3549 += 1 };
  s1 -> s1 [66, 65535] { R3549 += 1, R3465 += 1 };
  s2 -> s1 [0, 64] { R3549 += 1, R3465 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3549 += 1, R3464 += 1, R3465 += 1 };
  s2 -> s1 [66, 65535] { R3549 += 1, R3465 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R3550 += 1, R3551 += 1 };
  s0 -> s1 [0, 65535] { R3551 += 1, R3467 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R3551 += 1, R3466 += 1, R3467 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3551 += 1, R3467 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R3551 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3551 += 1, R3467 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R3551 += 1, R3466 += 1, R3467 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3551 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R3553 += 1, R3469 += 1 };
  s0 -> s0 [0, 65535] { R3552 += 1, R3553 += 1 };
  s0 -> s2 [0, 65535] { R3553 += 1, R3468 += 1, R3469 += 1 };
  s0 -> s1 [80, 65535] { R3553 += 1, R3469 += 1 };
  s1 -> s1 [0, 65] { R3553 += 1, R3469 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3553 += 1 };
  s1 -> s1 [80, 65535] { R3553 += 1, R3469 += 1 };
  s2 -> s1 [0, 65] { R3553 += 1, R3469 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3553 += 1, R3468 += 1, R3469 += 1 };
  s2 -> s1 [80, 65535] { R3553 += 1, R3469 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R3554 += 1, R3555 += 1 };
  s0 -> s1 [0, 65535] { R3555 += 1, R3471 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R3555 += 1, R3470 += 1, R3471 += 1 };
  s1 -> s4 [0, 65535] { R3555 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3555 += 1, R3471 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3555 += 1, R3471 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R3555 += 1, R3470 += 1, R3471 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3555 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R3557 += 1, R3473 += 1 };
  s0 -> s2 [0, 65535] { R3557 += 1, R3473 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R3556 += 1, R3557 += 1 };
  s0 -> s3 [0, 65535] { R3557 += 1, R3472 += 1, R3473 += 1 };
  s0 -> s1 [81, 65535] { R3557 += 1, R3473 += 1 };
  s1 -> s1 [0, 79] { R3557 += 1, R3473 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3557 += 1 };
  s1 -> s1 [81, 65535] { R3557 += 1, R3473 += 1 };
  s2 -> s1 [0, 79] { R3557 += 1, R3473 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3557 += 1, R3473 += 1, R409 += 1 };
  s2 -> s5 [0, 65535] { R3557 += 1 };
  s2 -> s1 [81, 65535] { R3557 += 1, R3473 += 1 };
  s3 -> s1 [0, 79] { R3557 += 1, R3473 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3557 += 1, R3473 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R3557 += 1, R3472 += 1, R3473 += 1 };
  s3 -> s1 [81, 65535] { R3557 += 1, R3473 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3557 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R3559 += 1, R3475 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R3559 += 1, R3475 += 1, R412 += 1, R413 += 1 };
  s0 -> s3 [0, 65535] { R3559 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s0 [0, 65535] { R3558 += 1, R3559 += 1 };
  s0 -> s1 [81, 65535] { R3559 += 1, R3475 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R3559 += 1, R3475 += 1, R413 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3559 += 1, R3475 += 1 };
  s1 -> s5 [0, 65535] { R3559 += 1 };
  s1 -> s1 [81, 65535] { R3559 += 1, R3475 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R3559 += 1, R3475 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3559 += 1, R3475 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535] { R3559 += 1 };
  s2 -> s1 [81, 65535] { R3559 += 1, R3475 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R3559 += 1, R3475 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3559 += 1, R3475 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R3559 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s1 [81, 65535] { R3559 += 1, R3475 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3559 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R3560 += 1, R3561 += 1 };
  s0 -> s1 [0, 65535] { R3561 += 1, R3477 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R3561 += 1, R3476 += 1, R3477 += 1 };
  s0 -> s3 [0, 65535] { R3561 += 1, R3477 += 1, R418 += 1, R419 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3561 += 1, R3477 += 1, R417 += 1, R418 += 1 };
  s1 -> s6 [0, 65535] { R3561 += 1 };
  s1 -> s3 [0, 65535] { R3561 += 1, R3477 += 1, R418 += 1, R419 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3561 += 1, R3477 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R3561 += 1, R3476 += 1, R3477 += 1 };
  s2 -> s3 [0, 65535] { R3561 += 1, R3477 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3561 += 1, R3477 += 1 };
  s3 -> s6 [0, 65535] { R3561 += 1 };
  s3 -> s3 [0, 65535] { R3561 += 1, R3477 += 1, R418 += 1, R419 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3561 += 1, R3477 += 1 };
  s5 -> s6 [0, 65535] { R3561 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3561 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R3563 += 1, R3479 += 1, R422 += 1, R423 += 1 };
  s0 -> s3 [0, 65535] { R3563 += 1, R3478 += 1, R3479 += 1 };
  s0 -> s0 [0, 65535] { R3562 += 1, R3563 += 1 };
  s0 -> s1 [91, 107] { R3563 += 1, R3479 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R3563 += 1, R3479 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3563 += 1, R3479 += 1 };
  s1 -> s6 [0, 65535] { R3563 += 1 };
  s1 -> s1 [91, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R3563 += 1, R3479 += 1, R422 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3563 += 1 };
  s2 -> s1 [91, 107] { R3563 += 1, R3479 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R3563 += 1, R3479 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s3 -> s2 [0, 65535] { R3563 += 1, R3479 += 1, R422 += 1, R423 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3563 += 1, R3478 += 1, R3479 += 1 };
  s3 -> s1 [91, 107] { R3563 += 1, R3479 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R3563 += 1, R3479 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3563 += 1, R3479 += 1 };
  s4 -> s6 [0, 65535] { R3563 += 1 };
  s4 -> s1 [91, 110] { R3563 += 1, R3479 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R3563 += 1, R3479 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3563 += 1 };
  s7 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3563 += 1 };
  s7 -> s7 [0, 65535] { R3563 += 1, R3479 += 1 };
  s7 -> s1 [91, 98] { R3563 += 1, R3479 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R3563 += 1, R3479 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R3563 += 1, R3479 += 1 };
  s8 -> s6 [0, 65535] { R3563 += 1 };
  s8 -> s1 [91, 96] { R3563 += 1, R3479 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R3563 += 1, R3479 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3563 += 1 };
  s9 -> s9 [0, 65535] { R3563 += 1, R3479 += 1 };
  s9 -> s1 [91, 107] { R3563 += 1, R3479 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R3563 += 1, R3479 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3563 += 1 };
  s10 -> s10 [0, 65535] { R3563 += 1, R3479 += 1 };
  s10 -> s1 [91, 103] { R3563 += 1, R3479 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R3563 += 1, R3479 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s11 -> s11 [0, 65535] { R3563 += 1, R3479 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R3563 += 1 };
  s11 -> s1 [91, 110] { R3563 += 1, R3479 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R3563 += 1, R3479 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R3563 += 1, R3479 += 1 };
  s12 -> s6 [0, 65535] { R3563 += 1 };
  s12 -> s1 [91, 114] { R3563 += 1, R3479 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R3563 += 1, R3479 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3563 += 1 };
  s13 -> s13 [0, 65535] { R3563 += 1, R3479 += 1 };
  s13 -> s1 [91, 115] { R3563 += 1, R3479 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R3563 += 1, R3479 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R3563 += 1, R3479 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R3563 += 1, R3479 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R3565 += 1, R3481 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s2 [0, 65535] { R3565 += 1, R3481 += 1 };
  s0 -> s0 [0, 65535] { R3564 += 1, R3565 += 1 };
  s0 -> s3 [0, 65535] { R3565 += 1, R3480 += 1, R3481 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3565 += 1 };
  s1 -> s1 [0, 65535] { R3565 += 1, R3481 += 1, R2492 += 1, R2493 += 1 };
  s1 -> s2 [0, 65535] { R3565 += 1, R3481 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3565 += 1 };
  s2 -> s2 [0, 65535] { R3565 += 1, R3481 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3565 += 1, R3481 += 1, R2492 += 1, R2493 += 1 };
  s3 -> s2 [0, 65535] { R3565 += 1, R3481 += 1 };
  s3 -> s3 [0, 65535] { R3565 += 1, R3480 += 1, R3481 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3565 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R3567 += 1, R3482 += 1, R3483 += 1 };
  s0 -> s0 [0, 65535] { R3566 += 1, R3567 += 1 };
  s0 -> s2 [0, 65535] { R3567 += 1, R3483 += 1 };
  s0 -> s3 [0, 65535] { R3567 += 1, R3483 += 1, R3184 += 1, R3185 += 1 };
  s1 -> s1 [0, 65535] { R3567 += 1, R3482 += 1, R3483 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3567 += 1, R3483 += 1 };
  s1 -> s3 [0, 65535] { R3567 += 1, R3483 += 1, R3184 += 1, R3185 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3567 += 1, R3483 += 1 };
  s2 -> s5 [0, 65535] { R3567 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3567 += 1, R3483 += 1 };
  s3 -> s5 [0, 65535] { R3567 += 1 };
  s3 -> s3 [0, 65535] { R3567 += 1, R3483 += 1, R3184 += 1, R3185 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3567 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s0 [0, 65535] { R3568 += 1, R3569 += 1 };
  s0 -> s1 [0, 65535] { R3569 += 1, R3485 += 1 };
  s0 -> s2 [0, 65535] { R3569 += 1, R3484 += 1, R3485 += 1 };
  s1 -> s4 [0, 65535] { R3569 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3569 += 1, R3485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3569 += 1, R3485 += 1 };
  s2 -> s2 [0, 65535] { R3569 += 1, R3484 += 1, R3485 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3569 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R3571 += 1, R3486 += 1, R3487 += 1 };
  s0 -> s0 [0, 65535] { R3570 += 1, R3571 += 1 };
  s0 -> s2 [0, 65535] { R3571 += 1, R3487 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3571 += 1, R3486 += 1, R3487 += 1 };
  s1 -> s2 [0, 65535] { R3571 += 1, R3487 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3571 += 1 };
  s2 -> s2 [0, 65535] { R3571 += 1, R3487 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3571 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R3573 += 1, R3500 += 1, R3501 += 1 };
  s0 -> s2 [0, 65535] { R3573 += 1, R3501 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R3572 += 1, R3573 += 1 };
  s1 -> s1 [0, 65535] { R3573 += 1, R3500 += 1, R3501 += 1 };
  s1 -> s2 [0, 65535] { R3573 += 1, R3501 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3573 += 1, R3501 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R3573 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3573 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3575 += 1, R3503 += 1 };
  s0 -> s2 [0, 65535] { R3575 += 1, R3502 += 1, R3503 += 1 };
  s0 -> s0 [0, 65535] { R3574 += 1, R3575 += 1 };
  s0 -> s3 [65, 65] { R3575 += 1, R3503 += 1 };
  s0 -> s4 [65, 65] { R3575 += 1, R3503 += 1 };
  s0 -> s5 [80, 80] { R3575 += 1, R3503 += 1 };
  s0 -> s1 [81, 65535] { R3575 += 1, R3503 += 1 };
  s1 -> s1 [0, 64] { R3575 += 1, R3503 += 1 };
  s1 -> s3 [65, 65] { R3575 += 1, R3503 += 1 };
  s1 -> s4 [65, 65] { R3575 += 1, R3503 += 1 };
  s1 -> s5 [80, 80] { R3575 += 1, R3503 += 1 };
  s1 -> s1 [81, 65535] { R3575 += 1, R3503 += 1 };
  s2 -> s1 [0, 64] { R3575 += 1, R3503 += 1 };
  s2 -> s2 [0, 65535] { R3575 += 1, R3502 += 1, R3503 += 1 };
  s2 -> s3 [65, 65] { R3575 += 1, R3503 += 1 };
  s2 -> s4 [65, 65] { R3575 += 1, R3503 += 1 };
  s2 -> s5 [80, 80] { R3575 += 1, R3503 += 1 };
  s2 -> s1 [81, 65535] { R3575 += 1, R3503 += 1 };
  s4 -> s4 [0, 65] { R3575 += 1, R3503 += 1 };
  s4 -> s8 [80, 80] { R3575 += 1, R3503 += 1 };
  s4 -> s4 [81, 65535] { R3575 += 1, R3503 += 1 };
  s5 -> s5 [0, 64] { R3575 += 1, R3503 += 1 };
  s5 -> s5 [0, 65535] { R3575 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3575 += 1, R3503 += 1 };
  s5 -> s8 [65, 65] { R3575 += 1, R3503 += 1 };
  s5 -> s5 [80, 65535] { R3575 += 1, R3503 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3575 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3575 += 1, R3503 += 1 };
  s8 -> s8 [0, 65535] { R3575 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R3575 += 1, R3503 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R3577 += 1, R3505 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R3576 += 1, R3577 += 1 };
  s0 -> s2 [0, 65535] { R3577 += 1, R3504 += 1, R3505 += 1 };
  s0 -> s3 [65, 65] { R3577 += 1, R3505 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R3577 += 1, R3505 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R3577 += 1, R3505 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R3577 += 1, R3505 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R3577 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3577 += 1, R3505 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R3577 += 1, R3505 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R3577 += 1, R3505 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R3577 += 1, R3505 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R3577 += 1, R3504 += 1, R3505 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3577 += 1, R3505 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R3577 += 1, R3505 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R3577 += 1, R3505 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R3577 += 1, R3505 += 1, R406 += 1 };
  s3 -> s6 [0, 65535] { R3577 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3577 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3577 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R3579 += 1, R3507 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R3578 += 1, R3579 += 1 };
  s0 -> s2 [0, 65535] { R3579 += 1, R3506 += 1, R3507 += 1 };
  s0 -> s3 [65, 65] { R3579 += 1, R3507 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R3579 += 1, R3507 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R3579 += 1, R3507 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R3579 += 1, R3507 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R3579 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3579 += 1, R3507 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R3579 += 1, R3507 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R3579 += 1, R3507 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R3579 += 1, R3507 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3579 += 1, R3506 += 1, R3507 += 1 };
  s2 -> s3 [65, 65] { R3579 += 1, R3507 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R3579 += 1, R3507 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R3579 += 1, R3507 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R3579 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3579 += 1, R3507 += 1, R408 += 1 };
  s4 -> s6 [0, 65535] { R3579 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3579 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R3581 += 1, R3508 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R3580 += 1, R3581 += 1 };
  s0 -> s3 [65, 65] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3581 += 1 };
  s1 -> s3 [65, 65] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3581 += 1, R3508 += 1, R3509 += 1 };
  s2 -> s3 [65, 65] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3581 += 1 };
  s3 -> s3 [0, 65535] { R3581 += 1, R3509 += 1, R410 += 1, R411 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3581 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3581 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R3582 += 1, R3583 += 1 };
  s0 -> s2 [0, 65535] { R3583 += 1, R3510 += 1, R3511 += 1 };
  s0 -> s3 [65, 65] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R3583 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3583 += 1, R3510 += 1, R3511 += 1 };
  s2 -> s3 [65, 65] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R3583 += 1, R3511 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535] { R3583 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3583 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3583 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R3585 += 1, R3512 += 1, R3513 += 1 };
  s0 -> s0 [0, 65535] { R3584 += 1, R3585 += 1 };
  s0 -> s3 [65, 65] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 65535] { R3585 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R3585 += 1, R3512 += 1, R3513 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s3 -> s3 [0, 65535] { R3585 += 1, R3513 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535] { R3585 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3585 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3585 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [0, 64] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s3 [0, 65535] { R3587 += 1, R3514 += 1, R3515 += 1 };
  s0 -> s0 [0, 65535] { R3586 += 1, R3587 += 1 };
  s0 -> s4 [65, 65] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s5 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s6 [65, 65] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s7 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s1 [66, 65535] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [66, 65535] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [0, 64] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [0, 64] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s4 [65, 65] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s5 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s6 [65, 65] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s7 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [66, 65535] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [66, 65535] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3587 += 1 };
  s2 -> s5 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s7 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [0, 64] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [0, 64] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s3 [0, 65535] { R3587 += 1, R3514 += 1, R3515 += 1 };
  s3 -> s4 [65, 65] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s5 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s6 [65, 65] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s7 [65, 65] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [66, 65535] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [66, 65535] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s4 -> s4 [0, 65535] { R3587 += 1, R3515 += 1, R2488 += 1, R2489 += 1 };
  s4 -> s7 [0, 65535] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3587 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R3587 += 1 };
  s7 -> s7 [0, 65535] { R3587 += 1, R3515 += 1, R2489 += 1, R2490 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3587 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s2 [0, 64] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s3 [0, 65535] { R3589 += 1, R3516 += 1, R3517 += 1 };
  s0 -> s0 [0, 65535] { R3588 += 1, R3589 += 1 };
  s0 -> s4 [65, 65] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s5 [65, 65] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s6 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s7 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s1 [66, 65535] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s2 [66, 65535] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s1 -> s1 [0, 64] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s1 [0, 65535] { R3589 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s7 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s1 [66, 65535] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s1 [0, 64] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s2 [0, 64] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s4 [65, 65] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s5 [65, 65] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s6 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s7 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s1 [66, 65535] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s2 [66, 65535] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s1 [0, 64] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s2 [0, 64] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s3 [0, 65535] { R3589 += 1, R3516 += 1, R3517 += 1 };
  s3 -> s4 [65, 65] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s5 [65, 65] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s6 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s7 [65, 65] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s1 [66, 65535] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s2 [66, 65535] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s5 -> s5 [0, 65535] { R3589 += 1, R3517 += 1, R3180 += 1, R3181 += 1 };
  s5 -> s6 [0, 65535] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3589 += 1, R3517 += 1, R3181 += 1, R3182 += 1 };
  s6 -> s9 [0, 65535] { R3589 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3589 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3589 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3591 += 1, R3519 += 1 };
  s0 -> s2 [0, 65535] { R3591 += 1, R3518 += 1, R3519 += 1 };
  s0 -> s0 [0, 65535] { R3590 += 1, R3591 += 1 };
  s0 -> s3 [65, 65] { R3591 += 1, R3519 += 1 };
  s0 -> s4 [65, 65] { R3591 += 1, R3519 += 1 };
  s0 -> s1 [66, 65535] { R3591 += 1, R3519 += 1 };
  s1 -> s1 [0, 64] { R3591 += 1, R3519 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3591 += 1 };
  s1 -> s3 [65, 65] { R3591 += 1, R3519 += 1 };
  s1 -> s4 [65, 65] { R3591 += 1, R3519 += 1 };
  s1 -> s1 [66, 65535] { R3591 += 1, R3519 += 1 };
  s2 -> s1 [0, 64] { R3591 += 1, R3519 += 1 };
  s2 -> s2 [0, 65535] { R3591 += 1, R3518 += 1, R3519 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3591 += 1, R3519 += 1 };
  s2 -> s4 [65, 65] { R3591 += 1, R3519 += 1 };
  s2 -> s1 [66, 65535] { R3591 += 1, R3519 += 1 };
  s3 -> s3 [0, 65535] { R3591 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3591 += 1 };
  s4 -> s4 [0, 65535] { R3591 += 1, R3519 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3591 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s0 -> s2 [0, 64] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s3 [0, 65535] { R3593 += 1, R3520 += 1, R3521 += 1 };
  s0 -> s0 [0, 65535] { R3592 += 1, R3593 += 1 };
  s0 -> s4 [65, 65] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s5 [65, 65] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s0 -> s6 [65, 65] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s7 [65, 65] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s0 -> s2 [66, 79] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s1 [66, 65535] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s0 -> s8 [80, 80] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s0 -> s2 [81, 65535] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s1 [0, 64] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s1 -> s2 [0, 64] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s4 [65, 65] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s5 [65, 65] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s1 -> s6 [65, 65] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s7 [65, 65] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s1 -> s2 [66, 79] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s1 [66, 65535] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s1 -> s8 [80, 80] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s1 -> s2 [81, 65535] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s2 -> s2 [0, 64] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s2 -> s4 [65, 65] { R3593 += 1, R3521 += 1 };
  s2 -> s6 [65, 65] { R3593 += 1, R3521 += 1 };
  s2 -> s2 [66, 79] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s2 -> s2 [66, 65535] { R3593 += 1, R3521 += 1 };
  s2 -> s8 [80, 80] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s2 -> s2 [81, 65535] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s1 [0, 64] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s3 -> s2 [0, 64] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s3 [0, 65535] { R3593 += 1, R3520 += 1, R3521 += 1 };
  s3 -> s4 [65, 65] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s5 [65, 65] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s3 -> s6 [65, 65] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s7 [65, 65] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s3 -> s2 [66, 79] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s1 [66, 65535] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s3 -> s8 [80, 80] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s3 -> s2 [81, 65535] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s5 -> s6 [0, 79] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s5 -> s5 [0, 65535] { R3593 += 1, R3521 += 1, R3458 += 1, R3459 += 1 };
  s5 -> s10 [80, 80] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s5 -> s6 [81, 65535] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s6 -> s6 [0, 79] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s6 -> s6 [0, 65535] { R3593 += 1, R3521 += 1 };
  s6 -> s10 [80, 80] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s6 -> s6 [81, 65535] { R3593 += 1, R3521 += 1, R3459 += 1, R3460 += 1 };
  s8 -> s8 [0, 64] { R3593 += 1, R3521 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3593 += 1 };
  s8 -> s10 [65, 65] { R3593 += 1, R3521 += 1 };
  s8 -> s11 [65, 65] { R3593 += 1, R3521 += 1 };
  s8 -> s8 [66, 65535] { R3593 += 1, R3521 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R3593 += 1 };
  s10 -> s10 [0, 65535] { R3593 += 1, R3521 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3593 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3593 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R3487 && R6 = R3593 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R3487 && R58 = 0 && R59 = R3487 && R60 = 0 && R61 = R3487 && R62 = 0 && R63 = R3593 && R64 = 0 && R65 = R3593 && R66 = 0 && R67 = R3593 && R3464 = 0 && R3465 = R3487 && R3466 = 0 && R3467 = R3487 && R3468 = 0 && R3469 = R3487 && R3470 = 0 && R3471 = R3487 && R3472 = 0 && R3473 = R3487 && R3474 = 0 && R3475 = R3487 && R3476 = 0 && R3477 = R3487 && R3478 = 0 && R3479 = R3487 && R3480 = 0 && R3481 = R3487 && R3482 = 0 && R3483 = R3487 && R3484 = 0 && R3485 = R3487 && R3486 = 0 && R3488 = 0 && R3489 = R3593 && R3490 = 0 && R3491 = R3593 && R3492 = 0 && R3493 = R3593 && R3494 = 0 && R3495 = R3593 && R3496 = 0 && R3497 = R3593 && R3498 = 0 && R3499 = R3593 && R3502 = 0 && R3503 = 0 && R3514 = 0 && R3515 = 0 && R3516 = 0 && R3517 = 0 && R3520 = 0 && R3521 = 0 && R3522 = 10 && R3523 = R3593 && R3524 = 10 && R3525 = R3593 && R3526 = 10 && R3527 = R3593 && R3528 = 10 && R3529 = R3593 && R3530 = 10 && R3531 = R3593 && R3532 = 10 && R3533 = R3593 && R3534 = 10 && R3535 = R3593 && R3536 = 10 && R3537 = R3593 && R3538 = 10 && R3539 = R3593 && R3540 = 10 && R3541 = R3593 && R3542 = 10 && R3543 = R3593 && R3544 = 10 && R3545 = R3593 && R3546 = 10 && R3547 = R3593 && R3548 = 10 && R3549 = R3593 && R3550 = 10 && R3551 = R3593 && R3552 = 10 && R3553 = R3593 && R3554 = 10 && R3555 = R3593 && R3556 = 10 && R3557 = R3593 && R3558 = 10 && R3559 = R3593 && R3560 = 10 && R3561 = R3593 && R3562 = 10 && R3563 = R3593 && R3564 = 10 && R3565 = R3593 && R3566 = 10 && R3567 = R3593 && R3568 = 10 && R3569 = R3593 && R3570 = 10 && R3571 = R3593 && R3572 = 10 && R3573 = R3593 && R3574 = 10 && R3575 = R3593 && R3576 = 10 && R3577 = R3593 && R3578 = 10 && R3579 = R3593 && R3580 = 10 && R3581 = R3593 && R3582 = 10 && R3583 = R3593 && R3584 = 10 && R3585 = R3593 && R3586 = 10 && R3587 = R3593 && R3588 = 10 && R3589 = R3593 && R3590 = 10 && R3591 = R3593 && R3592 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2493 + R2490 + R3463 + R3460 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R3487 && 9 < R3593 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R2491 + R2488 = 0 && R2492 + R2489 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R2491 + R2488 != 0 || R407 + R406 + -1*R2492 + -1*R2489 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R3500 = 0 && R3501 = 0)) && (R34 = 0 || (R3504 = 0 && R3505 = 0)) && (R34 = 0 || (R3506 = 0 && R3507 = 0)) && (R34 = 0 || (R3508 = 0 && R3509 = 0)) && (R34 = 0 || (R3510 = 0 && R3511 = 0)) && (R34 = 0 || (R3512 = 0 && R3513 = 0)) && (R34 = 0 || (R3518 = 0 && R3519 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R2491 + R2488 = 0 || R407 + R406 < 1) && (R3185 + R3182 = 0 || (R3183 + R3180 = 0 && R3184 + R3181 = 0)) && (R3185 + R3182 = 0 || (R3461 + R3458 = 0 && R3462 + R3459 = 0));
// End of Parikh automata intersection problem
