// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2488, R2489, R2490, R2491, R2492, R2493, R27, R28, R3, R31, R3180, R3181, R3182, R3183, R3184, R3185, R32, R33, R34, R35, R3594, R3595, R3596, R3597, R3598, R3599, R36, R3600, R3601, R3602, R3603, R3604, R3605, R3606, R3607, R3608, R3609, R3610, R3611, R3612, R3613, R3614, R3615, R3616, R3617, R3618, R3619, R3620, R3621, R3622, R3623, R3624, R3625, R3626, R3627, R3628, R3629, R3630, R3631, R3632, R3633, R3634, R3635, R3636, R3637, R3638, R3639, R3640, R3641, R3642, R3643, R3644, R3645, R3646, R3647, R3648, R3649, R3650, R3651, R3652, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R3665, R3666, R3667, R3668, R3669, R3670, R3671, R3672, R3673, R3674, R3675, R3676, R3677, R3678, R3679, R3680, R3681, R3682, R3683, R3684, R3685, R3686, R3687, R3688, R3689, R3690, R3691, R3692, R3693, R3694, R3695, R3696, R3697, R3698, R3699, R37, R3700, R3701, R3702, R3703, R3704, R3705, R3706, R3707, R3708, R3709, R3710, R3711, R3712, R3713, R3714, R3715, R3716, R3717, R3718, R3719, R3720, R3721, R3722, R3723, R3724, R3725, R3726, R3727, R3728, R3729, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R3625 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R3624 += 1, R3625 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3625 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R3627 += 1 };
  s0 -> s0 [0, 65535] { R3626 += 1, R3627 += 1 };
  s0 -> s2 [0, 65535] { R3627 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3627 += 1 };
  s0 -> s1 [66, 65535] { R3627 += 1 };
  s1 -> s1 [0, 64] { R3627 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3627 += 1 };
  s1 -> s1 [66, 65535] { R3627 += 1 };
  s2 -> s1 [0, 64] { R3627 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3627 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R3627 += 1 };
  s2 -> s1 [66, 65535] { R3627 += 1 };
  s3 -> s3 [0, 65535] { R3627 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3629 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R3628 += 1, R3629 += 1 };
  s0 -> s2 [0, 65535] { R3629 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3629 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R3629 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3629 += 1 };
  s2 -> s2 [0, 65535] { R3629 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3629 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3630 += 1, R3631 += 1 };
  s0 -> s1 [0, 65535] { R3631 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3631 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3632 += 1, R3633 += 1 };
  s0 -> s1 [0, 65535] { R3633 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R3633 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R3633 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535] { R3633 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3633 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R3633 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3633 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3635 += 1 };
  s0 -> s0 [0, 65535] { R3634 += 1, R3635 += 1 };
  s1 -> s1 [0, 65535] { R3635 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R3659 += 1 };
  s0 -> s0 [0, 65535] { R3658 += 1, R3659 += 1 };
  s0 -> s1 [45, 45] { R3659 += 1 };
  s0 -> s2 [46, 46] { R3659 += 1 };
  s0 -> s1 [48, 62] { R3659 += 1 };
  s0 -> s3 [65, 65] { R3659 += 1 };
  s0 -> s1 [66, 65535] { R3659 += 1 };
  s1 -> s1 [0, 43] { R3659 += 1 };
  s1 -> s1 [45, 45] { R3659 += 1 };
  s1 -> s2 [46, 46] { R3659 += 1 };
  s1 -> s1 [48, 62] { R3659 += 1 };
  s1 -> s3 [65, 65] { R3659 += 1 };
  s1 -> s1 [66, 65535] { R3659 += 1 };
  s2 -> s1 [0, 43] { R3659 += 1 };
  s2 -> s1 [45, 45] { R3659 += 1 };
  s2 -> s2 [46, 46] { R3659 += 1 };
  s2 -> s1 [48, 62] { R3659 += 1 };
  s2 -> s3 [65, 65] { R3659 += 1 };
  s2 -> s1 [66, 114] { R3659 += 1 };
  s2 -> s8 [115, 115] { R3659 += 1 };
  s2 -> s1 [116, 65535] { R3659 += 1 };
  s3 -> s3 [0, 43] { R3659 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3659 += 1 };
  s3 -> s4 [46, 46] { R3659 += 1 };
  s3 -> s3 [48, 62] { R3659 += 1 };
  s3 -> s3 [65, 65535] { R3659 += 1 };
  s4 -> s3 [0, 43] { R3659 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3659 += 1 };
  s4 -> s4 [46, 46] { R3659 += 1 };
  s4 -> s3 [48, 62] { R3659 += 1 };
  s4 -> s3 [65, 114] { R3659 += 1 };
  s4 -> s5 [115, 115] { R3659 += 1 };
  s4 -> s3 [116, 65535] { R3659 += 1 };
  s5 -> s3 [0, 43] { R3659 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3659 += 1 };
  s5 -> s4 [46, 46] { R3659 += 1 };
  s5 -> s3 [48, 62] { R3659 += 1 };
  s5 -> s3 [65, 110] { R3659 += 1 };
  s5 -> s6 [111, 111] { R3659 += 1 };
  s5 -> s3 [112, 65535] { R3659 += 1 };
  s6 -> s3 [0, 43] { R3659 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3659 += 1 };
  s6 -> s4 [46, 46] { R3659 += 1 };
  s6 -> s3 [48, 62] { R3659 += 1 };
  s6 -> s3 [65, 98] { R3659 += 1 };
  s6 -> s7 [99, 99] { R3659 += 1 };
  s6 -> s3 [100, 65535] { R3659 += 1 };
  s7 -> s3 [0, 43] { R3659 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3659 += 1 };
  s7 -> s4 [46, 46] { R3659 += 1 };
  s7 -> s3 [48, 62] { R3659 += 1 };
  s7 -> s3 [65, 106] { R3659 += 1 };
  s7 -> s3 [108, 65535] { R3659 += 1 };
  s8 -> s1 [0, 43] { R3659 += 1 };
  s8 -> s1 [45, 45] { R3659 += 1 };
  s8 -> s2 [46, 46] { R3659 += 1 };
  s8 -> s1 [48, 62] { R3659 += 1 };
  s8 -> s3 [65, 65] { R3659 += 1 };
  s8 -> s1 [66, 110] { R3659 += 1 };
  s8 -> s9 [111, 111] { R3659 += 1 };
  s8 -> s1 [112, 65535] { R3659 += 1 };
  s9 -> s1 [0, 43] { R3659 += 1 };
  s9 -> s1 [45, 45] { R3659 += 1 };
  s9 -> s2 [46, 46] { R3659 += 1 };
  s9 -> s1 [48, 62] { R3659 += 1 };
  s9 -> s3 [65, 65] { R3659 += 1 };
  s9 -> s1 [66, 98] { R3659 += 1 };
  s9 -> s10 [99, 99] { R3659 += 1 };
  s9 -> s1 [100, 65535] { R3659 += 1 };
  s10 -> s1 [0, 43] { R3659 += 1 };
  s10 -> s1 [45, 45] { R3659 += 1 };
  s10 -> s2 [46, 46] { R3659 += 1 };
  s10 -> s1 [48, 62] { R3659 += 1 };
  s10 -> s3 [65, 65] { R3659 += 1 };
  s10 -> s1 [66, 106] { R3659 += 1 };
  s10 -> s1 [108, 65535] { R3659 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3660 += 1, R3661 += 1 };
  s0 -> s1 [0, 65535] { R3661 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3661 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R3663 += 1 };
  s0 -> s2 [0, 65535] { R3663 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3662 += 1, R3663 += 1 };
  s0 -> s3 [58, 58] { R3663 += 1 };
  s0 -> s1 [59, 65535] { R3663 += 1 };
  s1 -> s1 [0, 57] { R3663 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3663 += 1 };
  s1 -> s1 [59, 65535] { R3663 += 1 };
  s2 -> s1 [0, 57] { R3663 += 1 };
  s2 -> s2 [0, 65535] { R3663 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3663 += 1 };
  s2 -> s1 [59, 65535] { R3663 += 1 };
  s3 -> s3 [0, 65535] { R3663 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R3665 += 1 };
  s0 -> s0 [0, 65535] { R3664 += 1, R3665 += 1 };
  s0 -> s2 [0, 65535] { R3665 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R3665 += 1 };
  s0 -> s1 [44, 65535] { R3665 += 1 };
  s1 -> s1 [0, 42] { R3665 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R3665 += 1 };
  s1 -> s1 [44, 65535] { R3665 += 1 };
  s2 -> s1 [0, 42] { R3665 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3665 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R3665 += 1 };
  s2 -> s1 [44, 65535] { R3665 += 1 };
  s3 -> s3 [0, 65535] { R3665 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3667 += 1 };
  s0 -> s2 [0, 65535] { R3667 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3666 += 1, R3667 += 1 };
  s0 -> s3 [65, 65] { R3667 += 1 };
  s0 -> s1 [66, 65535] { R3667 += 1 };
  s1 -> s1 [0, 64] { R3667 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3667 += 1 };
  s1 -> s1 [66, 65535] { R3667 += 1 };
  s2 -> s1 [0, 64] { R3667 += 1 };
  s2 -> s2 [0, 65535] { R3667 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3667 += 1 };
  s2 -> s1 [66, 65535] { R3667 += 1 };
  s3 -> s3 [0, 65535] { R3667 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R3669 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R3668 += 1, R3669 += 1 };
  s0 -> s2 [0, 65535] { R3669 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R3669 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R3669 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R3669 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3669 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R3669 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3669 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R3669 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R3669 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R3669 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3669 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3671 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R3670 += 1, R3671 += 1 };
  s0 -> s2 [0, 65535] { R3671 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3671 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R3671 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3671 += 1 };
  s2 -> s2 [0, 65535] { R3671 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3671 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3673 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R3672 += 1, R3673 += 1 };
  s0 -> s2 [0, 65535] { R3673 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3673 += 1, R56 += 1, R57 += 1 };
  s1 -> s2 [0, 65535] { R3673 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3673 += 1 };
  s2 -> s2 [0, 65535] { R3673 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3673 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R3675 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R3674 += 1, R3675 += 1 };
  s0 -> s2 [0, 65535] { R3675 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R3675 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R3675 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R3675 += 1 };
  s1 -> s1 [0, 65535] { R3675 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R3675 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3675 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R3675 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R3675 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R3675 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3675 += 1 };
  s3 -> s5 [111, 111] { R3675 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R3675 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R3675 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3675 += 1 };
  s5 -> s6 [99, 99] { R3675 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R3675 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R3675 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3675 += 1 };
  s6 -> s7 [97, 97] { R3675 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R3675 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R3675 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R3675 += 1 };
  s7 -> s8 [108, 108] { R3675 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R3675 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R3675 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R3675 += 1 };
  s8 -> s9 [104, 104] { R3675 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R3675 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R3675 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R3675 += 1 };
  s9 -> s10 [111, 111] { R3675 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R3675 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R3675 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R3675 += 1 };
  s10 -> s11 [115, 115] { R3675 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R3675 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R3675 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R3675 += 1 };
  s11 -> s12 [116, 116] { R3675 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R3675 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R3675 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R3675 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R3677 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R3677 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R3676 += 1, R3677 += 1 };
  s1 -> s1 [0, 65535] { R3677 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3677 += 1 };
  s2 -> s1 [0, 65535] { R3677 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3677 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3677 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R3679 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R3679 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R3678 += 1, R3679 += 1 };
  s1 -> s1 [0, 65535] { R3679 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R3679 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3679 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535] { R3679 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3679 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R3681 += 1 };
  s0 -> s0 [0, 65535] { R3680 += 1, R3681 += 1 };
  s1 -> s1 [0, 65535] { R3681 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R3683 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R3682 += 1, R3683 += 1 };
  s0 -> s2 [0, 65535] { R3683 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R3683 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R3683 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R3683 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R3683 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3683 += 1 };
  s1 -> s3 [43, 43] { R3683 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R3683 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R3683 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R3683 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3683 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R3683 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R3683 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R3683 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R3683 += 1 };
  s3 -> s3 [0, 65535] { R3683 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3683 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3683 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3685 += 1, R3601 += 1 };
  s0 -> s0 [0, 65535] { R3684 += 1, R3685 += 1 };
  s0 -> s2 [0, 65535] { R3685 += 1, R3600 += 1, R3601 += 1 };
  s0 -> s1 [66, 65535] { R3685 += 1, R3601 += 1 };
  s1 -> s1 [0, 64] { R3685 += 1, R3601 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3685 += 1 };
  s1 -> s1 [66, 65535] { R3685 += 1, R3601 += 1 };
  s2 -> s1 [0, 64] { R3685 += 1, R3601 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3685 += 1, R3600 += 1, R3601 += 1 };
  s2 -> s1 [66, 65535] { R3685 += 1, R3601 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R3687 += 1, R3602 += 1, R3603 += 1 };
  s0 -> s0 [0, 65535] { R3686 += 1, R3687 += 1 };
  s0 -> s2 [0, 65535] { R3687 += 1, R3603 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R3687 += 1, R3602 += 1, R3603 += 1 };
  s1 -> s2 [0, 65535] { R3687 += 1, R3603 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3687 += 1 };
  s2 -> s2 [0, 65535] { R3687 += 1, R3603 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3687 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R3689 += 1, R3605 += 1 };
  s0 -> s2 [0, 65535] { R3689 += 1, R3604 += 1, R3605 += 1 };
  s0 -> s0 [0, 65535] { R3688 += 1, R3689 += 1 };
  s0 -> s1 [80, 65535] { R3689 += 1, R3605 += 1 };
  s1 -> s1 [0, 65] { R3689 += 1, R3605 += 1 };
  s1 -> s1 [0, 65535] { R3689 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3689 += 1, R3605 += 1 };
  s2 -> s1 [0, 65] { R3689 += 1, R3605 += 1 };
  s2 -> s2 [0, 65535] { R3689 += 1, R3604 += 1, R3605 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3689 += 1, R3605 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R3691 += 1, R3606 += 1, R3607 += 1 };
  s0 -> s0 [0, 65535] { R3690 += 1, R3691 += 1 };
  s0 -> s2 [0, 65535] { R3691 += 1, R3607 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R3691 += 1, R3606 += 1, R3607 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3691 += 1, R3607 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3691 += 1, R3607 += 1, R407 += 1 };
  s2 -> s4 [0, 65535] { R3691 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3691 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R3693 += 1, R3609 += 1 };
  s0 -> s2 [0, 65535] { R3693 += 1, R3609 += 1, R409 += 1 };
  s0 -> s3 [0, 65535] { R3693 += 1, R3608 += 1, R3609 += 1 };
  s0 -> s0 [0, 65535] { R3692 += 1, R3693 += 1 };
  s0 -> s1 [81, 65535] { R3693 += 1, R3609 += 1 };
  s1 -> s1 [0, 79] { R3693 += 1, R3609 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3693 += 1 };
  s1 -> s1 [81, 65535] { R3693 += 1, R3609 += 1 };
  s2 -> s1 [0, 79] { R3693 += 1, R3609 += 1 };
  s2 -> s2 [0, 65535] { R3693 += 1, R3609 += 1, R409 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3693 += 1 };
  s2 -> s1 [81, 65535] { R3693 += 1, R3609 += 1 };
  s3 -> s1 [0, 79] { R3693 += 1, R3609 += 1 };
  s3 -> s2 [0, 65535] { R3693 += 1, R3609 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R3693 += 1, R3608 += 1, R3609 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3693 += 1, R3609 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3693 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R3695 += 1, R3611 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R3695 += 1, R3611 += 1, R412 += 1, R413 += 1 };
  s0 -> s3 [0, 65535] { R3695 += 1, R3610 += 1, R3611 += 1 };
  s0 -> s0 [0, 65535] { R3694 += 1, R3695 += 1 };
  s0 -> s1 [81, 65535] { R3695 += 1, R3611 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R3695 += 1, R3611 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R3695 += 1, R3611 += 1 };
  s1 -> s5 [0, 65535] { R3695 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R3695 += 1, R3611 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R3695 += 1, R3611 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R3695 += 1, R3611 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535] { R3695 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3695 += 1, R3611 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R3695 += 1, R3611 += 1, R413 += 1 };
  s3 -> s2 [0, 65535] { R3695 += 1, R3611 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R3695 += 1, R3610 += 1, R3611 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3695 += 1, R3611 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3695 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R3696 += 1, R3697 += 1 };
  s0 -> s1 [0, 65535] { R3697 += 1, R3612 += 1, R3613 += 1 };
  s0 -> s2 [0, 65535] { R3697 += 1, R3613 += 1, R418 += 1, R419 += 1 };
  s0 -> s3 [0, 65535] { R3697 += 1, R3613 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R3697 += 1, R3612 += 1, R3613 += 1 };
  s1 -> s2 [0, 65535] { R3697 += 1, R3613 += 1, R418 += 1, R419 += 1 };
  s1 -> s3 [0, 65535] { R3697 += 1, R3613 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3697 += 1, R3613 += 1 };
  s2 -> s2 [0, 65535] { R3697 += 1, R3613 += 1, R418 += 1, R419 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3697 += 1 };
  s3 -> s2 [0, 65535] { R3697 += 1, R3613 += 1, R418 += 1, R419 += 1 };
  s3 -> s3 [0, 65535] { R3697 += 1, R3613 += 1, R417 += 1, R418 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3697 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3697 += 1 };
  s6 -> s6 [0, 65535] { R3697 += 1, R3613 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3697 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R3699 += 1, R3615 += 1, R422 += 1, R423 += 1 };
  s0 -> s3 [0, 65535] { R3699 += 1, R3614 += 1, R3615 += 1 };
  s0 -> s0 [0, 65535] { R3698 += 1, R3699 += 1 };
  s0 -> s1 [91, 107] { R3699 += 1, R3615 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R3699 += 1, R3615 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3699 += 1 };
  s1 -> s1 [0, 65535] { R3699 += 1, R3615 += 1 };
  s1 -> s1 [91, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R3699 += 1, R3615 += 1, R422 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3699 += 1 };
  s2 -> s1 [91, 107] { R3699 += 1, R3615 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R3699 += 1, R3615 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s3 -> s2 [0, 65535] { R3699 += 1, R3615 += 1, R422 += 1, R423 += 1 };
  s3 -> s3 [0, 65535] { R3699 += 1, R3614 += 1, R3615 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [91, 107] { R3699 += 1, R3615 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R3699 += 1, R3615 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s4 -> s4 [0, 65535] { R3699 += 1, R3615 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3699 += 1 };
  s4 -> s1 [91, 110] { R3699 += 1, R3615 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R3699 += 1, R3615 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3699 += 1 };
  s7 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R3699 += 1, R3615 += 1 };
  s7 -> s6 [0, 65535] { R3699 += 1 };
  s7 -> s1 [91, 98] { R3699 += 1, R3615 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R3699 += 1, R3615 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3699 += 1 };
  s8 -> s8 [0, 65535] { R3699 += 1, R3615 += 1 };
  s8 -> s1 [91, 96] { R3699 += 1, R3615 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R3699 += 1, R3615 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3699 += 1 };
  s9 -> s9 [0, 65535] { R3699 += 1, R3615 += 1 };
  s9 -> s1 [91, 107] { R3699 += 1, R3615 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R3699 += 1, R3615 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R3699 += 1, R3615 += 1 };
  s10 -> s6 [0, 65535] { R3699 += 1 };
  s10 -> s1 [91, 103] { R3699 += 1, R3615 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R3699 += 1, R3615 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R3699 += 1, R3615 += 1 };
  s11 -> s6 [0, 65535] { R3699 += 1 };
  s11 -> s1 [91, 110] { R3699 += 1, R3615 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R3699 += 1, R3615 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s12 -> s12 [0, 65535] { R3699 += 1, R3615 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3699 += 1 };
  s12 -> s1 [91, 114] { R3699 += 1, R3615 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R3699 += 1, R3615 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s13 -> s13 [0, 65535] { R3699 += 1, R3615 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3699 += 1 };
  s13 -> s1 [91, 115] { R3699 += 1, R3615 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R3699 += 1, R3615 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R3699 += 1, R3615 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R3699 += 1, R3615 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R3700 += 1, R3701 += 1 };
  s0 -> s1 [0, 65535] { R3701 += 1, R3617 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s2 [0, 65535] { R3701 += 1, R3616 += 1, R3617 += 1 };
  s0 -> s3 [0, 65535] { R3701 += 1, R3617 += 1 };
  s1 -> s1 [0, 65535] { R3701 += 1, R3617 += 1, R2492 += 1, R2493 += 1 };
  s1 -> s5 [0, 65535] { R3701 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R3701 += 1, R3617 += 1 };
  s2 -> s1 [0, 65535] { R3701 += 1, R3617 += 1, R2492 += 1, R2493 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3701 += 1, R3616 += 1, R3617 += 1 };
  s2 -> s3 [0, 65535] { R3701 += 1, R3617 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3701 += 1 };
  s3 -> s3 [0, 65535] { R3701 += 1, R3617 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3701 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R3702 += 1, R3703 += 1 };
  s0 -> s1 [0, 65535] { R3703 += 1, R3619 += 1 };
  s0 -> s2 [0, 65535] { R3703 += 1, R3619 += 1, R3184 += 1, R3185 += 1 };
  s0 -> s3 [0, 65535] { R3703 += 1, R3618 += 1, R3619 += 1 };
  s1 -> s1 [0, 65535] { R3703 += 1, R3619 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3703 += 1 };
  s2 -> s1 [0, 65535] { R3703 += 1, R3619 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3703 += 1, R3619 += 1, R3184 += 1, R3185 += 1 };
  s2 -> s5 [0, 65535] { R3703 += 1 };
  s3 -> s1 [0, 65535] { R3703 += 1, R3619 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3703 += 1, R3619 += 1, R3184 += 1, R3185 += 1 };
  s3 -> s3 [0, 65535] { R3703 += 1, R3618 += 1, R3619 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3703 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R3705 += 1, R3621 += 1 };
  s0 -> s0 [0, 65535] { R3704 += 1, R3705 += 1 };
  s0 -> s2 [0, 65535] { R3705 += 1, R3620 += 1, R3621 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3705 += 1, R3621 += 1 };
  s1 -> s4 [0, 65535] { R3705 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3705 += 1, R3621 += 1 };
  s2 -> s2 [0, 65535] { R3705 += 1, R3620 += 1, R3621 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3705 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R3707 += 1, R3622 += 1, R3623 += 1 };
  s0 -> s2 [0, 65535] { R3707 += 1, R3623 += 1, R3598 += 1, R3599 += 1 };
  s0 -> s0 [0, 65535] { R3706 += 1, R3707 += 1 };
  s0 -> s3 [0, 65535] { R3707 += 1, R3623 += 1 };
  s1 -> s1 [0, 65535] { R3707 += 1, R3622 += 1, R3623 += 1 };
  s1 -> s2 [0, 65535] { R3707 += 1, R3623 += 1, R3598 += 1, R3599 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R3707 += 1, R3623 += 1 };
  s2 -> s2 [0, 65535] { R3707 += 1, R3623 += 1, R3598 += 1, R3599 += 1 };
  s2 -> s4 [0, 65535] { R3707 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3707 += 1, R3623 += 1 };
  s3 -> s4 [0, 65535] { R3707 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3707 += 1, R3623 += 1 };
  s4 -> s4 [0, 65535] { R3707 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R3708 += 1, R3709 += 1 };
  s0 -> s1 [0, 65535] { R3709 += 1, R3637 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R3709 += 1, R3636 += 1, R3637 += 1 };
  s1 -> s4 [0, 65535] { R3709 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3709 += 1, R3637 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3709 += 1, R3637 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R3709 += 1, R3636 += 1, R3637 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3709 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R3711 += 1, R3639 += 1 };
  s0 -> s0 [0, 65535] { R3710 += 1, R3711 += 1 };
  s0 -> s2 [0, 65535] { R3711 += 1, R3638 += 1, R3639 += 1 };
  s0 -> s3 [65, 65] { R3711 += 1, R3639 += 1 };
  s0 -> s4 [65, 65] { R3711 += 1, R3639 += 1 };
  s0 -> s5 [80, 80] { R3711 += 1, R3639 += 1 };
  s0 -> s1 [81, 65535] { R3711 += 1, R3639 += 1 };
  s1 -> s1 [0, 64] { R3711 += 1, R3639 += 1 };
  s1 -> s3 [65, 65] { R3711 += 1, R3639 += 1 };
  s1 -> s4 [65, 65] { R3711 += 1, R3639 += 1 };
  s1 -> s5 [80, 80] { R3711 += 1, R3639 += 1 };
  s1 -> s1 [81, 65535] { R3711 += 1, R3639 += 1 };
  s2 -> s1 [0, 64] { R3711 += 1, R3639 += 1 };
  s2 -> s2 [0, 65535] { R3711 += 1, R3638 += 1, R3639 += 1 };
  s2 -> s3 [65, 65] { R3711 += 1, R3639 += 1 };
  s2 -> s4 [65, 65] { R3711 += 1, R3639 += 1 };
  s2 -> s5 [80, 80] { R3711 += 1, R3639 += 1 };
  s2 -> s1 [81, 65535] { R3711 += 1, R3639 += 1 };
  s3 -> s3 [0, 65] { R3711 += 1, R3639 += 1 };
  s3 -> s7 [80, 80] { R3711 += 1, R3639 += 1 };
  s3 -> s3 [81, 65535] { R3711 += 1, R3639 += 1 };
  s5 -> s5 [0, 64] { R3711 += 1, R3639 += 1 };
  s5 -> s5 [0, 65535] { R3711 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3711 += 1, R3639 += 1 };
  s5 -> s8 [65, 65] { R3711 += 1, R3639 += 1 };
  s5 -> s5 [80, 65535] { R3711 += 1, R3639 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3711 += 1, R3639 += 1 };
  s7 -> s7 [0, 65535] { R3711 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R3711 += 1, R3639 += 1 };
  s8 -> s8 [0, 65535] { R3711 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R3713 += 1, R3641 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R3713 += 1, R3640 += 1, R3641 += 1 };
  s0 -> s0 [0, 65535] { R3712 += 1, R3713 += 1 };
  s0 -> s3 [65, 65] { R3713 += 1, R3641 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R3713 += 1, R3641 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R3713 += 1, R3641 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R3713 += 1, R3641 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R3713 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3713 += 1, R3641 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R3713 += 1, R3641 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R3713 += 1, R3641 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R3713 += 1, R3641 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R3713 += 1, R3640 += 1, R3641 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3713 += 1, R3641 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R3713 += 1, R3641 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R3713 += 1, R3641 += 1, R406 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3713 += 1 };
  s4 -> s5 [0, 65535] { R3713 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3713 += 1, R3641 += 1, R406 += 1 };
  s5 -> s5 [0, 65535] { R3713 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R3715 += 1, R3643 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R3715 += 1, R3642 += 1, R3643 += 1 };
  s0 -> s0 [0, 65535] { R3714 += 1, R3715 += 1 };
  s0 -> s3 [65, 65] { R3715 += 1, R3643 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R3715 += 1, R3643 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R3715 += 1, R3643 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R3715 += 1, R3643 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R3715 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3715 += 1, R3643 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R3715 += 1, R3643 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R3715 += 1, R3643 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R3715 += 1, R3643 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R3715 += 1, R3642 += 1, R3643 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3715 += 1, R3643 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R3715 += 1, R3643 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R3715 += 1, R3643 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R3715 += 1, R3643 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R3715 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3715 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3715 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R3716 += 1, R3717 += 1 };
  s0 -> s2 [0, 65535] { R3717 += 1, R3644 += 1, R3645 += 1 };
  s0 -> s3 [65, 65] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R3717 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R3717 += 1, R3644 += 1, R3645 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R3717 += 1, R3645 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R3717 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3717 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3717 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R3719 += 1, R3646 += 1, R3647 += 1 };
  s0 -> s0 [0, 65535] { R3718 += 1, R3719 += 1 };
  s0 -> s3 [65, 65] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3719 += 1 };
  s1 -> s3 [65, 65] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3719 += 1, R3646 += 1, R3647 += 1 };
  s2 -> s3 [65, 65] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3719 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3719 += 1 };
  s4 -> s4 [0, 65535] { R3719 += 1, R3647 += 1, R414 += 1, R415 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3719 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R3720 += 1, R3721 += 1 };
  s0 -> s2 [0, 65535] { R3721 += 1, R3648 += 1, R3649 += 1 };
  s0 -> s3 [65, 65] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3721 += 1 };
  s1 -> s3 [65, 65] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R3721 += 1, R3648 += 1, R3649 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3721 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3721 += 1, R3649 += 1, R420 += 1, R421 += 1 };
  s4 -> s6 [0, 65535] { R3721 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3721 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [0, 64] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s0 [0, 65535] { R3722 += 1, R3723 += 1 };
  s0 -> s3 [0, 65535] { R3723 += 1, R3650 += 1, R3651 += 1 };
  s0 -> s4 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s5 [65, 65] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s6 [65, 65] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s7 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s1 [66, 65535] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [66, 65535] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [0, 64] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [0, 64] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s4 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s5 [65, 65] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s6 [65, 65] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s7 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [66, 65535] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [66, 65535] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 65535] { R3723 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s7 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [0, 64] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [0, 64] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s3 [0, 65535] { R3723 += 1, R3650 += 1, R3651 += 1 };
  s3 -> s4 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s5 [65, 65] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s6 [65, 65] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s7 [65, 65] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [66, 65535] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [66, 65535] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s4 -> s4 [0, 65535] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R3723 += 1 };
  s5 -> s4 [0, 65535] { R3723 += 1, R3651 += 1, R2489 += 1, R2490 += 1 };
  s5 -> s5 [0, 65535] { R3723 += 1, R3651 += 1, R2488 += 1, R2489 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3723 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3723 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s2 [0, 64] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s3 [0, 65535] { R3725 += 1, R3652 += 1, R3653 += 1 };
  s0 -> s0 [0, 65535] { R3724 += 1, R3725 += 1 };
  s0 -> s4 [65, 65] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s5 [65, 65] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s0 -> s6 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s7 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s1 [66, 65535] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s0 -> s2 [66, 65535] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s1 -> s1 [0, 64] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s1 [0, 65535] { R3725 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s7 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s1 -> s1 [66, 65535] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s1 [0, 64] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s2 [0, 64] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s4 [65, 65] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s5 [65, 65] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s2 -> s6 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s7 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s1 [66, 65535] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s2 -> s2 [66, 65535] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s1 [0, 64] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s2 [0, 64] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s3 [0, 65535] { R3725 += 1, R3652 += 1, R3653 += 1 };
  s3 -> s4 [65, 65] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s5 [65, 65] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s3 -> s6 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s7 [65, 65] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s1 [66, 65535] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s3 -> s2 [66, 65535] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s5 -> s5 [0, 65535] { R3725 += 1, R3653 += 1, R3180 += 1, R3181 += 1 };
  s5 -> s7 [0, 65535] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s6 -> s6 [0, 65535] { R3725 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R3725 += 1 };
  s7 -> s7 [0, 65535] { R3725 += 1, R3653 += 1, R3181 += 1, R3182 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3725 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R3727 += 1, R3655 += 1 };
  s0 -> s2 [0, 65535] { R3727 += 1, R3654 += 1, R3655 += 1 };
  s0 -> s0 [0, 65535] { R3726 += 1, R3727 += 1 };
  s0 -> s3 [65, 65] { R3727 += 1, R3655 += 1 };
  s0 -> s4 [65, 65] { R3727 += 1, R3655 += 1 };
  s0 -> s1 [66, 65535] { R3727 += 1, R3655 += 1 };
  s1 -> s1 [0, 64] { R3727 += 1, R3655 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3727 += 1 };
  s1 -> s3 [65, 65] { R3727 += 1, R3655 += 1 };
  s1 -> s4 [65, 65] { R3727 += 1, R3655 += 1 };
  s1 -> s1 [66, 65535] { R3727 += 1, R3655 += 1 };
  s2 -> s1 [0, 64] { R3727 += 1, R3655 += 1 };
  s2 -> s2 [0, 65535] { R3727 += 1, R3654 += 1, R3655 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3727 += 1, R3655 += 1 };
  s2 -> s4 [65, 65] { R3727 += 1, R3655 += 1 };
  s2 -> s1 [66, 65535] { R3727 += 1, R3655 += 1 };
  s3 -> s3 [0, 65535] { R3727 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3727 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3727 += 1, R3655 += 1 };
  s5 -> s5 [0, 65535] { R3727 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s0 -> s2 [0, 64] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s0 -> s0 [0, 65535] { R3728 += 1, R3729 += 1 };
  s0 -> s3 [0, 65535] { R3729 += 1, R3656 += 1, R3657 += 1 };
  s0 -> s4 [65, 65] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s0 -> s5 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s0 -> s6 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s0 -> s7 [65, 65] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s0 -> s1 [66, 79] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s0 -> s2 [66, 65535] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s0 -> s8 [80, 80] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s0 -> s1 [81, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s1 -> s1 [0, 64] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s1 -> s5 [65, 65] { R3729 += 1, R3657 += 1 };
  s1 -> s6 [65, 65] { R3729 += 1, R3657 += 1 };
  s1 -> s1 [66, 79] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s1 -> s1 [66, 65535] { R3729 += 1, R3657 += 1 };
  s1 -> s8 [80, 80] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s1 -> s1 [81, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s2 -> s1 [0, 64] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s2 -> s2 [0, 64] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s2 -> s4 [65, 65] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s2 -> s5 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s2 -> s6 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s2 -> s7 [65, 65] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s2 -> s1 [66, 79] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s2 -> s2 [66, 65535] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s2 -> s8 [80, 80] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s2 -> s1 [81, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s3 -> s1 [0, 64] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s3 -> s2 [0, 64] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s3 -> s3 [0, 65535] { R3729 += 1, R3656 += 1, R3657 += 1 };
  s3 -> s4 [65, 65] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s3 -> s5 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s3 -> s6 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s3 -> s7 [65, 65] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s3 -> s1 [66, 79] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s3 -> s2 [66, 65535] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s3 -> s8 [80, 80] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s3 -> s1 [81, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s4 -> s5 [0, 79] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s4 -> s4 [0, 65535] { R3729 += 1, R3657 += 1, R3594 += 1, R3595 += 1 };
  s4 -> s10 [80, 80] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s4 -> s5 [81, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s5 -> s5 [0, 79] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s5 -> s5 [0, 65535] { R3729 += 1, R3657 += 1 };
  s5 -> s10 [80, 80] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s5 -> s5 [81, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s8 -> s8 [0, 64] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3729 += 1 };
  s8 -> s10 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s8 -> s11 [65, 65] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s8 -> s8 [66, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3729 += 1, R3657 += 1, R3595 += 1, R3596 += 1 };
  s10 -> s12 [0, 65535] { R3729 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3729 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3729 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R3623 && R6 = R3729 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R3623 && R58 = 0 && R59 = R3623 && R60 = 0 && R61 = R3623 && R62 = 0 && R63 = R3729 && R64 = 0 && R65 = R3729 && R66 = 0 && R67 = R3729 && R3600 = 0 && R3601 = R3623 && R3602 = 0 && R3603 = R3623 && R3604 = 0 && R3605 = R3623 && R3606 = 0 && R3607 = R3623 && R3608 = 0 && R3609 = R3623 && R3610 = 0 && R3611 = R3623 && R3612 = 0 && R3613 = R3623 && R3614 = 0 && R3615 = R3623 && R3616 = 0 && R3617 = R3623 && R3618 = 0 && R3619 = R3623 && R3620 = 0 && R3621 = R3623 && R3622 = 0 && R3624 = 0 && R3625 = R3729 && R3626 = 0 && R3627 = R3729 && R3628 = 0 && R3629 = R3729 && R3630 = 0 && R3631 = R3729 && R3632 = 0 && R3633 = R3729 && R3634 = 0 && R3635 = R3729 && R3638 = 0 && R3639 = 0 && R3650 = 0 && R3651 = 0 && R3652 = 0 && R3653 = 0 && R3656 = 0 && R3657 = 0 && R3658 = 10 && R3659 = R3729 && R3660 = 10 && R3661 = R3729 && R3662 = 10 && R3663 = R3729 && R3664 = 10 && R3665 = R3729 && R3666 = 10 && R3667 = R3729 && R3668 = 10 && R3669 = R3729 && R3670 = 10 && R3671 = R3729 && R3672 = 10 && R3673 = R3729 && R3674 = 10 && R3675 = R3729 && R3676 = 10 && R3677 = R3729 && R3678 = 10 && R3679 = R3729 && R3680 = 10 && R3681 = R3729 && R3682 = 10 && R3683 = R3729 && R3684 = 10 && R3685 = R3729 && R3686 = 10 && R3687 = R3729 && R3688 = 10 && R3689 = R3729 && R3690 = 10 && R3691 = R3729 && R3692 = 10 && R3693 = R3729 && R3694 = 10 && R3695 = R3729 && R3696 = 10 && R3697 = R3729 && R3698 = 10 && R3699 = R3729 && R3700 = 10 && R3701 = R3729 && R3702 = 10 && R3703 = R3729 && R3704 = 10 && R3705 = R3729 && R3706 = 10 && R3707 = R3729 && R3708 = 10 && R3709 = R3729 && R3710 = 10 && R3711 = R3729 && R3712 = 10 && R3713 = R3729 && R3714 = 10 && R3715 = R3729 && R3716 = 10 && R3717 = R3729 && R3718 = 10 && R3719 = R3729 && R3720 = 10 && R3721 = R3729 && R3722 = 10 && R3723 = R3729 && R3724 = 10 && R3725 = R3729 && R3726 = 10 && R3727 = R3729 && R3728 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2493 + R2490 + R3599 + R3596 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R3623 && 9 < R3729 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R2491 + R2488 = 0 && R2492 + R2489 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R2491 + R2488 != 0 || R407 + R406 + -1*R2492 + -1*R2489 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R3636 = 0 && R3637 = 0)) && (R34 = 0 || (R3640 = 0 && R3641 = 0)) && (R34 = 0 || (R3642 = 0 && R3643 = 0)) && (R34 = 0 || (R3644 = 0 && R3645 = 0)) && (R34 = 0 || (R3646 = 0 && R3647 = 0)) && (R34 = 0 || (R3648 = 0 && R3649 = 0)) && (R34 = 0 || (R3654 = 0 && R3655 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R2491 + R2488 = 0 || R407 + R406 < 1) && (R3185 + R3182 = 0 || (R3183 + R3180 = 0 && R3184 + R3181 = 0)) && (R3185 + R3182 = 0 || (R3597 + R3594 = 0 && R3598 + R3595 = 0));
// End of Parikh automata intersection problem
