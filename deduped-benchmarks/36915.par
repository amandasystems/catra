// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2488, R2489, R2490, R2491, R2492, R2493, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R3866, R3867, R3868, R3869, R3870, R3871, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R4416, R4417, R4418, R4419, R4420, R4421, R4422, R4423, R4424, R4425, R4426, R4427, R4428, R4429, R4430, R4431, R4432, R4433, R4434, R4435, R4436, R4437, R4438, R4439, R4440, R4441, R4442, R4443, R4444, R4445, R4446, R4447, R4448, R4449, R4450, R4451, R4452, R4453, R4454, R4455, R4456, R4457, R4458, R4459, R4460, R4461, R4462, R4463, R4464, R4465, R4466, R4467, R4468, R4469, R4470, R4471, R4472, R4473, R4474, R4475, R4476, R4477, R4478, R4479, R4480, R4481, R4482, R4483, R4484, R4485, R4486, R4487, R4488, R4489, R4490, R4491, R4492, R4493, R4494, R4495, R4496, R4497, R4498, R4499, R45, R4500, R4501, R4502, R4503, R4504, R4505, R4506, R4507, R4508, R4509, R4510, R4511, R4512, R4513, R4514, R4515, R4516, R4517, R4518, R4519, R4520, R4521, R4522, R4523, R4524, R4525, R4526, R4527, R4528, R4529, R4530, R4531, R4532, R4533, R4534, R4535, R4536, R4537, R4538, R4539, R4540, R4541, R4542, R4543, R4544, R4545, R4546, R4547, R4548, R4549, R4550, R4551, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R4446 += 1, R4447 += 1 };
  s0 -> s1 [0, 65535] { R4447 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R4447 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R4449 += 1 };
  s0 -> s0 [0, 65535] { R4448 += 1, R4449 += 1 };
  s0 -> s2 [0, 65535] { R4449 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4449 += 1 };
  s0 -> s1 [66, 65535] { R4449 += 1 };
  s1 -> s1 [0, 64] { R4449 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4449 += 1 };
  s1 -> s1 [66, 65535] { R4449 += 1 };
  s2 -> s1 [0, 64] { R4449 += 1 };
  s2 -> s2 [0, 65535] { R4449 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4449 += 1 };
  s2 -> s1 [66, 65535] { R4449 += 1 };
  s3 -> s3 [0, 65535] { R4449 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4450 += 1, R4451 += 1 };
  s0 -> s1 [0, 65535] { R4451 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R4451 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4451 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R4451 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4451 += 1 };
  s2 -> s2 [0, 65535] { R4451 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4451 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4452 += 1, R4453 += 1 };
  s0 -> s1 [0, 65535] { R4453 += 1 };
  s1 -> s1 [0, 65535] { R4453 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4455 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R4455 += 1, R85 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R4454 += 1, R4455 += 1 };
  s1 -> s1 [0, 65535] { R4455 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R4455 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4455 += 1 };
  s2 -> s2 [0, 65535] { R4455 += 1, R85 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4455 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4457 += 1 };
  s0 -> s0 [0, 65535] { R4456 += 1, R4457 += 1 };
  s1 -> s1 [0, 65535] { R4457 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R4481 += 1 };
  s0 -> s0 [0, 65535] { R4480 += 1, R4481 += 1 };
  s0 -> s1 [45, 45] { R4481 += 1 };
  s0 -> s2 [46, 46] { R4481 += 1 };
  s0 -> s1 [48, 62] { R4481 += 1 };
  s0 -> s3 [65, 65] { R4481 += 1 };
  s0 -> s1 [66, 65535] { R4481 += 1 };
  s1 -> s1 [0, 43] { R4481 += 1 };
  s1 -> s1 [45, 45] { R4481 += 1 };
  s1 -> s2 [46, 46] { R4481 += 1 };
  s1 -> s1 [48, 62] { R4481 += 1 };
  s1 -> s3 [65, 65] { R4481 += 1 };
  s1 -> s1 [66, 65535] { R4481 += 1 };
  s2 -> s1 [0, 43] { R4481 += 1 };
  s2 -> s1 [45, 45] { R4481 += 1 };
  s2 -> s2 [46, 46] { R4481 += 1 };
  s2 -> s1 [48, 62] { R4481 += 1 };
  s2 -> s3 [65, 65] { R4481 += 1 };
  s2 -> s1 [66, 114] { R4481 += 1 };
  s2 -> s8 [115, 115] { R4481 += 1 };
  s2 -> s1 [116, 65535] { R4481 += 1 };
  s3 -> s3 [0, 43] { R4481 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4481 += 1 };
  s3 -> s4 [46, 46] { R4481 += 1 };
  s3 -> s3 [48, 62] { R4481 += 1 };
  s3 -> s3 [65, 65535] { R4481 += 1 };
  s4 -> s3 [0, 43] { R4481 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4481 += 1 };
  s4 -> s4 [46, 46] { R4481 += 1 };
  s4 -> s3 [48, 62] { R4481 += 1 };
  s4 -> s3 [65, 114] { R4481 += 1 };
  s4 -> s5 [115, 115] { R4481 += 1 };
  s4 -> s3 [116, 65535] { R4481 += 1 };
  s5 -> s3 [0, 43] { R4481 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4481 += 1 };
  s5 -> s4 [46, 46] { R4481 += 1 };
  s5 -> s3 [48, 62] { R4481 += 1 };
  s5 -> s3 [65, 110] { R4481 += 1 };
  s5 -> s6 [111, 111] { R4481 += 1 };
  s5 -> s3 [112, 65535] { R4481 += 1 };
  s6 -> s3 [0, 43] { R4481 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4481 += 1 };
  s6 -> s4 [46, 46] { R4481 += 1 };
  s6 -> s3 [48, 62] { R4481 += 1 };
  s6 -> s3 [65, 98] { R4481 += 1 };
  s6 -> s7 [99, 99] { R4481 += 1 };
  s6 -> s3 [100, 65535] { R4481 += 1 };
  s7 -> s3 [0, 43] { R4481 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4481 += 1 };
  s7 -> s4 [46, 46] { R4481 += 1 };
  s7 -> s3 [48, 62] { R4481 += 1 };
  s7 -> s3 [65, 106] { R4481 += 1 };
  s7 -> s3 [108, 65535] { R4481 += 1 };
  s8 -> s1 [0, 43] { R4481 += 1 };
  s8 -> s1 [45, 45] { R4481 += 1 };
  s8 -> s2 [46, 46] { R4481 += 1 };
  s8 -> s1 [48, 62] { R4481 += 1 };
  s8 -> s3 [65, 65] { R4481 += 1 };
  s8 -> s1 [66, 110] { R4481 += 1 };
  s8 -> s9 [111, 111] { R4481 += 1 };
  s8 -> s1 [112, 65535] { R4481 += 1 };
  s9 -> s1 [0, 43] { R4481 += 1 };
  s9 -> s1 [45, 45] { R4481 += 1 };
  s9 -> s2 [46, 46] { R4481 += 1 };
  s9 -> s1 [48, 62] { R4481 += 1 };
  s9 -> s3 [65, 65] { R4481 += 1 };
  s9 -> s1 [66, 98] { R4481 += 1 };
  s9 -> s10 [99, 99] { R4481 += 1 };
  s9 -> s1 [100, 65535] { R4481 += 1 };
  s10 -> s1 [0, 43] { R4481 += 1 };
  s10 -> s1 [45, 45] { R4481 += 1 };
  s10 -> s2 [46, 46] { R4481 += 1 };
  s10 -> s1 [48, 62] { R4481 += 1 };
  s10 -> s3 [65, 65] { R4481 += 1 };
  s10 -> s1 [66, 106] { R4481 += 1 };
  s10 -> s1 [108, 65535] { R4481 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R4483 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R4482 += 1, R4483 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4483 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R4485 += 1 };
  s0 -> s2 [0, 65535] { R4485 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R4484 += 1, R4485 += 1 };
  s0 -> s3 [58, 58] { R4485 += 1 };
  s0 -> s1 [59, 65535] { R4485 += 1 };
  s1 -> s1 [0, 57] { R4485 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4485 += 1 };
  s1 -> s1 [59, 65535] { R4485 += 1 };
  s2 -> s1 [0, 57] { R4485 += 1 };
  s2 -> s2 [0, 65535] { R4485 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4485 += 1 };
  s2 -> s1 [59, 65535] { R4485 += 1 };
  s3 -> s3 [0, 65535] { R4485 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R4487 += 1 };
  s0 -> s2 [0, 65535] { R4487 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R4486 += 1, R4487 += 1 };
  s0 -> s3 [43, 43] { R4487 += 1 };
  s0 -> s1 [44, 65535] { R4487 += 1 };
  s1 -> s1 [0, 42] { R4487 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R4487 += 1 };
  s1 -> s1 [44, 65535] { R4487 += 1 };
  s2 -> s1 [0, 42] { R4487 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4487 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R4487 += 1 };
  s2 -> s1 [44, 65535] { R4487 += 1 };
  s3 -> s3 [0, 65535] { R4487 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4489 += 1 };
  s0 -> s2 [0, 65535] { R4489 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4488 += 1, R4489 += 1 };
  s0 -> s3 [65, 65] { R4489 += 1 };
  s0 -> s1 [66, 65535] { R4489 += 1 };
  s1 -> s1 [0, 64] { R4489 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4489 += 1 };
  s1 -> s1 [66, 65535] { R4489 += 1 };
  s2 -> s1 [0, 64] { R4489 += 1 };
  s2 -> s2 [0, 65535] { R4489 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4489 += 1 };
  s2 -> s1 [66, 65535] { R4489 += 1 };
  s3 -> s3 [0, 65535] { R4489 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R4491 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R4491 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R4490 += 1, R4491 += 1 };
  s0 -> s3 [91, 91] { R4491 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R4491 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R4491 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4491 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R4491 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4491 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R4491 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R4491 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R4491 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4491 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R4492 += 1, R4493 += 1 };
  s0 -> s1 [0, 65535] { R4493 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R4493 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4493 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R4493 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4493 += 1 };
  s2 -> s2 [0, 65535] { R4493 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4493 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R4494 += 1, R4495 += 1 };
  s0 -> s1 [0, 65535] { R4495 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R4495 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R4495 += 1, R57 += 1, R31 += 1 };
  s1 -> s4 [0, 65535] { R4495 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4495 += 1, R57 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R4495 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4495 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R4497 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R4497 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R4496 += 1, R4497 += 1 };
  s0 -> s3 [108, 108] { R4497 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R4497 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R4497 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R4497 += 1 };
  s2 -> s1 [0, 107] { R4497 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R4497 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R4497 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R4497 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R4497 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R4497 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R4497 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R4497 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4497 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R4497 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R4497 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R4497 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R4497 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R4497 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R4497 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R4497 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R4497 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R4497 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R4497 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R4497 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R4497 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R4497 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R4497 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R4497 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R4497 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R4497 += 1 };
  s9 -> s10 [111, 111] { R4497 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R4497 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R4497 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R4497 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R4497 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R4497 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R4497 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R4497 += 1 };
  s11 -> s12 [116, 116] { R4497 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R4497 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R4497 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R4497 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R4499 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R4499 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R4498 += 1, R4499 += 1 };
  s1 -> s1 [0, 65535] { R4499 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4499 += 1 };
  s2 -> s1 [0, 65535] { R4499 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R4499 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4499 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4501 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R4500 += 1, R4501 += 1 };
  s0 -> s2 [0, 65535] { R4501 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [0, 65535] { R4501 += 1 };
  s1 -> s1 [0, 65535] { R4501 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4501 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4501 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4501 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R4503 += 1 };
  s0 -> s0 [0, 65535] { R4502 += 1, R4503 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4503 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R4505 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R4504 += 1, R4505 += 1 };
  s0 -> s2 [0, 65535] { R4505 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R4505 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R4505 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R4505 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R4505 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4505 += 1 };
  s1 -> s3 [43, 43] { R4505 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R4505 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R4505 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R4505 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4505 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R4505 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R4505 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R4505 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4505 += 1 };
  s3 -> s3 [0, 65535] { R4505 += 1, R77 += 1, R42 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4505 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4505 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R4507 += 1, R4423 += 1 };
  s0 -> s0 [0, 65535] { R4506 += 1, R4507 += 1 };
  s0 -> s2 [0, 65535] { R4507 += 1, R4422 += 1, R4423 += 1 };
  s0 -> s1 [66, 65535] { R4507 += 1, R4423 += 1 };
  s1 -> s1 [0, 64] { R4507 += 1, R4423 += 1 };
  s1 -> s1 [0, 65535] { R4507 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R4507 += 1, R4423 += 1 };
  s2 -> s1 [0, 64] { R4507 += 1, R4423 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4507 += 1, R4422 += 1, R4423 += 1 };
  s2 -> s1 [66, 65535] { R4507 += 1, R4423 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R4508 += 1, R4509 += 1 };
  s0 -> s1 [0, 65535] { R4509 += 1, R4425 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R4509 += 1, R4424 += 1, R4425 += 1 };
  s1 -> s4 [0, 65535] { R4509 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4509 += 1, R4425 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4509 += 1, R4425 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R4509 += 1, R4424 += 1, R4425 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4509 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R4511 += 1, R4427 += 1 };
  s0 -> s2 [0, 65535] { R4511 += 1, R4426 += 1, R4427 += 1 };
  s0 -> s0 [0, 65535] { R4510 += 1, R4511 += 1 };
  s0 -> s1 [80, 65535] { R4511 += 1, R4427 += 1 };
  s1 -> s1 [0, 65] { R4511 += 1, R4427 += 1 };
  s1 -> s1 [0, 65535] { R4511 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4511 += 1, R4427 += 1 };
  s2 -> s1 [0, 65] { R4511 += 1, R4427 += 1 };
  s2 -> s2 [0, 65535] { R4511 += 1, R4426 += 1, R4427 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4511 += 1, R4427 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R4513 += 1, R4428 += 1, R4429 += 1 };
  s0 -> s2 [0, 65535] { R4513 += 1, R4429 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R4512 += 1, R4513 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4513 += 1, R4428 += 1, R4429 += 1 };
  s1 -> s2 [0, 65535] { R4513 += 1, R4429 += 1, R407 += 1 };
  s2 -> s3 [0, 65535] { R4513 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4513 += 1, R4429 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R4513 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R4515 += 1, R4431 += 1 };
  s0 -> s0 [0, 65535] { R4514 += 1, R4515 += 1 };
  s0 -> s2 [0, 65535] { R4515 += 1, R4430 += 1, R4431 += 1 };
  s0 -> s3 [0, 65535] { R4515 += 1, R4431 += 1, R409 += 1 };
  s0 -> s1 [81, 65535] { R4515 += 1, R4431 += 1 };
  s1 -> s1 [0, 79] { R4515 += 1, R4431 += 1 };
  s1 -> s1 [0, 65535] { R4515 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R4515 += 1, R4431 += 1 };
  s2 -> s1 [0, 79] { R4515 += 1, R4431 += 1 };
  s2 -> s2 [0, 65535] { R4515 += 1, R4430 += 1, R4431 += 1 };
  s2 -> s3 [0, 65535] { R4515 += 1, R4431 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R4515 += 1, R4431 += 1 };
  s3 -> s1 [0, 79] { R4515 += 1, R4431 += 1 };
  s3 -> s3 [0, 65535] { R4515 += 1, R4431 += 1, R409 += 1 };
  s3 -> s4 [0, 65535] { R4515 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R4515 += 1, R4431 += 1 };
  s4 -> s4 [0, 65535] { R4515 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R4517 += 1, R4433 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R4517 += 1, R4432 += 1, R4433 += 1 };
  s0 -> s0 [0, 65535] { R4516 += 1, R4517 += 1 };
  s0 -> s3 [0, 65535] { R4517 += 1, R4433 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R4517 += 1, R4433 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R4517 += 1, R4433 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R4517 += 1, R4433 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4517 += 1 };
  s1 -> s1 [81, 65535] { R4517 += 1, R4433 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R4517 += 1, R4433 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4517 += 1, R4432 += 1, R4433 += 1 };
  s2 -> s3 [0, 65535] { R4517 += 1, R4433 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R4517 += 1, R4433 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R4517 += 1, R4433 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4517 += 1 };
  s3 -> s3 [0, 65535] { R4517 += 1, R4433 += 1, R412 += 1, R413 += 1 };
  s3 -> s1 [81, 65535] { R4517 += 1, R4433 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4517 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R4519 += 1, R4435 += 1, R418 += 1, R419 += 1 };
  s0 -> s2 [0, 65535] { R4519 += 1, R4435 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R4518 += 1, R4519 += 1 };
  s0 -> s3 [0, 65535] { R4519 += 1, R4434 += 1, R4435 += 1 };
  s1 -> s6 [0, 65535] { R4519 += 1, R4435 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4519 += 1, R4435 += 1, R418 += 1, R419 += 1 };
  s1 -> s5 [0, 65535] { R4519 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4519 += 1, R4435 += 1, R418 += 1, R419 += 1 };
  s2 -> s2 [0, 65535] { R4519 += 1, R4435 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535] { R4519 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4519 += 1, R4435 += 1, R418 += 1, R419 += 1 };
  s3 -> s2 [0, 65535] { R4519 += 1, R4435 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R4519 += 1, R4434 += 1, R4435 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4519 += 1 };
  s6 -> s6 [0, 65535] { R4519 += 1, R4435 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4519 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R4520 += 1, R4521 += 1 };
  s0 -> s2 [0, 65535] { R4521 += 1, R4436 += 1, R4437 += 1 };
  s0 -> s3 [0, 65535] { R4521 += 1, R4437 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [91, 107] { R4521 += 1, R4437 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R4521 += 1, R4437 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R4521 += 1 };
  s1 -> s1 [0, 65535] { R4521 += 1, R4437 += 1 };
  s1 -> s1 [91, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4521 += 1, R4436 += 1, R4437 += 1 };
  s2 -> s3 [0, 65535] { R4521 += 1, R4437 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [91, 107] { R4521 += 1, R4437 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R4521 += 1, R4437 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4521 += 1 };
  s3 -> s3 [0, 65535] { R4521 += 1, R4437 += 1, R422 += 1, R423 += 1 };
  s3 -> s1 [91, 107] { R4521 += 1, R4437 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R4521 += 1, R4437 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4521 += 1 };
  s4 -> s4 [0, 65535] { R4521 += 1, R4437 += 1 };
  s4 -> s1 [91, 110] { R4521 += 1, R4437 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R4521 += 1, R4437 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4521 += 1 };
  s7 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R4521 += 1 };
  s7 -> s7 [0, 65535] { R4521 += 1, R4437 += 1 };
  s7 -> s1 [91, 98] { R4521 += 1, R4437 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R4521 += 1, R4437 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R4521 += 1 };
  s8 -> s8 [0, 65535] { R4521 += 1, R4437 += 1 };
  s8 -> s1 [91, 96] { R4521 += 1, R4437 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R4521 += 1, R4437 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R4521 += 1, R4437 += 1 };
  s9 -> s6 [0, 65535] { R4521 += 1 };
  s9 -> s1 [91, 107] { R4521 += 1, R4437 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R4521 += 1, R4437 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R4521 += 1 };
  s10 -> s10 [0, 65535] { R4521 += 1, R4437 += 1 };
  s10 -> s1 [91, 103] { R4521 += 1, R4437 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R4521 += 1, R4437 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R4521 += 1 };
  s11 -> s11 [0, 65535] { R4521 += 1, R4437 += 1 };
  s11 -> s1 [91, 110] { R4521 += 1, R4437 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R4521 += 1, R4437 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R4521 += 1 };
  s12 -> s12 [0, 65535] { R4521 += 1, R4437 += 1 };
  s12 -> s1 [91, 114] { R4521 += 1, R4437 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R4521 += 1, R4437 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R4521 += 1 };
  s13 -> s13 [0, 65535] { R4521 += 1, R4437 += 1 };
  s13 -> s1 [91, 115] { R4521 += 1, R4437 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R4521 += 1, R4437 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R4521 += 1, R4437 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R4521 += 1, R4437 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R4523 += 1, R4439 += 1 };
  s0 -> s2 [0, 65535] { R4523 += 1, R4439 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s3 [0, 65535] { R4523 += 1, R4438 += 1, R4439 += 1 };
  s0 -> s0 [0, 65535] { R4522 += 1, R4523 += 1 };
  s1 -> s5 [0, 65535] { R4523 += 1 };
  s1 -> s1 [0, 65535] { R4523 += 1, R4439 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4523 += 1 };
  s2 -> s1 [0, 65535] { R4523 += 1, R4439 += 1 };
  s2 -> s2 [0, 65535] { R4523 += 1, R4439 += 1, R2492 += 1, R2493 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4523 += 1, R4439 += 1 };
  s3 -> s2 [0, 65535] { R4523 += 1, R4439 += 1, R2492 += 1, R2493 += 1 };
  s3 -> s3 [0, 65535] { R4523 += 1, R4438 += 1, R4439 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4523 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R4525 += 1, R4440 += 1, R4441 += 1 };
  s0 -> s0 [0, 65535] { R4524 += 1, R4525 += 1 };
  s0 -> s2 [0, 65535] { R4525 += 1, R4441 += 1 };
  s1 -> s1 [0, 65535] { R4525 += 1, R4440 += 1, R4441 += 1 };
  s1 -> s2 [0, 65535] { R4525 += 1, R4441 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4525 += 1, R4441 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4525 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4525 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R4527 += 1, R4443 += 1 };
  s0 -> s0 [0, 65535] { R4526 += 1, R4527 += 1 };
  s0 -> s2 [0, 65535] { R4527 += 1, R4442 += 1, R4443 += 1 };
  s1 -> s4 [0, 65535] { R4527 += 1 };
  s1 -> s1 [0, 65535] { R4527 += 1, R4443 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4527 += 1, R4443 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4527 += 1, R4442 += 1, R4443 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4527 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s0 [0, 65535] { R4528 += 1, R4529 += 1 };
  s0 -> s1 [0, 65535] { R4529 += 1, R4445 += 1 };
  s0 -> s2 [0, 65535] { R4529 += 1, R4444 += 1, R4445 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4529 += 1 };
  s1 -> s1 [0, 65535] { R4529 += 1, R4445 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4529 += 1, R4445 += 1 };
  s2 -> s2 [0, 65535] { R4529 += 1, R4444 += 1, R4445 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4529 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R4531 += 1, R4458 += 1, R4459 += 1 };
  s0 -> s0 [0, 65535] { R4530 += 1, R4531 += 1 };
  s0 -> s2 [0, 65535] { R4531 += 1, R4459 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4531 += 1, R4458 += 1, R4459 += 1 };
  s1 -> s2 [0, 65535] { R4531 += 1, R4459 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4531 += 1, R4459 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R4531 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4531 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R4533 += 1, R4461 += 1 };
  s0 -> s0 [0, 65535] { R4532 += 1, R4533 += 1 };
  s0 -> s2 [0, 65535] { R4533 += 1, R4460 += 1, R4461 += 1 };
  s0 -> s3 [65, 65] { R4533 += 1, R4461 += 1 };
  s0 -> s4 [65, 65] { R4533 += 1, R4461 += 1 };
  s0 -> s5 [80, 80] { R4533 += 1, R4461 += 1 };
  s0 -> s1 [81, 65535] { R4533 += 1, R4461 += 1 };
  s1 -> s1 [0, 64] { R4533 += 1, R4461 += 1 };
  s1 -> s3 [65, 65] { R4533 += 1, R4461 += 1 };
  s1 -> s4 [65, 65] { R4533 += 1, R4461 += 1 };
  s1 -> s5 [80, 80] { R4533 += 1, R4461 += 1 };
  s1 -> s1 [81, 65535] { R4533 += 1, R4461 += 1 };
  s2 -> s1 [0, 64] { R4533 += 1, R4461 += 1 };
  s2 -> s2 [0, 65535] { R4533 += 1, R4460 += 1, R4461 += 1 };
  s2 -> s3 [65, 65] { R4533 += 1, R4461 += 1 };
  s2 -> s4 [65, 65] { R4533 += 1, R4461 += 1 };
  s2 -> s5 [80, 80] { R4533 += 1, R4461 += 1 };
  s2 -> s1 [81, 65535] { R4533 += 1, R4461 += 1 };
  s3 -> s3 [0, 65] { R4533 += 1, R4461 += 1 };
  s3 -> s7 [80, 80] { R4533 += 1, R4461 += 1 };
  s3 -> s3 [81, 65535] { R4533 += 1, R4461 += 1 };
  s5 -> s5 [0, 64] { R4533 += 1, R4461 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4533 += 1 };
  s5 -> s7 [65, 65] { R4533 += 1, R4461 += 1 };
  s5 -> s8 [65, 65] { R4533 += 1, R4461 += 1 };
  s5 -> s5 [80, 65535] { R4533 += 1, R4461 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4533 += 1, R4461 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4533 += 1 };
  s7 -> s7 [80, 65535] { R4533 += 1, R4461 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4533 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R4535 += 1, R4463 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R4534 += 1, R4535 += 1 };
  s0 -> s2 [0, 65535] { R4535 += 1, R4462 += 1, R4463 += 1 };
  s0 -> s3 [65, 65] { R4535 += 1, R4463 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R4535 += 1, R4463 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R4535 += 1, R4463 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R4535 += 1, R4463 += 1, R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4535 += 1 };
  s1 -> s3 [65, 65] { R4535 += 1, R4463 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R4535 += 1, R4463 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R4535 += 1, R4463 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R4535 += 1, R4463 += 1, R406 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4535 += 1, R4462 += 1, R4463 += 1 };
  s2 -> s3 [65, 65] { R4535 += 1, R4463 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R4535 += 1, R4463 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R4535 += 1, R4463 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4535 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4535 += 1 };
  s4 -> s4 [0, 65535] { R4535 += 1, R4463 += 1, R406 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4535 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R4537 += 1, R4465 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R4537 += 1, R4464 += 1, R4465 += 1 };
  s0 -> s0 [0, 65535] { R4536 += 1, R4537 += 1 };
  s0 -> s3 [65, 65] { R4537 += 1, R4465 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R4537 += 1, R4465 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R4537 += 1, R4465 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R4537 += 1, R4465 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4537 += 1 };
  s1 -> s3 [65, 65] { R4537 += 1, R4465 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R4537 += 1, R4465 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R4537 += 1, R4465 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R4537 += 1, R4465 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R4537 += 1, R4464 += 1, R4465 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4537 += 1, R4465 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R4537 += 1, R4465 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R4537 += 1, R4465 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R4537 += 1, R4465 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R4537 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4537 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4537 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R4538 += 1, R4539 += 1 };
  s0 -> s2 [0, 65535] { R4539 += 1, R4466 += 1, R4467 += 1 };
  s0 -> s3 [65, 65] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R4539 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R4539 += 1, R4466 += 1, R4467 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R4539 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4539 += 1, R4467 += 1, R410 += 1, R411 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4539 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4539 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R4541 += 1, R4468 += 1, R4469 += 1 };
  s0 -> s0 [0, 65535] { R4540 += 1, R4541 += 1 };
  s0 -> s3 [65, 65] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R4541 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R4541 += 1, R4468 += 1, R4469 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R4541 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4541 += 1 };
  s4 -> s4 [0, 65535] { R4541 += 1, R4469 += 1, R414 += 1, R415 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4541 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R4542 += 1, R4543 += 1 };
  s0 -> s2 [0, 65535] { R4543 += 1, R4470 += 1, R4471 += 1 };
  s0 -> s3 [65, 65] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4543 += 1 };
  s1 -> s3 [65, 65] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4543 += 1, R4470 += 1, R4471 += 1 };
  s2 -> s3 [65, 65] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4543 += 1, R4471 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535] { R4543 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4543 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4543 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [0, 64] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s3 [0, 65535] { R4545 += 1, R4472 += 1, R4473 += 1 };
  s0 -> s0 [0, 65535] { R4544 += 1, R4545 += 1 };
  s0 -> s4 [65, 65] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s5 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s6 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s7 [65, 65] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s1 [66, 65535] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [66, 65535] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [0, 64] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [0, 64] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s4 [65, 65] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s5 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s6 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s7 [65, 65] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s1 [66, 65535] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [66, 65535] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4545 += 1 };
  s2 -> s5 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s6 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [0, 64] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [0, 64] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s3 [0, 65535] { R4545 += 1, R4472 += 1, R4473 += 1 };
  s3 -> s4 [65, 65] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s5 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s6 [65, 65] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s7 [65, 65] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s1 [66, 65535] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [66, 65535] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s4 -> s4 [0, 65535] { R4545 += 1, R4473 += 1, R2488 += 1, R2489 += 1 };
  s4 -> s6 [0, 65535] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4545 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R4545 += 1 };
  s6 -> s6 [0, 65535] { R4545 += 1, R4473 += 1, R2489 += 1, R2490 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4545 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s2 [0, 64] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s0 [0, 65535] { R4546 += 1, R4547 += 1 };
  s0 -> s3 [0, 65535] { R4547 += 1, R4474 += 1, R4475 += 1 };
  s0 -> s4 [65, 65] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s5 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s6 [65, 65] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s7 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s1 [66, 65535] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s2 [66, 65535] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s1 [0, 64] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s11 [0, 64] { R4547 += 1, R4475 += 1 };
  s1 -> s8 [65, 65] { R4547 += 1, R4475 += 1 };
  s1 -> s5 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s7 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s12 [65, 65] { R4547 += 1, R4475 += 1 };
  s1 -> s1 [66, 65535] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s11 [66, 65535] { R4547 += 1, R4475 += 1 };
  s2 -> s1 [0, 64] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s2 [0, 64] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s2 -> s4 [65, 65] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s2 -> s5 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s6 [65, 65] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s2 -> s7 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s1 [66, 65535] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s2 [66, 65535] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s1 [0, 64] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s2 [0, 64] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s3 [0, 65535] { R4547 += 1, R4474 += 1, R4475 += 1 };
  s3 -> s4 [65, 65] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s5 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s6 [65, 65] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s7 [65, 65] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s1 [66, 65535] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s2 [66, 65535] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s5 -> s8 [0, 65535] { R4547 += 1, R4475 += 1 };
  s5 -> s5 [0, 65535] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s6 -> s5 [0, 65535] { R4547 += 1, R4475 += 1, R3867 += 1, R3868 += 1 };
  s6 -> s6 [0, 65535] { R4547 += 1, R4475 += 1, R3866 += 1, R3867 += 1 };
  s8 -> s9 [0, 65535] { R4547 += 1 };
  s8 -> s8 [0, 65535] { R4547 += 1, R4475 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R4547 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R4547 += 1, R4475 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R4547 += 1 };
  s11 -> s8 [65, 65] { R4547 += 1, R4475 += 1 };
  s11 -> s12 [65, 65] { R4547 += 1, R4475 += 1 };
  s11 -> s11 [66, 65535] { R4547 += 1, R4475 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R4547 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R4549 += 1, R4477 += 1 };
  s0 -> s0 [0, 65535] { R4548 += 1, R4549 += 1 };
  s0 -> s2 [0, 65535] { R4549 += 1, R4476 += 1, R4477 += 1 };
  s0 -> s3 [65, 65] { R4549 += 1, R4477 += 1 };
  s0 -> s4 [65, 65] { R4549 += 1, R4477 += 1 };
  s0 -> s1 [66, 65535] { R4549 += 1, R4477 += 1 };
  s1 -> s1 [0, 64] { R4549 += 1, R4477 += 1 };
  s1 -> s1 [0, 65535] { R4549 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4549 += 1, R4477 += 1 };
  s1 -> s4 [65, 65] { R4549 += 1, R4477 += 1 };
  s1 -> s1 [66, 65535] { R4549 += 1, R4477 += 1 };
  s2 -> s1 [0, 64] { R4549 += 1, R4477 += 1 };
  s2 -> s2 [0, 65535] { R4549 += 1, R4476 += 1, R4477 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4549 += 1, R4477 += 1 };
  s2 -> s4 [65, 65] { R4549 += 1, R4477 += 1 };
  s2 -> s1 [66, 65535] { R4549 += 1, R4477 += 1 };
  s3 -> s3 [0, 65535] { R4549 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4549 += 1 };
  s4 -> s4 [0, 65535] { R4549 += 1, R4477 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4549 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s2 [0, 64] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s0 -> s3 [0, 65535] { R4551 += 1, R4478 += 1, R4479 += 1 };
  s0 -> s0 [0, 65535] { R4550 += 1, R4551 += 1 };
  s0 -> s4 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s5 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s6 [65, 65] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s0 -> s7 [65, 65] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s0 -> s1 [66, 79] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s2 [66, 65535] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s0 -> s8 [80, 80] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s1 [81, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s1 -> s1 [0, 64] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s1 -> s4 [65, 65] { R4551 += 1, R4479 += 1 };
  s1 -> s5 [65, 65] { R4551 += 1, R4479 += 1 };
  s1 -> s1 [66, 79] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s1 -> s1 [66, 65535] { R4551 += 1, R4479 += 1 };
  s1 -> s8 [80, 80] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s1 -> s1 [81, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s1 [0, 64] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s2 [0, 64] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s2 -> s4 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s5 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s6 [65, 65] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s2 -> s7 [65, 65] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s2 -> s1 [66, 79] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s2 [66, 65535] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s2 -> s8 [80, 80] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s1 [81, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s3 -> s1 [0, 64] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s3 -> s2 [0, 64] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s3 -> s3 [0, 65535] { R4551 += 1, R4478 += 1, R4479 += 1 };
  s3 -> s4 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s3 -> s5 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s3 -> s6 [65, 65] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s3 -> s7 [65, 65] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s3 -> s1 [66, 79] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s3 -> s2 [66, 65535] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s3 -> s8 [80, 80] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s3 -> s1 [81, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s4 -> s4 [0, 79] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s4 -> s4 [0, 65535] { R4551 += 1, R4479 += 1 };
  s4 -> s10 [80, 80] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s4 -> s4 [81, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s6 -> s4 [0, 79] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s6 -> s6 [0, 65535] { R4551 += 1, R4479 += 1, R4416 += 1, R4417 += 1 };
  s6 -> s10 [80, 80] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s6 -> s4 [81, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s8 -> s9 [0, 64] { R4551 += 1, R4479 += 1 };
  s8 -> s8 [0, 64] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s8 -> s10 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s8 -> s11 [65, 65] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s8 -> s12 [65, 65] { R4551 += 1, R4479 += 1 };
  s8 -> s13 [65, 65] { R4551 += 1, R4479 += 1 };
  s8 -> s9 [66, 65535] { R4551 += 1, R4479 += 1 };
  s8 -> s8 [66, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s9 -> s9 [0, 64] { R4551 += 1, R4479 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R4551 += 1 };
  s9 -> s12 [65, 65] { R4551 += 1, R4479 += 1 };
  s9 -> s13 [65, 65] { R4551 += 1, R4479 += 1 };
  s9 -> s9 [66, 65535] { R4551 += 1, R4479 += 1 };
  s10 -> s10 [0, 65535] { R4551 += 1, R4479 += 1, R4417 += 1, R4418 += 1 };
  s10 -> s12 [0, 65535] { R4551 += 1, R4479 += 1 };
  s12 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R4551 += 1, R4479 += 1 };
  s12 -> s15 [0, 65535] { R4551 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R4551 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R4551 += 1 };
  accepting s12, s13, s9, s14, s15;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R4445 && R6 = R4551 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R4445 && R58 = 0 && R59 = R4445 && R60 = 0 && R61 = R4445 && R62 = 0 && R63 = R4551 && R64 = 0 && R65 = R4551 && R66 = 0 && R67 = R4551 && R4422 = 0 && R4423 = R4445 && R4424 = 0 && R4425 = R4445 && R4426 = 0 && R4427 = R4445 && R4428 = 0 && R4429 = R4445 && R4430 = 0 && R4431 = R4445 && R4432 = 0 && R4433 = R4445 && R4434 = 0 && R4435 = R4445 && R4436 = 0 && R4437 = R4445 && R4438 = 0 && R4439 = R4445 && R4440 = 0 && R4441 = R4445 && R4442 = 0 && R4443 = R4445 && R4444 = 0 && R4446 = 0 && R4447 = R4551 && R4448 = 0 && R4449 = R4551 && R4450 = 0 && R4451 = R4551 && R4452 = 0 && R4453 = R4551 && R4454 = 0 && R4455 = R4551 && R4456 = 0 && R4457 = R4551 && R4460 = 0 && R4461 = 0 && R4472 = 0 && R4473 = 0 && R4474 = 0 && R4475 = 0 && R4478 = 0 && R4479 = 0 && R4480 = 10 && R4481 = R4551 && R4482 = 10 && R4483 = R4551 && R4484 = 10 && R4485 = R4551 && R4486 = 10 && R4487 = R4551 && R4488 = 10 && R4489 = R4551 && R4490 = 10 && R4491 = R4551 && R4492 = 10 && R4493 = R4551 && R4494 = 10 && R4495 = R4551 && R4496 = 10 && R4497 = R4551 && R4498 = 10 && R4499 = R4551 && R4500 = 10 && R4501 = R4551 && R4502 = 10 && R4503 = R4551 && R4504 = 10 && R4505 = R4551 && R4506 = 10 && R4507 = R4551 && R4508 = 10 && R4509 = R4551 && R4510 = 10 && R4511 = R4551 && R4512 = 10 && R4513 = R4551 && R4514 = 10 && R4515 = R4551 && R4516 = 10 && R4517 = R4551 && R4518 = 10 && R4519 = R4551 && R4520 = 10 && R4521 = R4551 && R4522 = 10 && R4523 = R4551 && R4524 = 10 && R4525 = R4551 && R4526 = 10 && R4527 = R4551 && R4528 = 10 && R4529 = R4551 && R4530 = 10 && R4531 = R4551 && R4532 = 10 && R4533 = R4551 && R4534 = 10 && R4535 = R4551 && R4536 = 10 && R4537 = R4551 && R4538 = 10 && R4539 = R4551 && R4540 = 10 && R4541 = R4551 && R4542 = 10 && R4543 = R4551 && R4544 = 10 && R4545 = R4551 && R4546 = 10 && R4547 = R4551 && R4548 = 10 && R4549 = R4551 && R4550 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2493 + R2490 + R4421 + R4418 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R4445 && 9 < R4551 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R2491 + R2488 = 0 && R2492 + R2489 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R2491 + R2488 != 0 || R407 + R406 + -1*R2492 + -1*R2489 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R4458 = 0 && R4459 = 0)) && (R34 = 0 || (R4462 = 0 && R4463 = 0)) && (R34 = 0 || (R4464 = 0 && R4465 = 0)) && (R34 = 0 || (R4466 = 0 && R4467 = 0)) && (R34 = 0 || (R4468 = 0 && R4469 = 0)) && (R34 = 0 || (R4470 = 0 && R4471 = 0)) && (R34 = 0 || (R4476 = 0 && R4477 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R2491 + R2488 = 0 || R407 + R406 < 1) && (R3871 + R3868 = 0 || (R3869 + R3866 = 0 && R3870 + R3867 = 0)) && (R3871 + R3868 = 0 || (R4419 + R4416 = 0 && R4420 + R4417 = 0));
// End of Parikh automata intersection problem
