// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R45, R4552, R4553, R4554, R4555, R4556, R4557, R4558, R4559, R4560, R4561, R4562, R4563, R4700, R4701, R4702, R4703, R4704, R4705, R4706, R4707, R4708, R4709, R4710, R4711, R4712, R4713, R4714, R4715, R4716, R4717, R4718, R4719, R4720, R4721, R4722, R4723, R4724, R4725, R4726, R4727, R4728, R4729, R4730, R4731, R4732, R4733, R4734, R4735, R4736, R4737, R4738, R4739, R4740, R4741, R4742, R4743, R4744, R4745, R4746, R4747, R4748, R4749, R4750, R4751, R4752, R4753, R4754, R4755, R4756, R4757, R4758, R4759, R4760, R4761, R4762, R4763, R4764, R4765, R4766, R4767, R4768, R4769, R4770, R4771, R4772, R4773, R4774, R4775, R4776, R4777, R4778, R4779, R4780, R4781, R4782, R4783, R4784, R4785, R4786, R4787, R4788, R4789, R4790, R4791, R4792, R4793, R4794, R4795, R4796, R4797, R4798, R4799, R4800, R4801, R4802, R4803, R4804, R4805, R4806, R4807, R4808, R4809, R4810, R4811, R4812, R4813, R4814, R4815, R4816, R4817, R4818, R4819, R4820, R4821, R4822, R4823, R4824, R4825, R4826, R4827, R4828, R4829, R4830, R4831, R4832, R4833, R4834, R4835, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R4730 += 1, R4731 += 1 };
  s0 -> s1 [0, 65535] { R4731 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4731 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R4733 += 1 };
  s0 -> s0 [0, 65535] { R4732 += 1, R4733 += 1 };
  s0 -> s2 [0, 65535] { R4733 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4733 += 1 };
  s0 -> s1 [66, 65535] { R4733 += 1 };
  s1 -> s1 [0, 64] { R4733 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4733 += 1 };
  s1 -> s1 [66, 65535] { R4733 += 1 };
  s2 -> s1 [0, 64] { R4733 += 1 };
  s2 -> s2 [0, 65535] { R4733 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4733 += 1 };
  s2 -> s1 [66, 65535] { R4733 += 1 };
  s3 -> s3 [0, 65535] { R4733 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4734 += 1, R4735 += 1 };
  s0 -> s1 [0, 65535] { R4735 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R4735 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4735 += 1 };
  s1 -> s1 [0, 65535] { R4735 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4735 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R4735 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4735 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4737 += 1 };
  s0 -> s0 [0, 65535] { R4736 += 1, R4737 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4737 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R4738 += 1, R4739 += 1 };
  s0 -> s1 [0, 65535] { R4739 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R4739 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R4739 += 1, R85 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4739 += 1 };
  s2 -> s1 [0, 65535] { R4739 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4739 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4739 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4740 += 1, R4741 += 1 };
  s0 -> s1 [0, 65535] { R4741 += 1 };
  s1 -> s1 [0, 65535] { R4741 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R4765 += 1 };
  s0 -> s0 [0, 65535] { R4764 += 1, R4765 += 1 };
  s0 -> s1 [45, 45] { R4765 += 1 };
  s0 -> s2 [46, 46] { R4765 += 1 };
  s0 -> s1 [48, 62] { R4765 += 1 };
  s0 -> s3 [65, 65] { R4765 += 1 };
  s0 -> s1 [66, 65535] { R4765 += 1 };
  s1 -> s1 [0, 43] { R4765 += 1 };
  s1 -> s1 [45, 45] { R4765 += 1 };
  s1 -> s2 [46, 46] { R4765 += 1 };
  s1 -> s1 [48, 62] { R4765 += 1 };
  s1 -> s3 [65, 65] { R4765 += 1 };
  s1 -> s1 [66, 65535] { R4765 += 1 };
  s2 -> s1 [0, 43] { R4765 += 1 };
  s2 -> s1 [45, 45] { R4765 += 1 };
  s2 -> s2 [46, 46] { R4765 += 1 };
  s2 -> s1 [48, 62] { R4765 += 1 };
  s2 -> s3 [65, 65] { R4765 += 1 };
  s2 -> s1 [66, 114] { R4765 += 1 };
  s2 -> s8 [115, 115] { R4765 += 1 };
  s2 -> s1 [116, 65535] { R4765 += 1 };
  s3 -> s3 [0, 43] { R4765 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4765 += 1 };
  s3 -> s4 [46, 46] { R4765 += 1 };
  s3 -> s3 [48, 62] { R4765 += 1 };
  s3 -> s3 [65, 65535] { R4765 += 1 };
  s4 -> s3 [0, 43] { R4765 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4765 += 1 };
  s4 -> s4 [46, 46] { R4765 += 1 };
  s4 -> s3 [48, 62] { R4765 += 1 };
  s4 -> s3 [65, 114] { R4765 += 1 };
  s4 -> s5 [115, 115] { R4765 += 1 };
  s4 -> s3 [116, 65535] { R4765 += 1 };
  s5 -> s3 [0, 43] { R4765 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4765 += 1 };
  s5 -> s4 [46, 46] { R4765 += 1 };
  s5 -> s3 [48, 62] { R4765 += 1 };
  s5 -> s3 [65, 110] { R4765 += 1 };
  s5 -> s6 [111, 111] { R4765 += 1 };
  s5 -> s3 [112, 65535] { R4765 += 1 };
  s6 -> s3 [0, 43] { R4765 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4765 += 1 };
  s6 -> s4 [46, 46] { R4765 += 1 };
  s6 -> s3 [48, 62] { R4765 += 1 };
  s6 -> s3 [65, 98] { R4765 += 1 };
  s6 -> s7 [99, 99] { R4765 += 1 };
  s6 -> s3 [100, 65535] { R4765 += 1 };
  s7 -> s3 [0, 43] { R4765 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4765 += 1 };
  s7 -> s4 [46, 46] { R4765 += 1 };
  s7 -> s3 [48, 62] { R4765 += 1 };
  s7 -> s3 [65, 106] { R4765 += 1 };
  s7 -> s3 [108, 65535] { R4765 += 1 };
  s8 -> s1 [0, 43] { R4765 += 1 };
  s8 -> s1 [45, 45] { R4765 += 1 };
  s8 -> s2 [46, 46] { R4765 += 1 };
  s8 -> s1 [48, 62] { R4765 += 1 };
  s8 -> s3 [65, 65] { R4765 += 1 };
  s8 -> s1 [66, 110] { R4765 += 1 };
  s8 -> s9 [111, 111] { R4765 += 1 };
  s8 -> s1 [112, 65535] { R4765 += 1 };
  s9 -> s1 [0, 43] { R4765 += 1 };
  s9 -> s1 [45, 45] { R4765 += 1 };
  s9 -> s2 [46, 46] { R4765 += 1 };
  s9 -> s1 [48, 62] { R4765 += 1 };
  s9 -> s3 [65, 65] { R4765 += 1 };
  s9 -> s1 [66, 98] { R4765 += 1 };
  s9 -> s10 [99, 99] { R4765 += 1 };
  s9 -> s1 [100, 65535] { R4765 += 1 };
  s10 -> s1 [0, 43] { R4765 += 1 };
  s10 -> s1 [45, 45] { R4765 += 1 };
  s10 -> s2 [46, 46] { R4765 += 1 };
  s10 -> s1 [48, 62] { R4765 += 1 };
  s10 -> s3 [65, 65] { R4765 += 1 };
  s10 -> s1 [66, 106] { R4765 += 1 };
  s10 -> s1 [108, 65535] { R4765 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R4767 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R4766 += 1, R4767 += 1 };
  s1 -> s1 [0, 65535] { R4767 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R4769 += 1 };
  s0 -> s0 [0, 65535] { R4768 += 1, R4769 += 1 };
  s0 -> s2 [0, 65535] { R4769 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R4769 += 1 };
  s0 -> s1 [59, 65535] { R4769 += 1 };
  s1 -> s1 [0, 57] { R4769 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4769 += 1 };
  s1 -> s1 [59, 65535] { R4769 += 1 };
  s2 -> s1 [0, 57] { R4769 += 1 };
  s2 -> s2 [0, 65535] { R4769 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4769 += 1 };
  s2 -> s1 [59, 65535] { R4769 += 1 };
  s3 -> s3 [0, 65535] { R4769 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R4771 += 1 };
  s0 -> s2 [0, 65535] { R4771 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R4770 += 1, R4771 += 1 };
  s0 -> s3 [43, 43] { R4771 += 1 };
  s0 -> s1 [44, 65535] { R4771 += 1 };
  s1 -> s1 [0, 42] { R4771 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R4771 += 1 };
  s1 -> s1 [44, 65535] { R4771 += 1 };
  s2 -> s1 [0, 42] { R4771 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4771 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R4771 += 1 };
  s2 -> s1 [44, 65535] { R4771 += 1 };
  s3 -> s3 [0, 65535] { R4771 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4773 += 1 };
  s0 -> s2 [0, 65535] { R4773 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4772 += 1, R4773 += 1 };
  s0 -> s3 [65, 65] { R4773 += 1 };
  s0 -> s1 [66, 65535] { R4773 += 1 };
  s1 -> s1 [0, 64] { R4773 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4773 += 1 };
  s1 -> s1 [66, 65535] { R4773 += 1 };
  s2 -> s1 [0, 64] { R4773 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4773 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R4773 += 1 };
  s2 -> s1 [66, 65535] { R4773 += 1 };
  s3 -> s3 [0, 65535] { R4773 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R4775 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R4774 += 1, R4775 += 1 };
  s0 -> s2 [0, 65535] { R4775 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R4775 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R4775 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R4775 += 1 };
  s1 -> s1 [0, 65535] { R4775 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R4775 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R4775 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4775 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R4775 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R4775 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4775 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R4777 += 1, R41 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R4777 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R4776 += 1, R4777 += 1 };
  s1 -> s1 [0, 65535] { R4777 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4777 += 1 };
  s2 -> s1 [0, 65535] { R4777 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4777 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4777 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R4779 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R4778 += 1, R4779 += 1 };
  s0 -> s2 [0, 65535] { R4779 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R4779 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4779 += 1 };
  s2 -> s1 [0, 65535] { R4779 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4779 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4779 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R4781 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R4780 += 1, R4781 += 1 };
  s0 -> s2 [0, 65535] { R4781 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R4781 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R4781 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R4781 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4781 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R4781 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R4781 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R4781 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R4781 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R4781 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R4781 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R4781 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R4781 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4781 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R4781 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R4781 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R4781 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R4781 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R4781 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R4781 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R4781 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R4781 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R4781 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R4781 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R4781 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R4781 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R4781 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R4781 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R4781 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R4781 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R4781 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R4781 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R4781 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R4781 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R4781 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R4781 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R4781 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R4781 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R4781 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R4781 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R4781 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R4781 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R4781 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R4783 += 1, R61 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R4782 += 1, R4783 += 1 };
  s0 -> s2 [0, 65535] { R4783 += 1, R60 += 1, R61 += 1 };
  s1 -> s1 [0, 65535] { R4783 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4783 += 1 };
  s2 -> s1 [0, 65535] { R4783 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4783 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4783 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4785 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R4784 += 1, R4785 += 1 };
  s0 -> s2 [0, 65535] { R4785 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4785 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R4785 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4785 += 1 };
  s2 -> s2 [0, 65535] { R4785 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4785 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R4786 += 1, R4787 += 1 };
  s0 -> s1 [0, 65535] { R4787 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4787 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R4789 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R4788 += 1, R4789 += 1 };
  s0 -> s2 [0, 65535] { R4789 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R4789 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R4789 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R4789 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R4789 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R4789 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R4789 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R4789 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R4789 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R4789 += 1, R77 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4789 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R4789 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R4789 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R4789 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R4789 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4789 += 1 };
  s4 -> s4 [0, 65535] { R4789 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4789 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R4791 += 1, R4707 += 1 };
  s0 -> s2 [0, 65535] { R4791 += 1, R4706 += 1, R4707 += 1 };
  s0 -> s0 [0, 65535] { R4790 += 1, R4791 += 1 };
  s0 -> s1 [66, 65535] { R4791 += 1, R4707 += 1 };
  s1 -> s1 [0, 64] { R4791 += 1, R4707 += 1 };
  s1 -> s1 [0, 65535] { R4791 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R4791 += 1, R4707 += 1 };
  s2 -> s1 [0, 64] { R4791 += 1, R4707 += 1 };
  s2 -> s2 [0, 65535] { R4791 += 1, R4706 += 1, R4707 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R4791 += 1, R4707 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R4793 += 1, R4708 += 1, R4709 += 1 };
  s0 -> s2 [0, 65535] { R4793 += 1, R4709 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R4792 += 1, R4793 += 1 };
  s1 -> s1 [0, 65535] { R4793 += 1, R4708 += 1, R4709 += 1 };
  s1 -> s2 [0, 65535] { R4793 += 1, R4709 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4793 += 1, R4709 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4793 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4793 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R4795 += 1, R4711 += 1 };
  s0 -> s2 [0, 65535] { R4795 += 1, R4710 += 1, R4711 += 1 };
  s0 -> s0 [0, 65535] { R4794 += 1, R4795 += 1 };
  s0 -> s1 [80, 65535] { R4795 += 1, R4711 += 1 };
  s1 -> s1 [0, 65] { R4795 += 1, R4711 += 1 };
  s1 -> s1 [0, 65535] { R4795 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4795 += 1, R4711 += 1 };
  s2 -> s1 [0, 65] { R4795 += 1, R4711 += 1 };
  s2 -> s2 [0, 65535] { R4795 += 1, R4710 += 1, R4711 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4795 += 1, R4711 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R4797 += 1, R4713 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R4797 += 1, R4712 += 1, R4713 += 1 };
  s0 -> s0 [0, 65535] { R4796 += 1, R4797 += 1 };
  s1 -> s1 [0, 65535] { R4797 += 1, R4713 += 1, R407 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4797 += 1 };
  s2 -> s1 [0, 65535] { R4797 += 1, R4713 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R4797 += 1, R4712 += 1, R4713 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4797 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R4799 += 1, R4715 += 1 };
  s0 -> s0 [0, 65535] { R4798 += 1, R4799 += 1 };
  s0 -> s2 [0, 65535] { R4799 += 1, R4714 += 1, R4715 += 1 };
  s0 -> s3 [0, 65535] { R4799 += 1, R4715 += 1, R409 += 1 };
  s0 -> s1 [81, 65535] { R4799 += 1, R4715 += 1 };
  s1 -> s1 [0, 79] { R4799 += 1, R4715 += 1 };
  s1 -> s1 [0, 65535] { R4799 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R4799 += 1, R4715 += 1 };
  s2 -> s1 [0, 79] { R4799 += 1, R4715 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4799 += 1, R4714 += 1, R4715 += 1 };
  s2 -> s3 [0, 65535] { R4799 += 1, R4715 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R4799 += 1, R4715 += 1 };
  s3 -> s1 [0, 79] { R4799 += 1, R4715 += 1 };
  s3 -> s4 [0, 65535] { R4799 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4799 += 1, R4715 += 1, R409 += 1 };
  s3 -> s1 [81, 65535] { R4799 += 1, R4715 += 1 };
  s4 -> s4 [0, 65535] { R4799 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R4801 += 1, R4717 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R4801 += 1, R4716 += 1, R4717 += 1 };
  s0 -> s3 [0, 65535] { R4801 += 1, R4717 += 1, R412 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R4800 += 1, R4801 += 1 };
  s0 -> s1 [81, 65535] { R4801 += 1, R4717 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R4801 += 1, R4717 += 1, R413 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4801 += 1 };
  s1 -> s1 [0, 65535] { R4801 += 1, R4717 += 1 };
  s1 -> s1 [81, 65535] { R4801 += 1, R4717 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R4801 += 1, R4717 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R4801 += 1, R4716 += 1, R4717 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4801 += 1, R4717 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R4801 += 1, R4717 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R4801 += 1, R4717 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4801 += 1 };
  s3 -> s3 [0, 65535] { R4801 += 1, R4717 += 1, R412 += 1, R413 += 1 };
  s3 -> s1 [81, 65535] { R4801 += 1, R4717 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4801 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R4802 += 1, R4803 += 1 };
  s0 -> s1 [0, 65535] { R4803 += 1, R4719 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R4803 += 1, R4718 += 1, R4719 += 1 };
  s0 -> s3 [0, 65535] { R4803 += 1, R4719 += 1, R418 += 1, R419 += 1 };
  s1 -> s4 [0, 65535] { R4803 += 1 };
  s1 -> s1 [0, 65535] { R4803 += 1, R4719 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R4803 += 1, R4719 += 1, R418 += 1, R419 += 1 };
  s2 -> s1 [0, 65535] { R4803 += 1, R4719 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4803 += 1, R4718 += 1, R4719 += 1 };
  s2 -> s3 [0, 65535] { R4803 += 1, R4719 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [0, 65535] { R4803 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4803 += 1, R4719 += 1 };
  s3 -> s3 [0, 65535] { R4803 += 1, R4719 += 1, R418 += 1, R419 += 1 };
  s4 -> s4 [0, 65535] { R4803 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R4803 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4803 += 1, R4719 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R4805 += 1, R4720 += 1, R4721 += 1 };
  s0 -> s0 [0, 65535] { R4804 += 1, R4805 += 1 };
  s0 -> s3 [0, 65535] { R4805 += 1, R4721 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [91, 107] { R4805 += 1, R4721 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R4805 += 1, R4721 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R4805 += 1 };
  s1 -> s1 [0, 65535] { R4805 += 1, R4721 += 1 };
  s1 -> s1 [91, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4805 += 1, R4720 += 1, R4721 += 1 };
  s2 -> s3 [0, 65535] { R4805 += 1, R4721 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [91, 107] { R4805 += 1, R4721 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R4805 += 1, R4721 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4805 += 1, R4721 += 1, R422 += 1, R423 += 1 };
  s3 -> s6 [0, 65535] { R4805 += 1 };
  s3 -> s1 [91, 107] { R4805 += 1, R4721 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R4805 += 1, R4721 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4805 += 1, R4721 += 1 };
  s4 -> s6 [0, 65535] { R4805 += 1 };
  s4 -> s1 [91, 110] { R4805 += 1, R4721 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R4805 += 1, R4721 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4805 += 1 };
  s7 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R4805 += 1, R4721 += 1 };
  s7 -> s6 [0, 65535] { R4805 += 1 };
  s7 -> s1 [91, 98] { R4805 += 1, R4721 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R4805 += 1, R4721 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R4805 += 1, R4721 += 1 };
  s8 -> s6 [0, 65535] { R4805 += 1 };
  s8 -> s1 [91, 96] { R4805 += 1, R4721 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R4805 += 1, R4721 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R4805 += 1, R4721 += 1 };
  s9 -> s6 [0, 65535] { R4805 += 1 };
  s9 -> s1 [91, 107] { R4805 += 1, R4721 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R4805 += 1, R4721 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R4805 += 1 };
  s10 -> s10 [0, 65535] { R4805 += 1, R4721 += 1 };
  s10 -> s1 [91, 103] { R4805 += 1, R4721 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R4805 += 1, R4721 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R4805 += 1, R4721 += 1 };
  s11 -> s6 [0, 65535] { R4805 += 1 };
  s11 -> s1 [91, 110] { R4805 += 1, R4721 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R4805 += 1, R4721 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s12 -> s12 [0, 65535] { R4805 += 1, R4721 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R4805 += 1 };
  s12 -> s1 [91, 114] { R4805 += 1, R4721 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R4805 += 1, R4721 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s13 -> s13 [0, 65535] { R4805 += 1, R4721 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R4805 += 1 };
  s13 -> s1 [91, 115] { R4805 += 1, R4721 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R4805 += 1, R4721 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R4805 += 1, R4721 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R4805 += 1, R4721 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R4807 += 1, R4723 += 1 };
  s0 -> s2 [0, 65535] { R4807 += 1, R4722 += 1, R4723 += 1 };
  s0 -> s0 [0, 65535] { R4806 += 1, R4807 += 1 };
  s1 -> s1 [0, 65535] { R4807 += 1, R4723 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4807 += 1 };
  s2 -> s1 [0, 65535] { R4807 += 1, R4723 += 1 };
  s2 -> s2 [0, 65535] { R4807 += 1, R4722 += 1, R4723 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4807 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R4809 += 1, R4725 += 1, R4562 += 1, R4563 += 1 };
  s0 -> s2 [0, 65535] { R4809 += 1, R4724 += 1, R4725 += 1 };
  s0 -> s3 [0, 65535] { R4809 += 1, R4725 += 1, R4561 += 1, R4562 += 1 };
  s0 -> s0 [0, 65535] { R4808 += 1, R4809 += 1 };
  s1 -> s6 [0, 65535] { R4809 += 1, R4725 += 1 };
  s1 -> s1 [0, 65535] { R4809 += 1, R4725 += 1, R4562 += 1, R4563 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4809 += 1 };
  s2 -> s1 [0, 65535] { R4809 += 1, R4725 += 1, R4562 += 1, R4563 += 1 };
  s2 -> s2 [0, 65535] { R4809 += 1, R4724 += 1, R4725 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4809 += 1, R4725 += 1, R4561 += 1, R4562 += 1 };
  s3 -> s1 [0, 65535] { R4809 += 1, R4725 += 1, R4562 += 1, R4563 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4809 += 1 };
  s3 -> s3 [0, 65535] { R4809 += 1, R4725 += 1, R4561 += 1, R4562 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4809 += 1 };
  s6 -> s6 [0, 65535] { R4809 += 1, R4725 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4809 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R4811 += 1, R4727 += 1 };
  s0 -> s0 [0, 65535] { R4810 += 1, R4811 += 1 };
  s0 -> s2 [0, 65535] { R4811 += 1, R4726 += 1, R4727 += 1 };
  s1 -> s1 [0, 65535] { R4811 += 1, R4727 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4811 += 1 };
  s2 -> s1 [0, 65535] { R4811 += 1, R4727 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4811 += 1, R4726 += 1, R4727 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4811 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s0 -> s0 [0, 65535] { R4812 += 1, R4813 += 1 };
  s0 -> s2 [0, 65535] { R4813 += 1, R4728 += 1, R4729 += 1 };
  s0 -> s1 [0, 65535] { R4813 += 1, R4729 += 1 };
  s0 -> s3 [80, 80] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s0 -> s4 [80, 80] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s0 -> s1 [81, 65535] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s1 -> s1 [0, 79] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s1 -> s6 [0, 65535] { R4813 += 1 };
  s1 -> s1 [0, 65535] { R4813 += 1, R4729 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [80, 80] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s1 -> s4 [80, 80] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s1 -> s1 [81, 65535] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s2 -> s1 [0, 79] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s2 -> s2 [0, 65535] { R4813 += 1, R4728 += 1, R4729 += 1 };
  s2 -> s1 [0, 65535] { R4813 += 1, R4729 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [80, 80] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s2 -> s4 [80, 80] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s2 -> s1 [81, 65535] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s3 -> s6 [0, 65535] { R4813 += 1 };
  s3 -> s3 [0, 65535] { R4813 += 1, R4729 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R4813 += 1, R4729 += 1 };
  s4 -> s6 [0, 65535] { R4813 += 1 };
  s4 -> s4 [0, 65535] { R4813 += 1, R4729 += 1, R4704 += 1, R4705 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R4813 += 1, R4729 += 1 };
  s5 -> s6 [0, 65535] { R4813 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R4813 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R4815 += 1, R4742 += 1, R4743 += 1 };
  s0 -> s2 [0, 65535] { R4815 += 1, R4743 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R4814 += 1, R4815 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4815 += 1, R4742 += 1, R4743 += 1 };
  s1 -> s2 [0, 65535] { R4815 += 1, R4743 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R4815 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4815 += 1, R4743 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R4815 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R4817 += 1, R4745 += 1 };
  s0 -> s0 [0, 65535] { R4816 += 1, R4817 += 1 };
  s0 -> s2 [0, 65535] { R4817 += 1, R4744 += 1, R4745 += 1 };
  s0 -> s3 [65, 65] { R4817 += 1, R4745 += 1 };
  s0 -> s4 [65, 65] { R4817 += 1, R4745 += 1 };
  s0 -> s5 [80, 80] { R4817 += 1, R4745 += 1 };
  s0 -> s1 [81, 65535] { R4817 += 1, R4745 += 1 };
  s1 -> s1 [0, 64] { R4817 += 1, R4745 += 1 };
  s1 -> s3 [65, 65] { R4817 += 1, R4745 += 1 };
  s1 -> s4 [65, 65] { R4817 += 1, R4745 += 1 };
  s1 -> s5 [80, 80] { R4817 += 1, R4745 += 1 };
  s1 -> s1 [81, 65535] { R4817 += 1, R4745 += 1 };
  s2 -> s1 [0, 64] { R4817 += 1, R4745 += 1 };
  s2 -> s2 [0, 65535] { R4817 += 1, R4744 += 1, R4745 += 1 };
  s2 -> s3 [65, 65] { R4817 += 1, R4745 += 1 };
  s2 -> s4 [65, 65] { R4817 += 1, R4745 += 1 };
  s2 -> s5 [80, 80] { R4817 += 1, R4745 += 1 };
  s2 -> s1 [81, 65535] { R4817 += 1, R4745 += 1 };
  s3 -> s3 [0, 65] { R4817 += 1, R4745 += 1 };
  s3 -> s7 [80, 80] { R4817 += 1, R4745 += 1 };
  s3 -> s3 [81, 65535] { R4817 += 1, R4745 += 1 };
  s5 -> s5 [0, 64] { R4817 += 1, R4745 += 1 };
  s5 -> s5 [0, 65535] { R4817 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4817 += 1, R4745 += 1 };
  s5 -> s8 [65, 65] { R4817 += 1, R4745 += 1 };
  s5 -> s5 [80, 65535] { R4817 += 1, R4745 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4817 += 1, R4745 += 1 };
  s7 -> s7 [0, 65535] { R4817 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R4817 += 1, R4745 += 1 };
  s8 -> s8 [0, 65535] { R4817 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R4819 += 1, R4747 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R4819 += 1, R4746 += 1, R4747 += 1 };
  s0 -> s0 [0, 65535] { R4818 += 1, R4819 += 1 };
  s0 -> s3 [65, 65] { R4819 += 1, R4747 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R4819 += 1, R4747 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R4819 += 1, R4747 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R4819 += 1, R4747 += 1, R406 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4819 += 1 };
  s1 -> s3 [65, 65] { R4819 += 1, R4747 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R4819 += 1, R4747 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R4819 += 1, R4747 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R4819 += 1, R4747 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R4819 += 1, R4746 += 1, R4747 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4819 += 1, R4747 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R4819 += 1, R4747 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R4819 += 1, R4747 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R4819 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4819 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4819 += 1, R4747 += 1, R406 += 1 };
  s5 -> s5 [0, 65535] { R4819 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R4821 += 1, R4749 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R4820 += 1, R4821 += 1 };
  s0 -> s2 [0, 65535] { R4821 += 1, R4748 += 1, R4749 += 1 };
  s0 -> s3 [65, 65] { R4821 += 1, R4749 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R4821 += 1, R4749 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R4821 += 1, R4749 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R4821 += 1, R4749 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4821 += 1 };
  s1 -> s3 [65, 65] { R4821 += 1, R4749 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R4821 += 1, R4749 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R4821 += 1, R4749 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R4821 += 1, R4749 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R4821 += 1, R4748 += 1, R4749 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4821 += 1, R4749 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R4821 += 1, R4749 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R4821 += 1, R4749 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R4821 += 1, R4749 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4821 += 1 };
  s4 -> s4 [0, 65535] { R4821 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4821 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R4822 += 1, R4823 += 1 };
  s0 -> s2 [0, 65535] { R4823 += 1, R4750 += 1, R4751 += 1 };
  s0 -> s3 [65, 65] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4823 += 1 };
  s1 -> s3 [65, 65] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4823 += 1, R4750 += 1, R4751 += 1 };
  s2 -> s3 [65, 65] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4823 += 1, R4751 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R4823 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4823 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4823 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R4824 += 1, R4825 += 1 };
  s0 -> s2 [0, 65535] { R4825 += 1, R4752 += 1, R4753 += 1 };
  s0 -> s3 [65, 65] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R4825 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4825 += 1, R4752 += 1, R4753 += 1 };
  s2 -> s3 [65, 65] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R4825 += 1, R4753 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4825 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4825 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4825 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s0 -> s0 [0, 65535] { R4826 += 1, R4827 += 1 };
  s0 -> s2 [0, 65535] { R4827 += 1, R4754 += 1, R4755 += 1 };
  s0 -> s3 [65, 65] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 65535] { R4827 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R4827 += 1, R4754 += 1, R4755 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s3 -> s3 [0, 65535] { R4827 += 1, R4755 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535] { R4827 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4827 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4827 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s2 [0, 64] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s0 [0, 65535] { R4828 += 1, R4829 += 1 };
  s0 -> s3 [0, 65535] { R4829 += 1, R4756 += 1, R4757 += 1 };
  s0 -> s4 [65, 65] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s5 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s6 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s7 [65, 65] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s1 [66, 65535] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s2 [66, 65535] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s1 -> s1 [0, 64] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s11 [0, 64] { R4829 += 1, R4757 += 1 };
  s1 -> s12 [65, 65] { R4829 += 1, R4757 += 1 };
  s1 -> s5 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s6 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s8 [65, 65] { R4829 += 1, R4757 += 1 };
  s1 -> s1 [66, 65535] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s11 [66, 65535] { R4829 += 1, R4757 += 1 };
  s2 -> s1 [0, 64] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s2 [0, 64] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s2 -> s4 [65, 65] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s2 -> s5 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s6 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s7 [65, 65] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s2 -> s1 [66, 65535] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s2 [66, 65535] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s1 [0, 64] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s2 [0, 64] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s3 [0, 65535] { R4829 += 1, R4756 += 1, R4757 += 1 };
  s3 -> s4 [65, 65] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s5 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s6 [65, 65] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s7 [65, 65] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s1 [66, 65535] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s2 [66, 65535] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s4 -> s4 [0, 65535] { R4829 += 1, R4757 += 1, R4552 += 1, R4553 += 1 };
  s4 -> s6 [0, 65535] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s6 -> s6 [0, 65535] { R4829 += 1, R4757 += 1, R4553 += 1, R4554 += 1 };
  s6 -> s8 [0, 65535] { R4829 += 1, R4757 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R4829 += 1 };
  s8 -> s8 [0, 65535] { R4829 += 1, R4757 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4829 += 1 };
  s11 -> s11 [0, 64] { R4829 += 1, R4757 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4829 += 1 };
  s11 -> s12 [65, 65] { R4829 += 1, R4757 += 1 };
  s11 -> s8 [65, 65] { R4829 += 1, R4757 += 1 };
  s11 -> s11 [66, 65535] { R4829 += 1, R4757 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4829 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s0 [0, 65535] { R4830 += 1, R4831 += 1 };
  s0 -> s2 [0, 65535] { R4831 += 1, R4758 += 1, R4759 += 1 };
  s0 -> s3 [65, 65] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s4 [65, 65] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s1 [66, 65535] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s1 [0, 64] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s1 [0, 65535] { R4831 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s4 [65, 65] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s1 [66, 65535] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s1 [0, 64] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4831 += 1, R4758 += 1, R4759 += 1 };
  s2 -> s3 [65, 65] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s4 [65, 65] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s1 [66, 65535] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s3 -> s3 [0, 65535] { R4831 += 1, R4759 += 1, R4558 += 1, R4559 += 1 };
  s3 -> s6 [0, 65535] { R4831 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4831 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4831 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R4833 += 1, R4761 += 1 };
  s0 -> s0 [0, 65535] { R4832 += 1, R4833 += 1 };
  s0 -> s2 [0, 65535] { R4833 += 1, R4760 += 1, R4761 += 1 };
  s0 -> s3 [65, 65] { R4833 += 1, R4761 += 1 };
  s0 -> s4 [65, 65] { R4833 += 1, R4761 += 1 };
  s0 -> s1 [66, 65535] { R4833 += 1, R4761 += 1 };
  s1 -> s1 [0, 64] { R4833 += 1, R4761 += 1 };
  s1 -> s1 [0, 65535] { R4833 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4833 += 1, R4761 += 1 };
  s1 -> s4 [65, 65] { R4833 += 1, R4761 += 1 };
  s1 -> s1 [66, 65535] { R4833 += 1, R4761 += 1 };
  s2 -> s1 [0, 64] { R4833 += 1, R4761 += 1 };
  s2 -> s2 [0, 65535] { R4833 += 1, R4760 += 1, R4761 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4833 += 1, R4761 += 1 };
  s2 -> s4 [65, 65] { R4833 += 1, R4761 += 1 };
  s2 -> s1 [66, 65535] { R4833 += 1, R4761 += 1 };
  s3 -> s3 [0, 65535] { R4833 += 1, R4761 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4833 += 1 };
  s4 -> s4 [0, 65535] { R4833 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4833 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s0 -> s2 [0, 64] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s0 -> s0 [0, 65535] { R4834 += 1, R4835 += 1 };
  s0 -> s3 [0, 65535] { R4835 += 1, R4762 += 1, R4763 += 1 };
  s0 -> s4 [65, 65] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s0 -> s5 [65, 65] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s0 -> s6 [65, 65] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s0 -> s7 [65, 65] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s0 -> s1 [66, 79] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s0 -> s2 [66, 65535] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s0 -> s1 [81, 65535] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s1 -> s1 [0, 64] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s1 -> s1 [0, 65535] { R4835 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [65, 65] { R4835 += 1, R4763 += 1 };
  s1 -> s6 [65, 65] { R4835 += 1, R4763 += 1 };
  s1 -> s1 [66, 79] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s1 -> s1 [66, 65535] { R4835 += 1, R4763 += 1 };
  s1 -> s1 [81, 65535] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s2 -> s1 [0, 64] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s2 -> s2 [0, 64] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s2 -> s4 [65, 65] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s2 -> s5 [65, 65] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s2 -> s6 [65, 65] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s2 -> s7 [65, 65] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s2 -> s1 [66, 79] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s2 -> s2 [66, 65535] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s2 -> s1 [81, 65535] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s3 -> s1 [0, 64] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s3 -> s2 [0, 64] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s3 -> s3 [0, 65535] { R4835 += 1, R4762 += 1, R4763 += 1 };
  s3 -> s4 [65, 65] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s3 -> s5 [65, 65] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s3 -> s6 [65, 65] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s3 -> s7 [65, 65] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s3 -> s1 [66, 79] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s3 -> s2 [66, 65535] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s3 -> s1 [81, 65535] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s5 -> s5 [0, 65535] { R4835 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 79] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s6 -> s8 [0, 65535] { R4835 += 1 };
  s6 -> s6 [0, 65535] { R4835 += 1, R4763 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [81, 65535] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s7 -> s6 [0, 79] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s7 -> s7 [0, 65535] { R4835 += 1, R4763 += 1, R4700 += 1, R4701 += 1 };
  s7 -> s6 [81, 65535] { R4835 += 1, R4763 += 1, R4701 += 1, R4702 += 1 };
  s8 -> s8 [0, 65535] { R4835 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R4729 && R6 = R4835 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R4729 && R58 = 0 && R59 = R4729 && R60 = 0 && R61 = R4729 && R62 = 0 && R63 = R4835 && R64 = 0 && R65 = R4835 && R66 = 0 && R67 = R4835 && R4706 = 0 && R4707 = R4729 && R4708 = 0 && R4709 = R4729 && R4710 = 0 && R4711 = R4729 && R4712 = 0 && R4713 = R4729 && R4714 = 0 && R4715 = R4729 && R4716 = 0 && R4717 = R4729 && R4718 = 0 && R4719 = R4729 && R4720 = 0 && R4721 = R4729 && R4722 = 0 && R4723 = R4729 && R4724 = 0 && R4725 = R4729 && R4726 = 0 && R4727 = R4729 && R4728 = 0 && R4730 = 0 && R4731 = R4835 && R4732 = 0 && R4733 = R4835 && R4734 = 0 && R4735 = R4835 && R4736 = 0 && R4737 = R4835 && R4738 = 0 && R4739 = R4835 && R4740 = 0 && R4741 = R4835 && R4744 = 0 && R4745 = 0 && R4756 = 0 && R4757 = 0 && R4762 = 0 && R4763 = 0 && R4764 = 10 && R4765 = R4835 && R4766 = 10 && R4767 = R4835 && R4768 = 10 && R4769 = R4835 && R4770 = 10 && R4771 = R4835 && R4772 = 10 && R4773 = R4835 && R4774 = 10 && R4775 = R4835 && R4776 = 10 && R4777 = R4835 && R4778 = 10 && R4779 = R4835 && R4780 = 10 && R4781 = R4835 && R4782 = 10 && R4783 = R4835 && R4784 = 10 && R4785 = R4835 && R4786 = 10 && R4787 = R4835 && R4788 = 10 && R4789 = R4835 && R4790 = 10 && R4791 = R4835 && R4792 = 10 && R4793 = R4835 && R4794 = 10 && R4795 = R4835 && R4796 = 10 && R4797 = R4835 && R4798 = 10 && R4799 = R4835 && R4800 = 10 && R4801 = R4835 && R4802 = 10 && R4803 = R4835 && R4804 = 10 && R4805 = R4835 && R4806 = 10 && R4807 = R4835 && R4808 = 10 && R4809 = R4835 && R4810 = 10 && R4811 = R4835 && R4812 = 10 && R4813 = R4835 && R4814 = 10 && R4815 = R4835 && R4816 = 10 && R4817 = R4835 && R4818 = 10 && R4819 = R4835 && R4820 = 10 && R4821 = R4835 && R4822 = 10 && R4823 = R4835 && R4824 = 10 && R4825 = R4835 && R4826 = 10 && R4827 = R4835 && R4828 = 10 && R4829 = R4835 && R4830 = 10 && R4831 = R4835 && R4832 = 10 && R4833 = R4835 && R4834 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R4557 + R4554 + R4705 + R4702 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R4729 && 9 < R4835 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R4555 + R4552 = 0 && R4556 + R4553 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R4555 + R4552 != 0 || R407 + R406 + -1*R4556 + -1*R4553 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R4742 = 0 && R4743 = 0)) && (R34 = 0 || (R4746 = 0 && R4747 = 0)) && (R34 = 0 || (R4748 = 0 && R4749 = 0)) && (R34 = 0 || (R4750 = 0 && R4751 = 0)) && (R34 = 0 || (R4752 = 0 && R4753 = 0)) && (R34 = 0 || (R4754 = 0 && R4755 = 0)) && (R34 = 0 || (R4758 = 0 && R4759 = 0)) && (R34 = 0 || (R4760 = 0 && R4761 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R4555 + R4552 = 0 || R407 + R406 < 1) && (R4563 + R4560 = 0 || (R4561 + R4558 = 0 && R4562 + R4559 = 0)) && (R4563 + R4560 = 0 || (R4703 + R4700 = 0 && R4704 + R4701 = 0));
// End of Parikh automata intersection problem
