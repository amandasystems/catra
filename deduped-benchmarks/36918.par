// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R45, R4552, R4553, R4554, R4555, R4556, R4557, R4558, R4559, R4560, R4561, R4562, R4563, R4564, R4565, R4566, R4567, R4568, R4569, R4570, R4571, R4572, R4573, R4574, R4575, R4576, R4577, R4578, R4579, R4580, R4581, R4582, R4583, R4584, R4585, R4586, R4587, R4588, R4589, R4590, R4591, R4592, R4593, R4594, R4595, R4596, R4597, R4598, R4599, R4600, R4601, R4602, R4603, R4604, R4605, R4606, R4607, R4608, R4609, R4610, R4611, R4612, R4613, R4614, R4615, R4616, R4617, R4618, R4619, R4620, R4621, R4622, R4623, R4624, R4625, R4626, R4627, R4628, R4629, R4630, R4631, R4632, R4633, R4634, R4635, R4636, R4637, R4638, R4639, R4640, R4641, R4642, R4643, R4644, R4645, R4646, R4647, R4648, R4649, R4650, R4651, R4652, R4653, R4654, R4655, R4656, R4657, R4658, R4659, R4660, R4661, R4662, R4663, R4664, R4665, R4666, R4667, R4668, R4669, R4670, R4671, R4672, R4673, R4674, R4675, R4676, R4677, R4678, R4679, R4680, R4681, R4682, R4683, R4684, R4685, R4686, R4687, R4688, R4689, R4690, R4691, R4692, R4693, R4694, R4695, R4696, R4697, R4698, R4699, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R4595 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R4594 += 1, R4595 += 1 };
  s1 -> s1 [0, 65535] { R4595 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R4597 += 1 };
  s0 -> s2 [0, 65535] { R4597 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4596 += 1, R4597 += 1 };
  s0 -> s3 [65, 65] { R4597 += 1 };
  s0 -> s1 [66, 65535] { R4597 += 1 };
  s1 -> s1 [0, 64] { R4597 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4597 += 1 };
  s1 -> s1 [66, 65535] { R4597 += 1 };
  s2 -> s1 [0, 64] { R4597 += 1 };
  s2 -> s2 [0, 65535] { R4597 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4597 += 1 };
  s2 -> s1 [66, 65535] { R4597 += 1 };
  s3 -> s3 [0, 65535] { R4597 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4599 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R4599 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R4598 += 1, R4599 += 1 };
  s1 -> s1 [0, 65535] { R4599 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535] { R4599 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4599 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R4599 += 1, R68 += 1, R69 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4599 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4601 += 1 };
  s0 -> s0 [0, 65535] { R4600 += 1, R4601 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4601 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R4602 += 1, R4603 += 1 };
  s0 -> s1 [0, 65535] { R4603 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R4603 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4603 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R4603 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535] { R4603 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4603 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R4603 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4604 += 1, R4605 += 1 };
  s0 -> s1 [0, 65535] { R4605 += 1 };
  s1 -> s1 [0, 65535] { R4605 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R4629 += 1 };
  s0 -> s0 [0, 65535] { R4628 += 1, R4629 += 1 };
  s0 -> s1 [45, 45] { R4629 += 1 };
  s0 -> s2 [46, 46] { R4629 += 1 };
  s0 -> s1 [48, 62] { R4629 += 1 };
  s0 -> s3 [65, 65] { R4629 += 1 };
  s0 -> s1 [66, 65535] { R4629 += 1 };
  s1 -> s1 [0, 43] { R4629 += 1 };
  s1 -> s1 [45, 45] { R4629 += 1 };
  s1 -> s2 [46, 46] { R4629 += 1 };
  s1 -> s1 [48, 62] { R4629 += 1 };
  s1 -> s3 [65, 65] { R4629 += 1 };
  s1 -> s1 [66, 65535] { R4629 += 1 };
  s2 -> s1 [0, 43] { R4629 += 1 };
  s2 -> s1 [45, 45] { R4629 += 1 };
  s2 -> s2 [46, 46] { R4629 += 1 };
  s2 -> s1 [48, 62] { R4629 += 1 };
  s2 -> s3 [65, 65] { R4629 += 1 };
  s2 -> s1 [66, 114] { R4629 += 1 };
  s2 -> s8 [115, 115] { R4629 += 1 };
  s2 -> s1 [116, 65535] { R4629 += 1 };
  s3 -> s3 [0, 43] { R4629 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4629 += 1 };
  s3 -> s4 [46, 46] { R4629 += 1 };
  s3 -> s3 [48, 62] { R4629 += 1 };
  s3 -> s3 [65, 65535] { R4629 += 1 };
  s4 -> s3 [0, 43] { R4629 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4629 += 1 };
  s4 -> s4 [46, 46] { R4629 += 1 };
  s4 -> s3 [48, 62] { R4629 += 1 };
  s4 -> s3 [65, 114] { R4629 += 1 };
  s4 -> s5 [115, 115] { R4629 += 1 };
  s4 -> s3 [116, 65535] { R4629 += 1 };
  s5 -> s3 [0, 43] { R4629 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4629 += 1 };
  s5 -> s4 [46, 46] { R4629 += 1 };
  s5 -> s3 [48, 62] { R4629 += 1 };
  s5 -> s3 [65, 110] { R4629 += 1 };
  s5 -> s6 [111, 111] { R4629 += 1 };
  s5 -> s3 [112, 65535] { R4629 += 1 };
  s6 -> s3 [0, 43] { R4629 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4629 += 1 };
  s6 -> s4 [46, 46] { R4629 += 1 };
  s6 -> s3 [48, 62] { R4629 += 1 };
  s6 -> s3 [65, 98] { R4629 += 1 };
  s6 -> s7 [99, 99] { R4629 += 1 };
  s6 -> s3 [100, 65535] { R4629 += 1 };
  s7 -> s3 [0, 43] { R4629 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4629 += 1 };
  s7 -> s4 [46, 46] { R4629 += 1 };
  s7 -> s3 [48, 62] { R4629 += 1 };
  s7 -> s3 [65, 106] { R4629 += 1 };
  s7 -> s3 [108, 65535] { R4629 += 1 };
  s8 -> s1 [0, 43] { R4629 += 1 };
  s8 -> s1 [45, 45] { R4629 += 1 };
  s8 -> s2 [46, 46] { R4629 += 1 };
  s8 -> s1 [48, 62] { R4629 += 1 };
  s8 -> s3 [65, 65] { R4629 += 1 };
  s8 -> s1 [66, 110] { R4629 += 1 };
  s8 -> s9 [111, 111] { R4629 += 1 };
  s8 -> s1 [112, 65535] { R4629 += 1 };
  s9 -> s1 [0, 43] { R4629 += 1 };
  s9 -> s1 [45, 45] { R4629 += 1 };
  s9 -> s2 [46, 46] { R4629 += 1 };
  s9 -> s1 [48, 62] { R4629 += 1 };
  s9 -> s3 [65, 65] { R4629 += 1 };
  s9 -> s1 [66, 98] { R4629 += 1 };
  s9 -> s10 [99, 99] { R4629 += 1 };
  s9 -> s1 [100, 65535] { R4629 += 1 };
  s10 -> s1 [0, 43] { R4629 += 1 };
  s10 -> s1 [45, 45] { R4629 += 1 };
  s10 -> s2 [46, 46] { R4629 += 1 };
  s10 -> s1 [48, 62] { R4629 += 1 };
  s10 -> s3 [65, 65] { R4629 += 1 };
  s10 -> s1 [66, 106] { R4629 += 1 };
  s10 -> s1 [108, 65535] { R4629 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R4630 += 1, R4631 += 1 };
  s0 -> s1 [0, 65535] { R4631 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4631 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R4633 += 1 };
  s0 -> s2 [0, 65535] { R4633 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R4632 += 1, R4633 += 1 };
  s0 -> s3 [58, 58] { R4633 += 1 };
  s0 -> s1 [59, 65535] { R4633 += 1 };
  s1 -> s1 [0, 57] { R4633 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4633 += 1 };
  s1 -> s1 [59, 65535] { R4633 += 1 };
  s2 -> s1 [0, 57] { R4633 += 1 };
  s2 -> s2 [0, 65535] { R4633 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4633 += 1 };
  s2 -> s1 [59, 65535] { R4633 += 1 };
  s3 -> s3 [0, 65535] { R4633 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R4635 += 1 };
  s0 -> s0 [0, 65535] { R4634 += 1, R4635 += 1 };
  s0 -> s2 [0, 65535] { R4635 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R4635 += 1 };
  s0 -> s1 [44, 65535] { R4635 += 1 };
  s1 -> s1 [0, 42] { R4635 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R4635 += 1 };
  s1 -> s1 [44, 65535] { R4635 += 1 };
  s2 -> s1 [0, 42] { R4635 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4635 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R4635 += 1 };
  s2 -> s1 [44, 65535] { R4635 += 1 };
  s3 -> s3 [0, 65535] { R4635 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4637 += 1 };
  s0 -> s2 [0, 65535] { R4637 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4636 += 1, R4637 += 1 };
  s0 -> s3 [65, 65] { R4637 += 1 };
  s0 -> s1 [66, 65535] { R4637 += 1 };
  s1 -> s1 [0, 64] { R4637 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4637 += 1 };
  s1 -> s1 [66, 65535] { R4637 += 1 };
  s2 -> s1 [0, 64] { R4637 += 1 };
  s2 -> s2 [0, 65535] { R4637 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4637 += 1 };
  s2 -> s1 [66, 65535] { R4637 += 1 };
  s3 -> s3 [0, 65535] { R4637 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R4639 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R4639 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R4638 += 1, R4639 += 1 };
  s0 -> s3 [91, 91] { R4639 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R4639 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4639 += 1 };
  s1 -> s1 [0, 65535] { R4639 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R4639 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4639 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R4639 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R4639 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R4639 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4639 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R4641 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R4640 += 1, R4641 += 1 };
  s0 -> s2 [0, 65535] { R4641 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4641 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R4641 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R4641 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4641 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R4641 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R4642 += 1, R4643 += 1 };
  s0 -> s1 [0, 65535] { R4643 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R4643 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R4643 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4643 += 1 };
  s2 -> s1 [0, 65535] { R4643 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4643 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4643 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R4645 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R4645 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R4644 += 1, R4645 += 1 };
  s0 -> s3 [108, 108] { R4645 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R4645 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R4645 += 1 };
  s1 -> s1 [0, 65535] { R4645 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R4645 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4645 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R4645 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R4645 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R4645 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4645 += 1 };
  s3 -> s5 [111, 111] { R4645 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R4645 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4645 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4645 += 1 };
  s5 -> s6 [99, 99] { R4645 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R4645 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R4645 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R4645 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R4645 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R4645 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R4645 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R4645 += 1 };
  s7 -> s8 [108, 108] { R4645 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R4645 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R4645 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R4645 += 1 };
  s8 -> s9 [104, 104] { R4645 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R4645 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R4645 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R4645 += 1 };
  s9 -> s10 [111, 111] { R4645 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R4645 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R4645 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4645 += 1 };
  s10 -> s11 [115, 115] { R4645 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R4645 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R4645 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R4645 += 1 };
  s11 -> s12 [116, 116] { R4645 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R4645 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R4645 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R4645 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R4646 += 1, R4647 += 1 };
  s0 -> s1 [0, 65535] { R4647 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R4647 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4647 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R4647 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R4647 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4647 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R4647 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R4649 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R4649 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R4648 += 1, R4649 += 1 };
  s1 -> s1 [0, 65535] { R4649 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R4649 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4649 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4649 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4649 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R4650 += 1, R4651 += 1 };
  s0 -> s1 [0, 65535] { R4651 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4651 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R4653 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R4653 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R4652 += 1, R4653 += 1 };
  s0 -> s3 [43, 43] { R4653 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R4653 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R4653 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R4653 += 1, R77 += 1, R42 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4653 += 1 };
  s1 -> s3 [43, 43] { R4653 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R4653 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R4653 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R4653 += 1, R77 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4653 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R4653 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R4653 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R4653 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R4653 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4653 += 1 };
  s4 -> s4 [0, 65535] { R4653 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4653 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R4655 += 1, R4571 += 1 };
  s0 -> s0 [0, 65535] { R4654 += 1, R4655 += 1 };
  s0 -> s2 [0, 65535] { R4655 += 1, R4570 += 1, R4571 += 1 };
  s0 -> s1 [66, 65535] { R4655 += 1, R4571 += 1 };
  s1 -> s1 [0, 64] { R4655 += 1, R4571 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4655 += 1 };
  s1 -> s1 [66, 65535] { R4655 += 1, R4571 += 1 };
  s2 -> s1 [0, 64] { R4655 += 1, R4571 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4655 += 1, R4570 += 1, R4571 += 1 };
  s2 -> s1 [66, 65535] { R4655 += 1, R4571 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R4657 += 1, R4573 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R4656 += 1, R4657 += 1 };
  s0 -> s2 [0, 65535] { R4657 += 1, R4572 += 1, R4573 += 1 };
  s1 -> s1 [0, 65535] { R4657 += 1, R4573 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R4657 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4657 += 1, R4573 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4657 += 1, R4572 += 1, R4573 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4657 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R4659 += 1, R4575 += 1 };
  s0 -> s0 [0, 65535] { R4658 += 1, R4659 += 1 };
  s0 -> s2 [0, 65535] { R4659 += 1, R4574 += 1, R4575 += 1 };
  s0 -> s1 [80, 65535] { R4659 += 1, R4575 += 1 };
  s1 -> s1 [0, 65] { R4659 += 1, R4575 += 1 };
  s1 -> s1 [0, 65535] { R4659 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4659 += 1, R4575 += 1 };
  s2 -> s1 [0, 65] { R4659 += 1, R4575 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4659 += 1, R4574 += 1, R4575 += 1 };
  s2 -> s1 [80, 65535] { R4659 += 1, R4575 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R4661 += 1, R4576 += 1, R4577 += 1 };
  s0 -> s0 [0, 65535] { R4660 += 1, R4661 += 1 };
  s0 -> s2 [0, 65535] { R4661 += 1, R4577 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R4661 += 1, R4576 += 1, R4577 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4661 += 1, R4577 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4661 += 1 };
  s2 -> s2 [0, 65535] { R4661 += 1, R4577 += 1, R407 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4661 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R4663 += 1, R4579 += 1 };
  s0 -> s2 [0, 65535] { R4663 += 1, R4578 += 1, R4579 += 1 };
  s0 -> s3 [0, 65535] { R4663 += 1, R4579 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R4662 += 1, R4663 += 1 };
  s0 -> s1 [81, 65535] { R4663 += 1, R4579 += 1 };
  s1 -> s1 [0, 79] { R4663 += 1, R4579 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4663 += 1 };
  s1 -> s1 [81, 65535] { R4663 += 1, R4579 += 1 };
  s2 -> s1 [0, 79] { R4663 += 1, R4579 += 1 };
  s2 -> s2 [0, 65535] { R4663 += 1, R4578 += 1, R4579 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4663 += 1, R4579 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R4663 += 1, R4579 += 1 };
  s3 -> s1 [0, 79] { R4663 += 1, R4579 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4663 += 1, R4579 += 1, R409 += 1 };
  s3 -> s5 [0, 65535] { R4663 += 1 };
  s3 -> s1 [81, 65535] { R4663 += 1, R4579 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4663 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R4665 += 1, R4581 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R4664 += 1, R4665 += 1 };
  s0 -> s2 [0, 65535] { R4665 += 1, R4580 += 1, R4581 += 1 };
  s0 -> s3 [0, 65535] { R4665 += 1, R4581 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R4665 += 1, R4581 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R4665 += 1, R4581 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R4665 += 1, R4581 += 1 };
  s1 -> s4 [0, 65535] { R4665 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R4665 += 1, R4581 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R4665 += 1, R4581 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R4665 += 1, R4580 += 1, R4581 += 1 };
  s2 -> s3 [0, 65535] { R4665 += 1, R4581 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R4665 += 1, R4581 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R4665 += 1, R4581 += 1, R413 += 1 };
  s3 -> s4 [0, 65535] { R4665 += 1 };
  s3 -> s3 [0, 65535] { R4665 += 1, R4581 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R4665 += 1, R4581 += 1, R413 += 1 };
  s4 -> s4 [0, 65535] { R4665 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R4667 += 1, R4582 += 1, R4583 += 1 };
  s0 -> s0 [0, 65535] { R4666 += 1, R4667 += 1 };
  s0 -> s2 [0, 65535] { R4667 += 1, R4583 += 1, R418 += 1, R419 += 1 };
  s0 -> s3 [0, 65535] { R4667 += 1, R4583 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4667 += 1, R4582 += 1, R4583 += 1 };
  s1 -> s2 [0, 65535] { R4667 += 1, R4583 += 1, R418 += 1, R419 += 1 };
  s1 -> s3 [0, 65535] { R4667 += 1, R4583 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R4667 += 1, R4583 += 1 };
  s2 -> s2 [0, 65535] { R4667 += 1, R4583 += 1, R418 += 1, R419 += 1 };
  s2 -> s5 [0, 65535] { R4667 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4667 += 1, R4583 += 1, R418 += 1, R419 += 1 };
  s3 -> s3 [0, 65535] { R4667 += 1, R4583 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535] { R4667 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4667 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4667 += 1, R4583 += 1 };
  s6 -> s5 [0, 65535] { R4667 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R4669 += 1, R4584 += 1, R4585 += 1 };
  s0 -> s3 [0, 65535] { R4669 += 1, R4585 += 1, R422 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R4668 += 1, R4669 += 1 };
  s0 -> s1 [91, 107] { R4669 += 1, R4585 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R4669 += 1, R4585 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s1 -> s5 [0, 65535] { R4669 += 1 };
  s1 -> s1 [0, 65535] { R4669 += 1, R4585 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R4669 += 1, R4584 += 1, R4585 += 1 };
  s2 -> s3 [0, 65535] { R4669 += 1, R4585 += 1, R422 += 1, R423 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R4669 += 1, R4585 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R4669 += 1, R4585 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s3 -> s3 [0, 65535] { R4669 += 1, R4585 += 1, R422 += 1, R423 += 1 };
  s3 -> s5 [0, 65535] { R4669 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R4669 += 1, R4585 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R4669 += 1, R4585 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s4 -> s5 [0, 65535] { R4669 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4669 += 1, R4585 += 1 };
  s4 -> s1 [91, 110] { R4669 += 1, R4585 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R4669 += 1, R4585 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s5 -> s5 [0, 65535] { R4669 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s7 -> s5 [0, 65535] { R4669 += 1 };
  s7 -> s7 [0, 65535] { R4669 += 1, R4585 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R4669 += 1, R4585 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R4669 += 1, R4585 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s8 -> s5 [0, 65535] { R4669 += 1 };
  s8 -> s8 [0, 65535] { R4669 += 1, R4585 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R4669 += 1, R4585 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R4669 += 1, R4585 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s9 -> s9 [0, 65535] { R4669 += 1, R4585 += 1 };
  s9 -> s5 [0, 65535] { R4669 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R4669 += 1, R4585 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R4669 += 1, R4585 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s10 -> s5 [0, 65535] { R4669 += 1 };
  s10 -> s10 [0, 65535] { R4669 += 1, R4585 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R4669 += 1, R4585 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R4669 += 1, R4585 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s11 -> s5 [0, 65535] { R4669 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R4669 += 1, R4585 += 1 };
  s11 -> s1 [91, 110] { R4669 += 1, R4585 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R4669 += 1, R4585 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s12 -> s5 [0, 65535] { R4669 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R4669 += 1, R4585 += 1 };
  s12 -> s1 [91, 114] { R4669 += 1, R4585 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R4669 += 1, R4585 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s13 -> s13 [0, 65535] { R4669 += 1, R4585 += 1 };
  s13 -> s5 [0, 65535] { R4669 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R4669 += 1, R4585 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R4669 += 1, R4585 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R4669 += 1, R4585 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R4669 += 1, R4585 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R4671 += 1, R4586 += 1, R4587 += 1 };
  s0 -> s0 [0, 65535] { R4670 += 1, R4671 += 1 };
  s0 -> s2 [0, 65535] { R4671 += 1, R4587 += 1 };
  s1 -> s1 [0, 65535] { R4671 += 1, R4586 += 1, R4587 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4671 += 1, R4587 += 1 };
  s2 -> s3 [0, 65535] { R4671 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4671 += 1, R4587 += 1 };
  s3 -> s3 [0, 65535] { R4671 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R4673 += 1, R4589 += 1, R4562 += 1, R4563 += 1 };
  s0 -> s2 [0, 65535] { R4673 += 1, R4588 += 1, R4589 += 1 };
  s0 -> s0 [0, 65535] { R4672 += 1, R4673 += 1 };
  s0 -> s3 [0, 65535] { R4673 += 1, R4589 += 1, R4561 += 1, R4562 += 1 };
  s1 -> s1 [0, 65535] { R4673 += 1, R4589 += 1, R4562 += 1, R4563 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R4673 += 1, R4589 += 1 };
  s1 -> s5 [0, 65535] { R4673 += 1 };
  s2 -> s1 [0, 65535] { R4673 += 1, R4589 += 1, R4562 += 1, R4563 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4673 += 1, R4588 += 1, R4589 += 1 };
  s2 -> s3 [0, 65535] { R4673 += 1, R4589 += 1, R4561 += 1, R4562 += 1 };
  s3 -> s1 [0, 65535] { R4673 += 1, R4589 += 1, R4562 += 1, R4563 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4673 += 1 };
  s3 -> s3 [0, 65535] { R4673 += 1, R4589 += 1, R4561 += 1, R4562 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4673 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4673 += 1, R4589 += 1 };
  s6 -> s5 [0, 65535] { R4673 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R4675 += 1, R4591 += 1 };
  s0 -> s2 [0, 65535] { R4675 += 1, R4590 += 1, R4591 += 1 };
  s0 -> s0 [0, 65535] { R4674 += 1, R4675 += 1 };
  s1 -> s1 [0, 65535] { R4675 += 1, R4591 += 1 };
  s1 -> s4 [0, 65535] { R4675 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4675 += 1, R4591 += 1 };
  s2 -> s2 [0, 65535] { R4675 += 1, R4590 += 1, R4591 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4675 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s0 -> s2 [0, 65535] { R4677 += 1, R4593 += 1, R4567 += 1, R4568 += 1 };
  s0 -> s3 [0, 65535] { R4677 += 1, R4592 += 1, R4593 += 1 };
  s0 -> s0 [0, 65535] { R4676 += 1, R4677 += 1 };
  s0 -> s4 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s0 -> s5 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s0 -> s1 [81, 65535] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s1 -> s1 [0, 79] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s1 -> s7 [0, 65535] { R4677 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R4677 += 1, R4593 += 1 };
  s1 -> s4 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s1 -> s5 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s1 -> s1 [81, 65535] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s2 -> s1 [0, 79] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s2 -> s7 [0, 65535] { R4677 += 1 };
  s2 -> s2 [0, 65535] { R4677 += 1, R4593 += 1, R4567 += 1, R4568 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s2 -> s5 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s2 -> s1 [81, 65535] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s3 -> s1 [0, 79] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s3 -> s2 [0, 65535] { R4677 += 1, R4593 += 1, R4567 += 1, R4568 += 1 };
  s3 -> s3 [0, 65535] { R4677 += 1, R4592 += 1, R4593 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s3 -> s5 [80, 80] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s3 -> s1 [81, 65535] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s4 -> s4 [0, 65535] { R4677 += 1, R4593 += 1 };
  s4 -> s7 [0, 65535] { R4677 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4677 += 1, R4593 += 1, R4568 += 1, R4569 += 1 };
  s5 -> s6 [0, 65535] { R4677 += 1, R4593 += 1 };
  s5 -> s7 [0, 65535] { R4677 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4677 += 1, R4593 += 1 };
  s6 -> s7 [0, 65535] { R4677 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4677 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R4679 += 1, R4606 += 1, R4607 += 1 };
  s0 -> s2 [0, 65535] { R4679 += 1, R4607 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R4678 += 1, R4679 += 1 };
  s1 -> s1 [0, 65535] { R4679 += 1, R4606 += 1, R4607 += 1 };
  s1 -> s2 [0, 65535] { R4679 += 1, R4607 += 1, R34 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4679 += 1, R4607 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R4679 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4679 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R4681 += 1, R4609 += 1 };
  s0 -> s0 [0, 65535] { R4680 += 1, R4681 += 1 };
  s0 -> s2 [0, 65535] { R4681 += 1, R4608 += 1, R4609 += 1 };
  s0 -> s3 [65, 65] { R4681 += 1, R4609 += 1 };
  s0 -> s4 [65, 65] { R4681 += 1, R4609 += 1 };
  s0 -> s5 [80, 80] { R4681 += 1, R4609 += 1 };
  s0 -> s1 [81, 65535] { R4681 += 1, R4609 += 1 };
  s1 -> s1 [0, 64] { R4681 += 1, R4609 += 1 };
  s1 -> s3 [65, 65] { R4681 += 1, R4609 += 1 };
  s1 -> s4 [65, 65] { R4681 += 1, R4609 += 1 };
  s1 -> s5 [80, 80] { R4681 += 1, R4609 += 1 };
  s1 -> s1 [81, 65535] { R4681 += 1, R4609 += 1 };
  s2 -> s1 [0, 64] { R4681 += 1, R4609 += 1 };
  s2 -> s2 [0, 65535] { R4681 += 1, R4608 += 1, R4609 += 1 };
  s2 -> s3 [65, 65] { R4681 += 1, R4609 += 1 };
  s2 -> s4 [65, 65] { R4681 += 1, R4609 += 1 };
  s2 -> s5 [80, 80] { R4681 += 1, R4609 += 1 };
  s2 -> s1 [81, 65535] { R4681 += 1, R4609 += 1 };
  s4 -> s4 [0, 65] { R4681 += 1, R4609 += 1 };
  s4 -> s7 [80, 80] { R4681 += 1, R4609 += 1 };
  s4 -> s4 [81, 65535] { R4681 += 1, R4609 += 1 };
  s5 -> s5 [0, 64] { R4681 += 1, R4609 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4681 += 1 };
  s5 -> s7 [65, 65] { R4681 += 1, R4609 += 1 };
  s5 -> s8 [65, 65] { R4681 += 1, R4609 += 1 };
  s5 -> s5 [80, 65535] { R4681 += 1, R4609 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4681 += 1, R4609 += 1 };
  s7 -> s7 [0, 65535] { R4681 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R4681 += 1, R4609 += 1 };
  s8 -> s8 [0, 65535] { R4681 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R4683 += 1, R4611 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R4683 += 1, R4610 += 1, R4611 += 1 };
  s0 -> s0 [0, 65535] { R4682 += 1, R4683 += 1 };
  s0 -> s3 [65, 65] { R4683 += 1, R4611 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R4683 += 1, R4611 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R4683 += 1, R4611 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R4683 += 1, R4611 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R4683 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4683 += 1, R4611 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R4683 += 1, R4611 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R4683 += 1, R4611 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R4683 += 1, R4611 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R4683 += 1, R4610 += 1, R4611 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4683 += 1, R4611 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R4683 += 1, R4611 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R4683 += 1, R4611 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R4683 += 1, R4611 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4683 += 1 };
  s4 -> s4 [0, 65535] { R4683 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4683 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R4685 += 1, R4613 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R4685 += 1, R4612 += 1, R4613 += 1 };
  s0 -> s0 [0, 65535] { R4684 += 1, R4685 += 1 };
  s0 -> s3 [65, 65] { R4685 += 1, R4613 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R4685 += 1, R4613 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R4685 += 1, R4613 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R4685 += 1, R4613 += 1, R408 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4685 += 1 };
  s1 -> s3 [65, 65] { R4685 += 1, R4613 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R4685 += 1, R4613 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R4685 += 1, R4613 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R4685 += 1, R4613 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R4685 += 1, R4612 += 1, R4613 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4685 += 1, R4613 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R4685 += 1, R4613 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R4685 += 1, R4613 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R4685 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4685 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4685 += 1, R4613 += 1, R408 += 1 };
  s5 -> s5 [0, 65535] { R4685 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R4687 += 1, R4614 += 1, R4615 += 1 };
  s0 -> s0 [0, 65535] { R4686 += 1, R4687 += 1 };
  s0 -> s3 [65, 65] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R4687 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R4687 += 1, R4614 += 1, R4615 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R4687 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4687 += 1, R4615 += 1, R410 += 1, R411 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4687 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4687 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R4689 += 1, R4616 += 1, R4617 += 1 };
  s0 -> s0 [0, 65535] { R4688 += 1, R4689 += 1 };
  s0 -> s3 [65, 65] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4689 += 1 };
  s1 -> s3 [65, 65] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4689 += 1, R4616 += 1, R4617 += 1 };
  s2 -> s3 [65, 65] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4689 += 1 };
  s3 -> s3 [0, 65535] { R4689 += 1, R4617 += 1, R414 += 1, R415 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4689 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4689 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R4691 += 1, R4618 += 1, R4619 += 1 };
  s0 -> s0 [0, 65535] { R4690 += 1, R4691 += 1 };
  s0 -> s3 [65, 65] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 65535] { R4691 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R4691 += 1, R4618 += 1, R4619 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R4691 += 1 };
  s4 -> s5 [0, 65535] { R4691 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4691 += 1, R4619 += 1, R420 += 1, R421 += 1 };
  s5 -> s5 [0, 65535] { R4691 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s2 [0, 64] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s3 [0, 65535] { R4693 += 1, R4620 += 1, R4621 += 1 };
  s0 -> s0 [0, 65535] { R4692 += 1, R4693 += 1 };
  s0 -> s4 [65, 65] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s5 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s6 [65, 65] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s7 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s0 -> s1 [66, 65535] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s0 -> s2 [66, 65535] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s1 [0, 64] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s1 -> s2 [0, 64] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s4 [65, 65] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s1 -> s5 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s6 [65, 65] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s1 -> s7 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s1 -> s1 [66, 65535] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s1 -> s2 [66, 65535] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s11 [0, 64] { R4693 += 1, R4621 += 1 };
  s2 -> s2 [0, 64] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s8 [65, 65] { R4693 += 1, R4621 += 1 };
  s2 -> s12 [65, 65] { R4693 += 1, R4621 += 1 };
  s2 -> s5 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s7 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s2 -> s11 [66, 65535] { R4693 += 1, R4621 += 1 };
  s2 -> s2 [66, 65535] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s1 [0, 64] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s2 [0, 64] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s3 [0, 65535] { R4693 += 1, R4620 += 1, R4621 += 1 };
  s3 -> s4 [65, 65] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s5 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s6 [65, 65] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s7 [65, 65] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s3 -> s1 [66, 65535] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s3 -> s2 [66, 65535] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s4 -> s4 [0, 65535] { R4693 += 1, R4621 += 1, R4552 += 1, R4553 += 1 };
  s4 -> s5 [0, 65535] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s5 -> s8 [0, 65535] { R4693 += 1, R4621 += 1 };
  s5 -> s5 [0, 65535] { R4693 += 1, R4621 += 1, R4553 += 1, R4554 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4693 += 1, R4621 += 1 };
  s8 -> s10 [0, 65535] { R4693 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4693 += 1 };
  s11 -> s11 [0, 64] { R4693 += 1, R4621 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4693 += 1 };
  s11 -> s8 [65, 65] { R4693 += 1, R4621 += 1 };
  s11 -> s12 [65, 65] { R4693 += 1, R4621 += 1 };
  s11 -> s11 [66, 65535] { R4693 += 1, R4621 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4693 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s0 [0, 65535] { R4694 += 1, R4695 += 1 };
  s0 -> s2 [0, 65535] { R4695 += 1, R4622 += 1, R4623 += 1 };
  s0 -> s3 [65, 65] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s4 [65, 65] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s0 -> s1 [66, 65535] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s1 [0, 64] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4695 += 1 };
  s1 -> s3 [65, 65] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s4 [65, 65] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s1 -> s1 [66, 65535] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s1 [0, 64] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s2 [0, 65535] { R4695 += 1, R4622 += 1, R4623 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s4 [65, 65] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s2 -> s1 [66, 65535] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s3 -> s6 [0, 65535] { R4695 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4695 += 1, R4623 += 1, R4558 += 1, R4559 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4695 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4695 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R4697 += 1, R4625 += 1 };
  s0 -> s0 [0, 65535] { R4696 += 1, R4697 += 1 };
  s0 -> s2 [0, 65535] { R4697 += 1, R4624 += 1, R4625 += 1 };
  s0 -> s3 [65, 65] { R4697 += 1, R4625 += 1 };
  s0 -> s4 [65, 65] { R4697 += 1, R4625 += 1 };
  s0 -> s1 [66, 65535] { R4697 += 1, R4625 += 1 };
  s1 -> s1 [0, 64] { R4697 += 1, R4625 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4697 += 1 };
  s1 -> s3 [65, 65] { R4697 += 1, R4625 += 1 };
  s1 -> s4 [65, 65] { R4697 += 1, R4625 += 1 };
  s1 -> s1 [66, 65535] { R4697 += 1, R4625 += 1 };
  s2 -> s1 [0, 64] { R4697 += 1, R4625 += 1 };
  s2 -> s2 [0, 65535] { R4697 += 1, R4624 += 1, R4625 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4697 += 1, R4625 += 1 };
  s2 -> s4 [65, 65] { R4697 += 1, R4625 += 1 };
  s2 -> s1 [66, 65535] { R4697 += 1, R4625 += 1 };
  s3 -> s3 [0, 65535] { R4697 += 1, R4625 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4697 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4697 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4697 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s0 -> s2 [0, 65535] { R4699 += 1, R4626 += 1, R4627 += 1 };
  s0 -> s0 [0, 65535] { R4698 += 1, R4699 += 1 };
  s0 -> s3 [65, 65] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s0 -> s4 [65, 65] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s0 -> s1 [66, 65535] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s1 -> s1 [0, 64] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4699 += 1 };
  s1 -> s3 [65, 65] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s1 -> s4 [65, 65] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s1 -> s1 [66, 65535] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s2 -> s1 [0, 64] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4699 += 1, R4626 += 1, R4627 += 1 };
  s2 -> s3 [65, 65] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s2 -> s4 [65, 65] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s2 -> s1 [66, 65535] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4699 += 1, R4627 += 1, R4564 += 1, R4565 += 1 };
  s3 -> s6 [0, 65535] { R4699 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4699 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4699 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R4593 && R6 = R4699 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R4593 && R58 = 0 && R59 = R4593 && R60 = 0 && R61 = R4593 && R62 = 0 && R63 = R4699 && R64 = 0 && R65 = R4699 && R66 = 0 && R67 = R4699 && R4570 = 0 && R4571 = R4593 && R4572 = 0 && R4573 = R4593 && R4574 = 0 && R4575 = R4593 && R4576 = 0 && R4577 = R4593 && R4578 = 0 && R4579 = R4593 && R4580 = 0 && R4581 = R4593 && R4582 = 0 && R4583 = R4593 && R4584 = 0 && R4585 = R4593 && R4586 = 0 && R4587 = R4593 && R4588 = 0 && R4589 = R4593 && R4590 = 0 && R4591 = R4593 && R4592 = 0 && R4594 = 0 && R4595 = R4699 && R4596 = 0 && R4597 = R4699 && R4598 = 0 && R4599 = R4699 && R4600 = 0 && R4601 = R4699 && R4602 = 0 && R4603 = R4699 && R4604 = 0 && R4605 = R4699 && R4608 = 0 && R4609 = 0 && R4620 = 0 && R4621 = 0 && R4628 = 10 && R4629 = R4699 && R4630 = 10 && R4631 = R4699 && R4632 = 10 && R4633 = R4699 && R4634 = 10 && R4635 = R4699 && R4636 = 10 && R4637 = R4699 && R4638 = 10 && R4639 = R4699 && R4640 = 10 && R4641 = R4699 && R4642 = 10 && R4643 = R4699 && R4644 = 10 && R4645 = R4699 && R4646 = 10 && R4647 = R4699 && R4648 = 10 && R4649 = R4699 && R4650 = 10 && R4651 = R4699 && R4652 = 10 && R4653 = R4699 && R4654 = 10 && R4655 = R4699 && R4656 = 10 && R4657 = R4699 && R4658 = 10 && R4659 = R4699 && R4660 = 10 && R4661 = R4699 && R4662 = 10 && R4663 = R4699 && R4664 = 10 && R4665 = R4699 && R4666 = 10 && R4667 = R4699 && R4668 = 10 && R4669 = R4699 && R4670 = 10 && R4671 = R4699 && R4672 = 10 && R4673 = R4699 && R4674 = 10 && R4675 = R4699 && R4676 = 10 && R4677 = R4699 && R4678 = 10 && R4679 = R4699 && R4680 = 10 && R4681 = R4699 && R4682 = 10 && R4683 = R4699 && R4684 = 10 && R4685 = R4699 && R4686 = 10 && R4687 = R4699 && R4688 = 10 && R4689 = R4699 && R4690 = 10 && R4691 = R4699 && R4692 = 10 && R4693 = R4699 && R4694 = 10 && R4695 = R4699 && R4696 = 10 && R4697 = R4699 && R4698 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R4557 + R4554 + R4569 + R4566 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R4593 && 9 < R4699 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R4555 + R4552 = 0 && R4556 + R4553 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R4555 + R4552 != 0 || R407 + R406 + -1*R4556 + -1*R4553 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R4606 = 0 && R4607 = 0)) && (R34 = 0 || (R4610 = 0 && R4611 = 0)) && (R34 = 0 || (R4612 = 0 && R4613 = 0)) && (R34 = 0 || (R4614 = 0 && R4615 = 0)) && (R34 = 0 || (R4616 = 0 && R4617 = 0)) && (R34 = 0 || (R4618 = 0 && R4619 = 0)) && (R34 = 0 || (R4622 = 0 && R4623 = 0)) && (R34 = 0 || (R4624 = 0 && R4625 = 0)) && (R34 = 0 || (R4626 = 0 && R4627 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R4555 + R4552 = 0 || R407 + R406 < 1) && (R4563 + R4560 = 0 || (R4561 + R4558 = 0 && R4562 + R4559 = 0)) && (R4563 + R4560 = 0 || (R4567 + R4564 = 0 && R4568 + R4565 = 0));
// End of Parikh automata intersection problem
