// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2488, R2489, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R2500, R2501, R2502, R2503, R2504, R2505, R2506, R2507, R2508, R2509, R2510, R2511, R2512, R2513, R2514, R2515, R2516, R2517, R2518, R2519, R2520, R2521, R2522, R2523, R2524, R2525, R2526, R2527, R2528, R2529, R2530, R2531, R2532, R2533, R2534, R2535, R2536, R2537, R2538, R2539, R2540, R2541, R2542, R2543, R2544, R2545, R2546, R2547, R2548, R2549, R2550, R2551, R2552, R2553, R2554, R2555, R2556, R2557, R2558, R2559, R2560, R2561, R2562, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R2617, R2618, R2619, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R2630, R2631, R2632, R2633, R2634, R2635, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R420, R421, R422, R423, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R2530 += 1, R2531 += 1 };
  s0 -> s1 [0, 65535] { R2531 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2531 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R2533 += 1 };
  s0 -> s2 [0, 65535] { R2533 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2532 += 1, R2533 += 1 };
  s0 -> s3 [65, 65] { R2533 += 1 };
  s0 -> s1 [66, 65535] { R2533 += 1 };
  s1 -> s1 [0, 64] { R2533 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2533 += 1 };
  s1 -> s1 [66, 65535] { R2533 += 1 };
  s2 -> s1 [0, 64] { R2533 += 1 };
  s2 -> s2 [0, 65535] { R2533 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R2533 += 1 };
  s2 -> s1 [66, 65535] { R2533 += 1 };
  s3 -> s3 [0, 65535] { R2533 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2534 += 1, R2535 += 1 };
  s0 -> s1 [0, 65535] { R2535 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R2535 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R2535 += 1, R68 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2535 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2535 += 1 };
  s2 -> s2 [0, 65535] { R2535 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2535 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2536 += 1, R2537 += 1 };
  s0 -> s1 [0, 65535] { R2537 += 1 };
  s1 -> s1 [0, 65535] { R2537 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2538 += 1, R2539 += 1 };
  s0 -> s1 [0, 65535] { R2539 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R2539 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R2539 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2539 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535] { R2539 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2539 += 1, R85 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R2539 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2541 += 1 };
  s0 -> s0 [0, 65535] { R2540 += 1, R2541 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2541 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R2565 += 1 };
  s0 -> s0 [0, 65535] { R2564 += 1, R2565 += 1 };
  s0 -> s1 [45, 45] { R2565 += 1 };
  s0 -> s2 [46, 46] { R2565 += 1 };
  s0 -> s1 [48, 62] { R2565 += 1 };
  s0 -> s3 [65, 65] { R2565 += 1 };
  s0 -> s1 [66, 65535] { R2565 += 1 };
  s1 -> s1 [0, 43] { R2565 += 1 };
  s1 -> s1 [45, 45] { R2565 += 1 };
  s1 -> s2 [46, 46] { R2565 += 1 };
  s1 -> s1 [48, 62] { R2565 += 1 };
  s1 -> s3 [65, 65] { R2565 += 1 };
  s1 -> s1 [66, 65535] { R2565 += 1 };
  s2 -> s1 [0, 43] { R2565 += 1 };
  s2 -> s1 [45, 45] { R2565 += 1 };
  s2 -> s2 [46, 46] { R2565 += 1 };
  s2 -> s1 [48, 62] { R2565 += 1 };
  s2 -> s3 [65, 65] { R2565 += 1 };
  s2 -> s1 [66, 114] { R2565 += 1 };
  s2 -> s8 [115, 115] { R2565 += 1 };
  s2 -> s1 [116, 65535] { R2565 += 1 };
  s3 -> s3 [0, 43] { R2565 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2565 += 1 };
  s3 -> s4 [46, 46] { R2565 += 1 };
  s3 -> s3 [48, 62] { R2565 += 1 };
  s3 -> s3 [65, 65535] { R2565 += 1 };
  s4 -> s3 [0, 43] { R2565 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2565 += 1 };
  s4 -> s4 [46, 46] { R2565 += 1 };
  s4 -> s3 [48, 62] { R2565 += 1 };
  s4 -> s3 [65, 114] { R2565 += 1 };
  s4 -> s5 [115, 115] { R2565 += 1 };
  s4 -> s3 [116, 65535] { R2565 += 1 };
  s5 -> s3 [0, 43] { R2565 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2565 += 1 };
  s5 -> s4 [46, 46] { R2565 += 1 };
  s5 -> s3 [48, 62] { R2565 += 1 };
  s5 -> s3 [65, 110] { R2565 += 1 };
  s5 -> s6 [111, 111] { R2565 += 1 };
  s5 -> s3 [112, 65535] { R2565 += 1 };
  s6 -> s3 [0, 43] { R2565 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2565 += 1 };
  s6 -> s4 [46, 46] { R2565 += 1 };
  s6 -> s3 [48, 62] { R2565 += 1 };
  s6 -> s3 [65, 98] { R2565 += 1 };
  s6 -> s7 [99, 99] { R2565 += 1 };
  s6 -> s3 [100, 65535] { R2565 += 1 };
  s7 -> s3 [0, 43] { R2565 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2565 += 1 };
  s7 -> s4 [46, 46] { R2565 += 1 };
  s7 -> s3 [48, 62] { R2565 += 1 };
  s7 -> s3 [65, 106] { R2565 += 1 };
  s7 -> s3 [108, 65535] { R2565 += 1 };
  s8 -> s1 [0, 43] { R2565 += 1 };
  s8 -> s1 [45, 45] { R2565 += 1 };
  s8 -> s2 [46, 46] { R2565 += 1 };
  s8 -> s1 [48, 62] { R2565 += 1 };
  s8 -> s3 [65, 65] { R2565 += 1 };
  s8 -> s1 [66, 110] { R2565 += 1 };
  s8 -> s9 [111, 111] { R2565 += 1 };
  s8 -> s1 [112, 65535] { R2565 += 1 };
  s9 -> s1 [0, 43] { R2565 += 1 };
  s9 -> s1 [45, 45] { R2565 += 1 };
  s9 -> s2 [46, 46] { R2565 += 1 };
  s9 -> s1 [48, 62] { R2565 += 1 };
  s9 -> s3 [65, 65] { R2565 += 1 };
  s9 -> s1 [66, 98] { R2565 += 1 };
  s9 -> s10 [99, 99] { R2565 += 1 };
  s9 -> s1 [100, 65535] { R2565 += 1 };
  s10 -> s1 [0, 43] { R2565 += 1 };
  s10 -> s1 [45, 45] { R2565 += 1 };
  s10 -> s2 [46, 46] { R2565 += 1 };
  s10 -> s1 [48, 62] { R2565 += 1 };
  s10 -> s3 [65, 65] { R2565 += 1 };
  s10 -> s1 [66, 106] { R2565 += 1 };
  s10 -> s1 [108, 65535] { R2565 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R2566 += 1, R2567 += 1 };
  s0 -> s1 [0, 65535] { R2567 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R2567 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R2569 += 1 };
  s0 -> s2 [0, 65535] { R2569 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R2568 += 1, R2569 += 1 };
  s0 -> s3 [58, 58] { R2569 += 1 };
  s0 -> s1 [59, 65535] { R2569 += 1 };
  s1 -> s1 [0, 57] { R2569 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2569 += 1 };
  s1 -> s1 [59, 65535] { R2569 += 1 };
  s2 -> s1 [0, 57] { R2569 += 1 };
  s2 -> s2 [0, 65535] { R2569 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2569 += 1 };
  s2 -> s1 [59, 65535] { R2569 += 1 };
  s3 -> s3 [0, 65535] { R2569 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R2571 += 1 };
  s0 -> s2 [0, 65535] { R2571 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R2570 += 1, R2571 += 1 };
  s0 -> s3 [43, 43] { R2571 += 1 };
  s0 -> s1 [44, 65535] { R2571 += 1 };
  s1 -> s1 [0, 42] { R2571 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R2571 += 1 };
  s1 -> s1 [44, 65535] { R2571 += 1 };
  s2 -> s1 [0, 42] { R2571 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2571 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R2571 += 1 };
  s2 -> s1 [44, 65535] { R2571 += 1 };
  s3 -> s3 [0, 65535] { R2571 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2573 += 1 };
  s0 -> s2 [0, 65535] { R2573 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2572 += 1, R2573 += 1 };
  s0 -> s3 [65, 65] { R2573 += 1 };
  s0 -> s1 [66, 65535] { R2573 += 1 };
  s1 -> s1 [0, 64] { R2573 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2573 += 1 };
  s1 -> s1 [66, 65535] { R2573 += 1 };
  s2 -> s1 [0, 64] { R2573 += 1 };
  s2 -> s2 [0, 65535] { R2573 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R2573 += 1 };
  s2 -> s1 [66, 65535] { R2573 += 1 };
  s3 -> s3 [0, 65535] { R2573 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R2575 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R2574 += 1, R2575 += 1 };
  s0 -> s2 [0, 65535] { R2575 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R2575 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R2575 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R2575 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2575 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R2575 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R2575 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2575 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R2575 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R2575 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2575 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R2576 += 1, R2577 += 1 };
  s0 -> s1 [0, 65535] { R2577 += 1, R41 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R2577 += 1, R40 += 1, R41 += 1 };
  s1 -> s4 [0, 65535] { R2577 += 1 };
  s1 -> s1 [0, 65535] { R2577 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2577 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R2577 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2577 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R2578 += 1, R2579 += 1 };
  s0 -> s1 [0, 65535] { R2579 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R2579 += 1, R57 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R2579 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2579 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R2579 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2579 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R2579 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R2581 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R2581 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R2580 += 1, R2581 += 1 };
  s0 -> s3 [108, 108] { R2581 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R2581 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R2581 += 1 };
  s1 -> s1 [0, 65535] { R2581 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R2581 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2581 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R2581 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R2581 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R2581 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2581 += 1 };
  s3 -> s5 [111, 111] { R2581 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R2581 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R2581 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2581 += 1 };
  s5 -> s6 [99, 99] { R2581 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R2581 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R2581 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R2581 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R2581 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R2581 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R2581 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R2581 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R2581 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R2581 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R2581 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R2581 += 1 };
  s8 -> s9 [104, 104] { R2581 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R2581 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R2581 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R2581 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R2581 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R2581 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R2581 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R2581 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R2581 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R2581 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R2581 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R2581 += 1 };
  s11 -> s12 [116, 116] { R2581 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R2581 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R2581 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R2581 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R2583 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R2583 += 1, R61 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R2582 += 1, R2583 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2583 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R2583 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2583 += 1 };
  s2 -> s2 [0, 65535] { R2583 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2583 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R2585 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R2585 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R2584 += 1, R2585 += 1 };
  s1 -> s4 [0, 65535] { R2585 += 1 };
  s1 -> s1 [0, 65535] { R2585 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2585 += 1, R75 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R2585 += 1, R74 += 1, R75 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2585 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R2586 += 1, R2587 += 1 };
  s0 -> s1 [0, 65535] { R2587 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2587 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R2589 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R2588 += 1, R2589 += 1 };
  s0 -> s2 [0, 65535] { R2589 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R2589 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R2589 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R2589 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R2589 += 1, R77 += 1, R42 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2589 += 1 };
  s1 -> s3 [43, 43] { R2589 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R2589 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R2589 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R2589 += 1, R77 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2589 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R2589 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R2589 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R2589 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R2589 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2589 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2589 += 1, R77 += 1, R42 += 1 };
  s5 -> s5 [0, 65535] { R2589 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R2591 += 1, R2507 += 1 };
  s0 -> s2 [0, 65535] { R2591 += 1, R2506 += 1, R2507 += 1 };
  s0 -> s0 [0, 65535] { R2590 += 1, R2591 += 1 };
  s0 -> s1 [66, 65535] { R2591 += 1, R2507 += 1 };
  s1 -> s1 [0, 64] { R2591 += 1, R2507 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2591 += 1 };
  s1 -> s1 [66, 65535] { R2591 += 1, R2507 += 1 };
  s2 -> s1 [0, 64] { R2591 += 1, R2507 += 1 };
  s2 -> s2 [0, 65535] { R2591 += 1, R2506 += 1, R2507 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2591 += 1, R2507 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R2593 += 1, R2509 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R2592 += 1, R2593 += 1 };
  s0 -> s2 [0, 65535] { R2593 += 1, R2508 += 1, R2509 += 1 };
  s1 -> s4 [0, 65535] { R2593 += 1 };
  s1 -> s1 [0, 65535] { R2593 += 1, R2509 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2593 += 1, R2509 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2593 += 1, R2508 += 1, R2509 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2593 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R2595 += 1, R2511 += 1 };
  s0 -> s0 [0, 65535] { R2594 += 1, R2595 += 1 };
  s0 -> s2 [0, 65535] { R2595 += 1, R2510 += 1, R2511 += 1 };
  s0 -> s1 [80, 65535] { R2595 += 1, R2511 += 1 };
  s1 -> s1 [0, 65] { R2595 += 1, R2511 += 1 };
  s1 -> s1 [0, 65535] { R2595 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2595 += 1, R2511 += 1 };
  s2 -> s1 [0, 65] { R2595 += 1, R2511 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2595 += 1, R2510 += 1, R2511 += 1 };
  s2 -> s1 [80, 65535] { R2595 += 1, R2511 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R2597 += 1, R2513 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R2597 += 1, R2512 += 1, R2513 += 1 };
  s0 -> s0 [0, 65535] { R2596 += 1, R2597 += 1 };
  s1 -> s4 [0, 65535] { R2597 += 1 };
  s1 -> s1 [0, 65535] { R2597 += 1, R2513 += 1, R407 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2597 += 1, R2513 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2597 += 1, R2512 += 1, R2513 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2597 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R2599 += 1, R2515 += 1 };
  s0 -> s2 [0, 65535] { R2599 += 1, R2514 += 1, R2515 += 1 };
  s0 -> s0 [0, 65535] { R2598 += 1, R2599 += 1 };
  s0 -> s3 [0, 65535] { R2599 += 1, R2515 += 1, R409 += 1 };
  s0 -> s1 [81, 65535] { R2599 += 1, R2515 += 1 };
  s1 -> s1 [0, 79] { R2599 += 1, R2515 += 1 };
  s1 -> s1 [0, 65535] { R2599 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R2599 += 1, R2515 += 1 };
  s2 -> s1 [0, 79] { R2599 += 1, R2515 += 1 };
  s2 -> s2 [0, 65535] { R2599 += 1, R2514 += 1, R2515 += 1 };
  s2 -> s3 [0, 65535] { R2599 += 1, R2515 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R2599 += 1, R2515 += 1 };
  s3 -> s1 [0, 79] { R2599 += 1, R2515 += 1 };
  s3 -> s4 [0, 65535] { R2599 += 1 };
  s3 -> s3 [0, 65535] { R2599 += 1, R2515 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R2599 += 1, R2515 += 1 };
  s4 -> s4 [0, 65535] { R2599 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R2601 += 1, R2517 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R2601 += 1, R2517 += 1, R412 += 1, R413 += 1 };
  s0 -> s3 [0, 65535] { R2601 += 1, R2516 += 1, R2517 += 1 };
  s0 -> s0 [0, 65535] { R2600 += 1, R2601 += 1 };
  s0 -> s1 [81, 65535] { R2601 += 1, R2517 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R2601 += 1, R2517 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R2601 += 1, R2517 += 1 };
  s1 -> s5 [0, 65535] { R2601 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R2601 += 1, R2517 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R2601 += 1, R2517 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R2601 += 1, R2517 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535] { R2601 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R2601 += 1, R2517 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R2601 += 1, R2517 += 1, R413 += 1 };
  s3 -> s2 [0, 65535] { R2601 += 1, R2517 += 1, R412 += 1, R413 += 1 };
  s3 -> s3 [0, 65535] { R2601 += 1, R2516 += 1, R2517 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R2601 += 1, R2517 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2601 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R2603 += 1, R2519 += 1, R418 += 1, R419 += 1 };
  s0 -> s0 [0, 65535] { R2602 += 1, R2603 += 1 };
  s0 -> s2 [0, 65535] { R2603 += 1, R2519 += 1, R417 += 1, R418 += 1 };
  s0 -> s3 [0, 65535] { R2603 += 1, R2518 += 1, R2519 += 1 };
  s1 -> s6 [0, 65535] { R2603 += 1, R2519 += 1 };
  s1 -> s1 [0, 65535] { R2603 += 1, R2519 += 1, R418 += 1, R419 += 1 };
  s1 -> s5 [0, 65535] { R2603 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2603 += 1, R2519 += 1, R418 += 1, R419 += 1 };
  s2 -> s5 [0, 65535] { R2603 += 1 };
  s2 -> s2 [0, 65535] { R2603 += 1, R2519 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2603 += 1, R2519 += 1, R418 += 1, R419 += 1 };
  s3 -> s2 [0, 65535] { R2603 += 1, R2519 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R2603 += 1, R2518 += 1, R2519 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2603 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2603 += 1, R2519 += 1 };
  s6 -> s5 [0, 65535] { R2603 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R2605 += 1, R2521 += 1, R422 += 1, R423 += 1 };
  s0 -> s3 [0, 65535] { R2605 += 1, R2520 += 1, R2521 += 1 };
  s0 -> s0 [0, 65535] { R2604 += 1, R2605 += 1 };
  s0 -> s1 [91, 107] { R2605 += 1, R2521 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R2605 += 1, R2521 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2605 += 1, R2521 += 1 };
  s1 -> s6 [0, 65535] { R2605 += 1 };
  s1 -> s1 [91, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2605 += 1, R2521 += 1, R422 += 1, R423 += 1 };
  s2 -> s6 [0, 65535] { R2605 += 1 };
  s2 -> s1 [91, 107] { R2605 += 1, R2521 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R2605 += 1, R2521 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2605 += 1, R2521 += 1, R422 += 1, R423 += 1 };
  s3 -> s3 [0, 65535] { R2605 += 1, R2520 += 1, R2521 += 1 };
  s3 -> s1 [91, 107] { R2605 += 1, R2521 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R2605 += 1, R2521 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2605 += 1, R2521 += 1 };
  s4 -> s6 [0, 65535] { R2605 += 1 };
  s4 -> s1 [91, 110] { R2605 += 1, R2521 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R2605 += 1, R2521 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2605 += 1 };
  s7 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2605 += 1 };
  s7 -> s7 [0, 65535] { R2605 += 1, R2521 += 1 };
  s7 -> s1 [91, 98] { R2605 += 1, R2521 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R2605 += 1, R2521 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R2605 += 1, R2521 += 1 };
  s8 -> s6 [0, 65535] { R2605 += 1 };
  s8 -> s1 [91, 96] { R2605 += 1, R2521 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R2605 += 1, R2521 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s9 [0, 65535] { R2605 += 1, R2521 += 1 };
  s9 -> s6 [0, 65535] { R2605 += 1 };
  s9 -> s1 [91, 107] { R2605 += 1, R2521 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R2605 += 1, R2521 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R2605 += 1, R2521 += 1 };
  s10 -> s6 [0, 65535] { R2605 += 1 };
  s10 -> s1 [91, 103] { R2605 += 1, R2521 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R2605 += 1, R2521 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2605 += 1 };
  s11 -> s11 [0, 65535] { R2605 += 1, R2521 += 1 };
  s11 -> s1 [91, 110] { R2605 += 1, R2521 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R2605 += 1, R2521 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s12 -> s12 [0, 65535] { R2605 += 1, R2521 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R2605 += 1 };
  s12 -> s1 [91, 114] { R2605 += 1, R2521 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R2605 += 1, R2521 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R2605 += 1 };
  s13 -> s13 [0, 65535] { R2605 += 1, R2521 += 1 };
  s13 -> s1 [91, 115] { R2605 += 1, R2521 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R2605 += 1, R2521 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R2605 += 1, R2521 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R2605 += 1, R2521 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R2607 += 1, R2522 += 1, R2523 += 1 };
  s0 -> s0 [0, 65535] { R2606 += 1, R2607 += 1 };
  s0 -> s2 [0, 65535] { R2607 += 1, R2523 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s3 [0, 65535] { R2607 += 1, R2523 += 1 };
  s1 -> s1 [0, 65535] { R2607 += 1, R2522 += 1, R2523 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2607 += 1, R2523 += 1, R2492 += 1, R2493 += 1 };
  s1 -> s3 [0, 65535] { R2607 += 1, R2523 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2607 += 1, R2523 += 1, R2492 += 1, R2493 += 1 };
  s2 -> s3 [0, 65535] { R2607 += 1, R2523 += 1 };
  s2 -> s5 [0, 65535] { R2607 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2607 += 1, R2523 += 1 };
  s3 -> s5 [0, 65535] { R2607 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2607 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R2609 += 1, R2525 += 1, R2497 += 1, R2498 += 1 };
  s0 -> s2 [0, 65535] { R2609 += 1, R2524 += 1, R2525 += 1 };
  s0 -> s0 [0, 65535] { R2608 += 1, R2609 += 1 };
  s0 -> s3 [0, 65535] { R2609 += 1, R2525 += 1, R2498 += 1, R2499 += 1 };
  s1 -> s1 [0, 65535] { R2609 += 1, R2525 += 1, R2497 += 1, R2498 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R2609 += 1, R2525 += 1, R2498 += 1, R2499 += 1 };
  s1 -> s6 [0, 65535] { R2609 += 1 };
  s2 -> s1 [0, 65535] { R2609 += 1, R2525 += 1, R2497 += 1, R2498 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2609 += 1, R2524 += 1, R2525 += 1 };
  s2 -> s3 [0, 65535] { R2609 += 1, R2525 += 1, R2498 += 1, R2499 += 1 };
  s3 -> s4 [0, 65535] { R2609 += 1, R2525 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2609 += 1, R2525 += 1, R2498 += 1, R2499 += 1 };
  s3 -> s6 [0, 65535] { R2609 += 1 };
  s4 -> s4 [0, 65535] { R2609 += 1, R2525 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2609 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2609 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R2611 += 1, R2527 += 1 };
  s0 -> s2 [0, 65535] { R2611 += 1, R2526 += 1, R2527 += 1 };
  s0 -> s0 [0, 65535] { R2610 += 1, R2611 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2611 += 1 };
  s1 -> s1 [0, 65535] { R2611 += 1, R2527 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2611 += 1, R2527 += 1 };
  s2 -> s2 [0, 65535] { R2611 += 1, R2526 += 1, R2527 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2611 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s0 -> s0 [0, 65535] { R2612 += 1, R2613 += 1 };
  s0 -> s2 [0, 65535] { R2613 += 1, R2528 += 1, R2529 += 1 };
  s0 -> s3 [0, 65535] { R2613 += 1, R2529 += 1, R2503 += 1, R2504 += 1 };
  s0 -> s4 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s0 -> s5 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s0 -> s1 [81, 65535] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s1 -> s1 [0, 79] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2613 += 1 };
  s1 -> s1 [0, 65535] { R2613 += 1, R2529 += 1 };
  s1 -> s4 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s1 -> s5 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s1 -> s1 [81, 65535] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s2 -> s1 [0, 79] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2613 += 1, R2528 += 1, R2529 += 1 };
  s2 -> s3 [0, 65535] { R2613 += 1, R2529 += 1, R2503 += 1, R2504 += 1 };
  s2 -> s4 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s2 -> s5 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s2 -> s1 [81, 65535] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s3 -> s1 [0, 79] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R2613 += 1 };
  s3 -> s3 [0, 65535] { R2613 += 1, R2529 += 1, R2503 += 1, R2504 += 1 };
  s3 -> s4 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s3 -> s5 [80, 80] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s3 -> s1 [81, 65535] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2613 += 1, R2529 += 1, R2504 += 1, R2505 += 1 };
  s4 -> s7 [0, 65535] { R2613 += 1 };
  s4 -> s8 [0, 65535] { R2613 += 1, R2529 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2613 += 1 };
  s5 -> s5 [0, 65535] { R2613 += 1, R2529 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2613 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R2613 += 1 };
  s8 -> s8 [0, 65535] { R2613 += 1, R2529 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R2615 += 1, R2543 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R2615 += 1, R2542 += 1, R2543 += 1 };
  s0 -> s0 [0, 65535] { R2614 += 1, R2615 += 1 };
  s1 -> s4 [0, 65535] { R2615 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2615 += 1, R2543 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2615 += 1, R2543 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R2615 += 1, R2542 += 1, R2543 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2615 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R2617 += 1, R2545 += 1 };
  s0 -> s0 [0, 65535] { R2616 += 1, R2617 += 1 };
  s0 -> s2 [0, 65535] { R2617 += 1, R2544 += 1, R2545 += 1 };
  s0 -> s3 [65, 65] { R2617 += 1, R2545 += 1 };
  s0 -> s4 [65, 65] { R2617 += 1, R2545 += 1 };
  s0 -> s5 [80, 80] { R2617 += 1, R2545 += 1 };
  s0 -> s1 [81, 65535] { R2617 += 1, R2545 += 1 };
  s1 -> s1 [0, 64] { R2617 += 1, R2545 += 1 };
  s1 -> s3 [65, 65] { R2617 += 1, R2545 += 1 };
  s1 -> s4 [65, 65] { R2617 += 1, R2545 += 1 };
  s1 -> s5 [80, 80] { R2617 += 1, R2545 += 1 };
  s1 -> s1 [81, 65535] { R2617 += 1, R2545 += 1 };
  s2 -> s1 [0, 64] { R2617 += 1, R2545 += 1 };
  s2 -> s2 [0, 65535] { R2617 += 1, R2544 += 1, R2545 += 1 };
  s2 -> s3 [65, 65] { R2617 += 1, R2545 += 1 };
  s2 -> s4 [65, 65] { R2617 += 1, R2545 += 1 };
  s2 -> s5 [80, 80] { R2617 += 1, R2545 += 1 };
  s2 -> s1 [81, 65535] { R2617 += 1, R2545 += 1 };
  s4 -> s4 [0, 65] { R2617 += 1, R2545 += 1 };
  s4 -> s8 [80, 80] { R2617 += 1, R2545 += 1 };
  s4 -> s4 [81, 65535] { R2617 += 1, R2545 += 1 };
  s5 -> s5 [0, 64] { R2617 += 1, R2545 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2617 += 1 };
  s5 -> s7 [65, 65] { R2617 += 1, R2545 += 1 };
  s5 -> s8 [65, 65] { R2617 += 1, R2545 += 1 };
  s5 -> s5 [80, 65535] { R2617 += 1, R2545 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2617 += 1 };
  s8 -> s8 [0, 65] { R2617 += 1, R2545 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2617 += 1 };
  s8 -> s8 [80, 65535] { R2617 += 1, R2545 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R2619 += 1, R2547 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R2619 += 1, R2546 += 1, R2547 += 1 };
  s0 -> s0 [0, 65535] { R2618 += 1, R2619 += 1 };
  s0 -> s3 [65, 65] { R2619 += 1, R2547 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R2619 += 1, R2547 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R2619 += 1, R2547 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R2619 += 1, R2547 += 1, R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2619 += 1 };
  s1 -> s3 [65, 65] { R2619 += 1, R2547 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R2619 += 1, R2547 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R2619 += 1, R2547 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R2619 += 1, R2547 += 1, R406 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2619 += 1, R2546 += 1, R2547 += 1 };
  s2 -> s3 [65, 65] { R2619 += 1, R2547 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R2619 += 1, R2547 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R2619 += 1, R2547 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2619 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2619 += 1 };
  s4 -> s4 [0, 65535] { R2619 += 1, R2547 += 1, R406 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2619 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R2621 += 1, R2549 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R2621 += 1, R2548 += 1, R2549 += 1 };
  s0 -> s0 [0, 65535] { R2620 += 1, R2621 += 1 };
  s0 -> s3 [65, 65] { R2621 += 1, R2549 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R2621 += 1, R2549 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R2621 += 1, R2549 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R2621 += 1, R2549 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2621 += 1 };
  s1 -> s3 [65, 65] { R2621 += 1, R2549 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R2621 += 1, R2549 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R2621 += 1, R2549 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R2621 += 1, R2549 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2621 += 1, R2548 += 1, R2549 += 1 };
  s2 -> s3 [65, 65] { R2621 += 1, R2549 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R2621 += 1, R2549 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R2621 += 1, R2549 += 1, R408 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2621 += 1, R2549 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R2621 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2621 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2621 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R2622 += 1, R2623 += 1 };
  s0 -> s2 [0, 65535] { R2623 += 1, R2550 += 1, R2551 += 1 };
  s0 -> s3 [65, 65] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R2623 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R2623 += 1, R2550 += 1, R2551 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R2623 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2623 += 1 };
  s4 -> s4 [0, 65535] { R2623 += 1, R2551 += 1, R410 += 1, R411 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2623 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R2624 += 1, R2625 += 1 };
  s0 -> s2 [0, 65535] { R2625 += 1, R2552 += 1, R2553 += 1 };
  s0 -> s3 [65, 65] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2625 += 1 };
  s1 -> s3 [65, 65] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2625 += 1, R2552 += 1, R2553 += 1 };
  s2 -> s3 [65, 65] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2625 += 1 };
  s3 -> s3 [0, 65535] { R2625 += 1, R2553 += 1, R414 += 1, R415 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2625 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2625 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R2627 += 1, R2554 += 1, R2555 += 1 };
  s0 -> s0 [0, 65535] { R2626 += 1, R2627 += 1 };
  s0 -> s3 [65, 65] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2627 += 1 };
  s1 -> s3 [65, 65] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R2627 += 1, R2554 += 1, R2555 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2627 += 1 };
  s4 -> s5 [0, 65535] { R2627 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2627 += 1, R2555 += 1, R420 += 1, R421 += 1 };
  s5 -> s5 [0, 65535] { R2627 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [0, 64] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s3 [0, 65535] { R2629 += 1, R2556 += 1, R2557 += 1 };
  s0 -> s0 [0, 65535] { R2628 += 1, R2629 += 1 };
  s0 -> s4 [65, 65] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s5 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s6 [65, 65] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s7 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s1 [66, 65535] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [66, 65535] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [0, 64] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [0, 64] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s4 [65, 65] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s5 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s6 [65, 65] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s7 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [66, 65535] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [66, 65535] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 65535] { R2629 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s7 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [0, 64] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [0, 64] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s3 [0, 65535] { R2629 += 1, R2556 += 1, R2557 += 1 };
  s3 -> s4 [65, 65] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s5 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s6 [65, 65] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s7 [65, 65] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [66, 65535] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [66, 65535] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s4 -> s4 [0, 65535] { R2629 += 1, R2557 += 1, R2488 += 1, R2489 += 1 };
  s4 -> s5 [0, 65535] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s5 -> s5 [0, 65535] { R2629 += 1, R2557 += 1, R2489 += 1, R2490 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R2629 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2629 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2629 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s0 -> s0 [0, 65535] { R2630 += 1, R2631 += 1 };
  s0 -> s2 [0, 65535] { R2631 += 1, R2558 += 1, R2559 += 1 };
  s0 -> s3 [65, 65] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s0 -> s4 [65, 65] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s0 -> s1 [66, 65535] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s1 -> s1 [0, 64] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s1 -> s1 [0, 65535] { R2631 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s1 -> s4 [65, 65] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s1 -> s1 [66, 65535] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s2 -> s1 [0, 64] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s2 -> s2 [0, 65535] { R2631 += 1, R2558 += 1, R2559 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s2 -> s4 [65, 65] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s2 -> s1 [66, 65535] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s3 -> s3 [0, 65535] { R2631 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2631 += 1 };
  s4 -> s4 [0, 65535] { R2631 += 1, R2559 += 1, R2494 += 1, R2495 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2631 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R2633 += 1, R2561 += 1 };
  s0 -> s2 [0, 65535] { R2633 += 1, R2560 += 1, R2561 += 1 };
  s0 -> s0 [0, 65535] { R2632 += 1, R2633 += 1 };
  s0 -> s3 [65, 65] { R2633 += 1, R2561 += 1 };
  s0 -> s4 [65, 65] { R2633 += 1, R2561 += 1 };
  s0 -> s1 [66, 65535] { R2633 += 1, R2561 += 1 };
  s1 -> s1 [0, 64] { R2633 += 1, R2561 += 1 };
  s1 -> s1 [0, 65535] { R2633 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2633 += 1, R2561 += 1 };
  s1 -> s4 [65, 65] { R2633 += 1, R2561 += 1 };
  s1 -> s1 [66, 65535] { R2633 += 1, R2561 += 1 };
  s2 -> s1 [0, 64] { R2633 += 1, R2561 += 1 };
  s2 -> s2 [0, 65535] { R2633 += 1, R2560 += 1, R2561 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2633 += 1, R2561 += 1 };
  s2 -> s4 [65, 65] { R2633 += 1, R2561 += 1 };
  s2 -> s1 [66, 65535] { R2633 += 1, R2561 += 1 };
  s3 -> s3 [0, 65535] { R2633 += 1, R2561 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2633 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2633 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2633 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s0 -> s0 [0, 65535] { R2634 += 1, R2635 += 1 };
  s0 -> s2 [0, 65535] { R2635 += 1, R2562 += 1, R2563 += 1 };
  s0 -> s3 [65, 65] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s0 -> s4 [65, 65] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s0 -> s1 [66, 65535] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s1 -> s1 [0, 64] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s1 -> s1 [0, 65535] { R2635 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s1 -> s4 [65, 65] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s1 -> s1 [66, 65535] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s2 -> s1 [0, 64] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s2 -> s2 [0, 65535] { R2635 += 1, R2562 += 1, R2563 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s2 -> s4 [65, 65] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s2 -> s1 [66, 65535] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s3 -> s6 [0, 65535] { R2635 += 1 };
  s3 -> s3 [0, 65535] { R2635 += 1, R2563 += 1, R2500 += 1, R2501 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2635 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2635 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R2529 && R6 = R2635 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R2529 && R58 = 0 && R59 = R2529 && R60 = 0 && R61 = R2529 && R62 = 0 && R63 = R2635 && R64 = 0 && R65 = R2635 && R66 = 0 && R67 = R2635 && R2506 = 0 && R2507 = R2529 && R2508 = 0 && R2509 = R2529 && R2510 = 0 && R2511 = R2529 && R2512 = 0 && R2513 = R2529 && R2514 = 0 && R2515 = R2529 && R2516 = 0 && R2517 = R2529 && R2518 = 0 && R2519 = R2529 && R2520 = 0 && R2521 = R2529 && R2522 = 0 && R2523 = R2529 && R2524 = 0 && R2525 = R2529 && R2526 = 0 && R2527 = R2529 && R2528 = 0 && R2530 = 0 && R2531 = R2635 && R2532 = 0 && R2533 = R2635 && R2534 = 0 && R2535 = R2635 && R2536 = 0 && R2537 = R2635 && R2538 = 0 && R2539 = R2635 && R2540 = 0 && R2541 = R2635 && R2544 = 0 && R2545 = 0 && R2556 = 0 && R2557 = 0 && R2564 = 10 && R2565 = R2635 && R2566 = 10 && R2567 = R2635 && R2568 = 10 && R2569 = R2635 && R2570 = 10 && R2571 = R2635 && R2572 = 10 && R2573 = R2635 && R2574 = 10 && R2575 = R2635 && R2576 = 10 && R2577 = R2635 && R2578 = 10 && R2579 = R2635 && R2580 = 10 && R2581 = R2635 && R2582 = 10 && R2583 = R2635 && R2584 = 10 && R2585 = R2635 && R2586 = 10 && R2587 = R2635 && R2588 = 10 && R2589 = R2635 && R2590 = 10 && R2591 = R2635 && R2592 = 10 && R2593 = R2635 && R2594 = 10 && R2595 = R2635 && R2596 = 10 && R2597 = R2635 && R2598 = 10 && R2599 = R2635 && R2600 = 10 && R2601 = R2635 && R2602 = 10 && R2603 = R2635 && R2604 = 10 && R2605 = R2635 && R2606 = 10 && R2607 = R2635 && R2608 = 10 && R2609 = R2635 && R2610 = 10 && R2611 = R2635 && R2612 = 10 && R2613 = R2635 && R2614 = 10 && R2615 = R2635 && R2616 = 10 && R2617 = R2635 && R2618 = 10 && R2619 = R2635 && R2620 = 10 && R2621 = R2635 && R2622 = 10 && R2623 = R2635 && R2624 = 10 && R2625 = R2635 && R2626 = 10 && R2627 = R2635 && R2628 = 10 && R2629 = R2635 && R2630 = 10 && R2631 = R2635 && R2632 = 10 && R2633 = R2635 && R2634 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2493 + R2490 + R2505 + R2502 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R2529 && 9 < R2635 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R2491 + R2488 = 0 && R2492 + R2489 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R2491 + R2488 != 0 || R407 + R406 + -1*R2492 + -1*R2489 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R2542 = 0 && R2543 = 0)) && (R34 = 0 || (R2546 = 0 && R2547 = 0)) && (R34 = 0 || (R2548 = 0 && R2549 = 0)) && (R34 = 0 || (R2550 = 0 && R2551 = 0)) && (R34 = 0 || (R2552 = 0 && R2553 = 0)) && (R34 = 0 || (R2554 = 0 && R2555 = 0)) && (R34 = 0 || (R2558 = 0 && R2559 = 0)) && (R34 = 0 || (R2560 = 0 && R2561 = 0)) && (R34 = 0 || (R2562 = 0 && R2563 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R2491 + R2488 = 0 || R407 + R406 < 1) && (R2499 + R2496 = 0 || (R2497 + R2494 = 0 && R2498 + R2495 = 0)) && (R2499 + R2496 = 0 || (R2503 + R2500 = 0 && R2504 + R2501 = 0));
// End of Parikh automata intersection problem
