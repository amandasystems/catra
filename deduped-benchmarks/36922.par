// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R2488, R2489, R2490, R2491, R2492, R2493, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R3866, R3867, R3868, R3869, R3870, R3871, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R4144, R4145, R4146, R4147, R4148, R4149, R415, R4150, R4151, R4152, R4153, R4154, R4155, R4156, R4157, R4158, R4159, R416, R4160, R4161, R4162, R4163, R4164, R4165, R4166, R4167, R4168, R4169, R417, R4170, R4171, R4172, R4173, R4174, R4175, R4176, R4177, R4178, R4179, R418, R4180, R4181, R4182, R4183, R4184, R4185, R4186, R4187, R4188, R4189, R419, R4190, R4191, R4192, R4193, R4194, R4195, R4196, R4197, R4198, R4199, R42, R420, R4200, R4201, R4202, R4203, R4204, R4205, R4206, R4207, R4208, R4209, R421, R4210, R4211, R4212, R4213, R4214, R4215, R4216, R4217, R4218, R4219, R422, R4220, R4221, R4222, R4223, R4224, R4225, R4226, R4227, R4228, R4229, R423, R4230, R4231, R4232, R4233, R4234, R4235, R4236, R4237, R4238, R4239, R4240, R4241, R4242, R4243, R4244, R4245, R4246, R4247, R4248, R4249, R4250, R4251, R4252, R4253, R4254, R4255, R4256, R4257, R4258, R4259, R4260, R4261, R4262, R4263, R4264, R4265, R4266, R4267, R4268, R4269, R4270, R4271, R4272, R4273, R4274, R4275, R4276, R4277, R4278, R4279, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s0 [0, 65535] { R4174 += 1, R4175 += 1 };
  s0 -> s1 [0, 65535] { R4175 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R4175 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R4177 += 1 };
  s0 -> s0 [0, 65535] { R4176 += 1, R4177 += 1 };
  s0 -> s2 [0, 65535] { R4177 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4177 += 1 };
  s0 -> s1 [66, 65535] { R4177 += 1 };
  s1 -> s1 [0, 64] { R4177 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4177 += 1 };
  s1 -> s1 [66, 65535] { R4177 += 1 };
  s2 -> s1 [0, 64] { R4177 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4177 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4177 += 1 };
  s2 -> s1 [66, 65535] { R4177 += 1 };
  s3 -> s3 [0, 65535] { R4177 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4178 += 1, R4179 += 1 };
  s0 -> s1 [0, 65535] { R4179 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R4179 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4179 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R4179 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4179 += 1 };
  s2 -> s2 [0, 65535] { R4179 += 1, R69 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4179 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4181 += 1 };
  s0 -> s0 [0, 65535] { R4180 += 1, R4181 += 1 };
  s1 -> s1 [0, 65535] { R4181 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R4182 += 1, R4183 += 1 };
  s0 -> s1 [0, 65535] { R4183 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R4183 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4183 += 1 };
  s1 -> s1 [0, 65535] { R4183 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4183 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R4183 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4183 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4184 += 1, R4185 += 1 };
  s0 -> s1 [0, 65535] { R4185 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4185 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R4209 += 1 };
  s0 -> s0 [0, 65535] { R4208 += 1, R4209 += 1 };
  s0 -> s1 [45, 45] { R4209 += 1 };
  s0 -> s2 [46, 46] { R4209 += 1 };
  s0 -> s1 [48, 62] { R4209 += 1 };
  s0 -> s3 [65, 65] { R4209 += 1 };
  s0 -> s1 [66, 65535] { R4209 += 1 };
  s1 -> s1 [0, 43] { R4209 += 1 };
  s1 -> s1 [45, 45] { R4209 += 1 };
  s1 -> s2 [46, 46] { R4209 += 1 };
  s1 -> s1 [48, 62] { R4209 += 1 };
  s1 -> s3 [65, 65] { R4209 += 1 };
  s1 -> s1 [66, 65535] { R4209 += 1 };
  s2 -> s1 [0, 43] { R4209 += 1 };
  s2 -> s1 [45, 45] { R4209 += 1 };
  s2 -> s2 [46, 46] { R4209 += 1 };
  s2 -> s1 [48, 62] { R4209 += 1 };
  s2 -> s3 [65, 65] { R4209 += 1 };
  s2 -> s1 [66, 114] { R4209 += 1 };
  s2 -> s8 [115, 115] { R4209 += 1 };
  s2 -> s1 [116, 65535] { R4209 += 1 };
  s3 -> s3 [0, 43] { R4209 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4209 += 1 };
  s3 -> s4 [46, 46] { R4209 += 1 };
  s3 -> s3 [48, 62] { R4209 += 1 };
  s3 -> s3 [65, 65535] { R4209 += 1 };
  s4 -> s3 [0, 43] { R4209 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4209 += 1 };
  s4 -> s4 [46, 46] { R4209 += 1 };
  s4 -> s3 [48, 62] { R4209 += 1 };
  s4 -> s3 [65, 114] { R4209 += 1 };
  s4 -> s5 [115, 115] { R4209 += 1 };
  s4 -> s3 [116, 65535] { R4209 += 1 };
  s5 -> s3 [0, 43] { R4209 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4209 += 1 };
  s5 -> s4 [46, 46] { R4209 += 1 };
  s5 -> s3 [48, 62] { R4209 += 1 };
  s5 -> s3 [65, 110] { R4209 += 1 };
  s5 -> s6 [111, 111] { R4209 += 1 };
  s5 -> s3 [112, 65535] { R4209 += 1 };
  s6 -> s3 [0, 43] { R4209 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4209 += 1 };
  s6 -> s4 [46, 46] { R4209 += 1 };
  s6 -> s3 [48, 62] { R4209 += 1 };
  s6 -> s3 [65, 98] { R4209 += 1 };
  s6 -> s7 [99, 99] { R4209 += 1 };
  s6 -> s3 [100, 65535] { R4209 += 1 };
  s7 -> s3 [0, 43] { R4209 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4209 += 1 };
  s7 -> s4 [46, 46] { R4209 += 1 };
  s7 -> s3 [48, 62] { R4209 += 1 };
  s7 -> s3 [65, 106] { R4209 += 1 };
  s7 -> s3 [108, 65535] { R4209 += 1 };
  s8 -> s1 [0, 43] { R4209 += 1 };
  s8 -> s1 [45, 45] { R4209 += 1 };
  s8 -> s2 [46, 46] { R4209 += 1 };
  s8 -> s1 [48, 62] { R4209 += 1 };
  s8 -> s3 [65, 65] { R4209 += 1 };
  s8 -> s1 [66, 110] { R4209 += 1 };
  s8 -> s9 [111, 111] { R4209 += 1 };
  s8 -> s1 [112, 65535] { R4209 += 1 };
  s9 -> s1 [0, 43] { R4209 += 1 };
  s9 -> s1 [45, 45] { R4209 += 1 };
  s9 -> s2 [46, 46] { R4209 += 1 };
  s9 -> s1 [48, 62] { R4209 += 1 };
  s9 -> s3 [65, 65] { R4209 += 1 };
  s9 -> s1 [66, 98] { R4209 += 1 };
  s9 -> s10 [99, 99] { R4209 += 1 };
  s9 -> s1 [100, 65535] { R4209 += 1 };
  s10 -> s1 [0, 43] { R4209 += 1 };
  s10 -> s1 [45, 45] { R4209 += 1 };
  s10 -> s2 [46, 46] { R4209 += 1 };
  s10 -> s1 [48, 62] { R4209 += 1 };
  s10 -> s3 [65, 65] { R4209 += 1 };
  s10 -> s1 [66, 106] { R4209 += 1 };
  s10 -> s1 [108, 65535] { R4209 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R4210 += 1, R4211 += 1 };
  s0 -> s1 [0, 65535] { R4211 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4211 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R4213 += 1 };
  s0 -> s2 [0, 65535] { R4213 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R4212 += 1, R4213 += 1 };
  s0 -> s3 [58, 58] { R4213 += 1 };
  s0 -> s1 [59, 65535] { R4213 += 1 };
  s1 -> s1 [0, 57] { R4213 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4213 += 1 };
  s1 -> s1 [59, 65535] { R4213 += 1 };
  s2 -> s1 [0, 57] { R4213 += 1 };
  s2 -> s2 [0, 65535] { R4213 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4213 += 1 };
  s2 -> s1 [59, 65535] { R4213 += 1 };
  s3 -> s3 [0, 65535] { R4213 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R4215 += 1 };
  s0 -> s0 [0, 65535] { R4214 += 1, R4215 += 1 };
  s0 -> s2 [0, 65535] { R4215 += 1, R15 += 1 };
  s0 -> s3 [43, 43] { R4215 += 1 };
  s0 -> s1 [44, 65535] { R4215 += 1 };
  s1 -> s1 [0, 42] { R4215 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R4215 += 1 };
  s1 -> s1 [44, 65535] { R4215 += 1 };
  s2 -> s1 [0, 42] { R4215 += 1 };
  s2 -> s2 [0, 65535] { R4215 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R4215 += 1 };
  s2 -> s1 [44, 65535] { R4215 += 1 };
  s3 -> s3 [0, 65535] { R4215 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4217 += 1 };
  s0 -> s0 [0, 65535] { R4216 += 1, R4217 += 1 };
  s0 -> s2 [0, 65535] { R4217 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R4217 += 1 };
  s0 -> s1 [66, 65535] { R4217 += 1 };
  s1 -> s1 [0, 64] { R4217 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4217 += 1 };
  s1 -> s1 [66, 65535] { R4217 += 1 };
  s2 -> s1 [0, 64] { R4217 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4217 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R4217 += 1 };
  s2 -> s1 [66, 65535] { R4217 += 1 };
  s3 -> s3 [0, 65535] { R4217 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R4219 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R4218 += 1, R4219 += 1 };
  s0 -> s2 [0, 65535] { R4219 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R4219 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R4219 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R4219 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4219 += 1 };
  s2 -> s1 [0, 90] { R4219 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4219 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R4219 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R4219 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R4219 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4219 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R4221 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R4221 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4220 += 1, R4221 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4221 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R4221 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4221 += 1 };
  s2 -> s2 [0, 65535] { R4221 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4221 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R4223 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R4223 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R4222 += 1, R4223 += 1 };
  s1 -> s1 [0, 65535] { R4223 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4223 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4223 += 1, R57 += 1, R31 += 1 };
  s2 -> s4 [0, 65535] { R4223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4223 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R4225 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R4224 += 1, R4225 += 1 };
  s0 -> s2 [0, 65535] { R4225 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R4225 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R4225 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R4225 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R4225 += 1 };
  s2 -> s1 [0, 107] { R4225 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4225 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R4225 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R4225 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R4225 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4225 += 1 };
  s3 -> s5 [111, 111] { R4225 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R4225 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R4225 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4225 += 1 };
  s5 -> s6 [99, 99] { R4225 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R4225 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R4225 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4225 += 1 };
  s6 -> s7 [97, 97] { R4225 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R4225 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R4225 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R4225 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R4225 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R4225 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R4225 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R4225 += 1 };
  s8 -> s9 [104, 104] { R4225 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R4225 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R4225 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R4225 += 1 };
  s9 -> s10 [111, 111] { R4225 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R4225 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R4225 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R4225 += 1 };
  s10 -> s11 [115, 115] { R4225 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R4225 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R4225 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R4225 += 1 };
  s11 -> s12 [116, 116] { R4225 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R4225 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R4225 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R4225 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R4227 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R4227 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R4226 += 1, R4227 += 1 };
  s1 -> s1 [0, 65535] { R4227 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4227 += 1 };
  s2 -> s1 [0, 65535] { R4227 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4227 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4227 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R4228 += 1, R4229 += 1 };
  s0 -> s1 [0, 65535] { R4229 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R4229 += 1, R75 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R4229 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R4229 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4229 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4229 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4229 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R4230 += 1, R4231 += 1 };
  s0 -> s1 [0, 65535] { R4231 += 1 };
  s1 -> s1 [0, 65535] { R4231 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R4233 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R4233 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R4232 += 1, R4233 += 1 };
  s0 -> s3 [43, 43] { R4233 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R4233 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R4233 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R4233 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R4233 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R4233 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R4233 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R4233 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R4233 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R4233 += 1, R76 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R4233 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R4233 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R4233 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R4233 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4233 += 1 };
  s4 -> s4 [0, 65535] { R4233 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4233 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R4235 += 1, R4151 += 1 };
  s0 -> s0 [0, 65535] { R4234 += 1, R4235 += 1 };
  s0 -> s2 [0, 65535] { R4235 += 1, R4150 += 1, R4151 += 1 };
  s0 -> s1 [66, 65535] { R4235 += 1, R4151 += 1 };
  s1 -> s1 [0, 64] { R4235 += 1, R4151 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4235 += 1 };
  s1 -> s1 [66, 65535] { R4235 += 1, R4151 += 1 };
  s2 -> s1 [0, 64] { R4235 += 1, R4151 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4235 += 1, R4150 += 1, R4151 += 1 };
  s2 -> s1 [66, 65535] { R4235 += 1, R4151 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R4236 += 1, R4237 += 1 };
  s0 -> s1 [0, 65535] { R4237 += 1, R4153 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R4237 += 1, R4152 += 1, R4153 += 1 };
  s1 -> s4 [0, 65535] { R4237 += 1 };
  s1 -> s1 [0, 65535] { R4237 += 1, R4153 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4237 += 1, R4153 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R4237 += 1, R4152 += 1, R4153 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4237 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R4239 += 1, R4155 += 1 };
  s0 -> s2 [0, 65535] { R4239 += 1, R4154 += 1, R4155 += 1 };
  s0 -> s0 [0, 65535] { R4238 += 1, R4239 += 1 };
  s0 -> s1 [80, 65535] { R4239 += 1, R4155 += 1 };
  s1 -> s1 [0, 65] { R4239 += 1, R4155 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4239 += 1 };
  s1 -> s1 [80, 65535] { R4239 += 1, R4155 += 1 };
  s2 -> s1 [0, 65] { R4239 += 1, R4155 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4239 += 1, R4154 += 1, R4155 += 1 };
  s2 -> s1 [80, 65535] { R4239 += 1, R4155 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R4241 += 1, R4157 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R4241 += 1, R4156 += 1, R4157 += 1 };
  s0 -> s0 [0, 65535] { R4240 += 1, R4241 += 1 };
  s1 -> s4 [0, 65535] { R4241 += 1 };
  s1 -> s1 [0, 65535] { R4241 += 1, R4157 += 1, R407 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4241 += 1, R4157 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4241 += 1, R4156 += 1, R4157 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4241 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R4243 += 1, R4159 += 1 };
  s0 -> s2 [0, 65535] { R4243 += 1, R4158 += 1, R4159 += 1 };
  s0 -> s3 [0, 65535] { R4243 += 1, R4159 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R4242 += 1, R4243 += 1 };
  s0 -> s1 [81, 65535] { R4243 += 1, R4159 += 1 };
  s1 -> s1 [0, 79] { R4243 += 1, R4159 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4243 += 1 };
  s1 -> s1 [81, 65535] { R4243 += 1, R4159 += 1 };
  s2 -> s1 [0, 79] { R4243 += 1, R4159 += 1 };
  s2 -> s2 [0, 65535] { R4243 += 1, R4158 += 1, R4159 += 1 };
  s2 -> s3 [0, 65535] { R4243 += 1, R4159 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R4243 += 1, R4159 += 1 };
  s3 -> s1 [0, 79] { R4243 += 1, R4159 += 1 };
  s3 -> s4 [0, 65535] { R4243 += 1 };
  s3 -> s3 [0, 65535] { R4243 += 1, R4159 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R4243 += 1, R4159 += 1 };
  s4 -> s4 [0, 65535] { R4243 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R4245 += 1, R4161 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R4244 += 1, R4245 += 1 };
  s0 -> s2 [0, 65535] { R4245 += 1, R4160 += 1, R4161 += 1 };
  s0 -> s3 [0, 65535] { R4245 += 1, R4161 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R4245 += 1, R4161 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R4245 += 1, R4161 += 1, R413 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4245 += 1 };
  s1 -> s1 [0, 65535] { R4245 += 1, R4161 += 1 };
  s1 -> s1 [81, 65535] { R4245 += 1, R4161 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R4245 += 1, R4161 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4245 += 1, R4160 += 1, R4161 += 1 };
  s2 -> s3 [0, 65535] { R4245 += 1, R4161 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R4245 += 1, R4161 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R4245 += 1, R4161 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4245 += 1, R4161 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535] { R4245 += 1 };
  s3 -> s1 [81, 65535] { R4245 += 1, R4161 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4245 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R4247 += 1, R4163 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R4246 += 1, R4247 += 1 };
  s0 -> s2 [0, 65535] { R4247 += 1, R4163 += 1, R418 += 1, R419 += 1 };
  s0 -> s3 [0, 65535] { R4247 += 1, R4162 += 1, R4163 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4247 += 1 };
  s1 -> s2 [0, 65535] { R4247 += 1, R4163 += 1, R418 += 1, R419 += 1 };
  s1 -> s1 [0, 65535] { R4247 += 1, R4163 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4247 += 1 };
  s2 -> s2 [0, 65535] { R4247 += 1, R4163 += 1, R418 += 1, R419 += 1 };
  s2 -> s6 [0, 65535] { R4247 += 1, R4163 += 1 };
  s3 -> s1 [0, 65535] { R4247 += 1, R4163 += 1, R417 += 1, R418 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4247 += 1, R4163 += 1, R418 += 1, R419 += 1 };
  s3 -> s3 [0, 65535] { R4247 += 1, R4162 += 1, R4163 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4247 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4247 += 1 };
  s6 -> s6 [0, 65535] { R4247 += 1, R4163 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s0 -> s0 [0, 65535] { R4248 += 1, R4249 += 1 };
  s0 -> s2 [0, 65535] { R4249 += 1, R4164 += 1, R4165 += 1 };
  s0 -> s3 [0, 65535] { R4249 += 1, R4165 += 1, R422 += 1, R423 += 1 };
  s0 -> s1 [91, 107] { R4249 += 1, R4165 += 1, R423 += 1 };
  s0 -> s4 [108, 108] { R4249 += 1, R4165 += 1, R423 += 1 };
  s0 -> s1 [109, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s1 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s1 -> s1 [0, 65535] { R4249 += 1, R4165 += 1 };
  s1 -> s5 [0, 65535] { R4249 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s2 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s2 -> s2 [0, 65535] { R4249 += 1, R4164 += 1, R4165 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R4249 += 1, R4165 += 1, R422 += 1, R423 += 1 };
  s2 -> s1 [91, 107] { R4249 += 1, R4165 += 1, R423 += 1 };
  s2 -> s4 [108, 108] { R4249 += 1, R4165 += 1, R423 += 1 };
  s2 -> s1 [109, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s3 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s3 -> s5 [0, 65535] { R4249 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R4249 += 1, R4165 += 1, R422 += 1, R423 += 1 };
  s3 -> s1 [91, 107] { R4249 += 1, R4165 += 1, R423 += 1 };
  s3 -> s4 [108, 108] { R4249 += 1, R4165 += 1, R423 += 1 };
  s3 -> s1 [109, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s4 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s4 -> s4 [0, 65535] { R4249 += 1, R4165 += 1 };
  s4 -> s5 [0, 65535] { R4249 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R4249 += 1, R4165 += 1, R423 += 1 };
  s4 -> s7 [111, 111] { R4249 += 1, R4165 += 1, R423 += 1 };
  s4 -> s1 [112, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s5 -> s5 [0, 65535] { R4249 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s7 -> s7 [0, 65535] { R4249 += 1, R4165 += 1 };
  s7 -> s5 [0, 65535] { R4249 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R4249 += 1, R4165 += 1, R423 += 1 };
  s7 -> s8 [99, 99] { R4249 += 1, R4165 += 1, R423 += 1 };
  s7 -> s1 [100, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s8 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s8 -> s8 [0, 65535] { R4249 += 1, R4165 += 1 };
  s8 -> s5 [0, 65535] { R4249 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R4249 += 1, R4165 += 1, R423 += 1 };
  s8 -> s9 [97, 97] { R4249 += 1, R4165 += 1, R423 += 1 };
  s8 -> s1 [98, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s9 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s9 -> s9 [0, 65535] { R4249 += 1, R4165 += 1 };
  s9 -> s5 [0, 65535] { R4249 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R4249 += 1, R4165 += 1, R423 += 1 };
  s9 -> s10 [108, 108] { R4249 += 1, R4165 += 1, R423 += 1 };
  s9 -> s1 [109, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s10 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s10 -> s10 [0, 65535] { R4249 += 1, R4165 += 1 };
  s10 -> s5 [0, 65535] { R4249 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R4249 += 1, R4165 += 1, R423 += 1 };
  s10 -> s11 [104, 104] { R4249 += 1, R4165 += 1, R423 += 1 };
  s10 -> s1 [105, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s11 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s11 -> s11 [0, 65535] { R4249 += 1, R4165 += 1 };
  s11 -> s5 [0, 65535] { R4249 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R4249 += 1, R4165 += 1, R423 += 1 };
  s11 -> s12 [111, 111] { R4249 += 1, R4165 += 1, R423 += 1 };
  s11 -> s1 [112, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s12 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s12 -> s12 [0, 65535] { R4249 += 1, R4165 += 1 };
  s12 -> s5 [0, 65535] { R4249 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R4249 += 1, R4165 += 1, R423 += 1 };
  s12 -> s13 [115, 115] { R4249 += 1, R4165 += 1, R423 += 1 };
  s12 -> s1 [116, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s13 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s13 -> s5 [0, 65535] { R4249 += 1 };
  s13 -> s13 [0, 65535] { R4249 += 1, R4165 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R4249 += 1, R4165 += 1, R423 += 1 };
  s13 -> s14 [116, 116] { R4249 += 1, R4165 += 1, R423 += 1 };
  s13 -> s1 [117, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  s14 -> s1 [0, 80] { R4249 += 1, R4165 += 1, R423 += 1 };
  s14 -> s1 [91, 65535] { R4249 += 1, R4165 += 1, R423 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R4251 += 1, R4166 += 1, R4167 += 1 };
  s0 -> s0 [0, 65535] { R4250 += 1, R4251 += 1 };
  s0 -> s2 [0, 65535] { R4251 += 1, R4167 += 1, R2492 += 1, R2493 += 1 };
  s0 -> s3 [0, 65535] { R4251 += 1, R4167 += 1 };
  s1 -> s1 [0, 65535] { R4251 += 1, R4166 += 1, R4167 += 1 };
  s1 -> s2 [0, 65535] { R4251 += 1, R4167 += 1, R2492 += 1, R2493 += 1 };
  s1 -> s3 [0, 65535] { R4251 += 1, R4167 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4251 += 1, R4167 += 1, R2492 += 1, R2493 += 1 };
  s2 -> s4 [0, 65535] { R4251 += 1 };
  s2 -> s3 [0, 65535] { R4251 += 1, R4167 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R4251 += 1 };
  s3 -> s3 [0, 65535] { R4251 += 1, R4167 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4251 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R4253 += 1, R4168 += 1, R4169 += 1 };
  s0 -> s0 [0, 65535] { R4252 += 1, R4253 += 1 };
  s0 -> s2 [0, 65535] { R4253 += 1, R4169 += 1 };
  s1 -> s1 [0, 65535] { R4253 += 1, R4168 += 1, R4169 += 1 };
  s1 -> s2 [0, 65535] { R4253 += 1, R4169 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4253 += 1 };
  s2 -> s2 [0, 65535] { R4253 += 1, R4169 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4253 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R4255 += 1, R4170 += 1, R4171 += 1 };
  s0 -> s2 [0, 65535] { R4255 += 1, R4171 += 1 };
  s0 -> s0 [0, 65535] { R4254 += 1, R4255 += 1 };
  s1 -> s1 [0, 65535] { R4255 += 1, R4170 += 1, R4171 += 1 };
  s1 -> s2 [0, 65535] { R4255 += 1, R4171 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4255 += 1, R4171 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4255 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4255 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R4257 += 1, R4173 += 1 };
  s0 -> s0 [0, 65535] { R4256 += 1, R4257 += 1 };
  s0 -> s2 [0, 65535] { R4257 += 1, R4172 += 1, R4173 += 1 };
  s1 -> s1 [0, 65535] { R4257 += 1, R4173 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4257 += 1 };
  s2 -> s1 [0, 65535] { R4257 += 1, R4173 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4257 += 1, R4172 += 1, R4173 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4257 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R4259 += 1, R4187 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R4258 += 1, R4259 += 1 };
  s0 -> s2 [0, 65535] { R4259 += 1, R4186 += 1, R4187 += 1 };
  s1 -> s1 [0, 65535] { R4259 += 1, R4187 += 1, R34 += 1 };
  s1 -> s4 [0, 65535] { R4259 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4259 += 1, R4187 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4259 += 1, R4186 += 1, R4187 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4259 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R4261 += 1, R4189 += 1 };
  s0 -> s0 [0, 65535] { R4260 += 1, R4261 += 1 };
  s0 -> s2 [0, 65535] { R4261 += 1, R4188 += 1, R4189 += 1 };
  s0 -> s3 [65, 65] { R4261 += 1, R4189 += 1 };
  s0 -> s4 [65, 65] { R4261 += 1, R4189 += 1 };
  s0 -> s5 [80, 80] { R4261 += 1, R4189 += 1 };
  s0 -> s1 [81, 65535] { R4261 += 1, R4189 += 1 };
  s1 -> s1 [0, 64] { R4261 += 1, R4189 += 1 };
  s1 -> s3 [65, 65] { R4261 += 1, R4189 += 1 };
  s1 -> s4 [65, 65] { R4261 += 1, R4189 += 1 };
  s1 -> s5 [80, 80] { R4261 += 1, R4189 += 1 };
  s1 -> s1 [81, 65535] { R4261 += 1, R4189 += 1 };
  s2 -> s1 [0, 64] { R4261 += 1, R4189 += 1 };
  s2 -> s2 [0, 65535] { R4261 += 1, R4188 += 1, R4189 += 1 };
  s2 -> s3 [65, 65] { R4261 += 1, R4189 += 1 };
  s2 -> s4 [65, 65] { R4261 += 1, R4189 += 1 };
  s2 -> s5 [80, 80] { R4261 += 1, R4189 += 1 };
  s2 -> s1 [81, 65535] { R4261 += 1, R4189 += 1 };
  s3 -> s3 [0, 65] { R4261 += 1, R4189 += 1 };
  s3 -> s8 [80, 80] { R4261 += 1, R4189 += 1 };
  s3 -> s3 [81, 65535] { R4261 += 1, R4189 += 1 };
  s5 -> s5 [0, 64] { R4261 += 1, R4189 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4261 += 1 };
  s5 -> s7 [65, 65] { R4261 += 1, R4189 += 1 };
  s5 -> s8 [65, 65] { R4261 += 1, R4189 += 1 };
  s5 -> s5 [80, 65535] { R4261 += 1, R4189 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4261 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R4261 += 1, R4189 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4261 += 1 };
  s8 -> s8 [80, 65535] { R4261 += 1, R4189 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R4263 += 1, R4191 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R4263 += 1, R4190 += 1, R4191 += 1 };
  s0 -> s0 [0, 65535] { R4262 += 1, R4263 += 1 };
  s0 -> s3 [65, 65] { R4263 += 1, R4191 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R4263 += 1, R4191 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R4263 += 1, R4191 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R4263 += 1, R4191 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R4263 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4263 += 1, R4191 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R4263 += 1, R4191 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R4263 += 1, R4191 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R4263 += 1, R4191 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R4263 += 1, R4190 += 1, R4191 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4263 += 1, R4191 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R4263 += 1, R4191 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R4263 += 1, R4191 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R4263 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4263 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4263 += 1, R4191 += 1, R406 += 1 };
  s5 -> s5 [0, 65535] { R4263 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R4265 += 1, R4193 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R4265 += 1, R4192 += 1, R4193 += 1 };
  s0 -> s0 [0, 65535] { R4264 += 1, R4265 += 1 };
  s0 -> s3 [65, 65] { R4265 += 1, R4193 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R4265 += 1, R4193 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R4265 += 1, R4193 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R4265 += 1, R4193 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R4265 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4265 += 1, R4193 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R4265 += 1, R4193 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R4265 += 1, R4193 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R4265 += 1, R4193 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R4265 += 1, R4192 += 1, R4193 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4265 += 1, R4193 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R4265 += 1, R4193 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R4265 += 1, R4193 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R4265 += 1, R4193 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R4265 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4265 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4265 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R4266 += 1, R4267 += 1 };
  s0 -> s2 [0, 65535] { R4267 += 1, R4194 += 1, R4195 += 1 };
  s0 -> s3 [65, 65] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R4267 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R4267 += 1, R4194 += 1, R4195 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R4267 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4267 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4267 += 1, R4195 += 1, R410 += 1, R411 += 1 };
  s5 -> s5 [0, 65535] { R4267 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R4269 += 1, R4196 += 1, R4197 += 1 };
  s0 -> s0 [0, 65535] { R4268 += 1, R4269 += 1 };
  s0 -> s3 [65, 65] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4269 += 1 };
  s1 -> s3 [65, 65] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R4269 += 1, R4196 += 1, R4197 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R4269 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4269 += 1 };
  s4 -> s4 [0, 65535] { R4269 += 1, R4197 += 1, R414 += 1, R415 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4269 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s0 -> s2 [0, 65535] { R4271 += 1, R4198 += 1, R4199 += 1 };
  s0 -> s0 [0, 65535] { R4270 += 1, R4271 += 1 };
  s0 -> s3 [65, 65] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s0 -> s4 [65, 65] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s0 -> s1 [66, 65535] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 64] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [0, 65535] { R4271 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s1 -> s4 [65, 65] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s1 -> s1 [66, 65535] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [0, 64] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s2 -> s2 [0, 65535] { R4271 += 1, R4198 += 1, R4199 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s2 -> s4 [65, 65] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s2 -> s1 [66, 65535] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s3 -> s6 [0, 65535] { R4271 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4271 += 1, R4199 += 1, R420 += 1, R421 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4271 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4271 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [0, 64] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s3 [0, 65535] { R4273 += 1, R4200 += 1, R4201 += 1 };
  s0 -> s0 [0, 65535] { R4272 += 1, R4273 += 1 };
  s0 -> s4 [65, 65] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s5 [65, 65] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s6 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s7 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s1 [66, 65535] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s0 -> s2 [66, 65535] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [0, 64] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [0, 64] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s4 [65, 65] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s5 [65, 65] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s6 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s7 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s1 -> s1 [66, 65535] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s1 -> s2 [66, 65535] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4273 += 1 };
  s2 -> s6 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s7 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [0, 64] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [0, 64] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s3 [0, 65535] { R4273 += 1, R4200 += 1, R4201 += 1 };
  s3 -> s4 [65, 65] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s5 [65, 65] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s6 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s7 [65, 65] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s1 [66, 65535] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s3 -> s2 [66, 65535] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s5 -> s5 [0, 65535] { R4273 += 1, R4201 += 1, R2488 += 1, R2489 += 1 };
  s5 -> s7 [0, 65535] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4273 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R4273 += 1 };
  s7 -> s7 [0, 65535] { R4273 += 1, R4201 += 1, R2489 += 1, R2490 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4273 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s2 [0, 64] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s3 [0, 65535] { R4275 += 1, R4202 += 1, R4203 += 1 };
  s0 -> s0 [0, 65535] { R4274 += 1, R4275 += 1 };
  s0 -> s4 [65, 65] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s5 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s6 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s0 -> s7 [65, 65] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s1 [66, 65535] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s0 -> s2 [66, 65535] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s1 [0, 64] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s2 [0, 64] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s4 [65, 65] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s5 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s6 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s1 -> s7 [65, 65] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s1 [66, 65535] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s1 -> s2 [66, 65535] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s11 [0, 64] { R4275 += 1, R4203 += 1 };
  s2 -> s2 [0, 64] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s5 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s6 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s2 -> s8 [65, 65] { R4275 += 1, R4203 += 1 };
  s2 -> s12 [65, 65] { R4275 += 1, R4203 += 1 };
  s2 -> s11 [66, 65535] { R4275 += 1, R4203 += 1 };
  s2 -> s2 [66, 65535] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s1 [0, 64] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s2 [0, 64] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s3 [0, 65535] { R4275 += 1, R4202 += 1, R4203 += 1 };
  s3 -> s4 [65, 65] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s5 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s6 [65, 65] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s3 -> s7 [65, 65] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s1 [66, 65535] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s3 -> s2 [66, 65535] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s6 -> s6 [0, 65535] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s6 -> s8 [0, 65535] { R4275 += 1, R4203 += 1 };
  s7 -> s6 [0, 65535] { R4275 += 1, R4203 += 1, R3867 += 1, R3868 += 1 };
  s7 -> s7 [0, 65535] { R4275 += 1, R4203 += 1, R3866 += 1, R3867 += 1 };
  s8 -> s9 [0, 65535] { R4275 += 1 };
  s8 -> s8 [0, 65535] { R4275 += 1, R4203 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R4275 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R4275 += 1, R4203 += 1 };
  s11 -> s11 [0, 65535] { R4275 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R4275 += 1, R4203 += 1 };
  s11 -> s12 [65, 65] { R4275 += 1, R4203 += 1 };
  s11 -> s11 [66, 65535] { R4275 += 1, R4203 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R4275 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R4277 += 1, R4205 += 1 };
  s0 -> s0 [0, 65535] { R4276 += 1, R4277 += 1 };
  s0 -> s2 [0, 65535] { R4277 += 1, R4204 += 1, R4205 += 1 };
  s0 -> s3 [65, 65] { R4277 += 1, R4205 += 1 };
  s0 -> s4 [65, 65] { R4277 += 1, R4205 += 1 };
  s0 -> s1 [66, 65535] { R4277 += 1, R4205 += 1 };
  s1 -> s1 [0, 64] { R4277 += 1, R4205 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4277 += 1 };
  s1 -> s3 [65, 65] { R4277 += 1, R4205 += 1 };
  s1 -> s4 [65, 65] { R4277 += 1, R4205 += 1 };
  s1 -> s1 [66, 65535] { R4277 += 1, R4205 += 1 };
  s2 -> s1 [0, 64] { R4277 += 1, R4205 += 1 };
  s2 -> s2 [0, 65535] { R4277 += 1, R4204 += 1, R4205 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4277 += 1, R4205 += 1 };
  s2 -> s4 [65, 65] { R4277 += 1, R4205 += 1 };
  s2 -> s1 [66, 65535] { R4277 += 1, R4205 += 1 };
  s3 -> s3 [0, 65535] { R4277 += 1, R4205 += 1 };
  s3 -> s6 [0, 65535] { R4277 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4277 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4277 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s0 -> s2 [0, 64] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s0 -> s3 [0, 65535] { R4279 += 1, R4206 += 1, R4207 += 1 };
  s0 -> s0 [0, 65535] { R4278 += 1, R4279 += 1 };
  s0 -> s4 [65, 65] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s0 -> s5 [65, 65] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s0 -> s6 [65, 65] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s0 -> s7 [65, 65] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s0 -> s1 [66, 79] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s0 -> s2 [66, 65535] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s0 -> s8 [80, 80] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s0 -> s1 [81, 65535] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s1 -> s1 [0, 64] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s1 -> s4 [65, 65] { R4279 += 1, R4207 += 1 };
  s1 -> s6 [65, 65] { R4279 += 1, R4207 += 1 };
  s1 -> s1 [66, 79] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s1 -> s1 [66, 65535] { R4279 += 1, R4207 += 1 };
  s1 -> s8 [80, 80] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s1 -> s1 [81, 65535] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s2 -> s1 [0, 64] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s2 -> s2 [0, 64] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s2 -> s4 [65, 65] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s2 -> s5 [65, 65] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s2 -> s6 [65, 65] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s2 -> s7 [65, 65] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s2 -> s1 [66, 79] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s2 -> s2 [66, 65535] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s2 -> s8 [80, 80] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s2 -> s1 [81, 65535] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s3 -> s1 [0, 64] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s3 -> s2 [0, 64] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s3 -> s3 [0, 65535] { R4279 += 1, R4206 += 1, R4207 += 1 };
  s3 -> s4 [65, 65] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s3 -> s5 [65, 65] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s3 -> s6 [65, 65] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s3 -> s7 [65, 65] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s3 -> s1 [66, 79] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s3 -> s2 [66, 65535] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s3 -> s8 [80, 80] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s3 -> s1 [81, 65535] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s4 -> s4 [0, 79] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s4 -> s4 [0, 65535] { R4279 += 1, R4207 += 1 };
  s4 -> s11 [80, 80] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s4 -> s4 [81, 65535] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s7 -> s4 [0, 79] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s7 -> s7 [0, 65535] { R4279 += 1, R4207 += 1, R4144 += 1, R4145 += 1 };
  s7 -> s11 [80, 80] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s7 -> s4 [81, 65535] { R4279 += 1, R4207 += 1, R4145 += 1, R4146 += 1 };
  s8 -> s8 [0, 64] { R4279 += 1, R4207 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4279 += 1 };
  s8 -> s10 [65, 65] { R4279 += 1, R4207 += 1 };
  s8 -> s11 [65, 65] { R4279 += 1, R4207 += 1 };
  s8 -> s8 [66, 65535] { R4279 += 1, R4207 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4279 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4279 += 1, R4207 += 1 };
  s11 -> s12 [0, 65535] { R4279 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4279 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R4173 && R6 = R4279 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R4173 && R58 = 0 && R59 = R4173 && R60 = 0 && R61 = R4173 && R62 = 0 && R63 = R4279 && R64 = 0 && R65 = R4279 && R66 = 0 && R67 = R4279 && R4150 = 0 && R4151 = R4173 && R4152 = 0 && R4153 = R4173 && R4154 = 0 && R4155 = R4173 && R4156 = 0 && R4157 = R4173 && R4158 = 0 && R4159 = R4173 && R4160 = 0 && R4161 = R4173 && R4162 = 0 && R4163 = R4173 && R4164 = 0 && R4165 = R4173 && R4166 = 0 && R4167 = R4173 && R4168 = 0 && R4169 = R4173 && R4170 = 0 && R4171 = R4173 && R4172 = 0 && R4174 = 0 && R4175 = R4279 && R4176 = 0 && R4177 = R4279 && R4178 = 0 && R4179 = R4279 && R4180 = 0 && R4181 = R4279 && R4182 = 0 && R4183 = R4279 && R4184 = 0 && R4185 = R4279 && R4188 = 0 && R4189 = 0 && R4200 = 0 && R4201 = 0 && R4202 = 0 && R4203 = 0 && R4206 = 0 && R4207 = 0 && R4208 = 10 && R4209 = R4279 && R4210 = 10 && R4211 = R4279 && R4212 = 10 && R4213 = R4279 && R4214 = 10 && R4215 = R4279 && R4216 = 10 && R4217 = R4279 && R4218 = 10 && R4219 = R4279 && R4220 = 10 && R4221 = R4279 && R4222 = 10 && R4223 = R4279 && R4224 = 10 && R4225 = R4279 && R4226 = 10 && R4227 = R4279 && R4228 = 10 && R4229 = R4279 && R4230 = 10 && R4231 = R4279 && R4232 = 10 && R4233 = R4279 && R4234 = 10 && R4235 = R4279 && R4236 = 10 && R4237 = R4279 && R4238 = 10 && R4239 = R4279 && R4240 = 10 && R4241 = R4279 && R4242 = 10 && R4243 = R4279 && R4244 = 10 && R4245 = R4279 && R4246 = 10 && R4247 = R4279 && R4248 = 10 && R4249 = R4279 && R4250 = 10 && R4251 = R4279 && R4252 = 10 && R4253 = R4279 && R4254 = 10 && R4255 = R4279 && R4256 = 10 && R4257 = R4279 && R4258 = 10 && R4259 = R4279 && R4260 = 10 && R4261 = R4279 && R4262 = 10 && R4263 = R4279 && R4264 = 10 && R4265 = R4279 && R4266 = 10 && R4267 = R4279 && R4268 = 10 && R4269 = R4279 && R4270 = 10 && R4271 = R4279 && R4272 = 10 && R4273 = R4279 && R4274 = 10 && R4275 = R4279 && R4276 = 10 && R4277 = R4279 && R4278 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R2493 + R2490 + R4149 + R4146 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R4173 && 9 < R4279 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R422 + R420 = 0 && R423 + R421 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R2491 + R2488 = 0 && R2492 + R2489 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R422 + R420 != 0 || R407 + R406 + -1*R423 + -1*R421 = 0 || R407 + R406 < 1) && (R2491 + R2488 != 0 || R407 + R406 + -1*R2492 + -1*R2489 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R4186 = 0 && R4187 = 0)) && (R34 = 0 || (R4190 = 0 && R4191 = 0)) && (R34 = 0 || (R4192 = 0 && R4193 = 0)) && (R34 = 0 || (R4194 = 0 && R4195 = 0)) && (R34 = 0 || (R4196 = 0 && R4197 = 0)) && (R34 = 0 || (R4198 = 0 && R4199 = 0)) && (R34 = 0 || (R4204 = 0 && R4205 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R422 + R420 = 0 || R407 + R406 < 1) && (R2491 + R2488 = 0 || R407 + R406 < 1) && (R3871 + R3868 = 0 || (R3869 + R3866 = 0 && R3870 + R3867 = 0)) && (R3871 + R3868 = 0 || (R4147 + R4144 = 0 && R4148 + R4145 = 0));
// End of Parikh automata intersection problem
