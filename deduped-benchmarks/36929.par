// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R6620, R6621, R6622, R6623, R6624, R6625, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R7998, R7999, R8, R80, R8000, R8001, R8002, R8003, R81, R82, R83, R84, R85, R8548, R8549, R8550, R8551, R8552, R8553, R8554, R8555, R8556, R8557, R8558, R8559, R8560, R8561, R8562, R8563, R8564, R8565, R8566, R8567, R8568, R8569, R8570, R8571, R8572, R8573, R8574, R8575, R8576, R8577, R8578, R8579, R8580, R8581, R8582, R8583, R8584, R8585, R8586, R8587, R8588, R8589, R8590, R8591, R8592, R8593, R8594, R8595, R8596, R8597, R8598, R8599, R8600, R8601, R8602, R8603, R8604, R8605, R8606, R8607, R8608, R8609, R8610, R8611, R8612, R8613, R8614, R8615, R8616, R8617, R8618, R8619, R8620, R8621, R8622, R8623, R8624, R8625, R8626, R8627, R8628, R8629, R8630, R8631, R8632, R8633, R8634, R8635, R8636, R8637, R8638, R8639, R8640, R8641, R8642, R8643, R8644, R8645, R8646, R8647, R8648, R8649, R8650, R8651, R8652, R8653, R8654, R8655, R8656, R8657, R8658, R8659, R8660, R8661, R8662, R8663, R8664, R8665, R8666, R8667, R8668, R8669, R8670, R8671, R8672, R8673, R8674, R8675, R8676, R8677, R8678, R8679, R8680, R8681, R8682, R8683;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R8579 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8578 += 1, R8579 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8579 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R8581 += 1 };
  s0 -> s0 [0, 65535] { R8580 += 1, R8581 += 1 };
  s0 -> s2 [0, 65535] { R8581 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R8581 += 1 };
  s0 -> s1 [66, 65535] { R8581 += 1 };
  s1 -> s1 [0, 64] { R8581 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8581 += 1 };
  s1 -> s1 [66, 65535] { R8581 += 1 };
  s2 -> s1 [0, 64] { R8581 += 1 };
  s2 -> s2 [0, 65535] { R8581 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R8581 += 1 };
  s2 -> s1 [66, 65535] { R8581 += 1 };
  s3 -> s3 [0, 65535] { R8581 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8583 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R8582 += 1, R8583 += 1 };
  s0 -> s2 [0, 65535] { R8583 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R8583 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8583 += 1 };
  s2 -> s1 [0, 65535] { R8583 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8583 += 1, R68 += 1, R69 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8583 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R8584 += 1, R8585 += 1 };
  s0 -> s1 [0, 65535] { R8585 += 1 };
  s1 -> s1 [0, 65535] { R8585 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8587 += 1, R85 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R8586 += 1, R8587 += 1 };
  s0 -> s2 [0, 65535] { R8587 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8587 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535] { R8587 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8587 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R8587 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8587 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8589 += 1 };
  s0 -> s0 [0, 65535] { R8588 += 1, R8589 += 1 };
  s1 -> s1 [0, 65535] { R8589 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R8613 += 1 };
  s0 -> s0 [0, 65535] { R8612 += 1, R8613 += 1 };
  s0 -> s1 [45, 45] { R8613 += 1 };
  s0 -> s2 [46, 46] { R8613 += 1 };
  s0 -> s1 [48, 62] { R8613 += 1 };
  s0 -> s3 [65, 65] { R8613 += 1 };
  s0 -> s1 [66, 65535] { R8613 += 1 };
  s1 -> s1 [0, 43] { R8613 += 1 };
  s1 -> s1 [45, 45] { R8613 += 1 };
  s1 -> s2 [46, 46] { R8613 += 1 };
  s1 -> s1 [48, 62] { R8613 += 1 };
  s1 -> s3 [65, 65] { R8613 += 1 };
  s1 -> s1 [66, 65535] { R8613 += 1 };
  s2 -> s1 [0, 43] { R8613 += 1 };
  s2 -> s1 [45, 45] { R8613 += 1 };
  s2 -> s2 [46, 46] { R8613 += 1 };
  s2 -> s1 [48, 62] { R8613 += 1 };
  s2 -> s3 [65, 65] { R8613 += 1 };
  s2 -> s1 [66, 114] { R8613 += 1 };
  s2 -> s8 [115, 115] { R8613 += 1 };
  s2 -> s1 [116, 65535] { R8613 += 1 };
  s3 -> s3 [0, 43] { R8613 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8613 += 1 };
  s3 -> s4 [46, 46] { R8613 += 1 };
  s3 -> s3 [48, 62] { R8613 += 1 };
  s3 -> s3 [65, 65535] { R8613 += 1 };
  s4 -> s3 [0, 43] { R8613 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8613 += 1 };
  s4 -> s4 [46, 46] { R8613 += 1 };
  s4 -> s3 [48, 62] { R8613 += 1 };
  s4 -> s3 [65, 114] { R8613 += 1 };
  s4 -> s5 [115, 115] { R8613 += 1 };
  s4 -> s3 [116, 65535] { R8613 += 1 };
  s5 -> s3 [0, 43] { R8613 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8613 += 1 };
  s5 -> s4 [46, 46] { R8613 += 1 };
  s5 -> s3 [48, 62] { R8613 += 1 };
  s5 -> s3 [65, 110] { R8613 += 1 };
  s5 -> s6 [111, 111] { R8613 += 1 };
  s5 -> s3 [112, 65535] { R8613 += 1 };
  s6 -> s3 [0, 43] { R8613 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8613 += 1 };
  s6 -> s4 [46, 46] { R8613 += 1 };
  s6 -> s3 [48, 62] { R8613 += 1 };
  s6 -> s3 [65, 98] { R8613 += 1 };
  s6 -> s7 [99, 99] { R8613 += 1 };
  s6 -> s3 [100, 65535] { R8613 += 1 };
  s7 -> s3 [0, 43] { R8613 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8613 += 1 };
  s7 -> s4 [46, 46] { R8613 += 1 };
  s7 -> s3 [48, 62] { R8613 += 1 };
  s7 -> s3 [65, 106] { R8613 += 1 };
  s7 -> s3 [108, 65535] { R8613 += 1 };
  s8 -> s1 [0, 43] { R8613 += 1 };
  s8 -> s1 [45, 45] { R8613 += 1 };
  s8 -> s2 [46, 46] { R8613 += 1 };
  s8 -> s1 [48, 62] { R8613 += 1 };
  s8 -> s3 [65, 65] { R8613 += 1 };
  s8 -> s1 [66, 110] { R8613 += 1 };
  s8 -> s9 [111, 111] { R8613 += 1 };
  s8 -> s1 [112, 65535] { R8613 += 1 };
  s9 -> s1 [0, 43] { R8613 += 1 };
  s9 -> s1 [45, 45] { R8613 += 1 };
  s9 -> s2 [46, 46] { R8613 += 1 };
  s9 -> s1 [48, 62] { R8613 += 1 };
  s9 -> s3 [65, 65] { R8613 += 1 };
  s9 -> s1 [66, 98] { R8613 += 1 };
  s9 -> s10 [99, 99] { R8613 += 1 };
  s9 -> s1 [100, 65535] { R8613 += 1 };
  s10 -> s1 [0, 43] { R8613 += 1 };
  s10 -> s1 [45, 45] { R8613 += 1 };
  s10 -> s2 [46, 46] { R8613 += 1 };
  s10 -> s1 [48, 62] { R8613 += 1 };
  s10 -> s3 [65, 65] { R8613 += 1 };
  s10 -> s1 [66, 106] { R8613 += 1 };
  s10 -> s1 [108, 65535] { R8613 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R8614 += 1, R8615 += 1 };
  s0 -> s1 [0, 65535] { R8615 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8615 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R8617 += 1 };
  s0 -> s0 [0, 65535] { R8616 += 1, R8617 += 1 };
  s0 -> s2 [0, 65535] { R8617 += 1, R14 += 1 };
  s0 -> s3 [58, 58] { R8617 += 1 };
  s0 -> s1 [59, 65535] { R8617 += 1 };
  s1 -> s1 [0, 57] { R8617 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8617 += 1 };
  s1 -> s1 [59, 65535] { R8617 += 1 };
  s2 -> s1 [0, 57] { R8617 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8617 += 1, R14 += 1 };
  s2 -> s3 [58, 58] { R8617 += 1 };
  s2 -> s1 [59, 65535] { R8617 += 1 };
  s3 -> s3 [0, 65535] { R8617 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R8619 += 1 };
  s0 -> s2 [0, 65535] { R8619 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R8618 += 1, R8619 += 1 };
  s0 -> s3 [43, 43] { R8619 += 1 };
  s0 -> s1 [44, 65535] { R8619 += 1 };
  s1 -> s1 [0, 42] { R8619 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R8619 += 1 };
  s1 -> s1 [44, 65535] { R8619 += 1 };
  s2 -> s1 [0, 42] { R8619 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8619 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R8619 += 1 };
  s2 -> s1 [44, 65535] { R8619 += 1 };
  s3 -> s3 [0, 65535] { R8619 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R8621 += 1 };
  s0 -> s2 [0, 65535] { R8621 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R8620 += 1, R8621 += 1 };
  s0 -> s3 [65, 65] { R8621 += 1 };
  s0 -> s1 [66, 65535] { R8621 += 1 };
  s1 -> s1 [0, 64] { R8621 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8621 += 1 };
  s1 -> s1 [66, 65535] { R8621 += 1 };
  s2 -> s1 [0, 64] { R8621 += 1 };
  s2 -> s2 [0, 65535] { R8621 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R8621 += 1 };
  s2 -> s1 [66, 65535] { R8621 += 1 };
  s3 -> s3 [0, 65535] { R8621 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R8623 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R8622 += 1, R8623 += 1 };
  s0 -> s2 [0, 65535] { R8623 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R8623 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R8623 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R8623 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8623 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R8623 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8623 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R8623 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R8623 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R8623 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8623 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8624 += 1, R8625 += 1 };
  s0 -> s1 [0, 65535] { R8625 += 1, R41 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R8625 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8625 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R8625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8625 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R8625 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8625 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8627 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R8626 += 1, R8627 += 1 };
  s0 -> s2 [0, 65535] { R8627 += 1, R57 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R8627 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8627 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535] { R8627 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8627 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R8627 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R8629 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R8628 += 1, R8629 += 1 };
  s0 -> s2 [0, 65535] { R8629 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [108, 108] { R8629 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R8629 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R8629 += 1 };
  s1 -> s1 [0, 65535] { R8629 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R8629 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8629 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R8629 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R8629 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R8629 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R8629 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R8629 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R8629 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8629 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8629 += 1 };
  s5 -> s6 [99, 99] { R8629 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R8629 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R8629 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8629 += 1 };
  s6 -> s7 [97, 97] { R8629 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R8629 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R8629 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R8629 += 1 };
  s7 -> s8 [108, 108] { R8629 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R8629 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R8629 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R8629 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R8629 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R8629 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R8629 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R8629 += 1 };
  s9 -> s10 [111, 111] { R8629 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R8629 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R8629 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R8629 += 1 };
  s10 -> s11 [115, 115] { R8629 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R8629 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R8629 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R8629 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8629 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R8629 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R8629 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R8629 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R8630 += 1, R8631 += 1 };
  s0 -> s1 [0, 65535] { R8631 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R8631 += 1, R61 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R8631 += 1, R60 += 1, R61 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8631 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535] { R8631 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8631 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535] { R8631 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R8633 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R8633 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R8632 += 1, R8633 += 1 };
  s1 -> s1 [0, 65535] { R8633 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R8633 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8633 += 1 };
  s2 -> s2 [0, 65535] { R8633 += 1, R75 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8633 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R8634 += 1, R8635 += 1 };
  s0 -> s1 [0, 65535] { R8635 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8635 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R8637 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R8636 += 1, R8637 += 1 };
  s0 -> s2 [0, 65535] { R8637 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R8637 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R8637 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R8637 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R8637 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8637 += 1 };
  s1 -> s3 [43, 43] { R8637 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R8637 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R8637 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R8637 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8637 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R8637 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R8637 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R8637 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R8637 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8637 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8637 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8637 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R8639 += 1, R8555 += 1 };
  s0 -> s2 [0, 65535] { R8639 += 1, R8554 += 1, R8555 += 1 };
  s0 -> s0 [0, 65535] { R8638 += 1, R8639 += 1 };
  s0 -> s1 [66, 65535] { R8639 += 1, R8555 += 1 };
  s1 -> s1 [0, 64] { R8639 += 1, R8555 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8639 += 1 };
  s1 -> s1 [66, 65535] { R8639 += 1, R8555 += 1 };
  s2 -> s1 [0, 64] { R8639 += 1, R8555 += 1 };
  s2 -> s2 [0, 65535] { R8639 += 1, R8554 += 1, R8555 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R8639 += 1, R8555 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R8641 += 1, R8557 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R8641 += 1, R8556 += 1, R8557 += 1 };
  s0 -> s0 [0, 65535] { R8640 += 1, R8641 += 1 };
  s1 -> s1 [0, 65535] { R8641 += 1, R8557 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R8641 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8641 += 1, R8557 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8641 += 1, R8556 += 1, R8557 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8641 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R8643 += 1, R8559 += 1 };
  s0 -> s2 [0, 65535] { R8643 += 1, R8558 += 1, R8559 += 1 };
  s0 -> s0 [0, 65535] { R8642 += 1, R8643 += 1 };
  s0 -> s1 [80, 65535] { R8643 += 1, R8559 += 1 };
  s1 -> s1 [0, 65] { R8643 += 1, R8559 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8643 += 1 };
  s1 -> s1 [80, 65535] { R8643 += 1, R8559 += 1 };
  s2 -> s1 [0, 65] { R8643 += 1, R8559 += 1 };
  s2 -> s2 [0, 65535] { R8643 += 1, R8558 += 1, R8559 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R8643 += 1, R8559 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R8645 += 1, R8560 += 1, R8561 += 1 };
  s0 -> s2 [0, 65535] { R8645 += 1, R8561 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R8644 += 1, R8645 += 1 };
  s1 -> s1 [0, 65535] { R8645 += 1, R8560 += 1, R8561 += 1 };
  s1 -> s2 [0, 65535] { R8645 += 1, R8561 += 1, R407 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8645 += 1, R8561 += 1, R407 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8645 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8645 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R8647 += 1, R8563 += 1 };
  s0 -> s0 [0, 65535] { R8646 += 1, R8647 += 1 };
  s0 -> s2 [0, 65535] { R8647 += 1, R8562 += 1, R8563 += 1 };
  s0 -> s3 [0, 65535] { R8647 += 1, R8563 += 1, R409 += 1 };
  s0 -> s1 [81, 65535] { R8647 += 1, R8563 += 1 };
  s1 -> s1 [0, 79] { R8647 += 1, R8563 += 1 };
  s1 -> s1 [0, 65535] { R8647 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R8647 += 1, R8563 += 1 };
  s2 -> s1 [0, 79] { R8647 += 1, R8563 += 1 };
  s2 -> s2 [0, 65535] { R8647 += 1, R8562 += 1, R8563 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R8647 += 1, R8563 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R8647 += 1, R8563 += 1 };
  s3 -> s1 [0, 79] { R8647 += 1, R8563 += 1 };
  s3 -> s4 [0, 65535] { R8647 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8647 += 1, R8563 += 1, R409 += 1 };
  s3 -> s1 [81, 65535] { R8647 += 1, R8563 += 1 };
  s4 -> s4 [0, 65535] { R8647 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R8649 += 1, R8565 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R8648 += 1, R8649 += 1 };
  s0 -> s2 [0, 65535] { R8649 += 1, R8564 += 1, R8565 += 1 };
  s0 -> s3 [0, 65535] { R8649 += 1, R8565 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R8649 += 1, R8565 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R8649 += 1, R8565 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R8649 += 1, R8565 += 1 };
  s1 -> s4 [0, 65535] { R8649 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R8649 += 1, R8565 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R8649 += 1, R8565 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R8649 += 1, R8564 += 1, R8565 += 1 };
  s2 -> s3 [0, 65535] { R8649 += 1, R8565 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R8649 += 1, R8565 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R8649 += 1, R8565 += 1, R413 += 1 };
  s3 -> s4 [0, 65535] { R8649 += 1 };
  s3 -> s3 [0, 65535] { R8649 += 1, R8565 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R8649 += 1, R8565 += 1, R413 += 1 };
  s4 -> s4 [0, 65535] { R8649 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R8651 += 1, R8567 += 1, R418 += 1, R419 += 1 };
  s0 -> s0 [0, 65535] { R8650 += 1, R8651 += 1 };
  s0 -> s2 [0, 65535] { R8651 += 1, R8566 += 1, R8567 += 1 };
  s0 -> s3 [0, 65535] { R8651 += 1, R8567 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R8651 += 1, R8567 += 1, R418 += 1, R419 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8651 += 1 };
  s1 -> s6 [0, 65535] { R8651 += 1, R8567 += 1 };
  s2 -> s1 [0, 65535] { R8651 += 1, R8567 += 1, R418 += 1, R419 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8651 += 1, R8566 += 1, R8567 += 1 };
  s2 -> s3 [0, 65535] { R8651 += 1, R8567 += 1, R417 += 1, R418 += 1 };
  s3 -> s1 [0, 65535] { R8651 += 1, R8567 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8651 += 1 };
  s3 -> s3 [0, 65535] { R8651 += 1, R8567 += 1, R417 += 1, R418 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8651 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8651 += 1 };
  s6 -> s6 [0, 65535] { R8651 += 1, R8567 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R8653 += 1, R8569 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R8653 += 1, R8569 += 1 };
  s0 -> s2 [0, 65535] { R8653 += 1, R8568 += 1, R8569 += 1 };
  s0 -> s0 [0, 65535] { R8652 += 1, R8653 += 1 };
  s0 -> s1 [91, 65535] { R8653 += 1, R8569 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R8653 += 1, R8569 += 1, R6619 += 1 };
  s1 -> s4 [0, 65535] { R8653 += 1 };
  s1 -> s1 [0, 65535] { R8653 += 1, R8569 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R8653 += 1, R8569 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R8653 += 1, R8569 += 1, R6619 += 1 };
  s2 -> s1 [0, 65535] { R8653 += 1, R8569 += 1 };
  s2 -> s2 [0, 65535] { R8653 += 1, R8568 += 1, R8569 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R8653 += 1, R8569 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8653 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R8654 += 1, R8655 += 1 };
  s0 -> s1 [0, 65535] { R8655 += 1, R8571 += 1, R6624 += 1, R6625 += 1 };
  s0 -> s2 [0, 65535] { R8655 += 1, R8570 += 1, R8571 += 1 };
  s0 -> s3 [0, 65535] { R8655 += 1, R8571 += 1, R6623 += 1, R6624 += 1 };
  s1 -> s6 [0, 65535] { R8655 += 1, R8571 += 1 };
  s1 -> s1 [0, 65535] { R8655 += 1, R8571 += 1, R6624 += 1, R6625 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8655 += 1 };
  s2 -> s1 [0, 65535] { R8655 += 1, R8571 += 1, R6624 += 1, R6625 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8655 += 1, R8570 += 1, R8571 += 1 };
  s2 -> s3 [0, 65535] { R8655 += 1, R8571 += 1, R6623 += 1, R6624 += 1 };
  s3 -> s3 [0, 65535] { R8655 += 1, R8571 += 1, R6623 += 1, R6624 += 1 };
  s3 -> s1 [0, 65535] { R8655 += 1, R8571 += 1, R6624 += 1, R6625 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8655 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8655 += 1 };
  s6 -> s6 [0, 65535] { R8655 += 1, R8571 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8655 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R8657 += 1, R8572 += 1, R8573 += 1 };
  s0 -> s2 [0, 65535] { R8657 += 1, R8573 += 1 };
  s0 -> s0 [0, 65535] { R8656 += 1, R8657 += 1 };
  s1 -> s1 [0, 65535] { R8657 += 1, R8572 += 1, R8573 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8657 += 1, R8573 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8657 += 1 };
  s2 -> s2 [0, 65535] { R8657 += 1, R8573 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8657 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R8659 += 1, R8574 += 1, R8575 += 1 };
  s0 -> s0 [0, 65535] { R8658 += 1, R8659 += 1 };
  s0 -> s2 [0, 65535] { R8659 += 1, R8575 += 1 };
  s1 -> s1 [0, 65535] { R8659 += 1, R8574 += 1, R8575 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8659 += 1, R8575 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8659 += 1 };
  s2 -> s2 [0, 65535] { R8659 += 1, R8575 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8659 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R8661 += 1, R8576 += 1, R8577 += 1 };
  s0 -> s2 [0, 65535] { R8661 += 1, R8577 += 1 };
  s0 -> s0 [0, 65535] { R8660 += 1, R8661 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8661 += 1, R8576 += 1, R8577 += 1 };
  s1 -> s2 [0, 65535] { R8661 += 1, R8577 += 1 };
  s2 -> s3 [0, 65535] { R8661 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8661 += 1, R8577 += 1 };
  s3 -> s3 [0, 65535] { R8661 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R8663 += 1, R8590 += 1, R8591 += 1 };
  s0 -> s0 [0, 65535] { R8662 += 1, R8663 += 1 };
  s0 -> s2 [0, 65535] { R8663 += 1, R8591 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8663 += 1, R8590 += 1, R8591 += 1 };
  s1 -> s2 [0, 65535] { R8663 += 1, R8591 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8663 += 1 };
  s2 -> s2 [0, 65535] { R8663 += 1, R8591 += 1, R34 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8663 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R8665 += 1, R8593 += 1 };
  s0 -> s0 [0, 65535] { R8664 += 1, R8665 += 1 };
  s0 -> s2 [0, 65535] { R8665 += 1, R8592 += 1, R8593 += 1 };
  s0 -> s3 [65, 65] { R8665 += 1, R8593 += 1 };
  s0 -> s4 [65, 65] { R8665 += 1, R8593 += 1 };
  s0 -> s5 [80, 80] { R8665 += 1, R8593 += 1 };
  s0 -> s1 [81, 65535] { R8665 += 1, R8593 += 1 };
  s1 -> s1 [0, 64] { R8665 += 1, R8593 += 1 };
  s1 -> s3 [65, 65] { R8665 += 1, R8593 += 1 };
  s1 -> s4 [65, 65] { R8665 += 1, R8593 += 1 };
  s1 -> s5 [80, 80] { R8665 += 1, R8593 += 1 };
  s1 -> s1 [81, 65535] { R8665 += 1, R8593 += 1 };
  s2 -> s1 [0, 64] { R8665 += 1, R8593 += 1 };
  s2 -> s2 [0, 65535] { R8665 += 1, R8592 += 1, R8593 += 1 };
  s2 -> s3 [65, 65] { R8665 += 1, R8593 += 1 };
  s2 -> s4 [65, 65] { R8665 += 1, R8593 += 1 };
  s2 -> s5 [80, 80] { R8665 += 1, R8593 += 1 };
  s2 -> s1 [81, 65535] { R8665 += 1, R8593 += 1 };
  s4 -> s4 [0, 65] { R8665 += 1, R8593 += 1 };
  s4 -> s8 [80, 80] { R8665 += 1, R8593 += 1 };
  s4 -> s4 [81, 65535] { R8665 += 1, R8593 += 1 };
  s5 -> s5 [0, 64] { R8665 += 1, R8593 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8665 += 1 };
  s5 -> s7 [65, 65] { R8665 += 1, R8593 += 1 };
  s5 -> s8 [65, 65] { R8665 += 1, R8593 += 1 };
  s5 -> s5 [80, 65535] { R8665 += 1, R8593 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8665 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R8665 += 1, R8593 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8665 += 1 };
  s8 -> s8 [80, 65535] { R8665 += 1, R8593 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R8667 += 1, R8595 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R8666 += 1, R8667 += 1 };
  s0 -> s2 [0, 65535] { R8667 += 1, R8594 += 1, R8595 += 1 };
  s0 -> s3 [65, 65] { R8667 += 1, R8595 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R8667 += 1, R8595 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R8667 += 1, R8595 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R8667 += 1, R8595 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R8667 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8667 += 1, R8595 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R8667 += 1, R8595 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R8667 += 1, R8595 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R8667 += 1, R8595 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R8667 += 1, R8594 += 1, R8595 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8667 += 1, R8595 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R8667 += 1, R8595 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R8667 += 1, R8595 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R8667 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8667 += 1 };
  s4 -> s4 [0, 65535] { R8667 += 1, R8595 += 1, R406 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8667 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R8669 += 1, R8597 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R8668 += 1, R8669 += 1 };
  s0 -> s2 [0, 65535] { R8669 += 1, R8596 += 1, R8597 += 1 };
  s0 -> s3 [65, 65] { R8669 += 1, R8597 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R8669 += 1, R8597 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R8669 += 1, R8597 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R8669 += 1, R8597 += 1, R408 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8669 += 1 };
  s1 -> s3 [65, 65] { R8669 += 1, R8597 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R8669 += 1, R8597 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R8669 += 1, R8597 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R8669 += 1, R8597 += 1, R408 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8669 += 1, R8596 += 1, R8597 += 1 };
  s2 -> s3 [65, 65] { R8669 += 1, R8597 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R8669 += 1, R8597 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R8669 += 1, R8597 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R8669 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8669 += 1, R8597 += 1, R408 += 1 };
  s4 -> s5 [0, 65535] { R8669 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8669 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R8670 += 1, R8671 += 1 };
  s0 -> s2 [0, 65535] { R8671 += 1, R8598 += 1, R8599 += 1 };
  s0 -> s3 [65, 65] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8671 += 1 };
  s1 -> s3 [65, 65] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8671 += 1, R8598 += 1, R8599 += 1 };
  s2 -> s3 [65, 65] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R8671 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8671 += 1 };
  s4 -> s4 [0, 65535] { R8671 += 1, R8599 += 1, R410 += 1, R411 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8671 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R8673 += 1, R8600 += 1, R8601 += 1 };
  s0 -> s0 [0, 65535] { R8672 += 1, R8673 += 1 };
  s0 -> s3 [65, 65] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8673 += 1 };
  s1 -> s3 [65, 65] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8673 += 1, R8600 += 1, R8601 += 1 };
  s2 -> s3 [65, 65] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R8673 += 1, R8601 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8673 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8673 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8673 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s0 -> s0 [0, 65535] { R8674 += 1, R8675 += 1 };
  s0 -> s3 [0, 65535] { R8675 += 1, R8602 += 1, R8603 += 1 };
  s0 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s0 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s0 -> s1 [66, 65535] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [91, 107] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s0 -> s2 [109, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s5 [65, 65] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s6 [65, 65] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [91, 107] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s8 [108, 108] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s1 -> s2 [109, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s2 -> s2 [0, 65535] { R8675 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s4 [65, 65] { R8675 += 1, R8603 += 1 };
  s2 -> s7 [65, 65] { R8675 += 1, R8603 += 1 };
  s2 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R8675 += 1, R8603 += 1 };
  s2 -> s2 [91, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R8675 += 1, R8602 += 1, R8603 += 1 };
  s3 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s1 [66, 65535] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [91, 107] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s3 -> s2 [109, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s4 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s4 -> s4 [0, 65535] { R8675 += 1, R8603 += 1 };
  s4 -> s35 [0, 65535] { R8675 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [91, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s6 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s6 -> s6 [0, 65535] { R8675 += 1, R8603 += 1, R6616 += 1, R6617 += 1 };
  s6 -> s4 [91, 107] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s6 -> s10 [108, 108] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s6 -> s4 [109, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s7 -> s7 [0, 65535] { R8675 += 1 };
  s7 -> s34 [0, 65535];
  s8 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s8 -> s8 [0, 64] { R8675 += 1, R8603 += 1 };
  s8 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s8 -> s9 [65, 65] { R8675 += 1, R8603 += 1 };
  s8 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s8 -> s10 [65, 65] { R8675 += 1, R8603 += 1 };
  s8 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R8675 += 1, R8603 += 1 };
  s8 -> s2 [91, 110] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s8 -> s2 [112, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s10 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s10 -> s10 [0, 65535] { R8675 += 1, R8603 += 1 };
  s10 -> s4 [91, 110] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s10 -> s13 [111, 111] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s10 -> s4 [112, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R8675 += 1, R8603 += 1 };
  s11 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s12 [65, 65] { R8675 += 1, R8603 += 1 };
  s11 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s13 [65, 65] { R8675 += 1, R8603 += 1 };
  s11 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R8675 += 1, R8603 += 1 };
  s11 -> s2 [91, 98] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s11 -> s2 [100, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s13 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s13 -> s13 [0, 65535] { R8675 += 1, R8603 += 1 };
  s13 -> s4 [91, 98] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s13 -> s17 [99, 99] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s13 -> s4 [100, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R8675 += 1, R8603 += 1 };
  s14 -> s15 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s16 [65, 65] { R8675 += 1, R8603 += 1 };
  s14 -> s17 [65, 65] { R8675 += 1, R8603 += 1 };
  s14 -> s18 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R8675 += 1, R8603 += 1 };
  s14 -> s2 [91, 96] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s14 -> s2 [98, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s15 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s15 -> s15 [0, 65535] { R8675 += 1, R8603 += 1 };
  s15 -> s4 [91, 107] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s15 -> s22 [108, 108] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s15 -> s4 [109, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s17 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s17 -> s17 [0, 65535] { R8675 += 1, R8603 += 1 };
  s17 -> s4 [91, 96] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s17 -> s15 [97, 97] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s17 -> s4 [98, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R8675 += 1, R8603 += 1 };
  s19 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s15 [65, 65] { R8675 += 1, R8603 += 1 };
  s19 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s18 [65, 65] { R8675 += 1, R8603 += 1 };
  s19 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R8675 += 1, R8603 += 1 };
  s19 -> s2 [91, 107] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s19 -> s2 [109, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R8675 += 1, R8603 += 1 };
  s20 -> s21 [65, 65] { R8675 += 1, R8603 += 1 };
  s20 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s22 [65, 65] { R8675 += 1, R8603 += 1 };
  s20 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R8675 += 1, R8603 += 1 };
  s20 -> s2 [91, 103] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s20 -> s2 [105, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s22 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s22 -> s22 [0, 65535] { R8675 += 1, R8603 += 1 };
  s22 -> s4 [91, 103] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s22 -> s24 [104, 104] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s22 -> s4 [105, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R8675 += 1, R8603 += 1 };
  s23 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R8675 += 1, R8603 += 1 };
  s23 -> s25 [65, 65] { R8675 += 1, R8603 += 1 };
  s23 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R8675 += 1, R8603 += 1 };
  s23 -> s2 [91, 110] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s23 -> s2 [112, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s24 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s24 -> s24 [0, 65535] { R8675 += 1, R8603 += 1 };
  s24 -> s4 [91, 110] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s24 -> s28 [111, 111] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s24 -> s4 [112, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R8675 += 1, R8603 += 1 };
  s26 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s27 [65, 65] { R8675 += 1, R8603 += 1 };
  s26 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s28 [65, 65] { R8675 += 1, R8603 += 1 };
  s26 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R8675 += 1, R8603 += 1 };
  s26 -> s2 [91, 114] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s26 -> s2 [116, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s28 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s28 -> s28 [0, 65535] { R8675 += 1, R8603 += 1 };
  s28 -> s4 [91, 114] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s28 -> s30 [115, 115] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s28 -> s4 [116, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R8675 += 1, R8603 += 1 };
  s29 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s30 [65, 65] { R8675 += 1, R8603 += 1 };
  s29 -> s31 [65, 65] { R8675 += 1, R8603 += 1 };
  s29 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R8675 += 1, R8603 += 1 };
  s29 -> s2 [91, 115] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s29 -> s2 [117, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s30 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R8675 += 1, R8603 += 1 };
  s30 -> s4 [91, 115] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s30 -> s4 [117, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s32 -> s2 [0, 64] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s32 -> s4 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s32 -> s7 [65, 65] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s32 -> s2 [66, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s32 -> s2 [91, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s33 -> s4 [0, 80] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s33 -> s4 [91, 65535] { R8675 += 1, R8603 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R8675 += 1 };
  s35 -> s34 [0, 65535];
  accepting s4, s34, s2, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s0 -> s0 [0, 65535] { R8676 += 1, R8677 += 1 };
  s0 -> s2 [0, 65535] { R8677 += 1, R8604 += 1, R8605 += 1 };
  s0 -> s3 [65, 65] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s0 -> s4 [65, 65] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s0 -> s1 [66, 65535] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s1 [0, 64] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8677 += 1 };
  s1 -> s3 [65, 65] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s4 [65, 65] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s1 -> s1 [66, 65535] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s1 [0, 64] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8677 += 1, R8604 += 1, R8605 += 1 };
  s2 -> s3 [65, 65] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s4 [65, 65] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s2 -> s1 [66, 65535] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8677 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8677 += 1, R8605 += 1, R6620 += 1, R6621 += 1 };
  s4 -> s6 [0, 65535] { R8677 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8677 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s0 -> s2 [0, 64] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s0 -> s0 [0, 65535] { R8678 += 1, R8679 += 1 };
  s0 -> s3 [0, 65535] { R8679 += 1, R8606 += 1, R8607 += 1 };
  s0 -> s4 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s0 -> s5 [65, 65] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s0 -> s6 [65, 65] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s0 -> s7 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s0 -> s1 [66, 65535] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s0 -> s2 [66, 65535] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s1 -> s1 [0, 64] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s1 -> s2 [0, 64] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s1 -> s4 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s1 -> s5 [65, 65] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s1 -> s6 [65, 65] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s1 -> s7 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s1 -> s1 [66, 65535] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s1 -> s2 [66, 65535] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s2 -> s11 [0, 64] { R8679 += 1, R8607 += 1 };
  s2 -> s2 [0, 64] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s2 -> s12 [65, 65] { R8679 += 1, R8607 += 1 };
  s2 -> s8 [65, 65] { R8679 += 1, R8607 += 1 };
  s2 -> s4 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s2 -> s7 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s2 -> s11 [66, 65535] { R8679 += 1, R8607 += 1 };
  s2 -> s2 [66, 65535] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s3 -> s1 [0, 64] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s3 -> s2 [0, 64] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s3 -> s3 [0, 65535] { R8679 += 1, R8606 += 1, R8607 += 1 };
  s3 -> s4 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s3 -> s5 [65, 65] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s3 -> s6 [65, 65] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s3 -> s7 [65, 65] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s3 -> s1 [66, 65535] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s3 -> s2 [66, 65535] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s4 -> s8 [0, 65535] { R8679 += 1, R8607 += 1 };
  s4 -> s4 [0, 65535] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s6 -> s4 [0, 65535] { R8679 += 1, R8607 += 1, R7999 += 1, R8000 += 1 };
  s6 -> s6 [0, 65535] { R8679 += 1, R8607 += 1, R7998 += 1, R7999 += 1 };
  s8 -> s8 [0, 65535] { R8679 += 1, R8607 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R8679 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8679 += 1 };
  s11 -> s11 [0, 64] { R8679 += 1, R8607 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R8679 += 1 };
  s11 -> s12 [65, 65] { R8679 += 1, R8607 += 1 };
  s11 -> s8 [65, 65] { R8679 += 1, R8607 += 1 };
  s11 -> s11 [66, 65535] { R8679 += 1, R8607 += 1 };
  s12 -> s12 [0, 65535] { R8679 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R8681 += 1, R8609 += 1 };
  s0 -> s0 [0, 65535] { R8680 += 1, R8681 += 1 };
  s0 -> s2 [0, 65535] { R8681 += 1, R8608 += 1, R8609 += 1 };
  s0 -> s3 [65, 65] { R8681 += 1, R8609 += 1 };
  s0 -> s4 [65, 65] { R8681 += 1, R8609 += 1 };
  s0 -> s1 [66, 65535] { R8681 += 1, R8609 += 1 };
  s1 -> s1 [0, 64] { R8681 += 1, R8609 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8681 += 1 };
  s1 -> s3 [65, 65] { R8681 += 1, R8609 += 1 };
  s1 -> s4 [65, 65] { R8681 += 1, R8609 += 1 };
  s1 -> s1 [66, 65535] { R8681 += 1, R8609 += 1 };
  s2 -> s1 [0, 64] { R8681 += 1, R8609 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8681 += 1, R8608 += 1, R8609 += 1 };
  s2 -> s3 [65, 65] { R8681 += 1, R8609 += 1 };
  s2 -> s4 [65, 65] { R8681 += 1, R8609 += 1 };
  s2 -> s1 [66, 65535] { R8681 += 1, R8609 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8681 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8681 += 1 };
  s4 -> s4 [0, 65535] { R8681 += 1, R8609 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8681 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s0 -> s2 [0, 64] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s0 -> s3 [0, 65535] { R8683 += 1, R8610 += 1, R8611 += 1 };
  s0 -> s0 [0, 65535] { R8682 += 1, R8683 += 1 };
  s0 -> s4 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s0 -> s5 [65, 65] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s0 -> s6 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s0 -> s7 [65, 65] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s0 -> s1 [66, 79] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s0 -> s2 [66, 65535] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s0 -> s8 [80, 80] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s0 -> s1 [81, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s1 -> s1 [0, 64] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s1 -> s4 [65, 65] { R8683 += 1, R8611 += 1 };
  s1 -> s6 [65, 65] { R8683 += 1, R8611 += 1 };
  s1 -> s1 [66, 79] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s1 -> s1 [66, 65535] { R8683 += 1, R8611 += 1 };
  s1 -> s8 [80, 80] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s1 -> s1 [81, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s2 -> s1 [0, 64] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s2 -> s2 [0, 64] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s2 -> s4 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s2 -> s5 [65, 65] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s2 -> s6 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s2 -> s7 [65, 65] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s2 -> s1 [66, 79] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s2 -> s2 [66, 65535] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s2 -> s8 [80, 80] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s2 -> s1 [81, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s1 [0, 64] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s2 [0, 64] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s3 -> s3 [0, 65535] { R8683 += 1, R8610 += 1, R8611 += 1 };
  s3 -> s4 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s5 [65, 65] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s3 -> s6 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s7 [65, 65] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s3 -> s1 [66, 79] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s2 [66, 65535] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s3 -> s8 [80, 80] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s3 -> s1 [81, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s5 -> s6 [0, 79] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s5 -> s5 [0, 65535] { R8683 += 1, R8611 += 1, R8548 += 1, R8549 += 1 };
  s5 -> s10 [80, 80] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s5 -> s6 [81, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s6 -> s6 [0, 79] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s6 -> s6 [0, 65535] { R8683 += 1, R8611 += 1 };
  s6 -> s10 [80, 80] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s6 -> s6 [81, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s8 -> s9 [0, 64] { R8683 += 1, R8611 += 1 };
  s8 -> s8 [0, 64] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s8 -> s10 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s8 -> s11 [65, 65] { R8683 += 1, R8611 += 1 };
  s8 -> s12 [65, 65] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s8 -> s13 [65, 65] { R8683 += 1, R8611 += 1 };
  s8 -> s9 [66, 65535] { R8683 += 1, R8611 += 1 };
  s8 -> s8 [66, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s9 -> s9 [0, 64] { R8683 += 1, R8611 += 1 };
  s9 -> s9 [0, 65535] { R8683 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s11 [65, 65] { R8683 += 1, R8611 += 1 };
  s9 -> s13 [65, 65] { R8683 += 1, R8611 += 1 };
  s9 -> s9 [66, 65535] { R8683 += 1, R8611 += 1 };
  s10 -> s10 [0, 65535] { R8683 += 1, R8611 += 1, R8549 += 1, R8550 += 1 };
  s10 -> s13 [0, 65535] { R8683 += 1, R8611 += 1 };
  s11 -> s15 [0, 65535];
  s11 -> s11 [0, 65535] { R8683 += 1 };
  s13 -> s14 [0, 65535] { R8683 += 1 };
  s13 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R8683 += 1, R8611 += 1 };
  s14 -> s14 [0, 65535] { R8683 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s13, s9, s14, s15, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R8577 && R6 = R8683 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R8577 && R58 = 0 && R59 = R8577 && R60 = 0 && R61 = R8577 && R62 = 0 && R63 = R8683 && R64 = 0 && R65 = R8683 && R66 = 0 && R67 = R8683 && R8554 = 0 && R8555 = R8577 && R8556 = 0 && R8557 = R8577 && R8558 = 0 && R8559 = R8577 && R8560 = 0 && R8561 = R8577 && R8562 = 0 && R8563 = R8577 && R8564 = 0 && R8565 = R8577 && R8566 = 0 && R8567 = R8577 && R8568 = 0 && R8569 = R8577 && R8570 = 0 && R8571 = R8577 && R8572 = 0 && R8573 = R8577 && R8574 = 0 && R8575 = R8577 && R8576 = 0 && R8578 = 0 && R8579 = R8683 && R8580 = 0 && R8581 = R8683 && R8582 = 0 && R8583 = R8683 && R8584 = 0 && R8585 = R8683 && R8586 = 0 && R8587 = R8683 && R8588 = 0 && R8589 = R8683 && R8592 = 0 && R8593 = 0 && R8602 = 0 && R8603 = 0 && R8606 = 0 && R8607 = 0 && R8610 = 0 && R8611 = 0 && R8612 = 10 && R8613 = R8683 && R8614 = 10 && R8615 = R8683 && R8616 = 10 && R8617 = R8683 && R8618 = 10 && R8619 = R8683 && R8620 = 10 && R8621 = R8683 && R8622 = 10 && R8623 = R8683 && R8624 = 10 && R8625 = R8683 && R8626 = 10 && R8627 = R8683 && R8628 = 10 && R8629 = R8683 && R8630 = 10 && R8631 = R8683 && R8632 = 10 && R8633 = R8683 && R8634 = 10 && R8635 = R8683 && R8636 = 10 && R8637 = R8683 && R8638 = 10 && R8639 = R8683 && R8640 = 10 && R8641 = R8683 && R8642 = 10 && R8643 = R8683 && R8644 = 10 && R8645 = R8683 && R8646 = 10 && R8647 = R8683 && R8648 = 10 && R8649 = R8683 && R8650 = 10 && R8651 = R8683 && R8652 = 10 && R8653 = R8683 && R8654 = 10 && R8655 = R8683 && R8656 = 10 && R8657 = R8683 && R8658 = 10 && R8659 = R8683 && R8660 = 10 && R8661 = R8683 && R8662 = 10 && R8663 = R8683 && R8664 = 10 && R8665 = R8683 && R8666 = 10 && R8667 = R8683 && R8668 = 10 && R8669 = R8683 && R8670 = 10 && R8671 = R8683 && R8672 = 10 && R8673 = R8683 && R8674 = 10 && R8675 = R8683 && R8676 = 10 && R8677 = R8683 && R8678 = 10 && R8679 = R8683 && R8680 = 10 && R8681 = R8683 && R8682 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R6625 + R6622 + R8553 + R8550 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R8577 && 9 < R8683 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6623 + R6620 = 0 && R6624 + R6621 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R6623 + R6620 != 0 || R407 + R406 + -1*R6624 + -1*R6621 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R8590 = 0 && R8591 = 0)) && (R34 = 0 || (R8594 = 0 && R8595 = 0)) && (R34 = 0 || (R8596 = 0 && R8597 = 0)) && (R34 = 0 || (R8598 = 0 && R8599 = 0)) && (R34 = 0 || (R8600 = 0 && R8601 = 0)) && (R34 = 0 || (R8604 = 0 && R8605 = 0)) && (R34 = 0 || (R8608 = 0 && R8609 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R6623 + R6620 = 0 || R407 + R406 < 1) && (R8003 + R8000 = 0 || (R8001 + R7998 = 0 && R8002 + R7999 = 0)) && (R8003 + R8000 = 0 || (R8551 + R8548 = 0 && R8552 + R8549 = 0));
// End of Parikh automata intersection problem
