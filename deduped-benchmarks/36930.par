// Parikh automata intersection problem, generated by OSTRICH+
counter int R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R8684, R8685, R8686, R8687, R8688, R8689, R8690, R8691, R8692, R8693, R8694, R8695, R8832, R8833, R8834, R8835, R8836, R8837, R8838, R8839, R8840, R8841, R8842, R8843, R8844, R8845, R8846, R8847, R8848, R8849, R8850, R8851, R8852, R8853, R8854, R8855, R8856, R8857, R8858, R8859, R8860, R8861, R8862, R8863, R8864, R8865, R8866, R8867, R8868, R8869, R8870, R8871, R8872, R8873, R8874, R8875, R8876, R8877, R8878, R8879, R8880, R8881, R8882, R8883, R8884, R8885, R8886, R8887, R8888, R8889, R8890, R8891, R8892, R8893, R8894, R8895, R8896, R8897, R8898, R8899, R8900, R8901, R8902, R8903, R8904, R8905, R8906, R8907, R8908, R8909, R8910, R8911, R8912, R8913, R8914, R8915, R8916, R8917, R8918, R8919, R8920, R8921, R8922, R8923, R8924, R8925, R8926, R8927, R8928, R8929, R8930, R8931, R8932, R8933, R8934, R8935, R8936, R8937, R8938, R8939, R8940, R8941, R8942, R8943, R8944, R8945, R8946, R8947, R8948, R8949, R8950, R8951, R8952, R8953, R8954, R8955, R8956, R8957, R8958, R8959, R8960, R8961, R8962, R8963, R8964, R8965, R8966, R8967;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R8863 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R8862 += 1, R8863 += 1 };
  s1 -> s1 [0, 65535] { R8863 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R8865 += 1 };
  s0 -> s0 [0, 65535] { R8864 += 1, R8865 += 1 };
  s0 -> s2 [0, 65535] { R8865 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R8865 += 1 };
  s0 -> s1 [66, 65535] { R8865 += 1 };
  s1 -> s1 [0, 64] { R8865 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8865 += 1 };
  s1 -> s1 [66, 65535] { R8865 += 1 };
  s2 -> s1 [0, 64] { R8865 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8865 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R8865 += 1 };
  s2 -> s1 [66, 65535] { R8865 += 1 };
  s3 -> s3 [0, 65535] { R8865 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8867 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R8867 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R8866 += 1, R8867 += 1 };
  s1 -> s1 [0, 65535] { R8867 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R8867 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8867 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535] { R8867 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8867 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8869 += 1 };
  s0 -> s0 [0, 65535] { R8868 += 1, R8869 += 1 };
  s1 -> s1 [0, 65535] { R8869 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R8871 += 1, R85 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R8870 += 1, R8871 += 1 };
  s0 -> s2 [0, 65535] { R8871 += 1, R84 += 1, R85 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8871 += 1 };
  s1 -> s1 [0, 65535] { R8871 += 1, R85 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8871 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R8871 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8871 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R8872 += 1, R8873 += 1 };
  s0 -> s1 [0, 65535] { R8873 += 1 };
  s1 -> s1 [0, 65535] { R8873 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R8897 += 1 };
  s0 -> s0 [0, 65535] { R8896 += 1, R8897 += 1 };
  s0 -> s1 [45, 45] { R8897 += 1 };
  s0 -> s2 [46, 46] { R8897 += 1 };
  s0 -> s1 [48, 62] { R8897 += 1 };
  s0 -> s3 [65, 65] { R8897 += 1 };
  s0 -> s1 [66, 65535] { R8897 += 1 };
  s1 -> s1 [0, 43] { R8897 += 1 };
  s1 -> s1 [45, 45] { R8897 += 1 };
  s1 -> s2 [46, 46] { R8897 += 1 };
  s1 -> s1 [48, 62] { R8897 += 1 };
  s1 -> s3 [65, 65] { R8897 += 1 };
  s1 -> s1 [66, 65535] { R8897 += 1 };
  s2 -> s1 [0, 43] { R8897 += 1 };
  s2 -> s1 [45, 45] { R8897 += 1 };
  s2 -> s2 [46, 46] { R8897 += 1 };
  s2 -> s1 [48, 62] { R8897 += 1 };
  s2 -> s3 [65, 65] { R8897 += 1 };
  s2 -> s1 [66, 114] { R8897 += 1 };
  s2 -> s8 [115, 115] { R8897 += 1 };
  s2 -> s1 [116, 65535] { R8897 += 1 };
  s3 -> s3 [0, 43] { R8897 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8897 += 1 };
  s3 -> s4 [46, 46] { R8897 += 1 };
  s3 -> s3 [48, 62] { R8897 += 1 };
  s3 -> s3 [65, 65535] { R8897 += 1 };
  s4 -> s3 [0, 43] { R8897 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8897 += 1 };
  s4 -> s4 [46, 46] { R8897 += 1 };
  s4 -> s3 [48, 62] { R8897 += 1 };
  s4 -> s3 [65, 114] { R8897 += 1 };
  s4 -> s5 [115, 115] { R8897 += 1 };
  s4 -> s3 [116, 65535] { R8897 += 1 };
  s5 -> s3 [0, 43] { R8897 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8897 += 1 };
  s5 -> s4 [46, 46] { R8897 += 1 };
  s5 -> s3 [48, 62] { R8897 += 1 };
  s5 -> s3 [65, 110] { R8897 += 1 };
  s5 -> s6 [111, 111] { R8897 += 1 };
  s5 -> s3 [112, 65535] { R8897 += 1 };
  s6 -> s3 [0, 43] { R8897 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8897 += 1 };
  s6 -> s4 [46, 46] { R8897 += 1 };
  s6 -> s3 [48, 62] { R8897 += 1 };
  s6 -> s3 [65, 98] { R8897 += 1 };
  s6 -> s7 [99, 99] { R8897 += 1 };
  s6 -> s3 [100, 65535] { R8897 += 1 };
  s7 -> s3 [0, 43] { R8897 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8897 += 1 };
  s7 -> s4 [46, 46] { R8897 += 1 };
  s7 -> s3 [48, 62] { R8897 += 1 };
  s7 -> s3 [65, 106] { R8897 += 1 };
  s7 -> s3 [108, 65535] { R8897 += 1 };
  s8 -> s1 [0, 43] { R8897 += 1 };
  s8 -> s1 [45, 45] { R8897 += 1 };
  s8 -> s2 [46, 46] { R8897 += 1 };
  s8 -> s1 [48, 62] { R8897 += 1 };
  s8 -> s3 [65, 65] { R8897 += 1 };
  s8 -> s1 [66, 110] { R8897 += 1 };
  s8 -> s9 [111, 111] { R8897 += 1 };
  s8 -> s1 [112, 65535] { R8897 += 1 };
  s9 -> s1 [0, 43] { R8897 += 1 };
  s9 -> s1 [45, 45] { R8897 += 1 };
  s9 -> s2 [46, 46] { R8897 += 1 };
  s9 -> s1 [48, 62] { R8897 += 1 };
  s9 -> s3 [65, 65] { R8897 += 1 };
  s9 -> s1 [66, 98] { R8897 += 1 };
  s9 -> s10 [99, 99] { R8897 += 1 };
  s9 -> s1 [100, 65535] { R8897 += 1 };
  s10 -> s1 [0, 43] { R8897 += 1 };
  s10 -> s1 [45, 45] { R8897 += 1 };
  s10 -> s2 [46, 46] { R8897 += 1 };
  s10 -> s1 [48, 62] { R8897 += 1 };
  s10 -> s3 [65, 65] { R8897 += 1 };
  s10 -> s1 [66, 106] { R8897 += 1 };
  s10 -> s1 [108, 65535] { R8897 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R8898 += 1, R8899 += 1 };
  s0 -> s1 [0, 65535] { R8899 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8899 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R8901 += 1 };
  s0 -> s2 [0, 65535] { R8901 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R8900 += 1, R8901 += 1 };
  s0 -> s3 [58, 58] { R8901 += 1 };
  s0 -> s1 [59, 65535] { R8901 += 1 };
  s1 -> s1 [0, 57] { R8901 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8901 += 1 };
  s1 -> s1 [59, 65535] { R8901 += 1 };
  s2 -> s1 [0, 57] { R8901 += 1 };
  s2 -> s2 [0, 65535] { R8901 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R8901 += 1 };
  s2 -> s1 [59, 65535] { R8901 += 1 };
  s3 -> s3 [0, 65535] { R8901 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R8903 += 1 };
  s0 -> s2 [0, 65535] { R8903 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R8902 += 1, R8903 += 1 };
  s0 -> s3 [43, 43] { R8903 += 1 };
  s0 -> s1 [44, 65535] { R8903 += 1 };
  s1 -> s1 [0, 42] { R8903 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R8903 += 1 };
  s1 -> s1 [44, 65535] { R8903 += 1 };
  s2 -> s1 [0, 42] { R8903 += 1 };
  s2 -> s2 [0, 65535] { R8903 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R8903 += 1 };
  s2 -> s1 [44, 65535] { R8903 += 1 };
  s3 -> s3 [0, 65535] { R8903 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R8905 += 1 };
  s0 -> s0 [0, 65535] { R8904 += 1, R8905 += 1 };
  s0 -> s2 [0, 65535] { R8905 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R8905 += 1 };
  s0 -> s1 [66, 65535] { R8905 += 1 };
  s1 -> s1 [0, 64] { R8905 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8905 += 1 };
  s1 -> s1 [66, 65535] { R8905 += 1 };
  s2 -> s1 [0, 64] { R8905 += 1 };
  s2 -> s2 [0, 65535] { R8905 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R8905 += 1 };
  s2 -> s1 [66, 65535] { R8905 += 1 };
  s3 -> s3 [0, 65535] { R8905 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R8907 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R8907 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R8906 += 1, R8907 += 1 };
  s0 -> s3 [91, 91] { R8907 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R8907 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R8907 += 1 };
  s1 -> s1 [0, 65535] { R8907 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R8907 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8907 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R8907 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R8907 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R8907 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8907 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R8909 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R8908 += 1, R8909 += 1 };
  s0 -> s2 [0, 65535] { R8909 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R8909 += 1, R41 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8909 += 1 };
  s2 -> s1 [0, 65535] { R8909 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8909 += 1, R40 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8909 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8911 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R8911 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R8910 += 1, R8911 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8911 += 1, R56 += 1, R57 += 1 };
  s1 -> s2 [0, 65535] { R8911 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8911 += 1 };
  s2 -> s2 [0, 65535] { R8911 += 1, R57 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8911 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R8913 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R8913 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R8912 += 1, R8913 += 1 };
  s0 -> s3 [108, 108] { R8913 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R8913 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R8913 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R8913 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R8913 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R8913 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R8913 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R8913 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R8913 += 1, R59 += 1 };
  s3 -> s3 [0, 65535] { R8913 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [111, 111] { R8913 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R8913 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R8913 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R8913 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R8913 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R8913 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R8913 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8913 += 1 };
  s6 -> s7 [97, 97] { R8913 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R8913 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R8913 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R8913 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R8913 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R8913 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R8913 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R8913 += 1 };
  s8 -> s9 [104, 104] { R8913 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R8913 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R8913 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R8913 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R8913 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R8913 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R8913 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R8913 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R8913 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R8913 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R8913 += 1, R59 += 1 };
  s11 -> s11 [0, 65535] { R8913 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s12 [116, 116] { R8913 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R8913 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R8913 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R8913 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R8914 += 1, R8915 += 1 };
  s0 -> s1 [0, 65535] { R8915 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R8915 += 1, R61 += 1, R43 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8915 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R8915 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R8915 += 1 };
  s2 -> s2 [0, 65535] { R8915 += 1, R61 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8915 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R8916 += 1, R8917 += 1 };
  s0 -> s1 [0, 65535] { R8917 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R8917 += 1, R75 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R8917 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R8917 += 1, R75 += 1, R33 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8917 += 1 };
  s2 -> s2 [0, 65535] { R8917 += 1, R75 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8917 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R8918 += 1, R8919 += 1 };
  s0 -> s1 [0, 65535] { R8919 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8919 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R8921 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R8920 += 1, R8921 += 1 };
  s0 -> s2 [0, 65535] { R8921 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R8921 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R8921 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R8921 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R8921 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R8921 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [43, 43] { R8921 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R8921 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R8921 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R8921 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8921 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R8921 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R8921 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R8921 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R8921 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8921 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8921 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8921 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R8923 += 1, R8839 += 1 };
  s0 -> s0 [0, 65535] { R8922 += 1, R8923 += 1 };
  s0 -> s2 [0, 65535] { R8923 += 1, R8838 += 1, R8839 += 1 };
  s0 -> s1 [66, 65535] { R8923 += 1, R8839 += 1 };
  s1 -> s1 [0, 64] { R8923 += 1, R8839 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8923 += 1 };
  s1 -> s1 [66, 65535] { R8923 += 1, R8839 += 1 };
  s2 -> s1 [0, 64] { R8923 += 1, R8839 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8923 += 1, R8838 += 1, R8839 += 1 };
  s2 -> s1 [66, 65535] { R8923 += 1, R8839 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R8925 += 1, R8841 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R8924 += 1, R8925 += 1 };
  s0 -> s2 [0, 65535] { R8925 += 1, R8840 += 1, R8841 += 1 };
  s1 -> s1 [0, 65535] { R8925 += 1, R8841 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R8925 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8925 += 1, R8841 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R8925 += 1, R8840 += 1, R8841 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8925 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R8927 += 1, R8843 += 1 };
  s0 -> s2 [0, 65535] { R8927 += 1, R8842 += 1, R8843 += 1 };
  s0 -> s0 [0, 65535] { R8926 += 1, R8927 += 1 };
  s0 -> s1 [80, 65535] { R8927 += 1, R8843 += 1 };
  s1 -> s1 [0, 65] { R8927 += 1, R8843 += 1 };
  s1 -> s1 [0, 65535] { R8927 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R8927 += 1, R8843 += 1 };
  s2 -> s1 [0, 65] { R8927 += 1, R8843 += 1 };
  s2 -> s2 [0, 65535] { R8927 += 1, R8842 += 1, R8843 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R8927 += 1, R8843 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R8928 += 1, R8929 += 1 };
  s0 -> s1 [0, 65535] { R8929 += 1, R8845 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R8929 += 1, R8844 += 1, R8845 += 1 };
  s1 -> s4 [0, 65535] { R8929 += 1 };
  s1 -> s1 [0, 65535] { R8929 += 1, R8845 += 1, R407 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8929 += 1, R8845 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R8929 += 1, R8844 += 1, R8845 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8929 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R8931 += 1, R8847 += 1 };
  s0 -> s2 [0, 65535] { R8931 += 1, R8846 += 1, R8847 += 1 };
  s0 -> s0 [0, 65535] { R8930 += 1, R8931 += 1 };
  s0 -> s3 [0, 65535] { R8931 += 1, R8847 += 1, R409 += 1 };
  s0 -> s1 [81, 65535] { R8931 += 1, R8847 += 1 };
  s1 -> s1 [0, 79] { R8931 += 1, R8847 += 1 };
  s1 -> s1 [0, 65535] { R8931 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R8931 += 1, R8847 += 1 };
  s2 -> s1 [0, 79] { R8931 += 1, R8847 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8931 += 1, R8846 += 1, R8847 += 1 };
  s2 -> s3 [0, 65535] { R8931 += 1, R8847 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R8931 += 1, R8847 += 1 };
  s3 -> s1 [0, 79] { R8931 += 1, R8847 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8931 += 1 };
  s3 -> s3 [0, 65535] { R8931 += 1, R8847 += 1, R409 += 1 };
  s3 -> s1 [81, 65535] { R8931 += 1, R8847 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8931 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R8933 += 1, R8849 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R8932 += 1, R8933 += 1 };
  s0 -> s2 [0, 65535] { R8933 += 1, R8849 += 1, R412 += 1, R413 += 1 };
  s0 -> s3 [0, 65535] { R8933 += 1, R8848 += 1, R8849 += 1 };
  s0 -> s1 [81, 65535] { R8933 += 1, R8849 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R8933 += 1, R8849 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R8933 += 1, R8849 += 1 };
  s1 -> s5 [0, 65535] { R8933 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R8933 += 1, R8849 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R8933 += 1, R8849 += 1, R413 += 1 };
  s2 -> s5 [0, 65535] { R8933 += 1 };
  s2 -> s2 [0, 65535] { R8933 += 1, R8849 += 1, R412 += 1, R413 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R8933 += 1, R8849 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R8933 += 1, R8849 += 1, R413 += 1 };
  s3 -> s2 [0, 65535] { R8933 += 1, R8849 += 1, R412 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8933 += 1, R8848 += 1, R8849 += 1 };
  s3 -> s1 [81, 65535] { R8933 += 1, R8849 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8933 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R8935 += 1, R8851 += 1, R418 += 1, R419 += 1 };
  s0 -> s2 [0, 65535] { R8935 += 1, R8851 += 1, R417 += 1, R418 += 1 };
  s0 -> s3 [0, 65535] { R8935 += 1, R8850 += 1, R8851 += 1 };
  s0 -> s0 [0, 65535] { R8934 += 1, R8935 += 1 };
  s1 -> s5 [0, 65535] { R8935 += 1 };
  s1 -> s6 [0, 65535] { R8935 += 1, R8851 += 1 };
  s1 -> s1 [0, 65535] { R8935 += 1, R8851 += 1, R418 += 1, R419 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8935 += 1 };
  s2 -> s1 [0, 65535] { R8935 += 1, R8851 += 1, R418 += 1, R419 += 1 };
  s2 -> s2 [0, 65535] { R8935 += 1, R8851 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8935 += 1, R8851 += 1, R418 += 1, R419 += 1 };
  s3 -> s2 [0, 65535] { R8935 += 1, R8851 += 1, R417 += 1, R418 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8935 += 1, R8850 += 1, R8851 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8935 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8935 += 1 };
  s6 -> s6 [0, 65535] { R8935 += 1, R8851 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R8937 += 1, R8853 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R8937 += 1, R8853 += 1 };
  s0 -> s0 [0, 65535] { R8936 += 1, R8937 += 1 };
  s0 -> s2 [0, 65535] { R8937 += 1, R8852 += 1, R8853 += 1 };
  s0 -> s1 [91, 65535] { R8937 += 1, R8853 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R8937 += 1, R8853 += 1, R6619 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8937 += 1 };
  s1 -> s1 [0, 65535] { R8937 += 1, R8853 += 1 };
  s1 -> s1 [91, 65535] { R8937 += 1, R8853 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R8937 += 1, R8853 += 1, R6619 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8937 += 1, R8853 += 1 };
  s2 -> s2 [0, 65535] { R8937 += 1, R8852 += 1, R8853 += 1 };
  s2 -> s1 [91, 65535] { R8937 += 1, R8853 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8937 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R8939 += 1, R8854 += 1, R8855 += 1 };
  s0 -> s0 [0, 65535] { R8938 += 1, R8939 += 1 };
  s0 -> s2 [0, 65535] { R8939 += 1, R8855 += 1 };
  s0 -> s3 [0, 65535] { R8939 += 1, R8855 += 1, R8688 += 1, R8689 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8939 += 1, R8854 += 1, R8855 += 1 };
  s1 -> s2 [0, 65535] { R8939 += 1, R8855 += 1 };
  s1 -> s3 [0, 65535] { R8939 += 1, R8855 += 1, R8688 += 1, R8689 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8939 += 1 };
  s2 -> s2 [0, 65535] { R8939 += 1, R8855 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8939 += 1 };
  s3 -> s2 [0, 65535] { R8939 += 1, R8855 += 1 };
  s3 -> s3 [0, 65535] { R8939 += 1, R8855 += 1, R8688 += 1, R8689 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8939 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R8941 += 1, R8857 += 1, R8693 += 1, R8694 += 1 };
  s0 -> s0 [0, 65535] { R8940 += 1, R8941 += 1 };
  s0 -> s2 [0, 65535] { R8941 += 1, R8857 += 1, R8694 += 1, R8695 += 1 };
  s0 -> s3 [0, 65535] { R8941 += 1, R8856 += 1, R8857 += 1 };
  s1 -> s1 [0, 65535] { R8941 += 1, R8857 += 1, R8693 += 1, R8694 += 1 };
  s1 -> s6 [0, 65535] { R8941 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8941 += 1, R8857 += 1, R8694 += 1, R8695 += 1 };
  s2 -> s5 [0, 65535] { R8941 += 1, R8857 += 1 };
  s2 -> s6 [0, 65535] { R8941 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8941 += 1, R8857 += 1, R8694 += 1, R8695 += 1 };
  s3 -> s1 [0, 65535] { R8941 += 1, R8857 += 1, R8693 += 1, R8694 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8941 += 1, R8857 += 1, R8694 += 1, R8695 += 1 };
  s3 -> s3 [0, 65535] { R8941 += 1, R8856 += 1, R8857 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8941 += 1, R8857 += 1 };
  s5 -> s6 [0, 65535] { R8941 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8941 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R8943 += 1, R8859 += 1 };
  s0 -> s0 [0, 65535] { R8942 += 1, R8943 += 1 };
  s0 -> s2 [0, 65535] { R8943 += 1, R8858 += 1, R8859 += 1 };
  s1 -> s1 [0, 65535] { R8943 += 1, R8859 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8943 += 1 };
  s2 -> s1 [0, 65535] { R8943 += 1, R8859 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8943 += 1, R8858 += 1, R8859 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8943 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s0 -> s0 [0, 65535] { R8944 += 1, R8945 += 1 };
  s0 -> s1 [0, 65535] { R8945 += 1, R8861 += 1 };
  s0 -> s2 [0, 65535] { R8945 += 1, R8860 += 1, R8861 += 1 };
  s0 -> s3 [80, 80] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s0 -> s4 [80, 80] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s0 -> s1 [81, 65535] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s1 -> s1 [0, 79] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s1 -> s1 [0, 65535] { R8945 += 1, R8861 += 1 };
  s1 -> s5 [0, 65535] { R8945 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [80, 80] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s1 -> s4 [80, 80] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s1 -> s1 [81, 65535] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s2 -> s1 [0, 79] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s2 -> s1 [0, 65535] { R8945 += 1, R8861 += 1 };
  s2 -> s2 [0, 65535] { R8945 += 1, R8860 += 1, R8861 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [80, 80] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s2 -> s4 [80, 80] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s2 -> s1 [81, 65535] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s3 -> s3 [0, 65535] { R8945 += 1, R8861 += 1 };
  s3 -> s5 [0, 65535] { R8945 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R8945 += 1, R8861 += 1, R8836 += 1, R8837 += 1 };
  s4 -> s5 [0, 65535] { R8945 += 1 };
  s4 -> s6 [0, 65535] { R8945 += 1, R8861 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8945 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R8945 += 1 };
  s6 -> s6 [0, 65535] { R8945 += 1, R8861 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s0 [0, 65535] { R8946 += 1, R8947 += 1 };
  s0 -> s1 [0, 65535] { R8947 += 1, R8875 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R8947 += 1, R8874 += 1, R8875 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8947 += 1, R8875 += 1, R34 += 1 };
  s1 -> s4 [0, 65535] { R8947 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8947 += 1, R8875 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R8947 += 1, R8874 += 1, R8875 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8947 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R8949 += 1, R8877 += 1 };
  s0 -> s2 [0, 65535] { R8949 += 1, R8876 += 1, R8877 += 1 };
  s0 -> s0 [0, 65535] { R8948 += 1, R8949 += 1 };
  s0 -> s3 [65, 65] { R8949 += 1, R8877 += 1 };
  s0 -> s4 [65, 65] { R8949 += 1, R8877 += 1 };
  s0 -> s5 [80, 80] { R8949 += 1, R8877 += 1 };
  s0 -> s1 [81, 65535] { R8949 += 1, R8877 += 1 };
  s1 -> s1 [0, 64] { R8949 += 1, R8877 += 1 };
  s1 -> s3 [65, 65] { R8949 += 1, R8877 += 1 };
  s1 -> s4 [65, 65] { R8949 += 1, R8877 += 1 };
  s1 -> s5 [80, 80] { R8949 += 1, R8877 += 1 };
  s1 -> s1 [81, 65535] { R8949 += 1, R8877 += 1 };
  s2 -> s1 [0, 64] { R8949 += 1, R8877 += 1 };
  s2 -> s2 [0, 65535] { R8949 += 1, R8876 += 1, R8877 += 1 };
  s2 -> s3 [65, 65] { R8949 += 1, R8877 += 1 };
  s2 -> s4 [65, 65] { R8949 += 1, R8877 += 1 };
  s2 -> s5 [80, 80] { R8949 += 1, R8877 += 1 };
  s2 -> s1 [81, 65535] { R8949 += 1, R8877 += 1 };
  s3 -> s3 [0, 65] { R8949 += 1, R8877 += 1 };
  s3 -> s7 [80, 80] { R8949 += 1, R8877 += 1 };
  s3 -> s3 [81, 65535] { R8949 += 1, R8877 += 1 };
  s5 -> s5 [0, 64] { R8949 += 1, R8877 += 1 };
  s5 -> s5 [0, 65535] { R8949 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R8949 += 1, R8877 += 1 };
  s5 -> s8 [65, 65] { R8949 += 1, R8877 += 1 };
  s5 -> s5 [80, 65535] { R8949 += 1, R8877 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R8949 += 1, R8877 += 1 };
  s7 -> s7 [0, 65535] { R8949 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R8949 += 1, R8877 += 1 };
  s8 -> s8 [0, 65535] { R8949 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R8951 += 1, R8879 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R8950 += 1, R8951 += 1 };
  s0 -> s2 [0, 65535] { R8951 += 1, R8878 += 1, R8879 += 1 };
  s0 -> s3 [65, 65] { R8951 += 1, R8879 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R8951 += 1, R8879 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R8951 += 1, R8879 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R8951 += 1, R8879 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R8951 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8951 += 1, R8879 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R8951 += 1, R8879 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R8951 += 1, R8879 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R8951 += 1, R8879 += 1, R406 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8951 += 1, R8878 += 1, R8879 += 1 };
  s2 -> s3 [65, 65] { R8951 += 1, R8879 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R8951 += 1, R8879 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R8951 += 1, R8879 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R8951 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8951 += 1, R8879 += 1, R406 += 1 };
  s4 -> s6 [0, 65535] { R8951 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8951 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R8953 += 1, R8881 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R8953 += 1, R8880 += 1, R8881 += 1 };
  s0 -> s0 [0, 65535] { R8952 += 1, R8953 += 1 };
  s0 -> s3 [65, 65] { R8953 += 1, R8881 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R8953 += 1, R8881 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R8953 += 1, R8881 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R8953 += 1, R8881 += 1, R408 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8953 += 1 };
  s1 -> s3 [65, 65] { R8953 += 1, R8881 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R8953 += 1, R8881 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R8953 += 1, R8881 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R8953 += 1, R8881 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R8953 += 1, R8880 += 1, R8881 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8953 += 1, R8881 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R8953 += 1, R8881 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R8953 += 1, R8881 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R8953 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8953 += 1, R8881 += 1, R408 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8953 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8953 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R8955 += 1, R8882 += 1, R8883 += 1 };
  s0 -> s0 [0, 65535] { R8954 += 1, R8955 += 1 };
  s0 -> s3 [65, 65] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8955 += 1 };
  s1 -> s3 [65, 65] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R8955 += 1, R8882 += 1, R8883 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R8955 += 1, R8883 += 1, R410 += 1, R411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8955 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8955 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8955 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R8956 += 1, R8957 += 1 };
  s0 -> s2 [0, 65535] { R8957 += 1, R8884 += 1, R8885 += 1 };
  s0 -> s3 [65, 65] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R8957 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8957 += 1, R8884 += 1, R8885 += 1 };
  s2 -> s3 [65, 65] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8957 += 1, R8885 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535] { R8957 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8957 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8957 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s0 [0, 65535] { R8958 += 1, R8959 += 1 };
  s0 -> s3 [0, 65535] { R8959 += 1, R8886 += 1, R8887 += 1 };
  s0 -> s4 [65, 65] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s0 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s0 -> s2 [66, 65535] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s1 [91, 107] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s0 -> s1 [109, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s1 -> s35 [0, 65535];
  s1 -> s1 [0, 65535] { R8959 += 1 };
  s1 -> s5 [65, 65] { R8959 += 1, R8887 += 1 };
  s1 -> s7 [65, 65] { R8959 += 1, R8887 += 1 };
  s1 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R8959 += 1, R8887 += 1 };
  s1 -> s1 [91, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s4 [65, 65] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s6 [65, 65] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s1 [91, 107] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s8 [108, 108] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s2 -> s1 [109, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R8959 += 1, R8886 += 1, R8887 += 1 };
  s3 -> s4 [65, 65] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s2 [66, 65535] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s1 [91, 107] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s3 -> s1 [109, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s5 -> s35 [0, 65535];
  s5 -> s5 [0, 65535] { R8959 += 1 };
  s6 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s6 -> s6 [0, 65535] { R8959 += 1, R8887 += 1, R6616 += 1, R6617 += 1 };
  s6 -> s7 [91, 107] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s6 -> s10 [108, 108] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s6 -> s7 [109, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s7 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s7 -> s34 [0, 65535] { R8959 += 1 };
  s7 -> s35 [0, 65535];
  s7 -> s7 [0, 65535] { R8959 += 1, R8887 += 1 };
  s7 -> s7 [91, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s8 [0, 64] { R8959 += 1, R8887 += 1 };
  s8 -> s9 [65, 65] { R8959 += 1, R8887 += 1 };
  s8 -> s10 [65, 65] { R8959 += 1, R8887 += 1 };
  s8 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R8959 += 1, R8887 += 1 };
  s8 -> s1 [91, 110] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s8 -> s1 [112, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s10 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s10 -> s10 [0, 65535] { R8959 += 1, R8887 += 1 };
  s10 -> s7 [91, 110] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s10 -> s12 [111, 111] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s10 -> s7 [112, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R8959 += 1, R8887 += 1 };
  s11 -> s12 [65, 65] { R8959 += 1, R8887 += 1 };
  s11 -> s13 [65, 65] { R8959 += 1, R8887 += 1 };
  s11 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R8959 += 1, R8887 += 1 };
  s11 -> s1 [91, 98] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s11 -> s1 [100, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s12 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s12 -> s12 [0, 65535] { R8959 += 1, R8887 += 1 };
  s12 -> s7 [91, 98] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s12 -> s18 [99, 99] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s12 -> s7 [100, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R8959 += 1, R8887 += 1 };
  s14 -> s15 [65, 65] { R8959 += 1, R8887 += 1 };
  s14 -> s16 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s17 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s18 [65, 65] { R8959 += 1, R8887 += 1 };
  s14 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R8959 += 1, R8887 += 1 };
  s14 -> s1 [91, 96] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s14 -> s1 [98, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s16 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s16 -> s16 [0, 65535] { R8959 += 1, R8887 += 1 };
  s16 -> s7 [91, 107] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s16 -> s21 [108, 108] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s16 -> s7 [109, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s18 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s18 -> s18 [0, 65535] { R8959 += 1, R8887 += 1 };
  s18 -> s7 [91, 96] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s18 -> s16 [97, 97] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s18 -> s7 [98, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R8959 += 1, R8887 += 1 };
  s19 -> s16 [65, 65] { R8959 += 1, R8887 += 1 };
  s19 -> s17 [65, 65] { R8959 += 1, R8887 += 1 };
  s19 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R8959 += 1, R8887 += 1 };
  s19 -> s1 [91, 107] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s19 -> s1 [109, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R8959 += 1, R8887 += 1 };
  s20 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R8959 += 1, R8887 += 1 };
  s20 -> s22 [65, 65] { R8959 += 1, R8887 += 1 };
  s20 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R8959 += 1, R8887 += 1 };
  s20 -> s1 [91, 103] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s20 -> s1 [105, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s21 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s21 -> s21 [0, 65535] { R8959 += 1, R8887 += 1 };
  s21 -> s7 [91, 103] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s21 -> s24 [104, 104] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s21 -> s7 [105, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R8959 += 1, R8887 += 1 };
  s23 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R8959 += 1, R8887 += 1 };
  s23 -> s25 [65, 65] { R8959 += 1, R8887 += 1 };
  s23 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R8959 += 1, R8887 += 1 };
  s23 -> s1 [91, 110] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s23 -> s1 [112, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s24 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s24 -> s24 [0, 65535] { R8959 += 1, R8887 += 1 };
  s24 -> s7 [91, 110] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s24 -> s27 [111, 111] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s24 -> s7 [112, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R8959 += 1, R8887 += 1 };
  s26 -> s27 [65, 65] { R8959 += 1, R8887 += 1 };
  s26 -> s28 [65, 65] { R8959 += 1, R8887 += 1 };
  s26 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R8959 += 1, R8887 += 1 };
  s26 -> s1 [91, 114] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s26 -> s1 [116, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s27 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s27 -> s27 [0, 65535] { R8959 += 1, R8887 += 1 };
  s27 -> s7 [91, 114] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s27 -> s30 [115, 115] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s27 -> s7 [116, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R8959 += 1, R8887 += 1 };
  s29 -> s30 [65, 65] { R8959 += 1, R8887 += 1 };
  s29 -> s31 [65, 65] { R8959 += 1, R8887 += 1 };
  s29 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R8959 += 1, R8887 += 1 };
  s29 -> s1 [91, 115] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s29 -> s1 [117, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s30 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R8959 += 1, R8887 += 1 };
  s30 -> s7 [91, 115] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s30 -> s7 [117, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s32 -> s1 [0, 64] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s32 -> s5 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s32 -> s7 [65, 65] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s32 -> s1 [66, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s32 -> s1 [91, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s33 -> s7 [0, 80] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s33 -> s7 [91, 65535] { R8959 += 1, R8887 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535] { R8959 += 1 };
  s34 -> s35 [0, 65535];
  s35 -> s35 [0, 65535];
  accepting s34, s5, s1, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [0, 64] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s0 [0, 65535] { R8960 += 1, R8961 += 1 };
  s0 -> s3 [0, 65535] { R8961 += 1, R8888 += 1, R8889 += 1 };
  s0 -> s4 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s5 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s6 [65, 65] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s7 [65, 65] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s1 [66, 65535] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [66, 65535] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s1 -> s1 [0, 64] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R8961 += 1 };
  s1 -> s4 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s5 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s1 [66, 65535] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [0, 64] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [0, 64] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s4 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s5 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s6 [65, 65] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s7 [65, 65] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s1 [66, 65535] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [66, 65535] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s1 [0, 64] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [0, 64] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s3 [0, 65535] { R8961 += 1, R8888 += 1, R8889 += 1 };
  s3 -> s4 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s5 [65, 65] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s6 [65, 65] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s7 [65, 65] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s1 [66, 65535] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [66, 65535] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s4 -> s4 [0, 65535] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R8961 += 1 };
  s5 -> s5 [0, 65535] { R8961 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R8961 += 1, R8889 += 1, R8685 += 1, R8686 += 1 };
  s7 -> s7 [0, 65535] { R8961 += 1, R8889 += 1, R8684 += 1, R8685 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8961 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s0 -> s0 [0, 65535] { R8962 += 1, R8963 += 1 };
  s0 -> s2 [0, 65535] { R8963 += 1, R8890 += 1, R8891 += 1 };
  s0 -> s3 [65, 65] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s0 -> s4 [65, 65] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s0 -> s1 [66, 65535] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s1 [0, 64] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s1 [0, 65535] { R8963 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s4 [65, 65] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s1 -> s1 [66, 65535] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s2 -> s1 [0, 64] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8963 += 1, R8890 += 1, R8891 += 1 };
  s2 -> s3 [65, 65] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s2 -> s4 [65, 65] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s2 -> s1 [66, 65535] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s3 -> s6 [0, 65535] { R8963 += 1 };
  s3 -> s3 [0, 65535] { R8963 += 1, R8891 += 1, R8690 += 1, R8691 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8963 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8963 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R8965 += 1, R8893 += 1 };
  s0 -> s0 [0, 65535] { R8964 += 1, R8965 += 1 };
  s0 -> s2 [0, 65535] { R8965 += 1, R8892 += 1, R8893 += 1 };
  s0 -> s3 [65, 65] { R8965 += 1, R8893 += 1 };
  s0 -> s4 [65, 65] { R8965 += 1, R8893 += 1 };
  s0 -> s1 [66, 65535] { R8965 += 1, R8893 += 1 };
  s1 -> s1 [0, 64] { R8965 += 1, R8893 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8965 += 1 };
  s1 -> s3 [65, 65] { R8965 += 1, R8893 += 1 };
  s1 -> s4 [65, 65] { R8965 += 1, R8893 += 1 };
  s1 -> s1 [66, 65535] { R8965 += 1, R8893 += 1 };
  s2 -> s1 [0, 64] { R8965 += 1, R8893 += 1 };
  s2 -> s2 [0, 65535] { R8965 += 1, R8892 += 1, R8893 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8965 += 1, R8893 += 1 };
  s2 -> s4 [65, 65] { R8965 += 1, R8893 += 1 };
  s2 -> s1 [66, 65535] { R8965 += 1, R8893 += 1 };
  s3 -> s3 [0, 65535] { R8965 += 1, R8893 += 1 };
  s3 -> s6 [0, 65535] { R8965 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8965 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8965 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s0 -> s2 [0, 64] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s0 -> s3 [0, 65535] { R8967 += 1, R8894 += 1, R8895 += 1 };
  s0 -> s0 [0, 65535] { R8966 += 1, R8967 += 1 };
  s0 -> s4 [65, 65] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s0 -> s5 [65, 65] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s0 -> s6 [65, 65] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s0 -> s7 [65, 65] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s0 -> s1 [66, 79] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s0 -> s2 [66, 65535] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s0 -> s1 [81, 65535] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s1 -> s1 [0, 64] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s1 -> s1 [0, 65535] { R8967 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R8967 += 1, R8895 += 1 };
  s1 -> s5 [65, 65] { R8967 += 1, R8895 += 1 };
  s1 -> s1 [66, 79] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s1 -> s1 [66, 65535] { R8967 += 1, R8895 += 1 };
  s1 -> s1 [81, 65535] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s1 [0, 64] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s2 [0, 64] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s2 -> s4 [65, 65] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s5 [65, 65] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s6 [65, 65] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s2 -> s7 [65, 65] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s2 -> s1 [66, 79] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s2 -> s2 [66, 65535] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s2 -> s1 [81, 65535] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s3 -> s1 [0, 64] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s3 -> s2 [0, 64] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s3 -> s3 [0, 65535] { R8967 += 1, R8894 += 1, R8895 += 1 };
  s3 -> s4 [65, 65] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s3 -> s5 [65, 65] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s3 -> s6 [65, 65] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s3 -> s7 [65, 65] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s3 -> s1 [66, 79] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s3 -> s2 [66, 65535] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s3 -> s1 [81, 65535] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s4 -> s4 [0, 79] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s4 -> s4 [0, 65535] { R8967 += 1, R8895 += 1 };
  s4 -> s9 [0, 65535] { R8967 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s5 -> s5 [0, 65535] { R8967 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s4 [0, 79] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s6 -> s6 [0, 65535] { R8967 += 1, R8895 += 1, R8832 += 1, R8833 += 1 };
  s6 -> s4 [81, 65535] { R8967 += 1, R8895 += 1, R8833 += 1, R8834 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8967 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R8861 && R6 = R8967 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R8861 && R58 = 0 && R59 = R8861 && R60 = 0 && R61 = R8861 && R62 = 0 && R63 = R8967 && R64 = 0 && R65 = R8967 && R66 = 0 && R67 = R8967 && R8838 = 0 && R8839 = R8861 && R8840 = 0 && R8841 = R8861 && R8842 = 0 && R8843 = R8861 && R8844 = 0 && R8845 = R8861 && R8846 = 0 && R8847 = R8861 && R8848 = 0 && R8849 = R8861 && R8850 = 0 && R8851 = R8861 && R8852 = 0 && R8853 = R8861 && R8854 = 0 && R8855 = R8861 && R8856 = 0 && R8857 = R8861 && R8858 = 0 && R8859 = R8861 && R8860 = 0 && R8862 = 0 && R8863 = R8967 && R8864 = 0 && R8865 = R8967 && R8866 = 0 && R8867 = R8967 && R8868 = 0 && R8869 = R8967 && R8870 = 0 && R8871 = R8967 && R8872 = 0 && R8873 = R8967 && R8876 = 0 && R8877 = 0 && R8886 = 0 && R8887 = 0 && R8888 = 0 && R8889 = 0 && R8894 = 0 && R8895 = 0 && R8896 = 10 && R8897 = R8967 && R8898 = 10 && R8899 = R8967 && R8900 = 10 && R8901 = R8967 && R8902 = 10 && R8903 = R8967 && R8904 = 10 && R8905 = R8967 && R8906 = 10 && R8907 = R8967 && R8908 = 10 && R8909 = R8967 && R8910 = 10 && R8911 = R8967 && R8912 = 10 && R8913 = R8967 && R8914 = 10 && R8915 = R8967 && R8916 = 10 && R8917 = R8967 && R8918 = 10 && R8919 = R8967 && R8920 = 10 && R8921 = R8967 && R8922 = 10 && R8923 = R8967 && R8924 = 10 && R8925 = R8967 && R8926 = 10 && R8927 = R8967 && R8928 = 10 && R8929 = R8967 && R8930 = 10 && R8931 = R8967 && R8932 = 10 && R8933 = R8967 && R8934 = 10 && R8935 = R8967 && R8936 = 10 && R8937 = R8967 && R8938 = 10 && R8939 = R8967 && R8940 = 10 && R8941 = R8967 && R8942 = 10 && R8943 = R8967 && R8944 = 10 && R8945 = R8967 && R8946 = 10 && R8947 = R8967 && R8948 = 10 && R8949 = R8967 && R8950 = 10 && R8951 = R8967 && R8952 = 10 && R8953 = R8967 && R8954 = 10 && R8955 = R8967 && R8956 = 10 && R8957 = R8967 && R8958 = 10 && R8959 = R8967 && R8960 = 10 && R8961 = R8967 && R8962 = 10 && R8963 = R8967 && R8964 = 10 && R8965 = R8967 && R8966 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8689 + R8686 + R8837 + R8834 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R8861 && 9 < R8967 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R8687 + R8684 = 0 && R8688 + R8685 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R8687 + R8684 != 0 || R407 + R406 + -1*R8688 + -1*R8685 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R8874 = 0 && R8875 = 0)) && (R34 = 0 || (R8878 = 0 && R8879 = 0)) && (R34 = 0 || (R8880 = 0 && R8881 = 0)) && (R34 = 0 || (R8882 = 0 && R8883 = 0)) && (R34 = 0 || (R8884 = 0 && R8885 = 0)) && (R34 = 0 || (R8890 = 0 && R8891 = 0)) && (R34 = 0 || (R8892 = 0 && R8893 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R8687 + R8684 = 0 || R407 + R406 < 1) && (R8695 + R8692 = 0 || (R8693 + R8690 = 0 && R8694 + R8691 = 0)) && (R8695 + R8692 = 0 || (R8835 + R8832 = 0 && R8836 + R8833 = 0));
// End of Parikh automata intersection problem
