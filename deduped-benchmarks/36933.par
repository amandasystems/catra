// Parikh automata intersection problem, generated by OSTRICH+
counter int R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R8684, R8685, R8686, R8687, R8688, R8689;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R10099 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R10098 += 1, R10099 += 1 };
  s1 -> s1 [0, 65535] { R10099 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R10101 += 1 };
  s0 -> s2 [0, 65535] { R10101 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R10100 += 1, R10101 += 1 };
  s0 -> s3 [65, 65] { R10101 += 1 };
  s0 -> s1 [66, 65535] { R10101 += 1 };
  s1 -> s1 [0, 64] { R10101 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10101 += 1 };
  s1 -> s1 [66, 65535] { R10101 += 1 };
  s2 -> s1 [0, 64] { R10101 += 1 };
  s2 -> s2 [0, 65535] { R10101 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10101 += 1 };
  s2 -> s1 [66, 65535] { R10101 += 1 };
  s3 -> s3 [0, 65535] { R10101 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10103 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R10103 += 1, R69 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R10102 += 1, R10103 += 1 };
  s1 -> s1 [0, 65535] { R10103 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R10103 += 1, R69 += 1, R27 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10103 += 1, R69 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10103 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10103 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10104 += 1, R10105 += 1 };
  s0 -> s1 [0, 65535] { R10105 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10105 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10106 += 1, R10107 += 1 };
  s0 -> s1 [0, 65535] { R10107 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10107 += 1, R84 += 1, R85 += 1 };
  s1 -> s4 [0, 65535] { R10107 += 1 };
  s1 -> s1 [0, 65535] { R10107 += 1, R85 += 1, R28 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10107 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10107 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10107 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10108 += 1, R10109 += 1 };
  s0 -> s1 [0, 65535] { R10109 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10109 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R10133 += 1 };
  s0 -> s0 [0, 65535] { R10132 += 1, R10133 += 1 };
  s0 -> s1 [45, 45] { R10133 += 1 };
  s0 -> s2 [46, 46] { R10133 += 1 };
  s0 -> s1 [48, 62] { R10133 += 1 };
  s0 -> s3 [65, 65] { R10133 += 1 };
  s0 -> s1 [66, 65535] { R10133 += 1 };
  s1 -> s1 [0, 43] { R10133 += 1 };
  s1 -> s1 [45, 45] { R10133 += 1 };
  s1 -> s2 [46, 46] { R10133 += 1 };
  s1 -> s1 [48, 62] { R10133 += 1 };
  s1 -> s3 [65, 65] { R10133 += 1 };
  s1 -> s1 [66, 65535] { R10133 += 1 };
  s2 -> s1 [0, 43] { R10133 += 1 };
  s2 -> s1 [45, 45] { R10133 += 1 };
  s2 -> s2 [46, 46] { R10133 += 1 };
  s2 -> s1 [48, 62] { R10133 += 1 };
  s2 -> s3 [65, 65] { R10133 += 1 };
  s2 -> s1 [66, 114] { R10133 += 1 };
  s2 -> s8 [115, 115] { R10133 += 1 };
  s2 -> s1 [116, 65535] { R10133 += 1 };
  s3 -> s3 [0, 43] { R10133 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10133 += 1 };
  s3 -> s4 [46, 46] { R10133 += 1 };
  s3 -> s3 [48, 62] { R10133 += 1 };
  s3 -> s3 [65, 65535] { R10133 += 1 };
  s4 -> s3 [0, 43] { R10133 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10133 += 1 };
  s4 -> s4 [46, 46] { R10133 += 1 };
  s4 -> s3 [48, 62] { R10133 += 1 };
  s4 -> s3 [65, 114] { R10133 += 1 };
  s4 -> s5 [115, 115] { R10133 += 1 };
  s4 -> s3 [116, 65535] { R10133 += 1 };
  s5 -> s3 [0, 43] { R10133 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10133 += 1 };
  s5 -> s4 [46, 46] { R10133 += 1 };
  s5 -> s3 [48, 62] { R10133 += 1 };
  s5 -> s3 [65, 110] { R10133 += 1 };
  s5 -> s6 [111, 111] { R10133 += 1 };
  s5 -> s3 [112, 65535] { R10133 += 1 };
  s6 -> s3 [0, 43] { R10133 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10133 += 1 };
  s6 -> s4 [46, 46] { R10133 += 1 };
  s6 -> s3 [48, 62] { R10133 += 1 };
  s6 -> s3 [65, 98] { R10133 += 1 };
  s6 -> s7 [99, 99] { R10133 += 1 };
  s6 -> s3 [100, 65535] { R10133 += 1 };
  s7 -> s3 [0, 43] { R10133 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10133 += 1 };
  s7 -> s4 [46, 46] { R10133 += 1 };
  s7 -> s3 [48, 62] { R10133 += 1 };
  s7 -> s3 [65, 106] { R10133 += 1 };
  s7 -> s3 [108, 65535] { R10133 += 1 };
  s8 -> s1 [0, 43] { R10133 += 1 };
  s8 -> s1 [45, 45] { R10133 += 1 };
  s8 -> s2 [46, 46] { R10133 += 1 };
  s8 -> s1 [48, 62] { R10133 += 1 };
  s8 -> s3 [65, 65] { R10133 += 1 };
  s8 -> s1 [66, 110] { R10133 += 1 };
  s8 -> s9 [111, 111] { R10133 += 1 };
  s8 -> s1 [112, 65535] { R10133 += 1 };
  s9 -> s1 [0, 43] { R10133 += 1 };
  s9 -> s1 [45, 45] { R10133 += 1 };
  s9 -> s2 [46, 46] { R10133 += 1 };
  s9 -> s1 [48, 62] { R10133 += 1 };
  s9 -> s3 [65, 65] { R10133 += 1 };
  s9 -> s1 [66, 98] { R10133 += 1 };
  s9 -> s10 [99, 99] { R10133 += 1 };
  s9 -> s1 [100, 65535] { R10133 += 1 };
  s10 -> s1 [0, 43] { R10133 += 1 };
  s10 -> s1 [45, 45] { R10133 += 1 };
  s10 -> s2 [46, 46] { R10133 += 1 };
  s10 -> s1 [48, 62] { R10133 += 1 };
  s10 -> s3 [65, 65] { R10133 += 1 };
  s10 -> s1 [66, 106] { R10133 += 1 };
  s10 -> s1 [108, 65535] { R10133 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10135 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10134 += 1, R10135 += 1 };
  s1 -> s1 [0, 65535] { R10135 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R10137 += 1 };
  s0 -> s2 [0, 65535] { R10137 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10136 += 1, R10137 += 1 };
  s0 -> s3 [58, 58] { R10137 += 1 };
  s0 -> s1 [59, 65535] { R10137 += 1 };
  s1 -> s1 [0, 57] { R10137 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10137 += 1 };
  s1 -> s1 [59, 65535] { R10137 += 1 };
  s2 -> s1 [0, 57] { R10137 += 1 };
  s2 -> s2 [0, 65535] { R10137 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R10137 += 1 };
  s2 -> s1 [59, 65535] { R10137 += 1 };
  s3 -> s3 [0, 65535] { R10137 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R10139 += 1 };
  s0 -> s2 [0, 65535] { R10139 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10138 += 1, R10139 += 1 };
  s0 -> s3 [43, 43] { R10139 += 1 };
  s0 -> s1 [44, 65535] { R10139 += 1 };
  s1 -> s1 [0, 42] { R10139 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10139 += 1 };
  s1 -> s1 [44, 65535] { R10139 += 1 };
  s2 -> s1 [0, 42] { R10139 += 1 };
  s2 -> s2 [0, 65535] { R10139 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R10139 += 1 };
  s2 -> s1 [44, 65535] { R10139 += 1 };
  s3 -> s3 [0, 65535] { R10139 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10141 += 1 };
  s0 -> s0 [0, 65535] { R10140 += 1, R10141 += 1 };
  s0 -> s2 [0, 65535] { R10141 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R10141 += 1 };
  s0 -> s1 [66, 65535] { R10141 += 1 };
  s1 -> s1 [0, 64] { R10141 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10141 += 1 };
  s1 -> s1 [66, 65535] { R10141 += 1 };
  s2 -> s1 [0, 64] { R10141 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10141 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R10141 += 1 };
  s2 -> s1 [66, 65535] { R10141 += 1 };
  s3 -> s3 [0, 65535] { R10141 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R10143 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R10142 += 1, R10143 += 1 };
  s0 -> s2 [0, 65535] { R10143 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R10143 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R10143 += 1, R39 += 1 };
  s1 -> s1 [0, 65535] { R10143 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10143 += 1 };
  s2 -> s1 [0, 90] { R10143 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10143 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R10143 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R10143 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R10143 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10143 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R10144 += 1, R10145 += 1 };
  s0 -> s1 [0, 65535] { R10145 += 1, R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R10145 += 1, R41 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R10145 += 1, R40 += 1, R41 += 1 };
  s1 -> s2 [0, 65535] { R10145 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10145 += 1 };
  s2 -> s2 [0, 65535] { R10145 += 1, R41 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10145 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10147 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R10146 += 1, R10147 += 1 };
  s0 -> s2 [0, 65535] { R10147 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R10147 += 1, R57 += 1, R31 += 1 };
  s1 -> s4 [0, 65535] { R10147 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10147 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10147 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10147 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R10149 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R10149 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R10148 += 1, R10149 += 1 };
  s0 -> s3 [108, 108] { R10149 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R10149 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R10149 += 1 };
  s1 -> s1 [0, 65535] { R10149 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R10149 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10149 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R10149 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R10149 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R10149 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10149 += 1 };
  s3 -> s5 [111, 111] { R10149 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R10149 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10149 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R10149 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10149 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R10149 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R10149 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R10149 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10149 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R10149 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R10149 += 1, R59 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s7 [0, 65535] { R10149 += 1 };
  s7 -> s8 [108, 108] { R10149 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R10149 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R10149 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10149 += 1 };
  s8 -> s9 [104, 104] { R10149 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R10149 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R10149 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R10149 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10149 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R10149 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R10149 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10149 += 1 };
  s10 -> s11 [115, 115] { R10149 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R10149 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R10149 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10149 += 1 };
  s11 -> s12 [116, 116] { R10149 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R10149 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R10149 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10149 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10151 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R10151 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R10150 += 1, R10151 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10151 += 1 };
  s1 -> s1 [0, 65535] { R10151 += 1, R61 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10151 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10151 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10151 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s0 [0, 65535] { R10152 += 1, R10153 += 1 };
  s0 -> s1 [0, 65535] { R10153 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R10153 += 1, R75 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R10153 += 1, R74 += 1, R75 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10153 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10153 += 1 };
  s2 -> s2 [0, 65535] { R10153 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10153 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10155 += 1 };
  s0 -> s0 [0, 65535] { R10154 += 1, R10155 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10155 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R10157 += 1, R77 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R10157 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R10156 += 1, R10157 += 1 };
  s0 -> s3 [43, 43] { R10157 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R10157 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R10157 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R10157 += 1, R77 += 1, R42 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10157 += 1 };
  s1 -> s3 [43, 43] { R10157 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R10157 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R10157 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R10157 += 1, R77 += 1, R42 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10157 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R10157 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R10157 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R10157 += 1, R77 += 1, R42 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10157 += 1, R77 += 1, R42 += 1 };
  s3 -> s6 [0, 65535] { R10157 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10157 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10157 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10159 += 1, R10075 += 1 };
  s0 -> s0 [0, 65535] { R10158 += 1, R10159 += 1 };
  s0 -> s2 [0, 65535] { R10159 += 1, R10074 += 1, R10075 += 1 };
  s0 -> s1 [66, 65535] { R10159 += 1, R10075 += 1 };
  s1 -> s1 [0, 64] { R10159 += 1, R10075 += 1 };
  s1 -> s1 [0, 65535] { R10159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10159 += 1, R10075 += 1 };
  s2 -> s1 [0, 64] { R10159 += 1, R10075 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10159 += 1, R10074 += 1, R10075 += 1 };
  s2 -> s1 [66, 65535] { R10159 += 1, R10075 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s0 [0, 65535] { R10160 += 1, R10161 += 1 };
  s0 -> s1 [0, 65535] { R10161 += 1, R10077 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R10161 += 1, R10076 += 1, R10077 += 1 };
  s1 -> s4 [0, 65535] { R10161 += 1 };
  s1 -> s1 [0, 65535] { R10161 += 1, R10077 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10161 += 1, R10077 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R10161 += 1, R10076 += 1, R10077 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10161 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R10163 += 1, R10079 += 1 };
  s0 -> s2 [0, 65535] { R10163 += 1, R10078 += 1, R10079 += 1 };
  s0 -> s0 [0, 65535] { R10162 += 1, R10163 += 1 };
  s0 -> s1 [80, 65535] { R10163 += 1, R10079 += 1 };
  s1 -> s1 [0, 65] { R10163 += 1, R10079 += 1 };
  s1 -> s1 [0, 65535] { R10163 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10163 += 1, R10079 += 1 };
  s2 -> s1 [0, 65] { R10163 += 1, R10079 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10163 += 1, R10078 += 1, R10079 += 1 };
  s2 -> s1 [80, 65535] { R10163 += 1, R10079 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10165 += 1, R10081 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R10164 += 1, R10165 += 1 };
  s0 -> s2 [0, 65535] { R10165 += 1, R10080 += 1, R10081 += 1 };
  s1 -> s1 [0, 65535] { R10165 += 1, R10081 += 1, R407 += 1 };
  s1 -> s4 [0, 65535] { R10165 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10165 += 1, R10081 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R10165 += 1, R10080 += 1, R10081 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10165 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R10167 += 1, R10083 += 1 };
  s0 -> s2 [0, 65535] { R10167 += 1, R10083 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R10166 += 1, R10167 += 1 };
  s0 -> s3 [0, 65535] { R10167 += 1, R10082 += 1, R10083 += 1 };
  s0 -> s1 [81, 65535] { R10167 += 1, R10083 += 1 };
  s1 -> s1 [0, 79] { R10167 += 1, R10083 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10167 += 1 };
  s1 -> s1 [81, 65535] { R10167 += 1, R10083 += 1 };
  s2 -> s1 [0, 79] { R10167 += 1, R10083 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10167 += 1, R10083 += 1, R409 += 1 };
  s2 -> s5 [0, 65535] { R10167 += 1 };
  s2 -> s1 [81, 65535] { R10167 += 1, R10083 += 1 };
  s3 -> s1 [0, 79] { R10167 += 1, R10083 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10167 += 1, R10083 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R10167 += 1, R10082 += 1, R10083 += 1 };
  s3 -> s1 [81, 65535] { R10167 += 1, R10083 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10167 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R10169 += 1, R10085 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R10168 += 1, R10169 += 1 };
  s0 -> s2 [0, 65535] { R10169 += 1, R10084 += 1, R10085 += 1 };
  s0 -> s3 [0, 65535] { R10169 += 1, R10085 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R10169 += 1, R10085 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R10169 += 1, R10085 += 1, R413 += 1 };
  s1 -> s4 [0, 65535] { R10169 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10169 += 1, R10085 += 1 };
  s1 -> s1 [81, 65535] { R10169 += 1, R10085 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R10169 += 1, R10085 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10169 += 1, R10084 += 1, R10085 += 1 };
  s2 -> s3 [0, 65535] { R10169 += 1, R10085 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R10169 += 1, R10085 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R10169 += 1, R10085 += 1, R413 += 1 };
  s3 -> s4 [0, 65535] { R10169 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10169 += 1, R10085 += 1, R412 += 1, R413 += 1 };
  s3 -> s1 [81, 65535] { R10169 += 1, R10085 += 1, R413 += 1 };
  s4 -> s4 [0, 65535] { R10169 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R10171 += 1, R10087 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R10171 += 1, R10086 += 1, R10087 += 1 };
  s0 -> s3 [0, 65535] { R10171 += 1, R10087 += 1, R418 += 1, R419 += 1 };
  s0 -> s0 [0, 65535] { R10170 += 1, R10171 += 1 };
  s1 -> s1 [0, 65535] { R10171 += 1, R10087 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [0, 65535] { R10171 += 1 };
  s1 -> s3 [0, 65535] { R10171 += 1, R10087 += 1, R418 += 1, R419 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10171 += 1, R10087 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R10171 += 1, R10086 += 1, R10087 += 1 };
  s2 -> s3 [0, 65535] { R10171 += 1, R10087 += 1, R418 += 1, R419 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10171 += 1 };
  s3 -> s5 [0, 65535] { R10171 += 1, R10087 += 1 };
  s3 -> s3 [0, 65535] { R10171 += 1, R10087 += 1, R418 += 1, R419 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10171 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R10171 += 1 };
  s5 -> s5 [0, 65535] { R10171 += 1, R10087 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R10173 += 1, R10089 += 1, R6619 += 1 };
  s0 -> s2 [0, 65535] { R10173 += 1, R10088 += 1, R10089 += 1 };
  s0 -> s1 [0, 65535] { R10173 += 1, R10089 += 1 };
  s0 -> s0 [0, 65535] { R10172 += 1, R10173 += 1 };
  s0 -> s1 [91, 65535] { R10173 += 1, R10089 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R10173 += 1, R10089 += 1, R6619 += 1 };
  s1 -> s4 [0, 65535] { R10173 += 1 };
  s1 -> s1 [0, 65535] { R10173 += 1, R10089 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R10173 += 1, R10089 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R10173 += 1, R10089 += 1, R6619 += 1 };
  s2 -> s2 [0, 65535] { R10173 += 1, R10088 += 1, R10089 += 1 };
  s2 -> s1 [0, 65535] { R10173 += 1, R10089 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R10173 += 1, R10089 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10173 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s0 [0, 65535] { R10174 += 1, R10175 += 1 };
  s0 -> s1 [0, 65535] { R10175 += 1, R10091 += 1, R8688 += 1, R8689 += 1 };
  s0 -> s2 [0, 65535] { R10175 += 1, R10091 += 1 };
  s0 -> s3 [0, 65535] { R10175 += 1, R10090 += 1, R10091 += 1 };
  s1 -> s1 [0, 65535] { R10175 += 1, R10091 += 1, R8688 += 1, R8689 += 1 };
  s1 -> s2 [0, 65535] { R10175 += 1, R10091 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10175 += 1 };
  s2 -> s2 [0, 65535] { R10175 += 1, R10091 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10175 += 1 };
  s3 -> s1 [0, 65535] { R10175 += 1, R10091 += 1, R8688 += 1, R8689 += 1 };
  s3 -> s2 [0, 65535] { R10175 += 1, R10091 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10175 += 1, R10090 += 1, R10091 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10175 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R10177 += 1, R10093 += 1 };
  s0 -> s2 [0, 65535] { R10177 += 1, R10092 += 1, R10093 += 1 };
  s0 -> s0 [0, 65535] { R10176 += 1, R10177 += 1 };
  s1 -> s1 [0, 65535] { R10177 += 1, R10093 += 1 };
  s1 -> s4 [0, 65535] { R10177 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10177 += 1, R10093 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10177 += 1, R10092 += 1, R10093 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10177 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R10179 += 1, R10094 += 1, R10095 += 1 };
  s0 -> s2 [0, 65535] { R10179 += 1, R10095 += 1 };
  s0 -> s0 [0, 65535] { R10178 += 1, R10179 += 1 };
  s1 -> s1 [0, 65535] { R10179 += 1, R10094 += 1, R10095 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10179 += 1, R10095 += 1 };
  s2 -> s3 [0, 65535] { R10179 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10179 += 1, R10095 += 1 };
  s3 -> s3 [0, 65535] { R10179 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s0 -> s2 [0, 65535] { R10181 += 1, R10096 += 1, R10097 += 1 };
  s0 -> s3 [0, 65535] { R10181 += 1, R10097 += 1, R10071 += 1, R10072 += 1 };
  s0 -> s0 [0, 65535] { R10180 += 1, R10181 += 1 };
  s0 -> s4 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s0 -> s5 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s0 -> s1 [81, 65535] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s1 -> s1 [0, 79] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10181 += 1, R10097 += 1 };
  s1 -> s8 [0, 65535] { R10181 += 1 };
  s1 -> s4 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s1 -> s5 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s1 -> s1 [81, 65535] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s2 -> s1 [0, 79] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10181 += 1, R10096 += 1, R10097 += 1 };
  s2 -> s3 [0, 65535] { R10181 += 1, R10097 += 1, R10071 += 1, R10072 += 1 };
  s2 -> s4 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s2 -> s5 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s2 -> s1 [81, 65535] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s3 -> s1 [0, 79] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s8 [0, 65535] { R10181 += 1 };
  s3 -> s3 [0, 65535] { R10181 += 1, R10097 += 1, R10071 += 1, R10072 += 1 };
  s3 -> s4 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s3 -> s5 [80, 80] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s3 -> s1 [81, 65535] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s4 -> s4 [0, 65535] { R10181 += 1, R10097 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R10181 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10181 += 1, R10097 += 1 };
  s5 -> s8 [0, 65535] { R10181 += 1 };
  s5 -> s5 [0, 65535] { R10181 += 1, R10097 += 1, R10072 += 1, R10073 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10181 += 1, R10097 += 1 };
  s7 -> s8 [0, 65535] { R10181 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10181 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10183 += 1, R10110 += 1, R10111 += 1 };
  s0 -> s0 [0, 65535] { R10182 += 1, R10183 += 1 };
  s0 -> s2 [0, 65535] { R10183 += 1, R10111 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R10183 += 1, R10110 += 1, R10111 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10183 += 1, R10111 += 1, R34 += 1 };
  s2 -> s3 [0, 65535] { R10183 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10183 += 1, R10111 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R10183 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10185 += 1, R10113 += 1 };
  s0 -> s0 [0, 65535] { R10184 += 1, R10185 += 1 };
  s0 -> s2 [0, 65535] { R10185 += 1, R10112 += 1, R10113 += 1 };
  s0 -> s3 [65, 65] { R10185 += 1, R10113 += 1 };
  s0 -> s4 [65, 65] { R10185 += 1, R10113 += 1 };
  s0 -> s5 [80, 80] { R10185 += 1, R10113 += 1 };
  s0 -> s1 [81, 65535] { R10185 += 1, R10113 += 1 };
  s1 -> s1 [0, 64] { R10185 += 1, R10113 += 1 };
  s1 -> s3 [65, 65] { R10185 += 1, R10113 += 1 };
  s1 -> s4 [65, 65] { R10185 += 1, R10113 += 1 };
  s1 -> s5 [80, 80] { R10185 += 1, R10113 += 1 };
  s1 -> s1 [81, 65535] { R10185 += 1, R10113 += 1 };
  s2 -> s1 [0, 64] { R10185 += 1, R10113 += 1 };
  s2 -> s2 [0, 65535] { R10185 += 1, R10112 += 1, R10113 += 1 };
  s2 -> s3 [65, 65] { R10185 += 1, R10113 += 1 };
  s2 -> s4 [65, 65] { R10185 += 1, R10113 += 1 };
  s2 -> s5 [80, 80] { R10185 += 1, R10113 += 1 };
  s2 -> s1 [81, 65535] { R10185 += 1, R10113 += 1 };
  s4 -> s4 [0, 65] { R10185 += 1, R10113 += 1 };
  s4 -> s8 [80, 80] { R10185 += 1, R10113 += 1 };
  s4 -> s4 [81, 65535] { R10185 += 1, R10113 += 1 };
  s5 -> s5 [0, 64] { R10185 += 1, R10113 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10185 += 1 };
  s5 -> s7 [65, 65] { R10185 += 1, R10113 += 1 };
  s5 -> s8 [65, 65] { R10185 += 1, R10113 += 1 };
  s5 -> s5 [80, 65535] { R10185 += 1, R10113 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10185 += 1 };
  s8 -> s8 [0, 65] { R10185 += 1, R10113 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10185 += 1 };
  s8 -> s8 [80, 65535] { R10185 += 1, R10113 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R10187 += 1, R10115 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R10186 += 1, R10187 += 1 };
  s0 -> s2 [0, 65535] { R10187 += 1, R10114 += 1, R10115 += 1 };
  s0 -> s3 [65, 65] { R10187 += 1, R10115 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R10187 += 1, R10115 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R10187 += 1, R10115 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R10187 += 1, R10115 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R10187 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10187 += 1, R10115 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R10187 += 1, R10115 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R10187 += 1, R10115 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R10187 += 1, R10115 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R10187 += 1, R10114 += 1, R10115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10187 += 1, R10115 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R10187 += 1, R10115 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R10187 += 1, R10115 += 1, R406 += 1 };
  s3 -> s6 [0, 65535] { R10187 += 1 };
  s3 -> s3 [0, 65535] { R10187 += 1, R10115 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10187 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10187 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R10189 += 1, R10117 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R10188 += 1, R10189 += 1 };
  s0 -> s2 [0, 65535] { R10189 += 1, R10116 += 1, R10117 += 1 };
  s0 -> s3 [65, 65] { R10189 += 1, R10117 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R10189 += 1, R10117 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R10189 += 1, R10117 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R10189 += 1, R10117 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R10189 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10189 += 1, R10117 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R10189 += 1, R10117 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R10189 += 1, R10117 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R10189 += 1, R10117 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10189 += 1, R10116 += 1, R10117 += 1 };
  s2 -> s3 [65, 65] { R10189 += 1, R10117 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R10189 += 1, R10117 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R10189 += 1, R10117 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R10189 += 1, R10117 += 1, R408 += 1 };
  s3 -> s6 [0, 65535] { R10189 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10189 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10189 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R10191 += 1, R10118 += 1, R10119 += 1 };
  s0 -> s0 [0, 65535] { R10190 += 1, R10191 += 1 };
  s0 -> s3 [65, 65] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10191 += 1 };
  s1 -> s3 [65, 65] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10191 += 1, R10118 += 1, R10119 += 1 };
  s2 -> s3 [65, 65] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R10191 += 1, R10119 += 1, R410 += 1, R411 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10191 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10191 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10191 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R10193 += 1, R10120 += 1, R10121 += 1 };
  s0 -> s0 [0, 65535] { R10192 += 1, R10193 += 1 };
  s0 -> s3 [65, 65] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R10193 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R10193 += 1, R10120 += 1, R10121 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10193 += 1 };
  s4 -> s5 [0, 65535] { R10193 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10193 += 1, R10121 += 1, R414 += 1, R415 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10193 += 1 };
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s3 [0, 65535] { R10195 += 1, R10122 += 1, R10123 += 1 };
  s0 -> s0 [0, 65535] { R10194 += 1, R10195 += 1 };
  s0 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s0 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s0 -> s2 [66, 65535] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s1 [91, 107] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s0 -> s1 [109, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s1 -> s1 [0, 65535] { R10195 += 1 };
  s1 -> s34 [0, 65535];
  s1 -> s4 [65, 65] { R10195 += 1, R10123 += 1 };
  s1 -> s7 [65, 65] { R10195 += 1, R10123 += 1 };
  s1 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R10195 += 1, R10123 += 1 };
  s1 -> s1 [91, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s5 [65, 65] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s6 [65, 65] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s2 -> s1 [91, 107] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s8 [108, 108] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s2 -> s1 [109, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R10195 += 1, R10122 += 1, R10123 += 1 };
  s3 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s2 [66, 65535] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s1 [91, 107] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s3 -> s1 [109, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s4 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s4 -> s4 [0, 65535] { R10195 += 1, R10123 += 1 };
  s4 -> s35 [0, 65535] { R10195 += 1 };
  s4 -> s34 [0, 65535];
  s4 -> s4 [91, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s6 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s6 -> s6 [0, 65535] { R10195 += 1, R10123 += 1, R6616 += 1, R6617 += 1 };
  s6 -> s4 [91, 107] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s6 -> s10 [108, 108] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s6 -> s4 [109, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s7 [0, 65535] { R10195 += 1 };
  s8 -> s8 [0, 64] { R10195 += 1, R10123 += 1 };
  s8 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s8 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s8 -> s9 [65, 65] { R10195 += 1, R10123 += 1 };
  s8 -> s10 [65, 65] { R10195 += 1, R10123 += 1 };
  s8 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s8 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R10195 += 1, R10123 += 1 };
  s8 -> s1 [91, 110] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s8 -> s1 [112, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s10 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s10 -> s10 [0, 65535] { R10195 += 1, R10123 += 1 };
  s10 -> s4 [91, 110] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s10 -> s12 [111, 111] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s10 -> s4 [112, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R10195 += 1, R10123 += 1 };
  s11 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s12 [65, 65] { R10195 += 1, R10123 += 1 };
  s11 -> s13 [65, 65] { R10195 += 1, R10123 += 1 };
  s11 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R10195 += 1, R10123 += 1 };
  s11 -> s1 [91, 98] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s11 -> s1 [100, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s12 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s12 -> s12 [0, 65535] { R10195 += 1, R10123 += 1 };
  s12 -> s4 [91, 98] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s12 -> s17 [99, 99] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s12 -> s4 [100, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R10195 += 1, R10123 += 1 };
  s14 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s15 [65, 65] { R10195 += 1, R10123 += 1 };
  s14 -> s16 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s17 [65, 65] { R10195 += 1, R10123 += 1 };
  s14 -> s18 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R10195 += 1, R10123 += 1 };
  s14 -> s1 [91, 96] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s14 -> s1 [98, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s17 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s17 -> s17 [0, 65535] { R10195 += 1, R10123 += 1 };
  s17 -> s4 [91, 96] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s17 -> s18 [97, 97] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s17 -> s4 [98, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s18 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s18 -> s18 [0, 65535] { R10195 += 1, R10123 += 1 };
  s18 -> s4 [91, 107] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s18 -> s21 [108, 108] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s18 -> s4 [109, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R10195 += 1, R10123 += 1 };
  s19 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s16 [65, 65] { R10195 += 1, R10123 += 1 };
  s19 -> s18 [65, 65] { R10195 += 1, R10123 += 1 };
  s19 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R10195 += 1, R10123 += 1 };
  s19 -> s1 [91, 107] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s19 -> s1 [109, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R10195 += 1, R10123 += 1 };
  s20 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R10195 += 1, R10123 += 1 };
  s20 -> s22 [65, 65] { R10195 += 1, R10123 += 1 };
  s20 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R10195 += 1, R10123 += 1 };
  s20 -> s1 [91, 103] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s20 -> s1 [105, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s21 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s21 -> s21 [0, 65535] { R10195 += 1, R10123 += 1 };
  s21 -> s4 [91, 103] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s21 -> s25 [104, 104] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s21 -> s4 [105, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R10195 += 1, R10123 += 1 };
  s23 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R10195 += 1, R10123 += 1 };
  s23 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s25 [65, 65] { R10195 += 1, R10123 += 1 };
  s23 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R10195 += 1, R10123 += 1 };
  s23 -> s1 [91, 110] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s23 -> s1 [112, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s25 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s25 -> s25 [0, 65535] { R10195 += 1, R10123 += 1 };
  s25 -> s4 [91, 110] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s25 -> s27 [111, 111] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s25 -> s4 [112, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R10195 += 1, R10123 += 1 };
  s26 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s27 [65, 65] { R10195 += 1, R10123 += 1 };
  s26 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s28 [65, 65] { R10195 += 1, R10123 += 1 };
  s26 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R10195 += 1, R10123 += 1 };
  s26 -> s1 [91, 114] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s26 -> s1 [116, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s27 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s27 -> s27 [0, 65535] { R10195 += 1, R10123 += 1 };
  s27 -> s4 [91, 114] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s27 -> s30 [115, 115] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s27 -> s4 [116, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R10195 += 1, R10123 += 1 };
  s29 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s30 [65, 65] { R10195 += 1, R10123 += 1 };
  s29 -> s31 [65, 65] { R10195 += 1, R10123 += 1 };
  s29 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R10195 += 1, R10123 += 1 };
  s29 -> s1 [91, 115] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s29 -> s1 [117, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s30 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R10195 += 1, R10123 += 1 };
  s30 -> s4 [91, 115] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s30 -> s4 [117, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s32 -> s1 [0, 64] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s32 -> s4 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s32 -> s7 [65, 65] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s32 -> s1 [66, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s32 -> s1 [91, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s33 -> s4 [0, 80] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s33 -> s4 [91, 65535] { R10195 += 1, R10123 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10195 += 1 };
  s35 -> s34 [0, 65535];
  accepting s4, s34, s1, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [0, 64] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s0 [0, 65535] { R10196 += 1, R10197 += 1 };
  s0 -> s3 [0, 65535] { R10197 += 1, R10124 += 1, R10125 += 1 };
  s0 -> s4 [65, 65] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s5 [65, 65] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s6 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s7 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s1 [66, 65535] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [66, 65535] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s1 -> s1 [0, 64] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s1 [0, 65535] { R10197 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s7 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s1 [66, 65535] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [0, 64] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [0, 64] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s4 [65, 65] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s5 [65, 65] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s6 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s7 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [66, 65535] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [66, 65535] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s1 [0, 64] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [0, 64] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s3 [0, 65535] { R10197 += 1, R10124 += 1, R10125 += 1 };
  s3 -> s4 [65, 65] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s5 [65, 65] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s6 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s7 [65, 65] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s1 [66, 65535] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [66, 65535] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s4 -> s4 [0, 65535] { R10197 += 1, R10125 += 1, R8684 += 1, R8685 += 1 };
  s4 -> s6 [0, 65535] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s6 -> s9 [0, 65535] { R10197 += 1 };
  s6 -> s6 [0, 65535] { R10197 += 1, R10125 += 1, R8685 += 1, R8686 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10197 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10197 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s2 [0, 64] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s0 [0, 65535] { R10198 += 1, R10199 += 1 };
  s0 -> s3 [0, 65535] { R10199 += 1, R10126 += 1, R10127 += 1 };
  s0 -> s4 [65, 65] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s5 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s6 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s7 [65, 65] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s1 [66, 65535] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s2 [66, 65535] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s1 [0, 64] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s1 -> s2 [0, 64] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s4 [65, 65] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s1 -> s5 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s6 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s7 [65, 65] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s1 -> s1 [66, 65535] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s1 -> s2 [66, 65535] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s2 [0, 64] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s11 [0, 64] { R10199 += 1, R10127 += 1 };
  s2 -> s5 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s12 [65, 65] { R10199 += 1, R10127 += 1 };
  s2 -> s6 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s8 [65, 65] { R10199 += 1, R10127 += 1 };
  s2 -> s2 [66, 65535] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s11 [66, 65535] { R10199 += 1, R10127 += 1 };
  s3 -> s1 [0, 64] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s2 [0, 64] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s3 [0, 65535] { R10199 += 1, R10126 += 1, R10127 += 1 };
  s3 -> s4 [65, 65] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s5 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s6 [65, 65] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s7 [65, 65] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s1 [66, 65535] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s2 [66, 65535] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s4 -> s4 [0, 65535] { R10199 += 1, R10127 += 1, R10062 += 1, R10063 += 1 };
  s4 -> s5 [0, 65535] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s5 -> s5 [0, 65535] { R10199 += 1, R10127 += 1, R10063 += 1, R10064 += 1 };
  s5 -> s8 [0, 65535] { R10199 += 1, R10127 += 1 };
  s8 -> s9 [0, 65535] { R10199 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R10199 += 1, R10127 += 1 };
  s9 -> s9 [0, 65535] { R10199 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R10199 += 1, R10127 += 1 };
  s11 -> s11 [0, 65535] { R10199 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R10199 += 1, R10127 += 1 };
  s11 -> s8 [65, 65] { R10199 += 1, R10127 += 1 };
  s11 -> s11 [66, 65535] { R10199 += 1, R10127 += 1 };
  s12 -> s12 [0, 65535] { R10199 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10201 += 1, R10129 += 1 };
  s0 -> s2 [0, 65535] { R10201 += 1, R10128 += 1, R10129 += 1 };
  s0 -> s0 [0, 65535] { R10200 += 1, R10201 += 1 };
  s0 -> s3 [65, 65] { R10201 += 1, R10129 += 1 };
  s0 -> s4 [65, 65] { R10201 += 1, R10129 += 1 };
  s0 -> s1 [66, 65535] { R10201 += 1, R10129 += 1 };
  s1 -> s1 [0, 64] { R10201 += 1, R10129 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10201 += 1 };
  s1 -> s3 [65, 65] { R10201 += 1, R10129 += 1 };
  s1 -> s4 [65, 65] { R10201 += 1, R10129 += 1 };
  s1 -> s1 [66, 65535] { R10201 += 1, R10129 += 1 };
  s2 -> s1 [0, 64] { R10201 += 1, R10129 += 1 };
  s2 -> s2 [0, 65535] { R10201 += 1, R10128 += 1, R10129 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10201 += 1, R10129 += 1 };
  s2 -> s4 [65, 65] { R10201 += 1, R10129 += 1 };
  s2 -> s1 [66, 65535] { R10201 += 1, R10129 += 1 };
  s3 -> s3 [0, 65535] { R10201 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10201 += 1 };
  s4 -> s4 [0, 65535] { R10201 += 1, R10129 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10201 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s0 -> s0 [0, 65535] { R10202 += 1, R10203 += 1 };
  s0 -> s2 [0, 65535] { R10203 += 1, R10130 += 1, R10131 += 1 };
  s0 -> s3 [65, 65] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s0 -> s4 [65, 65] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s0 -> s1 [66, 65535] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s1 -> s1 [0, 64] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10203 += 1 };
  s1 -> s3 [65, 65] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s1 -> s4 [65, 65] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s1 -> s1 [66, 65535] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s2 -> s1 [0, 64] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10203 += 1, R10130 += 1, R10131 += 1 };
  s2 -> s3 [65, 65] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s2 -> s4 [65, 65] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s2 -> s1 [66, 65535] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s3 -> s3 [0, 65535] { R10203 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10203 += 1 };
  s4 -> s4 [0, 65535] { R10203 += 1, R10131 += 1, R10068 += 1, R10069 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10203 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R10097 && R6 = R10203 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R10097 && R58 = 0 && R59 = R10097 && R60 = 0 && R61 = R10097 && R62 = 0 && R63 = R10203 && R64 = 0 && R65 = R10203 && R66 = 0 && R67 = R10203 && R10074 = 0 && R10075 = R10097 && R10076 = 0 && R10077 = R10097 && R10078 = 0 && R10079 = R10097 && R10080 = 0 && R10081 = R10097 && R10082 = 0 && R10083 = R10097 && R10084 = 0 && R10085 = R10097 && R10086 = 0 && R10087 = R10097 && R10088 = 0 && R10089 = R10097 && R10090 = 0 && R10091 = R10097 && R10092 = 0 && R10093 = R10097 && R10094 = 0 && R10095 = R10097 && R10096 = 0 && R10098 = 0 && R10099 = R10203 && R10100 = 0 && R10101 = R10203 && R10102 = 0 && R10103 = R10203 && R10104 = 0 && R10105 = R10203 && R10106 = 0 && R10107 = R10203 && R10108 = 0 && R10109 = R10203 && R10112 = 0 && R10113 = 0 && R10122 = 0 && R10123 = 0 && R10124 = 0 && R10125 = 0 && R10126 = 0 && R10127 = 0 && R10132 = 10 && R10133 = R10203 && R10134 = 10 && R10135 = R10203 && R10136 = 10 && R10137 = R10203 && R10138 = 10 && R10139 = R10203 && R10140 = 10 && R10141 = R10203 && R10142 = 10 && R10143 = R10203 && R10144 = 10 && R10145 = R10203 && R10146 = 10 && R10147 = R10203 && R10148 = 10 && R10149 = R10203 && R10150 = 10 && R10151 = R10203 && R10152 = 10 && R10153 = R10203 && R10154 = 10 && R10155 = R10203 && R10156 = 10 && R10157 = R10203 && R10158 = 10 && R10159 = R10203 && R10160 = 10 && R10161 = R10203 && R10162 = 10 && R10163 = R10203 && R10164 = 10 && R10165 = R10203 && R10166 = 10 && R10167 = R10203 && R10168 = 10 && R10169 = R10203 && R10170 = 10 && R10171 = R10203 && R10172 = 10 && R10173 = R10203 && R10174 = 10 && R10175 = R10203 && R10176 = 10 && R10177 = R10203 && R10178 = 10 && R10179 = R10203 && R10180 = 10 && R10181 = R10203 && R10182 = 10 && R10183 = R10203 && R10184 = 10 && R10185 = R10203 && R10186 = 10 && R10187 = R10203 && R10188 = 10 && R10189 = R10203 && R10190 = 10 && R10191 = R10203 && R10192 = 10 && R10193 = R10203 && R10194 = 10 && R10195 = R10203 && R10196 = 10 && R10197 = R10203 && R10198 = 10 && R10199 = R10203 && R10200 = 10 && R10201 = R10203 && R10202 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8689 + R8686 + R10073 + R10070 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R10097 && 9 < R10203 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R8687 + R8684 = 0 && R8688 + R8685 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R8687 + R8684 != 0 || R407 + R406 + -1*R8688 + -1*R8685 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R10110 = 0 && R10111 = 0)) && (R34 = 0 || (R10114 = 0 && R10115 = 0)) && (R34 = 0 || (R10116 = 0 && R10117 = 0)) && (R34 = 0 || (R10118 = 0 && R10119 = 0)) && (R34 = 0 || (R10120 = 0 && R10121 = 0)) && (R34 = 0 || (R10128 = 0 && R10129 = 0)) && (R34 = 0 || (R10130 = 0 && R10131 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R8687 + R8684 = 0 || R407 + R406 < 1) && (R10067 + R10064 = 0 || (R10065 + R10062 = 0 && R10066 + R10063 = 0)) && (R10067 + R10064 = 0 || (R10071 + R10068 = 0 && R10072 + R10069 = 0));
// End of Parikh automata intersection problem
