// Parikh automata intersection problem, generated by OSTRICH+
counter int R10062, R10063, R10064, R10065, R10066, R10067, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R10245, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10262, R10263, R10264, R10265, R10266, R10267, R10268, R10269, R10270, R10271, R10272, R10273, R10274, R10275, R10276, R10277, R10278, R10279, R10280, R10281, R10282, R10283, R10284, R10285, R10286, R10287, R10288, R10289, R10290, R10291, R10292, R10293, R10294, R10295, R10296, R10297, R10298, R10299, R10300, R10301, R10302, R10303, R10304, R10305, R10306, R10307, R10308, R10309, R10310, R10311, R10312, R10313, R10314, R10315, R10316, R10317, R10318, R10319, R10320, R10321, R10322, R10323, R10324, R10325, R10326, R10327, R10328, R10329, R10330, R10331, R10332, R10333, R10334, R10335, R10336, R10337, R10338, R10339, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R8684, R8685, R8686, R8687, R8688, R8689;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R10235 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R10234 += 1, R10235 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10235 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R10237 += 1 };
  s0 -> s0 [0, 65535] { R10236 += 1, R10237 += 1 };
  s0 -> s2 [0, 65535] { R10237 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R10237 += 1 };
  s0 -> s1 [66, 65535] { R10237 += 1 };
  s1 -> s1 [0, 64] { R10237 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10237 += 1 };
  s1 -> s1 [66, 65535] { R10237 += 1 };
  s2 -> s1 [0, 64] { R10237 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10237 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R10237 += 1 };
  s2 -> s1 [66, 65535] { R10237 += 1 };
  s3 -> s3 [0, 65535] { R10237 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10238 += 1, R10239 += 1 };
  s0 -> s1 [0, 65535] { R10239 += 1, R69 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R10239 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R10239 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535] { R10239 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10239 += 1, R69 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R10239 += 1, R68 += 1, R69 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10239 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10241 += 1 };
  s0 -> s0 [0, 65535] { R10240 += 1, R10241 += 1 };
  s1 -> s1 [0, 65535] { R10241 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R10242 += 1, R10243 += 1 };
  s0 -> s1 [0, 65535] { R10243 += 1, R84 += 1, R85 += 1 };
  s0 -> s2 [0, 65535] { R10243 += 1, R85 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R10243 += 1, R84 += 1, R85 += 1 };
  s1 -> s2 [0, 65535] { R10243 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10243 += 1 };
  s2 -> s2 [0, 65535] { R10243 += 1, R85 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10243 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R10244 += 1, R10245 += 1 };
  s0 -> s1 [0, 65535] { R10245 += 1 };
  s1 -> s1 [0, 65535] { R10245 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R10269 += 1 };
  s0 -> s0 [0, 65535] { R10268 += 1, R10269 += 1 };
  s0 -> s1 [45, 45] { R10269 += 1 };
  s0 -> s2 [46, 46] { R10269 += 1 };
  s0 -> s1 [48, 62] { R10269 += 1 };
  s0 -> s3 [65, 65] { R10269 += 1 };
  s0 -> s1 [66, 65535] { R10269 += 1 };
  s1 -> s1 [0, 43] { R10269 += 1 };
  s1 -> s1 [45, 45] { R10269 += 1 };
  s1 -> s2 [46, 46] { R10269 += 1 };
  s1 -> s1 [48, 62] { R10269 += 1 };
  s1 -> s3 [65, 65] { R10269 += 1 };
  s1 -> s1 [66, 65535] { R10269 += 1 };
  s2 -> s1 [0, 43] { R10269 += 1 };
  s2 -> s1 [45, 45] { R10269 += 1 };
  s2 -> s2 [46, 46] { R10269 += 1 };
  s2 -> s1 [48, 62] { R10269 += 1 };
  s2 -> s3 [65, 65] { R10269 += 1 };
  s2 -> s1 [66, 114] { R10269 += 1 };
  s2 -> s8 [115, 115] { R10269 += 1 };
  s2 -> s1 [116, 65535] { R10269 += 1 };
  s3 -> s3 [0, 43] { R10269 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10269 += 1 };
  s3 -> s4 [46, 46] { R10269 += 1 };
  s3 -> s3 [48, 62] { R10269 += 1 };
  s3 -> s3 [65, 65535] { R10269 += 1 };
  s4 -> s3 [0, 43] { R10269 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10269 += 1 };
  s4 -> s4 [46, 46] { R10269 += 1 };
  s4 -> s3 [48, 62] { R10269 += 1 };
  s4 -> s3 [65, 114] { R10269 += 1 };
  s4 -> s5 [115, 115] { R10269 += 1 };
  s4 -> s3 [116, 65535] { R10269 += 1 };
  s5 -> s3 [0, 43] { R10269 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10269 += 1 };
  s5 -> s4 [46, 46] { R10269 += 1 };
  s5 -> s3 [48, 62] { R10269 += 1 };
  s5 -> s3 [65, 110] { R10269 += 1 };
  s5 -> s6 [111, 111] { R10269 += 1 };
  s5 -> s3 [112, 65535] { R10269 += 1 };
  s6 -> s3 [0, 43] { R10269 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10269 += 1 };
  s6 -> s4 [46, 46] { R10269 += 1 };
  s6 -> s3 [48, 62] { R10269 += 1 };
  s6 -> s3 [65, 98] { R10269 += 1 };
  s6 -> s7 [99, 99] { R10269 += 1 };
  s6 -> s3 [100, 65535] { R10269 += 1 };
  s7 -> s3 [0, 43] { R10269 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10269 += 1 };
  s7 -> s4 [46, 46] { R10269 += 1 };
  s7 -> s3 [48, 62] { R10269 += 1 };
  s7 -> s3 [65, 106] { R10269 += 1 };
  s7 -> s3 [108, 65535] { R10269 += 1 };
  s8 -> s1 [0, 43] { R10269 += 1 };
  s8 -> s1 [45, 45] { R10269 += 1 };
  s8 -> s2 [46, 46] { R10269 += 1 };
  s8 -> s1 [48, 62] { R10269 += 1 };
  s8 -> s3 [65, 65] { R10269 += 1 };
  s8 -> s1 [66, 110] { R10269 += 1 };
  s8 -> s9 [111, 111] { R10269 += 1 };
  s8 -> s1 [112, 65535] { R10269 += 1 };
  s9 -> s1 [0, 43] { R10269 += 1 };
  s9 -> s1 [45, 45] { R10269 += 1 };
  s9 -> s2 [46, 46] { R10269 += 1 };
  s9 -> s1 [48, 62] { R10269 += 1 };
  s9 -> s3 [65, 65] { R10269 += 1 };
  s9 -> s1 [66, 98] { R10269 += 1 };
  s9 -> s10 [99, 99] { R10269 += 1 };
  s9 -> s1 [100, 65535] { R10269 += 1 };
  s10 -> s1 [0, 43] { R10269 += 1 };
  s10 -> s1 [45, 45] { R10269 += 1 };
  s10 -> s2 [46, 46] { R10269 += 1 };
  s10 -> s1 [48, 62] { R10269 += 1 };
  s10 -> s3 [65, 65] { R10269 += 1 };
  s10 -> s1 [66, 106] { R10269 += 1 };
  s10 -> s1 [108, 65535] { R10269 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10271 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10270 += 1, R10271 += 1 };
  s1 -> s1 [0, 65535] { R10271 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R10273 += 1 };
  s0 -> s2 [0, 65535] { R10273 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10272 += 1, R10273 += 1 };
  s0 -> s3 [58, 58] { R10273 += 1 };
  s0 -> s1 [59, 65535] { R10273 += 1 };
  s1 -> s1 [0, 57] { R10273 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10273 += 1 };
  s1 -> s1 [59, 65535] { R10273 += 1 };
  s2 -> s1 [0, 57] { R10273 += 1 };
  s2 -> s2 [0, 65535] { R10273 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R10273 += 1 };
  s2 -> s1 [59, 65535] { R10273 += 1 };
  s3 -> s3 [0, 65535] { R10273 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R10275 += 1 };
  s0 -> s2 [0, 65535] { R10275 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R10274 += 1, R10275 += 1 };
  s0 -> s3 [43, 43] { R10275 += 1 };
  s0 -> s1 [44, 65535] { R10275 += 1 };
  s1 -> s1 [0, 42] { R10275 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R10275 += 1 };
  s1 -> s1 [44, 65535] { R10275 += 1 };
  s2 -> s1 [0, 42] { R10275 += 1 };
  s2 -> s2 [0, 65535] { R10275 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R10275 += 1 };
  s2 -> s1 [44, 65535] { R10275 += 1 };
  s3 -> s3 [0, 65535] { R10275 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R10277 += 1 };
  s0 -> s0 [0, 65535] { R10276 += 1, R10277 += 1 };
  s0 -> s2 [0, 65535] { R10277 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R10277 += 1 };
  s0 -> s1 [66, 65535] { R10277 += 1 };
  s1 -> s1 [0, 64] { R10277 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10277 += 1 };
  s1 -> s1 [66, 65535] { R10277 += 1 };
  s2 -> s1 [0, 64] { R10277 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10277 += 1, R18 += 1 };
  s2 -> s3 [65, 65] { R10277 += 1 };
  s2 -> s1 [66, 65535] { R10277 += 1 };
  s3 -> s3 [0, 65535] { R10277 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R10279 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R10279 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R10278 += 1, R10279 += 1 };
  s0 -> s3 [91, 91] { R10279 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R10279 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10279 += 1, R39 += 1 };
  s1 -> s5 [0, 65535] { R10279 += 1 };
  s2 -> s1 [0, 90] { R10279 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10279 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R10279 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R10279 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R10279 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10279 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10281 += 1, R40 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R10280 += 1, R10281 += 1 };
  s0 -> s2 [0, 65535] { R10281 += 1, R41 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R10281 += 1, R40 += 1, R41 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10281 += 1, R41 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10281 += 1 };
  s2 -> s2 [0, 65535] { R10281 += 1, R41 += 1, R7 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10281 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10282 += 1, R10283 += 1 };
  s0 -> s1 [0, 65535] { R10283 += 1, R57 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R10283 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R10283 += 1, R57 += 1, R31 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10283 += 1 };
  s2 -> s1 [0, 65535] { R10283 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10283 += 1, R56 += 1, R57 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10283 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R10285 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R10285 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R10284 += 1, R10285 += 1 };
  s0 -> s3 [108, 108] { R10285 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R10285 += 1, R59 += 1 };
  s1 -> s1 [0, 65535] { R10285 += 1, R59 += 1 };
  s1 -> s13 [0, 65535] { R10285 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 107] { R10285 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R10285 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [108, 108] { R10285 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R10285 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R10285 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10285 += 1 };
  s3 -> s5 [111, 111] { R10285 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R10285 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10285 += 1, R59 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10285 += 1 };
  s5 -> s6 [99, 99] { R10285 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R10285 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R10285 += 1, R59 += 1 };
  s6 -> s6 [0, 65535] { R10285 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s7 [97, 97] { R10285 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R10285 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R10285 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R10285 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R10285 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R10285 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R10285 += 1, R59 += 1 };
  s8 -> s8 [0, 65535] { R10285 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s9 [104, 104] { R10285 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R10285 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R10285 += 1, R59 += 1 };
  s9 -> s9 [0, 65535] { R10285 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s10 [111, 111] { R10285 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R10285 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R10285 += 1, R59 += 1 };
  s10 -> s10 [0, 65535] { R10285 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s11 [115, 115] { R10285 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R10285 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R10285 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10285 += 1 };
  s11 -> s12 [116, 116] { R10285 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R10285 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R10285 += 1, R59 += 1 };
  s13 -> s13 [0, 65535] { R10285 += 1 };
  s13 -> s4 [0, 65535];
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10286 += 1, R10287 += 1 };
  s0 -> s1 [0, 65535] { R10287 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R10287 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10287 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R10287 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10287 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10287 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10287 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10289 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R10289 += 1, R75 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R10288 += 1, R10289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10289 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R10289 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10289 += 1 };
  s2 -> s2 [0, 65535] { R10289 += 1, R75 += 1, R33 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10289 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10290 += 1, R10291 += 1 };
  s0 -> s1 [0, 65535] { R10291 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10291 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R10293 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R10292 += 1, R10293 += 1 };
  s0 -> s2 [0, 65535] { R10293 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R10293 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R10293 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R10293 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R10293 += 1, R77 += 1, R42 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10293 += 1 };
  s1 -> s3 [43, 43] { R10293 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R10293 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R10293 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R10293 += 1, R77 += 1, R42 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10293 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [43, 43] { R10293 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R10293 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R10293 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R10293 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10293 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10293 += 1, R77 += 1, R42 += 1 };
  s5 -> s5 [0, 65535] { R10293 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10295 += 1, R10211 += 1 };
  s0 -> s0 [0, 65535] { R10294 += 1, R10295 += 1 };
  s0 -> s2 [0, 65535] { R10295 += 1, R10210 += 1, R10211 += 1 };
  s0 -> s1 [66, 65535] { R10295 += 1, R10211 += 1 };
  s1 -> s1 [0, 64] { R10295 += 1, R10211 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10295 += 1 };
  s1 -> s1 [66, 65535] { R10295 += 1, R10211 += 1 };
  s2 -> s1 [0, 64] { R10295 += 1, R10211 += 1 };
  s2 -> s2 [0, 65535] { R10295 += 1, R10210 += 1, R10211 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10295 += 1, R10211 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10297 += 1, R10213 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R10297 += 1, R10212 += 1, R10213 += 1 };
  s0 -> s0 [0, 65535] { R10296 += 1, R10297 += 1 };
  s1 -> s1 [0, 65535] { R10297 += 1, R10213 += 1, R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10297 += 1 };
  s2 -> s1 [0, 65535] { R10297 += 1, R10213 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R10297 += 1, R10212 += 1, R10213 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10297 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R10299 += 1, R10215 += 1 };
  s0 -> s2 [0, 65535] { R10299 += 1, R10214 += 1, R10215 += 1 };
  s0 -> s0 [0, 65535] { R10298 += 1, R10299 += 1 };
  s0 -> s1 [80, 65535] { R10299 += 1, R10215 += 1 };
  s1 -> s1 [0, 65] { R10299 += 1, R10215 += 1 };
  s1 -> s1 [0, 65535] { R10299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10299 += 1, R10215 += 1 };
  s2 -> s1 [0, 65] { R10299 += 1, R10215 += 1 };
  s2 -> s2 [0, 65535] { R10299 += 1, R10214 += 1, R10215 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10299 += 1, R10215 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s0 [0, 65535] { R10300 += 1, R10301 += 1 };
  s0 -> s1 [0, 65535] { R10301 += 1, R10216 += 1, R10217 += 1 };
  s0 -> s2 [0, 65535] { R10301 += 1, R10217 += 1, R407 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10301 += 1, R10216 += 1, R10217 += 1 };
  s1 -> s2 [0, 65535] { R10301 += 1, R10217 += 1, R407 += 1 };
  s2 -> s3 [0, 65535] { R10301 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10301 += 1, R10217 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R10301 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R10303 += 1, R10219 += 1 };
  s0 -> s2 [0, 65535] { R10303 += 1, R10218 += 1, R10219 += 1 };
  s0 -> s3 [0, 65535] { R10303 += 1, R10219 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R10302 += 1, R10303 += 1 };
  s0 -> s1 [81, 65535] { R10303 += 1, R10219 += 1 };
  s1 -> s1 [0, 79] { R10303 += 1, R10219 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10303 += 1 };
  s1 -> s1 [81, 65535] { R10303 += 1, R10219 += 1 };
  s2 -> s1 [0, 79] { R10303 += 1, R10219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10303 += 1, R10218 += 1, R10219 += 1 };
  s2 -> s3 [0, 65535] { R10303 += 1, R10219 += 1, R409 += 1 };
  s2 -> s1 [81, 65535] { R10303 += 1, R10219 += 1 };
  s3 -> s1 [0, 79] { R10303 += 1, R10219 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10303 += 1 };
  s3 -> s3 [0, 65535] { R10303 += 1, R10219 += 1, R409 += 1 };
  s3 -> s1 [81, 65535] { R10303 += 1, R10219 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10303 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R10305 += 1, R10221 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R10304 += 1, R10305 += 1 };
  s0 -> s2 [0, 65535] { R10305 += 1, R10220 += 1, R10221 += 1 };
  s0 -> s3 [0, 65535] { R10305 += 1, R10221 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R10305 += 1, R10221 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R10305 += 1, R10221 += 1, R413 += 1 };
  s1 -> s4 [0, 65535] { R10305 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10305 += 1, R10221 += 1 };
  s1 -> s1 [81, 65535] { R10305 += 1, R10221 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R10305 += 1, R10221 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R10305 += 1, R10220 += 1, R10221 += 1 };
  s2 -> s3 [0, 65535] { R10305 += 1, R10221 += 1, R412 += 1, R413 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R10305 += 1, R10221 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R10305 += 1, R10221 += 1, R413 += 1 };
  s3 -> s4 [0, 65535] { R10305 += 1 };
  s3 -> s3 [0, 65535] { R10305 += 1, R10221 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R10305 += 1, R10221 += 1, R413 += 1 };
  s4 -> s4 [0, 65535] { R10305 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s0 [0, 65535] { R10306 += 1, R10307 += 1 };
  s0 -> s1 [0, 65535] { R10307 += 1, R10222 += 1, R10223 += 1 };
  s0 -> s2 [0, 65535] { R10307 += 1, R10223 += 1, R418 += 1, R419 += 1 };
  s0 -> s3 [0, 65535] { R10307 += 1, R10223 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R10307 += 1, R10222 += 1, R10223 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10307 += 1, R10223 += 1, R418 += 1, R419 += 1 };
  s1 -> s3 [0, 65535] { R10307 += 1, R10223 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10307 += 1, R10223 += 1 };
  s2 -> s2 [0, 65535] { R10307 += 1, R10223 += 1, R418 += 1, R419 += 1 };
  s2 -> s5 [0, 65535] { R10307 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10307 += 1, R10223 += 1, R418 += 1, R419 += 1 };
  s3 -> s3 [0, 65535] { R10307 += 1, R10223 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535] { R10307 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10307 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10307 += 1, R10223 += 1 };
  s6 -> s5 [0, 65535] { R10307 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R10309 += 1, R10225 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R10309 += 1, R10225 += 1 };
  s0 -> s2 [0, 65535] { R10309 += 1, R10224 += 1, R10225 += 1 };
  s0 -> s0 [0, 65535] { R10308 += 1, R10309 += 1 };
  s0 -> s1 [91, 65535] { R10309 += 1, R10225 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R10309 += 1, R10225 += 1, R6619 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10309 += 1, R10225 += 1 };
  s1 -> s4 [0, 65535] { R10309 += 1 };
  s1 -> s1 [91, 65535] { R10309 += 1, R10225 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R10309 += 1, R10225 += 1, R6619 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10309 += 1, R10225 += 1 };
  s2 -> s2 [0, 65535] { R10309 += 1, R10224 += 1, R10225 += 1 };
  s2 -> s1 [91, 65535] { R10309 += 1, R10225 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10309 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R10311 += 1, R10226 += 1, R10227 += 1 };
  s0 -> s2 [0, 65535] { R10311 += 1, R10227 += 1, R8688 += 1, R8689 += 1 };
  s0 -> s3 [0, 65535] { R10311 += 1, R10227 += 1 };
  s0 -> s0 [0, 65535] { R10310 += 1, R10311 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10311 += 1, R10226 += 1, R10227 += 1 };
  s1 -> s2 [0, 65535] { R10311 += 1, R10227 += 1, R8688 += 1, R8689 += 1 };
  s1 -> s3 [0, 65535] { R10311 += 1, R10227 += 1 };
  s2 -> s4 [0, 65535] { R10311 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10311 += 1, R10227 += 1, R8688 += 1, R8689 += 1 };
  s2 -> s3 [0, 65535] { R10311 += 1, R10227 += 1 };
  s3 -> s4 [0, 65535] { R10311 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10311 += 1, R10227 += 1 };
  s4 -> s4 [0, 65535] { R10311 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 65535] { R10313 += 1, R10229 += 1 };
  s0 -> s2 [0, 65535] { R10313 += 1, R10228 += 1, R10229 += 1 };
  s0 -> s0 [0, 65535] { R10312 += 1, R10313 += 1 };
  s1 -> s1 [0, 65535] { R10313 += 1, R10229 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10313 += 1 };
  s2 -> s1 [0, 65535] { R10313 += 1, R10229 += 1 };
  s2 -> s2 [0, 65535] { R10313 += 1, R10228 += 1, R10229 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10313 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R10315 += 1, R10230 += 1, R10231 += 1 };
  s0 -> s0 [0, 65535] { R10314 += 1, R10315 += 1 };
  s0 -> s2 [0, 65535] { R10315 += 1, R10231 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10315 += 1, R10230 += 1, R10231 += 1 };
  s1 -> s2 [0, 65535] { R10315 += 1, R10231 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10315 += 1 };
  s2 -> s2 [0, 65535] { R10315 += 1, R10231 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10315 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 79] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s0 -> s0 [0, 65535] { R10316 += 1, R10317 += 1 };
  s0 -> s1 [0, 65535] { R10317 += 1, R10233 += 1 };
  s0 -> s2 [0, 65535] { R10317 += 1, R10232 += 1, R10233 += 1 };
  s0 -> s3 [80, 80] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s0 -> s4 [80, 80] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s0 -> s1 [81, 65535] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s1 -> s1 [0, 79] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s1 -> s1 [0, 65535] { R10317 += 1, R10233 += 1 };
  s1 -> s5 [0, 65535] { R10317 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [80, 80] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s1 -> s4 [80, 80] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s1 -> s1 [81, 65535] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s2 -> s1 [0, 79] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s2 -> s1 [0, 65535] { R10317 += 1, R10233 += 1 };
  s2 -> s2 [0, 65535] { R10317 += 1, R10232 += 1, R10233 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [80, 80] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s2 -> s4 [80, 80] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s2 -> s1 [81, 65535] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s3 -> s3 [0, 65535] { R10317 += 1, R10233 += 1 };
  s3 -> s5 [0, 65535] { R10317 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R10317 += 1 };
  s4 -> s6 [0, 65535] { R10317 += 1, R10233 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R10317 += 1, R10233 += 1, R10208 += 1, R10209 += 1 };
  s5 -> s5 [0, 65535] { R10317 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R10317 += 1 };
  s6 -> s6 [0, 65535] { R10317 += 1, R10233 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10319 += 1, R10247 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10318 += 1, R10319 += 1 };
  s0 -> s2 [0, 65535] { R10319 += 1, R10246 += 1, R10247 += 1 };
  s1 -> s1 [0, 65535] { R10319 += 1, R10247 += 1, R34 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10319 += 1 };
  s2 -> s1 [0, 65535] { R10319 += 1, R10247 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10319 += 1, R10246 += 1, R10247 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10319 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10321 += 1, R10249 += 1 };
  s0 -> s0 [0, 65535] { R10320 += 1, R10321 += 1 };
  s0 -> s2 [0, 65535] { R10321 += 1, R10248 += 1, R10249 += 1 };
  s0 -> s3 [65, 65] { R10321 += 1, R10249 += 1 };
  s0 -> s4 [65, 65] { R10321 += 1, R10249 += 1 };
  s0 -> s5 [80, 80] { R10321 += 1, R10249 += 1 };
  s0 -> s1 [81, 65535] { R10321 += 1, R10249 += 1 };
  s1 -> s1 [0, 64] { R10321 += 1, R10249 += 1 };
  s1 -> s3 [65, 65] { R10321 += 1, R10249 += 1 };
  s1 -> s4 [65, 65] { R10321 += 1, R10249 += 1 };
  s1 -> s5 [80, 80] { R10321 += 1, R10249 += 1 };
  s1 -> s1 [81, 65535] { R10321 += 1, R10249 += 1 };
  s2 -> s1 [0, 64] { R10321 += 1, R10249 += 1 };
  s2 -> s2 [0, 65535] { R10321 += 1, R10248 += 1, R10249 += 1 };
  s2 -> s3 [65, 65] { R10321 += 1, R10249 += 1 };
  s2 -> s4 [65, 65] { R10321 += 1, R10249 += 1 };
  s2 -> s5 [80, 80] { R10321 += 1, R10249 += 1 };
  s2 -> s1 [81, 65535] { R10321 += 1, R10249 += 1 };
  s4 -> s4 [0, 65] { R10321 += 1, R10249 += 1 };
  s4 -> s7 [80, 80] { R10321 += 1, R10249 += 1 };
  s4 -> s4 [81, 65535] { R10321 += 1, R10249 += 1 };
  s5 -> s5 [0, 64] { R10321 += 1, R10249 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10321 += 1 };
  s5 -> s7 [65, 65] { R10321 += 1, R10249 += 1 };
  s5 -> s8 [65, 65] { R10321 += 1, R10249 += 1 };
  s5 -> s5 [80, 65535] { R10321 += 1, R10249 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10321 += 1, R10249 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10321 += 1 };
  s7 -> s7 [80, 65535] { R10321 += 1, R10249 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10321 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R10323 += 1, R10251 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R10322 += 1, R10323 += 1 };
  s0 -> s2 [0, 65535] { R10323 += 1, R10250 += 1, R10251 += 1 };
  s0 -> s3 [65, 65] { R10323 += 1, R10251 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R10323 += 1, R10251 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R10323 += 1, R10251 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R10323 += 1, R10251 += 1, R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10323 += 1 };
  s1 -> s3 [65, 65] { R10323 += 1, R10251 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R10323 += 1, R10251 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R10323 += 1, R10251 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R10323 += 1, R10251 += 1, R406 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10323 += 1, R10250 += 1, R10251 += 1 };
  s2 -> s3 [65, 65] { R10323 += 1, R10251 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R10323 += 1, R10251 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R10323 += 1, R10251 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10323 += 1, R10251 += 1, R406 += 1 };
  s3 -> s6 [0, 65535] { R10323 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10323 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10323 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R10325 += 1, R10253 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R10325 += 1, R10252 += 1, R10253 += 1 };
  s0 -> s0 [0, 65535] { R10324 += 1, R10325 += 1 };
  s0 -> s3 [65, 65] { R10325 += 1, R10253 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R10325 += 1, R10253 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R10325 += 1, R10253 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R10325 += 1, R10253 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R10325 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10325 += 1, R10253 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R10325 += 1, R10253 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R10325 += 1, R10253 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R10325 += 1, R10253 += 1, R408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10325 += 1, R10252 += 1, R10253 += 1 };
  s2 -> s3 [65, 65] { R10325 += 1, R10253 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R10325 += 1, R10253 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R10325 += 1, R10253 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R10325 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10325 += 1, R10253 += 1, R408 += 1 };
  s4 -> s6 [0, 65535] { R10325 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10325 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s0 -> s0 [0, 65535] { R10326 += 1, R10327 += 1 };
  s0 -> s2 [0, 65535] { R10327 += 1, R10254 += 1, R10255 += 1 };
  s0 -> s3 [65, 65] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10327 += 1 };
  s1 -> s3 [65, 65] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R10327 += 1, R10254 += 1, R10255 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s3 -> s3 [0, 65535] { R10327 += 1, R10255 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R10327 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10327 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10327 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R10329 += 1, R10256 += 1, R10257 += 1 };
  s0 -> s0 [0, 65535] { R10328 += 1, R10329 += 1 };
  s0 -> s3 [65, 65] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R10329 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R10329 += 1, R10256 += 1, R10257 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R10329 += 1, R10257 += 1, R414 += 1, R415 += 1 };
  s3 -> s6 [0, 65535] { R10329 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10329 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10329 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s0 -> s0 [0, 65535] { R10330 += 1, R10331 += 1 };
  s0 -> s3 [0, 65535] { R10331 += 1, R10258 += 1, R10259 += 1 };
  s0 -> s4 [65, 65] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s0 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s0 -> s1 [66, 65535] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [91, 107] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s0 -> s2 [109, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s4 [65, 65] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s5 [65, 65] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [91, 107] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s8 [108, 108] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s1 -> s2 [109, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R10331 += 1 };
  s2 -> s6 [65, 65] { R10331 += 1, R10259 += 1 };
  s2 -> s7 [65, 65] { R10331 += 1, R10259 += 1 };
  s2 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R10331 += 1, R10259 += 1 };
  s2 -> s2 [91, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R10331 += 1, R10258 += 1, R10259 += 1 };
  s3 -> s4 [65, 65] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s1 [66, 65535] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [91, 107] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s3 -> s2 [109, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s4 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s4 -> s4 [0, 65535] { R10331 += 1, R10259 += 1, R6616 += 1, R6617 += 1 };
  s4 -> s7 [91, 107] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s4 -> s9 [108, 108] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s4 -> s7 [109, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s6 -> s34 [0, 65535];
  s6 -> s6 [0, 65535] { R10331 += 1 };
  s7 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s7 -> s34 [0, 65535];
  s7 -> s35 [0, 65535] { R10331 += 1 };
  s7 -> s7 [0, 65535] { R10331 += 1, R10259 += 1 };
  s7 -> s7 [91, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s8 [0, 64] { R10331 += 1, R10259 += 1 };
  s8 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s9 [65, 65] { R10331 += 1, R10259 += 1 };
  s8 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s10 [65, 65] { R10331 += 1, R10259 += 1 };
  s8 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R10331 += 1, R10259 += 1 };
  s8 -> s2 [91, 110] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s8 -> s2 [112, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s9 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s9 -> s9 [0, 65535] { R10331 += 1, R10259 += 1 };
  s9 -> s7 [91, 110] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s9 -> s13 [111, 111] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s9 -> s7 [112, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R10331 += 1, R10259 += 1 };
  s11 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s12 [65, 65] { R10331 += 1, R10259 += 1 };
  s11 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s13 [65, 65] { R10331 += 1, R10259 += 1 };
  s11 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R10331 += 1, R10259 += 1 };
  s11 -> s2 [91, 98] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s11 -> s2 [100, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s13 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s13 -> s13 [0, 65535] { R10331 += 1, R10259 += 1 };
  s13 -> s7 [91, 98] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s13 -> s18 [99, 99] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s13 -> s7 [100, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R10331 += 1, R10259 += 1 };
  s14 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s15 [65, 65] { R10331 += 1, R10259 += 1 };
  s14 -> s16 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s17 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s18 [65, 65] { R10331 += 1, R10259 += 1 };
  s14 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R10331 += 1, R10259 += 1 };
  s14 -> s2 [91, 96] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s14 -> s2 [98, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s16 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s16 -> s16 [0, 65535] { R10331 += 1, R10259 += 1 };
  s16 -> s7 [91, 107] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s16 -> s21 [108, 108] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s16 -> s7 [109, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s18 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s18 -> s18 [0, 65535] { R10331 += 1, R10259 += 1 };
  s18 -> s7 [91, 96] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s18 -> s16 [97, 97] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s18 -> s7 [98, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R10331 += 1, R10259 += 1 };
  s19 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s16 [65, 65] { R10331 += 1, R10259 += 1 };
  s19 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s17 [65, 65] { R10331 += 1, R10259 += 1 };
  s19 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R10331 += 1, R10259 += 1 };
  s19 -> s2 [91, 107] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s19 -> s2 [109, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R10331 += 1, R10259 += 1 };
  s20 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R10331 += 1, R10259 += 1 };
  s20 -> s22 [65, 65] { R10331 += 1, R10259 += 1 };
  s20 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R10331 += 1, R10259 += 1 };
  s20 -> s2 [91, 103] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s20 -> s2 [105, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s21 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s21 -> s21 [0, 65535] { R10331 += 1, R10259 += 1 };
  s21 -> s7 [91, 103] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s21 -> s24 [104, 104] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s21 -> s7 [105, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R10331 += 1, R10259 += 1 };
  s23 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R10331 += 1, R10259 += 1 };
  s23 -> s25 [65, 65] { R10331 += 1, R10259 += 1 };
  s23 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R10331 += 1, R10259 += 1 };
  s23 -> s2 [91, 110] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s23 -> s2 [112, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s24 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s24 -> s24 [0, 65535] { R10331 += 1, R10259 += 1 };
  s24 -> s7 [91, 110] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s24 -> s28 [111, 111] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s24 -> s7 [112, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R10331 += 1, R10259 += 1 };
  s26 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s27 [65, 65] { R10331 += 1, R10259 += 1 };
  s26 -> s28 [65, 65] { R10331 += 1, R10259 += 1 };
  s26 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R10331 += 1, R10259 += 1 };
  s26 -> s2 [91, 114] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s26 -> s2 [116, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s28 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s28 -> s28 [0, 65535] { R10331 += 1, R10259 += 1 };
  s28 -> s7 [91, 114] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s28 -> s30 [115, 115] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s28 -> s7 [116, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R10331 += 1, R10259 += 1 };
  s29 -> s30 [65, 65] { R10331 += 1, R10259 += 1 };
  s29 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s31 [65, 65] { R10331 += 1, R10259 += 1 };
  s29 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R10331 += 1, R10259 += 1 };
  s29 -> s2 [91, 115] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s29 -> s2 [117, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s30 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s30 -> s30 [0, 65535] { R10331 += 1, R10259 += 1 };
  s30 -> s7 [91, 115] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s30 -> s33 [116, 116] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s30 -> s7 [117, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s32 -> s2 [0, 64] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s32 -> s6 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s32 -> s7 [65, 65] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s32 -> s2 [66, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s32 -> s2 [91, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s33 -> s7 [0, 80] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s33 -> s7 [91, 65535] { R10331 += 1, R10259 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10331 += 1 };
  accepting s34, s2, s6, s7, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [0, 64] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s0 [0, 65535] { R10332 += 1, R10333 += 1 };
  s0 -> s3 [0, 65535] { R10333 += 1, R10260 += 1, R10261 += 1 };
  s0 -> s4 [65, 65] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s5 [65, 65] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s6 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s7 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s1 [66, 65535] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [66, 65535] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s1 -> s1 [0, 64] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R10333 += 1 };
  s1 -> s6 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s7 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s1 [66, 65535] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [0, 64] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [0, 64] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s4 [65, 65] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s5 [65, 65] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s6 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s7 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [66, 65535] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [66, 65535] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s1 [0, 64] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [0, 64] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s3 [0, 65535] { R10333 += 1, R10260 += 1, R10261 += 1 };
  s3 -> s4 [65, 65] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s5 [65, 65] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s6 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s7 [65, 65] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s1 [66, 65535] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [66, 65535] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s4 -> s4 [0, 65535] { R10333 += 1, R10261 += 1, R8684 += 1, R8685 += 1 };
  s4 -> s6 [0, 65535] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10333 += 1, R10261 += 1, R8685 += 1, R8686 += 1 };
  s6 -> s9 [0, 65535] { R10333 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10333 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10333 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s2 [0, 64] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s3 [0, 65535] { R10335 += 1, R10262 += 1, R10263 += 1 };
  s0 -> s0 [0, 65535] { R10334 += 1, R10335 += 1 };
  s0 -> s4 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s5 [65, 65] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s6 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s7 [65, 65] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s0 -> s1 [66, 65535] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s2 [66, 65535] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s1 -> s1 [0, 64] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s11 [0, 64] { R10335 += 1, R10263 += 1 };
  s1 -> s4 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s12 [65, 65] { R10335 += 1, R10263 += 1 };
  s1 -> s8 [65, 65] { R10335 += 1, R10263 += 1 };
  s1 -> s6 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s1 [66, 65535] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s1 -> s11 [66, 65535] { R10335 += 1, R10263 += 1 };
  s2 -> s1 [0, 64] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s2 [0, 64] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s2 -> s4 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s5 [65, 65] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s2 -> s6 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s7 [65, 65] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s2 -> s1 [66, 65535] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s2 -> s2 [66, 65535] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s1 [0, 64] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s2 [0, 64] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s3 [0, 65535] { R10335 += 1, R10262 += 1, R10263 += 1 };
  s3 -> s4 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s5 [65, 65] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s6 [65, 65] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s7 [65, 65] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s3 -> s1 [66, 65535] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s2 [66, 65535] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s6 -> s8 [0, 65535] { R10335 += 1, R10263 += 1 };
  s6 -> s6 [0, 65535] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s7 -> s6 [0, 65535] { R10335 += 1, R10263 += 1, R10063 += 1, R10064 += 1 };
  s7 -> s7 [0, 65535] { R10335 += 1, R10263 += 1, R10062 += 1, R10063 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10335 += 1, R10263 += 1 };
  s8 -> s10 [0, 65535] { R10335 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10335 += 1 };
  s11 -> s11 [0, 64] { R10335 += 1, R10263 += 1 };
  s11 -> s11 [0, 65535] { R10335 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R10335 += 1, R10263 += 1 };
  s11 -> s8 [65, 65] { R10335 += 1, R10263 += 1 };
  s11 -> s11 [66, 65535] { R10335 += 1, R10263 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10335 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10337 += 1, R10265 += 1 };
  s0 -> s2 [0, 65535] { R10337 += 1, R10264 += 1, R10265 += 1 };
  s0 -> s0 [0, 65535] { R10336 += 1, R10337 += 1 };
  s0 -> s3 [65, 65] { R10337 += 1, R10265 += 1 };
  s0 -> s4 [65, 65] { R10337 += 1, R10265 += 1 };
  s0 -> s1 [66, 65535] { R10337 += 1, R10265 += 1 };
  s1 -> s1 [0, 64] { R10337 += 1, R10265 += 1 };
  s1 -> s1 [0, 65535] { R10337 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10337 += 1, R10265 += 1 };
  s1 -> s4 [65, 65] { R10337 += 1, R10265 += 1 };
  s1 -> s1 [66, 65535] { R10337 += 1, R10265 += 1 };
  s2 -> s1 [0, 64] { R10337 += 1, R10265 += 1 };
  s2 -> s2 [0, 65535] { R10337 += 1, R10264 += 1, R10265 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10337 += 1, R10265 += 1 };
  s2 -> s4 [65, 65] { R10337 += 1, R10265 += 1 };
  s2 -> s1 [66, 65535] { R10337 += 1, R10265 += 1 };
  s3 -> s3 [0, 65535] { R10337 += 1, R10265 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10337 += 1 };
  s4 -> s4 [0, 65535] { R10337 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10337 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s0 -> s2 [0, 64] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s0 -> s3 [0, 65535] { R10339 += 1, R10266 += 1, R10267 += 1 };
  s0 -> s0 [0, 65535] { R10338 += 1, R10339 += 1 };
  s0 -> s4 [65, 65] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s0 -> s5 [65, 65] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s0 -> s6 [65, 65] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s0 -> s7 [65, 65] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s0 -> s1 [66, 79] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s0 -> s2 [66, 65535] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s0 -> s1 [81, 65535] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s1 -> s1 [0, 64] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s1 -> s1 [0, 65535] { R10339 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [65, 65] { R10339 += 1, R10267 += 1 };
  s1 -> s7 [65, 65] { R10339 += 1, R10267 += 1 };
  s1 -> s1 [66, 79] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s1 -> s1 [66, 65535] { R10339 += 1, R10267 += 1 };
  s1 -> s1 [81, 65535] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s2 -> s1 [0, 64] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s2 -> s2 [0, 64] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s2 -> s4 [65, 65] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s2 -> s5 [65, 65] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s2 -> s6 [65, 65] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s2 -> s7 [65, 65] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s2 -> s1 [66, 79] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s2 -> s2 [66, 65535] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s2 -> s1 [81, 65535] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s3 -> s1 [0, 64] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s3 -> s2 [0, 64] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s3 -> s3 [0, 65535] { R10339 += 1, R10266 += 1, R10267 += 1 };
  s3 -> s4 [65, 65] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s3 -> s5 [65, 65] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s3 -> s6 [65, 65] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s3 -> s7 [65, 65] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s3 -> s1 [66, 79] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s3 -> s2 [66, 65535] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s3 -> s1 [81, 65535] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s5 -> s7 [0, 79] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s5 -> s5 [0, 65535] { R10339 += 1, R10267 += 1, R10204 += 1, R10205 += 1 };
  s5 -> s7 [81, 65535] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s6 -> s6 [0, 65535] { R10339 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s7 [0, 79] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s7 -> s8 [0, 65535] { R10339 += 1 };
  s7 -> s7 [0, 65535] { R10339 += 1, R10267 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [81, 65535] { R10339 += 1, R10267 += 1, R10205 += 1, R10206 += 1 };
  s8 -> s8 [0, 65535] { R10339 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R10233 && R6 = R10339 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R10233 && R58 = 0 && R59 = R10233 && R60 = 0 && R61 = R10233 && R62 = 0 && R63 = R10339 && R64 = 0 && R65 = R10339 && R66 = 0 && R67 = R10339 && R10210 = 0 && R10211 = R10233 && R10212 = 0 && R10213 = R10233 && R10214 = 0 && R10215 = R10233 && R10216 = 0 && R10217 = R10233 && R10218 = 0 && R10219 = R10233 && R10220 = 0 && R10221 = R10233 && R10222 = 0 && R10223 = R10233 && R10224 = 0 && R10225 = R10233 && R10226 = 0 && R10227 = R10233 && R10228 = 0 && R10229 = R10233 && R10230 = 0 && R10231 = R10233 && R10232 = 0 && R10234 = 0 && R10235 = R10339 && R10236 = 0 && R10237 = R10339 && R10238 = 0 && R10239 = R10339 && R10240 = 0 && R10241 = R10339 && R10242 = 0 && R10243 = R10339 && R10244 = 0 && R10245 = R10339 && R10248 = 0 && R10249 = 0 && R10258 = 0 && R10259 = 0 && R10260 = 0 && R10261 = 0 && R10262 = 0 && R10263 = 0 && R10266 = 0 && R10267 = 0 && R10268 = 10 && R10269 = R10339 && R10270 = 10 && R10271 = R10339 && R10272 = 10 && R10273 = R10339 && R10274 = 10 && R10275 = R10339 && R10276 = 10 && R10277 = R10339 && R10278 = 10 && R10279 = R10339 && R10280 = 10 && R10281 = R10339 && R10282 = 10 && R10283 = R10339 && R10284 = 10 && R10285 = R10339 && R10286 = 10 && R10287 = R10339 && R10288 = 10 && R10289 = R10339 && R10290 = 10 && R10291 = R10339 && R10292 = 10 && R10293 = R10339 && R10294 = 10 && R10295 = R10339 && R10296 = 10 && R10297 = R10339 && R10298 = 10 && R10299 = R10339 && R10300 = 10 && R10301 = R10339 && R10302 = 10 && R10303 = R10339 && R10304 = 10 && R10305 = R10339 && R10306 = 10 && R10307 = R10339 && R10308 = 10 && R10309 = R10339 && R10310 = 10 && R10311 = R10339 && R10312 = 10 && R10313 = R10339 && R10314 = 10 && R10315 = R10339 && R10316 = 10 && R10317 = R10339 && R10318 = 10 && R10319 = R10339 && R10320 = 10 && R10321 = R10339 && R10322 = 10 && R10323 = R10339 && R10324 = 10 && R10325 = R10339 && R10326 = 10 && R10327 = R10339 && R10328 = 10 && R10329 = R10339 && R10330 = 10 && R10331 = R10339 && R10332 = 10 && R10333 = R10339 && R10334 = 10 && R10335 = R10339 && R10336 = 10 && R10337 = R10339 && R10338 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8689 + R8686 + R10209 + R10206 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R10233 && 9 < R10339 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R8687 + R8684 = 0 && R8688 + R8685 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R8687 + R8684 != 0 || R407 + R406 + -1*R8688 + -1*R8685 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R10246 = 0 && R10247 = 0)) && (R34 = 0 || (R10250 = 0 && R10251 = 0)) && (R34 = 0 || (R10252 = 0 && R10253 = 0)) && (R34 = 0 || (R10254 = 0 && R10255 = 0)) && (R34 = 0 || (R10256 = 0 && R10257 = 0)) && (R34 = 0 || (R10264 = 0 && R10265 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R8687 + R8684 = 0 || R407 + R406 < 1) && (R10067 + R10064 = 0 || (R10065 + R10062 = 0 && R10066 + R10063 = 0)) && (R10067 + R10064 = 0 || (R10207 + R10204 = 0 && R10208 + R10205 = 0));
// End of Parikh automata intersection problem
