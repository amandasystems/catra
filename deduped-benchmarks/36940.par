// Parikh automata intersection problem, generated by OSTRICH+
counter int R10000, R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R14, R15, R18, R21, R24, R27, R28, R3, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R406, R407, R408, R409, R41, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R42, R43, R44, R45, R5, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R6616, R6617, R6618, R6619, R67, R68, R69, R7, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R8684, R8685, R8686, R8687, R8688, R8689, R9376, R9377, R9378, R9379, R9380, R9381, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R6 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R21 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R24 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R63 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 107] { R65 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s2 [108, 108] { R65 += 1 };
  s0 -> s1 [109, 65535] { R65 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1 };
  s2 -> s1 [0, 110] { R65 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R65 += 1 };
  s2 -> s1 [112, 65535] { R65 += 1 };
  s3 -> s1 [0, 98] { R65 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R65 += 1 };
  s3 -> s1 [100, 65535] { R65 += 1 };
  s4 -> s1 [0, 96] { R65 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R65 += 1 };
  s4 -> s1 [98, 65535] { R65 += 1 };
  s5 -> s1 [0, 107] { R65 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R65 += 1 };
  s5 -> s1 [109, 65535] { R65 += 1 };
  s6 -> s1 [0, 103] { R65 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R65 += 1 };
  s6 -> s1 [105, 65535] { R65 += 1 };
  s7 -> s1 [0, 110] { R65 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R65 += 1 };
  s7 -> s1 [112, 65535] { R65 += 1 };
  s8 -> s1 [0, 114] { R65 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R65 += 1 };
  s8 -> s1 [116, 65535] { R65 += 1 };
  s9 -> s1 [0, 115] { R65 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R65 += 1 };
  s9 -> s1 [117, 65535] { R65 += 1 };
  s10 -> s1 [0, 65535] { R65 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_8 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R81 += 1, R37 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s0 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65] { R83 += 1, R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s3 [66, 66] { R83 += 1, R44 += 1 };
  s1 -> s1 [67, 65535] { R83 += 1, R44 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R83 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 65535] { R9957 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R9956 += 1, R9957 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9957 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R9959 += 1 };
  s0 -> s0 [0, 65535] { R9958 += 1, R9959 += 1 };
  s0 -> s2 [0, 65535] { R9959 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R9959 += 1 };
  s0 -> s1 [66, 65535] { R9959 += 1 };
  s1 -> s1 [0, 64] { R9959 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9959 += 1 };
  s1 -> s1 [66, 65535] { R9959 += 1 };
  s2 -> s1 [0, 64] { R9959 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9959 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R9959 += 1 };
  s2 -> s1 [66, 65535] { R9959 += 1 };
  s3 -> s3 [0, 65535] { R9959 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9961 += 1, R68 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R9960 += 1, R9961 += 1 };
  s0 -> s2 [0, 65535] { R9961 += 1, R69 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R9961 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R9961 += 1, R69 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R9961 += 1 };
  s2 -> s2 [0, 65535] { R9961 += 1, R69 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9961 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R9962 += 1, R9963 += 1 };
  s0 -> s1 [0, 65535] { R9963 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9963 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R9964 += 1, R9965 += 1 };
  s0 -> s1 [0, 65535] { R9965 += 1, R85 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R9965 += 1, R84 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R9965 += 1, R85 += 1, R28 += 1 };
  s1 -> s4 [0, 65535] { R9965 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9965 += 1, R85 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R9965 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9965 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R9967 += 1 };
  s0 -> s0 [0, 65535] { R9966 += 1, R9967 += 1 };
  s1 -> s1 [0, 65535] { R9967 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 43] { R9991 += 1 };
  s0 -> s0 [0, 65535] { R9990 += 1, R9991 += 1 };
  s0 -> s1 [45, 45] { R9991 += 1 };
  s0 -> s2 [46, 46] { R9991 += 1 };
  s0 -> s1 [48, 62] { R9991 += 1 };
  s0 -> s3 [65, 65] { R9991 += 1 };
  s0 -> s1 [66, 65535] { R9991 += 1 };
  s1 -> s1 [0, 43] { R9991 += 1 };
  s1 -> s1 [45, 45] { R9991 += 1 };
  s1 -> s2 [46, 46] { R9991 += 1 };
  s1 -> s1 [48, 62] { R9991 += 1 };
  s1 -> s3 [65, 65] { R9991 += 1 };
  s1 -> s1 [66, 65535] { R9991 += 1 };
  s2 -> s1 [0, 43] { R9991 += 1 };
  s2 -> s1 [45, 45] { R9991 += 1 };
  s2 -> s2 [46, 46] { R9991 += 1 };
  s2 -> s1 [48, 62] { R9991 += 1 };
  s2 -> s3 [65, 65] { R9991 += 1 };
  s2 -> s1 [66, 114] { R9991 += 1 };
  s2 -> s8 [115, 115] { R9991 += 1 };
  s2 -> s1 [116, 65535] { R9991 += 1 };
  s3 -> s3 [0, 43] { R9991 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9991 += 1 };
  s3 -> s4 [46, 46] { R9991 += 1 };
  s3 -> s3 [48, 62] { R9991 += 1 };
  s3 -> s3 [65, 65535] { R9991 += 1 };
  s4 -> s3 [0, 43] { R9991 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9991 += 1 };
  s4 -> s4 [46, 46] { R9991 += 1 };
  s4 -> s3 [48, 62] { R9991 += 1 };
  s4 -> s3 [65, 114] { R9991 += 1 };
  s4 -> s5 [115, 115] { R9991 += 1 };
  s4 -> s3 [116, 65535] { R9991 += 1 };
  s5 -> s3 [0, 43] { R9991 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9991 += 1 };
  s5 -> s4 [46, 46] { R9991 += 1 };
  s5 -> s3 [48, 62] { R9991 += 1 };
  s5 -> s3 [65, 110] { R9991 += 1 };
  s5 -> s6 [111, 111] { R9991 += 1 };
  s5 -> s3 [112, 65535] { R9991 += 1 };
  s6 -> s3 [0, 43] { R9991 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9991 += 1 };
  s6 -> s4 [46, 46] { R9991 += 1 };
  s6 -> s3 [48, 62] { R9991 += 1 };
  s6 -> s3 [65, 98] { R9991 += 1 };
  s6 -> s7 [99, 99] { R9991 += 1 };
  s6 -> s3 [100, 65535] { R9991 += 1 };
  s7 -> s3 [0, 43] { R9991 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9991 += 1 };
  s7 -> s4 [46, 46] { R9991 += 1 };
  s7 -> s3 [48, 62] { R9991 += 1 };
  s7 -> s3 [65, 106] { R9991 += 1 };
  s7 -> s3 [108, 65535] { R9991 += 1 };
  s8 -> s1 [0, 43] { R9991 += 1 };
  s8 -> s1 [45, 45] { R9991 += 1 };
  s8 -> s2 [46, 46] { R9991 += 1 };
  s8 -> s1 [48, 62] { R9991 += 1 };
  s8 -> s3 [65, 65] { R9991 += 1 };
  s8 -> s1 [66, 110] { R9991 += 1 };
  s8 -> s9 [111, 111] { R9991 += 1 };
  s8 -> s1 [112, 65535] { R9991 += 1 };
  s9 -> s1 [0, 43] { R9991 += 1 };
  s9 -> s1 [45, 45] { R9991 += 1 };
  s9 -> s2 [46, 46] { R9991 += 1 };
  s9 -> s1 [48, 62] { R9991 += 1 };
  s9 -> s3 [65, 65] { R9991 += 1 };
  s9 -> s1 [66, 98] { R9991 += 1 };
  s9 -> s10 [99, 99] { R9991 += 1 };
  s9 -> s1 [100, 65535] { R9991 += 1 };
  s10 -> s1 [0, 43] { R9991 += 1 };
  s10 -> s1 [45, 45] { R9991 += 1 };
  s10 -> s2 [46, 46] { R9991 += 1 };
  s10 -> s1 [48, 62] { R9991 += 1 };
  s10 -> s3 [65, 65] { R9991 += 1 };
  s10 -> s1 [66, 106] { R9991 += 1 };
  s10 -> s1 [108, 65535] { R9991 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R9992 += 1, R9993 += 1 };
  s0 -> s1 [0, 65535] { R9993 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R9993 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 57] { R9995 += 1 };
  s0 -> s2 [0, 65535] { R9995 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R9994 += 1, R9995 += 1 };
  s0 -> s3 [58, 58] { R9995 += 1 };
  s0 -> s1 [59, 65535] { R9995 += 1 };
  s1 -> s1 [0, 57] { R9995 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9995 += 1 };
  s1 -> s1 [59, 65535] { R9995 += 1 };
  s2 -> s1 [0, 57] { R9995 += 1 };
  s2 -> s2 [0, 65535] { R9995 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R9995 += 1 };
  s2 -> s1 [59, 65535] { R9995 += 1 };
  s3 -> s3 [0, 65535] { R9995 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 42] { R9997 += 1 };
  s0 -> s2 [0, 65535] { R9997 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R9996 += 1, R9997 += 1 };
  s0 -> s3 [43, 43] { R9997 += 1 };
  s0 -> s1 [44, 65535] { R9997 += 1 };
  s1 -> s1 [0, 42] { R9997 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R9997 += 1 };
  s1 -> s1 [44, 65535] { R9997 += 1 };
  s2 -> s1 [0, 42] { R9997 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9997 += 1, R15 += 1 };
  s2 -> s3 [43, 43] { R9997 += 1 };
  s2 -> s1 [44, 65535] { R9997 += 1 };
  s3 -> s3 [0, 65535] { R9997 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R9999 += 1 };
  s0 -> s0 [0, 65535] { R9998 += 1, R9999 += 1 };
  s0 -> s2 [0, 65535] { R9999 += 1, R18 += 1 };
  s0 -> s3 [65, 65] { R9999 += 1 };
  s0 -> s1 [66, 65535] { R9999 += 1 };
  s1 -> s1 [0, 64] { R9999 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9999 += 1 };
  s1 -> s1 [66, 65535] { R9999 += 1 };
  s2 -> s1 [0, 64] { R9999 += 1 };
  s2 -> s2 [0, 65535] { R9999 += 1, R18 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R9999 += 1 };
  s2 -> s1 [66, 65535] { R9999 += 1 };
  s3 -> s3 [0, 65535] { R9999 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 90] { R10001 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R10000 += 1, R10001 += 1 };
  s0 -> s2 [0, 65535] { R10001 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [91, 91] { R10001 += 1, R39 += 1 };
  s0 -> s1 [92, 65535] { R10001 += 1, R39 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10001 += 1 };
  s1 -> s1 [0, 65535] { R10001 += 1, R39 += 1 };
  s2 -> s1 [0, 90] { R10001 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10001 += 1, R38 += 1, R39 += 1 };
  s2 -> s3 [91, 91] { R10001 += 1, R39 += 1 };
  s2 -> s1 [92, 65535] { R10001 += 1, R39 += 1 };
  s3 -> s1 [0, 65535] { R10001 += 1, R39 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10001 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10003 += 1, R41 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R10002 += 1, R10003 += 1 };
  s0 -> s2 [0, 65535] { R10003 += 1, R40 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R10003 += 1, R41 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R10003 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10003 += 1, R41 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R10003 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10003 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10005 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R10005 += 1, R57 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R10004 += 1, R10005 += 1 };
  s1 -> s1 [0, 65535] { R10005 += 1, R56 += 1, R57 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10005 += 1, R57 += 1, R31 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10005 += 1, R57 += 1, R31 += 1 };
  s2 -> s4 [0, 65535] { R10005 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10005 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 107] { R10007 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R10007 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R10006 += 1, R10007 += 1 };
  s0 -> s3 [108, 108] { R10007 += 1, R59 += 1 };
  s0 -> s1 [109, 65535] { R10007 += 1, R59 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s13 [0, 65535] { R10007 += 1 };
  s1 -> s1 [0, 65535] { R10007 += 1, R59 += 1 };
  s2 -> s1 [0, 107] { R10007 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10007 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [108, 108] { R10007 += 1, R59 += 1 };
  s2 -> s1 [109, 65535] { R10007 += 1, R59 += 1 };
  s3 -> s1 [0, 110] { R10007 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10007 += 1 };
  s3 -> s5 [111, 111] { R10007 += 1, R59 += 1 };
  s3 -> s1 [112, 65535] { R10007 += 1, R59 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 98] { R10007 += 1, R59 += 1 };
  s5 -> s5 [0, 65535] { R10007 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [99, 99] { R10007 += 1, R59 += 1 };
  s5 -> s1 [100, 65535] { R10007 += 1, R59 += 1 };
  s6 -> s1 [0, 96] { R10007 += 1, R59 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10007 += 1 };
  s6 -> s7 [97, 97] { R10007 += 1, R59 += 1 };
  s6 -> s1 [98, 65535] { R10007 += 1, R59 += 1 };
  s7 -> s1 [0, 107] { R10007 += 1, R59 += 1 };
  s7 -> s7 [0, 65535] { R10007 += 1 };
  s7 -> s4 [0, 65535];
  s7 -> s8 [108, 108] { R10007 += 1, R59 += 1 };
  s7 -> s1 [109, 65535] { R10007 += 1, R59 += 1 };
  s8 -> s1 [0, 103] { R10007 += 1, R59 += 1 };
  s8 -> s4 [0, 65535];
  s8 -> s8 [0, 65535] { R10007 += 1 };
  s8 -> s9 [104, 104] { R10007 += 1, R59 += 1 };
  s8 -> s1 [105, 65535] { R10007 += 1, R59 += 1 };
  s9 -> s1 [0, 110] { R10007 += 1, R59 += 1 };
  s9 -> s4 [0, 65535];
  s9 -> s9 [0, 65535] { R10007 += 1 };
  s9 -> s10 [111, 111] { R10007 += 1, R59 += 1 };
  s9 -> s1 [112, 65535] { R10007 += 1, R59 += 1 };
  s10 -> s1 [0, 114] { R10007 += 1, R59 += 1 };
  s10 -> s4 [0, 65535];
  s10 -> s10 [0, 65535] { R10007 += 1 };
  s10 -> s11 [115, 115] { R10007 += 1, R59 += 1 };
  s10 -> s1 [116, 65535] { R10007 += 1, R59 += 1 };
  s11 -> s1 [0, 115] { R10007 += 1, R59 += 1 };
  s11 -> s4 [0, 65535];
  s11 -> s11 [0, 65535] { R10007 += 1 };
  s11 -> s12 [116, 116] { R10007 += 1, R59 += 1 };
  s11 -> s1 [117, 65535] { R10007 += 1, R59 += 1 };
  s12 -> s1 [0, 65535] { R10007 += 1, R59 += 1 };
  s13 -> s4 [0, 65535];
  s13 -> s13 [0, 65535] { R10007 += 1 };
  accepting s3, s4, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_27 {
  init s0;
  s0 -> s0 [0, 65535] { R10008 += 1, R10009 += 1 };
  s0 -> s1 [0, 65535] { R10009 += 1, R61 += 1, R43 += 1 };
  s0 -> s2 [0, 65535] { R10009 += 1, R60 += 1, R61 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10009 += 1, R61 += 1, R43 += 1 };
  s1 -> s4 [0, 65535] { R10009 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10009 += 1, R61 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R10009 += 1, R60 += 1, R61 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10009 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R10011 += 1, R75 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R10011 += 1, R74 += 1, R75 += 1 };
  s0 -> s0 [0, 65535] { R10010 += 1, R10011 += 1 };
  s1 -> s1 [0, 65535] { R10011 += 1, R75 += 1, R33 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10011 += 1 };
  s2 -> s1 [0, 65535] { R10011 += 1, R75 += 1, R33 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10011 += 1, R74 += 1, R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10011 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s0 [0, 65535] { R10012 += 1, R10013 += 1 };
  s0 -> s1 [0, 65535] { R10013 += 1 };
  s1 -> s1 [0, 65535] { R10013 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 42] { R10015 += 1, R77 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R10014 += 1, R10015 += 1 };
  s0 -> s2 [0, 65535] { R10015 += 1, R76 += 1, R77 += 1 };
  s0 -> s3 [43, 43] { R10015 += 1, R77 += 1, R42 += 1 };
  s0 -> s4 [43, 43] { R10015 += 1, R77 += 1, R42 += 1 };
  s0 -> s1 [44, 65535] { R10015 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 42] { R10015 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [0, 65535] { R10015 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [43, 43] { R10015 += 1, R77 += 1, R42 += 1 };
  s1 -> s4 [43, 43] { R10015 += 1, R77 += 1, R42 += 1 };
  s1 -> s1 [44, 65535] { R10015 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [0, 42] { R10015 += 1, R77 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R10015 += 1, R76 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [43, 43] { R10015 += 1, R77 += 1, R42 += 1 };
  s2 -> s4 [43, 43] { R10015 += 1, R77 += 1, R42 += 1 };
  s2 -> s1 [44, 65535] { R10015 += 1, R77 += 1, R42 += 1 };
  s3 -> s3 [0, 65535] { R10015 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10015 += 1 };
  s4 -> s4 [0, 65535] { R10015 += 1, R77 += 1, R42 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10015 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10017 += 1, R9933 += 1 };
  s0 -> s2 [0, 65535] { R10017 += 1, R9932 += 1, R9933 += 1 };
  s0 -> s0 [0, 65535] { R10016 += 1, R10017 += 1 };
  s0 -> s1 [66, 65535] { R10017 += 1, R9933 += 1 };
  s1 -> s1 [0, 64] { R10017 += 1, R9933 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10017 += 1 };
  s1 -> s1 [66, 65535] { R10017 += 1, R9933 += 1 };
  s2 -> s1 [0, 64] { R10017 += 1, R9933 += 1 };
  s2 -> s2 [0, 65535] { R10017 += 1, R9932 += 1, R9933 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10017 += 1, R9933 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10019 += 1, R9935 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R10018 += 1, R10019 += 1 };
  s0 -> s2 [0, 65535] { R10019 += 1, R9934 += 1, R9935 += 1 };
  s1 -> s1 [0, 65535] { R10019 += 1, R9935 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R10019 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10019 += 1, R9935 += 1, R32 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10019 += 1, R9934 += 1, R9935 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10019 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 65] { R10021 += 1, R9937 += 1 };
  s0 -> s0 [0, 65535] { R10020 += 1, R10021 += 1 };
  s0 -> s2 [0, 65535] { R10021 += 1, R9936 += 1, R9937 += 1 };
  s0 -> s1 [80, 65535] { R10021 += 1, R9937 += 1 };
  s1 -> s1 [0, 65] { R10021 += 1, R9937 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10021 += 1 };
  s1 -> s1 [80, 65535] { R10021 += 1, R9937 += 1 };
  s2 -> s1 [0, 65] { R10021 += 1, R9937 += 1 };
  s2 -> s2 [0, 65535] { R10021 += 1, R9936 += 1, R9937 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10021 += 1, R9937 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10023 += 1, R9939 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R10023 += 1, R9938 += 1, R9939 += 1 };
  s0 -> s0 [0, 65535] { R10022 += 1, R10023 += 1 };
  s1 -> s1 [0, 65535] { R10023 += 1, R9939 += 1, R407 += 1 };
  s1 -> s4 [0, 65535] { R10023 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10023 += 1, R9939 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R10023 += 1, R9938 += 1, R9939 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10023 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 79] { R10025 += 1, R9941 += 1 };
  s0 -> s2 [0, 65535] { R10025 += 1, R9941 += 1, R409 += 1 };
  s0 -> s3 [0, 65535] { R10025 += 1, R9940 += 1, R9941 += 1 };
  s0 -> s0 [0, 65535] { R10024 += 1, R10025 += 1 };
  s0 -> s1 [81, 65535] { R10025 += 1, R9941 += 1 };
  s1 -> s1 [0, 79] { R10025 += 1, R9941 += 1 };
  s1 -> s1 [0, 65535] { R10025 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R10025 += 1, R9941 += 1 };
  s2 -> s1 [0, 79] { R10025 += 1, R9941 += 1 };
  s2 -> s2 [0, 65535] { R10025 += 1, R9941 += 1, R409 += 1 };
  s2 -> s5 [0, 65535] { R10025 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R10025 += 1, R9941 += 1 };
  s3 -> s1 [0, 79] { R10025 += 1, R9941 += 1 };
  s3 -> s2 [0, 65535] { R10025 += 1, R9941 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R10025 += 1, R9940 += 1, R9941 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R10025 += 1, R9941 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10025 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 79] { R10027 += 1, R9943 += 1, R413 += 1 };
  s0 -> s0 [0, 65535] { R10026 += 1, R10027 += 1 };
  s0 -> s2 [0, 65535] { R10027 += 1, R9942 += 1, R9943 += 1 };
  s0 -> s3 [0, 65535] { R10027 += 1, R9943 += 1, R412 += 1, R413 += 1 };
  s0 -> s1 [81, 65535] { R10027 += 1, R9943 += 1, R413 += 1 };
  s1 -> s1 [0, 79] { R10027 += 1, R9943 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R10027 += 1, R9943 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10027 += 1 };
  s1 -> s1 [81, 65535] { R10027 += 1, R9943 += 1, R413 += 1 };
  s2 -> s1 [0, 79] { R10027 += 1, R9943 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R10027 += 1, R9942 += 1, R9943 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10027 += 1, R9943 += 1, R412 += 1, R413 += 1 };
  s2 -> s1 [81, 65535] { R10027 += 1, R9943 += 1, R413 += 1 };
  s3 -> s1 [0, 79] { R10027 += 1, R9943 += 1, R413 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10027 += 1, R9943 += 1, R412 += 1, R413 += 1 };
  s3 -> s5 [0, 65535] { R10027 += 1 };
  s3 -> s1 [81, 65535] { R10027 += 1, R9943 += 1, R413 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10027 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 65535] { R10029 += 1, R9945 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R10029 += 1, R9944 += 1, R9945 += 1 };
  s0 -> s0 [0, 65535] { R10028 += 1, R10029 += 1 };
  s0 -> s3 [0, 65535] { R10029 += 1, R9945 += 1, R418 += 1, R419 += 1 };
  s1 -> s1 [0, 65535] { R10029 += 1, R9945 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [0, 65535] { R10029 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R10029 += 1, R9945 += 1, R418 += 1, R419 += 1 };
  s2 -> s1 [0, 65535] { R10029 += 1, R9945 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R10029 += 1, R9944 += 1, R9945 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10029 += 1, R9945 += 1, R418 += 1, R419 += 1 };
  s3 -> s4 [0, 65535] { R10029 += 1 };
  s3 -> s5 [0, 65535] { R10029 += 1, R9945 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10029 += 1, R9945 += 1, R418 += 1, R419 += 1 };
  s4 -> s4 [0, 65535] { R10029 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R10029 += 1 };
  s5 -> s5 [0, 65535] { R10029 += 1, R9945 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 80] { R10031 += 1, R9947 += 1, R6619 += 1 };
  s0 -> s1 [0, 65535] { R10031 += 1, R9947 += 1 };
  s0 -> s2 [0, 65535] { R10031 += 1, R9946 += 1, R9947 += 1 };
  s0 -> s0 [0, 65535] { R10030 += 1, R10031 += 1 };
  s0 -> s1 [91, 65535] { R10031 += 1, R9947 += 1, R6619 += 1 };
  s1 -> s1 [0, 80] { R10031 += 1, R9947 += 1, R6619 += 1 };
  s1 -> s1 [0, 65535] { R10031 += 1, R9947 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10031 += 1 };
  s1 -> s1 [91, 65535] { R10031 += 1, R9947 += 1, R6619 += 1 };
  s2 -> s1 [0, 80] { R10031 += 1, R9947 += 1, R6619 += 1 };
  s2 -> s1 [0, 65535] { R10031 += 1, R9947 += 1 };
  s2 -> s2 [0, 65535] { R10031 += 1, R9946 += 1, R9947 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R10031 += 1, R9947 += 1, R6619 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10031 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 65535] { R10033 += 1, R9949 += 1, R8688 += 1, R8689 += 1 };
  s0 -> s2 [0, 65535] { R10033 += 1, R9949 += 1 };
  s0 -> s0 [0, 65535] { R10032 += 1, R10033 += 1 };
  s0 -> s3 [0, 65535] { R10033 += 1, R9948 += 1, R9949 += 1 };
  s1 -> s5 [0, 65535] { R10033 += 1 };
  s1 -> s1 [0, 65535] { R10033 += 1, R9949 += 1, R8688 += 1, R8689 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10033 += 1, R9949 += 1 };
  s2 -> s5 [0, 65535] { R10033 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10033 += 1, R9949 += 1 };
  s3 -> s1 [0, 65535] { R10033 += 1, R9949 += 1, R8688 += 1, R8689 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10033 += 1, R9949 += 1 };
  s3 -> s3 [0, 65535] { R10033 += 1, R9948 += 1, R9949 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10033 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s0 [0, 65535] { R10034 += 1, R10035 += 1 };
  s0 -> s1 [0, 65535] { R10035 += 1, R9950 += 1, R9951 += 1 };
  s0 -> s2 [0, 65535] { R10035 += 1, R9951 += 1, R9380 += 1, R9381 += 1 };
  s0 -> s3 [0, 65535] { R10035 += 1, R9951 += 1 };
  s1 -> s1 [0, 65535] { R10035 += 1, R9950 += 1, R9951 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R10035 += 1, R9951 += 1, R9380 += 1, R9381 += 1 };
  s1 -> s3 [0, 65535] { R10035 += 1, R9951 += 1 };
  s2 -> s4 [0, 65535] { R10035 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10035 += 1, R9951 += 1, R9380 += 1, R9381 += 1 };
  s2 -> s3 [0, 65535] { R10035 += 1, R9951 += 1 };
  s3 -> s4 [0, 65535] { R10035 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10035 += 1, R9951 += 1 };
  s4 -> s4 [0, 65535] { R10035 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 65535] { R10037 += 1, R9952 += 1, R9953 += 1 };
  s0 -> s0 [0, 65535] { R10036 += 1, R10037 += 1 };
  s0 -> s2 [0, 65535] { R10037 += 1, R9953 += 1 };
  s1 -> s1 [0, 65535] { R10037 += 1, R9952 += 1, R9953 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10037 += 1, R9953 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10037 += 1 };
  s2 -> s2 [0, 65535] { R10037 += 1, R9953 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10037 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 65535] { R10039 += 1, R9954 += 1, R9955 += 1 };
  s0 -> s0 [0, 65535] { R10038 += 1, R10039 += 1 };
  s0 -> s2 [0, 65535] { R10039 += 1, R9955 += 1 };
  s1 -> s1 [0, 65535] { R10039 += 1, R9954 += 1, R9955 += 1 };
  s1 -> s2 [0, 65535] { R10039 += 1, R9955 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10039 += 1, R9955 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10039 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10039 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_43 {
  init s0;
  s0 -> s1 [0, 65535] { R10041 += 1, R9968 += 1, R9969 += 1 };
  s0 -> s2 [0, 65535] { R10041 += 1, R9969 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R10040 += 1, R10041 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10041 += 1, R9968 += 1, R9969 += 1 };
  s1 -> s2 [0, 65535] { R10041 += 1, R9969 += 1, R34 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10041 += 1, R9969 += 1, R34 += 1 };
  s2 -> s4 [0, 65535] { R10041 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10041 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_44 {
  init s0;
  s0 -> s1 [0, 64] { R10043 += 1, R9971 += 1 };
  s0 -> s2 [0, 65535] { R10043 += 1, R9970 += 1, R9971 += 1 };
  s0 -> s0 [0, 65535] { R10042 += 1, R10043 += 1 };
  s0 -> s3 [65, 65] { R10043 += 1, R9971 += 1 };
  s0 -> s4 [65, 65] { R10043 += 1, R9971 += 1 };
  s0 -> s5 [80, 80] { R10043 += 1, R9971 += 1 };
  s0 -> s1 [81, 65535] { R10043 += 1, R9971 += 1 };
  s1 -> s1 [0, 64] { R10043 += 1, R9971 += 1 };
  s1 -> s3 [65, 65] { R10043 += 1, R9971 += 1 };
  s1 -> s4 [65, 65] { R10043 += 1, R9971 += 1 };
  s1 -> s5 [80, 80] { R10043 += 1, R9971 += 1 };
  s1 -> s1 [81, 65535] { R10043 += 1, R9971 += 1 };
  s2 -> s1 [0, 64] { R10043 += 1, R9971 += 1 };
  s2 -> s2 [0, 65535] { R10043 += 1, R9970 += 1, R9971 += 1 };
  s2 -> s3 [65, 65] { R10043 += 1, R9971 += 1 };
  s2 -> s4 [65, 65] { R10043 += 1, R9971 += 1 };
  s2 -> s5 [80, 80] { R10043 += 1, R9971 += 1 };
  s2 -> s1 [81, 65535] { R10043 += 1, R9971 += 1 };
  s3 -> s3 [0, 65] { R10043 += 1, R9971 += 1 };
  s3 -> s8 [80, 80] { R10043 += 1, R9971 += 1 };
  s3 -> s3 [81, 65535] { R10043 += 1, R9971 += 1 };
  s5 -> s5 [0, 64] { R10043 += 1, R9971 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10043 += 1 };
  s5 -> s7 [65, 65] { R10043 += 1, R9971 += 1 };
  s5 -> s8 [65, 65] { R10043 += 1, R9971 += 1 };
  s5 -> s5 [80, 65535] { R10043 += 1, R9971 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10043 += 1 };
  s8 -> s8 [0, 65] { R10043 += 1, R9971 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10043 += 1 };
  s8 -> s8 [80, 65535] { R10043 += 1, R9971 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_45 {
  init s0;
  s0 -> s1 [0, 64] { R10045 += 1, R9973 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R10045 += 1, R9972 += 1, R9973 += 1 };
  s0 -> s0 [0, 65535] { R10044 += 1, R10045 += 1 };
  s0 -> s3 [65, 65] { R10045 += 1, R9973 += 1, R406 += 1 };
  s0 -> s4 [65, 65] { R10045 += 1, R9973 += 1, R406 += 1 };
  s0 -> s1 [66, 65535] { R10045 += 1, R9973 += 1, R406 += 1 };
  s1 -> s1 [0, 64] { R10045 += 1, R9973 += 1, R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10045 += 1 };
  s1 -> s3 [65, 65] { R10045 += 1, R9973 += 1, R406 += 1 };
  s1 -> s4 [65, 65] { R10045 += 1, R9973 += 1, R406 += 1 };
  s1 -> s1 [66, 65535] { R10045 += 1, R9973 += 1, R406 += 1 };
  s2 -> s1 [0, 64] { R10045 += 1, R9973 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R10045 += 1, R9972 += 1, R9973 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10045 += 1, R9973 += 1, R406 += 1 };
  s2 -> s4 [65, 65] { R10045 += 1, R9973 += 1, R406 += 1 };
  s2 -> s1 [66, 65535] { R10045 += 1, R9973 += 1, R406 += 1 };
  s3 -> s3 [0, 65535] { R10045 += 1, R9973 += 1, R406 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10045 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10045 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10045 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_46 {
  init s0;
  s0 -> s1 [0, 64] { R10047 += 1, R9975 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R10047 += 1, R9974 += 1, R9975 += 1 };
  s0 -> s0 [0, 65535] { R10046 += 1, R10047 += 1 };
  s0 -> s3 [65, 65] { R10047 += 1, R9975 += 1, R408 += 1 };
  s0 -> s4 [65, 65] { R10047 += 1, R9975 += 1, R408 += 1 };
  s0 -> s1 [66, 65535] { R10047 += 1, R9975 += 1, R408 += 1 };
  s1 -> s1 [0, 64] { R10047 += 1, R9975 += 1, R408 += 1 };
  s1 -> s1 [0, 65535] { R10047 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10047 += 1, R9975 += 1, R408 += 1 };
  s1 -> s4 [65, 65] { R10047 += 1, R9975 += 1, R408 += 1 };
  s1 -> s1 [66, 65535] { R10047 += 1, R9975 += 1, R408 += 1 };
  s2 -> s1 [0, 64] { R10047 += 1, R9975 += 1, R408 += 1 };
  s2 -> s2 [0, 65535] { R10047 += 1, R9974 += 1, R9975 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10047 += 1, R9975 += 1, R408 += 1 };
  s2 -> s4 [65, 65] { R10047 += 1, R9975 += 1, R408 += 1 };
  s2 -> s1 [66, 65535] { R10047 += 1, R9975 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R10047 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10047 += 1 };
  s4 -> s4 [0, 65535] { R10047 += 1, R9975 += 1, R408 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10047 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_47 {
  init s0;
  s0 -> s1 [0, 64] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R10049 += 1, R9976 += 1, R9977 += 1 };
  s0 -> s0 [0, 65535] { R10048 += 1, R10049 += 1 };
  s0 -> s3 [65, 65] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s0 -> s4 [65, 65] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [66, 65535] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 64] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [0, 65535] { R10049 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s1 -> s4 [65, 65] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s1 -> s1 [66, 65535] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [0, 64] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s2 -> s2 [0, 65535] { R10049 += 1, R9976 += 1, R9977 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s2 -> s4 [65, 65] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s2 -> s1 [66, 65535] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s3 -> s6 [0, 65535] { R10049 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10049 += 1, R9977 += 1, R410 += 1, R411 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10049 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10049 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_48 {
  init s0;
  s0 -> s1 [0, 64] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R10050 += 1, R10051 += 1 };
  s0 -> s2 [0, 65535] { R10051 += 1, R9978 += 1, R9979 += 1 };
  s0 -> s3 [65, 65] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s0 -> s4 [65, 65] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s0 -> s1 [66, 65535] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 64] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10051 += 1 };
  s1 -> s3 [65, 65] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [65, 65] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [66, 65535] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [0, 64] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10051 += 1, R9978 += 1, R9979 += 1 };
  s2 -> s3 [65, 65] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [65, 65] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s2 -> s1 [66, 65535] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10051 += 1 };
  s3 -> s3 [0, 65535] { R10051 += 1, R9979 += 1, R414 += 1, R415 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10051 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10051 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_49 {
  init s0;
  s0 -> s1 [0, 64] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s0 -> s3 [0, 65535] { R10053 += 1, R9980 += 1, R9981 += 1 };
  s0 -> s0 [0, 65535] { R10052 += 1, R10053 += 1 };
  s0 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s0 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s0 -> s6 [65, 65] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s7 [65, 65] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s0 -> s1 [66, 65535] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s0 -> s2 [91, 107] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s0 -> s8 [108, 108] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s0 -> s2 [109, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s1 [0, 64] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s6 [65, 65] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s7 [65, 65] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s1 [66, 65535] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s1 -> s2 [91, 107] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s8 [108, 108] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s1 -> s2 [109, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s2 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s2 -> s34 [0, 65535];
  s2 -> s2 [0, 65535] { R10053 += 1 };
  s2 -> s4 [65, 65] { R10053 += 1, R9981 += 1 };
  s2 -> s5 [65, 65] { R10053 += 1, R9981 += 1 };
  s2 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s2 -> s2 [66, 65535] { R10053 += 1, R9981 += 1 };
  s2 -> s2 [91, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s1 [0, 64] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s3 [0, 65535] { R10053 += 1, R9980 += 1, R9981 += 1 };
  s3 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s6 [65, 65] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s7 [65, 65] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s1 [66, 65535] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s3 -> s2 [91, 107] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s8 [108, 108] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s3 -> s2 [109, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s4 -> s4 [0, 65535] { R10053 += 1 };
  s4 -> s34 [0, 65535];
  s5 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s5 -> s5 [0, 65535] { R10053 += 1, R9981 += 1 };
  s5 -> s34 [0, 65535];
  s5 -> s35 [0, 65535] { R10053 += 1 };
  s5 -> s5 [91, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s7 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s7 -> s7 [0, 65535] { R10053 += 1, R9981 += 1, R6616 += 1, R6617 += 1 };
  s7 -> s5 [91, 107] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s7 -> s9 [108, 108] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s7 -> s5 [109, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s8 [0, 64] { R10053 += 1, R9981 += 1 };
  s8 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s9 [65, 65] { R10053 += 1, R9981 += 1 };
  s8 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s10 [65, 65] { R10053 += 1, R9981 += 1 };
  s8 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s8 [66, 65535] { R10053 += 1, R9981 += 1 };
  s8 -> s2 [91, 110] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s11 [111, 111] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s8 -> s2 [112, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s9 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s9 -> s9 [0, 65535] { R10053 += 1, R9981 += 1 };
  s9 -> s5 [91, 110] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s9 -> s13 [111, 111] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s9 -> s5 [112, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s11 [0, 64] { R10053 += 1, R9981 += 1 };
  s11 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s12 [65, 65] { R10053 += 1, R9981 += 1 };
  s11 -> s13 [65, 65] { R10053 += 1, R9981 += 1 };
  s11 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s11 [66, 65535] { R10053 += 1, R9981 += 1 };
  s11 -> s2 [91, 98] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s14 [99, 99] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s11 -> s2 [100, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s13 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s13 -> s13 [0, 65535] { R10053 += 1, R9981 += 1 };
  s13 -> s5 [91, 98] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s13 -> s18 [99, 99] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s13 -> s5 [100, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s14 [0, 64] { R10053 += 1, R9981 += 1 };
  s14 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s15 [65, 65] { R10053 += 1, R9981 += 1 };
  s14 -> s16 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s17 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s18 [65, 65] { R10053 += 1, R9981 += 1 };
  s14 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s14 [66, 65535] { R10053 += 1, R9981 += 1 };
  s14 -> s2 [91, 96] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s19 [97, 97] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s14 -> s2 [98, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s16 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s16 -> s16 [0, 65535] { R10053 += 1, R9981 += 1 };
  s16 -> s5 [91, 107] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s16 -> s21 [108, 108] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s16 -> s5 [109, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s18 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s18 -> s18 [0, 65535] { R10053 += 1, R9981 += 1 };
  s18 -> s5 [91, 96] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s18 -> s16 [97, 97] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s18 -> s5 [98, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s19 [0, 64] { R10053 += 1, R9981 += 1 };
  s19 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s16 [65, 65] { R10053 += 1, R9981 += 1 };
  s19 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s17 [65, 65] { R10053 += 1, R9981 += 1 };
  s19 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s19 [66, 65535] { R10053 += 1, R9981 += 1 };
  s19 -> s2 [91, 107] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s20 [108, 108] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s19 -> s2 [109, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s20 [0, 64] { R10053 += 1, R9981 += 1 };
  s20 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s21 [65, 65] { R10053 += 1, R9981 += 1 };
  s20 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s22 [65, 65] { R10053 += 1, R9981 += 1 };
  s20 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s20 [66, 65535] { R10053 += 1, R9981 += 1 };
  s20 -> s2 [91, 103] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s23 [104, 104] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s20 -> s2 [105, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s21 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s21 -> s21 [0, 65535] { R10053 += 1, R9981 += 1 };
  s21 -> s5 [91, 103] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s21 -> s24 [104, 104] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s21 -> s5 [105, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s23 [0, 64] { R10053 += 1, R9981 += 1 };
  s23 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s24 [65, 65] { R10053 += 1, R9981 += 1 };
  s23 -> s25 [65, 65] { R10053 += 1, R9981 += 1 };
  s23 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s23 [66, 65535] { R10053 += 1, R9981 += 1 };
  s23 -> s2 [91, 110] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s26 [111, 111] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s23 -> s2 [112, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s24 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s24 -> s24 [0, 65535] { R10053 += 1, R9981 += 1 };
  s24 -> s5 [91, 110] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s24 -> s28 [111, 111] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s24 -> s5 [112, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s26 [0, 64] { R10053 += 1, R9981 += 1 };
  s26 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s27 [65, 65] { R10053 += 1, R9981 += 1 };
  s26 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s28 [65, 65] { R10053 += 1, R9981 += 1 };
  s26 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s26 [66, 65535] { R10053 += 1, R9981 += 1 };
  s26 -> s2 [91, 114] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s29 [115, 115] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s26 -> s2 [116, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s28 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s28 -> s28 [0, 65535] { R10053 += 1, R9981 += 1 };
  s28 -> s5 [91, 114] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s28 -> s31 [115, 115] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s28 -> s5 [116, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s29 [0, 64] { R10053 += 1, R9981 += 1 };
  s29 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s30 [65, 65] { R10053 += 1, R9981 += 1 };
  s29 -> s31 [65, 65] { R10053 += 1, R9981 += 1 };
  s29 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s29 [66, 65535] { R10053 += 1, R9981 += 1 };
  s29 -> s2 [91, 115] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s32 [116, 116] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s29 -> s2 [117, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s31 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s31 -> s31 [0, 65535] { R10053 += 1, R9981 += 1 };
  s31 -> s5 [91, 115] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s31 -> s33 [116, 116] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s31 -> s5 [117, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s32 -> s2 [0, 64] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s32 -> s4 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s32 -> s5 [65, 65] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s32 -> s2 [66, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s32 -> s2 [91, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s33 -> s5 [0, 80] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s33 -> s5 [91, 65535] { R10053 += 1, R9981 += 1, R6617 += 1 };
  s34 -> s34 [0, 65535];
  s35 -> s34 [0, 65535];
  s35 -> s35 [0, 65535] { R10053 += 1 };
  accepting s4, s34, s5, s2, s35;
};
automaton uri_50 {
  init s0;
  s0 -> s1 [0, 64] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [0, 64] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s0 [0, 65535] { R10054 += 1, R10055 += 1 };
  s0 -> s3 [0, 65535] { R10055 += 1, R9982 += 1, R9983 += 1 };
  s0 -> s4 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s5 [65, 65] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s6 [65, 65] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s0 -> s7 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s1 [66, 65535] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s0 -> s2 [66, 65535] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s1 -> s1 [0, 64] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s1 [0, 65535] { R10055 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s7 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s1 -> s1 [66, 65535] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [0, 64] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [0, 64] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s4 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s5 [65, 65] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s6 [65, 65] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s2 -> s7 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s1 [66, 65535] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s2 -> s2 [66, 65535] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s1 [0, 64] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [0, 64] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s3 [0, 65535] { R10055 += 1, R9982 += 1, R9983 += 1 };
  s3 -> s4 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s5 [65, 65] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s6 [65, 65] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s3 -> s7 [65, 65] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s1 [66, 65535] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s3 -> s2 [66, 65535] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s4 -> s4 [0, 65535] { R10055 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10055 += 1, R9983 += 1, R8684 += 1, R8685 += 1 };
  s6 -> s7 [0, 65535] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10055 += 1 };
  s7 -> s7 [0, 65535] { R10055 += 1, R9983 += 1, R8685 += 1, R8686 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10055 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_51 {
  init s0;
  s0 -> s1 [0, 64] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s0 -> s2 [0, 64] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s0 -> s0 [0, 65535] { R10056 += 1, R10057 += 1 };
  s0 -> s3 [0, 65535] { R10057 += 1, R9984 += 1, R9985 += 1 };
  s0 -> s4 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s0 -> s5 [65, 65] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s0 -> s6 [65, 65] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s0 -> s7 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s0 -> s1 [66, 65535] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s0 -> s2 [66, 65535] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s1 -> s1 [0, 64] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R10057 += 1 };
  s1 -> s4 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s1 -> s7 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s1 -> s1 [66, 65535] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s2 -> s1 [0, 64] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s2 -> s2 [0, 64] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s2 -> s4 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s2 -> s5 [65, 65] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s2 -> s6 [65, 65] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s2 -> s7 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s2 -> s1 [66, 65535] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s2 -> s2 [66, 65535] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s3 -> s1 [0, 64] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s3 -> s2 [0, 64] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s3 -> s3 [0, 65535] { R10057 += 1, R9984 += 1, R9985 += 1 };
  s3 -> s4 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s3 -> s5 [65, 65] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s3 -> s6 [65, 65] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s3 -> s7 [65, 65] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s3 -> s1 [66, 65535] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s3 -> s2 [66, 65535] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s4 -> s4 [0, 65535] { R10057 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10057 += 1, R9985 += 1, R9376 += 1, R9377 += 1 };
  s6 -> s7 [0, 65535] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10057 += 1 };
  s7 -> s7 [0, 65535] { R10057 += 1, R9985 += 1, R9377 += 1, R9378 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10057 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_52 {
  init s0;
  s0 -> s1 [0, 64] { R10059 += 1, R9987 += 1 };
  s0 -> s2 [0, 65535] { R10059 += 1, R9986 += 1, R9987 += 1 };
  s0 -> s0 [0, 65535] { R10058 += 1, R10059 += 1 };
  s0 -> s3 [65, 65] { R10059 += 1, R9987 += 1 };
  s0 -> s4 [65, 65] { R10059 += 1, R9987 += 1 };
  s0 -> s1 [66, 65535] { R10059 += 1, R9987 += 1 };
  s1 -> s1 [0, 64] { R10059 += 1, R9987 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10059 += 1 };
  s1 -> s3 [65, 65] { R10059 += 1, R9987 += 1 };
  s1 -> s4 [65, 65] { R10059 += 1, R9987 += 1 };
  s1 -> s1 [66, 65535] { R10059 += 1, R9987 += 1 };
  s2 -> s1 [0, 64] { R10059 += 1, R9987 += 1 };
  s2 -> s2 [0, 65535] { R10059 += 1, R9986 += 1, R9987 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10059 += 1, R9987 += 1 };
  s2 -> s4 [65, 65] { R10059 += 1, R9987 += 1 };
  s2 -> s1 [66, 65535] { R10059 += 1, R9987 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10059 += 1 };
  s3 -> s3 [0, 65535] { R10059 += 1, R9987 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10059 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10059 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_53 {
  init s0;
  s0 -> s1 [0, 64] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s2 [0, 64] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s0 -> s0 [0, 65535] { R10060 += 1, R10061 += 1 };
  s0 -> s3 [0, 65535] { R10061 += 1, R9988 += 1, R9989 += 1 };
  s0 -> s4 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s5 [65, 65] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s0 -> s6 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s7 [65, 65] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s0 -> s1 [66, 79] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s2 [66, 65535] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s0 -> s8 [80, 80] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s0 -> s1 [81, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s1 -> s1 [0, 64] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s1 -> s4 [65, 65] { R10061 += 1, R9989 += 1 };
  s1 -> s6 [65, 65] { R10061 += 1, R9989 += 1 };
  s1 -> s1 [66, 79] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s1 -> s1 [66, 65535] { R10061 += 1, R9989 += 1 };
  s1 -> s8 [80, 80] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s1 -> s1 [81, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s1 [0, 64] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s2 [0, 64] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s2 -> s4 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s5 [65, 65] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s2 -> s6 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s7 [65, 65] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s2 -> s1 [66, 79] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s2 [66, 65535] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s2 -> s8 [80, 80] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s2 -> s1 [81, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s1 [0, 64] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s2 [0, 64] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s3 -> s3 [0, 65535] { R10061 += 1, R9988 += 1, R9989 += 1 };
  s3 -> s4 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s5 [65, 65] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s3 -> s6 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s7 [65, 65] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s3 -> s1 [66, 79] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s2 [66, 65535] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s3 -> s8 [80, 80] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s3 -> s1 [81, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s4 -> s4 [0, 79] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s4 -> s4 [0, 65535] { R10061 += 1, R9989 += 1 };
  s4 -> s13 [80, 80] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s4 -> s4 [81, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s5 -> s4 [0, 79] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s5 -> s5 [0, 65535] { R10061 += 1, R9989 += 1, R9926 += 1, R9927 += 1 };
  s5 -> s13 [80, 80] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s5 -> s4 [81, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s8 -> s8 [0, 64] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s8 -> s9 [0, 64] { R10061 += 1, R9989 += 1 };
  s8 -> s10 [65, 65] { R10061 += 1, R9989 += 1 };
  s8 -> s11 [65, 65] { R10061 += 1, R9989 += 1 };
  s8 -> s12 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s8 -> s13 [65, 65] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s8 -> s8 [66, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s8 -> s9 [66, 65535] { R10061 += 1, R9989 += 1 };
  s9 -> s9 [0, 64] { R10061 += 1, R9989 += 1 };
  s9 -> s9 [0, 65535] { R10061 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s10 [65, 65] { R10061 += 1, R9989 += 1 };
  s9 -> s11 [65, 65] { R10061 += 1, R9989 += 1 };
  s9 -> s9 [66, 65535] { R10061 += 1, R9989 += 1 };
  s10 -> s10 [0, 65535] { R10061 += 1 };
  s10 -> s15 [0, 65535];
  s11 -> s11 [0, 65535] { R10061 += 1, R9989 += 1 };
  s11 -> s14 [0, 65535] { R10061 += 1 };
  s11 -> s15 [0, 65535];
  s13 -> s11 [0, 65535] { R10061 += 1, R9989 += 1 };
  s13 -> s13 [0, 65535] { R10061 += 1, R9989 += 1, R9927 += 1, R9928 += 1 };
  s14 -> s14 [0, 65535] { R10061 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s9, s14, s15, s10, s11;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining P88
automaton P88_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = 0 && R5 = R9955 && R6 = R10061 && R38 = 0 && R39 = 1 && R40 = 0 && R41 = 1 && R56 = 0 && R57 = R9955 && R58 = 0 && R59 = R9955 && R60 = 0 && R61 = R9955 && R62 = 0 && R63 = R10061 && R64 = 0 && R65 = R10061 && R66 = 0 && R67 = R10061 && R9932 = 0 && R9933 = R9955 && R9934 = 0 && R9935 = R9955 && R9936 = 0 && R9937 = R9955 && R9938 = 0 && R9939 = R9955 && R9940 = 0 && R9941 = R9955 && R9942 = 0 && R9943 = R9955 && R9944 = 0 && R9945 = R9955 && R9946 = 0 && R9947 = R9955 && R9948 = 0 && R9949 = R9955 && R9950 = 0 && R9951 = R9955 && R9952 = 0 && R9953 = R9955 && R9954 = 0 && R9956 = 0 && R9957 = R10061 && R9958 = 0 && R9959 = R10061 && R9960 = 0 && R9961 = R10061 && R9962 = 0 && R9963 = R10061 && R9964 = 0 && R9965 = R10061 && R9966 = 0 && R9967 = R10061 && R9970 = 0 && R9971 = 0 && R9980 = 0 && R9981 = 0 && R9982 = 0 && R9983 = 0 && R9984 = 0 && R9985 = 0 && R9988 = 0 && R9989 = 0 && R9990 = 10 && R9991 = R10061 && R9992 = 10 && R9993 = R10061 && R9994 = 10 && R9995 = R10061 && R9996 = 10 && R9997 = R10061 && R9998 = 10 && R9999 = R10061 && R10000 = 10 && R10001 = R10061 && R10002 = 10 && R10003 = R10061 && R10004 = 10 && R10005 = R10061 && R10006 = 10 && R10007 = R10061 && R10008 = 10 && R10009 = R10061 && R10010 = 10 && R10011 = R10061 && R10012 = 10 && R10013 = R10061 && R10014 = 10 && R10015 = R10061 && R10016 = 10 && R10017 = R10061 && R10018 = 10 && R10019 = R10061 && R10020 = 10 && R10021 = R10061 && R10022 = 10 && R10023 = R10061 && R10024 = 10 && R10025 = R10061 && R10026 = 10 && R10027 = R10061 && R10028 = 10 && R10029 = R10061 && R10030 = 10 && R10031 = R10061 && R10032 = 10 && R10033 = R10061 && R10034 = 10 && R10035 = R10061 && R10036 = 10 && R10037 = R10061 && R10038 = 10 && R10039 = R10061 && R10040 = 10 && R10041 = R10061 && R10042 = 10 && R10043 = R10061 && R10044 = 10 && R10045 = R10061 && R10046 = 10 && R10047 = R10061 && R10048 = 10 && R10049 = R10061 && R10050 = 10 && R10051 = R10061 && R10052 = 10 && R10053 = R10061 && R10054 = 10 && R10055 = R10061 && R10056 = 10 && R10057 = R10061 && R10058 = 10 && R10059 = R10061 && R10060 = 10 && R43 + R42 != 0 && R45 + R44 != 0 && R8689 + R8686 + R9931 + R9928 != 0 && R8 < 1 && R14 < 1 && R15 < 1 && R18 < 1 && R21 < 1 && R24 < 1 && -1*R407 + -1*R406 < 1 && R409 + R408 < 1 && 0 < R9955 && 9 < R10061 && (R407 + R406 != 0 || R419 + R416 = 0 || (R412 + R410 = 0 && R413 + R411 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R417 + R414 = 0 && R418 + R415 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R6618 + R6616 = 0 && R6619 + R6617 = 0)) && (R407 + R406 != 0 || R419 + R416 = 0 || (R8687 + R8684 = 0 && R8688 + R8685 = 0)) && (R412 + R410 != 0 || R407 + R406 + -1*R413 + -1*R411 = 0 || R407 + R406 < 1) && (R417 + R414 != 0 || R407 + R406 + -1*R418 + -1*R415 = 0 || R407 + R406 < 1) && (R6618 + R6616 != 0 || R407 + R406 + -1*R6619 + -1*R6617 = 0 || R407 + R406 < 1) && (R8687 + R8684 != 0 || R407 + R406 + -1*R8688 + -1*R8685 = 0 || R407 + R406 < 1) && (R27 = 0 || (R68 = 0 && R69 = 0)) && (R28 = 0 || (R84 = 0 && R85 = 0)) && (R33 = 0 || (R74 = 0 && R75 = 0)) && (R33 = 0 || (R76 = 0 && R77 = 0)) && (R34 = 0 || (R9968 = 0 && R9969 = 0)) && (R34 = 0 || (R9972 = 0 && R9973 = 0)) && (R34 = 0 || (R9974 = 0 && R9975 = 0)) && (R34 = 0 || (R9976 = 0 && R9977 = 0)) && (R34 = 0 || (R9978 = 0 && R9979 = 0)) && (R34 = 0 || (R9986 = 0 && R9987 = 0)) && (R36 = 0 || (R78 = 0 && R79 = 0)) && (R37 = 0 || (R80 = 0 && R81 = 0)) && (R37 = 0 || (R82 = 0 && R83 = 0)) && (R412 + R410 = 0 || R407 + R406 < 1) && (R417 + R414 = 0 || R407 + R406 < 1) && (R6618 + R6616 = 0 || R407 + R406 < 1) && (R8687 + R8684 = 0 || R407 + R406 < 1) && (R9381 + R9378 = 0 || (R9379 + R9376 = 0 && R9380 + R9377 = 0)) && (R9381 + R9378 = 0 || (R9929 + R9926 = 0 && R9930 + R9927 = 0));
// End of Parikh automata intersection problem
