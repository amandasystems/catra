// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R4;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 42] { R26 += 1 };
  s0 -> s0 [0, 65535] { R25 += 1, R26 += 1 };
  s0 -> s2 [43, 43] { R26 += 1 };
  s0 -> s1 [44, 45] { R26 += 1 };
  s0 -> s3 [46, 46] { R26 += 1 };
  s0 -> s1 [48, 65535] { R26 += 1 };
  s1 -> s1 [0, 42] { R26 += 1 };
  s1 -> s2 [43, 43] { R26 += 1 };
  s1 -> s1 [44, 45] { R26 += 1 };
  s1 -> s3 [46, 46] { R26 += 1 };
  s1 -> s1 [48, 65535] { R26 += 1 };
  s2 -> s2 [0, 45] { R26 += 1 };
  s2 -> s9 [46, 46] { R26 += 1 };
  s2 -> s2 [48, 65535] { R26 += 1 };
  s3 -> s1 [0, 42] { R26 += 1 };
  s3 -> s2 [43, 43] { R26 += 1 };
  s3 -> s1 [44, 45] { R26 += 1 };
  s3 -> s3 [46, 46] { R26 += 1 };
  s3 -> s1 [48, 114] { R26 += 1 };
  s3 -> s4 [115, 115] { R26 += 1 };
  s3 -> s1 [116, 65535] { R26 += 1 };
  s4 -> s1 [0, 42] { R26 += 1 };
  s4 -> s2 [43, 43] { R26 += 1 };
  s4 -> s1 [44, 45] { R26 += 1 };
  s4 -> s3 [46, 46] { R26 += 1 };
  s4 -> s1 [48, 110] { R26 += 1 };
  s4 -> s5 [111, 111] { R26 += 1 };
  s4 -> s1 [112, 65535] { R26 += 1 };
  s5 -> s1 [0, 42] { R26 += 1 };
  s5 -> s2 [43, 43] { R26 += 1 };
  s5 -> s1 [44, 45] { R26 += 1 };
  s5 -> s3 [46, 46] { R26 += 1 };
  s5 -> s1 [48, 98] { R26 += 1 };
  s5 -> s6 [99, 99] { R26 += 1 };
  s5 -> s1 [100, 65535] { R26 += 1 };
  s6 -> s1 [0, 42] { R26 += 1 };
  s6 -> s2 [43, 43] { R26 += 1 };
  s6 -> s1 [44, 45] { R26 += 1 };
  s6 -> s3 [46, 46] { R26 += 1 };
  s6 -> s1 [48, 106] { R26 += 1 };
  s6 -> s7 [107, 107] { R26 += 1 };
  s6 -> s1 [108, 65535] { R26 += 1 };
  s7 -> s7 [0, 42] { R26 += 1 };
  s7 -> s8 [43, 43] { R26 += 1 };
  s7 -> s7 [44, 46] { R26 += 1 };
  s7 -> s7 [48, 65535] { R26 += 1 };
  s8 -> s8 [0, 46] { R26 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s8 [48, 65535] { R26 += 1 };
  s9 -> s2 [0, 45] { R26 += 1 };
  s9 -> s9 [46, 46] { R26 += 1 };
  s9 -> s2 [48, 114] { R26 += 1 };
  s9 -> s10 [115, 115] { R26 += 1 };
  s9 -> s2 [116, 65535] { R26 += 1 };
  s10 -> s2 [0, 45] { R26 += 1 };
  s10 -> s9 [46, 46] { R26 += 1 };
  s10 -> s2 [48, 110] { R26 += 1 };
  s10 -> s11 [111, 111] { R26 += 1 };
  s10 -> s2 [112, 65535] { R26 += 1 };
  s11 -> s2 [0, 45] { R26 += 1 };
  s11 -> s9 [46, 46] { R26 += 1 };
  s11 -> s2 [48, 98] { R26 += 1 };
  s11 -> s12 [99, 99] { R26 += 1 };
  s11 -> s2 [100, 65535] { R26 += 1 };
  s12 -> s2 [0, 45] { R26 += 1 };
  s12 -> s9 [46, 46] { R26 += 1 };
  s12 -> s2 [48, 106] { R26 += 1 };
  s12 -> s8 [107, 107] { R26 += 1 };
  s12 -> s2 [108, 65535] { R26 += 1 };
  accepting s8;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 42] { R30 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R30 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [43, 43] { R30 += 1 };
  s0 -> s1 [44, 65535] { R30 += 1, R4 += 1 };
  s1 -> s1 [0, 42] { R30 += 1, R4 += 1 };
  s1 -> s3 [43, 43] { R30 += 1 };
  s1 -> s1 [44, 65535] { R30 += 1, R4 += 1 };
  s2 -> s1 [0, 42] { R30 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R30 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [43, 43] { R30 += 1 };
  s2 -> s1 [44, 65535] { R30 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R30 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 42] { R32 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R32 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s3 [43, 43] { R32 += 1, R22 += 1 };
  s0 -> s1 [44, 65535] { R32 += 1, R22 += 1 };
  s1 -> s1 [0, 42] { R32 += 1, R22 += 1 };
  s1 -> s3 [43, 43] { R32 += 1, R22 += 1 };
  s1 -> s1 [44, 65535] { R32 += 1, R22 += 1 };
  s2 -> s1 [0, 42] { R32 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R32 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [43, 43] { R32 += 1, R22 += 1 };
  s2 -> s1 [44, 65535] { R32 += 1, R22 += 1 };
  s3 -> s4 [0, 65535] { R32 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R32 += 1, R22 += 1 };
  s4 -> s4 [0, 65535] { R32 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R24 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R34 += 1, R23 += 1, R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R24 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R34 += 1, R24 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R34 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R34 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R22 && R1 = R34 && R3 = 0 && R4 - R21 = -1 && R25 = 10 && R26 = R34 && R27 = 10 && R28 = R34 && R29 = 10 && R30 = R34 && R31 = 10 && R32 = R34 && R33 = 10 && R21 - R22 < 1 && -1 < R21 && 0 < R22 && 9 < R34 && (R21 != R23 || R22 = R24 || ((R20 != 0 || R22 - R23 < 1 || R23 < 0) && (R20 = 0 || R22 < R23 || R23 < 0))) && (R21 = R23 || (R20 = 0 && R21 = R22));
// End of Parikh automata intersection problem
