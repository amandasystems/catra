// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R2, R3, R6, R7, R8, R9;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 64];
  s0 -> s2 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s0 [0, 43];
  s1 -> s0 [45, 46];
  s1 -> s5 [47, 47];
  s1 -> s0 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s0 [59, 64];
  s1 -> s2 [65, 65];
  s1 -> s0 [66, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s3 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s4 [47, 47];
  s3 -> s2 [48, 57];
  s3 -> s3 [58, 58];
  s3 -> s2 [59, 65535];
  s4 -> s2 [0, 43];
  s4 -> s2 [45, 46];
  s4 -> s2 [48, 57];
  s4 -> s3 [58, 58];
  s4 -> s2 [59, 65535];
  s5 -> s0 [0, 43];
  s5 -> s0 [45, 46];
  s5 -> s0 [48, 57];
  s5 -> s1 [58, 58];
  s5 -> s0 [59, 64];
  s5 -> s2 [65, 65];
  s5 -> s0 [66, 65535];
  accepting s2, s3, s4;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57];
  s0 -> s0 [0, 65535] { R2 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535];
  s1 -> s1 [0, 57];
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 90] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [91, 91] { R8 += 1 };
  s0 -> s1 [92, 65535] { R8 += 1 };
  s1 -> s1 [0, 65535] { R8 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R10 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R10 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 64] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [65, 65] { R12 += 1 };
  s0 -> s1 [66, 65535] { R12 += 1 };
  s1 -> s1 [0, 64] { R12 += 1 };
  s1 -> s2 [65, 65] { R12 += 1 };
  s1 -> s1 [66, 65535] { R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R14 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R14 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R14 && R7 = 0 && R8 = 1 && R9 = 0 && R10 = 1 && R11 = 0 && R12 = R14 && R13 = 0 && R2 < 1 && R3 < 1 && 0 < R14;
// End of Parikh automata intersection problem
