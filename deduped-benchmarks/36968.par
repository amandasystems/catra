// Parikh automata intersection problem, generated by OSTRICH+
counter int R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R21, R210, R211, R212, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R4, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 65];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [66, 66];
  s0 -> s1 [67, 65535];
  s1 -> s1 [0, 65];
  s1 -> s2 [66, 66];
  s1 -> s1 [67, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R48 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s1 -> s1 [0, 65535] { R48 += 1, R25 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 107] { R50 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s2 [108, 108] { R50 += 1 };
  s0 -> s1 [109, 65535] { R50 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1 };
  s2 -> s1 [0, 110] { R50 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s3 [111, 111] { R50 += 1 };
  s2 -> s1 [112, 65535] { R50 += 1 };
  s3 -> s1 [0, 98] { R50 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [99, 99] { R50 += 1 };
  s3 -> s1 [100, 65535] { R50 += 1 };
  s4 -> s1 [0, 96] { R50 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s5 [97, 97] { R50 += 1 };
  s4 -> s1 [98, 65535] { R50 += 1 };
  s5 -> s1 [0, 107] { R50 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s6 [108, 108] { R50 += 1 };
  s5 -> s1 [109, 65535] { R50 += 1 };
  s6 -> s1 [0, 103] { R50 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s7 [104, 104] { R50 += 1 };
  s6 -> s1 [105, 65535] { R50 += 1 };
  s7 -> s1 [0, 110] { R50 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s8 [111, 111] { R50 += 1 };
  s7 -> s1 [112, 65535] { R50 += 1 };
  s8 -> s1 [0, 114] { R50 += 1 };
  s8 -> s8 [0, 65535];
  s8 -> s9 [115, 115] { R50 += 1 };
  s8 -> s1 [116, 65535] { R50 += 1 };
  s9 -> s1 [0, 115] { R50 += 1 };
  s9 -> s9 [0, 65535];
  s9 -> s10 [116, 116] { R50 += 1 };
  s9 -> s1 [117, 65535] { R50 += 1 };
  s10 -> s1 [0, 65535] { R50 += 1 };
  s11 -> s11 [0, 65535];
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0, s11;
};
automaton uri_5 {
  init s0;
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s1 [0, 65535] { R52 += 1, R32 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R52 += 1, R32 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_6 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [0, 65535] { R60 += 1, R26 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R60 += 1, R26 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65] { R62 += 1, R31 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s2 [66, 66] { R62 += 1, R31 += 1 };
  s0 -> s3 [66, 66] { R62 += 1, R31 += 1 };
  s0 -> s1 [67, 65535] { R62 += 1, R31 += 1 };
  s1 -> s1 [0, 65] { R62 += 1, R31 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [66, 66] { R62 += 1, R31 += 1 };
  s1 -> s3 [66, 66] { R62 += 1, R31 += 1 };
  s1 -> s1 [67, 65535] { R62 += 1, R31 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R62 += 1, R31 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 43] { R146 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s1 [45, 45] { R146 += 1 };
  s0 -> s2 [46, 46] { R146 += 1 };
  s0 -> s1 [48, 62] { R146 += 1 };
  s0 -> s3 [65, 65] { R146 += 1 };
  s0 -> s1 [66, 65535] { R146 += 1 };
  s1 -> s1 [0, 43] { R146 += 1 };
  s1 -> s1 [45, 45] { R146 += 1 };
  s1 -> s2 [46, 46] { R146 += 1 };
  s1 -> s1 [48, 62] { R146 += 1 };
  s1 -> s3 [65, 65] { R146 += 1 };
  s1 -> s1 [66, 65535] { R146 += 1 };
  s2 -> s1 [0, 43] { R146 += 1 };
  s2 -> s1 [45, 45] { R146 += 1 };
  s2 -> s2 [46, 46] { R146 += 1 };
  s2 -> s1 [48, 62] { R146 += 1 };
  s2 -> s3 [65, 65] { R146 += 1 };
  s2 -> s1 [66, 114] { R146 += 1 };
  s2 -> s8 [115, 115] { R146 += 1 };
  s2 -> s1 [116, 65535] { R146 += 1 };
  s3 -> s3 [0, 43] { R146 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R146 += 1 };
  s3 -> s4 [46, 46] { R146 += 1 };
  s3 -> s3 [48, 62] { R146 += 1 };
  s3 -> s3 [65, 65535] { R146 += 1 };
  s4 -> s3 [0, 43] { R146 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R146 += 1 };
  s4 -> s4 [46, 46] { R146 += 1 };
  s4 -> s3 [48, 62] { R146 += 1 };
  s4 -> s3 [65, 114] { R146 += 1 };
  s4 -> s5 [115, 115] { R146 += 1 };
  s4 -> s3 [116, 65535] { R146 += 1 };
  s5 -> s3 [0, 43] { R146 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R146 += 1 };
  s5 -> s4 [46, 46] { R146 += 1 };
  s5 -> s3 [48, 62] { R146 += 1 };
  s5 -> s3 [65, 110] { R146 += 1 };
  s5 -> s6 [111, 111] { R146 += 1 };
  s5 -> s3 [112, 65535] { R146 += 1 };
  s6 -> s3 [0, 43] { R146 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R146 += 1 };
  s6 -> s4 [46, 46] { R146 += 1 };
  s6 -> s3 [48, 62] { R146 += 1 };
  s6 -> s3 [65, 98] { R146 += 1 };
  s6 -> s7 [99, 99] { R146 += 1 };
  s6 -> s3 [100, 65535] { R146 += 1 };
  s7 -> s3 [0, 43] { R146 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R146 += 1 };
  s7 -> s4 [46, 46] { R146 += 1 };
  s7 -> s3 [48, 62] { R146 += 1 };
  s7 -> s3 [65, 106] { R146 += 1 };
  s7 -> s3 [108, 65535] { R146 += 1 };
  s8 -> s1 [0, 43] { R146 += 1 };
  s8 -> s1 [45, 45] { R146 += 1 };
  s8 -> s2 [46, 46] { R146 += 1 };
  s8 -> s1 [48, 62] { R146 += 1 };
  s8 -> s3 [65, 65] { R146 += 1 };
  s8 -> s1 [66, 110] { R146 += 1 };
  s8 -> s9 [111, 111] { R146 += 1 };
  s8 -> s1 [112, 65535] { R146 += 1 };
  s9 -> s1 [0, 43] { R146 += 1 };
  s9 -> s1 [45, 45] { R146 += 1 };
  s9 -> s2 [46, 46] { R146 += 1 };
  s9 -> s1 [48, 62] { R146 += 1 };
  s9 -> s3 [65, 65] { R146 += 1 };
  s9 -> s1 [66, 98] { R146 += 1 };
  s9 -> s10 [99, 99] { R146 += 1 };
  s9 -> s1 [100, 65535] { R146 += 1 };
  s10 -> s1 [0, 43] { R146 += 1 };
  s10 -> s1 [45, 45] { R146 += 1 };
  s10 -> s2 [46, 46] { R146 += 1 };
  s10 -> s1 [48, 62] { R146 += 1 };
  s10 -> s3 [65, 65] { R146 += 1 };
  s10 -> s1 [66, 106] { R146 += 1 };
  s10 -> s1 [108, 65535] { R146 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_10 {
  init s0;
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s1 [0, 65535] { R148 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R148 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 57] { R150 += 1 };
  s0 -> s0 [0, 65535] { R149 += 1, R150 += 1 };
  s0 -> s2 [0, 65535] { R150 += 1, R9 += 1 };
  s0 -> s3 [58, 58] { R150 += 1 };
  s0 -> s1 [59, 65535] { R150 += 1 };
  s1 -> s1 [0, 57] { R150 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R150 += 1 };
  s1 -> s1 [59, 65535] { R150 += 1 };
  s2 -> s1 [0, 57] { R150 += 1 };
  s2 -> s2 [0, 65535] { R150 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R150 += 1 };
  s2 -> s1 [59, 65535] { R150 += 1 };
  s3 -> s3 [0, 65535] { R150 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 42] { R152 += 1 };
  s0 -> s0 [0, 65535] { R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R152 += 1, R10 += 1 };
  s0 -> s3 [43, 43] { R152 += 1 };
  s0 -> s1 [44, 65535] { R152 += 1 };
  s1 -> s1 [0, 42] { R152 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [43, 43] { R152 += 1 };
  s1 -> s1 [44, 65535] { R152 += 1 };
  s2 -> s1 [0, 42] { R152 += 1 };
  s2 -> s2 [0, 65535] { R152 += 1, R10 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [43, 43] { R152 += 1 };
  s2 -> s1 [44, 65535] { R152 += 1 };
  s3 -> s3 [0, 65535] { R152 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 64] { R154 += 1 };
  s0 -> s2 [0, 65535] { R154 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s3 [65, 65] { R154 += 1 };
  s0 -> s1 [66, 65535] { R154 += 1 };
  s1 -> s1 [0, 64] { R154 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R154 += 1 };
  s1 -> s1 [66, 65535] { R154 += 1 };
  s2 -> s1 [0, 64] { R154 += 1 };
  s2 -> s2 [0, 65535] { R154 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R154 += 1 };
  s2 -> s1 [66, 65535] { R154 += 1 };
  s3 -> s3 [0, 65535] { R154 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 90] { R156 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R156 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s3 [91, 91] { R156 += 1, R28 += 1 };
  s0 -> s1 [92, 65535] { R156 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R156 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R156 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R156 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R156 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R156 += 1, R28 += 1 };
  s2 -> s1 [92, 65535] { R156 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R156 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R156 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R158 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R158 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R158 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [0, 65535] { R158 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R158 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R158 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R158 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R160 += 1, R43 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R44 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R160 += 1, R43 += 1, R44 += 1 };
  s1 -> s2 [0, 65535] { R160 += 1, R44 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R160 += 1, R44 += 1, R21 += 1 };
  s2 -> s4 [0, 65535] { R160 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R160 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s1 [0, 65535] { R162 += 1, R45 += 1, R46 += 1 };
  s0 -> s2 [108, 108] { R162 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R45 += 1, R46 += 1 };
  s1 -> s2 [108, 108] { R162 += 1, R46 += 1 };
  s2 -> s3 [111, 111] { R162 += 1, R46 += 1 };
  s3 -> s4 [99, 99] { R162 += 1, R46 += 1 };
  s4 -> s5 [97, 97] { R162 += 1, R46 += 1 };
  s5 -> s6 [108, 108] { R162 += 1, R46 += 1 };
  s6 -> s7 [104, 104] { R162 += 1, R46 += 1 };
  s7 -> s8 [111, 111] { R162 += 1, R46 += 1 };
  s8 -> s9 [115, 115] { R162 += 1, R46 += 1 };
  s9 -> s10 [116, 116] { R162 += 1, R46 += 1 };
  s10 -> s10 [0, 65535] { R162 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s10, s11;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R164 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R58 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s1 -> s1 [0, 65535] { R164 += 1, R57 += 1, R58 += 1 };
  s1 -> s2 [0, 65535] { R164 += 1, R58 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R164 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R58 += 1, R23 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R166 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R166 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R168 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R99 += 1, R100 += 1 };
  s0 -> s1 [66, 65535] { R168 += 1, R100 += 1 };
  s1 -> s1 [0, 64] { R168 += 1, R100 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R168 += 1, R100 += 1 };
  s2 -> s1 [0, 64] { R168 += 1, R100 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R99 += 1, R100 += 1 };
  s2 -> s1 [66, 65535] { R168 += 1, R100 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R170 += 1, R102 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R101 += 1, R102 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1, R102 += 1, R22 += 1 };
  s1 -> s4 [0, 65535] { R170 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R170 += 1, R102 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R170 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R170 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65] { R172 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R103 += 1, R104 += 1 };
  s0 -> s3 [80, 80] { R172 += 1, R104 += 1 };
  s0 -> s1 [81, 65535] { R172 += 1, R104 += 1 };
  s1 -> s1 [0, 65] { R172 += 1, R104 += 1 };
  s1 -> s3 [80, 80] { R172 += 1, R104 += 1 };
  s1 -> s1 [81, 65535] { R172 += 1, R104 += 1 };
  s2 -> s1 [0, 65] { R172 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [80, 80] { R172 += 1, R104 += 1 };
  s2 -> s1 [81, 65535] { R172 += 1, R104 += 1 };
  s3 -> s3 [0, 65] { R172 += 1, R104 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [80, 65535] { R172 += 1, R104 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s1 [0, 65535] { R174 += 1, R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R106 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R105 += 1, R106 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R174 += 1, R106 += 1, R64 += 1 };
  s2 -> s3 [0, 65535] { R174 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R174 += 1, R106 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R174 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 79] { R176 += 1, R108 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R108 += 1, R66 += 1 };
  s0 -> s3 [0, 65535] { R176 += 1, R107 += 1, R108 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s1 [81, 65535] { R176 += 1, R108 += 1 };
  s1 -> s1 [0, 79] { R176 += 1, R108 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R176 += 1, R108 += 1 };
  s2 -> s1 [0, 79] { R176 += 1, R108 += 1 };
  s2 -> s5 [0, 65535] { R176 += 1 };
  s2 -> s2 [0, 65535] { R176 += 1, R108 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R176 += 1, R108 += 1 };
  s3 -> s1 [0, 79] { R176 += 1, R108 += 1 };
  s3 -> s2 [0, 65535] { R176 += 1, R108 += 1, R66 += 1 };
  s3 -> s3 [0, 65535] { R176 += 1, R107 += 1, R108 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R176 += 1, R108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R176 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 79] { R178 += 1, R110 += 1, R70 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R110 += 1, R69 += 1, R70 += 1 };
  s0 -> s3 [0, 65535] { R178 += 1, R109 += 1, R110 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [81, 65535] { R178 += 1, R110 += 1, R70 += 1 };
  s1 -> s1 [0, 79] { R178 += 1, R110 += 1, R70 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R178 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R110 += 1 };
  s1 -> s1 [81, 65535] { R178 += 1, R110 += 1, R70 += 1 };
  s2 -> s1 [0, 79] { R178 += 1, R110 += 1, R70 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R110 += 1, R69 += 1, R70 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R178 += 1 };
  s2 -> s1 [81, 65535] { R178 += 1, R110 += 1, R70 += 1 };
  s3 -> s1 [0, 79] { R178 += 1, R110 += 1, R70 += 1 };
  s3 -> s2 [0, 65535] { R178 += 1, R110 += 1, R69 += 1, R70 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R178 += 1, R109 += 1, R110 += 1 };
  s3 -> s1 [81, 65535] { R178 += 1, R110 += 1, R70 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R178 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s1 [0, 65535] { R180 += 1, R112 += 1, R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R111 += 1, R112 += 1 };
  s0 -> s3 [0, 65535] { R180 += 1, R112 += 1, R74 += 1, R75 += 1 };
  s1 -> s4 [0, 65535] { R180 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R112 += 1, R75 += 1, R76 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R180 += 1, R112 += 1 };
  s2 -> s1 [0, 65535] { R180 += 1, R112 += 1, R75 += 1, R76 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R180 += 1, R111 += 1, R112 += 1 };
  s2 -> s3 [0, 65535] { R180 += 1, R112 += 1, R74 += 1, R75 += 1 };
  s3 -> s4 [0, 65535] { R180 += 1 };
  s3 -> s1 [0, 65535] { R180 += 1, R112 += 1, R75 += 1, R76 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R180 += 1, R112 += 1, R74 += 1, R75 += 1 };
  s4 -> s4 [0, 65535] { R180 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R180 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R180 += 1, R112 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R114 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [0, 65535] { R182 += 1, R113 += 1, R114 += 1 };
  s0 -> s1 [91, 107] { R182 += 1, R114 += 1, R80 += 1 };
  s0 -> s4 [108, 108] { R182 += 1, R114 += 1, R80 += 1 };
  s0 -> s1 [109, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s1 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R182 += 1 };
  s1 -> s1 [0, 65535] { R182 += 1, R114 += 1 };
  s1 -> s1 [91, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s2 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R182 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R114 += 1, R79 += 1, R80 += 1 };
  s2 -> s1 [91, 107] { R182 += 1, R114 += 1, R80 += 1 };
  s2 -> s4 [108, 108] { R182 += 1, R114 += 1, R80 += 1 };
  s2 -> s1 [109, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s3 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R182 += 1, R114 += 1, R79 += 1, R80 += 1 };
  s3 -> s3 [0, 65535] { R182 += 1, R113 += 1, R114 += 1 };
  s3 -> s1 [91, 107] { R182 += 1, R114 += 1, R80 += 1 };
  s3 -> s4 [108, 108] { R182 += 1, R114 += 1, R80 += 1 };
  s3 -> s1 [109, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s4 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R182 += 1, R114 += 1 };
  s4 -> s6 [0, 65535] { R182 += 1 };
  s4 -> s1 [91, 110] { R182 += 1, R114 += 1, R80 += 1 };
  s4 -> s7 [111, 111] { R182 += 1, R114 += 1, R80 += 1 };
  s4 -> s1 [112, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R182 += 1 };
  s7 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s7 -> s7 [0, 65535] { R182 += 1, R114 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R182 += 1 };
  s7 -> s1 [91, 98] { R182 += 1, R114 += 1, R80 += 1 };
  s7 -> s8 [99, 99] { R182 += 1, R114 += 1, R80 += 1 };
  s7 -> s1 [100, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s8 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R182 += 1 };
  s8 -> s8 [0, 65535] { R182 += 1, R114 += 1 };
  s8 -> s1 [91, 96] { R182 += 1, R114 += 1, R80 += 1 };
  s8 -> s9 [97, 97] { R182 += 1, R114 += 1, R80 += 1 };
  s8 -> s1 [98, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s9 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R182 += 1 };
  s9 -> s9 [0, 65535] { R182 += 1, R114 += 1 };
  s9 -> s1 [91, 107] { R182 += 1, R114 += 1, R80 += 1 };
  s9 -> s10 [108, 108] { R182 += 1, R114 += 1, R80 += 1 };
  s9 -> s1 [109, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s10 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R182 += 1 };
  s10 -> s10 [0, 65535] { R182 += 1, R114 += 1 };
  s10 -> s1 [91, 103] { R182 += 1, R114 += 1, R80 += 1 };
  s10 -> s11 [104, 104] { R182 += 1, R114 += 1, R80 += 1 };
  s10 -> s1 [105, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s11 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R182 += 1 };
  s11 -> s11 [0, 65535] { R182 += 1, R114 += 1 };
  s11 -> s1 [91, 110] { R182 += 1, R114 += 1, R80 += 1 };
  s11 -> s12 [111, 111] { R182 += 1, R114 += 1, R80 += 1 };
  s11 -> s1 [112, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s12 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s12 -> s12 [0, 65535] { R182 += 1, R114 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R182 += 1 };
  s12 -> s1 [91, 114] { R182 += 1, R114 += 1, R80 += 1 };
  s12 -> s13 [115, 115] { R182 += 1, R114 += 1, R80 += 1 };
  s12 -> s1 [116, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s13 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s13 -> s13 [0, 65535] { R182 += 1, R114 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R182 += 1 };
  s13 -> s1 [91, 115] { R182 += 1, R114 += 1, R80 += 1 };
  s13 -> s14 [116, 116] { R182 += 1, R114 += 1, R80 += 1 };
  s13 -> s1 [117, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  s14 -> s1 [0, 80] { R182 += 1, R114 += 1, R80 += 1 };
  s14 -> s1 [91, 65535] { R182 += 1, R114 += 1, R80 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 65535] { R184 += 1, R116 += 1, R85 += 1, R86 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R116 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [0, 65535] { R184 += 1, R115 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R184 += 1, R116 += 1, R85 += 1, R86 += 1 };
  s1 -> s5 [0, 65535] { R184 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R184 += 1, R116 += 1 };
  s2 -> s1 [0, 65535] { R184 += 1, R116 += 1, R85 += 1, R86 += 1 };
  s2 -> s5 [0, 65535] { R184 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R184 += 1, R116 += 1, R84 += 1, R85 += 1 };
  s3 -> s1 [0, 65535] { R184 += 1, R116 += 1, R85 += 1, R86 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R184 += 1, R116 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R115 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R184 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R184 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R184 += 1, R116 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 65535] { R186 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R118 += 1, R90 += 1, R91 += 1 };
  s0 -> s3 [0, 65535] { R186 += 1, R118 += 1, R91 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1, R117 += 1, R118 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R186 += 1, R118 += 1, R90 += 1, R91 += 1 };
  s1 -> s3 [0, 65535] { R186 += 1, R118 += 1, R91 += 1, R92 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R186 += 1 };
  s2 -> s2 [0, 65535] { R186 += 1, R118 += 1, R90 += 1, R91 += 1 };
  s2 -> s3 [0, 65535] { R186 += 1, R118 += 1, R91 += 1, R92 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R186 += 1, R118 += 1 };
  s3 -> s6 [0, 65535] { R186 += 1 };
  s3 -> s3 [0, 65535] { R186 += 1, R118 += 1, R91 += 1, R92 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R186 += 1, R118 += 1 };
  s5 -> s6 [0, 65535] { R186 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R186 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s1 [0, 65535] { R188 += 1, R119 += 1, R120 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R120 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1, R119 += 1, R120 += 1 };
  s1 -> s2 [0, 65535] { R188 += 1, R120 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R188 += 1, R120 += 1 };
  s2 -> s3 [0, 65535] { R188 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R188 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 79] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R122 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [0, 65535] { R190 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s4 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s0 -> s5 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s0 -> s1 [81, 65535] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 79] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R190 += 1, R122 += 1 };
  s1 -> s6 [0, 65535] { R190 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s1 -> s5 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s1 -> s1 [81, 65535] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [0, 79] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R122 += 1, R96 += 1, R97 += 1 };
  s2 -> s6 [0, 65535] { R190 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s2 -> s5 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s2 -> s1 [81, 65535] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s3 -> s1 [0, 79] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s3 -> s2 [0, 65535] { R190 += 1, R122 += 1, R96 += 1, R97 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R190 += 1, R121 += 1, R122 += 1 };
  s3 -> s4 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s3 -> s5 [80, 80] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s3 -> s1 [81, 65535] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s4 -> s8 [0, 65535] { R190 += 1, R122 += 1 };
  s4 -> s6 [0, 65535] { R190 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R190 += 1, R122 += 1, R97 += 1, R98 += 1 };
  s5 -> s6 [0, 65535] { R190 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R190 += 1, R122 += 1 };
  s6 -> s6 [0, 65535] { R190 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R190 += 1, R122 += 1 };
  s8 -> s6 [0, 65535] { R190 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 65535] { R192 += 1, R124 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R123 += 1, R124 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R192 += 1, R124 += 1, R24 += 1 };
  s1 -> s4 [0, 65535] { R192 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R192 += 1, R124 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1, R123 += 1, R124 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R192 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R194 += 1, R126 += 1 };
  s0 -> s2 [0, 65535] { R194 += 1, R125 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s0 -> s3 [65, 65] { R194 += 1, R126 += 1 };
  s0 -> s4 [65, 65] { R194 += 1, R126 += 1 };
  s0 -> s1 [81, 65535] { R194 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R194 += 1, R126 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R194 += 1, R126 += 1 };
  s1 -> s4 [65, 65] { R194 += 1, R126 += 1 };
  s1 -> s1 [81, 65535] { R194 += 1, R126 += 1 };
  s2 -> s1 [0, 64] { R194 += 1, R126 += 1 };
  s2 -> s2 [0, 65535] { R194 += 1, R125 += 1, R126 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R194 += 1, R126 += 1 };
  s2 -> s4 [65, 65] { R194 += 1, R126 += 1 };
  s2 -> s1 [81, 65535] { R194 += 1, R126 += 1 };
  s3 -> s3 [0, 65535] { R194 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R194 += 1, R126 += 1 };
  s4 -> s4 [0, 65535] { R194 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [81, 65535] { R194 += 1, R126 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R196 += 1, R128 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R127 += 1, R128 += 1 };
  s0 -> s3 [65, 65] { R196 += 1, R128 += 1, R63 += 1 };
  s0 -> s4 [65, 65] { R196 += 1, R128 += 1, R63 += 1 };
  s0 -> s1 [66, 65535] { R196 += 1, R128 += 1, R63 += 1 };
  s1 -> s1 [0, 64] { R196 += 1, R128 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R196 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R196 += 1, R128 += 1, R63 += 1 };
  s1 -> s4 [65, 65] { R196 += 1, R128 += 1, R63 += 1 };
  s1 -> s1 [66, 65535] { R196 += 1, R128 += 1, R63 += 1 };
  s2 -> s1 [0, 64] { R196 += 1, R128 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R127 += 1, R128 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R196 += 1, R128 += 1, R63 += 1 };
  s2 -> s4 [65, 65] { R196 += 1, R128 += 1, R63 += 1 };
  s2 -> s1 [66, 65535] { R196 += 1, R128 += 1, R63 += 1 };
  s3 -> s3 [0, 65535] { R196 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R196 += 1 };
  s4 -> s4 [0, 65535] { R196 += 1, R128 += 1, R63 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R196 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R198 += 1, R130 += 1, R65 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R129 += 1, R130 += 1 };
  s0 -> s3 [65, 65] { R198 += 1, R130 += 1, R65 += 1 };
  s0 -> s4 [65, 65] { R198 += 1, R130 += 1, R65 += 1 };
  s0 -> s1 [66, 65535] { R198 += 1, R130 += 1, R65 += 1 };
  s1 -> s1 [0, 64] { R198 += 1, R130 += 1, R65 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R198 += 1, R130 += 1, R65 += 1 };
  s1 -> s4 [65, 65] { R198 += 1, R130 += 1, R65 += 1 };
  s1 -> s1 [66, 65535] { R198 += 1, R130 += 1, R65 += 1 };
  s2 -> s1 [0, 64] { R198 += 1, R130 += 1, R65 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R198 += 1, R129 += 1, R130 += 1 };
  s2 -> s3 [65, 65] { R198 += 1, R130 += 1, R65 += 1 };
  s2 -> s4 [65, 65] { R198 += 1, R130 += 1, R65 += 1 };
  s2 -> s1 [66, 65535] { R198 += 1, R130 += 1, R65 += 1 };
  s3 -> s3 [0, 65535] { R198 += 1, R130 += 1, R65 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R198 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R198 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R198 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s3 [65, 65] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [65, 65] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [66, 65535] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 64] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [65, 65] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [66, 65535] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 64] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R200 += 1, R131 += 1, R132 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [65, 65] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [66, 65535] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R200 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R200 += 1, R132 += 1, R67 += 1, R68 += 1 };
  s4 -> s5 [0, 65535] { R200 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R200 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s0 -> s2 [0, 65535] { R202 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s0 -> s3 [65, 65] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s0 -> s4 [65, 65] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s0 -> s1 [66, 65535] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s1 -> s1 [0, 64] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R202 += 1 };
  s1 -> s3 [65, 65] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s1 -> s4 [65, 65] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s1 -> s1 [66, 65535] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s2 -> s1 [0, 64] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s2 -> s2 [0, 65535] { R202 += 1, R133 += 1, R134 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s2 -> s4 [65, 65] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s2 -> s1 [66, 65535] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R202 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R202 += 1 };
  s4 -> s4 [0, 65535] { R202 += 1, R134 += 1, R71 += 1, R72 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R202 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s2 [0, 65535] { R204 += 1, R135 += 1, R136 += 1 };
  s0 -> s3 [65, 65] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s0 -> s4 [65, 65] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s0 -> s1 [66, 65535] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [0, 64] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R204 += 1 };
  s1 -> s3 [65, 65] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [65, 65] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s1 -> s1 [66, 65535] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s2 -> s1 [0, 64] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R204 += 1, R135 += 1, R136 += 1 };
  s2 -> s3 [65, 65] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s2 -> s4 [65, 65] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s2 -> s1 [66, 65535] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s3 -> s6 [0, 65535] { R204 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R204 += 1, R136 += 1, R77 += 1, R78 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R204 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R204 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R137 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s3 [65, 65] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s0 -> s4 [65, 65] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R206 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s1 -> s4 [65, 65] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 64] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R137 += 1, R138 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s2 -> s4 [65, 65] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [66, 65535] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s3 -> s3 [0, 65535] { R206 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R206 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R206 += 1, R138 += 1, R81 += 1, R82 += 1 };
  s5 -> s5 [0, 65535] { R206 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R139 += 1, R140 += 1 };
  s0 -> s3 [65, 65] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s0 -> s4 [65, 65] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s0 -> s1 [66, 65535] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s1 -> s1 [0, 64] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R208 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s1 -> s4 [65, 65] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s1 -> s1 [66, 65535] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [0, 64] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R208 += 1, R139 += 1, R140 += 1 };
  s2 -> s3 [65, 65] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s2 -> s4 [65, 65] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s2 -> s1 [66, 65535] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s3 -> s6 [0, 65535] { R208 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R208 += 1, R140 += 1, R87 += 1, R88 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R208 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R208 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_41 {
  init s0;
  s0 -> s1 [0, 64] { R210 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R141 += 1, R142 += 1 };
  s0 -> s3 [65, 65] { R210 += 1, R142 += 1 };
  s0 -> s4 [65, 65] { R210 += 1, R142 += 1 };
  s0 -> s1 [66, 65535] { R210 += 1, R142 += 1 };
  s1 -> s1 [0, 64] { R210 += 1, R142 += 1 };
  s1 -> s1 [0, 65535] { R210 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R210 += 1, R142 += 1 };
  s1 -> s4 [65, 65] { R210 += 1, R142 += 1 };
  s1 -> s1 [66, 65535] { R210 += 1, R142 += 1 };
  s2 -> s1 [0, 64] { R210 += 1, R142 += 1 };
  s2 -> s2 [0, 65535] { R210 += 1, R141 += 1, R142 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R210 += 1, R142 += 1 };
  s2 -> s4 [65, 65] { R210 += 1, R142 += 1 };
  s2 -> s1 [66, 65535] { R210 += 1, R142 += 1 };
  s3 -> s3 [0, 65535] { R210 += 1, R142 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R210 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R210 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R210 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_42 {
  init s0;
  s0 -> s1 [0, 64] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s3 [65, 65] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s0 -> s4 [65, 65] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s0 -> s1 [66, 65535] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [0, 64] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R212 += 1 };
  s1 -> s3 [65, 65] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s1 -> s4 [65, 65] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s1 -> s1 [66, 65535] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s2 -> s1 [0, 64] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R212 += 1, R143 += 1, R144 += 1 };
  s2 -> s3 [65, 65] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s2 -> s4 [65, 65] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s2 -> s1 [66, 65535] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R212 += 1, R144 += 1, R93 += 1, R94 += 1 };
  s3 -> s6 [0, 65535] { R212 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R212 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R212 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P84
automaton P84_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
constraint R3 = R122 && R4 = R212 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R43 = 0 && R44 = R122 && R45 = 0 && R46 = R122 && R47 = 0 && R48 = R212 && R49 = 0 && R50 = R212 && R51 = 0 && R52 = R212 && R99 = 0 && R100 = R122 && R101 = 0 && R102 = R122 && R103 = 0 && R104 = R122 && R105 = 0 && R106 = R122 && R107 = 0 && R108 = R122 && R109 = 0 && R110 = R122 && R111 = 0 && R112 = R122 && R113 = 0 && R114 = R122 && R115 = 0 && R116 = R122 && R117 = 0 && R118 = R122 && R119 = 0 && R120 = R122 && R121 = 0 && R145 = 10 && R146 = R212 && R147 = 10 && R148 = R212 && R149 = 10 && R150 = R212 && R151 = 10 && R152 = R212 && R153 = 10 && R154 = R212 && R155 = 10 && R156 = R212 && R157 = 10 && R158 = R212 && R159 = 10 && R160 = R212 && R161 = 10 && R162 = R212 && R163 = 10 && R164 = R212 && R165 = 10 && R166 = R212 && R167 = 10 && R168 = R212 && R169 = 10 && R170 = R212 && R171 = 10 && R172 = R212 && R173 = 10 && R174 = R212 && R175 = 10 && R176 = R212 && R177 = 10 && R178 = R212 && R179 = 10 && R180 = R212 && R181 = 10 && R182 = R212 && R183 = 10 && R184 = R212 && R185 = 10 && R186 = R212 && R187 = 10 && R188 = R212 && R189 = 10 && R190 = R212 && R191 = 10 && R192 = R212 && R193 = 10 && R194 = R212 && R195 = 10 && R196 = R212 && R197 = 10 && R198 = R212 && R199 = 10 && R200 = R212 && R201 = 10 && R202 = R212 && R203 = 10 && R204 = R212 && R205 = 10 && R206 = R212 && R207 = 10 && R208 = R212 && R209 = 10 && R210 = R212 && R211 = 10 && R32 + R31 != 0 && R86 + R83 + R98 + R95 != 0 && R9 < 1 && R10 < 1 && R13 < 1 && R16 < 1 && -1*R64 + -1*R63 < 1 && R66 + R65 < 1 && 0 < R122 && 9 < R212 && (R64 + R63 != 0 || R76 + R73 = 0 || (R69 + R67 = 0 && R70 + R68 = 0)) && (R64 + R63 != 0 || R76 + R73 = 0 || (R74 + R71 = 0 && R75 + R72 = 0)) && (R64 + R63 != 0 || R76 + R73 = 0 || (R79 + R77 = 0 && R80 + R78 = 0)) && (R64 + R63 != 0 || R76 + R73 = 0 || (R84 + R81 = 0 && R85 + R82 = 0)) && (R69 + R67 != 0 || R64 + R63 + -1*R70 + -1*R68 = 0 || R64 + R63 < 1) && (R74 + R71 != 0 || R64 + R63 + -1*R75 + -1*R72 = 0 || R64 + R63 < 1) && (R79 + R77 != 0 || R64 + R63 + -1*R80 + -1*R78 = 0 || R64 + R63 < 1) && (R84 + R81 != 0 || R64 + R63 + -1*R85 + -1*R82 = 0 || R64 + R63 < 1) && (R23 = 0 || (R57 = 0 && R58 = 0)) && (R24 = 0 || (R123 = 0 && R124 = 0)) && (R24 = 0 || (R125 = 0 && R126 = 0)) && (R24 = 0 || (R127 = 0 && R128 = 0)) && (R24 = 0 || (R129 = 0 && R130 = 0)) && (R24 = 0 || (R131 = 0 && R132 = 0)) && (R24 = 0 || (R133 = 0 && R134 = 0)) && (R24 = 0 || (R135 = 0 && R136 = 0)) && (R24 = 0 || (R137 = 0 && R138 = 0)) && (R24 = 0 || (R139 = 0 && R140 = 0)) && (R24 = 0 || (R141 = 0 && R142 = 0)) && (R24 = 0 || (R143 = 0 && R144 = 0)) && (R26 = 0 || (R59 = 0 && R60 = 0)) && (R26 = 0 || (R61 = 0 && R62 = 0)) && (R69 + R67 = 0 || R64 + R63 < 1) && (R74 + R71 = 0 || R64 + R63 < 1) && (R79 + R77 = 0 || R64 + R63 < 1) && (R84 + R81 = 0 || R64 + R63 < 1) && (R92 + R89 = 0 || (R90 + R87 = 0 && R91 + R88 = 0)) && (R92 + R89 = 0 || (R96 + R93 = 0 && R97 + R94 = 0));
// End of Parikh automata intersection problem
