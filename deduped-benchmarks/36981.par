// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R7, R8;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 57];
  s0 -> s1 [58, 58];
  s0 -> s0 [59, 65535];
  s1 -> s2 [0, 43];
  s1 -> s2 [45, 46];
  s1 -> s3 [47, 47];
  s1 -> s2 [48, 57];
  s1 -> s1 [58, 58];
  s1 -> s2 [59, 65535];
  s2 -> s2 [0, 43];
  s2 -> s2 [45, 57];
  s2 -> s1 [58, 58];
  s2 -> s2 [59, 65535];
  s3 -> s2 [0, 43];
  s3 -> s2 [45, 46];
  s3 -> s2 [48, 57];
  s3 -> s1 [58, 58];
  s3 -> s2 [59, 65535];
  accepting s1, s2, s3;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 57] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R8 += 1 };
  s1 -> s1 [0, 57] { R8 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 90] { R30 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s0 -> s2 [91, 91] { R30 += 1 };
  s0 -> s1 [92, 65535] { R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R30 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 65535] { R32 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 57] { R38 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s2 [58, 58] { R38 += 1 };
  s0 -> s1 [59, 65535] { R38 += 1 };
  s1 -> s1 [0, 57] { R38 += 1 };
  s1 -> s2 [58, 58] { R38 += 1 };
  s1 -> s1 [59, 65535] { R38 += 1 };
  s2 -> s2 [0, 65535] { R38 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R40 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s1 -> s1 [0, 65535] { R40 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 57] { R42 += 1 };
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R42 += 1, R3 += 1 };
  s0 -> s3 [58, 58] { R42 += 1 };
  s0 -> s1 [59, 65535] { R42 += 1 };
  s1 -> s1 [0, 57] { R42 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R42 += 1 };
  s1 -> s1 [59, 65535] { R42 += 1 };
  s2 -> s1 [0, 57] { R42 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R42 += 1, R3 += 1 };
  s2 -> s3 [58, 58] { R42 += 1 };
  s2 -> s1 [59, 65535] { R42 += 1 };
  s3 -> s3 [0, 65535] { R42 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 57] { R44 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R44 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [58, 58] { R44 += 1, R34 += 1 };
  s0 -> s1 [59, 65535] { R44 += 1, R34 += 1 };
  s1 -> s1 [0, 57] { R44 += 1, R34 += 1 };
  s1 -> s3 [58, 58] { R44 += 1, R34 += 1 };
  s1 -> s1 [59, 65535] { R44 += 1, R34 += 1 };
  s2 -> s1 [0, 57] { R44 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R44 += 1, R33 += 1, R34 += 1 };
  s2 -> s3 [58, 58] { R44 += 1, R34 += 1 };
  s2 -> s1 [59, 65535] { R44 += 1, R34 += 1 };
  s3 -> s4 [0, 65535] { R44 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R44 += 1, R34 += 1 };
  s4 -> s4 [0, 65535] { R44 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R46 += 1, R35 += 1, R36 += 1 };
  s0 -> s2 [0, 65535] { R46 += 1, R36 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R46 += 1, R35 += 1, R36 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R46 += 1, R36 += 1, R28 += 1 };
  s2 -> s3 [0, 65535] { R46 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R46 += 1, R36 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R46 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R34 && R1 = R44 && R7 = 0 && R8 - R43 = -1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R33 = 0 && R37 = R43 && R38 = R44 && R3 < 1 && -1 < R34 && R43 - R44 < 1 && 0 < R43 && (R35 != 0 || R34 = R36 || (R28 = 0 && R34 = 0)) && (R39 != R43 || R40 = R44 || (R34 = 0 && R43 = R44)) && (R41 != R43 || R42 = R44 || (R34 = 0 && R43 = R44)) && (R43 != R45 || R44 = R46 || ((R34 != 0 || R44 - R45 < 1 || R45 < 1) && (R34 < 1 || R44 < R45 || R45 < 1))) && (R35 = 0 || (R28 = 0 && R34 = 0)) && (R39 = R43 || (R34 = 0 && R43 = R44)) && (R41 = R43 || (R34 = 0 && R43 = R44)) && (R43 = R45 || (R34 = 0 && R43 = R44));
// End of Parikh automata intersection problem
