// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R2, R3, R4, R6, R68, R69, R7, R98, R99;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 45] { R111 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s2 [46, 46] { R111 += 1 };
  s0 -> s3 [47, 47] { R111 += 1 };
  s0 -> s1 [48, 65535] { R111 += 1 };
  s1 -> s1 [0, 45] { R111 += 1 };
  s1 -> s2 [46, 46] { R111 += 1 };
  s1 -> s3 [47, 47] { R111 += 1 };
  s1 -> s1 [48, 65535] { R111 += 1 };
  s2 -> s1 [0, 45] { R111 += 1 };
  s2 -> s2 [46, 46] { R111 += 1 };
  s2 -> s3 [47, 47] { R111 += 1 };
  s2 -> s1 [48, 114] { R111 += 1 };
  s2 -> s8 [115, 115] { R111 += 1 };
  s2 -> s1 [116, 65535] { R111 += 1 };
  s3 -> s3 [0, 45] { R111 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s4 [46, 46] { R111 += 1 };
  s3 -> s3 [47, 65535] { R111 += 1 };
  s4 -> s3 [0, 45] { R111 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s4 [46, 46] { R111 += 1 };
  s4 -> s3 [47, 114] { R111 += 1 };
  s4 -> s5 [115, 115] { R111 += 1 };
  s4 -> s3 [116, 65535] { R111 += 1 };
  s5 -> s3 [0, 45] { R111 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s4 [46, 46] { R111 += 1 };
  s5 -> s3 [47, 110] { R111 += 1 };
  s5 -> s6 [111, 111] { R111 += 1 };
  s5 -> s3 [112, 65535] { R111 += 1 };
  s6 -> s3 [0, 45] { R111 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s4 [46, 46] { R111 += 1 };
  s6 -> s3 [47, 98] { R111 += 1 };
  s6 -> s7 [99, 99] { R111 += 1 };
  s6 -> s3 [100, 65535] { R111 += 1 };
  s7 -> s3 [0, 45] { R111 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s4 [46, 46] { R111 += 1 };
  s7 -> s3 [47, 106] { R111 += 1 };
  s7 -> s3 [108, 65535] { R111 += 1 };
  s8 -> s1 [0, 45] { R111 += 1 };
  s8 -> s2 [46, 46] { R111 += 1 };
  s8 -> s3 [47, 47] { R111 += 1 };
  s8 -> s1 [48, 110] { R111 += 1 };
  s8 -> s9 [111, 111] { R111 += 1 };
  s8 -> s1 [112, 65535] { R111 += 1 };
  s9 -> s1 [0, 45] { R111 += 1 };
  s9 -> s2 [46, 46] { R111 += 1 };
  s9 -> s3 [47, 47] { R111 += 1 };
  s9 -> s1 [48, 98] { R111 += 1 };
  s9 -> s10 [99, 99] { R111 += 1 };
  s9 -> s1 [100, 65535] { R111 += 1 };
  s10 -> s1 [0, 45] { R111 += 1 };
  s10 -> s2 [46, 46] { R111 += 1 };
  s10 -> s3 [47, 47] { R111 += 1 };
  s10 -> s1 [48, 106] { R111 += 1 };
  s10 -> s1 [108, 65535] { R111 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R113 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R113 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 46] { R115 += 1, R69 += 1 };
  s0 -> s0 [0, 65535] { R114 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R115 += 1, R68 += 1, R69 += 1 };
  s0 -> s3 [47, 47] { R115 += 1 };
  s0 -> s1 [48, 65535] { R115 += 1, R69 += 1 };
  s1 -> s1 [0, 46] { R115 += 1, R69 += 1 };
  s1 -> s3 [47, 47] { R115 += 1 };
  s1 -> s1 [48, 65535] { R115 += 1, R69 += 1 };
  s2 -> s1 [0, 46] { R115 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R115 += 1, R68 += 1, R69 += 1 };
  s2 -> s3 [47, 47] { R115 += 1 };
  s2 -> s1 [48, 65535] { R115 += 1, R69 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R115 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R117 += 1, R101 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R117 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s1 -> s4 [0, 65535] { R117 += 1 };
  s1 -> s1 [0, 65535] { R117 += 1, R101 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R117 += 1, R101 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R117 += 1, R100 += 1, R101 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R117 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 43] { R119 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R119 += 1, R102 += 1, R103 += 1 };
  s0 -> s3 [44, 44] { R119 += 1, R103 += 1 };
  s0 -> s1 [45, 63] { R119 += 1, R103 += 1 };
  s0 -> s1 [65, 65535] { R119 += 1, R103 += 1 };
  s1 -> s1 [0, 43] { R119 += 1, R103 += 1 };
  s1 -> s3 [44, 44] { R119 += 1, R103 += 1 };
  s1 -> s1 [45, 63] { R119 += 1, R103 += 1 };
  s1 -> s1 [65, 65535] { R119 += 1, R103 += 1 };
  s2 -> s1 [0, 43] { R119 += 1, R103 += 1 };
  s2 -> s2 [0, 65535] { R119 += 1, R102 += 1, R103 += 1 };
  s2 -> s3 [44, 44] { R119 += 1, R103 += 1 };
  s2 -> s1 [45, 63] { R119 += 1, R103 += 1 };
  s2 -> s1 [65, 65535] { R119 += 1, R103 += 1 };
  s3 -> s3 [0, 63] { R119 += 1, R103 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R119 += 1 };
  s3 -> s3 [65, 65535] { R119 += 1, R103 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R121 += 1, R105 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R121 += 1, R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R121 += 1, R105 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R121 += 1 };
  s2 -> s1 [0, 65535] { R121 += 1, R105 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R121 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R121 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 43] { R123 += 1, R107 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R123 += 1, R107 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R123 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s4 [44, 44] { R123 += 1, R107 += 1 };
  s0 -> s1 [45, 65535] { R123 += 1, R107 += 1, R7 += 1 };
  s1 -> s1 [0, 43] { R123 += 1, R107 += 1, R7 += 1 };
  s1 -> s4 [44, 44] { R123 += 1, R107 += 1 };
  s1 -> s1 [45, 65535] { R123 += 1, R107 += 1, R7 += 1 };
  s2 -> s1 [0, 43] { R123 += 1, R107 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R123 += 1, R107 += 1, R6 += 1, R7 += 1 };
  s2 -> s4 [44, 44] { R123 += 1, R107 += 1 };
  s2 -> s1 [45, 65535] { R123 += 1, R107 += 1, R7 += 1 };
  s3 -> s1 [0, 43] { R123 += 1, R107 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R123 += 1, R107 += 1, R6 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R123 += 1, R106 += 1, R107 += 1 };
  s3 -> s4 [44, 44] { R123 += 1, R107 += 1 };
  s3 -> s1 [45, 65535] { R123 += 1, R107 += 1, R7 += 1 };
  s4 -> s5 [0, 65535] { R123 += 1 };
  s4 -> s4 [0, 65535] { R123 += 1, R107 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R123 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R125 += 1, R108 += 1, R109 += 1 };
  s0 -> s2 [0, 65535] { R125 += 1, R109 += 1, R98 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s3 [0, 65535] { R125 += 1, R109 += 1, R99 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R125 += 1, R108 += 1, R109 += 1 };
  s1 -> s2 [0, 65535] { R125 += 1, R109 += 1, R98 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R125 += 1, R109 += 1, R99 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R125 += 1, R109 += 1, R98 += 1, R99 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R125 += 1, R109 += 1, R99 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R125 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R125 += 1, R109 += 1, R99 += 1, R0 += 1 };
  s3 -> s5 [0, 65535] { R125 += 1 };
  s3 -> s6 [0, 65535] { R125 += 1, R109 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R125 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R125 += 1 };
  s6 -> s6 [0, 65535] { R125 += 1, R109 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R99 && R3 = R101 && R4 = R125 && R6 = 0 && R7 - R98 = -1 && R68 = 0 && R69 = R109 && R100 - R109 = 1 && R102 = 0 && R103 = R109 && R104 = 0 && R105 = R109 && R106 = 0 && R107 = R109 && R108 = 0 && R110 = 10 && R111 = R125 && R112 = 10 && R113 = R125 && R114 = 10 && R115 = R125 && R116 = 10 && R117 = R125 && R118 = 10 && R119 = R125 && R120 = 10 && R121 = R125 && R122 = 10 && R123 = R125 && R124 = 10 && R0 != 0 && R1 != 0 && R98 - R99 < 1 && -1 < R98 && 0 < R99 && R109 < R101 && -1 < R109 && 9 < R125;
// End of Parikh automata intersection problem
