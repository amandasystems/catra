// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264, R7265, R7266, R7267, R7268, R7269, R7270, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R8099, R8100, R8101, R8102, R8103, R8104, R8105, R8106, R8107, R8108, R8109, R8110, R8111, R8112, R8113, R8114, R8115, R8116, R8117, R8118, R8119, R8120, R8121, R8122, R8123, R8124, R8125, R8126, R8127, R8128, R8129, R8130, R8131, R8132, R8133, R8134, R8135, R8136, R8137, R8138, R8139, R8140, R8141, R8142, R8143, R8144, R8145, R8146, R8147, R8148, R8149, R8150, R8151, R8152, R8153, R8154, R8155, R8156, R8157, R8158, R8159, R8160, R8161, R8162, R8163, R8164, R8165, R8166, R8167, R8168, R8169, R8170, R8171, R8172, R8173, R8174, R8175, R8176, R8177, R8178, R8179, R8180, R8181, R8182;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R8106 += 1 };
  s0 -> s0 [0, 65535] { R8105 += 1, R8106 += 1 };
  s0 -> s1 [45, 45] { R8106 += 1 };
  s0 -> s2 [46, 46] { R8106 += 1 };
  s0 -> s1 [48, 62] { R8106 += 1 };
  s0 -> s3 [65, 65] { R8106 += 1 };
  s0 -> s1 [66, 65535] { R8106 += 1 };
  s1 -> s1 [0, 43] { R8106 += 1 };
  s1 -> s1 [45, 45] { R8106 += 1 };
  s1 -> s2 [46, 46] { R8106 += 1 };
  s1 -> s1 [48, 62] { R8106 += 1 };
  s1 -> s3 [65, 65] { R8106 += 1 };
  s1 -> s1 [66, 65535] { R8106 += 1 };
  s2 -> s1 [0, 43] { R8106 += 1 };
  s2 -> s1 [45, 45] { R8106 += 1 };
  s2 -> s2 [46, 46] { R8106 += 1 };
  s2 -> s1 [48, 62] { R8106 += 1 };
  s2 -> s3 [65, 65] { R8106 += 1 };
  s2 -> s1 [66, 114] { R8106 += 1 };
  s2 -> s8 [115, 115] { R8106 += 1 };
  s2 -> s1 [116, 65535] { R8106 += 1 };
  s3 -> s3 [0, 43] { R8106 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R8106 += 1 };
  s3 -> s4 [46, 46] { R8106 += 1 };
  s3 -> s3 [48, 62] { R8106 += 1 };
  s3 -> s3 [65, 65535] { R8106 += 1 };
  s4 -> s3 [0, 43] { R8106 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R8106 += 1 };
  s4 -> s4 [46, 46] { R8106 += 1 };
  s4 -> s3 [48, 62] { R8106 += 1 };
  s4 -> s3 [65, 114] { R8106 += 1 };
  s4 -> s5 [115, 115] { R8106 += 1 };
  s4 -> s3 [116, 65535] { R8106 += 1 };
  s5 -> s3 [0, 43] { R8106 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R8106 += 1 };
  s5 -> s4 [46, 46] { R8106 += 1 };
  s5 -> s3 [48, 62] { R8106 += 1 };
  s5 -> s3 [65, 110] { R8106 += 1 };
  s5 -> s6 [111, 111] { R8106 += 1 };
  s5 -> s3 [112, 65535] { R8106 += 1 };
  s6 -> s3 [0, 43] { R8106 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R8106 += 1 };
  s6 -> s4 [46, 46] { R8106 += 1 };
  s6 -> s3 [48, 62] { R8106 += 1 };
  s6 -> s3 [65, 98] { R8106 += 1 };
  s6 -> s7 [99, 99] { R8106 += 1 };
  s6 -> s3 [100, 65535] { R8106 += 1 };
  s7 -> s3 [0, 43] { R8106 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R8106 += 1 };
  s7 -> s4 [46, 46] { R8106 += 1 };
  s7 -> s3 [48, 62] { R8106 += 1 };
  s7 -> s3 [65, 106] { R8106 += 1 };
  s7 -> s3 [108, 65535] { R8106 += 1 };
  s8 -> s1 [0, 43] { R8106 += 1 };
  s8 -> s1 [45, 45] { R8106 += 1 };
  s8 -> s2 [46, 46] { R8106 += 1 };
  s8 -> s1 [48, 62] { R8106 += 1 };
  s8 -> s3 [65, 65] { R8106 += 1 };
  s8 -> s1 [66, 110] { R8106 += 1 };
  s8 -> s9 [111, 111] { R8106 += 1 };
  s8 -> s1 [112, 65535] { R8106 += 1 };
  s9 -> s1 [0, 43] { R8106 += 1 };
  s9 -> s1 [45, 45] { R8106 += 1 };
  s9 -> s2 [46, 46] { R8106 += 1 };
  s9 -> s1 [48, 62] { R8106 += 1 };
  s9 -> s3 [65, 65] { R8106 += 1 };
  s9 -> s1 [66, 98] { R8106 += 1 };
  s9 -> s10 [99, 99] { R8106 += 1 };
  s9 -> s1 [100, 65535] { R8106 += 1 };
  s10 -> s1 [0, 43] { R8106 += 1 };
  s10 -> s1 [45, 45] { R8106 += 1 };
  s10 -> s2 [46, 46] { R8106 += 1 };
  s10 -> s1 [48, 62] { R8106 += 1 };
  s10 -> s3 [65, 65] { R8106 += 1 };
  s10 -> s1 [66, 106] { R8106 += 1 };
  s10 -> s1 [108, 65535] { R8106 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R8108 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8107 += 1, R8108 += 1 };
  s1 -> s1 [0, 65535] { R8108 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R8110 += 1 };
  s0 -> s2 [0, 65535] { R8110 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R8109 += 1, R8110 += 1 };
  s0 -> s3 [58, 58] { R8110 += 1 };
  s0 -> s1 [59, 65535] { R8110 += 1 };
  s1 -> s1 [0, 57] { R8110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R8110 += 1 };
  s1 -> s1 [59, 65535] { R8110 += 1 };
  s2 -> s1 [0, 57] { R8110 += 1 };
  s2 -> s2 [0, 65535] { R8110 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R8110 += 1 };
  s2 -> s1 [59, 65535] { R8110 += 1 };
  s3 -> s3 [0, 65535] { R8110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R8112 += 1 };
  s0 -> s0 [0, 65535] { R8111 += 1, R8112 += 1 };
  s0 -> s2 [0, 65535] { R8112 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R8112 += 1 };
  s0 -> s1 [66, 65535] { R8112 += 1 };
  s1 -> s1 [0, 64] { R8112 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R8112 += 1 };
  s1 -> s1 [66, 65535] { R8112 += 1 };
  s2 -> s1 [0, 64] { R8112 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8112 += 1, R12 += 1 };
  s2 -> s3 [65, 65] { R8112 += 1 };
  s2 -> s1 [66, 65535] { R8112 += 1 };
  s3 -> s3 [0, 65535] { R8112 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R8114 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R8114 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R8113 += 1, R8114 += 1 };
  s0 -> s3 [91, 91] { R8114 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R8114 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R8114 += 1 };
  s1 -> s1 [0, 65535] { R8114 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R8114 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R8114 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R8114 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R8114 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R8114 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8114 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R8116 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R8115 += 1, R8116 += 1 };
  s0 -> s2 [0, 65535] { R8116 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8116 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R8116 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R8116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8116 += 1, R24 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R8116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R8118 += 1, R8040 += 1 };
  s0 -> s2 [0, 65535] { R8118 += 1, R8039 += 1, R8040 += 1 };
  s0 -> s0 [0, 65535] { R8117 += 1, R8118 += 1 };
  s0 -> s1 [66, 65535] { R8118 += 1, R8040 += 1 };
  s1 -> s1 [0, 64] { R8118 += 1, R8040 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8118 += 1 };
  s1 -> s1 [66, 65535] { R8118 += 1, R8040 += 1 };
  s2 -> s1 [0, 64] { R8118 += 1, R8040 += 1 };
  s2 -> s2 [0, 65535] { R8118 += 1, R8039 += 1, R8040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R8118 += 1, R8040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R8120 += 1, R8042 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R8120 += 1, R8041 += 1, R8042 += 1 };
  s0 -> s0 [0, 65535] { R8119 += 1, R8120 += 1 };
  s1 -> s1 [0, 65535] { R8120 += 1, R8042 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8120 += 1 };
  s2 -> s1 [0, 65535] { R8120 += 1, R8042 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R8120 += 1, R8041 += 1, R8042 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8120 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R8122 += 1, R8044 += 1 };
  s0 -> s0 [0, 65535] { R8121 += 1, R8122 += 1 };
  s0 -> s2 [0, 65535] { R8122 += 1, R8043 += 1, R8044 += 1 };
  s0 -> s1 [80, 65535] { R8122 += 1, R8044 += 1 };
  s1 -> s1 [0, 65] { R8122 += 1, R8044 += 1 };
  s1 -> s1 [0, 65535] { R8122 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R8122 += 1, R8044 += 1 };
  s2 -> s1 [0, 65] { R8122 += 1, R8044 += 1 };
  s2 -> s2 [0, 65535] { R8122 += 1, R8043 += 1, R8044 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R8122 += 1, R8044 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R8124 += 1, R8046 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R8123 += 1, R8124 += 1 };
  s0 -> s2 [0, 65535] { R8124 += 1, R8045 += 1, R8046 += 1 };
  s1 -> s1 [0, 65535] { R8124 += 1, R8046 += 1, R406 += 1 };
  s1 -> s4 [0, 65535] { R8124 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8124 += 1, R8046 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R8124 += 1, R8045 += 1, R8046 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8124 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R8126 += 1, R8048 += 1 };
  s0 -> s2 [0, 65535] { R8126 += 1, R8047 += 1, R8048 += 1 };
  s0 -> s0 [0, 65535] { R8125 += 1, R8126 += 1 };
  s0 -> s3 [0, 65535] { R8126 += 1, R8048 += 1, R408 += 1 };
  s0 -> s1 [84, 65535] { R8126 += 1, R8048 += 1 };
  s1 -> s1 [0, 82] { R8126 += 1, R8048 += 1 };
  s1 -> s1 [0, 65535] { R8126 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [84, 65535] { R8126 += 1, R8048 += 1 };
  s2 -> s1 [0, 82] { R8126 += 1, R8048 += 1 };
  s2 -> s2 [0, 65535] { R8126 += 1, R8047 += 1, R8048 += 1 };
  s2 -> s3 [0, 65535] { R8126 += 1, R8048 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [84, 65535] { R8126 += 1, R8048 += 1 };
  s3 -> s1 [0, 82] { R8126 += 1, R8048 += 1 };
  s3 -> s3 [0, 65535] { R8126 += 1, R8048 += 1, R408 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8126 += 1 };
  s3 -> s1 [84, 65535] { R8126 += 1, R8048 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8126 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R8128 += 1, R8050 += 1 };
  s0 -> s0 [0, 65535] { R8127 += 1, R8128 += 1 };
  s0 -> s2 [0, 65535] { R8128 += 1, R8049 += 1, R8050 += 1 };
  s0 -> s3 [0, 65535] { R8128 += 1, R8050 += 1, R410 += 1 };
  s0 -> s1 [81, 65535] { R8128 += 1, R8050 += 1 };
  s1 -> s1 [0, 79] { R8128 += 1, R8050 += 1 };
  s1 -> s1 [0, 65535] { R8128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R8128 += 1, R8050 += 1 };
  s2 -> s1 [0, 79] { R8128 += 1, R8050 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8128 += 1, R8049 += 1, R8050 += 1 };
  s2 -> s3 [0, 65535] { R8128 += 1, R8050 += 1, R410 += 1 };
  s2 -> s1 [81, 65535] { R8128 += 1, R8050 += 1 };
  s3 -> s1 [0, 79] { R8128 += 1, R8050 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8128 += 1, R8050 += 1, R410 += 1 };
  s3 -> s5 [0, 65535] { R8128 += 1 };
  s3 -> s1 [81, 65535] { R8128 += 1, R8050 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8128 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R8130 += 1, R8052 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R8130 += 1, R8051 += 1, R8052 += 1 };
  s0 -> s3 [0, 65535] { R8130 += 1, R8052 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R8129 += 1, R8130 += 1 };
  s1 -> s1 [0, 65535] { R8130 += 1, R8052 += 1, R415 += 1, R416 += 1 };
  s1 -> s4 [0, 65535] { R8130 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R8130 += 1, R8052 += 1 };
  s2 -> s1 [0, 65535] { R8130 += 1, R8052 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R8130 += 1, R8051 += 1, R8052 += 1 };
  s2 -> s3 [0, 65535] { R8130 += 1, R8052 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R8130 += 1, R8052 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535] { R8130 += 1 };
  s3 -> s3 [0, 65535] { R8130 += 1, R8052 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8130 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8130 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8130 += 1, R8052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R8132 += 1, R8053 += 1, R8054 += 1 };
  s0 -> s2 [0, 65535] { R8132 += 1, R8054 += 1 };
  s0 -> s0 [0, 65535] { R8131 += 1, R8132 += 1 };
  s1 -> s1 [0, 65535] { R8132 += 1, R8053 += 1, R8054 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R8132 += 1, R8054 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8132 += 1, R8054 += 1 };
  s2 -> s4 [0, 65535] { R8132 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8132 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R8134 += 1, R8056 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R8134 += 1, R8055 += 1, R8056 += 1 };
  s0 -> s0 [0, 65535] { R8133 += 1, R8134 += 1 };
  s0 -> s3 [0, 65535] { R8134 += 1, R8056 += 1, R419 += 1, R420 += 1 };
  s0 -> s1 [81, 65535] { R8134 += 1, R8056 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R8134 += 1, R8056 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8134 += 1, R8056 += 1 };
  s1 -> s5 [0, 65535] { R8134 += 1 };
  s1 -> s1 [81, 65535] { R8134 += 1, R8056 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R8134 += 1, R8056 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R8134 += 1, R8055 += 1, R8056 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8134 += 1, R8056 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R8134 += 1, R8056 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R8134 += 1, R8056 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8134 += 1 };
  s3 -> s3 [0, 65535] { R8134 += 1, R8056 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [81, 65535] { R8134 += 1, R8056 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8134 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R8136 += 1, R8058 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R8136 += 1, R8058 += 1, R425 += 1, R426 += 1 };
  s0 -> s3 [0, 65535] { R8136 += 1, R8057 += 1, R8058 += 1 };
  s0 -> s0 [0, 65535] { R8135 += 1, R8136 += 1 };
  s1 -> s1 [0, 65535] { R8136 += 1, R8058 += 1, R424 += 1, R425 += 1 };
  s1 -> s2 [0, 65535] { R8136 += 1, R8058 += 1, R425 += 1, R426 += 1 };
  s1 -> s6 [0, 65535] { R8136 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8136 += 1, R8058 += 1 };
  s2 -> s2 [0, 65535] { R8136 += 1, R8058 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535] { R8136 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8136 += 1, R8058 += 1, R424 += 1, R425 += 1 };
  s3 -> s2 [0, 65535] { R8136 += 1, R8058 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R8136 += 1, R8057 += 1, R8058 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8136 += 1, R8058 += 1 };
  s5 -> s6 [0, 65535] { R8136 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8136 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R8138 += 1, R8060 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R8137 += 1, R8138 += 1 };
  s0 -> s3 [0, 65535] { R8138 += 1, R8059 += 1, R8060 += 1 };
  s0 -> s1 [91, 107] { R8138 += 1, R8060 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R8138 += 1, R8060 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R8138 += 1 };
  s1 -> s1 [0, 65535] { R8138 += 1, R8060 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s2 -> s5 [0, 65535] { R8138 += 1 };
  s2 -> s2 [0, 65535] { R8138 += 1, R8060 += 1, R429 += 1, R430 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R8138 += 1, R8060 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R8138 += 1, R8060 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s3 -> s2 [0, 65535] { R8138 += 1, R8060 += 1, R429 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R8138 += 1, R8059 += 1, R8060 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R8138 += 1, R8060 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R8138 += 1, R8060 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R8138 += 1 };
  s4 -> s4 [0, 65535] { R8138 += 1, R8060 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R8138 += 1, R8060 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R8138 += 1, R8060 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R8138 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R8138 += 1 };
  s7 -> s7 [0, 65535] { R8138 += 1, R8060 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R8138 += 1, R8060 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R8138 += 1, R8060 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R8138 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8138 += 1, R8060 += 1 };
  s8 -> s1 [91, 96] { R8138 += 1, R8060 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R8138 += 1, R8060 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s9 -> s5 [0, 65535] { R8138 += 1 };
  s9 -> s9 [0, 65535] { R8138 += 1, R8060 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R8138 += 1, R8060 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R8138 += 1, R8060 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s10 -> s5 [0, 65535] { R8138 += 1 };
  s10 -> s10 [0, 65535] { R8138 += 1, R8060 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R8138 += 1, R8060 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R8138 += 1, R8060 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s11 -> s5 [0, 65535] { R8138 += 1 };
  s11 -> s11 [0, 65535] { R8138 += 1, R8060 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R8138 += 1, R8060 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R8138 += 1, R8060 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R8138 += 1 };
  s12 -> s12 [0, 65535] { R8138 += 1, R8060 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R8138 += 1, R8060 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R8138 += 1, R8060 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s13 -> s5 [0, 65535] { R8138 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R8138 += 1, R8060 += 1 };
  s13 -> s1 [91, 115] { R8138 += 1, R8060 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R8138 += 1, R8060 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R8138 += 1, R8060 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R8138 += 1, R8060 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R8140 += 1, R8062 += 1 };
  s0 -> s2 [0, 65535] { R8140 += 1, R8062 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s3 [0, 65535] { R8140 += 1, R8061 += 1, R8062 += 1 };
  s0 -> s0 [0, 65535] { R8139 += 1, R8140 += 1 };
  s1 -> s1 [0, 65535] { R8140 += 1, R8062 += 1 };
  s1 -> s5 [0, 65535] { R8140 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8140 += 1, R8062 += 1 };
  s2 -> s2 [0, 65535] { R8140 += 1, R8062 += 1, R7263 += 1, R7264 += 1 };
  s2 -> s5 [0, 65535] { R8140 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R8140 += 1, R8062 += 1 };
  s3 -> s2 [0, 65535] { R8140 += 1, R8062 += 1, R7263 += 1, R7264 += 1 };
  s3 -> s3 [0, 65535] { R8140 += 1, R8061 += 1, R8062 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8140 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R8142 += 1, R8064 += 1, R7269 += 1, R7270 += 1 };
  s0 -> s2 [0, 65535] { R8142 += 1, R8063 += 1, R8064 += 1 };
  s0 -> s3 [0, 65535] { R8142 += 1, R8064 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s0 [0, 65535] { R8141 += 1, R8142 += 1 };
  s1 -> s1 [0, 65535] { R8142 += 1, R8064 += 1, R7269 += 1, R7270 += 1 };
  s1 -> s6 [0, 65535] { R8142 += 1, R8064 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8142 += 1 };
  s2 -> s1 [0, 65535] { R8142 += 1, R8064 += 1, R7269 += 1, R7270 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8142 += 1, R8063 += 1, R8064 += 1 };
  s2 -> s3 [0, 65535] { R8142 += 1, R8064 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s1 [0, 65535] { R8142 += 1, R8064 += 1, R7269 += 1, R7270 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8142 += 1, R8064 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s5 [0, 65535] { R8142 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8142 += 1 };
  s6 -> s6 [0, 65535] { R8142 += 1, R8064 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8142 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R8144 += 1, R8065 += 1, R8066 += 1 };
  s0 -> s0 [0, 65535] { R8143 += 1, R8144 += 1 };
  s0 -> s2 [0, 65535] { R8144 += 1, R8066 += 1 };
  s1 -> s1 [0, 65535] { R8144 += 1, R8065 += 1, R8066 += 1 };
  s1 -> s2 [0, 65535] { R8144 += 1, R8066 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8144 += 1 };
  s2 -> s2 [0, 65535] { R8144 += 1, R8066 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8144 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R8146 += 1, R8068 += 1 };
  s0 -> s0 [0, 65535] { R8145 += 1, R8146 += 1 };
  s0 -> s2 [0, 65535] { R8146 += 1, R8067 += 1, R8068 += 1 };
  s0 -> s3 [0, 65535] { R8146 += 1, R8068 += 1, R8031 += 1, R8032 += 1 };
  s1 -> s1 [0, 65535] { R8146 += 1, R8068 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8146 += 1 };
  s2 -> s1 [0, 65535] { R8146 += 1, R8068 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8146 += 1, R8067 += 1, R8068 += 1 };
  s2 -> s3 [0, 65535] { R8146 += 1, R8068 += 1, R8031 += 1, R8032 += 1 };
  s3 -> s1 [0, 65535] { R8146 += 1, R8068 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8146 += 1, R8068 += 1, R8031 += 1, R8032 += 1 };
  s3 -> s5 [0, 65535] { R8146 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8146 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R8147 += 1, R8148 += 1 };
  s0 -> s1 [0, 65535] { R8148 += 1, R8070 += 1 };
  s0 -> s2 [0, 65535] { R8148 += 1, R8069 += 1, R8070 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8148 += 1 };
  s1 -> s1 [0, 65535] { R8148 += 1, R8070 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8148 += 1, R8070 += 1 };
  s2 -> s2 [0, 65535] { R8148 += 1, R8069 += 1, R8070 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8148 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 79] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s0 -> s2 [0, 65535] { R8150 += 1, R8072 += 1, R8036 += 1, R8037 += 1 };
  s0 -> s0 [0, 65535] { R8149 += 1, R8150 += 1 };
  s0 -> s3 [0, 65535] { R8150 += 1, R8071 += 1, R8072 += 1 };
  s0 -> s4 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s0 -> s5 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s0 -> s1 [81, 65535] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s1 -> s1 [0, 79] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s1 -> s7 [0, 65535] { R8150 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R8150 += 1, R8072 += 1 };
  s1 -> s4 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s1 -> s5 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s1 -> s1 [81, 65535] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s2 -> s1 [0, 79] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s2 -> s2 [0, 65535] { R8150 += 1, R8072 += 1, R8036 += 1, R8037 += 1 };
  s2 -> s7 [0, 65535] { R8150 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s2 -> s5 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s2 -> s1 [81, 65535] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s3 -> s1 [0, 79] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s3 -> s2 [0, 65535] { R8150 += 1, R8072 += 1, R8036 += 1, R8037 += 1 };
  s3 -> s3 [0, 65535] { R8150 += 1, R8071 += 1, R8072 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s3 -> s5 [80, 80] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s3 -> s1 [81, 65535] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s4 -> s4 [0, 65535] { R8150 += 1, R8072 += 1 };
  s4 -> s7 [0, 65535] { R8150 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R8150 += 1, R8072 += 1 };
  s5 -> s5 [0, 65535] { R8150 += 1, R8072 += 1, R8037 += 1, R8038 += 1 };
  s5 -> s7 [0, 65535] { R8150 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8150 += 1, R8072 += 1 };
  s6 -> s7 [0, 65535] { R8150 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8150 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R8152 += 1, R8074 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R8152 += 1, R8073 += 1, R8074 += 1 };
  s0 -> s0 [0, 65535] { R8151 += 1, R8152 += 1 };
  s1 -> s1 [0, 65535] { R8152 += 1, R8074 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8152 += 1 };
  s2 -> s1 [0, 65535] { R8152 += 1, R8074 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8152 += 1, R8073 += 1, R8074 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8152 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R8154 += 1, R8076 += 1 };
  s0 -> s0 [0, 65535] { R8153 += 1, R8154 += 1 };
  s0 -> s2 [0, 65535] { R8154 += 1, R8075 += 1, R8076 += 1 };
  s0 -> s3 [65, 65] { R8154 += 1, R8076 += 1 };
  s0 -> s4 [65, 65] { R8154 += 1, R8076 += 1 };
  s0 -> s5 [80, 80] { R8154 += 1, R8076 += 1 };
  s0 -> s1 [81, 65535] { R8154 += 1, R8076 += 1 };
  s1 -> s1 [0, 64] { R8154 += 1, R8076 += 1 };
  s1 -> s3 [65, 65] { R8154 += 1, R8076 += 1 };
  s1 -> s4 [65, 65] { R8154 += 1, R8076 += 1 };
  s1 -> s5 [80, 80] { R8154 += 1, R8076 += 1 };
  s1 -> s1 [81, 65535] { R8154 += 1, R8076 += 1 };
  s2 -> s1 [0, 64] { R8154 += 1, R8076 += 1 };
  s2 -> s2 [0, 65535] { R8154 += 1, R8075 += 1, R8076 += 1 };
  s2 -> s3 [65, 65] { R8154 += 1, R8076 += 1 };
  s2 -> s4 [65, 65] { R8154 += 1, R8076 += 1 };
  s2 -> s5 [80, 80] { R8154 += 1, R8076 += 1 };
  s2 -> s1 [81, 65535] { R8154 += 1, R8076 += 1 };
  s3 -> s3 [0, 65] { R8154 += 1, R8076 += 1 };
  s3 -> s7 [80, 80] { R8154 += 1, R8076 += 1 };
  s3 -> s3 [81, 65535] { R8154 += 1, R8076 += 1 };
  s5 -> s5 [0, 64] { R8154 += 1, R8076 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8154 += 1 };
  s5 -> s7 [65, 65] { R8154 += 1, R8076 += 1 };
  s5 -> s8 [65, 65] { R8154 += 1, R8076 += 1 };
  s5 -> s5 [80, 65535] { R8154 += 1, R8076 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R8154 += 1, R8076 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8154 += 1 };
  s7 -> s7 [80, 65535] { R8154 += 1, R8076 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R8154 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R8156 += 1, R8078 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R8156 += 1, R8077 += 1, R8078 += 1 };
  s0 -> s0 [0, 65535] { R8155 += 1, R8156 += 1 };
  s0 -> s3 [65, 65] { R8156 += 1, R8078 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R8156 += 1, R8078 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R8156 += 1, R8078 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R8156 += 1, R8078 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R8156 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8156 += 1, R8078 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R8156 += 1, R8078 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R8156 += 1, R8078 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R8156 += 1, R8078 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R8156 += 1, R8077 += 1, R8078 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8156 += 1, R8078 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R8156 += 1, R8078 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R8156 += 1, R8078 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R8156 += 1, R8078 += 1, R405 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8156 += 1 };
  s4 -> s4 [0, 65535] { R8156 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8156 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R8158 += 1, R8080 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R8157 += 1, R8158 += 1 };
  s0 -> s2 [0, 65535] { R8158 += 1, R8079 += 1, R8080 += 1 };
  s0 -> s3 [65, 65] { R8158 += 1, R8080 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R8158 += 1, R8080 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R8158 += 1, R8080 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R8158 += 1, R8080 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R8158 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8158 += 1, R8080 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R8158 += 1, R8080 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R8158 += 1, R8080 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R8158 += 1, R8080 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R8158 += 1, R8079 += 1, R8080 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8158 += 1, R8080 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R8158 += 1, R8080 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R8158 += 1, R8080 += 1, R407 += 1 };
  s3 -> s6 [0, 65535] { R8158 += 1 };
  s3 -> s3 [0, 65535] { R8158 += 1, R8080 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8158 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8158 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R8160 += 1, R8082 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R8159 += 1, R8160 += 1 };
  s0 -> s2 [0, 65535] { R8160 += 1, R8081 += 1, R8082 += 1 };
  s0 -> s3 [65, 65] { R8160 += 1, R8082 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R8160 += 1, R8082 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R8160 += 1, R8082 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R8160 += 1, R8082 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R8160 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8160 += 1, R8082 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R8160 += 1, R8082 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R8160 += 1, R8082 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R8160 += 1, R8082 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R8160 += 1, R8081 += 1, R8082 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8160 += 1, R8082 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R8160 += 1, R8082 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R8160 += 1, R8082 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R8160 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8160 += 1, R8082 += 1, R409 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8160 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8160 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R8161 += 1, R8162 += 1 };
  s0 -> s2 [0, 65535] { R8162 += 1, R8083 += 1, R8084 += 1 };
  s0 -> s3 [65, 65] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8162 += 1 };
  s1 -> s3 [65, 65] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8162 += 1, R8083 += 1, R8084 += 1 };
  s2 -> s3 [65, 65] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8162 += 1 };
  s4 -> s5 [0, 65535] { R8162 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8162 += 1, R8084 += 1, R411 += 1, R412 += 1 };
  s5 -> s5 [0, 65535] { R8162 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R8164 += 1, R8086 += 1 };
  s0 -> s2 [0, 65535] { R8164 += 1, R8085 += 1, R8086 += 1 };
  s0 -> s0 [0, 65535] { R8163 += 1, R8164 += 1 };
  s0 -> s3 [65, 65] { R8164 += 1, R8086 += 1 };
  s0 -> s4 [65, 65] { R8164 += 1, R8086 += 1 };
  s0 -> s1 [66, 65535] { R8164 += 1, R8086 += 1 };
  s1 -> s1 [0, 64] { R8164 += 1, R8086 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8164 += 1 };
  s1 -> s3 [65, 65] { R8164 += 1, R8086 += 1 };
  s1 -> s4 [65, 65] { R8164 += 1, R8086 += 1 };
  s1 -> s1 [66, 65535] { R8164 += 1, R8086 += 1 };
  s2 -> s1 [0, 64] { R8164 += 1, R8086 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8164 += 1, R8085 += 1, R8086 += 1 };
  s2 -> s3 [65, 65] { R8164 += 1, R8086 += 1 };
  s2 -> s4 [65, 65] { R8164 += 1, R8086 += 1 };
  s2 -> s1 [66, 65535] { R8164 += 1, R8086 += 1 };
  s3 -> s3 [0, 65535] { R8164 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8164 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8164 += 1, R8086 += 1 };
  s5 -> s5 [0, 65535] { R8164 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R8166 += 1, R8087 += 1, R8088 += 1 };
  s0 -> s0 [0, 65535] { R8165 += 1, R8166 += 1 };
  s0 -> s3 [65, 65] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8166 += 1 };
  s1 -> s3 [65, 65] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R8166 += 1, R8087 += 1, R8088 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8166 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8166 += 1 };
  s4 -> s4 [0, 65535] { R8166 += 1, R8088 += 1, R417 += 1, R418 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8166 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R8167 += 1, R8168 += 1 };
  s0 -> s2 [0, 65535] { R8168 += 1, R8089 += 1, R8090 += 1 };
  s0 -> s3 [65, 65] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8168 += 1 };
  s1 -> s3 [65, 65] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8168 += 1, R8089 += 1, R8090 += 1 };
  s2 -> s3 [65, 65] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8168 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R8168 += 1 };
  s4 -> s4 [0, 65535] { R8168 += 1, R8090 += 1, R421 += 1, R422 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8168 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R8169 += 1, R8170 += 1 };
  s0 -> s2 [0, 65535] { R8170 += 1, R8091 += 1, R8092 += 1 };
  s0 -> s3 [65, 65] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8170 += 1 };
  s1 -> s3 [65, 65] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8170 += 1, R8091 += 1, R8092 += 1 };
  s2 -> s3 [65, 65] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R8170 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8170 += 1, R8092 += 1, R427 += 1, R428 += 1 };
  s4 -> s6 [0, 65535] { R8170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s2 [0, 64] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s3 [0, 65535] { R8172 += 1, R8093 += 1, R8094 += 1 };
  s0 -> s0 [0, 65535] { R8171 += 1, R8172 += 1 };
  s0 -> s4 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s5 [65, 65] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s7 [65, 65] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s1 [66, 65535] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s2 [66, 65535] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [0, 64] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s2 [0, 64] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s4 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s5 [65, 65] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s6 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s7 [65, 65] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [66, 65535] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s2 [66, 65535] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R8172 += 1 };
  s2 -> s4 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s6 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s1 [0, 64] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s2 [0, 64] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s3 [0, 65535] { R8172 += 1, R8093 += 1, R8094 += 1 };
  s3 -> s4 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s5 [65, 65] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [65, 65] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s7 [65, 65] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [66, 65535] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s2 [66, 65535] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s4 -> s4 [0, 65535] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R8172 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8172 += 1 };
  s7 -> s4 [0, 65535] { R8172 += 1, R8094 += 1, R7260 += 1, R7261 += 1 };
  s7 -> s7 [0, 65535] { R8172 += 1, R8094 += 1, R7259 += 1, R7260 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8172 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s0 [0, 65535] { R8173 += 1, R8174 += 1 };
  s0 -> s2 [0, 65535] { R8174 += 1, R8095 += 1, R8096 += 1 };
  s0 -> s3 [65, 65] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s4 [65, 65] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s1 [66, 65535] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [0, 64] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [0, 65535] { R8174 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s4 [65, 65] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [66, 65535] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s1 [0, 64] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8174 += 1, R8095 += 1, R8096 += 1 };
  s2 -> s3 [65, 65] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s4 [65, 65] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s1 [66, 65535] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s3 -> s3 [0, 65535] { R8174 += 1, R8096 += 1, R7265 += 1, R7266 += 1 };
  s3 -> s6 [0, 65535] { R8174 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8174 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8174 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R8176 += 1, R8098 += 1 };
  s0 -> s0 [0, 65535] { R8175 += 1, R8176 += 1 };
  s0 -> s2 [0, 65535] { R8176 += 1, R8097 += 1, R8098 += 1 };
  s0 -> s3 [65, 65] { R8176 += 1, R8098 += 1 };
  s0 -> s4 [65, 65] { R8176 += 1, R8098 += 1 };
  s0 -> s1 [66, 65535] { R8176 += 1, R8098 += 1 };
  s1 -> s1 [0, 64] { R8176 += 1, R8098 += 1 };
  s1 -> s1 [0, 65535] { R8176 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8176 += 1, R8098 += 1 };
  s1 -> s4 [65, 65] { R8176 += 1, R8098 += 1 };
  s1 -> s1 [66, 65535] { R8176 += 1, R8098 += 1 };
  s2 -> s1 [0, 64] { R8176 += 1, R8098 += 1 };
  s2 -> s2 [0, 65535] { R8176 += 1, R8097 += 1, R8098 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8176 += 1, R8098 += 1 };
  s2 -> s4 [65, 65] { R8176 += 1, R8098 += 1 };
  s2 -> s1 [66, 65535] { R8176 += 1, R8098 += 1 };
  s3 -> s3 [0, 65535] { R8176 += 1, R8098 += 1 };
  s3 -> s6 [0, 65535] { R8176 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8176 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8176 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s0 -> s2 [0, 64] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s0 -> s3 [0, 65535] { R8178 += 1, R8099 += 1, R8100 += 1 };
  s0 -> s0 [0, 65535] { R8177 += 1, R8178 += 1 };
  s0 -> s4 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s0 -> s5 [65, 65] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s0 -> s6 [65, 65] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s0 -> s7 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s0 -> s1 [66, 65535] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s0 -> s2 [66, 65535] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s1 -> s1 [0, 64] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s1 -> s1 [0, 65535] { R8178 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s1 -> s7 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s1 -> s1 [66, 65535] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s2 -> s1 [0, 64] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s2 -> s2 [0, 64] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s2 -> s4 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s2 -> s5 [65, 65] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s2 -> s6 [65, 65] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s2 -> s7 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s2 -> s1 [66, 65535] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s2 -> s2 [66, 65535] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s3 -> s1 [0, 64] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s3 -> s2 [0, 64] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s3 -> s3 [0, 65535] { R8178 += 1, R8099 += 1, R8100 += 1 };
  s3 -> s4 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s3 -> s5 [65, 65] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s3 -> s6 [65, 65] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s3 -> s7 [65, 65] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s3 -> s1 [66, 65535] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s3 -> s2 [66, 65535] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s4 -> s4 [0, 65535] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R8178 += 1 };
  s5 -> s4 [0, 65535] { R8178 += 1, R8100 += 1, R8028 += 1, R8029 += 1 };
  s5 -> s5 [0, 65535] { R8178 += 1, R8100 += 1, R8027 += 1, R8028 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R8178 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8178 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R8180 += 1, R8102 += 1 };
  s0 -> s2 [0, 65535] { R8180 += 1, R8101 += 1, R8102 += 1 };
  s0 -> s0 [0, 65535] { R8179 += 1, R8180 += 1 };
  s0 -> s3 [65, 65] { R8180 += 1, R8102 += 1 };
  s0 -> s4 [65, 65] { R8180 += 1, R8102 += 1 };
  s0 -> s1 [66, 65535] { R8180 += 1, R8102 += 1 };
  s1 -> s1 [0, 64] { R8180 += 1, R8102 += 1 };
  s1 -> s1 [0, 65535] { R8180 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8180 += 1, R8102 += 1 };
  s1 -> s4 [65, 65] { R8180 += 1, R8102 += 1 };
  s1 -> s1 [66, 65535] { R8180 += 1, R8102 += 1 };
  s2 -> s1 [0, 64] { R8180 += 1, R8102 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8180 += 1, R8101 += 1, R8102 += 1 };
  s2 -> s3 [65, 65] { R8180 += 1, R8102 += 1 };
  s2 -> s4 [65, 65] { R8180 += 1, R8102 += 1 };
  s2 -> s1 [66, 65535] { R8180 += 1, R8102 += 1 };
  s3 -> s3 [0, 65535] { R8180 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8180 += 1, R8102 += 1 };
  s4 -> s6 [0, 65535] { R8180 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8180 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s0 -> s0 [0, 65535] { R8181 += 1, R8182 += 1 };
  s0 -> s2 [0, 65535] { R8182 += 1, R8103 += 1, R8104 += 1 };
  s0 -> s3 [65, 65] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s0 -> s4 [65, 65] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s0 -> s1 [66, 65535] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s1 -> s1 [0, 64] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s1 -> s1 [0, 65535] { R8182 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s1 -> s4 [65, 65] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s1 -> s1 [66, 65535] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s2 -> s1 [0, 64] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8182 += 1, R8103 += 1, R8104 += 1 };
  s2 -> s3 [65, 65] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s2 -> s4 [65, 65] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s2 -> s1 [66, 65535] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s3 -> s3 [0, 65535] { R8182 += 1, R8104 += 1, R8033 += 1, R8034 += 1 };
  s3 -> s6 [0, 65535] { R8182 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8182 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8182 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R8072 && R3 = R8182 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R8039 = 0 && R8040 = R8072 && R8041 = 0 && R8042 = R8072 && R8043 = 0 && R8044 = R8072 && R8045 = 0 && R8046 = R8072 && R8047 = 0 && R8048 = R8072 && R8049 = 0 && R8050 = R8072 && R8051 = 0 && R8052 = R8072 && R8053 = 0 && R8054 = R8072 && R8055 = 0 && R8056 = R8072 && R8057 = 0 && R8058 = R8072 && R8059 = 0 && R8060 = R8072 && R8061 = 0 && R8062 = R8072 && R8063 = 0 && R8064 = R8072 && R8065 = 0 && R8066 = R8072 && R8067 = 0 && R8068 = R8072 && R8069 = 0 && R8070 = R8072 && R8071 = 0 && R8075 = 0 && R8076 = 0 && R8093 = 0 && R8094 = 0 && R8099 = 0 && R8100 = 0 && R8105 = 10 && R8106 = R8182 && R8107 = 10 && R8108 = R8182 && R8109 = 10 && R8110 = R8182 && R8111 = 10 && R8112 = R8182 && R8113 = 10 && R8114 = R8182 && R8115 = 10 && R8116 = R8182 && R8117 = 10 && R8118 = R8182 && R8119 = 10 && R8120 = R8182 && R8121 = 10 && R8122 = R8182 && R8123 = 10 && R8124 = R8182 && R8125 = 10 && R8126 = R8182 && R8127 = 10 && R8128 = R8182 && R8129 = 10 && R8130 = R8182 && R8131 = 10 && R8132 = R8182 && R8133 = 10 && R8134 = R8182 && R8135 = 10 && R8136 = R8182 && R8137 = 10 && R8138 = R8182 && R8139 = 10 && R8140 = R8182 && R8141 = 10 && R8142 = R8182 && R8143 = 10 && R8144 = R8182 && R8145 = 10 && R8146 = R8182 && R8147 = 10 && R8148 = R8182 && R8149 = 10 && R8150 = R8182 && R8151 = 10 && R8152 = R8182 && R8153 = 10 && R8154 = R8182 && R8155 = 10 && R8156 = R8182 && R8157 = 10 && R8158 = R8182 && R8159 = 10 && R8160 = R8182 && R8161 = 10 && R8162 = R8182 && R8163 = 10 && R8164 = R8182 && R8165 = 10 && R8166 = R8182 && R8167 = 10 && R8168 = R8182 && R8169 = 10 && R8170 = R8182 && R8171 = 10 && R8172 = R8182 && R8173 = 10 && R8174 = R8182 && R8175 = 10 && R8176 = R8182 && R8177 = 10 && R8178 = R8182 && R8179 = 10 && R8180 = R8182 && R8181 = 10 && R7264 + R7261 + R8038 + R8035 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R8072 && 9 < R8182 && (R20 = 0 || (R8073 = 0 && R8074 = 0)) && (R20 = 0 || (R8077 = 0 && R8078 = 0)) && (R20 = 0 || (R8079 = 0 && R8080 = 0)) && (R20 = 0 || (R8081 = 0 && R8082 = 0)) && (R20 = 0 || (R8083 = 0 && R8084 = 0)) && (R20 = 0 || (R8085 = 0 && R8086 = 0)) && (R20 = 0 || (R8087 = 0 && R8088 = 0)) && (R20 = 0 || (R8089 = 0 && R8090 = 0)) && (R20 = 0 || (R8091 = 0 && R8092 = 0)) && (R20 = 0 || (R8095 = 0 && R8096 = 0)) && (R20 = 0 || (R8097 = 0 && R8098 = 0)) && (R20 = 0 || (R8101 = 0 && R8102 = 0)) && (R20 = 0 || (R8103 = 0 && R8104 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R7270 + R7267 = 0 || (R7268 + R7265 = 0 && R7269 + R7266 = 0)) && (R8032 + R8029 = 0 || (R8030 + R8027 = 0 && R8031 + R8028 = 0)) && (R8032 + R8029 = 0 || (R8036 + R8033 = 0 && R8037 + R8034 = 0));
// End of Parikh automata intersection problem
