// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R11813, R11814, R11815, R11816, R11817, R11818, R11819, R11820, R11821, R11822, R11823, R11824, R11975, R11976, R11977, R11978, R11979, R11980, R11981, R11982, R11983, R11984, R11985, R11986, R11987, R11988, R11989, R11990, R11991, R11992, R11993, R11994, R11995, R11996, R11997, R11998, R11999, R12, R12000, R12001, R12002, R12003, R12004, R12005, R12006, R12007, R12008, R12009, R12010, R12011, R12012, R12013, R12014, R12015, R12016, R12017, R12018, R12019, R12020, R12021, R12022, R12023, R12024, R12025, R12026, R12027, R12028, R12029, R12030, R12031, R12032, R12033, R12034, R12035, R12036, R12037, R12038, R12039, R12040, R12041, R12042, R12043, R12044, R12045, R12046, R12047, R12048, R12049, R12050, R12051, R12052, R12053, R12054, R12055, R12056, R12057, R12058, R12059, R12060, R12061, R12062, R12063, R12064, R12065, R12066, R12067, R12068, R12069, R12070, R12071, R12072, R12073, R12074, R12075, R12076, R12077, R12078, R12079, R12080, R12081, R12082, R12083, R12084, R12085, R12086, R12087, R12088, R12089, R12090, R12091, R12092, R12093, R12094, R12095, R12096, R12097, R12098, R12099, R12100, R12101, R12102, R12103, R12104, R12105, R12106, R12107, R12108, R12109, R12110, R12111, R12112, R12113, R12114, R12115, R12116, R12117, R12118, R12119, R12120, R12121, R12122, R12123, R12124, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R12048 += 1 };
  s0 -> s0 [0, 65535] { R12047 += 1, R12048 += 1 };
  s0 -> s1 [45, 45] { R12048 += 1 };
  s0 -> s2 [46, 46] { R12048 += 1 };
  s0 -> s1 [48, 62] { R12048 += 1 };
  s0 -> s3 [65, 65] { R12048 += 1 };
  s0 -> s1 [66, 65535] { R12048 += 1 };
  s1 -> s1 [0, 43] { R12048 += 1 };
  s1 -> s1 [45, 45] { R12048 += 1 };
  s1 -> s2 [46, 46] { R12048 += 1 };
  s1 -> s1 [48, 62] { R12048 += 1 };
  s1 -> s3 [65, 65] { R12048 += 1 };
  s1 -> s1 [66, 65535] { R12048 += 1 };
  s2 -> s1 [0, 43] { R12048 += 1 };
  s2 -> s1 [45, 45] { R12048 += 1 };
  s2 -> s2 [46, 46] { R12048 += 1 };
  s2 -> s1 [48, 62] { R12048 += 1 };
  s2 -> s3 [65, 65] { R12048 += 1 };
  s2 -> s1 [66, 114] { R12048 += 1 };
  s2 -> s8 [115, 115] { R12048 += 1 };
  s2 -> s1 [116, 65535] { R12048 += 1 };
  s3 -> s3 [0, 43] { R12048 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R12048 += 1 };
  s3 -> s4 [46, 46] { R12048 += 1 };
  s3 -> s3 [48, 62] { R12048 += 1 };
  s3 -> s3 [65, 65535] { R12048 += 1 };
  s4 -> s3 [0, 43] { R12048 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R12048 += 1 };
  s4 -> s4 [46, 46] { R12048 += 1 };
  s4 -> s3 [48, 62] { R12048 += 1 };
  s4 -> s3 [65, 114] { R12048 += 1 };
  s4 -> s5 [115, 115] { R12048 += 1 };
  s4 -> s3 [116, 65535] { R12048 += 1 };
  s5 -> s3 [0, 43] { R12048 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R12048 += 1 };
  s5 -> s4 [46, 46] { R12048 += 1 };
  s5 -> s3 [48, 62] { R12048 += 1 };
  s5 -> s3 [65, 110] { R12048 += 1 };
  s5 -> s6 [111, 111] { R12048 += 1 };
  s5 -> s3 [112, 65535] { R12048 += 1 };
  s6 -> s3 [0, 43] { R12048 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R12048 += 1 };
  s6 -> s4 [46, 46] { R12048 += 1 };
  s6 -> s3 [48, 62] { R12048 += 1 };
  s6 -> s3 [65, 98] { R12048 += 1 };
  s6 -> s7 [99, 99] { R12048 += 1 };
  s6 -> s3 [100, 65535] { R12048 += 1 };
  s7 -> s3 [0, 43] { R12048 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R12048 += 1 };
  s7 -> s4 [46, 46] { R12048 += 1 };
  s7 -> s3 [48, 62] { R12048 += 1 };
  s7 -> s3 [65, 106] { R12048 += 1 };
  s7 -> s3 [108, 65535] { R12048 += 1 };
  s8 -> s1 [0, 43] { R12048 += 1 };
  s8 -> s1 [45, 45] { R12048 += 1 };
  s8 -> s2 [46, 46] { R12048 += 1 };
  s8 -> s1 [48, 62] { R12048 += 1 };
  s8 -> s3 [65, 65] { R12048 += 1 };
  s8 -> s1 [66, 110] { R12048 += 1 };
  s8 -> s9 [111, 111] { R12048 += 1 };
  s8 -> s1 [112, 65535] { R12048 += 1 };
  s9 -> s1 [0, 43] { R12048 += 1 };
  s9 -> s1 [45, 45] { R12048 += 1 };
  s9 -> s2 [46, 46] { R12048 += 1 };
  s9 -> s1 [48, 62] { R12048 += 1 };
  s9 -> s3 [65, 65] { R12048 += 1 };
  s9 -> s1 [66, 98] { R12048 += 1 };
  s9 -> s10 [99, 99] { R12048 += 1 };
  s9 -> s1 [100, 65535] { R12048 += 1 };
  s10 -> s1 [0, 43] { R12048 += 1 };
  s10 -> s1 [45, 45] { R12048 += 1 };
  s10 -> s2 [46, 46] { R12048 += 1 };
  s10 -> s1 [48, 62] { R12048 += 1 };
  s10 -> s3 [65, 65] { R12048 += 1 };
  s10 -> s1 [66, 106] { R12048 += 1 };
  s10 -> s1 [108, 65535] { R12048 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R12049 += 1, R12050 += 1 };
  s0 -> s1 [0, 65535] { R12050 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R12050 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R12052 += 1 };
  s0 -> s2 [0, 65535] { R12052 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R12051 += 1, R12052 += 1 };
  s0 -> s3 [58, 58] { R12052 += 1 };
  s0 -> s1 [59, 65535] { R12052 += 1 };
  s1 -> s1 [0, 57] { R12052 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R12052 += 1 };
  s1 -> s1 [59, 65535] { R12052 += 1 };
  s2 -> s1 [0, 57] { R12052 += 1 };
  s2 -> s2 [0, 65535] { R12052 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R12052 += 1 };
  s2 -> s1 [59, 65535] { R12052 += 1 };
  s3 -> s3 [0, 65535] { R12052 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R12054 += 1 };
  s0 -> s2 [0, 65535] { R12054 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R12053 += 1, R12054 += 1 };
  s0 -> s3 [65, 65] { R12054 += 1 };
  s0 -> s1 [66, 65535] { R12054 += 1 };
  s1 -> s1 [0, 64] { R12054 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R12054 += 1 };
  s1 -> s1 [66, 65535] { R12054 += 1 };
  s2 -> s1 [0, 64] { R12054 += 1 };
  s2 -> s2 [0, 65535] { R12054 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R12054 += 1 };
  s2 -> s1 [66, 65535] { R12054 += 1 };
  s3 -> s3 [0, 65535] { R12054 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R12056 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R12056 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R12055 += 1, R12056 += 1 };
  s0 -> s3 [91, 91] { R12056 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R12056 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12056 += 1 };
  s1 -> s1 [0, 65535] { R12056 += 1, R22 += 1 };
  s2 -> s1 [0, 90] { R12056 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12056 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R12056 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R12056 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R12056 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12056 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R12058 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R12058 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R12057 += 1, R12058 += 1 };
  s1 -> s4 [0, 65535] { R12058 += 1 };
  s1 -> s1 [0, 65535] { R12058 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12058 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12058 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12058 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R12060 += 1, R11982 += 1 };
  s0 -> s2 [0, 65535] { R12060 += 1, R11981 += 1, R11982 += 1 };
  s0 -> s0 [0, 65535] { R12059 += 1, R12060 += 1 };
  s0 -> s1 [66, 65535] { R12060 += 1, R11982 += 1 };
  s1 -> s1 [0, 64] { R12060 += 1, R11982 += 1 };
  s1 -> s1 [0, 65535] { R12060 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R12060 += 1, R11982 += 1 };
  s2 -> s1 [0, 64] { R12060 += 1, R11982 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12060 += 1, R11981 += 1, R11982 += 1 };
  s2 -> s1 [66, 65535] { R12060 += 1, R11982 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R12061 += 1, R12062 += 1 };
  s0 -> s1 [0, 65535] { R12062 += 1, R11984 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R12062 += 1, R11983 += 1, R11984 += 1 };
  s1 -> s1 [0, 65535] { R12062 += 1, R11984 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R12062 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12062 += 1, R11984 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R12062 += 1, R11983 += 1, R11984 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12062 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R12064 += 1, R11986 += 1 };
  s0 -> s0 [0, 65535] { R12063 += 1, R12064 += 1 };
  s0 -> s2 [0, 65535] { R12064 += 1, R11985 += 1, R11986 += 1 };
  s0 -> s1 [80, 65535] { R12064 += 1, R11986 += 1 };
  s1 -> s1 [0, 65] { R12064 += 1, R11986 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R12064 += 1 };
  s1 -> s1 [80, 65535] { R12064 += 1, R11986 += 1 };
  s2 -> s1 [0, 65] { R12064 += 1, R11986 += 1 };
  s2 -> s2 [0, 65535] { R12064 += 1, R11985 += 1, R11986 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R12064 += 1, R11986 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R12065 += 1, R12066 += 1 };
  s0 -> s1 [0, 65535] { R12066 += 1, R11987 += 1, R11988 += 1 };
  s0 -> s2 [0, 65535] { R12066 += 1, R11988 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R12066 += 1, R11987 += 1, R11988 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R12066 += 1, R11988 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12066 += 1, R11988 += 1, R406 += 1 };
  s2 -> s4 [0, 65535] { R12066 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12066 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R12068 += 1, R11990 += 1 };
  s0 -> s2 [0, 65535] { R12068 += 1, R11989 += 1, R11990 += 1 };
  s0 -> s0 [0, 65535] { R12067 += 1, R12068 += 1 };
  s0 -> s3 [0, 65535] { R12068 += 1, R11990 += 1, R408 += 1 };
  s0 -> s1 [84, 65535] { R12068 += 1, R11990 += 1 };
  s1 -> s1 [0, 82] { R12068 += 1, R11990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12068 += 1 };
  s1 -> s1 [84, 65535] { R12068 += 1, R11990 += 1 };
  s2 -> s1 [0, 82] { R12068 += 1, R11990 += 1 };
  s2 -> s2 [0, 65535] { R12068 += 1, R11989 += 1, R11990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12068 += 1, R11990 += 1, R408 += 1 };
  s2 -> s1 [84, 65535] { R12068 += 1, R11990 += 1 };
  s3 -> s1 [0, 82] { R12068 += 1, R11990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12068 += 1, R11990 += 1, R408 += 1 };
  s3 -> s5 [0, 65535] { R12068 += 1 };
  s3 -> s1 [84, 65535] { R12068 += 1, R11990 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12068 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R12070 += 1, R11992 += 1 };
  s0 -> s2 [0, 65535] { R12070 += 1, R11992 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R12070 += 1, R11991 += 1, R11992 += 1 };
  s0 -> s0 [0, 65535] { R12069 += 1, R12070 += 1 };
  s0 -> s1 [81, 65535] { R12070 += 1, R11992 += 1 };
  s1 -> s1 [0, 79] { R12070 += 1, R11992 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R12070 += 1 };
  s1 -> s1 [81, 65535] { R12070 += 1, R11992 += 1 };
  s2 -> s1 [0, 79] { R12070 += 1, R11992 += 1 };
  s2 -> s2 [0, 65535] { R12070 += 1, R11992 += 1, R410 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R12070 += 1 };
  s2 -> s1 [81, 65535] { R12070 += 1, R11992 += 1 };
  s3 -> s1 [0, 79] { R12070 += 1, R11992 += 1 };
  s3 -> s2 [0, 65535] { R12070 += 1, R11992 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R12070 += 1, R11991 += 1, R11992 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R12070 += 1, R11992 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12070 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R12072 += 1, R11994 += 1, R415 += 1, R416 += 1 };
  s0 -> s0 [0, 65535] { R12071 += 1, R12072 += 1 };
  s0 -> s2 [0, 65535] { R12072 += 1, R11993 += 1, R11994 += 1 };
  s0 -> s3 [0, 65535] { R12072 += 1, R11994 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R12072 += 1, R11994 += 1, R415 += 1, R416 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R12072 += 1 };
  s1 -> s6 [0, 65535] { R12072 += 1, R11994 += 1 };
  s2 -> s1 [0, 65535] { R12072 += 1, R11994 += 1, R415 += 1, R416 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12072 += 1, R11993 += 1, R11994 += 1 };
  s2 -> s3 [0, 65535] { R12072 += 1, R11994 += 1, R414 += 1, R415 += 1 };
  s3 -> s1 [0, 65535] { R12072 += 1, R11994 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R12072 += 1 };
  s3 -> s3 [0, 65535] { R12072 += 1, R11994 += 1, R414 += 1, R415 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12072 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12072 += 1 };
  s6 -> s6 [0, 65535] { R12072 += 1, R11994 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R12074 += 1, R11996 += 1 };
  s0 -> s0 [0, 65535] { R12073 += 1, R12074 += 1 };
  s0 -> s2 [0, 65535] { R12074 += 1, R11995 += 1, R11996 += 1 };
  s1 -> s1 [0, 65535] { R12074 += 1, R11996 += 1 };
  s1 -> s4 [0, 65535] { R12074 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12074 += 1, R11996 += 1 };
  s2 -> s2 [0, 65535] { R12074 += 1, R11995 += 1, R11996 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12074 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R12076 += 1, R11998 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R12075 += 1, R12076 += 1 };
  s0 -> s2 [0, 65535] { R12076 += 1, R11997 += 1, R11998 += 1 };
  s0 -> s3 [0, 65535] { R12076 += 1, R11998 += 1, R419 += 1, R420 += 1 };
  s0 -> s1 [81, 65535] { R12076 += 1, R11998 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R12076 += 1, R11998 += 1, R420 += 1 };
  s1 -> s4 [0, 65535] { R12076 += 1 };
  s1 -> s1 [0, 65535] { R12076 += 1, R11998 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R12076 += 1, R11998 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R12076 += 1, R11998 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R12076 += 1, R11997 += 1, R11998 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R12076 += 1, R11998 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R12076 += 1, R11998 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R12076 += 1, R11998 += 1, R420 += 1 };
  s3 -> s4 [0, 65535] { R12076 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12076 += 1, R11998 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [81, 65535] { R12076 += 1, R11998 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R12076 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R12078 += 1, R12000 += 1, R425 += 1, R426 += 1 };
  s0 -> s0 [0, 65535] { R12077 += 1, R12078 += 1 };
  s0 -> s2 [0, 65535] { R12078 += 1, R12000 += 1, R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R12078 += 1, R11999 += 1, R12000 += 1 };
  s1 -> s1 [0, 65535] { R12078 += 1, R12000 += 1, R425 += 1, R426 += 1 };
  s1 -> s5 [0, 65535] { R12078 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R12078 += 1, R12000 += 1 };
  s2 -> s1 [0, 65535] { R12078 += 1, R12000 += 1, R425 += 1, R426 += 1 };
  s2 -> s2 [0, 65535] { R12078 += 1, R12000 += 1, R424 += 1, R425 += 1 };
  s2 -> s5 [0, 65535] { R12078 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R12078 += 1, R12000 += 1, R425 += 1, R426 += 1 };
  s3 -> s2 [0, 65535] { R12078 += 1, R12000 += 1, R424 += 1, R425 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12078 += 1, R11999 += 1, R12000 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12078 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R12078 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R12078 += 1, R12000 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R12079 += 1, R12080 += 1 };
  s0 -> s2 [0, 65535] { R12080 += 1, R12001 += 1, R12002 += 1 };
  s0 -> s3 [0, 65535] { R12080 += 1, R12002 += 1, R429 += 1, R430 += 1 };
  s0 -> s1 [91, 107] { R12080 += 1, R12002 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R12080 += 1, R12002 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s1 -> s1 [0, 65535] { R12080 += 1, R12002 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R12080 += 1 };
  s1 -> s1 [91, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12080 += 1, R12001 += 1, R12002 += 1 };
  s2 -> s3 [0, 65535] { R12080 += 1, R12002 += 1, R429 += 1, R430 += 1 };
  s2 -> s1 [91, 107] { R12080 += 1, R12002 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R12080 += 1, R12002 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12080 += 1, R12002 += 1, R429 += 1, R430 += 1 };
  s3 -> s6 [0, 65535] { R12080 += 1 };
  s3 -> s1 [91, 107] { R12080 += 1, R12002 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R12080 += 1, R12002 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s4 -> s4 [0, 65535] { R12080 += 1, R12002 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12080 += 1 };
  s4 -> s1 [91, 110] { R12080 += 1, R12002 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R12080 += 1, R12002 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12080 += 1 };
  s7 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s7 -> s7 [0, 65535] { R12080 += 1, R12002 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R12080 += 1 };
  s7 -> s1 [91, 98] { R12080 += 1, R12002 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R12080 += 1, R12002 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R12080 += 1, R12002 += 1 };
  s8 -> s6 [0, 65535] { R12080 += 1 };
  s8 -> s1 [91, 96] { R12080 += 1, R12002 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R12080 += 1, R12002 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s9 -> s9 [0, 65535] { R12080 += 1, R12002 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R12080 += 1 };
  s9 -> s1 [91, 107] { R12080 += 1, R12002 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R12080 += 1, R12002 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s10 -> s10 [0, 65535] { R12080 += 1, R12002 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R12080 += 1 };
  s10 -> s1 [91, 103] { R12080 += 1, R12002 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R12080 += 1, R12002 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R12080 += 1, R12002 += 1 };
  s11 -> s6 [0, 65535] { R12080 += 1 };
  s11 -> s1 [91, 110] { R12080 += 1, R12002 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R12080 += 1, R12002 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s12 -> s12 [0, 65535] { R12080 += 1, R12002 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R12080 += 1 };
  s12 -> s1 [91, 114] { R12080 += 1, R12002 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R12080 += 1, R12002 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s13 -> s13 [0, 65535] { R12080 += 1, R12002 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R12080 += 1 };
  s13 -> s1 [91, 115] { R12080 += 1, R12002 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R12080 += 1, R12002 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R12080 += 1, R12002 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R12080 += 1, R12002 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R12082 += 1, R12004 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s2 [0, 65535] { R12082 += 1, R12003 += 1, R12004 += 1 };
  s0 -> s3 [0, 65535] { R12082 += 1, R12004 += 1 };
  s0 -> s0 [0, 65535] { R12081 += 1, R12082 += 1 };
  s1 -> s1 [0, 65535] { R12082 += 1, R12004 += 1, R7263 += 1, R7264 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R12082 += 1, R12004 += 1 };
  s1 -> s5 [0, 65535] { R12082 += 1 };
  s2 -> s1 [0, 65535] { R12082 += 1, R12004 += 1, R7263 += 1, R7264 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R12082 += 1, R12003 += 1, R12004 += 1 };
  s2 -> s3 [0, 65535] { R12082 += 1, R12004 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12082 += 1, R12004 += 1 };
  s3 -> s5 [0, 65535] { R12082 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R12082 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R12084 += 1, R12006 += 1 };
  s0 -> s2 [0, 65535] { R12084 += 1, R12005 += 1, R12006 += 1 };
  s0 -> s0 [0, 65535] { R12083 += 1, R12084 += 1 };
  s1 -> s1 [0, 65535] { R12084 += 1, R12006 += 1 };
  s1 -> s4 [0, 65535] { R12084 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R12084 += 1, R12006 += 1 };
  s2 -> s2 [0, 65535] { R12084 += 1, R12005 += 1, R12006 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12084 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R12086 += 1, R12007 += 1, R12008 += 1 };
  s0 -> s2 [0, 65535] { R12086 += 1, R12008 += 1 };
  s0 -> s0 [0, 65535] { R12085 += 1, R12086 += 1 };
  s1 -> s1 [0, 65535] { R12086 += 1, R12007 += 1, R12008 += 1 };
  s1 -> s2 [0, 65535] { R12086 += 1, R12008 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R12086 += 1 };
  s2 -> s2 [0, 65535] { R12086 += 1, R12008 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R12086 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R12088 += 1, R12010 += 1, R11823 += 1, R11824 += 1 };
  s0 -> s2 [0, 65535] { R12088 += 1, R12009 += 1, R12010 += 1 };
  s0 -> s3 [0, 65535] { R12088 += 1, R12010 += 1, R11822 += 1, R11823 += 1 };
  s0 -> s0 [0, 65535] { R12087 += 1, R12088 += 1 };
  s1 -> s6 [0, 65535] { R12088 += 1, R12010 += 1 };
  s1 -> s1 [0, 65535] { R12088 += 1, R12010 += 1, R11823 += 1, R11824 += 1 };
  s1 -> s4 [0, 65535] { R12088 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R12088 += 1, R12010 += 1, R11823 += 1, R11824 += 1 };
  s2 -> s2 [0, 65535] { R12088 += 1, R12009 += 1, R12010 += 1 };
  s2 -> s3 [0, 65535] { R12088 += 1, R12010 += 1, R11822 += 1, R11823 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R12088 += 1, R12010 += 1, R11823 += 1, R11824 += 1 };
  s3 -> s4 [0, 65535] { R12088 += 1 };
  s3 -> s3 [0, 65535] { R12088 += 1, R12010 += 1, R11822 += 1, R11823 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12088 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12088 += 1, R12010 += 1 };
  s6 -> s4 [0, 65535] { R12088 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R12090 += 1, R12012 += 1 };
  s0 -> s2 [0, 65535] { R12090 += 1, R12011 += 1, R12012 += 1 };
  s0 -> s0 [0, 65535] { R12089 += 1, R12090 += 1 };
  s1 -> s1 [0, 65535] { R12090 += 1, R12012 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12090 += 1 };
  s2 -> s1 [0, 65535] { R12090 += 1, R12012 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12090 += 1, R12011 += 1, R12012 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12090 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 79] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s0 -> s1 [0, 65535] { R12092 += 1, R12014 += 1 };
  s0 -> s0 [0, 65535] { R12091 += 1, R12092 += 1 };
  s0 -> s2 [0, 65535] { R12092 += 1, R12013 += 1, R12014 += 1 };
  s0 -> s3 [80, 80] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s0 -> s4 [80, 80] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s0 -> s1 [81, 65535] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s1 -> s1 [0, 79] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s1 -> s1 [0, 65535] { R12092 += 1, R12014 += 1 };
  s1 -> s6 [0, 65535] { R12092 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s3 [80, 80] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s1 -> s4 [80, 80] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s1 -> s1 [81, 65535] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s2 -> s1 [0, 79] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s2 -> s1 [0, 65535] { R12092 += 1, R12014 += 1 };
  s2 -> s2 [0, 65535] { R12092 += 1, R12013 += 1, R12014 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [80, 80] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s2 -> s4 [80, 80] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s2 -> s1 [81, 65535] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s3 -> s3 [0, 65535] { R12092 += 1, R12014 += 1 };
  s3 -> s6 [0, 65535] { R12092 += 1 };
  s3 -> s7 [0, 65535];
  s4 -> s5 [0, 65535] { R12092 += 1, R12014 += 1 };
  s4 -> s4 [0, 65535] { R12092 += 1, R12014 += 1, R11979 += 1, R11980 += 1 };
  s4 -> s6 [0, 65535] { R12092 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R12092 += 1, R12014 += 1 };
  s5 -> s6 [0, 65535] { R12092 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R12092 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R12094 += 1, R12016 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R12093 += 1, R12094 += 1 };
  s0 -> s2 [0, 65535] { R12094 += 1, R12015 += 1, R12016 += 1 };
  s1 -> s1 [0, 65535] { R12094 += 1, R12016 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R12094 += 1 };
  s2 -> s1 [0, 65535] { R12094 += 1, R12016 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R12094 += 1, R12015 += 1, R12016 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R12094 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R12096 += 1, R12018 += 1 };
  s0 -> s2 [0, 65535] { R12096 += 1, R12017 += 1, R12018 += 1 };
  s0 -> s0 [0, 65535] { R12095 += 1, R12096 += 1 };
  s0 -> s3 [65, 65] { R12096 += 1, R12018 += 1 };
  s0 -> s4 [65, 65] { R12096 += 1, R12018 += 1 };
  s0 -> s5 [80, 80] { R12096 += 1, R12018 += 1 };
  s0 -> s1 [81, 65535] { R12096 += 1, R12018 += 1 };
  s1 -> s1 [0, 64] { R12096 += 1, R12018 += 1 };
  s1 -> s3 [65, 65] { R12096 += 1, R12018 += 1 };
  s1 -> s4 [65, 65] { R12096 += 1, R12018 += 1 };
  s1 -> s5 [80, 80] { R12096 += 1, R12018 += 1 };
  s1 -> s1 [81, 65535] { R12096 += 1, R12018 += 1 };
  s2 -> s1 [0, 64] { R12096 += 1, R12018 += 1 };
  s2 -> s2 [0, 65535] { R12096 += 1, R12017 += 1, R12018 += 1 };
  s2 -> s3 [65, 65] { R12096 += 1, R12018 += 1 };
  s2 -> s4 [65, 65] { R12096 += 1, R12018 += 1 };
  s2 -> s5 [80, 80] { R12096 += 1, R12018 += 1 };
  s2 -> s1 [81, 65535] { R12096 += 1, R12018 += 1 };
  s4 -> s4 [0, 65] { R12096 += 1, R12018 += 1 };
  s4 -> s7 [80, 80] { R12096 += 1, R12018 += 1 };
  s4 -> s4 [81, 65535] { R12096 += 1, R12018 += 1 };
  s5 -> s5 [0, 64] { R12096 += 1, R12018 += 1 };
  s5 -> s5 [0, 65535] { R12096 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R12096 += 1, R12018 += 1 };
  s5 -> s8 [65, 65] { R12096 += 1, R12018 += 1 };
  s5 -> s5 [80, 65535] { R12096 += 1, R12018 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R12096 += 1, R12018 += 1 };
  s7 -> s7 [0, 65535] { R12096 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R12096 += 1, R12018 += 1 };
  s8 -> s8 [0, 65535] { R12096 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R12098 += 1, R12020 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R12098 += 1, R12019 += 1, R12020 += 1 };
  s0 -> s0 [0, 65535] { R12097 += 1, R12098 += 1 };
  s0 -> s3 [65, 65] { R12098 += 1, R12020 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R12098 += 1, R12020 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R12098 += 1, R12020 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R12098 += 1, R12020 += 1, R405 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12098 += 1 };
  s1 -> s3 [65, 65] { R12098 += 1, R12020 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R12098 += 1, R12020 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R12098 += 1, R12020 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R12098 += 1, R12020 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R12098 += 1, R12019 += 1, R12020 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12098 += 1, R12020 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R12098 += 1, R12020 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R12098 += 1, R12020 += 1, R405 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12098 += 1, R12020 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R12098 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12098 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12098 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R12100 += 1, R12022 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R12100 += 1, R12021 += 1, R12022 += 1 };
  s0 -> s0 [0, 65535] { R12099 += 1, R12100 += 1 };
  s0 -> s3 [65, 65] { R12100 += 1, R12022 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R12100 += 1, R12022 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R12100 += 1, R12022 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R12100 += 1, R12022 += 1, R407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12100 += 1 };
  s1 -> s3 [65, 65] { R12100 += 1, R12022 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R12100 += 1, R12022 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R12100 += 1, R12022 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R12100 += 1, R12022 += 1, R407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12100 += 1, R12021 += 1, R12022 += 1 };
  s2 -> s3 [65, 65] { R12100 += 1, R12022 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R12100 += 1, R12022 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R12100 += 1, R12022 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12100 += 1, R12022 += 1, R407 += 1 };
  s3 -> s6 [0, 65535] { R12100 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12100 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12100 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R12102 += 1, R12024 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R12101 += 1, R12102 += 1 };
  s0 -> s2 [0, 65535] { R12102 += 1, R12023 += 1, R12024 += 1 };
  s0 -> s3 [65, 65] { R12102 += 1, R12024 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R12102 += 1, R12024 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R12102 += 1, R12024 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R12102 += 1, R12024 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R12102 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R12102 += 1, R12024 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R12102 += 1, R12024 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R12102 += 1, R12024 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R12102 += 1, R12024 += 1, R409 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12102 += 1, R12023 += 1, R12024 += 1 };
  s2 -> s3 [65, 65] { R12102 += 1, R12024 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R12102 += 1, R12024 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R12102 += 1, R12024 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R12102 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12102 += 1 };
  s4 -> s4 [0, 65535] { R12102 += 1, R12024 += 1, R409 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R12104 += 1, R12025 += 1, R12026 += 1 };
  s0 -> s0 [0, 65535] { R12103 += 1, R12104 += 1 };
  s0 -> s3 [65, 65] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R12104 += 1 };
  s1 -> s3 [65, 65] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R12104 += 1, R12025 += 1, R12026 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R12104 += 1, R12026 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535] { R12104 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12104 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12104 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R12106 += 1, R12028 += 1 };
  s0 -> s0 [0, 65535] { R12105 += 1, R12106 += 1 };
  s0 -> s2 [0, 65535] { R12106 += 1, R12027 += 1, R12028 += 1 };
  s0 -> s3 [65, 65] { R12106 += 1, R12028 += 1 };
  s0 -> s4 [65, 65] { R12106 += 1, R12028 += 1 };
  s0 -> s1 [66, 65535] { R12106 += 1, R12028 += 1 };
  s1 -> s1 [0, 64] { R12106 += 1, R12028 += 1 };
  s1 -> s1 [0, 65535] { R12106 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R12106 += 1, R12028 += 1 };
  s1 -> s4 [65, 65] { R12106 += 1, R12028 += 1 };
  s1 -> s1 [66, 65535] { R12106 += 1, R12028 += 1 };
  s2 -> s1 [0, 64] { R12106 += 1, R12028 += 1 };
  s2 -> s2 [0, 65535] { R12106 += 1, R12027 += 1, R12028 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R12106 += 1, R12028 += 1 };
  s2 -> s4 [65, 65] { R12106 += 1, R12028 += 1 };
  s2 -> s1 [66, 65535] { R12106 += 1, R12028 += 1 };
  s3 -> s3 [0, 65535] { R12106 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12106 += 1 };
  s4 -> s4 [0, 65535] { R12106 += 1, R12028 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R12106 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R12107 += 1, R12108 += 1 };
  s0 -> s2 [0, 65535] { R12108 += 1, R12029 += 1, R12030 += 1 };
  s0 -> s3 [65, 65] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R12108 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R12108 += 1, R12029 += 1, R12030 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R12108 += 1, R12030 += 1, R417 += 1, R418 += 1 };
  s3 -> s6 [0, 65535] { R12108 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12108 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12108 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R12109 += 1, R12110 += 1 };
  s0 -> s2 [0, 65535] { R12110 += 1, R12031 += 1, R12032 += 1 };
  s0 -> s3 [65, 65] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R12110 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R12110 += 1, R12031 += 1, R12032 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s3 -> s6 [0, 65535] { R12110 += 1 };
  s3 -> s3 [0, 65535] { R12110 += 1, R12032 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12110 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12110 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R12112 += 1, R12033 += 1, R12034 += 1 };
  s0 -> s0 [0, 65535] { R12111 += 1, R12112 += 1 };
  s0 -> s3 [65, 65] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R12112 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12112 += 1, R12033 += 1, R12034 += 1 };
  s2 -> s3 [65, 65] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R12112 += 1, R12034 += 1, R427 += 1, R428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R12112 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12112 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12112 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [0, 64] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s3 [0, 65535] { R12114 += 1, R12035 += 1, R12036 += 1 };
  s0 -> s0 [0, 65535] { R12113 += 1, R12114 += 1 };
  s0 -> s4 [65, 65] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s5 [65, 65] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s7 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s1 [66, 65535] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [66, 65535] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [0, 64] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [0, 65535] { R12114 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s7 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [66, 65535] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [0, 64] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s4 [65, 65] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s5 [65, 65] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s6 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s7 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [66, 65535] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [0, 64] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [0, 64] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R12114 += 1, R12035 += 1, R12036 += 1 };
  s3 -> s4 [65, 65] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s5 [65, 65] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s7 [65, 65] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s1 [66, 65535] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [66, 65535] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s4 -> s4 [0, 65535] { R12114 += 1, R12036 += 1, R7259 += 1, R7260 += 1 };
  s4 -> s6 [0, 65535] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R12114 += 1 };
  s6 -> s6 [0, 65535] { R12114 += 1, R12036 += 1, R7260 += 1, R7261 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R12114 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12114 += 1 };
  accepting s8, s9, s6, s1, s7;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s0 -> s2 [0, 64] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s0 -> s3 [0, 65535] { R12116 += 1, R12037 += 1, R12038 += 1 };
  s0 -> s0 [0, 65535] { R12115 += 1, R12116 += 1 };
  s0 -> s4 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s0 -> s5 [65, 65] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s0 -> s6 [65, 65] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s0 -> s7 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s0 -> s1 [66, 65535] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s0 -> s2 [66, 65535] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s1 -> s11 [0, 64] { R12116 += 1, R12038 += 1 };
  s1 -> s1 [0, 64] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s1 -> s4 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s1 -> s8 [65, 65] { R12116 += 1, R12038 += 1 };
  s1 -> s12 [65, 65] { R12116 += 1, R12038 += 1 };
  s1 -> s7 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s1 -> s11 [66, 65535] { R12116 += 1, R12038 += 1 };
  s1 -> s1 [66, 65535] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s2 -> s1 [0, 64] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s2 -> s2 [0, 64] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s2 -> s4 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s2 -> s5 [65, 65] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s2 -> s6 [65, 65] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s2 -> s7 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s2 -> s1 [66, 65535] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s2 -> s2 [66, 65535] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s3 -> s1 [0, 64] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s3 -> s2 [0, 64] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s3 -> s3 [0, 65535] { R12116 += 1, R12037 += 1, R12038 += 1 };
  s3 -> s4 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s3 -> s5 [65, 65] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s3 -> s6 [65, 65] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s3 -> s7 [65, 65] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s3 -> s1 [66, 65535] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s3 -> s2 [66, 65535] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s5 -> s5 [0, 65535] { R12116 += 1, R12038 += 1, R11813 += 1, R11814 += 1 };
  s5 -> s7 [0, 65535] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s7 -> s8 [0, 65535] { R12116 += 1, R12038 += 1 };
  s7 -> s7 [0, 65535] { R12116 += 1, R12038 += 1, R11814 += 1, R11815 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R12116 += 1, R12038 += 1 };
  s8 -> s10 [0, 65535] { R12116 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R12116 += 1 };
  s11 -> s11 [0, 64] { R12116 += 1, R12038 += 1 };
  s11 -> s11 [0, 65535] { R12116 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [65, 65] { R12116 += 1, R12038 += 1 };
  s11 -> s12 [65, 65] { R12116 += 1, R12038 += 1 };
  s11 -> s11 [66, 65535] { R12116 += 1, R12038 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R12116 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R12118 += 1, R12040 += 1 };
  s0 -> s0 [0, 65535] { R12117 += 1, R12118 += 1 };
  s0 -> s2 [0, 65535] { R12118 += 1, R12039 += 1, R12040 += 1 };
  s0 -> s3 [65, 65] { R12118 += 1, R12040 += 1 };
  s0 -> s4 [65, 65] { R12118 += 1, R12040 += 1 };
  s0 -> s1 [66, 65535] { R12118 += 1, R12040 += 1 };
  s1 -> s1 [0, 64] { R12118 += 1, R12040 += 1 };
  s1 -> s1 [0, 65535] { R12118 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R12118 += 1, R12040 += 1 };
  s1 -> s4 [65, 65] { R12118 += 1, R12040 += 1 };
  s1 -> s1 [66, 65535] { R12118 += 1, R12040 += 1 };
  s2 -> s1 [0, 64] { R12118 += 1, R12040 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R12118 += 1, R12039 += 1, R12040 += 1 };
  s2 -> s3 [65, 65] { R12118 += 1, R12040 += 1 };
  s2 -> s4 [65, 65] { R12118 += 1, R12040 += 1 };
  s2 -> s1 [66, 65535] { R12118 += 1, R12040 += 1 };
  s3 -> s3 [0, 65535] { R12118 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12118 += 1, R12040 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R12118 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12118 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s0 -> s0 [0, 65535] { R12119 += 1, R12120 += 1 };
  s0 -> s2 [0, 65535] { R12120 += 1, R12041 += 1, R12042 += 1 };
  s0 -> s3 [65, 65] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s0 -> s4 [65, 65] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s0 -> s1 [66, 65535] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s1 -> s1 [0, 64] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R12120 += 1 };
  s1 -> s3 [65, 65] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s1 -> s4 [65, 65] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s1 -> s1 [66, 65535] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s2 -> s1 [0, 64] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R12120 += 1, R12041 += 1, R12042 += 1 };
  s2 -> s3 [65, 65] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s2 -> s4 [65, 65] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s2 -> s1 [66, 65535] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s3 -> s3 [0, 65535] { R12120 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R12120 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R12120 += 1, R12042 += 1, R11819 += 1, R11820 += 1 };
  s5 -> s5 [0, 65535] { R12120 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R12122 += 1, R12044 += 1 };
  s0 -> s2 [0, 65535] { R12122 += 1, R12043 += 1, R12044 += 1 };
  s0 -> s0 [0, 65535] { R12121 += 1, R12122 += 1 };
  s0 -> s3 [65, 65] { R12122 += 1, R12044 += 1 };
  s0 -> s4 [65, 65] { R12122 += 1, R12044 += 1 };
  s0 -> s1 [66, 65535] { R12122 += 1, R12044 += 1 };
  s1 -> s1 [0, 64] { R12122 += 1, R12044 += 1 };
  s1 -> s1 [0, 65535] { R12122 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R12122 += 1, R12044 += 1 };
  s1 -> s4 [65, 65] { R12122 += 1, R12044 += 1 };
  s1 -> s1 [66, 65535] { R12122 += 1, R12044 += 1 };
  s2 -> s1 [0, 64] { R12122 += 1, R12044 += 1 };
  s2 -> s2 [0, 65535] { R12122 += 1, R12043 += 1, R12044 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R12122 += 1, R12044 += 1 };
  s2 -> s4 [65, 65] { R12122 += 1, R12044 += 1 };
  s2 -> s1 [66, 65535] { R12122 += 1, R12044 += 1 };
  s3 -> s3 [0, 65535] { R12122 += 1, R12044 += 1 };
  s3 -> s6 [0, 65535] { R12122 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R12122 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R12122 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s0 -> s2 [0, 64] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s0 -> s0 [0, 65535] { R12123 += 1, R12124 += 1 };
  s0 -> s3 [0, 65535] { R12124 += 1, R12045 += 1, R12046 += 1 };
  s0 -> s4 [65, 65] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s0 -> s5 [65, 65] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s0 -> s6 [65, 65] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s0 -> s7 [65, 65] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s0 -> s2 [66, 79] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s0 -> s1 [66, 65535] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s0 -> s2 [81, 65535] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s1 -> s1 [0, 64] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s1 -> s2 [0, 64] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s1 -> s4 [65, 65] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s1 -> s5 [65, 65] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s1 -> s6 [65, 65] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s1 -> s7 [65, 65] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s1 -> s2 [66, 79] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s1 -> s1 [66, 65535] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s1 -> s2 [81, 65535] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s2 -> s2 [0, 64] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s2 -> s2 [0, 65535] { R12124 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R12124 += 1, R12046 += 1 };
  s2 -> s6 [65, 65] { R12124 += 1, R12046 += 1 };
  s2 -> s2 [66, 79] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s2 -> s2 [66, 65535] { R12124 += 1, R12046 += 1 };
  s2 -> s2 [81, 65535] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s3 -> s1 [0, 64] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s3 -> s2 [0, 64] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s3 -> s3 [0, 65535] { R12124 += 1, R12045 += 1, R12046 += 1 };
  s3 -> s4 [65, 65] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s3 -> s5 [65, 65] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s3 -> s6 [65, 65] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s3 -> s7 [65, 65] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s3 -> s2 [66, 79] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s3 -> s1 [66, 65535] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s3 -> s2 [81, 65535] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s4 -> s4 [0, 79] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s4 -> s4 [0, 65535] { R12124 += 1, R12046 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R12124 += 1 };
  s4 -> s4 [81, 65535] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s6 -> s6 [0, 65535] { R12124 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s4 [0, 79] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s7 -> s7 [0, 65535] { R12124 += 1, R12046 += 1, R11975 += 1, R11976 += 1 };
  s7 -> s4 [81, 65535] { R12124 += 1, R12046 += 1, R11976 += 1, R11977 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R12124 += 1 };
  accepting s4, s8, s2, s9, s6;
};
};
constraint R2 = R12014 && R3 = R12124 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R11981 = 0 && R11982 = R12014 && R11983 = 0 && R11984 = R12014 && R11985 = 0 && R11986 = R12014 && R11987 = 0 && R11988 = R12014 && R11989 = 0 && R11990 = R12014 && R11991 = 0 && R11992 = R12014 && R11993 = 0 && R11994 = R12014 && R11995 = 0 && R11996 = R12014 && R11997 = 0 && R11998 = R12014 && R11999 = 0 && R12000 = R12014 && R12001 = 0 && R12002 = R12014 && R12003 = 0 && R12004 = R12014 && R12005 = 0 && R12006 = R12014 && R12007 = 0 && R12008 = R12014 && R12009 = 0 && R12010 = R12014 && R12011 = 0 && R12012 = R12014 && R12013 = 0 && R12017 = 0 && R12018 = 0 && R12035 = 0 && R12036 = 0 && R12037 = 0 && R12038 = 0 && R12045 = 0 && R12046 = 0 && R12047 = 10 && R12048 = R12124 && R12049 = 10 && R12050 = R12124 && R12051 = 10 && R12052 = R12124 && R12053 = 10 && R12054 = R12124 && R12055 = 10 && R12056 = R12124 && R12057 = 10 && R12058 = R12124 && R12059 = 10 && R12060 = R12124 && R12061 = 10 && R12062 = R12124 && R12063 = 10 && R12064 = R12124 && R12065 = 10 && R12066 = R12124 && R12067 = 10 && R12068 = R12124 && R12069 = 10 && R12070 = R12124 && R12071 = 10 && R12072 = R12124 && R12073 = 10 && R12074 = R12124 && R12075 = 10 && R12076 = R12124 && R12077 = 10 && R12078 = R12124 && R12079 = 10 && R12080 = R12124 && R12081 = 10 && R12082 = R12124 && R12083 = 10 && R12084 = R12124 && R12085 = 10 && R12086 = R12124 && R12087 = 10 && R12088 = R12124 && R12089 = 10 && R12090 = R12124 && R12091 = 10 && R12092 = R12124 && R12093 = 10 && R12094 = R12124 && R12095 = 10 && R12096 = R12124 && R12097 = 10 && R12098 = R12124 && R12099 = 10 && R12100 = R12124 && R12101 = 10 && R12102 = R12124 && R12103 = 10 && R12104 = R12124 && R12105 = 10 && R12106 = R12124 && R12107 = 10 && R12108 = R12124 && R12109 = 10 && R12110 = R12124 && R12111 = 10 && R12112 = R12124 && R12113 = 10 && R12114 = R12124 && R12115 = 10 && R12116 = R12124 && R12117 = 10 && R12118 = R12124 && R12119 = 10 && R12120 = R12124 && R12121 = 10 && R12122 = R12124 && R12123 = 10 && R7264 + R7261 + R11980 + R11977 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R12014 && 9 < R12124 && (R20 = 0 || (R12015 = 0 && R12016 = 0)) && (R20 = 0 || (R12019 = 0 && R12020 = 0)) && (R20 = 0 || (R12021 = 0 && R12022 = 0)) && (R20 = 0 || (R12023 = 0 && R12024 = 0)) && (R20 = 0 || (R12025 = 0 && R12026 = 0)) && (R20 = 0 || (R12027 = 0 && R12028 = 0)) && (R20 = 0 || (R12029 = 0 && R12030 = 0)) && (R20 = 0 || (R12031 = 0 && R12032 = 0)) && (R20 = 0 || (R12033 = 0 && R12034 = 0)) && (R20 = 0 || (R12039 = 0 && R12040 = 0)) && (R20 = 0 || (R12041 = 0 && R12042 = 0)) && (R20 = 0 || (R12043 = 0 && R12044 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R11818 + R11815 = 0 || (R11816 + R11813 = 0 && R11817 + R11814 = 0)) && (R11824 + R11821 = 0 || (R11822 + R11819 = 0 && R11823 + R11820 = 0)) && (R11824 + R11821 = 0 || (R11978 + R11975 = 0 && R11979 + R11976 = 0));
// End of Parikh automata intersection problem
