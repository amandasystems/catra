// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264, R7265, R7266, R7267, R7268, R7269, R7270, R7271, R7272, R7273, R7274, R7275, R7276, R7727, R7728, R7729, R7730, R7731, R7732, R7733, R7734, R7735, R7736, R7737, R7738, R7739, R7740, R7741, R7742, R7743, R7744, R7745, R7746, R7747, R7748, R7749, R7750, R7751, R7752, R7753, R7754, R7755, R7756, R7757, R7758, R7759, R7760, R7761, R7762, R7763, R7764, R7765, R7766, R7767, R7768, R7769, R7770, R7771, R7772, R7773, R7774, R7775, R7776, R7777, R7778, R7779, R7780, R7781, R7782, R7783, R7784, R7785, R7786, R7787, R7788, R7789, R7790, R7791, R7792, R7793, R7794, R7795, R7796, R7797, R7798, R7799, R7800, R7801, R7802, R7803, R7804, R7805, R7806, R7807, R7808, R7809, R7810, R7811, R7812, R7813, R7814, R7815, R7816, R7817, R7818, R7819, R7820, R7821, R7822, R7823, R7824, R7825, R7826, R7827, R7828, R7829, R7830, R7831, R7832, R7833, R7834, R7835, R7836, R7837, R7838, R7839, R7840, R7841, R7842, R7843, R7844, R7845, R7846, R7847, R7848, R7849, R7850, R7851, R7852, R7853, R7854, R7855, R7856, R7857, R7858, R7859, R7860, R7861, R7862, R7863, R7864, R7865, R7866, R7867, R7868, R7869, R7870, R7871, R7872, R7873, R7874, R7875, R7876;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R7800 += 1 };
  s0 -> s0 [0, 65535] { R7799 += 1, R7800 += 1 };
  s0 -> s1 [45, 45] { R7800 += 1 };
  s0 -> s2 [46, 46] { R7800 += 1 };
  s0 -> s1 [48, 62] { R7800 += 1 };
  s0 -> s3 [65, 65] { R7800 += 1 };
  s0 -> s1 [66, 65535] { R7800 += 1 };
  s1 -> s1 [0, 43] { R7800 += 1 };
  s1 -> s1 [45, 45] { R7800 += 1 };
  s1 -> s2 [46, 46] { R7800 += 1 };
  s1 -> s1 [48, 62] { R7800 += 1 };
  s1 -> s3 [65, 65] { R7800 += 1 };
  s1 -> s1 [66, 65535] { R7800 += 1 };
  s2 -> s1 [0, 43] { R7800 += 1 };
  s2 -> s1 [45, 45] { R7800 += 1 };
  s2 -> s2 [46, 46] { R7800 += 1 };
  s2 -> s1 [48, 62] { R7800 += 1 };
  s2 -> s3 [65, 65] { R7800 += 1 };
  s2 -> s1 [66, 114] { R7800 += 1 };
  s2 -> s8 [115, 115] { R7800 += 1 };
  s2 -> s1 [116, 65535] { R7800 += 1 };
  s3 -> s3 [0, 43] { R7800 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7800 += 1 };
  s3 -> s4 [46, 46] { R7800 += 1 };
  s3 -> s3 [48, 62] { R7800 += 1 };
  s3 -> s3 [65, 65535] { R7800 += 1 };
  s4 -> s3 [0, 43] { R7800 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7800 += 1 };
  s4 -> s4 [46, 46] { R7800 += 1 };
  s4 -> s3 [48, 62] { R7800 += 1 };
  s4 -> s3 [65, 114] { R7800 += 1 };
  s4 -> s5 [115, 115] { R7800 += 1 };
  s4 -> s3 [116, 65535] { R7800 += 1 };
  s5 -> s3 [0, 43] { R7800 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7800 += 1 };
  s5 -> s4 [46, 46] { R7800 += 1 };
  s5 -> s3 [48, 62] { R7800 += 1 };
  s5 -> s3 [65, 110] { R7800 += 1 };
  s5 -> s6 [111, 111] { R7800 += 1 };
  s5 -> s3 [112, 65535] { R7800 += 1 };
  s6 -> s3 [0, 43] { R7800 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7800 += 1 };
  s6 -> s4 [46, 46] { R7800 += 1 };
  s6 -> s3 [48, 62] { R7800 += 1 };
  s6 -> s3 [65, 98] { R7800 += 1 };
  s6 -> s7 [99, 99] { R7800 += 1 };
  s6 -> s3 [100, 65535] { R7800 += 1 };
  s7 -> s3 [0, 43] { R7800 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7800 += 1 };
  s7 -> s4 [46, 46] { R7800 += 1 };
  s7 -> s3 [48, 62] { R7800 += 1 };
  s7 -> s3 [65, 106] { R7800 += 1 };
  s7 -> s3 [108, 65535] { R7800 += 1 };
  s8 -> s1 [0, 43] { R7800 += 1 };
  s8 -> s1 [45, 45] { R7800 += 1 };
  s8 -> s2 [46, 46] { R7800 += 1 };
  s8 -> s1 [48, 62] { R7800 += 1 };
  s8 -> s3 [65, 65] { R7800 += 1 };
  s8 -> s1 [66, 110] { R7800 += 1 };
  s8 -> s9 [111, 111] { R7800 += 1 };
  s8 -> s1 [112, 65535] { R7800 += 1 };
  s9 -> s1 [0, 43] { R7800 += 1 };
  s9 -> s1 [45, 45] { R7800 += 1 };
  s9 -> s2 [46, 46] { R7800 += 1 };
  s9 -> s1 [48, 62] { R7800 += 1 };
  s9 -> s3 [65, 65] { R7800 += 1 };
  s9 -> s1 [66, 98] { R7800 += 1 };
  s9 -> s10 [99, 99] { R7800 += 1 };
  s9 -> s1 [100, 65535] { R7800 += 1 };
  s10 -> s1 [0, 43] { R7800 += 1 };
  s10 -> s1 [45, 45] { R7800 += 1 };
  s10 -> s2 [46, 46] { R7800 += 1 };
  s10 -> s1 [48, 62] { R7800 += 1 };
  s10 -> s3 [65, 65] { R7800 += 1 };
  s10 -> s1 [66, 106] { R7800 += 1 };
  s10 -> s1 [108, 65535] { R7800 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R7802 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R7801 += 1, R7802 += 1 };
  s1 -> s1 [0, 65535] { R7802 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R7804 += 1 };
  s0 -> s0 [0, 65535] { R7803 += 1, R7804 += 1 };
  s0 -> s2 [0, 65535] { R7804 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R7804 += 1 };
  s0 -> s1 [59, 65535] { R7804 += 1 };
  s1 -> s1 [0, 57] { R7804 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7804 += 1 };
  s1 -> s1 [59, 65535] { R7804 += 1 };
  s2 -> s1 [0, 57] { R7804 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7804 += 1, R11 += 1 };
  s2 -> s3 [58, 58] { R7804 += 1 };
  s2 -> s1 [59, 65535] { R7804 += 1 };
  s3 -> s3 [0, 65535] { R7804 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R7806 += 1 };
  s0 -> s0 [0, 65535] { R7805 += 1, R7806 += 1 };
  s0 -> s2 [0, 65535] { R7806 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R7806 += 1 };
  s0 -> s1 [66, 65535] { R7806 += 1 };
  s1 -> s1 [0, 64] { R7806 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7806 += 1 };
  s1 -> s1 [66, 65535] { R7806 += 1 };
  s2 -> s1 [0, 64] { R7806 += 1 };
  s2 -> s2 [0, 65535] { R7806 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R7806 += 1 };
  s2 -> s1 [66, 65535] { R7806 += 1 };
  s3 -> s3 [0, 65535] { R7806 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R7808 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R7808 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R7807 += 1, R7808 += 1 };
  s0 -> s3 [91, 91] { R7808 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R7808 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R7808 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7808 += 1 };
  s2 -> s1 [0, 90] { R7808 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R7808 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R7808 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R7808 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R7808 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7808 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R7809 += 1, R7810 += 1 };
  s0 -> s1 [0, 65535] { R7810 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R7810 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7810 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R7810 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R7810 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7810 += 1, R24 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R7810 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R7812 += 1, R7734 += 1 };
  s0 -> s2 [0, 65535] { R7812 += 1, R7733 += 1, R7734 += 1 };
  s0 -> s0 [0, 65535] { R7811 += 1, R7812 += 1 };
  s0 -> s1 [66, 65535] { R7812 += 1, R7734 += 1 };
  s1 -> s1 [0, 64] { R7812 += 1, R7734 += 1 };
  s1 -> s1 [0, 65535] { R7812 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R7812 += 1, R7734 += 1 };
  s2 -> s1 [0, 64] { R7812 += 1, R7734 += 1 };
  s2 -> s2 [0, 65535] { R7812 += 1, R7733 += 1, R7734 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R7812 += 1, R7734 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R7814 += 1, R7736 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R7814 += 1, R7735 += 1, R7736 += 1 };
  s0 -> s0 [0, 65535] { R7813 += 1, R7814 += 1 };
  s1 -> s4 [0, 65535] { R7814 += 1 };
  s1 -> s1 [0, 65535] { R7814 += 1, R7736 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7814 += 1, R7736 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7814 += 1, R7735 += 1, R7736 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7814 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R7816 += 1, R7738 += 1 };
  s0 -> s0 [0, 65535] { R7815 += 1, R7816 += 1 };
  s0 -> s2 [0, 65535] { R7816 += 1, R7737 += 1, R7738 += 1 };
  s0 -> s1 [80, 65535] { R7816 += 1, R7738 += 1 };
  s1 -> s1 [0, 65] { R7816 += 1, R7738 += 1 };
  s1 -> s1 [0, 65535] { R7816 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7816 += 1, R7738 += 1 };
  s2 -> s1 [0, 65] { R7816 += 1, R7738 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7816 += 1, R7737 += 1, R7738 += 1 };
  s2 -> s1 [80, 65535] { R7816 += 1, R7738 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R7817 += 1, R7818 += 1 };
  s0 -> s1 [0, 65535] { R7818 += 1, R7740 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R7818 += 1, R7739 += 1, R7740 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7818 += 1, R7740 += 1, R406 += 1 };
  s1 -> s4 [0, 65535] { R7818 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7818 += 1, R7740 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R7818 += 1, R7739 += 1, R7740 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7818 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R7820 += 1, R7742 += 1 };
  s0 -> s2 [0, 65535] { R7820 += 1, R7741 += 1, R7742 += 1 };
  s0 -> s0 [0, 65535] { R7819 += 1, R7820 += 1 };
  s0 -> s3 [0, 65535] { R7820 += 1, R7742 += 1, R408 += 1 };
  s0 -> s1 [84, 65535] { R7820 += 1, R7742 += 1 };
  s1 -> s1 [0, 82] { R7820 += 1, R7742 += 1 };
  s1 -> s1 [0, 65535] { R7820 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [84, 65535] { R7820 += 1, R7742 += 1 };
  s2 -> s1 [0, 82] { R7820 += 1, R7742 += 1 };
  s2 -> s2 [0, 65535] { R7820 += 1, R7741 += 1, R7742 += 1 };
  s2 -> s3 [0, 65535] { R7820 += 1, R7742 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [84, 65535] { R7820 += 1, R7742 += 1 };
  s3 -> s1 [0, 82] { R7820 += 1, R7742 += 1 };
  s3 -> s3 [0, 65535] { R7820 += 1, R7742 += 1, R408 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R7820 += 1 };
  s3 -> s1 [84, 65535] { R7820 += 1, R7742 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7820 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R7822 += 1, R7744 += 1 };
  s0 -> s2 [0, 65535] { R7822 += 1, R7744 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R7821 += 1, R7822 += 1 };
  s0 -> s3 [0, 65535] { R7822 += 1, R7743 += 1, R7744 += 1 };
  s0 -> s1 [81, 65535] { R7822 += 1, R7744 += 1 };
  s1 -> s1 [0, 79] { R7822 += 1, R7744 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7822 += 1 };
  s1 -> s1 [81, 65535] { R7822 += 1, R7744 += 1 };
  s2 -> s1 [0, 79] { R7822 += 1, R7744 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7822 += 1, R7744 += 1, R410 += 1 };
  s2 -> s5 [0, 65535] { R7822 += 1 };
  s2 -> s1 [81, 65535] { R7822 += 1, R7744 += 1 };
  s3 -> s1 [0, 79] { R7822 += 1, R7744 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7822 += 1, R7744 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R7822 += 1, R7743 += 1, R7744 += 1 };
  s3 -> s1 [81, 65535] { R7822 += 1, R7744 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7822 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7824 += 1, R7746 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R7824 += 1, R7745 += 1, R7746 += 1 };
  s0 -> s0 [0, 65535] { R7823 += 1, R7824 += 1 };
  s0 -> s3 [0, 65535] { R7824 += 1, R7746 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R7824 += 1, R7746 += 1, R415 += 1, R416 += 1 };
  s1 -> s6 [0, 65535] { R7824 += 1, R7746 += 1 };
  s1 -> s4 [0, 65535] { R7824 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7824 += 1, R7746 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R7824 += 1, R7745 += 1, R7746 += 1 };
  s2 -> s3 [0, 65535] { R7824 += 1, R7746 += 1, R414 += 1, R415 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R7824 += 1, R7746 += 1, R415 += 1, R416 += 1 };
  s3 -> s3 [0, 65535] { R7824 += 1, R7746 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535] { R7824 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7824 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7824 += 1, R7746 += 1 };
  s6 -> s4 [0, 65535] { R7824 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R7825 += 1, R7826 += 1 };
  s0 -> s1 [0, 65535] { R7826 += 1, R7748 += 1 };
  s0 -> s2 [0, 65535] { R7826 += 1, R7747 += 1, R7748 += 1 };
  s1 -> s4 [0, 65535] { R7826 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7826 += 1, R7748 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7826 += 1, R7748 += 1 };
  s2 -> s2 [0, 65535] { R7826 += 1, R7747 += 1, R7748 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7826 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R7828 += 1, R7750 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R7827 += 1, R7828 += 1 };
  s0 -> s2 [0, 65535] { R7828 += 1, R7749 += 1, R7750 += 1 };
  s0 -> s3 [0, 65535] { R7828 += 1, R7750 += 1, R419 += 1, R420 += 1 };
  s0 -> s1 [81, 65535] { R7828 += 1, R7750 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R7828 += 1, R7750 += 1, R420 += 1 };
  s1 -> s4 [0, 65535] { R7828 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7828 += 1, R7750 += 1 };
  s1 -> s1 [81, 65535] { R7828 += 1, R7750 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R7828 += 1, R7750 += 1, R420 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7828 += 1, R7749 += 1, R7750 += 1 };
  s2 -> s3 [0, 65535] { R7828 += 1, R7750 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R7828 += 1, R7750 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R7828 += 1, R7750 += 1, R420 += 1 };
  s3 -> s4 [0, 65535] { R7828 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7828 += 1, R7750 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [81, 65535] { R7828 += 1, R7750 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R7828 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R7829 += 1, R7830 += 1 };
  s0 -> s1 [0, 65535] { R7830 += 1, R7752 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R7830 += 1, R7752 += 1, R425 += 1, R426 += 1 };
  s0 -> s3 [0, 65535] { R7830 += 1, R7751 += 1, R7752 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7830 += 1, R7752 += 1, R424 += 1, R425 += 1 };
  s1 -> s2 [0, 65535] { R7830 += 1, R7752 += 1, R425 += 1, R426 += 1 };
  s1 -> s6 [0, 65535] { R7830 += 1 };
  s2 -> s5 [0, 65535] { R7830 += 1, R7752 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7830 += 1, R7752 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535] { R7830 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7830 += 1, R7752 += 1, R424 += 1, R425 += 1 };
  s3 -> s2 [0, 65535] { R7830 += 1, R7752 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R7830 += 1, R7751 += 1, R7752 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7830 += 1, R7752 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R7830 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R7830 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R7832 += 1, R7753 += 1, R7754 += 1 };
  s0 -> s3 [0, 65535] { R7832 += 1, R7754 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R7831 += 1, R7832 += 1 };
  s0 -> s1 [91, 107] { R7832 += 1, R7754 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R7832 += 1, R7754 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R7832 += 1 };
  s1 -> s1 [0, 65535] { R7832 += 1, R7754 += 1 };
  s1 -> s1 [91, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R7832 += 1, R7753 += 1, R7754 += 1 };
  s2 -> s3 [0, 65535] { R7832 += 1, R7754 += 1, R429 += 1, R430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 107] { R7832 += 1, R7754 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R7832 += 1, R7754 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R7832 += 1, R7754 += 1, R429 += 1, R430 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7832 += 1 };
  s3 -> s1 [91, 107] { R7832 += 1, R7754 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R7832 += 1, R7754 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s4 -> s4 [0, 65535] { R7832 += 1, R7754 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7832 += 1 };
  s4 -> s1 [91, 110] { R7832 += 1, R7754 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R7832 += 1, R7754 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7832 += 1 };
  s7 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s7 -> s7 [0, 65535] { R7832 += 1, R7754 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R7832 += 1 };
  s7 -> s1 [91, 98] { R7832 += 1, R7754 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R7832 += 1, R7754 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R7832 += 1 };
  s8 -> s8 [0, 65535] { R7832 += 1, R7754 += 1 };
  s8 -> s1 [91, 96] { R7832 += 1, R7754 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R7832 += 1, R7754 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R7832 += 1 };
  s9 -> s9 [0, 65535] { R7832 += 1, R7754 += 1 };
  s9 -> s1 [91, 107] { R7832 += 1, R7754 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R7832 += 1, R7754 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R7832 += 1 };
  s10 -> s10 [0, 65535] { R7832 += 1, R7754 += 1 };
  s10 -> s1 [91, 103] { R7832 += 1, R7754 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R7832 += 1, R7754 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s11 -> s11 [0, 65535] { R7832 += 1, R7754 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R7832 += 1 };
  s11 -> s1 [91, 110] { R7832 += 1, R7754 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R7832 += 1, R7754 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R7832 += 1 };
  s12 -> s12 [0, 65535] { R7832 += 1, R7754 += 1 };
  s12 -> s1 [91, 114] { R7832 += 1, R7754 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R7832 += 1, R7754 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s13 -> s13 [0, 65535] { R7832 += 1, R7754 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R7832 += 1 };
  s13 -> s1 [91, 115] { R7832 += 1, R7754 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R7832 += 1, R7754 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R7832 += 1, R7754 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R7832 += 1, R7754 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R7834 += 1, R7756 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s2 [0, 65535] { R7834 += 1, R7756 += 1 };
  s0 -> s3 [0, 65535] { R7834 += 1, R7755 += 1, R7756 += 1 };
  s0 -> s0 [0, 65535] { R7833 += 1, R7834 += 1 };
  s1 -> s1 [0, 65535] { R7834 += 1, R7756 += 1, R7263 += 1, R7264 += 1 };
  s1 -> s2 [0, 65535] { R7834 += 1, R7756 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7834 += 1 };
  s2 -> s2 [0, 65535] { R7834 += 1, R7756 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7834 += 1 };
  s3 -> s1 [0, 65535] { R7834 += 1, R7756 += 1, R7263 += 1, R7264 += 1 };
  s3 -> s2 [0, 65535] { R7834 += 1, R7756 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7834 += 1, R7755 += 1, R7756 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7834 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R7836 += 1, R7758 += 1, R7268 += 1, R7269 += 1 };
  s0 -> s2 [0, 65535] { R7836 += 1, R7758 += 1, R7269 += 1, R7270 += 1 };
  s0 -> s0 [0, 65535] { R7835 += 1, R7836 += 1 };
  s0 -> s3 [0, 65535] { R7836 += 1, R7757 += 1, R7758 += 1 };
  s1 -> s5 [0, 65535] { R7836 += 1 };
  s1 -> s1 [0, 65535] { R7836 += 1, R7758 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s2 [0, 65535] { R7836 += 1, R7758 += 1, R7269 += 1, R7270 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7836 += 1 };
  s2 -> s6 [0, 65535] { R7836 += 1, R7758 += 1 };
  s2 -> s2 [0, 65535] { R7836 += 1, R7758 += 1, R7269 += 1, R7270 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7836 += 1, R7758 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s2 [0, 65535] { R7836 += 1, R7758 += 1, R7269 += 1, R7270 += 1 };
  s3 -> s3 [0, 65535] { R7836 += 1, R7757 += 1, R7758 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7836 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7836 += 1 };
  s6 -> s6 [0, 65535] { R7836 += 1, R7758 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7838 += 1, R7759 += 1, R7760 += 1 };
  s0 -> s2 [0, 65535] { R7838 += 1, R7760 += 1 };
  s0 -> s0 [0, 65535] { R7837 += 1, R7838 += 1 };
  s1 -> s1 [0, 65535] { R7838 += 1, R7759 += 1, R7760 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7838 += 1, R7760 += 1 };
  s2 -> s3 [0, 65535] { R7838 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7838 += 1, R7760 += 1 };
  s3 -> s3 [0, 65535] { R7838 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R7839 += 1, R7840 += 1 };
  s0 -> s1 [0, 65535] { R7840 += 1, R7762 += 1, R7274 += 1, R7275 += 1 };
  s0 -> s2 [0, 65535] { R7840 += 1, R7761 += 1, R7762 += 1 };
  s0 -> s3 [0, 65535] { R7840 += 1, R7762 += 1, R7275 += 1, R7276 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7840 += 1, R7762 += 1, R7274 += 1, R7275 += 1 };
  s1 -> s3 [0, 65535] { R7840 += 1, R7762 += 1, R7275 += 1, R7276 += 1 };
  s1 -> s6 [0, 65535] { R7840 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7840 += 1, R7762 += 1, R7274 += 1, R7275 += 1 };
  s2 -> s2 [0, 65535] { R7840 += 1, R7761 += 1, R7762 += 1 };
  s2 -> s3 [0, 65535] { R7840 += 1, R7762 += 1, R7275 += 1, R7276 += 1 };
  s3 -> s4 [0, 65535] { R7840 += 1, R7762 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7840 += 1, R7762 += 1, R7275 += 1, R7276 += 1 };
  s3 -> s6 [0, 65535] { R7840 += 1 };
  s4 -> s4 [0, 65535] { R7840 += 1, R7762 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7840 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7840 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7842 += 1, R7764 += 1 };
  s0 -> s2 [0, 65535] { R7842 += 1, R7763 += 1, R7764 += 1 };
  s0 -> s0 [0, 65535] { R7841 += 1, R7842 += 1 };
  s1 -> s1 [0, 65535] { R7842 += 1, R7764 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7842 += 1 };
  s2 -> s1 [0, 65535] { R7842 += 1, R7764 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7842 += 1, R7763 += 1, R7764 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7842 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7844 += 1, R7766 += 1 };
  s0 -> s0 [0, 65535] { R7843 += 1, R7844 += 1 };
  s0 -> s2 [0, 65535] { R7844 += 1, R7765 += 1, R7766 += 1 };
  s1 -> s1 [0, 65535] { R7844 += 1, R7766 += 1 };
  s1 -> s4 [0, 65535] { R7844 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7844 += 1, R7766 += 1 };
  s2 -> s2 [0, 65535] { R7844 += 1, R7765 += 1, R7766 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7844 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R7846 += 1, R7767 += 1, R7768 += 1 };
  s0 -> s0 [0, 65535] { R7845 += 1, R7846 += 1 };
  s0 -> s2 [0, 65535] { R7846 += 1, R7768 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R7846 += 1, R7767 += 1, R7768 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R7846 += 1, R7768 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7846 += 1 };
  s2 -> s2 [0, 65535] { R7846 += 1, R7768 += 1, R20 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7846 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R7848 += 1, R7770 += 1 };
  s0 -> s0 [0, 65535] { R7847 += 1, R7848 += 1 };
  s0 -> s2 [0, 65535] { R7848 += 1, R7769 += 1, R7770 += 1 };
  s0 -> s3 [65, 65] { R7848 += 1, R7770 += 1 };
  s0 -> s4 [65, 65] { R7848 += 1, R7770 += 1 };
  s0 -> s5 [80, 80] { R7848 += 1, R7770 += 1 };
  s0 -> s1 [81, 65535] { R7848 += 1, R7770 += 1 };
  s1 -> s1 [0, 64] { R7848 += 1, R7770 += 1 };
  s1 -> s3 [65, 65] { R7848 += 1, R7770 += 1 };
  s1 -> s4 [65, 65] { R7848 += 1, R7770 += 1 };
  s1 -> s5 [80, 80] { R7848 += 1, R7770 += 1 };
  s1 -> s1 [81, 65535] { R7848 += 1, R7770 += 1 };
  s2 -> s1 [0, 64] { R7848 += 1, R7770 += 1 };
  s2 -> s2 [0, 65535] { R7848 += 1, R7769 += 1, R7770 += 1 };
  s2 -> s3 [65, 65] { R7848 += 1, R7770 += 1 };
  s2 -> s4 [65, 65] { R7848 += 1, R7770 += 1 };
  s2 -> s5 [80, 80] { R7848 += 1, R7770 += 1 };
  s2 -> s1 [81, 65535] { R7848 += 1, R7770 += 1 };
  s4 -> s4 [0, 65] { R7848 += 1, R7770 += 1 };
  s4 -> s7 [80, 80] { R7848 += 1, R7770 += 1 };
  s4 -> s4 [81, 65535] { R7848 += 1, R7770 += 1 };
  s5 -> s5 [0, 64] { R7848 += 1, R7770 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7848 += 1 };
  s5 -> s7 [65, 65] { R7848 += 1, R7770 += 1 };
  s5 -> s8 [65, 65] { R7848 += 1, R7770 += 1 };
  s5 -> s5 [80, 65535] { R7848 += 1, R7770 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7848 += 1, R7770 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7848 += 1 };
  s7 -> s7 [80, 65535] { R7848 += 1, R7770 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7848 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R7850 += 1, R7772 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R7849 += 1, R7850 += 1 };
  s0 -> s2 [0, 65535] { R7850 += 1, R7771 += 1, R7772 += 1 };
  s0 -> s3 [65, 65] { R7850 += 1, R7772 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R7850 += 1, R7772 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R7850 += 1, R7772 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R7850 += 1, R7772 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R7850 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7850 += 1, R7772 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R7850 += 1, R7772 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R7850 += 1, R7772 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R7850 += 1, R7772 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R7850 += 1, R7771 += 1, R7772 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7850 += 1, R7772 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R7850 += 1, R7772 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R7850 += 1, R7772 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R7850 += 1, R7772 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R7850 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7850 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7850 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R7852 += 1, R7774 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R7851 += 1, R7852 += 1 };
  s0 -> s2 [0, 65535] { R7852 += 1, R7773 += 1, R7774 += 1 };
  s0 -> s3 [65, 65] { R7852 += 1, R7774 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R7852 += 1, R7774 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R7852 += 1, R7774 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R7852 += 1, R7774 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R7852 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7852 += 1, R7774 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R7852 += 1, R7774 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R7852 += 1, R7774 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R7852 += 1, R7774 += 1, R407 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7852 += 1, R7773 += 1, R7774 += 1 };
  s2 -> s3 [65, 65] { R7852 += 1, R7774 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R7852 += 1, R7774 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R7852 += 1, R7774 += 1, R407 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7852 += 1 };
  s4 -> s5 [0, 65535] { R7852 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7852 += 1, R7774 += 1, R407 += 1 };
  s5 -> s5 [0, 65535] { R7852 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R7854 += 1, R7776 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R7853 += 1, R7854 += 1 };
  s0 -> s2 [0, 65535] { R7854 += 1, R7775 += 1, R7776 += 1 };
  s0 -> s3 [65, 65] { R7854 += 1, R7776 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R7854 += 1, R7776 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R7854 += 1, R7776 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R7854 += 1, R7776 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R7854 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7854 += 1, R7776 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R7854 += 1, R7776 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R7854 += 1, R7776 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R7854 += 1, R7776 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R7854 += 1, R7775 += 1, R7776 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7854 += 1, R7776 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R7854 += 1, R7776 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R7854 += 1, R7776 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R7854 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7854 += 1, R7776 += 1, R409 += 1 };
  s4 -> s5 [0, 65535] { R7854 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7854 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R7856 += 1, R7777 += 1, R7778 += 1 };
  s0 -> s0 [0, 65535] { R7855 += 1, R7856 += 1 };
  s0 -> s3 [65, 65] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7856 += 1 };
  s1 -> s3 [65, 65] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7856 += 1, R7777 += 1, R7778 += 1 };
  s2 -> s3 [65, 65] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R7856 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7856 += 1, R7778 += 1, R411 += 1, R412 += 1 };
  s4 -> s5 [0, 65535] { R7856 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7856 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R7858 += 1, R7780 += 1 };
  s0 -> s2 [0, 65535] { R7858 += 1, R7779 += 1, R7780 += 1 };
  s0 -> s0 [0, 65535] { R7857 += 1, R7858 += 1 };
  s0 -> s3 [65, 65] { R7858 += 1, R7780 += 1 };
  s0 -> s4 [65, 65] { R7858 += 1, R7780 += 1 };
  s0 -> s1 [66, 65535] { R7858 += 1, R7780 += 1 };
  s1 -> s1 [0, 64] { R7858 += 1, R7780 += 1 };
  s1 -> s1 [0, 65535] { R7858 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7858 += 1, R7780 += 1 };
  s1 -> s4 [65, 65] { R7858 += 1, R7780 += 1 };
  s1 -> s1 [66, 65535] { R7858 += 1, R7780 += 1 };
  s2 -> s1 [0, 64] { R7858 += 1, R7780 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7858 += 1, R7779 += 1, R7780 += 1 };
  s2 -> s3 [65, 65] { R7858 += 1, R7780 += 1 };
  s2 -> s4 [65, 65] { R7858 += 1, R7780 += 1 };
  s2 -> s1 [66, 65535] { R7858 += 1, R7780 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7858 += 1, R7780 += 1 };
  s3 -> s6 [0, 65535] { R7858 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7858 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7858 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R7859 += 1, R7860 += 1 };
  s0 -> s2 [0, 65535] { R7860 += 1, R7781 += 1, R7782 += 1 };
  s0 -> s3 [65, 65] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R7860 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R7860 += 1, R7781 += 1, R7782 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R7860 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7860 += 1 };
  s4 -> s4 [0, 65535] { R7860 += 1, R7782 += 1, R417 += 1, R418 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7860 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R7862 += 1, R7783 += 1, R7784 += 1 };
  s0 -> s0 [0, 65535] { R7861 += 1, R7862 += 1 };
  s0 -> s3 [65, 65] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R7862 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R7862 += 1, R7783 += 1, R7784 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R7862 += 1, R7784 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7862 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7862 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7862 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R7863 += 1, R7864 += 1 };
  s0 -> s2 [0, 65535] { R7864 += 1, R7785 += 1, R7786 += 1 };
  s0 -> s3 [65, 65] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7864 += 1 };
  s1 -> s3 [65, 65] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R7864 += 1, R7785 += 1, R7786 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535] { R7864 += 1 };
  s3 -> s3 [0, 65535] { R7864 += 1, R7786 += 1, R427 += 1, R428 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7864 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7864 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [0, 64] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s3 [0, 65535] { R7866 += 1, R7787 += 1, R7788 += 1 };
  s0 -> s0 [0, 65535] { R7865 += 1, R7866 += 1 };
  s0 -> s4 [65, 65] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s5 [65, 65] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s7 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s1 [66, 65535] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [66, 65535] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [0, 64] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [0, 65535] { R7866 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s6 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s7 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [66, 65535] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [0, 64] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s4 [65, 65] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s5 [65, 65] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s6 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s7 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [66, 65535] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [0, 64] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [0, 64] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R7866 += 1, R7787 += 1, R7788 += 1 };
  s3 -> s4 [65, 65] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s5 [65, 65] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s7 [65, 65] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s1 [66, 65535] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [66, 65535] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s5 -> s5 [0, 65535] { R7866 += 1, R7788 += 1, R7259 += 1, R7260 += 1 };
  s5 -> s7 [0, 65535] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R7866 += 1 };
  s7 -> s8 [0, 65535] { R7866 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R7866 += 1, R7788 += 1, R7260 += 1, R7261 += 1 };
  s8 -> s8 [0, 65535] { R7866 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s2 [0, 65535] { R7868 += 1, R7789 += 1, R7790 += 1 };
  s0 -> s0 [0, 65535] { R7867 += 1, R7868 += 1 };
  s0 -> s3 [65, 65] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s4 [65, 65] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s1 [66, 65535] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [0, 64] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7868 += 1 };
  s1 -> s3 [65, 65] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s4 [65, 65] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [66, 65535] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s1 [0, 64] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7868 += 1, R7789 += 1, R7790 += 1 };
  s2 -> s3 [65, 65] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s4 [65, 65] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s1 [66, 65535] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s3 -> s3 [0, 65535] { R7868 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7868 += 1, R7790 += 1, R7265 += 1, R7266 += 1 };
  s4 -> s6 [0, 65535] { R7868 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7868 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R7870 += 1, R7792 += 1 };
  s0 -> s2 [0, 65535] { R7870 += 1, R7791 += 1, R7792 += 1 };
  s0 -> s0 [0, 65535] { R7869 += 1, R7870 += 1 };
  s0 -> s3 [65, 65] { R7870 += 1, R7792 += 1 };
  s0 -> s4 [65, 65] { R7870 += 1, R7792 += 1 };
  s0 -> s1 [66, 65535] { R7870 += 1, R7792 += 1 };
  s1 -> s1 [0, 64] { R7870 += 1, R7792 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7870 += 1 };
  s1 -> s3 [65, 65] { R7870 += 1, R7792 += 1 };
  s1 -> s4 [65, 65] { R7870 += 1, R7792 += 1 };
  s1 -> s1 [66, 65535] { R7870 += 1, R7792 += 1 };
  s2 -> s1 [0, 64] { R7870 += 1, R7792 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7870 += 1, R7791 += 1, R7792 += 1 };
  s2 -> s3 [65, 65] { R7870 += 1, R7792 += 1 };
  s2 -> s4 [65, 65] { R7870 += 1, R7792 += 1 };
  s2 -> s1 [66, 65535] { R7870 += 1, R7792 += 1 };
  s3 -> s3 [0, 65535] { R7870 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7870 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7870 += 1, R7792 += 1 };
  s5 -> s5 [0, 65535] { R7870 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s2 [0, 65535] { R7872 += 1, R7793 += 1, R7794 += 1 };
  s0 -> s0 [0, 65535] { R7871 += 1, R7872 += 1 };
  s0 -> s3 [65, 65] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s4 [65, 65] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s1 [66, 65535] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s1 [0, 64] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s1 [0, 65535] { R7872 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s4 [65, 65] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s1 [66, 65535] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s1 [0, 64] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s2 [0, 65535] { R7872 += 1, R7793 += 1, R7794 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s4 [65, 65] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s1 [66, 65535] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s3 -> s3 [0, 65535] { R7872 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7872 += 1 };
  s4 -> s4 [0, 65535] { R7872 += 1, R7794 += 1, R7271 += 1, R7272 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7872 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R7874 += 1, R7796 += 1 };
  s0 -> s2 [0, 65535] { R7874 += 1, R7795 += 1, R7796 += 1 };
  s0 -> s0 [0, 65535] { R7873 += 1, R7874 += 1 };
  s0 -> s3 [65, 65] { R7874 += 1, R7796 += 1 };
  s0 -> s4 [65, 65] { R7874 += 1, R7796 += 1 };
  s0 -> s1 [66, 65535] { R7874 += 1, R7796 += 1 };
  s1 -> s1 [0, 64] { R7874 += 1, R7796 += 1 };
  s1 -> s1 [0, 65535] { R7874 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7874 += 1, R7796 += 1 };
  s1 -> s4 [65, 65] { R7874 += 1, R7796 += 1 };
  s1 -> s1 [66, 65535] { R7874 += 1, R7796 += 1 };
  s2 -> s1 [0, 64] { R7874 += 1, R7796 += 1 };
  s2 -> s2 [0, 65535] { R7874 += 1, R7795 += 1, R7796 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7874 += 1, R7796 += 1 };
  s2 -> s4 [65, 65] { R7874 += 1, R7796 += 1 };
  s2 -> s1 [66, 65535] { R7874 += 1, R7796 += 1 };
  s3 -> s3 [0, 65535] { R7874 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7874 += 1, R7796 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7874 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7874 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s2 [0, 64] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s0 [0, 65535] { R7875 += 1, R7876 += 1 };
  s0 -> s3 [0, 65535] { R7876 += 1, R7797 += 1, R7798 += 1 };
  s0 -> s4 [65, 65] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s5 [65, 65] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s6 [65, 65] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s7 [65, 65] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s1 [66, 79] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s2 [66, 65535] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s0 -> s8 [80, 80] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s0 -> s1 [81, 65535] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s1 [0, 64] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s6 [65, 65] { R7876 += 1, R7798 += 1 };
  s1 -> s7 [65, 65] { R7876 += 1, R7798 += 1 };
  s1 -> s1 [66, 79] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s1 [66, 65535] { R7876 += 1, R7798 += 1 };
  s1 -> s8 [80, 80] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s1 -> s1 [81, 65535] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s1 [0, 64] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s2 [0, 64] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s4 [65, 65] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s5 [65, 65] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s6 [65, 65] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s7 [65, 65] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s1 [66, 79] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s2 [66, 65535] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s2 -> s8 [80, 80] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s2 -> s1 [81, 65535] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s1 [0, 64] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s2 [0, 64] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s3 [0, 65535] { R7876 += 1, R7797 += 1, R7798 += 1 };
  s3 -> s4 [65, 65] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s5 [65, 65] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s6 [65, 65] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s7 [65, 65] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s1 [66, 79] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s2 [66, 65535] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s3 -> s8 [80, 80] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s3 -> s1 [81, 65535] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s5 -> s6 [0, 79] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s5 -> s5 [0, 65535] { R7876 += 1, R7798 += 1, R7727 += 1, R7728 += 1 };
  s5 -> s10 [80, 80] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s5 -> s6 [81, 65535] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s6 -> s6 [0, 79] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s6 -> s6 [0, 65535] { R7876 += 1, R7798 += 1 };
  s6 -> s10 [80, 80] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s6 -> s6 [81, 65535] { R7876 += 1, R7798 += 1, R7728 += 1, R7729 += 1 };
  s8 -> s8 [0, 64] { R7876 += 1, R7798 += 1 };
  s8 -> s8 [0, 65535] { R7876 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R7876 += 1, R7798 += 1 };
  s8 -> s11 [65, 65] { R7876 += 1, R7798 += 1 };
  s8 -> s8 [66, 65535] { R7876 += 1, R7798 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7876 += 1, R7798 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R7876 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7876 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7876 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R7766 && R3 = R7876 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R7733 = 0 && R7734 = R7766 && R7735 = 0 && R7736 = R7766 && R7737 = 0 && R7738 = R7766 && R7739 = 0 && R7740 = R7766 && R7741 = 0 && R7742 = R7766 && R7743 = 0 && R7744 = R7766 && R7745 = 0 && R7746 = R7766 && R7747 = 0 && R7748 = R7766 && R7749 = 0 && R7750 = R7766 && R7751 = 0 && R7752 = R7766 && R7753 = 0 && R7754 = R7766 && R7755 = 0 && R7756 = R7766 && R7757 = 0 && R7758 = R7766 && R7759 = 0 && R7760 = R7766 && R7761 = 0 && R7762 = R7766 && R7763 = 0 && R7764 = R7766 && R7765 = 0 && R7769 = 0 && R7770 = 0 && R7787 = 0 && R7788 = 0 && R7797 = 0 && R7798 = 0 && R7799 = 10 && R7800 = R7876 && R7801 = 10 && R7802 = R7876 && R7803 = 10 && R7804 = R7876 && R7805 = 10 && R7806 = R7876 && R7807 = 10 && R7808 = R7876 && R7809 = 10 && R7810 = R7876 && R7811 = 10 && R7812 = R7876 && R7813 = 10 && R7814 = R7876 && R7815 = 10 && R7816 = R7876 && R7817 = 10 && R7818 = R7876 && R7819 = 10 && R7820 = R7876 && R7821 = 10 && R7822 = R7876 && R7823 = 10 && R7824 = R7876 && R7825 = 10 && R7826 = R7876 && R7827 = 10 && R7828 = R7876 && R7829 = 10 && R7830 = R7876 && R7831 = 10 && R7832 = R7876 && R7833 = 10 && R7834 = R7876 && R7835 = 10 && R7836 = R7876 && R7837 = 10 && R7838 = R7876 && R7839 = 10 && R7840 = R7876 && R7841 = 10 && R7842 = R7876 && R7843 = 10 && R7844 = R7876 && R7845 = 10 && R7846 = R7876 && R7847 = 10 && R7848 = R7876 && R7849 = 10 && R7850 = R7876 && R7851 = 10 && R7852 = R7876 && R7853 = 10 && R7854 = R7876 && R7855 = 10 && R7856 = R7876 && R7857 = 10 && R7858 = R7876 && R7859 = 10 && R7860 = R7876 && R7861 = 10 && R7862 = R7876 && R7863 = 10 && R7864 = R7876 && R7865 = 10 && R7866 = R7876 && R7867 = 10 && R7868 = R7876 && R7869 = 10 && R7870 = R7876 && R7871 = 10 && R7872 = R7876 && R7873 = 10 && R7874 = R7876 && R7875 = 10 && R7264 + R7261 + R7732 + R7729 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R7766 && 9 < R7876 && (R20 = 0 || (R7767 = 0 && R7768 = 0)) && (R20 = 0 || (R7771 = 0 && R7772 = 0)) && (R20 = 0 || (R7773 = 0 && R7774 = 0)) && (R20 = 0 || (R7775 = 0 && R7776 = 0)) && (R20 = 0 || (R7777 = 0 && R7778 = 0)) && (R20 = 0 || (R7779 = 0 && R7780 = 0)) && (R20 = 0 || (R7781 = 0 && R7782 = 0)) && (R20 = 0 || (R7783 = 0 && R7784 = 0)) && (R20 = 0 || (R7785 = 0 && R7786 = 0)) && (R20 = 0 || (R7789 = 0 && R7790 = 0)) && (R20 = 0 || (R7791 = 0 && R7792 = 0)) && (R20 = 0 || (R7793 = 0 && R7794 = 0)) && (R20 = 0 || (R7795 = 0 && R7796 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R7270 + R7267 = 0 || (R7268 + R7265 = 0 && R7269 + R7266 = 0)) && (R7276 + R7273 = 0 || (R7274 + R7271 = 0 && R7275 + R7272 = 0)) && (R7276 + R7273 = 0 || (R7730 + R7727 = 0 && R7731 + R7728 = 0));
// End of Parikh automata intersection problem
