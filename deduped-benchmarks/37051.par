// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264, R7265, R7266, R7267, R7268, R7269, R7270, R7271, R7272, R7273, R7274, R7275, R7276, R7877, R7878, R7879, R7880, R7881, R7882, R7883, R7884, R7885, R7886, R7887, R7888, R7889, R7890, R7891, R7892, R7893, R7894, R7895, R7896, R7897, R7898, R7899, R7900, R7901, R7902, R7903, R7904, R7905, R7906, R7907, R7908, R7909, R7910, R7911, R7912, R7913, R7914, R7915, R7916, R7917, R7918, R7919, R7920, R7921, R7922, R7923, R7924, R7925, R7926, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R7950 += 1 };
  s0 -> s0 [0, 65535] { R7949 += 1, R7950 += 1 };
  s0 -> s1 [45, 45] { R7950 += 1 };
  s0 -> s2 [46, 46] { R7950 += 1 };
  s0 -> s1 [48, 62] { R7950 += 1 };
  s0 -> s3 [65, 65] { R7950 += 1 };
  s0 -> s1 [66, 65535] { R7950 += 1 };
  s1 -> s1 [0, 43] { R7950 += 1 };
  s1 -> s1 [45, 45] { R7950 += 1 };
  s1 -> s2 [46, 46] { R7950 += 1 };
  s1 -> s1 [48, 62] { R7950 += 1 };
  s1 -> s3 [65, 65] { R7950 += 1 };
  s1 -> s1 [66, 65535] { R7950 += 1 };
  s2 -> s1 [0, 43] { R7950 += 1 };
  s2 -> s1 [45, 45] { R7950 += 1 };
  s2 -> s2 [46, 46] { R7950 += 1 };
  s2 -> s1 [48, 62] { R7950 += 1 };
  s2 -> s3 [65, 65] { R7950 += 1 };
  s2 -> s1 [66, 114] { R7950 += 1 };
  s2 -> s8 [115, 115] { R7950 += 1 };
  s2 -> s1 [116, 65535] { R7950 += 1 };
  s3 -> s3 [0, 43] { R7950 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7950 += 1 };
  s3 -> s4 [46, 46] { R7950 += 1 };
  s3 -> s3 [48, 62] { R7950 += 1 };
  s3 -> s3 [65, 65535] { R7950 += 1 };
  s4 -> s3 [0, 43] { R7950 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7950 += 1 };
  s4 -> s4 [46, 46] { R7950 += 1 };
  s4 -> s3 [48, 62] { R7950 += 1 };
  s4 -> s3 [65, 114] { R7950 += 1 };
  s4 -> s5 [115, 115] { R7950 += 1 };
  s4 -> s3 [116, 65535] { R7950 += 1 };
  s5 -> s3 [0, 43] { R7950 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7950 += 1 };
  s5 -> s4 [46, 46] { R7950 += 1 };
  s5 -> s3 [48, 62] { R7950 += 1 };
  s5 -> s3 [65, 110] { R7950 += 1 };
  s5 -> s6 [111, 111] { R7950 += 1 };
  s5 -> s3 [112, 65535] { R7950 += 1 };
  s6 -> s3 [0, 43] { R7950 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7950 += 1 };
  s6 -> s4 [46, 46] { R7950 += 1 };
  s6 -> s3 [48, 62] { R7950 += 1 };
  s6 -> s3 [65, 98] { R7950 += 1 };
  s6 -> s7 [99, 99] { R7950 += 1 };
  s6 -> s3 [100, 65535] { R7950 += 1 };
  s7 -> s3 [0, 43] { R7950 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7950 += 1 };
  s7 -> s4 [46, 46] { R7950 += 1 };
  s7 -> s3 [48, 62] { R7950 += 1 };
  s7 -> s3 [65, 106] { R7950 += 1 };
  s7 -> s3 [108, 65535] { R7950 += 1 };
  s8 -> s1 [0, 43] { R7950 += 1 };
  s8 -> s1 [45, 45] { R7950 += 1 };
  s8 -> s2 [46, 46] { R7950 += 1 };
  s8 -> s1 [48, 62] { R7950 += 1 };
  s8 -> s3 [65, 65] { R7950 += 1 };
  s8 -> s1 [66, 110] { R7950 += 1 };
  s8 -> s9 [111, 111] { R7950 += 1 };
  s8 -> s1 [112, 65535] { R7950 += 1 };
  s9 -> s1 [0, 43] { R7950 += 1 };
  s9 -> s1 [45, 45] { R7950 += 1 };
  s9 -> s2 [46, 46] { R7950 += 1 };
  s9 -> s1 [48, 62] { R7950 += 1 };
  s9 -> s3 [65, 65] { R7950 += 1 };
  s9 -> s1 [66, 98] { R7950 += 1 };
  s9 -> s10 [99, 99] { R7950 += 1 };
  s9 -> s1 [100, 65535] { R7950 += 1 };
  s10 -> s1 [0, 43] { R7950 += 1 };
  s10 -> s1 [45, 45] { R7950 += 1 };
  s10 -> s2 [46, 46] { R7950 += 1 };
  s10 -> s1 [48, 62] { R7950 += 1 };
  s10 -> s3 [65, 65] { R7950 += 1 };
  s10 -> s1 [66, 106] { R7950 += 1 };
  s10 -> s1 [108, 65535] { R7950 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R7951 += 1, R7952 += 1 };
  s0 -> s1 [0, 65535] { R7952 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R7952 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R7954 += 1 };
  s0 -> s0 [0, 65535] { R7953 += 1, R7954 += 1 };
  s0 -> s2 [0, 65535] { R7954 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R7954 += 1 };
  s0 -> s1 [59, 65535] { R7954 += 1 };
  s1 -> s1 [0, 57] { R7954 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7954 += 1 };
  s1 -> s1 [59, 65535] { R7954 += 1 };
  s2 -> s1 [0, 57] { R7954 += 1 };
  s2 -> s2 [0, 65535] { R7954 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7954 += 1 };
  s2 -> s1 [59, 65535] { R7954 += 1 };
  s3 -> s3 [0, 65535] { R7954 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R7956 += 1 };
  s0 -> s2 [0, 65535] { R7956 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R7955 += 1, R7956 += 1 };
  s0 -> s3 [65, 65] { R7956 += 1 };
  s0 -> s1 [66, 65535] { R7956 += 1 };
  s1 -> s1 [0, 64] { R7956 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7956 += 1 };
  s1 -> s1 [66, 65535] { R7956 += 1 };
  s2 -> s1 [0, 64] { R7956 += 1 };
  s2 -> s2 [0, 65535] { R7956 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R7956 += 1 };
  s2 -> s1 [66, 65535] { R7956 += 1 };
  s3 -> s3 [0, 65535] { R7956 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R7958 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R7958 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R7957 += 1, R7958 += 1 };
  s0 -> s3 [91, 91] { R7958 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R7958 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R7958 += 1 };
  s1 -> s1 [0, 65535] { R7958 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R7958 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R7958 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R7958 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R7958 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R7958 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7958 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R7960 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R7960 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R7959 += 1, R7960 += 1 };
  s1 -> s1 [0, 65535] { R7960 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7960 += 1 };
  s2 -> s1 [0, 65535] { R7960 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R7960 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7960 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R7962 += 1, R7884 += 1 };
  s0 -> s2 [0, 65535] { R7962 += 1, R7883 += 1, R7884 += 1 };
  s0 -> s0 [0, 65535] { R7961 += 1, R7962 += 1 };
  s0 -> s1 [66, 65535] { R7962 += 1, R7884 += 1 };
  s1 -> s1 [0, 64] { R7962 += 1, R7884 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7962 += 1 };
  s1 -> s1 [66, 65535] { R7962 += 1, R7884 += 1 };
  s2 -> s1 [0, 64] { R7962 += 1, R7884 += 1 };
  s2 -> s2 [0, 65535] { R7962 += 1, R7883 += 1, R7884 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R7962 += 1, R7884 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R7963 += 1, R7964 += 1 };
  s0 -> s1 [0, 65535] { R7964 += 1, R7886 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R7964 += 1, R7885 += 1, R7886 += 1 };
  s1 -> s4 [0, 65535] { R7964 += 1 };
  s1 -> s1 [0, 65535] { R7964 += 1, R7886 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7964 += 1, R7886 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R7964 += 1, R7885 += 1, R7886 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7964 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R7966 += 1, R7888 += 1 };
  s0 -> s2 [0, 65535] { R7966 += 1, R7887 += 1, R7888 += 1 };
  s0 -> s0 [0, 65535] { R7965 += 1, R7966 += 1 };
  s0 -> s1 [80, 65535] { R7966 += 1, R7888 += 1 };
  s1 -> s1 [0, 65] { R7966 += 1, R7888 += 1 };
  s1 -> s1 [0, 65535] { R7966 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7966 += 1, R7888 += 1 };
  s2 -> s1 [0, 65] { R7966 += 1, R7888 += 1 };
  s2 -> s2 [0, 65535] { R7966 += 1, R7887 += 1, R7888 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R7966 += 1, R7888 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R7968 += 1, R7889 += 1, R7890 += 1 };
  s0 -> s0 [0, 65535] { R7967 += 1, R7968 += 1 };
  s0 -> s2 [0, 65535] { R7968 += 1, R7890 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R7968 += 1, R7889 += 1, R7890 += 1 };
  s1 -> s2 [0, 65535] { R7968 += 1, R7890 += 1, R406 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7968 += 1, R7890 += 1, R406 += 1 };
  s2 -> s3 [0, 65535] { R7968 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7968 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R7970 += 1, R7892 += 1 };
  s0 -> s2 [0, 65535] { R7970 += 1, R7892 += 1, R408 += 1 };
  s0 -> s3 [0, 65535] { R7970 += 1, R7891 += 1, R7892 += 1 };
  s0 -> s0 [0, 65535] { R7969 += 1, R7970 += 1 };
  s0 -> s1 [84, 65535] { R7970 += 1, R7892 += 1 };
  s1 -> s1 [0, 82] { R7970 += 1, R7892 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7970 += 1 };
  s1 -> s1 [84, 65535] { R7970 += 1, R7892 += 1 };
  s2 -> s1 [0, 82] { R7970 += 1, R7892 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7970 += 1 };
  s2 -> s2 [0, 65535] { R7970 += 1, R7892 += 1, R408 += 1 };
  s2 -> s1 [84, 65535] { R7970 += 1, R7892 += 1 };
  s3 -> s1 [0, 82] { R7970 += 1, R7892 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7970 += 1, R7892 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R7970 += 1, R7891 += 1, R7892 += 1 };
  s3 -> s1 [84, 65535] { R7970 += 1, R7892 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7970 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R7972 += 1, R7894 += 1 };
  s0 -> s2 [0, 65535] { R7972 += 1, R7894 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R7972 += 1, R7893 += 1, R7894 += 1 };
  s0 -> s0 [0, 65535] { R7971 += 1, R7972 += 1 };
  s0 -> s1 [81, 65535] { R7972 += 1, R7894 += 1 };
  s1 -> s1 [0, 79] { R7972 += 1, R7894 += 1 };
  s1 -> s1 [0, 65535] { R7972 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R7972 += 1, R7894 += 1 };
  s2 -> s1 [0, 79] { R7972 += 1, R7894 += 1 };
  s2 -> s2 [0, 65535] { R7972 += 1, R7894 += 1, R410 += 1 };
  s2 -> s5 [0, 65535] { R7972 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R7972 += 1, R7894 += 1 };
  s3 -> s1 [0, 79] { R7972 += 1, R7894 += 1 };
  s3 -> s2 [0, 65535] { R7972 += 1, R7894 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R7972 += 1, R7893 += 1, R7894 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R7972 += 1, R7894 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7972 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7974 += 1, R7895 += 1, R7896 += 1 };
  s0 -> s2 [0, 65535] { R7974 += 1, R7896 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R7973 += 1, R7974 += 1 };
  s0 -> s3 [0, 65535] { R7974 += 1, R7896 += 1, R415 += 1, R416 += 1 };
  s1 -> s1 [0, 65535] { R7974 += 1, R7895 += 1, R7896 += 1 };
  s1 -> s2 [0, 65535] { R7974 += 1, R7896 += 1, R414 += 1, R415 += 1 };
  s1 -> s3 [0, 65535] { R7974 += 1, R7896 += 1, R415 += 1, R416 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7974 += 1, R7896 += 1, R414 += 1, R415 += 1 };
  s2 -> s3 [0, 65535] { R7974 += 1, R7896 += 1, R415 += 1, R416 += 1 };
  s2 -> s5 [0, 65535] { R7974 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R7974 += 1, R7896 += 1 };
  s3 -> s3 [0, 65535] { R7974 += 1, R7896 += 1, R415 += 1, R416 += 1 };
  s3 -> s5 [0, 65535] { R7974 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7974 += 1, R7896 += 1 };
  s4 -> s5 [0, 65535] { R7974 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7974 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R7975 += 1, R7976 += 1 };
  s0 -> s1 [0, 65535] { R7976 += 1, R7898 += 1 };
  s0 -> s2 [0, 65535] { R7976 += 1, R7897 += 1, R7898 += 1 };
  s1 -> s1 [0, 65535] { R7976 += 1, R7898 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7976 += 1 };
  s2 -> s1 [0, 65535] { R7976 += 1, R7898 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7976 += 1, R7897 += 1, R7898 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7976 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R7978 += 1, R7900 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R7977 += 1, R7978 += 1 };
  s0 -> s2 [0, 65535] { R7978 += 1, R7899 += 1, R7900 += 1 };
  s0 -> s3 [0, 65535] { R7978 += 1, R7900 += 1, R419 += 1, R420 += 1 };
  s0 -> s1 [81, 65535] { R7978 += 1, R7900 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R7978 += 1, R7900 += 1, R420 += 1 };
  s1 -> s1 [0, 65535] { R7978 += 1, R7900 += 1 };
  s1 -> s4 [0, 65535] { R7978 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R7978 += 1, R7900 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R7978 += 1, R7900 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R7978 += 1, R7899 += 1, R7900 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R7978 += 1, R7900 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R7978 += 1, R7900 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R7978 += 1, R7900 += 1, R420 += 1 };
  s3 -> s4 [0, 65535] { R7978 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7978 += 1, R7900 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [81, 65535] { R7978 += 1, R7900 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R7978 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R7979 += 1, R7980 += 1 };
  s0 -> s1 [0, 65535] { R7980 += 1, R7901 += 1, R7902 += 1 };
  s0 -> s2 [0, 65535] { R7980 += 1, R7902 += 1, R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R7980 += 1, R7902 += 1, R425 += 1, R426 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7980 += 1, R7901 += 1, R7902 += 1 };
  s1 -> s2 [0, 65535] { R7980 += 1, R7902 += 1, R424 += 1, R425 += 1 };
  s1 -> s3 [0, 65535] { R7980 += 1, R7902 += 1, R425 += 1, R426 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7980 += 1, R7902 += 1, R424 += 1, R425 += 1 };
  s2 -> s3 [0, 65535] { R7980 += 1, R7902 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535] { R7980 += 1 };
  s3 -> s4 [0, 65535] { R7980 += 1, R7902 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7980 += 1, R7902 += 1, R425 += 1, R426 += 1 };
  s3 -> s6 [0, 65535] { R7980 += 1 };
  s4 -> s4 [0, 65535] { R7980 += 1, R7902 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7980 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7980 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R7982 += 1, R7904 += 1, R429 += 1, R430 += 1 };
  s0 -> s3 [0, 65535] { R7982 += 1, R7903 += 1, R7904 += 1 };
  s0 -> s0 [0, 65535] { R7981 += 1, R7982 += 1 };
  s0 -> s1 [91, 107] { R7982 += 1, R7904 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R7982 += 1, R7904 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s1 -> s1 [0, 65535] { R7982 += 1, R7904 += 1 };
  s1 -> s5 [0, 65535] { R7982 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R7982 += 1, R7904 += 1, R429 += 1, R430 += 1 };
  s2 -> s5 [0, 65535] { R7982 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R7982 += 1, R7904 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R7982 += 1, R7904 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s3 -> s2 [0, 65535] { R7982 += 1, R7904 += 1, R429 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R7982 += 1, R7903 += 1, R7904 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R7982 += 1, R7904 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R7982 += 1, R7904 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R7982 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7982 += 1, R7904 += 1 };
  s4 -> s1 [91, 110] { R7982 += 1, R7904 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R7982 += 1, R7904 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R7982 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R7982 += 1 };
  s7 -> s7 [0, 65535] { R7982 += 1, R7904 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R7982 += 1, R7904 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R7982 += 1, R7904 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R7982 += 1 };
  s8 -> s8 [0, 65535] { R7982 += 1, R7904 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R7982 += 1, R7904 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R7982 += 1, R7904 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s9 -> s9 [0, 65535] { R7982 += 1, R7904 += 1 };
  s9 -> s5 [0, 65535] { R7982 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R7982 += 1, R7904 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R7982 += 1, R7904 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s10 -> s10 [0, 65535] { R7982 += 1, R7904 += 1 };
  s10 -> s5 [0, 65535] { R7982 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R7982 += 1, R7904 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R7982 += 1, R7904 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s11 -> s11 [0, 65535] { R7982 += 1, R7904 += 1 };
  s11 -> s5 [0, 65535] { R7982 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R7982 += 1, R7904 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R7982 += 1, R7904 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R7982 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R7982 += 1, R7904 += 1 };
  s12 -> s1 [91, 114] { R7982 += 1, R7904 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R7982 += 1, R7904 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s13 -> s13 [0, 65535] { R7982 += 1, R7904 += 1 };
  s13 -> s5 [0, 65535] { R7982 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R7982 += 1, R7904 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R7982 += 1, R7904 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R7982 += 1, R7904 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R7982 += 1, R7904 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R7984 += 1, R7906 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s2 [0, 65535] { R7984 += 1, R7906 += 1 };
  s0 -> s0 [0, 65535] { R7983 += 1, R7984 += 1 };
  s0 -> s3 [0, 65535] { R7984 += 1, R7905 += 1, R7906 += 1 };
  s1 -> s1 [0, 65535] { R7984 += 1, R7906 += 1, R7263 += 1, R7264 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R7984 += 1, R7906 += 1 };
  s1 -> s5 [0, 65535] { R7984 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7984 += 1, R7906 += 1 };
  s2 -> s5 [0, 65535] { R7984 += 1 };
  s3 -> s1 [0, 65535] { R7984 += 1, R7906 += 1, R7263 += 1, R7264 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7984 += 1, R7906 += 1 };
  s3 -> s3 [0, 65535] { R7984 += 1, R7905 += 1, R7906 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7984 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R7985 += 1, R7986 += 1 };
  s0 -> s1 [0, 65535] { R7986 += 1, R7908 += 1, R7269 += 1, R7270 += 1 };
  s0 -> s2 [0, 65535] { R7986 += 1, R7907 += 1, R7908 += 1 };
  s0 -> s3 [0, 65535] { R7986 += 1, R7908 += 1, R7268 += 1, R7269 += 1 };
  s1 -> s4 [0, 65535] { R7986 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7986 += 1, R7908 += 1, R7269 += 1, R7270 += 1 };
  s1 -> s6 [0, 65535] { R7986 += 1, R7908 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R7986 += 1, R7908 += 1, R7269 += 1, R7270 += 1 };
  s2 -> s2 [0, 65535] { R7986 += 1, R7907 += 1, R7908 += 1 };
  s2 -> s3 [0, 65535] { R7986 += 1, R7908 += 1, R7268 += 1, R7269 += 1 };
  s3 -> s4 [0, 65535] { R7986 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R7986 += 1, R7908 += 1, R7269 += 1, R7270 += 1 };
  s3 -> s3 [0, 65535] { R7986 += 1, R7908 += 1, R7268 += 1, R7269 += 1 };
  s4 -> s4 [0, 65535] { R7986 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R7986 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7986 += 1, R7908 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7988 += 1, R7910 += 1 };
  s0 -> s2 [0, 65535] { R7988 += 1, R7909 += 1, R7910 += 1 };
  s0 -> s0 [0, 65535] { R7987 += 1, R7988 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7988 += 1, R7910 += 1 };
  s1 -> s4 [0, 65535] { R7988 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7988 += 1, R7910 += 1 };
  s2 -> s2 [0, 65535] { R7988 += 1, R7909 += 1, R7910 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7988 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R7990 += 1, R7912 += 1, R7274 += 1, R7275 += 1 };
  s0 -> s2 [0, 65535] { R7990 += 1, R7911 += 1, R7912 += 1 };
  s0 -> s3 [0, 65535] { R7990 += 1, R7912 += 1, R7275 += 1, R7276 += 1 };
  s0 -> s0 [0, 65535] { R7989 += 1, R7990 += 1 };
  s1 -> s4 [0, 65535] { R7990 += 1 };
  s1 -> s1 [0, 65535] { R7990 += 1, R7912 += 1, R7274 += 1, R7275 += 1 };
  s1 -> s3 [0, 65535] { R7990 += 1, R7912 += 1, R7275 += 1, R7276 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R7990 += 1, R7912 += 1, R7274 += 1, R7275 += 1 };
  s2 -> s2 [0, 65535] { R7990 += 1, R7911 += 1, R7912 += 1 };
  s2 -> s3 [0, 65535] { R7990 += 1, R7912 += 1, R7275 += 1, R7276 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R7990 += 1 };
  s3 -> s5 [0, 65535] { R7990 += 1, R7912 += 1 };
  s3 -> s3 [0, 65535] { R7990 += 1, R7912 += 1, R7275 += 1, R7276 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7990 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R7990 += 1 };
  s5 -> s5 [0, 65535] { R7990 += 1, R7912 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R7992 += 1, R7913 += 1, R7914 += 1 };
  s0 -> s0 [0, 65535] { R7991 += 1, R7992 += 1 };
  s0 -> s2 [0, 65535] { R7992 += 1, R7914 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7992 += 1, R7913 += 1, R7914 += 1 };
  s1 -> s2 [0, 65535] { R7992 += 1, R7914 += 1 };
  s2 -> s3 [0, 65535] { R7992 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7992 += 1, R7914 += 1 };
  s3 -> s3 [0, 65535] { R7992 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R7994 += 1, R7916 += 1 };
  s0 -> s2 [0, 65535] { R7994 += 1, R7915 += 1, R7916 += 1 };
  s0 -> s0 [0, 65535] { R7993 += 1, R7994 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7994 += 1, R7916 += 1 };
  s1 -> s4 [0, 65535] { R7994 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7994 += 1, R7916 += 1 };
  s2 -> s2 [0, 65535] { R7994 += 1, R7915 += 1, R7916 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7994 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R7996 += 1, R7917 += 1, R7918 += 1 };
  s0 -> s2 [0, 65535] { R7996 += 1, R7918 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R7995 += 1, R7996 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7996 += 1, R7917 += 1, R7918 += 1 };
  s1 -> s2 [0, 65535] { R7996 += 1, R7918 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7996 += 1, R7918 += 1, R20 += 1 };
  s2 -> s4 [0, 65535] { R7996 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7996 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R7998 += 1, R7920 += 1 };
  s0 -> s0 [0, 65535] { R7997 += 1, R7998 += 1 };
  s0 -> s2 [0, 65535] { R7998 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s3 [65, 65] { R7998 += 1, R7920 += 1 };
  s0 -> s4 [65, 65] { R7998 += 1, R7920 += 1 };
  s0 -> s5 [80, 80] { R7998 += 1, R7920 += 1 };
  s0 -> s1 [81, 65535] { R7998 += 1, R7920 += 1 };
  s1 -> s1 [0, 64] { R7998 += 1, R7920 += 1 };
  s1 -> s3 [65, 65] { R7998 += 1, R7920 += 1 };
  s1 -> s4 [65, 65] { R7998 += 1, R7920 += 1 };
  s1 -> s5 [80, 80] { R7998 += 1, R7920 += 1 };
  s1 -> s1 [81, 65535] { R7998 += 1, R7920 += 1 };
  s2 -> s1 [0, 64] { R7998 += 1, R7920 += 1 };
  s2 -> s2 [0, 65535] { R7998 += 1, R7919 += 1, R7920 += 1 };
  s2 -> s3 [65, 65] { R7998 += 1, R7920 += 1 };
  s2 -> s4 [65, 65] { R7998 += 1, R7920 += 1 };
  s2 -> s5 [80, 80] { R7998 += 1, R7920 += 1 };
  s2 -> s1 [81, 65535] { R7998 += 1, R7920 += 1 };
  s3 -> s3 [0, 65] { R7998 += 1, R7920 += 1 };
  s3 -> s7 [80, 80] { R7998 += 1, R7920 += 1 };
  s3 -> s3 [81, 65535] { R7998 += 1, R7920 += 1 };
  s5 -> s5 [0, 64] { R7998 += 1, R7920 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7998 += 1 };
  s5 -> s7 [65, 65] { R7998 += 1, R7920 += 1 };
  s5 -> s8 [65, 65] { R7998 += 1, R7920 += 1 };
  s5 -> s5 [80, 65535] { R7998 += 1, R7920 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7998 += 1, R7920 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7998 += 1 };
  s7 -> s7 [80, 65535] { R7998 += 1, R7920 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7998 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R8000 += 1, R7922 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R7999 += 1, R8000 += 1 };
  s0 -> s2 [0, 65535] { R8000 += 1, R7921 += 1, R7922 += 1 };
  s0 -> s3 [65, 65] { R8000 += 1, R7922 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R8000 += 1, R7922 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R8000 += 1, R7922 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R8000 += 1, R7922 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R8000 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8000 += 1, R7922 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R8000 += 1, R7922 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R8000 += 1, R7922 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R8000 += 1, R7922 += 1, R405 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8000 += 1, R7921 += 1, R7922 += 1 };
  s2 -> s3 [65, 65] { R8000 += 1, R7922 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R8000 += 1, R7922 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R8000 += 1, R7922 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R8000 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8000 += 1 };
  s4 -> s4 [0, 65535] { R8000 += 1, R7922 += 1, R405 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8000 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R8002 += 1, R7924 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R8002 += 1, R7923 += 1, R7924 += 1 };
  s0 -> s0 [0, 65535] { R8001 += 1, R8002 += 1 };
  s0 -> s3 [65, 65] { R8002 += 1, R7924 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R8002 += 1, R7924 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R8002 += 1, R7924 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R8002 += 1, R7924 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R8002 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8002 += 1, R7924 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R8002 += 1, R7924 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R8002 += 1, R7924 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R8002 += 1, R7924 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R8002 += 1, R7923 += 1, R7924 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8002 += 1, R7924 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R8002 += 1, R7924 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R8002 += 1, R7924 += 1, R407 += 1 };
  s3 -> s6 [0, 65535] { R8002 += 1 };
  s3 -> s3 [0, 65535] { R8002 += 1, R7924 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8002 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8002 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R8004 += 1, R7926 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R8003 += 1, R8004 += 1 };
  s0 -> s2 [0, 65535] { R8004 += 1, R7925 += 1, R7926 += 1 };
  s0 -> s3 [65, 65] { R8004 += 1, R7926 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R8004 += 1, R7926 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R8004 += 1, R7926 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R8004 += 1, R7926 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R8004 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8004 += 1, R7926 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R8004 += 1, R7926 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R8004 += 1, R7926 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R8004 += 1, R7926 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R8004 += 1, R7925 += 1, R7926 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8004 += 1, R7926 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R8004 += 1, R7926 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R8004 += 1, R7926 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R8004 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8004 += 1, R7926 += 1, R409 += 1 };
  s4 -> s5 [0, 65535] { R8004 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8004 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R8005 += 1, R8006 += 1 };
  s0 -> s2 [0, 65535] { R8006 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s3 [65, 65] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 65535] { R8006 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8006 += 1, R7927 += 1, R7928 += 1 };
  s2 -> s3 [65, 65] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R8006 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8006 += 1, R7928 += 1, R411 += 1, R412 += 1 };
  s4 -> s6 [0, 65535] { R8006 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8006 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R8008 += 1, R7930 += 1 };
  s0 -> s0 [0, 65535] { R8007 += 1, R8008 += 1 };
  s0 -> s2 [0, 65535] { R8008 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s3 [65, 65] { R8008 += 1, R7930 += 1 };
  s0 -> s4 [65, 65] { R8008 += 1, R7930 += 1 };
  s0 -> s1 [66, 65535] { R8008 += 1, R7930 += 1 };
  s1 -> s1 [0, 64] { R8008 += 1, R7930 += 1 };
  s1 -> s1 [0, 65535] { R8008 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8008 += 1, R7930 += 1 };
  s1 -> s4 [65, 65] { R8008 += 1, R7930 += 1 };
  s1 -> s1 [66, 65535] { R8008 += 1, R7930 += 1 };
  s2 -> s1 [0, 64] { R8008 += 1, R7930 += 1 };
  s2 -> s2 [0, 65535] { R8008 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8008 += 1, R7930 += 1 };
  s2 -> s4 [65, 65] { R8008 += 1, R7930 += 1 };
  s2 -> s1 [66, 65535] { R8008 += 1, R7930 += 1 };
  s3 -> s3 [0, 65535] { R8008 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8008 += 1, R7930 += 1 };
  s4 -> s5 [0, 65535] { R8008 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8008 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R8009 += 1, R8010 += 1 };
  s0 -> s2 [0, 65535] { R8010 += 1, R7931 += 1, R7932 += 1 };
  s0 -> s3 [65, 65] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8010 += 1 };
  s1 -> s3 [65, 65] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8010 += 1, R7931 += 1, R7932 += 1 };
  s2 -> s3 [65, 65] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8010 += 1 };
  s3 -> s3 [0, 65535] { R8010 += 1, R7932 += 1, R417 += 1, R418 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8010 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8010 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R8011 += 1, R8012 += 1 };
  s0 -> s2 [0, 65535] { R8012 += 1, R7933 += 1, R7934 += 1 };
  s0 -> s3 [65, 65] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8012 += 1 };
  s1 -> s3 [65, 65] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8012 += 1, R7933 += 1, R7934 += 1 };
  s2 -> s3 [65, 65] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8012 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8012 += 1, R7934 += 1, R421 += 1, R422 += 1 };
  s4 -> s6 [0, 65535] { R8012 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8012 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R8013 += 1, R8014 += 1 };
  s0 -> s2 [0, 65535] { R8014 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s3 [65, 65] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R8014 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R8014 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R8014 += 1, R7936 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535] { R8014 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8014 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8014 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [0, 64] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s0 [0, 65535] { R8015 += 1, R8016 += 1 };
  s0 -> s3 [0, 65535] { R8016 += 1, R7937 += 1, R7938 += 1 };
  s0 -> s4 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s5 [65, 65] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s7 [65, 65] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s1 [66, 65535] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [66, 65535] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [0, 64] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R8016 += 1 };
  s1 -> s4 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s6 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [66, 65535] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [0, 64] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s4 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s5 [65, 65] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s6 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s7 [65, 65] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s1 [66, 65535] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [0, 64] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [0, 64] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R8016 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s4 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s5 [65, 65] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [65, 65] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s7 [65, 65] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [66, 65535] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [66, 65535] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s4 -> s4 [0, 65535] { R8016 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s6 -> s9 [0, 65535] { R8016 += 1 };
  s7 -> s6 [0, 65535] { R8016 += 1, R7938 += 1, R7260 += 1, R7261 += 1 };
  s7 -> s7 [0, 65535] { R8016 += 1, R7938 += 1, R7259 += 1, R7260 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R8016 += 1 };
  accepting s4, s8, s9, s6, s1;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s0 [0, 65535] { R8017 += 1, R8018 += 1 };
  s0 -> s2 [0, 65535] { R8018 += 1, R7939 += 1, R7940 += 1 };
  s0 -> s3 [65, 65] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s4 [65, 65] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s0 -> s1 [66, 65535] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [0, 64] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [0, 65535] { R8018 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s4 [65, 65] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s1 -> s1 [66, 65535] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s1 [0, 64] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8018 += 1, R7939 += 1, R7940 += 1 };
  s2 -> s3 [65, 65] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s4 [65, 65] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s2 -> s1 [66, 65535] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s3 -> s3 [0, 65535] { R8018 += 1, R7940 += 1, R7265 += 1, R7266 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8018 += 1 };
  s4 -> s4 [0, 65535] { R8018 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8018 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R8020 += 1, R7942 += 1 };
  s0 -> s0 [0, 65535] { R8019 += 1, R8020 += 1 };
  s0 -> s2 [0, 65535] { R8020 += 1, R7941 += 1, R7942 += 1 };
  s0 -> s3 [65, 65] { R8020 += 1, R7942 += 1 };
  s0 -> s4 [65, 65] { R8020 += 1, R7942 += 1 };
  s0 -> s1 [66, 65535] { R8020 += 1, R7942 += 1 };
  s1 -> s1 [0, 64] { R8020 += 1, R7942 += 1 };
  s1 -> s1 [0, 65535] { R8020 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R8020 += 1, R7942 += 1 };
  s1 -> s4 [65, 65] { R8020 += 1, R7942 += 1 };
  s1 -> s1 [66, 65535] { R8020 += 1, R7942 += 1 };
  s2 -> s1 [0, 64] { R8020 += 1, R7942 += 1 };
  s2 -> s2 [0, 65535] { R8020 += 1, R7941 += 1, R7942 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R8020 += 1, R7942 += 1 };
  s2 -> s4 [65, 65] { R8020 += 1, R7942 += 1 };
  s2 -> s1 [66, 65535] { R8020 += 1, R7942 += 1 };
  s3 -> s3 [0, 65535] { R8020 += 1, R7942 += 1 };
  s3 -> s6 [0, 65535] { R8020 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8020 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8020 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s0 [0, 65535] { R8021 += 1, R8022 += 1 };
  s0 -> s2 [0, 65535] { R8022 += 1, R7943 += 1, R7944 += 1 };
  s0 -> s3 [65, 65] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s4 [65, 65] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s0 -> s1 [66, 65535] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s1 [0, 64] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s1 [0, 65535] { R8022 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s4 [65, 65] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s1 -> s1 [66, 65535] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s1 [0, 64] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R8022 += 1, R7943 += 1, R7944 += 1 };
  s2 -> s3 [65, 65] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s4 [65, 65] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s2 -> s1 [66, 65535] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s3 -> s3 [0, 65535] { R8022 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8022 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8022 += 1, R7944 += 1, R7271 += 1, R7272 += 1 };
  s5 -> s5 [0, 65535] { R8022 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R8024 += 1, R7946 += 1 };
  s0 -> s2 [0, 65535] { R8024 += 1, R7945 += 1, R7946 += 1 };
  s0 -> s0 [0, 65535] { R8023 += 1, R8024 += 1 };
  s0 -> s3 [65, 65] { R8024 += 1, R7946 += 1 };
  s0 -> s4 [65, 65] { R8024 += 1, R7946 += 1 };
  s0 -> s1 [66, 65535] { R8024 += 1, R7946 += 1 };
  s1 -> s1 [0, 64] { R8024 += 1, R7946 += 1 };
  s1 -> s1 [0, 65535] { R8024 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R8024 += 1, R7946 += 1 };
  s1 -> s4 [65, 65] { R8024 += 1, R7946 += 1 };
  s1 -> s1 [66, 65535] { R8024 += 1, R7946 += 1 };
  s2 -> s1 [0, 64] { R8024 += 1, R7946 += 1 };
  s2 -> s2 [0, 65535] { R8024 += 1, R7945 += 1, R7946 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R8024 += 1, R7946 += 1 };
  s2 -> s4 [65, 65] { R8024 += 1, R7946 += 1 };
  s2 -> s1 [66, 65535] { R8024 += 1, R7946 += 1 };
  s3 -> s3 [0, 65535] { R8024 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8024 += 1 };
  s4 -> s4 [0, 65535] { R8024 += 1, R7946 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8024 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s0 -> s2 [0, 64] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s0 [0, 65535] { R8025 += 1, R8026 += 1 };
  s0 -> s3 [0, 65535] { R8026 += 1, R7947 += 1, R7948 += 1 };
  s0 -> s4 [65, 65] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s0 -> s5 [65, 65] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s0 -> s6 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s7 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s2 [66, 79] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s1 [66, 65535] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s0 -> s8 [80, 80] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s0 -> s2 [81, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s1 -> s1 [0, 64] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s1 -> s2 [0, 64] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s1 -> s4 [65, 65] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s1 -> s5 [65, 65] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s1 -> s6 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s1 -> s7 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s1 -> s2 [66, 79] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s1 -> s1 [66, 65535] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s1 -> s8 [80, 80] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s1 -> s2 [81, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s2 -> s2 [0, 64] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s2 -> s6 [65, 65] { R8026 += 1, R7948 += 1 };
  s2 -> s7 [65, 65] { R8026 += 1, R7948 += 1 };
  s2 -> s2 [66, 79] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s2 -> s2 [66, 65535] { R8026 += 1, R7948 += 1 };
  s2 -> s8 [80, 80] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s2 -> s2 [81, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s1 [0, 64] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s3 -> s2 [0, 64] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s3 [0, 65535] { R8026 += 1, R7947 += 1, R7948 += 1 };
  s3 -> s4 [65, 65] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s3 -> s5 [65, 65] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s3 -> s6 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s7 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s2 [66, 79] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s1 [66, 65535] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s3 -> s8 [80, 80] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s3 -> s2 [81, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s5 -> s6 [0, 79] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s5 -> s5 [0, 65535] { R8026 += 1, R7948 += 1, R7877 += 1, R7878 += 1 };
  s5 -> s10 [80, 80] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s5 -> s6 [81, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s6 -> s6 [0, 79] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s6 -> s6 [0, 65535] { R8026 += 1, R7948 += 1 };
  s6 -> s10 [80, 80] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s6 -> s6 [81, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s8 -> s8 [0, 64] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s8 -> s9 [0, 64] { R8026 += 1, R7948 += 1 };
  s8 -> s10 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s8 -> s11 [65, 65] { R8026 += 1, R7948 += 1 };
  s8 -> s12 [65, 65] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s8 -> s13 [65, 65] { R8026 += 1, R7948 += 1 };
  s8 -> s8 [66, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s8 -> s9 [66, 65535] { R8026 += 1, R7948 += 1 };
  s9 -> s9 [0, 64] { R8026 += 1, R7948 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R8026 += 1 };
  s9 -> s11 [65, 65] { R8026 += 1, R7948 += 1 };
  s9 -> s13 [65, 65] { R8026 += 1, R7948 += 1 };
  s9 -> s9 [66, 65535] { R8026 += 1, R7948 += 1 };
  s10 -> s10 [0, 65535] { R8026 += 1, R7948 += 1, R7878 += 1, R7879 += 1 };
  s10 -> s11 [0, 65535] { R8026 += 1, R7948 += 1 };
  s11 -> s11 [0, 65535] { R8026 += 1, R7948 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s15 [0, 65535] { R8026 += 1 };
  s13 -> s13 [0, 65535] { R8026 += 1 };
  s13 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R8026 += 1 };
  accepting s13, s9, s14, s15, s11;
};
};
constraint R2 = R7916 && R3 = R8026 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R7883 = 0 && R7884 = R7916 && R7885 = 0 && R7886 = R7916 && R7887 = 0 && R7888 = R7916 && R7889 = 0 && R7890 = R7916 && R7891 = 0 && R7892 = R7916 && R7893 = 0 && R7894 = R7916 && R7895 = 0 && R7896 = R7916 && R7897 = 0 && R7898 = R7916 && R7899 = 0 && R7900 = R7916 && R7901 = 0 && R7902 = R7916 && R7903 = 0 && R7904 = R7916 && R7905 = 0 && R7906 = R7916 && R7907 = 0 && R7908 = R7916 && R7909 = 0 && R7910 = R7916 && R7911 = 0 && R7912 = R7916 && R7913 = 0 && R7914 = R7916 && R7915 = 0 && R7919 = 0 && R7920 = 0 && R7937 = 0 && R7938 = 0 && R7947 = 0 && R7948 = 0 && R7949 = 10 && R7950 = R8026 && R7951 = 10 && R7952 = R8026 && R7953 = 10 && R7954 = R8026 && R7955 = 10 && R7956 = R8026 && R7957 = 10 && R7958 = R8026 && R7959 = 10 && R7960 = R8026 && R7961 = 10 && R7962 = R8026 && R7963 = 10 && R7964 = R8026 && R7965 = 10 && R7966 = R8026 && R7967 = 10 && R7968 = R8026 && R7969 = 10 && R7970 = R8026 && R7971 = 10 && R7972 = R8026 && R7973 = 10 && R7974 = R8026 && R7975 = 10 && R7976 = R8026 && R7977 = 10 && R7978 = R8026 && R7979 = 10 && R7980 = R8026 && R7981 = 10 && R7982 = R8026 && R7983 = 10 && R7984 = R8026 && R7985 = 10 && R7986 = R8026 && R7987 = 10 && R7988 = R8026 && R7989 = 10 && R7990 = R8026 && R7991 = 10 && R7992 = R8026 && R7993 = 10 && R7994 = R8026 && R7995 = 10 && R7996 = R8026 && R7997 = 10 && R7998 = R8026 && R7999 = 10 && R8000 = R8026 && R8001 = 10 && R8002 = R8026 && R8003 = 10 && R8004 = R8026 && R8005 = 10 && R8006 = R8026 && R8007 = 10 && R8008 = R8026 && R8009 = 10 && R8010 = R8026 && R8011 = 10 && R8012 = R8026 && R8013 = 10 && R8014 = R8026 && R8015 = 10 && R8016 = R8026 && R8017 = 10 && R8018 = R8026 && R8019 = 10 && R8020 = R8026 && R8021 = 10 && R8022 = R8026 && R8023 = 10 && R8024 = R8026 && R8025 = 10 && R7264 + R7261 + R7882 + R7879 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R7916 && 9 < R8026 && (R20 = 0 || (R7917 = 0 && R7918 = 0)) && (R20 = 0 || (R7921 = 0 && R7922 = 0)) && (R20 = 0 || (R7923 = 0 && R7924 = 0)) && (R20 = 0 || (R7925 = 0 && R7926 = 0)) && (R20 = 0 || (R7927 = 0 && R7928 = 0)) && (R20 = 0 || (R7929 = 0 && R7930 = 0)) && (R20 = 0 || (R7931 = 0 && R7932 = 0)) && (R20 = 0 || (R7933 = 0 && R7934 = 0)) && (R20 = 0 || (R7935 = 0 && R7936 = 0)) && (R20 = 0 || (R7939 = 0 && R7940 = 0)) && (R20 = 0 || (R7941 = 0 && R7942 = 0)) && (R20 = 0 || (R7943 = 0 && R7944 = 0)) && (R20 = 0 || (R7945 = 0 && R7946 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R7270 + R7267 = 0 || (R7268 + R7265 = 0 && R7269 + R7266 = 0)) && (R7276 + R7273 = 0 || (R7274 + R7271 = 0 && R7275 + R7272 = 0)) && (R7276 + R7273 = 0 || (R7880 + R7877 = 0 && R7881 + R7878 = 0));
// End of Parikh automata intersection problem
