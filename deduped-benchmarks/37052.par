// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R4985, R4986, R4987, R4988, R4989, R4990, R6503, R6504, R6505, R6506, R6507, R6508, R6959, R6960, R6961, R6962, R6963, R6964, R6965, R6966, R6967, R6968, R6969, R6970, R6971, R6972, R6973, R6974, R6975, R6976, R6977, R6978, R6979, R6980, R6981, R6982, R6983, R6984, R6985, R6986, R6987, R6988, R6989, R6990, R6991, R6992, R6993, R6994, R6995, R6996, R6997, R6998, R6999, R7000, R7001, R7002, R7003, R7004, R7005, R7006, R7007, R7008, R7009, R7010, R7011, R7012, R7013, R7014, R7015, R7016, R7017, R7018, R7019, R7020, R7021, R7022, R7023, R7024, R7025, R7026, R7027, R7028, R7029, R7030, R7031, R7032, R7033, R7034, R7035, R7036, R7037, R7038, R7039, R7040, R7041, R7042, R7043, R7044, R7045, R7046, R7047, R7048, R7049, R7050, R7051, R7052, R7053, R7054, R7055, R7056, R7057, R7058, R7059, R7060, R7061, R7062, R7063, R7064, R7065, R7066, R7067, R7068, R7069, R7070, R7071, R7072, R7073, R7074, R7075, R7076, R7077, R7078, R7079, R7080, R7081, R7082, R7083, R7084, R7085, R7086, R7087, R7088, R7089, R7090, R7091, R7092, R7093, R7094, R7095, R7096, R7097, R7098, R7099, R7100, R7101, R7102, R7103, R7104, R7105, R7106, R7107, R7108;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R7032 += 1 };
  s0 -> s0 [0, 65535] { R7031 += 1, R7032 += 1 };
  s0 -> s1 [45, 45] { R7032 += 1 };
  s0 -> s2 [46, 46] { R7032 += 1 };
  s0 -> s1 [48, 62] { R7032 += 1 };
  s0 -> s3 [65, 65] { R7032 += 1 };
  s0 -> s1 [66, 65535] { R7032 += 1 };
  s1 -> s1 [0, 43] { R7032 += 1 };
  s1 -> s1 [45, 45] { R7032 += 1 };
  s1 -> s2 [46, 46] { R7032 += 1 };
  s1 -> s1 [48, 62] { R7032 += 1 };
  s1 -> s3 [65, 65] { R7032 += 1 };
  s1 -> s1 [66, 65535] { R7032 += 1 };
  s2 -> s1 [0, 43] { R7032 += 1 };
  s2 -> s1 [45, 45] { R7032 += 1 };
  s2 -> s2 [46, 46] { R7032 += 1 };
  s2 -> s1 [48, 62] { R7032 += 1 };
  s2 -> s3 [65, 65] { R7032 += 1 };
  s2 -> s1 [66, 114] { R7032 += 1 };
  s2 -> s8 [115, 115] { R7032 += 1 };
  s2 -> s1 [116, 65535] { R7032 += 1 };
  s3 -> s3 [0, 43] { R7032 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R7032 += 1 };
  s3 -> s4 [46, 46] { R7032 += 1 };
  s3 -> s3 [48, 62] { R7032 += 1 };
  s3 -> s3 [65, 65535] { R7032 += 1 };
  s4 -> s3 [0, 43] { R7032 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R7032 += 1 };
  s4 -> s4 [46, 46] { R7032 += 1 };
  s4 -> s3 [48, 62] { R7032 += 1 };
  s4 -> s3 [65, 114] { R7032 += 1 };
  s4 -> s5 [115, 115] { R7032 += 1 };
  s4 -> s3 [116, 65535] { R7032 += 1 };
  s5 -> s3 [0, 43] { R7032 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R7032 += 1 };
  s5 -> s4 [46, 46] { R7032 += 1 };
  s5 -> s3 [48, 62] { R7032 += 1 };
  s5 -> s3 [65, 110] { R7032 += 1 };
  s5 -> s6 [111, 111] { R7032 += 1 };
  s5 -> s3 [112, 65535] { R7032 += 1 };
  s6 -> s3 [0, 43] { R7032 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R7032 += 1 };
  s6 -> s4 [46, 46] { R7032 += 1 };
  s6 -> s3 [48, 62] { R7032 += 1 };
  s6 -> s3 [65, 98] { R7032 += 1 };
  s6 -> s7 [99, 99] { R7032 += 1 };
  s6 -> s3 [100, 65535] { R7032 += 1 };
  s7 -> s3 [0, 43] { R7032 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R7032 += 1 };
  s7 -> s4 [46, 46] { R7032 += 1 };
  s7 -> s3 [48, 62] { R7032 += 1 };
  s7 -> s3 [65, 106] { R7032 += 1 };
  s7 -> s3 [108, 65535] { R7032 += 1 };
  s8 -> s1 [0, 43] { R7032 += 1 };
  s8 -> s1 [45, 45] { R7032 += 1 };
  s8 -> s2 [46, 46] { R7032 += 1 };
  s8 -> s1 [48, 62] { R7032 += 1 };
  s8 -> s3 [65, 65] { R7032 += 1 };
  s8 -> s1 [66, 110] { R7032 += 1 };
  s8 -> s9 [111, 111] { R7032 += 1 };
  s8 -> s1 [112, 65535] { R7032 += 1 };
  s9 -> s1 [0, 43] { R7032 += 1 };
  s9 -> s1 [45, 45] { R7032 += 1 };
  s9 -> s2 [46, 46] { R7032 += 1 };
  s9 -> s1 [48, 62] { R7032 += 1 };
  s9 -> s3 [65, 65] { R7032 += 1 };
  s9 -> s1 [66, 98] { R7032 += 1 };
  s9 -> s10 [99, 99] { R7032 += 1 };
  s9 -> s1 [100, 65535] { R7032 += 1 };
  s10 -> s1 [0, 43] { R7032 += 1 };
  s10 -> s1 [45, 45] { R7032 += 1 };
  s10 -> s2 [46, 46] { R7032 += 1 };
  s10 -> s1 [48, 62] { R7032 += 1 };
  s10 -> s3 [65, 65] { R7032 += 1 };
  s10 -> s1 [66, 106] { R7032 += 1 };
  s10 -> s1 [108, 65535] { R7032 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R7033 += 1, R7034 += 1 };
  s0 -> s1 [0, 65535] { R7034 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R7034 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R7036 += 1 };
  s0 -> s0 [0, 65535] { R7035 += 1, R7036 += 1 };
  s0 -> s2 [0, 65535] { R7036 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R7036 += 1 };
  s0 -> s1 [59, 65535] { R7036 += 1 };
  s1 -> s1 [0, 57] { R7036 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R7036 += 1 };
  s1 -> s1 [59, 65535] { R7036 += 1 };
  s2 -> s1 [0, 57] { R7036 += 1 };
  s2 -> s2 [0, 65535] { R7036 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R7036 += 1 };
  s2 -> s1 [59, 65535] { R7036 += 1 };
  s3 -> s3 [0, 65535] { R7036 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R7038 += 1 };
  s0 -> s0 [0, 65535] { R7037 += 1, R7038 += 1 };
  s0 -> s2 [0, 65535] { R7038 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R7038 += 1 };
  s0 -> s1 [66, 65535] { R7038 += 1 };
  s1 -> s1 [0, 64] { R7038 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R7038 += 1 };
  s1 -> s1 [66, 65535] { R7038 += 1 };
  s2 -> s1 [0, 64] { R7038 += 1 };
  s2 -> s2 [0, 65535] { R7038 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R7038 += 1 };
  s2 -> s1 [66, 65535] { R7038 += 1 };
  s3 -> s3 [0, 65535] { R7038 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R7040 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R7039 += 1, R7040 += 1 };
  s0 -> s2 [0, 65535] { R7040 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R7040 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R7040 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7040 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R7040 += 1 };
  s2 -> s1 [0, 90] { R7040 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7040 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R7040 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R7040 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R7040 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7040 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R7042 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R7042 += 1, R24 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R7041 += 1, R7042 += 1 };
  s1 -> s1 [0, 65535] { R7042 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R7042 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7042 += 1 };
  s2 -> s2 [0, 65535] { R7042 += 1, R24 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7042 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R7044 += 1, R6966 += 1 };
  s0 -> s2 [0, 65535] { R7044 += 1, R6965 += 1, R6966 += 1 };
  s0 -> s0 [0, 65535] { R7043 += 1, R7044 += 1 };
  s0 -> s1 [66, 65535] { R7044 += 1, R6966 += 1 };
  s1 -> s1 [0, 64] { R7044 += 1, R6966 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7044 += 1 };
  s1 -> s1 [66, 65535] { R7044 += 1, R6966 += 1 };
  s2 -> s1 [0, 64] { R7044 += 1, R6966 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7044 += 1, R6965 += 1, R6966 += 1 };
  s2 -> s1 [66, 65535] { R7044 += 1, R6966 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R7046 += 1, R6968 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R7046 += 1, R6967 += 1, R6968 += 1 };
  s0 -> s0 [0, 65535] { R7045 += 1, R7046 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7046 += 1, R6968 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R7046 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7046 += 1, R6968 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R7046 += 1, R6967 += 1, R6968 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7046 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R7048 += 1, R6970 += 1 };
  s0 -> s2 [0, 65535] { R7048 += 1, R6969 += 1, R6970 += 1 };
  s0 -> s0 [0, 65535] { R7047 += 1, R7048 += 1 };
  s0 -> s1 [80, 65535] { R7048 += 1, R6970 += 1 };
  s1 -> s1 [0, 65] { R7048 += 1, R6970 += 1 };
  s1 -> s1 [0, 65535] { R7048 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R7048 += 1, R6970 += 1 };
  s2 -> s1 [0, 65] { R7048 += 1, R6970 += 1 };
  s2 -> s2 [0, 65535] { R7048 += 1, R6969 += 1, R6970 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R7048 += 1, R6970 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R7050 += 1, R6972 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R7049 += 1, R7050 += 1 };
  s0 -> s2 [0, 65535] { R7050 += 1, R6971 += 1, R6972 += 1 };
  s1 -> s1 [0, 65535] { R7050 += 1, R6972 += 1, R406 += 1 };
  s1 -> s4 [0, 65535] { R7050 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7050 += 1, R6972 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R7050 += 1, R6971 += 1, R6972 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7050 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R7052 += 1, R6974 += 1 };
  s0 -> s2 [0, 65535] { R7052 += 1, R6974 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R7051 += 1, R7052 += 1 };
  s0 -> s3 [0, 65535] { R7052 += 1, R6973 += 1, R6974 += 1 };
  s0 -> s1 [84, 65535] { R7052 += 1, R6974 += 1 };
  s1 -> s1 [0, 82] { R7052 += 1, R6974 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7052 += 1 };
  s1 -> s1 [84, 65535] { R7052 += 1, R6974 += 1 };
  s2 -> s1 [0, 82] { R7052 += 1, R6974 += 1 };
  s2 -> s2 [0, 65535] { R7052 += 1, R6974 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R7052 += 1 };
  s2 -> s1 [84, 65535] { R7052 += 1, R6974 += 1 };
  s3 -> s1 [0, 82] { R7052 += 1, R6974 += 1 };
  s3 -> s2 [0, 65535] { R7052 += 1, R6974 += 1, R408 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7052 += 1, R6973 += 1, R6974 += 1 };
  s3 -> s1 [84, 65535] { R7052 += 1, R6974 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7052 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R7054 += 1, R6976 += 1 };
  s0 -> s0 [0, 65535] { R7053 += 1, R7054 += 1 };
  s0 -> s2 [0, 65535] { R7054 += 1, R6976 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R7054 += 1, R6975 += 1, R6976 += 1 };
  s0 -> s1 [81, 65535] { R7054 += 1, R6976 += 1 };
  s1 -> s1 [0, 79] { R7054 += 1, R6976 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7054 += 1 };
  s1 -> s1 [81, 65535] { R7054 += 1, R6976 += 1 };
  s2 -> s1 [0, 79] { R7054 += 1, R6976 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7054 += 1, R6976 += 1, R410 += 1 };
  s2 -> s5 [0, 65535] { R7054 += 1 };
  s2 -> s1 [81, 65535] { R7054 += 1, R6976 += 1 };
  s3 -> s1 [0, 79] { R7054 += 1, R6976 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7054 += 1, R6976 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R7054 += 1, R6975 += 1, R6976 += 1 };
  s3 -> s1 [81, 65535] { R7054 += 1, R6976 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7054 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R7056 += 1, R6978 += 1, R415 += 1, R416 += 1 };
  s0 -> s0 [0, 65535] { R7055 += 1, R7056 += 1 };
  s0 -> s2 [0, 65535] { R7056 += 1, R6977 += 1, R6978 += 1 };
  s0 -> s3 [0, 65535] { R7056 += 1, R6978 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R7056 += 1, R6978 += 1, R415 += 1, R416 += 1 };
  s1 -> s6 [0, 65535] { R7056 += 1, R6978 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R7056 += 1 };
  s2 -> s1 [0, 65535] { R7056 += 1, R6978 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R7056 += 1, R6977 += 1, R6978 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7056 += 1, R6978 += 1, R414 += 1, R415 += 1 };
  s3 -> s1 [0, 65535] { R7056 += 1, R6978 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7056 += 1, R6978 += 1, R414 += 1, R415 += 1 };
  s3 -> s5 [0, 65535] { R7056 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7056 += 1 };
  s6 -> s6 [0, 65535] { R7056 += 1, R6978 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7056 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R7058 += 1, R6979 += 1, R6980 += 1 };
  s0 -> s2 [0, 65535] { R7058 += 1, R6980 += 1 };
  s0 -> s0 [0, 65535] { R7057 += 1, R7058 += 1 };
  s1 -> s1 [0, 65535] { R7058 += 1, R6979 += 1, R6980 += 1 };
  s1 -> s2 [0, 65535] { R7058 += 1, R6980 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R7058 += 1 };
  s2 -> s2 [0, 65535] { R7058 += 1, R6980 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R7058 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R7060 += 1, R6982 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R7060 += 1, R6982 += 1, R419 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R7059 += 1, R7060 += 1 };
  s0 -> s3 [0, 65535] { R7060 += 1, R6981 += 1, R6982 += 1 };
  s0 -> s1 [81, 65535] { R7060 += 1, R6982 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R7060 += 1, R6982 += 1, R420 += 1 };
  s1 -> s5 [0, 65535] { R7060 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7060 += 1, R6982 += 1 };
  s1 -> s1 [81, 65535] { R7060 += 1, R6982 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R7060 += 1, R6982 += 1, R420 += 1 };
  s2 -> s5 [0, 65535] { R7060 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7060 += 1, R6982 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R7060 += 1, R6982 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R7060 += 1, R6982 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R7060 += 1, R6982 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R7060 += 1, R6981 += 1, R6982 += 1 };
  s3 -> s1 [81, 65535] { R7060 += 1, R6982 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7060 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R7062 += 1, R6984 += 1, R425 += 1, R426 += 1 };
  s0 -> s2 [0, 65535] { R7062 += 1, R6984 += 1, R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R7062 += 1, R6983 += 1, R6984 += 1 };
  s0 -> s0 [0, 65535] { R7061 += 1, R7062 += 1 };
  s1 -> s1 [0, 65535] { R7062 += 1, R6984 += 1, R425 += 1, R426 += 1 };
  s1 -> s5 [0, 65535] { R7062 += 1 };
  s1 -> s6 [0, 65535] { R7062 += 1, R6984 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R7062 += 1, R6984 += 1, R425 += 1, R426 += 1 };
  s2 -> s2 [0, 65535] { R7062 += 1, R6984 += 1, R424 += 1, R425 += 1 };
  s2 -> s5 [0, 65535] { R7062 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R7062 += 1, R6984 += 1, R425 += 1, R426 += 1 };
  s3 -> s2 [0, 65535] { R7062 += 1, R6984 += 1, R424 += 1, R425 += 1 };
  s3 -> s3 [0, 65535] { R7062 += 1, R6983 += 1, R6984 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R7062 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R7062 += 1 };
  s6 -> s6 [0, 65535] { R7062 += 1, R6984 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R7064 += 1, R6985 += 1, R6986 += 1 };
  s0 -> s3 [0, 65535] { R7064 += 1, R6986 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R7063 += 1, R7064 += 1 };
  s0 -> s1 [91, 107] { R7064 += 1, R6986 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R7064 += 1, R6986 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R7064 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7064 += 1, R6986 += 1 };
  s1 -> s1 [91, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R7064 += 1, R6985 += 1, R6986 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R7064 += 1, R6986 += 1, R429 += 1, R430 += 1 };
  s2 -> s1 [91, 107] { R7064 += 1, R6986 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R7064 += 1, R6986 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s3 -> s5 [0, 65535] { R7064 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7064 += 1, R6986 += 1, R429 += 1, R430 += 1 };
  s3 -> s1 [91, 107] { R7064 += 1, R6986 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R7064 += 1, R6986 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R7064 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7064 += 1, R6986 += 1 };
  s4 -> s1 [91, 110] { R7064 += 1, R6986 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R7064 += 1, R6986 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R7064 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R7064 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7064 += 1, R6986 += 1 };
  s7 -> s1 [91, 98] { R7064 += 1, R6986 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R7064 += 1, R6986 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R7064 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7064 += 1, R6986 += 1 };
  s8 -> s1 [91, 96] { R7064 += 1, R6986 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R7064 += 1, R6986 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s9 -> s5 [0, 65535] { R7064 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R7064 += 1, R6986 += 1 };
  s9 -> s1 [91, 107] { R7064 += 1, R6986 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R7064 += 1, R6986 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s10 -> s5 [0, 65535] { R7064 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R7064 += 1, R6986 += 1 };
  s10 -> s1 [91, 103] { R7064 += 1, R6986 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R7064 += 1, R6986 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s11 -> s5 [0, 65535] { R7064 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R7064 += 1, R6986 += 1 };
  s11 -> s1 [91, 110] { R7064 += 1, R6986 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R7064 += 1, R6986 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R7064 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R7064 += 1, R6986 += 1 };
  s12 -> s1 [91, 114] { R7064 += 1, R6986 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R7064 += 1, R6986 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s13 -> s13 [0, 65535] { R7064 += 1, R6986 += 1 };
  s13 -> s5 [0, 65535] { R7064 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R7064 += 1, R6986 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R7064 += 1, R6986 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R7064 += 1, R6986 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R7064 += 1, R6986 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R7066 += 1, R6988 += 1, R434 += 1, R435 += 1 };
  s0 -> s0 [0, 65535] { R7065 += 1, R7066 += 1 };
  s0 -> s2 [0, 65535] { R7066 += 1, R6987 += 1, R6988 += 1 };
  s0 -> s3 [0, 65535] { R7066 += 1, R6988 += 1, R435 += 1, R436 += 1 };
  s1 -> s1 [0, 65535] { R7066 += 1, R6988 += 1, R434 += 1, R435 += 1 };
  s1 -> s5 [0, 65535] { R7066 += 1 };
  s1 -> s3 [0, 65535] { R7066 += 1, R6988 += 1, R435 += 1, R436 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R7066 += 1, R6988 += 1, R434 += 1, R435 += 1 };
  s2 -> s2 [0, 65535] { R7066 += 1, R6987 += 1, R6988 += 1 };
  s2 -> s3 [0, 65535] { R7066 += 1, R6988 += 1, R435 += 1, R436 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R7066 += 1, R6988 += 1 };
  s3 -> s5 [0, 65535] { R7066 += 1 };
  s3 -> s3 [0, 65535] { R7066 += 1, R6988 += 1, R435 += 1, R436 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7066 += 1, R6988 += 1 };
  s4 -> s5 [0, 65535] { R7066 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7066 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R7068 += 1, R6990 += 1 };
  s0 -> s2 [0, 65535] { R7068 += 1, R6989 += 1, R6990 += 1 };
  s0 -> s0 [0, 65535] { R7067 += 1, R7068 += 1 };
  s1 -> s4 [0, 65535] { R7068 += 1 };
  s1 -> s1 [0, 65535] { R7068 += 1, R6990 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7068 += 1, R6990 += 1 };
  s2 -> s2 [0, 65535] { R7068 += 1, R6989 += 1, R6990 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7068 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R7070 += 1, R6992 += 1 };
  s0 -> s2 [0, 65535] { R7070 += 1, R6991 += 1, R6992 += 1 };
  s0 -> s0 [0, 65535] { R7069 += 1, R7070 += 1 };
  s1 -> s1 [0, 65535] { R7070 += 1, R6992 += 1 };
  s1 -> s4 [0, 65535] { R7070 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7070 += 1, R6992 += 1 };
  s2 -> s2 [0, 65535] { R7070 += 1, R6991 += 1, R6992 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7070 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R7071 += 1, R7072 += 1 };
  s0 -> s1 [0, 65535] { R7072 += 1, R6993 += 1, R6994 += 1 };
  s0 -> s2 [0, 65535] { R7072 += 1, R6994 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7072 += 1, R6993 += 1, R6994 += 1 };
  s1 -> s2 [0, 65535] { R7072 += 1, R6994 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7072 += 1 };
  s2 -> s2 [0, 65535] { R7072 += 1, R6994 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7072 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R7073 += 1, R7074 += 1 };
  s0 -> s1 [0, 65535] { R7074 += 1, R6995 += 1, R6996 += 1 };
  s0 -> s2 [0, 65535] { R7074 += 1, R6996 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R7074 += 1, R6995 += 1, R6996 += 1 };
  s1 -> s2 [0, 65535] { R7074 += 1, R6996 += 1 };
  s2 -> s3 [0, 65535] { R7074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R7074 += 1, R6996 += 1 };
  s3 -> s3 [0, 65535] { R7074 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R7075 += 1, R7076 += 1 };
  s0 -> s1 [0, 65535] { R7076 += 1, R6997 += 1, R6998 += 1 };
  s0 -> s2 [0, 65535] { R7076 += 1, R6998 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R7076 += 1, R6997 += 1, R6998 += 1 };
  s1 -> s2 [0, 65535] { R7076 += 1, R6998 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R7076 += 1 };
  s2 -> s2 [0, 65535] { R7076 += 1, R6998 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7076 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R7077 += 1, R7078 += 1 };
  s0 -> s1 [0, 65535] { R7078 += 1, R7000 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R7078 += 1, R6999 += 1, R7000 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R7078 += 1 };
  s1 -> s1 [0, 65535] { R7078 += 1, R7000 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R7078 += 1, R7000 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R7078 += 1, R6999 += 1, R7000 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R7078 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R7080 += 1, R7002 += 1 };
  s0 -> s2 [0, 65535] { R7080 += 1, R7001 += 1, R7002 += 1 };
  s0 -> s0 [0, 65535] { R7079 += 1, R7080 += 1 };
  s0 -> s3 [65, 65] { R7080 += 1, R7002 += 1 };
  s0 -> s4 [65, 65] { R7080 += 1, R7002 += 1 };
  s0 -> s5 [80, 80] { R7080 += 1, R7002 += 1 };
  s0 -> s1 [81, 65535] { R7080 += 1, R7002 += 1 };
  s1 -> s1 [0, 64] { R7080 += 1, R7002 += 1 };
  s1 -> s3 [65, 65] { R7080 += 1, R7002 += 1 };
  s1 -> s4 [65, 65] { R7080 += 1, R7002 += 1 };
  s1 -> s5 [80, 80] { R7080 += 1, R7002 += 1 };
  s1 -> s1 [81, 65535] { R7080 += 1, R7002 += 1 };
  s2 -> s1 [0, 64] { R7080 += 1, R7002 += 1 };
  s2 -> s2 [0, 65535] { R7080 += 1, R7001 += 1, R7002 += 1 };
  s2 -> s3 [65, 65] { R7080 += 1, R7002 += 1 };
  s2 -> s4 [65, 65] { R7080 += 1, R7002 += 1 };
  s2 -> s5 [80, 80] { R7080 += 1, R7002 += 1 };
  s2 -> s1 [81, 65535] { R7080 += 1, R7002 += 1 };
  s3 -> s3 [0, 65] { R7080 += 1, R7002 += 1 };
  s3 -> s7 [80, 80] { R7080 += 1, R7002 += 1 };
  s3 -> s3 [81, 65535] { R7080 += 1, R7002 += 1 };
  s5 -> s5 [0, 64] { R7080 += 1, R7002 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R7080 += 1 };
  s5 -> s7 [65, 65] { R7080 += 1, R7002 += 1 };
  s5 -> s8 [65, 65] { R7080 += 1, R7002 += 1 };
  s5 -> s5 [80, 65535] { R7080 += 1, R7002 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R7080 += 1, R7002 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7080 += 1 };
  s7 -> s7 [80, 65535] { R7080 += 1, R7002 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7080 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R7082 += 1, R7004 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R7082 += 1, R7003 += 1, R7004 += 1 };
  s0 -> s0 [0, 65535] { R7081 += 1, R7082 += 1 };
  s0 -> s3 [65, 65] { R7082 += 1, R7004 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R7082 += 1, R7004 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R7082 += 1, R7004 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R7082 += 1, R7004 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R7082 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7082 += 1, R7004 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R7082 += 1, R7004 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R7082 += 1, R7004 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R7082 += 1, R7004 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R7082 += 1, R7003 += 1, R7004 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7082 += 1, R7004 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R7082 += 1, R7004 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R7082 += 1, R7004 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R7082 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7082 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7082 += 1, R7004 += 1, R405 += 1 };
  s5 -> s5 [0, 65535] { R7082 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R7084 += 1, R7006 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R7084 += 1, R7005 += 1, R7006 += 1 };
  s0 -> s0 [0, 65535] { R7083 += 1, R7084 += 1 };
  s0 -> s3 [65, 65] { R7084 += 1, R7006 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R7084 += 1, R7006 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R7084 += 1, R7006 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R7084 += 1, R7006 += 1, R407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7084 += 1 };
  s1 -> s3 [65, 65] { R7084 += 1, R7006 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R7084 += 1, R7006 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R7084 += 1, R7006 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R7084 += 1, R7006 += 1, R407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7084 += 1, R7005 += 1, R7006 += 1 };
  s2 -> s3 [65, 65] { R7084 += 1, R7006 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R7084 += 1, R7006 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R7084 += 1, R7006 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7084 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7084 += 1 };
  s4 -> s4 [0, 65535] { R7084 += 1, R7006 += 1, R407 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7084 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R7086 += 1, R7008 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R7086 += 1, R7007 += 1, R7008 += 1 };
  s0 -> s0 [0, 65535] { R7085 += 1, R7086 += 1 };
  s0 -> s3 [65, 65] { R7086 += 1, R7008 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R7086 += 1, R7008 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R7086 += 1, R7008 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R7086 += 1, R7008 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R7086 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7086 += 1, R7008 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R7086 += 1, R7008 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R7086 += 1, R7008 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R7086 += 1, R7008 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R7086 += 1, R7007 += 1, R7008 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7086 += 1, R7008 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R7086 += 1, R7008 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R7086 += 1, R7008 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R7086 += 1, R7008 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R7086 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7086 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7086 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R7088 += 1, R7009 += 1, R7010 += 1 };
  s0 -> s0 [0, 65535] { R7087 += 1, R7088 += 1 };
  s0 -> s3 [65, 65] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7088 += 1 };
  s1 -> s3 [65, 65] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R7088 += 1, R7009 += 1, R7010 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535] { R7088 += 1 };
  s3 -> s3 [0, 65535] { R7088 += 1, R7010 += 1, R411 += 1, R412 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7088 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7088 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R7090 += 1, R7012 += 1 };
  s0 -> s2 [0, 65535] { R7090 += 1, R7011 += 1, R7012 += 1 };
  s0 -> s0 [0, 65535] { R7089 += 1, R7090 += 1 };
  s0 -> s3 [65, 65] { R7090 += 1, R7012 += 1 };
  s0 -> s4 [65, 65] { R7090 += 1, R7012 += 1 };
  s0 -> s1 [66, 65535] { R7090 += 1, R7012 += 1 };
  s1 -> s1 [0, 64] { R7090 += 1, R7012 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R7090 += 1 };
  s1 -> s3 [65, 65] { R7090 += 1, R7012 += 1 };
  s1 -> s4 [65, 65] { R7090 += 1, R7012 += 1 };
  s1 -> s1 [66, 65535] { R7090 += 1, R7012 += 1 };
  s2 -> s1 [0, 64] { R7090 += 1, R7012 += 1 };
  s2 -> s2 [0, 65535] { R7090 += 1, R7011 += 1, R7012 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7090 += 1, R7012 += 1 };
  s2 -> s4 [65, 65] { R7090 += 1, R7012 += 1 };
  s2 -> s1 [66, 65535] { R7090 += 1, R7012 += 1 };
  s3 -> s3 [0, 65535] { R7090 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R7090 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7090 += 1, R7012 += 1 };
  s5 -> s5 [0, 65535] { R7090 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R7092 += 1, R7013 += 1, R7014 += 1 };
  s0 -> s0 [0, 65535] { R7091 += 1, R7092 += 1 };
  s0 -> s3 [65, 65] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7092 += 1 };
  s1 -> s3 [65, 65] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R7092 += 1, R7013 += 1, R7014 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s3 -> s6 [0, 65535] { R7092 += 1 };
  s3 -> s3 [0, 65535] { R7092 += 1, R7014 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7092 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7092 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R7094 += 1, R7015 += 1, R7016 += 1 };
  s0 -> s0 [0, 65535] { R7093 += 1, R7094 += 1 };
  s0 -> s3 [65, 65] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7094 += 1 };
  s1 -> s3 [65, 65] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R7094 += 1, R7015 += 1, R7016 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R7094 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7094 += 1, R7016 += 1, R421 += 1, R422 += 1 };
  s4 -> s6 [0, 65535] { R7094 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7094 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R7096 += 1, R7017 += 1, R7018 += 1 };
  s0 -> s0 [0, 65535] { R7095 += 1, R7096 += 1 };
  s0 -> s3 [65, 65] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R7096 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R7096 += 1, R7017 += 1, R7018 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R7096 += 1, R7018 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535] { R7096 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7096 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7096 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s0 -> s2 [0, 65535] { R7098 += 1, R7019 += 1, R7020 += 1 };
  s0 -> s0 [0, 65535] { R7097 += 1, R7098 += 1 };
  s0 -> s3 [65, 65] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s0 -> s4 [65, 65] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s0 -> s1 [66, 65535] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 64] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7098 += 1 };
  s1 -> s3 [65, 65] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s1 -> s4 [65, 65] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [66, 65535] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [0, 64] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R7098 += 1, R7019 += 1, R7020 += 1 };
  s2 -> s3 [65, 65] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [65, 65] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [66, 65535] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s3 -> s6 [0, 65535] { R7098 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R7098 += 1, R7020 += 1, R431 += 1, R432 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R7098 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7098 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s0 -> s2 [0, 64] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s0 -> s0 [0, 65535] { R7099 += 1, R7100 += 1 };
  s0 -> s3 [0, 65535] { R7100 += 1, R7021 += 1, R7022 += 1 };
  s0 -> s4 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s0 -> s5 [65, 65] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s0 -> s6 [65, 65] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s0 -> s7 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s0 -> s1 [66, 65535] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s0 -> s2 [66, 65535] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s1 -> s1 [0, 64] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s1 -> s11 [0, 64] { R7100 += 1, R7022 += 1 };
  s1 -> s4 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s1 -> s12 [65, 65] { R7100 += 1, R7022 += 1 };
  s1 -> s8 [65, 65] { R7100 += 1, R7022 += 1 };
  s1 -> s7 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s1 -> s1 [66, 65535] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s1 -> s11 [66, 65535] { R7100 += 1, R7022 += 1 };
  s2 -> s1 [0, 64] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s2 -> s2 [0, 64] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s2 -> s4 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s2 -> s5 [65, 65] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s2 -> s6 [65, 65] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s2 -> s7 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s2 -> s1 [66, 65535] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s2 -> s2 [66, 65535] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s3 -> s1 [0, 64] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s3 -> s2 [0, 64] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s3 -> s3 [0, 65535] { R7100 += 1, R7021 += 1, R7022 += 1 };
  s3 -> s4 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s3 -> s5 [65, 65] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s3 -> s6 [65, 65] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s3 -> s7 [65, 65] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s3 -> s1 [66, 65535] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s3 -> s2 [66, 65535] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s5 -> s5 [0, 65535] { R7100 += 1, R7022 += 1, R4985 += 1, R4986 += 1 };
  s5 -> s7 [0, 65535] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s7 -> s8 [0, 65535] { R7100 += 1, R7022 += 1 };
  s7 -> s7 [0, 65535] { R7100 += 1, R7022 += 1, R4986 += 1, R4987 += 1 };
  s8 -> s9 [0, 65535] { R7100 += 1 };
  s8 -> s8 [0, 65535] { R7100 += 1, R7022 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R7100 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R7100 += 1, R7022 += 1 };
  s11 -> s11 [0, 65535] { R7100 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R7100 += 1, R7022 += 1 };
  s11 -> s8 [65, 65] { R7100 += 1, R7022 += 1 };
  s11 -> s11 [66, 65535] { R7100 += 1, R7022 += 1 };
  s12 -> s12 [0, 65535] { R7100 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R7102 += 1, R7024 += 1 };
  s0 -> s2 [0, 65535] { R7102 += 1, R7023 += 1, R7024 += 1 };
  s0 -> s0 [0, 65535] { R7101 += 1, R7102 += 1 };
  s0 -> s3 [65, 65] { R7102 += 1, R7024 += 1 };
  s0 -> s4 [65, 65] { R7102 += 1, R7024 += 1 };
  s0 -> s1 [66, 65535] { R7102 += 1, R7024 += 1 };
  s1 -> s1 [0, 64] { R7102 += 1, R7024 += 1 };
  s1 -> s1 [0, 65535] { R7102 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R7102 += 1, R7024 += 1 };
  s1 -> s4 [65, 65] { R7102 += 1, R7024 += 1 };
  s1 -> s1 [66, 65535] { R7102 += 1, R7024 += 1 };
  s2 -> s1 [0, 64] { R7102 += 1, R7024 += 1 };
  s2 -> s2 [0, 65535] { R7102 += 1, R7023 += 1, R7024 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R7102 += 1, R7024 += 1 };
  s2 -> s4 [65, 65] { R7102 += 1, R7024 += 1 };
  s2 -> s1 [66, 65535] { R7102 += 1, R7024 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7102 += 1 };
  s4 -> s5 [0, 65535] { R7102 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7102 += 1, R7024 += 1 };
  s5 -> s5 [0, 65535] { R7102 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s0 -> s2 [0, 64] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s0 -> s0 [0, 65535] { R7103 += 1, R7104 += 1 };
  s0 -> s3 [0, 65535] { R7104 += 1, R7025 += 1, R7026 += 1 };
  s0 -> s4 [65, 65] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s0 -> s5 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s0 -> s6 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s0 -> s7 [65, 65] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s0 -> s1 [66, 65535] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s0 -> s2 [66, 65535] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s1 -> s11 [0, 64] { R7104 += 1, R7026 += 1 };
  s1 -> s1 [0, 64] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s1 -> s5 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s1 -> s12 [65, 65] { R7104 += 1, R7026 += 1 };
  s1 -> s8 [65, 65] { R7104 += 1, R7026 += 1 };
  s1 -> s6 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s1 -> s11 [66, 65535] { R7104 += 1, R7026 += 1 };
  s1 -> s1 [66, 65535] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s2 -> s1 [0, 64] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s2 -> s2 [0, 64] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s2 -> s4 [65, 65] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s2 -> s5 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s2 -> s6 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s2 -> s7 [65, 65] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s2 -> s1 [66, 65535] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s2 -> s2 [66, 65535] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s3 -> s1 [0, 64] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s3 -> s2 [0, 64] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s3 -> s3 [0, 65535] { R7104 += 1, R7025 += 1, R7026 += 1 };
  s3 -> s4 [65, 65] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s3 -> s5 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s3 -> s6 [65, 65] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s3 -> s7 [65, 65] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s3 -> s1 [66, 65535] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s3 -> s2 [66, 65535] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s5 -> s5 [0, 65535] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s5 -> s8 [0, 65535] { R7104 += 1, R7026 += 1 };
  s7 -> s5 [0, 65535] { R7104 += 1, R7026 += 1, R6504 += 1, R6505 += 1 };
  s7 -> s7 [0, 65535] { R7104 += 1, R7026 += 1, R6503 += 1, R6504 += 1 };
  s8 -> s9 [0, 65535] { R7104 += 1 };
  s8 -> s8 [0, 65535] { R7104 += 1, R7026 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R7104 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R7104 += 1, R7026 += 1 };
  s11 -> s11 [0, 65535] { R7104 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R7104 += 1, R7026 += 1 };
  s11 -> s8 [65, 65] { R7104 += 1, R7026 += 1 };
  s11 -> s11 [66, 65535] { R7104 += 1, R7026 += 1 };
  s12 -> s12 [0, 65535] { R7104 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R7106 += 1, R7028 += 1 };
  s0 -> s0 [0, 65535] { R7105 += 1, R7106 += 1 };
  s0 -> s2 [0, 65535] { R7106 += 1, R7027 += 1, R7028 += 1 };
  s0 -> s3 [65, 65] { R7106 += 1, R7028 += 1 };
  s0 -> s4 [65, 65] { R7106 += 1, R7028 += 1 };
  s0 -> s1 [66, 65535] { R7106 += 1, R7028 += 1 };
  s1 -> s1 [0, 64] { R7106 += 1, R7028 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R7106 += 1 };
  s1 -> s3 [65, 65] { R7106 += 1, R7028 += 1 };
  s1 -> s4 [65, 65] { R7106 += 1, R7028 += 1 };
  s1 -> s1 [66, 65535] { R7106 += 1, R7028 += 1 };
  s2 -> s1 [0, 64] { R7106 += 1, R7028 += 1 };
  s2 -> s2 [0, 65535] { R7106 += 1, R7027 += 1, R7028 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R7106 += 1, R7028 += 1 };
  s2 -> s4 [65, 65] { R7106 += 1, R7028 += 1 };
  s2 -> s1 [66, 65535] { R7106 += 1, R7028 += 1 };
  s3 -> s3 [0, 65535] { R7106 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R7106 += 1 };
  s4 -> s4 [0, 65535] { R7106 += 1, R7028 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R7106 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s0 -> s2 [0, 64] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s0 -> s0 [0, 65535] { R7107 += 1, R7108 += 1 };
  s0 -> s3 [0, 65535] { R7108 += 1, R7029 += 1, R7030 += 1 };
  s0 -> s4 [65, 65] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s0 -> s5 [65, 65] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s0 -> s6 [65, 65] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s0 -> s7 [65, 65] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s0 -> s2 [66, 79] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s0 -> s1 [66, 65535] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s0 -> s8 [80, 80] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s0 -> s2 [81, 65535] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s1 -> s1 [0, 64] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s1 -> s2 [0, 64] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s1 -> s4 [65, 65] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s1 -> s5 [65, 65] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s1 -> s6 [65, 65] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s1 -> s7 [65, 65] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s1 -> s2 [66, 79] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s1 -> s1 [66, 65535] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s1 -> s8 [80, 80] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s1 -> s2 [81, 65535] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s2 -> s2 [0, 64] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s2 -> s4 [65, 65] { R7108 += 1, R7030 += 1 };
  s2 -> s6 [65, 65] { R7108 += 1, R7030 += 1 };
  s2 -> s2 [66, 79] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s2 -> s2 [66, 65535] { R7108 += 1, R7030 += 1 };
  s2 -> s8 [80, 80] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s2 -> s2 [81, 65535] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s1 [0, 64] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s3 -> s2 [0, 64] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s3 [0, 65535] { R7108 += 1, R7029 += 1, R7030 += 1 };
  s3 -> s4 [65, 65] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s5 [65, 65] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s3 -> s6 [65, 65] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s7 [65, 65] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s3 -> s2 [66, 79] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s1 [66, 65535] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s3 -> s8 [80, 80] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s3 -> s2 [81, 65535] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s5 -> s6 [0, 79] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s5 -> s5 [0, 65535] { R7108 += 1, R7030 += 1, R6959 += 1, R6960 += 1 };
  s5 -> s11 [80, 80] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s5 -> s6 [81, 65535] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s6 -> s6 [0, 79] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s6 -> s6 [0, 65535] { R7108 += 1, R7030 += 1 };
  s6 -> s11 [80, 80] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s6 -> s6 [81, 65535] { R7108 += 1, R7030 += 1, R6960 += 1, R6961 += 1 };
  s8 -> s8 [0, 64] { R7108 += 1, R7030 += 1 };
  s8 -> s8 [0, 65535] { R7108 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R7108 += 1, R7030 += 1 };
  s8 -> s11 [65, 65] { R7108 += 1, R7030 += 1 };
  s8 -> s8 [66, 65535] { R7108 += 1, R7030 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7108 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R7108 += 1 };
  s11 -> s11 [0, 65535] { R7108 += 1, R7030 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R7108 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R6998 && R3 = R7108 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R6965 = 0 && R6966 = R6998 && R6967 = 0 && R6968 = R6998 && R6969 = 0 && R6970 = R6998 && R6971 = 0 && R6972 = R6998 && R6973 = 0 && R6974 = R6998 && R6975 = 0 && R6976 = R6998 && R6977 = 0 && R6978 = R6998 && R6979 = 0 && R6980 = R6998 && R6981 = 0 && R6982 = R6998 && R6983 = 0 && R6984 = R6998 && R6985 = 0 && R6986 = R6998 && R6987 = 0 && R6988 = R6998 && R6989 = 0 && R6990 = R6998 && R6991 = 0 && R6992 = R6998 && R6993 = 0 && R6994 = R6998 && R6995 = 0 && R6996 = R6998 && R6997 = 0 && R7001 = 0 && R7002 = 0 && R7021 = 0 && R7022 = 0 && R7025 = 0 && R7026 = 0 && R7029 = 0 && R7030 = 0 && R7031 = 10 && R7032 = R7108 && R7033 = 10 && R7034 = R7108 && R7035 = 10 && R7036 = R7108 && R7037 = 10 && R7038 = R7108 && R7039 = 10 && R7040 = R7108 && R7041 = 10 && R7042 = R7108 && R7043 = 10 && R7044 = R7108 && R7045 = 10 && R7046 = R7108 && R7047 = 10 && R7048 = R7108 && R7049 = 10 && R7050 = R7108 && R7051 = 10 && R7052 = R7108 && R7053 = 10 && R7054 = R7108 && R7055 = 10 && R7056 = R7108 && R7057 = 10 && R7058 = R7108 && R7059 = 10 && R7060 = R7108 && R7061 = 10 && R7062 = R7108 && R7063 = 10 && R7064 = R7108 && R7065 = 10 && R7066 = R7108 && R7067 = 10 && R7068 = R7108 && R7069 = 10 && R7070 = R7108 && R7071 = 10 && R7072 = R7108 && R7073 = 10 && R7074 = R7108 && R7075 = 10 && R7076 = R7108 && R7077 = 10 && R7078 = R7108 && R7079 = 10 && R7080 = R7108 && R7081 = 10 && R7082 = R7108 && R7083 = 10 && R7084 = R7108 && R7085 = 10 && R7086 = R7108 && R7087 = 10 && R7088 = R7108 && R7089 = 10 && R7090 = R7108 && R7091 = 10 && R7092 = R7108 && R7093 = 10 && R7094 = R7108 && R7095 = 10 && R7096 = R7108 && R7097 = 10 && R7098 = R7108 && R7099 = 10 && R7100 = R7108 && R7101 = 10 && R7102 = R7108 && R7103 = 10 && R7104 = R7108 && R7105 = 10 && R7106 = R7108 && R7107 = 10 && R436 + R433 + R6964 + R6961 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R6998 && 9 < R7108 && (R20 = 0 || (R6999 = 0 && R7000 = 0)) && (R20 = 0 || (R7003 = 0 && R7004 = 0)) && (R20 = 0 || (R7005 = 0 && R7006 = 0)) && (R20 = 0 || (R7007 = 0 && R7008 = 0)) && (R20 = 0 || (R7009 = 0 && R7010 = 0)) && (R20 = 0 || (R7011 = 0 && R7012 = 0)) && (R20 = 0 || (R7013 = 0 && R7014 = 0)) && (R20 = 0 || (R7015 = 0 && R7016 = 0)) && (R20 = 0 || (R7017 = 0 && R7018 = 0)) && (R20 = 0 || (R7019 = 0 && R7020 = 0)) && (R20 = 0 || (R7023 = 0 && R7024 = 0)) && (R20 = 0 || (R7027 = 0 && R7028 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R434 + R431 = 0 && R435 + R432 = 0)) && (R4990 + R4987 = 0 || (R4988 + R4985 = 0 && R4989 + R4986 = 0)) && (R6508 + R6505 = 0 || (R6506 + R6503 = 0 && R6507 + R6504 = 0)) && (R6508 + R6505 = 0 || (R6962 + R6959 = 0 && R6963 + R6960 = 0));
// End of Parikh automata intersection problem
