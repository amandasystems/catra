// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R2711, R2712, R2713, R2714, R2715, R2716, R3, R3473, R3474, R3475, R3476, R3477, R3478, R3479, R3480, R3481, R3482, R3483, R3484, R3485, R3486, R3487, R3488, R3489, R3490, R3491, R3492, R3493, R3494, R3495, R3496, R3497, R3498, R3499, R3500, R3501, R3502, R3503, R3504, R3505, R3506, R3507, R3508, R3509, R3510, R3511, R3512, R3513, R3514, R3515, R3516, R3517, R3518, R3519, R3520, R3521, R3522, R3523, R3524, R3525, R3526, R3527, R3528, R3529, R3530, R3531, R3532, R3533, R3534, R3535, R3536, R3537, R3538, R3539, R3540, R3541, R3542, R3543, R3544, R3545, R3546, R3547, R3548, R3549, R3550, R3551, R3552, R3553, R3554, R3555, R3556, R3557, R3558, R3559, R3560, R3561, R3562, R3563, R3564, R3565, R3566, R3567, R3568, R3569, R3570, R3571, R3572, R3573, R3574, R3575, R3576, R3577, R3578, R3579, R3580, R3581, R3582, R3583, R3584, R3585, R3586, R3587, R3588, R3589, R3590, R3591, R3592, R3593, R3594, R3595, R3596, R3597, R3598, R3599, R3600, R3601, R3602, R3603, R3604, R3605, R3606, R3607, R3608, R3609, R3610, R3611, R3612, R3613, R3614, R3615, R3616, R3617, R3618, R3619, R3620, R3621, R3622, R3623, R3624, R3625, R3626, R3627, R3628, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3552 += 1 };
  s0 -> s0 [0, 65535] { R3551 += 1, R3552 += 1 };
  s0 -> s1 [45, 45] { R3552 += 1 };
  s0 -> s2 [46, 46] { R3552 += 1 };
  s0 -> s1 [48, 62] { R3552 += 1 };
  s0 -> s3 [65, 65] { R3552 += 1 };
  s0 -> s1 [66, 65535] { R3552 += 1 };
  s1 -> s1 [0, 43] { R3552 += 1 };
  s1 -> s1 [45, 45] { R3552 += 1 };
  s1 -> s2 [46, 46] { R3552 += 1 };
  s1 -> s1 [48, 62] { R3552 += 1 };
  s1 -> s3 [65, 65] { R3552 += 1 };
  s1 -> s1 [66, 65535] { R3552 += 1 };
  s2 -> s1 [0, 43] { R3552 += 1 };
  s2 -> s1 [45, 45] { R3552 += 1 };
  s2 -> s2 [46, 46] { R3552 += 1 };
  s2 -> s1 [48, 62] { R3552 += 1 };
  s2 -> s3 [65, 65] { R3552 += 1 };
  s2 -> s1 [66, 114] { R3552 += 1 };
  s2 -> s8 [115, 115] { R3552 += 1 };
  s2 -> s1 [116, 65535] { R3552 += 1 };
  s3 -> s3 [0, 43] { R3552 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3552 += 1 };
  s3 -> s4 [46, 46] { R3552 += 1 };
  s3 -> s3 [48, 62] { R3552 += 1 };
  s3 -> s3 [65, 65535] { R3552 += 1 };
  s4 -> s3 [0, 43] { R3552 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3552 += 1 };
  s4 -> s4 [46, 46] { R3552 += 1 };
  s4 -> s3 [48, 62] { R3552 += 1 };
  s4 -> s3 [65, 114] { R3552 += 1 };
  s4 -> s5 [115, 115] { R3552 += 1 };
  s4 -> s3 [116, 65535] { R3552 += 1 };
  s5 -> s3 [0, 43] { R3552 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3552 += 1 };
  s5 -> s4 [46, 46] { R3552 += 1 };
  s5 -> s3 [48, 62] { R3552 += 1 };
  s5 -> s3 [65, 110] { R3552 += 1 };
  s5 -> s6 [111, 111] { R3552 += 1 };
  s5 -> s3 [112, 65535] { R3552 += 1 };
  s6 -> s3 [0, 43] { R3552 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3552 += 1 };
  s6 -> s4 [46, 46] { R3552 += 1 };
  s6 -> s3 [48, 62] { R3552 += 1 };
  s6 -> s3 [65, 98] { R3552 += 1 };
  s6 -> s7 [99, 99] { R3552 += 1 };
  s6 -> s3 [100, 65535] { R3552 += 1 };
  s7 -> s3 [0, 43] { R3552 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3552 += 1 };
  s7 -> s4 [46, 46] { R3552 += 1 };
  s7 -> s3 [48, 62] { R3552 += 1 };
  s7 -> s3 [65, 106] { R3552 += 1 };
  s7 -> s3 [108, 65535] { R3552 += 1 };
  s8 -> s1 [0, 43] { R3552 += 1 };
  s8 -> s1 [45, 45] { R3552 += 1 };
  s8 -> s2 [46, 46] { R3552 += 1 };
  s8 -> s1 [48, 62] { R3552 += 1 };
  s8 -> s3 [65, 65] { R3552 += 1 };
  s8 -> s1 [66, 110] { R3552 += 1 };
  s8 -> s9 [111, 111] { R3552 += 1 };
  s8 -> s1 [112, 65535] { R3552 += 1 };
  s9 -> s1 [0, 43] { R3552 += 1 };
  s9 -> s1 [45, 45] { R3552 += 1 };
  s9 -> s2 [46, 46] { R3552 += 1 };
  s9 -> s1 [48, 62] { R3552 += 1 };
  s9 -> s3 [65, 65] { R3552 += 1 };
  s9 -> s1 [66, 98] { R3552 += 1 };
  s9 -> s10 [99, 99] { R3552 += 1 };
  s9 -> s1 [100, 65535] { R3552 += 1 };
  s10 -> s1 [0, 43] { R3552 += 1 };
  s10 -> s1 [45, 45] { R3552 += 1 };
  s10 -> s2 [46, 46] { R3552 += 1 };
  s10 -> s1 [48, 62] { R3552 += 1 };
  s10 -> s3 [65, 65] { R3552 += 1 };
  s10 -> s1 [66, 106] { R3552 += 1 };
  s10 -> s1 [108, 65535] { R3552 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3553 += 1, R3554 += 1 };
  s0 -> s1 [0, 65535] { R3554 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3554 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3556 += 1 };
  s0 -> s2 [0, 65535] { R3556 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R3555 += 1, R3556 += 1 };
  s0 -> s3 [58, 58] { R3556 += 1 };
  s0 -> s1 [59, 65535] { R3556 += 1 };
  s1 -> s1 [0, 57] { R3556 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3556 += 1 };
  s1 -> s1 [59, 65535] { R3556 += 1 };
  s2 -> s1 [0, 57] { R3556 += 1 };
  s2 -> s2 [0, 65535] { R3556 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3556 += 1 };
  s2 -> s1 [59, 65535] { R3556 += 1 };
  s3 -> s3 [0, 65535] { R3556 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3558 += 1 };
  s0 -> s0 [0, 65535] { R3557 += 1, R3558 += 1 };
  s0 -> s2 [0, 65535] { R3558 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R3558 += 1 };
  s0 -> s1 [66, 65535] { R3558 += 1 };
  s1 -> s1 [0, 64] { R3558 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3558 += 1 };
  s1 -> s1 [66, 65535] { R3558 += 1 };
  s2 -> s1 [0, 64] { R3558 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3558 += 1, R12 += 1 };
  s2 -> s3 [65, 65] { R3558 += 1 };
  s2 -> s1 [66, 65535] { R3558 += 1 };
  s3 -> s3 [0, 65535] { R3558 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3560 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3559 += 1, R3560 += 1 };
  s0 -> s2 [0, 65535] { R3560 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R3560 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R3560 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R3560 += 1 };
  s1 -> s1 [0, 65535] { R3560 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3560 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R3560 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3560 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R3560 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R3560 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3560 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3561 += 1, R3562 += 1 };
  s0 -> s1 [0, 65535] { R3562 += 1, R24 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R3562 += 1, R23 += 1, R24 += 1 };
  s1 -> s4 [0, 65535] { R3562 += 1 };
  s1 -> s1 [0, 65535] { R3562 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3562 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R3562 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3562 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3564 += 1, R3486 += 1 };
  s0 -> s2 [0, 65535] { R3564 += 1, R3485 += 1, R3486 += 1 };
  s0 -> s0 [0, 65535] { R3563 += 1, R3564 += 1 };
  s0 -> s1 [66, 65535] { R3564 += 1, R3486 += 1 };
  s1 -> s1 [0, 64] { R3564 += 1, R3486 += 1 };
  s1 -> s1 [0, 65535] { R3564 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3564 += 1, R3486 += 1 };
  s2 -> s1 [0, 64] { R3564 += 1, R3486 += 1 };
  s2 -> s2 [0, 65535] { R3564 += 1, R3485 += 1, R3486 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3564 += 1, R3486 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3566 += 1, R3488 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R3566 += 1, R3487 += 1, R3488 += 1 };
  s0 -> s0 [0, 65535] { R3565 += 1, R3566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3566 += 1 };
  s1 -> s1 [0, 65535] { R3566 += 1, R3488 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3566 += 1, R3488 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R3566 += 1, R3487 += 1, R3488 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3566 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3568 += 1, R3490 += 1 };
  s0 -> s0 [0, 65535] { R3567 += 1, R3568 += 1 };
  s0 -> s2 [0, 65535] { R3568 += 1, R3489 += 1, R3490 += 1 };
  s0 -> s1 [80, 65535] { R3568 += 1, R3490 += 1 };
  s1 -> s1 [0, 65] { R3568 += 1, R3490 += 1 };
  s1 -> s1 [0, 65535] { R3568 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3568 += 1, R3490 += 1 };
  s2 -> s1 [0, 65] { R3568 += 1, R3490 += 1 };
  s2 -> s2 [0, 65535] { R3568 += 1, R3489 += 1, R3490 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3568 += 1, R3490 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3570 += 1, R3492 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R3570 += 1, R3491 += 1, R3492 += 1 };
  s0 -> s0 [0, 65535] { R3569 += 1, R3570 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3570 += 1, R3492 += 1, R406 += 1 };
  s1 -> s4 [0, 65535] { R3570 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3570 += 1, R3492 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R3570 += 1, R3491 += 1, R3492 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3570 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R3572 += 1, R3494 += 1 };
  s0 -> s2 [0, 65535] { R3572 += 1, R3493 += 1, R3494 += 1 };
  s0 -> s0 [0, 65535] { R3571 += 1, R3572 += 1 };
  s0 -> s3 [0, 65535] { R3572 += 1, R3494 += 1, R408 += 1 };
  s0 -> s1 [84, 65535] { R3572 += 1, R3494 += 1 };
  s1 -> s1 [0, 82] { R3572 += 1, R3494 += 1 };
  s1 -> s1 [0, 65535] { R3572 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [84, 65535] { R3572 += 1, R3494 += 1 };
  s2 -> s1 [0, 82] { R3572 += 1, R3494 += 1 };
  s2 -> s2 [0, 65535] { R3572 += 1, R3493 += 1, R3494 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3572 += 1, R3494 += 1, R408 += 1 };
  s2 -> s1 [84, 65535] { R3572 += 1, R3494 += 1 };
  s3 -> s1 [0, 82] { R3572 += 1, R3494 += 1 };
  s3 -> s4 [0, 65535] { R3572 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3572 += 1, R3494 += 1, R408 += 1 };
  s3 -> s1 [84, 65535] { R3572 += 1, R3494 += 1 };
  s4 -> s4 [0, 65535] { R3572 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3574 += 1, R3496 += 1 };
  s0 -> s2 [0, 65535] { R3574 += 1, R3495 += 1, R3496 += 1 };
  s0 -> s0 [0, 65535] { R3573 += 1, R3574 += 1 };
  s0 -> s3 [0, 65535] { R3574 += 1, R3496 += 1, R410 += 1 };
  s0 -> s1 [81, 65535] { R3574 += 1, R3496 += 1 };
  s1 -> s1 [0, 79] { R3574 += 1, R3496 += 1 };
  s1 -> s1 [0, 65535] { R3574 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R3574 += 1, R3496 += 1 };
  s2 -> s1 [0, 79] { R3574 += 1, R3496 += 1 };
  s2 -> s2 [0, 65535] { R3574 += 1, R3495 += 1, R3496 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3574 += 1, R3496 += 1, R410 += 1 };
  s2 -> s1 [81, 65535] { R3574 += 1, R3496 += 1 };
  s3 -> s1 [0, 79] { R3574 += 1, R3496 += 1 };
  s3 -> s4 [0, 65535] { R3574 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3574 += 1, R3496 += 1, R410 += 1 };
  s3 -> s1 [81, 65535] { R3574 += 1, R3496 += 1 };
  s4 -> s4 [0, 65535] { R3574 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3575 += 1, R3576 += 1 };
  s0 -> s1 [0, 65535] { R3576 += 1, R3498 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R3576 += 1, R3498 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R3576 += 1, R3497 += 1, R3498 += 1 };
  s1 -> s1 [0, 65535] { R3576 += 1, R3498 += 1, R415 += 1, R416 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3576 += 1 };
  s1 -> s6 [0, 65535] { R3576 += 1, R3498 += 1 };
  s2 -> s1 [0, 65535] { R3576 += 1, R3498 += 1, R415 += 1, R416 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3576 += 1 };
  s2 -> s2 [0, 65535] { R3576 += 1, R3498 += 1, R414 += 1, R415 += 1 };
  s3 -> s1 [0, 65535] { R3576 += 1, R3498 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3576 += 1, R3498 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R3576 += 1, R3497 += 1, R3498 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3576 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3576 += 1 };
  s6 -> s6 [0, 65535] { R3576 += 1, R3498 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3577 += 1, R3578 += 1 };
  s0 -> s1 [0, 65535] { R3578 += 1, R3499 += 1, R3500 += 1 };
  s0 -> s2 [0, 65535] { R3578 += 1, R3500 += 1 };
  s1 -> s1 [0, 65535] { R3578 += 1, R3499 += 1, R3500 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3578 += 1, R3500 += 1 };
  s2 -> s3 [0, 65535] { R3578 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3578 += 1, R3500 += 1 };
  s3 -> s3 [0, 65535] { R3578 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R3580 += 1, R3502 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R3579 += 1, R3580 += 1 };
  s0 -> s2 [0, 65535] { R3580 += 1, R3502 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [0, 65535] { R3580 += 1, R3501 += 1, R3502 += 1 };
  s0 -> s1 [81, 65535] { R3580 += 1, R3502 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R3580 += 1, R3502 += 1, R420 += 1 };
  s1 -> s1 [0, 65535] { R3580 += 1, R3502 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3580 += 1 };
  s1 -> s1 [81, 65535] { R3580 += 1, R3502 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R3580 += 1, R3502 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R3580 += 1, R3502 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3580 += 1 };
  s2 -> s1 [81, 65535] { R3580 += 1, R3502 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R3580 += 1, R3502 += 1, R420 += 1 };
  s3 -> s2 [0, 65535] { R3580 += 1, R3502 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R3580 += 1, R3501 += 1, R3502 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R3580 += 1, R3502 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3580 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3581 += 1, R3582 += 1 };
  s0 -> s1 [0, 65535] { R3582 += 1, R3504 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R3582 += 1, R3503 += 1, R3504 += 1 };
  s0 -> s3 [0, 65535] { R3582 += 1, R3504 += 1, R425 += 1, R426 += 1 };
  s1 -> s4 [0, 65535] { R3582 += 1 };
  s1 -> s1 [0, 65535] { R3582 += 1, R3504 += 1, R424 += 1, R425 += 1 };
  s1 -> s3 [0, 65535] { R3582 += 1, R3504 += 1, R425 += 1, R426 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R3582 += 1, R3504 += 1, R424 += 1, R425 += 1 };
  s2 -> s2 [0, 65535] { R3582 += 1, R3503 += 1, R3504 += 1 };
  s2 -> s3 [0, 65535] { R3582 += 1, R3504 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3582 += 1 };
  s3 -> s5 [0, 65535] { R3582 += 1, R3504 += 1 };
  s3 -> s3 [0, 65535] { R3582 += 1, R3504 += 1, R425 += 1, R426 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3582 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R3582 += 1 };
  s5 -> s5 [0, 65535] { R3582 += 1, R3504 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R3584 += 1, R3505 += 1, R3506 += 1 };
  s0 -> s3 [0, 65535] { R3584 += 1, R3506 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R3583 += 1, R3584 += 1 };
  s0 -> s1 [91, 107] { R3584 += 1, R3506 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R3584 += 1, R3506 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s1 -> s1 [0, 65535] { R3584 += 1, R3506 += 1 };
  s1 -> s5 [0, 65535] { R3584 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R3584 += 1, R3505 += 1, R3506 += 1 };
  s2 -> s3 [0, 65535] { R3584 += 1, R3506 += 1, R429 += 1, R430 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R3584 += 1, R3506 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R3584 += 1, R3506 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R3584 += 1, R3506 += 1, R429 += 1, R430 += 1 };
  s3 -> s5 [0, 65535] { R3584 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R3584 += 1, R3506 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R3584 += 1, R3506 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s4 -> s4 [0, 65535] { R3584 += 1, R3506 += 1 };
  s4 -> s5 [0, 65535] { R3584 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R3584 += 1, R3506 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R3584 += 1, R3506 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R3584 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s7 -> s7 [0, 65535] { R3584 += 1, R3506 += 1 };
  s7 -> s5 [0, 65535] { R3584 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3584 += 1, R3506 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R3584 += 1, R3506 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s8 -> s8 [0, 65535] { R3584 += 1, R3506 += 1 };
  s8 -> s5 [0, 65535] { R3584 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R3584 += 1, R3506 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R3584 += 1, R3506 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s9 -> s5 [0, 65535] { R3584 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R3584 += 1, R3506 += 1 };
  s9 -> s1 [91, 107] { R3584 += 1, R3506 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R3584 += 1, R3506 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s10 -> s10 [0, 65535] { R3584 += 1, R3506 += 1 };
  s10 -> s5 [0, 65535] { R3584 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R3584 += 1, R3506 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R3584 += 1, R3506 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s11 -> s11 [0, 65535] { R3584 += 1, R3506 += 1 };
  s11 -> s5 [0, 65535] { R3584 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s1 [91, 110] { R3584 += 1, R3506 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R3584 += 1, R3506 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s12 -> s12 [0, 65535] { R3584 += 1, R3506 += 1 };
  s12 -> s5 [0, 65535] { R3584 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R3584 += 1, R3506 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R3584 += 1, R3506 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s13 -> s5 [0, 65535] { R3584 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R3584 += 1, R3506 += 1 };
  s13 -> s1 [91, 115] { R3584 += 1, R3506 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R3584 += 1, R3506 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R3584 += 1, R3506 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R3584 += 1, R3506 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3585 += 1, R3586 += 1 };
  s0 -> s1 [0, 65535] { R3586 += 1, R3508 += 1, R435 += 1, R436 += 1 };
  s0 -> s2 [0, 65535] { R3586 += 1, R3507 += 1, R3508 += 1 };
  s0 -> s3 [0, 65535] { R3586 += 1, R3508 += 1, R434 += 1, R435 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3586 += 1, R3508 += 1, R435 += 1, R436 += 1 };
  s1 -> s6 [0, 65535] { R3586 += 1, R3508 += 1 };
  s1 -> s5 [0, 65535] { R3586 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3586 += 1, R3508 += 1, R435 += 1, R436 += 1 };
  s2 -> s2 [0, 65535] { R3586 += 1, R3507 += 1, R3508 += 1 };
  s2 -> s3 [0, 65535] { R3586 += 1, R3508 += 1, R434 += 1, R435 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3586 += 1, R3508 += 1, R435 += 1, R436 += 1 };
  s3 -> s5 [0, 65535] { R3586 += 1 };
  s3 -> s3 [0, 65535] { R3586 += 1, R3508 += 1, R434 += 1, R435 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3586 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3586 += 1, R3508 += 1 };
  s6 -> s5 [0, 65535] { R3586 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R3588 += 1, R3510 += 1, R2715 += 1, R2716 += 1 };
  s0 -> s2 [0, 65535] { R3588 += 1, R3510 += 1 };
  s0 -> s3 [0, 65535] { R3588 += 1, R3509 += 1, R3510 += 1 };
  s0 -> s0 [0, 65535] { R3587 += 1, R3588 += 1 };
  s1 -> s1 [0, 65535] { R3588 += 1, R3510 += 1, R2715 += 1, R2716 += 1 };
  s1 -> s2 [0, 65535] { R3588 += 1, R3510 += 1 };
  s1 -> s5 [0, 65535] { R3588 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3588 += 1, R3510 += 1 };
  s2 -> s5 [0, 65535] { R3588 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3588 += 1, R3510 += 1, R2715 += 1, R2716 += 1 };
  s3 -> s2 [0, 65535] { R3588 += 1, R3510 += 1 };
  s3 -> s3 [0, 65535] { R3588 += 1, R3509 += 1, R3510 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3588 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R3589 += 1, R3590 += 1 };
  s0 -> s1 [0, 65535] { R3590 += 1, R3512 += 1 };
  s0 -> s2 [0, 65535] { R3590 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 65535] { R3590 += 1, R3512 += 1 };
  s1 -> s4 [0, 65535] { R3590 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3590 += 1, R3512 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3590 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3590 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R3592 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R3591 += 1, R3592 += 1 };
  s0 -> s2 [0, 65535] { R3592 += 1, R3514 += 1, R3477 += 1, R3478 += 1 };
  s0 -> s3 [0, 65535] { R3592 += 1, R3513 += 1, R3514 += 1 };
  s1 -> s1 [0, 65535] { R3592 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3592 += 1 };
  s2 -> s1 [0, 65535] { R3592 += 1, R3514 += 1 };
  s2 -> s2 [0, 65535] { R3592 += 1, R3514 += 1, R3477 += 1, R3478 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3592 += 1 };
  s3 -> s1 [0, 65535] { R3592 += 1, R3514 += 1 };
  s3 -> s2 [0, 65535] { R3592 += 1, R3514 += 1, R3477 += 1, R3478 += 1 };
  s3 -> s3 [0, 65535] { R3592 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3592 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3594 += 1, R3516 += 1 };
  s0 -> s2 [0, 65535] { R3594 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s0 [0, 65535] { R3593 += 1, R3594 += 1 };
  s1 -> s1 [0, 65535] { R3594 += 1, R3516 += 1 };
  s1 -> s4 [0, 65535] { R3594 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3594 += 1, R3516 += 1 };
  s2 -> s2 [0, 65535] { R3594 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3594 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 79] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s0 -> s0 [0, 65535] { R3595 += 1, R3596 += 1 };
  s0 -> s2 [0, 65535] { R3596 += 1, R3517 += 1, R3518 += 1 };
  s0 -> s3 [0, 65535] { R3596 += 1, R3518 += 1, R3482 += 1, R3483 += 1 };
  s0 -> s4 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s0 -> s5 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s0 -> s1 [81, 65535] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s1 -> s1 [0, 79] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3596 += 1, R3518 += 1 };
  s1 -> s7 [0, 65535] { R3596 += 1 };
  s1 -> s4 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s1 -> s5 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s1 -> s1 [81, 65535] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s2 -> s1 [0, 79] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3596 += 1, R3517 += 1, R3518 += 1 };
  s2 -> s3 [0, 65535] { R3596 += 1, R3518 += 1, R3482 += 1, R3483 += 1 };
  s2 -> s4 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s2 -> s5 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s2 -> s1 [81, 65535] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s3 -> s1 [0, 79] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R3596 += 1 };
  s3 -> s3 [0, 65535] { R3596 += 1, R3518 += 1, R3482 += 1, R3483 += 1 };
  s3 -> s4 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s3 -> s5 [80, 80] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s3 -> s1 [81, 65535] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s4 -> s4 [0, 65535] { R3596 += 1, R3518 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R3596 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3596 += 1, R3518 += 1, R3483 += 1, R3484 += 1 };
  s5 -> s7 [0, 65535] { R3596 += 1 };
  s5 -> s8 [0, 65535] { R3596 += 1, R3518 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3596 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R3596 += 1 };
  s8 -> s8 [0, 65535] { R3596 += 1, R3518 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R3597 += 1, R3598 += 1 };
  s0 -> s1 [0, 65535] { R3598 += 1, R3520 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R3598 += 1, R3519 += 1, R3520 += 1 };
  s1 -> s4 [0, 65535] { R3598 += 1 };
  s1 -> s1 [0, 65535] { R3598 += 1, R3520 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3598 += 1, R3520 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R3598 += 1, R3519 += 1, R3520 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3598 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3600 += 1, R3522 += 1 };
  s0 -> s2 [0, 65535] { R3600 += 1, R3521 += 1, R3522 += 1 };
  s0 -> s0 [0, 65535] { R3599 += 1, R3600 += 1 };
  s0 -> s3 [65, 65] { R3600 += 1, R3522 += 1 };
  s0 -> s4 [65, 65] { R3600 += 1, R3522 += 1 };
  s0 -> s5 [80, 80] { R3600 += 1, R3522 += 1 };
  s0 -> s1 [81, 65535] { R3600 += 1, R3522 += 1 };
  s1 -> s1 [0, 64] { R3600 += 1, R3522 += 1 };
  s1 -> s3 [65, 65] { R3600 += 1, R3522 += 1 };
  s1 -> s4 [65, 65] { R3600 += 1, R3522 += 1 };
  s1 -> s5 [80, 80] { R3600 += 1, R3522 += 1 };
  s1 -> s1 [81, 65535] { R3600 += 1, R3522 += 1 };
  s2 -> s1 [0, 64] { R3600 += 1, R3522 += 1 };
  s2 -> s2 [0, 65535] { R3600 += 1, R3521 += 1, R3522 += 1 };
  s2 -> s3 [65, 65] { R3600 += 1, R3522 += 1 };
  s2 -> s4 [65, 65] { R3600 += 1, R3522 += 1 };
  s2 -> s5 [80, 80] { R3600 += 1, R3522 += 1 };
  s2 -> s1 [81, 65535] { R3600 += 1, R3522 += 1 };
  s4 -> s4 [0, 65] { R3600 += 1, R3522 += 1 };
  s4 -> s8 [80, 80] { R3600 += 1, R3522 += 1 };
  s4 -> s4 [81, 65535] { R3600 += 1, R3522 += 1 };
  s5 -> s5 [0, 64] { R3600 += 1, R3522 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3600 += 1 };
  s5 -> s7 [65, 65] { R3600 += 1, R3522 += 1 };
  s5 -> s8 [65, 65] { R3600 += 1, R3522 += 1 };
  s5 -> s5 [80, 65535] { R3600 += 1, R3522 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3600 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3600 += 1, R3522 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3600 += 1 };
  s8 -> s8 [80, 65535] { R3600 += 1, R3522 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3602 += 1, R3524 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R3602 += 1, R3523 += 1, R3524 += 1 };
  s0 -> s0 [0, 65535] { R3601 += 1, R3602 += 1 };
  s0 -> s3 [65, 65] { R3602 += 1, R3524 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R3602 += 1, R3524 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R3602 += 1, R3524 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R3602 += 1, R3524 += 1, R405 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3602 += 1 };
  s1 -> s3 [65, 65] { R3602 += 1, R3524 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R3602 += 1, R3524 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R3602 += 1, R3524 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R3602 += 1, R3524 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R3602 += 1, R3523 += 1, R3524 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3602 += 1, R3524 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R3602 += 1, R3524 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R3602 += 1, R3524 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R3602 += 1 };
  s3 -> s3 [0, 65535] { R3602 += 1, R3524 += 1, R405 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3602 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3602 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3604 += 1, R3526 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R3604 += 1, R3525 += 1, R3526 += 1 };
  s0 -> s0 [0, 65535] { R3603 += 1, R3604 += 1 };
  s0 -> s3 [65, 65] { R3604 += 1, R3526 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R3604 += 1, R3526 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R3604 += 1, R3526 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R3604 += 1, R3526 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R3604 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3604 += 1, R3526 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R3604 += 1, R3526 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R3604 += 1, R3526 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R3604 += 1, R3526 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R3604 += 1, R3525 += 1, R3526 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3604 += 1, R3526 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R3604 += 1, R3526 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R3604 += 1, R3526 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R3604 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3604 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3604 += 1, R3526 += 1, R407 += 1 };
  s5 -> s5 [0, 65535] { R3604 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3606 += 1, R3528 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R3606 += 1, R3527 += 1, R3528 += 1 };
  s0 -> s0 [0, 65535] { R3605 += 1, R3606 += 1 };
  s0 -> s3 [65, 65] { R3606 += 1, R3528 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R3606 += 1, R3528 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R3606 += 1, R3528 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R3606 += 1, R3528 += 1, R409 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3606 += 1 };
  s1 -> s3 [65, 65] { R3606 += 1, R3528 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R3606 += 1, R3528 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R3606 += 1, R3528 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R3606 += 1, R3528 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3606 += 1, R3527 += 1, R3528 += 1 };
  s2 -> s3 [65, 65] { R3606 += 1, R3528 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R3606 += 1, R3528 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R3606 += 1, R3528 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3606 += 1 };
  s3 -> s3 [0, 65535] { R3606 += 1, R3528 += 1, R409 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3606 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3606 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R3607 += 1, R3608 += 1 };
  s0 -> s2 [0, 65535] { R3608 += 1, R3529 += 1, R3530 += 1 };
  s0 -> s3 [65, 65] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3608 += 1 };
  s1 -> s3 [65, 65] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R3608 += 1, R3529 += 1, R3530 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535] { R3608 += 1 };
  s3 -> s3 [0, 65535] { R3608 += 1, R3530 += 1, R411 += 1, R412 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3608 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3608 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3610 += 1, R3532 += 1 };
  s0 -> s0 [0, 65535] { R3609 += 1, R3610 += 1 };
  s0 -> s2 [0, 65535] { R3610 += 1, R3531 += 1, R3532 += 1 };
  s0 -> s3 [65, 65] { R3610 += 1, R3532 += 1 };
  s0 -> s4 [65, 65] { R3610 += 1, R3532 += 1 };
  s0 -> s1 [66, 65535] { R3610 += 1, R3532 += 1 };
  s1 -> s1 [0, 64] { R3610 += 1, R3532 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3610 += 1 };
  s1 -> s3 [65, 65] { R3610 += 1, R3532 += 1 };
  s1 -> s4 [65, 65] { R3610 += 1, R3532 += 1 };
  s1 -> s1 [66, 65535] { R3610 += 1, R3532 += 1 };
  s2 -> s1 [0, 64] { R3610 += 1, R3532 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3610 += 1, R3531 += 1, R3532 += 1 };
  s2 -> s3 [65, 65] { R3610 += 1, R3532 += 1 };
  s2 -> s4 [65, 65] { R3610 += 1, R3532 += 1 };
  s2 -> s1 [66, 65535] { R3610 += 1, R3532 += 1 };
  s3 -> s3 [0, 65535] { R3610 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3610 += 1 };
  s4 -> s4 [0, 65535] { R3610 += 1, R3532 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3610 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R3612 += 1, R3533 += 1, R3534 += 1 };
  s0 -> s0 [0, 65535] { R3611 += 1, R3612 += 1 };
  s0 -> s3 [65, 65] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R3612 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R3612 += 1, R3533 += 1, R3534 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s3 -> s6 [0, 65535] { R3612 += 1 };
  s3 -> s3 [0, 65535] { R3612 += 1, R3534 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3612 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3612 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R3614 += 1, R3535 += 1, R3536 += 1 };
  s0 -> s0 [0, 65535] { R3613 += 1, R3614 += 1 };
  s0 -> s3 [65, 65] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R3614 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R3614 += 1, R3535 += 1, R3536 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R3614 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3614 += 1, R3536 += 1, R421 += 1, R422 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3614 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3614 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R3615 += 1, R3616 += 1 };
  s0 -> s2 [0, 65535] { R3616 += 1, R3537 += 1, R3538 += 1 };
  s0 -> s3 [65, 65] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R3616 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3616 += 1, R3537 += 1, R3538 += 1 };
  s2 -> s3 [65, 65] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3616 += 1 };
  s4 -> s5 [0, 65535] { R3616 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3616 += 1, R3538 += 1, R427 += 1, R428 += 1 };
  s5 -> s5 [0, 65535] { R3616 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s0 -> s2 [0, 65535] { R3618 += 1, R3539 += 1, R3540 += 1 };
  s0 -> s0 [0, 65535] { R3617 += 1, R3618 += 1 };
  s0 -> s3 [65, 65] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s0 -> s4 [65, 65] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s0 -> s1 [66, 65535] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 64] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 65535] { R3618 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s1 -> s4 [65, 65] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [66, 65535] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [0, 64] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s2 -> s2 [0, 65535] { R3618 += 1, R3539 += 1, R3540 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [65, 65] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [66, 65535] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3618 += 1, R3540 += 1, R431 += 1, R432 += 1 };
  s3 -> s6 [0, 65535] { R3618 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3618 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3618 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s2 [0, 64] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s3 [0, 65535] { R3620 += 1, R3541 += 1, R3542 += 1 };
  s0 -> s0 [0, 65535] { R3619 += 1, R3620 += 1 };
  s0 -> s4 [65, 65] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s5 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s6 [65, 65] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s7 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s1 [66, 65535] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s2 [66, 65535] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s1 [0, 64] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s1 [0, 65535] { R3620 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s7 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s1 [66, 65535] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s1 [0, 64] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [0, 64] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s2 -> s4 [65, 65] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s2 -> s5 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s6 [65, 65] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s2 -> s7 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s1 [66, 65535] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [66, 65535] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s1 [0, 64] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s2 [0, 64] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s3 [0, 65535] { R3620 += 1, R3541 += 1, R3542 += 1 };
  s3 -> s4 [65, 65] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s5 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s6 [65, 65] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s7 [65, 65] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s1 [66, 65535] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s2 [66, 65535] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s5 -> s9 [0, 65535] { R3620 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s6 -> s5 [0, 65535] { R3620 += 1, R3542 += 1, R2712 += 1, R2713 += 1 };
  s6 -> s6 [0, 65535] { R3620 += 1, R3542 += 1, R2711 += 1, R2712 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3620 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3620 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3622 += 1, R3544 += 1 };
  s0 -> s2 [0, 65535] { R3622 += 1, R3543 += 1, R3544 += 1 };
  s0 -> s0 [0, 65535] { R3621 += 1, R3622 += 1 };
  s0 -> s3 [65, 65] { R3622 += 1, R3544 += 1 };
  s0 -> s4 [65, 65] { R3622 += 1, R3544 += 1 };
  s0 -> s1 [66, 65535] { R3622 += 1, R3544 += 1 };
  s1 -> s1 [0, 64] { R3622 += 1, R3544 += 1 };
  s1 -> s1 [0, 65535] { R3622 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3622 += 1, R3544 += 1 };
  s1 -> s4 [65, 65] { R3622 += 1, R3544 += 1 };
  s1 -> s1 [66, 65535] { R3622 += 1, R3544 += 1 };
  s2 -> s1 [0, 64] { R3622 += 1, R3544 += 1 };
  s2 -> s2 [0, 65535] { R3622 += 1, R3543 += 1, R3544 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3622 += 1, R3544 += 1 };
  s2 -> s4 [65, 65] { R3622 += 1, R3544 += 1 };
  s2 -> s1 [66, 65535] { R3622 += 1, R3544 += 1 };
  s3 -> s3 [0, 65535] { R3622 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3622 += 1, R3544 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3622 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3622 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s2 [0, 64] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s3 [0, 65535] { R3624 += 1, R3545 += 1, R3546 += 1 };
  s0 -> s0 [0, 65535] { R3623 += 1, R3624 += 1 };
  s0 -> s4 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s5 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s6 [65, 65] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s7 [65, 65] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s1 [66, 65535] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s2 [66, 65535] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s1 [0, 64] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s2 [0, 64] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s4 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s5 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s6 [65, 65] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s7 [65, 65] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s1 [66, 65535] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s2 [66, 65535] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s2 [0, 64] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3624 += 1 };
  s2 -> s4 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s5 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s2 [66, 65535] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s1 [0, 64] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s2 [0, 64] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s3 [0, 65535] { R3624 += 1, R3545 += 1, R3546 += 1 };
  s3 -> s4 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s5 [65, 65] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s6 [65, 65] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s7 [65, 65] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s1 [66, 65535] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s2 [66, 65535] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R3624 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s5 -> s9 [0, 65535] { R3624 += 1 };
  s6 -> s5 [0, 65535] { R3624 += 1, R3546 += 1, R3474 += 1, R3475 += 1 };
  s6 -> s6 [0, 65535] { R3624 += 1, R3546 += 1, R3473 += 1, R3474 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3624 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3626 += 1, R3548 += 1 };
  s0 -> s0 [0, 65535] { R3625 += 1, R3626 += 1 };
  s0 -> s2 [0, 65535] { R3626 += 1, R3547 += 1, R3548 += 1 };
  s0 -> s3 [65, 65] { R3626 += 1, R3548 += 1 };
  s0 -> s4 [65, 65] { R3626 += 1, R3548 += 1 };
  s0 -> s1 [66, 65535] { R3626 += 1, R3548 += 1 };
  s1 -> s1 [0, 64] { R3626 += 1, R3548 += 1 };
  s1 -> s1 [0, 65535] { R3626 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3626 += 1, R3548 += 1 };
  s1 -> s4 [65, 65] { R3626 += 1, R3548 += 1 };
  s1 -> s1 [66, 65535] { R3626 += 1, R3548 += 1 };
  s2 -> s1 [0, 64] { R3626 += 1, R3548 += 1 };
  s2 -> s2 [0, 65535] { R3626 += 1, R3547 += 1, R3548 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3626 += 1, R3548 += 1 };
  s2 -> s4 [65, 65] { R3626 += 1, R3548 += 1 };
  s2 -> s1 [66, 65535] { R3626 += 1, R3548 += 1 };
  s3 -> s3 [0, 65535] { R3626 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3626 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3626 += 1, R3548 += 1 };
  s5 -> s5 [0, 65535] { R3626 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s0 -> s0 [0, 65535] { R3627 += 1, R3628 += 1 };
  s0 -> s2 [0, 65535] { R3628 += 1, R3549 += 1, R3550 += 1 };
  s0 -> s3 [65, 65] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s0 -> s4 [65, 65] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s0 -> s1 [66, 65535] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s1 -> s1 [0, 64] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s1 -> s1 [0, 65535] { R3628 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s1 -> s4 [65, 65] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s1 -> s1 [66, 65535] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s2 -> s1 [0, 64] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s2 -> s2 [0, 65535] { R3628 += 1, R3549 += 1, R3550 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s2 -> s4 [65, 65] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s2 -> s1 [66, 65535] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s3 -> s3 [0, 65535] { R3628 += 1, R3550 += 1, R3479 += 1, R3480 += 1 };
  s3 -> s6 [0, 65535] { R3628 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3628 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3628 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R3518 && R3 = R3628 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R3485 = 0 && R3486 = R3518 && R3487 = 0 && R3488 = R3518 && R3489 = 0 && R3490 = R3518 && R3491 = 0 && R3492 = R3518 && R3493 = 0 && R3494 = R3518 && R3495 = 0 && R3496 = R3518 && R3497 = 0 && R3498 = R3518 && R3499 = 0 && R3500 = R3518 && R3501 = 0 && R3502 = R3518 && R3503 = 0 && R3504 = R3518 && R3505 = 0 && R3506 = R3518 && R3507 = 0 && R3508 = R3518 && R3509 = 0 && R3510 = R3518 && R3511 = 0 && R3512 = R3518 && R3513 = 0 && R3514 = R3518 && R3515 = 0 && R3516 = R3518 && R3517 = 0 && R3521 = 0 && R3522 = 0 && R3541 = 0 && R3542 = 0 && R3545 = 0 && R3546 = 0 && R3551 = 10 && R3552 = R3628 && R3553 = 10 && R3554 = R3628 && R3555 = 10 && R3556 = R3628 && R3557 = 10 && R3558 = R3628 && R3559 = 10 && R3560 = R3628 && R3561 = 10 && R3562 = R3628 && R3563 = 10 && R3564 = R3628 && R3565 = 10 && R3566 = R3628 && R3567 = 10 && R3568 = R3628 && R3569 = 10 && R3570 = R3628 && R3571 = 10 && R3572 = R3628 && R3573 = 10 && R3574 = R3628 && R3575 = 10 && R3576 = R3628 && R3577 = 10 && R3578 = R3628 && R3579 = 10 && R3580 = R3628 && R3581 = 10 && R3582 = R3628 && R3583 = 10 && R3584 = R3628 && R3585 = 10 && R3586 = R3628 && R3587 = 10 && R3588 = R3628 && R3589 = 10 && R3590 = R3628 && R3591 = 10 && R3592 = R3628 && R3593 = 10 && R3594 = R3628 && R3595 = 10 && R3596 = R3628 && R3597 = 10 && R3598 = R3628 && R3599 = 10 && R3600 = R3628 && R3601 = 10 && R3602 = R3628 && R3603 = 10 && R3604 = R3628 && R3605 = 10 && R3606 = R3628 && R3607 = 10 && R3608 = R3628 && R3609 = 10 && R3610 = R3628 && R3611 = 10 && R3612 = R3628 && R3613 = 10 && R3614 = R3628 && R3615 = 10 && R3616 = R3628 && R3617 = 10 && R3618 = R3628 && R3619 = 10 && R3620 = R3628 && R3621 = 10 && R3622 = R3628 && R3623 = 10 && R3624 = R3628 && R3625 = 10 && R3626 = R3628 && R3627 = 10 && R436 + R433 + R3484 + R3481 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R3518 && 9 < R3628 && (R20 = 0 || (R3519 = 0 && R3520 = 0)) && (R20 = 0 || (R3523 = 0 && R3524 = 0)) && (R20 = 0 || (R3525 = 0 && R3526 = 0)) && (R20 = 0 || (R3527 = 0 && R3528 = 0)) && (R20 = 0 || (R3529 = 0 && R3530 = 0)) && (R20 = 0 || (R3531 = 0 && R3532 = 0)) && (R20 = 0 || (R3533 = 0 && R3534 = 0)) && (R20 = 0 || (R3535 = 0 && R3536 = 0)) && (R20 = 0 || (R3537 = 0 && R3538 = 0)) && (R20 = 0 || (R3539 = 0 && R3540 = 0)) && (R20 = 0 || (R3543 = 0 && R3544 = 0)) && (R20 = 0 || (R3547 = 0 && R3548 = 0)) && (R20 = 0 || (R3549 = 0 && R3550 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R434 + R431 = 0 && R435 + R432 = 0)) && (R2716 + R2713 = 0 || (R2714 + R2711 = 0 && R2715 + R2712 = 0)) && (R3478 + R3475 = 0 || (R3476 + R3473 = 0 && R3477 + R3474 = 0)) && (R3478 + R3475 = 0 || (R3482 + R3479 = 0 && R3483 + R3480 = 0));
// End of Parikh automata intersection problem
