// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R2711, R2712, R2713, R2714, R2715, R2716, R3, R3473, R3474, R3475, R3476, R3477, R3478, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R3795, R3796, R3797, R3798, R3799, R3800, R3801, R3802, R3803, R3804, R3805, R3806, R3807, R3808, R3809, R3810, R3811, R3812, R3813, R3814, R3815, R3816, R3817, R3818, R3819, R3820, R3821, R3822, R3823, R3824, R3825, R3826, R3827, R3828, R3829, R3830, R3831, R3832, R3833, R3834, R3835, R3836, R3837, R3838, R3839, R3840, R3841, R3842, R3843, R3844, R3845, R3846, R3847, R3848, R3849, R3850, R3851, R3852, R3853, R3854, R3855, R3856, R3857, R3858, R3859, R3860, R3861, R3862, R3863, R3864, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R3900, R3901, R3902, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3852 += 1 };
  s0 -> s0 [0, 65535] { R3851 += 1, R3852 += 1 };
  s0 -> s1 [45, 45] { R3852 += 1 };
  s0 -> s2 [46, 46] { R3852 += 1 };
  s0 -> s1 [48, 62] { R3852 += 1 };
  s0 -> s3 [65, 65] { R3852 += 1 };
  s0 -> s1 [66, 65535] { R3852 += 1 };
  s1 -> s1 [0, 43] { R3852 += 1 };
  s1 -> s1 [45, 45] { R3852 += 1 };
  s1 -> s2 [46, 46] { R3852 += 1 };
  s1 -> s1 [48, 62] { R3852 += 1 };
  s1 -> s3 [65, 65] { R3852 += 1 };
  s1 -> s1 [66, 65535] { R3852 += 1 };
  s2 -> s1 [0, 43] { R3852 += 1 };
  s2 -> s1 [45, 45] { R3852 += 1 };
  s2 -> s2 [46, 46] { R3852 += 1 };
  s2 -> s1 [48, 62] { R3852 += 1 };
  s2 -> s3 [65, 65] { R3852 += 1 };
  s2 -> s1 [66, 114] { R3852 += 1 };
  s2 -> s8 [115, 115] { R3852 += 1 };
  s2 -> s1 [116, 65535] { R3852 += 1 };
  s3 -> s3 [0, 43] { R3852 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3852 += 1 };
  s3 -> s4 [46, 46] { R3852 += 1 };
  s3 -> s3 [48, 62] { R3852 += 1 };
  s3 -> s3 [65, 65535] { R3852 += 1 };
  s4 -> s3 [0, 43] { R3852 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3852 += 1 };
  s4 -> s4 [46, 46] { R3852 += 1 };
  s4 -> s3 [48, 62] { R3852 += 1 };
  s4 -> s3 [65, 114] { R3852 += 1 };
  s4 -> s5 [115, 115] { R3852 += 1 };
  s4 -> s3 [116, 65535] { R3852 += 1 };
  s5 -> s3 [0, 43] { R3852 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3852 += 1 };
  s5 -> s4 [46, 46] { R3852 += 1 };
  s5 -> s3 [48, 62] { R3852 += 1 };
  s5 -> s3 [65, 110] { R3852 += 1 };
  s5 -> s6 [111, 111] { R3852 += 1 };
  s5 -> s3 [112, 65535] { R3852 += 1 };
  s6 -> s3 [0, 43] { R3852 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3852 += 1 };
  s6 -> s4 [46, 46] { R3852 += 1 };
  s6 -> s3 [48, 62] { R3852 += 1 };
  s6 -> s3 [65, 98] { R3852 += 1 };
  s6 -> s7 [99, 99] { R3852 += 1 };
  s6 -> s3 [100, 65535] { R3852 += 1 };
  s7 -> s3 [0, 43] { R3852 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3852 += 1 };
  s7 -> s4 [46, 46] { R3852 += 1 };
  s7 -> s3 [48, 62] { R3852 += 1 };
  s7 -> s3 [65, 106] { R3852 += 1 };
  s7 -> s3 [108, 65535] { R3852 += 1 };
  s8 -> s1 [0, 43] { R3852 += 1 };
  s8 -> s1 [45, 45] { R3852 += 1 };
  s8 -> s2 [46, 46] { R3852 += 1 };
  s8 -> s1 [48, 62] { R3852 += 1 };
  s8 -> s3 [65, 65] { R3852 += 1 };
  s8 -> s1 [66, 110] { R3852 += 1 };
  s8 -> s9 [111, 111] { R3852 += 1 };
  s8 -> s1 [112, 65535] { R3852 += 1 };
  s9 -> s1 [0, 43] { R3852 += 1 };
  s9 -> s1 [45, 45] { R3852 += 1 };
  s9 -> s2 [46, 46] { R3852 += 1 };
  s9 -> s1 [48, 62] { R3852 += 1 };
  s9 -> s3 [65, 65] { R3852 += 1 };
  s9 -> s1 [66, 98] { R3852 += 1 };
  s9 -> s10 [99, 99] { R3852 += 1 };
  s9 -> s1 [100, 65535] { R3852 += 1 };
  s10 -> s1 [0, 43] { R3852 += 1 };
  s10 -> s1 [45, 45] { R3852 += 1 };
  s10 -> s2 [46, 46] { R3852 += 1 };
  s10 -> s1 [48, 62] { R3852 += 1 };
  s10 -> s3 [65, 65] { R3852 += 1 };
  s10 -> s1 [66, 106] { R3852 += 1 };
  s10 -> s1 [108, 65535] { R3852 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3854 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R3853 += 1, R3854 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3854 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3856 += 1 };
  s0 -> s2 [0, 65535] { R3856 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R3855 += 1, R3856 += 1 };
  s0 -> s3 [58, 58] { R3856 += 1 };
  s0 -> s1 [59, 65535] { R3856 += 1 };
  s1 -> s1 [0, 57] { R3856 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3856 += 1 };
  s1 -> s1 [59, 65535] { R3856 += 1 };
  s2 -> s1 [0, 57] { R3856 += 1 };
  s2 -> s2 [0, 65535] { R3856 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3856 += 1 };
  s2 -> s1 [59, 65535] { R3856 += 1 };
  s3 -> s3 [0, 65535] { R3856 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3858 += 1 };
  s0 -> s2 [0, 65535] { R3858 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R3857 += 1, R3858 += 1 };
  s0 -> s3 [65, 65] { R3858 += 1 };
  s0 -> s1 [66, 65535] { R3858 += 1 };
  s1 -> s1 [0, 64] { R3858 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3858 += 1 };
  s1 -> s1 [66, 65535] { R3858 += 1 };
  s2 -> s1 [0, 64] { R3858 += 1 };
  s2 -> s2 [0, 65535] { R3858 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3858 += 1 };
  s2 -> s1 [66, 65535] { R3858 += 1 };
  s3 -> s3 [0, 65535] { R3858 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3860 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3859 += 1, R3860 += 1 };
  s0 -> s2 [0, 65535] { R3860 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R3860 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R3860 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R3860 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3860 += 1 };
  s2 -> s1 [0, 90] { R3860 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3860 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R3860 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R3860 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R3860 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3860 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3862 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R3861 += 1, R3862 += 1 };
  s0 -> s2 [0, 65535] { R3862 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R3862 += 1, R23 += 1, R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3862 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3862 += 1 };
  s2 -> s2 [0, 65535] { R3862 += 1, R24 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3862 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3864 += 1, R3786 += 1 };
  s0 -> s0 [0, 65535] { R3863 += 1, R3864 += 1 };
  s0 -> s2 [0, 65535] { R3864 += 1, R3785 += 1, R3786 += 1 };
  s0 -> s1 [66, 65535] { R3864 += 1, R3786 += 1 };
  s1 -> s1 [0, 64] { R3864 += 1, R3786 += 1 };
  s1 -> s1 [0, 65535] { R3864 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3864 += 1, R3786 += 1 };
  s2 -> s1 [0, 64] { R3864 += 1, R3786 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3864 += 1, R3785 += 1, R3786 += 1 };
  s2 -> s1 [66, 65535] { R3864 += 1, R3786 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3866 += 1, R3788 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R3866 += 1, R3787 += 1, R3788 += 1 };
  s0 -> s0 [0, 65535] { R3865 += 1, R3866 += 1 };
  s1 -> s1 [0, 65535] { R3866 += 1, R3788 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R3866 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3866 += 1, R3788 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R3866 += 1, R3787 += 1, R3788 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3866 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3868 += 1, R3790 += 1 };
  s0 -> s0 [0, 65535] { R3867 += 1, R3868 += 1 };
  s0 -> s2 [0, 65535] { R3868 += 1, R3789 += 1, R3790 += 1 };
  s0 -> s1 [80, 65535] { R3868 += 1, R3790 += 1 };
  s1 -> s1 [0, 65] { R3868 += 1, R3790 += 1 };
  s1 -> s1 [0, 65535] { R3868 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3868 += 1, R3790 += 1 };
  s2 -> s1 [0, 65] { R3868 += 1, R3790 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3868 += 1, R3789 += 1, R3790 += 1 };
  s2 -> s1 [80, 65535] { R3868 += 1, R3790 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3869 += 1, R3870 += 1 };
  s0 -> s1 [0, 65535] { R3870 += 1, R3792 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R3870 += 1, R3791 += 1, R3792 += 1 };
  s1 -> s4 [0, 65535] { R3870 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3870 += 1, R3792 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3870 += 1, R3792 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R3870 += 1, R3791 += 1, R3792 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3870 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R3872 += 1, R3794 += 1 };
  s0 -> s0 [0, 65535] { R3871 += 1, R3872 += 1 };
  s0 -> s2 [0, 65535] { R3872 += 1, R3793 += 1, R3794 += 1 };
  s0 -> s3 [0, 65535] { R3872 += 1, R3794 += 1, R408 += 1 };
  s0 -> s1 [84, 65535] { R3872 += 1, R3794 += 1 };
  s1 -> s1 [0, 82] { R3872 += 1, R3794 += 1 };
  s1 -> s1 [0, 65535] { R3872 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [84, 65535] { R3872 += 1, R3794 += 1 };
  s2 -> s1 [0, 82] { R3872 += 1, R3794 += 1 };
  s2 -> s2 [0, 65535] { R3872 += 1, R3793 += 1, R3794 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3872 += 1, R3794 += 1, R408 += 1 };
  s2 -> s1 [84, 65535] { R3872 += 1, R3794 += 1 };
  s3 -> s1 [0, 82] { R3872 += 1, R3794 += 1 };
  s3 -> s4 [0, 65535] { R3872 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3872 += 1, R3794 += 1, R408 += 1 };
  s3 -> s1 [84, 65535] { R3872 += 1, R3794 += 1 };
  s4 -> s4 [0, 65535] { R3872 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3874 += 1, R3796 += 1 };
  s0 -> s2 [0, 65535] { R3874 += 1, R3796 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R3874 += 1, R3795 += 1, R3796 += 1 };
  s0 -> s0 [0, 65535] { R3873 += 1, R3874 += 1 };
  s0 -> s1 [81, 65535] { R3874 += 1, R3796 += 1 };
  s1 -> s1 [0, 79] { R3874 += 1, R3796 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3874 += 1 };
  s1 -> s1 [81, 65535] { R3874 += 1, R3796 += 1 };
  s2 -> s1 [0, 79] { R3874 += 1, R3796 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3874 += 1, R3796 += 1, R410 += 1 };
  s2 -> s5 [0, 65535] { R3874 += 1 };
  s2 -> s1 [81, 65535] { R3874 += 1, R3796 += 1 };
  s3 -> s1 [0, 79] { R3874 += 1, R3796 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3874 += 1, R3796 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R3874 += 1, R3795 += 1, R3796 += 1 };
  s3 -> s1 [81, 65535] { R3874 += 1, R3796 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3874 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3875 += 1, R3876 += 1 };
  s0 -> s1 [0, 65535] { R3876 += 1, R3798 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R3876 += 1, R3797 += 1, R3798 += 1 };
  s0 -> s3 [0, 65535] { R3876 += 1, R3798 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [0, 65535] { R3876 += 1 };
  s1 -> s6 [0, 65535] { R3876 += 1, R3798 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3876 += 1, R3798 += 1, R415 += 1, R416 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3876 += 1, R3798 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R3876 += 1, R3797 += 1, R3798 += 1 };
  s2 -> s3 [0, 65535] { R3876 += 1, R3798 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535] { R3876 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R3876 += 1, R3798 += 1, R415 += 1, R416 += 1 };
  s3 -> s3 [0, 65535] { R3876 += 1, R3798 += 1, R414 += 1, R415 += 1 };
  s4 -> s4 [0, 65535] { R3876 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3876 += 1 };
  s6 -> s6 [0, 65535] { R3876 += 1, R3798 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3878 += 1, R3800 += 1 };
  s0 -> s0 [0, 65535] { R3877 += 1, R3878 += 1 };
  s0 -> s2 [0, 65535] { R3878 += 1, R3799 += 1, R3800 += 1 };
  s1 -> s1 [0, 65535] { R3878 += 1, R3800 += 1 };
  s1 -> s4 [0, 65535] { R3878 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3878 += 1, R3800 += 1 };
  s2 -> s2 [0, 65535] { R3878 += 1, R3799 += 1, R3800 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3878 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R3880 += 1, R3802 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R3880 += 1, R3801 += 1, R3802 += 1 };
  s0 -> s3 [0, 65535] { R3880 += 1, R3802 += 1, R419 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R3879 += 1, R3880 += 1 };
  s0 -> s1 [81, 65535] { R3880 += 1, R3802 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R3880 += 1, R3802 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3880 += 1, R3802 += 1 };
  s1 -> s5 [0, 65535] { R3880 += 1 };
  s1 -> s1 [81, 65535] { R3880 += 1, R3802 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R3880 += 1, R3802 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R3880 += 1, R3801 += 1, R3802 += 1 };
  s2 -> s3 [0, 65535] { R3880 += 1, R3802 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3880 += 1, R3802 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R3880 += 1, R3802 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R3880 += 1, R3802 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3880 += 1 };
  s3 -> s1 [81, 65535] { R3880 += 1, R3802 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3880 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3881 += 1, R3882 += 1 };
  s0 -> s1 [0, 65535] { R3882 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [0, 65535] { R3882 += 1, R3804 += 1, R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R3882 += 1, R3804 += 1, R425 += 1, R426 += 1 };
  s1 -> s1 [0, 65535] { R3882 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [0, 65535] { R3882 += 1, R3804 += 1, R424 += 1, R425 += 1 };
  s1 -> s3 [0, 65535] { R3882 += 1, R3804 += 1, R425 += 1, R426 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R3882 += 1 };
  s2 -> s2 [0, 65535] { R3882 += 1, R3804 += 1, R424 += 1, R425 += 1 };
  s2 -> s3 [0, 65535] { R3882 += 1, R3804 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R3882 += 1, R3804 += 1 };
  s3 -> s5 [0, 65535] { R3882 += 1 };
  s3 -> s3 [0, 65535] { R3882 += 1, R3804 += 1, R425 += 1, R426 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3882 += 1, R3804 += 1 };
  s4 -> s5 [0, 65535] { R3882 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3882 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R3884 += 1, R3805 += 1, R3806 += 1 };
  s0 -> s3 [0, 65535] { R3884 += 1, R3806 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R3883 += 1, R3884 += 1 };
  s0 -> s1 [91, 107] { R3884 += 1, R3806 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R3884 += 1, R3806 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R3884 += 1 };
  s1 -> s1 [0, 65535] { R3884 += 1, R3806 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R3884 += 1, R3805 += 1, R3806 += 1 };
  s2 -> s3 [0, 65535] { R3884 += 1, R3806 += 1, R429 += 1, R430 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R3884 += 1, R3806 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R3884 += 1, R3806 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s3 -> s5 [0, 65535] { R3884 += 1 };
  s3 -> s3 [0, 65535] { R3884 += 1, R3806 += 1, R429 += 1, R430 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R3884 += 1, R3806 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R3884 += 1, R3806 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R3884 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3884 += 1, R3806 += 1 };
  s4 -> s1 [91, 110] { R3884 += 1, R3806 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R3884 += 1, R3806 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R3884 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R3884 += 1 };
  s7 -> s7 [0, 65535] { R3884 += 1, R3806 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R3884 += 1, R3806 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R3884 += 1, R3806 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R3884 += 1 };
  s8 -> s8 [0, 65535] { R3884 += 1, R3806 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R3884 += 1, R3806 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R3884 += 1, R3806 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s9 -> s9 [0, 65535] { R3884 += 1, R3806 += 1 };
  s9 -> s5 [0, 65535] { R3884 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R3884 += 1, R3806 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R3884 += 1, R3806 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s10 -> s5 [0, 65535] { R3884 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R3884 += 1, R3806 += 1 };
  s10 -> s1 [91, 103] { R3884 += 1, R3806 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R3884 += 1, R3806 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s11 -> s5 [0, 65535] { R3884 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R3884 += 1, R3806 += 1 };
  s11 -> s1 [91, 110] { R3884 += 1, R3806 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R3884 += 1, R3806 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R3884 += 1 };
  s12 -> s12 [0, 65535] { R3884 += 1, R3806 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R3884 += 1, R3806 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R3884 += 1, R3806 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s13 -> s5 [0, 65535] { R3884 += 1 };
  s13 -> s13 [0, 65535] { R3884 += 1, R3806 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R3884 += 1, R3806 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R3884 += 1, R3806 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R3884 += 1, R3806 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R3884 += 1, R3806 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3885 += 1, R3886 += 1 };
  s0 -> s1 [0, 65535] { R3886 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s2 [0, 65535] { R3886 += 1, R3808 += 1, R435 += 1, R436 += 1 };
  s0 -> s3 [0, 65535] { R3886 += 1, R3808 += 1, R434 += 1, R435 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3886 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s2 [0, 65535] { R3886 += 1, R3808 += 1, R435 += 1, R436 += 1 };
  s1 -> s3 [0, 65535] { R3886 += 1, R3808 += 1, R434 += 1, R435 += 1 };
  s2 -> s4 [0, 65535] { R3886 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3886 += 1, R3808 += 1 };
  s2 -> s2 [0, 65535] { R3886 += 1, R3808 += 1, R435 += 1, R436 += 1 };
  s3 -> s4 [0, 65535] { R3886 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3886 += 1, R3808 += 1, R435 += 1, R436 += 1 };
  s3 -> s3 [0, 65535] { R3886 += 1, R3808 += 1, R434 += 1, R435 += 1 };
  s4 -> s4 [0, 65535] { R3886 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3886 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3886 += 1, R3808 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R3887 += 1, R3888 += 1 };
  s0 -> s1 [0, 65535] { R3888 += 1, R3810 += 1 };
  s0 -> s2 [0, 65535] { R3888 += 1, R3809 += 1, R3810 += 1 };
  s0 -> s3 [0, 65535] { R3888 += 1, R3810 += 1, R2715 += 1, R2716 += 1 };
  s1 -> s4 [0, 65535] { R3888 += 1 };
  s1 -> s1 [0, 65535] { R3888 += 1, R3810 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3888 += 1, R3810 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3888 += 1, R3809 += 1, R3810 += 1 };
  s2 -> s3 [0, 65535] { R3888 += 1, R3810 += 1, R2715 += 1, R2716 += 1 };
  s3 -> s4 [0, 65535] { R3888 += 1 };
  s3 -> s1 [0, 65535] { R3888 += 1, R3810 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3888 += 1, R3810 += 1, R2715 += 1, R2716 += 1 };
  s4 -> s4 [0, 65535] { R3888 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R3889 += 1, R3890 += 1 };
  s0 -> s1 [0, 65535] { R3890 += 1, R3811 += 1, R3812 += 1 };
  s0 -> s2 [0, 65535] { R3890 += 1, R3812 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3890 += 1, R3811 += 1, R3812 += 1 };
  s1 -> s2 [0, 65535] { R3890 += 1, R3812 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3890 += 1, R3812 += 1 };
  s2 -> s4 [0, 65535] { R3890 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3890 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R3892 += 1, R3813 += 1, R3814 += 1 };
  s0 -> s2 [0, 65535] { R3892 += 1, R3814 += 1, R3477 += 1, R3478 += 1 };
  s0 -> s3 [0, 65535] { R3892 += 1, R3814 += 1 };
  s0 -> s0 [0, 65535] { R3891 += 1, R3892 += 1 };
  s1 -> s1 [0, 65535] { R3892 += 1, R3813 += 1, R3814 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3892 += 1, R3814 += 1, R3477 += 1, R3478 += 1 };
  s1 -> s3 [0, 65535] { R3892 += 1, R3814 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3892 += 1, R3814 += 1, R3477 += 1, R3478 += 1 };
  s2 -> s3 [0, 65535] { R3892 += 1, R3814 += 1 };
  s2 -> s5 [0, 65535] { R3892 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3892 += 1, R3814 += 1 };
  s3 -> s5 [0, 65535] { R3892 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3892 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3894 += 1, R3815 += 1, R3816 += 1 };
  s0 -> s0 [0, 65535] { R3893 += 1, R3894 += 1 };
  s0 -> s2 [0, 65535] { R3894 += 1, R3816 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3894 += 1, R3815 += 1, R3816 += 1 };
  s1 -> s2 [0, 65535] { R3894 += 1, R3816 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3894 += 1, R3816 += 1 };
  s2 -> s4 [0, 65535] { R3894 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3894 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3896 += 1, R3818 += 1, R3783 += 1, R3784 += 1 };
  s0 -> s2 [0, 65535] { R3896 += 1, R3817 += 1, R3818 += 1 };
  s0 -> s0 [0, 65535] { R3895 += 1, R3896 += 1 };
  s0 -> s3 [0, 65535] { R3896 += 1, R3818 += 1 };
  s1 -> s4 [0, 65535] { R3896 += 1 };
  s1 -> s1 [0, 65535] { R3896 += 1, R3818 += 1, R3783 += 1, R3784 += 1 };
  s1 -> s3 [0, 65535] { R3896 += 1, R3818 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R3896 += 1, R3818 += 1, R3783 += 1, R3784 += 1 };
  s2 -> s2 [0, 65535] { R3896 += 1, R3817 += 1, R3818 += 1 };
  s2 -> s3 [0, 65535] { R3896 += 1, R3818 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3896 += 1 };
  s3 -> s3 [0, 65535] { R3896 += 1, R3818 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3896 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3898 += 1, R3819 += 1, R3820 += 1 };
  s0 -> s0 [0, 65535] { R3897 += 1, R3898 += 1 };
  s0 -> s2 [0, 65535] { R3898 += 1, R3820 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R3898 += 1, R3819 += 1, R3820 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3898 += 1, R3820 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3898 += 1, R3820 += 1, R20 += 1 };
  s2 -> s4 [0, 65535] { R3898 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3898 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3900 += 1, R3822 += 1 };
  s0 -> s2 [0, 65535] { R3900 += 1, R3821 += 1, R3822 += 1 };
  s0 -> s0 [0, 65535] { R3899 += 1, R3900 += 1 };
  s0 -> s3 [65, 65] { R3900 += 1, R3822 += 1 };
  s0 -> s4 [65, 65] { R3900 += 1, R3822 += 1 };
  s0 -> s5 [80, 80] { R3900 += 1, R3822 += 1 };
  s0 -> s1 [81, 65535] { R3900 += 1, R3822 += 1 };
  s1 -> s1 [0, 64] { R3900 += 1, R3822 += 1 };
  s1 -> s3 [65, 65] { R3900 += 1, R3822 += 1 };
  s1 -> s4 [65, 65] { R3900 += 1, R3822 += 1 };
  s1 -> s5 [80, 80] { R3900 += 1, R3822 += 1 };
  s1 -> s1 [81, 65535] { R3900 += 1, R3822 += 1 };
  s2 -> s1 [0, 64] { R3900 += 1, R3822 += 1 };
  s2 -> s2 [0, 65535] { R3900 += 1, R3821 += 1, R3822 += 1 };
  s2 -> s3 [65, 65] { R3900 += 1, R3822 += 1 };
  s2 -> s4 [65, 65] { R3900 += 1, R3822 += 1 };
  s2 -> s5 [80, 80] { R3900 += 1, R3822 += 1 };
  s2 -> s1 [81, 65535] { R3900 += 1, R3822 += 1 };
  s3 -> s3 [0, 65] { R3900 += 1, R3822 += 1 };
  s3 -> s7 [80, 80] { R3900 += 1, R3822 += 1 };
  s3 -> s3 [81, 65535] { R3900 += 1, R3822 += 1 };
  s5 -> s5 [0, 64] { R3900 += 1, R3822 += 1 };
  s5 -> s5 [0, 65535] { R3900 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3900 += 1, R3822 += 1 };
  s5 -> s8 [65, 65] { R3900 += 1, R3822 += 1 };
  s5 -> s5 [80, 65535] { R3900 += 1, R3822 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3900 += 1, R3822 += 1 };
  s7 -> s7 [0, 65535] { R3900 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R3900 += 1, R3822 += 1 };
  s8 -> s8 [0, 65535] { R3900 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3902 += 1, R3824 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R3902 += 1, R3823 += 1, R3824 += 1 };
  s0 -> s0 [0, 65535] { R3901 += 1, R3902 += 1 };
  s0 -> s3 [65, 65] { R3902 += 1, R3824 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R3902 += 1, R3824 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R3902 += 1, R3824 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R3902 += 1, R3824 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R3902 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3902 += 1, R3824 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R3902 += 1, R3824 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R3902 += 1, R3824 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R3902 += 1, R3824 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R3902 += 1, R3823 += 1, R3824 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3902 += 1, R3824 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R3902 += 1, R3824 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R3902 += 1, R3824 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R3902 += 1 };
  s3 -> s3 [0, 65535] { R3902 += 1, R3824 += 1, R405 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3902 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3902 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3904 += 1, R3826 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R3903 += 1, R3904 += 1 };
  s0 -> s2 [0, 65535] { R3904 += 1, R3825 += 1, R3826 += 1 };
  s0 -> s3 [65, 65] { R3904 += 1, R3826 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R3904 += 1, R3826 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R3904 += 1, R3826 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R3904 += 1, R3826 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R3904 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3904 += 1, R3826 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R3904 += 1, R3826 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R3904 += 1, R3826 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R3904 += 1, R3826 += 1, R407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3904 += 1, R3825 += 1, R3826 += 1 };
  s2 -> s3 [65, 65] { R3904 += 1, R3826 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R3904 += 1, R3826 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R3904 += 1, R3826 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R3904 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3904 += 1, R3826 += 1, R407 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3904 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3904 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3906 += 1, R3828 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R3906 += 1, R3827 += 1, R3828 += 1 };
  s0 -> s0 [0, 65535] { R3905 += 1, R3906 += 1 };
  s0 -> s3 [65, 65] { R3906 += 1, R3828 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R3906 += 1, R3828 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R3906 += 1, R3828 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R3906 += 1, R3828 += 1, R409 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3906 += 1 };
  s1 -> s3 [65, 65] { R3906 += 1, R3828 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R3906 += 1, R3828 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R3906 += 1, R3828 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R3906 += 1, R3828 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R3906 += 1, R3827 += 1, R3828 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3906 += 1, R3828 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R3906 += 1, R3828 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R3906 += 1, R3828 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3906 += 1, R3828 += 1, R409 += 1 };
  s3 -> s6 [0, 65535] { R3906 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3906 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3906 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R3908 += 1, R3829 += 1, R3830 += 1 };
  s0 -> s0 [0, 65535] { R3907 += 1, R3908 += 1 };
  s0 -> s3 [65, 65] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3908 += 1 };
  s1 -> s3 [65, 65] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R3908 += 1, R3829 += 1, R3830 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3908 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3908 += 1 };
  s4 -> s4 [0, 65535] { R3908 += 1, R3830 += 1, R411 += 1, R412 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3908 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3910 += 1, R3832 += 1 };
  s0 -> s0 [0, 65535] { R3909 += 1, R3910 += 1 };
  s0 -> s2 [0, 65535] { R3910 += 1, R3831 += 1, R3832 += 1 };
  s0 -> s3 [65, 65] { R3910 += 1, R3832 += 1 };
  s0 -> s4 [65, 65] { R3910 += 1, R3832 += 1 };
  s0 -> s1 [66, 65535] { R3910 += 1, R3832 += 1 };
  s1 -> s1 [0, 64] { R3910 += 1, R3832 += 1 };
  s1 -> s1 [0, 65535] { R3910 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3910 += 1, R3832 += 1 };
  s1 -> s4 [65, 65] { R3910 += 1, R3832 += 1 };
  s1 -> s1 [66, 65535] { R3910 += 1, R3832 += 1 };
  s2 -> s1 [0, 64] { R3910 += 1, R3832 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3910 += 1, R3831 += 1, R3832 += 1 };
  s2 -> s3 [65, 65] { R3910 += 1, R3832 += 1 };
  s2 -> s4 [65, 65] { R3910 += 1, R3832 += 1 };
  s2 -> s1 [66, 65535] { R3910 += 1, R3832 += 1 };
  s3 -> s3 [0, 65535] { R3910 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3910 += 1, R3832 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3910 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3910 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R3911 += 1, R3912 += 1 };
  s0 -> s2 [0, 65535] { R3912 += 1, R3833 += 1, R3834 += 1 };
  s0 -> s3 [65, 65] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3912 += 1 };
  s1 -> s3 [65, 65] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3912 += 1, R3833 += 1, R3834 += 1 };
  s2 -> s3 [65, 65] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R3912 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3912 += 1 };
  s4 -> s4 [0, 65535] { R3912 += 1, R3834 += 1, R417 += 1, R418 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3912 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R3914 += 1, R3835 += 1, R3836 += 1 };
  s0 -> s0 [0, 65535] { R3913 += 1, R3914 += 1 };
  s0 -> s3 [65, 65] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3914 += 1 };
  s1 -> s3 [65, 65] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R3914 += 1, R3835 += 1, R3836 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R3914 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3914 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3914 += 1, R3836 += 1, R421 += 1, R422 += 1 };
  s5 -> s5 [0, 65535] { R3914 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R3915 += 1, R3916 += 1 };
  s0 -> s2 [0, 65535] { R3916 += 1, R3837 += 1, R3838 += 1 };
  s0 -> s3 [65, 65] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R3916 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3916 += 1, R3837 += 1, R3838 += 1 };
  s2 -> s3 [65, 65] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R3916 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3916 += 1 };
  s4 -> s4 [0, 65535] { R3916 += 1, R3838 += 1, R427 += 1, R428 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3916 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s0 -> s2 [0, 65535] { R3918 += 1, R3839 += 1, R3840 += 1 };
  s0 -> s0 [0, 65535] { R3917 += 1, R3918 += 1 };
  s0 -> s3 [65, 65] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s0 -> s4 [65, 65] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s0 -> s1 [66, 65535] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 64] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3918 += 1 };
  s1 -> s3 [65, 65] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s1 -> s4 [65, 65] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [66, 65535] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [0, 64] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3918 += 1, R3839 += 1, R3840 += 1 };
  s2 -> s3 [65, 65] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [65, 65] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [66, 65535] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3918 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3918 += 1 };
  s4 -> s4 [0, 65535] { R3918 += 1, R3840 += 1, R431 += 1, R432 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3918 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s2 [0, 64] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s3 [0, 65535] { R3920 += 1, R3841 += 1, R3842 += 1 };
  s0 -> s0 [0, 65535] { R3919 += 1, R3920 += 1 };
  s0 -> s4 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s5 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s6 [65, 65] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s7 [65, 65] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s1 [66, 65535] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s2 [66, 65535] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s1 [0, 64] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s2 [0, 64] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s4 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s5 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s6 [65, 65] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s7 [65, 65] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s1 [66, 65535] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s2 [66, 65535] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [0, 64] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [0, 65535] { R3920 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s5 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [66, 65535] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s1 [0, 64] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s2 [0, 64] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s3 [0, 65535] { R3920 += 1, R3841 += 1, R3842 += 1 };
  s3 -> s4 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s5 [65, 65] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s6 [65, 65] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s7 [65, 65] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s1 [66, 65535] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s2 [66, 65535] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s4 -> s4 [0, 65535] { R3920 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R3920 += 1 };
  s7 -> s5 [0, 65535] { R3920 += 1, R3842 += 1, R2712 += 1, R2713 += 1 };
  s7 -> s7 [0, 65535] { R3920 += 1, R3842 += 1, R2711 += 1, R2712 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3920 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3922 += 1, R3844 += 1 };
  s0 -> s0 [0, 65535] { R3921 += 1, R3922 += 1 };
  s0 -> s2 [0, 65535] { R3922 += 1, R3843 += 1, R3844 += 1 };
  s0 -> s3 [65, 65] { R3922 += 1, R3844 += 1 };
  s0 -> s4 [65, 65] { R3922 += 1, R3844 += 1 };
  s0 -> s1 [66, 65535] { R3922 += 1, R3844 += 1 };
  s1 -> s1 [0, 64] { R3922 += 1, R3844 += 1 };
  s1 -> s1 [0, 65535] { R3922 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3922 += 1, R3844 += 1 };
  s1 -> s4 [65, 65] { R3922 += 1, R3844 += 1 };
  s1 -> s1 [66, 65535] { R3922 += 1, R3844 += 1 };
  s2 -> s1 [0, 64] { R3922 += 1, R3844 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3922 += 1, R3843 += 1, R3844 += 1 };
  s2 -> s3 [65, 65] { R3922 += 1, R3844 += 1 };
  s2 -> s4 [65, 65] { R3922 += 1, R3844 += 1 };
  s2 -> s1 [66, 65535] { R3922 += 1, R3844 += 1 };
  s3 -> s3 [0, 65535] { R3922 += 1, R3844 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3922 += 1 };
  s4 -> s4 [0, 65535] { R3922 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3922 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s2 [0, 64] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s0 [0, 65535] { R3923 += 1, R3924 += 1 };
  s0 -> s3 [0, 65535] { R3924 += 1, R3845 += 1, R3846 += 1 };
  s0 -> s4 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s5 [65, 65] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s6 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s0 -> s7 [65, 65] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s1 [66, 65535] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s0 -> s2 [66, 65535] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s1 [0, 64] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s2 [0, 64] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s4 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s5 [65, 65] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s6 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s1 -> s7 [65, 65] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s1 [66, 65535] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s1 -> s2 [66, 65535] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s2 [0, 64] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s2 [0, 65535] { R3924 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s6 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s2 -> s2 [66, 65535] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s1 [0, 64] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s2 [0, 64] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s3 [0, 65535] { R3924 += 1, R3845 += 1, R3846 += 1 };
  s3 -> s4 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s5 [65, 65] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s6 [65, 65] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s3 -> s7 [65, 65] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s1 [66, 65535] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s3 -> s2 [66, 65535] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s4 -> s4 [0, 65535] { R3924 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R3924 += 1, R3846 += 1, R3473 += 1, R3474 += 1 };
  s5 -> s6 [0, 65535] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s6 -> s8 [0, 65535] { R3924 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R3924 += 1, R3846 += 1, R3474 += 1, R3475 += 1 };
  s8 -> s8 [0, 65535] { R3924 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3926 += 1, R3848 += 1 };
  s0 -> s2 [0, 65535] { R3926 += 1, R3847 += 1, R3848 += 1 };
  s0 -> s0 [0, 65535] { R3925 += 1, R3926 += 1 };
  s0 -> s3 [65, 65] { R3926 += 1, R3848 += 1 };
  s0 -> s4 [65, 65] { R3926 += 1, R3848 += 1 };
  s0 -> s1 [66, 65535] { R3926 += 1, R3848 += 1 };
  s1 -> s1 [0, 64] { R3926 += 1, R3848 += 1 };
  s1 -> s1 [0, 65535] { R3926 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3926 += 1, R3848 += 1 };
  s1 -> s4 [65, 65] { R3926 += 1, R3848 += 1 };
  s1 -> s1 [66, 65535] { R3926 += 1, R3848 += 1 };
  s2 -> s1 [0, 64] { R3926 += 1, R3848 += 1 };
  s2 -> s2 [0, 65535] { R3926 += 1, R3847 += 1, R3848 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3926 += 1, R3848 += 1 };
  s2 -> s4 [65, 65] { R3926 += 1, R3848 += 1 };
  s2 -> s1 [66, 65535] { R3926 += 1, R3848 += 1 };
  s3 -> s3 [0, 65535] { R3926 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3926 += 1, R3848 += 1 };
  s4 -> s5 [0, 65535] { R3926 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3926 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s0 -> s2 [0, 64] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s0 -> s0 [0, 65535] { R3927 += 1, R3928 += 1 };
  s0 -> s3 [0, 65535] { R3928 += 1, R3849 += 1, R3850 += 1 };
  s0 -> s4 [65, 65] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s0 -> s5 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s0 -> s6 [65, 65] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s0 -> s7 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s0 -> s2 [66, 79] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s0 -> s1 [66, 65535] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s0 -> s8 [80, 80] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s0 -> s2 [81, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s1 -> s1 [0, 64] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s1 -> s2 [0, 64] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s1 -> s4 [65, 65] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s1 -> s5 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s1 -> s6 [65, 65] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s1 -> s7 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s1 -> s2 [66, 79] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s1 -> s1 [66, 65535] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s1 -> s8 [80, 80] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s1 -> s2 [81, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s2 -> s2 [0, 64] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s2 -> s5 [65, 65] { R3928 += 1, R3850 += 1 };
  s2 -> s7 [65, 65] { R3928 += 1, R3850 += 1 };
  s2 -> s2 [66, 79] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s2 -> s2 [66, 65535] { R3928 += 1, R3850 += 1 };
  s2 -> s8 [80, 80] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s2 -> s2 [81, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s3 -> s1 [0, 64] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s3 -> s2 [0, 64] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s3 -> s3 [0, 65535] { R3928 += 1, R3849 += 1, R3850 += 1 };
  s3 -> s4 [65, 65] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s3 -> s5 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s3 -> s6 [65, 65] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s3 -> s7 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s3 -> s2 [66, 79] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s3 -> s1 [66, 65535] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s3 -> s8 [80, 80] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s3 -> s2 [81, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s6 -> s7 [0, 79] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s6 -> s6 [0, 65535] { R3928 += 1, R3850 += 1, R3779 += 1, R3780 += 1 };
  s6 -> s11 [80, 80] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s6 -> s7 [81, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s7 -> s7 [0, 79] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s7 -> s7 [0, 65535] { R3928 += 1, R3850 += 1 };
  s7 -> s11 [80, 80] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s7 -> s7 [81, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s8 -> s8 [0, 64] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s8 -> s8 [0, 65535] { R3928 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s8 -> s11 [65, 65] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s8 -> s8 [66, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3928 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3928 += 1, R3850 += 1, R3780 += 1, R3781 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R3928 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3928 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R3818 && R3 = R3928 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R3785 = 0 && R3786 = R3818 && R3787 = 0 && R3788 = R3818 && R3789 = 0 && R3790 = R3818 && R3791 = 0 && R3792 = R3818 && R3793 = 0 && R3794 = R3818 && R3795 = 0 && R3796 = R3818 && R3797 = 0 && R3798 = R3818 && R3799 = 0 && R3800 = R3818 && R3801 = 0 && R3802 = R3818 && R3803 = 0 && R3804 = R3818 && R3805 = 0 && R3806 = R3818 && R3807 = 0 && R3808 = R3818 && R3809 = 0 && R3810 = R3818 && R3811 = 0 && R3812 = R3818 && R3813 = 0 && R3814 = R3818 && R3815 = 0 && R3816 = R3818 && R3817 = 0 && R3821 = 0 && R3822 = 0 && R3841 = 0 && R3842 = 0 && R3845 = 0 && R3846 = 0 && R3849 = 0 && R3850 = 0 && R3851 = 10 && R3852 = R3928 && R3853 = 10 && R3854 = R3928 && R3855 = 10 && R3856 = R3928 && R3857 = 10 && R3858 = R3928 && R3859 = 10 && R3860 = R3928 && R3861 = 10 && R3862 = R3928 && R3863 = 10 && R3864 = R3928 && R3865 = 10 && R3866 = R3928 && R3867 = 10 && R3868 = R3928 && R3869 = 10 && R3870 = R3928 && R3871 = 10 && R3872 = R3928 && R3873 = 10 && R3874 = R3928 && R3875 = 10 && R3876 = R3928 && R3877 = 10 && R3878 = R3928 && R3879 = 10 && R3880 = R3928 && R3881 = 10 && R3882 = R3928 && R3883 = 10 && R3884 = R3928 && R3885 = 10 && R3886 = R3928 && R3887 = 10 && R3888 = R3928 && R3889 = 10 && R3890 = R3928 && R3891 = 10 && R3892 = R3928 && R3893 = 10 && R3894 = R3928 && R3895 = 10 && R3896 = R3928 && R3897 = 10 && R3898 = R3928 && R3899 = 10 && R3900 = R3928 && R3901 = 10 && R3902 = R3928 && R3903 = 10 && R3904 = R3928 && R3905 = 10 && R3906 = R3928 && R3907 = 10 && R3908 = R3928 && R3909 = 10 && R3910 = R3928 && R3911 = 10 && R3912 = R3928 && R3913 = 10 && R3914 = R3928 && R3915 = 10 && R3916 = R3928 && R3917 = 10 && R3918 = R3928 && R3919 = 10 && R3920 = R3928 && R3921 = 10 && R3922 = R3928 && R3923 = 10 && R3924 = R3928 && R3925 = 10 && R3926 = R3928 && R3927 = 10 && R436 + R433 + R3784 + R3781 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R3818 && 9 < R3928 && (R20 = 0 || (R3819 = 0 && R3820 = 0)) && (R20 = 0 || (R3823 = 0 && R3824 = 0)) && (R20 = 0 || (R3825 = 0 && R3826 = 0)) && (R20 = 0 || (R3827 = 0 && R3828 = 0)) && (R20 = 0 || (R3829 = 0 && R3830 = 0)) && (R20 = 0 || (R3831 = 0 && R3832 = 0)) && (R20 = 0 || (R3833 = 0 && R3834 = 0)) && (R20 = 0 || (R3835 = 0 && R3836 = 0)) && (R20 = 0 || (R3837 = 0 && R3838 = 0)) && (R20 = 0 || (R3839 = 0 && R3840 = 0)) && (R20 = 0 || (R3843 = 0 && R3844 = 0)) && (R20 = 0 || (R3847 = 0 && R3848 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R434 + R431 = 0 && R435 + R432 = 0)) && (R2716 + R2713 = 0 || (R2714 + R2711 = 0 && R2715 + R2712 = 0)) && (R3478 + R3475 = 0 || (R3476 + R3473 = 0 && R3477 + R3474 = 0)) && (R3478 + R3475 = 0 || (R3782 + R3779 = 0 && R3783 + R3780 = 0));
// End of Parikh automata intersection problem
