// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R2, R20, R21, R22, R23, R24, R2711, R2712, R2713, R2714, R2715, R2716, R2717, R2718, R2719, R2720, R2721, R2722, R3, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3096 += 1 };
  s0 -> s0 [0, 65535] { R3095 += 1, R3096 += 1 };
  s0 -> s1 [45, 45] { R3096 += 1 };
  s0 -> s2 [46, 46] { R3096 += 1 };
  s0 -> s1 [48, 62] { R3096 += 1 };
  s0 -> s3 [65, 65] { R3096 += 1 };
  s0 -> s1 [66, 65535] { R3096 += 1 };
  s1 -> s1 [0, 43] { R3096 += 1 };
  s1 -> s1 [45, 45] { R3096 += 1 };
  s1 -> s2 [46, 46] { R3096 += 1 };
  s1 -> s1 [48, 62] { R3096 += 1 };
  s1 -> s3 [65, 65] { R3096 += 1 };
  s1 -> s1 [66, 65535] { R3096 += 1 };
  s2 -> s1 [0, 43] { R3096 += 1 };
  s2 -> s1 [45, 45] { R3096 += 1 };
  s2 -> s2 [46, 46] { R3096 += 1 };
  s2 -> s1 [48, 62] { R3096 += 1 };
  s2 -> s3 [65, 65] { R3096 += 1 };
  s2 -> s1 [66, 114] { R3096 += 1 };
  s2 -> s8 [115, 115] { R3096 += 1 };
  s2 -> s1 [116, 65535] { R3096 += 1 };
  s3 -> s3 [0, 43] { R3096 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3096 += 1 };
  s3 -> s4 [46, 46] { R3096 += 1 };
  s3 -> s3 [48, 62] { R3096 += 1 };
  s3 -> s3 [65, 65535] { R3096 += 1 };
  s4 -> s3 [0, 43] { R3096 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3096 += 1 };
  s4 -> s4 [46, 46] { R3096 += 1 };
  s4 -> s3 [48, 62] { R3096 += 1 };
  s4 -> s3 [65, 114] { R3096 += 1 };
  s4 -> s5 [115, 115] { R3096 += 1 };
  s4 -> s3 [116, 65535] { R3096 += 1 };
  s5 -> s3 [0, 43] { R3096 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3096 += 1 };
  s5 -> s4 [46, 46] { R3096 += 1 };
  s5 -> s3 [48, 62] { R3096 += 1 };
  s5 -> s3 [65, 110] { R3096 += 1 };
  s5 -> s6 [111, 111] { R3096 += 1 };
  s5 -> s3 [112, 65535] { R3096 += 1 };
  s6 -> s3 [0, 43] { R3096 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3096 += 1 };
  s6 -> s4 [46, 46] { R3096 += 1 };
  s6 -> s3 [48, 62] { R3096 += 1 };
  s6 -> s3 [65, 98] { R3096 += 1 };
  s6 -> s7 [99, 99] { R3096 += 1 };
  s6 -> s3 [100, 65535] { R3096 += 1 };
  s7 -> s3 [0, 43] { R3096 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3096 += 1 };
  s7 -> s4 [46, 46] { R3096 += 1 };
  s7 -> s3 [48, 62] { R3096 += 1 };
  s7 -> s3 [65, 106] { R3096 += 1 };
  s7 -> s3 [108, 65535] { R3096 += 1 };
  s8 -> s1 [0, 43] { R3096 += 1 };
  s8 -> s1 [45, 45] { R3096 += 1 };
  s8 -> s2 [46, 46] { R3096 += 1 };
  s8 -> s1 [48, 62] { R3096 += 1 };
  s8 -> s3 [65, 65] { R3096 += 1 };
  s8 -> s1 [66, 110] { R3096 += 1 };
  s8 -> s9 [111, 111] { R3096 += 1 };
  s8 -> s1 [112, 65535] { R3096 += 1 };
  s9 -> s1 [0, 43] { R3096 += 1 };
  s9 -> s1 [45, 45] { R3096 += 1 };
  s9 -> s2 [46, 46] { R3096 += 1 };
  s9 -> s1 [48, 62] { R3096 += 1 };
  s9 -> s3 [65, 65] { R3096 += 1 };
  s9 -> s1 [66, 98] { R3096 += 1 };
  s9 -> s10 [99, 99] { R3096 += 1 };
  s9 -> s1 [100, 65535] { R3096 += 1 };
  s10 -> s1 [0, 43] { R3096 += 1 };
  s10 -> s1 [45, 45] { R3096 += 1 };
  s10 -> s2 [46, 46] { R3096 += 1 };
  s10 -> s1 [48, 62] { R3096 += 1 };
  s10 -> s3 [65, 65] { R3096 += 1 };
  s10 -> s1 [66, 106] { R3096 += 1 };
  s10 -> s1 [108, 65535] { R3096 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3098 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R3097 += 1, R3098 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3098 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3100 += 1 };
  s0 -> s0 [0, 65535] { R3099 += 1, R3100 += 1 };
  s0 -> s2 [0, 65535] { R3100 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R3100 += 1 };
  s0 -> s1 [59, 65535] { R3100 += 1 };
  s1 -> s1 [0, 57] { R3100 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3100 += 1 };
  s1 -> s1 [59, 65535] { R3100 += 1 };
  s2 -> s1 [0, 57] { R3100 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3100 += 1, R11 += 1 };
  s2 -> s3 [58, 58] { R3100 += 1 };
  s2 -> s1 [59, 65535] { R3100 += 1 };
  s3 -> s3 [0, 65535] { R3100 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3102 += 1 };
  s0 -> s2 [0, 65535] { R3102 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R3101 += 1, R3102 += 1 };
  s0 -> s3 [65, 65] { R3102 += 1 };
  s0 -> s1 [66, 65535] { R3102 += 1 };
  s1 -> s1 [0, 64] { R3102 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3102 += 1 };
  s1 -> s1 [66, 65535] { R3102 += 1 };
  s2 -> s1 [0, 64] { R3102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3102 += 1, R12 += 1 };
  s2 -> s3 [65, 65] { R3102 += 1 };
  s2 -> s1 [66, 65535] { R3102 += 1 };
  s3 -> s3 [0, 65535] { R3102 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3104 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R3103 += 1, R3104 += 1 };
  s0 -> s2 [0, 65535] { R3104 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R3104 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R3104 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3104 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R3104 += 1 };
  s2 -> s1 [0, 90] { R3104 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3104 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R3104 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R3104 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R3104 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3104 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3106 += 1, R24 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R3105 += 1, R3106 += 1 };
  s0 -> s2 [0, 65535] { R3106 += 1, R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R3106 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R3106 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3106 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R3106 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3106 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3108 += 1, R3030 += 1 };
  s0 -> s0 [0, 65535] { R3107 += 1, R3108 += 1 };
  s0 -> s2 [0, 65535] { R3108 += 1, R3029 += 1, R3030 += 1 };
  s0 -> s1 [66, 65535] { R3108 += 1, R3030 += 1 };
  s1 -> s1 [0, 64] { R3108 += 1, R3030 += 1 };
  s1 -> s1 [0, 65535] { R3108 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3108 += 1, R3030 += 1 };
  s2 -> s1 [0, 64] { R3108 += 1, R3030 += 1 };
  s2 -> s2 [0, 65535] { R3108 += 1, R3029 += 1, R3030 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3108 += 1, R3030 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3110 += 1, R3032 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R3109 += 1, R3110 += 1 };
  s0 -> s2 [0, 65535] { R3110 += 1, R3031 += 1, R3032 += 1 };
  s1 -> s1 [0, 65535] { R3110 += 1, R3032 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R3110 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3110 += 1, R3032 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3110 += 1, R3031 += 1, R3032 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3110 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3112 += 1, R3034 += 1 };
  s0 -> s0 [0, 65535] { R3111 += 1, R3112 += 1 };
  s0 -> s2 [0, 65535] { R3112 += 1, R3033 += 1, R3034 += 1 };
  s0 -> s1 [80, 65535] { R3112 += 1, R3034 += 1 };
  s1 -> s1 [0, 65] { R3112 += 1, R3034 += 1 };
  s1 -> s1 [0, 65535] { R3112 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3112 += 1, R3034 += 1 };
  s2 -> s1 [0, 65] { R3112 += 1, R3034 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3112 += 1, R3033 += 1, R3034 += 1 };
  s2 -> s1 [80, 65535] { R3112 += 1, R3034 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3114 += 1, R3035 += 1, R3036 += 1 };
  s0 -> s0 [0, 65535] { R3113 += 1, R3114 += 1 };
  s0 -> s2 [0, 65535] { R3114 += 1, R3036 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R3114 += 1, R3035 += 1, R3036 += 1 };
  s1 -> s2 [0, 65535] { R3114 += 1, R3036 += 1, R406 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3114 += 1 };
  s2 -> s2 [0, 65535] { R3114 += 1, R3036 += 1, R406 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3114 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R3116 += 1, R3038 += 1 };
  s0 -> s2 [0, 65535] { R3116 += 1, R3037 += 1, R3038 += 1 };
  s0 -> s0 [0, 65535] { R3115 += 1, R3116 += 1 };
  s0 -> s3 [0, 65535] { R3116 += 1, R3038 += 1, R408 += 1 };
  s0 -> s1 [84, 65535] { R3116 += 1, R3038 += 1 };
  s1 -> s1 [0, 82] { R3116 += 1, R3038 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3116 += 1 };
  s1 -> s1 [84, 65535] { R3116 += 1, R3038 += 1 };
  s2 -> s1 [0, 82] { R3116 += 1, R3038 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3116 += 1, R3037 += 1, R3038 += 1 };
  s2 -> s3 [0, 65535] { R3116 += 1, R3038 += 1, R408 += 1 };
  s2 -> s1 [84, 65535] { R3116 += 1, R3038 += 1 };
  s3 -> s1 [0, 82] { R3116 += 1, R3038 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3116 += 1 };
  s3 -> s3 [0, 65535] { R3116 += 1, R3038 += 1, R408 += 1 };
  s3 -> s1 [84, 65535] { R3116 += 1, R3038 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3116 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3118 += 1, R3040 += 1 };
  s0 -> s2 [0, 65535] { R3118 += 1, R3039 += 1, R3040 += 1 };
  s0 -> s3 [0, 65535] { R3118 += 1, R3040 += 1, R410 += 1 };
  s0 -> s0 [0, 65535] { R3117 += 1, R3118 += 1 };
  s0 -> s1 [81, 65535] { R3118 += 1, R3040 += 1 };
  s1 -> s1 [0, 79] { R3118 += 1, R3040 += 1 };
  s1 -> s1 [0, 65535] { R3118 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R3118 += 1, R3040 += 1 };
  s2 -> s1 [0, 79] { R3118 += 1, R3040 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3118 += 1, R3039 += 1, R3040 += 1 };
  s2 -> s3 [0, 65535] { R3118 += 1, R3040 += 1, R410 += 1 };
  s2 -> s1 [81, 65535] { R3118 += 1, R3040 += 1 };
  s3 -> s1 [0, 79] { R3118 += 1, R3040 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3118 += 1 };
  s3 -> s3 [0, 65535] { R3118 += 1, R3040 += 1, R410 += 1 };
  s3 -> s1 [81, 65535] { R3118 += 1, R3040 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3118 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3119 += 1, R3120 += 1 };
  s0 -> s1 [0, 65535] { R3120 += 1, R3042 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R3120 += 1, R3042 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R3120 += 1, R3041 += 1, R3042 += 1 };
  s1 -> s5 [0, 65535] { R3120 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3120 += 1, R3042 += 1, R415 += 1, R416 += 1 };
  s1 -> s6 [0, 65535] { R3120 += 1, R3042 += 1 };
  s2 -> s5 [0, 65535] { R3120 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3120 += 1, R3042 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R3120 += 1, R3042 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3120 += 1, R3042 += 1, R415 += 1, R416 += 1 };
  s3 -> s2 [0, 65535] { R3120 += 1, R3042 += 1, R414 += 1, R415 += 1 };
  s3 -> s3 [0, 65535] { R3120 += 1, R3041 += 1, R3042 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3120 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3120 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3120 += 1, R3042 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3122 += 1, R3043 += 1, R3044 += 1 };
  s0 -> s0 [0, 65535] { R3121 += 1, R3122 += 1 };
  s0 -> s2 [0, 65535] { R3122 += 1, R3044 += 1 };
  s1 -> s1 [0, 65535] { R3122 += 1, R3043 += 1, R3044 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3122 += 1, R3044 += 1 };
  s2 -> s3 [0, 65535] { R3122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3122 += 1, R3044 += 1 };
  s3 -> s3 [0, 65535] { R3122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R3124 += 1, R3046 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R3124 += 1, R3045 += 1, R3046 += 1 };
  s0 -> s3 [0, 65535] { R3124 += 1, R3046 += 1, R419 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R3123 += 1, R3124 += 1 };
  s0 -> s1 [81, 65535] { R3124 += 1, R3046 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R3124 += 1, R3046 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3124 += 1, R3046 += 1 };
  s1 -> s5 [0, 65535] { R3124 += 1 };
  s1 -> s1 [81, 65535] { R3124 += 1, R3046 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R3124 += 1, R3046 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3124 += 1, R3045 += 1, R3046 += 1 };
  s2 -> s3 [0, 65535] { R3124 += 1, R3046 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R3124 += 1, R3046 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R3124 += 1, R3046 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3124 += 1, R3046 += 1, R419 += 1, R420 += 1 };
  s3 -> s5 [0, 65535] { R3124 += 1 };
  s3 -> s1 [81, 65535] { R3124 += 1, R3046 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3124 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3125 += 1, R3126 += 1 };
  s0 -> s1 [0, 65535] { R3126 += 1, R3048 += 1, R425 += 1, R426 += 1 };
  s0 -> s2 [0, 65535] { R3126 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s3 [0, 65535] { R3126 += 1, R3048 += 1, R424 += 1, R425 += 1 };
  s1 -> s6 [0, 65535] { R3126 += 1, R3048 += 1 };
  s1 -> s1 [0, 65535] { R3126 += 1, R3048 += 1, R425 += 1, R426 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3126 += 1 };
  s2 -> s1 [0, 65535] { R3126 += 1, R3048 += 1, R425 += 1, R426 += 1 };
  s2 -> s2 [0, 65535] { R3126 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3126 += 1, R3048 += 1, R424 += 1, R425 += 1 };
  s3 -> s1 [0, 65535] { R3126 += 1, R3048 += 1, R425 += 1, R426 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3126 += 1, R3048 += 1, R424 += 1, R425 += 1 };
  s3 -> s5 [0, 65535] { R3126 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3126 += 1 };
  s6 -> s6 [0, 65535] { R3126 += 1, R3048 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3126 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R3127 += 1, R3128 += 1 };
  s0 -> s2 [0, 65535] { R3128 += 1, R3050 += 1, R429 += 1, R430 += 1 };
  s0 -> s3 [0, 65535] { R3128 += 1, R3049 += 1, R3050 += 1 };
  s0 -> s1 [91, 107] { R3128 += 1, R3050 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R3128 += 1, R3050 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R3128 += 1 };
  s1 -> s1 [0, 65535] { R3128 += 1, R3050 += 1 };
  s1 -> s1 [91, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3128 += 1 };
  s2 -> s2 [0, 65535] { R3128 += 1, R3050 += 1, R429 += 1, R430 += 1 };
  s2 -> s1 [91, 107] { R3128 += 1, R3050 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R3128 += 1, R3050 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R3128 += 1, R3050 += 1, R429 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R3128 += 1, R3049 += 1, R3050 += 1 };
  s3 -> s1 [91, 107] { R3128 += 1, R3050 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R3128 += 1, R3050 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3128 += 1 };
  s4 -> s4 [0, 65535] { R3128 += 1, R3050 += 1 };
  s4 -> s1 [91, 110] { R3128 += 1, R3050 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R3128 += 1, R3050 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3128 += 1 };
  s7 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s7 -> s7 [0, 65535] { R3128 += 1, R3050 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R3128 += 1 };
  s7 -> s1 [91, 98] { R3128 += 1, R3050 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R3128 += 1, R3050 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R3128 += 1 };
  s8 -> s8 [0, 65535] { R3128 += 1, R3050 += 1 };
  s8 -> s1 [91, 96] { R3128 += 1, R3050 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R3128 += 1, R3050 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s9 -> s9 [0, 65535] { R3128 += 1, R3050 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R3128 += 1 };
  s9 -> s1 [91, 107] { R3128 += 1, R3050 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R3128 += 1, R3050 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R3128 += 1 };
  s10 -> s10 [0, 65535] { R3128 += 1, R3050 += 1 };
  s10 -> s1 [91, 103] { R3128 += 1, R3050 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R3128 += 1, R3050 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R3128 += 1, R3050 += 1 };
  s11 -> s6 [0, 65535] { R3128 += 1 };
  s11 -> s1 [91, 110] { R3128 += 1, R3050 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R3128 += 1, R3050 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s12 -> s12 [0, 65535] { R3128 += 1, R3050 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s6 [0, 65535] { R3128 += 1 };
  s12 -> s1 [91, 114] { R3128 += 1, R3050 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R3128 += 1, R3050 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R3128 += 1 };
  s13 -> s13 [0, 65535] { R3128 += 1, R3050 += 1 };
  s13 -> s1 [91, 115] { R3128 += 1, R3050 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R3128 += 1, R3050 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R3128 += 1, R3050 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R3128 += 1, R3050 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R3129 += 1, R3130 += 1 };
  s0 -> s1 [0, 65535] { R3130 += 1, R3052 += 1, R435 += 1, R436 += 1 };
  s0 -> s2 [0, 65535] { R3130 += 1, R3051 += 1, R3052 += 1 };
  s0 -> s3 [0, 65535] { R3130 += 1, R3052 += 1, R434 += 1, R435 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R3130 += 1, R3052 += 1 };
  s1 -> s1 [0, 65535] { R3130 += 1, R3052 += 1, R435 += 1, R436 += 1 };
  s1 -> s5 [0, 65535] { R3130 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3130 += 1, R3052 += 1, R435 += 1, R436 += 1 };
  s2 -> s2 [0, 65535] { R3130 += 1, R3051 += 1, R3052 += 1 };
  s2 -> s3 [0, 65535] { R3130 += 1, R3052 += 1, R434 += 1, R435 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3130 += 1, R3052 += 1, R435 += 1, R436 += 1 };
  s3 -> s5 [0, 65535] { R3130 += 1 };
  s3 -> s3 [0, 65535] { R3130 += 1, R3052 += 1, R434 += 1, R435 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3130 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3130 += 1, R3052 += 1 };
  s6 -> s5 [0, 65535] { R3130 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R3131 += 1, R3132 += 1 };
  s0 -> s1 [0, 65535] { R3132 += 1, R3054 += 1 };
  s0 -> s2 [0, 65535] { R3132 += 1, R3054 += 1, R2715 += 1, R2716 += 1 };
  s0 -> s3 [0, 65535] { R3132 += 1, R3053 += 1, R3054 += 1 };
  s1 -> s5 [0, 65535] { R3132 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3132 += 1, R3054 += 1 };
  s2 -> s5 [0, 65535] { R3132 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3132 += 1, R3054 += 1 };
  s2 -> s2 [0, 65535] { R3132 += 1, R3054 += 1, R2715 += 1, R2716 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3132 += 1, R3054 += 1 };
  s3 -> s2 [0, 65535] { R3132 += 1, R3054 += 1, R2715 += 1, R2716 += 1 };
  s3 -> s3 [0, 65535] { R3132 += 1, R3053 += 1, R3054 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3132 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R3133 += 1, R3134 += 1 };
  s0 -> s1 [0, 65535] { R3134 += 1, R3056 += 1 };
  s0 -> s2 [0, 65535] { R3134 += 1, R3055 += 1, R3056 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3134 += 1, R3056 += 1 };
  s1 -> s4 [0, 65535] { R3134 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3134 += 1, R3056 += 1 };
  s2 -> s2 [0, 65535] { R3134 += 1, R3055 += 1, R3056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s0 [0, 65535] { R3135 += 1, R3136 += 1 };
  s0 -> s1 [0, 65535] { R3136 += 1, R3058 += 1, R2720 += 1, R2721 += 1 };
  s0 -> s2 [0, 65535] { R3136 += 1, R3058 += 1, R2721 += 1, R2722 += 1 };
  s0 -> s3 [0, 65535] { R3136 += 1, R3057 += 1, R3058 += 1 };
  s1 -> s1 [0, 65535] { R3136 += 1, R3058 += 1, R2720 += 1, R2721 += 1 };
  s1 -> s2 [0, 65535] { R3136 += 1, R3058 += 1, R2721 += 1, R2722 += 1 };
  s1 -> s5 [0, 65535] { R3136 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3136 += 1, R3058 += 1, R2721 += 1, R2722 += 1 };
  s2 -> s5 [0, 65535] { R3136 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R3136 += 1, R3058 += 1 };
  s3 -> s1 [0, 65535] { R3136 += 1, R3058 += 1, R2720 += 1, R2721 += 1 };
  s3 -> s2 [0, 65535] { R3136 += 1, R3058 += 1, R2721 += 1, R2722 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3136 += 1, R3057 += 1, R3058 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3136 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3136 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3136 += 1, R3058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R3138 += 1, R3059 += 1, R3060 += 1 };
  s0 -> s2 [0, 65535] { R3138 += 1, R3060 += 1 };
  s0 -> s0 [0, 65535] { R3137 += 1, R3138 += 1 };
  s1 -> s1 [0, 65535] { R3138 += 1, R3059 += 1, R3060 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3138 += 1, R3060 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3138 += 1, R3060 += 1 };
  s2 -> s4 [0, 65535] { R3138 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3138 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R3140 += 1, R3061 += 1, R3062 += 1 };
  s0 -> s2 [0, 65535] { R3140 += 1, R3062 += 1, R3027 += 1, R3028 += 1 };
  s0 -> s0 [0, 65535] { R3139 += 1, R3140 += 1 };
  s0 -> s3 [0, 65535] { R3140 += 1, R3062 += 1 };
  s1 -> s1 [0, 65535] { R3140 += 1, R3061 += 1, R3062 += 1 };
  s1 -> s2 [0, 65535] { R3140 += 1, R3062 += 1, R3027 += 1, R3028 += 1 };
  s1 -> s3 [0, 65535] { R3140 += 1, R3062 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R3140 += 1 };
  s2 -> s2 [0, 65535] { R3140 += 1, R3062 += 1, R3027 += 1, R3028 += 1 };
  s2 -> s3 [0, 65535] { R3140 += 1, R3062 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R3140 += 1 };
  s3 -> s3 [0, 65535] { R3140 += 1, R3062 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3140 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R3142 += 1, R3064 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R3142 += 1, R3063 += 1, R3064 += 1 };
  s0 -> s0 [0, 65535] { R3141 += 1, R3142 += 1 };
  s1 -> s1 [0, 65535] { R3142 += 1, R3064 += 1, R20 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3142 += 1 };
  s2 -> s1 [0, 65535] { R3142 += 1, R3064 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3142 += 1, R3063 += 1, R3064 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3142 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3144 += 1, R3066 += 1 };
  s0 -> s2 [0, 65535] { R3144 += 1, R3065 += 1, R3066 += 1 };
  s0 -> s0 [0, 65535] { R3143 += 1, R3144 += 1 };
  s0 -> s3 [65, 65] { R3144 += 1, R3066 += 1 };
  s0 -> s4 [65, 65] { R3144 += 1, R3066 += 1 };
  s0 -> s5 [80, 80] { R3144 += 1, R3066 += 1 };
  s0 -> s1 [81, 65535] { R3144 += 1, R3066 += 1 };
  s1 -> s1 [0, 64] { R3144 += 1, R3066 += 1 };
  s1 -> s3 [65, 65] { R3144 += 1, R3066 += 1 };
  s1 -> s4 [65, 65] { R3144 += 1, R3066 += 1 };
  s1 -> s5 [80, 80] { R3144 += 1, R3066 += 1 };
  s1 -> s1 [81, 65535] { R3144 += 1, R3066 += 1 };
  s2 -> s1 [0, 64] { R3144 += 1, R3066 += 1 };
  s2 -> s2 [0, 65535] { R3144 += 1, R3065 += 1, R3066 += 1 };
  s2 -> s3 [65, 65] { R3144 += 1, R3066 += 1 };
  s2 -> s4 [65, 65] { R3144 += 1, R3066 += 1 };
  s2 -> s5 [80, 80] { R3144 += 1, R3066 += 1 };
  s2 -> s1 [81, 65535] { R3144 += 1, R3066 += 1 };
  s4 -> s4 [0, 65] { R3144 += 1, R3066 += 1 };
  s4 -> s8 [80, 80] { R3144 += 1, R3066 += 1 };
  s4 -> s4 [81, 65535] { R3144 += 1, R3066 += 1 };
  s5 -> s5 [0, 64] { R3144 += 1, R3066 += 1 };
  s5 -> s5 [0, 65535] { R3144 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3144 += 1, R3066 += 1 };
  s5 -> s8 [65, 65] { R3144 += 1, R3066 += 1 };
  s5 -> s5 [80, 65535] { R3144 += 1, R3066 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3144 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3144 += 1, R3066 += 1 };
  s8 -> s8 [0, 65535] { R3144 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R3144 += 1, R3066 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R3146 += 1, R3068 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R3145 += 1, R3146 += 1 };
  s0 -> s2 [0, 65535] { R3146 += 1, R3067 += 1, R3068 += 1 };
  s0 -> s3 [65, 65] { R3146 += 1, R3068 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R3146 += 1, R3068 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R3146 += 1, R3068 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R3146 += 1, R3068 += 1, R405 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3146 += 1 };
  s1 -> s3 [65, 65] { R3146 += 1, R3068 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R3146 += 1, R3068 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R3146 += 1, R3068 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R3146 += 1, R3068 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R3146 += 1, R3067 += 1, R3068 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3146 += 1, R3068 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R3146 += 1, R3068 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R3146 += 1, R3068 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R3146 += 1, R3068 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R3146 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3146 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R3148 += 1, R3070 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R3147 += 1, R3148 += 1 };
  s0 -> s2 [0, 65535] { R3148 += 1, R3069 += 1, R3070 += 1 };
  s0 -> s3 [65, 65] { R3148 += 1, R3070 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R3148 += 1, R3070 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R3148 += 1, R3070 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R3148 += 1, R3070 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R3148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3148 += 1, R3070 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R3148 += 1, R3070 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R3148 += 1, R3070 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R3148 += 1, R3070 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R3148 += 1, R3069 += 1, R3070 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3148 += 1, R3070 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R3148 += 1, R3070 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R3148 += 1, R3070 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R3148 += 1, R3070 += 1, R407 += 1 };
  s3 -> s6 [0, 65535] { R3148 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3148 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R3150 += 1, R3072 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R3150 += 1, R3071 += 1, R3072 += 1 };
  s0 -> s0 [0, 65535] { R3149 += 1, R3150 += 1 };
  s0 -> s3 [65, 65] { R3150 += 1, R3072 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R3150 += 1, R3072 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R3150 += 1, R3072 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R3150 += 1, R3072 += 1, R409 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3150 += 1 };
  s1 -> s3 [65, 65] { R3150 += 1, R3072 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R3150 += 1, R3072 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R3150 += 1, R3072 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R3150 += 1, R3072 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R3150 += 1, R3071 += 1, R3072 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3150 += 1, R3072 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R3150 += 1, R3072 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R3150 += 1, R3072 += 1, R409 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3150 += 1 };
  s4 -> s5 [0, 65535] { R3150 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3150 += 1, R3072 += 1, R409 += 1 };
  s5 -> s5 [0, 65535] { R3150 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R3151 += 1, R3152 += 1 };
  s0 -> s2 [0, 65535] { R3152 += 1, R3073 += 1, R3074 += 1 };
  s0 -> s3 [65, 65] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 65535] { R3152 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3152 += 1, R3073 += 1, R3074 += 1 };
  s2 -> s3 [65, 65] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R3152 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3152 += 1, R3074 += 1, R411 += 1, R412 += 1 };
  s4 -> s5 [0, 65535] { R3152 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3152 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R3154 += 1, R3076 += 1 };
  s0 -> s0 [0, 65535] { R3153 += 1, R3154 += 1 };
  s0 -> s2 [0, 65535] { R3154 += 1, R3075 += 1, R3076 += 1 };
  s0 -> s3 [65, 65] { R3154 += 1, R3076 += 1 };
  s0 -> s4 [65, 65] { R3154 += 1, R3076 += 1 };
  s0 -> s1 [66, 65535] { R3154 += 1, R3076 += 1 };
  s1 -> s1 [0, 64] { R3154 += 1, R3076 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3154 += 1 };
  s1 -> s3 [65, 65] { R3154 += 1, R3076 += 1 };
  s1 -> s4 [65, 65] { R3154 += 1, R3076 += 1 };
  s1 -> s1 [66, 65535] { R3154 += 1, R3076 += 1 };
  s2 -> s1 [0, 64] { R3154 += 1, R3076 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3154 += 1, R3075 += 1, R3076 += 1 };
  s2 -> s3 [65, 65] { R3154 += 1, R3076 += 1 };
  s2 -> s4 [65, 65] { R3154 += 1, R3076 += 1 };
  s2 -> s1 [66, 65535] { R3154 += 1, R3076 += 1 };
  s3 -> s3 [0, 65535] { R3154 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3154 += 1 };
  s4 -> s4 [0, 65535] { R3154 += 1, R3076 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3154 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R3156 += 1, R3077 += 1, R3078 += 1 };
  s0 -> s0 [0, 65535] { R3155 += 1, R3156 += 1 };
  s0 -> s3 [65, 65] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R3156 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3156 += 1, R3077 += 1, R3078 += 1 };
  s2 -> s3 [65, 65] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3156 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3156 += 1 };
  s4 -> s4 [0, 65535] { R3156 += 1, R3078 += 1, R417 += 1, R418 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3156 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R3158 += 1, R3079 += 1, R3080 += 1 };
  s0 -> s0 [0, 65535] { R3157 += 1, R3158 += 1 };
  s0 -> s3 [65, 65] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R3158 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R3158 += 1, R3079 += 1, R3080 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R3158 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3158 += 1 };
  s4 -> s4 [0, 65535] { R3158 += 1, R3080 += 1, R421 += 1, R422 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3158 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R3160 += 1, R3081 += 1, R3082 += 1 };
  s0 -> s0 [0, 65535] { R3159 += 1, R3160 += 1 };
  s0 -> s3 [65, 65] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R3160 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R3160 += 1, R3081 += 1, R3082 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535] { R3160 += 1 };
  s3 -> s3 [0, 65535] { R3160 += 1, R3082 += 1, R427 += 1, R428 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3160 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3160 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s0 -> s0 [0, 65535] { R3161 += 1, R3162 += 1 };
  s0 -> s2 [0, 65535] { R3162 += 1, R3083 += 1, R3084 += 1 };
  s0 -> s3 [65, 65] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s0 -> s4 [65, 65] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s0 -> s1 [66, 65535] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 64] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3162 += 1 };
  s1 -> s3 [65, 65] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s1 -> s4 [65, 65] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [66, 65535] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [0, 64] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s2 -> s2 [0, 65535] { R3162 += 1, R3083 += 1, R3084 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [65, 65] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [66, 65535] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s3 -> s6 [0, 65535] { R3162 += 1 };
  s3 -> s3 [0, 65535] { R3162 += 1, R3084 += 1, R431 += 1, R432 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3162 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3162 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s2 [0, 64] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s3 [0, 65535] { R3164 += 1, R3085 += 1, R3086 += 1 };
  s0 -> s0 [0, 65535] { R3163 += 1, R3164 += 1 };
  s0 -> s4 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s5 [65, 65] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s6 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s0 -> s7 [65, 65] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s1 [66, 65535] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s0 -> s2 [66, 65535] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s1 [0, 64] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s2 [0, 64] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s4 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s5 [65, 65] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s6 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s1 -> s7 [65, 65] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s1 [66, 65535] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s1 -> s2 [66, 65535] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [0, 64] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3164 += 1 };
  s2 -> s4 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s6 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s2 -> s2 [66, 65535] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s1 [0, 64] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s2 [0, 64] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s3 [0, 65535] { R3164 += 1, R3085 += 1, R3086 += 1 };
  s3 -> s4 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s5 [65, 65] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s6 [65, 65] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s3 -> s7 [65, 65] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s1 [66, 65535] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s3 -> s2 [66, 65535] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s4 -> s9 [0, 65535] { R3164 += 1 };
  s4 -> s4 [0, 65535] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R3164 += 1, R3086 += 1, R2712 += 1, R2713 += 1 };
  s5 -> s5 [0, 65535] { R3164 += 1, R3086 += 1, R2711 += 1, R2712 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3164 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3164 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R3166 += 1, R3088 += 1 };
  s0 -> s0 [0, 65535] { R3165 += 1, R3166 += 1 };
  s0 -> s2 [0, 65535] { R3166 += 1, R3087 += 1, R3088 += 1 };
  s0 -> s3 [65, 65] { R3166 += 1, R3088 += 1 };
  s0 -> s4 [65, 65] { R3166 += 1, R3088 += 1 };
  s0 -> s1 [66, 65535] { R3166 += 1, R3088 += 1 };
  s1 -> s1 [0, 64] { R3166 += 1, R3088 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3166 += 1 };
  s1 -> s3 [65, 65] { R3166 += 1, R3088 += 1 };
  s1 -> s4 [65, 65] { R3166 += 1, R3088 += 1 };
  s1 -> s1 [66, 65535] { R3166 += 1, R3088 += 1 };
  s2 -> s1 [0, 64] { R3166 += 1, R3088 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3166 += 1, R3087 += 1, R3088 += 1 };
  s2 -> s3 [65, 65] { R3166 += 1, R3088 += 1 };
  s2 -> s4 [65, 65] { R3166 += 1, R3088 += 1 };
  s2 -> s1 [66, 65535] { R3166 += 1, R3088 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3166 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3166 += 1 };
  s4 -> s4 [0, 65535] { R3166 += 1, R3088 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3166 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s0 -> s0 [0, 65535] { R3167 += 1, R3168 += 1 };
  s0 -> s2 [0, 65535] { R3168 += 1, R3089 += 1, R3090 += 1 };
  s0 -> s3 [65, 65] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s0 -> s4 [65, 65] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s0 -> s1 [66, 65535] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s1 -> s1 [0, 64] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s1 -> s1 [0, 65535] { R3168 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s1 -> s4 [65, 65] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s1 -> s1 [66, 65535] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s2 -> s1 [0, 64] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s2 -> s2 [0, 65535] { R3168 += 1, R3089 += 1, R3090 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s2 -> s4 [65, 65] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s2 -> s1 [66, 65535] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s3 -> s3 [0, 65535] { R3168 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3168 += 1 };
  s4 -> s4 [0, 65535] { R3168 += 1, R3090 += 1, R2717 += 1, R2718 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3168 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R3170 += 1, R3092 += 1 };
  s0 -> s2 [0, 65535] { R3170 += 1, R3091 += 1, R3092 += 1 };
  s0 -> s0 [0, 65535] { R3169 += 1, R3170 += 1 };
  s0 -> s3 [65, 65] { R3170 += 1, R3092 += 1 };
  s0 -> s4 [65, 65] { R3170 += 1, R3092 += 1 };
  s0 -> s1 [66, 65535] { R3170 += 1, R3092 += 1 };
  s1 -> s1 [0, 64] { R3170 += 1, R3092 += 1 };
  s1 -> s1 [0, 65535] { R3170 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3170 += 1, R3092 += 1 };
  s1 -> s4 [65, 65] { R3170 += 1, R3092 += 1 };
  s1 -> s1 [66, 65535] { R3170 += 1, R3092 += 1 };
  s2 -> s1 [0, 64] { R3170 += 1, R3092 += 1 };
  s2 -> s2 [0, 65535] { R3170 += 1, R3091 += 1, R3092 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3170 += 1, R3092 += 1 };
  s2 -> s4 [65, 65] { R3170 += 1, R3092 += 1 };
  s2 -> s1 [66, 65535] { R3170 += 1, R3092 += 1 };
  s3 -> s3 [0, 65535] { R3170 += 1, R3092 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3170 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3170 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s2 [0, 64] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s0 -> s3 [0, 65535] { R3172 += 1, R3093 += 1, R3094 += 1 };
  s0 -> s0 [0, 65535] { R3171 += 1, R3172 += 1 };
  s0 -> s4 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s5 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s6 [65, 65] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s0 -> s7 [65, 65] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s0 -> s1 [66, 79] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s2 [66, 65535] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s0 -> s8 [80, 80] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s0 -> s1 [81, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s1 -> s1 [0, 64] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s1 -> s4 [65, 65] { R3172 += 1, R3094 += 1 };
  s1 -> s5 [65, 65] { R3172 += 1, R3094 += 1 };
  s1 -> s1 [66, 79] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s1 -> s1 [66, 65535] { R3172 += 1, R3094 += 1 };
  s1 -> s8 [80, 80] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s1 -> s1 [81, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s1 [0, 64] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s2 [0, 64] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s2 -> s4 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s5 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s6 [65, 65] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s2 -> s7 [65, 65] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s2 -> s1 [66, 79] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s2 [66, 65535] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s2 -> s8 [80, 80] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s2 -> s1 [81, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s3 -> s1 [0, 64] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s3 -> s2 [0, 64] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s3 -> s3 [0, 65535] { R3172 += 1, R3093 += 1, R3094 += 1 };
  s3 -> s4 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s3 -> s5 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s3 -> s6 [65, 65] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s3 -> s7 [65, 65] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s3 -> s1 [66, 79] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s3 -> s2 [66, 65535] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s3 -> s8 [80, 80] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s3 -> s1 [81, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s5 -> s5 [0, 79] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s5 -> s5 [0, 65535] { R3172 += 1, R3094 += 1 };
  s5 -> s10 [80, 80] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s5 -> s5 [81, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s7 -> s5 [0, 79] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s7 -> s7 [0, 65535] { R3172 += 1, R3094 += 1, R3023 += 1, R3024 += 1 };
  s7 -> s10 [80, 80] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s7 -> s5 [81, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s8 -> s8 [0, 64] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s8 -> s8 [0, 65535] { R3172 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s8 -> s11 [65, 65] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s8 -> s8 [66, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3172 += 1, R3094 += 1, R3024 += 1, R3025 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R3172 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3172 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R3172 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R3062 && R3 = R3172 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R3029 = 0 && R3030 = R3062 && R3031 = 0 && R3032 = R3062 && R3033 = 0 && R3034 = R3062 && R3035 = 0 && R3036 = R3062 && R3037 = 0 && R3038 = R3062 && R3039 = 0 && R3040 = R3062 && R3041 = 0 && R3042 = R3062 && R3043 = 0 && R3044 = R3062 && R3045 = 0 && R3046 = R3062 && R3047 = 0 && R3048 = R3062 && R3049 = 0 && R3050 = R3062 && R3051 = 0 && R3052 = R3062 && R3053 = 0 && R3054 = R3062 && R3055 = 0 && R3056 = R3062 && R3057 = 0 && R3058 = R3062 && R3059 = 0 && R3060 = R3062 && R3061 = 0 && R3065 = 0 && R3066 = 0 && R3085 = 0 && R3086 = 0 && R3093 = 0 && R3094 = 0 && R3095 = 10 && R3096 = R3172 && R3097 = 10 && R3098 = R3172 && R3099 = 10 && R3100 = R3172 && R3101 = 10 && R3102 = R3172 && R3103 = 10 && R3104 = R3172 && R3105 = 10 && R3106 = R3172 && R3107 = 10 && R3108 = R3172 && R3109 = 10 && R3110 = R3172 && R3111 = 10 && R3112 = R3172 && R3113 = 10 && R3114 = R3172 && R3115 = 10 && R3116 = R3172 && R3117 = 10 && R3118 = R3172 && R3119 = 10 && R3120 = R3172 && R3121 = 10 && R3122 = R3172 && R3123 = 10 && R3124 = R3172 && R3125 = 10 && R3126 = R3172 && R3127 = 10 && R3128 = R3172 && R3129 = 10 && R3130 = R3172 && R3131 = 10 && R3132 = R3172 && R3133 = 10 && R3134 = R3172 && R3135 = 10 && R3136 = R3172 && R3137 = 10 && R3138 = R3172 && R3139 = 10 && R3140 = R3172 && R3141 = 10 && R3142 = R3172 && R3143 = 10 && R3144 = R3172 && R3145 = 10 && R3146 = R3172 && R3147 = 10 && R3148 = R3172 && R3149 = 10 && R3150 = R3172 && R3151 = 10 && R3152 = R3172 && R3153 = 10 && R3154 = R3172 && R3155 = 10 && R3156 = R3172 && R3157 = 10 && R3158 = R3172 && R3159 = 10 && R3160 = R3172 && R3161 = 10 && R3162 = R3172 && R3163 = 10 && R3164 = R3172 && R3165 = 10 && R3166 = R3172 && R3167 = 10 && R3168 = R3172 && R3169 = 10 && R3170 = R3172 && R3171 = 10 && R436 + R433 + R3028 + R3025 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R3062 && 9 < R3172 && (R20 = 0 || (R3063 = 0 && R3064 = 0)) && (R20 = 0 || (R3067 = 0 && R3068 = 0)) && (R20 = 0 || (R3069 = 0 && R3070 = 0)) && (R20 = 0 || (R3071 = 0 && R3072 = 0)) && (R20 = 0 || (R3073 = 0 && R3074 = 0)) && (R20 = 0 || (R3075 = 0 && R3076 = 0)) && (R20 = 0 || (R3077 = 0 && R3078 = 0)) && (R20 = 0 || (R3079 = 0 && R3080 = 0)) && (R20 = 0 || (R3081 = 0 && R3082 = 0)) && (R20 = 0 || (R3083 = 0 && R3084 = 0)) && (R20 = 0 || (R3087 = 0 && R3088 = 0)) && (R20 = 0 || (R3089 = 0 && R3090 = 0)) && (R20 = 0 || (R3091 = 0 && R3092 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R434 + R431 = 0 && R435 + R432 = 0)) && (R2716 + R2713 = 0 || (R2714 + R2711 = 0 && R2715 + R2712 = 0)) && (R2722 + R2719 = 0 || (R2720 + R2717 = 0 && R2721 + R2718 = 0)) && (R2722 + R2719 = 0 || (R3026 + R3023 = 0 && R3027 + R3024 = 0));
// End of Parikh automata intersection problem
