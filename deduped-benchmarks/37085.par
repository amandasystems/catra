// Parikh automata intersection problem, generated by OSTRICH+
counter int R11, R12, R19, R1955, R1956, R1957, R1958, R1959, R1960, R1961, R1962, R1963, R1964, R1965, R1966, R1967, R1968, R1969, R1970, R1971, R1972, R1973, R1974, R1975, R1976, R1977, R1978, R1979, R1980, R1981, R1982, R1983, R1984, R1985, R1986, R1987, R1988, R1989, R1990, R1991, R1992, R1993, R1994, R1995, R1996, R1997, R1998, R1999, R2, R20, R2000, R2001, R2002, R2003, R2004, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R2087, R2088, R2089, R2090, R2091, R2092, R2093, R2094, R2095, R2096, R2097, R2098, R2099, R21, R2100, R2101, R2102, R2103, R2104, R2105, R2106, R2107, R2108, R2109, R2110, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2034 += 1 };
  s0 -> s0 [0, 65535] { R2033 += 1, R2034 += 1 };
  s0 -> s1 [45, 45] { R2034 += 1 };
  s0 -> s2 [46, 46] { R2034 += 1 };
  s0 -> s1 [48, 62] { R2034 += 1 };
  s0 -> s3 [65, 65] { R2034 += 1 };
  s0 -> s1 [66, 65535] { R2034 += 1 };
  s1 -> s1 [0, 43] { R2034 += 1 };
  s1 -> s1 [45, 45] { R2034 += 1 };
  s1 -> s2 [46, 46] { R2034 += 1 };
  s1 -> s1 [48, 62] { R2034 += 1 };
  s1 -> s3 [65, 65] { R2034 += 1 };
  s1 -> s1 [66, 65535] { R2034 += 1 };
  s2 -> s1 [0, 43] { R2034 += 1 };
  s2 -> s1 [45, 45] { R2034 += 1 };
  s2 -> s2 [46, 46] { R2034 += 1 };
  s2 -> s1 [48, 62] { R2034 += 1 };
  s2 -> s3 [65, 65] { R2034 += 1 };
  s2 -> s1 [66, 114] { R2034 += 1 };
  s2 -> s8 [115, 115] { R2034 += 1 };
  s2 -> s1 [116, 65535] { R2034 += 1 };
  s3 -> s3 [0, 43] { R2034 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2034 += 1 };
  s3 -> s4 [46, 46] { R2034 += 1 };
  s3 -> s3 [48, 62] { R2034 += 1 };
  s3 -> s3 [65, 65535] { R2034 += 1 };
  s4 -> s3 [0, 43] { R2034 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2034 += 1 };
  s4 -> s4 [46, 46] { R2034 += 1 };
  s4 -> s3 [48, 62] { R2034 += 1 };
  s4 -> s3 [65, 114] { R2034 += 1 };
  s4 -> s5 [115, 115] { R2034 += 1 };
  s4 -> s3 [116, 65535] { R2034 += 1 };
  s5 -> s3 [0, 43] { R2034 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2034 += 1 };
  s5 -> s4 [46, 46] { R2034 += 1 };
  s5 -> s3 [48, 62] { R2034 += 1 };
  s5 -> s3 [65, 110] { R2034 += 1 };
  s5 -> s6 [111, 111] { R2034 += 1 };
  s5 -> s3 [112, 65535] { R2034 += 1 };
  s6 -> s3 [0, 43] { R2034 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2034 += 1 };
  s6 -> s4 [46, 46] { R2034 += 1 };
  s6 -> s3 [48, 62] { R2034 += 1 };
  s6 -> s3 [65, 98] { R2034 += 1 };
  s6 -> s7 [99, 99] { R2034 += 1 };
  s6 -> s3 [100, 65535] { R2034 += 1 };
  s7 -> s3 [0, 43] { R2034 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2034 += 1 };
  s7 -> s4 [46, 46] { R2034 += 1 };
  s7 -> s3 [48, 62] { R2034 += 1 };
  s7 -> s3 [65, 106] { R2034 += 1 };
  s7 -> s3 [108, 65535] { R2034 += 1 };
  s8 -> s1 [0, 43] { R2034 += 1 };
  s8 -> s1 [45, 45] { R2034 += 1 };
  s8 -> s2 [46, 46] { R2034 += 1 };
  s8 -> s1 [48, 62] { R2034 += 1 };
  s8 -> s3 [65, 65] { R2034 += 1 };
  s8 -> s1 [66, 110] { R2034 += 1 };
  s8 -> s9 [111, 111] { R2034 += 1 };
  s8 -> s1 [112, 65535] { R2034 += 1 };
  s9 -> s1 [0, 43] { R2034 += 1 };
  s9 -> s1 [45, 45] { R2034 += 1 };
  s9 -> s2 [46, 46] { R2034 += 1 };
  s9 -> s1 [48, 62] { R2034 += 1 };
  s9 -> s3 [65, 65] { R2034 += 1 };
  s9 -> s1 [66, 98] { R2034 += 1 };
  s9 -> s10 [99, 99] { R2034 += 1 };
  s9 -> s1 [100, 65535] { R2034 += 1 };
  s10 -> s1 [0, 43] { R2034 += 1 };
  s10 -> s1 [45, 45] { R2034 += 1 };
  s10 -> s2 [46, 46] { R2034 += 1 };
  s10 -> s1 [48, 62] { R2034 += 1 };
  s10 -> s3 [65, 65] { R2034 += 1 };
  s10 -> s1 [66, 106] { R2034 += 1 };
  s10 -> s1 [108, 65535] { R2034 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2035 += 1, R2036 += 1 };
  s0 -> s1 [0, 65535] { R2036 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2036 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2038 += 1 };
  s0 -> s2 [0, 65535] { R2038 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R2037 += 1, R2038 += 1 };
  s0 -> s3 [58, 58] { R2038 += 1 };
  s0 -> s1 [59, 65535] { R2038 += 1 };
  s1 -> s1 [0, 57] { R2038 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2038 += 1 };
  s1 -> s1 [59, 65535] { R2038 += 1 };
  s2 -> s1 [0, 57] { R2038 += 1 };
  s2 -> s2 [0, 65535] { R2038 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2038 += 1 };
  s2 -> s1 [59, 65535] { R2038 += 1 };
  s3 -> s3 [0, 65535] { R2038 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2040 += 1 };
  s0 -> s0 [0, 65535] { R2039 += 1, R2040 += 1 };
  s0 -> s2 [0, 65535] { R2040 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R2040 += 1 };
  s0 -> s1 [66, 65535] { R2040 += 1 };
  s1 -> s1 [0, 64] { R2040 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2040 += 1 };
  s1 -> s1 [66, 65535] { R2040 += 1 };
  s2 -> s1 [0, 64] { R2040 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2040 += 1, R12 += 1 };
  s2 -> s3 [65, 65] { R2040 += 1 };
  s2 -> s1 [66, 65535] { R2040 += 1 };
  s3 -> s3 [0, 65535] { R2040 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2042 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R2041 += 1, R2042 += 1 };
  s0 -> s2 [0, 65535] { R2042 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R2042 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R2042 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R2042 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2042 += 1, R22 += 1 };
  s2 -> s1 [0, 90] { R2042 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R2042 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2042 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R2042 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R2042 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2042 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R2043 += 1, R2044 += 1 };
  s0 -> s1 [0, 65535] { R2044 += 1, R23 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R2044 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R2044 += 1, R23 += 1, R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2044 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2044 += 1 };
  s2 -> s2 [0, 65535] { R2044 += 1, R24 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2044 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2046 += 1, R1968 += 1 };
  s0 -> s0 [0, 65535] { R2045 += 1, R2046 += 1 };
  s0 -> s2 [0, 65535] { R2046 += 1, R1967 += 1, R1968 += 1 };
  s0 -> s1 [66, 65535] { R2046 += 1, R1968 += 1 };
  s1 -> s1 [0, 64] { R2046 += 1, R1968 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2046 += 1 };
  s1 -> s1 [66, 65535] { R2046 += 1, R1968 += 1 };
  s2 -> s1 [0, 64] { R2046 += 1, R1968 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2046 += 1, R1967 += 1, R1968 += 1 };
  s2 -> s1 [66, 65535] { R2046 += 1, R1968 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2047 += 1, R2048 += 1 };
  s0 -> s1 [0, 65535] { R2048 += 1, R1970 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R2048 += 1, R1969 += 1, R1970 += 1 };
  s1 -> s4 [0, 65535] { R2048 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2048 += 1, R1970 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2048 += 1, R1970 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R2048 += 1, R1969 += 1, R1970 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2048 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2050 += 1, R1972 += 1 };
  s0 -> s0 [0, 65535] { R2049 += 1, R2050 += 1 };
  s0 -> s2 [0, 65535] { R2050 += 1, R1971 += 1, R1972 += 1 };
  s0 -> s1 [80, 65535] { R2050 += 1, R1972 += 1 };
  s1 -> s1 [0, 65] { R2050 += 1, R1972 += 1 };
  s1 -> s1 [0, 65535] { R2050 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2050 += 1, R1972 += 1 };
  s2 -> s1 [0, 65] { R2050 += 1, R1972 += 1 };
  s2 -> s2 [0, 65535] { R2050 += 1, R1971 += 1, R1972 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R2050 += 1, R1972 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2052 += 1, R1973 += 1, R1974 += 1 };
  s0 -> s0 [0, 65535] { R2051 += 1, R2052 += 1 };
  s0 -> s2 [0, 65535] { R2052 += 1, R1974 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R2052 += 1, R1973 += 1, R1974 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2052 += 1, R1974 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2052 += 1, R1974 += 1, R406 += 1 };
  s2 -> s4 [0, 65535] { R2052 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2052 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R2054 += 1, R1976 += 1 };
  s0 -> s2 [0, 65535] { R2054 += 1, R1976 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R2053 += 1, R2054 += 1 };
  s0 -> s3 [0, 65535] { R2054 += 1, R1975 += 1, R1976 += 1 };
  s0 -> s1 [84, 65535] { R2054 += 1, R1976 += 1 };
  s1 -> s1 [0, 82] { R2054 += 1, R1976 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2054 += 1 };
  s1 -> s1 [84, 65535] { R2054 += 1, R1976 += 1 };
  s2 -> s1 [0, 82] { R2054 += 1, R1976 += 1 };
  s2 -> s5 [0, 65535] { R2054 += 1 };
  s2 -> s2 [0, 65535] { R2054 += 1, R1976 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [84, 65535] { R2054 += 1, R1976 += 1 };
  s3 -> s1 [0, 82] { R2054 += 1, R1976 += 1 };
  s3 -> s2 [0, 65535] { R2054 += 1, R1976 += 1, R408 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2054 += 1, R1975 += 1, R1976 += 1 };
  s3 -> s1 [84, 65535] { R2054 += 1, R1976 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2054 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2056 += 1, R1978 += 1 };
  s0 -> s2 [0, 65535] { R2056 += 1, R1978 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R2056 += 1, R1977 += 1, R1978 += 1 };
  s0 -> s0 [0, 65535] { R2055 += 1, R2056 += 1 };
  s0 -> s1 [81, 65535] { R2056 += 1, R1978 += 1 };
  s1 -> s1 [0, 79] { R2056 += 1, R1978 += 1 };
  s1 -> s1 [0, 65535] { R2056 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R2056 += 1, R1978 += 1 };
  s2 -> s1 [0, 79] { R2056 += 1, R1978 += 1 };
  s2 -> s5 [0, 65535] { R2056 += 1 };
  s2 -> s2 [0, 65535] { R2056 += 1, R1978 += 1, R410 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R2056 += 1, R1978 += 1 };
  s3 -> s1 [0, 79] { R2056 += 1, R1978 += 1 };
  s3 -> s2 [0, 65535] { R2056 += 1, R1978 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R2056 += 1, R1977 += 1, R1978 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R2056 += 1, R1978 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2056 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2058 += 1, R1980 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R2058 += 1, R1979 += 1, R1980 += 1 };
  s0 -> s0 [0, 65535] { R2057 += 1, R2058 += 1 };
  s0 -> s3 [0, 65535] { R2058 += 1, R1980 += 1, R415 += 1, R416 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2058 += 1, R1980 += 1, R414 += 1, R415 += 1 };
  s1 -> s5 [0, 65535] { R2058 += 1 };
  s1 -> s3 [0, 65535] { R2058 += 1, R1980 += 1, R415 += 1, R416 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2058 += 1, R1980 += 1, R414 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R2058 += 1, R1979 += 1, R1980 += 1 };
  s2 -> s3 [0, 65535] { R2058 += 1, R1980 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2058 += 1 };
  s3 -> s6 [0, 65535] { R2058 += 1, R1980 += 1 };
  s3 -> s3 [0, 65535] { R2058 += 1, R1980 += 1, R415 += 1, R416 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2058 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2058 += 1 };
  s6 -> s6 [0, 65535] { R2058 += 1, R1980 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2059 += 1, R2060 += 1 };
  s0 -> s1 [0, 65535] { R2060 += 1, R1981 += 1, R1982 += 1 };
  s0 -> s2 [0, 65535] { R2060 += 1, R1982 += 1 };
  s1 -> s1 [0, 65535] { R2060 += 1, R1981 += 1, R1982 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2060 += 1, R1982 += 1 };
  s2 -> s3 [0, 65535] { R2060 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2060 += 1, R1982 += 1 };
  s3 -> s3 [0, 65535] { R2060 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R2062 += 1, R1984 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R2061 += 1, R2062 += 1 };
  s0 -> s2 [0, 65535] { R2062 += 1, R1984 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [0, 65535] { R2062 += 1, R1983 += 1, R1984 += 1 };
  s0 -> s1 [81, 65535] { R2062 += 1, R1984 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R2062 += 1, R1984 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2062 += 1 };
  s1 -> s1 [0, 65535] { R2062 += 1, R1984 += 1 };
  s1 -> s1 [81, 65535] { R2062 += 1, R1984 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R2062 += 1, R1984 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2062 += 1 };
  s2 -> s2 [0, 65535] { R2062 += 1, R1984 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R2062 += 1, R1984 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R2062 += 1, R1984 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2062 += 1, R1984 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R2062 += 1, R1983 += 1, R1984 += 1 };
  s3 -> s1 [81, 65535] { R2062 += 1, R1984 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2062 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2064 += 1, R1985 += 1, R1986 += 1 };
  s0 -> s0 [0, 65535] { R2063 += 1, R2064 += 1 };
  s0 -> s2 [0, 65535] { R2064 += 1, R1986 += 1, R425 += 1, R426 += 1 };
  s0 -> s3 [0, 65535] { R2064 += 1, R1986 += 1, R424 += 1, R425 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2064 += 1, R1985 += 1, R1986 += 1 };
  s1 -> s2 [0, 65535] { R2064 += 1, R1986 += 1, R425 += 1, R426 += 1 };
  s1 -> s3 [0, 65535] { R2064 += 1, R1986 += 1, R424 += 1, R425 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2064 += 1, R1986 += 1 };
  s2 -> s5 [0, 65535] { R2064 += 1 };
  s2 -> s2 [0, 65535] { R2064 += 1, R1986 += 1, R425 += 1, R426 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2064 += 1 };
  s3 -> s2 [0, 65535] { R2064 += 1, R1986 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R2064 += 1, R1986 += 1, R424 += 1, R425 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2064 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2064 += 1, R1986 += 1 };
  s6 -> s5 [0, 65535] { R2064 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R2066 += 1, R1988 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R2065 += 1, R2066 += 1 };
  s0 -> s3 [0, 65535] { R2066 += 1, R1987 += 1, R1988 += 1 };
  s0 -> s1 [91, 107] { R2066 += 1, R1988 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R2066 += 1, R1988 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R2066 += 1 };
  s1 -> s1 [0, 65535] { R2066 += 1, R1988 += 1 };
  s1 -> s1 [91, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2066 += 1, R1988 += 1, R429 += 1, R430 += 1 };
  s2 -> s6 [0, 65535] { R2066 += 1 };
  s2 -> s1 [91, 107] { R2066 += 1, R1988 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R2066 += 1, R1988 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2066 += 1, R1988 += 1, R429 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R2066 += 1, R1987 += 1, R1988 += 1 };
  s3 -> s1 [91, 107] { R2066 += 1, R1988 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R2066 += 1, R1988 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2066 += 1 };
  s4 -> s4 [0, 65535] { R2066 += 1, R1988 += 1 };
  s4 -> s1 [91, 110] { R2066 += 1, R1988 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R2066 += 1, R1988 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2066 += 1 };
  s7 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R2066 += 1 };
  s7 -> s7 [0, 65535] { R2066 += 1, R1988 += 1 };
  s7 -> s1 [91, 98] { R2066 += 1, R1988 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R2066 += 1, R1988 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R2066 += 1 };
  s8 -> s8 [0, 65535] { R2066 += 1, R1988 += 1 };
  s8 -> s1 [91, 96] { R2066 += 1, R1988 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R2066 += 1, R1988 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R2066 += 1 };
  s9 -> s9 [0, 65535] { R2066 += 1, R1988 += 1 };
  s9 -> s1 [91, 107] { R2066 += 1, R1988 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R2066 += 1, R1988 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s6 [0, 65535] { R2066 += 1 };
  s10 -> s10 [0, 65535] { R2066 += 1, R1988 += 1 };
  s10 -> s1 [91, 103] { R2066 += 1, R1988 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R2066 += 1, R1988 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s6 [0, 65535] { R2066 += 1 };
  s11 -> s11 [0, 65535] { R2066 += 1, R1988 += 1 };
  s11 -> s1 [91, 110] { R2066 += 1, R1988 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R2066 += 1, R1988 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R2066 += 1, R1988 += 1 };
  s12 -> s6 [0, 65535] { R2066 += 1 };
  s12 -> s1 [91, 114] { R2066 += 1, R1988 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R2066 += 1, R1988 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R2066 += 1 };
  s13 -> s13 [0, 65535] { R2066 += 1, R1988 += 1 };
  s13 -> s1 [91, 115] { R2066 += 1, R1988 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R2066 += 1, R1988 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R2066 += 1, R1988 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R2066 += 1, R1988 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R2068 += 1, R1990 += 1, R435 += 1, R436 += 1 };
  s0 -> s0 [0, 65535] { R2067 += 1, R2068 += 1 };
  s0 -> s2 [0, 65535] { R2068 += 1, R1990 += 1, R434 += 1, R435 += 1 };
  s0 -> s3 [0, 65535] { R2068 += 1, R1989 += 1, R1990 += 1 };
  s1 -> s6 [0, 65535] { R2068 += 1, R1990 += 1 };
  s1 -> s1 [0, 65535] { R2068 += 1, R1990 += 1, R435 += 1, R436 += 1 };
  s1 -> s5 [0, 65535] { R2068 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2068 += 1, R1990 += 1, R435 += 1, R436 += 1 };
  s2 -> s5 [0, 65535] { R2068 += 1 };
  s2 -> s2 [0, 65535] { R2068 += 1, R1990 += 1, R434 += 1, R435 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2068 += 1, R1990 += 1, R435 += 1, R436 += 1 };
  s3 -> s2 [0, 65535] { R2068 += 1, R1990 += 1, R434 += 1, R435 += 1 };
  s3 -> s3 [0, 65535] { R2068 += 1, R1989 += 1, R1990 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2068 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2068 += 1, R1990 += 1 };
  s6 -> s5 [0, 65535] { R2068 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R2070 += 1, R1992 += 1, R440 += 1, R441 += 1 };
  s0 -> s0 [0, 65535] { R2069 += 1, R2070 += 1 };
  s0 -> s2 [0, 65535] { R2070 += 1, R1992 += 1, R441 += 1, R442 += 1 };
  s0 -> s3 [0, 65535] { R2070 += 1, R1991 += 1, R1992 += 1 };
  s1 -> s6 [0, 65535] { R2070 += 1 };
  s1 -> s1 [0, 65535] { R2070 += 1, R1992 += 1, R440 += 1, R441 += 1 };
  s1 -> s2 [0, 65535] { R2070 += 1, R1992 += 1, R441 += 1, R442 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2070 += 1, R1992 += 1 };
  s2 -> s6 [0, 65535] { R2070 += 1 };
  s2 -> s2 [0, 65535] { R2070 += 1, R1992 += 1, R441 += 1, R442 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2070 += 1, R1992 += 1, R440 += 1, R441 += 1 };
  s3 -> s2 [0, 65535] { R2070 += 1, R1992 += 1, R441 += 1, R442 += 1 };
  s3 -> s3 [0, 65535] { R2070 += 1, R1991 += 1, R1992 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2070 += 1, R1992 += 1 };
  s5 -> s6 [0, 65535] { R2070 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2070 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R2072 += 1, R1993 += 1, R1994 += 1 };
  s0 -> s0 [0, 65535] { R2071 += 1, R2072 += 1 };
  s0 -> s2 [0, 65535] { R2072 += 1, R1994 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2072 += 1, R1993 += 1, R1994 += 1 };
  s1 -> s2 [0, 65535] { R2072 += 1, R1994 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2072 += 1 };
  s2 -> s2 [0, 65535] { R2072 += 1, R1994 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2072 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R2074 += 1, R1996 += 1 };
  s0 -> s2 [0, 65535] { R2074 += 1, R1995 += 1, R1996 += 1 };
  s0 -> s0 [0, 65535] { R2073 += 1, R2074 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2074 += 1, R1996 += 1 };
  s1 -> s4 [0, 65535] { R2074 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2074 += 1, R1996 += 1 };
  s2 -> s2 [0, 65535] { R2074 += 1, R1995 += 1, R1996 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2074 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R2076 += 1, R1997 += 1, R1998 += 1 };
  s0 -> s2 [0, 65535] { R2076 += 1, R1998 += 1 };
  s0 -> s0 [0, 65535] { R2075 += 1, R2076 += 1 };
  s1 -> s1 [0, 65535] { R2076 += 1, R1997 += 1, R1998 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2076 += 1, R1998 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2076 += 1, R1998 += 1 };
  s2 -> s4 [0, 65535] { R2076 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2076 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 79] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s0 -> s2 [0, 65535] { R2078 += 1, R2000 += 1, R1964 += 1, R1965 += 1 };
  s0 -> s0 [0, 65535] { R2077 += 1, R2078 += 1 };
  s0 -> s3 [0, 65535] { R2078 += 1, R1999 += 1, R2000 += 1 };
  s0 -> s4 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s0 -> s5 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s0 -> s1 [81, 65535] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s1 -> s1 [0, 79] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s1 -> s1 [0, 65535] { R2078 += 1, R2000 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R2078 += 1 };
  s1 -> s4 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s1 -> s5 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s1 -> s1 [81, 65535] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s2 -> s1 [0, 79] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R2078 += 1 };
  s2 -> s2 [0, 65535] { R2078 += 1, R2000 += 1, R1964 += 1, R1965 += 1 };
  s2 -> s4 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s2 -> s5 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s2 -> s1 [81, 65535] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s3 -> s1 [0, 79] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R2078 += 1, R2000 += 1, R1964 += 1, R1965 += 1 };
  s3 -> s3 [0, 65535] { R2078 += 1, R1999 += 1, R2000 += 1 };
  s3 -> s4 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s3 -> s5 [80, 80] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s3 -> s1 [81, 65535] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s4 -> s4 [0, 65535] { R2078 += 1, R2000 += 1, R1965 += 1, R1966 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R2078 += 1 };
  s4 -> s8 [0, 65535] { R2078 += 1, R2000 += 1 };
  s5 -> s5 [0, 65535] { R2078 += 1, R2000 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R2078 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2078 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R2078 += 1 };
  s8 -> s8 [0, 65535] { R2078 += 1, R2000 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R2080 += 1, R2002 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R2080 += 1, R2001 += 1, R2002 += 1 };
  s0 -> s0 [0, 65535] { R2079 += 1, R2080 += 1 };
  s1 -> s1 [0, 65535] { R2080 += 1, R2002 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R2080 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2080 += 1, R2002 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R2080 += 1, R2001 += 1, R2002 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2080 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2082 += 1, R2004 += 1 };
  s0 -> s0 [0, 65535] { R2081 += 1, R2082 += 1 };
  s0 -> s2 [0, 65535] { R2082 += 1, R2003 += 1, R2004 += 1 };
  s0 -> s3 [65, 65] { R2082 += 1, R2004 += 1 };
  s0 -> s4 [65, 65] { R2082 += 1, R2004 += 1 };
  s0 -> s5 [80, 80] { R2082 += 1, R2004 += 1 };
  s0 -> s1 [81, 65535] { R2082 += 1, R2004 += 1 };
  s1 -> s1 [0, 64] { R2082 += 1, R2004 += 1 };
  s1 -> s3 [65, 65] { R2082 += 1, R2004 += 1 };
  s1 -> s4 [65, 65] { R2082 += 1, R2004 += 1 };
  s1 -> s5 [80, 80] { R2082 += 1, R2004 += 1 };
  s1 -> s1 [81, 65535] { R2082 += 1, R2004 += 1 };
  s2 -> s1 [0, 64] { R2082 += 1, R2004 += 1 };
  s2 -> s2 [0, 65535] { R2082 += 1, R2003 += 1, R2004 += 1 };
  s2 -> s3 [65, 65] { R2082 += 1, R2004 += 1 };
  s2 -> s4 [65, 65] { R2082 += 1, R2004 += 1 };
  s2 -> s5 [80, 80] { R2082 += 1, R2004 += 1 };
  s2 -> s1 [81, 65535] { R2082 += 1, R2004 += 1 };
  s3 -> s3 [0, 65] { R2082 += 1, R2004 += 1 };
  s3 -> s7 [80, 80] { R2082 += 1, R2004 += 1 };
  s3 -> s3 [81, 65535] { R2082 += 1, R2004 += 1 };
  s5 -> s5 [0, 64] { R2082 += 1, R2004 += 1 };
  s5 -> s5 [0, 65535] { R2082 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2082 += 1, R2004 += 1 };
  s5 -> s8 [65, 65] { R2082 += 1, R2004 += 1 };
  s5 -> s5 [80, 65535] { R2082 += 1, R2004 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2082 += 1, R2004 += 1 };
  s7 -> s7 [0, 65535] { R2082 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R2082 += 1, R2004 += 1 };
  s8 -> s8 [0, 65535] { R2082 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R2084 += 1, R2006 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R2084 += 1, R2005 += 1, R2006 += 1 };
  s0 -> s0 [0, 65535] { R2083 += 1, R2084 += 1 };
  s0 -> s3 [65, 65] { R2084 += 1, R2006 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R2084 += 1, R2006 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R2084 += 1, R2006 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R2084 += 1, R2006 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R2084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2084 += 1, R2006 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R2084 += 1, R2006 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R2084 += 1, R2006 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R2084 += 1, R2006 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R2084 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2084 += 1, R2006 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R2084 += 1, R2006 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R2084 += 1, R2006 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R2084 += 1, R2006 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R2084 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2084 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2084 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R2086 += 1, R2008 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R2086 += 1, R2007 += 1, R2008 += 1 };
  s0 -> s0 [0, 65535] { R2085 += 1, R2086 += 1 };
  s0 -> s3 [65, 65] { R2086 += 1, R2008 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R2086 += 1, R2008 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R2086 += 1, R2008 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R2086 += 1, R2008 += 1, R407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2086 += 1 };
  s1 -> s3 [65, 65] { R2086 += 1, R2008 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R2086 += 1, R2008 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R2086 += 1, R2008 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R2086 += 1, R2008 += 1, R407 += 1 };
  s2 -> s2 [0, 65535] { R2086 += 1, R2007 += 1, R2008 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2086 += 1, R2008 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R2086 += 1, R2008 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R2086 += 1, R2008 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R2086 += 1, R2008 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2086 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2086 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2086 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R2088 += 1, R2010 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R2087 += 1, R2088 += 1 };
  s0 -> s2 [0, 65535] { R2088 += 1, R2009 += 1, R2010 += 1 };
  s0 -> s3 [65, 65] { R2088 += 1, R2010 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R2088 += 1, R2010 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R2088 += 1, R2010 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R2088 += 1, R2010 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R2088 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2088 += 1, R2010 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R2088 += 1, R2010 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R2088 += 1, R2010 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R2088 += 1, R2010 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2088 += 1, R2009 += 1, R2010 += 1 };
  s2 -> s3 [65, 65] { R2088 += 1, R2010 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R2088 += 1, R2010 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R2088 += 1, R2010 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R2088 += 1, R2010 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2088 += 1 };
  s4 -> s4 [0, 65535] { R2088 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2088 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R2089 += 1, R2090 += 1 };
  s0 -> s2 [0, 65535] { R2090 += 1, R2011 += 1, R2012 += 1 };
  s0 -> s3 [65, 65] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2090 += 1 };
  s1 -> s3 [65, 65] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2090 += 1, R2011 += 1, R2012 += 1 };
  s2 -> s3 [65, 65] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R2090 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2090 += 1, R2012 += 1, R411 += 1, R412 += 1 };
  s4 -> s6 [0, 65535] { R2090 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2090 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R2092 += 1, R2014 += 1 };
  s0 -> s0 [0, 65535] { R2091 += 1, R2092 += 1 };
  s0 -> s2 [0, 65535] { R2092 += 1, R2013 += 1, R2014 += 1 };
  s0 -> s3 [65, 65] { R2092 += 1, R2014 += 1 };
  s0 -> s4 [65, 65] { R2092 += 1, R2014 += 1 };
  s0 -> s1 [66, 65535] { R2092 += 1, R2014 += 1 };
  s1 -> s1 [0, 64] { R2092 += 1, R2014 += 1 };
  s1 -> s1 [0, 65535] { R2092 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2092 += 1, R2014 += 1 };
  s1 -> s4 [65, 65] { R2092 += 1, R2014 += 1 };
  s1 -> s1 [66, 65535] { R2092 += 1, R2014 += 1 };
  s2 -> s1 [0, 64] { R2092 += 1, R2014 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2092 += 1, R2013 += 1, R2014 += 1 };
  s2 -> s3 [65, 65] { R2092 += 1, R2014 += 1 };
  s2 -> s4 [65, 65] { R2092 += 1, R2014 += 1 };
  s2 -> s1 [66, 65535] { R2092 += 1, R2014 += 1 };
  s3 -> s3 [0, 65535] { R2092 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2092 += 1, R2014 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2092 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2092 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R2093 += 1, R2094 += 1 };
  s0 -> s2 [0, 65535] { R2094 += 1, R2015 += 1, R2016 += 1 };
  s0 -> s3 [65, 65] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R2094 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2094 += 1, R2015 += 1, R2016 += 1 };
  s2 -> s3 [65, 65] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s3 -> s6 [0, 65535] { R2094 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2094 += 1, R2016 += 1, R417 += 1, R418 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2094 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2094 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R2096 += 1, R2017 += 1, R2018 += 1 };
  s0 -> s0 [0, 65535] { R2095 += 1, R2096 += 1 };
  s0 -> s3 [65, 65] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2096 += 1 };
  s1 -> s3 [65, 65] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2096 += 1, R2017 += 1, R2018 += 1 };
  s2 -> s3 [65, 65] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s3 -> s6 [0, 65535] { R2096 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2096 += 1, R2018 += 1, R421 += 1, R422 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2096 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2096 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R2097 += 1, R2098 += 1 };
  s0 -> s2 [0, 65535] { R2098 += 1, R2019 += 1, R2020 += 1 };
  s0 -> s3 [65, 65] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R2098 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2098 += 1, R2019 += 1, R2020 += 1 };
  s2 -> s3 [65, 65] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R2098 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2098 += 1, R2020 += 1, R427 += 1, R428 += 1 };
  s4 -> s5 [0, 65535] { R2098 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2098 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s0 -> s2 [0, 65535] { R2100 += 1, R2021 += 1, R2022 += 1 };
  s0 -> s0 [0, 65535] { R2099 += 1, R2100 += 1 };
  s0 -> s3 [65, 65] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s0 -> s4 [65, 65] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s0 -> s1 [66, 65535] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 64] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 65535] { R2100 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s1 -> s4 [65, 65] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [66, 65535] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [0, 64] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s2 -> s2 [0, 65535] { R2100 += 1, R2021 += 1, R2022 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [65, 65] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [66, 65535] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s3 -> s3 [0, 65535] { R2100 += 1, R2022 += 1, R431 += 1, R432 += 1 };
  s3 -> s6 [0, 65535] { R2100 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2100 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2100 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s0 -> s0 [0, 65535] { R2101 += 1, R2102 += 1 };
  s0 -> s2 [0, 65535] { R2102 += 1, R2023 += 1, R2024 += 1 };
  s0 -> s3 [65, 65] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s0 -> s4 [65, 65] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s0 -> s1 [66, 65535] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s1 -> s1 [0, 64] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2102 += 1 };
  s1 -> s3 [65, 65] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s1 -> s4 [65, 65] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s1 -> s1 [66, 65535] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s2 -> s1 [0, 64] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2102 += 1, R2023 += 1, R2024 += 1 };
  s2 -> s3 [65, 65] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s2 -> s4 [65, 65] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s2 -> s1 [66, 65535] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s3 -> s3 [0, 65535] { R2102 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2102 += 1 };
  s4 -> s4 [0, 65535] { R2102 += 1, R2024 += 1, R437 += 1, R438 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2102 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R2104 += 1, R2026 += 1 };
  s0 -> s0 [0, 65535] { R2103 += 1, R2104 += 1 };
  s0 -> s2 [0, 65535] { R2104 += 1, R2025 += 1, R2026 += 1 };
  s0 -> s3 [65, 65] { R2104 += 1, R2026 += 1 };
  s0 -> s4 [65, 65] { R2104 += 1, R2026 += 1 };
  s0 -> s1 [66, 65535] { R2104 += 1, R2026 += 1 };
  s1 -> s1 [0, 64] { R2104 += 1, R2026 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2104 += 1 };
  s1 -> s3 [65, 65] { R2104 += 1, R2026 += 1 };
  s1 -> s4 [65, 65] { R2104 += 1, R2026 += 1 };
  s1 -> s1 [66, 65535] { R2104 += 1, R2026 += 1 };
  s2 -> s1 [0, 64] { R2104 += 1, R2026 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2104 += 1, R2025 += 1, R2026 += 1 };
  s2 -> s3 [65, 65] { R2104 += 1, R2026 += 1 };
  s2 -> s4 [65, 65] { R2104 += 1, R2026 += 1 };
  s2 -> s1 [66, 65535] { R2104 += 1, R2026 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2104 += 1, R2026 += 1 };
  s3 -> s6 [0, 65535] { R2104 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2104 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2104 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s0 -> s2 [0, 64] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s0 -> s3 [0, 65535] { R2106 += 1, R2027 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2105 += 1, R2106 += 1 };
  s0 -> s4 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s0 -> s5 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s0 -> s6 [65, 65] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s0 -> s7 [65, 65] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s0 -> s1 [66, 65535] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s0 -> s2 [66, 65535] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s1 -> s1 [0, 64] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s1 -> s2 [0, 64] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s1 -> s4 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s1 -> s5 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s1 -> s6 [65, 65] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s1 -> s7 [65, 65] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s1 -> s1 [66, 65535] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s1 -> s2 [66, 65535] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s2 -> s2 [0, 64] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s2 -> s11 [0, 64] { R2106 += 1, R2028 += 1 };
  s2 -> s4 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s2 -> s5 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s2 -> s8 [65, 65] { R2106 += 1, R2028 += 1 };
  s2 -> s12 [65, 65] { R2106 += 1, R2028 += 1 };
  s2 -> s2 [66, 65535] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s2 -> s11 [66, 65535] { R2106 += 1, R2028 += 1 };
  s3 -> s1 [0, 64] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s3 -> s2 [0, 64] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s3 -> s3 [0, 65535] { R2106 += 1, R2027 += 1, R2028 += 1 };
  s3 -> s4 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s3 -> s5 [65, 65] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s3 -> s6 [65, 65] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s3 -> s7 [65, 65] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s3 -> s1 [66, 65535] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s3 -> s2 [66, 65535] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s4 -> s4 [0, 65535] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s4 -> s8 [0, 65535] { R2106 += 1, R2028 += 1 };
  s7 -> s4 [0, 65535] { R2106 += 1, R2028 += 1, R1956 += 1, R1957 += 1 };
  s7 -> s7 [0, 65535] { R2106 += 1, R2028 += 1, R1955 += 1, R1956 += 1 };
  s8 -> s8 [0, 65535] { R2106 += 1, R2028 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2106 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2106 += 1 };
  s11 -> s11 [0, 64] { R2106 += 1, R2028 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2106 += 1 };
  s11 -> s8 [65, 65] { R2106 += 1, R2028 += 1 };
  s11 -> s12 [65, 65] { R2106 += 1, R2028 += 1 };
  s11 -> s11 [66, 65535] { R2106 += 1, R2028 += 1 };
  s12 -> s12 [0, 65535] { R2106 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R2108 += 1, R2030 += 1 };
  s0 -> s2 [0, 65535] { R2108 += 1, R2029 += 1, R2030 += 1 };
  s0 -> s0 [0, 65535] { R2107 += 1, R2108 += 1 };
  s0 -> s3 [65, 65] { R2108 += 1, R2030 += 1 };
  s0 -> s4 [65, 65] { R2108 += 1, R2030 += 1 };
  s0 -> s1 [66, 65535] { R2108 += 1, R2030 += 1 };
  s1 -> s1 [0, 64] { R2108 += 1, R2030 += 1 };
  s1 -> s1 [0, 65535] { R2108 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2108 += 1, R2030 += 1 };
  s1 -> s4 [65, 65] { R2108 += 1, R2030 += 1 };
  s1 -> s1 [66, 65535] { R2108 += 1, R2030 += 1 };
  s2 -> s1 [0, 64] { R2108 += 1, R2030 += 1 };
  s2 -> s2 [0, 65535] { R2108 += 1, R2029 += 1, R2030 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2108 += 1, R2030 += 1 };
  s2 -> s4 [65, 65] { R2108 += 1, R2030 += 1 };
  s2 -> s1 [66, 65535] { R2108 += 1, R2030 += 1 };
  s3 -> s3 [0, 65535] { R2108 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2108 += 1 };
  s4 -> s4 [0, 65535] { R2108 += 1, R2030 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2108 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s0 -> s0 [0, 65535] { R2109 += 1, R2110 += 1 };
  s0 -> s2 [0, 65535] { R2110 += 1, R2031 += 1, R2032 += 1 };
  s0 -> s3 [65, 65] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s0 -> s4 [65, 65] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s0 -> s1 [66, 65535] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s1 -> s1 [0, 64] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s1 -> s1 [0, 65535] { R2110 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s1 -> s4 [65, 65] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s1 -> s1 [66, 65535] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s2 -> s1 [0, 64] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2110 += 1, R2031 += 1, R2032 += 1 };
  s2 -> s3 [65, 65] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s2 -> s4 [65, 65] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s2 -> s1 [66, 65535] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2110 += 1 };
  s3 -> s3 [0, 65535] { R2110 += 1, R2032 += 1, R1961 += 1, R1962 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2110 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2110 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R2000 && R3 = R2110 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R1967 = 0 && R1968 = R2000 && R1969 = 0 && R1970 = R2000 && R1971 = 0 && R1972 = R2000 && R1973 = 0 && R1974 = R2000 && R1975 = 0 && R1976 = R2000 && R1977 = 0 && R1978 = R2000 && R1979 = 0 && R1980 = R2000 && R1981 = 0 && R1982 = R2000 && R1983 = 0 && R1984 = R2000 && R1985 = 0 && R1986 = R2000 && R1987 = 0 && R1988 = R2000 && R1989 = 0 && R1990 = R2000 && R1991 = 0 && R1992 = R2000 && R1993 = 0 && R1994 = R2000 && R1995 = 0 && R1996 = R2000 && R1997 = 0 && R1998 = R2000 && R1999 = 0 && R2003 = 0 && R2004 = 0 && R2027 = 0 && R2028 = 0 && R2033 = 10 && R2034 = R2110 && R2035 = 10 && R2036 = R2110 && R2037 = 10 && R2038 = R2110 && R2039 = 10 && R2040 = R2110 && R2041 = 10 && R2042 = R2110 && R2043 = 10 && R2044 = R2110 && R2045 = 10 && R2046 = R2110 && R2047 = 10 && R2048 = R2110 && R2049 = 10 && R2050 = R2110 && R2051 = 10 && R2052 = R2110 && R2053 = 10 && R2054 = R2110 && R2055 = 10 && R2056 = R2110 && R2057 = 10 && R2058 = R2110 && R2059 = 10 && R2060 = R2110 && R2061 = 10 && R2062 = R2110 && R2063 = 10 && R2064 = R2110 && R2065 = 10 && R2066 = R2110 && R2067 = 10 && R2068 = R2110 && R2069 = 10 && R2070 = R2110 && R2071 = 10 && R2072 = R2110 && R2073 = 10 && R2074 = R2110 && R2075 = 10 && R2076 = R2110 && R2077 = 10 && R2078 = R2110 && R2079 = 10 && R2080 = R2110 && R2081 = 10 && R2082 = R2110 && R2083 = 10 && R2084 = R2110 && R2085 = 10 && R2086 = R2110 && R2087 = 10 && R2088 = R2110 && R2089 = 10 && R2090 = R2110 && R2091 = 10 && R2092 = R2110 && R2093 = 10 && R2094 = R2110 && R2095 = 10 && R2096 = R2110 && R2097 = 10 && R2098 = R2110 && R2099 = 10 && R2100 = R2110 && R2101 = 10 && R2102 = R2110 && R2103 = 10 && R2104 = R2110 && R2105 = 10 && R2106 = R2110 && R2107 = 10 && R2108 = R2110 && R2109 = 10 && R436 + R433 + R1966 + R1963 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R2000 && 9 < R2110 && (R20 = 0 || (R2001 = 0 && R2002 = 0)) && (R20 = 0 || (R2005 = 0 && R2006 = 0)) && (R20 = 0 || (R2007 = 0 && R2008 = 0)) && (R20 = 0 || (R2009 = 0 && R2010 = 0)) && (R20 = 0 || (R2011 = 0 && R2012 = 0)) && (R20 = 0 || (R2013 = 0 && R2014 = 0)) && (R20 = 0 || (R2015 = 0 && R2016 = 0)) && (R20 = 0 || (R2017 = 0 && R2018 = 0)) && (R20 = 0 || (R2019 = 0 && R2020 = 0)) && (R20 = 0 || (R2021 = 0 && R2022 = 0)) && (R20 = 0 || (R2023 = 0 && R2024 = 0)) && (R20 = 0 || (R2025 = 0 && R2026 = 0)) && (R20 = 0 || (R2029 = 0 && R2030 = 0)) && (R20 = 0 || (R2031 = 0 && R2032 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R434 + R431 = 0 && R435 + R432 = 0)) && (R442 + R439 = 0 || (R440 + R437 = 0 && R441 + R438 = 0)) && (R1960 + R1957 = 0 || (R1958 + R1955 = 0 && R1959 + R1956 = 0)) && (R1960 + R1957 = 0 || (R1964 + R1961 = 0 && R1965 + R1962 = 0));
// End of Parikh automata intersection problem
