// Parikh automata intersection problem, generated by OSTRICH+
counter int R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R972 += 1 };
  s0 -> s0 [0, 65535] { R971 += 1, R972 += 1 };
  s0 -> s1 [45, 45] { R972 += 1 };
  s0 -> s2 [46, 46] { R972 += 1 };
  s0 -> s1 [48, 62] { R972 += 1 };
  s0 -> s3 [65, 65] { R972 += 1 };
  s0 -> s1 [66, 65535] { R972 += 1 };
  s1 -> s1 [0, 43] { R972 += 1 };
  s1 -> s1 [45, 45] { R972 += 1 };
  s1 -> s2 [46, 46] { R972 += 1 };
  s1 -> s1 [48, 62] { R972 += 1 };
  s1 -> s3 [65, 65] { R972 += 1 };
  s1 -> s1 [66, 65535] { R972 += 1 };
  s2 -> s1 [0, 43] { R972 += 1 };
  s2 -> s1 [45, 45] { R972 += 1 };
  s2 -> s2 [46, 46] { R972 += 1 };
  s2 -> s1 [48, 62] { R972 += 1 };
  s2 -> s3 [65, 65] { R972 += 1 };
  s2 -> s1 [66, 114] { R972 += 1 };
  s2 -> s8 [115, 115] { R972 += 1 };
  s2 -> s1 [116, 65535] { R972 += 1 };
  s3 -> s3 [0, 43] { R972 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R972 += 1 };
  s3 -> s4 [46, 46] { R972 += 1 };
  s3 -> s3 [48, 62] { R972 += 1 };
  s3 -> s3 [65, 65535] { R972 += 1 };
  s4 -> s3 [0, 43] { R972 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R972 += 1 };
  s4 -> s4 [46, 46] { R972 += 1 };
  s4 -> s3 [48, 62] { R972 += 1 };
  s4 -> s3 [65, 114] { R972 += 1 };
  s4 -> s5 [115, 115] { R972 += 1 };
  s4 -> s3 [116, 65535] { R972 += 1 };
  s5 -> s3 [0, 43] { R972 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R972 += 1 };
  s5 -> s4 [46, 46] { R972 += 1 };
  s5 -> s3 [48, 62] { R972 += 1 };
  s5 -> s3 [65, 110] { R972 += 1 };
  s5 -> s6 [111, 111] { R972 += 1 };
  s5 -> s3 [112, 65535] { R972 += 1 };
  s6 -> s3 [0, 43] { R972 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R972 += 1 };
  s6 -> s4 [46, 46] { R972 += 1 };
  s6 -> s3 [48, 62] { R972 += 1 };
  s6 -> s3 [65, 98] { R972 += 1 };
  s6 -> s7 [99, 99] { R972 += 1 };
  s6 -> s3 [100, 65535] { R972 += 1 };
  s7 -> s3 [0, 43] { R972 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R972 += 1 };
  s7 -> s4 [46, 46] { R972 += 1 };
  s7 -> s3 [48, 62] { R972 += 1 };
  s7 -> s3 [65, 106] { R972 += 1 };
  s7 -> s3 [108, 65535] { R972 += 1 };
  s8 -> s1 [0, 43] { R972 += 1 };
  s8 -> s1 [45, 45] { R972 += 1 };
  s8 -> s2 [46, 46] { R972 += 1 };
  s8 -> s1 [48, 62] { R972 += 1 };
  s8 -> s3 [65, 65] { R972 += 1 };
  s8 -> s1 [66, 110] { R972 += 1 };
  s8 -> s9 [111, 111] { R972 += 1 };
  s8 -> s1 [112, 65535] { R972 += 1 };
  s9 -> s1 [0, 43] { R972 += 1 };
  s9 -> s1 [45, 45] { R972 += 1 };
  s9 -> s2 [46, 46] { R972 += 1 };
  s9 -> s1 [48, 62] { R972 += 1 };
  s9 -> s3 [65, 65] { R972 += 1 };
  s9 -> s1 [66, 98] { R972 += 1 };
  s9 -> s10 [99, 99] { R972 += 1 };
  s9 -> s1 [100, 65535] { R972 += 1 };
  s10 -> s1 [0, 43] { R972 += 1 };
  s10 -> s1 [45, 45] { R972 += 1 };
  s10 -> s2 [46, 46] { R972 += 1 };
  s10 -> s1 [48, 62] { R972 += 1 };
  s10 -> s3 [65, 65] { R972 += 1 };
  s10 -> s1 [66, 106] { R972 += 1 };
  s10 -> s1 [108, 65535] { R972 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R974 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R973 += 1, R974 += 1 };
  s1 -> s1 [0, 65535] { R974 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R976 += 1 };
  s0 -> s0 [0, 65535] { R975 += 1, R976 += 1 };
  s0 -> s2 [0, 65535] { R976 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R976 += 1 };
  s0 -> s1 [59, 65535] { R976 += 1 };
  s1 -> s1 [0, 57] { R976 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R976 += 1 };
  s1 -> s1 [59, 65535] { R976 += 1 };
  s2 -> s1 [0, 57] { R976 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R976 += 1, R11 += 1 };
  s2 -> s3 [58, 58] { R976 += 1 };
  s2 -> s1 [59, 65535] { R976 += 1 };
  s3 -> s3 [0, 65535] { R976 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R978 += 1 };
  s0 -> s0 [0, 65535] { R977 += 1, R978 += 1 };
  s0 -> s2 [0, 65535] { R978 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R978 += 1 };
  s0 -> s1 [66, 65535] { R978 += 1 };
  s1 -> s1 [0, 64] { R978 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R978 += 1 };
  s1 -> s1 [66, 65535] { R978 += 1 };
  s2 -> s1 [0, 64] { R978 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R978 += 1, R12 += 1 };
  s2 -> s3 [65, 65] { R978 += 1 };
  s2 -> s1 [66, 65535] { R978 += 1 };
  s3 -> s3 [0, 65535] { R978 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R980 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R979 += 1, R980 += 1 };
  s0 -> s2 [0, 65535] { R980 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R980 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R980 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R980 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R980 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R980 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R980 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R980 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R980 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R980 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R980 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R982 += 1, R24 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R981 += 1, R982 += 1 };
  s0 -> s2 [0, 65535] { R982 += 1, R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R982 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R982 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R982 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R982 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R982 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R984 += 1, R906 += 1 };
  s0 -> s0 [0, 65535] { R983 += 1, R984 += 1 };
  s0 -> s2 [0, 65535] { R984 += 1, R905 += 1, R906 += 1 };
  s0 -> s1 [66, 65535] { R984 += 1, R906 += 1 };
  s1 -> s1 [0, 64] { R984 += 1, R906 += 1 };
  s1 -> s1 [0, 65535] { R984 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R984 += 1, R906 += 1 };
  s2 -> s1 [0, 64] { R984 += 1, R906 += 1 };
  s2 -> s2 [0, 65535] { R984 += 1, R905 += 1, R906 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R984 += 1, R906 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R986 += 1, R907 += 1, R908 += 1 };
  s0 -> s2 [0, 65535] { R986 += 1, R908 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R985 += 1, R986 += 1 };
  s1 -> s1 [0, 65535] { R986 += 1, R907 += 1, R908 += 1 };
  s1 -> s2 [0, 65535] { R986 += 1, R908 += 1, R19 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R986 += 1, R908 += 1, R19 += 1 };
  s2 -> s3 [0, 65535] { R986 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R986 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R988 += 1, R910 += 1 };
  s0 -> s0 [0, 65535] { R987 += 1, R988 += 1 };
  s0 -> s2 [0, 65535] { R988 += 1, R909 += 1, R910 += 1 };
  s0 -> s1 [80, 65535] { R988 += 1, R910 += 1 };
  s1 -> s1 [0, 65] { R988 += 1, R910 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R988 += 1 };
  s1 -> s1 [80, 65535] { R988 += 1, R910 += 1 };
  s2 -> s1 [0, 65] { R988 += 1, R910 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R988 += 1, R909 += 1, R910 += 1 };
  s2 -> s1 [80, 65535] { R988 += 1, R910 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R990 += 1, R912 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R990 += 1, R911 += 1, R912 += 1 };
  s0 -> s0 [0, 65535] { R989 += 1, R990 += 1 };
  s1 -> s1 [0, 65535] { R990 += 1, R912 += 1, R406 += 1 };
  s1 -> s4 [0, 65535] { R990 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R990 += 1, R912 += 1, R406 += 1 };
  s2 -> s2 [0, 65535] { R990 += 1, R911 += 1, R912 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R990 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R992 += 1, R914 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s0 -> s2 [0, 65535] { R992 += 1, R914 += 1, R408 += 1 };
  s0 -> s3 [0, 65535] { R992 += 1, R913 += 1, R914 += 1 };
  s0 -> s1 [84, 65535] { R992 += 1, R914 += 1 };
  s1 -> s1 [0, 82] { R992 += 1, R914 += 1 };
  s1 -> s1 [0, 65535] { R992 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [84, 65535] { R992 += 1, R914 += 1 };
  s2 -> s1 [0, 82] { R992 += 1, R914 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R992 += 1, R914 += 1, R408 += 1 };
  s2 -> s5 [0, 65535] { R992 += 1 };
  s2 -> s1 [84, 65535] { R992 += 1, R914 += 1 };
  s3 -> s1 [0, 82] { R992 += 1, R914 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R992 += 1, R914 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R992 += 1, R913 += 1, R914 += 1 };
  s3 -> s1 [84, 65535] { R992 += 1, R914 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R992 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R994 += 1, R916 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R915 += 1, R916 += 1 };
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s0 -> s3 [0, 65535] { R994 += 1, R916 += 1, R410 += 1 };
  s0 -> s1 [81, 65535] { R994 += 1, R916 += 1 };
  s1 -> s1 [0, 79] { R994 += 1, R916 += 1 };
  s1 -> s1 [0, 65535] { R994 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R994 += 1, R916 += 1 };
  s2 -> s1 [0, 79] { R994 += 1, R916 += 1 };
  s2 -> s2 [0, 65535] { R994 += 1, R915 += 1, R916 += 1 };
  s2 -> s3 [0, 65535] { R994 += 1, R916 += 1, R410 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R994 += 1, R916 += 1 };
  s3 -> s1 [0, 79] { R994 += 1, R916 += 1 };
  s3 -> s3 [0, 65535] { R994 += 1, R916 += 1, R410 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R994 += 1 };
  s3 -> s1 [81, 65535] { R994 += 1, R916 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R994 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R996 += 1, R917 += 1, R918 += 1 };
  s0 -> s2 [0, 65535] { R996 += 1, R918 += 1, R414 += 1, R415 += 1 };
  s0 -> s0 [0, 65535] { R995 += 1, R996 += 1 };
  s0 -> s3 [0, 65535] { R996 += 1, R918 += 1, R415 += 1, R416 += 1 };
  s1 -> s1 [0, 65535] { R996 += 1, R917 += 1, R918 += 1 };
  s1 -> s2 [0, 65535] { R996 += 1, R918 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R996 += 1, R918 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R996 += 1, R918 += 1, R414 += 1, R415 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R996 += 1 };
  s2 -> s3 [0, 65535] { R996 += 1, R918 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R996 += 1 };
  s3 -> s6 [0, 65535] { R996 += 1, R918 += 1 };
  s3 -> s3 [0, 65535] { R996 += 1, R918 += 1, R415 += 1, R416 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R996 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R996 += 1 };
  s6 -> s6 [0, 65535] { R996 += 1, R918 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R998 += 1, R919 += 1, R920 += 1 };
  s0 -> s0 [0, 65535] { R997 += 1, R998 += 1 };
  s0 -> s2 [0, 65535] { R998 += 1, R920 += 1 };
  s1 -> s1 [0, 65535] { R998 += 1, R919 += 1, R920 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R998 += 1, R920 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R998 += 1, R920 += 1 };
  s2 -> s4 [0, 65535] { R998 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R998 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R1000 += 1, R922 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R1000 += 1, R922 += 1, R419 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R999 += 1, R1000 += 1 };
  s0 -> s3 [0, 65535] { R1000 += 1, R921 += 1, R922 += 1 };
  s0 -> s1 [81, 65535] { R1000 += 1, R922 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R1000 += 1, R922 += 1, R420 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1000 += 1 };
  s1 -> s1 [0, 65535] { R1000 += 1, R922 += 1 };
  s1 -> s1 [81, 65535] { R1000 += 1, R922 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R1000 += 1, R922 += 1, R420 += 1 };
  s2 -> s2 [0, 65535] { R1000 += 1, R922 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1000 += 1 };
  s2 -> s1 [81, 65535] { R1000 += 1, R922 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R1000 += 1, R922 += 1, R420 += 1 };
  s3 -> s2 [0, 65535] { R1000 += 1, R922 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1000 += 1, R921 += 1, R922 += 1 };
  s3 -> s1 [81, 65535] { R1000 += 1, R922 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1000 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1001 += 1, R1002 += 1 };
  s0 -> s1 [0, 65535] { R1002 += 1, R924 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R1002 += 1, R924 += 1, R425 += 1, R426 += 1 };
  s0 -> s3 [0, 65535] { R1002 += 1, R923 += 1, R924 += 1 };
  s1 -> s5 [0, 65535] { R1002 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1002 += 1, R924 += 1, R424 += 1, R425 += 1 };
  s1 -> s2 [0, 65535] { R1002 += 1, R924 += 1, R425 += 1, R426 += 1 };
  s2 -> s5 [0, 65535] { R1002 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1002 += 1, R924 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535] { R1002 += 1, R924 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1002 += 1, R924 += 1, R424 += 1, R425 += 1 };
  s3 -> s2 [0, 65535] { R1002 += 1, R924 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R1002 += 1, R923 += 1, R924 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1002 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1002 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1002 += 1, R924 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R1004 += 1, R925 += 1, R926 += 1 };
  s0 -> s3 [0, 65535] { R1004 += 1, R926 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R1003 += 1, R1004 += 1 };
  s0 -> s1 [91, 107] { R1004 += 1, R926 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R1004 += 1, R926 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R1004 += 1 };
  s1 -> s1 [0, 65535] { R1004 += 1, R926 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R1004 += 1, R925 += 1, R926 += 1 };
  s2 -> s3 [0, 65535] { R1004 += 1, R926 += 1, R429 += 1, R430 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R1004 += 1, R926 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R1004 += 1, R926 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s3 -> s5 [0, 65535] { R1004 += 1 };
  s3 -> s3 [0, 65535] { R1004 += 1, R926 += 1, R429 += 1, R430 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R1004 += 1, R926 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R1004 += 1, R926 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R1004 += 1 };
  s4 -> s4 [0, 65535] { R1004 += 1, R926 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [91, 110] { R1004 += 1, R926 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R1004 += 1, R926 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R1004 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R1004 += 1 };
  s7 -> s7 [0, 65535] { R1004 += 1, R926 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R1004 += 1, R926 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R1004 += 1, R926 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R1004 += 1 };
  s8 -> s8 [0, 65535] { R1004 += 1, R926 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s1 [91, 96] { R1004 += 1, R926 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R1004 += 1, R926 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s9 -> s5 [0, 65535] { R1004 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1004 += 1, R926 += 1 };
  s9 -> s1 [91, 107] { R1004 += 1, R926 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R1004 += 1, R926 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s10 -> s5 [0, 65535] { R1004 += 1 };
  s10 -> s10 [0, 65535] { R1004 += 1, R926 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s1 [91, 103] { R1004 += 1, R926 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R1004 += 1, R926 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s11 -> s5 [0, 65535] { R1004 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R1004 += 1, R926 += 1 };
  s11 -> s1 [91, 110] { R1004 += 1, R926 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R1004 += 1, R926 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R1004 += 1 };
  s12 -> s12 [0, 65535] { R1004 += 1, R926 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s1 [91, 114] { R1004 += 1, R926 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R1004 += 1, R926 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s13 -> s5 [0, 65535] { R1004 += 1 };
  s13 -> s13 [0, 65535] { R1004 += 1, R926 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s1 [91, 115] { R1004 += 1, R926 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R1004 += 1, R926 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R1004 += 1, R926 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R1004 += 1, R926 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s0 [0, 65535] { R1005 += 1, R1006 += 1 };
  s0 -> s1 [0, 65535] { R1006 += 1, R927 += 1, R928 += 1 };
  s0 -> s2 [0, 65535] { R1006 += 1, R928 += 1, R434 += 1, R435 += 1 };
  s0 -> s3 [0, 65535] { R1006 += 1, R928 += 1, R435 += 1, R436 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1006 += 1, R927 += 1, R928 += 1 };
  s1 -> s2 [0, 65535] { R1006 += 1, R928 += 1, R434 += 1, R435 += 1 };
  s1 -> s3 [0, 65535] { R1006 += 1, R928 += 1, R435 += 1, R436 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1006 += 1 };
  s2 -> s2 [0, 65535] { R1006 += 1, R928 += 1, R434 += 1, R435 += 1 };
  s2 -> s3 [0, 65535] { R1006 += 1, R928 += 1, R435 += 1, R436 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1006 += 1, R928 += 1 };
  s3 -> s6 [0, 65535] { R1006 += 1 };
  s3 -> s3 [0, 65535] { R1006 += 1, R928 += 1, R435 += 1, R436 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1006 += 1, R928 += 1 };
  s5 -> s6 [0, 65535] { R1006 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1006 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R1008 += 1, R930 += 1, R440 += 1, R441 += 1 };
  s0 -> s0 [0, 65535] { R1007 += 1, R1008 += 1 };
  s0 -> s2 [0, 65535] { R1008 += 1, R930 += 1, R441 += 1, R442 += 1 };
  s0 -> s3 [0, 65535] { R1008 += 1, R929 += 1, R930 += 1 };
  s1 -> s5 [0, 65535] { R1008 += 1 };
  s1 -> s1 [0, 65535] { R1008 += 1, R930 += 1, R440 += 1, R441 += 1 };
  s1 -> s2 [0, 65535] { R1008 += 1, R930 += 1, R441 += 1, R442 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1008 += 1 };
  s2 -> s2 [0, 65535] { R1008 += 1, R930 += 1, R441 += 1, R442 += 1 };
  s2 -> s6 [0, 65535] { R1008 += 1, R930 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1008 += 1, R930 += 1, R440 += 1, R441 += 1 };
  s3 -> s2 [0, 65535] { R1008 += 1, R930 += 1, R441 += 1, R442 += 1 };
  s3 -> s3 [0, 65535] { R1008 += 1, R929 += 1, R930 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1008 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1008 += 1 };
  s6 -> s6 [0, 65535] { R1008 += 1, R930 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R1010 += 1, R932 += 1 };
  s0 -> s0 [0, 65535] { R1009 += 1, R1010 += 1 };
  s0 -> s2 [0, 65535] { R1010 += 1, R931 += 1, R932 += 1 };
  s1 -> s1 [0, 65535] { R1010 += 1, R932 += 1 };
  s1 -> s4 [0, 65535] { R1010 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1010 += 1, R932 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1010 += 1, R931 += 1, R932 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1010 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1012 += 1, R934 += 1, R447 += 1, R448 += 1 };
  s0 -> s0 [0, 65535] { R1011 += 1, R1012 += 1 };
  s0 -> s2 [0, 65535] { R1012 += 1, R933 += 1, R934 += 1 };
  s0 -> s3 [0, 65535] { R1012 += 1, R934 += 1, R446 += 1, R447 += 1 };
  s1 -> s4 [0, 65535] { R1012 += 1 };
  s1 -> s6 [0, 65535] { R1012 += 1, R934 += 1 };
  s1 -> s1 [0, 65535] { R1012 += 1, R934 += 1, R447 += 1, R448 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1012 += 1, R934 += 1, R447 += 1, R448 += 1 };
  s2 -> s2 [0, 65535] { R1012 += 1, R933 += 1, R934 += 1 };
  s2 -> s3 [0, 65535] { R1012 += 1, R934 += 1, R446 += 1, R447 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1012 += 1 };
  s3 -> s1 [0, 65535] { R1012 += 1, R934 += 1, R447 += 1, R448 += 1 };
  s3 -> s3 [0, 65535] { R1012 += 1, R934 += 1, R446 += 1, R447 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1012 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R1012 += 1 };
  s6 -> s6 [0, 65535] { R1012 += 1, R934 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s0 [0, 65535] { R1013 += 1, R1014 += 1 };
  s0 -> s1 [0, 65535] { R1014 += 1, R936 += 1 };
  s0 -> s2 [0, 65535] { R1014 += 1, R935 += 1, R936 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1014 += 1 };
  s1 -> s1 [0, 65535] { R1014 += 1, R936 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1014 += 1, R936 += 1 };
  s2 -> s2 [0, 65535] { R1014 += 1, R935 += 1, R936 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1014 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s0 [0, 65535] { R1015 += 1, R1016 += 1 };
  s0 -> s1 [0, 65535] { R1016 += 1, R938 += 1 };
  s0 -> s2 [0, 65535] { R1016 += 1, R937 += 1, R938 += 1 };
  s1 -> s1 [0, 65535] { R1016 += 1, R938 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1016 += 1 };
  s2 -> s1 [0, 65535] { R1016 += 1, R938 += 1 };
  s2 -> s2 [0, 65535] { R1016 += 1, R937 += 1, R938 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1016 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R1017 += 1, R1018 += 1 };
  s0 -> s1 [0, 65535] { R1018 += 1, R940 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R1018 += 1, R939 += 1, R940 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1018 += 1 };
  s1 -> s1 [0, 65535] { R1018 += 1, R940 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1018 += 1, R940 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R1018 += 1, R939 += 1, R940 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1018 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1020 += 1, R942 += 1 };
  s0 -> s0 [0, 65535] { R1019 += 1, R1020 += 1 };
  s0 -> s2 [0, 65535] { R1020 += 1, R941 += 1, R942 += 1 };
  s0 -> s3 [65, 65] { R1020 += 1, R942 += 1 };
  s0 -> s4 [65, 65] { R1020 += 1, R942 += 1 };
  s0 -> s5 [80, 80] { R1020 += 1, R942 += 1 };
  s0 -> s1 [81, 65535] { R1020 += 1, R942 += 1 };
  s1 -> s1 [0, 64] { R1020 += 1, R942 += 1 };
  s1 -> s3 [65, 65] { R1020 += 1, R942 += 1 };
  s1 -> s4 [65, 65] { R1020 += 1, R942 += 1 };
  s1 -> s5 [80, 80] { R1020 += 1, R942 += 1 };
  s1 -> s1 [81, 65535] { R1020 += 1, R942 += 1 };
  s2 -> s1 [0, 64] { R1020 += 1, R942 += 1 };
  s2 -> s2 [0, 65535] { R1020 += 1, R941 += 1, R942 += 1 };
  s2 -> s3 [65, 65] { R1020 += 1, R942 += 1 };
  s2 -> s4 [65, 65] { R1020 += 1, R942 += 1 };
  s2 -> s5 [80, 80] { R1020 += 1, R942 += 1 };
  s2 -> s1 [81, 65535] { R1020 += 1, R942 += 1 };
  s4 -> s4 [0, 65] { R1020 += 1, R942 += 1 };
  s4 -> s8 [80, 80] { R1020 += 1, R942 += 1 };
  s4 -> s4 [81, 65535] { R1020 += 1, R942 += 1 };
  s5 -> s5 [0, 64] { R1020 += 1, R942 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1020 += 1 };
  s5 -> s7 [65, 65] { R1020 += 1, R942 += 1 };
  s5 -> s8 [65, 65] { R1020 += 1, R942 += 1 };
  s5 -> s5 [80, 65535] { R1020 += 1, R942 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1020 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R1020 += 1, R942 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1020 += 1 };
  s8 -> s8 [80, 65535] { R1020 += 1, R942 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R1022 += 1, R944 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R1022 += 1, R943 += 1, R944 += 1 };
  s0 -> s0 [0, 65535] { R1021 += 1, R1022 += 1 };
  s0 -> s3 [65, 65] { R1022 += 1, R944 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R1022 += 1, R944 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R1022 += 1, R944 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R1022 += 1, R944 += 1, R405 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1022 += 1 };
  s1 -> s3 [65, 65] { R1022 += 1, R944 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R1022 += 1, R944 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R1022 += 1, R944 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R1022 += 1, R944 += 1, R405 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1022 += 1, R943 += 1, R944 += 1 };
  s2 -> s3 [65, 65] { R1022 += 1, R944 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R1022 += 1, R944 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R1022 += 1, R944 += 1, R405 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1022 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1022 += 1 };
  s4 -> s4 [0, 65535] { R1022 += 1, R944 += 1, R405 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1022 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R1024 += 1, R946 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R1023 += 1, R1024 += 1 };
  s0 -> s2 [0, 65535] { R1024 += 1, R945 += 1, R946 += 1 };
  s0 -> s3 [65, 65] { R1024 += 1, R946 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R1024 += 1, R946 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R1024 += 1, R946 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R1024 += 1, R946 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R1024 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1024 += 1, R946 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R1024 += 1, R946 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R1024 += 1, R946 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R1024 += 1, R946 += 1, R407 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1024 += 1, R945 += 1, R946 += 1 };
  s2 -> s3 [65, 65] { R1024 += 1, R946 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R1024 += 1, R946 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R1024 += 1, R946 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R1024 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1024 += 1, R946 += 1, R407 += 1 };
  s4 -> s5 [0, 65535] { R1024 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1024 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R1026 += 1, R948 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R1026 += 1, R947 += 1, R948 += 1 };
  s0 -> s0 [0, 65535] { R1025 += 1, R1026 += 1 };
  s0 -> s3 [65, 65] { R1026 += 1, R948 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R1026 += 1, R948 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R1026 += 1, R948 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R1026 += 1, R948 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R1026 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1026 += 1, R948 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R1026 += 1, R948 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R1026 += 1, R948 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R1026 += 1, R948 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R1026 += 1, R947 += 1, R948 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1026 += 1, R948 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R1026 += 1, R948 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R1026 += 1, R948 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R1026 += 1, R948 += 1, R409 += 1 };
  s3 -> s6 [0, 65535] { R1026 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1026 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1026 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R1028 += 1, R949 += 1, R950 += 1 };
  s0 -> s0 [0, 65535] { R1027 += 1, R1028 += 1 };
  s0 -> s3 [65, 65] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 65535] { R1028 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R1028 += 1, R949 += 1, R950 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R1028 += 1, R950 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535] { R1028 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1028 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1028 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R1030 += 1, R952 += 1 };
  s0 -> s2 [0, 65535] { R1030 += 1, R951 += 1, R952 += 1 };
  s0 -> s0 [0, 65535] { R1029 += 1, R1030 += 1 };
  s0 -> s3 [65, 65] { R1030 += 1, R952 += 1 };
  s0 -> s4 [65, 65] { R1030 += 1, R952 += 1 };
  s0 -> s1 [66, 65535] { R1030 += 1, R952 += 1 };
  s1 -> s1 [0, 64] { R1030 += 1, R952 += 1 };
  s1 -> s1 [0, 65535] { R1030 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1030 += 1, R952 += 1 };
  s1 -> s4 [65, 65] { R1030 += 1, R952 += 1 };
  s1 -> s1 [66, 65535] { R1030 += 1, R952 += 1 };
  s2 -> s1 [0, 64] { R1030 += 1, R952 += 1 };
  s2 -> s2 [0, 65535] { R1030 += 1, R951 += 1, R952 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1030 += 1, R952 += 1 };
  s2 -> s4 [65, 65] { R1030 += 1, R952 += 1 };
  s2 -> s1 [66, 65535] { R1030 += 1, R952 += 1 };
  s3 -> s3 [0, 65535] { R1030 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1030 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1030 += 1, R952 += 1 };
  s5 -> s5 [0, 65535] { R1030 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R1032 += 1, R953 += 1, R954 += 1 };
  s0 -> s0 [0, 65535] { R1031 += 1, R1032 += 1 };
  s0 -> s3 [65, 65] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R1032 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R1032 += 1, R953 += 1, R954 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R1032 += 1, R954 += 1, R417 += 1, R418 += 1 };
  s3 -> s6 [0, 65535] { R1032 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1032 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1032 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R1033 += 1, R1034 += 1 };
  s0 -> s2 [0, 65535] { R1034 += 1, R955 += 1, R956 += 1 };
  s0 -> s3 [65, 65] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R1034 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1034 += 1, R955 += 1, R956 += 1 };
  s2 -> s3 [65, 65] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R1034 += 1, R956 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1034 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1034 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1034 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R1036 += 1, R957 += 1, R958 += 1 };
  s0 -> s0 [0, 65535] { R1035 += 1, R1036 += 1 };
  s0 -> s3 [65, 65] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1036 += 1 };
  s1 -> s3 [65, 65] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R1036 += 1, R957 += 1, R958 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1036 += 1, R958 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535] { R1036 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1036 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1036 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s0 -> s0 [0, 65535] { R1037 += 1, R1038 += 1 };
  s0 -> s2 [0, 65535] { R1038 += 1, R959 += 1, R960 += 1 };
  s0 -> s3 [65, 65] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s0 -> s4 [65, 65] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s0 -> s1 [66, 65535] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 64] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [0, 65535] { R1038 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s1 -> s4 [65, 65] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s1 -> s1 [66, 65535] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [0, 64] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1038 += 1, R959 += 1, R960 += 1 };
  s2 -> s3 [65, 65] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s2 -> s4 [65, 65] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s2 -> s1 [66, 65535] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s3 -> s3 [0, 65535] { R1038 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1038 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1038 += 1, R960 += 1, R431 += 1, R432 += 1 };
  s5 -> s5 [0, 65535] { R1038 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s0 -> s2 [0, 65535] { R1040 += 1, R961 += 1, R962 += 1 };
  s0 -> s0 [0, 65535] { R1039 += 1, R1040 += 1 };
  s0 -> s3 [65, 65] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s0 -> s4 [65, 65] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s0 -> s1 [66, 65535] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s1 -> s1 [0, 64] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1040 += 1 };
  s1 -> s3 [65, 65] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s1 -> s4 [65, 65] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s1 -> s1 [66, 65535] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s2 -> s1 [0, 64] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s2 -> s2 [0, 65535] { R1040 += 1, R961 += 1, R962 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s2 -> s4 [65, 65] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s2 -> s1 [66, 65535] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s3 -> s3 [0, 65535] { R1040 += 1, R962 += 1, R437 += 1, R438 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1040 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1040 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1040 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R1042 += 1, R964 += 1 };
  s0 -> s2 [0, 65535] { R1042 += 1, R963 += 1, R964 += 1 };
  s0 -> s0 [0, 65535] { R1041 += 1, R1042 += 1 };
  s0 -> s3 [65, 65] { R1042 += 1, R964 += 1 };
  s0 -> s4 [65, 65] { R1042 += 1, R964 += 1 };
  s0 -> s1 [66, 65535] { R1042 += 1, R964 += 1 };
  s1 -> s1 [0, 64] { R1042 += 1, R964 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1042 += 1 };
  s1 -> s3 [65, 65] { R1042 += 1, R964 += 1 };
  s1 -> s4 [65, 65] { R1042 += 1, R964 += 1 };
  s1 -> s1 [66, 65535] { R1042 += 1, R964 += 1 };
  s2 -> s1 [0, 64] { R1042 += 1, R964 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1042 += 1, R963 += 1, R964 += 1 };
  s2 -> s3 [65, 65] { R1042 += 1, R964 += 1 };
  s2 -> s4 [65, 65] { R1042 += 1, R964 += 1 };
  s2 -> s1 [66, 65535] { R1042 += 1, R964 += 1 };
  s3 -> s6 [0, 65535] { R1042 += 1 };
  s3 -> s3 [0, 65535] { R1042 += 1, R964 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1042 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1042 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s0 -> s0 [0, 65535] { R1043 += 1, R1044 += 1 };
  s0 -> s2 [0, 65535] { R1044 += 1, R965 += 1, R966 += 1 };
  s0 -> s3 [65, 65] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s0 -> s4 [65, 65] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s0 -> s1 [66, 65535] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s1 -> s1 [0, 64] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1044 += 1 };
  s1 -> s3 [65, 65] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s1 -> s4 [65, 65] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s1 -> s1 [66, 65535] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s2 -> s1 [0, 64] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1044 += 1, R965 += 1, R966 += 1 };
  s2 -> s3 [65, 65] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s2 -> s4 [65, 65] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s2 -> s1 [66, 65535] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s3 -> s3 [0, 65535] { R1044 += 1, R966 += 1, R443 += 1, R444 += 1 };
  s3 -> s6 [0, 65535] { R1044 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1044 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1044 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R1046 += 1, R968 += 1 };
  s0 -> s2 [0, 65535] { R1046 += 1, R967 += 1, R968 += 1 };
  s0 -> s0 [0, 65535] { R1045 += 1, R1046 += 1 };
  s0 -> s3 [65, 65] { R1046 += 1, R968 += 1 };
  s0 -> s4 [65, 65] { R1046 += 1, R968 += 1 };
  s0 -> s1 [66, 65535] { R1046 += 1, R968 += 1 };
  s1 -> s1 [0, 64] { R1046 += 1, R968 += 1 };
  s1 -> s1 [0, 65535] { R1046 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1046 += 1, R968 += 1 };
  s1 -> s4 [65, 65] { R1046 += 1, R968 += 1 };
  s1 -> s1 [66, 65535] { R1046 += 1, R968 += 1 };
  s2 -> s1 [0, 64] { R1046 += 1, R968 += 1 };
  s2 -> s2 [0, 65535] { R1046 += 1, R967 += 1, R968 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1046 += 1, R968 += 1 };
  s2 -> s4 [65, 65] { R1046 += 1, R968 += 1 };
  s2 -> s1 [66, 65535] { R1046 += 1, R968 += 1 };
  s3 -> s3 [0, 65535] { R1046 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1046 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1046 += 1, R968 += 1 };
  s5 -> s5 [0, 65535] { R1046 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s0 -> s2 [0, 64] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s0 -> s3 [0, 65535] { R1048 += 1, R969 += 1, R970 += 1 };
  s0 -> s0 [0, 65535] { R1047 += 1, R1048 += 1 };
  s0 -> s4 [65, 65] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s0 -> s5 [65, 65] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s0 -> s6 [65, 65] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s0 -> s7 [65, 65] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s0 -> s2 [66, 79] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s0 -> s1 [66, 65535] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s0 -> s8 [80, 80] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s0 -> s2 [81, 65535] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s1 -> s1 [0, 64] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s1 -> s2 [0, 64] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s1 -> s4 [65, 65] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s1 -> s5 [65, 65] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s1 -> s6 [65, 65] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s1 -> s7 [65, 65] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s1 -> s2 [66, 79] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s1 -> s1 [66, 65535] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s1 -> s8 [80, 80] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s1 -> s2 [81, 65535] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s2 -> s2 [0, 64] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s2 -> s4 [65, 65] { R1048 += 1, R970 += 1 };
  s2 -> s7 [65, 65] { R1048 += 1, R970 += 1 };
  s2 -> s2 [66, 79] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s2 -> s2 [66, 65535] { R1048 += 1, R970 += 1 };
  s2 -> s8 [80, 80] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s2 -> s2 [81, 65535] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s3 -> s1 [0, 64] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s3 -> s2 [0, 64] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s3 -> s3 [0, 65535] { R1048 += 1, R969 += 1, R970 += 1 };
  s3 -> s4 [65, 65] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s3 -> s5 [65, 65] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s3 -> s6 [65, 65] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s3 -> s7 [65, 65] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s3 -> s2 [66, 79] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s3 -> s1 [66, 65535] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s3 -> s8 [80, 80] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s3 -> s2 [81, 65535] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s4 -> s4 [0, 79] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s4 -> s4 [0, 65535] { R1048 += 1, R970 += 1 };
  s4 -> s10 [80, 80] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s4 -> s4 [81, 65535] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s6 -> s4 [0, 79] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s6 -> s6 [0, 65535] { R1048 += 1, R970 += 1, R899 += 1, R900 += 1 };
  s6 -> s10 [80, 80] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s6 -> s4 [81, 65535] { R1048 += 1, R970 += 1, R900 += 1, R901 += 1 };
  s8 -> s8 [0, 64] { R1048 += 1, R970 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1048 += 1 };
  s8 -> s10 [65, 65] { R1048 += 1, R970 += 1 };
  s8 -> s11 [65, 65] { R1048 += 1, R970 += 1 };
  s8 -> s8 [66, 65535] { R1048 += 1, R970 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1048 += 1, R970 += 1 };
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R1048 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1048 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1048 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R938 && R3 = R1048 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R905 = 0 && R906 = R938 && R907 = 0 && R908 = R938 && R909 = 0 && R910 = R938 && R911 = 0 && R912 = R938 && R913 = 0 && R914 = R938 && R915 = 0 && R916 = R938 && R917 = 0 && R918 = R938 && R919 = 0 && R920 = R938 && R921 = 0 && R922 = R938 && R923 = 0 && R924 = R938 && R925 = 0 && R926 = R938 && R927 = 0 && R928 = R938 && R929 = 0 && R930 = R938 && R931 = 0 && R932 = R938 && R933 = 0 && R934 = R938 && R935 = 0 && R936 = R938 && R937 = 0 && R941 = 0 && R942 = 0 && R969 = 0 && R970 = 0 && R971 = 10 && R972 = R1048 && R973 = 10 && R974 = R1048 && R975 = 10 && R976 = R1048 && R977 = 10 && R978 = R1048 && R979 = 10 && R980 = R1048 && R981 = 10 && R982 = R1048 && R983 = 10 && R984 = R1048 && R985 = 10 && R986 = R1048 && R987 = 10 && R988 = R1048 && R989 = 10 && R990 = R1048 && R991 = 10 && R992 = R1048 && R993 = 10 && R994 = R1048 && R995 = 10 && R996 = R1048 && R997 = 10 && R998 = R1048 && R999 = 10 && R1000 = R1048 && R1001 = 10 && R1002 = R1048 && R1003 = 10 && R1004 = R1048 && R1005 = 10 && R1006 = R1048 && R1007 = 10 && R1008 = R1048 && R1009 = 10 && R1010 = R1048 && R1011 = 10 && R1012 = R1048 && R1013 = 10 && R1014 = R1048 && R1015 = 10 && R1016 = R1048 && R1017 = 10 && R1018 = R1048 && R1019 = 10 && R1020 = R1048 && R1021 = 10 && R1022 = R1048 && R1023 = 10 && R1024 = R1048 && R1025 = 10 && R1026 = R1048 && R1027 = 10 && R1028 = R1048 && R1029 = 10 && R1030 = R1048 && R1031 = 10 && R1032 = R1048 && R1033 = 10 && R1034 = R1048 && R1035 = 10 && R1036 = R1048 && R1037 = 10 && R1038 = R1048 && R1039 = 10 && R1040 = R1048 && R1041 = 10 && R1042 = R1048 && R1043 = 10 && R1044 = R1048 && R1045 = 10 && R1046 = R1048 && R1047 = 10 && R436 + R433 + R904 + R901 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R938 && 9 < R1048 && (R20 = 0 || (R939 = 0 && R940 = 0)) && (R20 = 0 || (R943 = 0 && R944 = 0)) && (R20 = 0 || (R945 = 0 && R946 = 0)) && (R20 = 0 || (R947 = 0 && R948 = 0)) && (R20 = 0 || (R949 = 0 && R950 = 0)) && (R20 = 0 || (R951 = 0 && R952 = 0)) && (R20 = 0 || (R953 = 0 && R954 = 0)) && (R20 = 0 || (R955 = 0 && R956 = 0)) && (R20 = 0 || (R957 = 0 && R958 = 0)) && (R20 = 0 || (R959 = 0 && R960 = 0)) && (R20 = 0 || (R961 = 0 && R962 = 0)) && (R20 = 0 || (R963 = 0 && R964 = 0)) && (R20 = 0 || (R965 = 0 && R966 = 0)) && (R20 = 0 || (R967 = 0 && R968 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R434 + R431 = 0 && R435 + R432 = 0)) && (R442 + R439 = 0 || (R440 + R437 = 0 && R441 + R438 = 0)) && (R448 + R445 = 0 || (R446 + R443 = 0 && R447 + R444 = 0)) && (R448 + R445 = 0 || (R902 + R899 = 0 && R903 + R900 = 0));
// End of Parikh automata intersection problem
