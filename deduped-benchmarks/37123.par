// Parikh automata intersection problem, generated by OSTRICH+
counter int R10001, R10002, R10003, R10004, R10005, R10006, R10007, R10008, R10009, R10010, R10011, R10012, R10013, R10014, R10015, R10016, R10017, R10018, R10019, R10020, R10021, R10022, R10023, R10024, R10025, R10026, R10027, R10028, R10029, R10030, R10031, R10032, R10033, R10034, R10035, R10036, R10037, R10038, R10039, R10040, R10041, R10042, R10043, R10044, R10045, R10046, R10047, R10048, R10049, R10050, R10051, R10052, R10053, R10054, R10055, R10056, R10057, R10058, R10059, R10060, R10061, R10062, R10063, R10064, R10065, R10066, R10067, R10068, R10069, R10070, R10071, R10072, R10073, R10074, R10075, R10076, R10077, R10078, R10079, R10080, R10081, R10082, R10083, R10084, R10085, R10086, R10087, R10088, R10089, R10090, R10091, R10092, R10093, R10094, R10095, R10096, R10097, R10098, R10099, R10100, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264, R9539, R9540, R9541, R9542, R9543, R9544, R9545, R9546, R9547, R9548, R9549, R9550;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R10074 += 1 };
  s0 -> s0 [0, 65535] { R10073 += 1, R10074 += 1 };
  s0 -> s1 [45, 45] { R10074 += 1 };
  s0 -> s2 [46, 46] { R10074 += 1 };
  s0 -> s1 [48, 62] { R10074 += 1 };
  s0 -> s3 [65, 65] { R10074 += 1 };
  s0 -> s1 [66, 65535] { R10074 += 1 };
  s1 -> s1 [0, 43] { R10074 += 1 };
  s1 -> s1 [45, 45] { R10074 += 1 };
  s1 -> s2 [46, 46] { R10074 += 1 };
  s1 -> s1 [48, 62] { R10074 += 1 };
  s1 -> s3 [65, 65] { R10074 += 1 };
  s1 -> s1 [66, 65535] { R10074 += 1 };
  s2 -> s1 [0, 43] { R10074 += 1 };
  s2 -> s1 [45, 45] { R10074 += 1 };
  s2 -> s2 [46, 46] { R10074 += 1 };
  s2 -> s1 [48, 62] { R10074 += 1 };
  s2 -> s3 [65, 65] { R10074 += 1 };
  s2 -> s1 [66, 114] { R10074 += 1 };
  s2 -> s8 [115, 115] { R10074 += 1 };
  s2 -> s1 [116, 65535] { R10074 += 1 };
  s3 -> s3 [0, 43] { R10074 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10074 += 1 };
  s3 -> s4 [46, 46] { R10074 += 1 };
  s3 -> s3 [48, 62] { R10074 += 1 };
  s3 -> s3 [65, 65535] { R10074 += 1 };
  s4 -> s3 [0, 43] { R10074 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10074 += 1 };
  s4 -> s4 [46, 46] { R10074 += 1 };
  s4 -> s3 [48, 62] { R10074 += 1 };
  s4 -> s3 [65, 114] { R10074 += 1 };
  s4 -> s5 [115, 115] { R10074 += 1 };
  s4 -> s3 [116, 65535] { R10074 += 1 };
  s5 -> s3 [0, 43] { R10074 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10074 += 1 };
  s5 -> s4 [46, 46] { R10074 += 1 };
  s5 -> s3 [48, 62] { R10074 += 1 };
  s5 -> s3 [65, 110] { R10074 += 1 };
  s5 -> s6 [111, 111] { R10074 += 1 };
  s5 -> s3 [112, 65535] { R10074 += 1 };
  s6 -> s3 [0, 43] { R10074 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10074 += 1 };
  s6 -> s4 [46, 46] { R10074 += 1 };
  s6 -> s3 [48, 62] { R10074 += 1 };
  s6 -> s3 [65, 98] { R10074 += 1 };
  s6 -> s7 [99, 99] { R10074 += 1 };
  s6 -> s3 [100, 65535] { R10074 += 1 };
  s7 -> s3 [0, 43] { R10074 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10074 += 1 };
  s7 -> s4 [46, 46] { R10074 += 1 };
  s7 -> s3 [48, 62] { R10074 += 1 };
  s7 -> s3 [65, 106] { R10074 += 1 };
  s7 -> s3 [108, 65535] { R10074 += 1 };
  s8 -> s1 [0, 43] { R10074 += 1 };
  s8 -> s1 [45, 45] { R10074 += 1 };
  s8 -> s2 [46, 46] { R10074 += 1 };
  s8 -> s1 [48, 62] { R10074 += 1 };
  s8 -> s3 [65, 65] { R10074 += 1 };
  s8 -> s1 [66, 110] { R10074 += 1 };
  s8 -> s9 [111, 111] { R10074 += 1 };
  s8 -> s1 [112, 65535] { R10074 += 1 };
  s9 -> s1 [0, 43] { R10074 += 1 };
  s9 -> s1 [45, 45] { R10074 += 1 };
  s9 -> s2 [46, 46] { R10074 += 1 };
  s9 -> s1 [48, 62] { R10074 += 1 };
  s9 -> s3 [65, 65] { R10074 += 1 };
  s9 -> s1 [66, 98] { R10074 += 1 };
  s9 -> s10 [99, 99] { R10074 += 1 };
  s9 -> s1 [100, 65535] { R10074 += 1 };
  s10 -> s1 [0, 43] { R10074 += 1 };
  s10 -> s1 [45, 45] { R10074 += 1 };
  s10 -> s2 [46, 46] { R10074 += 1 };
  s10 -> s1 [48, 62] { R10074 += 1 };
  s10 -> s3 [65, 65] { R10074 += 1 };
  s10 -> s1 [66, 106] { R10074 += 1 };
  s10 -> s1 [108, 65535] { R10074 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R10075 += 1, R10076 += 1 };
  s0 -> s1 [0, 65535] { R10076 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10076 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R10078 += 1 };
  s0 -> s0 [0, 65535] { R10077 += 1, R10078 += 1 };
  s0 -> s2 [0, 65535] { R10078 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R10078 += 1 };
  s0 -> s1 [59, 65535] { R10078 += 1 };
  s1 -> s1 [0, 57] { R10078 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10078 += 1 };
  s1 -> s1 [59, 65535] { R10078 += 1 };
  s2 -> s1 [0, 57] { R10078 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10078 += 1, R11 += 1 };
  s2 -> s3 [58, 58] { R10078 += 1 };
  s2 -> s1 [59, 65535] { R10078 += 1 };
  s3 -> s3 [0, 65535] { R10078 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R10080 += 1 };
  s0 -> s0 [0, 65535] { R10079 += 1, R10080 += 1 };
  s0 -> s2 [0, 65535] { R10080 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R10080 += 1 };
  s0 -> s1 [66, 65535] { R10080 += 1 };
  s1 -> s1 [0, 64] { R10080 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10080 += 1 };
  s1 -> s1 [66, 65535] { R10080 += 1 };
  s2 -> s1 [0, 64] { R10080 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10080 += 1, R12 += 1 };
  s2 -> s3 [65, 65] { R10080 += 1 };
  s2 -> s1 [66, 65535] { R10080 += 1 };
  s3 -> s3 [0, 65535] { R10080 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R10082 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10081 += 1, R10082 += 1 };
  s0 -> s2 [0, 65535] { R10082 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R10082 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R10082 += 1, R22 += 1 };
  s1 -> s5 [0, 65535] { R10082 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10082 += 1, R22 += 1 };
  s2 -> s1 [0, 90] { R10082 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R10082 += 1, R21 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R10082 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R10082 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R10082 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10082 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R10084 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10083 += 1, R10084 += 1 };
  s0 -> s2 [0, 65535] { R10084 += 1, R24 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R10084 += 1, R23 += 1, R24 += 1 };
  s1 -> s2 [0, 65535] { R10084 += 1, R24 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10084 += 1 };
  s2 -> s2 [0, 65535] { R10084 += 1, R24 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10084 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R10086 += 1, R10008 += 1 };
  s0 -> s2 [0, 65535] { R10086 += 1, R10007 += 1, R10008 += 1 };
  s0 -> s0 [0, 65535] { R10085 += 1, R10086 += 1 };
  s0 -> s1 [66, 65535] { R10086 += 1, R10008 += 1 };
  s1 -> s1 [0, 64] { R10086 += 1, R10008 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10086 += 1 };
  s1 -> s1 [66, 65535] { R10086 += 1, R10008 += 1 };
  s2 -> s1 [0, 64] { R10086 += 1, R10008 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10086 += 1, R10007 += 1, R10008 += 1 };
  s2 -> s1 [66, 65535] { R10086 += 1, R10008 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R10088 += 1, R10009 += 1, R10010 += 1 };
  s0 -> s2 [0, 65535] { R10088 += 1, R10010 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10087 += 1, R10088 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10088 += 1, R10009 += 1, R10010 += 1 };
  s1 -> s2 [0, 65535] { R10088 += 1, R10010 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10088 += 1 };
  s2 -> s2 [0, 65535] { R10088 += 1, R10010 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10088 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R10090 += 1, R10012 += 1 };
  s0 -> s0 [0, 65535] { R10089 += 1, R10090 += 1 };
  s0 -> s2 [0, 65535] { R10090 += 1, R10011 += 1, R10012 += 1 };
  s0 -> s1 [80, 65535] { R10090 += 1, R10012 += 1 };
  s1 -> s1 [0, 65] { R10090 += 1, R10012 += 1 };
  s1 -> s1 [0, 65535] { R10090 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10090 += 1, R10012 += 1 };
  s2 -> s1 [0, 65] { R10090 += 1, R10012 += 1 };
  s2 -> s2 [0, 65535] { R10090 += 1, R10011 += 1, R10012 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R10090 += 1, R10012 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10091 += 1, R10092 += 1 };
  s0 -> s1 [0, 65535] { R10092 += 1, R10013 += 1, R10014 += 1 };
  s0 -> s2 [0, 65535] { R10092 += 1, R10014 += 1, R406 += 1 };
  s1 -> s1 [0, 65535] { R10092 += 1, R10013 += 1, R10014 += 1 };
  s1 -> s2 [0, 65535] { R10092 += 1, R10014 += 1, R406 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10092 += 1, R10014 += 1, R406 += 1 };
  s2 -> s3 [0, 65535] { R10092 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10092 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R10094 += 1, R10016 += 1 };
  s0 -> s2 [0, 65535] { R10094 += 1, R10015 += 1, R10016 += 1 };
  s0 -> s3 [0, 65535] { R10094 += 1, R10016 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R10093 += 1, R10094 += 1 };
  s0 -> s1 [84, 65535] { R10094 += 1, R10016 += 1 };
  s1 -> s1 [0, 82] { R10094 += 1, R10016 += 1 };
  s1 -> s1 [0, 65535] { R10094 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [84, 65535] { R10094 += 1, R10016 += 1 };
  s2 -> s1 [0, 82] { R10094 += 1, R10016 += 1 };
  s2 -> s2 [0, 65535] { R10094 += 1, R10015 += 1, R10016 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10094 += 1, R10016 += 1, R408 += 1 };
  s2 -> s1 [84, 65535] { R10094 += 1, R10016 += 1 };
  s3 -> s1 [0, 82] { R10094 += 1, R10016 += 1 };
  s3 -> s4 [0, 65535] { R10094 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10094 += 1, R10016 += 1, R408 += 1 };
  s3 -> s1 [84, 65535] { R10094 += 1, R10016 += 1 };
  s4 -> s4 [0, 65535] { R10094 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R10096 += 1, R10018 += 1 };
  s0 -> s2 [0, 65535] { R10096 += 1, R10017 += 1, R10018 += 1 };
  s0 -> s0 [0, 65535] { R10095 += 1, R10096 += 1 };
  s0 -> s3 [0, 65535] { R10096 += 1, R10018 += 1, R410 += 1 };
  s0 -> s1 [81, 65535] { R10096 += 1, R10018 += 1 };
  s1 -> s1 [0, 79] { R10096 += 1, R10018 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10096 += 1 };
  s1 -> s1 [81, 65535] { R10096 += 1, R10018 += 1 };
  s2 -> s1 [0, 79] { R10096 += 1, R10018 += 1 };
  s2 -> s2 [0, 65535] { R10096 += 1, R10017 += 1, R10018 += 1 };
  s2 -> s3 [0, 65535] { R10096 += 1, R10018 += 1, R410 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R10096 += 1, R10018 += 1 };
  s3 -> s1 [0, 79] { R10096 += 1, R10018 += 1 };
  s3 -> s4 [0, 65535] { R10096 += 1 };
  s3 -> s3 [0, 65535] { R10096 += 1, R10018 += 1, R410 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R10096 += 1, R10018 += 1 };
  s4 -> s4 [0, 65535] { R10096 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R10098 += 1, R10020 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R10098 += 1, R10020 += 1, R415 += 1, R416 += 1 };
  s0 -> s0 [0, 65535] { R10097 += 1, R10098 += 1 };
  s0 -> s3 [0, 65535] { R10098 += 1, R10019 += 1, R10020 += 1 };
  s1 -> s1 [0, 65535] { R10098 += 1, R10020 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10098 += 1, R10020 += 1, R415 += 1, R416 += 1 };
  s1 -> s6 [0, 65535] { R10098 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10098 += 1, R10020 += 1 };
  s2 -> s2 [0, 65535] { R10098 += 1, R10020 += 1, R415 += 1, R416 += 1 };
  s2 -> s6 [0, 65535] { R10098 += 1 };
  s3 -> s1 [0, 65535] { R10098 += 1, R10020 += 1, R414 += 1, R415 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10098 += 1, R10020 += 1, R415 += 1, R416 += 1 };
  s3 -> s3 [0, 65535] { R10098 += 1, R10019 += 1, R10020 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10098 += 1, R10020 += 1 };
  s5 -> s6 [0, 65535] { R10098 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10098 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R10100 += 1, R10022 += 1 };
  s0 -> s0 [0, 65535] { R10099 += 1, R10100 += 1 };
  s0 -> s2 [0, 65535] { R10100 += 1, R10021 += 1, R10022 += 1 };
  s1 -> s1 [0, 65535] { R10100 += 1, R10022 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10100 += 1 };
  s2 -> s1 [0, 65535] { R10100 += 1, R10022 += 1 };
  s2 -> s2 [0, 65535] { R10100 += 1, R10021 += 1, R10022 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10100 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R10102 += 1, R10024 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R10101 += 1, R10102 += 1 };
  s0 -> s2 [0, 65535] { R10102 += 1, R10023 += 1, R10024 += 1 };
  s0 -> s3 [0, 65535] { R10102 += 1, R10024 += 1, R419 += 1, R420 += 1 };
  s0 -> s1 [81, 65535] { R10102 += 1, R10024 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R10102 += 1, R10024 += 1, R420 += 1 };
  s1 -> s1 [0, 65535] { R10102 += 1, R10024 += 1 };
  s1 -> s4 [0, 65535] { R10102 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R10102 += 1, R10024 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R10102 += 1, R10024 += 1, R420 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10102 += 1, R10023 += 1, R10024 += 1 };
  s2 -> s3 [0, 65535] { R10102 += 1, R10024 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R10102 += 1, R10024 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R10102 += 1, R10024 += 1, R420 += 1 };
  s3 -> s4 [0, 65535] { R10102 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10102 += 1, R10024 += 1, R419 += 1, R420 += 1 };
  s3 -> s1 [81, 65535] { R10102 += 1, R10024 += 1, R420 += 1 };
  s4 -> s4 [0, 65535] { R10102 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R10104 += 1, R10026 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R10104 += 1, R10026 += 1, R425 += 1, R426 += 1 };
  s0 -> s3 [0, 65535] { R10104 += 1, R10025 += 1, R10026 += 1 };
  s0 -> s0 [0, 65535] { R10103 += 1, R10104 += 1 };
  s1 -> s1 [0, 65535] { R10104 += 1, R10026 += 1, R424 += 1, R425 += 1 };
  s1 -> s2 [0, 65535] { R10104 += 1, R10026 += 1, R425 += 1, R426 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10104 += 1 };
  s2 -> s2 [0, 65535] { R10104 += 1, R10026 += 1, R425 += 1, R426 += 1 };
  s2 -> s5 [0, 65535] { R10104 += 1, R10026 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10104 += 1 };
  s3 -> s1 [0, 65535] { R10104 += 1, R10026 += 1, R424 += 1, R425 += 1 };
  s3 -> s2 [0, 65535] { R10104 += 1, R10026 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R10104 += 1, R10025 += 1, R10026 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10104 += 1, R10026 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R10104 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10104 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s0 -> s2 [0, 65535] { R10106 += 1, R10028 += 1, R429 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R10105 += 1, R10106 += 1 };
  s0 -> s3 [0, 65535] { R10106 += 1, R10027 += 1, R10028 += 1 };
  s0 -> s1 [91, 107] { R10106 += 1, R10028 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R10106 += 1, R10028 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R10106 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10106 += 1, R10028 += 1 };
  s1 -> s1 [91, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s2 -> s5 [0, 65535] { R10106 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10106 += 1, R10028 += 1, R429 += 1, R430 += 1 };
  s2 -> s1 [91, 107] { R10106 += 1, R10028 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R10106 += 1, R10028 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10106 += 1, R10028 += 1, R429 += 1, R430 += 1 };
  s3 -> s3 [0, 65535] { R10106 += 1, R10027 += 1, R10028 += 1 };
  s3 -> s1 [91, 107] { R10106 += 1, R10028 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R10106 += 1, R10028 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R10106 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10106 += 1, R10028 += 1 };
  s4 -> s1 [91, 110] { R10106 += 1, R10028 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R10106 += 1, R10028 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R10106 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R10106 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10106 += 1, R10028 += 1 };
  s7 -> s1 [91, 98] { R10106 += 1, R10028 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R10106 += 1, R10028 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R10106 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10106 += 1, R10028 += 1 };
  s8 -> s1 [91, 96] { R10106 += 1, R10028 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R10106 += 1, R10028 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s9 -> s5 [0, 65535] { R10106 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R10106 += 1, R10028 += 1 };
  s9 -> s1 [91, 107] { R10106 += 1, R10028 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R10106 += 1, R10028 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s10 -> s5 [0, 65535] { R10106 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R10106 += 1, R10028 += 1 };
  s10 -> s1 [91, 103] { R10106 += 1, R10028 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R10106 += 1, R10028 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s11 -> s5 [0, 65535] { R10106 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R10106 += 1, R10028 += 1 };
  s11 -> s1 [91, 110] { R10106 += 1, R10028 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R10106 += 1, R10028 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R10106 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R10106 += 1, R10028 += 1 };
  s12 -> s1 [91, 114] { R10106 += 1, R10028 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R10106 += 1, R10028 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s13 -> s5 [0, 65535] { R10106 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R10106 += 1, R10028 += 1 };
  s13 -> s1 [91, 115] { R10106 += 1, R10028 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R10106 += 1, R10028 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R10106 += 1, R10028 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R10106 += 1, R10028 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10108 += 1, R10030 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s0 [0, 65535] { R10107 += 1, R10108 += 1 };
  s0 -> s2 [0, 65535] { R10108 += 1, R10029 += 1, R10030 += 1 };
  s0 -> s3 [0, 65535] { R10108 += 1, R10030 += 1 };
  s1 -> s1 [0, 65535] { R10108 += 1, R10030 += 1, R7263 += 1, R7264 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R10108 += 1, R10030 += 1 };
  s1 -> s5 [0, 65535] { R10108 += 1 };
  s2 -> s1 [0, 65535] { R10108 += 1, R10030 += 1, R7263 += 1, R7264 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10108 += 1, R10029 += 1, R10030 += 1 };
  s2 -> s3 [0, 65535] { R10108 += 1, R10030 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10108 += 1, R10030 += 1 };
  s3 -> s5 [0, 65535] { R10108 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10108 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R10110 += 1, R10032 += 1, R9543 += 1, R9544 += 1 };
  s0 -> s2 [0, 65535] { R10110 += 1, R10031 += 1, R10032 += 1 };
  s0 -> s3 [0, 65535] { R10110 += 1, R10032 += 1 };
  s0 -> s0 [0, 65535] { R10109 += 1, R10110 += 1 };
  s1 -> s4 [0, 65535] { R10110 += 1 };
  s1 -> s1 [0, 65535] { R10110 += 1, R10032 += 1, R9543 += 1, R9544 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10110 += 1, R10032 += 1 };
  s2 -> s1 [0, 65535] { R10110 += 1, R10032 += 1, R9543 += 1, R9544 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10110 += 1, R10031 += 1, R10032 += 1 };
  s2 -> s3 [0, 65535] { R10110 += 1, R10032 += 1 };
  s3 -> s4 [0, 65535] { R10110 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10110 += 1, R10032 += 1 };
  s4 -> s4 [0, 65535] { R10110 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 65535] { R10112 += 1, R10033 += 1, R10034 += 1 };
  s0 -> s2 [0, 65535] { R10112 += 1, R10034 += 1 };
  s0 -> s0 [0, 65535] { R10111 += 1, R10112 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10112 += 1, R10033 += 1, R10034 += 1 };
  s1 -> s2 [0, 65535] { R10112 += 1, R10034 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10112 += 1, R10034 += 1 };
  s2 -> s4 [0, 65535] { R10112 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10112 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10114 += 1, R10035 += 1, R10036 += 1 };
  s0 -> s2 [0, 65535] { R10114 += 1, R10036 += 1, R9549 += 1, R9550 += 1 };
  s0 -> s3 [0, 65535] { R10114 += 1, R10036 += 1, R9548 += 1, R9549 += 1 };
  s0 -> s0 [0, 65535] { R10113 += 1, R10114 += 1 };
  s1 -> s1 [0, 65535] { R10114 += 1, R10035 += 1, R10036 += 1 };
  s1 -> s2 [0, 65535] { R10114 += 1, R10036 += 1, R9549 += 1, R9550 += 1 };
  s1 -> s3 [0, 65535] { R10114 += 1, R10036 += 1, R9548 += 1, R9549 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R10114 += 1 };
  s2 -> s2 [0, 65535] { R10114 += 1, R10036 += 1, R9549 += 1, R9550 += 1 };
  s2 -> s6 [0, 65535] { R10114 += 1, R10036 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10114 += 1 };
  s3 -> s2 [0, 65535] { R10114 += 1, R10036 += 1, R9549 += 1, R9550 += 1 };
  s3 -> s3 [0, 65535] { R10114 += 1, R10036 += 1, R9548 += 1, R9549 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10114 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10114 += 1 };
  s6 -> s6 [0, 65535] { R10114 += 1, R10036 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10116 += 1, R10037 += 1, R10038 += 1 };
  s0 -> s0 [0, 65535] { R10115 += 1, R10116 += 1 };
  s0 -> s2 [0, 65535] { R10116 += 1, R10038 += 1 };
  s1 -> s1 [0, 65535] { R10116 += 1, R10037 += 1, R10038 += 1 };
  s1 -> s2 [0, 65535] { R10116 += 1, R10038 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10116 += 1, R10038 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10116 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10118 += 1, R10039 += 1, R10040 += 1 };
  s0 -> s2 [0, 65535] { R10118 += 1, R10040 += 1 };
  s0 -> s0 [0, 65535] { R10117 += 1, R10118 += 1 };
  s1 -> s1 [0, 65535] { R10118 += 1, R10039 += 1, R10040 += 1 };
  s1 -> s2 [0, 65535] { R10118 += 1, R10040 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10118 += 1, R10040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R10118 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10118 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R10119 += 1, R10120 += 1 };
  s0 -> s1 [0, 65535] { R10120 += 1, R10042 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10120 += 1, R10041 += 1, R10042 += 1 };
  s1 -> s4 [0, 65535] { R10120 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10120 += 1, R10042 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10120 += 1, R10042 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10120 += 1, R10041 += 1, R10042 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10120 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10122 += 1, R10044 += 1 };
  s0 -> s0 [0, 65535] { R10121 += 1, R10122 += 1 };
  s0 -> s2 [0, 65535] { R10122 += 1, R10043 += 1, R10044 += 1 };
  s0 -> s3 [65, 65] { R10122 += 1, R10044 += 1 };
  s0 -> s4 [65, 65] { R10122 += 1, R10044 += 1 };
  s0 -> s5 [80, 80] { R10122 += 1, R10044 += 1 };
  s0 -> s1 [81, 65535] { R10122 += 1, R10044 += 1 };
  s1 -> s1 [0, 64] { R10122 += 1, R10044 += 1 };
  s1 -> s3 [65, 65] { R10122 += 1, R10044 += 1 };
  s1 -> s4 [65, 65] { R10122 += 1, R10044 += 1 };
  s1 -> s5 [80, 80] { R10122 += 1, R10044 += 1 };
  s1 -> s1 [81, 65535] { R10122 += 1, R10044 += 1 };
  s2 -> s1 [0, 64] { R10122 += 1, R10044 += 1 };
  s2 -> s2 [0, 65535] { R10122 += 1, R10043 += 1, R10044 += 1 };
  s2 -> s3 [65, 65] { R10122 += 1, R10044 += 1 };
  s2 -> s4 [65, 65] { R10122 += 1, R10044 += 1 };
  s2 -> s5 [80, 80] { R10122 += 1, R10044 += 1 };
  s2 -> s1 [81, 65535] { R10122 += 1, R10044 += 1 };
  s3 -> s3 [0, 65] { R10122 += 1, R10044 += 1 };
  s3 -> s7 [80, 80] { R10122 += 1, R10044 += 1 };
  s3 -> s3 [81, 65535] { R10122 += 1, R10044 += 1 };
  s5 -> s5 [0, 64] { R10122 += 1, R10044 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10122 += 1 };
  s5 -> s7 [65, 65] { R10122 += 1, R10044 += 1 };
  s5 -> s8 [65, 65] { R10122 += 1, R10044 += 1 };
  s5 -> s5 [80, 65535] { R10122 += 1, R10044 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R10122 += 1, R10044 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10122 += 1 };
  s7 -> s7 [80, 65535] { R10122 += 1, R10044 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10122 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10124 += 1, R10046 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R10124 += 1, R10045 += 1, R10046 += 1 };
  s0 -> s0 [0, 65535] { R10123 += 1, R10124 += 1 };
  s0 -> s3 [65, 65] { R10124 += 1, R10046 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R10124 += 1, R10046 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R10124 += 1, R10046 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R10124 += 1, R10046 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R10124 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10124 += 1, R10046 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R10124 += 1, R10046 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R10124 += 1, R10046 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R10124 += 1, R10046 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R10124 += 1, R10045 += 1, R10046 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10124 += 1, R10046 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R10124 += 1, R10046 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R10124 += 1, R10046 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R10124 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10124 += 1 };
  s4 -> s4 [0, 65535] { R10124 += 1, R10046 += 1, R405 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10124 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10126 += 1, R10048 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R10125 += 1, R10126 += 1 };
  s0 -> s2 [0, 65535] { R10126 += 1, R10047 += 1, R10048 += 1 };
  s0 -> s3 [65, 65] { R10126 += 1, R10048 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R10126 += 1, R10048 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R10126 += 1, R10048 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R10126 += 1, R10048 += 1, R407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10126 += 1 };
  s1 -> s3 [65, 65] { R10126 += 1, R10048 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R10126 += 1, R10048 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R10126 += 1, R10048 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R10126 += 1, R10048 += 1, R407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10126 += 1, R10047 += 1, R10048 += 1 };
  s2 -> s3 [65, 65] { R10126 += 1, R10048 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R10126 += 1, R10048 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R10126 += 1, R10048 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10126 += 1 };
  s3 -> s3 [0, 65535] { R10126 += 1, R10048 += 1, R407 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10126 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10126 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10128 += 1, R10050 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R10128 += 1, R10049 += 1, R10050 += 1 };
  s0 -> s0 [0, 65535] { R10127 += 1, R10128 += 1 };
  s0 -> s3 [65, 65] { R10128 += 1, R10050 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R10128 += 1, R10050 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R10128 += 1, R10050 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R10128 += 1, R10050 += 1, R409 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10128 += 1 };
  s1 -> s3 [65, 65] { R10128 += 1, R10050 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R10128 += 1, R10050 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R10128 += 1, R10050 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R10128 += 1, R10050 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10128 += 1, R10049 += 1, R10050 += 1 };
  s2 -> s3 [65, 65] { R10128 += 1, R10050 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R10128 += 1, R10050 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R10128 += 1, R10050 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R10128 += 1, R10050 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10128 += 1 };
  s4 -> s4 [0, 65535] { R10128 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10128 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R10129 += 1, R10130 += 1 };
  s0 -> s2 [0, 65535] { R10130 += 1, R10051 += 1, R10052 += 1 };
  s0 -> s3 [65, 65] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10130 += 1 };
  s1 -> s3 [65, 65] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10130 += 1, R10051 += 1, R10052 += 1 };
  s2 -> s3 [65, 65] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R10130 += 1, R10052 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535] { R10130 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10130 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10130 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10132 += 1, R10054 += 1 };
  s0 -> s0 [0, 65535] { R10131 += 1, R10132 += 1 };
  s0 -> s2 [0, 65535] { R10132 += 1, R10053 += 1, R10054 += 1 };
  s0 -> s3 [65, 65] { R10132 += 1, R10054 += 1 };
  s0 -> s4 [65, 65] { R10132 += 1, R10054 += 1 };
  s0 -> s1 [66, 65535] { R10132 += 1, R10054 += 1 };
  s1 -> s1 [0, 64] { R10132 += 1, R10054 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10132 += 1 };
  s1 -> s3 [65, 65] { R10132 += 1, R10054 += 1 };
  s1 -> s4 [65, 65] { R10132 += 1, R10054 += 1 };
  s1 -> s1 [66, 65535] { R10132 += 1, R10054 += 1 };
  s2 -> s1 [0, 64] { R10132 += 1, R10054 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10132 += 1, R10053 += 1, R10054 += 1 };
  s2 -> s3 [65, 65] { R10132 += 1, R10054 += 1 };
  s2 -> s4 [65, 65] { R10132 += 1, R10054 += 1 };
  s2 -> s1 [66, 65535] { R10132 += 1, R10054 += 1 };
  s3 -> s3 [0, 65535] { R10132 += 1, R10054 += 1 };
  s3 -> s6 [0, 65535] { R10132 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10132 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10132 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R10134 += 1, R10055 += 1, R10056 += 1 };
  s0 -> s0 [0, 65535] { R10133 += 1, R10134 += 1 };
  s0 -> s3 [65, 65] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R10134 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R10134 += 1, R10055 += 1, R10056 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R10134 += 1, R10056 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10134 += 1 };
  s4 -> s4 [0, 65535] { R10134 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10134 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R10135 += 1, R10136 += 1 };
  s0 -> s2 [0, 65535] { R10136 += 1, R10057 += 1, R10058 += 1 };
  s0 -> s3 [65, 65] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10136 += 1 };
  s1 -> s3 [65, 65] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10136 += 1, R10057 += 1, R10058 += 1 };
  s2 -> s3 [65, 65] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10136 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10136 += 1, R10058 += 1, R421 += 1, R422 += 1 };
  s4 -> s6 [0, 65535] { R10136 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10136 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R10138 += 1, R10059 += 1, R10060 += 1 };
  s0 -> s0 [0, 65535] { R10137 += 1, R10138 += 1 };
  s0 -> s3 [65, 65] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 65535] { R10138 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R10138 += 1, R10059 += 1, R10060 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R10138 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10138 += 1, R10060 += 1, R427 += 1, R428 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10138 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10138 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s2 [0, 64] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s0 [0, 65535] { R10139 += 1, R10140 += 1 };
  s0 -> s3 [0, 65535] { R10140 += 1, R10061 += 1, R10062 += 1 };
  s0 -> s4 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s5 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s6 [65, 65] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s7 [65, 65] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s1 [66, 65535] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s2 [66, 65535] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [0, 64] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s2 [0, 64] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s4 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s5 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s6 [65, 65] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s7 [65, 65] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [66, 65535] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s2 [66, 65535] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 65535] { R10140 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s5 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s1 [0, 64] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s2 [0, 64] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s3 [0, 65535] { R10140 += 1, R10061 += 1, R10062 += 1 };
  s3 -> s4 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s5 [65, 65] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s6 [65, 65] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s7 [65, 65] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [66, 65535] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s2 [66, 65535] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s4 -> s4 [0, 65535] { R10140 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s5 -> s8 [0, 65535] { R10140 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R10140 += 1, R10062 += 1, R7260 += 1, R7261 += 1 };
  s7 -> s7 [0, 65535] { R10140 += 1, R10062 += 1, R7259 += 1, R7260 += 1 };
  s8 -> s8 [0, 65535] { R10140 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s2 [0, 64] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s3 [0, 65535] { R10142 += 1, R10063 += 1, R10064 += 1 };
  s0 -> s0 [0, 65535] { R10141 += 1, R10142 += 1 };
  s0 -> s4 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s5 [65, 65] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s6 [65, 65] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s7 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s1 [66, 65535] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s2 [66, 65535] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s1 -> s1 [0, 64] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s1 [0, 65535] { R10142 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s7 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s1 [66, 65535] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s1 [0, 64] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s2 [0, 64] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s4 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s5 [65, 65] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s6 [65, 65] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s7 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s1 [66, 65535] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s2 [66, 65535] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s1 [0, 64] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s2 [0, 64] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s3 [0, 65535] { R10142 += 1, R10063 += 1, R10064 += 1 };
  s3 -> s4 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s5 [65, 65] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s6 [65, 65] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s7 [65, 65] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s1 [66, 65535] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s2 [66, 65535] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s4 -> s4 [0, 65535] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s4 -> s9 [0, 65535] { R10142 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s4 [0, 65535] { R10142 += 1, R10064 += 1, R9540 += 1, R9541 += 1 };
  s5 -> s5 [0, 65535] { R10142 += 1, R10064 += 1, R9539 += 1, R9540 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10142 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10142 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10144 += 1, R10066 += 1 };
  s0 -> s0 [0, 65535] { R10143 += 1, R10144 += 1 };
  s0 -> s2 [0, 65535] { R10144 += 1, R10065 += 1, R10066 += 1 };
  s0 -> s3 [65, 65] { R10144 += 1, R10066 += 1 };
  s0 -> s4 [65, 65] { R10144 += 1, R10066 += 1 };
  s0 -> s1 [66, 65535] { R10144 += 1, R10066 += 1 };
  s1 -> s1 [0, 64] { R10144 += 1, R10066 += 1 };
  s1 -> s1 [0, 65535] { R10144 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10144 += 1, R10066 += 1 };
  s1 -> s4 [65, 65] { R10144 += 1, R10066 += 1 };
  s1 -> s1 [66, 65535] { R10144 += 1, R10066 += 1 };
  s2 -> s1 [0, 64] { R10144 += 1, R10066 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10144 += 1, R10065 += 1, R10066 += 1 };
  s2 -> s3 [65, 65] { R10144 += 1, R10066 += 1 };
  s2 -> s4 [65, 65] { R10144 += 1, R10066 += 1 };
  s2 -> s1 [66, 65535] { R10144 += 1, R10066 += 1 };
  s3 -> s3 [0, 65535] { R10144 += 1, R10066 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10144 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10144 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s0 -> s0 [0, 65535] { R10145 += 1, R10146 += 1 };
  s0 -> s2 [0, 65535] { R10146 += 1, R10067 += 1, R10068 += 1 };
  s0 -> s3 [65, 65] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s0 -> s4 [65, 65] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s0 -> s1 [66, 65535] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s1 [0, 64] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10146 += 1 };
  s1 -> s3 [65, 65] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s4 [65, 65] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s1 [66, 65535] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s1 [0, 64] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10146 += 1, R10067 += 1, R10068 += 1 };
  s2 -> s3 [65, 65] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s4 [65, 65] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s1 [66, 65535] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10146 += 1, R10068 += 1, R9545 += 1, R9546 += 1 };
  s3 -> s6 [0, 65535] { R10146 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10146 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10146 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R10148 += 1, R10070 += 1 };
  s0 -> s0 [0, 65535] { R10147 += 1, R10148 += 1 };
  s0 -> s2 [0, 65535] { R10148 += 1, R10069 += 1, R10070 += 1 };
  s0 -> s3 [65, 65] { R10148 += 1, R10070 += 1 };
  s0 -> s4 [65, 65] { R10148 += 1, R10070 += 1 };
  s0 -> s1 [66, 65535] { R10148 += 1, R10070 += 1 };
  s1 -> s1 [0, 64] { R10148 += 1, R10070 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10148 += 1 };
  s1 -> s3 [65, 65] { R10148 += 1, R10070 += 1 };
  s1 -> s4 [65, 65] { R10148 += 1, R10070 += 1 };
  s1 -> s1 [66, 65535] { R10148 += 1, R10070 += 1 };
  s2 -> s1 [0, 64] { R10148 += 1, R10070 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10148 += 1, R10069 += 1, R10070 += 1 };
  s2 -> s3 [65, 65] { R10148 += 1, R10070 += 1 };
  s2 -> s4 [65, 65] { R10148 += 1, R10070 += 1 };
  s2 -> s1 [66, 65535] { R10148 += 1, R10070 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10148 += 1 };
  s3 -> s3 [0, 65535] { R10148 += 1, R10070 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10148 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s0 -> s2 [0, 64] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s3 [0, 65535] { R10150 += 1, R10071 += 1, R10072 += 1 };
  s0 -> s0 [0, 65535] { R10149 += 1, R10150 += 1 };
  s0 -> s4 [65, 65] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s5 [65, 65] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s6 [65, 65] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s0 -> s7 [65, 65] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s0 -> s1 [66, 79] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s0 -> s2 [66, 65535] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s0 -> s8 [80, 80] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s0 -> s1 [81, 65535] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s1 -> s1 [0, 64] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s1 -> s6 [65, 65] { R10150 += 1, R10072 += 1 };
  s1 -> s7 [65, 65] { R10150 += 1, R10072 += 1 };
  s1 -> s1 [66, 79] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s1 -> s1 [66, 65535] { R10150 += 1, R10072 += 1 };
  s1 -> s8 [80, 80] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s1 -> s1 [81, 65535] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s2 -> s1 [0, 64] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s2 -> s2 [0, 64] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s2 -> s4 [65, 65] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s2 -> s5 [65, 65] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s2 -> s6 [65, 65] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s2 -> s7 [65, 65] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s2 -> s1 [66, 79] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s2 -> s2 [66, 65535] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s2 -> s8 [80, 80] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s2 -> s1 [81, 65535] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s3 -> s1 [0, 64] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s3 -> s2 [0, 64] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s3 -> s3 [0, 65535] { R10150 += 1, R10071 += 1, R10072 += 1 };
  s3 -> s4 [65, 65] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s3 -> s5 [65, 65] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s3 -> s6 [65, 65] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s3 -> s7 [65, 65] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s3 -> s1 [66, 79] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s3 -> s2 [66, 65535] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s3 -> s8 [80, 80] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s3 -> s1 [81, 65535] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s5 -> s7 [0, 79] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s5 -> s5 [0, 65535] { R10150 += 1, R10072 += 1, R10001 += 1, R10002 += 1 };
  s5 -> s10 [80, 80] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s5 -> s7 [81, 65535] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s7 -> s7 [0, 79] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s7 -> s7 [0, 65535] { R10150 += 1, R10072 += 1 };
  s7 -> s10 [80, 80] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s7 -> s7 [81, 65535] { R10150 += 1, R10072 += 1, R10002 += 1, R10003 += 1 };
  s8 -> s8 [0, 64] { R10150 += 1, R10072 += 1 };
  s8 -> s8 [0, 65535] { R10150 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R10150 += 1, R10072 += 1 };
  s8 -> s11 [65, 65] { R10150 += 1, R10072 += 1 };
  s8 -> s8 [66, 65535] { R10150 += 1, R10072 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10150 += 1 };
  s10 -> s10 [0, 65535] { R10150 += 1, R10072 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10150 += 1 };
  s11 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10150 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R10040 && R3 = R10150 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R10007 = 0 && R10008 = R10040 && R10009 = 0 && R10010 = R10040 && R10011 = 0 && R10012 = R10040 && R10013 = 0 && R10014 = R10040 && R10015 = 0 && R10016 = R10040 && R10017 = 0 && R10018 = R10040 && R10019 = 0 && R10020 = R10040 && R10021 = 0 && R10022 = R10040 && R10023 = 0 && R10024 = R10040 && R10025 = 0 && R10026 = R10040 && R10027 = 0 && R10028 = R10040 && R10029 = 0 && R10030 = R10040 && R10031 = 0 && R10032 = R10040 && R10033 = 0 && R10034 = R10040 && R10035 = 0 && R10036 = R10040 && R10037 = 0 && R10038 = R10040 && R10039 = 0 && R10043 = 0 && R10044 = 0 && R10061 = 0 && R10062 = 0 && R10063 = 0 && R10064 = 0 && R10071 = 0 && R10072 = 0 && R10073 = 10 && R10074 = R10150 && R10075 = 10 && R10076 = R10150 && R10077 = 10 && R10078 = R10150 && R10079 = 10 && R10080 = R10150 && R10081 = 10 && R10082 = R10150 && R10083 = 10 && R10084 = R10150 && R10085 = 10 && R10086 = R10150 && R10087 = 10 && R10088 = R10150 && R10089 = 10 && R10090 = R10150 && R10091 = 10 && R10092 = R10150 && R10093 = 10 && R10094 = R10150 && R10095 = 10 && R10096 = R10150 && R10097 = 10 && R10098 = R10150 && R10099 = 10 && R10100 = R10150 && R10101 = 10 && R10102 = R10150 && R10103 = 10 && R10104 = R10150 && R10105 = 10 && R10106 = R10150 && R10107 = 10 && R10108 = R10150 && R10109 = 10 && R10110 = R10150 && R10111 = 10 && R10112 = R10150 && R10113 = 10 && R10114 = R10150 && R10115 = 10 && R10116 = R10150 && R10117 = 10 && R10118 = R10150 && R10119 = 10 && R10120 = R10150 && R10121 = 10 && R10122 = R10150 && R10123 = 10 && R10124 = R10150 && R10125 = 10 && R10126 = R10150 && R10127 = 10 && R10128 = R10150 && R10129 = 10 && R10130 = R10150 && R10131 = 10 && R10132 = R10150 && R10133 = 10 && R10134 = R10150 && R10135 = 10 && R10136 = R10150 && R10137 = 10 && R10138 = R10150 && R10139 = 10 && R10140 = R10150 && R10141 = 10 && R10142 = R10150 && R10143 = 10 && R10144 = R10150 && R10145 = 10 && R10146 = R10150 && R10147 = 10 && R10148 = R10150 && R10149 = 10 && R7264 + R7261 + R10006 + R10003 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R10040 && 9 < R10150 && (R20 = 0 || (R10041 = 0 && R10042 = 0)) && (R20 = 0 || (R10045 = 0 && R10046 = 0)) && (R20 = 0 || (R10047 = 0 && R10048 = 0)) && (R20 = 0 || (R10049 = 0 && R10050 = 0)) && (R20 = 0 || (R10051 = 0 && R10052 = 0)) && (R20 = 0 || (R10053 = 0 && R10054 = 0)) && (R20 = 0 || (R10055 = 0 && R10056 = 0)) && (R20 = 0 || (R10057 = 0 && R10058 = 0)) && (R20 = 0 || (R10059 = 0 && R10060 = 0)) && (R20 = 0 || (R10065 = 0 && R10066 = 0)) && (R20 = 0 || (R10067 = 0 && R10068 = 0)) && (R20 = 0 || (R10069 = 0 && R10070 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R9544 + R9541 = 0 || (R9542 + R9539 = 0 && R9543 + R9540 = 0)) && (R9550 + R9547 = 0 || (R9548 + R9545 = 0 && R9549 + R9546 = 0)) && (R9550 + R9547 = 0 || (R10004 + R10001 = 0 && R10005 + R10002 = 0));
// End of Parikh automata intersection problem
