// Parikh automata intersection problem, generated by OSTRICH+
counter int R10301, R10302, R10303, R10304, R10305, R10306, R10757, R10758, R10759, R10760, R10761, R10762, R10763, R10764, R10765, R10766, R10767, R10768, R10769, R10770, R10771, R10772, R10773, R10774, R10775, R10776, R10777, R10778, R10779, R10780, R10781, R10782, R10783, R10784, R10785, R10786, R10787, R10788, R10789, R10790, R10791, R10792, R10793, R10794, R10795, R10796, R10797, R10798, R10799, R10800, R10801, R10802, R10803, R10804, R10805, R10806, R10807, R10808, R10809, R10810, R10811, R10812, R10813, R10814, R10815, R10816, R10817, R10818, R10819, R10820, R10821, R10822, R10823, R10824, R10825, R10826, R10827, R10828, R10829, R10830, R10831, R10832, R10833, R10834, R10835, R10836, R10837, R10838, R10839, R10840, R10841, R10842, R10843, R10844, R10845, R10846, R10847, R10848, R10849, R10850, R10851, R10852, R10853, R10854, R10855, R10856, R10857, R10858, R10859, R10860, R10861, R10862, R10863, R10864, R10865, R10866, R10867, R10868, R10869, R10870, R10871, R10872, R10873, R10874, R10875, R10876, R10877, R10878, R10879, R10880, R10881, R10882, R10883, R10884, R10885, R10886, R10887, R10888, R10889, R10890, R10891, R10892, R10893, R10894, R10895, R10896, R10897, R10898, R10899, R10900, R10901, R10902, R10903, R10904, R10905, R10906, R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264, R9539, R9540, R9541, R9542, R9543, R9544;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R10830 += 1 };
  s0 -> s0 [0, 65535] { R10829 += 1, R10830 += 1 };
  s0 -> s1 [45, 45] { R10830 += 1 };
  s0 -> s2 [46, 46] { R10830 += 1 };
  s0 -> s1 [48, 62] { R10830 += 1 };
  s0 -> s3 [65, 65] { R10830 += 1 };
  s0 -> s1 [66, 65535] { R10830 += 1 };
  s1 -> s1 [0, 43] { R10830 += 1 };
  s1 -> s1 [45, 45] { R10830 += 1 };
  s1 -> s2 [46, 46] { R10830 += 1 };
  s1 -> s1 [48, 62] { R10830 += 1 };
  s1 -> s3 [65, 65] { R10830 += 1 };
  s1 -> s1 [66, 65535] { R10830 += 1 };
  s2 -> s1 [0, 43] { R10830 += 1 };
  s2 -> s1 [45, 45] { R10830 += 1 };
  s2 -> s2 [46, 46] { R10830 += 1 };
  s2 -> s1 [48, 62] { R10830 += 1 };
  s2 -> s3 [65, 65] { R10830 += 1 };
  s2 -> s1 [66, 114] { R10830 += 1 };
  s2 -> s8 [115, 115] { R10830 += 1 };
  s2 -> s1 [116, 65535] { R10830 += 1 };
  s3 -> s3 [0, 43] { R10830 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R10830 += 1 };
  s3 -> s4 [46, 46] { R10830 += 1 };
  s3 -> s3 [48, 62] { R10830 += 1 };
  s3 -> s3 [65, 65535] { R10830 += 1 };
  s4 -> s3 [0, 43] { R10830 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R10830 += 1 };
  s4 -> s4 [46, 46] { R10830 += 1 };
  s4 -> s3 [48, 62] { R10830 += 1 };
  s4 -> s3 [65, 114] { R10830 += 1 };
  s4 -> s5 [115, 115] { R10830 += 1 };
  s4 -> s3 [116, 65535] { R10830 += 1 };
  s5 -> s3 [0, 43] { R10830 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R10830 += 1 };
  s5 -> s4 [46, 46] { R10830 += 1 };
  s5 -> s3 [48, 62] { R10830 += 1 };
  s5 -> s3 [65, 110] { R10830 += 1 };
  s5 -> s6 [111, 111] { R10830 += 1 };
  s5 -> s3 [112, 65535] { R10830 += 1 };
  s6 -> s3 [0, 43] { R10830 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R10830 += 1 };
  s6 -> s4 [46, 46] { R10830 += 1 };
  s6 -> s3 [48, 62] { R10830 += 1 };
  s6 -> s3 [65, 98] { R10830 += 1 };
  s6 -> s7 [99, 99] { R10830 += 1 };
  s6 -> s3 [100, 65535] { R10830 += 1 };
  s7 -> s3 [0, 43] { R10830 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R10830 += 1 };
  s7 -> s4 [46, 46] { R10830 += 1 };
  s7 -> s3 [48, 62] { R10830 += 1 };
  s7 -> s3 [65, 106] { R10830 += 1 };
  s7 -> s3 [108, 65535] { R10830 += 1 };
  s8 -> s1 [0, 43] { R10830 += 1 };
  s8 -> s1 [45, 45] { R10830 += 1 };
  s8 -> s2 [46, 46] { R10830 += 1 };
  s8 -> s1 [48, 62] { R10830 += 1 };
  s8 -> s3 [65, 65] { R10830 += 1 };
  s8 -> s1 [66, 110] { R10830 += 1 };
  s8 -> s9 [111, 111] { R10830 += 1 };
  s8 -> s1 [112, 65535] { R10830 += 1 };
  s9 -> s1 [0, 43] { R10830 += 1 };
  s9 -> s1 [45, 45] { R10830 += 1 };
  s9 -> s2 [46, 46] { R10830 += 1 };
  s9 -> s1 [48, 62] { R10830 += 1 };
  s9 -> s3 [65, 65] { R10830 += 1 };
  s9 -> s1 [66, 98] { R10830 += 1 };
  s9 -> s10 [99, 99] { R10830 += 1 };
  s9 -> s1 [100, 65535] { R10830 += 1 };
  s10 -> s1 [0, 43] { R10830 += 1 };
  s10 -> s1 [45, 45] { R10830 += 1 };
  s10 -> s2 [46, 46] { R10830 += 1 };
  s10 -> s1 [48, 62] { R10830 += 1 };
  s10 -> s3 [65, 65] { R10830 += 1 };
  s10 -> s1 [66, 106] { R10830 += 1 };
  s10 -> s1 [108, 65535] { R10830 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R10832 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10831 += 1, R10832 += 1 };
  s1 -> s1 [0, 65535] { R10832 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R10834 += 1 };
  s0 -> s0 [0, 65535] { R10833 += 1, R10834 += 1 };
  s0 -> s2 [0, 65535] { R10834 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R10834 += 1 };
  s0 -> s1 [59, 65535] { R10834 += 1 };
  s1 -> s1 [0, 57] { R10834 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R10834 += 1 };
  s1 -> s1 [59, 65535] { R10834 += 1 };
  s2 -> s1 [0, 57] { R10834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10834 += 1, R11 += 1 };
  s2 -> s3 [58, 58] { R10834 += 1 };
  s2 -> s1 [59, 65535] { R10834 += 1 };
  s3 -> s3 [0, 65535] { R10834 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R10836 += 1 };
  s0 -> s2 [0, 65535] { R10836 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R10835 += 1, R10836 += 1 };
  s0 -> s3 [65, 65] { R10836 += 1 };
  s0 -> s1 [66, 65535] { R10836 += 1 };
  s1 -> s1 [0, 64] { R10836 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R10836 += 1 };
  s1 -> s1 [66, 65535] { R10836 += 1 };
  s2 -> s1 [0, 64] { R10836 += 1 };
  s2 -> s2 [0, 65535] { R10836 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R10836 += 1 };
  s2 -> s1 [66, 65535] { R10836 += 1 };
  s3 -> s3 [0, 65535] { R10836 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R10838 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R10837 += 1, R10838 += 1 };
  s0 -> s2 [0, 65535] { R10838 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R10838 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R10838 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R10838 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10838 += 1 };
  s2 -> s1 [0, 90] { R10838 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10838 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R10838 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R10838 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R10838 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10838 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R10840 += 1, R24 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10839 += 1, R10840 += 1 };
  s0 -> s2 [0, 65535] { R10840 += 1, R23 += 1, R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10840 += 1 };
  s1 -> s1 [0, 65535] { R10840 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10840 += 1, R24 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R10840 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10840 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R10842 += 1, R10764 += 1 };
  s0 -> s0 [0, 65535] { R10841 += 1, R10842 += 1 };
  s0 -> s2 [0, 65535] { R10842 += 1, R10763 += 1, R10764 += 1 };
  s0 -> s1 [66, 65535] { R10842 += 1, R10764 += 1 };
  s1 -> s1 [0, 64] { R10842 += 1, R10764 += 1 };
  s1 -> s1 [0, 65535] { R10842 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R10842 += 1, R10764 += 1 };
  s2 -> s1 [0, 64] { R10842 += 1, R10764 += 1 };
  s2 -> s2 [0, 65535] { R10842 += 1, R10763 += 1, R10764 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R10842 += 1, R10764 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R10844 += 1, R10766 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R10843 += 1, R10844 += 1 };
  s0 -> s2 [0, 65535] { R10844 += 1, R10765 += 1, R10766 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10844 += 1, R10766 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R10844 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10844 += 1, R10766 += 1, R19 += 1 };
  s2 -> s2 [0, 65535] { R10844 += 1, R10765 += 1, R10766 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10844 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R10846 += 1, R10768 += 1 };
  s0 -> s0 [0, 65535] { R10845 += 1, R10846 += 1 };
  s0 -> s2 [0, 65535] { R10846 += 1, R10767 += 1, R10768 += 1 };
  s0 -> s1 [80, 65535] { R10846 += 1, R10768 += 1 };
  s1 -> s1 [0, 65] { R10846 += 1, R10768 += 1 };
  s1 -> s1 [0, 65535] { R10846 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R10846 += 1, R10768 += 1 };
  s2 -> s1 [0, 65] { R10846 += 1, R10768 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10846 += 1, R10767 += 1, R10768 += 1 };
  s2 -> s1 [80, 65535] { R10846 += 1, R10768 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10848 += 1, R10770 += 1, R406 += 1 };
  s0 -> s0 [0, 65535] { R10847 += 1, R10848 += 1 };
  s0 -> s2 [0, 65535] { R10848 += 1, R10769 += 1, R10770 += 1 };
  s1 -> s1 [0, 65535] { R10848 += 1, R10770 += 1, R406 += 1 };
  s1 -> s4 [0, 65535] { R10848 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10848 += 1, R10770 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10848 += 1, R10769 += 1, R10770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10848 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R10850 += 1, R10772 += 1 };
  s0 -> s2 [0, 65535] { R10850 += 1, R10772 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R10849 += 1, R10850 += 1 };
  s0 -> s3 [0, 65535] { R10850 += 1, R10771 += 1, R10772 += 1 };
  s0 -> s1 [84, 65535] { R10850 += 1, R10772 += 1 };
  s1 -> s1 [0, 82] { R10850 += 1, R10772 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10850 += 1 };
  s1 -> s1 [84, 65535] { R10850 += 1, R10772 += 1 };
  s2 -> s1 [0, 82] { R10850 += 1, R10772 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10850 += 1, R10772 += 1, R408 += 1 };
  s2 -> s5 [0, 65535] { R10850 += 1 };
  s2 -> s1 [84, 65535] { R10850 += 1, R10772 += 1 };
  s3 -> s1 [0, 82] { R10850 += 1, R10772 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10850 += 1, R10772 += 1, R408 += 1 };
  s3 -> s3 [0, 65535] { R10850 += 1, R10771 += 1, R10772 += 1 };
  s3 -> s1 [84, 65535] { R10850 += 1, R10772 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10850 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R10852 += 1, R10774 += 1 };
  s0 -> s0 [0, 65535] { R10851 += 1, R10852 += 1 };
  s0 -> s2 [0, 65535] { R10852 += 1, R10774 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R10852 += 1, R10773 += 1, R10774 += 1 };
  s0 -> s1 [81, 65535] { R10852 += 1, R10774 += 1 };
  s1 -> s1 [0, 79] { R10852 += 1, R10774 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10852 += 1 };
  s1 -> s1 [81, 65535] { R10852 += 1, R10774 += 1 };
  s2 -> s1 [0, 79] { R10852 += 1, R10774 += 1 };
  s2 -> s5 [0, 65535] { R10852 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10852 += 1, R10774 += 1, R410 += 1 };
  s2 -> s1 [81, 65535] { R10852 += 1, R10774 += 1 };
  s3 -> s1 [0, 79] { R10852 += 1, R10774 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10852 += 1, R10774 += 1, R410 += 1 };
  s3 -> s3 [0, 65535] { R10852 += 1, R10773 += 1, R10774 += 1 };
  s3 -> s1 [81, 65535] { R10852 += 1, R10774 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10852 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10853 += 1, R10854 += 1 };
  s0 -> s1 [0, 65535] { R10854 += 1, R10776 += 1, R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R10854 += 1, R10775 += 1, R10776 += 1 };
  s0 -> s3 [0, 65535] { R10854 += 1, R10776 += 1, R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R10854 += 1, R10776 += 1, R415 += 1, R416 += 1 };
  s1 -> s6 [0, 65535] { R10854 += 1, R10776 += 1 };
  s1 -> s4 [0, 65535] { R10854 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10854 += 1, R10776 += 1, R415 += 1, R416 += 1 };
  s2 -> s2 [0, 65535] { R10854 += 1, R10775 += 1, R10776 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10854 += 1, R10776 += 1, R414 += 1, R415 += 1 };
  s3 -> s1 [0, 65535] { R10854 += 1, R10776 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535] { R10854 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10854 += 1, R10776 += 1, R414 += 1, R415 += 1 };
  s4 -> s4 [0, 65535] { R10854 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10854 += 1, R10776 += 1 };
  s6 -> s4 [0, 65535] { R10854 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R10855 += 1, R10856 += 1 };
  s0 -> s1 [0, 65535] { R10856 += 1, R10778 += 1 };
  s0 -> s2 [0, 65535] { R10856 += 1, R10777 += 1, R10778 += 1 };
  s1 -> s4 [0, 65535] { R10856 += 1 };
  s1 -> s1 [0, 65535] { R10856 += 1, R10778 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10856 += 1, R10778 += 1 };
  s2 -> s2 [0, 65535] { R10856 += 1, R10777 += 1, R10778 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10856 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R10858 += 1, R10780 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R10857 += 1, R10858 += 1 };
  s0 -> s2 [0, 65535] { R10858 += 1, R10780 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [0, 65535] { R10858 += 1, R10779 += 1, R10780 += 1 };
  s0 -> s1 [81, 65535] { R10858 += 1, R10780 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R10858 += 1, R10780 += 1, R420 += 1 };
  s1 -> s5 [0, 65535] { R10858 += 1 };
  s1 -> s1 [0, 65535] { R10858 += 1, R10780 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R10858 += 1, R10780 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R10858 += 1, R10780 += 1, R420 += 1 };
  s2 -> s5 [0, 65535] { R10858 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10858 += 1, R10780 += 1, R419 += 1, R420 += 1 };
  s2 -> s1 [81, 65535] { R10858 += 1, R10780 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R10858 += 1, R10780 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10858 += 1, R10780 += 1, R419 += 1, R420 += 1 };
  s3 -> s3 [0, 65535] { R10858 += 1, R10779 += 1, R10780 += 1 };
  s3 -> s1 [81, 65535] { R10858 += 1, R10780 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10858 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R10860 += 1, R10781 += 1, R10782 += 1 };
  s0 -> s2 [0, 65535] { R10860 += 1, R10782 += 1, R425 += 1, R426 += 1 };
  s0 -> s0 [0, 65535] { R10859 += 1, R10860 += 1 };
  s0 -> s3 [0, 65535] { R10860 += 1, R10782 += 1, R424 += 1, R425 += 1 };
  s1 -> s1 [0, 65535] { R10860 += 1, R10781 += 1, R10782 += 1 };
  s1 -> s2 [0, 65535] { R10860 += 1, R10782 += 1, R425 += 1, R426 += 1 };
  s1 -> s3 [0, 65535] { R10860 += 1, R10782 += 1, R424 += 1, R425 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10860 += 1, R10782 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535] { R10860 += 1, R10782 += 1 };
  s2 -> s4 [0, 65535] { R10860 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10860 += 1, R10782 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R10860 += 1, R10782 += 1, R424 += 1, R425 += 1 };
  s3 -> s4 [0, 65535] { R10860 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10860 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10860 += 1, R10782 += 1 };
  s6 -> s4 [0, 65535] { R10860 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R10861 += 1, R10862 += 1 };
  s0 -> s2 [0, 65535] { R10862 += 1, R10783 += 1, R10784 += 1 };
  s0 -> s3 [0, 65535] { R10862 += 1, R10784 += 1, R429 += 1, R430 += 1 };
  s0 -> s1 [91, 107] { R10862 += 1, R10784 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R10862 += 1, R10784 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R10862 += 1 };
  s1 -> s1 [0, 65535] { R10862 += 1, R10784 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [91, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s2 -> s2 [0, 65535] { R10862 += 1, R10783 += 1, R10784 += 1 };
  s2 -> s3 [0, 65535] { R10862 += 1, R10784 += 1, R429 += 1, R430 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [91, 107] { R10862 += 1, R10784 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R10862 += 1, R10784 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s3 -> s5 [0, 65535] { R10862 += 1 };
  s3 -> s3 [0, 65535] { R10862 += 1, R10784 += 1, R429 += 1, R430 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [91, 107] { R10862 += 1, R10784 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R10862 += 1, R10784 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s4 -> s5 [0, 65535] { R10862 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10862 += 1, R10784 += 1 };
  s4 -> s1 [91, 110] { R10862 += 1, R10784 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R10862 += 1, R10784 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s5 -> s5 [0, 65535] { R10862 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s7 -> s5 [0, 65535] { R10862 += 1 };
  s7 -> s7 [0, 65535] { R10862 += 1, R10784 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s1 [91, 98] { R10862 += 1, R10784 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R10862 += 1, R10784 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s8 -> s5 [0, 65535] { R10862 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10862 += 1, R10784 += 1 };
  s8 -> s1 [91, 96] { R10862 += 1, R10784 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R10862 += 1, R10784 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s9 -> s5 [0, 65535] { R10862 += 1 };
  s9 -> s9 [0, 65535] { R10862 += 1, R10784 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s1 [91, 107] { R10862 += 1, R10784 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R10862 += 1, R10784 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s10 -> s5 [0, 65535] { R10862 += 1 };
  s10 -> s6 [0, 65535];
  s10 -> s10 [0, 65535] { R10862 += 1, R10784 += 1 };
  s10 -> s1 [91, 103] { R10862 += 1, R10784 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R10862 += 1, R10784 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s11 -> s5 [0, 65535] { R10862 += 1 };
  s11 -> s6 [0, 65535];
  s11 -> s11 [0, 65535] { R10862 += 1, R10784 += 1 };
  s11 -> s1 [91, 110] { R10862 += 1, R10784 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R10862 += 1, R10784 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s12 -> s5 [0, 65535] { R10862 += 1 };
  s12 -> s6 [0, 65535];
  s12 -> s12 [0, 65535] { R10862 += 1, R10784 += 1 };
  s12 -> s1 [91, 114] { R10862 += 1, R10784 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R10862 += 1, R10784 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s13 -> s5 [0, 65535] { R10862 += 1 };
  s13 -> s6 [0, 65535];
  s13 -> s13 [0, 65535] { R10862 += 1, R10784 += 1 };
  s13 -> s1 [91, 115] { R10862 += 1, R10784 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R10862 += 1, R10784 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R10862 += 1, R10784 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R10862 += 1, R10784 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R10864 += 1, R10785 += 1, R10786 += 1 };
  s0 -> s2 [0, 65535] { R10864 += 1, R10786 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s0 [0, 65535] { R10863 += 1, R10864 += 1 };
  s0 -> s3 [0, 65535] { R10864 += 1, R10786 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10864 += 1, R10785 += 1, R10786 += 1 };
  s1 -> s2 [0, 65535] { R10864 += 1, R10786 += 1, R7263 += 1, R7264 += 1 };
  s1 -> s3 [0, 65535] { R10864 += 1, R10786 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10864 += 1 };
  s2 -> s2 [0, 65535] { R10864 += 1, R10786 += 1, R7263 += 1, R7264 += 1 };
  s2 -> s3 [0, 65535] { R10864 += 1, R10786 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10864 += 1 };
  s3 -> s3 [0, 65535] { R10864 += 1, R10786 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10864 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 65535] { R10866 += 1, R10787 += 1, R10788 += 1 };
  s0 -> s2 [0, 65535] { R10866 += 1, R10788 += 1 };
  s0 -> s3 [0, 65535] { R10866 += 1, R10788 += 1, R9543 += 1, R9544 += 1 };
  s0 -> s0 [0, 65535] { R10865 += 1, R10866 += 1 };
  s1 -> s1 [0, 65535] { R10866 += 1, R10787 += 1, R10788 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10866 += 1, R10788 += 1 };
  s1 -> s3 [0, 65535] { R10866 += 1, R10788 += 1, R9543 += 1, R9544 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10866 += 1 };
  s2 -> s2 [0, 65535] { R10866 += 1, R10788 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10866 += 1 };
  s3 -> s2 [0, 65535] { R10866 += 1, R10788 += 1 };
  s3 -> s3 [0, 65535] { R10866 += 1, R10788 += 1, R9543 += 1, R9544 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10866 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R10867 += 1, R10868 += 1 };
  s0 -> s1 [0, 65535] { R10868 += 1, R10790 += 1 };
  s0 -> s2 [0, 65535] { R10868 += 1, R10789 += 1, R10790 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10868 += 1 };
  s1 -> s1 [0, 65535] { R10868 += 1, R10790 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10868 += 1, R10790 += 1 };
  s2 -> s2 [0, 65535] { R10868 += 1, R10789 += 1, R10790 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10868 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R10870 += 1, R10792 += 1, R10305 += 1, R10306 += 1 };
  s0 -> s2 [0, 65535] { R10870 += 1, R10791 += 1, R10792 += 1 };
  s0 -> s0 [0, 65535] { R10869 += 1, R10870 += 1 };
  s0 -> s3 [0, 65535] { R10870 += 1, R10792 += 1 };
  s1 -> s1 [0, 65535] { R10870 += 1, R10792 += 1, R10305 += 1, R10306 += 1 };
  s1 -> s4 [0, 65535] { R10870 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10870 += 1, R10792 += 1 };
  s2 -> s1 [0, 65535] { R10870 += 1, R10792 += 1, R10305 += 1, R10306 += 1 };
  s2 -> s2 [0, 65535] { R10870 += 1, R10791 += 1, R10792 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10870 += 1, R10792 += 1 };
  s3 -> s4 [0, 65535] { R10870 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10870 += 1, R10792 += 1 };
  s4 -> s4 [0, 65535] { R10870 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R10872 += 1, R10793 += 1, R10794 += 1 };
  s0 -> s2 [0, 65535] { R10872 += 1, R10794 += 1 };
  s0 -> s0 [0, 65535] { R10871 += 1, R10872 += 1 };
  s1 -> s1 [0, 65535] { R10872 += 1, R10793 += 1, R10794 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10872 += 1, R10794 += 1 };
  s2 -> s3 [0, 65535] { R10872 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10872 += 1, R10794 += 1 };
  s3 -> s3 [0, 65535] { R10872 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10874 += 1, R10796 += 1 };
  s0 -> s2 [0, 65535] { R10874 += 1, R10795 += 1, R10796 += 1 };
  s0 -> s0 [0, 65535] { R10873 += 1, R10874 += 1 };
  s1 -> s1 [0, 65535] { R10874 += 1, R10796 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10874 += 1 };
  s2 -> s1 [0, 65535] { R10874 += 1, R10796 += 1 };
  s2 -> s2 [0, 65535] { R10874 += 1, R10795 += 1, R10796 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10874 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 65535] { R10876 += 1, R10797 += 1, R10798 += 1 };
  s0 -> s0 [0, 65535] { R10875 += 1, R10876 += 1 };
  s0 -> s2 [0, 65535] { R10876 += 1, R10798 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R10876 += 1, R10797 += 1, R10798 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R10876 += 1, R10798 += 1, R20 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10876 += 1, R10798 += 1, R20 += 1 };
  s2 -> s4 [0, 65535] { R10876 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10876 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R10878 += 1, R10800 += 1 };
  s0 -> s0 [0, 65535] { R10877 += 1, R10878 += 1 };
  s0 -> s2 [0, 65535] { R10878 += 1, R10799 += 1, R10800 += 1 };
  s0 -> s3 [65, 65] { R10878 += 1, R10800 += 1 };
  s0 -> s4 [65, 65] { R10878 += 1, R10800 += 1 };
  s0 -> s5 [80, 80] { R10878 += 1, R10800 += 1 };
  s0 -> s1 [81, 65535] { R10878 += 1, R10800 += 1 };
  s1 -> s1 [0, 64] { R10878 += 1, R10800 += 1 };
  s1 -> s3 [65, 65] { R10878 += 1, R10800 += 1 };
  s1 -> s4 [65, 65] { R10878 += 1, R10800 += 1 };
  s1 -> s5 [80, 80] { R10878 += 1, R10800 += 1 };
  s1 -> s1 [81, 65535] { R10878 += 1, R10800 += 1 };
  s2 -> s1 [0, 64] { R10878 += 1, R10800 += 1 };
  s2 -> s2 [0, 65535] { R10878 += 1, R10799 += 1, R10800 += 1 };
  s2 -> s3 [65, 65] { R10878 += 1, R10800 += 1 };
  s2 -> s4 [65, 65] { R10878 += 1, R10800 += 1 };
  s2 -> s5 [80, 80] { R10878 += 1, R10800 += 1 };
  s2 -> s1 [81, 65535] { R10878 += 1, R10800 += 1 };
  s4 -> s4 [0, 65] { R10878 += 1, R10800 += 1 };
  s4 -> s8 [80, 80] { R10878 += 1, R10800 += 1 };
  s4 -> s4 [81, 65535] { R10878 += 1, R10800 += 1 };
  s5 -> s5 [0, 64] { R10878 += 1, R10800 += 1 };
  s5 -> s5 [0, 65535] { R10878 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R10878 += 1, R10800 += 1 };
  s5 -> s8 [65, 65] { R10878 += 1, R10800 += 1 };
  s5 -> s5 [80, 65535] { R10878 += 1, R10800 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10878 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R10878 += 1, R10800 += 1 };
  s8 -> s8 [0, 65535] { R10878 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R10878 += 1, R10800 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R10880 += 1, R10802 += 1, R405 += 1 };
  s0 -> s2 [0, 65535] { R10880 += 1, R10801 += 1, R10802 += 1 };
  s0 -> s0 [0, 65535] { R10879 += 1, R10880 += 1 };
  s0 -> s3 [65, 65] { R10880 += 1, R10802 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R10880 += 1, R10802 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R10880 += 1, R10802 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R10880 += 1, R10802 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R10880 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10880 += 1, R10802 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R10880 += 1, R10802 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R10880 += 1, R10802 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R10880 += 1, R10802 += 1, R405 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10880 += 1, R10801 += 1, R10802 += 1 };
  s2 -> s3 [65, 65] { R10880 += 1, R10802 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R10880 += 1, R10802 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R10880 += 1, R10802 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R10880 += 1, R10802 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R10880 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10880 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10880 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R10882 += 1, R10804 += 1, R407 += 1 };
  s0 -> s0 [0, 65535] { R10881 += 1, R10882 += 1 };
  s0 -> s2 [0, 65535] { R10882 += 1, R10803 += 1, R10804 += 1 };
  s0 -> s3 [65, 65] { R10882 += 1, R10804 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R10882 += 1, R10804 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R10882 += 1, R10804 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R10882 += 1, R10804 += 1, R407 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10882 += 1 };
  s1 -> s3 [65, 65] { R10882 += 1, R10804 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R10882 += 1, R10804 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R10882 += 1, R10804 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R10882 += 1, R10804 += 1, R407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10882 += 1, R10803 += 1, R10804 += 1 };
  s2 -> s3 [65, 65] { R10882 += 1, R10804 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R10882 += 1, R10804 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R10882 += 1, R10804 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R10882 += 1, R10804 += 1, R407 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10882 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10882 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10882 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R10884 += 1, R10806 += 1, R409 += 1 };
  s0 -> s0 [0, 65535] { R10883 += 1, R10884 += 1 };
  s0 -> s2 [0, 65535] { R10884 += 1, R10805 += 1, R10806 += 1 };
  s0 -> s3 [65, 65] { R10884 += 1, R10806 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R10884 += 1, R10806 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R10884 += 1, R10806 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R10884 += 1, R10806 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R10884 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10884 += 1, R10806 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R10884 += 1, R10806 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R10884 += 1, R10806 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R10884 += 1, R10806 += 1, R409 += 1 };
  s2 -> s2 [0, 65535] { R10884 += 1, R10805 += 1, R10806 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10884 += 1, R10806 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R10884 += 1, R10806 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R10884 += 1, R10806 += 1, R409 += 1 };
  s3 -> s3 [0, 65535] { R10884 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10884 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10884 += 1, R10806 += 1, R409 += 1 };
  s5 -> s5 [0, 65535] { R10884 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R10886 += 1, R10807 += 1, R10808 += 1 };
  s0 -> s0 [0, 65535] { R10885 += 1, R10886 += 1 };
  s0 -> s3 [65, 65] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10886 += 1 };
  s1 -> s3 [65, 65] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R10886 += 1, R10807 += 1, R10808 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R10886 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10886 += 1, R10808 += 1, R411 += 1, R412 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10886 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10886 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R10888 += 1, R10810 += 1 };
  s0 -> s2 [0, 65535] { R10888 += 1, R10809 += 1, R10810 += 1 };
  s0 -> s0 [0, 65535] { R10887 += 1, R10888 += 1 };
  s0 -> s3 [65, 65] { R10888 += 1, R10810 += 1 };
  s0 -> s4 [65, 65] { R10888 += 1, R10810 += 1 };
  s0 -> s1 [66, 65535] { R10888 += 1, R10810 += 1 };
  s1 -> s1 [0, 64] { R10888 += 1, R10810 += 1 };
  s1 -> s1 [0, 65535] { R10888 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R10888 += 1, R10810 += 1 };
  s1 -> s4 [65, 65] { R10888 += 1, R10810 += 1 };
  s1 -> s1 [66, 65535] { R10888 += 1, R10810 += 1 };
  s2 -> s1 [0, 64] { R10888 += 1, R10810 += 1 };
  s2 -> s2 [0, 65535] { R10888 += 1, R10809 += 1, R10810 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R10888 += 1, R10810 += 1 };
  s2 -> s4 [65, 65] { R10888 += 1, R10810 += 1 };
  s2 -> s1 [66, 65535] { R10888 += 1, R10810 += 1 };
  s3 -> s3 [0, 65535] { R10888 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10888 += 1, R10810 += 1 };
  s4 -> s5 [0, 65535] { R10888 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10888 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s0 -> s0 [0, 65535] { R10889 += 1, R10890 += 1 };
  s0 -> s2 [0, 65535] { R10890 += 1, R10811 += 1, R10812 += 1 };
  s0 -> s3 [65, 65] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10890 += 1 };
  s1 -> s3 [65, 65] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10890 += 1, R10811 += 1, R10812 += 1 };
  s2 -> s3 [65, 65] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s3 -> s6 [0, 65535] { R10890 += 1 };
  s3 -> s3 [0, 65535] { R10890 += 1, R10812 += 1, R417 += 1, R418 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10890 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10890 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s0 -> s2 [0, 65535] { R10892 += 1, R10813 += 1, R10814 += 1 };
  s0 -> s0 [0, 65535] { R10891 += 1, R10892 += 1 };
  s0 -> s3 [65, 65] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 65535] { R10892 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R10892 += 1, R10813 += 1, R10814 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R10892 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10892 += 1, R10814 += 1, R421 += 1, R422 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10892 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10892 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s0 -> s0 [0, 65535] { R10893 += 1, R10894 += 1 };
  s0 -> s2 [0, 65535] { R10894 += 1, R10815 += 1, R10816 += 1 };
  s0 -> s3 [65, 65] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10894 += 1 };
  s1 -> s3 [65, 65] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s2 -> s2 [0, 65535] { R10894 += 1, R10815 += 1, R10816 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s3 -> s3 [0, 65535] { R10894 += 1, R10816 += 1, R427 += 1, R428 += 1 };
  s3 -> s6 [0, 65535] { R10894 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10894 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10894 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [0, 64] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s3 [0, 65535] { R10896 += 1, R10817 += 1, R10818 += 1 };
  s0 -> s0 [0, 65535] { R10895 += 1, R10896 += 1 };
  s0 -> s4 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s5 [65, 65] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [65, 65] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s7 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s1 [66, 65535] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [66, 65535] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [0, 64] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R10896 += 1 };
  s1 -> s4 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s7 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [66, 65535] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [0, 64] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s4 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s5 [65, 65] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s6 [65, 65] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s7 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [66, 65535] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [0, 64] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [0, 64] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R10896 += 1, R10817 += 1, R10818 += 1 };
  s3 -> s4 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s5 [65, 65] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [65, 65] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s7 [65, 65] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s1 [66, 65535] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [66, 65535] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s4 -> s4 [0, 65535] { R10896 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10896 += 1, R10818 += 1, R7259 += 1, R7260 += 1 };
  s6 -> s7 [0, 65535] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10896 += 1 };
  s7 -> s7 [0, 65535] { R10896 += 1, R10818 += 1, R7260 += 1, R7261 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10896 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s2 [0, 64] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s0 [0, 65535] { R10897 += 1, R10898 += 1 };
  s0 -> s3 [0, 65535] { R10898 += 1, R10819 += 1, R10820 += 1 };
  s0 -> s4 [65, 65] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s5 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s6 [65, 65] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s7 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s1 [66, 65535] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s2 [66, 65535] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s1 -> s1 [0, 64] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s1 [0, 65535] { R10898 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s7 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s1 [66, 65535] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s1 [0, 64] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s2 [0, 64] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s4 [65, 65] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s5 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s6 [65, 65] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s7 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s1 [66, 65535] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s2 [66, 65535] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s1 [0, 64] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s2 [0, 64] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s3 [0, 65535] { R10898 += 1, R10819 += 1, R10820 += 1 };
  s3 -> s4 [65, 65] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s5 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s6 [65, 65] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s7 [65, 65] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s1 [66, 65535] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s2 [66, 65535] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s5 -> s5 [0, 65535] { R10898 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R10898 += 1, R10820 += 1, R9539 += 1, R9540 += 1 };
  s6 -> s7 [0, 65535] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s7 -> s8 [0, 65535] { R10898 += 1 };
  s7 -> s7 [0, 65535] { R10898 += 1, R10820 += 1, R9540 += 1, R9541 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10898 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R10900 += 1, R10822 += 1 };
  s0 -> s2 [0, 65535] { R10900 += 1, R10821 += 1, R10822 += 1 };
  s0 -> s0 [0, 65535] { R10899 += 1, R10900 += 1 };
  s0 -> s3 [65, 65] { R10900 += 1, R10822 += 1 };
  s0 -> s4 [65, 65] { R10900 += 1, R10822 += 1 };
  s0 -> s1 [66, 65535] { R10900 += 1, R10822 += 1 };
  s1 -> s1 [0, 64] { R10900 += 1, R10822 += 1 };
  s1 -> s1 [0, 65535] { R10900 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10900 += 1, R10822 += 1 };
  s1 -> s4 [65, 65] { R10900 += 1, R10822 += 1 };
  s1 -> s1 [66, 65535] { R10900 += 1, R10822 += 1 };
  s2 -> s1 [0, 64] { R10900 += 1, R10822 += 1 };
  s2 -> s2 [0, 65535] { R10900 += 1, R10821 += 1, R10822 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10900 += 1, R10822 += 1 };
  s2 -> s4 [65, 65] { R10900 += 1, R10822 += 1 };
  s2 -> s1 [66, 65535] { R10900 += 1, R10822 += 1 };
  s3 -> s6 [0, 65535] { R10900 += 1 };
  s3 -> s3 [0, 65535] { R10900 += 1, R10822 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10900 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10900 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s0 -> s2 [0, 64] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s0 -> s0 [0, 65535] { R10901 += 1, R10902 += 1 };
  s0 -> s3 [0, 65535] { R10902 += 1, R10823 += 1, R10824 += 1 };
  s0 -> s4 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s0 -> s5 [65, 65] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s0 -> s6 [65, 65] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s0 -> s7 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s0 -> s1 [66, 65535] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s0 -> s2 [66, 65535] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s1 -> s1 [0, 64] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s1 -> s1 [0, 65535] { R10902 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s1 -> s7 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s1 -> s1 [66, 65535] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s2 -> s1 [0, 64] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s2 -> s2 [0, 64] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s2 -> s4 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s2 -> s5 [65, 65] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s2 -> s6 [65, 65] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s2 -> s7 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s2 -> s1 [66, 65535] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s2 -> s2 [66, 65535] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s3 -> s1 [0, 64] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s3 -> s2 [0, 64] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s3 -> s3 [0, 65535] { R10902 += 1, R10823 += 1, R10824 += 1 };
  s3 -> s4 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s3 -> s5 [65, 65] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s3 -> s6 [65, 65] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s3 -> s7 [65, 65] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s3 -> s1 [66, 65535] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s3 -> s2 [66, 65535] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s4 -> s4 [0, 65535] { R10902 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10902 += 1, R10824 += 1, R10301 += 1, R10302 += 1 };
  s6 -> s7 [0, 65535] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R10902 += 1 };
  s7 -> s7 [0, 65535] { R10902 += 1, R10824 += 1, R10302 += 1, R10303 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10902 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R10904 += 1, R10826 += 1 };
  s0 -> s2 [0, 65535] { R10904 += 1, R10825 += 1, R10826 += 1 };
  s0 -> s0 [0, 65535] { R10903 += 1, R10904 += 1 };
  s0 -> s3 [65, 65] { R10904 += 1, R10826 += 1 };
  s0 -> s4 [65, 65] { R10904 += 1, R10826 += 1 };
  s0 -> s1 [66, 65535] { R10904 += 1, R10826 += 1 };
  s1 -> s1 [0, 64] { R10904 += 1, R10826 += 1 };
  s1 -> s1 [0, 65535] { R10904 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R10904 += 1, R10826 += 1 };
  s1 -> s4 [65, 65] { R10904 += 1, R10826 += 1 };
  s1 -> s1 [66, 65535] { R10904 += 1, R10826 += 1 };
  s2 -> s1 [0, 64] { R10904 += 1, R10826 += 1 };
  s2 -> s2 [0, 65535] { R10904 += 1, R10825 += 1, R10826 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R10904 += 1, R10826 += 1 };
  s2 -> s4 [65, 65] { R10904 += 1, R10826 += 1 };
  s2 -> s1 [66, 65535] { R10904 += 1, R10826 += 1 };
  s3 -> s3 [0, 65535] { R10904 += 1, R10826 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10904 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10904 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10904 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s2 [0, 64] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s0 -> s0 [0, 65535] { R10905 += 1, R10906 += 1 };
  s0 -> s3 [0, 65535] { R10906 += 1, R10827 += 1, R10828 += 1 };
  s0 -> s4 [65, 65] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s0 -> s5 [65, 65] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s0 -> s6 [65, 65] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s7 [65, 65] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s2 [66, 79] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s0 -> s1 [66, 65535] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s0 -> s8 [80, 80] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s0 -> s2 [81, 65535] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s1 [0, 64] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s1 -> s2 [0, 64] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s4 [65, 65] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s5 [65, 65] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s6 [65, 65] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s1 -> s7 [65, 65] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s1 -> s2 [66, 79] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s1 [66, 65535] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s1 -> s8 [80, 80] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s1 -> s2 [81, 65535] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s2 -> s2 [0, 64] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s2 -> s4 [65, 65] { R10906 += 1, R10828 += 1 };
  s2 -> s5 [65, 65] { R10906 += 1, R10828 += 1 };
  s2 -> s2 [66, 79] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s2 -> s2 [66, 65535] { R10906 += 1, R10828 += 1 };
  s2 -> s8 [80, 80] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s2 -> s2 [81, 65535] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s1 [0, 64] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s3 -> s2 [0, 64] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s3 [0, 65535] { R10906 += 1, R10827 += 1, R10828 += 1 };
  s3 -> s4 [65, 65] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s5 [65, 65] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s6 [65, 65] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s3 -> s7 [65, 65] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s3 -> s2 [66, 79] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s1 [66, 65535] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s3 -> s8 [80, 80] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s3 -> s2 [81, 65535] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s4 -> s4 [0, 79] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s4 -> s4 [0, 65535] { R10906 += 1, R10828 += 1 };
  s4 -> s11 [80, 80] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s4 -> s4 [81, 65535] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s7 -> s4 [0, 79] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s7 -> s7 [0, 65535] { R10906 += 1, R10828 += 1, R10757 += 1, R10758 += 1 };
  s7 -> s11 [80, 80] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s7 -> s4 [81, 65535] { R10906 += 1, R10828 += 1, R10758 += 1, R10759 += 1 };
  s8 -> s8 [0, 64] { R10906 += 1, R10828 += 1 };
  s8 -> s8 [0, 65535] { R10906 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R10906 += 1, R10828 += 1 };
  s8 -> s11 [65, 65] { R10906 += 1, R10828 += 1 };
  s8 -> s8 [66, 65535] { R10906 += 1, R10828 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10906 += 1 };
  s10 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R10906 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10906 += 1, R10828 += 1 };
  s12 -> s12 [0, 65535] { R10906 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R10796 && R3 = R10906 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R10763 = 0 && R10764 = R10796 && R10765 = 0 && R10766 = R10796 && R10767 = 0 && R10768 = R10796 && R10769 = 0 && R10770 = R10796 && R10771 = 0 && R10772 = R10796 && R10773 = 0 && R10774 = R10796 && R10775 = 0 && R10776 = R10796 && R10777 = 0 && R10778 = R10796 && R10779 = 0 && R10780 = R10796 && R10781 = 0 && R10782 = R10796 && R10783 = 0 && R10784 = R10796 && R10785 = 0 && R10786 = R10796 && R10787 = 0 && R10788 = R10796 && R10789 = 0 && R10790 = R10796 && R10791 = 0 && R10792 = R10796 && R10793 = 0 && R10794 = R10796 && R10795 = 0 && R10799 = 0 && R10800 = 0 && R10817 = 0 && R10818 = 0 && R10819 = 0 && R10820 = 0 && R10823 = 0 && R10824 = 0 && R10827 = 0 && R10828 = 0 && R10829 = 10 && R10830 = R10906 && R10831 = 10 && R10832 = R10906 && R10833 = 10 && R10834 = R10906 && R10835 = 10 && R10836 = R10906 && R10837 = 10 && R10838 = R10906 && R10839 = 10 && R10840 = R10906 && R10841 = 10 && R10842 = R10906 && R10843 = 10 && R10844 = R10906 && R10845 = 10 && R10846 = R10906 && R10847 = 10 && R10848 = R10906 && R10849 = 10 && R10850 = R10906 && R10851 = 10 && R10852 = R10906 && R10853 = 10 && R10854 = R10906 && R10855 = 10 && R10856 = R10906 && R10857 = 10 && R10858 = R10906 && R10859 = 10 && R10860 = R10906 && R10861 = 10 && R10862 = R10906 && R10863 = 10 && R10864 = R10906 && R10865 = 10 && R10866 = R10906 && R10867 = 10 && R10868 = R10906 && R10869 = 10 && R10870 = R10906 && R10871 = 10 && R10872 = R10906 && R10873 = 10 && R10874 = R10906 && R10875 = 10 && R10876 = R10906 && R10877 = 10 && R10878 = R10906 && R10879 = 10 && R10880 = R10906 && R10881 = 10 && R10882 = R10906 && R10883 = 10 && R10884 = R10906 && R10885 = 10 && R10886 = R10906 && R10887 = 10 && R10888 = R10906 && R10889 = 10 && R10890 = R10906 && R10891 = 10 && R10892 = R10906 && R10893 = 10 && R10894 = R10906 && R10895 = 10 && R10896 = R10906 && R10897 = 10 && R10898 = R10906 && R10899 = 10 && R10900 = R10906 && R10901 = 10 && R10902 = R10906 && R10903 = 10 && R10904 = R10906 && R10905 = 10 && R7264 + R7261 + R10762 + R10759 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R10796 && 9 < R10906 && (R20 = 0 || (R10797 = 0 && R10798 = 0)) && (R20 = 0 || (R10801 = 0 && R10802 = 0)) && (R20 = 0 || (R10803 = 0 && R10804 = 0)) && (R20 = 0 || (R10805 = 0 && R10806 = 0)) && (R20 = 0 || (R10807 = 0 && R10808 = 0)) && (R20 = 0 || (R10809 = 0 && R10810 = 0)) && (R20 = 0 || (R10811 = 0 && R10812 = 0)) && (R20 = 0 || (R10813 = 0 && R10814 = 0)) && (R20 = 0 || (R10815 = 0 && R10816 = 0)) && (R20 = 0 || (R10821 = 0 && R10822 = 0)) && (R20 = 0 || (R10825 = 0 && R10826 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R9544 + R9541 = 0 || (R9542 + R9539 = 0 && R9543 + R9540 = 0)) && (R10306 + R10303 = 0 || (R10304 + R10301 = 0 && R10305 + R10302 = 0)) && (R10306 + R10303 = 0 || (R10760 + R10757 = 0 && R10761 + R10758 = 0));
// End of Parikh automata intersection problem
