// Parikh automata intersection problem, generated by OSTRICH+
counter int R10000, R11, R12, R19, R2, R20, R21, R22, R23, R24, R3, R4, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R7259, R7260, R7261, R7262, R7263, R7264, R9539, R9540, R9541, R9542, R9543, R9544, R9545, R9546, R9547, R9548, R9549, R9550, R9851, R9852, R9853, R9854, R9855, R9856, R9857, R9858, R9859, R9860, R9861, R9862, R9863, R9864, R9865, R9866, R9867, R9868, R9869, R9870, R9871, R9872, R9873, R9874, R9875, R9876, R9877, R9878, R9879, R9880, R9881, R9882, R9883, R9884, R9885, R9886, R9887, R9888, R9889, R9890, R9891, R9892, R9893, R9894, R9895, R9896, R9897, R9898, R9899, R9900, R9901, R9902, R9903, R9904, R9905, R9906, R9907, R9908, R9909, R9910, R9911, R9912, R9913, R9914, R9915, R9916, R9917, R9918, R9919, R9920, R9921, R9922, R9923, R9924, R9925, R9926, R9927, R9928, R9929, R9930, R9931, R9932, R9933, R9934, R9935, R9936, R9937, R9938, R9939, R9940, R9941, R9942, R9943, R9944, R9945, R9946, R9947, R9948, R9949, R9950, R9951, R9952, R9953, R9954, R9955, R9956, R9957, R9958, R9959, R9960, R9961, R9962, R9963, R9964, R9965, R9966, R9967, R9968, R9969, R9970, R9971, R9972, R9973, R9974, R9975, R9976, R9977, R9978, R9979, R9980, R9981, R9982, R9983, R9984, R9985, R9986, R9987, R9988, R9989, R9990, R9991, R9992, R9993, R9994, R9995, R9996, R9997, R9998, R9999;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining c11
automaton c11_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P53
automaton P53_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R9924 += 1 };
  s0 -> s0 [0, 65535] { R9923 += 1, R9924 += 1 };
  s0 -> s1 [45, 45] { R9924 += 1 };
  s0 -> s2 [46, 46] { R9924 += 1 };
  s0 -> s1 [48, 62] { R9924 += 1 };
  s0 -> s3 [65, 65] { R9924 += 1 };
  s0 -> s1 [66, 65535] { R9924 += 1 };
  s1 -> s1 [0, 43] { R9924 += 1 };
  s1 -> s1 [45, 45] { R9924 += 1 };
  s1 -> s2 [46, 46] { R9924 += 1 };
  s1 -> s1 [48, 62] { R9924 += 1 };
  s1 -> s3 [65, 65] { R9924 += 1 };
  s1 -> s1 [66, 65535] { R9924 += 1 };
  s2 -> s1 [0, 43] { R9924 += 1 };
  s2 -> s1 [45, 45] { R9924 += 1 };
  s2 -> s2 [46, 46] { R9924 += 1 };
  s2 -> s1 [48, 62] { R9924 += 1 };
  s2 -> s3 [65, 65] { R9924 += 1 };
  s2 -> s1 [66, 114] { R9924 += 1 };
  s2 -> s8 [115, 115] { R9924 += 1 };
  s2 -> s1 [116, 65535] { R9924 += 1 };
  s3 -> s3 [0, 43] { R9924 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R9924 += 1 };
  s3 -> s4 [46, 46] { R9924 += 1 };
  s3 -> s3 [48, 62] { R9924 += 1 };
  s3 -> s3 [65, 65535] { R9924 += 1 };
  s4 -> s3 [0, 43] { R9924 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R9924 += 1 };
  s4 -> s4 [46, 46] { R9924 += 1 };
  s4 -> s3 [48, 62] { R9924 += 1 };
  s4 -> s3 [65, 114] { R9924 += 1 };
  s4 -> s5 [115, 115] { R9924 += 1 };
  s4 -> s3 [116, 65535] { R9924 += 1 };
  s5 -> s3 [0, 43] { R9924 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R9924 += 1 };
  s5 -> s4 [46, 46] { R9924 += 1 };
  s5 -> s3 [48, 62] { R9924 += 1 };
  s5 -> s3 [65, 110] { R9924 += 1 };
  s5 -> s6 [111, 111] { R9924 += 1 };
  s5 -> s3 [112, 65535] { R9924 += 1 };
  s6 -> s3 [0, 43] { R9924 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R9924 += 1 };
  s6 -> s4 [46, 46] { R9924 += 1 };
  s6 -> s3 [48, 62] { R9924 += 1 };
  s6 -> s3 [65, 98] { R9924 += 1 };
  s6 -> s7 [99, 99] { R9924 += 1 };
  s6 -> s3 [100, 65535] { R9924 += 1 };
  s7 -> s3 [0, 43] { R9924 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R9924 += 1 };
  s7 -> s4 [46, 46] { R9924 += 1 };
  s7 -> s3 [48, 62] { R9924 += 1 };
  s7 -> s3 [65, 106] { R9924 += 1 };
  s7 -> s3 [108, 65535] { R9924 += 1 };
  s8 -> s1 [0, 43] { R9924 += 1 };
  s8 -> s1 [45, 45] { R9924 += 1 };
  s8 -> s2 [46, 46] { R9924 += 1 };
  s8 -> s1 [48, 62] { R9924 += 1 };
  s8 -> s3 [65, 65] { R9924 += 1 };
  s8 -> s1 [66, 110] { R9924 += 1 };
  s8 -> s9 [111, 111] { R9924 += 1 };
  s8 -> s1 [112, 65535] { R9924 += 1 };
  s9 -> s1 [0, 43] { R9924 += 1 };
  s9 -> s1 [45, 45] { R9924 += 1 };
  s9 -> s2 [46, 46] { R9924 += 1 };
  s9 -> s1 [48, 62] { R9924 += 1 };
  s9 -> s3 [65, 65] { R9924 += 1 };
  s9 -> s1 [66, 98] { R9924 += 1 };
  s9 -> s10 [99, 99] { R9924 += 1 };
  s9 -> s1 [100, 65535] { R9924 += 1 };
  s10 -> s1 [0, 43] { R9924 += 1 };
  s10 -> s1 [45, 45] { R9924 += 1 };
  s10 -> s2 [46, 46] { R9924 += 1 };
  s10 -> s1 [48, 62] { R9924 += 1 };
  s10 -> s3 [65, 65] { R9924 += 1 };
  s10 -> s1 [66, 106] { R9924 += 1 };
  s10 -> s1 [108, 65535] { R9924 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R9926 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R9925 += 1, R9926 += 1 };
  s1 -> s1 [0, 65535] { R9926 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R9928 += 1 };
  s0 -> s0 [0, 65535] { R9927 += 1, R9928 += 1 };
  s0 -> s2 [0, 65535] { R9928 += 1, R11 += 1 };
  s0 -> s3 [58, 58] { R9928 += 1 };
  s0 -> s1 [59, 65535] { R9928 += 1 };
  s1 -> s1 [0, 57] { R9928 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R9928 += 1 };
  s1 -> s1 [59, 65535] { R9928 += 1 };
  s2 -> s1 [0, 57] { R9928 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9928 += 1, R11 += 1 };
  s2 -> s3 [58, 58] { R9928 += 1 };
  s2 -> s1 [59, 65535] { R9928 += 1 };
  s3 -> s3 [0, 65535] { R9928 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R9930 += 1 };
  s0 -> s0 [0, 65535] { R9929 += 1, R9930 += 1 };
  s0 -> s2 [0, 65535] { R9930 += 1, R12 += 1 };
  s0 -> s3 [65, 65] { R9930 += 1 };
  s0 -> s1 [66, 65535] { R9930 += 1 };
  s1 -> s1 [0, 64] { R9930 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R9930 += 1 };
  s1 -> s1 [66, 65535] { R9930 += 1 };
  s2 -> s1 [0, 64] { R9930 += 1 };
  s2 -> s2 [0, 65535] { R9930 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R9930 += 1 };
  s2 -> s1 [66, 65535] { R9930 += 1 };
  s3 -> s3 [0, 65535] { R9930 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R9932 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R9931 += 1, R9932 += 1 };
  s0 -> s2 [0, 65535] { R9932 += 1, R21 += 1, R22 += 1 };
  s0 -> s3 [91, 91] { R9932 += 1, R22 += 1 };
  s0 -> s1 [92, 65535] { R9932 += 1, R22 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9932 += 1 };
  s1 -> s1 [0, 65535] { R9932 += 1, R22 += 1 };
  s2 -> s1 [0, 90] { R9932 += 1, R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9932 += 1, R21 += 1, R22 += 1 };
  s2 -> s3 [91, 91] { R9932 += 1, R22 += 1 };
  s2 -> s1 [92, 65535] { R9932 += 1, R22 += 1 };
  s3 -> s1 [0, 65535] { R9932 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9932 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R9934 += 1, R24 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R9933 += 1, R9934 += 1 };
  s0 -> s2 [0, 65535] { R9934 += 1, R23 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R9934 += 1, R24 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R9934 += 1 };
  s2 -> s1 [0, 65535] { R9934 += 1, R24 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9934 += 1, R23 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9934 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R9936 += 1, R9858 += 1 };
  s0 -> s0 [0, 65535] { R9935 += 1, R9936 += 1 };
  s0 -> s2 [0, 65535] { R9936 += 1, R9857 += 1, R9858 += 1 };
  s0 -> s1 [66, 65535] { R9936 += 1, R9858 += 1 };
  s1 -> s1 [0, 64] { R9936 += 1, R9858 += 1 };
  s1 -> s1 [0, 65535] { R9936 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R9936 += 1, R9858 += 1 };
  s2 -> s1 [0, 64] { R9936 += 1, R9858 += 1 };
  s2 -> s2 [0, 65535] { R9936 += 1, R9857 += 1, R9858 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R9936 += 1, R9858 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R9938 += 1, R9860 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R9937 += 1, R9938 += 1 };
  s0 -> s2 [0, 65535] { R9938 += 1, R9859 += 1, R9860 += 1 };
  s1 -> s1 [0, 65535] { R9938 += 1, R9860 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R9938 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9938 += 1, R9860 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9938 += 1, R9859 += 1, R9860 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9938 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R9940 += 1, R9862 += 1 };
  s0 -> s2 [0, 65535] { R9940 += 1, R9861 += 1, R9862 += 1 };
  s0 -> s0 [0, 65535] { R9939 += 1, R9940 += 1 };
  s0 -> s1 [80, 65535] { R9940 += 1, R9862 += 1 };
  s1 -> s1 [0, 65] { R9940 += 1, R9862 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9940 += 1 };
  s1 -> s1 [80, 65535] { R9940 += 1, R9862 += 1 };
  s2 -> s1 [0, 65] { R9940 += 1, R9862 += 1 };
  s2 -> s2 [0, 65535] { R9940 += 1, R9861 += 1, R9862 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R9940 += 1, R9862 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R9941 += 1, R9942 += 1 };
  s0 -> s1 [0, 65535] { R9942 += 1, R9863 += 1, R9864 += 1 };
  s0 -> s2 [0, 65535] { R9942 += 1, R9864 += 1, R406 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9942 += 1, R9863 += 1, R9864 += 1 };
  s1 -> s2 [0, 65535] { R9942 += 1, R9864 += 1, R406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R9942 += 1, R9864 += 1, R406 += 1 };
  s2 -> s4 [0, 65535] { R9942 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9942 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 82] { R9944 += 1, R9866 += 1 };
  s0 -> s2 [0, 65535] { R9944 += 1, R9865 += 1, R9866 += 1 };
  s0 -> s3 [0, 65535] { R9944 += 1, R9866 += 1, R408 += 1 };
  s0 -> s0 [0, 65535] { R9943 += 1, R9944 += 1 };
  s0 -> s1 [84, 65535] { R9944 += 1, R9866 += 1 };
  s1 -> s1 [0, 82] { R9944 += 1, R9866 += 1 };
  s1 -> s1 [0, 65535] { R9944 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [84, 65535] { R9944 += 1, R9866 += 1 };
  s2 -> s1 [0, 82] { R9944 += 1, R9866 += 1 };
  s2 -> s2 [0, 65535] { R9944 += 1, R9865 += 1, R9866 += 1 };
  s2 -> s3 [0, 65535] { R9944 += 1, R9866 += 1, R408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [84, 65535] { R9944 += 1, R9866 += 1 };
  s3 -> s1 [0, 82] { R9944 += 1, R9866 += 1 };
  s3 -> s3 [0, 65535] { R9944 += 1, R9866 += 1, R408 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R9944 += 1 };
  s3 -> s1 [84, 65535] { R9944 += 1, R9866 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9944 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R9946 += 1, R9868 += 1 };
  s0 -> s0 [0, 65535] { R9945 += 1, R9946 += 1 };
  s0 -> s2 [0, 65535] { R9946 += 1, R9868 += 1, R410 += 1 };
  s0 -> s3 [0, 65535] { R9946 += 1, R9867 += 1, R9868 += 1 };
  s0 -> s1 [81, 65535] { R9946 += 1, R9868 += 1 };
  s1 -> s1 [0, 79] { R9946 += 1, R9868 += 1 };
  s1 -> s1 [0, 65535] { R9946 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R9946 += 1, R9868 += 1 };
  s2 -> s1 [0, 79] { R9946 += 1, R9868 += 1 };
  s2 -> s2 [0, 65535] { R9946 += 1, R9868 += 1, R410 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9946 += 1 };
  s2 -> s1 [81, 65535] { R9946 += 1, R9868 += 1 };
  s3 -> s1 [0, 79] { R9946 += 1, R9868 += 1 };
  s3 -> s2 [0, 65535] { R9946 += 1, R9868 += 1, R410 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9946 += 1, R9867 += 1, R9868 += 1 };
  s3 -> s1 [81, 65535] { R9946 += 1, R9868 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9946 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R9948 += 1, R9870 += 1, R414 += 1, R415 += 1 };
  s0 -> s2 [0, 65535] { R9948 += 1, R9869 += 1, R9870 += 1 };
  s0 -> s0 [0, 65535] { R9947 += 1, R9948 += 1 };
  s0 -> s3 [0, 65535] { R9948 += 1, R9870 += 1, R415 += 1, R416 += 1 };
  s1 -> s1 [0, 65535] { R9948 += 1, R9870 += 1, R414 += 1, R415 += 1 };
  s1 -> s4 [0, 65535] { R9948 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9948 += 1, R9870 += 1, R415 += 1, R416 += 1 };
  s2 -> s1 [0, 65535] { R9948 += 1, R9870 += 1, R414 += 1, R415 += 1 };
  s2 -> s2 [0, 65535] { R9948 += 1, R9869 += 1, R9870 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9948 += 1, R9870 += 1, R415 += 1, R416 += 1 };
  s3 -> s4 [0, 65535] { R9948 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9948 += 1, R9870 += 1 };
  s3 -> s3 [0, 65535] { R9948 += 1, R9870 += 1, R415 += 1, R416 += 1 };
  s4 -> s4 [0, 65535] { R9948 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R9948 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9948 += 1, R9870 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R9950 += 1, R9871 += 1, R9872 += 1 };
  s0 -> s2 [0, 65535] { R9950 += 1, R9872 += 1 };
  s0 -> s0 [0, 65535] { R9949 += 1, R9950 += 1 };
  s1 -> s1 [0, 65535] { R9950 += 1, R9871 += 1, R9872 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9950 += 1, R9872 += 1 };
  s2 -> s3 [0, 65535] { R9950 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9950 += 1, R9872 += 1 };
  s3 -> s3 [0, 65535] { R9950 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 79] { R9952 += 1, R9874 += 1, R420 += 1 };
  s0 -> s0 [0, 65535] { R9951 += 1, R9952 += 1 };
  s0 -> s2 [0, 65535] { R9952 += 1, R9874 += 1, R419 += 1, R420 += 1 };
  s0 -> s3 [0, 65535] { R9952 += 1, R9873 += 1, R9874 += 1 };
  s0 -> s1 [81, 65535] { R9952 += 1, R9874 += 1, R420 += 1 };
  s1 -> s1 [0, 79] { R9952 += 1, R9874 += 1, R420 += 1 };
  s1 -> s1 [0, 65535] { R9952 += 1, R9874 += 1 };
  s1 -> s5 [0, 65535] { R9952 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R9952 += 1, R9874 += 1, R420 += 1 };
  s2 -> s1 [0, 79] { R9952 += 1, R9874 += 1, R420 += 1 };
  s2 -> s5 [0, 65535] { R9952 += 1 };
  s2 -> s2 [0, 65535] { R9952 += 1, R9874 += 1, R419 += 1, R420 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R9952 += 1, R9874 += 1, R420 += 1 };
  s3 -> s1 [0, 79] { R9952 += 1, R9874 += 1, R420 += 1 };
  s3 -> s2 [0, 65535] { R9952 += 1, R9874 += 1, R419 += 1, R420 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9952 += 1, R9873 += 1, R9874 += 1 };
  s3 -> s1 [81, 65535] { R9952 += 1, R9874 += 1, R420 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9952 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R9954 += 1, R9876 += 1, R424 += 1, R425 += 1 };
  s0 -> s2 [0, 65535] { R9954 += 1, R9876 += 1, R425 += 1, R426 += 1 };
  s0 -> s0 [0, 65535] { R9953 += 1, R9954 += 1 };
  s0 -> s3 [0, 65535] { R9954 += 1, R9875 += 1, R9876 += 1 };
  s1 -> s5 [0, 65535] { R9954 += 1 };
  s1 -> s1 [0, 65535] { R9954 += 1, R9876 += 1, R424 += 1, R425 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R9954 += 1, R9876 += 1, R425 += 1, R426 += 1 };
  s2 -> s5 [0, 65535] { R9954 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9954 += 1, R9876 += 1, R425 += 1, R426 += 1 };
  s2 -> s6 [0, 65535] { R9954 += 1, R9876 += 1 };
  s3 -> s1 [0, 65535] { R9954 += 1, R9876 += 1, R424 += 1, R425 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R9954 += 1, R9876 += 1, R425 += 1, R426 += 1 };
  s3 -> s3 [0, 65535] { R9954 += 1, R9875 += 1, R9876 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9954 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R9954 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9954 += 1, R9876 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s0 -> s0 [0, 65535] { R9955 += 1, R9956 += 1 };
  s0 -> s2 [0, 65535] { R9956 += 1, R9877 += 1, R9878 += 1 };
  s0 -> s3 [0, 65535] { R9956 += 1, R9878 += 1, R429 += 1, R430 += 1 };
  s0 -> s1 [91, 107] { R9956 += 1, R9878 += 1, R430 += 1 };
  s0 -> s4 [108, 108] { R9956 += 1, R9878 += 1, R430 += 1 };
  s0 -> s1 [109, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s1 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R9956 += 1 };
  s1 -> s1 [0, 65535] { R9956 += 1, R9878 += 1 };
  s1 -> s1 [91, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s2 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9956 += 1, R9877 += 1, R9878 += 1 };
  s2 -> s3 [0, 65535] { R9956 += 1, R9878 += 1, R429 += 1, R430 += 1 };
  s2 -> s1 [91, 107] { R9956 += 1, R9878 += 1, R430 += 1 };
  s2 -> s4 [108, 108] { R9956 += 1, R9878 += 1, R430 += 1 };
  s2 -> s1 [109, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s3 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9956 += 1 };
  s3 -> s3 [0, 65535] { R9956 += 1, R9878 += 1, R429 += 1, R430 += 1 };
  s3 -> s1 [91, 107] { R9956 += 1, R9878 += 1, R430 += 1 };
  s3 -> s4 [108, 108] { R9956 += 1, R9878 += 1, R430 += 1 };
  s3 -> s1 [109, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s4 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9956 += 1 };
  s4 -> s4 [0, 65535] { R9956 += 1, R9878 += 1 };
  s4 -> s1 [91, 110] { R9956 += 1, R9878 += 1, R430 += 1 };
  s4 -> s7 [111, 111] { R9956 += 1, R9878 += 1, R430 += 1 };
  s4 -> s1 [112, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9956 += 1 };
  s7 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R9956 += 1 };
  s7 -> s7 [0, 65535] { R9956 += 1, R9878 += 1 };
  s7 -> s1 [91, 98] { R9956 += 1, R9878 += 1, R430 += 1 };
  s7 -> s8 [99, 99] { R9956 += 1, R9878 += 1, R430 += 1 };
  s7 -> s1 [100, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s8 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R9956 += 1, R9878 += 1 };
  s8 -> s6 [0, 65535] { R9956 += 1 };
  s8 -> s1 [91, 96] { R9956 += 1, R9878 += 1, R430 += 1 };
  s8 -> s9 [97, 97] { R9956 += 1, R9878 += 1, R430 += 1 };
  s8 -> s1 [98, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s9 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s9 -> s5 [0, 65535];
  s9 -> s6 [0, 65535] { R9956 += 1 };
  s9 -> s9 [0, 65535] { R9956 += 1, R9878 += 1 };
  s9 -> s1 [91, 107] { R9956 += 1, R9878 += 1, R430 += 1 };
  s9 -> s10 [108, 108] { R9956 += 1, R9878 += 1, R430 += 1 };
  s9 -> s1 [109, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s10 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s10 -> s5 [0, 65535];
  s10 -> s10 [0, 65535] { R9956 += 1, R9878 += 1 };
  s10 -> s6 [0, 65535] { R9956 += 1 };
  s10 -> s1 [91, 103] { R9956 += 1, R9878 += 1, R430 += 1 };
  s10 -> s11 [104, 104] { R9956 += 1, R9878 += 1, R430 += 1 };
  s10 -> s1 [105, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s11 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s11 -> s5 [0, 65535];
  s11 -> s11 [0, 65535] { R9956 += 1, R9878 += 1 };
  s11 -> s6 [0, 65535] { R9956 += 1 };
  s11 -> s1 [91, 110] { R9956 += 1, R9878 += 1, R430 += 1 };
  s11 -> s12 [111, 111] { R9956 += 1, R9878 += 1, R430 += 1 };
  s11 -> s1 [112, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s12 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s12 -> s5 [0, 65535];
  s12 -> s12 [0, 65535] { R9956 += 1, R9878 += 1 };
  s12 -> s6 [0, 65535] { R9956 += 1 };
  s12 -> s1 [91, 114] { R9956 += 1, R9878 += 1, R430 += 1 };
  s12 -> s13 [115, 115] { R9956 += 1, R9878 += 1, R430 += 1 };
  s12 -> s1 [116, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s13 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s13 -> s5 [0, 65535];
  s13 -> s6 [0, 65535] { R9956 += 1 };
  s13 -> s13 [0, 65535] { R9956 += 1, R9878 += 1 };
  s13 -> s1 [91, 115] { R9956 += 1, R9878 += 1, R430 += 1 };
  s13 -> s14 [116, 116] { R9956 += 1, R9878 += 1, R430 += 1 };
  s13 -> s1 [117, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  s14 -> s1 [0, 80] { R9956 += 1, R9878 += 1, R430 += 1 };
  s14 -> s1 [91, 65535] { R9956 += 1, R9878 += 1, R430 += 1 };
  accepting s3, s4, s12, s8, s13, s5, s2, s9, s6, s1, s7, s0, s10, s11;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 65535] { R9958 += 1, R9880 += 1, R7263 += 1, R7264 += 1 };
  s0 -> s2 [0, 65535] { R9958 += 1, R9880 += 1 };
  s0 -> s0 [0, 65535] { R9957 += 1, R9958 += 1 };
  s0 -> s3 [0, 65535] { R9958 += 1, R9879 += 1, R9880 += 1 };
  s1 -> s1 [0, 65535] { R9958 += 1, R9880 += 1, R7263 += 1, R7264 += 1 };
  s1 -> s2 [0, 65535] { R9958 += 1, R9880 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R9958 += 1 };
  s2 -> s2 [0, 65535] { R9958 += 1, R9880 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R9958 += 1 };
  s3 -> s1 [0, 65535] { R9958 += 1, R9880 += 1, R7263 += 1, R7264 += 1 };
  s3 -> s2 [0, 65535] { R9958 += 1, R9880 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9958 += 1, R9879 += 1, R9880 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9958 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s0 [0, 65535] { R9959 += 1, R9960 += 1 };
  s0 -> s1 [0, 65535] { R9960 += 1, R9881 += 1, R9882 += 1 };
  s0 -> s2 [0, 65535] { R9960 += 1, R9882 += 1, R9543 += 1, R9544 += 1 };
  s0 -> s3 [0, 65535] { R9960 += 1, R9882 += 1 };
  s1 -> s1 [0, 65535] { R9960 += 1, R9881 += 1, R9882 += 1 };
  s1 -> s2 [0, 65535] { R9960 += 1, R9882 += 1, R9543 += 1, R9544 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R9960 += 1, R9882 += 1 };
  s2 -> s4 [0, 65535] { R9960 += 1 };
  s2 -> s2 [0, 65535] { R9960 += 1, R9882 += 1, R9543 += 1, R9544 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R9960 += 1, R9882 += 1 };
  s3 -> s4 [0, 65535] { R9960 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9960 += 1, R9882 += 1 };
  s4 -> s4 [0, 65535] { R9960 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s0 [0, 65535] { R9961 += 1, R9962 += 1 };
  s0 -> s1 [0, 65535] { R9962 += 1, R9884 += 1 };
  s0 -> s2 [0, 65535] { R9962 += 1, R9883 += 1, R9884 += 1 };
  s1 -> s4 [0, 65535] { R9962 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9962 += 1, R9884 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9962 += 1, R9884 += 1 };
  s2 -> s2 [0, 65535] { R9962 += 1, R9883 += 1, R9884 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9962 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 65535] { R9964 += 1, R9885 += 1, R9886 += 1 };
  s0 -> s2 [0, 65535] { R9964 += 1, R9886 += 1, R9548 += 1, R9549 += 1 };
  s0 -> s0 [0, 65535] { R9963 += 1, R9964 += 1 };
  s0 -> s3 [0, 65535] { R9964 += 1, R9886 += 1, R9549 += 1, R9550 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R9964 += 1, R9885 += 1, R9886 += 1 };
  s1 -> s2 [0, 65535] { R9964 += 1, R9886 += 1, R9548 += 1, R9549 += 1 };
  s1 -> s3 [0, 65535] { R9964 += 1, R9886 += 1, R9549 += 1, R9550 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R9964 += 1, R9886 += 1, R9548 += 1, R9549 += 1 };
  s2 -> s3 [0, 65535] { R9964 += 1, R9886 += 1, R9549 += 1, R9550 += 1 };
  s2 -> s6 [0, 65535] { R9964 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R9964 += 1, R9886 += 1, R9549 += 1, R9550 += 1 };
  s3 -> s5 [0, 65535] { R9964 += 1, R9886 += 1 };
  s3 -> s6 [0, 65535] { R9964 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R9964 += 1, R9886 += 1 };
  s5 -> s6 [0, 65535] { R9964 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R9964 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 65535] { R9966 += 1, R9888 += 1 };
  s0 -> s2 [0, 65535] { R9966 += 1, R9887 += 1, R9888 += 1 };
  s0 -> s0 [0, 65535] { R9965 += 1, R9966 += 1 };
  s1 -> s4 [0, 65535] { R9966 += 1 };
  s1 -> s1 [0, 65535] { R9966 += 1, R9888 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9966 += 1, R9888 += 1 };
  s2 -> s2 [0, 65535] { R9966 += 1, R9887 += 1, R9888 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9966 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 65535] { R9968 += 1, R9890 += 1 };
  s0 -> s2 [0, 65535] { R9968 += 1, R9889 += 1, R9890 += 1 };
  s0 -> s3 [0, 65535] { R9968 += 1, R9890 += 1, R9855 += 1, R9856 += 1 };
  s0 -> s0 [0, 65535] { R9967 += 1, R9968 += 1 };
  s1 -> s1 [0, 65535] { R9968 += 1, R9890 += 1 };
  s1 -> s4 [0, 65535] { R9968 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R9968 += 1, R9890 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9968 += 1, R9889 += 1, R9890 += 1 };
  s2 -> s3 [0, 65535] { R9968 += 1, R9890 += 1, R9855 += 1, R9856 += 1 };
  s3 -> s1 [0, 65535] { R9968 += 1, R9890 += 1 };
  s3 -> s4 [0, 65535] { R9968 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R9968 += 1, R9890 += 1, R9855 += 1, R9856 += 1 };
  s4 -> s4 [0, 65535] { R9968 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s0 [0, 65535] { R9969 += 1, R9970 += 1 };
  s0 -> s1 [0, 65535] { R9970 += 1, R9892 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R9970 += 1, R9891 += 1, R9892 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R9970 += 1, R9892 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R9970 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R9970 += 1, R9892 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R9970 += 1, R9891 += 1, R9892 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R9970 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R9972 += 1, R9894 += 1 };
  s0 -> s2 [0, 65535] { R9972 += 1, R9893 += 1, R9894 += 1 };
  s0 -> s0 [0, 65535] { R9971 += 1, R9972 += 1 };
  s0 -> s3 [65, 65] { R9972 += 1, R9894 += 1 };
  s0 -> s4 [65, 65] { R9972 += 1, R9894 += 1 };
  s0 -> s5 [80, 80] { R9972 += 1, R9894 += 1 };
  s0 -> s1 [81, 65535] { R9972 += 1, R9894 += 1 };
  s1 -> s1 [0, 64] { R9972 += 1, R9894 += 1 };
  s1 -> s3 [65, 65] { R9972 += 1, R9894 += 1 };
  s1 -> s4 [65, 65] { R9972 += 1, R9894 += 1 };
  s1 -> s5 [80, 80] { R9972 += 1, R9894 += 1 };
  s1 -> s1 [81, 65535] { R9972 += 1, R9894 += 1 };
  s2 -> s1 [0, 64] { R9972 += 1, R9894 += 1 };
  s2 -> s2 [0, 65535] { R9972 += 1, R9893 += 1, R9894 += 1 };
  s2 -> s3 [65, 65] { R9972 += 1, R9894 += 1 };
  s2 -> s4 [65, 65] { R9972 += 1, R9894 += 1 };
  s2 -> s5 [80, 80] { R9972 += 1, R9894 += 1 };
  s2 -> s1 [81, 65535] { R9972 += 1, R9894 += 1 };
  s4 -> s4 [0, 65] { R9972 += 1, R9894 += 1 };
  s4 -> s7 [80, 80] { R9972 += 1, R9894 += 1 };
  s4 -> s4 [81, 65535] { R9972 += 1, R9894 += 1 };
  s5 -> s5 [0, 64] { R9972 += 1, R9894 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9972 += 1 };
  s5 -> s7 [65, 65] { R9972 += 1, R9894 += 1 };
  s5 -> s8 [65, 65] { R9972 += 1, R9894 += 1 };
  s5 -> s5 [80, 65535] { R9972 += 1, R9894 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R9972 += 1, R9894 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R9972 += 1 };
  s7 -> s7 [80, 65535] { R9972 += 1, R9894 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R9972 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_27 {
  init s0;
  s0 -> s1 [0, 64] { R9974 += 1, R9896 += 1, R405 += 1 };
  s0 -> s0 [0, 65535] { R9973 += 1, R9974 += 1 };
  s0 -> s2 [0, 65535] { R9974 += 1, R9895 += 1, R9896 += 1 };
  s0 -> s3 [65, 65] { R9974 += 1, R9896 += 1, R405 += 1 };
  s0 -> s4 [65, 65] { R9974 += 1, R9896 += 1, R405 += 1 };
  s0 -> s1 [66, 65535] { R9974 += 1, R9896 += 1, R405 += 1 };
  s1 -> s1 [0, 64] { R9974 += 1, R9896 += 1, R405 += 1 };
  s1 -> s1 [0, 65535] { R9974 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9974 += 1, R9896 += 1, R405 += 1 };
  s1 -> s4 [65, 65] { R9974 += 1, R9896 += 1, R405 += 1 };
  s1 -> s1 [66, 65535] { R9974 += 1, R9896 += 1, R405 += 1 };
  s2 -> s1 [0, 64] { R9974 += 1, R9896 += 1, R405 += 1 };
  s2 -> s2 [0, 65535] { R9974 += 1, R9895 += 1, R9896 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9974 += 1, R9896 += 1, R405 += 1 };
  s2 -> s4 [65, 65] { R9974 += 1, R9896 += 1, R405 += 1 };
  s2 -> s1 [66, 65535] { R9974 += 1, R9896 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R9974 += 1, R9896 += 1, R405 += 1 };
  s3 -> s6 [0, 65535] { R9974 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9974 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9974 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_28 {
  init s0;
  s0 -> s1 [0, 64] { R9976 += 1, R9898 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R9976 += 1, R9897 += 1, R9898 += 1 };
  s0 -> s0 [0, 65535] { R9975 += 1, R9976 += 1 };
  s0 -> s3 [65, 65] { R9976 += 1, R9898 += 1, R407 += 1 };
  s0 -> s4 [65, 65] { R9976 += 1, R9898 += 1, R407 += 1 };
  s0 -> s1 [66, 65535] { R9976 += 1, R9898 += 1, R407 += 1 };
  s1 -> s1 [0, 64] { R9976 += 1, R9898 += 1, R407 += 1 };
  s1 -> s1 [0, 65535] { R9976 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9976 += 1, R9898 += 1, R407 += 1 };
  s1 -> s4 [65, 65] { R9976 += 1, R9898 += 1, R407 += 1 };
  s1 -> s1 [66, 65535] { R9976 += 1, R9898 += 1, R407 += 1 };
  s2 -> s1 [0, 64] { R9976 += 1, R9898 += 1, R407 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9976 += 1, R9897 += 1, R9898 += 1 };
  s2 -> s3 [65, 65] { R9976 += 1, R9898 += 1, R407 += 1 };
  s2 -> s4 [65, 65] { R9976 += 1, R9898 += 1, R407 += 1 };
  s2 -> s1 [66, 65535] { R9976 += 1, R9898 += 1, R407 += 1 };
  s3 -> s3 [0, 65535] { R9976 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9976 += 1, R9898 += 1, R407 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R9976 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9976 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_29 {
  init s0;
  s0 -> s1 [0, 64] { R9978 += 1, R9900 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R9978 += 1, R9899 += 1, R9900 += 1 };
  s0 -> s0 [0, 65535] { R9977 += 1, R9978 += 1 };
  s0 -> s3 [65, 65] { R9978 += 1, R9900 += 1, R409 += 1 };
  s0 -> s4 [65, 65] { R9978 += 1, R9900 += 1, R409 += 1 };
  s0 -> s1 [66, 65535] { R9978 += 1, R9900 += 1, R409 += 1 };
  s1 -> s1 [0, 64] { R9978 += 1, R9900 += 1, R409 += 1 };
  s1 -> s1 [0, 65535] { R9978 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9978 += 1, R9900 += 1, R409 += 1 };
  s1 -> s4 [65, 65] { R9978 += 1, R9900 += 1, R409 += 1 };
  s1 -> s1 [66, 65535] { R9978 += 1, R9900 += 1, R409 += 1 };
  s2 -> s1 [0, 64] { R9978 += 1, R9900 += 1, R409 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9978 += 1, R9899 += 1, R9900 += 1 };
  s2 -> s3 [65, 65] { R9978 += 1, R9900 += 1, R409 += 1 };
  s2 -> s4 [65, 65] { R9978 += 1, R9900 += 1, R409 += 1 };
  s2 -> s1 [66, 65535] { R9978 += 1, R9900 += 1, R409 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9978 += 1 };
  s3 -> s3 [0, 65535] { R9978 += 1, R9900 += 1, R409 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9978 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9978 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_30 {
  init s0;
  s0 -> s1 [0, 64] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R9979 += 1, R9980 += 1 };
  s0 -> s2 [0, 65535] { R9980 += 1, R9901 += 1, R9902 += 1 };
  s0 -> s3 [65, 65] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s0 -> s4 [65, 65] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s0 -> s1 [66, 65535] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [0, 64] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R9980 += 1 };
  s1 -> s3 [65, 65] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s1 -> s4 [65, 65] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s1 -> s1 [66, 65535] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [0, 64] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9980 += 1, R9901 += 1, R9902 += 1 };
  s2 -> s3 [65, 65] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s2 -> s4 [65, 65] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s2 -> s1 [66, 65535] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R9980 += 1 };
  s4 -> s5 [0, 65535] { R9980 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9980 += 1, R9902 += 1, R411 += 1, R412 += 1 };
  s5 -> s5 [0, 65535] { R9980 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_31 {
  init s0;
  s0 -> s1 [0, 64] { R9982 += 1, R9904 += 1 };
  s0 -> s0 [0, 65535] { R9981 += 1, R9982 += 1 };
  s0 -> s2 [0, 65535] { R9982 += 1, R9903 += 1, R9904 += 1 };
  s0 -> s3 [65, 65] { R9982 += 1, R9904 += 1 };
  s0 -> s4 [65, 65] { R9982 += 1, R9904 += 1 };
  s0 -> s1 [66, 65535] { R9982 += 1, R9904 += 1 };
  s1 -> s1 [0, 64] { R9982 += 1, R9904 += 1 };
  s1 -> s1 [0, 65535] { R9982 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9982 += 1, R9904 += 1 };
  s1 -> s4 [65, 65] { R9982 += 1, R9904 += 1 };
  s1 -> s1 [66, 65535] { R9982 += 1, R9904 += 1 };
  s2 -> s1 [0, 64] { R9982 += 1, R9904 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9982 += 1, R9903 += 1, R9904 += 1 };
  s2 -> s3 [65, 65] { R9982 += 1, R9904 += 1 };
  s2 -> s4 [65, 65] { R9982 += 1, R9904 += 1 };
  s2 -> s1 [66, 65535] { R9982 += 1, R9904 += 1 };
  s3 -> s6 [0, 65535] { R9982 += 1 };
  s3 -> s3 [0, 65535] { R9982 += 1, R9904 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9982 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9982 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_32 {
  init s0;
  s0 -> s1 [0, 64] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s0 -> s2 [0, 65535] { R9984 += 1, R9905 += 1, R9906 += 1 };
  s0 -> s0 [0, 65535] { R9983 += 1, R9984 += 1 };
  s0 -> s3 [65, 65] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s0 -> s4 [65, 65] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s0 -> s1 [66, 65535] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 64] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [0, 65535] { R9984 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s1 -> s4 [65, 65] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s1 -> s1 [66, 65535] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [0, 64] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s2 -> s2 [0, 65535] { R9984 += 1, R9905 += 1, R9906 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s2 -> s4 [65, 65] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s2 -> s1 [66, 65535] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s3 -> s3 [0, 65535] { R9984 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9984 += 1, R9906 += 1, R417 += 1, R418 += 1 };
  s4 -> s5 [0, 65535] { R9984 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R9984 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_33 {
  init s0;
  s0 -> s1 [0, 64] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s0 -> s0 [0, 65535] { R9985 += 1, R9986 += 1 };
  s0 -> s2 [0, 65535] { R9986 += 1, R9907 += 1, R9908 += 1 };
  s0 -> s3 [65, 65] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s0 -> s4 [65, 65] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s0 -> s1 [66, 65535] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [0, 64] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9986 += 1 };
  s1 -> s3 [65, 65] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s1 -> s4 [65, 65] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s1 -> s1 [66, 65535] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [0, 64] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s2 -> s2 [0, 65535] { R9986 += 1, R9907 += 1, R9908 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s2 -> s4 [65, 65] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s2 -> s1 [66, 65535] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s3 -> s3 [0, 65535] { R9986 += 1, R9908 += 1, R421 += 1, R422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9986 += 1 };
  s4 -> s4 [0, 65535] { R9986 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9986 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_34 {
  init s0;
  s0 -> s1 [0, 64] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s0 -> s2 [0, 65535] { R9988 += 1, R9909 += 1, R9910 += 1 };
  s0 -> s0 [0, 65535] { R9987 += 1, R9988 += 1 };
  s0 -> s3 [65, 65] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s0 -> s4 [65, 65] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s0 -> s1 [66, 65535] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [0, 64] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R9988 += 1 };
  s1 -> s3 [65, 65] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s1 -> s4 [65, 65] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s1 -> s1 [66, 65535] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [0, 64] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9988 += 1, R9909 += 1, R9910 += 1 };
  s2 -> s3 [65, 65] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s2 -> s4 [65, 65] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s2 -> s1 [66, 65535] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R9988 += 1 };
  s3 -> s3 [0, 65535] { R9988 += 1, R9910 += 1, R427 += 1, R428 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9988 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9988 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_35 {
  init s0;
  s0 -> s1 [0, 64] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [0, 64] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s0 [0, 65535] { R9989 += 1, R9990 += 1 };
  s0 -> s3 [0, 65535] { R9990 += 1, R9911 += 1, R9912 += 1 };
  s0 -> s4 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s5 [65, 65] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s6 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s7 [65, 65] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s0 -> s1 [66, 65535] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s0 -> s2 [66, 65535] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s1 -> s1 [0, 64] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [0, 65535] { R9990 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s6 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s1 -> s1 [66, 65535] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s1 [0, 64] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [0, 64] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s4 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s5 [65, 65] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s6 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s7 [65, 65] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s2 -> s1 [66, 65535] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s2 -> s2 [66, 65535] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [0, 64] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [0, 64] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s3 [0, 65535] { R9990 += 1, R9911 += 1, R9912 += 1 };
  s3 -> s4 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s5 [65, 65] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s6 [65, 65] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s7 [65, 65] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s3 -> s1 [66, 65535] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s3 -> s2 [66, 65535] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s4 -> s4 [0, 65535] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s4 -> s9 [0, 65535] { R9990 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9990 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R9990 += 1, R9912 += 1, R7260 += 1, R7261 += 1 };
  s7 -> s7 [0, 65535] { R9990 += 1, R9912 += 1, R7259 += 1, R7260 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9990 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton uri_36 {
  init s0;
  s0 -> s1 [0, 64] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s2 [0, 64] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s3 [0, 65535] { R9992 += 1, R9913 += 1, R9914 += 1 };
  s0 -> s0 [0, 65535] { R9991 += 1, R9992 += 1 };
  s0 -> s4 [65, 65] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s5 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s6 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s7 [65, 65] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s0 -> s1 [66, 65535] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s0 -> s2 [66, 65535] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s1 -> s1 [0, 64] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R9992 += 1 };
  s1 -> s5 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s6 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s1 -> s1 [66, 65535] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s1 [0, 64] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s2 [0, 64] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s4 [65, 65] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s5 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s6 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s7 [65, 65] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s2 -> s1 [66, 65535] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s2 -> s2 [66, 65535] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s1 [0, 64] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s2 [0, 64] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s3 [0, 65535] { R9992 += 1, R9913 += 1, R9914 += 1 };
  s3 -> s4 [65, 65] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s5 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s6 [65, 65] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s7 [65, 65] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s3 -> s1 [66, 65535] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s3 -> s2 [66, 65535] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R9992 += 1 };
  s5 -> s5 [0, 65535] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R9992 += 1 };
  s7 -> s5 [0, 65535] { R9992 += 1, R9914 += 1, R9540 += 1, R9541 += 1 };
  s7 -> s7 [0, 65535] { R9992 += 1, R9914 += 1, R9539 += 1, R9540 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R9992 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton uri_37 {
  init s0;
  s0 -> s1 [0, 64] { R9994 += 1, R9916 += 1 };
  s0 -> s0 [0, 65535] { R9993 += 1, R9994 += 1 };
  s0 -> s2 [0, 65535] { R9994 += 1, R9915 += 1, R9916 += 1 };
  s0 -> s3 [65, 65] { R9994 += 1, R9916 += 1 };
  s0 -> s4 [65, 65] { R9994 += 1, R9916 += 1 };
  s0 -> s1 [66, 65535] { R9994 += 1, R9916 += 1 };
  s1 -> s1 [0, 64] { R9994 += 1, R9916 += 1 };
  s1 -> s1 [0, 65535] { R9994 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9994 += 1, R9916 += 1 };
  s1 -> s4 [65, 65] { R9994 += 1, R9916 += 1 };
  s1 -> s1 [66, 65535] { R9994 += 1, R9916 += 1 };
  s2 -> s1 [0, 64] { R9994 += 1, R9916 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R9994 += 1, R9915 += 1, R9916 += 1 };
  s2 -> s3 [65, 65] { R9994 += 1, R9916 += 1 };
  s2 -> s4 [65, 65] { R9994 += 1, R9916 += 1 };
  s2 -> s1 [66, 65535] { R9994 += 1, R9916 += 1 };
  s3 -> s3 [0, 65535] { R9994 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9994 += 1, R9916 += 1 };
  s4 -> s6 [0, 65535] { R9994 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9994 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_38 {
  init s0;
  s0 -> s1 [0, 64] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s0 -> s0 [0, 65535] { R9995 += 1, R9996 += 1 };
  s0 -> s2 [0, 65535] { R9996 += 1, R9917 += 1, R9918 += 1 };
  s0 -> s3 [65, 65] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s0 -> s4 [65, 65] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s0 -> s1 [66, 65535] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s1 [0, 64] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s1 [0, 65535] { R9996 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s4 [65, 65] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s1 -> s1 [66, 65535] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s1 [0, 64] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s2 [0, 65535] { R9996 += 1, R9917 += 1, R9918 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s4 [65, 65] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s2 -> s1 [66, 65535] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s3 -> s6 [0, 65535] { R9996 += 1 };
  s3 -> s3 [0, 65535] { R9996 += 1, R9918 += 1, R9545 += 1, R9546 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R9996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R9996 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_39 {
  init s0;
  s0 -> s1 [0, 64] { R9998 += 1, R9920 += 1 };
  s0 -> s0 [0, 65535] { R9997 += 1, R9998 += 1 };
  s0 -> s2 [0, 65535] { R9998 += 1, R9919 += 1, R9920 += 1 };
  s0 -> s3 [65, 65] { R9998 += 1, R9920 += 1 };
  s0 -> s4 [65, 65] { R9998 += 1, R9920 += 1 };
  s0 -> s1 [66, 65535] { R9998 += 1, R9920 += 1 };
  s1 -> s1 [0, 64] { R9998 += 1, R9920 += 1 };
  s1 -> s1 [0, 65535] { R9998 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R9998 += 1, R9920 += 1 };
  s1 -> s4 [65, 65] { R9998 += 1, R9920 += 1 };
  s1 -> s1 [66, 65535] { R9998 += 1, R9920 += 1 };
  s2 -> s1 [0, 64] { R9998 += 1, R9920 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R9998 += 1, R9919 += 1, R9920 += 1 };
  s2 -> s3 [65, 65] { R9998 += 1, R9920 += 1 };
  s2 -> s4 [65, 65] { R9998 += 1, R9920 += 1 };
  s2 -> s1 [66, 65535] { R9998 += 1, R9920 += 1 };
  s3 -> s3 [0, 65535] { R9998 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R9998 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R9998 += 1, R9920 += 1 };
  s5 -> s5 [0, 65535] { R9998 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_40 {
  init s0;
  s0 -> s1 [0, 64] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s2 [0, 64] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s0 -> s3 [0, 65535] { R10000 += 1, R9921 += 1, R9922 += 1 };
  s0 -> s0 [0, 65535] { R9999 += 1, R10000 += 1 };
  s0 -> s4 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s5 [65, 65] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s0 -> s6 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s7 [65, 65] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s0 -> s1 [66, 79] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s2 [66, 65535] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s0 -> s8 [80, 80] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s0 -> s1 [81, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s1 -> s1 [0, 64] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s1 -> s4 [65, 65] { R10000 += 1, R9922 += 1 };
  s1 -> s6 [65, 65] { R10000 += 1, R9922 += 1 };
  s1 -> s1 [66, 79] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s1 -> s1 [66, 65535] { R10000 += 1, R9922 += 1 };
  s1 -> s8 [80, 80] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s1 -> s1 [81, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s1 [0, 64] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s2 [0, 64] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s2 -> s4 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s5 [65, 65] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s2 -> s6 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s7 [65, 65] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s2 -> s1 [66, 79] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s2 [66, 65535] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s2 -> s8 [80, 80] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s2 -> s1 [81, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s1 [0, 64] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s2 [0, 64] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s3 -> s3 [0, 65535] { R10000 += 1, R9921 += 1, R9922 += 1 };
  s3 -> s4 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s5 [65, 65] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s3 -> s6 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s7 [65, 65] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s3 -> s1 [66, 79] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s2 [66, 65535] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s3 -> s8 [80, 80] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s3 -> s1 [81, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s4 -> s4 [0, 79] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s4 -> s4 [0, 65535] { R10000 += 1, R9922 += 1 };
  s4 -> s10 [80, 80] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s4 -> s4 [81, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s5 -> s4 [0, 79] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s5 -> s5 [0, 65535] { R10000 += 1, R9922 += 1, R9851 += 1, R9852 += 1 };
  s5 -> s10 [80, 80] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s5 -> s4 [81, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s8 -> s8 [0, 64] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R10000 += 1 };
  s8 -> s10 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s8 -> s11 [65, 65] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s8 -> s8 [66, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s12 [0, 65535] { R10000 += 1 };
  s10 -> s10 [0, 65535] { R10000 += 1, R9922 += 1, R9852 += 1, R9853 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R10000 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R10000 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R2 = R9890 && R3 = R10000 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = 1 && R406 + R405 = 0 && R9857 = 0 && R9858 = R9890 && R9859 = 0 && R9860 = R9890 && R9861 = 0 && R9862 = R9890 && R9863 = 0 && R9864 = R9890 && R9865 = 0 && R9866 = R9890 && R9867 = 0 && R9868 = R9890 && R9869 = 0 && R9870 = R9890 && R9871 = 0 && R9872 = R9890 && R9873 = 0 && R9874 = R9890 && R9875 = 0 && R9876 = R9890 && R9877 = 0 && R9878 = R9890 && R9879 = 0 && R9880 = R9890 && R9881 = 0 && R9882 = R9890 && R9883 = 0 && R9884 = R9890 && R9885 = 0 && R9886 = R9890 && R9887 = 0 && R9888 = R9890 && R9889 = 0 && R9893 = 0 && R9894 = 0 && R9911 = 0 && R9912 = 0 && R9913 = 0 && R9914 = 0 && R9921 = 0 && R9922 = 0 && R9923 = 10 && R9924 = R10000 && R9925 = 10 && R9926 = R10000 && R9927 = 10 && R9928 = R10000 && R9929 = 10 && R9930 = R10000 && R9931 = 10 && R9932 = R10000 && R9933 = 10 && R9934 = R10000 && R9935 = 10 && R9936 = R10000 && R9937 = 10 && R9938 = R10000 && R9939 = 10 && R9940 = R10000 && R9941 = 10 && R9942 = R10000 && R9943 = 10 && R9944 = R10000 && R9945 = 10 && R9946 = R10000 && R9947 = 10 && R9948 = R10000 && R9949 = 10 && R9950 = R10000 && R9951 = 10 && R9952 = R10000 && R9953 = 10 && R9954 = R10000 && R9955 = 10 && R9956 = R10000 && R9957 = 10 && R9958 = R10000 && R9959 = 10 && R9960 = R10000 && R9961 = 10 && R9962 = R10000 && R9963 = 10 && R9964 = R10000 && R9965 = 10 && R9966 = R10000 && R9967 = 10 && R9968 = R10000 && R9969 = 10 && R9970 = R10000 && R9971 = 10 && R9972 = R10000 && R9973 = 10 && R9974 = R10000 && R9975 = 10 && R9976 = R10000 && R9977 = 10 && R9978 = R10000 && R9979 = 10 && R9980 = R10000 && R9981 = 10 && R9982 = R10000 && R9983 = 10 && R9984 = R10000 && R9985 = 10 && R9986 = R10000 && R9987 = 10 && R9988 = R10000 && R9989 = 10 && R9990 = R10000 && R9991 = 10 && R9992 = R10000 && R9993 = 10 && R9994 = R10000 && R9995 = 10 && R9996 = R10000 && R9997 = 10 && R9998 = R10000 && R9999 = 10 && R7264 + R7261 + R9856 + R9853 != 0 && R11 < 1 && R12 < 1 && R408 + R407 < 1 && R410 + R409 < 1 && 0 < R9890 && 9 < R10000 && (R20 = 0 || (R9891 = 0 && R9892 = 0)) && (R20 = 0 || (R9895 = 0 && R9896 = 0)) && (R20 = 0 || (R9897 = 0 && R9898 = 0)) && (R20 = 0 || (R9899 = 0 && R9900 = 0)) && (R20 = 0 || (R9901 = 0 && R9902 = 0)) && (R20 = 0 || (R9903 = 0 && R9904 = 0)) && (R20 = 0 || (R9905 = 0 && R9906 = 0)) && (R20 = 0 || (R9907 = 0 && R9908 = 0)) && (R20 = 0 || (R9909 = 0 && R9910 = 0)) && (R20 = 0 || (R9915 = 0 && R9916 = 0)) && (R20 = 0 || (R9917 = 0 && R9918 = 0)) && (R20 = 0 || (R9919 = 0 && R9920 = 0)) && (R416 + R413 = 0 || (R414 + R411 = 0 && R415 + R412 = 0)) && (R426 + R423 = 0 || (R419 + R417 = 0 && R420 + R418 = 0)) && (R426 + R423 = 0 || (R424 + R421 = 0 && R425 + R422 = 0)) && (R426 + R423 = 0 || (R429 + R427 = 0 && R430 + R428 = 0)) && (R426 + R423 = 0 || (R7262 + R7259 = 0 && R7263 + R7260 = 0)) && (R9544 + R9541 = 0 || (R9542 + R9539 = 0 && R9543 + R9540 = 0)) && (R9550 + R9547 = 0 || (R9548 + R9545 = 0 && R9549 + R9546 = 0)) && (R9550 + R9547 = 0 || (R9854 + R9851 = 0 && R9855 + R9852 = 0));
// End of Parikh automata intersection problem
