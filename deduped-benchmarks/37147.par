// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R13, R14, R15, R16, R17, R2, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [45, 45] { R63 += 1 };
  s0 -> s2 [46, 46] { R63 += 1 };
  s0 -> s1 [48, 62] { R63 += 1 };
  s0 -> s3 [65, 65] { R63 += 1 };
  s0 -> s1 [66, 65535] { R63 += 1 };
  s1 -> s1 [0, 43] { R63 += 1 };
  s1 -> s1 [45, 45] { R63 += 1 };
  s1 -> s2 [46, 46] { R63 += 1 };
  s1 -> s1 [48, 62] { R63 += 1 };
  s1 -> s3 [65, 65] { R63 += 1 };
  s1 -> s1 [66, 65535] { R63 += 1 };
  s2 -> s1 [0, 43] { R63 += 1 };
  s2 -> s1 [45, 45] { R63 += 1 };
  s2 -> s2 [46, 46] { R63 += 1 };
  s2 -> s1 [48, 62] { R63 += 1 };
  s2 -> s3 [65, 65] { R63 += 1 };
  s2 -> s1 [66, 114] { R63 += 1 };
  s2 -> s8 [115, 115] { R63 += 1 };
  s2 -> s1 [116, 65535] { R63 += 1 };
  s3 -> s3 [0, 43] { R63 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R63 += 1 };
  s3 -> s4 [46, 46] { R63 += 1 };
  s3 -> s3 [48, 62] { R63 += 1 };
  s3 -> s3 [65, 65535] { R63 += 1 };
  s4 -> s3 [0, 43] { R63 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R63 += 1 };
  s4 -> s4 [46, 46] { R63 += 1 };
  s4 -> s3 [48, 62] { R63 += 1 };
  s4 -> s3 [65, 114] { R63 += 1 };
  s4 -> s5 [115, 115] { R63 += 1 };
  s4 -> s3 [116, 65535] { R63 += 1 };
  s5 -> s3 [0, 43] { R63 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R63 += 1 };
  s5 -> s4 [46, 46] { R63 += 1 };
  s5 -> s3 [48, 62] { R63 += 1 };
  s5 -> s3 [65, 110] { R63 += 1 };
  s5 -> s6 [111, 111] { R63 += 1 };
  s5 -> s3 [112, 65535] { R63 += 1 };
  s6 -> s3 [0, 43] { R63 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R63 += 1 };
  s6 -> s4 [46, 46] { R63 += 1 };
  s6 -> s3 [48, 62] { R63 += 1 };
  s6 -> s3 [65, 98] { R63 += 1 };
  s6 -> s7 [99, 99] { R63 += 1 };
  s6 -> s3 [100, 65535] { R63 += 1 };
  s7 -> s3 [0, 43] { R63 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R63 += 1 };
  s7 -> s4 [46, 46] { R63 += 1 };
  s7 -> s3 [48, 62] { R63 += 1 };
  s7 -> s3 [65, 106] { R63 += 1 };
  s7 -> s3 [108, 65535] { R63 += 1 };
  s8 -> s1 [0, 43] { R63 += 1 };
  s8 -> s1 [45, 45] { R63 += 1 };
  s8 -> s2 [46, 46] { R63 += 1 };
  s8 -> s1 [48, 62] { R63 += 1 };
  s8 -> s3 [65, 65] { R63 += 1 };
  s8 -> s1 [66, 110] { R63 += 1 };
  s8 -> s9 [111, 111] { R63 += 1 };
  s8 -> s1 [112, 65535] { R63 += 1 };
  s9 -> s1 [0, 43] { R63 += 1 };
  s9 -> s1 [45, 45] { R63 += 1 };
  s9 -> s2 [46, 46] { R63 += 1 };
  s9 -> s1 [48, 62] { R63 += 1 };
  s9 -> s3 [65, 65] { R63 += 1 };
  s9 -> s1 [66, 98] { R63 += 1 };
  s9 -> s10 [99, 99] { R63 += 1 };
  s9 -> s1 [100, 65535] { R63 += 1 };
  s10 -> s1 [0, 43] { R63 += 1 };
  s10 -> s1 [45, 45] { R63 += 1 };
  s10 -> s2 [46, 46] { R63 += 1 };
  s10 -> s1 [48, 62] { R63 += 1 };
  s10 -> s3 [65, 65] { R63 += 1 };
  s10 -> s1 [66, 106] { R63 += 1 };
  s10 -> s1 [108, 65535] { R63 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R65 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s1 -> s1 [0, 65535] { R65 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R67 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s3 [58, 58] { R67 += 1 };
  s0 -> s1 [59, 65535] { R67 += 1 };
  s1 -> s1 [0, 57] { R67 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R67 += 1 };
  s1 -> s1 [59, 65535] { R67 += 1 };
  s2 -> s1 [0, 57] { R67 += 1 };
  s2 -> s2 [0, 65535] { R67 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R67 += 1 };
  s2 -> s1 [59, 65535] { R67 += 1 };
  s3 -> s3 [0, 65535] { R67 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R69 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s3 [65, 65] { R69 += 1 };
  s0 -> s1 [66, 65535] { R69 += 1 };
  s1 -> s1 [0, 64] { R69 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R69 += 1 };
  s1 -> s1 [66, 65535] { R69 += 1 };
  s2 -> s1 [0, 64] { R69 += 1 };
  s2 -> s2 [0, 65535] { R69 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R69 += 1 };
  s2 -> s1 [66, 65535] { R69 += 1 };
  s3 -> s3 [0, 65535] { R69 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R71 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R14 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s3 [91, 91] { R71 += 1, R15 += 1 };
  s0 -> s1 [92, 65535] { R71 += 1, R15 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R71 += 1, R15 += 1 };
  s1 -> s5 [0, 65535] { R71 += 1 };
  s2 -> s1 [0, 90] { R71 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R71 += 1, R14 += 1, R15 += 1 };
  s2 -> s3 [91, 91] { R71 += 1, R15 += 1 };
  s2 -> s1 [92, 65535] { R71 += 1, R15 += 1 };
  s3 -> s1 [0, 65535] { R71 += 1, R15 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R71 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R73 += 1, R17 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R16 += 1, R17 += 1 };
  s1 -> s4 [0, 65535] { R73 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1, R17 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R73 += 1, R17 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R73 += 1, R16 += 1, R17 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R73 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R75 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R36 += 1, R37 += 1 };
  s0 -> s1 [66, 65535] { R75 += 1, R37 += 1 };
  s1 -> s1 [0, 64] { R75 += 1, R37 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R75 += 1 };
  s1 -> s1 [66, 65535] { R75 += 1, R37 += 1 };
  s2 -> s1 [0, 64] { R75 += 1, R37 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R36 += 1, R37 += 1 };
  s2 -> s1 [66, 65535] { R75 += 1, R37 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R77 += 1, R39 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R77 += 1 };
  s1 -> s1 [0, 65535] { R77 += 1, R39 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R77 += 1, R39 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R77 += 1, R38 += 1, R39 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R77 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R79 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R40 += 1, R41 += 1 };
  s0 -> s3 [87, 87] { R79 += 1, R41 += 1 };
  s0 -> s1 [88, 65535] { R79 += 1, R41 += 1 };
  s1 -> s1 [0, 65] { R79 += 1, R41 += 1 };
  s1 -> s3 [87, 87] { R79 += 1, R41 += 1 };
  s1 -> s1 [88, 65535] { R79 += 1, R41 += 1 };
  s2 -> s1 [0, 65] { R79 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [87, 87] { R79 += 1, R41 += 1 };
  s2 -> s1 [88, 65535] { R79 += 1, R41 += 1 };
  s3 -> s3 [0, 65] { R79 += 1, R41 += 1 };
  s3 -> s3 [0, 65535] { R79 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [87, 65535] { R79 += 1, R41 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R81 += 1, R43 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s1 -> s4 [0, 65535] { R81 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1, R43 += 1, R23 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R81 += 1, R43 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R81 += 1, R42 += 1, R43 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R81 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R83 += 1, R45 += 1 };
  s0 -> s2 [0, 65535] { R83 += 1, R44 += 1, R45 += 1 };
  s0 -> s3 [0, 65535] { R83 += 1, R45 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s1 [88, 65535] { R83 += 1, R45 += 1 };
  s1 -> s1 [0, 86] { R83 += 1, R45 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R83 += 1, R45 += 1 };
  s2 -> s1 [0, 86] { R83 += 1, R45 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1, R44 += 1, R45 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R83 += 1, R45 += 1, R25 += 1 };
  s2 -> s1 [88, 65535] { R83 += 1, R45 += 1 };
  s3 -> s1 [0, 86] { R83 += 1, R45 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R83 += 1 };
  s3 -> s3 [0, 65535] { R83 += 1, R45 += 1, R25 += 1 };
  s3 -> s1 [88, 65535] { R83 += 1, R45 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R83 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R85 += 1, R47 += 1, R29 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s3 [0, 65535] { R85 += 1, R47 += 1, R28 += 1, R29 += 1 };
  s0 -> s4 [87, 87] { R85 += 1, R47 += 1, R29 += 1 };
  s0 -> s1 [88, 65535] { R85 += 1, R47 += 1, R29 += 1 };
  s1 -> s1 [0, 86] { R85 += 1, R47 += 1, R29 += 1 };
  s1 -> s4 [87, 87] { R85 += 1, R47 += 1, R29 += 1 };
  s1 -> s1 [88, 65535] { R85 += 1, R47 += 1, R29 += 1 };
  s2 -> s1 [0, 86] { R85 += 1, R47 += 1, R29 += 1 };
  s2 -> s2 [0, 65535] { R85 += 1, R46 += 1, R47 += 1 };
  s2 -> s3 [0, 65535] { R85 += 1, R47 += 1, R28 += 1, R29 += 1 };
  s2 -> s4 [87, 87] { R85 += 1, R47 += 1, R29 += 1 };
  s2 -> s1 [88, 65535] { R85 += 1, R47 += 1, R29 += 1 };
  s3 -> s1 [0, 86] { R85 += 1, R47 += 1, R29 += 1 };
  s3 -> s3 [0, 65535] { R85 += 1, R47 += 1, R28 += 1, R29 += 1 };
  s3 -> s4 [87, 87] { R85 += 1, R47 += 1, R29 += 1 };
  s3 -> s1 [88, 65535] { R85 += 1, R47 += 1, R29 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R85 += 1 };
  s4 -> s7 [0, 65535] { R85 += 1, R47 += 1 };
  s4 -> s4 [0, 65535] { R85 += 1, R47 += 1, R29 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R85 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R85 += 1 };
  s7 -> s7 [0, 65535] { R85 += 1, R47 += 1 };
  accepting s4, s5, s6, s7;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R87 += 1, R49 += 1, R34 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R49 += 1, R33 += 1, R34 += 1 };
  s0 -> s3 [0, 65535] { R87 += 1, R48 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s1 -> s6 [0, 65535] { R87 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R49 += 1, R34 += 1, R35 += 1 };
  s1 -> s5 [0, 65535] { R87 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R87 += 1, R49 += 1, R34 += 1, R35 += 1 };
  s2 -> s2 [0, 65535] { R87 += 1, R49 += 1, R33 += 1, R34 += 1 };
  s2 -> s5 [0, 65535] { R87 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R87 += 1, R49 += 1, R34 += 1, R35 += 1 };
  s3 -> s2 [0, 65535] { R87 += 1, R49 += 1, R33 += 1, R34 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R87 += 1, R48 += 1, R49 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R87 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R87 += 1, R49 += 1 };
  s6 -> s5 [0, 65535] { R87 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R89 += 1, R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R51 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s1 -> s1 [0, 65535] { R89 += 1, R50 += 1, R51 += 1 };
  s1 -> s2 [0, 65535] { R89 += 1, R51 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R89 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1, R51 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R89 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 64] { R91 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R91 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [65, 65] { R91 += 1, R53 += 1 };
  s0 -> s4 [65, 65] { R91 += 1, R53 += 1 };
  s0 -> s1 [88, 65535] { R91 += 1, R53 += 1 };
  s1 -> s1 [0, 64] { R91 += 1, R53 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R91 += 1, R53 += 1 };
  s1 -> s4 [65, 65] { R91 += 1, R53 += 1 };
  s1 -> s1 [88, 65535] { R91 += 1, R53 += 1 };
  s2 -> s1 [0, 64] { R91 += 1, R53 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R91 += 1, R52 += 1, R53 += 1 };
  s2 -> s3 [65, 65] { R91 += 1, R53 += 1 };
  s2 -> s4 [65, 65] { R91 += 1, R53 += 1 };
  s2 -> s1 [88, 65535] { R91 += 1, R53 += 1 };
  s3 -> s3 [0, 65] { R91 += 1, R53 += 1 };
  s3 -> s3 [0, 65535] { R91 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [88, 65535] { R91 += 1, R53 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R91 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 64] { R93 += 1, R55 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R54 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s3 [65, 65] { R93 += 1, R55 += 1, R22 += 1 };
  s0 -> s4 [65, 65] { R93 += 1, R55 += 1, R22 += 1 };
  s0 -> s1 [66, 65535] { R93 += 1, R55 += 1, R22 += 1 };
  s1 -> s1 [0, 64] { R93 += 1, R55 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R93 += 1, R55 += 1, R22 += 1 };
  s1 -> s4 [65, 65] { R93 += 1, R55 += 1, R22 += 1 };
  s1 -> s1 [66, 65535] { R93 += 1, R55 += 1, R22 += 1 };
  s2 -> s1 [0, 64] { R93 += 1, R55 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R93 += 1, R54 += 1, R55 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R93 += 1, R55 += 1, R22 += 1 };
  s2 -> s4 [65, 65] { R93 += 1, R55 += 1, R22 += 1 };
  s2 -> s1 [66, 65535] { R93 += 1, R55 += 1, R22 += 1 };
  s3 -> s3 [0, 65535] { R93 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R93 += 1 };
  s4 -> s4 [0, 65535] { R93 += 1, R55 += 1, R22 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R93 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 64] { R95 += 1, R57 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R56 += 1, R57 += 1 };
  s0 -> s3 [65, 65] { R95 += 1, R57 += 1, R24 += 1 };
  s0 -> s4 [65, 65] { R95 += 1, R57 += 1, R24 += 1 };
  s0 -> s1 [66, 65535] { R95 += 1, R57 += 1, R24 += 1 };
  s1 -> s1 [0, 64] { R95 += 1, R57 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R95 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R95 += 1, R57 += 1, R24 += 1 };
  s1 -> s4 [65, 65] { R95 += 1, R57 += 1, R24 += 1 };
  s1 -> s1 [66, 65535] { R95 += 1, R57 += 1, R24 += 1 };
  s2 -> s1 [0, 64] { R95 += 1, R57 += 1, R24 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R95 += 1, R56 += 1, R57 += 1 };
  s2 -> s3 [65, 65] { R95 += 1, R57 += 1, R24 += 1 };
  s2 -> s4 [65, 65] { R95 += 1, R57 += 1, R24 += 1 };
  s2 -> s1 [66, 65535] { R95 += 1, R57 += 1, R24 += 1 };
  s3 -> s3 [0, 65535] { R95 += 1, R57 += 1, R24 += 1 };
  s3 -> s6 [0, 65535] { R95 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R95 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R95 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s3 [65, 65] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R97 += 1 };
  s1 -> s3 [65, 65] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R97 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [65, 65] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R97 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R97 += 1, R59 += 1, R26 += 1, R27 += 1 };
  s4 -> s6 [0, 65535] { R97 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R97 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s3 [65, 65] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s0 -> s4 [65, 65] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s0 -> s1 [66, 65535] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [0, 64] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s1 -> s4 [65, 65] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [66, 65535] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s2 -> s1 [0, 64] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R60 += 1, R61 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s2 -> s4 [65, 65] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s2 -> s1 [66, 65535] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s3 -> s3 [0, 65535] { R99 += 1, R61 += 1, R30 += 1, R31 += 1 };
  s3 -> s6 [0, 65535] { R99 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R99 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R99 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R49 && R2 = R99 && R14 = 0 && R15 = 1 && R16 = 0 && R17 = 1 && R23 + R22 + -1*R29 + -1*R27 = 0 && R28 + R26 = 0 && R36 = 0 && R37 = R49 && R38 = 0 && R39 = R49 && R40 = 0 && R41 = R49 && R42 = 0 && R43 = R49 && R44 = 0 && R45 = R49 && R46 = 0 && R47 = R49 && R48 = 0 && R62 = 10 && R63 = R99 && R64 = 10 && R65 = R99 && R66 = 10 && R67 = R99 && R68 = 10 && R69 = R99 && R70 = 10 && R71 = R99 && R72 = 10 && R73 = R99 && R74 = 10 && R75 = R99 && R76 = 10 && R77 = R99 && R78 = 10 && R79 = R99 && R80 = 10 && R81 = R99 && R82 = 10 && R83 = R99 && R84 = 10 && R85 = R99 && R86 = 10 && R87 = R99 && R88 = 10 && R89 = R99 && R90 = 10 && R91 = R99 && R92 = 10 && R93 = R99 && R94 = 10 && R95 = R99 && R96 = 10 && R97 = R99 && R98 = 10 && R7 < 1 && R8 < 1 && R25 + R24 < 1 && -1*R29 + -1*R27 < 1 && 0 < R49 && 9 < R99 && (R29 + R27 != 0 || R35 + R32 = 0 || (R33 + R30 = 0 && R34 + R31 = 0)) && (R33 + R30 != 0 || R29 + R27 + -1*R34 + -1*R31 = 0 || R29 + R27 < 1) && (R13 = 0 || (R50 = 0 && R51 = 0)) && (R13 = 0 || (R52 = 0 && R53 = 0)) && (R13 = 0 || (R54 = 0 && R55 = 0)) && (R13 = 0 || (R56 = 0 && R57 = 0)) && (R13 = 0 || (R58 = 0 && R59 = 0)) && (R13 = 0 || (R60 = 0 && R61 = 0)) && (R33 + R30 = 0 || R29 + R27 < 1);
// End of Parikh automata intersection problem
