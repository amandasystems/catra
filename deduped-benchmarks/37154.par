// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R3803, R3804, R3805, R3806, R3807, R3808, R3903, R3904, R3905, R3906, R3907, R3908, R3909, R3910, R3911, R3912, R3913, R3914, R3915, R3916, R3917, R3918, R3919, R3920, R3921, R3922, R3923, R3924, R3925, R3926, R3927, R3928, R3929, R3930, R3931, R3932, R3933, R3934, R3935, R3936, R3937, R3938, R3939, R3940, R3941, R3942, R3943, R3944, R3945, R3946, R3947, R3948, R3949, R3950, R3951, R3952, R3953, R3954, R3955, R3956, R3957, R3958, R3959, R3960, R3961, R3962, R3963, R3964, R3965, R3966, R3967, R3968, R3969, R3970, R3971, R3972, R3973, R3974, R3975, R3976, R3977, R3978, R3979, R3980, R3981, R3982, R3983, R3984, R3985, R3986, R3987, R3988, R3989, R3990, R3991, R3992, R3993, R3994, R3995, R3996, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3948 += 1 };
  s0 -> s0 [0, 65535] { R3947 += 1, R3948 += 1 };
  s0 -> s1 [45, 45] { R3948 += 1 };
  s0 -> s2 [46, 46] { R3948 += 1 };
  s0 -> s1 [48, 62] { R3948 += 1 };
  s0 -> s3 [65, 65] { R3948 += 1 };
  s0 -> s1 [66, 65535] { R3948 += 1 };
  s1 -> s1 [0, 43] { R3948 += 1 };
  s1 -> s1 [45, 45] { R3948 += 1 };
  s1 -> s2 [46, 46] { R3948 += 1 };
  s1 -> s1 [48, 62] { R3948 += 1 };
  s1 -> s3 [65, 65] { R3948 += 1 };
  s1 -> s1 [66, 65535] { R3948 += 1 };
  s2 -> s1 [0, 43] { R3948 += 1 };
  s2 -> s1 [45, 45] { R3948 += 1 };
  s2 -> s2 [46, 46] { R3948 += 1 };
  s2 -> s1 [48, 62] { R3948 += 1 };
  s2 -> s3 [65, 65] { R3948 += 1 };
  s2 -> s1 [66, 114] { R3948 += 1 };
  s2 -> s8 [115, 115] { R3948 += 1 };
  s2 -> s1 [116, 65535] { R3948 += 1 };
  s3 -> s3 [0, 43] { R3948 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3948 += 1 };
  s3 -> s4 [46, 46] { R3948 += 1 };
  s3 -> s3 [48, 62] { R3948 += 1 };
  s3 -> s3 [65, 65535] { R3948 += 1 };
  s4 -> s3 [0, 43] { R3948 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3948 += 1 };
  s4 -> s4 [46, 46] { R3948 += 1 };
  s4 -> s3 [48, 62] { R3948 += 1 };
  s4 -> s3 [65, 114] { R3948 += 1 };
  s4 -> s5 [115, 115] { R3948 += 1 };
  s4 -> s3 [116, 65535] { R3948 += 1 };
  s5 -> s3 [0, 43] { R3948 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3948 += 1 };
  s5 -> s4 [46, 46] { R3948 += 1 };
  s5 -> s3 [48, 62] { R3948 += 1 };
  s5 -> s3 [65, 110] { R3948 += 1 };
  s5 -> s6 [111, 111] { R3948 += 1 };
  s5 -> s3 [112, 65535] { R3948 += 1 };
  s6 -> s3 [0, 43] { R3948 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3948 += 1 };
  s6 -> s4 [46, 46] { R3948 += 1 };
  s6 -> s3 [48, 62] { R3948 += 1 };
  s6 -> s3 [65, 98] { R3948 += 1 };
  s6 -> s7 [99, 99] { R3948 += 1 };
  s6 -> s3 [100, 65535] { R3948 += 1 };
  s7 -> s3 [0, 43] { R3948 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3948 += 1 };
  s7 -> s4 [46, 46] { R3948 += 1 };
  s7 -> s3 [48, 62] { R3948 += 1 };
  s7 -> s3 [65, 106] { R3948 += 1 };
  s7 -> s3 [108, 65535] { R3948 += 1 };
  s8 -> s1 [0, 43] { R3948 += 1 };
  s8 -> s1 [45, 45] { R3948 += 1 };
  s8 -> s2 [46, 46] { R3948 += 1 };
  s8 -> s1 [48, 62] { R3948 += 1 };
  s8 -> s3 [65, 65] { R3948 += 1 };
  s8 -> s1 [66, 110] { R3948 += 1 };
  s8 -> s9 [111, 111] { R3948 += 1 };
  s8 -> s1 [112, 65535] { R3948 += 1 };
  s9 -> s1 [0, 43] { R3948 += 1 };
  s9 -> s1 [45, 45] { R3948 += 1 };
  s9 -> s2 [46, 46] { R3948 += 1 };
  s9 -> s1 [48, 62] { R3948 += 1 };
  s9 -> s3 [65, 65] { R3948 += 1 };
  s9 -> s1 [66, 98] { R3948 += 1 };
  s9 -> s10 [99, 99] { R3948 += 1 };
  s9 -> s1 [100, 65535] { R3948 += 1 };
  s10 -> s1 [0, 43] { R3948 += 1 };
  s10 -> s1 [45, 45] { R3948 += 1 };
  s10 -> s2 [46, 46] { R3948 += 1 };
  s10 -> s1 [48, 62] { R3948 += 1 };
  s10 -> s3 [65, 65] { R3948 += 1 };
  s10 -> s1 [66, 106] { R3948 += 1 };
  s10 -> s1 [108, 65535] { R3948 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3949 += 1, R3950 += 1 };
  s0 -> s1 [0, 65535] { R3950 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R3950 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3952 += 1 };
  s0 -> s0 [0, 65535] { R3951 += 1, R3952 += 1 };
  s0 -> s2 [0, 65535] { R3952 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R3952 += 1 };
  s0 -> s1 [59, 65535] { R3952 += 1 };
  s1 -> s1 [0, 57] { R3952 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3952 += 1 };
  s1 -> s1 [59, 65535] { R3952 += 1 };
  s2 -> s1 [0, 57] { R3952 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3952 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3952 += 1 };
  s2 -> s1 [59, 65535] { R3952 += 1 };
  s3 -> s3 [0, 65535] { R3952 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3954 += 1 };
  s0 -> s0 [0, 65535] { R3953 += 1, R3954 += 1 };
  s0 -> s2 [0, 65535] { R3954 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3954 += 1 };
  s0 -> s1 [66, 65535] { R3954 += 1 };
  s1 -> s1 [0, 64] { R3954 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3954 += 1 };
  s1 -> s1 [66, 65535] { R3954 += 1 };
  s2 -> s1 [0, 64] { R3954 += 1 };
  s2 -> s2 [0, 65535] { R3954 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3954 += 1 };
  s2 -> s1 [66, 65535] { R3954 += 1 };
  s3 -> s3 [0, 65535] { R3954 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3956 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3955 += 1, R3956 += 1 };
  s0 -> s2 [0, 65535] { R3956 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R3956 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3956 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R3956 += 1 };
  s1 -> s1 [0, 65535] { R3956 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3956 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3956 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3956 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3956 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3956 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3956 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3958 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R3958 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3957 += 1, R3958 += 1 };
  s1 -> s1 [0, 65535] { R3958 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R3958 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3958 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R3958 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3958 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3960 += 1, R3910 += 1 };
  s0 -> s0 [0, 65535] { R3959 += 1, R3960 += 1 };
  s0 -> s2 [0, 65535] { R3960 += 1, R3909 += 1, R3910 += 1 };
  s0 -> s1 [66, 65535] { R3960 += 1, R3910 += 1 };
  s1 -> s1 [0, 64] { R3960 += 1, R3910 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3960 += 1 };
  s1 -> s1 [66, 65535] { R3960 += 1, R3910 += 1 };
  s2 -> s1 [0, 64] { R3960 += 1, R3910 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3960 += 1, R3909 += 1, R3910 += 1 };
  s2 -> s1 [66, 65535] { R3960 += 1, R3910 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R3961 += 1, R3962 += 1 };
  s0 -> s1 [0, 65535] { R3962 += 1, R3912 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R3962 += 1, R3911 += 1, R3912 += 1 };
  s1 -> s1 [0, 65535] { R3962 += 1, R3912 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R3962 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3962 += 1, R3912 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3962 += 1, R3911 += 1, R3912 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3962 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3964 += 1, R3914 += 1 };
  s0 -> s0 [0, 65535] { R3963 += 1, R3964 += 1 };
  s0 -> s2 [0, 65535] { R3964 += 1, R3913 += 1, R3914 += 1 };
  s0 -> s1 [80, 65535] { R3964 += 1, R3914 += 1 };
  s1 -> s1 [0, 65] { R3964 += 1, R3914 += 1 };
  s1 -> s1 [0, 65535] { R3964 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R3964 += 1, R3914 += 1 };
  s2 -> s1 [0, 65] { R3964 += 1, R3914 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3964 += 1, R3913 += 1, R3914 += 1 };
  s2 -> s1 [80, 65535] { R3964 += 1, R3914 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3966 += 1, R3915 += 1, R3916 += 1 };
  s0 -> s2 [0, 65535] { R3966 += 1, R3916 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R3965 += 1, R3966 += 1 };
  s1 -> s1 [0, 65535] { R3966 += 1, R3915 += 1, R3916 += 1 };
  s1 -> s2 [0, 65535] { R3966 += 1, R3916 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3966 += 1, R3916 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3966 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3966 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R3968 += 1, R3918 += 1 };
  s0 -> s0 [0, 65535] { R3967 += 1, R3968 += 1 };
  s0 -> s2 [0, 65535] { R3968 += 1, R3917 += 1, R3918 += 1 };
  s0 -> s1 [81, 65535] { R3968 += 1, R3918 += 1 };
  s1 -> s1 [0, 79] { R3968 += 1, R3918 += 1 };
  s1 -> s1 [0, 65535] { R3968 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R3968 += 1, R3918 += 1 };
  s2 -> s1 [0, 79] { R3968 += 1, R3918 += 1 };
  s2 -> s2 [0, 65535] { R3968 += 1, R3917 += 1, R3918 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R3968 += 1, R3918 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R3969 += 1, R3970 += 1 };
  s0 -> s2 [0, 65535] { R3970 += 1, R3920 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s3 [0, 65535] { R3970 += 1, R3919 += 1, R3920 += 1 };
  s0 -> s1 [81, 65535] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s1 -> s1 [0, 79] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3970 += 1 };
  s1 -> s1 [0, 65535] { R3970 += 1, R3920 += 1 };
  s1 -> s1 [81, 65535] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s2 -> s1 [0, 79] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3970 += 1, R3920 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s5 [0, 65535] { R3970 += 1 };
  s2 -> s1 [81, 65535] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s3 -> s1 [0, 79] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3970 += 1, R3920 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s3 [0, 65535] { R3970 += 1, R3919 += 1, R3920 += 1 };
  s3 -> s1 [81, 65535] { R3970 += 1, R3920 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3970 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3971 += 1, R3972 += 1 };
  s0 -> s1 [0, 65535] { R3972 += 1, R3922 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s2 [0, 65535] { R3972 += 1, R3922 += 1 };
  s0 -> s3 [0, 65535] { R3972 += 1, R3921 += 1, R3922 += 1 };
  s1 -> s1 [0, 65535] { R3972 += 1, R3922 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s2 [0, 65535] { R3972 += 1, R3922 += 1 };
  s1 -> s5 [0, 65535] { R3972 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3972 += 1, R3922 += 1 };
  s2 -> s5 [0, 65535] { R3972 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3972 += 1, R3922 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s2 [0, 65535] { R3972 += 1, R3922 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3972 += 1, R3921 += 1, R3922 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3972 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3973 += 1, R3974 += 1 };
  s0 -> s1 [0, 65535] { R3974 += 1, R3924 += 1 };
  s0 -> s2 [0, 65535] { R3974 += 1, R3923 += 1, R3924 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3974 += 1 };
  s1 -> s1 [0, 65535] { R3974 += 1, R3924 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3974 += 1, R3924 += 1 };
  s2 -> s2 [0, 65535] { R3974 += 1, R3923 += 1, R3924 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3974 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3976 += 1, R3926 += 1 };
  s0 -> s0 [0, 65535] { R3975 += 1, R3976 += 1 };
  s0 -> s2 [0, 65535] { R3976 += 1, R3926 += 1, R3907 += 1, R3908 += 1 };
  s0 -> s3 [0, 65535] { R3976 += 1, R3925 += 1, R3926 += 1 };
  s1 -> s1 [0, 65535] { R3976 += 1, R3926 += 1 };
  s1 -> s5 [0, 65535] { R3976 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3976 += 1, R3926 += 1 };
  s2 -> s5 [0, 65535] { R3976 += 1 };
  s2 -> s2 [0, 65535] { R3976 += 1, R3926 += 1, R3907 += 1, R3908 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3976 += 1, R3926 += 1 };
  s3 -> s2 [0, 65535] { R3976 += 1, R3926 += 1, R3907 += 1, R3908 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3976 += 1, R3925 += 1, R3926 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3976 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3978 += 1, R3928 += 1 };
  s0 -> s2 [0, 65535] { R3978 += 1, R3927 += 1, R3928 += 1 };
  s0 -> s0 [0, 65535] { R3977 += 1, R3978 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3978 += 1, R3928 += 1 };
  s1 -> s4 [0, 65535] { R3978 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3978 += 1, R3928 += 1 };
  s2 -> s2 [0, 65535] { R3978 += 1, R3927 += 1, R3928 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3978 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3980 += 1, R3929 += 1, R3930 += 1 };
  s0 -> s0 [0, 65535] { R3979 += 1, R3980 += 1 };
  s0 -> s2 [0, 65535] { R3980 += 1, R3930 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3980 += 1, R3929 += 1, R3930 += 1 };
  s1 -> s2 [0, 65535] { R3980 += 1, R3930 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3980 += 1 };
  s2 -> s2 [0, 65535] { R3980 += 1, R3930 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3980 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3982 += 1, R3932 += 1 };
  s0 -> s0 [0, 65535] { R3981 += 1, R3982 += 1 };
  s0 -> s2 [0, 65535] { R3982 += 1, R3931 += 1, R3932 += 1 };
  s0 -> s3 [65, 65] { R3982 += 1, R3932 += 1 };
  s0 -> s4 [65, 65] { R3982 += 1, R3932 += 1 };
  s0 -> s5 [80, 80] { R3982 += 1, R3932 += 1 };
  s0 -> s1 [81, 65535] { R3982 += 1, R3932 += 1 };
  s1 -> s1 [0, 64] { R3982 += 1, R3932 += 1 };
  s1 -> s3 [65, 65] { R3982 += 1, R3932 += 1 };
  s1 -> s4 [65, 65] { R3982 += 1, R3932 += 1 };
  s1 -> s5 [80, 80] { R3982 += 1, R3932 += 1 };
  s1 -> s1 [81, 65535] { R3982 += 1, R3932 += 1 };
  s2 -> s1 [0, 64] { R3982 += 1, R3932 += 1 };
  s2 -> s2 [0, 65535] { R3982 += 1, R3931 += 1, R3932 += 1 };
  s2 -> s3 [65, 65] { R3982 += 1, R3932 += 1 };
  s2 -> s4 [65, 65] { R3982 += 1, R3932 += 1 };
  s2 -> s5 [80, 80] { R3982 += 1, R3932 += 1 };
  s2 -> s1 [81, 65535] { R3982 += 1, R3932 += 1 };
  s4 -> s4 [0, 65] { R3982 += 1, R3932 += 1 };
  s4 -> s8 [80, 80] { R3982 += 1, R3932 += 1 };
  s4 -> s4 [81, 65535] { R3982 += 1, R3932 += 1 };
  s5 -> s5 [0, 64] { R3982 += 1, R3932 += 1 };
  s5 -> s5 [0, 65535] { R3982 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3982 += 1, R3932 += 1 };
  s5 -> s8 [65, 65] { R3982 += 1, R3932 += 1 };
  s5 -> s5 [80, 65535] { R3982 += 1, R3932 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3982 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3982 += 1, R3932 += 1 };
  s8 -> s8 [0, 65535] { R3982 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R3982 += 1, R3932 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R3984 += 1, R3933 += 1, R3934 += 1 };
  s0 -> s0 [0, 65535] { R3983 += 1, R3984 += 1 };
  s0 -> s3 [65, 65] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3984 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3984 += 1, R3933 += 1, R3934 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R3984 += 1 };
  s3 -> s3 [0, 65535] { R3984 += 1, R3934 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3984 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3984 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s0 -> s2 [0, 64] { R3986 += 1, R3936 += 1 };
  s0 -> s0 [0, 65535] { R3985 += 1, R3986 += 1 };
  s0 -> s3 [0, 65535] { R3986 += 1, R3935 += 1, R3936 += 1 };
  s0 -> s4 [65, 65] { R3986 += 1, R3936 += 1 };
  s0 -> s5 [65, 65] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R3986 += 1, R3936 += 1 };
  s0 -> s7 [65, 65] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s0 -> s2 [66, 79] { R3986 += 1, R3936 += 1 };
  s0 -> s1 [66, 65535] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s0 -> s2 [81, 65535] { R3986 += 1, R3936 += 1 };
  s1 -> s1 [0, 64] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s1 -> s2 [0, 64] { R3986 += 1, R3936 += 1 };
  s1 -> s4 [65, 65] { R3986 += 1, R3936 += 1 };
  s1 -> s5 [65, 65] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s1 -> s6 [65, 65] { R3986 += 1, R3936 += 1 };
  s1 -> s7 [65, 65] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s1 -> s2 [66, 79] { R3986 += 1, R3936 += 1 };
  s1 -> s1 [66, 65535] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s1 -> s2 [81, 65535] { R3986 += 1, R3936 += 1 };
  s2 -> s2 [0, 64] { R3986 += 1, R3936 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3986 += 1 };
  s2 -> s4 [65, 65] { R3986 += 1, R3936 += 1 };
  s2 -> s6 [65, 65] { R3986 += 1, R3936 += 1 };
  s2 -> s2 [66, 79] { R3986 += 1, R3936 += 1 };
  s2 -> s2 [81, 65535] { R3986 += 1, R3936 += 1 };
  s3 -> s1 [0, 64] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s3 -> s2 [0, 64] { R3986 += 1, R3936 += 1 };
  s3 -> s3 [0, 65535] { R3986 += 1, R3935 += 1, R3936 += 1 };
  s3 -> s4 [65, 65] { R3986 += 1, R3936 += 1 };
  s3 -> s5 [65, 65] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R3986 += 1, R3936 += 1 };
  s3 -> s7 [65, 65] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s3 -> s2 [66, 79] { R3986 += 1, R3936 += 1 };
  s3 -> s1 [66, 65535] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s3 -> s2 [81, 65535] { R3986 += 1, R3936 += 1 };
  s4 -> s4 [0, 79] { R3986 += 1, R3936 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R3986 += 1 };
  s4 -> s4 [81, 65535] { R3986 += 1, R3936 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3986 += 1 };
  s7 -> s4 [0, 79] { R3986 += 1, R3936 += 1 };
  s7 -> s7 [0, 65535] { R3986 += 1, R3936 += 1, R3509 += 1 };
  s7 -> s4 [81, 65535] { R3986 += 1, R3936 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s0 [0, 65535] { R3987 += 1, R3988 += 1 };
  s0 -> s2 [0, 65535] { R3988 += 1, R3937 += 1, R3938 += 1 };
  s0 -> s3 [65, 65] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 65535] { R3988 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s2 [0, 65535] { R3988 += 1, R3937 += 1, R3938 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s3 [0, 65535] { R3988 += 1, R3938 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s6 [0, 65535] { R3988 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3988 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3988 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [0, 64] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s0 [0, 65535] { R3989 += 1, R3990 += 1 };
  s0 -> s3 [0, 65535] { R3990 += 1, R3939 += 1, R3940 += 1 };
  s0 -> s4 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s5 [65, 65] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s6 [65, 65] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s7 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s1 [66, 65535] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [66, 65535] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s1 [0, 64] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [0, 64] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s4 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s5 [65, 65] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s6 [65, 65] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s7 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s1 [66, 65535] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [66, 65535] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [0, 64] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [0, 65535] { R3990 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s7 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [66, 65535] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s1 [0, 64] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s2 [0, 64] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s3 [0, 65535] { R3990 += 1, R3939 += 1, R3940 += 1 };
  s3 -> s4 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s5 [65, 65] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s6 [65, 65] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s7 [65, 65] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s1 [66, 65535] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s2 [66, 65535] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s4 -> s4 [0, 65535] { R3990 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3990 += 1, R3940 += 1, R3803 += 1, R3804 += 1 };
  s6 -> s7 [0, 65535] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R3990 += 1 };
  s7 -> s7 [0, 65535] { R3990 += 1, R3940 += 1, R3804 += 1, R3805 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3990 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3992 += 1, R3942 += 1 };
  s0 -> s0 [0, 65535] { R3991 += 1, R3992 += 1 };
  s0 -> s2 [0, 65535] { R3992 += 1, R3941 += 1, R3942 += 1 };
  s0 -> s3 [65, 65] { R3992 += 1, R3942 += 1 };
  s0 -> s4 [65, 65] { R3992 += 1, R3942 += 1 };
  s0 -> s1 [66, 65535] { R3992 += 1, R3942 += 1 };
  s1 -> s1 [0, 64] { R3992 += 1, R3942 += 1 };
  s1 -> s1 [0, 65535] { R3992 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3992 += 1, R3942 += 1 };
  s1 -> s4 [65, 65] { R3992 += 1, R3942 += 1 };
  s1 -> s1 [66, 65535] { R3992 += 1, R3942 += 1 };
  s2 -> s1 [0, 64] { R3992 += 1, R3942 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3992 += 1, R3941 += 1, R3942 += 1 };
  s2 -> s3 [65, 65] { R3992 += 1, R3942 += 1 };
  s2 -> s4 [65, 65] { R3992 += 1, R3942 += 1 };
  s2 -> s1 [66, 65535] { R3992 += 1, R3942 += 1 };
  s3 -> s6 [0, 65535] { R3992 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3992 += 1, R3942 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3992 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3992 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s2 [0, 64] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s0 -> s0 [0, 65535] { R3993 += 1, R3994 += 1 };
  s0 -> s3 [0, 65535] { R3994 += 1, R3943 += 1, R3944 += 1 };
  s0 -> s4 [65, 65] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s5 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s0 -> s6 [65, 65] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s7 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s0 -> s1 [66, 65535] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s0 -> s2 [66, 65535] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s1 -> s1 [0, 64] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s1 -> s2 [0, 64] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s1 -> s4 [65, 65] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s1 -> s5 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s1 -> s6 [65, 65] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s1 -> s7 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s1 -> s1 [66, 65535] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s1 -> s2 [66, 65535] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s2 -> s2 [0, 64] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R3994 += 1 };
  s2 -> s5 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s2 -> s7 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s2 -> s2 [66, 65535] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s1 [0, 64] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s3 -> s2 [0, 64] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s3 [0, 65535] { R3994 += 1, R3943 += 1, R3944 += 1 };
  s3 -> s4 [65, 65] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s3 -> s5 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s6 [65, 65] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s3 -> s7 [65, 65] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s3 -> s1 [66, 65535] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s3 -> s2 [66, 65535] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s5 -> s5 [0, 65535] { R3994 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R3994 += 1, R3944 += 1, R3903 += 1, R3904 += 1 };
  s6 -> s7 [0, 65535] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s7 -> s8 [0, 65535] { R3994 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R3994 += 1, R3944 += 1, R3904 += 1, R3905 += 1 };
  s8 -> s8 [0, 65535] { R3994 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3996 += 1, R3946 += 1 };
  s0 -> s0 [0, 65535] { R3995 += 1, R3996 += 1 };
  s0 -> s2 [0, 65535] { R3996 += 1, R3945 += 1, R3946 += 1 };
  s0 -> s3 [65, 65] { R3996 += 1, R3946 += 1 };
  s0 -> s4 [65, 65] { R3996 += 1, R3946 += 1 };
  s0 -> s1 [66, 65535] { R3996 += 1, R3946 += 1 };
  s1 -> s1 [0, 64] { R3996 += 1, R3946 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3996 += 1 };
  s1 -> s3 [65, 65] { R3996 += 1, R3946 += 1 };
  s1 -> s4 [65, 65] { R3996 += 1, R3946 += 1 };
  s1 -> s1 [66, 65535] { R3996 += 1, R3946 += 1 };
  s2 -> s1 [0, 64] { R3996 += 1, R3946 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3996 += 1, R3945 += 1, R3946 += 1 };
  s2 -> s3 [65, 65] { R3996 += 1, R3946 += 1 };
  s2 -> s4 [65, 65] { R3996 += 1, R3946 += 1 };
  s2 -> s1 [66, 65535] { R3996 += 1, R3946 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3996 += 1, R3946 += 1 };
  s3 -> s6 [0, 65535] { R3996 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3996 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3996 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3928 && R2 = R3996 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3909 = 0 && R3910 = R3928 && R3911 = 0 && R3912 = R3928 && R3913 = 0 && R3914 = R3928 && R3915 = 0 && R3916 = R3928 && R3917 = 0 && R3918 = R3928 && R3919 = 0 && R3920 = R3928 && R3921 = 0 && R3922 = R3928 && R3923 = 0 && R3924 = R3928 && R3925 = 0 && R3926 = R3928 && R3927 = 0 && R3931 = 0 && R3932 = 0 && R3935 = 0 && R3936 = 0 && R3939 = 0 && R3940 = 0 && R3943 = 0 && R3944 = 0 && R3947 = 10 && R3948 = R3996 && R3949 = 10 && R3950 = R3996 && R3951 = 10 && R3952 = R3996 && R3953 = 10 && R3954 = R3996 && R3955 = 10 && R3956 = R3996 && R3957 = 10 && R3958 = R3996 && R3959 = 10 && R3960 = R3996 && R3961 = 10 && R3962 = R3996 && R3963 = 10 && R3964 = R3996 && R3965 = 10 && R3966 = R3996 && R3967 = 10 && R3968 = R3996 && R3969 = 10 && R3970 = R3996 && R3971 = 10 && R3972 = R3996 && R3973 = 10 && R3974 = R3996 && R3975 = 10 && R3976 = R3996 && R3977 = 10 && R3978 = R3996 && R3979 = 10 && R3980 = R3996 && R3981 = 10 && R3982 = R3996 && R3983 = 10 && R3984 = R3996 && R3985 = 10 && R3986 = R3996 && R3987 = 10 && R3988 = R3996 && R3989 = 10 && R3990 = R3996 && R3991 = 10 && R3992 = R3996 && R3993 = 10 && R3994 = R3996 && R3995 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R3928 && 9 < R3996 && (R14 = 0 || (R3929 = 0 && R3930 = 0)) && (R14 = 0 || (R3933 = 0 && R3934 = 0)) && (R14 = 0 || (R3937 = 0 && R3938 = 0)) && (R14 = 0 || (R3941 = 0 && R3942 = 0)) && (R14 = 0 || (R3945 = 0 && R3946 = 0)) && (R3808 + R3805 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R3808 + R3805 = 0 || (R3806 + R3803 = 0 && R3807 + R3804 = 0)) && (R3908 + R3905 = 0 || (R3906 + R3903 = 0 && R3907 + R3904 = 0));
// End of Parikh automata intersection problem
