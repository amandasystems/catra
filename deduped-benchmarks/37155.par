// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R4091, R4092, R4093, R4094, R4095, R4096, R4097, R4098, R4099, R4100, R4101, R4102, R4103, R4104, R4105, R4106, R4107, R4108, R4109, R4110, R4111, R4112, R4113, R4114, R4115, R4116, R4117, R4118, R4119, R4120, R4121, R4122, R4123, R4124, R4125, R4126, R4127, R4128, R4129, R4130, R4131, R4132, R4133, R4134, R4135, R4136, R4137, R4138, R4139, R4140, R4141, R4142, R4143, R4144, R4145, R4146, R4147, R4148, R4149, R4150, R4151, R4152, R4153, R4154, R4155, R4156, R4157, R4158, R4159, R4160, R4161, R4162, R4163, R4164, R4165, R4166, R4167, R4168, R4169, R4170, R4171, R4172, R4173, R4174, R4175, R4176, R4177, R4178, R4179, R4180, R4181, R4182, R4183, R4184, R4185, R4186, R4187, R4188, R4189, R4190, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4142 += 1 };
  s0 -> s0 [0, 65535] { R4141 += 1, R4142 += 1 };
  s0 -> s1 [45, 45] { R4142 += 1 };
  s0 -> s2 [46, 46] { R4142 += 1 };
  s0 -> s1 [48, 62] { R4142 += 1 };
  s0 -> s3 [65, 65] { R4142 += 1 };
  s0 -> s1 [66, 65535] { R4142 += 1 };
  s1 -> s1 [0, 43] { R4142 += 1 };
  s1 -> s1 [45, 45] { R4142 += 1 };
  s1 -> s2 [46, 46] { R4142 += 1 };
  s1 -> s1 [48, 62] { R4142 += 1 };
  s1 -> s3 [65, 65] { R4142 += 1 };
  s1 -> s1 [66, 65535] { R4142 += 1 };
  s2 -> s1 [0, 43] { R4142 += 1 };
  s2 -> s1 [45, 45] { R4142 += 1 };
  s2 -> s2 [46, 46] { R4142 += 1 };
  s2 -> s1 [48, 62] { R4142 += 1 };
  s2 -> s3 [65, 65] { R4142 += 1 };
  s2 -> s1 [66, 114] { R4142 += 1 };
  s2 -> s8 [115, 115] { R4142 += 1 };
  s2 -> s1 [116, 65535] { R4142 += 1 };
  s3 -> s3 [0, 43] { R4142 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4142 += 1 };
  s3 -> s4 [46, 46] { R4142 += 1 };
  s3 -> s3 [48, 62] { R4142 += 1 };
  s3 -> s3 [65, 65535] { R4142 += 1 };
  s4 -> s3 [0, 43] { R4142 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4142 += 1 };
  s4 -> s4 [46, 46] { R4142 += 1 };
  s4 -> s3 [48, 62] { R4142 += 1 };
  s4 -> s3 [65, 114] { R4142 += 1 };
  s4 -> s5 [115, 115] { R4142 += 1 };
  s4 -> s3 [116, 65535] { R4142 += 1 };
  s5 -> s3 [0, 43] { R4142 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4142 += 1 };
  s5 -> s4 [46, 46] { R4142 += 1 };
  s5 -> s3 [48, 62] { R4142 += 1 };
  s5 -> s3 [65, 110] { R4142 += 1 };
  s5 -> s6 [111, 111] { R4142 += 1 };
  s5 -> s3 [112, 65535] { R4142 += 1 };
  s6 -> s3 [0, 43] { R4142 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4142 += 1 };
  s6 -> s4 [46, 46] { R4142 += 1 };
  s6 -> s3 [48, 62] { R4142 += 1 };
  s6 -> s3 [65, 98] { R4142 += 1 };
  s6 -> s7 [99, 99] { R4142 += 1 };
  s6 -> s3 [100, 65535] { R4142 += 1 };
  s7 -> s3 [0, 43] { R4142 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4142 += 1 };
  s7 -> s4 [46, 46] { R4142 += 1 };
  s7 -> s3 [48, 62] { R4142 += 1 };
  s7 -> s3 [65, 106] { R4142 += 1 };
  s7 -> s3 [108, 65535] { R4142 += 1 };
  s8 -> s1 [0, 43] { R4142 += 1 };
  s8 -> s1 [45, 45] { R4142 += 1 };
  s8 -> s2 [46, 46] { R4142 += 1 };
  s8 -> s1 [48, 62] { R4142 += 1 };
  s8 -> s3 [65, 65] { R4142 += 1 };
  s8 -> s1 [66, 110] { R4142 += 1 };
  s8 -> s9 [111, 111] { R4142 += 1 };
  s8 -> s1 [112, 65535] { R4142 += 1 };
  s9 -> s1 [0, 43] { R4142 += 1 };
  s9 -> s1 [45, 45] { R4142 += 1 };
  s9 -> s2 [46, 46] { R4142 += 1 };
  s9 -> s1 [48, 62] { R4142 += 1 };
  s9 -> s3 [65, 65] { R4142 += 1 };
  s9 -> s1 [66, 98] { R4142 += 1 };
  s9 -> s10 [99, 99] { R4142 += 1 };
  s9 -> s1 [100, 65535] { R4142 += 1 };
  s10 -> s1 [0, 43] { R4142 += 1 };
  s10 -> s1 [45, 45] { R4142 += 1 };
  s10 -> s2 [46, 46] { R4142 += 1 };
  s10 -> s1 [48, 62] { R4142 += 1 };
  s10 -> s3 [65, 65] { R4142 += 1 };
  s10 -> s1 [66, 106] { R4142 += 1 };
  s10 -> s1 [108, 65535] { R4142 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R4143 += 1, R4144 += 1 };
  s0 -> s1 [0, 65535] { R4144 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4144 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4146 += 1 };
  s0 -> s2 [0, 65535] { R4146 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4145 += 1, R4146 += 1 };
  s0 -> s3 [58, 58] { R4146 += 1 };
  s0 -> s1 [59, 65535] { R4146 += 1 };
  s1 -> s1 [0, 57] { R4146 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4146 += 1 };
  s1 -> s1 [59, 65535] { R4146 += 1 };
  s2 -> s1 [0, 57] { R4146 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4146 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4146 += 1 };
  s2 -> s1 [59, 65535] { R4146 += 1 };
  s3 -> s3 [0, 65535] { R4146 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4148 += 1 };
  s0 -> s2 [0, 65535] { R4148 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4147 += 1, R4148 += 1 };
  s0 -> s3 [65, 65] { R4148 += 1 };
  s0 -> s1 [66, 65535] { R4148 += 1 };
  s1 -> s1 [0, 64] { R4148 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4148 += 1 };
  s1 -> s1 [66, 65535] { R4148 += 1 };
  s2 -> s1 [0, 64] { R4148 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4148 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4148 += 1 };
  s2 -> s1 [66, 65535] { R4148 += 1 };
  s3 -> s3 [0, 65535] { R4148 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4150 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4149 += 1, R4150 += 1 };
  s0 -> s2 [0, 65535] { R4150 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R4150 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4150 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4150 += 1 };
  s1 -> s1 [0, 65535] { R4150 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R4150 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4150 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R4150 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4150 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4150 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4150 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4152 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R4152 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4151 += 1, R4152 += 1 };
  s1 -> s1 [0, 65535] { R4152 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R4152 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4152 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4152 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4152 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4154 += 1, R4104 += 1 };
  s0 -> s0 [0, 65535] { R4153 += 1, R4154 += 1 };
  s0 -> s2 [0, 65535] { R4154 += 1, R4103 += 1, R4104 += 1 };
  s0 -> s1 [66, 65535] { R4154 += 1, R4104 += 1 };
  s1 -> s1 [0, 64] { R4154 += 1, R4104 += 1 };
  s1 -> s1 [0, 65535] { R4154 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R4154 += 1, R4104 += 1 };
  s2 -> s1 [0, 64] { R4154 += 1, R4104 += 1 };
  s2 -> s2 [0, 65535] { R4154 += 1, R4103 += 1, R4104 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R4154 += 1, R4104 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4156 += 1, R4105 += 1, R4106 += 1 };
  s0 -> s2 [0, 65535] { R4156 += 1, R4106 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R4155 += 1, R4156 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4156 += 1, R4105 += 1, R4106 += 1 };
  s1 -> s2 [0, 65535] { R4156 += 1, R4106 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4156 += 1 };
  s2 -> s2 [0, 65535] { R4156 += 1, R4106 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4156 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4158 += 1, R4108 += 1 };
  s0 -> s0 [0, 65535] { R4157 += 1, R4158 += 1 };
  s0 -> s2 [0, 65535] { R4158 += 1, R4107 += 1, R4108 += 1 };
  s0 -> s1 [80, 65535] { R4158 += 1, R4108 += 1 };
  s1 -> s1 [0, 65] { R4158 += 1, R4108 += 1 };
  s1 -> s1 [0, 65535] { R4158 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4158 += 1, R4108 += 1 };
  s2 -> s1 [0, 65] { R4158 += 1, R4108 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4158 += 1, R4107 += 1, R4108 += 1 };
  s2 -> s1 [80, 65535] { R4158 += 1, R4108 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4160 += 1, R4109 += 1, R4110 += 1 };
  s0 -> s0 [0, 65535] { R4159 += 1, R4160 += 1 };
  s0 -> s2 [0, 65535] { R4160 += 1, R4110 += 1, R1770 += 1 };
  s1 -> s1 [0, 65535] { R4160 += 1, R4109 += 1, R4110 += 1 };
  s1 -> s2 [0, 65535] { R4160 += 1, R4110 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4160 += 1, R4110 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4160 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4160 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R4162 += 1, R4112 += 1 };
  s0 -> s2 [0, 65535] { R4162 += 1, R4111 += 1, R4112 += 1 };
  s0 -> s0 [0, 65535] { R4161 += 1, R4162 += 1 };
  s0 -> s1 [81, 65535] { R4162 += 1, R4112 += 1 };
  s1 -> s1 [0, 79] { R4162 += 1, R4112 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4162 += 1 };
  s1 -> s1 [81, 65535] { R4162 += 1, R4112 += 1 };
  s2 -> s1 [0, 79] { R4162 += 1, R4112 += 1 };
  s2 -> s2 [0, 65535] { R4162 += 1, R4111 += 1, R4112 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4162 += 1, R4112 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s0 -> s2 [0, 65535] { R4164 += 1, R4113 += 1, R4114 += 1 };
  s0 -> s0 [0, 65535] { R4163 += 1, R4164 += 1 };
  s0 -> s3 [0, 65535] { R4164 += 1, R4114 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s1 [81, 65535] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s1 -> s1 [0, 79] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4164 += 1 };
  s1 -> s1 [0, 65535] { R4164 += 1, R4114 += 1 };
  s1 -> s1 [81, 65535] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s2 -> s1 [0, 79] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4164 += 1, R4113 += 1, R4114 += 1 };
  s2 -> s3 [0, 65535] { R4164 += 1, R4114 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s1 [81, 65535] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s3 -> s1 [0, 79] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R4164 += 1 };
  s3 -> s3 [0, 65535] { R4164 += 1, R4114 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s1 [81, 65535] { R4164 += 1, R4114 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4164 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4166 += 1, R4116 += 1 };
  s0 -> s0 [0, 65535] { R4165 += 1, R4166 += 1 };
  s0 -> s2 [0, 65535] { R4166 += 1, R4115 += 1, R4116 += 1 };
  s1 -> s1 [0, 65535] { R4166 += 1, R4116 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4166 += 1 };
  s2 -> s1 [0, 65535] { R4166 += 1, R4116 += 1 };
  s2 -> s2 [0, 65535] { R4166 += 1, R4115 += 1, R4116 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4166 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4168 += 1, R4118 += 1 };
  s0 -> s2 [0, 65535] { R4168 += 1, R4117 += 1, R4118 += 1 };
  s0 -> s0 [0, 65535] { R4167 += 1, R4168 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4168 += 1 };
  s1 -> s1 [0, 65535] { R4168 += 1, R4118 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4168 += 1, R4118 += 1 };
  s2 -> s2 [0, 65535] { R4168 += 1, R4117 += 1, R4118 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4168 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4170 += 1, R4120 += 1, R4100 += 1, R4101 += 1 };
  s0 -> s0 [0, 65535] { R4169 += 1, R4170 += 1 };
  s0 -> s2 [0, 65535] { R4170 += 1, R4120 += 1, R4101 += 1, R4102 += 1 };
  s0 -> s3 [0, 65535] { R4170 += 1, R4119 += 1, R4120 += 1 };
  s1 -> s1 [0, 65535] { R4170 += 1, R4120 += 1, R4100 += 1, R4101 += 1 };
  s1 -> s5 [0, 65535] { R4170 += 1 };
  s1 -> s2 [0, 65535] { R4170 += 1, R4120 += 1, R4101 += 1, R4102 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4170 += 1 };
  s2 -> s2 [0, 65535] { R4170 += 1, R4120 += 1, R4101 += 1, R4102 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R4170 += 1, R4120 += 1 };
  s3 -> s1 [0, 65535] { R4170 += 1, R4120 += 1, R4100 += 1, R4101 += 1 };
  s3 -> s2 [0, 65535] { R4170 += 1, R4120 += 1, R4101 += 1, R4102 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4170 += 1, R4119 += 1, R4120 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4170 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4170 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4170 += 1, R4120 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4172 += 1, R4121 += 1, R4122 += 1 };
  s0 -> s0 [0, 65535] { R4171 += 1, R4172 += 1 };
  s0 -> s2 [0, 65535] { R4172 += 1, R4122 += 1 };
  s1 -> s1 [0, 65535] { R4172 += 1, R4121 += 1, R4122 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4172 += 1, R4122 += 1 };
  s2 -> s3 [0, 65535] { R4172 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4172 += 1, R4122 += 1 };
  s3 -> s3 [0, 65535] { R4172 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4174 += 1, R4123 += 1, R4124 += 1 };
  s0 -> s0 [0, 65535] { R4173 += 1, R4174 += 1 };
  s0 -> s2 [0, 65535] { R4174 += 1, R4124 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4174 += 1, R4123 += 1, R4124 += 1 };
  s1 -> s2 [0, 65535] { R4174 += 1, R4124 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4174 += 1 };
  s2 -> s2 [0, 65535] { R4174 += 1, R4124 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4174 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4176 += 1, R4126 += 1 };
  s0 -> s2 [0, 65535] { R4176 += 1, R4125 += 1, R4126 += 1 };
  s0 -> s0 [0, 65535] { R4175 += 1, R4176 += 1 };
  s0 -> s3 [65, 65] { R4176 += 1, R4126 += 1 };
  s0 -> s4 [65, 65] { R4176 += 1, R4126 += 1 };
  s0 -> s5 [80, 80] { R4176 += 1, R4126 += 1 };
  s0 -> s1 [81, 65535] { R4176 += 1, R4126 += 1 };
  s1 -> s1 [0, 64] { R4176 += 1, R4126 += 1 };
  s1 -> s3 [65, 65] { R4176 += 1, R4126 += 1 };
  s1 -> s4 [65, 65] { R4176 += 1, R4126 += 1 };
  s1 -> s5 [80, 80] { R4176 += 1, R4126 += 1 };
  s1 -> s1 [81, 65535] { R4176 += 1, R4126 += 1 };
  s2 -> s1 [0, 64] { R4176 += 1, R4126 += 1 };
  s2 -> s2 [0, 65535] { R4176 += 1, R4125 += 1, R4126 += 1 };
  s2 -> s3 [65, 65] { R4176 += 1, R4126 += 1 };
  s2 -> s4 [65, 65] { R4176 += 1, R4126 += 1 };
  s2 -> s5 [80, 80] { R4176 += 1, R4126 += 1 };
  s2 -> s1 [81, 65535] { R4176 += 1, R4126 += 1 };
  s4 -> s4 [0, 65] { R4176 += 1, R4126 += 1 };
  s4 -> s8 [80, 80] { R4176 += 1, R4126 += 1 };
  s4 -> s4 [81, 65535] { R4176 += 1, R4126 += 1 };
  s5 -> s5 [0, 64] { R4176 += 1, R4126 += 1 };
  s5 -> s5 [0, 65535] { R4176 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4176 += 1, R4126 += 1 };
  s5 -> s8 [65, 65] { R4176 += 1, R4126 += 1 };
  s5 -> s5 [80, 65535] { R4176 += 1, R4126 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4176 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R4176 += 1, R4126 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4176 += 1 };
  s8 -> s8 [80, 65535] { R4176 += 1, R4126 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R4178 += 1, R4127 += 1, R4128 += 1 };
  s0 -> s0 [0, 65535] { R4177 += 1, R4178 += 1 };
  s0 -> s3 [65, 65] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R4178 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4178 += 1, R4127 += 1, R4128 += 1 };
  s2 -> s3 [65, 65] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R4178 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4178 += 1 };
  s4 -> s4 [0, 65535] { R4178 += 1, R4128 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4178 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4180 += 1, R4130 += 1 };
  s0 -> s2 [0, 64] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s0 -> s3 [0, 65535] { R4180 += 1, R4129 += 1, R4130 += 1 };
  s0 -> s0 [0, 65535] { R4179 += 1, R4180 += 1 };
  s0 -> s4 [65, 65] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R4180 += 1, R4130 += 1 };
  s0 -> s6 [65, 65] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R4180 += 1, R4130 += 1 };
  s0 -> s1 [66, 79] { R4180 += 1, R4130 += 1 };
  s0 -> s2 [66, 65535] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R4180 += 1, R4130 += 1 };
  s1 -> s1 [0, 64] { R4180 += 1, R4130 += 1 };
  s1 -> s1 [0, 65535] { R4180 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R4180 += 1, R4130 += 1 };
  s1 -> s7 [65, 65] { R4180 += 1, R4130 += 1 };
  s1 -> s1 [66, 79] { R4180 += 1, R4130 += 1 };
  s1 -> s1 [81, 65535] { R4180 += 1, R4130 += 1 };
  s2 -> s1 [0, 64] { R4180 += 1, R4130 += 1 };
  s2 -> s2 [0, 64] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R4180 += 1, R4130 += 1 };
  s2 -> s6 [65, 65] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s2 -> s7 [65, 65] { R4180 += 1, R4130 += 1 };
  s2 -> s1 [66, 79] { R4180 += 1, R4130 += 1 };
  s2 -> s2 [66, 65535] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R4180 += 1, R4130 += 1 };
  s3 -> s1 [0, 64] { R4180 += 1, R4130 += 1 };
  s3 -> s2 [0, 64] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4180 += 1, R4129 += 1, R4130 += 1 };
  s3 -> s4 [65, 65] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R4180 += 1, R4130 += 1 };
  s3 -> s6 [65, 65] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R4180 += 1, R4130 += 1 };
  s3 -> s1 [66, 79] { R4180 += 1, R4130 += 1 };
  s3 -> s2 [66, 65535] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R4180 += 1, R4130 += 1 };
  s5 -> s5 [0, 79] { R4180 += 1, R4130 += 1 };
  s5 -> s5 [0, 65535] { R4180 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [81, 65535] { R4180 += 1, R4130 += 1 };
  s6 -> s5 [0, 79] { R4180 += 1, R4130 += 1 };
  s6 -> s6 [0, 65535] { R4180 += 1, R4130 += 1, R3509 += 1 };
  s6 -> s5 [81, 65535] { R4180 += 1, R4130 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4180 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s0 [0, 65535] { R4181 += 1, R4182 += 1 };
  s0 -> s2 [0, 65535] { R4182 += 1, R4131 += 1, R4132 += 1 };
  s0 -> s3 [65, 65] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4182 += 1 };
  s1 -> s3 [65, 65] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4182 += 1, R4131 += 1, R4132 += 1 };
  s2 -> s3 [65, 65] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4182 += 1 };
  s3 -> s3 [0, 65535] { R4182 += 1, R4132 += 1, R3511 += 1, R3512 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4182 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4182 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s2 [0, 64] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s3 [0, 65535] { R4184 += 1, R4133 += 1, R4134 += 1 };
  s0 -> s0 [0, 65535] { R4183 += 1, R4184 += 1 };
  s0 -> s4 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s5 [65, 65] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s6 [65, 65] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s7 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s1 [66, 65535] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s2 [66, 65535] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s1 [0, 64] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s2 [0, 64] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s4 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s5 [65, 65] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s6 [65, 65] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s7 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s1 [66, 65535] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s2 [66, 65535] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s2 [0, 64] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s11 [0, 64] { R4184 += 1, R4134 += 1 };
  s2 -> s4 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s8 [65, 65] { R4184 += 1, R4134 += 1 };
  s2 -> s12 [65, 65] { R4184 += 1, R4134 += 1 };
  s2 -> s7 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s2 [66, 65535] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s11 [66, 65535] { R4184 += 1, R4134 += 1 };
  s3 -> s1 [0, 64] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s2 [0, 64] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s3 [0, 65535] { R4184 += 1, R4133 += 1, R4134 += 1 };
  s3 -> s4 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s5 [65, 65] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s6 [65, 65] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s7 [65, 65] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s1 [66, 65535] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s2 [66, 65535] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s4 -> s4 [0, 65535] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s4 -> s8 [0, 65535] { R4184 += 1, R4134 += 1 };
  s6 -> s4 [0, 65535] { R4184 += 1, R4134 += 1, R4092 += 1, R4093 += 1 };
  s6 -> s6 [0, 65535] { R4184 += 1, R4134 += 1, R4091 += 1, R4092 += 1 };
  s8 -> s9 [0, 65535] { R4184 += 1 };
  s8 -> s8 [0, 65535] { R4184 += 1, R4134 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R4184 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R4184 += 1, R4134 += 1 };
  s11 -> s11 [0, 65535] { R4184 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R4184 += 1, R4134 += 1 };
  s11 -> s12 [65, 65] { R4184 += 1, R4134 += 1 };
  s11 -> s11 [66, 65535] { R4184 += 1, R4134 += 1 };
  s12 -> s12 [0, 65535] { R4184 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4186 += 1, R4136 += 1 };
  s0 -> s0 [0, 65535] { R4185 += 1, R4186 += 1 };
  s0 -> s2 [0, 65535] { R4186 += 1, R4135 += 1, R4136 += 1 };
  s0 -> s3 [65, 65] { R4186 += 1, R4136 += 1 };
  s0 -> s4 [65, 65] { R4186 += 1, R4136 += 1 };
  s0 -> s1 [66, 65535] { R4186 += 1, R4136 += 1 };
  s1 -> s1 [0, 64] { R4186 += 1, R4136 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4186 += 1 };
  s1 -> s3 [65, 65] { R4186 += 1, R4136 += 1 };
  s1 -> s4 [65, 65] { R4186 += 1, R4136 += 1 };
  s1 -> s1 [66, 65535] { R4186 += 1, R4136 += 1 };
  s2 -> s1 [0, 64] { R4186 += 1, R4136 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4186 += 1, R4135 += 1, R4136 += 1 };
  s2 -> s3 [65, 65] { R4186 += 1, R4136 += 1 };
  s2 -> s4 [65, 65] { R4186 += 1, R4136 += 1 };
  s2 -> s1 [66, 65535] { R4186 += 1, R4136 += 1 };
  s3 -> s3 [0, 65535] { R4186 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4186 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4186 += 1, R4136 += 1 };
  s5 -> s5 [0, 65535] { R4186 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s0 -> s0 [0, 65535] { R4187 += 1, R4188 += 1 };
  s0 -> s2 [0, 65535] { R4188 += 1, R4137 += 1, R4138 += 1 };
  s0 -> s3 [65, 65] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s0 -> s4 [65, 65] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s0 -> s1 [66, 65535] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s1 -> s1 [0, 64] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4188 += 1 };
  s1 -> s3 [65, 65] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s1 -> s4 [65, 65] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s1 -> s1 [66, 65535] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s2 -> s1 [0, 64] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4188 += 1, R4137 += 1, R4138 += 1 };
  s2 -> s3 [65, 65] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s2 -> s4 [65, 65] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s2 -> s1 [66, 65535] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s3 -> s3 [0, 65535] { R4188 += 1, R4138 += 1, R4097 += 1, R4098 += 1 };
  s3 -> s6 [0, 65535] { R4188 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4188 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4188 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4190 += 1, R4140 += 1 };
  s0 -> s2 [0, 65535] { R4190 += 1, R4139 += 1, R4140 += 1 };
  s0 -> s0 [0, 65535] { R4189 += 1, R4190 += 1 };
  s0 -> s3 [65, 65] { R4190 += 1, R4140 += 1 };
  s0 -> s4 [65, 65] { R4190 += 1, R4140 += 1 };
  s0 -> s1 [66, 65535] { R4190 += 1, R4140 += 1 };
  s1 -> s1 [0, 64] { R4190 += 1, R4140 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4190 += 1 };
  s1 -> s3 [65, 65] { R4190 += 1, R4140 += 1 };
  s1 -> s4 [65, 65] { R4190 += 1, R4140 += 1 };
  s1 -> s1 [66, 65535] { R4190 += 1, R4140 += 1 };
  s2 -> s1 [0, 64] { R4190 += 1, R4140 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4190 += 1, R4139 += 1, R4140 += 1 };
  s2 -> s3 [65, 65] { R4190 += 1, R4140 += 1 };
  s2 -> s4 [65, 65] { R4190 += 1, R4140 += 1 };
  s2 -> s1 [66, 65535] { R4190 += 1, R4140 += 1 };
  s3 -> s3 [0, 65535] { R4190 += 1, R4140 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4190 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4190 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4190 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4122 && R2 = R4190 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4103 = 0 && R4104 = R4122 && R4105 = 0 && R4106 = R4122 && R4107 = 0 && R4108 = R4122 && R4109 = 0 && R4110 = R4122 && R4111 = 0 && R4112 = R4122 && R4113 = 0 && R4114 = R4122 && R4115 = 0 && R4116 = R4122 && R4117 = 0 && R4118 = R4122 && R4119 = 0 && R4120 = R4122 && R4121 = 0 && R4125 = 0 && R4126 = 0 && R4129 = 0 && R4130 = 0 && R4133 = 0 && R4134 = 0 && R4141 = 10 && R4142 = R4190 && R4143 = 10 && R4144 = R4190 && R4145 = 10 && R4146 = R4190 && R4147 = 10 && R4148 = R4190 && R4149 = 10 && R4150 = R4190 && R4151 = 10 && R4152 = R4190 && R4153 = 10 && R4154 = R4190 && R4155 = 10 && R4156 = R4190 && R4157 = 10 && R4158 = R4190 && R4159 = 10 && R4160 = R4190 && R4161 = 10 && R4162 = R4190 && R4163 = 10 && R4164 = R4190 && R4165 = 10 && R4166 = R4190 && R4167 = 10 && R4168 = R4190 && R4169 = 10 && R4170 = R4190 && R4171 = 10 && R4172 = R4190 && R4173 = 10 && R4174 = R4190 && R4175 = 10 && R4176 = R4190 && R4177 = 10 && R4178 = R4190 && R4179 = 10 && R4180 = R4190 && R4181 = 10 && R4182 = R4190 && R4183 = 10 && R4184 = R4190 && R4185 = 10 && R4186 = R4190 && R4187 = 10 && R4188 = R4190 && R4189 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4122 && 9 < R4190 && (R14 = 0 || (R4123 = 0 && R4124 = 0)) && (R14 = 0 || (R4127 = 0 && R4128 = 0)) && (R14 = 0 || (R4131 = 0 && R4132 = 0)) && (R14 = 0 || (R4135 = 0 && R4136 = 0)) && (R14 = 0 || (R4137 = 0 && R4138 = 0)) && (R14 = 0 || (R4139 = 0 && R4140 = 0)) && (R4096 + R4093 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R4096 + R4093 = 0 || (R4094 + R4091 = 0 && R4095 + R4092 = 0)) && (R4102 + R4099 = 0 || (R4100 + R4097 = 0 && R4101 + R4098 = 0));
// End of Parikh automata intersection problem
