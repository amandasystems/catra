// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4959, R4960, R4961, R4962, R4963, R4964, R5153, R5154, R5155, R5156, R5157, R5158, R5159, R5160, R5161, R5162, R5163, R5164, R5165, R5166, R5167, R5168, R5169, R5170, R5171, R5172, R5173, R5174, R5175, R5176, R5177, R5178, R5179, R5180, R5181, R5182, R5183, R5184, R5185, R5186, R5187, R5188, R5189, R5190, R5191, R5192, R5193, R5194, R5195, R5196, R5197, R5198, R5199, R5200, R5201, R5202, R5203, R5204, R5205, R5206, R5207, R5208, R5209, R5210, R5211, R5212, R5213, R5214, R5215, R5216, R5217, R5218, R5219, R5220, R5221, R5222, R5223, R5224, R5225, R5226, R5227, R5228, R5229, R5230, R5231, R5232, R5233, R5234, R5235, R5236, R5237, R5238, R5239, R5240, R5241, R5242, R5243, R5244, R5245, R5246, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R5198 += 1 };
  s0 -> s0 [0, 65535] { R5197 += 1, R5198 += 1 };
  s0 -> s1 [45, 45] { R5198 += 1 };
  s0 -> s2 [46, 46] { R5198 += 1 };
  s0 -> s1 [48, 62] { R5198 += 1 };
  s0 -> s3 [65, 65] { R5198 += 1 };
  s0 -> s1 [66, 65535] { R5198 += 1 };
  s1 -> s1 [0, 43] { R5198 += 1 };
  s1 -> s1 [45, 45] { R5198 += 1 };
  s1 -> s2 [46, 46] { R5198 += 1 };
  s1 -> s1 [48, 62] { R5198 += 1 };
  s1 -> s3 [65, 65] { R5198 += 1 };
  s1 -> s1 [66, 65535] { R5198 += 1 };
  s2 -> s1 [0, 43] { R5198 += 1 };
  s2 -> s1 [45, 45] { R5198 += 1 };
  s2 -> s2 [46, 46] { R5198 += 1 };
  s2 -> s1 [48, 62] { R5198 += 1 };
  s2 -> s3 [65, 65] { R5198 += 1 };
  s2 -> s1 [66, 114] { R5198 += 1 };
  s2 -> s8 [115, 115] { R5198 += 1 };
  s2 -> s1 [116, 65535] { R5198 += 1 };
  s3 -> s3 [0, 43] { R5198 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5198 += 1 };
  s3 -> s4 [46, 46] { R5198 += 1 };
  s3 -> s3 [48, 62] { R5198 += 1 };
  s3 -> s3 [65, 65535] { R5198 += 1 };
  s4 -> s3 [0, 43] { R5198 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5198 += 1 };
  s4 -> s4 [46, 46] { R5198 += 1 };
  s4 -> s3 [48, 62] { R5198 += 1 };
  s4 -> s3 [65, 114] { R5198 += 1 };
  s4 -> s5 [115, 115] { R5198 += 1 };
  s4 -> s3 [116, 65535] { R5198 += 1 };
  s5 -> s3 [0, 43] { R5198 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5198 += 1 };
  s5 -> s4 [46, 46] { R5198 += 1 };
  s5 -> s3 [48, 62] { R5198 += 1 };
  s5 -> s3 [65, 110] { R5198 += 1 };
  s5 -> s6 [111, 111] { R5198 += 1 };
  s5 -> s3 [112, 65535] { R5198 += 1 };
  s6 -> s3 [0, 43] { R5198 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5198 += 1 };
  s6 -> s4 [46, 46] { R5198 += 1 };
  s6 -> s3 [48, 62] { R5198 += 1 };
  s6 -> s3 [65, 98] { R5198 += 1 };
  s6 -> s7 [99, 99] { R5198 += 1 };
  s6 -> s3 [100, 65535] { R5198 += 1 };
  s7 -> s3 [0, 43] { R5198 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5198 += 1 };
  s7 -> s4 [46, 46] { R5198 += 1 };
  s7 -> s3 [48, 62] { R5198 += 1 };
  s7 -> s3 [65, 106] { R5198 += 1 };
  s7 -> s3 [108, 65535] { R5198 += 1 };
  s8 -> s1 [0, 43] { R5198 += 1 };
  s8 -> s1 [45, 45] { R5198 += 1 };
  s8 -> s2 [46, 46] { R5198 += 1 };
  s8 -> s1 [48, 62] { R5198 += 1 };
  s8 -> s3 [65, 65] { R5198 += 1 };
  s8 -> s1 [66, 110] { R5198 += 1 };
  s8 -> s9 [111, 111] { R5198 += 1 };
  s8 -> s1 [112, 65535] { R5198 += 1 };
  s9 -> s1 [0, 43] { R5198 += 1 };
  s9 -> s1 [45, 45] { R5198 += 1 };
  s9 -> s2 [46, 46] { R5198 += 1 };
  s9 -> s1 [48, 62] { R5198 += 1 };
  s9 -> s3 [65, 65] { R5198 += 1 };
  s9 -> s1 [66, 98] { R5198 += 1 };
  s9 -> s10 [99, 99] { R5198 += 1 };
  s9 -> s1 [100, 65535] { R5198 += 1 };
  s10 -> s1 [0, 43] { R5198 += 1 };
  s10 -> s1 [45, 45] { R5198 += 1 };
  s10 -> s2 [46, 46] { R5198 += 1 };
  s10 -> s1 [48, 62] { R5198 += 1 };
  s10 -> s3 [65, 65] { R5198 += 1 };
  s10 -> s1 [66, 106] { R5198 += 1 };
  s10 -> s1 [108, 65535] { R5198 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R5200 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5199 += 1, R5200 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R5200 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R5202 += 1 };
  s0 -> s2 [0, 65535] { R5202 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R5201 += 1, R5202 += 1 };
  s0 -> s3 [58, 58] { R5202 += 1 };
  s0 -> s1 [59, 65535] { R5202 += 1 };
  s1 -> s1 [0, 57] { R5202 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5202 += 1 };
  s1 -> s1 [59, 65535] { R5202 += 1 };
  s2 -> s1 [0, 57] { R5202 += 1 };
  s2 -> s2 [0, 65535] { R5202 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R5202 += 1 };
  s2 -> s1 [59, 65535] { R5202 += 1 };
  s3 -> s3 [0, 65535] { R5202 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R5204 += 1 };
  s0 -> s2 [0, 65535] { R5204 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R5203 += 1, R5204 += 1 };
  s0 -> s3 [65, 65] { R5204 += 1 };
  s0 -> s1 [66, 65535] { R5204 += 1 };
  s1 -> s1 [0, 64] { R5204 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5204 += 1 };
  s1 -> s1 [66, 65535] { R5204 += 1 };
  s2 -> s1 [0, 64] { R5204 += 1 };
  s2 -> s2 [0, 65535] { R5204 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R5204 += 1 };
  s2 -> s1 [66, 65535] { R5204 += 1 };
  s3 -> s3 [0, 65535] { R5204 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R5206 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R5205 += 1, R5206 += 1 };
  s0 -> s2 [0, 65535] { R5206 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R5206 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R5206 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R5206 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R5206 += 1 };
  s2 -> s1 [0, 90] { R5206 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5206 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R5206 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R5206 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R5206 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5206 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R5208 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R5207 += 1, R5208 += 1 };
  s0 -> s2 [0, 65535] { R5208 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R5208 += 1 };
  s1 -> s1 [0, 65535] { R5208 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5208 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R5208 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5208 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R5210 += 1, R5160 += 1 };
  s0 -> s0 [0, 65535] { R5209 += 1, R5210 += 1 };
  s0 -> s2 [0, 65535] { R5210 += 1, R5159 += 1, R5160 += 1 };
  s0 -> s1 [66, 65535] { R5210 += 1, R5160 += 1 };
  s1 -> s1 [0, 64] { R5210 += 1, R5160 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5210 += 1 };
  s1 -> s1 [66, 65535] { R5210 += 1, R5160 += 1 };
  s2 -> s1 [0, 64] { R5210 += 1, R5160 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5210 += 1, R5159 += 1, R5160 += 1 };
  s2 -> s1 [66, 65535] { R5210 += 1, R5160 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R5212 += 1, R5161 += 1, R5162 += 1 };
  s0 -> s0 [0, 65535] { R5211 += 1, R5212 += 1 };
  s0 -> s2 [0, 65535] { R5212 += 1, R5162 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R5212 += 1, R5161 += 1, R5162 += 1 };
  s1 -> s2 [0, 65535] { R5212 += 1, R5162 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5212 += 1 };
  s2 -> s2 [0, 65535] { R5212 += 1, R5162 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5212 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R5214 += 1, R5164 += 1 };
  s0 -> s0 [0, 65535] { R5213 += 1, R5214 += 1 };
  s0 -> s2 [0, 65535] { R5214 += 1, R5163 += 1, R5164 += 1 };
  s0 -> s1 [80, 65535] { R5214 += 1, R5164 += 1 };
  s1 -> s1 [0, 65] { R5214 += 1, R5164 += 1 };
  s1 -> s1 [0, 65535] { R5214 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R5214 += 1, R5164 += 1 };
  s2 -> s1 [0, 65] { R5214 += 1, R5164 += 1 };
  s2 -> s2 [0, 65535] { R5214 += 1, R5163 += 1, R5164 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R5214 += 1, R5164 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R5215 += 1, R5216 += 1 };
  s0 -> s1 [0, 65535] { R5216 += 1, R5166 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R5216 += 1, R5165 += 1, R5166 += 1 };
  s1 -> s1 [0, 65535] { R5216 += 1, R5166 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5216 += 1 };
  s2 -> s1 [0, 65535] { R5216 += 1, R5166 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R5216 += 1, R5165 += 1, R5166 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5216 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R5218 += 1, R5168 += 1 };
  s0 -> s2 [0, 65535] { R5218 += 1, R5167 += 1, R5168 += 1 };
  s0 -> s0 [0, 65535] { R5217 += 1, R5218 += 1 };
  s0 -> s1 [81, 65535] { R5218 += 1, R5168 += 1 };
  s1 -> s1 [0, 79] { R5218 += 1, R5168 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5218 += 1 };
  s1 -> s1 [81, 65535] { R5218 += 1, R5168 += 1 };
  s2 -> s1 [0, 79] { R5218 += 1, R5168 += 1 };
  s2 -> s2 [0, 65535] { R5218 += 1, R5167 += 1, R5168 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R5218 += 1, R5168 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R5220 += 1, R5170 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R5219 += 1, R5220 += 1 };
  s0 -> s2 [0, 65535] { R5220 += 1, R5169 += 1, R5170 += 1 };
  s0 -> s1 [0, 65535] { R5220 += 1, R5170 += 1 };
  s0 -> s1 [81, 65535] { R5220 += 1, R5170 += 1, R4382 += 1 };
  s1 -> s1 [0, 79] { R5220 += 1, R5170 += 1, R4382 += 1 };
  s1 -> s4 [0, 65535] { R5220 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5220 += 1, R5170 += 1 };
  s1 -> s1 [81, 65535] { R5220 += 1, R5170 += 1, R4382 += 1 };
  s2 -> s1 [0, 79] { R5220 += 1, R5170 += 1, R4382 += 1 };
  s2 -> s2 [0, 65535] { R5220 += 1, R5169 += 1, R5170 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5220 += 1, R5170 += 1 };
  s2 -> s1 [81, 65535] { R5220 += 1, R5170 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5220 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R5222 += 1, R5171 += 1, R5172 += 1 };
  s0 -> s2 [0, 65535] { R5222 += 1, R5172 += 1 };
  s0 -> s0 [0, 65535] { R5221 += 1, R5222 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5222 += 1, R5171 += 1, R5172 += 1 };
  s1 -> s2 [0, 65535] { R5222 += 1, R5172 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5222 += 1 };
  s2 -> s2 [0, 65535] { R5222 += 1, R5172 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5222 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R5224 += 1, R5174 += 1 };
  s0 -> s2 [0, 65535] { R5224 += 1, R5173 += 1, R5174 += 1 };
  s0 -> s0 [0, 65535] { R5223 += 1, R5224 += 1 };
  s1 -> s1 [0, 65535] { R5224 += 1, R5174 += 1 };
  s1 -> s4 [0, 65535] { R5224 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5224 += 1, R5174 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5224 += 1, R5173 += 1, R5174 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5224 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R5225 += 1, R5226 += 1 };
  s0 -> s1 [0, 65535] { R5226 += 1, R5176 += 1 };
  s0 -> s2 [0, 65535] { R5226 += 1, R5175 += 1, R5176 += 1 };
  s1 -> s4 [0, 65535] { R5226 += 1 };
  s1 -> s1 [0, 65535] { R5226 += 1, R5176 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5226 += 1, R5176 += 1 };
  s2 -> s2 [0, 65535] { R5226 += 1, R5175 += 1, R5176 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5226 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R5228 += 1, R5178 += 1 };
  s0 -> s2 [0, 65535] { R5228 += 1, R5177 += 1, R5178 += 1 };
  s0 -> s0 [0, 65535] { R5227 += 1, R5228 += 1 };
  s1 -> s1 [0, 65535] { R5228 += 1, R5178 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5228 += 1 };
  s2 -> s1 [0, 65535] { R5228 += 1, R5178 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5228 += 1, R5177 += 1, R5178 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5228 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R5229 += 1, R5230 += 1 };
  s0 -> s1 [0, 65535] { R5230 += 1, R5179 += 1, R5180 += 1 };
  s0 -> s2 [0, 65535] { R5230 += 1, R5180 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5230 += 1, R5179 += 1, R5180 += 1 };
  s1 -> s2 [0, 65535] { R5230 += 1, R5180 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5230 += 1 };
  s2 -> s2 [0, 65535] { R5230 += 1, R5180 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5230 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R5232 += 1, R5182 += 1 };
  s0 -> s0 [0, 65535] { R5231 += 1, R5232 += 1 };
  s0 -> s2 [0, 65535] { R5232 += 1, R5181 += 1, R5182 += 1 };
  s0 -> s3 [65, 65] { R5232 += 1, R5182 += 1 };
  s0 -> s4 [65, 65] { R5232 += 1, R5182 += 1 };
  s0 -> s5 [80, 80] { R5232 += 1, R5182 += 1 };
  s0 -> s1 [81, 65535] { R5232 += 1, R5182 += 1 };
  s1 -> s1 [0, 64] { R5232 += 1, R5182 += 1 };
  s1 -> s3 [65, 65] { R5232 += 1, R5182 += 1 };
  s1 -> s4 [65, 65] { R5232 += 1, R5182 += 1 };
  s1 -> s5 [80, 80] { R5232 += 1, R5182 += 1 };
  s1 -> s1 [81, 65535] { R5232 += 1, R5182 += 1 };
  s2 -> s1 [0, 64] { R5232 += 1, R5182 += 1 };
  s2 -> s2 [0, 65535] { R5232 += 1, R5181 += 1, R5182 += 1 };
  s2 -> s3 [65, 65] { R5232 += 1, R5182 += 1 };
  s2 -> s4 [65, 65] { R5232 += 1, R5182 += 1 };
  s2 -> s5 [80, 80] { R5232 += 1, R5182 += 1 };
  s2 -> s1 [81, 65535] { R5232 += 1, R5182 += 1 };
  s4 -> s4 [0, 65] { R5232 += 1, R5182 += 1 };
  s4 -> s7 [80, 80] { R5232 += 1, R5182 += 1 };
  s4 -> s4 [81, 65535] { R5232 += 1, R5182 += 1 };
  s5 -> s5 [0, 64] { R5232 += 1, R5182 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5232 += 1 };
  s5 -> s7 [65, 65] { R5232 += 1, R5182 += 1 };
  s5 -> s8 [65, 65] { R5232 += 1, R5182 += 1 };
  s5 -> s5 [80, 65535] { R5232 += 1, R5182 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R5232 += 1, R5182 += 1 };
  s7 -> s7 [0, 65535] { R5232 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R5232 += 1, R5182 += 1 };
  s8 -> s8 [0, 65535] { R5232 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R5234 += 1, R5183 += 1, R5184 += 1 };
  s0 -> s0 [0, 65535] { R5233 += 1, R5234 += 1 };
  s0 -> s3 [65, 65] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5234 += 1 };
  s1 -> s3 [65, 65] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5234 += 1, R5183 += 1, R5184 += 1 };
  s2 -> s3 [65, 65] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5234 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5234 += 1 };
  s4 -> s4 [0, 65535] { R5234 += 1, R5184 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5234 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s0 -> s2 [0, 64] { R5236 += 1, R5186 += 1 };
  s0 -> s3 [0, 65535] { R5236 += 1, R5185 += 1, R5186 += 1 };
  s0 -> s0 [0, 65535] { R5235 += 1, R5236 += 1 };
  s0 -> s4 [65, 65] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R5236 += 1, R5186 += 1 };
  s0 -> s7 [65, 65] { R5236 += 1, R5186 += 1 };
  s0 -> s2 [66, 79] { R5236 += 1, R5186 += 1 };
  s0 -> s1 [66, 65535] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s0 -> s2 [81, 65535] { R5236 += 1, R5186 += 1 };
  s1 -> s1 [0, 64] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s1 -> s2 [0, 64] { R5236 += 1, R5186 += 1 };
  s1 -> s4 [65, 65] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s1 -> s5 [65, 65] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s1 -> s6 [65, 65] { R5236 += 1, R5186 += 1 };
  s1 -> s7 [65, 65] { R5236 += 1, R5186 += 1 };
  s1 -> s2 [66, 79] { R5236 += 1, R5186 += 1 };
  s1 -> s1 [66, 65535] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s1 -> s2 [81, 65535] { R5236 += 1, R5186 += 1 };
  s2 -> s2 [0, 64] { R5236 += 1, R5186 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5236 += 1 };
  s2 -> s6 [65, 65] { R5236 += 1, R5186 += 1 };
  s2 -> s7 [65, 65] { R5236 += 1, R5186 += 1 };
  s2 -> s2 [66, 79] { R5236 += 1, R5186 += 1 };
  s2 -> s2 [81, 65535] { R5236 += 1, R5186 += 1 };
  s3 -> s1 [0, 64] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s3 -> s2 [0, 64] { R5236 += 1, R5186 += 1 };
  s3 -> s3 [0, 65535] { R5236 += 1, R5185 += 1, R5186 += 1 };
  s3 -> s4 [65, 65] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R5236 += 1, R5186 += 1 };
  s3 -> s7 [65, 65] { R5236 += 1, R5186 += 1 };
  s3 -> s2 [66, 79] { R5236 += 1, R5186 += 1 };
  s3 -> s1 [66, 65535] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s3 -> s2 [81, 65535] { R5236 += 1, R5186 += 1 };
  s5 -> s7 [0, 79] { R5236 += 1, R5186 += 1 };
  s5 -> s5 [0, 65535] { R5236 += 1, R5186 += 1, R3509 += 1 };
  s5 -> s7 [81, 65535] { R5236 += 1, R5186 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5236 += 1 };
  s7 -> s7 [0, 79] { R5236 += 1, R5186 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R5236 += 1 };
  s7 -> s7 [81, 65535] { R5236 += 1, R5186 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s6, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R5238 += 1, R5187 += 1, R5188 += 1 };
  s0 -> s0 [0, 65535] { R5237 += 1, R5238 += 1 };
  s0 -> s4 [65, 65] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [66, 79] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s0 -> s1 [66, 65535] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [81, 65535] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [0, 64] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s1 -> s4 [65, 65] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s1 -> s5 [65, 65] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s6 [65, 65] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s1 -> s7 [65, 65] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [66, 79] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [81, 65535] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5238 += 1 };
  s2 -> s4 [65, 65] { R5238 += 1, R5188 += 1 };
  s2 -> s6 [65, 65] { R5238 += 1, R5188 += 1 };
  s2 -> s2 [66, 79] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R5238 += 1, R5188 += 1 };
  s2 -> s2 [81, 65535] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R5238 += 1, R5187 += 1, R5188 += 1 };
  s3 -> s4 [65, 65] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [66, 79] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s3 -> s1 [66, 65535] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [81, 65535] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s4 -> s4 [0, 79] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R5238 += 1, R5188 += 1 };
  s4 -> s9 [0, 65535] { R5238 += 1 };
  s4 -> s4 [81, 65535] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5238 += 1 };
  s7 -> s4 [0, 79] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s7 -> s7 [0, 65535] { R5238 += 1, R5188 += 1, R4379 += 1, R4380 += 1 };
  s7 -> s4 [81, 65535] { R5238 += 1, R5188 += 1, R4380 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5238 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s2 [0, 64] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s3 [0, 65535] { R5240 += 1, R5189 += 1, R5190 += 1 };
  s0 -> s0 [0, 65535] { R5239 += 1, R5240 += 1 };
  s0 -> s4 [65, 65] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s5 [65, 65] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s6 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s7 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s1 [66, 65535] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s2 [66, 65535] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s11 [0, 64] { R5240 += 1, R5190 += 1 };
  s1 -> s1 [0, 64] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s8 [65, 65] { R5240 += 1, R5190 += 1 };
  s1 -> s6 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s7 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s12 [65, 65] { R5240 += 1, R5190 += 1 };
  s1 -> s11 [66, 65535] { R5240 += 1, R5190 += 1 };
  s1 -> s1 [66, 65535] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s1 [0, 64] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s2 [0, 64] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s2 -> s4 [65, 65] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s2 -> s5 [65, 65] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s2 -> s6 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s7 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s1 [66, 65535] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s2 [66, 65535] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s1 [0, 64] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s2 [0, 64] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s3 [0, 65535] { R5240 += 1, R5189 += 1, R5190 += 1 };
  s3 -> s4 [65, 65] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s5 [65, 65] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s6 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s7 [65, 65] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s1 [66, 65535] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s2 [66, 65535] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s4 -> s4 [0, 65535] { R5240 += 1, R5190 += 1, R4959 += 1, R4960 += 1 };
  s4 -> s7 [0, 65535] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s7 -> s8 [0, 65535] { R5240 += 1, R5190 += 1 };
  s7 -> s7 [0, 65535] { R5240 += 1, R5190 += 1, R4960 += 1, R4961 += 1 };
  s8 -> s8 [0, 65535] { R5240 += 1, R5190 += 1 };
  s8 -> s9 [0, 65535] { R5240 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R5240 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R5240 += 1, R5190 += 1 };
  s11 -> s11 [0, 65535] { R5240 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R5240 += 1, R5190 += 1 };
  s11 -> s12 [65, 65] { R5240 += 1, R5190 += 1 };
  s11 -> s11 [66, 65535] { R5240 += 1, R5190 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R5240 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R5242 += 1, R5192 += 1 };
  s0 -> s0 [0, 65535] { R5241 += 1, R5242 += 1 };
  s0 -> s2 [0, 65535] { R5242 += 1, R5191 += 1, R5192 += 1 };
  s0 -> s3 [65, 65] { R5242 += 1, R5192 += 1 };
  s0 -> s4 [65, 65] { R5242 += 1, R5192 += 1 };
  s0 -> s1 [66, 65535] { R5242 += 1, R5192 += 1 };
  s1 -> s1 [0, 64] { R5242 += 1, R5192 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5242 += 1 };
  s1 -> s3 [65, 65] { R5242 += 1, R5192 += 1 };
  s1 -> s4 [65, 65] { R5242 += 1, R5192 += 1 };
  s1 -> s1 [66, 65535] { R5242 += 1, R5192 += 1 };
  s2 -> s1 [0, 64] { R5242 += 1, R5192 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5242 += 1, R5191 += 1, R5192 += 1 };
  s2 -> s3 [65, 65] { R5242 += 1, R5192 += 1 };
  s2 -> s4 [65, 65] { R5242 += 1, R5192 += 1 };
  s2 -> s1 [66, 65535] { R5242 += 1, R5192 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5242 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5242 += 1, R5192 += 1 };
  s4 -> s6 [0, 65535] { R5242 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5242 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s0 -> s2 [0, 64] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s0 -> s3 [0, 65535] { R5244 += 1, R5193 += 1, R5194 += 1 };
  s0 -> s0 [0, 65535] { R5243 += 1, R5244 += 1 };
  s0 -> s4 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s0 -> s5 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s0 -> s6 [65, 65] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s0 -> s7 [65, 65] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s0 -> s1 [66, 65535] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s0 -> s2 [66, 65535] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s1 -> s11 [0, 64] { R5244 += 1, R5194 += 1 };
  s1 -> s1 [0, 64] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s1 -> s4 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s1 -> s5 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s1 -> s8 [65, 65] { R5244 += 1, R5194 += 1 };
  s1 -> s12 [65, 65] { R5244 += 1, R5194 += 1 };
  s1 -> s11 [66, 65535] { R5244 += 1, R5194 += 1 };
  s1 -> s1 [66, 65535] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s2 -> s1 [0, 64] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s2 -> s2 [0, 64] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s2 -> s4 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s2 -> s5 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s2 -> s6 [65, 65] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s2 -> s7 [65, 65] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s2 -> s1 [66, 65535] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s2 -> s2 [66, 65535] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s3 -> s1 [0, 64] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s3 -> s2 [0, 64] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s3 -> s3 [0, 65535] { R5244 += 1, R5193 += 1, R5194 += 1 };
  s3 -> s4 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s3 -> s5 [65, 65] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s3 -> s6 [65, 65] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s3 -> s7 [65, 65] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s3 -> s1 [66, 65535] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s3 -> s2 [66, 65535] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s5 -> s5 [0, 65535] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s5 -> s8 [0, 65535] { R5244 += 1, R5194 += 1 };
  s6 -> s5 [0, 65535] { R5244 += 1, R5194 += 1, R5154 += 1, R5155 += 1 };
  s6 -> s6 [0, 65535] { R5244 += 1, R5194 += 1, R5153 += 1, R5154 += 1 };
  s8 -> s9 [0, 65535] { R5244 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R5244 += 1, R5194 += 1 };
  s9 -> s9 [0, 65535] { R5244 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R5244 += 1, R5194 += 1 };
  s11 -> s11 [0, 65535] { R5244 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R5244 += 1, R5194 += 1 };
  s11 -> s12 [65, 65] { R5244 += 1, R5194 += 1 };
  s11 -> s11 [66, 65535] { R5244 += 1, R5194 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R5244 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R5246 += 1, R5196 += 1 };
  s0 -> s0 [0, 65535] { R5245 += 1, R5246 += 1 };
  s0 -> s2 [0, 65535] { R5246 += 1, R5195 += 1, R5196 += 1 };
  s0 -> s3 [65, 65] { R5246 += 1, R5196 += 1 };
  s0 -> s4 [65, 65] { R5246 += 1, R5196 += 1 };
  s0 -> s1 [66, 65535] { R5246 += 1, R5196 += 1 };
  s1 -> s1 [0, 64] { R5246 += 1, R5196 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R5246 += 1 };
  s1 -> s3 [65, 65] { R5246 += 1, R5196 += 1 };
  s1 -> s4 [65, 65] { R5246 += 1, R5196 += 1 };
  s1 -> s1 [66, 65535] { R5246 += 1, R5196 += 1 };
  s2 -> s1 [0, 64] { R5246 += 1, R5196 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5246 += 1, R5195 += 1, R5196 += 1 };
  s2 -> s3 [65, 65] { R5246 += 1, R5196 += 1 };
  s2 -> s4 [65, 65] { R5246 += 1, R5196 += 1 };
  s2 -> s1 [66, 65535] { R5246 += 1, R5196 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R5246 += 1 };
  s4 -> s5 [0, 65535] { R5246 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5246 += 1, R5196 += 1 };
  s5 -> s5 [0, 65535] { R5246 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R5178 && R2 = R5246 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R5159 = 0 && R5160 = R5178 && R5161 = 0 && R5162 = R5178 && R5163 = 0 && R5164 = R5178 && R5165 = 0 && R5166 = R5178 && R5167 = 0 && R5168 = R5178 && R5169 = 0 && R5170 = R5178 && R5171 = 0 && R5172 = R5178 && R5173 = 0 && R5174 = R5178 && R5175 = 0 && R5176 = R5178 && R5177 = 0 && R5181 = 0 && R5182 = 0 && R5185 = 0 && R5186 = 0 && R5187 = 0 && R5188 = 0 && R5189 = 0 && R5190 = 0 && R5193 = 0 && R5194 = 0 && R5197 = 10 && R5198 = R5246 && R5199 = 10 && R5200 = R5246 && R5201 = 10 && R5202 = R5246 && R5203 = 10 && R5204 = R5246 && R5205 = 10 && R5206 = R5246 && R5207 = 10 && R5208 = R5246 && R5209 = 10 && R5210 = R5246 && R5211 = 10 && R5212 = R5246 && R5213 = 10 && R5214 = R5246 && R5215 = 10 && R5216 = R5246 && R5217 = 10 && R5218 = R5246 && R5219 = 10 && R5220 = R5246 && R5221 = 10 && R5222 = R5246 && R5223 = 10 && R5224 = R5246 && R5225 = 10 && R5226 = R5246 && R5227 = 10 && R5228 = R5246 && R5229 = 10 && R5230 = R5246 && R5231 = 10 && R5232 = R5246 && R5233 = 10 && R5234 = R5246 && R5235 = 10 && R5236 = R5246 && R5237 = 10 && R5238 = R5246 && R5239 = 10 && R5240 = R5246 && R5241 = 10 && R5242 = R5246 && R5243 = 10 && R5244 = R5246 && R5245 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R5178 && 9 < R5246 && (R14 = 0 || (R5179 = 0 && R5180 = 0)) && (R14 = 0 || (R5183 = 0 && R5184 = 0)) && (R14 = 0 || (R5191 = 0 && R5192 = 0)) && (R14 = 0 || (R5195 = 0 && R5196 = 0)) && (R4964 + R4961 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4964 + R4961 = 0 || (R4962 + R4959 = 0 && R4963 + R4960 = 0)) && (R5158 + R5155 = 0 || (R5156 + R5153 = 0 && R5157 + R5154 = 0));
// End of Parikh automata intersection problem
