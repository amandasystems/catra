// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4383, R4384, R4385, R4386, R4387, R4388, R4577, R4578, R4579, R4580, R4581, R4582, R4583, R4584, R4585, R4586, R4587, R4588, R4589, R4590, R4591, R4592, R4593, R4594, R4595, R4596, R4597, R4598, R4599, R4600, R4601, R4602, R4603, R4604, R4605, R4606, R4607, R4608, R4609, R4610, R4611, R4612, R4613, R4614, R4615, R4616, R4617, R4618, R4619, R4620, R4621, R4622, R4623, R4624, R4625, R4626, R4627, R4628, R4629, R4630, R4631, R4632, R4633, R4634, R4635, R4636, R4637, R4638, R4639, R4640, R4641, R4642, R4643, R4644, R4645, R4646, R4647, R4648, R4649, R4650, R4651, R4652, R4653, R4654, R4655, R4656, R4657, R4658, R4659, R4660, R4661, R4662, R4663, R4664, R4665, R4666, R4667, R4668, R4669, R4670, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4622 += 1 };
  s0 -> s0 [0, 65535] { R4621 += 1, R4622 += 1 };
  s0 -> s1 [45, 45] { R4622 += 1 };
  s0 -> s2 [46, 46] { R4622 += 1 };
  s0 -> s1 [48, 62] { R4622 += 1 };
  s0 -> s3 [65, 65] { R4622 += 1 };
  s0 -> s1 [66, 65535] { R4622 += 1 };
  s1 -> s1 [0, 43] { R4622 += 1 };
  s1 -> s1 [45, 45] { R4622 += 1 };
  s1 -> s2 [46, 46] { R4622 += 1 };
  s1 -> s1 [48, 62] { R4622 += 1 };
  s1 -> s3 [65, 65] { R4622 += 1 };
  s1 -> s1 [66, 65535] { R4622 += 1 };
  s2 -> s1 [0, 43] { R4622 += 1 };
  s2 -> s1 [45, 45] { R4622 += 1 };
  s2 -> s2 [46, 46] { R4622 += 1 };
  s2 -> s1 [48, 62] { R4622 += 1 };
  s2 -> s3 [65, 65] { R4622 += 1 };
  s2 -> s1 [66, 114] { R4622 += 1 };
  s2 -> s8 [115, 115] { R4622 += 1 };
  s2 -> s1 [116, 65535] { R4622 += 1 };
  s3 -> s3 [0, 43] { R4622 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4622 += 1 };
  s3 -> s4 [46, 46] { R4622 += 1 };
  s3 -> s3 [48, 62] { R4622 += 1 };
  s3 -> s3 [65, 65535] { R4622 += 1 };
  s4 -> s3 [0, 43] { R4622 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4622 += 1 };
  s4 -> s4 [46, 46] { R4622 += 1 };
  s4 -> s3 [48, 62] { R4622 += 1 };
  s4 -> s3 [65, 114] { R4622 += 1 };
  s4 -> s5 [115, 115] { R4622 += 1 };
  s4 -> s3 [116, 65535] { R4622 += 1 };
  s5 -> s3 [0, 43] { R4622 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4622 += 1 };
  s5 -> s4 [46, 46] { R4622 += 1 };
  s5 -> s3 [48, 62] { R4622 += 1 };
  s5 -> s3 [65, 110] { R4622 += 1 };
  s5 -> s6 [111, 111] { R4622 += 1 };
  s5 -> s3 [112, 65535] { R4622 += 1 };
  s6 -> s3 [0, 43] { R4622 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4622 += 1 };
  s6 -> s4 [46, 46] { R4622 += 1 };
  s6 -> s3 [48, 62] { R4622 += 1 };
  s6 -> s3 [65, 98] { R4622 += 1 };
  s6 -> s7 [99, 99] { R4622 += 1 };
  s6 -> s3 [100, 65535] { R4622 += 1 };
  s7 -> s3 [0, 43] { R4622 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4622 += 1 };
  s7 -> s4 [46, 46] { R4622 += 1 };
  s7 -> s3 [48, 62] { R4622 += 1 };
  s7 -> s3 [65, 106] { R4622 += 1 };
  s7 -> s3 [108, 65535] { R4622 += 1 };
  s8 -> s1 [0, 43] { R4622 += 1 };
  s8 -> s1 [45, 45] { R4622 += 1 };
  s8 -> s2 [46, 46] { R4622 += 1 };
  s8 -> s1 [48, 62] { R4622 += 1 };
  s8 -> s3 [65, 65] { R4622 += 1 };
  s8 -> s1 [66, 110] { R4622 += 1 };
  s8 -> s9 [111, 111] { R4622 += 1 };
  s8 -> s1 [112, 65535] { R4622 += 1 };
  s9 -> s1 [0, 43] { R4622 += 1 };
  s9 -> s1 [45, 45] { R4622 += 1 };
  s9 -> s2 [46, 46] { R4622 += 1 };
  s9 -> s1 [48, 62] { R4622 += 1 };
  s9 -> s3 [65, 65] { R4622 += 1 };
  s9 -> s1 [66, 98] { R4622 += 1 };
  s9 -> s10 [99, 99] { R4622 += 1 };
  s9 -> s1 [100, 65535] { R4622 += 1 };
  s10 -> s1 [0, 43] { R4622 += 1 };
  s10 -> s1 [45, 45] { R4622 += 1 };
  s10 -> s2 [46, 46] { R4622 += 1 };
  s10 -> s1 [48, 62] { R4622 += 1 };
  s10 -> s3 [65, 65] { R4622 += 1 };
  s10 -> s1 [66, 106] { R4622 += 1 };
  s10 -> s1 [108, 65535] { R4622 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4624 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4623 += 1, R4624 += 1 };
  s1 -> s1 [0, 65535] { R4624 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4626 += 1 };
  s0 -> s2 [0, 65535] { R4626 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4625 += 1, R4626 += 1 };
  s0 -> s3 [58, 58] { R4626 += 1 };
  s0 -> s1 [59, 65535] { R4626 += 1 };
  s1 -> s1 [0, 57] { R4626 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4626 += 1 };
  s1 -> s1 [59, 65535] { R4626 += 1 };
  s2 -> s1 [0, 57] { R4626 += 1 };
  s2 -> s2 [0, 65535] { R4626 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4626 += 1 };
  s2 -> s1 [59, 65535] { R4626 += 1 };
  s3 -> s3 [0, 65535] { R4626 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4628 += 1 };
  s0 -> s2 [0, 65535] { R4628 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4627 += 1, R4628 += 1 };
  s0 -> s3 [65, 65] { R4628 += 1 };
  s0 -> s1 [66, 65535] { R4628 += 1 };
  s1 -> s1 [0, 64] { R4628 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4628 += 1 };
  s1 -> s1 [66, 65535] { R4628 += 1 };
  s2 -> s1 [0, 64] { R4628 += 1 };
  s2 -> s2 [0, 65535] { R4628 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4628 += 1 };
  s2 -> s1 [66, 65535] { R4628 += 1 };
  s3 -> s3 [0, 65535] { R4628 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4630 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R4630 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4629 += 1, R4630 += 1 };
  s0 -> s3 [91, 91] { R4630 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4630 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4630 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4630 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R4630 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4630 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R4630 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4630 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4630 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4630 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4632 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R4631 += 1, R4632 += 1 };
  s0 -> s2 [0, 65535] { R4632 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R4632 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4632 += 1 };
  s2 -> s1 [0, 65535] { R4632 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4632 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4632 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4634 += 1, R4584 += 1 };
  s0 -> s0 [0, 65535] { R4633 += 1, R4634 += 1 };
  s0 -> s2 [0, 65535] { R4634 += 1, R4583 += 1, R4584 += 1 };
  s0 -> s1 [66, 65535] { R4634 += 1, R4584 += 1 };
  s1 -> s1 [0, 64] { R4634 += 1, R4584 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4634 += 1 };
  s1 -> s1 [66, 65535] { R4634 += 1, R4584 += 1 };
  s2 -> s1 [0, 64] { R4634 += 1, R4584 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4634 += 1, R4583 += 1, R4584 += 1 };
  s2 -> s1 [66, 65535] { R4634 += 1, R4584 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R4635 += 1, R4636 += 1 };
  s0 -> s1 [0, 65535] { R4636 += 1, R4586 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R4636 += 1, R4585 += 1, R4586 += 1 };
  s1 -> s4 [0, 65535] { R4636 += 1 };
  s1 -> s1 [0, 65535] { R4636 += 1, R4586 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4636 += 1, R4586 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R4636 += 1, R4585 += 1, R4586 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4636 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4638 += 1, R4588 += 1 };
  s0 -> s0 [0, 65535] { R4637 += 1, R4638 += 1 };
  s0 -> s2 [0, 65535] { R4638 += 1, R4587 += 1, R4588 += 1 };
  s0 -> s1 [80, 65535] { R4638 += 1, R4588 += 1 };
  s1 -> s1 [0, 65] { R4638 += 1, R4588 += 1 };
  s1 -> s1 [0, 65535] { R4638 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4638 += 1, R4588 += 1 };
  s2 -> s1 [0, 65] { R4638 += 1, R4588 += 1 };
  s2 -> s2 [0, 65535] { R4638 += 1, R4587 += 1, R4588 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4638 += 1, R4588 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4640 += 1, R4589 += 1, R4590 += 1 };
  s0 -> s2 [0, 65535] { R4640 += 1, R4590 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R4639 += 1, R4640 += 1 };
  s1 -> s1 [0, 65535] { R4640 += 1, R4589 += 1, R4590 += 1 };
  s1 -> s2 [0, 65535] { R4640 += 1, R4590 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4640 += 1, R4590 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535] { R4640 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4640 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R4642 += 1, R4592 += 1 };
  s0 -> s2 [0, 65535] { R4642 += 1, R4591 += 1, R4592 += 1 };
  s0 -> s0 [0, 65535] { R4641 += 1, R4642 += 1 };
  s0 -> s1 [81, 65535] { R4642 += 1, R4592 += 1 };
  s1 -> s1 [0, 79] { R4642 += 1, R4592 += 1 };
  s1 -> s1 [0, 65535] { R4642 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R4642 += 1, R4592 += 1 };
  s2 -> s1 [0, 79] { R4642 += 1, R4592 += 1 };
  s2 -> s2 [0, 65535] { R4642 += 1, R4591 += 1, R4592 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4642 += 1, R4592 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R4644 += 1, R4594 += 1, R4382 += 1 };
  s0 -> s1 [0, 65535] { R4644 += 1, R4594 += 1 };
  s0 -> s0 [0, 65535] { R4643 += 1, R4644 += 1 };
  s0 -> s2 [0, 65535] { R4644 += 1, R4593 += 1, R4594 += 1 };
  s0 -> s1 [81, 65535] { R4644 += 1, R4594 += 1, R4382 += 1 };
  s1 -> s1 [0, 79] { R4644 += 1, R4594 += 1, R4382 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4644 += 1, R4594 += 1 };
  s1 -> s4 [0, 65535] { R4644 += 1 };
  s1 -> s1 [81, 65535] { R4644 += 1, R4594 += 1, R4382 += 1 };
  s2 -> s1 [0, 79] { R4644 += 1, R4594 += 1, R4382 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4644 += 1, R4594 += 1 };
  s2 -> s2 [0, 65535] { R4644 += 1, R4593 += 1, R4594 += 1 };
  s2 -> s1 [81, 65535] { R4644 += 1, R4594 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4644 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4646 += 1, R4595 += 1, R4596 += 1 };
  s0 -> s2 [0, 65535] { R4646 += 1, R4596 += 1, R4387 += 1, R4388 += 1 };
  s0 -> s3 [0, 65535] { R4646 += 1, R4596 += 1, R4386 += 1, R4387 += 1 };
  s0 -> s0 [0, 65535] { R4645 += 1, R4646 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4646 += 1, R4595 += 1, R4596 += 1 };
  s1 -> s2 [0, 65535] { R4646 += 1, R4596 += 1, R4387 += 1, R4388 += 1 };
  s1 -> s3 [0, 65535] { R4646 += 1, R4596 += 1, R4386 += 1, R4387 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4646 += 1, R4596 += 1, R4387 += 1, R4388 += 1 };
  s2 -> s6 [0, 65535] { R4646 += 1, R4596 += 1 };
  s2 -> s5 [0, 65535] { R4646 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4646 += 1, R4596 += 1, R4387 += 1, R4388 += 1 };
  s3 -> s5 [0, 65535] { R4646 += 1 };
  s3 -> s3 [0, 65535] { R4646 += 1, R4596 += 1, R4386 += 1, R4387 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4646 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4646 += 1, R4596 += 1 };
  s6 -> s5 [0, 65535] { R4646 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4647 += 1, R4648 += 1 };
  s0 -> s1 [0, 65535] { R4648 += 1, R4597 += 1, R4598 += 1 };
  s0 -> s2 [0, 65535] { R4648 += 1, R4598 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4648 += 1, R4597 += 1, R4598 += 1 };
  s1 -> s2 [0, 65535] { R4648 += 1, R4598 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4648 += 1 };
  s2 -> s2 [0, 65535] { R4648 += 1, R4598 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4648 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4650 += 1, R4599 += 1, R4600 += 1 };
  s0 -> s2 [0, 65535] { R4650 += 1, R4600 += 1 };
  s0 -> s0 [0, 65535] { R4649 += 1, R4650 += 1 };
  s1 -> s1 [0, 65535] { R4650 += 1, R4599 += 1, R4600 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4650 += 1, R4600 += 1 };
  s2 -> s3 [0, 65535] { R4650 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4650 += 1, R4600 += 1 };
  s3 -> s3 [0, 65535] { R4650 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4652 += 1, R4602 += 1 };
  s0 -> s2 [0, 65535] { R4652 += 1, R4601 += 1, R4602 += 1 };
  s0 -> s0 [0, 65535] { R4651 += 1, R4652 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4652 += 1, R4602 += 1 };
  s1 -> s4 [0, 65535] { R4652 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4652 += 1, R4602 += 1 };
  s2 -> s2 [0, 65535] { R4652 += 1, R4601 += 1, R4602 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4652 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4654 += 1, R4603 += 1, R4604 += 1 };
  s0 -> s0 [0, 65535] { R4653 += 1, R4654 += 1 };
  s0 -> s2 [0, 65535] { R4654 += 1, R4604 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R4654 += 1, R4603 += 1, R4604 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4654 += 1, R4604 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R4654 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4654 += 1, R4604 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R4654 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4656 += 1, R4606 += 1 };
  s0 -> s0 [0, 65535] { R4655 += 1, R4656 += 1 };
  s0 -> s2 [0, 65535] { R4656 += 1, R4605 += 1, R4606 += 1 };
  s0 -> s3 [65, 65] { R4656 += 1, R4606 += 1 };
  s0 -> s4 [65, 65] { R4656 += 1, R4606 += 1 };
  s0 -> s5 [80, 80] { R4656 += 1, R4606 += 1 };
  s0 -> s1 [81, 65535] { R4656 += 1, R4606 += 1 };
  s1 -> s1 [0, 64] { R4656 += 1, R4606 += 1 };
  s1 -> s3 [65, 65] { R4656 += 1, R4606 += 1 };
  s1 -> s4 [65, 65] { R4656 += 1, R4606 += 1 };
  s1 -> s5 [80, 80] { R4656 += 1, R4606 += 1 };
  s1 -> s1 [81, 65535] { R4656 += 1, R4606 += 1 };
  s2 -> s1 [0, 64] { R4656 += 1, R4606 += 1 };
  s2 -> s2 [0, 65535] { R4656 += 1, R4605 += 1, R4606 += 1 };
  s2 -> s3 [65, 65] { R4656 += 1, R4606 += 1 };
  s2 -> s4 [65, 65] { R4656 += 1, R4606 += 1 };
  s2 -> s5 [80, 80] { R4656 += 1, R4606 += 1 };
  s2 -> s1 [81, 65535] { R4656 += 1, R4606 += 1 };
  s3 -> s3 [0, 65] { R4656 += 1, R4606 += 1 };
  s3 -> s7 [80, 80] { R4656 += 1, R4606 += 1 };
  s3 -> s3 [81, 65535] { R4656 += 1, R4606 += 1 };
  s5 -> s5 [0, 64] { R4656 += 1, R4606 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4656 += 1 };
  s5 -> s7 [65, 65] { R4656 += 1, R4606 += 1 };
  s5 -> s8 [65, 65] { R4656 += 1, R4606 += 1 };
  s5 -> s5 [80, 65535] { R4656 += 1, R4606 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4656 += 1, R4606 += 1 };
  s7 -> s7 [0, 65535] { R4656 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R4656 += 1, R4606 += 1 };
  s8 -> s8 [0, 65535] { R4656 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R4657 += 1, R4658 += 1 };
  s0 -> s2 [0, 65535] { R4658 += 1, R4607 += 1, R4608 += 1 };
  s0 -> s3 [65, 65] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4658 += 1 };
  s1 -> s3 [65, 65] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4658 += 1, R4607 += 1, R4608 += 1 };
  s2 -> s3 [65, 65] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4658 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4658 += 1 };
  s4 -> s4 [0, 65535] { R4658 += 1, R4608 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4658 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4660 += 1, R4610 += 1 };
  s0 -> s2 [0, 64] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s0 -> s3 [0, 65535] { R4660 += 1, R4609 += 1, R4610 += 1 };
  s0 -> s0 [0, 65535] { R4659 += 1, R4660 += 1 };
  s0 -> s4 [65, 65] { R4660 += 1, R4610 += 1 };
  s0 -> s5 [65, 65] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R4660 += 1, R4610 += 1 };
  s0 -> s7 [65, 65] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s0 -> s1 [66, 79] { R4660 += 1, R4610 += 1 };
  s0 -> s2 [66, 65535] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R4660 += 1, R4610 += 1 };
  s1 -> s1 [0, 64] { R4660 += 1, R4610 += 1 };
  s1 -> s1 [0, 65535] { R4660 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R4660 += 1, R4610 += 1 };
  s1 -> s6 [65, 65] { R4660 += 1, R4610 += 1 };
  s1 -> s1 [66, 79] { R4660 += 1, R4610 += 1 };
  s1 -> s1 [81, 65535] { R4660 += 1, R4610 += 1 };
  s2 -> s1 [0, 64] { R4660 += 1, R4610 += 1 };
  s2 -> s2 [0, 64] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4660 += 1, R4610 += 1 };
  s2 -> s5 [65, 65] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s2 -> s6 [65, 65] { R4660 += 1, R4610 += 1 };
  s2 -> s7 [65, 65] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s2 -> s1 [66, 79] { R4660 += 1, R4610 += 1 };
  s2 -> s2 [66, 65535] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R4660 += 1, R4610 += 1 };
  s3 -> s1 [0, 64] { R4660 += 1, R4610 += 1 };
  s3 -> s2 [0, 64] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4660 += 1, R4609 += 1, R4610 += 1 };
  s3 -> s4 [65, 65] { R4660 += 1, R4610 += 1 };
  s3 -> s5 [65, 65] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R4660 += 1, R4610 += 1 };
  s3 -> s7 [65, 65] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s3 -> s1 [66, 79] { R4660 += 1, R4610 += 1 };
  s3 -> s2 [66, 65535] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R4660 += 1, R4610 += 1 };
  s4 -> s4 [0, 79] { R4660 += 1, R4610 += 1 };
  s4 -> s4 [0, 65535] { R4660 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R4660 += 1, R4610 += 1 };
  s5 -> s4 [0, 79] { R4660 += 1, R4610 += 1 };
  s5 -> s5 [0, 65535] { R4660 += 1, R4610 += 1, R3509 += 1 };
  s5 -> s4 [81, 65535] { R4660 += 1, R4610 += 1 };
  s6 -> s6 [0, 65535] { R4660 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R4662 += 1, R4611 += 1, R4612 += 1 };
  s0 -> s0 [0, 65535] { R4661 += 1, R4662 += 1 };
  s0 -> s4 [65, 65] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s0 -> s2 [66, 79] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s0 -> s1 [66, 65535] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [81, 65535] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [0, 64] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s1 -> s4 [65, 65] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s5 [65, 65] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s1 -> s6 [65, 65] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s7 [65, 65] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s1 -> s2 [66, 79] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [81, 65535] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4662 += 1 };
  s2 -> s5 [65, 65] { R4662 += 1, R4612 += 1 };
  s2 -> s7 [65, 65] { R4662 += 1, R4612 += 1 };
  s2 -> s2 [66, 79] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R4662 += 1, R4612 += 1 };
  s2 -> s2 [81, 65535] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R4662 += 1, R4611 += 1, R4612 += 1 };
  s3 -> s4 [65, 65] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s3 -> s2 [66, 79] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s3 -> s1 [66, 65535] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [81, 65535] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s4 -> s5 [0, 79] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s4 -> s4 [0, 65535] { R4662 += 1, R4612 += 1, R4379 += 1, R4380 += 1 };
  s4 -> s5 [81, 65535] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s5 -> s5 [0, 79] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R4662 += 1 };
  s5 -> s5 [0, 65535] { R4662 += 1, R4612 += 1 };
  s5 -> s5 [81, 65535] { R4662 += 1, R4612 += 1, R4380 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4662 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4662 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s2 [0, 65535] { R4664 += 1, R4613 += 1, R4614 += 1 };
  s0 -> s0 [0, 65535] { R4663 += 1, R4664 += 1 };
  s0 -> s3 [65, 65] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s4 [65, 65] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s1 [66, 65535] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [0, 64] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4664 += 1 };
  s1 -> s3 [65, 65] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s4 [65, 65] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [66, 65535] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s1 [0, 64] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s2 [0, 65535] { R4664 += 1, R4613 += 1, R4614 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s4 [65, 65] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s1 [66, 65535] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s3 -> s3 [0, 65535] { R4664 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4664 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4664 += 1, R4614 += 1, R4383 += 1, R4384 += 1 };
  s5 -> s5 [0, 65535] { R4664 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4666 += 1, R4616 += 1 };
  s0 -> s0 [0, 65535] { R4665 += 1, R4666 += 1 };
  s0 -> s2 [0, 65535] { R4666 += 1, R4615 += 1, R4616 += 1 };
  s0 -> s3 [65, 65] { R4666 += 1, R4616 += 1 };
  s0 -> s4 [65, 65] { R4666 += 1, R4616 += 1 };
  s0 -> s1 [66, 65535] { R4666 += 1, R4616 += 1 };
  s1 -> s1 [0, 64] { R4666 += 1, R4616 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4666 += 1 };
  s1 -> s3 [65, 65] { R4666 += 1, R4616 += 1 };
  s1 -> s4 [65, 65] { R4666 += 1, R4616 += 1 };
  s1 -> s1 [66, 65535] { R4666 += 1, R4616 += 1 };
  s2 -> s1 [0, 64] { R4666 += 1, R4616 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4666 += 1, R4615 += 1, R4616 += 1 };
  s2 -> s3 [65, 65] { R4666 += 1, R4616 += 1 };
  s2 -> s4 [65, 65] { R4666 += 1, R4616 += 1 };
  s2 -> s1 [66, 65535] { R4666 += 1, R4616 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4666 += 1 };
  s3 -> s3 [0, 65535] { R4666 += 1, R4616 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4666 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s0 -> s2 [0, 64] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s0 -> s3 [0, 65535] { R4668 += 1, R4617 += 1, R4618 += 1 };
  s0 -> s0 [0, 65535] { R4667 += 1, R4668 += 1 };
  s0 -> s4 [65, 65] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s0 -> s5 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s0 -> s6 [65, 65] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s0 -> s7 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s0 -> s1 [66, 65535] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s0 -> s2 [66, 65535] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s1 -> s1 [0, 64] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s1 -> s11 [0, 64] { R4668 += 1, R4618 += 1 };
  s1 -> s5 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s1 -> s12 [65, 65] { R4668 += 1, R4618 += 1 };
  s1 -> s8 [65, 65] { R4668 += 1, R4618 += 1 };
  s1 -> s7 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s1 -> s1 [66, 65535] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s1 -> s11 [66, 65535] { R4668 += 1, R4618 += 1 };
  s2 -> s1 [0, 64] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s2 -> s2 [0, 64] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s2 -> s4 [65, 65] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s2 -> s5 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s2 -> s6 [65, 65] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s2 -> s7 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s2 -> s1 [66, 65535] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s2 -> s2 [66, 65535] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s3 -> s1 [0, 64] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s3 -> s2 [0, 64] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s3 -> s3 [0, 65535] { R4668 += 1, R4617 += 1, R4618 += 1 };
  s3 -> s4 [65, 65] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s3 -> s5 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s3 -> s6 [65, 65] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s3 -> s7 [65, 65] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s3 -> s1 [66, 65535] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s3 -> s2 [66, 65535] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s6 -> s6 [0, 65535] { R4668 += 1, R4618 += 1, R4577 += 1, R4578 += 1 };
  s6 -> s7 [0, 65535] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s7 -> s8 [0, 65535] { R4668 += 1, R4618 += 1 };
  s7 -> s7 [0, 65535] { R4668 += 1, R4618 += 1, R4578 += 1, R4579 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4668 += 1, R4618 += 1 };
  s8 -> s10 [0, 65535] { R4668 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4668 += 1 };
  s11 -> s11 [0, 64] { R4668 += 1, R4618 += 1 };
  s11 -> s11 [0, 65535] { R4668 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R4668 += 1, R4618 += 1 };
  s11 -> s8 [65, 65] { R4668 += 1, R4618 += 1 };
  s11 -> s11 [66, 65535] { R4668 += 1, R4618 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4668 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4670 += 1, R4620 += 1 };
  s0 -> s2 [0, 65535] { R4670 += 1, R4619 += 1, R4620 += 1 };
  s0 -> s0 [0, 65535] { R4669 += 1, R4670 += 1 };
  s0 -> s3 [65, 65] { R4670 += 1, R4620 += 1 };
  s0 -> s4 [65, 65] { R4670 += 1, R4620 += 1 };
  s0 -> s1 [66, 65535] { R4670 += 1, R4620 += 1 };
  s1 -> s1 [0, 64] { R4670 += 1, R4620 += 1 };
  s1 -> s1 [0, 65535] { R4670 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4670 += 1, R4620 += 1 };
  s1 -> s4 [65, 65] { R4670 += 1, R4620 += 1 };
  s1 -> s1 [66, 65535] { R4670 += 1, R4620 += 1 };
  s2 -> s1 [0, 64] { R4670 += 1, R4620 += 1 };
  s2 -> s2 [0, 65535] { R4670 += 1, R4619 += 1, R4620 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4670 += 1, R4620 += 1 };
  s2 -> s4 [65, 65] { R4670 += 1, R4620 += 1 };
  s2 -> s1 [66, 65535] { R4670 += 1, R4620 += 1 };
  s3 -> s3 [0, 65535] { R4670 += 1, R4620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4670 += 1 };
  s4 -> s4 [0, 65535] { R4670 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4670 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4602 && R2 = R4670 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4583 = 0 && R4584 = R4602 && R4585 = 0 && R4586 = R4602 && R4587 = 0 && R4588 = R4602 && R4589 = 0 && R4590 = R4602 && R4591 = 0 && R4592 = R4602 && R4593 = 0 && R4594 = R4602 && R4595 = 0 && R4596 = R4602 && R4597 = 0 && R4598 = R4602 && R4599 = 0 && R4600 = R4602 && R4601 = 0 && R4605 = 0 && R4606 = 0 && R4609 = 0 && R4610 = 0 && R4611 = 0 && R4612 = 0 && R4617 = 0 && R4618 = 0 && R4621 = 10 && R4622 = R4670 && R4623 = 10 && R4624 = R4670 && R4625 = 10 && R4626 = R4670 && R4627 = 10 && R4628 = R4670 && R4629 = 10 && R4630 = R4670 && R4631 = 10 && R4632 = R4670 && R4633 = 10 && R4634 = R4670 && R4635 = 10 && R4636 = R4670 && R4637 = 10 && R4638 = R4670 && R4639 = 10 && R4640 = R4670 && R4641 = 10 && R4642 = R4670 && R4643 = 10 && R4644 = R4670 && R4645 = 10 && R4646 = R4670 && R4647 = 10 && R4648 = R4670 && R4649 = 10 && R4650 = R4670 && R4651 = 10 && R4652 = R4670 && R4653 = 10 && R4654 = R4670 && R4655 = 10 && R4656 = R4670 && R4657 = 10 && R4658 = R4670 && R4659 = 10 && R4660 = R4670 && R4661 = 10 && R4662 = R4670 && R4663 = 10 && R4664 = R4670 && R4665 = 10 && R4666 = R4670 && R4667 = 10 && R4668 = R4670 && R4669 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4602 && 9 < R4670 && (R14 = 0 || (R4603 = 0 && R4604 = 0)) && (R14 = 0 || (R4607 = 0 && R4608 = 0)) && (R14 = 0 || (R4613 = 0 && R4614 = 0)) && (R14 = 0 || (R4615 = 0 && R4616 = 0)) && (R14 = 0 || (R4619 = 0 && R4620 = 0)) && (R4388 + R4385 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4388 + R4385 = 0 || (R4386 + R4383 = 0 && R4387 + R4384 = 0)) && (R4582 + R4579 = 0 || (R4580 + R4577 = 0 && R4581 + R4578 = 0));
// End of Parikh automata intersection problem
