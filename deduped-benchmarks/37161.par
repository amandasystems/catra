// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R29, R3, R30, R31, R32, R609, R610, R611, R612, R613, R614, R7, R8, R803, R804, R805, R806, R807, R808, R809, R810, R811, R812, R813, R814, R815, R816, R817, R818, R819, R820, R821, R822, R823, R824, R825, R826, R827, R828, R829, R830, R831, R832, R833, R834, R835, R836, R837, R838, R839, R840, R841, R842, R843, R844, R845, R846, R847, R848, R849, R850, R851, R852, R853, R854, R855, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R848 += 1 };
  s0 -> s0 [0, 65535] { R847 += 1, R848 += 1 };
  s0 -> s1 [45, 45] { R848 += 1 };
  s0 -> s2 [46, 46] { R848 += 1 };
  s0 -> s1 [48, 62] { R848 += 1 };
  s0 -> s3 [65, 65] { R848 += 1 };
  s0 -> s1 [66, 65535] { R848 += 1 };
  s1 -> s1 [0, 43] { R848 += 1 };
  s1 -> s1 [45, 45] { R848 += 1 };
  s1 -> s2 [46, 46] { R848 += 1 };
  s1 -> s1 [48, 62] { R848 += 1 };
  s1 -> s3 [65, 65] { R848 += 1 };
  s1 -> s1 [66, 65535] { R848 += 1 };
  s2 -> s1 [0, 43] { R848 += 1 };
  s2 -> s1 [45, 45] { R848 += 1 };
  s2 -> s2 [46, 46] { R848 += 1 };
  s2 -> s1 [48, 62] { R848 += 1 };
  s2 -> s3 [65, 65] { R848 += 1 };
  s2 -> s1 [66, 114] { R848 += 1 };
  s2 -> s8 [115, 115] { R848 += 1 };
  s2 -> s1 [116, 65535] { R848 += 1 };
  s3 -> s3 [0, 43] { R848 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R848 += 1 };
  s3 -> s4 [46, 46] { R848 += 1 };
  s3 -> s3 [48, 62] { R848 += 1 };
  s3 -> s3 [65, 65535] { R848 += 1 };
  s4 -> s3 [0, 43] { R848 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R848 += 1 };
  s4 -> s4 [46, 46] { R848 += 1 };
  s4 -> s3 [48, 62] { R848 += 1 };
  s4 -> s3 [65, 114] { R848 += 1 };
  s4 -> s5 [115, 115] { R848 += 1 };
  s4 -> s3 [116, 65535] { R848 += 1 };
  s5 -> s3 [0, 43] { R848 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R848 += 1 };
  s5 -> s4 [46, 46] { R848 += 1 };
  s5 -> s3 [48, 62] { R848 += 1 };
  s5 -> s3 [65, 110] { R848 += 1 };
  s5 -> s6 [111, 111] { R848 += 1 };
  s5 -> s3 [112, 65535] { R848 += 1 };
  s6 -> s3 [0, 43] { R848 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R848 += 1 };
  s6 -> s4 [46, 46] { R848 += 1 };
  s6 -> s3 [48, 62] { R848 += 1 };
  s6 -> s3 [65, 98] { R848 += 1 };
  s6 -> s7 [99, 99] { R848 += 1 };
  s6 -> s3 [100, 65535] { R848 += 1 };
  s7 -> s3 [0, 43] { R848 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R848 += 1 };
  s7 -> s4 [46, 46] { R848 += 1 };
  s7 -> s3 [48, 62] { R848 += 1 };
  s7 -> s3 [65, 106] { R848 += 1 };
  s7 -> s3 [108, 65535] { R848 += 1 };
  s8 -> s1 [0, 43] { R848 += 1 };
  s8 -> s1 [45, 45] { R848 += 1 };
  s8 -> s2 [46, 46] { R848 += 1 };
  s8 -> s1 [48, 62] { R848 += 1 };
  s8 -> s3 [65, 65] { R848 += 1 };
  s8 -> s1 [66, 110] { R848 += 1 };
  s8 -> s9 [111, 111] { R848 += 1 };
  s8 -> s1 [112, 65535] { R848 += 1 };
  s9 -> s1 [0, 43] { R848 += 1 };
  s9 -> s1 [45, 45] { R848 += 1 };
  s9 -> s2 [46, 46] { R848 += 1 };
  s9 -> s1 [48, 62] { R848 += 1 };
  s9 -> s3 [65, 65] { R848 += 1 };
  s9 -> s1 [66, 98] { R848 += 1 };
  s9 -> s10 [99, 99] { R848 += 1 };
  s9 -> s1 [100, 65535] { R848 += 1 };
  s10 -> s1 [0, 43] { R848 += 1 };
  s10 -> s1 [45, 45] { R848 += 1 };
  s10 -> s2 [46, 46] { R848 += 1 };
  s10 -> s1 [48, 62] { R848 += 1 };
  s10 -> s3 [65, 65] { R848 += 1 };
  s10 -> s1 [66, 106] { R848 += 1 };
  s10 -> s1 [108, 65535] { R848 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R849 += 1, R850 += 1 };
  s0 -> s1 [0, 65535] { R850 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R850 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R852 += 1 };
  s0 -> s0 [0, 65535] { R851 += 1, R852 += 1 };
  s0 -> s2 [0, 65535] { R852 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R852 += 1 };
  s0 -> s1 [59, 65535] { R852 += 1 };
  s1 -> s1 [0, 57] { R852 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R852 += 1 };
  s1 -> s1 [59, 65535] { R852 += 1 };
  s2 -> s1 [0, 57] { R852 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R852 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R852 += 1 };
  s2 -> s1 [59, 65535] { R852 += 1 };
  s3 -> s3 [0, 65535] { R852 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R854 += 1 };
  s0 -> s2 [0, 65535] { R854 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R853 += 1, R854 += 1 };
  s0 -> s3 [65, 65] { R854 += 1 };
  s0 -> s1 [66, 65535] { R854 += 1 };
  s1 -> s1 [0, 64] { R854 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R854 += 1 };
  s1 -> s1 [66, 65535] { R854 += 1 };
  s2 -> s1 [0, 64] { R854 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R854 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R854 += 1 };
  s2 -> s1 [66, 65535] { R854 += 1 };
  s3 -> s3 [0, 65535] { R854 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R856 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R855 += 1, R856 += 1 };
  s0 -> s2 [0, 65535] { R856 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R856 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R856 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R856 += 1 };
  s1 -> s1 [0, 65535] { R856 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R856 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R856 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R856 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R856 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R856 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R856 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R857 += 1, R858 += 1 };
  s0 -> s1 [0, 65535] { R858 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R858 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R858 += 1 };
  s1 -> s1 [0, 65535] { R858 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R858 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R858 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R858 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R860 += 1, R810 += 1 };
  s0 -> s0 [0, 65535] { R859 += 1, R860 += 1 };
  s0 -> s2 [0, 65535] { R860 += 1, R809 += 1, R810 += 1 };
  s0 -> s1 [66, 65535] { R860 += 1, R810 += 1 };
  s1 -> s1 [0, 64] { R860 += 1, R810 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R860 += 1 };
  s1 -> s1 [66, 65535] { R860 += 1, R810 += 1 };
  s2 -> s1 [0, 64] { R860 += 1, R810 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R860 += 1, R809 += 1, R810 += 1 };
  s2 -> s1 [66, 65535] { R860 += 1, R810 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R862 += 1, R812 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R862 += 1, R811 += 1, R812 += 1 };
  s0 -> s0 [0, 65535] { R861 += 1, R862 += 1 };
  s1 -> s1 [0, 65535] { R862 += 1, R812 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R862 += 1 };
  s2 -> s1 [0, 65535] { R862 += 1, R812 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R862 += 1, R811 += 1, R812 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R862 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R864 += 1, R814 += 1 };
  s0 -> s2 [0, 65535] { R864 += 1, R813 += 1, R814 += 1 };
  s0 -> s0 [0, 65535] { R863 += 1, R864 += 1 };
  s0 -> s3 [80, 80] { R864 += 1, R814 += 1 };
  s0 -> s1 [81, 65535] { R864 += 1, R814 += 1 };
  s1 -> s1 [0, 65] { R864 += 1, R814 += 1 };
  s1 -> s3 [80, 80] { R864 += 1, R814 += 1 };
  s1 -> s1 [81, 65535] { R864 += 1, R814 += 1 };
  s2 -> s1 [0, 65] { R864 += 1, R814 += 1 };
  s2 -> s2 [0, 65535] { R864 += 1, R813 += 1, R814 += 1 };
  s2 -> s3 [80, 80] { R864 += 1, R814 += 1 };
  s2 -> s1 [81, 65535] { R864 += 1, R814 += 1 };
  s3 -> s3 [0, 65] { R864 += 1, R814 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R864 += 1 };
  s3 -> s3 [80, 65535] { R864 += 1, R814 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R866 += 1, R815 += 1, R816 += 1 };
  s0 -> s2 [0, 65535] { R866 += 1, R816 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R865 += 1, R866 += 1 };
  s1 -> s1 [0, 65535] { R866 += 1, R815 += 1, R816 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R866 += 1, R816 += 1, R26 += 1 };
  s2 -> s3 [0, 65535] { R866 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R866 += 1, R816 += 1, R26 += 1 };
  s3 -> s3 [0, 65535] { R866 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R868 += 1, R818 += 1 };
  s0 -> s2 [0, 65535] { R868 += 1, R818 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R867 += 1, R868 += 1 };
  s0 -> s3 [0, 65535] { R868 += 1, R817 += 1, R818 += 1 };
  s0 -> s1 [81, 65535] { R868 += 1, R818 += 1 };
  s1 -> s1 [0, 79] { R868 += 1, R818 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R868 += 1 };
  s1 -> s1 [81, 65535] { R868 += 1, R818 += 1 };
  s2 -> s1 [0, 79] { R868 += 1, R818 += 1 };
  s2 -> s2 [0, 65535] { R868 += 1, R818 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R868 += 1 };
  s2 -> s1 [81, 65535] { R868 += 1, R818 += 1 };
  s3 -> s1 [0, 79] { R868 += 1, R818 += 1 };
  s3 -> s2 [0, 65535] { R868 += 1, R818 += 1, R28 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R868 += 1, R817 += 1, R818 += 1 };
  s3 -> s1 [81, 65535] { R868 += 1, R818 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R868 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R870 += 1, R820 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R870 += 1, R820 += 1, R31 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R869 += 1, R870 += 1 };
  s0 -> s3 [0, 65535] { R870 += 1, R819 += 1, R820 += 1 };
  s0 -> s1 [81, 65535] { R870 += 1, R820 += 1, R32 += 1 };
  s1 -> s1 [0, 79] { R870 += 1, R820 += 1, R32 += 1 };
  s1 -> s5 [0, 65535] { R870 += 1 };
  s1 -> s1 [0, 65535] { R870 += 1, R820 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R870 += 1, R820 += 1, R32 += 1 };
  s2 -> s1 [0, 79] { R870 += 1, R820 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R870 += 1, R820 += 1, R31 += 1, R32 += 1 };
  s2 -> s5 [0, 65535] { R870 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R870 += 1, R820 += 1, R32 += 1 };
  s3 -> s1 [0, 79] { R870 += 1, R820 += 1, R32 += 1 };
  s3 -> s2 [0, 65535] { R870 += 1, R820 += 1, R31 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R870 += 1, R819 += 1, R820 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R870 += 1, R820 += 1, R32 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R870 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R871 += 1, R872 += 1 };
  s0 -> s1 [0, 65535] { R872 += 1, R822 += 1 };
  s0 -> s2 [0, 65535] { R872 += 1, R821 += 1, R822 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R872 += 1, R822 += 1 };
  s1 -> s4 [0, 65535] { R872 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R872 += 1, R822 += 1 };
  s2 -> s2 [0, 65535] { R872 += 1, R821 += 1, R822 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R872 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R874 += 1, R823 += 1, R824 += 1 };
  s0 -> s0 [0, 65535] { R873 += 1, R874 += 1 };
  s0 -> s2 [0, 65535] { R874 += 1, R824 += 1 };
  s1 -> s1 [0, 65535] { R874 += 1, R823 += 1, R824 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R874 += 1, R824 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R874 += 1 };
  s2 -> s2 [0, 65535] { R874 += 1, R824 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R874 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R876 += 1, R825 += 1, R826 += 1 };
  s0 -> s2 [0, 65535] { R876 += 1, R826 += 1 };
  s0 -> s0 [0, 65535] { R875 += 1, R876 += 1 };
  s1 -> s1 [0, 65535] { R876 += 1, R825 += 1, R826 += 1 };
  s1 -> s2 [0, 65535] { R876 += 1, R826 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R876 += 1 };
  s2 -> s2 [0, 65535] { R876 += 1, R826 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R876 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R878 += 1, R828 += 1 };
  s0 -> s2 [0, 65535] { R878 += 1, R827 += 1, R828 += 1 };
  s0 -> s0 [0, 65535] { R877 += 1, R878 += 1 };
  s1 -> s4 [0, 65535] { R878 += 1 };
  s1 -> s1 [0, 65535] { R878 += 1, R828 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R878 += 1, R828 += 1 };
  s2 -> s2 [0, 65535] { R878 += 1, R827 += 1, R828 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R878 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R880 += 1, R830 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R880 += 1, R829 += 1, R830 += 1 };
  s0 -> s0 [0, 65535] { R879 += 1, R880 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R880 += 1, R830 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R880 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R880 += 1, R830 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R880 += 1, R829 += 1, R830 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R880 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R882 += 1, R832 += 1 };
  s0 -> s2 [0, 65535] { R882 += 1, R831 += 1, R832 += 1 };
  s0 -> s0 [0, 65535] { R881 += 1, R882 += 1 };
  s0 -> s3 [65, 65] { R882 += 1, R832 += 1 };
  s0 -> s4 [65, 65] { R882 += 1, R832 += 1 };
  s0 -> s1 [81, 65535] { R882 += 1, R832 += 1 };
  s1 -> s1 [0, 64] { R882 += 1, R832 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R882 += 1 };
  s1 -> s3 [65, 65] { R882 += 1, R832 += 1 };
  s1 -> s4 [65, 65] { R882 += 1, R832 += 1 };
  s1 -> s1 [81, 65535] { R882 += 1, R832 += 1 };
  s2 -> s1 [0, 64] { R882 += 1, R832 += 1 };
  s2 -> s2 [0, 65535] { R882 += 1, R831 += 1, R832 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R882 += 1, R832 += 1 };
  s2 -> s4 [65, 65] { R882 += 1, R832 += 1 };
  s2 -> s1 [81, 65535] { R882 += 1, R832 += 1 };
  s3 -> s3 [0, 65535] { R882 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R882 += 1, R832 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R882 += 1 };
  s4 -> s4 [81, 65535] { R882 += 1, R832 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R884 += 1, R834 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R883 += 1, R884 += 1 };
  s0 -> s2 [0, 65535] { R884 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [65, 65] { R884 += 1, R834 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R884 += 1, R834 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R884 += 1, R834 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R884 += 1, R834 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R884 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R884 += 1, R834 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R884 += 1, R834 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R884 += 1, R834 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R884 += 1, R834 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R884 += 1, R833 += 1, R834 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R884 += 1, R834 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R884 += 1, R834 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R884 += 1, R834 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R884 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R884 += 1 };
  s4 -> s4 [0, 65535] { R884 += 1, R834 += 1, R25 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R884 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R886 += 1, R836 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R886 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R885 += 1, R886 += 1 };
  s0 -> s3 [65, 65] { R886 += 1, R836 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R886 += 1, R836 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R886 += 1, R836 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R886 += 1, R836 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R886 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R886 += 1, R836 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R886 += 1, R836 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R886 += 1, R836 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R886 += 1, R836 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R886 += 1, R835 += 1, R836 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R886 += 1, R836 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R886 += 1, R836 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R886 += 1, R836 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R886 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R886 += 1 };
  s4 -> s4 [0, 65535] { R886 += 1, R836 += 1, R27 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R886 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R887 += 1, R888 += 1 };
  s0 -> s2 [0, 65535] { R888 += 1, R837 += 1, R838 += 1 };
  s0 -> s3 [65, 65] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R888 += 1 };
  s1 -> s3 [65, 65] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R888 += 1, R837 += 1, R838 += 1 };
  s2 -> s3 [65, 65] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R888 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R888 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R888 += 1, R838 += 1, R29 += 1, R30 += 1 };
  s5 -> s5 [0, 65535] { R888 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s0 -> s2 [0, 64] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R889 += 1, R890 += 1 };
  s0 -> s3 [0, 65535] { R890 += 1, R839 += 1, R840 += 1 };
  s0 -> s4 [65, 65] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s0 -> s5 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s0 -> s6 [65, 65] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s0 -> s7 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s0 -> s1 [66, 65535] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s0 -> s2 [66, 65535] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s1 -> s11 [0, 64] { R890 += 1, R840 += 1 };
  s1 -> s1 [0, 64] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s1 -> s8 [65, 65] { R890 += 1, R840 += 1 };
  s1 -> s12 [65, 65] { R890 += 1, R840 += 1 };
  s1 -> s5 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s1 -> s7 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s1 -> s11 [66, 65535] { R890 += 1, R840 += 1 };
  s1 -> s1 [66, 65535] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s2 -> s1 [0, 64] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s2 -> s2 [0, 64] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s2 -> s6 [65, 65] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s2 -> s7 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s2 -> s1 [66, 65535] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s2 -> s2 [66, 65535] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s3 -> s1 [0, 64] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s3 -> s2 [0, 64] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s3 -> s3 [0, 65535] { R890 += 1, R839 += 1, R840 += 1 };
  s3 -> s4 [65, 65] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s3 -> s6 [65, 65] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s3 -> s7 [65, 65] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s3 -> s1 [66, 65535] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s3 -> s2 [66, 65535] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s6 -> s6 [0, 65535] { R890 += 1, R840 += 1, R609 += 1, R610 += 1 };
  s6 -> s7 [0, 65535] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s7 -> s8 [0, 65535] { R890 += 1, R840 += 1 };
  s7 -> s7 [0, 65535] { R890 += 1, R840 += 1, R610 += 1, R611 += 1 };
  s8 -> s9 [0, 65535] { R890 += 1 };
  s8 -> s8 [0, 65535] { R890 += 1, R840 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R890 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R890 += 1, R840 += 1 };
  s11 -> s11 [0, 65535] { R890 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R890 += 1, R840 += 1 };
  s11 -> s12 [65, 65] { R890 += 1, R840 += 1 };
  s11 -> s11 [66, 65535] { R890 += 1, R840 += 1 };
  s12 -> s12 [0, 65535] { R890 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R892 += 1, R842 += 1 };
  s0 -> s0 [0, 65535] { R891 += 1, R892 += 1 };
  s0 -> s2 [0, 65535] { R892 += 1, R841 += 1, R842 += 1 };
  s0 -> s3 [65, 65] { R892 += 1, R842 += 1 };
  s0 -> s4 [65, 65] { R892 += 1, R842 += 1 };
  s0 -> s1 [66, 65535] { R892 += 1, R842 += 1 };
  s1 -> s1 [0, 64] { R892 += 1, R842 += 1 };
  s1 -> s1 [0, 65535] { R892 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R892 += 1, R842 += 1 };
  s1 -> s4 [65, 65] { R892 += 1, R842 += 1 };
  s1 -> s1 [66, 65535] { R892 += 1, R842 += 1 };
  s2 -> s1 [0, 64] { R892 += 1, R842 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R892 += 1, R841 += 1, R842 += 1 };
  s2 -> s3 [65, 65] { R892 += 1, R842 += 1 };
  s2 -> s4 [65, 65] { R892 += 1, R842 += 1 };
  s2 -> s1 [66, 65535] { R892 += 1, R842 += 1 };
  s3 -> s6 [0, 65535] { R892 += 1 };
  s3 -> s3 [0, 65535] { R892 += 1, R842 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R892 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R892 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s0 -> s2 [0, 64] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s0 -> s3 [0, 65535] { R894 += 1, R843 += 1, R844 += 1 };
  s0 -> s0 [0, 65535] { R893 += 1, R894 += 1 };
  s0 -> s4 [65, 65] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s0 -> s5 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s0 -> s6 [65, 65] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s0 -> s7 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s0 -> s1 [66, 65535] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s0 -> s2 [66, 65535] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s1 -> s11 [0, 64] { R894 += 1, R844 += 1 };
  s1 -> s1 [0, 64] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s1 -> s5 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s1 -> s7 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s1 -> s8 [65, 65] { R894 += 1, R844 += 1 };
  s1 -> s12 [65, 65] { R894 += 1, R844 += 1 };
  s1 -> s11 [66, 65535] { R894 += 1, R844 += 1 };
  s1 -> s1 [66, 65535] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s2 -> s1 [0, 64] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s2 -> s2 [0, 64] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s2 -> s4 [65, 65] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s2 -> s5 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s2 -> s6 [65, 65] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s2 -> s7 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s2 -> s1 [66, 65535] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s2 -> s2 [66, 65535] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s3 -> s1 [0, 64] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s3 -> s2 [0, 64] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s3 -> s3 [0, 65535] { R894 += 1, R843 += 1, R844 += 1 };
  s3 -> s4 [65, 65] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s3 -> s5 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s3 -> s6 [65, 65] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s3 -> s7 [65, 65] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s3 -> s1 [66, 65535] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s3 -> s2 [66, 65535] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s4 -> s4 [0, 65535] { R894 += 1, R844 += 1, R803 += 1, R804 += 1 };
  s4 -> s5 [0, 65535] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s5 -> s5 [0, 65535] { R894 += 1, R844 += 1, R804 += 1, R805 += 1 };
  s5 -> s8 [0, 65535] { R894 += 1, R844 += 1 };
  s8 -> s8 [0, 65535] { R894 += 1, R844 += 1 };
  s8 -> s9 [0, 65535] { R894 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R894 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R894 += 1, R844 += 1 };
  s11 -> s11 [0, 65535] { R894 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R894 += 1, R844 += 1 };
  s11 -> s12 [65, 65] { R894 += 1, R844 += 1 };
  s11 -> s11 [66, 65535] { R894 += 1, R844 += 1 };
  s12 -> s12 [0, 65535] { R894 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R896 += 1, R846 += 1 };
  s0 -> s2 [0, 65535] { R896 += 1, R845 += 1, R846 += 1 };
  s0 -> s0 [0, 65535] { R895 += 1, R896 += 1 };
  s0 -> s3 [65, 65] { R896 += 1, R846 += 1 };
  s0 -> s4 [65, 65] { R896 += 1, R846 += 1 };
  s0 -> s1 [66, 65535] { R896 += 1, R846 += 1 };
  s1 -> s1 [0, 64] { R896 += 1, R846 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R896 += 1 };
  s1 -> s3 [65, 65] { R896 += 1, R846 += 1 };
  s1 -> s4 [65, 65] { R896 += 1, R846 += 1 };
  s1 -> s1 [66, 65535] { R896 += 1, R846 += 1 };
  s2 -> s1 [0, 64] { R896 += 1, R846 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R896 += 1, R845 += 1, R846 += 1 };
  s2 -> s3 [65, 65] { R896 += 1, R846 += 1 };
  s2 -> s4 [65, 65] { R896 += 1, R846 += 1 };
  s2 -> s1 [66, 65535] { R896 += 1, R846 += 1 };
  s3 -> s3 [0, 65535] { R896 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R896 += 1 };
  s4 -> s4 [0, 65535] { R896 += 1, R846 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R896 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R828 && R2 = R896 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R809 = 0 && R810 = R828 && R811 = 0 && R812 = R828 && R813 = 0 && R814 = R828 && R815 = 0 && R816 = R828 && R817 = 0 && R818 = R828 && R819 = 0 && R820 = R828 && R821 = 0 && R822 = R828 && R823 = 0 && R824 = R828 && R825 = 0 && R826 = R828 && R827 = 0 && R839 = 0 && R840 = 0 && R843 = 0 && R844 = 0 && R847 = 10 && R848 = R896 && R849 = 10 && R850 = R896 && R851 = 10 && R852 = R896 && R853 = 10 && R854 = R896 && R855 = 10 && R856 = R896 && R857 = 10 && R858 = R896 && R859 = 10 && R860 = R896 && R861 = 10 && R862 = R896 && R863 = 10 && R864 = R896 && R865 = 10 && R866 = R896 && R867 = 10 && R868 = R896 && R869 = 10 && R870 = R896 && R871 = 10 && R872 = R896 && R873 = 10 && R874 = R896 && R875 = 10 && R876 = R896 && R877 = 10 && R878 = R896 && R879 = 10 && R880 = R896 && R881 = 10 && R882 = R896 && R883 = 10 && R884 = R896 && R885 = 10 && R886 = R896 && R887 = 10 && R888 = R896 && R889 = 10 && R890 = R896 && R891 = 10 && R892 = R896 && R893 = 10 && R894 = R896 && R895 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R828 && 9 < R896 && (R14 = 0 || (R829 = 0 && R830 = 0)) && (R14 = 0 || (R831 = 0 && R832 = 0)) && (R14 = 0 || (R833 = 0 && R834 = 0)) && (R14 = 0 || (R835 = 0 && R836 = 0)) && (R14 = 0 || (R837 = 0 && R838 = 0)) && (R14 = 0 || (R841 = 0 && R842 = 0)) && (R14 = 0 || (R845 = 0 && R846 = 0)) && (R614 + R611 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R614 + R611 = 0 || (R612 + R609 = 0 && R613 + R610 = 0)) && (R808 + R805 = 0 || (R806 + R803 = 0 && R807 + R804 = 0));
// End of Parikh automata intersection problem
