// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R4091, R4092, R4093, R4094, R4095, R4096, R4285, R4286, R4287, R4288, R4289, R4290, R4291, R4292, R4293, R4294, R4295, R4296, R4297, R4298, R4299, R4300, R4301, R4302, R4303, R4304, R4305, R4306, R4307, R4308, R4309, R4310, R4311, R4312, R4313, R4314, R4315, R4316, R4317, R4318, R4319, R4320, R4321, R4322, R4323, R4324, R4325, R4326, R4327, R4328, R4329, R4330, R4331, R4332, R4333, R4334, R4335, R4336, R4337, R4338, R4339, R4340, R4341, R4342, R4343, R4344, R4345, R4346, R4347, R4348, R4349, R4350, R4351, R4352, R4353, R4354, R4355, R4356, R4357, R4358, R4359, R4360, R4361, R4362, R4363, R4364, R4365, R4366, R4367, R4368, R4369, R4370, R4371, R4372, R4373, R4374, R4375, R4376, R4377, R4378, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4330 += 1 };
  s0 -> s0 [0, 65535] { R4329 += 1, R4330 += 1 };
  s0 -> s1 [45, 45] { R4330 += 1 };
  s0 -> s2 [46, 46] { R4330 += 1 };
  s0 -> s1 [48, 62] { R4330 += 1 };
  s0 -> s3 [65, 65] { R4330 += 1 };
  s0 -> s1 [66, 65535] { R4330 += 1 };
  s1 -> s1 [0, 43] { R4330 += 1 };
  s1 -> s1 [45, 45] { R4330 += 1 };
  s1 -> s2 [46, 46] { R4330 += 1 };
  s1 -> s1 [48, 62] { R4330 += 1 };
  s1 -> s3 [65, 65] { R4330 += 1 };
  s1 -> s1 [66, 65535] { R4330 += 1 };
  s2 -> s1 [0, 43] { R4330 += 1 };
  s2 -> s1 [45, 45] { R4330 += 1 };
  s2 -> s2 [46, 46] { R4330 += 1 };
  s2 -> s1 [48, 62] { R4330 += 1 };
  s2 -> s3 [65, 65] { R4330 += 1 };
  s2 -> s1 [66, 114] { R4330 += 1 };
  s2 -> s8 [115, 115] { R4330 += 1 };
  s2 -> s1 [116, 65535] { R4330 += 1 };
  s3 -> s3 [0, 43] { R4330 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4330 += 1 };
  s3 -> s4 [46, 46] { R4330 += 1 };
  s3 -> s3 [48, 62] { R4330 += 1 };
  s3 -> s3 [65, 65535] { R4330 += 1 };
  s4 -> s3 [0, 43] { R4330 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4330 += 1 };
  s4 -> s4 [46, 46] { R4330 += 1 };
  s4 -> s3 [48, 62] { R4330 += 1 };
  s4 -> s3 [65, 114] { R4330 += 1 };
  s4 -> s5 [115, 115] { R4330 += 1 };
  s4 -> s3 [116, 65535] { R4330 += 1 };
  s5 -> s3 [0, 43] { R4330 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4330 += 1 };
  s5 -> s4 [46, 46] { R4330 += 1 };
  s5 -> s3 [48, 62] { R4330 += 1 };
  s5 -> s3 [65, 110] { R4330 += 1 };
  s5 -> s6 [111, 111] { R4330 += 1 };
  s5 -> s3 [112, 65535] { R4330 += 1 };
  s6 -> s3 [0, 43] { R4330 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4330 += 1 };
  s6 -> s4 [46, 46] { R4330 += 1 };
  s6 -> s3 [48, 62] { R4330 += 1 };
  s6 -> s3 [65, 98] { R4330 += 1 };
  s6 -> s7 [99, 99] { R4330 += 1 };
  s6 -> s3 [100, 65535] { R4330 += 1 };
  s7 -> s3 [0, 43] { R4330 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4330 += 1 };
  s7 -> s4 [46, 46] { R4330 += 1 };
  s7 -> s3 [48, 62] { R4330 += 1 };
  s7 -> s3 [65, 106] { R4330 += 1 };
  s7 -> s3 [108, 65535] { R4330 += 1 };
  s8 -> s1 [0, 43] { R4330 += 1 };
  s8 -> s1 [45, 45] { R4330 += 1 };
  s8 -> s2 [46, 46] { R4330 += 1 };
  s8 -> s1 [48, 62] { R4330 += 1 };
  s8 -> s3 [65, 65] { R4330 += 1 };
  s8 -> s1 [66, 110] { R4330 += 1 };
  s8 -> s9 [111, 111] { R4330 += 1 };
  s8 -> s1 [112, 65535] { R4330 += 1 };
  s9 -> s1 [0, 43] { R4330 += 1 };
  s9 -> s1 [45, 45] { R4330 += 1 };
  s9 -> s2 [46, 46] { R4330 += 1 };
  s9 -> s1 [48, 62] { R4330 += 1 };
  s9 -> s3 [65, 65] { R4330 += 1 };
  s9 -> s1 [66, 98] { R4330 += 1 };
  s9 -> s10 [99, 99] { R4330 += 1 };
  s9 -> s1 [100, 65535] { R4330 += 1 };
  s10 -> s1 [0, 43] { R4330 += 1 };
  s10 -> s1 [45, 45] { R4330 += 1 };
  s10 -> s2 [46, 46] { R4330 += 1 };
  s10 -> s1 [48, 62] { R4330 += 1 };
  s10 -> s3 [65, 65] { R4330 += 1 };
  s10 -> s1 [66, 106] { R4330 += 1 };
  s10 -> s1 [108, 65535] { R4330 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4332 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4331 += 1, R4332 += 1 };
  s1 -> s1 [0, 65535] { R4332 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4334 += 1 };
  s0 -> s0 [0, 65535] { R4333 += 1, R4334 += 1 };
  s0 -> s2 [0, 65535] { R4334 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R4334 += 1 };
  s0 -> s1 [59, 65535] { R4334 += 1 };
  s1 -> s1 [0, 57] { R4334 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4334 += 1 };
  s1 -> s1 [59, 65535] { R4334 += 1 };
  s2 -> s1 [0, 57] { R4334 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4334 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4334 += 1 };
  s2 -> s1 [59, 65535] { R4334 += 1 };
  s3 -> s3 [0, 65535] { R4334 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4336 += 1 };
  s0 -> s0 [0, 65535] { R4335 += 1, R4336 += 1 };
  s0 -> s2 [0, 65535] { R4336 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4336 += 1 };
  s0 -> s1 [66, 65535] { R4336 += 1 };
  s1 -> s1 [0, 64] { R4336 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4336 += 1 };
  s1 -> s1 [66, 65535] { R4336 += 1 };
  s2 -> s1 [0, 64] { R4336 += 1 };
  s2 -> s2 [0, 65535] { R4336 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4336 += 1 };
  s2 -> s1 [66, 65535] { R4336 += 1 };
  s3 -> s3 [0, 65535] { R4336 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4338 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4337 += 1, R4338 += 1 };
  s0 -> s2 [0, 65535] { R4338 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R4338 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4338 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R4338 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4338 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R4338 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4338 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R4338 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4338 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4338 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4338 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4340 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R4339 += 1, R4340 += 1 };
  s0 -> s2 [0, 65535] { R4340 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R4340 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R4340 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4340 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4340 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4340 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4342 += 1, R4292 += 1 };
  s0 -> s2 [0, 65535] { R4342 += 1, R4291 += 1, R4292 += 1 };
  s0 -> s0 [0, 65535] { R4341 += 1, R4342 += 1 };
  s0 -> s1 [66, 65535] { R4342 += 1, R4292 += 1 };
  s1 -> s1 [0, 64] { R4342 += 1, R4292 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4342 += 1 };
  s1 -> s1 [66, 65535] { R4342 += 1, R4292 += 1 };
  s2 -> s1 [0, 64] { R4342 += 1, R4292 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4342 += 1, R4291 += 1, R4292 += 1 };
  s2 -> s1 [66, 65535] { R4342 += 1, R4292 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4344 += 1, R4294 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R4344 += 1, R4293 += 1, R4294 += 1 };
  s0 -> s0 [0, 65535] { R4343 += 1, R4344 += 1 };
  s1 -> s1 [0, 65535] { R4344 += 1, R4294 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R4344 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4344 += 1, R4294 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R4344 += 1, R4293 += 1, R4294 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4344 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4346 += 1, R4296 += 1 };
  s0 -> s2 [0, 65535] { R4346 += 1, R4295 += 1, R4296 += 1 };
  s0 -> s0 [0, 65535] { R4345 += 1, R4346 += 1 };
  s0 -> s1 [80, 65535] { R4346 += 1, R4296 += 1 };
  s1 -> s1 [0, 65] { R4346 += 1, R4296 += 1 };
  s1 -> s1 [0, 65535] { R4346 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4346 += 1, R4296 += 1 };
  s2 -> s1 [0, 65] { R4346 += 1, R4296 += 1 };
  s2 -> s2 [0, 65535] { R4346 += 1, R4295 += 1, R4296 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4346 += 1, R4296 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4348 += 1, R4297 += 1, R4298 += 1 };
  s0 -> s2 [0, 65535] { R4348 += 1, R4298 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R4347 += 1, R4348 += 1 };
  s1 -> s1 [0, 65535] { R4348 += 1, R4297 += 1, R4298 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4348 += 1, R4298 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535] { R4348 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4348 += 1, R4298 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535] { R4348 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R4350 += 1, R4300 += 1 };
  s0 -> s2 [0, 65535] { R4350 += 1, R4299 += 1, R4300 += 1 };
  s0 -> s0 [0, 65535] { R4349 += 1, R4350 += 1 };
  s0 -> s1 [81, 65535] { R4350 += 1, R4300 += 1 };
  s1 -> s1 [0, 79] { R4350 += 1, R4300 += 1 };
  s1 -> s1 [0, 65535] { R4350 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R4350 += 1, R4300 += 1 };
  s2 -> s1 [0, 79] { R4350 += 1, R4300 += 1 };
  s2 -> s2 [0, 65535] { R4350 += 1, R4299 += 1, R4300 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4350 += 1, R4300 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s0 -> s2 [0, 65535] { R4352 += 1, R4301 += 1, R4302 += 1 };
  s0 -> s0 [0, 65535] { R4351 += 1, R4352 += 1 };
  s0 -> s3 [0, 65535] { R4352 += 1, R4302 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s1 [81, 65535] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s1 -> s1 [0, 79] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535] { R4352 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4352 += 1, R4302 += 1 };
  s1 -> s1 [81, 65535] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s2 -> s1 [0, 79] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4352 += 1, R4301 += 1, R4302 += 1 };
  s2 -> s3 [0, 65535] { R4352 += 1, R4302 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s1 [81, 65535] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s3 -> s1 [0, 79] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535] { R4352 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4352 += 1, R4302 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s1 [81, 65535] { R4352 += 1, R4302 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535] { R4352 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4354 += 1, R4303 += 1, R4304 += 1 };
  s0 -> s0 [0, 65535] { R4353 += 1, R4354 += 1 };
  s0 -> s2 [0, 65535] { R4354 += 1, R4304 += 1 };
  s1 -> s1 [0, 65535] { R4354 += 1, R4303 += 1, R4304 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4354 += 1, R4304 += 1 };
  s2 -> s3 [0, 65535] { R4354 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4354 += 1, R4304 += 1 };
  s3 -> s3 [0, 65535] { R4354 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4356 += 1, R4306 += 1 };
  s0 -> s0 [0, 65535] { R4355 += 1, R4356 += 1 };
  s0 -> s2 [0, 65535] { R4356 += 1, R4305 += 1, R4306 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4356 += 1, R4306 += 1 };
  s1 -> s4 [0, 65535] { R4356 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4356 += 1, R4306 += 1 };
  s2 -> s2 [0, 65535] { R4356 += 1, R4305 += 1, R4306 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4356 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4358 += 1, R4308 += 1 };
  s0 -> s2 [0, 65535] { R4358 += 1, R4307 += 1, R4308 += 1 };
  s0 -> s0 [0, 65535] { R4357 += 1, R4358 += 1 };
  s1 -> s4 [0, 65535] { R4358 += 1 };
  s1 -> s1 [0, 65535] { R4358 += 1, R4308 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4358 += 1, R4308 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4358 += 1, R4307 += 1, R4308 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4358 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4359 += 1, R4360 += 1 };
  s0 -> s1 [0, 65535] { R4360 += 1, R4310 += 1 };
  s0 -> s2 [0, 65535] { R4360 += 1, R4309 += 1, R4310 += 1 };
  s1 -> s1 [0, 65535] { R4360 += 1, R4310 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4360 += 1 };
  s2 -> s1 [0, 65535] { R4360 += 1, R4310 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4360 += 1, R4309 += 1, R4310 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4360 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4362 += 1, R4311 += 1, R4312 += 1 };
  s0 -> s0 [0, 65535] { R4361 += 1, R4362 += 1 };
  s0 -> s2 [0, 65535] { R4362 += 1, R4312 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R4362 += 1, R4311 += 1, R4312 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4362 += 1, R4312 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R4362 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4362 += 1, R4312 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R4362 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4364 += 1, R4314 += 1 };
  s0 -> s0 [0, 65535] { R4363 += 1, R4364 += 1 };
  s0 -> s2 [0, 65535] { R4364 += 1, R4313 += 1, R4314 += 1 };
  s0 -> s3 [65, 65] { R4364 += 1, R4314 += 1 };
  s0 -> s4 [65, 65] { R4364 += 1, R4314 += 1 };
  s0 -> s5 [80, 80] { R4364 += 1, R4314 += 1 };
  s0 -> s1 [81, 65535] { R4364 += 1, R4314 += 1 };
  s1 -> s1 [0, 64] { R4364 += 1, R4314 += 1 };
  s1 -> s3 [65, 65] { R4364 += 1, R4314 += 1 };
  s1 -> s4 [65, 65] { R4364 += 1, R4314 += 1 };
  s1 -> s5 [80, 80] { R4364 += 1, R4314 += 1 };
  s1 -> s1 [81, 65535] { R4364 += 1, R4314 += 1 };
  s2 -> s1 [0, 64] { R4364 += 1, R4314 += 1 };
  s2 -> s2 [0, 65535] { R4364 += 1, R4313 += 1, R4314 += 1 };
  s2 -> s3 [65, 65] { R4364 += 1, R4314 += 1 };
  s2 -> s4 [65, 65] { R4364 += 1, R4314 += 1 };
  s2 -> s5 [80, 80] { R4364 += 1, R4314 += 1 };
  s2 -> s1 [81, 65535] { R4364 += 1, R4314 += 1 };
  s4 -> s4 [0, 65] { R4364 += 1, R4314 += 1 };
  s4 -> s7 [80, 80] { R4364 += 1, R4314 += 1 };
  s4 -> s4 [81, 65535] { R4364 += 1, R4314 += 1 };
  s5 -> s5 [0, 64] { R4364 += 1, R4314 += 1 };
  s5 -> s5 [0, 65535] { R4364 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4364 += 1, R4314 += 1 };
  s5 -> s8 [65, 65] { R4364 += 1, R4314 += 1 };
  s5 -> s5 [80, 65535] { R4364 += 1, R4314 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4364 += 1, R4314 += 1 };
  s7 -> s7 [0, 65535] { R4364 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R4364 += 1, R4314 += 1 };
  s8 -> s8 [0, 65535] { R4364 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R4366 += 1, R4315 += 1, R4316 += 1 };
  s0 -> s0 [0, 65535] { R4365 += 1, R4366 += 1 };
  s0 -> s3 [65, 65] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R4366 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R4366 += 1, R4315 += 1, R4316 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R4366 += 1 };
  s3 -> s3 [0, 65535] { R4366 += 1, R4316 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4366 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4366 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4368 += 1, R4318 += 1 };
  s0 -> s2 [0, 64] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R4367 += 1, R4368 += 1 };
  s0 -> s3 [0, 65535] { R4368 += 1, R4317 += 1, R4318 += 1 };
  s0 -> s4 [65, 65] { R4368 += 1, R4318 += 1 };
  s0 -> s5 [65, 65] { R4368 += 1, R4318 += 1 };
  s0 -> s6 [65, 65] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s0 -> s1 [66, 79] { R4368 += 1, R4318 += 1 };
  s0 -> s2 [66, 65535] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R4368 += 1, R4318 += 1 };
  s1 -> s1 [0, 64] { R4368 += 1, R4318 += 1 };
  s1 -> s1 [0, 65535] { R4368 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R4368 += 1, R4318 += 1 };
  s1 -> s5 [65, 65] { R4368 += 1, R4318 += 1 };
  s1 -> s1 [66, 79] { R4368 += 1, R4318 += 1 };
  s1 -> s1 [81, 65535] { R4368 += 1, R4318 += 1 };
  s2 -> s1 [0, 64] { R4368 += 1, R4318 += 1 };
  s2 -> s2 [0, 64] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4368 += 1, R4318 += 1 };
  s2 -> s5 [65, 65] { R4368 += 1, R4318 += 1 };
  s2 -> s6 [65, 65] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s2 -> s7 [65, 65] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s2 -> s1 [66, 79] { R4368 += 1, R4318 += 1 };
  s2 -> s2 [66, 65535] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R4368 += 1, R4318 += 1 };
  s3 -> s1 [0, 64] { R4368 += 1, R4318 += 1 };
  s3 -> s2 [0, 64] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4368 += 1, R4317 += 1, R4318 += 1 };
  s3 -> s4 [65, 65] { R4368 += 1, R4318 += 1 };
  s3 -> s5 [65, 65] { R4368 += 1, R4318 += 1 };
  s3 -> s6 [65, 65] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s3 -> s1 [66, 79] { R4368 += 1, R4318 += 1 };
  s3 -> s2 [66, 65535] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R4368 += 1, R4318 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R4368 += 1 };
  s5 -> s5 [0, 79] { R4368 += 1, R4318 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4368 += 1 };
  s5 -> s5 [81, 65535] { R4368 += 1, R4318 += 1 };
  s7 -> s5 [0, 79] { R4368 += 1, R4318 += 1 };
  s7 -> s7 [0, 65535] { R4368 += 1, R4318 += 1, R3509 += 1 };
  s7 -> s5 [81, 65535] { R4368 += 1, R4318 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s0 [0, 65535] { R4369 += 1, R4370 += 1 };
  s0 -> s2 [0, 65535] { R4370 += 1, R4319 += 1, R4320 += 1 };
  s0 -> s3 [65, 65] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4370 += 1 };
  s1 -> s3 [65, 65] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s2 [0, 65535] { R4370 += 1, R4319 += 1, R4320 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s3 [0, 65535] { R4370 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4370 += 1 };
  s4 -> s4 [0, 65535] { R4370 += 1, R4320 += 1, R3511 += 1, R3512 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4370 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s2 [0, 64] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s0 [0, 65535] { R4371 += 1, R4372 += 1 };
  s0 -> s3 [0, 65535] { R4372 += 1, R4321 += 1, R4322 += 1 };
  s0 -> s4 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s5 [65, 65] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s6 [65, 65] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s7 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s0 -> s1 [66, 65535] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s0 -> s2 [66, 65535] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s1 [0, 64] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s2 [0, 64] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s4 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s5 [65, 65] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s6 [65, 65] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s7 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s1 -> s1 [66, 65535] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s1 -> s2 [66, 65535] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s11 [0, 64] { R4372 += 1, R4322 += 1 };
  s2 -> s2 [0, 64] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s4 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s8 [65, 65] { R4372 += 1, R4322 += 1 };
  s2 -> s7 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s2 -> s12 [65, 65] { R4372 += 1, R4322 += 1 };
  s2 -> s11 [66, 65535] { R4372 += 1, R4322 += 1 };
  s2 -> s2 [66, 65535] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s1 [0, 64] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s2 [0, 64] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s3 [0, 65535] { R4372 += 1, R4321 += 1, R4322 += 1 };
  s3 -> s4 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s5 [65, 65] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s6 [65, 65] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s7 [65, 65] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s3 -> s1 [66, 65535] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s3 -> s2 [66, 65535] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s6 -> s6 [0, 65535] { R4372 += 1, R4322 += 1, R4091 += 1, R4092 += 1 };
  s6 -> s7 [0, 65535] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s7 -> s8 [0, 65535] { R4372 += 1, R4322 += 1 };
  s7 -> s7 [0, 65535] { R4372 += 1, R4322 += 1, R4092 += 1, R4093 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4372 += 1, R4322 += 1 };
  s8 -> s10 [0, 65535] { R4372 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4372 += 1 };
  s11 -> s11 [0, 64] { R4372 += 1, R4322 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4372 += 1 };
  s11 -> s8 [65, 65] { R4372 += 1, R4322 += 1 };
  s11 -> s12 [65, 65] { R4372 += 1, R4322 += 1 };
  s11 -> s11 [66, 65535] { R4372 += 1, R4322 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4372 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4374 += 1, R4324 += 1 };
  s0 -> s2 [0, 65535] { R4374 += 1, R4323 += 1, R4324 += 1 };
  s0 -> s0 [0, 65535] { R4373 += 1, R4374 += 1 };
  s0 -> s3 [65, 65] { R4374 += 1, R4324 += 1 };
  s0 -> s4 [65, 65] { R4374 += 1, R4324 += 1 };
  s0 -> s1 [66, 65535] { R4374 += 1, R4324 += 1 };
  s1 -> s1 [0, 64] { R4374 += 1, R4324 += 1 };
  s1 -> s1 [0, 65535] { R4374 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4374 += 1, R4324 += 1 };
  s1 -> s4 [65, 65] { R4374 += 1, R4324 += 1 };
  s1 -> s1 [66, 65535] { R4374 += 1, R4324 += 1 };
  s2 -> s1 [0, 64] { R4374 += 1, R4324 += 1 };
  s2 -> s2 [0, 65535] { R4374 += 1, R4323 += 1, R4324 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4374 += 1, R4324 += 1 };
  s2 -> s4 [65, 65] { R4374 += 1, R4324 += 1 };
  s2 -> s1 [66, 65535] { R4374 += 1, R4324 += 1 };
  s3 -> s3 [0, 65535] { R4374 += 1, R4324 += 1 };
  s3 -> s6 [0, 65535] { R4374 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4374 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4374 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s0 -> s2 [0, 64] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s0 -> s0 [0, 65535] { R4375 += 1, R4376 += 1 };
  s0 -> s3 [0, 65535] { R4376 += 1, R4325 += 1, R4326 += 1 };
  s0 -> s4 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s0 -> s5 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s0 -> s6 [65, 65] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s0 -> s7 [65, 65] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s0 -> s1 [66, 65535] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s0 -> s2 [66, 65535] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s1 -> s1 [0, 64] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s1 -> s2 [0, 64] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s1 -> s4 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s1 -> s5 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s1 -> s6 [65, 65] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s1 -> s7 [65, 65] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s1 -> s1 [66, 65535] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s1 -> s2 [66, 65535] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s2 -> s11 [0, 64] { R4376 += 1, R4326 += 1 };
  s2 -> s2 [0, 64] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s2 -> s8 [65, 65] { R4376 += 1, R4326 += 1 };
  s2 -> s4 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s2 -> s12 [65, 65] { R4376 += 1, R4326 += 1 };
  s2 -> s5 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s2 -> s11 [66, 65535] { R4376 += 1, R4326 += 1 };
  s2 -> s2 [66, 65535] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s3 -> s1 [0, 64] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s3 -> s2 [0, 64] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s3 -> s3 [0, 65535] { R4376 += 1, R4325 += 1, R4326 += 1 };
  s3 -> s4 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s3 -> s5 [65, 65] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s3 -> s6 [65, 65] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s3 -> s7 [65, 65] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s3 -> s1 [66, 65535] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s3 -> s2 [66, 65535] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s4 -> s8 [0, 65535] { R4376 += 1, R4326 += 1 };
  s4 -> s4 [0, 65535] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s6 -> s4 [0, 65535] { R4376 += 1, R4326 += 1, R4286 += 1, R4287 += 1 };
  s6 -> s6 [0, 65535] { R4376 += 1, R4326 += 1, R4285 += 1, R4286 += 1 };
  s8 -> s8 [0, 65535] { R4376 += 1, R4326 += 1 };
  s8 -> s9 [0, 65535] { R4376 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R4376 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R4376 += 1, R4326 += 1 };
  s11 -> s11 [0, 65535] { R4376 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R4376 += 1, R4326 += 1 };
  s11 -> s12 [65, 65] { R4376 += 1, R4326 += 1 };
  s11 -> s11 [66, 65535] { R4376 += 1, R4326 += 1 };
  s12 -> s12 [0, 65535] { R4376 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4378 += 1, R4328 += 1 };
  s0 -> s0 [0, 65535] { R4377 += 1, R4378 += 1 };
  s0 -> s2 [0, 65535] { R4378 += 1, R4327 += 1, R4328 += 1 };
  s0 -> s3 [65, 65] { R4378 += 1, R4328 += 1 };
  s0 -> s4 [65, 65] { R4378 += 1, R4328 += 1 };
  s0 -> s1 [66, 65535] { R4378 += 1, R4328 += 1 };
  s1 -> s1 [0, 64] { R4378 += 1, R4328 += 1 };
  s1 -> s1 [0, 65535] { R4378 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4378 += 1, R4328 += 1 };
  s1 -> s4 [65, 65] { R4378 += 1, R4328 += 1 };
  s1 -> s1 [66, 65535] { R4378 += 1, R4328 += 1 };
  s2 -> s1 [0, 64] { R4378 += 1, R4328 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4378 += 1, R4327 += 1, R4328 += 1 };
  s2 -> s3 [65, 65] { R4378 += 1, R4328 += 1 };
  s2 -> s4 [65, 65] { R4378 += 1, R4328 += 1 };
  s2 -> s1 [66, 65535] { R4378 += 1, R4328 += 1 };
  s3 -> s6 [0, 65535] { R4378 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4378 += 1, R4328 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4378 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4378 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4310 && R2 = R4378 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4291 = 0 && R4292 = R4310 && R4293 = 0 && R4294 = R4310 && R4295 = 0 && R4296 = R4310 && R4297 = 0 && R4298 = R4310 && R4299 = 0 && R4300 = R4310 && R4301 = 0 && R4302 = R4310 && R4303 = 0 && R4304 = R4310 && R4305 = 0 && R4306 = R4310 && R4307 = 0 && R4308 = R4310 && R4309 = 0 && R4313 = 0 && R4314 = 0 && R4317 = 0 && R4318 = 0 && R4321 = 0 && R4322 = 0 && R4325 = 0 && R4326 = 0 && R4329 = 10 && R4330 = R4378 && R4331 = 10 && R4332 = R4378 && R4333 = 10 && R4334 = R4378 && R4335 = 10 && R4336 = R4378 && R4337 = 10 && R4338 = R4378 && R4339 = 10 && R4340 = R4378 && R4341 = 10 && R4342 = R4378 && R4343 = 10 && R4344 = R4378 && R4345 = 10 && R4346 = R4378 && R4347 = 10 && R4348 = R4378 && R4349 = 10 && R4350 = R4378 && R4351 = 10 && R4352 = R4378 && R4353 = 10 && R4354 = R4378 && R4355 = 10 && R4356 = R4378 && R4357 = 10 && R4358 = R4378 && R4359 = 10 && R4360 = R4378 && R4361 = 10 && R4362 = R4378 && R4363 = 10 && R4364 = R4378 && R4365 = 10 && R4366 = R4378 && R4367 = 10 && R4368 = R4378 && R4369 = 10 && R4370 = R4378 && R4371 = 10 && R4372 = R4378 && R4373 = 10 && R4374 = R4378 && R4375 = 10 && R4376 = R4378 && R4377 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4310 && 9 < R4378 && (R14 = 0 || (R4311 = 0 && R4312 = 0)) && (R14 = 0 || (R4315 = 0 && R4316 = 0)) && (R14 = 0 || (R4319 = 0 && R4320 = 0)) && (R14 = 0 || (R4323 = 0 && R4324 = 0)) && (R14 = 0 || (R4327 = 0 && R4328 = 0)) && (R4096 + R4093 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R4096 + R4093 = 0 || (R4094 + R4091 = 0 && R4095 + R4092 = 0)) && (R4290 + R4287 = 0 || (R4288 + R4285 = 0 && R4289 + R4286 = 0));
// End of Parikh automata intersection problem
