// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4671, R4672, R4673, R4674, R4675, R4676, R4865, R4866, R4867, R4868, R4869, R4870, R4871, R4872, R4873, R4874, R4875, R4876, R4877, R4878, R4879, R4880, R4881, R4882, R4883, R4884, R4885, R4886, R4887, R4888, R4889, R4890, R4891, R4892, R4893, R4894, R4895, R4896, R4897, R4898, R4899, R4900, R4901, R4902, R4903, R4904, R4905, R4906, R4907, R4908, R4909, R4910, R4911, R4912, R4913, R4914, R4915, R4916, R4917, R4918, R4919, R4920, R4921, R4922, R4923, R4924, R4925, R4926, R4927, R4928, R4929, R4930, R4931, R4932, R4933, R4934, R4935, R4936, R4937, R4938, R4939, R4940, R4941, R4942, R4943, R4944, R4945, R4946, R4947, R4948, R4949, R4950, R4951, R4952, R4953, R4954, R4955, R4956, R4957, R4958, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4910 += 1 };
  s0 -> s0 [0, 65535] { R4909 += 1, R4910 += 1 };
  s0 -> s1 [45, 45] { R4910 += 1 };
  s0 -> s2 [46, 46] { R4910 += 1 };
  s0 -> s1 [48, 62] { R4910 += 1 };
  s0 -> s3 [65, 65] { R4910 += 1 };
  s0 -> s1 [66, 65535] { R4910 += 1 };
  s1 -> s1 [0, 43] { R4910 += 1 };
  s1 -> s1 [45, 45] { R4910 += 1 };
  s1 -> s2 [46, 46] { R4910 += 1 };
  s1 -> s1 [48, 62] { R4910 += 1 };
  s1 -> s3 [65, 65] { R4910 += 1 };
  s1 -> s1 [66, 65535] { R4910 += 1 };
  s2 -> s1 [0, 43] { R4910 += 1 };
  s2 -> s1 [45, 45] { R4910 += 1 };
  s2 -> s2 [46, 46] { R4910 += 1 };
  s2 -> s1 [48, 62] { R4910 += 1 };
  s2 -> s3 [65, 65] { R4910 += 1 };
  s2 -> s1 [66, 114] { R4910 += 1 };
  s2 -> s8 [115, 115] { R4910 += 1 };
  s2 -> s1 [116, 65535] { R4910 += 1 };
  s3 -> s3 [0, 43] { R4910 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4910 += 1 };
  s3 -> s4 [46, 46] { R4910 += 1 };
  s3 -> s3 [48, 62] { R4910 += 1 };
  s3 -> s3 [65, 65535] { R4910 += 1 };
  s4 -> s3 [0, 43] { R4910 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4910 += 1 };
  s4 -> s4 [46, 46] { R4910 += 1 };
  s4 -> s3 [48, 62] { R4910 += 1 };
  s4 -> s3 [65, 114] { R4910 += 1 };
  s4 -> s5 [115, 115] { R4910 += 1 };
  s4 -> s3 [116, 65535] { R4910 += 1 };
  s5 -> s3 [0, 43] { R4910 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4910 += 1 };
  s5 -> s4 [46, 46] { R4910 += 1 };
  s5 -> s3 [48, 62] { R4910 += 1 };
  s5 -> s3 [65, 110] { R4910 += 1 };
  s5 -> s6 [111, 111] { R4910 += 1 };
  s5 -> s3 [112, 65535] { R4910 += 1 };
  s6 -> s3 [0, 43] { R4910 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4910 += 1 };
  s6 -> s4 [46, 46] { R4910 += 1 };
  s6 -> s3 [48, 62] { R4910 += 1 };
  s6 -> s3 [65, 98] { R4910 += 1 };
  s6 -> s7 [99, 99] { R4910 += 1 };
  s6 -> s3 [100, 65535] { R4910 += 1 };
  s7 -> s3 [0, 43] { R4910 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4910 += 1 };
  s7 -> s4 [46, 46] { R4910 += 1 };
  s7 -> s3 [48, 62] { R4910 += 1 };
  s7 -> s3 [65, 106] { R4910 += 1 };
  s7 -> s3 [108, 65535] { R4910 += 1 };
  s8 -> s1 [0, 43] { R4910 += 1 };
  s8 -> s1 [45, 45] { R4910 += 1 };
  s8 -> s2 [46, 46] { R4910 += 1 };
  s8 -> s1 [48, 62] { R4910 += 1 };
  s8 -> s3 [65, 65] { R4910 += 1 };
  s8 -> s1 [66, 110] { R4910 += 1 };
  s8 -> s9 [111, 111] { R4910 += 1 };
  s8 -> s1 [112, 65535] { R4910 += 1 };
  s9 -> s1 [0, 43] { R4910 += 1 };
  s9 -> s1 [45, 45] { R4910 += 1 };
  s9 -> s2 [46, 46] { R4910 += 1 };
  s9 -> s1 [48, 62] { R4910 += 1 };
  s9 -> s3 [65, 65] { R4910 += 1 };
  s9 -> s1 [66, 98] { R4910 += 1 };
  s9 -> s10 [99, 99] { R4910 += 1 };
  s9 -> s1 [100, 65535] { R4910 += 1 };
  s10 -> s1 [0, 43] { R4910 += 1 };
  s10 -> s1 [45, 45] { R4910 += 1 };
  s10 -> s2 [46, 46] { R4910 += 1 };
  s10 -> s1 [48, 62] { R4910 += 1 };
  s10 -> s3 [65, 65] { R4910 += 1 };
  s10 -> s1 [66, 106] { R4910 += 1 };
  s10 -> s1 [108, 65535] { R4910 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R4911 += 1, R4912 += 1 };
  s0 -> s1 [0, 65535] { R4912 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4912 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4914 += 1 };
  s0 -> s0 [0, 65535] { R4913 += 1, R4914 += 1 };
  s0 -> s2 [0, 65535] { R4914 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R4914 += 1 };
  s0 -> s1 [59, 65535] { R4914 += 1 };
  s1 -> s1 [0, 57] { R4914 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4914 += 1 };
  s1 -> s1 [59, 65535] { R4914 += 1 };
  s2 -> s1 [0, 57] { R4914 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4914 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4914 += 1 };
  s2 -> s1 [59, 65535] { R4914 += 1 };
  s3 -> s3 [0, 65535] { R4914 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4916 += 1 };
  s0 -> s0 [0, 65535] { R4915 += 1, R4916 += 1 };
  s0 -> s2 [0, 65535] { R4916 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4916 += 1 };
  s0 -> s1 [66, 65535] { R4916 += 1 };
  s1 -> s1 [0, 64] { R4916 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4916 += 1 };
  s1 -> s1 [66, 65535] { R4916 += 1 };
  s2 -> s1 [0, 64] { R4916 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4916 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4916 += 1 };
  s2 -> s1 [66, 65535] { R4916 += 1 };
  s3 -> s3 [0, 65535] { R4916 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4918 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4917 += 1, R4918 += 1 };
  s0 -> s2 [0, 65535] { R4918 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R4918 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4918 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4918 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4918 += 1 };
  s2 -> s1 [0, 90] { R4918 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4918 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R4918 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4918 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4918 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4918 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R4919 += 1, R4920 += 1 };
  s0 -> s1 [0, 65535] { R4920 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R4920 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4920 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R4920 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4920 += 1 };
  s2 -> s2 [0, 65535] { R4920 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4920 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4922 += 1, R4872 += 1 };
  s0 -> s2 [0, 65535] { R4922 += 1, R4871 += 1, R4872 += 1 };
  s0 -> s0 [0, 65535] { R4921 += 1, R4922 += 1 };
  s0 -> s1 [66, 65535] { R4922 += 1, R4872 += 1 };
  s1 -> s1 [0, 64] { R4922 += 1, R4872 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4922 += 1 };
  s1 -> s1 [66, 65535] { R4922 += 1, R4872 += 1 };
  s2 -> s1 [0, 64] { R4922 += 1, R4872 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4922 += 1, R4871 += 1, R4872 += 1 };
  s2 -> s1 [66, 65535] { R4922 += 1, R4872 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4924 += 1, R4874 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R4924 += 1, R4873 += 1, R4874 += 1 };
  s0 -> s0 [0, 65535] { R4923 += 1, R4924 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4924 += 1, R4874 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R4924 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4924 += 1, R4874 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R4924 += 1, R4873 += 1, R4874 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4924 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4926 += 1, R4876 += 1 };
  s0 -> s2 [0, 65535] { R4926 += 1, R4875 += 1, R4876 += 1 };
  s0 -> s0 [0, 65535] { R4925 += 1, R4926 += 1 };
  s0 -> s1 [80, 65535] { R4926 += 1, R4876 += 1 };
  s1 -> s1 [0, 65] { R4926 += 1, R4876 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4926 += 1 };
  s1 -> s1 [80, 65535] { R4926 += 1, R4876 += 1 };
  s2 -> s1 [0, 65] { R4926 += 1, R4876 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4926 += 1, R4875 += 1, R4876 += 1 };
  s2 -> s1 [80, 65535] { R4926 += 1, R4876 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4928 += 1, R4877 += 1, R4878 += 1 };
  s0 -> s2 [0, 65535] { R4928 += 1, R4878 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R4927 += 1, R4928 += 1 };
  s1 -> s1 [0, 65535] { R4928 += 1, R4877 += 1, R4878 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4928 += 1, R4878 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4928 += 1, R4878 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535] { R4928 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4928 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R4930 += 1, R4880 += 1 };
  s0 -> s0 [0, 65535] { R4929 += 1, R4930 += 1 };
  s0 -> s2 [0, 65535] { R4930 += 1, R4879 += 1, R4880 += 1 };
  s0 -> s1 [81, 65535] { R4930 += 1, R4880 += 1 };
  s1 -> s1 [0, 79] { R4930 += 1, R4880 += 1 };
  s1 -> s1 [0, 65535] { R4930 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R4930 += 1, R4880 += 1 };
  s2 -> s1 [0, 79] { R4930 += 1, R4880 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4930 += 1, R4879 += 1, R4880 += 1 };
  s2 -> s1 [81, 65535] { R4930 += 1, R4880 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R4932 += 1, R4882 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R4931 += 1, R4932 += 1 };
  s0 -> s1 [0, 65535] { R4932 += 1, R4882 += 1 };
  s0 -> s2 [0, 65535] { R4932 += 1, R4881 += 1, R4882 += 1 };
  s0 -> s1 [81, 65535] { R4932 += 1, R4882 += 1, R4382 += 1 };
  s1 -> s1 [0, 79] { R4932 += 1, R4882 += 1, R4382 += 1 };
  s1 -> s4 [0, 65535] { R4932 += 1 };
  s1 -> s1 [0, 65535] { R4932 += 1, R4882 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R4932 += 1, R4882 += 1, R4382 += 1 };
  s2 -> s1 [0, 79] { R4932 += 1, R4882 += 1, R4382 += 1 };
  s2 -> s1 [0, 65535] { R4932 += 1, R4882 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4932 += 1, R4881 += 1, R4882 += 1 };
  s2 -> s1 [81, 65535] { R4932 += 1, R4882 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4932 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4933 += 1, R4934 += 1 };
  s0 -> s1 [0, 65535] { R4934 += 1, R4884 += 1, R4675 += 1, R4676 += 1 };
  s0 -> s2 [0, 65535] { R4934 += 1, R4884 += 1 };
  s0 -> s3 [0, 65535] { R4934 += 1, R4883 += 1, R4884 += 1 };
  s1 -> s1 [0, 65535] { R4934 += 1, R4884 += 1, R4675 += 1, R4676 += 1 };
  s1 -> s2 [0, 65535] { R4934 += 1, R4884 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4934 += 1 };
  s2 -> s2 [0, 65535] { R4934 += 1, R4884 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4934 += 1 };
  s3 -> s1 [0, 65535] { R4934 += 1, R4884 += 1, R4675 += 1, R4676 += 1 };
  s3 -> s2 [0, 65535] { R4934 += 1, R4884 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4934 += 1, R4883 += 1, R4884 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4934 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4935 += 1, R4936 += 1 };
  s0 -> s1 [0, 65535] { R4936 += 1, R4885 += 1, R4886 += 1 };
  s0 -> s2 [0, 65535] { R4936 += 1, R4886 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4936 += 1, R4885 += 1, R4886 += 1 };
  s1 -> s2 [0, 65535] { R4936 += 1, R4886 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4936 += 1, R4886 += 1 };
  s2 -> s4 [0, 65535] { R4936 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4936 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4938 += 1, R4887 += 1, R4888 += 1 };
  s0 -> s2 [0, 65535] { R4938 += 1, R4888 += 1 };
  s0 -> s0 [0, 65535] { R4937 += 1, R4938 += 1 };
  s1 -> s1 [0, 65535] { R4938 += 1, R4887 += 1, R4888 += 1 };
  s1 -> s2 [0, 65535] { R4938 += 1, R4888 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4938 += 1, R4888 += 1 };
  s2 -> s3 [0, 65535] { R4938 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4938 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4939 += 1, R4940 += 1 };
  s0 -> s1 [0, 65535] { R4940 += 1, R4889 += 1, R4890 += 1 };
  s0 -> s2 [0, 65535] { R4940 += 1, R4890 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4940 += 1, R4889 += 1, R4890 += 1 };
  s1 -> s2 [0, 65535] { R4940 += 1, R4890 += 1 };
  s2 -> s3 [0, 65535] { R4940 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4940 += 1, R4890 += 1 };
  s3 -> s3 [0, 65535] { R4940 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4941 += 1, R4942 += 1 };
  s0 -> s1 [0, 65535] { R4942 += 1, R4892 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R4942 += 1, R4891 += 1, R4892 += 1 };
  s1 -> s4 [0, 65535] { R4942 += 1 };
  s1 -> s1 [0, 65535] { R4942 += 1, R4892 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4942 += 1, R4892 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4942 += 1, R4891 += 1, R4892 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4942 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4944 += 1, R4894 += 1 };
  s0 -> s2 [0, 65535] { R4944 += 1, R4893 += 1, R4894 += 1 };
  s0 -> s0 [0, 65535] { R4943 += 1, R4944 += 1 };
  s0 -> s3 [65, 65] { R4944 += 1, R4894 += 1 };
  s0 -> s4 [65, 65] { R4944 += 1, R4894 += 1 };
  s0 -> s5 [80, 80] { R4944 += 1, R4894 += 1 };
  s0 -> s1 [81, 65535] { R4944 += 1, R4894 += 1 };
  s1 -> s1 [0, 64] { R4944 += 1, R4894 += 1 };
  s1 -> s3 [65, 65] { R4944 += 1, R4894 += 1 };
  s1 -> s4 [65, 65] { R4944 += 1, R4894 += 1 };
  s1 -> s5 [80, 80] { R4944 += 1, R4894 += 1 };
  s1 -> s1 [81, 65535] { R4944 += 1, R4894 += 1 };
  s2 -> s1 [0, 64] { R4944 += 1, R4894 += 1 };
  s2 -> s2 [0, 65535] { R4944 += 1, R4893 += 1, R4894 += 1 };
  s2 -> s3 [65, 65] { R4944 += 1, R4894 += 1 };
  s2 -> s4 [65, 65] { R4944 += 1, R4894 += 1 };
  s2 -> s5 [80, 80] { R4944 += 1, R4894 += 1 };
  s2 -> s1 [81, 65535] { R4944 += 1, R4894 += 1 };
  s3 -> s3 [0, 65] { R4944 += 1, R4894 += 1 };
  s3 -> s8 [80, 80] { R4944 += 1, R4894 += 1 };
  s3 -> s3 [81, 65535] { R4944 += 1, R4894 += 1 };
  s5 -> s5 [0, 64] { R4944 += 1, R4894 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4944 += 1 };
  s5 -> s7 [65, 65] { R4944 += 1, R4894 += 1 };
  s5 -> s8 [65, 65] { R4944 += 1, R4894 += 1 };
  s5 -> s5 [80, 65535] { R4944 += 1, R4894 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4944 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R4944 += 1, R4894 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4944 += 1 };
  s8 -> s8 [80, 65535] { R4944 += 1, R4894 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R4945 += 1, R4946 += 1 };
  s0 -> s2 [0, 65535] { R4946 += 1, R4895 += 1, R4896 += 1 };
  s0 -> s3 [65, 65] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4946 += 1 };
  s1 -> s3 [65, 65] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4946 += 1, R4895 += 1, R4896 += 1 };
  s2 -> s3 [65, 65] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4946 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4946 += 1 };
  s4 -> s4 [0, 65535] { R4946 += 1, R4896 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4946 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s0 -> s2 [0, 64] { R4948 += 1, R4898 += 1 };
  s0 -> s3 [0, 65535] { R4948 += 1, R4897 += 1, R4898 += 1 };
  s0 -> s0 [0, 65535] { R4947 += 1, R4948 += 1 };
  s0 -> s4 [65, 65] { R4948 += 1, R4898 += 1 };
  s0 -> s5 [65, 65] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R4948 += 1, R4898 += 1 };
  s0 -> s7 [65, 65] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s0 -> s2 [66, 79] { R4948 += 1, R4898 += 1 };
  s0 -> s1 [66, 65535] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s0 -> s2 [81, 65535] { R4948 += 1, R4898 += 1 };
  s1 -> s1 [0, 64] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s1 -> s2 [0, 64] { R4948 += 1, R4898 += 1 };
  s1 -> s4 [65, 65] { R4948 += 1, R4898 += 1 };
  s1 -> s5 [65, 65] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s1 -> s6 [65, 65] { R4948 += 1, R4898 += 1 };
  s1 -> s7 [65, 65] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s1 -> s2 [66, 79] { R4948 += 1, R4898 += 1 };
  s1 -> s1 [66, 65535] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s1 -> s2 [81, 65535] { R4948 += 1, R4898 += 1 };
  s2 -> s2 [0, 64] { R4948 += 1, R4898 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4948 += 1 };
  s2 -> s4 [65, 65] { R4948 += 1, R4898 += 1 };
  s2 -> s6 [65, 65] { R4948 += 1, R4898 += 1 };
  s2 -> s2 [66, 79] { R4948 += 1, R4898 += 1 };
  s2 -> s2 [81, 65535] { R4948 += 1, R4898 += 1 };
  s3 -> s1 [0, 64] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s3 -> s2 [0, 64] { R4948 += 1, R4898 += 1 };
  s3 -> s3 [0, 65535] { R4948 += 1, R4897 += 1, R4898 += 1 };
  s3 -> s4 [65, 65] { R4948 += 1, R4898 += 1 };
  s3 -> s5 [65, 65] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R4948 += 1, R4898 += 1 };
  s3 -> s7 [65, 65] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s3 -> s2 [66, 79] { R4948 += 1, R4898 += 1 };
  s3 -> s1 [66, 65535] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s3 -> s2 [81, 65535] { R4948 += 1, R4898 += 1 };
  s4 -> s4 [0, 79] { R4948 += 1, R4898 += 1 };
  s4 -> s4 [0, 65535] { R4948 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R4948 += 1, R4898 += 1 };
  s5 -> s4 [0, 79] { R4948 += 1, R4898 += 1 };
  s5 -> s5 [0, 65535] { R4948 += 1, R4898 += 1, R3509 += 1 };
  s5 -> s4 [81, 65535] { R4948 += 1, R4898 += 1 };
  s6 -> s6 [0, 65535] { R4948 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s2, s4, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R4950 += 1, R4899 += 1, R4900 += 1 };
  s0 -> s0 [0, 65535] { R4949 += 1, R4950 += 1 };
  s0 -> s4 [65, 65] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [66, 79] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s0 -> s1 [66, 65535] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [81, 65535] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [0, 64] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s1 -> s4 [65, 65] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s1 -> s5 [65, 65] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s6 [65, 65] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s1 -> s7 [65, 65] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [66, 79] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [81, 65535] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4950 += 1 };
  s2 -> s4 [65, 65] { R4950 += 1, R4900 += 1 };
  s2 -> s6 [65, 65] { R4950 += 1, R4900 += 1 };
  s2 -> s2 [66, 79] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R4950 += 1, R4900 += 1 };
  s2 -> s2 [81, 65535] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R4950 += 1, R4899 += 1, R4900 += 1 };
  s3 -> s4 [65, 65] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [66, 79] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s3 -> s1 [66, 65535] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [81, 65535] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s4 -> s4 [0, 79] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R4950 += 1, R4900 += 1 };
  s4 -> s9 [0, 65535] { R4950 += 1 };
  s4 -> s4 [81, 65535] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4950 += 1 };
  s7 -> s4 [0, 79] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s7 -> s7 [0, 65535] { R4950 += 1, R4900 += 1, R4379 += 1, R4380 += 1 };
  s7 -> s4 [81, 65535] { R4950 += 1, R4900 += 1, R4380 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4950 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s2 [0, 64] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s3 [0, 65535] { R4952 += 1, R4901 += 1, R4902 += 1 };
  s0 -> s0 [0, 65535] { R4951 += 1, R4952 += 1 };
  s0 -> s4 [65, 65] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s5 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s6 [65, 65] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s7 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s1 [66, 65535] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s2 [66, 65535] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s1 [0, 64] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s2 [0, 64] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s4 [65, 65] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s5 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s6 [65, 65] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s7 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s1 [66, 65535] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s2 [66, 65535] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [0, 64] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4952 += 1 };
  s2 -> s5 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s7 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [66, 65535] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s1 [0, 64] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s2 [0, 64] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s3 [0, 65535] { R4952 += 1, R4901 += 1, R4902 += 1 };
  s3 -> s4 [65, 65] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s5 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s6 [65, 65] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s7 [65, 65] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s1 [66, 65535] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s2 [66, 65535] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s5 -> s5 [0, 65535] { R4952 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4952 += 1, R4902 += 1, R4671 += 1, R4672 += 1 };
  s6 -> s7 [0, 65535] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R4952 += 1 };
  s7 -> s7 [0, 65535] { R4952 += 1, R4902 += 1, R4672 += 1, R4673 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4952 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4954 += 1, R4904 += 1 };
  s0 -> s2 [0, 65535] { R4954 += 1, R4903 += 1, R4904 += 1 };
  s0 -> s0 [0, 65535] { R4953 += 1, R4954 += 1 };
  s0 -> s3 [65, 65] { R4954 += 1, R4904 += 1 };
  s0 -> s4 [65, 65] { R4954 += 1, R4904 += 1 };
  s0 -> s1 [66, 65535] { R4954 += 1, R4904 += 1 };
  s1 -> s1 [0, 64] { R4954 += 1, R4904 += 1 };
  s1 -> s1 [0, 65535] { R4954 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4954 += 1, R4904 += 1 };
  s1 -> s4 [65, 65] { R4954 += 1, R4904 += 1 };
  s1 -> s1 [66, 65535] { R4954 += 1, R4904 += 1 };
  s2 -> s1 [0, 64] { R4954 += 1, R4904 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4954 += 1, R4903 += 1, R4904 += 1 };
  s2 -> s3 [65, 65] { R4954 += 1, R4904 += 1 };
  s2 -> s4 [65, 65] { R4954 += 1, R4904 += 1 };
  s2 -> s1 [66, 65535] { R4954 += 1, R4904 += 1 };
  s3 -> s3 [0, 65535] { R4954 += 1, R4904 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4954 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4954 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4954 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s0 -> s2 [0, 64] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s0 -> s0 [0, 65535] { R4955 += 1, R4956 += 1 };
  s0 -> s3 [0, 65535] { R4956 += 1, R4905 += 1, R4906 += 1 };
  s0 -> s4 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s0 -> s5 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s0 -> s6 [65, 65] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s0 -> s7 [65, 65] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s0 -> s1 [66, 65535] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s0 -> s2 [66, 65535] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s1 -> s1 [0, 64] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s1 -> s2 [0, 64] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s1 -> s4 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s1 -> s5 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s1 -> s6 [65, 65] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s1 -> s7 [65, 65] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s1 -> s1 [66, 65535] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s1 -> s2 [66, 65535] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s2 -> s11 [0, 64] { R4956 += 1, R4906 += 1 };
  s2 -> s2 [0, 64] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s2 -> s4 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s2 -> s5 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s2 -> s8 [65, 65] { R4956 += 1, R4906 += 1 };
  s2 -> s12 [65, 65] { R4956 += 1, R4906 += 1 };
  s2 -> s11 [66, 65535] { R4956 += 1, R4906 += 1 };
  s2 -> s2 [66, 65535] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s3 -> s1 [0, 64] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s3 -> s2 [0, 64] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s3 -> s3 [0, 65535] { R4956 += 1, R4905 += 1, R4906 += 1 };
  s3 -> s4 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s3 -> s5 [65, 65] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s3 -> s6 [65, 65] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s3 -> s7 [65, 65] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s3 -> s1 [66, 65535] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s3 -> s2 [66, 65535] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s5 -> s5 [0, 65535] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s5 -> s8 [0, 65535] { R4956 += 1, R4906 += 1 };
  s7 -> s5 [0, 65535] { R4956 += 1, R4906 += 1, R4866 += 1, R4867 += 1 };
  s7 -> s7 [0, 65535] { R4956 += 1, R4906 += 1, R4865 += 1, R4866 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R4956 += 1 };
  s8 -> s8 [0, 65535] { R4956 += 1, R4906 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4956 += 1 };
  s11 -> s11 [0, 64] { R4956 += 1, R4906 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4956 += 1 };
  s11 -> s8 [65, 65] { R4956 += 1, R4906 += 1 };
  s11 -> s12 [65, 65] { R4956 += 1, R4906 += 1 };
  s11 -> s11 [66, 65535] { R4956 += 1, R4906 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4956 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4958 += 1, R4908 += 1 };
  s0 -> s2 [0, 65535] { R4958 += 1, R4907 += 1, R4908 += 1 };
  s0 -> s0 [0, 65535] { R4957 += 1, R4958 += 1 };
  s0 -> s3 [65, 65] { R4958 += 1, R4908 += 1 };
  s0 -> s4 [65, 65] { R4958 += 1, R4908 += 1 };
  s0 -> s1 [66, 65535] { R4958 += 1, R4908 += 1 };
  s1 -> s1 [0, 64] { R4958 += 1, R4908 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4958 += 1 };
  s1 -> s3 [65, 65] { R4958 += 1, R4908 += 1 };
  s1 -> s4 [65, 65] { R4958 += 1, R4908 += 1 };
  s1 -> s1 [66, 65535] { R4958 += 1, R4908 += 1 };
  s2 -> s1 [0, 64] { R4958 += 1, R4908 += 1 };
  s2 -> s2 [0, 65535] { R4958 += 1, R4907 += 1, R4908 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4958 += 1, R4908 += 1 };
  s2 -> s4 [65, 65] { R4958 += 1, R4908 += 1 };
  s2 -> s1 [66, 65535] { R4958 += 1, R4908 += 1 };
  s3 -> s3 [0, 65535] { R4958 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4958 += 1 };
  s4 -> s4 [0, 65535] { R4958 += 1, R4908 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4958 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4890 && R2 = R4958 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4871 = 0 && R4872 = R4890 && R4873 = 0 && R4874 = R4890 && R4875 = 0 && R4876 = R4890 && R4877 = 0 && R4878 = R4890 && R4879 = 0 && R4880 = R4890 && R4881 = 0 && R4882 = R4890 && R4883 = 0 && R4884 = R4890 && R4885 = 0 && R4886 = R4890 && R4887 = 0 && R4888 = R4890 && R4889 = 0 && R4893 = 0 && R4894 = 0 && R4897 = 0 && R4898 = 0 && R4899 = 0 && R4900 = 0 && R4901 = 0 && R4902 = 0 && R4905 = 0 && R4906 = 0 && R4909 = 10 && R4910 = R4958 && R4911 = 10 && R4912 = R4958 && R4913 = 10 && R4914 = R4958 && R4915 = 10 && R4916 = R4958 && R4917 = 10 && R4918 = R4958 && R4919 = 10 && R4920 = R4958 && R4921 = 10 && R4922 = R4958 && R4923 = 10 && R4924 = R4958 && R4925 = 10 && R4926 = R4958 && R4927 = 10 && R4928 = R4958 && R4929 = 10 && R4930 = R4958 && R4931 = 10 && R4932 = R4958 && R4933 = 10 && R4934 = R4958 && R4935 = 10 && R4936 = R4958 && R4937 = 10 && R4938 = R4958 && R4939 = 10 && R4940 = R4958 && R4941 = 10 && R4942 = R4958 && R4943 = 10 && R4944 = R4958 && R4945 = 10 && R4946 = R4958 && R4947 = 10 && R4948 = R4958 && R4949 = 10 && R4950 = R4958 && R4951 = 10 && R4952 = R4958 && R4953 = 10 && R4954 = R4958 && R4955 = 10 && R4956 = R4958 && R4957 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4890 && 9 < R4958 && (R14 = 0 || (R4891 = 0 && R4892 = 0)) && (R14 = 0 || (R4895 = 0 && R4896 = 0)) && (R14 = 0 || (R4903 = 0 && R4904 = 0)) && (R14 = 0 || (R4907 = 0 && R4908 = 0)) && (R4676 + R4673 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4676 + R4673 = 0 || (R4674 + R4671 = 0 && R4675 + R4672 = 0)) && (R4870 + R4867 = 0 || (R4868 + R4865 = 0 && R4869 + R4866 = 0));
// End of Parikh automata intersection problem
