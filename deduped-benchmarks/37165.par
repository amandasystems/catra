// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4383, R4384, R4385, R4386, R4387, R4388, R4389, R4390, R4391, R4392, R4393, R4394, R4395, R4396, R4397, R4398, R4399, R4400, R4401, R4402, R4403, R4404, R4405, R4406, R4407, R4408, R4409, R4410, R4411, R4412, R4413, R4414, R4415, R4416, R4417, R4418, R4419, R4420, R4421, R4422, R4423, R4424, R4425, R4426, R4427, R4428, R4429, R4430, R4431, R4432, R4433, R4434, R4435, R4436, R4437, R4438, R4439, R4440, R4441, R4442, R4443, R4444, R4445, R4446, R4447, R4448, R4449, R4450, R4451, R4452, R4453, R4454, R4455, R4456, R4457, R4458, R4459, R4460, R4461, R4462, R4463, R4464, R4465, R4466, R4467, R4468, R4469, R4470, R4471, R4472, R4473, R4474, R4475, R4476, R4477, R4478, R4479, R4480, R4481, R4482, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4434 += 1 };
  s0 -> s0 [0, 65535] { R4433 += 1, R4434 += 1 };
  s0 -> s1 [45, 45] { R4434 += 1 };
  s0 -> s2 [46, 46] { R4434 += 1 };
  s0 -> s1 [48, 62] { R4434 += 1 };
  s0 -> s3 [65, 65] { R4434 += 1 };
  s0 -> s1 [66, 65535] { R4434 += 1 };
  s1 -> s1 [0, 43] { R4434 += 1 };
  s1 -> s1 [45, 45] { R4434 += 1 };
  s1 -> s2 [46, 46] { R4434 += 1 };
  s1 -> s1 [48, 62] { R4434 += 1 };
  s1 -> s3 [65, 65] { R4434 += 1 };
  s1 -> s1 [66, 65535] { R4434 += 1 };
  s2 -> s1 [0, 43] { R4434 += 1 };
  s2 -> s1 [45, 45] { R4434 += 1 };
  s2 -> s2 [46, 46] { R4434 += 1 };
  s2 -> s1 [48, 62] { R4434 += 1 };
  s2 -> s3 [65, 65] { R4434 += 1 };
  s2 -> s1 [66, 114] { R4434 += 1 };
  s2 -> s8 [115, 115] { R4434 += 1 };
  s2 -> s1 [116, 65535] { R4434 += 1 };
  s3 -> s3 [0, 43] { R4434 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4434 += 1 };
  s3 -> s4 [46, 46] { R4434 += 1 };
  s3 -> s3 [48, 62] { R4434 += 1 };
  s3 -> s3 [65, 65535] { R4434 += 1 };
  s4 -> s3 [0, 43] { R4434 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4434 += 1 };
  s4 -> s4 [46, 46] { R4434 += 1 };
  s4 -> s3 [48, 62] { R4434 += 1 };
  s4 -> s3 [65, 114] { R4434 += 1 };
  s4 -> s5 [115, 115] { R4434 += 1 };
  s4 -> s3 [116, 65535] { R4434 += 1 };
  s5 -> s3 [0, 43] { R4434 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4434 += 1 };
  s5 -> s4 [46, 46] { R4434 += 1 };
  s5 -> s3 [48, 62] { R4434 += 1 };
  s5 -> s3 [65, 110] { R4434 += 1 };
  s5 -> s6 [111, 111] { R4434 += 1 };
  s5 -> s3 [112, 65535] { R4434 += 1 };
  s6 -> s3 [0, 43] { R4434 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4434 += 1 };
  s6 -> s4 [46, 46] { R4434 += 1 };
  s6 -> s3 [48, 62] { R4434 += 1 };
  s6 -> s3 [65, 98] { R4434 += 1 };
  s6 -> s7 [99, 99] { R4434 += 1 };
  s6 -> s3 [100, 65535] { R4434 += 1 };
  s7 -> s3 [0, 43] { R4434 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4434 += 1 };
  s7 -> s4 [46, 46] { R4434 += 1 };
  s7 -> s3 [48, 62] { R4434 += 1 };
  s7 -> s3 [65, 106] { R4434 += 1 };
  s7 -> s3 [108, 65535] { R4434 += 1 };
  s8 -> s1 [0, 43] { R4434 += 1 };
  s8 -> s1 [45, 45] { R4434 += 1 };
  s8 -> s2 [46, 46] { R4434 += 1 };
  s8 -> s1 [48, 62] { R4434 += 1 };
  s8 -> s3 [65, 65] { R4434 += 1 };
  s8 -> s1 [66, 110] { R4434 += 1 };
  s8 -> s9 [111, 111] { R4434 += 1 };
  s8 -> s1 [112, 65535] { R4434 += 1 };
  s9 -> s1 [0, 43] { R4434 += 1 };
  s9 -> s1 [45, 45] { R4434 += 1 };
  s9 -> s2 [46, 46] { R4434 += 1 };
  s9 -> s1 [48, 62] { R4434 += 1 };
  s9 -> s3 [65, 65] { R4434 += 1 };
  s9 -> s1 [66, 98] { R4434 += 1 };
  s9 -> s10 [99, 99] { R4434 += 1 };
  s9 -> s1 [100, 65535] { R4434 += 1 };
  s10 -> s1 [0, 43] { R4434 += 1 };
  s10 -> s1 [45, 45] { R4434 += 1 };
  s10 -> s2 [46, 46] { R4434 += 1 };
  s10 -> s1 [48, 62] { R4434 += 1 };
  s10 -> s3 [65, 65] { R4434 += 1 };
  s10 -> s1 [66, 106] { R4434 += 1 };
  s10 -> s1 [108, 65535] { R4434 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4436 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4435 += 1, R4436 += 1 };
  s1 -> s1 [0, 65535] { R4436 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4438 += 1 };
  s0 -> s2 [0, 65535] { R4438 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4437 += 1, R4438 += 1 };
  s0 -> s3 [58, 58] { R4438 += 1 };
  s0 -> s1 [59, 65535] { R4438 += 1 };
  s1 -> s1 [0, 57] { R4438 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4438 += 1 };
  s1 -> s1 [59, 65535] { R4438 += 1 };
  s2 -> s1 [0, 57] { R4438 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4438 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4438 += 1 };
  s2 -> s1 [59, 65535] { R4438 += 1 };
  s3 -> s3 [0, 65535] { R4438 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4440 += 1 };
  s0 -> s0 [0, 65535] { R4439 += 1, R4440 += 1 };
  s0 -> s2 [0, 65535] { R4440 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4440 += 1 };
  s0 -> s1 [66, 65535] { R4440 += 1 };
  s1 -> s1 [0, 64] { R4440 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4440 += 1 };
  s1 -> s1 [66, 65535] { R4440 += 1 };
  s2 -> s1 [0, 64] { R4440 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4440 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4440 += 1 };
  s2 -> s1 [66, 65535] { R4440 += 1 };
  s3 -> s3 [0, 65535] { R4440 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4442 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R4442 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4441 += 1, R4442 += 1 };
  s0 -> s3 [91, 91] { R4442 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4442 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R4442 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4442 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R4442 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R4442 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4442 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4442 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4442 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4442 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R4443 += 1, R4444 += 1 };
  s0 -> s1 [0, 65535] { R4444 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R4444 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R4444 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R4444 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4444 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4444 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4444 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4446 += 1, R4396 += 1 };
  s0 -> s2 [0, 65535] { R4446 += 1, R4395 += 1, R4396 += 1 };
  s0 -> s0 [0, 65535] { R4445 += 1, R4446 += 1 };
  s0 -> s1 [66, 65535] { R4446 += 1, R4396 += 1 };
  s1 -> s1 [0, 64] { R4446 += 1, R4396 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4446 += 1 };
  s1 -> s1 [66, 65535] { R4446 += 1, R4396 += 1 };
  s2 -> s1 [0, 64] { R4446 += 1, R4396 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4446 += 1, R4395 += 1, R4396 += 1 };
  s2 -> s1 [66, 65535] { R4446 += 1, R4396 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R4447 += 1, R4448 += 1 };
  s0 -> s1 [0, 65535] { R4448 += 1, R4398 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R4448 += 1, R4397 += 1, R4398 += 1 };
  s1 -> s4 [0, 65535] { R4448 += 1 };
  s1 -> s1 [0, 65535] { R4448 += 1, R4398 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4448 += 1, R4398 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R4448 += 1, R4397 += 1, R4398 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4448 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4450 += 1, R4400 += 1 };
  s0 -> s2 [0, 65535] { R4450 += 1, R4399 += 1, R4400 += 1 };
  s0 -> s0 [0, 65535] { R4449 += 1, R4450 += 1 };
  s0 -> s1 [80, 65535] { R4450 += 1, R4400 += 1 };
  s1 -> s1 [0, 65] { R4450 += 1, R4400 += 1 };
  s1 -> s1 [0, 65535] { R4450 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4450 += 1, R4400 += 1 };
  s2 -> s1 [0, 65] { R4450 += 1, R4400 += 1 };
  s2 -> s2 [0, 65535] { R4450 += 1, R4399 += 1, R4400 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4450 += 1, R4400 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4452 += 1, R4401 += 1, R4402 += 1 };
  s0 -> s0 [0, 65535] { R4451 += 1, R4452 += 1 };
  s0 -> s2 [0, 65535] { R4452 += 1, R4402 += 1, R1770 += 1 };
  s1 -> s1 [0, 65535] { R4452 += 1, R4401 += 1, R4402 += 1 };
  s1 -> s2 [0, 65535] { R4452 += 1, R4402 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4452 += 1, R4402 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535] { R4452 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4452 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R4454 += 1, R4404 += 1 };
  s0 -> s2 [0, 65535] { R4454 += 1, R4403 += 1, R4404 += 1 };
  s0 -> s0 [0, 65535] { R4453 += 1, R4454 += 1 };
  s0 -> s1 [81, 65535] { R4454 += 1, R4404 += 1 };
  s1 -> s1 [0, 79] { R4454 += 1, R4404 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4454 += 1 };
  s1 -> s1 [81, 65535] { R4454 += 1, R4404 += 1 };
  s2 -> s1 [0, 79] { R4454 += 1, R4404 += 1 };
  s2 -> s2 [0, 65535] { R4454 += 1, R4403 += 1, R4404 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4454 += 1, R4404 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R4456 += 1, R4406 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R4455 += 1, R4456 += 1 };
  s0 -> s2 [0, 65535] { R4456 += 1, R4405 += 1, R4406 += 1 };
  s0 -> s1 [0, 65535] { R4456 += 1, R4406 += 1 };
  s0 -> s1 [81, 65535] { R4456 += 1, R4406 += 1, R4382 += 1 };
  s1 -> s1 [0, 79] { R4456 += 1, R4406 += 1, R4382 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4456 += 1, R4406 += 1 };
  s1 -> s4 [0, 65535] { R4456 += 1 };
  s1 -> s1 [81, 65535] { R4456 += 1, R4406 += 1, R4382 += 1 };
  s2 -> s1 [0, 79] { R4456 += 1, R4406 += 1, R4382 += 1 };
  s2 -> s2 [0, 65535] { R4456 += 1, R4405 += 1, R4406 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4456 += 1, R4406 += 1 };
  s2 -> s1 [81, 65535] { R4456 += 1, R4406 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4456 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4457 += 1, R4458 += 1 };
  s0 -> s1 [0, 65535] { R4458 += 1, R4408 += 1, R4387 += 1, R4388 += 1 };
  s0 -> s2 [0, 65535] { R4458 += 1, R4407 += 1, R4408 += 1 };
  s0 -> s3 [0, 65535] { R4458 += 1, R4408 += 1, R4386 += 1, R4387 += 1 };
  s1 -> s4 [0, 65535] { R4458 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4458 += 1, R4408 += 1, R4387 += 1, R4388 += 1 };
  s1 -> s6 [0, 65535] { R4458 += 1, R4408 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R4458 += 1, R4408 += 1, R4387 += 1, R4388 += 1 };
  s2 -> s2 [0, 65535] { R4458 += 1, R4407 += 1, R4408 += 1 };
  s2 -> s3 [0, 65535] { R4458 += 1, R4408 += 1, R4386 += 1, R4387 += 1 };
  s3 -> s4 [0, 65535] { R4458 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R4458 += 1, R4408 += 1, R4387 += 1, R4388 += 1 };
  s3 -> s3 [0, 65535] { R4458 += 1, R4408 += 1, R4386 += 1, R4387 += 1 };
  s4 -> s4 [0, 65535] { R4458 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R4458 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4458 += 1, R4408 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R4460 += 1, R4409 += 1, R4410 += 1 };
  s0 -> s0 [0, 65535] { R4459 += 1, R4460 += 1 };
  s0 -> s2 [0, 65535] { R4460 += 1, R4410 += 1 };
  s1 -> s1 [0, 65535] { R4460 += 1, R4409 += 1, R4410 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4460 += 1, R4410 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4460 += 1, R4410 += 1 };
  s2 -> s4 [0, 65535] { R4460 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4460 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4462 += 1, R4412 += 1, R4392 += 1, R4393 += 1 };
  s0 -> s0 [0, 65535] { R4461 += 1, R4462 += 1 };
  s0 -> s2 [0, 65535] { R4462 += 1, R4412 += 1, R4393 += 1, R4394 += 1 };
  s0 -> s3 [0, 65535] { R4462 += 1, R4411 += 1, R4412 += 1 };
  s1 -> s1 [0, 65535] { R4462 += 1, R4412 += 1, R4392 += 1, R4393 += 1 };
  s1 -> s5 [0, 65535] { R4462 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4462 += 1, R4412 += 1, R4393 += 1, R4394 += 1 };
  s2 -> s5 [0, 65535] { R4462 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R4462 += 1, R4412 += 1 };
  s2 -> s2 [0, 65535] { R4462 += 1, R4412 += 1, R4393 += 1, R4394 += 1 };
  s3 -> s1 [0, 65535] { R4462 += 1, R4412 += 1, R4392 += 1, R4393 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4462 += 1, R4412 += 1, R4393 += 1, R4394 += 1 };
  s3 -> s3 [0, 65535] { R4462 += 1, R4411 += 1, R4412 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4462 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4462 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4462 += 1, R4412 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R4463 += 1, R4464 += 1 };
  s0 -> s1 [0, 65535] { R4464 += 1, R4413 += 1, R4414 += 1 };
  s0 -> s2 [0, 65535] { R4464 += 1, R4414 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4464 += 1, R4413 += 1, R4414 += 1 };
  s1 -> s2 [0, 65535] { R4464 += 1, R4414 += 1 };
  s2 -> s3 [0, 65535] { R4464 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4464 += 1, R4414 += 1 };
  s3 -> s3 [0, 65535] { R4464 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4466 += 1, R4416 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R4466 += 1, R4415 += 1, R4416 += 1 };
  s0 -> s0 [0, 65535] { R4465 += 1, R4466 += 1 };
  s1 -> s4 [0, 65535] { R4466 += 1 };
  s1 -> s1 [0, 65535] { R4466 += 1, R4416 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4466 += 1, R4416 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R4466 += 1, R4415 += 1, R4416 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4466 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4468 += 1, R4418 += 1 };
  s0 -> s0 [0, 65535] { R4467 += 1, R4468 += 1 };
  s0 -> s2 [0, 65535] { R4468 += 1, R4417 += 1, R4418 += 1 };
  s0 -> s3 [65, 65] { R4468 += 1, R4418 += 1 };
  s0 -> s4 [65, 65] { R4468 += 1, R4418 += 1 };
  s0 -> s5 [80, 80] { R4468 += 1, R4418 += 1 };
  s0 -> s1 [81, 65535] { R4468 += 1, R4418 += 1 };
  s1 -> s1 [0, 64] { R4468 += 1, R4418 += 1 };
  s1 -> s3 [65, 65] { R4468 += 1, R4418 += 1 };
  s1 -> s4 [65, 65] { R4468 += 1, R4418 += 1 };
  s1 -> s5 [80, 80] { R4468 += 1, R4418 += 1 };
  s1 -> s1 [81, 65535] { R4468 += 1, R4418 += 1 };
  s2 -> s1 [0, 64] { R4468 += 1, R4418 += 1 };
  s2 -> s2 [0, 65535] { R4468 += 1, R4417 += 1, R4418 += 1 };
  s2 -> s3 [65, 65] { R4468 += 1, R4418 += 1 };
  s2 -> s4 [65, 65] { R4468 += 1, R4418 += 1 };
  s2 -> s5 [80, 80] { R4468 += 1, R4418 += 1 };
  s2 -> s1 [81, 65535] { R4468 += 1, R4418 += 1 };
  s4 -> s4 [0, 65] { R4468 += 1, R4418 += 1 };
  s4 -> s7 [80, 80] { R4468 += 1, R4418 += 1 };
  s4 -> s4 [81, 65535] { R4468 += 1, R4418 += 1 };
  s5 -> s5 [0, 64] { R4468 += 1, R4418 += 1 };
  s5 -> s5 [0, 65535] { R4468 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4468 += 1, R4418 += 1 };
  s5 -> s8 [65, 65] { R4468 += 1, R4418 += 1 };
  s5 -> s5 [80, 65535] { R4468 += 1, R4418 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4468 += 1, R4418 += 1 };
  s7 -> s7 [0, 65535] { R4468 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R4468 += 1, R4418 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4468 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R4469 += 1, R4470 += 1 };
  s0 -> s2 [0, 65535] { R4470 += 1, R4419 += 1, R4420 += 1 };
  s0 -> s3 [65, 65] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R4470 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4470 += 1, R4419 += 1, R4420 += 1 };
  s2 -> s3 [65, 65] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R4470 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4470 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4470 += 1, R4420 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535] { R4470 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4472 += 1, R4422 += 1 };
  s0 -> s2 [0, 64] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s0 -> s3 [0, 65535] { R4472 += 1, R4421 += 1, R4422 += 1 };
  s0 -> s0 [0, 65535] { R4471 += 1, R4472 += 1 };
  s0 -> s4 [65, 65] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R4472 += 1, R4422 += 1 };
  s0 -> s6 [65, 65] { R4472 += 1, R4422 += 1 };
  s0 -> s7 [65, 65] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s0 -> s1 [66, 79] { R4472 += 1, R4422 += 1 };
  s0 -> s2 [66, 65535] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R4472 += 1, R4422 += 1 };
  s1 -> s1 [0, 64] { R4472 += 1, R4422 += 1 };
  s1 -> s1 [0, 65535] { R4472 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R4472 += 1, R4422 += 1 };
  s1 -> s6 [65, 65] { R4472 += 1, R4422 += 1 };
  s1 -> s1 [66, 79] { R4472 += 1, R4422 += 1 };
  s1 -> s1 [81, 65535] { R4472 += 1, R4422 += 1 };
  s2 -> s1 [0, 64] { R4472 += 1, R4422 += 1 };
  s2 -> s2 [0, 64] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R4472 += 1, R4422 += 1 };
  s2 -> s6 [65, 65] { R4472 += 1, R4422 += 1 };
  s2 -> s7 [65, 65] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s2 -> s1 [66, 79] { R4472 += 1, R4422 += 1 };
  s2 -> s2 [66, 65535] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R4472 += 1, R4422 += 1 };
  s3 -> s1 [0, 64] { R4472 += 1, R4422 += 1 };
  s3 -> s2 [0, 64] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4472 += 1, R4421 += 1, R4422 += 1 };
  s3 -> s4 [65, 65] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R4472 += 1, R4422 += 1 };
  s3 -> s6 [65, 65] { R4472 += 1, R4422 += 1 };
  s3 -> s7 [65, 65] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s3 -> s1 [66, 79] { R4472 += 1, R4422 += 1 };
  s3 -> s2 [66, 65535] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R4472 += 1, R4422 += 1 };
  s5 -> s5 [0, 79] { R4472 += 1, R4422 += 1 };
  s5 -> s5 [0, 65535] { R4472 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [81, 65535] { R4472 += 1, R4422 += 1 };
  s6 -> s6 [0, 65535] { R4472 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 79] { R4472 += 1, R4422 += 1 };
  s7 -> s7 [0, 65535] { R4472 += 1, R4422 += 1, R3509 += 1 };
  s7 -> s5 [81, 65535] { R4472 += 1, R4422 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R4474 += 1, R4423 += 1, R4424 += 1 };
  s0 -> s0 [0, 65535] { R4473 += 1, R4474 += 1 };
  s0 -> s4 [65, 65] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s0 -> s1 [66, 79] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s0 -> s2 [66, 65535] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [81, 65535] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s1 -> s1 [0, 65535] { R4474 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R4474 += 1, R4424 += 1 };
  s1 -> s7 [65, 65] { R4474 += 1, R4424 += 1 };
  s1 -> s1 [66, 79] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R4474 += 1, R4424 += 1 };
  s1 -> s1 [81, 65535] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s2 -> s1 [0, 64] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s4 [65, 65] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s5 [65, 65] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s6 [65, 65] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s2 -> s7 [65, 65] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s2 -> s1 [66, 79] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [81, 65535] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R4474 += 1, R4423 += 1, R4424 += 1 };
  s3 -> s4 [65, 65] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s3 -> s1 [66, 79] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s3 -> s2 [66, 65535] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [81, 65535] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s4 -> s6 [0, 79] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s4 -> s4 [0, 65535] { R4474 += 1, R4424 += 1, R4379 += 1, R4380 += 1 };
  s4 -> s6 [81, 65535] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s6 -> s6 [0, 79] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s6 -> s9 [0, 65535] { R4474 += 1 };
  s6 -> s6 [0, 65535] { R4474 += 1, R4424 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [81, 65535] { R4474 += 1, R4424 += 1, R4380 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4474 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4474 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s0 [0, 65535] { R4475 += 1, R4476 += 1 };
  s0 -> s2 [0, 65535] { R4476 += 1, R4425 += 1, R4426 += 1 };
  s0 -> s3 [65, 65] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s4 [65, 65] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s1 [66, 65535] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [0, 64] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [0, 65535] { R4476 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s4 [65, 65] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [66, 65535] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s1 [0, 64] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s2 [0, 65535] { R4476 += 1, R4425 += 1, R4426 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s4 [65, 65] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s1 [66, 65535] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s3 -> s3 [0, 65535] { R4476 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4476 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4476 += 1, R4426 += 1, R4383 += 1, R4384 += 1 };
  s5 -> s5 [0, 65535] { R4476 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4478 += 1, R4428 += 1 };
  s0 -> s2 [0, 65535] { R4478 += 1, R4427 += 1, R4428 += 1 };
  s0 -> s0 [0, 65535] { R4477 += 1, R4478 += 1 };
  s0 -> s3 [65, 65] { R4478 += 1, R4428 += 1 };
  s0 -> s4 [65, 65] { R4478 += 1, R4428 += 1 };
  s0 -> s1 [66, 65535] { R4478 += 1, R4428 += 1 };
  s1 -> s1 [0, 64] { R4478 += 1, R4428 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4478 += 1 };
  s1 -> s3 [65, 65] { R4478 += 1, R4428 += 1 };
  s1 -> s4 [65, 65] { R4478 += 1, R4428 += 1 };
  s1 -> s1 [66, 65535] { R4478 += 1, R4428 += 1 };
  s2 -> s1 [0, 64] { R4478 += 1, R4428 += 1 };
  s2 -> s2 [0, 65535] { R4478 += 1, R4427 += 1, R4428 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4478 += 1, R4428 += 1 };
  s2 -> s4 [65, 65] { R4478 += 1, R4428 += 1 };
  s2 -> s1 [66, 65535] { R4478 += 1, R4428 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4478 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4478 += 1 };
  s4 -> s4 [0, 65535] { R4478 += 1, R4428 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4478 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s0 -> s2 [0, 65535] { R4480 += 1, R4429 += 1, R4430 += 1 };
  s0 -> s0 [0, 65535] { R4479 += 1, R4480 += 1 };
  s0 -> s3 [65, 65] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s0 -> s4 [65, 65] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s0 -> s1 [66, 65535] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s1 -> s1 [0, 64] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s1 -> s1 [0, 65535] { R4480 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s1 -> s4 [65, 65] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s1 -> s1 [66, 65535] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s2 -> s1 [0, 64] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s2 -> s2 [0, 65535] { R4480 += 1, R4429 += 1, R4430 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s2 -> s4 [65, 65] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s2 -> s1 [66, 65535] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s3 -> s3 [0, 65535] { R4480 += 1, R4430 += 1, R4389 += 1, R4390 += 1 };
  s3 -> s6 [0, 65535] { R4480 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4480 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4480 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4482 += 1, R4432 += 1 };
  s0 -> s0 [0, 65535] { R4481 += 1, R4482 += 1 };
  s0 -> s2 [0, 65535] { R4482 += 1, R4431 += 1, R4432 += 1 };
  s0 -> s3 [65, 65] { R4482 += 1, R4432 += 1 };
  s0 -> s4 [65, 65] { R4482 += 1, R4432 += 1 };
  s0 -> s1 [66, 65535] { R4482 += 1, R4432 += 1 };
  s1 -> s1 [0, 64] { R4482 += 1, R4432 += 1 };
  s1 -> s1 [0, 65535] { R4482 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4482 += 1, R4432 += 1 };
  s1 -> s4 [65, 65] { R4482 += 1, R4432 += 1 };
  s1 -> s1 [66, 65535] { R4482 += 1, R4432 += 1 };
  s2 -> s1 [0, 64] { R4482 += 1, R4432 += 1 };
  s2 -> s2 [0, 65535] { R4482 += 1, R4431 += 1, R4432 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4482 += 1, R4432 += 1 };
  s2 -> s4 [65, 65] { R4482 += 1, R4432 += 1 };
  s2 -> s1 [66, 65535] { R4482 += 1, R4432 += 1 };
  s3 -> s3 [0, 65535] { R4482 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4482 += 1, R4432 += 1 };
  s4 -> s6 [0, 65535] { R4482 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4482 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4414 && R2 = R4482 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4395 = 0 && R4396 = R4414 && R4397 = 0 && R4398 = R4414 && R4399 = 0 && R4400 = R4414 && R4401 = 0 && R4402 = R4414 && R4403 = 0 && R4404 = R4414 && R4405 = 0 && R4406 = R4414 && R4407 = 0 && R4408 = R4414 && R4409 = 0 && R4410 = R4414 && R4411 = 0 && R4412 = R4414 && R4413 = 0 && R4417 = 0 && R4418 = 0 && R4421 = 0 && R4422 = 0 && R4423 = 0 && R4424 = 0 && R4433 = 10 && R4434 = R4482 && R4435 = 10 && R4436 = R4482 && R4437 = 10 && R4438 = R4482 && R4439 = 10 && R4440 = R4482 && R4441 = 10 && R4442 = R4482 && R4443 = 10 && R4444 = R4482 && R4445 = 10 && R4446 = R4482 && R4447 = 10 && R4448 = R4482 && R4449 = 10 && R4450 = R4482 && R4451 = 10 && R4452 = R4482 && R4453 = 10 && R4454 = R4482 && R4455 = 10 && R4456 = R4482 && R4457 = 10 && R4458 = R4482 && R4459 = 10 && R4460 = R4482 && R4461 = 10 && R4462 = R4482 && R4463 = 10 && R4464 = R4482 && R4465 = 10 && R4466 = R4482 && R4467 = 10 && R4468 = R4482 && R4469 = 10 && R4470 = R4482 && R4471 = 10 && R4472 = R4482 && R4473 = 10 && R4474 = R4482 && R4475 = 10 && R4476 = R4482 && R4477 = 10 && R4478 = R4482 && R4479 = 10 && R4480 = R4482 && R4481 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4414 && 9 < R4482 && (R14 = 0 || (R4415 = 0 && R4416 = 0)) && (R14 = 0 || (R4419 = 0 && R4420 = 0)) && (R14 = 0 || (R4425 = 0 && R4426 = 0)) && (R14 = 0 || (R4427 = 0 && R4428 = 0)) && (R14 = 0 || (R4429 = 0 && R4430 = 0)) && (R14 = 0 || (R4431 = 0 && R4432 = 0)) && (R4388 + R4385 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4388 + R4385 = 0 || (R4386 + R4383 = 0 && R4387 + R4384 = 0)) && (R4394 + R4391 = 0 || (R4392 + R4389 = 0 && R4393 + R4390 = 0));
// End of Parikh automata intersection problem
