// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R18, R2, R2065, R2066, R2067, R2068, R2069, R2070, R2165, R2166, R2167, R2168, R2169, R2170, R2171, R2172, R2173, R2174, R2175, R2176, R2177, R2178, R2179, R2180, R2181, R2182, R2183, R2184, R2185, R2186, R2187, R2188, R2189, R2190, R2191, R2192, R2193, R2194, R2195, R2196, R2197, R2198, R2199, R2200, R2201, R2202, R2203, R2204, R2205, R2206, R2207, R2208, R2209, R2210, R2211, R2212, R2213, R2214, R2215, R2216, R2217, R2218, R2219, R2220, R2221, R2222, R2223, R2224, R2225, R2226, R2227, R2228, R2229, R2230, R2231, R2232, R2233, R2234, R2235, R2236, R2237, R2238, R2239, R2240, R2241, R2242, R2243, R2244, R2245, R2246, R2247, R2248, R2249, R2250, R2251, R2252, R2253, R2254, R2255, R2256, R2257, R2258, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2210 += 1 };
  s0 -> s0 [0, 65535] { R2209 += 1, R2210 += 1 };
  s0 -> s1 [45, 45] { R2210 += 1 };
  s0 -> s2 [46, 46] { R2210 += 1 };
  s0 -> s1 [48, 62] { R2210 += 1 };
  s0 -> s3 [65, 65] { R2210 += 1 };
  s0 -> s1 [66, 65535] { R2210 += 1 };
  s1 -> s1 [0, 43] { R2210 += 1 };
  s1 -> s1 [45, 45] { R2210 += 1 };
  s1 -> s2 [46, 46] { R2210 += 1 };
  s1 -> s1 [48, 62] { R2210 += 1 };
  s1 -> s3 [65, 65] { R2210 += 1 };
  s1 -> s1 [66, 65535] { R2210 += 1 };
  s2 -> s1 [0, 43] { R2210 += 1 };
  s2 -> s1 [45, 45] { R2210 += 1 };
  s2 -> s2 [46, 46] { R2210 += 1 };
  s2 -> s1 [48, 62] { R2210 += 1 };
  s2 -> s3 [65, 65] { R2210 += 1 };
  s2 -> s1 [66, 114] { R2210 += 1 };
  s2 -> s8 [115, 115] { R2210 += 1 };
  s2 -> s1 [116, 65535] { R2210 += 1 };
  s3 -> s3 [0, 43] { R2210 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2210 += 1 };
  s3 -> s4 [46, 46] { R2210 += 1 };
  s3 -> s3 [48, 62] { R2210 += 1 };
  s3 -> s3 [65, 65535] { R2210 += 1 };
  s4 -> s3 [0, 43] { R2210 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2210 += 1 };
  s4 -> s4 [46, 46] { R2210 += 1 };
  s4 -> s3 [48, 62] { R2210 += 1 };
  s4 -> s3 [65, 114] { R2210 += 1 };
  s4 -> s5 [115, 115] { R2210 += 1 };
  s4 -> s3 [116, 65535] { R2210 += 1 };
  s5 -> s3 [0, 43] { R2210 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2210 += 1 };
  s5 -> s4 [46, 46] { R2210 += 1 };
  s5 -> s3 [48, 62] { R2210 += 1 };
  s5 -> s3 [65, 110] { R2210 += 1 };
  s5 -> s6 [111, 111] { R2210 += 1 };
  s5 -> s3 [112, 65535] { R2210 += 1 };
  s6 -> s3 [0, 43] { R2210 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2210 += 1 };
  s6 -> s4 [46, 46] { R2210 += 1 };
  s6 -> s3 [48, 62] { R2210 += 1 };
  s6 -> s3 [65, 98] { R2210 += 1 };
  s6 -> s7 [99, 99] { R2210 += 1 };
  s6 -> s3 [100, 65535] { R2210 += 1 };
  s7 -> s3 [0, 43] { R2210 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2210 += 1 };
  s7 -> s4 [46, 46] { R2210 += 1 };
  s7 -> s3 [48, 62] { R2210 += 1 };
  s7 -> s3 [65, 106] { R2210 += 1 };
  s7 -> s3 [108, 65535] { R2210 += 1 };
  s8 -> s1 [0, 43] { R2210 += 1 };
  s8 -> s1 [45, 45] { R2210 += 1 };
  s8 -> s2 [46, 46] { R2210 += 1 };
  s8 -> s1 [48, 62] { R2210 += 1 };
  s8 -> s3 [65, 65] { R2210 += 1 };
  s8 -> s1 [66, 110] { R2210 += 1 };
  s8 -> s9 [111, 111] { R2210 += 1 };
  s8 -> s1 [112, 65535] { R2210 += 1 };
  s9 -> s1 [0, 43] { R2210 += 1 };
  s9 -> s1 [45, 45] { R2210 += 1 };
  s9 -> s2 [46, 46] { R2210 += 1 };
  s9 -> s1 [48, 62] { R2210 += 1 };
  s9 -> s3 [65, 65] { R2210 += 1 };
  s9 -> s1 [66, 98] { R2210 += 1 };
  s9 -> s10 [99, 99] { R2210 += 1 };
  s9 -> s1 [100, 65535] { R2210 += 1 };
  s10 -> s1 [0, 43] { R2210 += 1 };
  s10 -> s1 [45, 45] { R2210 += 1 };
  s10 -> s2 [46, 46] { R2210 += 1 };
  s10 -> s1 [48, 62] { R2210 += 1 };
  s10 -> s3 [65, 65] { R2210 += 1 };
  s10 -> s1 [66, 106] { R2210 += 1 };
  s10 -> s1 [108, 65535] { R2210 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2211 += 1, R2212 += 1 };
  s0 -> s1 [0, 65535] { R2212 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2212 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2214 += 1 };
  s0 -> s2 [0, 65535] { R2214 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2213 += 1, R2214 += 1 };
  s0 -> s3 [58, 58] { R2214 += 1 };
  s0 -> s1 [59, 65535] { R2214 += 1 };
  s1 -> s1 [0, 57] { R2214 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2214 += 1 };
  s1 -> s1 [59, 65535] { R2214 += 1 };
  s2 -> s1 [0, 57] { R2214 += 1 };
  s2 -> s2 [0, 65535] { R2214 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2214 += 1 };
  s2 -> s1 [59, 65535] { R2214 += 1 };
  s3 -> s3 [0, 65535] { R2214 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2216 += 1 };
  s0 -> s0 [0, 65535] { R2215 += 1, R2216 += 1 };
  s0 -> s2 [0, 65535] { R2216 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R2216 += 1 };
  s0 -> s1 [66, 65535] { R2216 += 1 };
  s1 -> s1 [0, 64] { R2216 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2216 += 1 };
  s1 -> s1 [66, 65535] { R2216 += 1 };
  s2 -> s1 [0, 64] { R2216 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2216 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2216 += 1 };
  s2 -> s1 [66, 65535] { R2216 += 1 };
  s3 -> s3 [0, 65535] { R2216 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2218 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R2218 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2217 += 1, R2218 += 1 };
  s0 -> s3 [91, 91] { R2218 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2218 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2218 += 1 };
  s1 -> s1 [0, 65535] { R2218 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2218 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R2218 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2218 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2218 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2218 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2218 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2220 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R2220 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R2219 += 1, R2220 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2220 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R2220 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2220 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R2220 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2220 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2222 += 1, R2172 += 1 };
  s0 -> s0 [0, 65535] { R2221 += 1, R2222 += 1 };
  s0 -> s2 [0, 65535] { R2222 += 1, R2171 += 1, R2172 += 1 };
  s0 -> s1 [66, 65535] { R2222 += 1, R2172 += 1 };
  s1 -> s1 [0, 64] { R2222 += 1, R2172 += 1 };
  s1 -> s1 [0, 65535] { R2222 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2222 += 1, R2172 += 1 };
  s2 -> s1 [0, 64] { R2222 += 1, R2172 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2222 += 1, R2171 += 1, R2172 += 1 };
  s2 -> s1 [66, 65535] { R2222 += 1, R2172 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2223 += 1, R2224 += 1 };
  s0 -> s1 [0, 65535] { R2224 += 1, R2173 += 1, R2174 += 1 };
  s0 -> s2 [0, 65535] { R2224 += 1, R2174 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2224 += 1, R2173 += 1, R2174 += 1 };
  s1 -> s2 [0, 65535] { R2224 += 1, R2174 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2224 += 1 };
  s2 -> s2 [0, 65535] { R2224 += 1, R2174 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2224 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2226 += 1, R2176 += 1 };
  s0 -> s0 [0, 65535] { R2225 += 1, R2226 += 1 };
  s0 -> s2 [0, 65535] { R2226 += 1, R2175 += 1, R2176 += 1 };
  s0 -> s1 [80, 65535] { R2226 += 1, R2176 += 1 };
  s1 -> s1 [0, 65] { R2226 += 1, R2176 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2226 += 1 };
  s1 -> s1 [80, 65535] { R2226 += 1, R2176 += 1 };
  s2 -> s1 [0, 65] { R2226 += 1, R2176 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2226 += 1, R2175 += 1, R2176 += 1 };
  s2 -> s1 [80, 65535] { R2226 += 1, R2176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2228 += 1, R2177 += 1, R2178 += 1 };
  s0 -> s2 [0, 65535] { R2228 += 1, R2178 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2227 += 1, R2228 += 1 };
  s1 -> s1 [0, 65535] { R2228 += 1, R2177 += 1, R2178 += 1 };
  s1 -> s2 [0, 65535] { R2228 += 1, R2178 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2228 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2228 += 1, R2178 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535] { R2228 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R2230 += 1, R2180 += 1 };
  s0 -> s2 [0, 65535] { R2230 += 1, R2180 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R2229 += 1, R2230 += 1 };
  s0 -> s3 [0, 65535] { R2230 += 1, R2179 += 1, R2180 += 1 };
  s0 -> s1 [81, 65535] { R2230 += 1, R2180 += 1 };
  s1 -> s1 [0, 79] { R2230 += 1, R2180 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2230 += 1 };
  s1 -> s1 [81, 65535] { R2230 += 1, R2180 += 1 };
  s2 -> s1 [0, 79] { R2230 += 1, R2180 += 1 };
  s2 -> s2 [0, 65535] { R2230 += 1, R2180 += 1, R1772 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2230 += 1 };
  s2 -> s1 [81, 65535] { R2230 += 1, R2180 += 1 };
  s3 -> s1 [0, 79] { R2230 += 1, R2180 += 1 };
  s3 -> s2 [0, 65535] { R2230 += 1, R2180 += 1, R1772 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2230 += 1, R2179 += 1, R2180 += 1 };
  s3 -> s1 [81, 65535] { R2230 += 1, R2180 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2230 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s0 -> s2 [0, 65535] { R2232 += 1, R2182 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s0 [0, 65535] { R2231 += 1, R2232 += 1 };
  s0 -> s3 [0, 65535] { R2232 += 1, R2181 += 1, R2182 += 1 };
  s0 -> s1 [81, 65535] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s1 -> s1 [0, 79] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2232 += 1, R2182 += 1 };
  s1 -> s5 [0, 65535] { R2232 += 1 };
  s1 -> s1 [81, 65535] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s2 -> s1 [0, 79] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s2 -> s2 [0, 65535] { R2232 += 1, R2182 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2232 += 1 };
  s2 -> s1 [81, 65535] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s3 -> s1 [0, 79] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s3 -> s2 [0, 65535] { R2232 += 1, R2182 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2232 += 1, R2181 += 1, R2182 += 1 };
  s3 -> s1 [81, 65535] { R2232 += 1, R2182 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2232 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2234 += 1, R2184 += 1 };
  s0 -> s2 [0, 65535] { R2234 += 1, R2183 += 1, R2184 += 1 };
  s0 -> s3 [0, 65535] { R2234 += 1, R2184 += 1, R2069 += 1, R2070 += 1 };
  s0 -> s0 [0, 65535] { R2233 += 1, R2234 += 1 };
  s1 -> s1 [0, 65535] { R2234 += 1, R2184 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2234 += 1 };
  s2 -> s1 [0, 65535] { R2234 += 1, R2184 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2234 += 1, R2183 += 1, R2184 += 1 };
  s2 -> s3 [0, 65535] { R2234 += 1, R2184 += 1, R2069 += 1, R2070 += 1 };
  s3 -> s1 [0, 65535] { R2234 += 1, R2184 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2234 += 1, R2184 += 1, R2069 += 1, R2070 += 1 };
  s3 -> s5 [0, 65535] { R2234 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2234 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2235 += 1, R2236 += 1 };
  s0 -> s1 [0, 65535] { R2236 += 1, R2185 += 1, R2186 += 1 };
  s0 -> s2 [0, 65535] { R2236 += 1, R2186 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2236 += 1, R2185 += 1, R2186 += 1 };
  s1 -> s2 [0, 65535] { R2236 += 1, R2186 += 1 };
  s2 -> s3 [0, 65535] { R2236 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2236 += 1, R2186 += 1 };
  s3 -> s3 [0, 65535] { R2236 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2238 += 1, R2188 += 1 };
  s0 -> s2 [0, 65535] { R2238 += 1, R2187 += 1, R2188 += 1 };
  s0 -> s0 [0, 65535] { R2237 += 1, R2238 += 1 };
  s0 -> s3 [0, 65535] { R2238 += 1, R2188 += 1, R2169 += 1, R2170 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2238 += 1, R2188 += 1 };
  s1 -> s5 [0, 65535] { R2238 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2238 += 1, R2188 += 1 };
  s2 -> s2 [0, 65535] { R2238 += 1, R2187 += 1, R2188 += 1 };
  s2 -> s3 [0, 65535] { R2238 += 1, R2188 += 1, R2169 += 1, R2170 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2238 += 1, R2188 += 1 };
  s3 -> s5 [0, 65535] { R2238 += 1 };
  s3 -> s3 [0, 65535] { R2238 += 1, R2188 += 1, R2169 += 1, R2170 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2238 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2239 += 1, R2240 += 1 };
  s0 -> s1 [0, 65535] { R2240 += 1, R2189 += 1, R2190 += 1 };
  s0 -> s2 [0, 65535] { R2240 += 1, R2190 += 1 };
  s1 -> s1 [0, 65535] { R2240 += 1, R2189 += 1, R2190 += 1 };
  s1 -> s2 [0, 65535] { R2240 += 1, R2190 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2240 += 1 };
  s2 -> s2 [0, 65535] { R2240 += 1, R2190 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2240 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2241 += 1, R2242 += 1 };
  s0 -> s1 [0, 65535] { R2242 += 1, R2191 += 1, R2192 += 1 };
  s0 -> s2 [0, 65535] { R2242 += 1, R2192 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2242 += 1, R2191 += 1, R2192 += 1 };
  s1 -> s2 [0, 65535] { R2242 += 1, R2192 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2242 += 1, R2192 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R2242 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2242 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2244 += 1, R2194 += 1 };
  s0 -> s0 [0, 65535] { R2243 += 1, R2244 += 1 };
  s0 -> s2 [0, 65535] { R2244 += 1, R2193 += 1, R2194 += 1 };
  s0 -> s3 [65, 65] { R2244 += 1, R2194 += 1 };
  s0 -> s4 [65, 65] { R2244 += 1, R2194 += 1 };
  s0 -> s5 [80, 80] { R2244 += 1, R2194 += 1 };
  s0 -> s1 [81, 65535] { R2244 += 1, R2194 += 1 };
  s1 -> s1 [0, 64] { R2244 += 1, R2194 += 1 };
  s1 -> s3 [65, 65] { R2244 += 1, R2194 += 1 };
  s1 -> s4 [65, 65] { R2244 += 1, R2194 += 1 };
  s1 -> s5 [80, 80] { R2244 += 1, R2194 += 1 };
  s1 -> s1 [81, 65535] { R2244 += 1, R2194 += 1 };
  s2 -> s1 [0, 64] { R2244 += 1, R2194 += 1 };
  s2 -> s2 [0, 65535] { R2244 += 1, R2193 += 1, R2194 += 1 };
  s2 -> s3 [65, 65] { R2244 += 1, R2194 += 1 };
  s2 -> s4 [65, 65] { R2244 += 1, R2194 += 1 };
  s2 -> s5 [80, 80] { R2244 += 1, R2194 += 1 };
  s2 -> s1 [81, 65535] { R2244 += 1, R2194 += 1 };
  s4 -> s4 [0, 65] { R2244 += 1, R2194 += 1 };
  s4 -> s8 [80, 80] { R2244 += 1, R2194 += 1 };
  s4 -> s4 [81, 65535] { R2244 += 1, R2194 += 1 };
  s5 -> s5 [0, 64] { R2244 += 1, R2194 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2244 += 1 };
  s5 -> s7 [65, 65] { R2244 += 1, R2194 += 1 };
  s5 -> s8 [65, 65] { R2244 += 1, R2194 += 1 };
  s5 -> s5 [80, 65535] { R2244 += 1, R2194 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2244 += 1 };
  s8 -> s8 [0, 65] { R2244 += 1, R2194 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2244 += 1 };
  s8 -> s8 [80, 65535] { R2244 += 1, R2194 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R2246 += 1, R2195 += 1, R2196 += 1 };
  s0 -> s0 [0, 65535] { R2245 += 1, R2246 += 1 };
  s0 -> s3 [65, 65] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R2246 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2246 += 1, R2195 += 1, R2196 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2246 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2246 += 1, R2196 += 1, R1769 += 1 };
  s4 -> s5 [0, 65535] { R2246 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2246 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R2247 += 1, R2248 += 1 };
  s0 -> s2 [0, 65535] { R2248 += 1, R2197 += 1, R2198 += 1 };
  s0 -> s3 [65, 65] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2248 += 1 };
  s1 -> s3 [65, 65] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2248 += 1, R2197 += 1, R2198 += 1 };
  s2 -> s3 [65, 65] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R2248 += 1, R2198 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2248 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2248 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2248 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s2 [0, 65535] { R2250 += 1, R2199 += 1, R2200 += 1 };
  s0 -> s0 [0, 65535] { R2249 += 1, R2250 += 1 };
  s0 -> s3 [65, 65] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2250 += 1 };
  s1 -> s3 [65, 65] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R2250 += 1, R2199 += 1, R2200 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R2250 += 1, R2200 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s6 [0, 65535] { R2250 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2250 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2250 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s2 [0, 64] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s3 [0, 65535] { R2252 += 1, R2201 += 1, R2202 += 1 };
  s0 -> s0 [0, 65535] { R2251 += 1, R2252 += 1 };
  s0 -> s4 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s5 [65, 65] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s6 [65, 65] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s7 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s1 [66, 65535] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s2 [66, 65535] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s1 [0, 64] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R2252 += 1 };
  s1 -> s4 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s7 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s1 [66, 65535] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s1 [0, 64] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [0, 64] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s2 -> s4 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s5 [65, 65] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s2 -> s6 [65, 65] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s2 -> s7 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s1 [66, 65535] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [66, 65535] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s1 [0, 64] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s2 [0, 64] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s3 [0, 65535] { R2252 += 1, R2201 += 1, R2202 += 1 };
  s3 -> s4 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s5 [65, 65] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s6 [65, 65] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s7 [65, 65] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s1 [66, 65535] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s2 [66, 65535] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s4 -> s4 [0, 65535] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R2252 += 1 };
  s5 -> s4 [0, 65535] { R2252 += 1, R2202 += 1, R2066 += 1, R2067 += 1 };
  s5 -> s5 [0, 65535] { R2252 += 1, R2202 += 1, R2065 += 1, R2066 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2252 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2252 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2254 += 1, R2204 += 1 };
  s0 -> s2 [0, 65535] { R2254 += 1, R2203 += 1, R2204 += 1 };
  s0 -> s0 [0, 65535] { R2253 += 1, R2254 += 1 };
  s0 -> s3 [65, 65] { R2254 += 1, R2204 += 1 };
  s0 -> s4 [65, 65] { R2254 += 1, R2204 += 1 };
  s0 -> s1 [66, 65535] { R2254 += 1, R2204 += 1 };
  s1 -> s1 [0, 64] { R2254 += 1, R2204 += 1 };
  s1 -> s1 [0, 65535] { R2254 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2254 += 1, R2204 += 1 };
  s1 -> s4 [65, 65] { R2254 += 1, R2204 += 1 };
  s1 -> s1 [66, 65535] { R2254 += 1, R2204 += 1 };
  s2 -> s1 [0, 64] { R2254 += 1, R2204 += 1 };
  s2 -> s2 [0, 65535] { R2254 += 1, R2203 += 1, R2204 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2254 += 1, R2204 += 1 };
  s2 -> s4 [65, 65] { R2254 += 1, R2204 += 1 };
  s2 -> s1 [66, 65535] { R2254 += 1, R2204 += 1 };
  s3 -> s3 [0, 65535] { R2254 += 1, R2204 += 1 };
  s3 -> s6 [0, 65535] { R2254 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2254 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2254 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s0 -> s2 [0, 64] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s0 -> s3 [0, 65535] { R2256 += 1, R2205 += 1, R2206 += 1 };
  s0 -> s0 [0, 65535] { R2255 += 1, R2256 += 1 };
  s0 -> s4 [65, 65] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s0 -> s5 [65, 65] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s0 -> s6 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s0 -> s7 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s0 -> s1 [66, 65535] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s0 -> s2 [66, 65535] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s1 -> s1 [0, 64] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s1 -> s1 [0, 65535] { R2256 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s1 -> s7 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s1 -> s1 [66, 65535] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s2 -> s1 [0, 64] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s2 -> s2 [0, 64] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s2 -> s4 [65, 65] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s2 -> s5 [65, 65] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s2 -> s6 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s2 -> s7 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s2 -> s1 [66, 65535] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s2 -> s2 [66, 65535] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s3 -> s1 [0, 64] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s3 -> s2 [0, 64] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s3 -> s3 [0, 65535] { R2256 += 1, R2205 += 1, R2206 += 1 };
  s3 -> s4 [65, 65] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s3 -> s5 [65, 65] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s3 -> s6 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s3 -> s7 [65, 65] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s3 -> s1 [66, 65535] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s3 -> s2 [66, 65535] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s5 -> s5 [0, 65535] { R2256 += 1, R2206 += 1, R2165 += 1, R2166 += 1 };
  s5 -> s6 [0, 65535] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s6 -> s9 [0, 65535] { R2256 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2256 += 1, R2206 += 1, R2166 += 1, R2167 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2256 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2256 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2258 += 1, R2208 += 1 };
  s0 -> s2 [0, 65535] { R2258 += 1, R2207 += 1, R2208 += 1 };
  s0 -> s0 [0, 65535] { R2257 += 1, R2258 += 1 };
  s0 -> s3 [65, 65] { R2258 += 1, R2208 += 1 };
  s0 -> s4 [65, 65] { R2258 += 1, R2208 += 1 };
  s0 -> s1 [66, 65535] { R2258 += 1, R2208 += 1 };
  s1 -> s1 [0, 64] { R2258 += 1, R2208 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2258 += 1 };
  s1 -> s3 [65, 65] { R2258 += 1, R2208 += 1 };
  s1 -> s4 [65, 65] { R2258 += 1, R2208 += 1 };
  s1 -> s1 [66, 65535] { R2258 += 1, R2208 += 1 };
  s2 -> s1 [0, 64] { R2258 += 1, R2208 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2258 += 1, R2207 += 1, R2208 += 1 };
  s2 -> s3 [65, 65] { R2258 += 1, R2208 += 1 };
  s2 -> s4 [65, 65] { R2258 += 1, R2208 += 1 };
  s2 -> s1 [66, 65535] { R2258 += 1, R2208 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2258 += 1, R2208 += 1 };
  s3 -> s6 [0, 65535] { R2258 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2258 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2258 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2190 && R2 = R2258 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2171 = 0 && R2172 = R2190 && R2173 = 0 && R2174 = R2190 && R2175 = 0 && R2176 = R2190 && R2177 = 0 && R2178 = R2190 && R2179 = 0 && R2180 = R2190 && R2181 = 0 && R2182 = R2190 && R2183 = 0 && R2184 = R2190 && R2185 = 0 && R2186 = R2190 && R2187 = 0 && R2188 = R2190 && R2189 = 0 && R2193 = 0 && R2194 = 0 && R2201 = 0 && R2202 = 0 && R2205 = 0 && R2206 = 0 && R2209 = 10 && R2210 = R2258 && R2211 = 10 && R2212 = R2258 && R2213 = 10 && R2214 = R2258 && R2215 = 10 && R2216 = R2258 && R2217 = 10 && R2218 = R2258 && R2219 = 10 && R2220 = R2258 && R2221 = 10 && R2222 = R2258 && R2223 = 10 && R2224 = R2258 && R2225 = 10 && R2226 = R2258 && R2227 = 10 && R2228 = R2258 && R2229 = 10 && R2230 = R2258 && R2231 = 10 && R2232 = R2258 && R2233 = 10 && R2234 = R2258 && R2235 = 10 && R2236 = R2258 && R2237 = 10 && R2238 = R2258 && R2239 = 10 && R2240 = R2258 && R2241 = 10 && R2242 = R2258 && R2243 = 10 && R2244 = R2258 && R2245 = 10 && R2246 = R2258 && R2247 = 10 && R2248 = R2258 && R2249 = 10 && R2250 = R2258 && R2251 = 10 && R2252 = R2258 && R2253 = 10 && R2254 = R2258 && R2255 = 10 && R2256 = R2258 && R2257 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2190 && 9 < R2258 && (R14 = 0 || (R2191 = 0 && R2192 = 0)) && (R14 = 0 || (R2195 = 0 && R2196 = 0)) && (R14 = 0 || (R2197 = 0 && R2198 = 0)) && (R14 = 0 || (R2199 = 0 && R2200 = 0)) && (R14 = 0 || (R2203 = 0 && R2204 = 0)) && (R14 = 0 || (R2207 = 0 && R2208 = 0)) && (R2070 + R2067 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R2070 + R2067 = 0 || (R2068 + R2065 = 0 && R2069 + R2066 = 0)) && (R2170 + R2167 = 0 || (R2168 + R2165 = 0 && R2169 + R2166 = 0));
// End of Parikh automata intersection problem
