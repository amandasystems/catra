// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R3515, R3516, R3517, R3518, R3519, R3520, R3615, R3616, R3617, R3618, R3619, R3620, R3621, R3622, R3623, R3624, R3625, R3626, R3627, R3628, R3629, R3630, R3631, R3632, R3633, R3634, R3635, R3636, R3637, R3638, R3639, R3640, R3641, R3642, R3643, R3644, R3645, R3646, R3647, R3648, R3649, R3650, R3651, R3652, R3653, R3654, R3655, R3656, R3657, R3658, R3659, R3660, R3661, R3662, R3663, R3664, R3665, R3666, R3667, R3668, R3669, R3670, R3671, R3672, R3673, R3674, R3675, R3676, R3677, R3678, R3679, R3680, R3681, R3682, R3683, R3684, R3685, R3686, R3687, R3688, R3689, R3690, R3691, R3692, R3693, R3694, R3695, R3696, R3697, R3698, R3699, R3700, R3701, R3702, R3703, R3704, R3705, R3706, R3707, R3708, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3660 += 1 };
  s0 -> s0 [0, 65535] { R3659 += 1, R3660 += 1 };
  s0 -> s1 [45, 45] { R3660 += 1 };
  s0 -> s2 [46, 46] { R3660 += 1 };
  s0 -> s1 [48, 62] { R3660 += 1 };
  s0 -> s3 [65, 65] { R3660 += 1 };
  s0 -> s1 [66, 65535] { R3660 += 1 };
  s1 -> s1 [0, 43] { R3660 += 1 };
  s1 -> s1 [45, 45] { R3660 += 1 };
  s1 -> s2 [46, 46] { R3660 += 1 };
  s1 -> s1 [48, 62] { R3660 += 1 };
  s1 -> s3 [65, 65] { R3660 += 1 };
  s1 -> s1 [66, 65535] { R3660 += 1 };
  s2 -> s1 [0, 43] { R3660 += 1 };
  s2 -> s1 [45, 45] { R3660 += 1 };
  s2 -> s2 [46, 46] { R3660 += 1 };
  s2 -> s1 [48, 62] { R3660 += 1 };
  s2 -> s3 [65, 65] { R3660 += 1 };
  s2 -> s1 [66, 114] { R3660 += 1 };
  s2 -> s8 [115, 115] { R3660 += 1 };
  s2 -> s1 [116, 65535] { R3660 += 1 };
  s3 -> s3 [0, 43] { R3660 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3660 += 1 };
  s3 -> s4 [46, 46] { R3660 += 1 };
  s3 -> s3 [48, 62] { R3660 += 1 };
  s3 -> s3 [65, 65535] { R3660 += 1 };
  s4 -> s3 [0, 43] { R3660 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3660 += 1 };
  s4 -> s4 [46, 46] { R3660 += 1 };
  s4 -> s3 [48, 62] { R3660 += 1 };
  s4 -> s3 [65, 114] { R3660 += 1 };
  s4 -> s5 [115, 115] { R3660 += 1 };
  s4 -> s3 [116, 65535] { R3660 += 1 };
  s5 -> s3 [0, 43] { R3660 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3660 += 1 };
  s5 -> s4 [46, 46] { R3660 += 1 };
  s5 -> s3 [48, 62] { R3660 += 1 };
  s5 -> s3 [65, 110] { R3660 += 1 };
  s5 -> s6 [111, 111] { R3660 += 1 };
  s5 -> s3 [112, 65535] { R3660 += 1 };
  s6 -> s3 [0, 43] { R3660 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3660 += 1 };
  s6 -> s4 [46, 46] { R3660 += 1 };
  s6 -> s3 [48, 62] { R3660 += 1 };
  s6 -> s3 [65, 98] { R3660 += 1 };
  s6 -> s7 [99, 99] { R3660 += 1 };
  s6 -> s3 [100, 65535] { R3660 += 1 };
  s7 -> s3 [0, 43] { R3660 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3660 += 1 };
  s7 -> s4 [46, 46] { R3660 += 1 };
  s7 -> s3 [48, 62] { R3660 += 1 };
  s7 -> s3 [65, 106] { R3660 += 1 };
  s7 -> s3 [108, 65535] { R3660 += 1 };
  s8 -> s1 [0, 43] { R3660 += 1 };
  s8 -> s1 [45, 45] { R3660 += 1 };
  s8 -> s2 [46, 46] { R3660 += 1 };
  s8 -> s1 [48, 62] { R3660 += 1 };
  s8 -> s3 [65, 65] { R3660 += 1 };
  s8 -> s1 [66, 110] { R3660 += 1 };
  s8 -> s9 [111, 111] { R3660 += 1 };
  s8 -> s1 [112, 65535] { R3660 += 1 };
  s9 -> s1 [0, 43] { R3660 += 1 };
  s9 -> s1 [45, 45] { R3660 += 1 };
  s9 -> s2 [46, 46] { R3660 += 1 };
  s9 -> s1 [48, 62] { R3660 += 1 };
  s9 -> s3 [65, 65] { R3660 += 1 };
  s9 -> s1 [66, 98] { R3660 += 1 };
  s9 -> s10 [99, 99] { R3660 += 1 };
  s9 -> s1 [100, 65535] { R3660 += 1 };
  s10 -> s1 [0, 43] { R3660 += 1 };
  s10 -> s1 [45, 45] { R3660 += 1 };
  s10 -> s2 [46, 46] { R3660 += 1 };
  s10 -> s1 [48, 62] { R3660 += 1 };
  s10 -> s3 [65, 65] { R3660 += 1 };
  s10 -> s1 [66, 106] { R3660 += 1 };
  s10 -> s1 [108, 65535] { R3660 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3661 += 1, R3662 += 1 };
  s0 -> s1 [0, 65535] { R3662 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3662 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3664 += 1 };
  s0 -> s0 [0, 65535] { R3663 += 1, R3664 += 1 };
  s0 -> s2 [0, 65535] { R3664 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R3664 += 1 };
  s0 -> s1 [59, 65535] { R3664 += 1 };
  s1 -> s1 [0, 57] { R3664 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3664 += 1 };
  s1 -> s1 [59, 65535] { R3664 += 1 };
  s2 -> s1 [0, 57] { R3664 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3664 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3664 += 1 };
  s2 -> s1 [59, 65535] { R3664 += 1 };
  s3 -> s3 [0, 65535] { R3664 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3666 += 1 };
  s0 -> s0 [0, 65535] { R3665 += 1, R3666 += 1 };
  s0 -> s2 [0, 65535] { R3666 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3666 += 1 };
  s0 -> s1 [66, 65535] { R3666 += 1 };
  s1 -> s1 [0, 64] { R3666 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3666 += 1 };
  s1 -> s1 [66, 65535] { R3666 += 1 };
  s2 -> s1 [0, 64] { R3666 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3666 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R3666 += 1 };
  s2 -> s1 [66, 65535] { R3666 += 1 };
  s3 -> s3 [0, 65535] { R3666 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3668 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3667 += 1, R3668 += 1 };
  s0 -> s2 [0, 65535] { R3668 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R3668 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3668 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3668 += 1 };
  s1 -> s1 [0, 65535] { R3668 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R3668 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3668 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3668 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3668 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3668 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3668 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3669 += 1, R3670 += 1 };
  s0 -> s1 [0, 65535] { R3670 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R3670 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R3670 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3670 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3670 += 1 };
  s2 -> s2 [0, 65535] { R3670 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3670 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3672 += 1, R3622 += 1 };
  s0 -> s0 [0, 65535] { R3671 += 1, R3672 += 1 };
  s0 -> s2 [0, 65535] { R3672 += 1, R3621 += 1, R3622 += 1 };
  s0 -> s1 [66, 65535] { R3672 += 1, R3622 += 1 };
  s1 -> s1 [0, 64] { R3672 += 1, R3622 += 1 };
  s1 -> s1 [0, 65535] { R3672 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3672 += 1, R3622 += 1 };
  s2 -> s1 [0, 64] { R3672 += 1, R3622 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3672 += 1, R3621 += 1, R3622 += 1 };
  s2 -> s1 [66, 65535] { R3672 += 1, R3622 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3674 += 1, R3624 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R3674 += 1, R3623 += 1, R3624 += 1 };
  s0 -> s0 [0, 65535] { R3673 += 1, R3674 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3674 += 1, R3624 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R3674 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3674 += 1, R3624 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R3674 += 1, R3623 += 1, R3624 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3674 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3676 += 1, R3626 += 1 };
  s0 -> s0 [0, 65535] { R3675 += 1, R3676 += 1 };
  s0 -> s2 [0, 65535] { R3676 += 1, R3625 += 1, R3626 += 1 };
  s0 -> s1 [80, 65535] { R3676 += 1, R3626 += 1 };
  s1 -> s1 [0, 65] { R3676 += 1, R3626 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3676 += 1 };
  s1 -> s1 [80, 65535] { R3676 += 1, R3626 += 1 };
  s2 -> s1 [0, 65] { R3676 += 1, R3626 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3676 += 1, R3625 += 1, R3626 += 1 };
  s2 -> s1 [80, 65535] { R3676 += 1, R3626 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3677 += 1, R3678 += 1 };
  s0 -> s1 [0, 65535] { R3678 += 1, R3628 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R3678 += 1, R3627 += 1, R3628 += 1 };
  s1 -> s4 [0, 65535] { R3678 += 1 };
  s1 -> s1 [0, 65535] { R3678 += 1, R3628 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3678 += 1, R3628 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3678 += 1, R3627 += 1, R3628 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3678 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R3680 += 1, R3630 += 1 };
  s0 -> s2 [0, 65535] { R3680 += 1, R3629 += 1, R3630 += 1 };
  s0 -> s0 [0, 65535] { R3679 += 1, R3680 += 1 };
  s0 -> s1 [81, 65535] { R3680 += 1, R3630 += 1 };
  s1 -> s1 [0, 79] { R3680 += 1, R3630 += 1 };
  s1 -> s1 [0, 65535] { R3680 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R3680 += 1, R3630 += 1 };
  s2 -> s1 [0, 79] { R3680 += 1, R3630 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3680 += 1, R3629 += 1, R3630 += 1 };
  s2 -> s1 [81, 65535] { R3680 += 1, R3630 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R3681 += 1, R3682 += 1 };
  s0 -> s2 [0, 65535] { R3682 += 1, R3632 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s3 [0, 65535] { R3682 += 1, R3631 += 1, R3632 += 1 };
  s0 -> s1 [81, 65535] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s1 -> s1 [0, 79] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s1 -> s5 [0, 65535] { R3682 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3682 += 1, R3632 += 1 };
  s1 -> s1 [81, 65535] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s2 -> s1 [0, 79] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s2 -> s5 [0, 65535] { R3682 += 1 };
  s2 -> s2 [0, 65535] { R3682 += 1, R3632 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s3 -> s1 [0, 79] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s3 -> s2 [0, 65535] { R3682 += 1, R3632 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3682 += 1, R3631 += 1, R3632 += 1 };
  s3 -> s1 [81, 65535] { R3682 += 1, R3632 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3682 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R3683 += 1, R3684 += 1 };
  s0 -> s1 [0, 65535] { R3684 += 1, R3634 += 1, R3518 += 1, R3519 += 1 };
  s0 -> s2 [0, 65535] { R3684 += 1, R3634 += 1, R3519 += 1, R3520 += 1 };
  s0 -> s3 [0, 65535] { R3684 += 1, R3633 += 1, R3634 += 1 };
  s1 -> s5 [0, 65535] { R3684 += 1 };
  s1 -> s1 [0, 65535] { R3684 += 1, R3634 += 1, R3518 += 1, R3519 += 1 };
  s1 -> s2 [0, 65535] { R3684 += 1, R3634 += 1, R3519 += 1, R3520 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3684 += 1 };
  s2 -> s6 [0, 65535] { R3684 += 1, R3634 += 1 };
  s2 -> s2 [0, 65535] { R3684 += 1, R3634 += 1, R3519 += 1, R3520 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3684 += 1, R3634 += 1, R3518 += 1, R3519 += 1 };
  s3 -> s2 [0, 65535] { R3684 += 1, R3634 += 1, R3519 += 1, R3520 += 1 };
  s3 -> s3 [0, 65535] { R3684 += 1, R3633 += 1, R3634 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3684 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3684 += 1 };
  s6 -> s6 [0, 65535] { R3684 += 1, R3634 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3686 += 1, R3635 += 1, R3636 += 1 };
  s0 -> s0 [0, 65535] { R3685 += 1, R3686 += 1 };
  s0 -> s2 [0, 65535] { R3686 += 1, R3636 += 1 };
  s1 -> s1 [0, 65535] { R3686 += 1, R3635 += 1, R3636 += 1 };
  s1 -> s2 [0, 65535] { R3686 += 1, R3636 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3686 += 1, R3636 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3686 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3686 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3688 += 1, R3637 += 1, R3638 += 1 };
  s0 -> s2 [0, 65535] { R3688 += 1, R3638 += 1 };
  s0 -> s3 [0, 65535] { R3688 += 1, R3638 += 1, R3619 += 1, R3620 += 1 };
  s0 -> s0 [0, 65535] { R3687 += 1, R3688 += 1 };
  s1 -> s1 [0, 65535] { R3688 += 1, R3637 += 1, R3638 += 1 };
  s1 -> s2 [0, 65535] { R3688 += 1, R3638 += 1 };
  s1 -> s3 [0, 65535] { R3688 += 1, R3638 += 1, R3619 += 1, R3620 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3688 += 1, R3638 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3688 += 1 };
  s3 -> s2 [0, 65535] { R3688 += 1, R3638 += 1 };
  s3 -> s3 [0, 65535] { R3688 += 1, R3638 += 1, R3619 += 1, R3620 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3688 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3688 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3689 += 1, R3690 += 1 };
  s0 -> s1 [0, 65535] { R3690 += 1, R3640 += 1 };
  s0 -> s2 [0, 65535] { R3690 += 1, R3639 += 1, R3640 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3690 += 1, R3640 += 1 };
  s1 -> s4 [0, 65535] { R3690 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3690 += 1, R3640 += 1 };
  s2 -> s2 [0, 65535] { R3690 += 1, R3639 += 1, R3640 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3690 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3692 += 1, R3641 += 1, R3642 += 1 };
  s0 -> s0 [0, 65535] { R3691 += 1, R3692 += 1 };
  s0 -> s2 [0, 65535] { R3692 += 1, R3642 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R3692 += 1, R3641 += 1, R3642 += 1 };
  s1 -> s2 [0, 65535] { R3692 += 1, R3642 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3692 += 1, R3642 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3692 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3692 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3694 += 1, R3644 += 1 };
  s0 -> s0 [0, 65535] { R3693 += 1, R3694 += 1 };
  s0 -> s2 [0, 65535] { R3694 += 1, R3643 += 1, R3644 += 1 };
  s0 -> s3 [65, 65] { R3694 += 1, R3644 += 1 };
  s0 -> s4 [65, 65] { R3694 += 1, R3644 += 1 };
  s0 -> s5 [80, 80] { R3694 += 1, R3644 += 1 };
  s0 -> s1 [81, 65535] { R3694 += 1, R3644 += 1 };
  s1 -> s1 [0, 64] { R3694 += 1, R3644 += 1 };
  s1 -> s3 [65, 65] { R3694 += 1, R3644 += 1 };
  s1 -> s4 [65, 65] { R3694 += 1, R3644 += 1 };
  s1 -> s5 [80, 80] { R3694 += 1, R3644 += 1 };
  s1 -> s1 [81, 65535] { R3694 += 1, R3644 += 1 };
  s2 -> s1 [0, 64] { R3694 += 1, R3644 += 1 };
  s2 -> s2 [0, 65535] { R3694 += 1, R3643 += 1, R3644 += 1 };
  s2 -> s3 [65, 65] { R3694 += 1, R3644 += 1 };
  s2 -> s4 [65, 65] { R3694 += 1, R3644 += 1 };
  s2 -> s5 [80, 80] { R3694 += 1, R3644 += 1 };
  s2 -> s1 [81, 65535] { R3694 += 1, R3644 += 1 };
  s3 -> s3 [0, 65] { R3694 += 1, R3644 += 1 };
  s3 -> s8 [80, 80] { R3694 += 1, R3644 += 1 };
  s3 -> s3 [81, 65535] { R3694 += 1, R3644 += 1 };
  s5 -> s5 [0, 64] { R3694 += 1, R3644 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3694 += 1 };
  s5 -> s7 [65, 65] { R3694 += 1, R3644 += 1 };
  s5 -> s8 [65, 65] { R3694 += 1, R3644 += 1 };
  s5 -> s5 [80, 65535] { R3694 += 1, R3644 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3694 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3694 += 1, R3644 += 1 };
  s8 -> s8 [0, 65535] { R3694 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [80, 65535] { R3694 += 1, R3644 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3695 += 1, R3696 += 1 };
  s0 -> s2 [0, 65535] { R3696 += 1, R3645 += 1, R3646 += 1 };
  s0 -> s3 [65, 65] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3696 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3696 += 1, R3645 += 1, R3646 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R3696 += 1 };
  s3 -> s3 [0, 65535] { R3696 += 1, R3646 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3696 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3696 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3698 += 1, R3648 += 1 };
  s0 -> s2 [0, 64] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R3697 += 1, R3698 += 1 };
  s0 -> s3 [0, 65535] { R3698 += 1, R3647 += 1, R3648 += 1 };
  s0 -> s4 [65, 65] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R3698 += 1, R3648 += 1 };
  s0 -> s6 [65, 65] { R3698 += 1, R3648 += 1 };
  s0 -> s7 [65, 65] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s0 -> s1 [66, 79] { R3698 += 1, R3648 += 1 };
  s0 -> s2 [66, 65535] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R3698 += 1, R3648 += 1 };
  s1 -> s1 [0, 64] { R3698 += 1, R3648 += 1 };
  s1 -> s1 [0, 65535] { R3698 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R3698 += 1, R3648 += 1 };
  s1 -> s6 [65, 65] { R3698 += 1, R3648 += 1 };
  s1 -> s1 [66, 79] { R3698 += 1, R3648 += 1 };
  s1 -> s1 [81, 65535] { R3698 += 1, R3648 += 1 };
  s2 -> s1 [0, 64] { R3698 += 1, R3648 += 1 };
  s2 -> s2 [0, 64] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R3698 += 1, R3648 += 1 };
  s2 -> s6 [65, 65] { R3698 += 1, R3648 += 1 };
  s2 -> s7 [65, 65] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s2 -> s1 [66, 79] { R3698 += 1, R3648 += 1 };
  s2 -> s2 [66, 65535] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R3698 += 1, R3648 += 1 };
  s3 -> s1 [0, 64] { R3698 += 1, R3648 += 1 };
  s3 -> s2 [0, 64] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R3698 += 1, R3647 += 1, R3648 += 1 };
  s3 -> s4 [65, 65] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R3698 += 1, R3648 += 1 };
  s3 -> s6 [65, 65] { R3698 += 1, R3648 += 1 };
  s3 -> s7 [65, 65] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s3 -> s1 [66, 79] { R3698 += 1, R3648 += 1 };
  s3 -> s2 [66, 65535] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R3698 += 1, R3648 += 1 };
  s5 -> s5 [0, 79] { R3698 += 1, R3648 += 1 };
  s5 -> s5 [0, 65535] { R3698 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [81, 65535] { R3698 += 1, R3648 += 1 };
  s6 -> s6 [0, 65535] { R3698 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 79] { R3698 += 1, R3648 += 1 };
  s7 -> s7 [0, 65535] { R3698 += 1, R3648 += 1, R3509 += 1 };
  s7 -> s5 [81, 65535] { R3698 += 1, R3648 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s0 [0, 65535] { R3699 += 1, R3700 += 1 };
  s0 -> s2 [0, 65535] { R3700 += 1, R3649 += 1, R3650 += 1 };
  s0 -> s3 [65, 65] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 65535] { R3700 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3700 += 1, R3649 += 1, R3650 += 1 };
  s2 -> s3 [65, 65] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3700 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3700 += 1 };
  s4 -> s4 [0, 65535] { R3700 += 1, R3650 += 1, R3511 += 1, R3512 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3700 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s0 [0, 65535] { R3701 += 1, R3702 += 1 };
  s0 -> s2 [0, 65535] { R3702 += 1, R3651 += 1, R3652 += 1 };
  s0 -> s3 [65, 65] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s4 [65, 65] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s1 [66, 65535] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [0, 64] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [0, 65535] { R3702 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s4 [65, 65] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [66, 65535] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s1 [0, 64] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3702 += 1, R3651 += 1, R3652 += 1 };
  s2 -> s3 [65, 65] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s4 [65, 65] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s1 [66, 65535] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s3 -> s3 [0, 65535] { R3702 += 1, R3652 += 1, R3515 += 1, R3516 += 1 };
  s3 -> s6 [0, 65535] { R3702 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3702 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3702 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3704 += 1, R3654 += 1 };
  s0 -> s0 [0, 65535] { R3703 += 1, R3704 += 1 };
  s0 -> s2 [0, 65535] { R3704 += 1, R3653 += 1, R3654 += 1 };
  s0 -> s3 [65, 65] { R3704 += 1, R3654 += 1 };
  s0 -> s4 [65, 65] { R3704 += 1, R3654 += 1 };
  s0 -> s1 [66, 65535] { R3704 += 1, R3654 += 1 };
  s1 -> s1 [0, 64] { R3704 += 1, R3654 += 1 };
  s1 -> s1 [0, 65535] { R3704 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3704 += 1, R3654 += 1 };
  s1 -> s4 [65, 65] { R3704 += 1, R3654 += 1 };
  s1 -> s1 [66, 65535] { R3704 += 1, R3654 += 1 };
  s2 -> s1 [0, 64] { R3704 += 1, R3654 += 1 };
  s2 -> s2 [0, 65535] { R3704 += 1, R3653 += 1, R3654 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3704 += 1, R3654 += 1 };
  s2 -> s4 [65, 65] { R3704 += 1, R3654 += 1 };
  s2 -> s1 [66, 65535] { R3704 += 1, R3654 += 1 };
  s3 -> s3 [0, 65535] { R3704 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3704 += 1 };
  s4 -> s4 [0, 65535] { R3704 += 1, R3654 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3704 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s0 -> s2 [0, 64] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s0 -> s3 [0, 65535] { R3706 += 1, R3655 += 1, R3656 += 1 };
  s0 -> s0 [0, 65535] { R3705 += 1, R3706 += 1 };
  s0 -> s4 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s0 -> s5 [65, 65] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s0 -> s6 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s0 -> s7 [65, 65] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s0 -> s1 [66, 65535] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s0 -> s2 [66, 65535] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s1 -> s1 [0, 64] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s1 -> s2 [0, 64] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s1 -> s4 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s1 -> s5 [65, 65] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s1 -> s6 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s1 -> s7 [65, 65] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s1 -> s1 [66, 65535] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s1 -> s2 [66, 65535] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s2 -> s2 [0, 64] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s2 -> s2 [0, 65535] { R3706 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s2 -> s6 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s2 -> s2 [66, 65535] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s3 -> s1 [0, 64] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s3 -> s2 [0, 64] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s3 -> s3 [0, 65535] { R3706 += 1, R3655 += 1, R3656 += 1 };
  s3 -> s4 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s3 -> s5 [65, 65] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s3 -> s6 [65, 65] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s3 -> s7 [65, 65] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s3 -> s1 [66, 65535] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s3 -> s2 [66, 65535] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s4 -> s4 [0, 65535] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R3706 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3706 += 1 };
  s7 -> s4 [0, 65535] { R3706 += 1, R3656 += 1, R3616 += 1, R3617 += 1 };
  s7 -> s7 [0, 65535] { R3706 += 1, R3656 += 1, R3615 += 1, R3616 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3706 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3708 += 1, R3658 += 1 };
  s0 -> s0 [0, 65535] { R3707 += 1, R3708 += 1 };
  s0 -> s2 [0, 65535] { R3708 += 1, R3657 += 1, R3658 += 1 };
  s0 -> s3 [65, 65] { R3708 += 1, R3658 += 1 };
  s0 -> s4 [65, 65] { R3708 += 1, R3658 += 1 };
  s0 -> s1 [66, 65535] { R3708 += 1, R3658 += 1 };
  s1 -> s1 [0, 64] { R3708 += 1, R3658 += 1 };
  s1 -> s1 [0, 65535] { R3708 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3708 += 1, R3658 += 1 };
  s1 -> s4 [65, 65] { R3708 += 1, R3658 += 1 };
  s1 -> s1 [66, 65535] { R3708 += 1, R3658 += 1 };
  s2 -> s1 [0, 64] { R3708 += 1, R3658 += 1 };
  s2 -> s2 [0, 65535] { R3708 += 1, R3657 += 1, R3658 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3708 += 1, R3658 += 1 };
  s2 -> s4 [65, 65] { R3708 += 1, R3658 += 1 };
  s2 -> s1 [66, 65535] { R3708 += 1, R3658 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3708 += 1 };
  s4 -> s5 [0, 65535] { R3708 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3708 += 1, R3658 += 1 };
  s5 -> s5 [0, 65535] { R3708 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3640 && R2 = R3708 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3621 = 0 && R3622 = R3640 && R3623 = 0 && R3624 = R3640 && R3625 = 0 && R3626 = R3640 && R3627 = 0 && R3628 = R3640 && R3629 = 0 && R3630 = R3640 && R3631 = 0 && R3632 = R3640 && R3633 = 0 && R3634 = R3640 && R3635 = 0 && R3636 = R3640 && R3637 = 0 && R3638 = R3640 && R3639 = 0 && R3643 = 0 && R3644 = 0 && R3647 = 0 && R3648 = 0 && R3655 = 0 && R3656 = 0 && R3659 = 10 && R3660 = R3708 && R3661 = 10 && R3662 = R3708 && R3663 = 10 && R3664 = R3708 && R3665 = 10 && R3666 = R3708 && R3667 = 10 && R3668 = R3708 && R3669 = 10 && R3670 = R3708 && R3671 = 10 && R3672 = R3708 && R3673 = 10 && R3674 = R3708 && R3675 = 10 && R3676 = R3708 && R3677 = 10 && R3678 = R3708 && R3679 = 10 && R3680 = R3708 && R3681 = 10 && R3682 = R3708 && R3683 = 10 && R3684 = R3708 && R3685 = 10 && R3686 = R3708 && R3687 = 10 && R3688 = R3708 && R3689 = 10 && R3690 = R3708 && R3691 = 10 && R3692 = R3708 && R3693 = 10 && R3694 = R3708 && R3695 = 10 && R3696 = R3708 && R3697 = 10 && R3698 = R3708 && R3699 = 10 && R3700 = R3708 && R3701 = 10 && R3702 = R3708 && R3703 = 10 && R3704 = R3708 && R3705 = 10 && R3706 = R3708 && R3707 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R3640 && 9 < R3708 && (R14 = 0 || (R3641 = 0 && R3642 = 0)) && (R14 = 0 || (R3645 = 0 && R3646 = 0)) && (R14 = 0 || (R3649 = 0 && R3650 = 0)) && (R14 = 0 || (R3651 = 0 && R3652 = 0)) && (R14 = 0 || (R3653 = 0 && R3654 = 0)) && (R14 = 0 || (R3657 = 0 && R3658 = 0)) && (R3520 + R3517 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R3520 + R3517 = 0 || (R3518 + R3515 = 0 && R3519 + R3516 = 0)) && (R3620 + R3617 = 0 || (R3618 + R3615 = 0 && R3619 + R3616 = 0));
// End of Parikh automata intersection problem
