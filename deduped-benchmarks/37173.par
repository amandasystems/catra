// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R1777, R1778, R1779, R1780, R1781, R1782, R18, R1971, R1972, R1973, R1974, R1975, R1976, R1977, R1978, R1979, R1980, R1981, R1982, R1983, R1984, R1985, R1986, R1987, R1988, R1989, R1990, R1991, R1992, R1993, R1994, R1995, R1996, R1997, R1998, R1999, R2, R2000, R2001, R2002, R2003, R2004, R2005, R2006, R2007, R2008, R2009, R2010, R2011, R2012, R2013, R2014, R2015, R2016, R2017, R2018, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2016 += 1 };
  s0 -> s0 [0, 65535] { R2015 += 1, R2016 += 1 };
  s0 -> s1 [45, 45] { R2016 += 1 };
  s0 -> s2 [46, 46] { R2016 += 1 };
  s0 -> s1 [48, 62] { R2016 += 1 };
  s0 -> s3 [65, 65] { R2016 += 1 };
  s0 -> s1 [66, 65535] { R2016 += 1 };
  s1 -> s1 [0, 43] { R2016 += 1 };
  s1 -> s1 [45, 45] { R2016 += 1 };
  s1 -> s2 [46, 46] { R2016 += 1 };
  s1 -> s1 [48, 62] { R2016 += 1 };
  s1 -> s3 [65, 65] { R2016 += 1 };
  s1 -> s1 [66, 65535] { R2016 += 1 };
  s2 -> s1 [0, 43] { R2016 += 1 };
  s2 -> s1 [45, 45] { R2016 += 1 };
  s2 -> s2 [46, 46] { R2016 += 1 };
  s2 -> s1 [48, 62] { R2016 += 1 };
  s2 -> s3 [65, 65] { R2016 += 1 };
  s2 -> s1 [66, 114] { R2016 += 1 };
  s2 -> s8 [115, 115] { R2016 += 1 };
  s2 -> s1 [116, 65535] { R2016 += 1 };
  s3 -> s3 [0, 43] { R2016 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2016 += 1 };
  s3 -> s4 [46, 46] { R2016 += 1 };
  s3 -> s3 [48, 62] { R2016 += 1 };
  s3 -> s3 [65, 65535] { R2016 += 1 };
  s4 -> s3 [0, 43] { R2016 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2016 += 1 };
  s4 -> s4 [46, 46] { R2016 += 1 };
  s4 -> s3 [48, 62] { R2016 += 1 };
  s4 -> s3 [65, 114] { R2016 += 1 };
  s4 -> s5 [115, 115] { R2016 += 1 };
  s4 -> s3 [116, 65535] { R2016 += 1 };
  s5 -> s3 [0, 43] { R2016 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2016 += 1 };
  s5 -> s4 [46, 46] { R2016 += 1 };
  s5 -> s3 [48, 62] { R2016 += 1 };
  s5 -> s3 [65, 110] { R2016 += 1 };
  s5 -> s6 [111, 111] { R2016 += 1 };
  s5 -> s3 [112, 65535] { R2016 += 1 };
  s6 -> s3 [0, 43] { R2016 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2016 += 1 };
  s6 -> s4 [46, 46] { R2016 += 1 };
  s6 -> s3 [48, 62] { R2016 += 1 };
  s6 -> s3 [65, 98] { R2016 += 1 };
  s6 -> s7 [99, 99] { R2016 += 1 };
  s6 -> s3 [100, 65535] { R2016 += 1 };
  s7 -> s3 [0, 43] { R2016 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2016 += 1 };
  s7 -> s4 [46, 46] { R2016 += 1 };
  s7 -> s3 [48, 62] { R2016 += 1 };
  s7 -> s3 [65, 106] { R2016 += 1 };
  s7 -> s3 [108, 65535] { R2016 += 1 };
  s8 -> s1 [0, 43] { R2016 += 1 };
  s8 -> s1 [45, 45] { R2016 += 1 };
  s8 -> s2 [46, 46] { R2016 += 1 };
  s8 -> s1 [48, 62] { R2016 += 1 };
  s8 -> s3 [65, 65] { R2016 += 1 };
  s8 -> s1 [66, 110] { R2016 += 1 };
  s8 -> s9 [111, 111] { R2016 += 1 };
  s8 -> s1 [112, 65535] { R2016 += 1 };
  s9 -> s1 [0, 43] { R2016 += 1 };
  s9 -> s1 [45, 45] { R2016 += 1 };
  s9 -> s2 [46, 46] { R2016 += 1 };
  s9 -> s1 [48, 62] { R2016 += 1 };
  s9 -> s3 [65, 65] { R2016 += 1 };
  s9 -> s1 [66, 98] { R2016 += 1 };
  s9 -> s10 [99, 99] { R2016 += 1 };
  s9 -> s1 [100, 65535] { R2016 += 1 };
  s10 -> s1 [0, 43] { R2016 += 1 };
  s10 -> s1 [45, 45] { R2016 += 1 };
  s10 -> s2 [46, 46] { R2016 += 1 };
  s10 -> s1 [48, 62] { R2016 += 1 };
  s10 -> s3 [65, 65] { R2016 += 1 };
  s10 -> s1 [66, 106] { R2016 += 1 };
  s10 -> s1 [108, 65535] { R2016 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2017 += 1, R2018 += 1 };
  s0 -> s1 [0, 65535] { R2018 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2018 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2020 += 1 };
  s0 -> s2 [0, 65535] { R2020 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2019 += 1, R2020 += 1 };
  s0 -> s3 [58, 58] { R2020 += 1 };
  s0 -> s1 [59, 65535] { R2020 += 1 };
  s1 -> s1 [0, 57] { R2020 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2020 += 1 };
  s1 -> s1 [59, 65535] { R2020 += 1 };
  s2 -> s1 [0, 57] { R2020 += 1 };
  s2 -> s2 [0, 65535] { R2020 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2020 += 1 };
  s2 -> s1 [59, 65535] { R2020 += 1 };
  s3 -> s3 [0, 65535] { R2020 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2022 += 1 };
  s0 -> s0 [0, 65535] { R2021 += 1, R2022 += 1 };
  s0 -> s2 [0, 65535] { R2022 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R2022 += 1 };
  s0 -> s1 [66, 65535] { R2022 += 1 };
  s1 -> s1 [0, 64] { R2022 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2022 += 1 };
  s1 -> s1 [66, 65535] { R2022 += 1 };
  s2 -> s1 [0, 64] { R2022 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2022 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2022 += 1 };
  s2 -> s1 [66, 65535] { R2022 += 1 };
  s3 -> s3 [0, 65535] { R2022 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2024 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2023 += 1, R2024 += 1 };
  s0 -> s2 [0, 65535] { R2024 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R2024 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2024 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2024 += 1 };
  s1 -> s1 [0, 65535] { R2024 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2024 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2024 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R2024 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2024 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2024 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2024 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2026 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2025 += 1, R2026 += 1 };
  s0 -> s2 [0, 65535] { R2026 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R2026 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2026 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2026 += 1 };
  s2 -> s2 [0, 65535] { R2026 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2026 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2028 += 1, R1978 += 1 };
  s0 -> s0 [0, 65535] { R2027 += 1, R2028 += 1 };
  s0 -> s2 [0, 65535] { R2028 += 1, R1977 += 1, R1978 += 1 };
  s0 -> s1 [66, 65535] { R2028 += 1, R1978 += 1 };
  s1 -> s1 [0, 64] { R2028 += 1, R1978 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2028 += 1 };
  s1 -> s1 [66, 65535] { R2028 += 1, R1978 += 1 };
  s2 -> s1 [0, 64] { R2028 += 1, R1978 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2028 += 1, R1977 += 1, R1978 += 1 };
  s2 -> s1 [66, 65535] { R2028 += 1, R1978 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2029 += 1, R2030 += 1 };
  s0 -> s1 [0, 65535] { R2030 += 1, R1979 += 1, R1980 += 1 };
  s0 -> s2 [0, 65535] { R2030 += 1, R1980 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2030 += 1, R1979 += 1, R1980 += 1 };
  s1 -> s2 [0, 65535] { R2030 += 1, R1980 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2030 += 1 };
  s2 -> s2 [0, 65535] { R2030 += 1, R1980 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2030 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2032 += 1, R1982 += 1 };
  s0 -> s2 [0, 65535] { R2032 += 1, R1981 += 1, R1982 += 1 };
  s0 -> s0 [0, 65535] { R2031 += 1, R2032 += 1 };
  s0 -> s1 [80, 65535] { R2032 += 1, R1982 += 1 };
  s1 -> s1 [0, 65] { R2032 += 1, R1982 += 1 };
  s1 -> s1 [0, 65535] { R2032 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2032 += 1, R1982 += 1 };
  s2 -> s1 [0, 65] { R2032 += 1, R1982 += 1 };
  s2 -> s2 [0, 65535] { R2032 += 1, R1981 += 1, R1982 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R2032 += 1, R1982 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2034 += 1, R1983 += 1, R1984 += 1 };
  s0 -> s2 [0, 65535] { R2034 += 1, R1984 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2033 += 1, R2034 += 1 };
  s1 -> s1 [0, 65535] { R2034 += 1, R1983 += 1, R1984 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2034 += 1, R1984 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2034 += 1, R1984 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535] { R2034 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2034 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R2036 += 1, R1986 += 1 };
  s0 -> s2 [0, 65535] { R2036 += 1, R1986 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R2035 += 1, R2036 += 1 };
  s0 -> s3 [0, 65535] { R2036 += 1, R1985 += 1, R1986 += 1 };
  s0 -> s1 [81, 65535] { R2036 += 1, R1986 += 1 };
  s1 -> s1 [0, 79] { R2036 += 1, R1986 += 1 };
  s1 -> s1 [0, 65535] { R2036 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R2036 += 1, R1986 += 1 };
  s2 -> s1 [0, 79] { R2036 += 1, R1986 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2036 += 1, R1986 += 1, R1772 += 1 };
  s2 -> s5 [0, 65535] { R2036 += 1 };
  s2 -> s1 [81, 65535] { R2036 += 1, R1986 += 1 };
  s3 -> s1 [0, 79] { R2036 += 1, R1986 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2036 += 1, R1986 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R2036 += 1, R1985 += 1, R1986 += 1 };
  s3 -> s1 [81, 65535] { R2036 += 1, R1986 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2036 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s0 -> s0 [0, 65535] { R2037 += 1, R2038 += 1 };
  s0 -> s2 [0, 65535] { R2038 += 1, R1988 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s3 [0, 65535] { R2038 += 1, R1987 += 1, R1988 += 1 };
  s0 -> s1 [81, 65535] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s1 -> s1 [0, 79] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s1 -> s5 [0, 65535] { R2038 += 1 };
  s1 -> s1 [0, 65535] { R2038 += 1, R1988 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s2 -> s1 [0, 79] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s2 -> s5 [0, 65535] { R2038 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2038 += 1, R1988 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s1 [81, 65535] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s3 -> s1 [0, 79] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2038 += 1, R1988 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s3 [0, 65535] { R2038 += 1, R1987 += 1, R1988 += 1 };
  s3 -> s1 [81, 65535] { R2038 += 1, R1988 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2038 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2040 += 1, R1989 += 1, R1990 += 1 };
  s0 -> s2 [0, 65535] { R2040 += 1, R1990 += 1, R1781 += 1, R1782 += 1 };
  s0 -> s3 [0, 65535] { R2040 += 1, R1990 += 1, R1780 += 1, R1781 += 1 };
  s0 -> s0 [0, 65535] { R2039 += 1, R2040 += 1 };
  s1 -> s1 [0, 65535] { R2040 += 1, R1989 += 1, R1990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2040 += 1, R1990 += 1, R1781 += 1, R1782 += 1 };
  s1 -> s3 [0, 65535] { R2040 += 1, R1990 += 1, R1780 += 1, R1781 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2040 += 1, R1990 += 1, R1781 += 1, R1782 += 1 };
  s2 -> s5 [0, 65535] { R2040 += 1 };
  s2 -> s6 [0, 65535] { R2040 += 1, R1990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2040 += 1, R1990 += 1, R1781 += 1, R1782 += 1 };
  s3 -> s5 [0, 65535] { R2040 += 1 };
  s3 -> s3 [0, 65535] { R2040 += 1, R1990 += 1, R1780 += 1, R1781 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2040 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2040 += 1 };
  s6 -> s6 [0, 65535] { R2040 += 1, R1990 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2042 += 1, R1991 += 1, R1992 += 1 };
  s0 -> s2 [0, 65535] { R2042 += 1, R1992 += 1 };
  s0 -> s0 [0, 65535] { R2041 += 1, R2042 += 1 };
  s1 -> s1 [0, 65535] { R2042 += 1, R1991 += 1, R1992 += 1 };
  s1 -> s2 [0, 65535] { R2042 += 1, R1992 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2042 += 1, R1992 += 1 };
  s2 -> s3 [0, 65535] { R2042 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2042 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2044 += 1, R1993 += 1, R1994 += 1 };
  s0 -> s0 [0, 65535] { R2043 += 1, R2044 += 1 };
  s0 -> s2 [0, 65535] { R2044 += 1, R1994 += 1 };
  s1 -> s1 [0, 65535] { R2044 += 1, R1993 += 1, R1994 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2044 += 1, R1994 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2044 += 1, R1994 += 1 };
  s2 -> s4 [0, 65535] { R2044 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2044 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2046 += 1, R1996 += 1 };
  s0 -> s2 [0, 65535] { R2046 += 1, R1995 += 1, R1996 += 1 };
  s0 -> s0 [0, 65535] { R2045 += 1, R2046 += 1 };
  s1 -> s1 [0, 65535] { R2046 += 1, R1996 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2046 += 1 };
  s2 -> s1 [0, 65535] { R2046 += 1, R1996 += 1 };
  s2 -> s2 [0, 65535] { R2046 += 1, R1995 += 1, R1996 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2046 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2048 += 1, R1997 += 1, R1998 += 1 };
  s0 -> s0 [0, 65535] { R2047 += 1, R2048 += 1 };
  s0 -> s2 [0, 65535] { R2048 += 1, R1998 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2048 += 1, R1997 += 1, R1998 += 1 };
  s1 -> s2 [0, 65535] { R2048 += 1, R1998 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2048 += 1 };
  s2 -> s2 [0, 65535] { R2048 += 1, R1998 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2048 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2050 += 1, R2000 += 1 };
  s0 -> s2 [0, 65535] { R2050 += 1, R1999 += 1, R2000 += 1 };
  s0 -> s0 [0, 65535] { R2049 += 1, R2050 += 1 };
  s0 -> s3 [65, 65] { R2050 += 1, R2000 += 1 };
  s0 -> s4 [65, 65] { R2050 += 1, R2000 += 1 };
  s0 -> s5 [80, 80] { R2050 += 1, R2000 += 1 };
  s0 -> s1 [81, 65535] { R2050 += 1, R2000 += 1 };
  s1 -> s1 [0, 64] { R2050 += 1, R2000 += 1 };
  s1 -> s3 [65, 65] { R2050 += 1, R2000 += 1 };
  s1 -> s4 [65, 65] { R2050 += 1, R2000 += 1 };
  s1 -> s5 [80, 80] { R2050 += 1, R2000 += 1 };
  s1 -> s1 [81, 65535] { R2050 += 1, R2000 += 1 };
  s2 -> s1 [0, 64] { R2050 += 1, R2000 += 1 };
  s2 -> s2 [0, 65535] { R2050 += 1, R1999 += 1, R2000 += 1 };
  s2 -> s3 [65, 65] { R2050 += 1, R2000 += 1 };
  s2 -> s4 [65, 65] { R2050 += 1, R2000 += 1 };
  s2 -> s5 [80, 80] { R2050 += 1, R2000 += 1 };
  s2 -> s1 [81, 65535] { R2050 += 1, R2000 += 1 };
  s4 -> s4 [0, 65] { R2050 += 1, R2000 += 1 };
  s4 -> s7 [80, 80] { R2050 += 1, R2000 += 1 };
  s4 -> s4 [81, 65535] { R2050 += 1, R2000 += 1 };
  s5 -> s5 [0, 64] { R2050 += 1, R2000 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2050 += 1 };
  s5 -> s7 [65, 65] { R2050 += 1, R2000 += 1 };
  s5 -> s8 [65, 65] { R2050 += 1, R2000 += 1 };
  s5 -> s5 [80, 65535] { R2050 += 1, R2000 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2050 += 1, R2000 += 1 };
  s7 -> s7 [0, 65535] { R2050 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R2050 += 1, R2000 += 1 };
  s8 -> s8 [0, 65535] { R2050 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R2052 += 1, R2001 += 1, R2002 += 1 };
  s0 -> s0 [0, 65535] { R2051 += 1, R2052 += 1 };
  s0 -> s3 [65, 65] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2052 += 1 };
  s1 -> s3 [65, 65] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2052 += 1, R2001 += 1, R2002 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R2052 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2052 += 1, R2002 += 1, R1769 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2052 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2052 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2054 += 1, R2003 += 1, R2004 += 1 };
  s0 -> s0 [0, 65535] { R2053 += 1, R2054 += 1 };
  s0 -> s3 [65, 65] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2054 += 1 };
  s1 -> s3 [65, 65] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R2054 += 1, R2003 += 1, R2004 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R2054 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2054 += 1 };
  s4 -> s4 [0, 65535] { R2054 += 1, R2004 += 1, R1771 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2054 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s0 [0, 65535] { R2055 += 1, R2056 += 1 };
  s0 -> s2 [0, 65535] { R2056 += 1, R2005 += 1, R2006 += 1 };
  s0 -> s3 [65, 65] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 65535] { R2056 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R2056 += 1, R2005 += 1, R2006 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R2056 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2056 += 1 };
  s4 -> s4 [0, 65535] { R2056 += 1, R2006 += 1, R1773 += 1, R1774 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2056 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s0 [0, 65535] { R2057 += 1, R2058 += 1 };
  s0 -> s2 [0, 65535] { R2058 += 1, R2007 += 1, R2008 += 1 };
  s0 -> s3 [65, 65] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s4 [65, 65] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s1 [66, 65535] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 64] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 65535] { R2058 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s4 [65, 65] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [66, 65535] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [0, 64] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2058 += 1, R2007 += 1, R2008 += 1 };
  s2 -> s3 [65, 65] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s4 [65, 65] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [66, 65535] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s3 [0, 65535] { R2058 += 1, R2008 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2058 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2060 += 1, R2010 += 1 };
  s0 -> s2 [0, 65535] { R2060 += 1, R2009 += 1, R2010 += 1 };
  s0 -> s0 [0, 65535] { R2059 += 1, R2060 += 1 };
  s0 -> s3 [65, 65] { R2060 += 1, R2010 += 1 };
  s0 -> s4 [65, 65] { R2060 += 1, R2010 += 1 };
  s0 -> s1 [66, 65535] { R2060 += 1, R2010 += 1 };
  s1 -> s1 [0, 64] { R2060 += 1, R2010 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2060 += 1 };
  s1 -> s3 [65, 65] { R2060 += 1, R2010 += 1 };
  s1 -> s4 [65, 65] { R2060 += 1, R2010 += 1 };
  s1 -> s1 [66, 65535] { R2060 += 1, R2010 += 1 };
  s2 -> s1 [0, 64] { R2060 += 1, R2010 += 1 };
  s2 -> s2 [0, 65535] { R2060 += 1, R2009 += 1, R2010 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2060 += 1, R2010 += 1 };
  s2 -> s4 [65, 65] { R2060 += 1, R2010 += 1 };
  s2 -> s1 [66, 65535] { R2060 += 1, R2010 += 1 };
  s3 -> s3 [0, 65535] { R2060 += 1, R2010 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2060 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2060 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2060 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s0 -> s2 [0, 64] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s0 -> s0 [0, 65535] { R2061 += 1, R2062 += 1 };
  s0 -> s3 [0, 65535] { R2062 += 1, R2011 += 1, R2012 += 1 };
  s0 -> s4 [65, 65] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s0 -> s5 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s0 -> s6 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s0 -> s7 [65, 65] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s0 -> s1 [66, 65535] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s0 -> s2 [66, 65535] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s1 -> s1 [0, 64] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s1 -> s11 [0, 64] { R2062 += 1, R2012 += 1 };
  s1 -> s12 [65, 65] { R2062 += 1, R2012 += 1 };
  s1 -> s5 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s1 -> s6 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s1 -> s8 [65, 65] { R2062 += 1, R2012 += 1 };
  s1 -> s1 [66, 65535] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s1 -> s11 [66, 65535] { R2062 += 1, R2012 += 1 };
  s2 -> s1 [0, 64] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s2 -> s2 [0, 64] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s2 -> s4 [65, 65] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s2 -> s5 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s2 -> s6 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s2 -> s7 [65, 65] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s2 -> s1 [66, 65535] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s2 -> s2 [66, 65535] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s3 -> s1 [0, 64] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s3 -> s2 [0, 64] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s3 -> s3 [0, 65535] { R2062 += 1, R2011 += 1, R2012 += 1 };
  s3 -> s4 [65, 65] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s3 -> s5 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s3 -> s6 [65, 65] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s3 -> s7 [65, 65] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s3 -> s1 [66, 65535] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s3 -> s2 [66, 65535] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s4 -> s4 [0, 65535] { R2062 += 1, R2012 += 1, R1971 += 1, R1972 += 1 };
  s4 -> s5 [0, 65535] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s5 -> s5 [0, 65535] { R2062 += 1, R2012 += 1, R1972 += 1, R1973 += 1 };
  s5 -> s8 [0, 65535] { R2062 += 1, R2012 += 1 };
  s8 -> s9 [0, 65535] { R2062 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R2062 += 1, R2012 += 1 };
  s9 -> s9 [0, 65535] { R2062 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R2062 += 1, R2012 += 1 };
  s11 -> s11 [0, 65535] { R2062 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R2062 += 1, R2012 += 1 };
  s11 -> s8 [65, 65] { R2062 += 1, R2012 += 1 };
  s11 -> s11 [66, 65535] { R2062 += 1, R2012 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R2062 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2064 += 1, R2014 += 1 };
  s0 -> s2 [0, 65535] { R2064 += 1, R2013 += 1, R2014 += 1 };
  s0 -> s0 [0, 65535] { R2063 += 1, R2064 += 1 };
  s0 -> s3 [65, 65] { R2064 += 1, R2014 += 1 };
  s0 -> s4 [65, 65] { R2064 += 1, R2014 += 1 };
  s0 -> s1 [66, 65535] { R2064 += 1, R2014 += 1 };
  s1 -> s1 [0, 64] { R2064 += 1, R2014 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2064 += 1 };
  s1 -> s3 [65, 65] { R2064 += 1, R2014 += 1 };
  s1 -> s4 [65, 65] { R2064 += 1, R2014 += 1 };
  s1 -> s1 [66, 65535] { R2064 += 1, R2014 += 1 };
  s2 -> s1 [0, 64] { R2064 += 1, R2014 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2064 += 1, R2013 += 1, R2014 += 1 };
  s2 -> s3 [65, 65] { R2064 += 1, R2014 += 1 };
  s2 -> s4 [65, 65] { R2064 += 1, R2014 += 1 };
  s2 -> s1 [66, 65535] { R2064 += 1, R2014 += 1 };
  s3 -> s3 [0, 65535] { R2064 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2064 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2064 += 1, R2014 += 1 };
  s5 -> s5 [0, 65535] { R2064 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1996 && R2 = R2064 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R1977 = 0 && R1978 = R1996 && R1979 = 0 && R1980 = R1996 && R1981 = 0 && R1982 = R1996 && R1983 = 0 && R1984 = R1996 && R1985 = 0 && R1986 = R1996 && R1987 = 0 && R1988 = R1996 && R1989 = 0 && R1990 = R1996 && R1991 = 0 && R1992 = R1996 && R1993 = 0 && R1994 = R1996 && R1995 = 0 && R1999 = 0 && R2000 = 0 && R2011 = 0 && R2012 = 0 && R2015 = 10 && R2016 = R2064 && R2017 = 10 && R2018 = R2064 && R2019 = 10 && R2020 = R2064 && R2021 = 10 && R2022 = R2064 && R2023 = 10 && R2024 = R2064 && R2025 = 10 && R2026 = R2064 && R2027 = 10 && R2028 = R2064 && R2029 = 10 && R2030 = R2064 && R2031 = 10 && R2032 = R2064 && R2033 = 10 && R2034 = R2064 && R2035 = 10 && R2036 = R2064 && R2037 = 10 && R2038 = R2064 && R2039 = 10 && R2040 = R2064 && R2041 = 10 && R2042 = R2064 && R2043 = 10 && R2044 = R2064 && R2045 = 10 && R2046 = R2064 && R2047 = 10 && R2048 = R2064 && R2049 = 10 && R2050 = R2064 && R2051 = 10 && R2052 = R2064 && R2053 = 10 && R2054 = R2064 && R2055 = 10 && R2056 = R2064 && R2057 = 10 && R2058 = R2064 && R2059 = 10 && R2060 = R2064 && R2061 = 10 && R2062 = R2064 && R2063 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R1996 && 9 < R2064 && (R14 = 0 || (R1997 = 0 && R1998 = 0)) && (R14 = 0 || (R2001 = 0 && R2002 = 0)) && (R14 = 0 || (R2003 = 0 && R2004 = 0)) && (R14 = 0 || (R2005 = 0 && R2006 = 0)) && (R14 = 0 || (R2007 = 0 && R2008 = 0)) && (R14 = 0 || (R2009 = 0 && R2010 = 0)) && (R14 = 0 || (R2013 = 0 && R2014 = 0)) && (R1782 + R1779 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R1782 + R1779 = 0 || (R1780 + R1777 = 0 && R1781 + R1778 = 0)) && (R1976 + R1973 = 0 || (R1974 + R1971 = 0 && R1975 + R1972 = 0));
// End of Parikh automata intersection problem
