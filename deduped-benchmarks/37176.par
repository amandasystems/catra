// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R2933, R2934, R2935, R2936, R2937, R2938, R2939, R2940, R2941, R2942, R2943, R2944, R2945, R2946, R2947, R2948, R2949, R2950, R2951, R2952, R2953, R2954, R2955, R2956, R2957, R2958, R2959, R2960, R2961, R2962, R2963, R2964, R2965, R2966, R2967, R2968, R2969, R2970, R2971, R2972, R2973, R2974, R2975, R2976, R2977, R2978, R2979, R2980, R2981, R2982, R2983, R2984, R2985, R2986, R2987, R2988, R2989, R2990, R2991, R2992, R2993, R2994, R2995, R2996, R2997, R2998, R2999, R3, R3000, R3001, R3002, R3003, R3004, R3005, R3006, R3007, R3008, R3009, R3010, R3011, R3012, R3013, R3014, R3015, R3016, R3017, R3018, R3019, R3020, R3021, R3022, R3023, R3024, R3025, R3026, R3027, R3028, R3029, R3030, R3031, R3032, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2984 += 1 };
  s0 -> s0 [0, 65535] { R2983 += 1, R2984 += 1 };
  s0 -> s1 [45, 45] { R2984 += 1 };
  s0 -> s2 [46, 46] { R2984 += 1 };
  s0 -> s1 [48, 62] { R2984 += 1 };
  s0 -> s3 [65, 65] { R2984 += 1 };
  s0 -> s1 [66, 65535] { R2984 += 1 };
  s1 -> s1 [0, 43] { R2984 += 1 };
  s1 -> s1 [45, 45] { R2984 += 1 };
  s1 -> s2 [46, 46] { R2984 += 1 };
  s1 -> s1 [48, 62] { R2984 += 1 };
  s1 -> s3 [65, 65] { R2984 += 1 };
  s1 -> s1 [66, 65535] { R2984 += 1 };
  s2 -> s1 [0, 43] { R2984 += 1 };
  s2 -> s1 [45, 45] { R2984 += 1 };
  s2 -> s2 [46, 46] { R2984 += 1 };
  s2 -> s1 [48, 62] { R2984 += 1 };
  s2 -> s3 [65, 65] { R2984 += 1 };
  s2 -> s1 [66, 114] { R2984 += 1 };
  s2 -> s8 [115, 115] { R2984 += 1 };
  s2 -> s1 [116, 65535] { R2984 += 1 };
  s3 -> s3 [0, 43] { R2984 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2984 += 1 };
  s3 -> s4 [46, 46] { R2984 += 1 };
  s3 -> s3 [48, 62] { R2984 += 1 };
  s3 -> s3 [65, 65535] { R2984 += 1 };
  s4 -> s3 [0, 43] { R2984 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2984 += 1 };
  s4 -> s4 [46, 46] { R2984 += 1 };
  s4 -> s3 [48, 62] { R2984 += 1 };
  s4 -> s3 [65, 114] { R2984 += 1 };
  s4 -> s5 [115, 115] { R2984 += 1 };
  s4 -> s3 [116, 65535] { R2984 += 1 };
  s5 -> s3 [0, 43] { R2984 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2984 += 1 };
  s5 -> s4 [46, 46] { R2984 += 1 };
  s5 -> s3 [48, 62] { R2984 += 1 };
  s5 -> s3 [65, 110] { R2984 += 1 };
  s5 -> s6 [111, 111] { R2984 += 1 };
  s5 -> s3 [112, 65535] { R2984 += 1 };
  s6 -> s3 [0, 43] { R2984 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2984 += 1 };
  s6 -> s4 [46, 46] { R2984 += 1 };
  s6 -> s3 [48, 62] { R2984 += 1 };
  s6 -> s3 [65, 98] { R2984 += 1 };
  s6 -> s7 [99, 99] { R2984 += 1 };
  s6 -> s3 [100, 65535] { R2984 += 1 };
  s7 -> s3 [0, 43] { R2984 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2984 += 1 };
  s7 -> s4 [46, 46] { R2984 += 1 };
  s7 -> s3 [48, 62] { R2984 += 1 };
  s7 -> s3 [65, 106] { R2984 += 1 };
  s7 -> s3 [108, 65535] { R2984 += 1 };
  s8 -> s1 [0, 43] { R2984 += 1 };
  s8 -> s1 [45, 45] { R2984 += 1 };
  s8 -> s2 [46, 46] { R2984 += 1 };
  s8 -> s1 [48, 62] { R2984 += 1 };
  s8 -> s3 [65, 65] { R2984 += 1 };
  s8 -> s1 [66, 110] { R2984 += 1 };
  s8 -> s9 [111, 111] { R2984 += 1 };
  s8 -> s1 [112, 65535] { R2984 += 1 };
  s9 -> s1 [0, 43] { R2984 += 1 };
  s9 -> s1 [45, 45] { R2984 += 1 };
  s9 -> s2 [46, 46] { R2984 += 1 };
  s9 -> s1 [48, 62] { R2984 += 1 };
  s9 -> s3 [65, 65] { R2984 += 1 };
  s9 -> s1 [66, 98] { R2984 += 1 };
  s9 -> s10 [99, 99] { R2984 += 1 };
  s9 -> s1 [100, 65535] { R2984 += 1 };
  s10 -> s1 [0, 43] { R2984 += 1 };
  s10 -> s1 [45, 45] { R2984 += 1 };
  s10 -> s2 [46, 46] { R2984 += 1 };
  s10 -> s1 [48, 62] { R2984 += 1 };
  s10 -> s3 [65, 65] { R2984 += 1 };
  s10 -> s1 [66, 106] { R2984 += 1 };
  s10 -> s1 [108, 65535] { R2984 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2985 += 1, R2986 += 1 };
  s0 -> s1 [0, 65535] { R2986 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2986 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2988 += 1 };
  s0 -> s2 [0, 65535] { R2988 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2987 += 1, R2988 += 1 };
  s0 -> s3 [58, 58] { R2988 += 1 };
  s0 -> s1 [59, 65535] { R2988 += 1 };
  s1 -> s1 [0, 57] { R2988 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2988 += 1 };
  s1 -> s1 [59, 65535] { R2988 += 1 };
  s2 -> s1 [0, 57] { R2988 += 1 };
  s2 -> s2 [0, 65535] { R2988 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2988 += 1 };
  s2 -> s1 [59, 65535] { R2988 += 1 };
  s3 -> s3 [0, 65535] { R2988 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2990 += 1 };
  s0 -> s0 [0, 65535] { R2989 += 1, R2990 += 1 };
  s0 -> s2 [0, 65535] { R2990 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R2990 += 1 };
  s0 -> s1 [66, 65535] { R2990 += 1 };
  s1 -> s1 [0, 64] { R2990 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2990 += 1 };
  s1 -> s1 [66, 65535] { R2990 += 1 };
  s2 -> s1 [0, 64] { R2990 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2990 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2990 += 1 };
  s2 -> s1 [66, 65535] { R2990 += 1 };
  s3 -> s3 [0, 65535] { R2990 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2992 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2991 += 1, R2992 += 1 };
  s0 -> s2 [0, 65535] { R2992 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R2992 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2992 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2992 += 1 };
  s1 -> s1 [0, 65535] { R2992 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2992 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2992 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R2992 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2992 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2992 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2992 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R2993 += 1, R2994 += 1 };
  s0 -> s1 [0, 65535] { R2994 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R2994 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R2994 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R2994 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2994 += 1 };
  s2 -> s2 [0, 65535] { R2994 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2994 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2996 += 1, R2946 += 1 };
  s0 -> s2 [0, 65535] { R2996 += 1, R2945 += 1, R2946 += 1 };
  s0 -> s0 [0, 65535] { R2995 += 1, R2996 += 1 };
  s0 -> s1 [66, 65535] { R2996 += 1, R2946 += 1 };
  s1 -> s1 [0, 64] { R2996 += 1, R2946 += 1 };
  s1 -> s1 [0, 65535] { R2996 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2996 += 1, R2946 += 1 };
  s2 -> s1 [0, 64] { R2996 += 1, R2946 += 1 };
  s2 -> s2 [0, 65535] { R2996 += 1, R2945 += 1, R2946 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2996 += 1, R2946 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2998 += 1, R2947 += 1, R2948 += 1 };
  s0 -> s0 [0, 65535] { R2997 += 1, R2998 += 1 };
  s0 -> s2 [0, 65535] { R2998 += 1, R2948 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2998 += 1, R2947 += 1, R2948 += 1 };
  s1 -> s2 [0, 65535] { R2998 += 1, R2948 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2998 += 1, R2948 += 1, R13 += 1 };
  s2 -> s4 [0, 65535] { R2998 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2998 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3000 += 1, R2950 += 1 };
  s0 -> s0 [0, 65535] { R2999 += 1, R3000 += 1 };
  s0 -> s2 [0, 65535] { R3000 += 1, R2949 += 1, R2950 += 1 };
  s0 -> s1 [80, 65535] { R3000 += 1, R2950 += 1 };
  s1 -> s1 [0, 65] { R3000 += 1, R2950 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3000 += 1 };
  s1 -> s1 [80, 65535] { R3000 += 1, R2950 += 1 };
  s2 -> s1 [0, 65] { R3000 += 1, R2950 += 1 };
  s2 -> s2 [0, 65535] { R3000 += 1, R2949 += 1, R2950 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3000 += 1, R2950 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3002 += 1, R2952 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R3001 += 1, R3002 += 1 };
  s0 -> s2 [0, 65535] { R3002 += 1, R2951 += 1, R2952 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3002 += 1, R2952 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R3002 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3002 += 1, R2952 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R3002 += 1, R2951 += 1, R2952 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3002 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R3004 += 1, R2954 += 1 };
  s0 -> s2 [0, 65535] { R3004 += 1, R2953 += 1, R2954 += 1 };
  s0 -> s3 [0, 65535] { R3004 += 1, R2954 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R3003 += 1, R3004 += 1 };
  s0 -> s1 [81, 65535] { R3004 += 1, R2954 += 1 };
  s1 -> s1 [0, 79] { R3004 += 1, R2954 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3004 += 1 };
  s1 -> s1 [81, 65535] { R3004 += 1, R2954 += 1 };
  s2 -> s1 [0, 79] { R3004 += 1, R2954 += 1 };
  s2 -> s2 [0, 65535] { R3004 += 1, R2953 += 1, R2954 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3004 += 1, R2954 += 1, R1772 += 1 };
  s2 -> s1 [81, 65535] { R3004 += 1, R2954 += 1 };
  s3 -> s1 [0, 79] { R3004 += 1, R2954 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3004 += 1, R2954 += 1, R1772 += 1 };
  s3 -> s5 [0, 65535] { R3004 += 1 };
  s3 -> s1 [81, 65535] { R3004 += 1, R2954 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3004 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3006 += 1, R2956 += 1, R2644 += 1 };
  s0 -> s1 [0, 65535] { R3006 += 1, R2956 += 1 };
  s0 -> s2 [0, 65535] { R3006 += 1, R2955 += 1, R2956 += 1 };
  s0 -> s0 [0, 65535] { R3005 += 1, R3006 += 1 };
  s0 -> s1 [81, 65535] { R3006 += 1, R2956 += 1, R2644 += 1 };
  s1 -> s1 [0, 79] { R3006 += 1, R2956 += 1, R2644 += 1 };
  s1 -> s1 [0, 65535] { R3006 += 1, R2956 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3006 += 1 };
  s1 -> s1 [81, 65535] { R3006 += 1, R2956 += 1, R2644 += 1 };
  s2 -> s1 [0, 79] { R3006 += 1, R2956 += 1, R2644 += 1 };
  s2 -> s1 [0, 65535] { R3006 += 1, R2956 += 1 };
  s2 -> s2 [0, 65535] { R3006 += 1, R2955 += 1, R2956 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R3006 += 1, R2956 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3006 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3008 += 1, R2957 += 1, R2958 += 1 };
  s0 -> s2 [0, 65535] { R3008 += 1, R2958 += 1, R2937 += 1, R2938 += 1 };
  s0 -> s0 [0, 65535] { R3007 += 1, R3008 += 1 };
  s0 -> s3 [0, 65535] { R3008 += 1, R2958 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3008 += 1, R2957 += 1, R2958 += 1 };
  s1 -> s2 [0, 65535] { R3008 += 1, R2958 += 1, R2937 += 1, R2938 += 1 };
  s1 -> s3 [0, 65535] { R3008 += 1, R2958 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3008 += 1, R2958 += 1, R2937 += 1, R2938 += 1 };
  s2 -> s5 [0, 65535] { R3008 += 1 };
  s2 -> s3 [0, 65535] { R3008 += 1, R2958 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3008 += 1 };
  s3 -> s3 [0, 65535] { R3008 += 1, R2958 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3008 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3009 += 1, R3010 += 1 };
  s0 -> s1 [0, 65535] { R3010 += 1, R2960 += 1 };
  s0 -> s2 [0, 65535] { R3010 += 1, R2959 += 1, R2960 += 1 };
  s1 -> s1 [0, 65535] { R3010 += 1, R2960 += 1 };
  s1 -> s4 [0, 65535] { R3010 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3010 += 1, R2960 += 1 };
  s2 -> s2 [0, 65535] { R3010 += 1, R2959 += 1, R2960 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3010 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3012 += 1, R2961 += 1, R2962 += 1 };
  s0 -> s0 [0, 65535] { R3011 += 1, R3012 += 1 };
  s0 -> s2 [0, 65535] { R3012 += 1, R2962 += 1, R2943 += 1, R2944 += 1 };
  s0 -> s3 [0, 65535] { R3012 += 1, R2962 += 1, R2942 += 1, R2943 += 1 };
  s1 -> s1 [0, 65535] { R3012 += 1, R2961 += 1, R2962 += 1 };
  s1 -> s2 [0, 65535] { R3012 += 1, R2962 += 1, R2943 += 1, R2944 += 1 };
  s1 -> s3 [0, 65535] { R3012 += 1, R2962 += 1, R2942 += 1, R2943 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R3012 += 1 };
  s2 -> s2 [0, 65535] { R3012 += 1, R2962 += 1, R2943 += 1, R2944 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R3012 += 1, R2962 += 1 };
  s3 -> s4 [0, 65535] { R3012 += 1 };
  s3 -> s2 [0, 65535] { R3012 += 1, R2962 += 1, R2943 += 1, R2944 += 1 };
  s3 -> s3 [0, 65535] { R3012 += 1, R2962 += 1, R2942 += 1, R2943 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3012 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3012 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3012 += 1, R2962 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3013 += 1, R3014 += 1 };
  s0 -> s1 [0, 65535] { R3014 += 1, R2963 += 1, R2964 += 1 };
  s0 -> s2 [0, 65535] { R3014 += 1, R2964 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3014 += 1, R2963 += 1, R2964 += 1 };
  s1 -> s2 [0, 65535] { R3014 += 1, R2964 += 1 };
  s2 -> s3 [0, 65535] { R3014 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3014 += 1, R2964 += 1 };
  s3 -> s3 [0, 65535] { R3014 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3016 += 1, R2966 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R3016 += 1, R2965 += 1, R2966 += 1 };
  s0 -> s0 [0, 65535] { R3015 += 1, R3016 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3016 += 1, R2966 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R3016 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3016 += 1, R2966 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R3016 += 1, R2965 += 1, R2966 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3016 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3018 += 1, R2968 += 1 };
  s0 -> s0 [0, 65535] { R3017 += 1, R3018 += 1 };
  s0 -> s2 [0, 65535] { R3018 += 1, R2967 += 1, R2968 += 1 };
  s0 -> s3 [65, 65] { R3018 += 1, R2968 += 1 };
  s0 -> s4 [65, 65] { R3018 += 1, R2968 += 1 };
  s0 -> s5 [80, 80] { R3018 += 1, R2968 += 1 };
  s0 -> s1 [81, 65535] { R3018 += 1, R2968 += 1 };
  s1 -> s1 [0, 64] { R3018 += 1, R2968 += 1 };
  s1 -> s3 [65, 65] { R3018 += 1, R2968 += 1 };
  s1 -> s4 [65, 65] { R3018 += 1, R2968 += 1 };
  s1 -> s5 [80, 80] { R3018 += 1, R2968 += 1 };
  s1 -> s1 [81, 65535] { R3018 += 1, R2968 += 1 };
  s2 -> s1 [0, 64] { R3018 += 1, R2968 += 1 };
  s2 -> s2 [0, 65535] { R3018 += 1, R2967 += 1, R2968 += 1 };
  s2 -> s3 [65, 65] { R3018 += 1, R2968 += 1 };
  s2 -> s4 [65, 65] { R3018 += 1, R2968 += 1 };
  s2 -> s5 [80, 80] { R3018 += 1, R2968 += 1 };
  s2 -> s1 [81, 65535] { R3018 += 1, R2968 += 1 };
  s3 -> s3 [0, 65] { R3018 += 1, R2968 += 1 };
  s3 -> s8 [80, 80] { R3018 += 1, R2968 += 1 };
  s3 -> s3 [81, 65535] { R3018 += 1, R2968 += 1 };
  s5 -> s5 [0, 64] { R3018 += 1, R2968 += 1 };
  s5 -> s5 [0, 65535] { R3018 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3018 += 1, R2968 += 1 };
  s5 -> s8 [65, 65] { R3018 += 1, R2968 += 1 };
  s5 -> s5 [80, 65535] { R3018 += 1, R2968 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3018 += 1 };
  s8 -> s8 [0, 65] { R3018 += 1, R2968 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3018 += 1 };
  s8 -> s8 [80, 65535] { R3018 += 1, R2968 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3019 += 1, R3020 += 1 };
  s0 -> s2 [0, 65535] { R3020 += 1, R2969 += 1, R2970 += 1 };
  s0 -> s3 [65, 65] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3020 += 1 };
  s1 -> s3 [65, 65] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3020 += 1, R2969 += 1, R2970 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3020 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3020 += 1, R2970 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535] { R3020 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R3022 += 1, R2971 += 1, R2972 += 1 };
  s0 -> s0 [0, 65535] { R3021 += 1, R3022 += 1 };
  s0 -> s3 [65, 65] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R3022 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R3022 += 1, R2971 += 1, R2972 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R3022 += 1, R2972 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R3022 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3022 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3022 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s0 [0, 65535] { R3023 += 1, R3024 += 1 };
  s0 -> s3 [0, 65535] { R3024 += 1, R2973 += 1, R2974 += 1 };
  s0 -> s4 [65, 65] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [66, 79] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s0 -> s2 [66, 65535] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [81, 65535] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s1 -> s1 [0, 65535] { R3024 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R3024 += 1, R2974 += 1 };
  s1 -> s5 [65, 65] { R3024 += 1, R2974 += 1 };
  s1 -> s1 [66, 79] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R3024 += 1, R2974 += 1 };
  s1 -> s1 [81, 65535] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s2 -> s1 [0, 64] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s4 [65, 65] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s2 -> s5 [65, 65] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s2 -> s6 [65, 65] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s7 [65, 65] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [66, 79] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [81, 65535] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R3024 += 1, R2973 += 1, R2974 += 1 };
  s3 -> s4 [65, 65] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [66, 79] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s3 -> s2 [66, 65535] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [81, 65535] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R3024 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 79] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s5 -> s5 [0, 65535] { R3024 += 1, R2974 += 1 };
  s5 -> s8 [0, 65535] { R3024 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [81, 65535] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s7 -> s5 [0, 79] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s7 -> s7 [0, 65535] { R3024 += 1, R2974 += 1, R2641 += 1, R2642 += 1 };
  s7 -> s5 [81, 65535] { R3024 += 1, R2974 += 1, R2642 += 1 };
  s8 -> s8 [0, 65535] { R3024 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s2 [0, 64] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s3 [0, 65535] { R3026 += 1, R2975 += 1, R2976 += 1 };
  s0 -> s0 [0, 65535] { R3025 += 1, R3026 += 1 };
  s0 -> s4 [65, 65] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s5 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s6 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s7 [65, 65] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s1 [66, 65535] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s2 [66, 65535] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s1 [0, 64] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s2 [0, 64] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s4 [65, 65] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s5 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s6 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s7 [65, 65] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s1 [66, 65535] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s2 [66, 65535] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [0, 64] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3026 += 1 };
  s2 -> s5 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s6 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [66, 65535] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s1 [0, 64] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s2 [0, 64] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s3 [0, 65535] { R3026 += 1, R2975 += 1, R2976 += 1 };
  s3 -> s4 [65, 65] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s5 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s6 [65, 65] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s7 [65, 65] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s1 [66, 65535] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s2 [66, 65535] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s5 -> s9 [0, 65535] { R3026 += 1 };
  s5 -> s5 [0, 65535] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3026 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s5 [0, 65535] { R3026 += 1, R2976 += 1, R2934 += 1, R2935 += 1 };
  s7 -> s7 [0, 65535] { R3026 += 1, R2976 += 1, R2933 += 1, R2934 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3026 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3028 += 1, R2978 += 1 };
  s0 -> s2 [0, 65535] { R3028 += 1, R2977 += 1, R2978 += 1 };
  s0 -> s0 [0, 65535] { R3027 += 1, R3028 += 1 };
  s0 -> s3 [65, 65] { R3028 += 1, R2978 += 1 };
  s0 -> s4 [65, 65] { R3028 += 1, R2978 += 1 };
  s0 -> s1 [66, 65535] { R3028 += 1, R2978 += 1 };
  s1 -> s1 [0, 64] { R3028 += 1, R2978 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3028 += 1 };
  s1 -> s3 [65, 65] { R3028 += 1, R2978 += 1 };
  s1 -> s4 [65, 65] { R3028 += 1, R2978 += 1 };
  s1 -> s1 [66, 65535] { R3028 += 1, R2978 += 1 };
  s2 -> s1 [0, 64] { R3028 += 1, R2978 += 1 };
  s2 -> s2 [0, 65535] { R3028 += 1, R2977 += 1, R2978 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3028 += 1, R2978 += 1 };
  s2 -> s4 [65, 65] { R3028 += 1, R2978 += 1 };
  s2 -> s1 [66, 65535] { R3028 += 1, R2978 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3028 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3028 += 1 };
  s4 -> s4 [0, 65535] { R3028 += 1, R2978 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3028 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s2 [0, 65535] { R3030 += 1, R2979 += 1, R2980 += 1 };
  s0 -> s0 [0, 65535] { R3029 += 1, R3030 += 1 };
  s0 -> s3 [65, 65] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s4 [65, 65] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s0 -> s1 [66, 65535] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s1 [0, 64] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3030 += 1 };
  s1 -> s3 [65, 65] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s4 [65, 65] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s1 -> s1 [66, 65535] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s2 -> s1 [0, 64] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3030 += 1, R2979 += 1, R2980 += 1 };
  s2 -> s3 [65, 65] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s2 -> s4 [65, 65] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s2 -> s1 [66, 65535] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3030 += 1, R2980 += 1, R2939 += 1, R2940 += 1 };
  s3 -> s6 [0, 65535] { R3030 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3030 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3030 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3032 += 1, R2982 += 1 };
  s0 -> s2 [0, 65535] { R3032 += 1, R2981 += 1, R2982 += 1 };
  s0 -> s0 [0, 65535] { R3031 += 1, R3032 += 1 };
  s0 -> s3 [65, 65] { R3032 += 1, R2982 += 1 };
  s0 -> s4 [65, 65] { R3032 += 1, R2982 += 1 };
  s0 -> s1 [66, 65535] { R3032 += 1, R2982 += 1 };
  s1 -> s1 [0, 64] { R3032 += 1, R2982 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3032 += 1 };
  s1 -> s3 [65, 65] { R3032 += 1, R2982 += 1 };
  s1 -> s4 [65, 65] { R3032 += 1, R2982 += 1 };
  s1 -> s1 [66, 65535] { R3032 += 1, R2982 += 1 };
  s2 -> s1 [0, 64] { R3032 += 1, R2982 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3032 += 1, R2981 += 1, R2982 += 1 };
  s2 -> s3 [65, 65] { R3032 += 1, R2982 += 1 };
  s2 -> s4 [65, 65] { R3032 += 1, R2982 += 1 };
  s2 -> s1 [66, 65535] { R3032 += 1, R2982 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3032 += 1, R2982 += 1 };
  s3 -> s6 [0, 65535] { R3032 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3032 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3032 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2964 && R2 = R3032 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2945 = 0 && R2946 = R2964 && R2947 = 0 && R2948 = R2964 && R2949 = 0 && R2950 = R2964 && R2951 = 0 && R2952 = R2964 && R2953 = 0 && R2954 = R2964 && R2955 = 0 && R2956 = R2964 && R2957 = 0 && R2958 = R2964 && R2959 = 0 && R2960 = R2964 && R2961 = 0 && R2962 = R2964 && R2963 = 0 && R2967 = 0 && R2968 = 0 && R2973 = 0 && R2974 = 0 && R2975 = 0 && R2976 = 0 && R2983 = 10 && R2984 = R3032 && R2985 = 10 && R2986 = R3032 && R2987 = 10 && R2988 = R3032 && R2989 = 10 && R2990 = R3032 && R2991 = 10 && R2992 = R3032 && R2993 = 10 && R2994 = R3032 && R2995 = 10 && R2996 = R3032 && R2997 = 10 && R2998 = R3032 && R2999 = 10 && R3000 = R3032 && R3001 = 10 && R3002 = R3032 && R3003 = 10 && R3004 = R3032 && R3005 = 10 && R3006 = R3032 && R3007 = 10 && R3008 = R3032 && R3009 = 10 && R3010 = R3032 && R3011 = 10 && R3012 = R3032 && R3013 = 10 && R3014 = R3032 && R3015 = 10 && R3016 = R3032 && R3017 = 10 && R3018 = R3032 && R3019 = 10 && R3020 = R3032 && R3021 = 10 && R3022 = R3032 && R3023 = 10 && R3024 = R3032 && R3025 = 10 && R3026 = R3032 && R3027 = 10 && R3028 = R3032 && R3029 = 10 && R3030 = R3032 && R3031 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2964 && 9 < R3032 && (R14 = 0 || (R2965 = 0 && R2966 = 0)) && (R14 = 0 || (R2969 = 0 && R2970 = 0)) && (R14 = 0 || (R2971 = 0 && R2972 = 0)) && (R14 = 0 || (R2977 = 0 && R2978 = 0)) && (R14 = 0 || (R2979 = 0 && R2980 = 0)) && (R14 = 0 || (R2981 = 0 && R2982 = 0)) && (R2938 + R2935 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R2938 + R2935 = 0 || (R2936 + R2933 = 0 && R2937 + R2934 = 0)) && (R2944 + R2941 = 0 || (R2942 + R2939 = 0 && R2943 + R2940 = 0));
// End of Parikh automata intersection problem
