// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R18, R2, R2353, R2354, R2355, R2356, R2357, R2358, R2359, R2360, R2361, R2362, R2363, R2364, R2365, R2366, R2367, R2368, R2369, R2370, R2371, R2372, R2373, R2374, R2375, R2376, R2377, R2378, R2379, R2380, R2381, R2382, R2383, R2384, R2385, R2386, R2387, R2388, R2389, R2390, R2391, R2392, R2393, R2394, R2395, R2396, R2397, R2398, R2399, R2400, R2401, R2402, R2403, R2404, R2405, R2406, R2407, R2408, R2409, R2410, R2411, R2412, R2413, R2414, R2415, R2416, R2417, R2418, R2419, R2420, R2421, R2422, R2423, R2424, R2425, R2426, R2427, R2428, R2429, R2430, R2431, R2432, R2433, R2434, R2435, R2436, R2437, R2438, R2439, R2440, R2441, R2442, R2443, R2444, R2445, R2446, R2447, R2448, R2449, R2450, R2451, R2452, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2404 += 1 };
  s0 -> s0 [0, 65535] { R2403 += 1, R2404 += 1 };
  s0 -> s1 [45, 45] { R2404 += 1 };
  s0 -> s2 [46, 46] { R2404 += 1 };
  s0 -> s1 [48, 62] { R2404 += 1 };
  s0 -> s3 [65, 65] { R2404 += 1 };
  s0 -> s1 [66, 65535] { R2404 += 1 };
  s1 -> s1 [0, 43] { R2404 += 1 };
  s1 -> s1 [45, 45] { R2404 += 1 };
  s1 -> s2 [46, 46] { R2404 += 1 };
  s1 -> s1 [48, 62] { R2404 += 1 };
  s1 -> s3 [65, 65] { R2404 += 1 };
  s1 -> s1 [66, 65535] { R2404 += 1 };
  s2 -> s1 [0, 43] { R2404 += 1 };
  s2 -> s1 [45, 45] { R2404 += 1 };
  s2 -> s2 [46, 46] { R2404 += 1 };
  s2 -> s1 [48, 62] { R2404 += 1 };
  s2 -> s3 [65, 65] { R2404 += 1 };
  s2 -> s1 [66, 114] { R2404 += 1 };
  s2 -> s8 [115, 115] { R2404 += 1 };
  s2 -> s1 [116, 65535] { R2404 += 1 };
  s3 -> s3 [0, 43] { R2404 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2404 += 1 };
  s3 -> s4 [46, 46] { R2404 += 1 };
  s3 -> s3 [48, 62] { R2404 += 1 };
  s3 -> s3 [65, 65535] { R2404 += 1 };
  s4 -> s3 [0, 43] { R2404 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2404 += 1 };
  s4 -> s4 [46, 46] { R2404 += 1 };
  s4 -> s3 [48, 62] { R2404 += 1 };
  s4 -> s3 [65, 114] { R2404 += 1 };
  s4 -> s5 [115, 115] { R2404 += 1 };
  s4 -> s3 [116, 65535] { R2404 += 1 };
  s5 -> s3 [0, 43] { R2404 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2404 += 1 };
  s5 -> s4 [46, 46] { R2404 += 1 };
  s5 -> s3 [48, 62] { R2404 += 1 };
  s5 -> s3 [65, 110] { R2404 += 1 };
  s5 -> s6 [111, 111] { R2404 += 1 };
  s5 -> s3 [112, 65535] { R2404 += 1 };
  s6 -> s3 [0, 43] { R2404 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2404 += 1 };
  s6 -> s4 [46, 46] { R2404 += 1 };
  s6 -> s3 [48, 62] { R2404 += 1 };
  s6 -> s3 [65, 98] { R2404 += 1 };
  s6 -> s7 [99, 99] { R2404 += 1 };
  s6 -> s3 [100, 65535] { R2404 += 1 };
  s7 -> s3 [0, 43] { R2404 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2404 += 1 };
  s7 -> s4 [46, 46] { R2404 += 1 };
  s7 -> s3 [48, 62] { R2404 += 1 };
  s7 -> s3 [65, 106] { R2404 += 1 };
  s7 -> s3 [108, 65535] { R2404 += 1 };
  s8 -> s1 [0, 43] { R2404 += 1 };
  s8 -> s1 [45, 45] { R2404 += 1 };
  s8 -> s2 [46, 46] { R2404 += 1 };
  s8 -> s1 [48, 62] { R2404 += 1 };
  s8 -> s3 [65, 65] { R2404 += 1 };
  s8 -> s1 [66, 110] { R2404 += 1 };
  s8 -> s9 [111, 111] { R2404 += 1 };
  s8 -> s1 [112, 65535] { R2404 += 1 };
  s9 -> s1 [0, 43] { R2404 += 1 };
  s9 -> s1 [45, 45] { R2404 += 1 };
  s9 -> s2 [46, 46] { R2404 += 1 };
  s9 -> s1 [48, 62] { R2404 += 1 };
  s9 -> s3 [65, 65] { R2404 += 1 };
  s9 -> s1 [66, 98] { R2404 += 1 };
  s9 -> s10 [99, 99] { R2404 += 1 };
  s9 -> s1 [100, 65535] { R2404 += 1 };
  s10 -> s1 [0, 43] { R2404 += 1 };
  s10 -> s1 [45, 45] { R2404 += 1 };
  s10 -> s2 [46, 46] { R2404 += 1 };
  s10 -> s1 [48, 62] { R2404 += 1 };
  s10 -> s3 [65, 65] { R2404 += 1 };
  s10 -> s1 [66, 106] { R2404 += 1 };
  s10 -> s1 [108, 65535] { R2404 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2405 += 1, R2406 += 1 };
  s0 -> s1 [0, 65535] { R2406 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2406 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2408 += 1 };
  s0 -> s0 [0, 65535] { R2407 += 1, R2408 += 1 };
  s0 -> s2 [0, 65535] { R2408 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2408 += 1 };
  s0 -> s1 [59, 65535] { R2408 += 1 };
  s1 -> s1 [0, 57] { R2408 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2408 += 1 };
  s1 -> s1 [59, 65535] { R2408 += 1 };
  s2 -> s1 [0, 57] { R2408 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2408 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2408 += 1 };
  s2 -> s1 [59, 65535] { R2408 += 1 };
  s3 -> s3 [0, 65535] { R2408 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2410 += 1 };
  s0 -> s2 [0, 65535] { R2410 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2409 += 1, R2410 += 1 };
  s0 -> s3 [65, 65] { R2410 += 1 };
  s0 -> s1 [66, 65535] { R2410 += 1 };
  s1 -> s1 [0, 64] { R2410 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2410 += 1 };
  s1 -> s1 [66, 65535] { R2410 += 1 };
  s2 -> s1 [0, 64] { R2410 += 1 };
  s2 -> s2 [0, 65535] { R2410 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R2410 += 1 };
  s2 -> s1 [66, 65535] { R2410 += 1 };
  s3 -> s3 [0, 65535] { R2410 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2412 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R2412 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2411 += 1, R2412 += 1 };
  s0 -> s3 [91, 91] { R2412 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2412 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2412 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2412 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R2412 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R2412 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2412 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2412 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2412 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2412 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2414 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R2413 += 1, R2414 += 1 };
  s0 -> s2 [0, 65535] { R2414 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R2414 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2414 += 1 };
  s2 -> s1 [0, 65535] { R2414 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2414 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2414 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2416 += 1, R2366 += 1 };
  s0 -> s0 [0, 65535] { R2415 += 1, R2416 += 1 };
  s0 -> s2 [0, 65535] { R2416 += 1, R2365 += 1, R2366 += 1 };
  s0 -> s1 [66, 65535] { R2416 += 1, R2366 += 1 };
  s1 -> s1 [0, 64] { R2416 += 1, R2366 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2416 += 1 };
  s1 -> s1 [66, 65535] { R2416 += 1, R2366 += 1 };
  s2 -> s1 [0, 64] { R2416 += 1, R2366 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2416 += 1, R2365 += 1, R2366 += 1 };
  s2 -> s1 [66, 65535] { R2416 += 1, R2366 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2418 += 1, R2367 += 1, R2368 += 1 };
  s0 -> s2 [0, 65535] { R2418 += 1, R2368 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2417 += 1, R2418 += 1 };
  s1 -> s1 [0, 65535] { R2418 += 1, R2367 += 1, R2368 += 1 };
  s1 -> s2 [0, 65535] { R2418 += 1, R2368 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2418 += 1, R2368 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2418 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2418 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2420 += 1, R2370 += 1 };
  s0 -> s2 [0, 65535] { R2420 += 1, R2369 += 1, R2370 += 1 };
  s0 -> s0 [0, 65535] { R2419 += 1, R2420 += 1 };
  s0 -> s1 [80, 65535] { R2420 += 1, R2370 += 1 };
  s1 -> s1 [0, 65] { R2420 += 1, R2370 += 1 };
  s1 -> s1 [0, 65535] { R2420 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2420 += 1, R2370 += 1 };
  s2 -> s1 [0, 65] { R2420 += 1, R2370 += 1 };
  s2 -> s2 [0, 65535] { R2420 += 1, R2369 += 1, R2370 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R2420 += 1, R2370 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2422 += 1, R2372 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2421 += 1, R2422 += 1 };
  s0 -> s2 [0, 65535] { R2422 += 1, R2371 += 1, R2372 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2422 += 1, R2372 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R2422 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2422 += 1, R2372 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R2422 += 1, R2371 += 1, R2372 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2422 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R2424 += 1, R2374 += 1 };
  s0 -> s2 [0, 65535] { R2424 += 1, R2374 += 1, R1772 += 1 };
  s0 -> s3 [0, 65535] { R2424 += 1, R2373 += 1, R2374 += 1 };
  s0 -> s0 [0, 65535] { R2423 += 1, R2424 += 1 };
  s0 -> s1 [81, 65535] { R2424 += 1, R2374 += 1 };
  s1 -> s1 [0, 79] { R2424 += 1, R2374 += 1 };
  s1 -> s1 [0, 65535] { R2424 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R2424 += 1, R2374 += 1 };
  s2 -> s1 [0, 79] { R2424 += 1, R2374 += 1 };
  s2 -> s5 [0, 65535] { R2424 += 1 };
  s2 -> s2 [0, 65535] { R2424 += 1, R2374 += 1, R1772 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R2424 += 1, R2374 += 1 };
  s3 -> s1 [0, 79] { R2424 += 1, R2374 += 1 };
  s3 -> s2 [0, 65535] { R2424 += 1, R2374 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R2424 += 1, R2373 += 1, R2374 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R2424 += 1, R2374 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2424 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s0 -> s0 [0, 65535] { R2425 += 1, R2426 += 1 };
  s0 -> s2 [0, 65535] { R2426 += 1, R2376 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s3 [0, 65535] { R2426 += 1, R2375 += 1, R2376 += 1 };
  s0 -> s1 [81, 65535] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s1 -> s1 [0, 79] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s1 -> s1 [0, 65535] { R2426 += 1, R2376 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2426 += 1 };
  s1 -> s1 [81, 65535] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s2 -> s1 [0, 79] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2426 += 1, R2376 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s5 [0, 65535] { R2426 += 1 };
  s2 -> s1 [81, 65535] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s3 -> s1 [0, 79] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2426 += 1, R2376 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s3 [0, 65535] { R2426 += 1, R2375 += 1, R2376 += 1 };
  s3 -> s1 [81, 65535] { R2426 += 1, R2376 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2426 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2428 += 1, R2378 += 1 };
  s0 -> s2 [0, 65535] { R2428 += 1, R2377 += 1, R2378 += 1 };
  s0 -> s0 [0, 65535] { R2427 += 1, R2428 += 1 };
  s1 -> s4 [0, 65535] { R2428 += 1 };
  s1 -> s1 [0, 65535] { R2428 += 1, R2378 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2428 += 1, R2378 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2428 += 1, R2377 += 1, R2378 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2428 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2430 += 1, R2380 += 1 };
  s0 -> s2 [0, 65535] { R2430 += 1, R2379 += 1, R2380 += 1 };
  s0 -> s0 [0, 65535] { R2429 += 1, R2430 += 1 };
  s1 -> s1 [0, 65535] { R2430 += 1, R2380 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2430 += 1 };
  s2 -> s1 [0, 65535] { R2430 += 1, R2380 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2430 += 1, R2379 += 1, R2380 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2430 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2432 += 1, R2381 += 1, R2382 += 1 };
  s0 -> s0 [0, 65535] { R2431 += 1, R2432 += 1 };
  s0 -> s2 [0, 65535] { R2432 += 1, R2382 += 1, R2362 += 1, R2363 += 1 };
  s0 -> s3 [0, 65535] { R2432 += 1, R2382 += 1, R2363 += 1, R2364 += 1 };
  s1 -> s1 [0, 65535] { R2432 += 1, R2381 += 1, R2382 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R2432 += 1, R2382 += 1, R2362 += 1, R2363 += 1 };
  s1 -> s3 [0, 65535] { R2432 += 1, R2382 += 1, R2363 += 1, R2364 += 1 };
  s2 -> s5 [0, 65535] { R2432 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2432 += 1, R2382 += 1, R2362 += 1, R2363 += 1 };
  s2 -> s3 [0, 65535] { R2432 += 1, R2382 += 1, R2363 += 1, R2364 += 1 };
  s3 -> s4 [0, 65535] { R2432 += 1, R2382 += 1 };
  s3 -> s5 [0, 65535] { R2432 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2432 += 1, R2382 += 1, R2363 += 1, R2364 += 1 };
  s4 -> s4 [0, 65535] { R2432 += 1, R2382 += 1 };
  s4 -> s5 [0, 65535] { R2432 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2432 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2434 += 1, R2384 += 1 };
  s0 -> s0 [0, 65535] { R2433 += 1, R2434 += 1 };
  s0 -> s2 [0, 65535] { R2434 += 1, R2383 += 1, R2384 += 1 };
  s1 -> s4 [0, 65535] { R2434 += 1 };
  s1 -> s1 [0, 65535] { R2434 += 1, R2384 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2434 += 1, R2384 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2434 += 1, R2383 += 1, R2384 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2434 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2436 += 1, R2386 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R2436 += 1, R2385 += 1, R2386 += 1 };
  s0 -> s0 [0, 65535] { R2435 += 1, R2436 += 1 };
  s1 -> s1 [0, 65535] { R2436 += 1, R2386 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2436 += 1 };
  s2 -> s1 [0, 65535] { R2436 += 1, R2386 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R2436 += 1, R2385 += 1, R2386 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2436 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2438 += 1, R2388 += 1 };
  s0 -> s0 [0, 65535] { R2437 += 1, R2438 += 1 };
  s0 -> s2 [0, 65535] { R2438 += 1, R2387 += 1, R2388 += 1 };
  s0 -> s3 [65, 65] { R2438 += 1, R2388 += 1 };
  s0 -> s4 [65, 65] { R2438 += 1, R2388 += 1 };
  s0 -> s5 [80, 80] { R2438 += 1, R2388 += 1 };
  s0 -> s1 [81, 65535] { R2438 += 1, R2388 += 1 };
  s1 -> s1 [0, 64] { R2438 += 1, R2388 += 1 };
  s1 -> s3 [65, 65] { R2438 += 1, R2388 += 1 };
  s1 -> s4 [65, 65] { R2438 += 1, R2388 += 1 };
  s1 -> s5 [80, 80] { R2438 += 1, R2388 += 1 };
  s1 -> s1 [81, 65535] { R2438 += 1, R2388 += 1 };
  s2 -> s1 [0, 64] { R2438 += 1, R2388 += 1 };
  s2 -> s2 [0, 65535] { R2438 += 1, R2387 += 1, R2388 += 1 };
  s2 -> s3 [65, 65] { R2438 += 1, R2388 += 1 };
  s2 -> s4 [65, 65] { R2438 += 1, R2388 += 1 };
  s2 -> s5 [80, 80] { R2438 += 1, R2388 += 1 };
  s2 -> s1 [81, 65535] { R2438 += 1, R2388 += 1 };
  s3 -> s3 [0, 65] { R2438 += 1, R2388 += 1 };
  s3 -> s7 [80, 80] { R2438 += 1, R2388 += 1 };
  s3 -> s3 [81, 65535] { R2438 += 1, R2388 += 1 };
  s5 -> s5 [0, 64] { R2438 += 1, R2388 += 1 };
  s5 -> s5 [0, 65535] { R2438 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2438 += 1, R2388 += 1 };
  s5 -> s8 [65, 65] { R2438 += 1, R2388 += 1 };
  s5 -> s5 [80, 65535] { R2438 += 1, R2388 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2438 += 1, R2388 += 1 };
  s7 -> s7 [0, 65535] { R2438 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R2438 += 1, R2388 += 1 };
  s8 -> s8 [0, 65535] { R2438 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R2440 += 1, R2389 += 1, R2390 += 1 };
  s0 -> s0 [0, 65535] { R2439 += 1, R2440 += 1 };
  s0 -> s3 [65, 65] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2440 += 1 };
  s1 -> s3 [65, 65] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2440 += 1, R2389 += 1, R2390 += 1 };
  s2 -> s3 [65, 65] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2440 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2440 += 1, R2390 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535] { R2440 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2440 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2442 += 1, R2391 += 1, R2392 += 1 };
  s0 -> s0 [0, 65535] { R2441 += 1, R2442 += 1 };
  s0 -> s3 [65, 65] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R2442 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R2442 += 1, R2391 += 1, R2392 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R2442 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2442 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2442 += 1, R2392 += 1, R1771 += 1 };
  s5 -> s5 [0, 65535] { R2442 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s0 [0, 65535] { R2443 += 1, R2444 += 1 };
  s0 -> s2 [0, 65535] { R2444 += 1, R2393 += 1, R2394 += 1 };
  s0 -> s3 [65, 65] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2444 += 1 };
  s1 -> s3 [65, 65] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R2444 += 1, R2393 += 1, R2394 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R2444 += 1, R2394 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2444 += 1 };
  s4 -> s4 [0, 65535] { R2444 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2444 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s2 [0, 64] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s0 [0, 65535] { R2445 += 1, R2446 += 1 };
  s0 -> s3 [0, 65535] { R2446 += 1, R2395 += 1, R2396 += 1 };
  s0 -> s4 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s5 [65, 65] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s6 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s7 [65, 65] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s1 [66, 65535] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s2 [66, 65535] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s1 [0, 64] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s11 [0, 64] { R2446 += 1, R2396 += 1 };
  s1 -> s12 [65, 65] { R2446 += 1, R2396 += 1 };
  s1 -> s8 [65, 65] { R2446 += 1, R2396 += 1 };
  s1 -> s4 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s6 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s1 [66, 65535] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s11 [66, 65535] { R2446 += 1, R2396 += 1 };
  s2 -> s1 [0, 64] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s2 [0, 64] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s2 -> s4 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s5 [65, 65] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s2 -> s6 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s7 [65, 65] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s2 -> s1 [66, 65535] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s2 [66, 65535] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s1 [0, 64] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s2 [0, 64] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s3 [0, 65535] { R2446 += 1, R2395 += 1, R2396 += 1 };
  s3 -> s4 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s5 [65, 65] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s6 [65, 65] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s7 [65, 65] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s1 [66, 65535] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s2 [66, 65535] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s5 -> s5 [0, 65535] { R2446 += 1, R2396 += 1, R2353 += 1, R2354 += 1 };
  s5 -> s6 [0, 65535] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s6 -> s8 [0, 65535] { R2446 += 1, R2396 += 1 };
  s6 -> s6 [0, 65535] { R2446 += 1, R2396 += 1, R2354 += 1, R2355 += 1 };
  s8 -> s8 [0, 65535] { R2446 += 1, R2396 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2446 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2446 += 1 };
  s11 -> s11 [0, 64] { R2446 += 1, R2396 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2446 += 1 };
  s11 -> s12 [65, 65] { R2446 += 1, R2396 += 1 };
  s11 -> s8 [65, 65] { R2446 += 1, R2396 += 1 };
  s11 -> s11 [66, 65535] { R2446 += 1, R2396 += 1 };
  s12 -> s12 [0, 65535] { R2446 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2448 += 1, R2398 += 1 };
  s0 -> s2 [0, 65535] { R2448 += 1, R2397 += 1, R2398 += 1 };
  s0 -> s0 [0, 65535] { R2447 += 1, R2448 += 1 };
  s0 -> s3 [65, 65] { R2448 += 1, R2398 += 1 };
  s0 -> s4 [65, 65] { R2448 += 1, R2398 += 1 };
  s0 -> s1 [66, 65535] { R2448 += 1, R2398 += 1 };
  s1 -> s1 [0, 64] { R2448 += 1, R2398 += 1 };
  s1 -> s1 [0, 65535] { R2448 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2448 += 1, R2398 += 1 };
  s1 -> s4 [65, 65] { R2448 += 1, R2398 += 1 };
  s1 -> s1 [66, 65535] { R2448 += 1, R2398 += 1 };
  s2 -> s1 [0, 64] { R2448 += 1, R2398 += 1 };
  s2 -> s2 [0, 65535] { R2448 += 1, R2397 += 1, R2398 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2448 += 1, R2398 += 1 };
  s2 -> s4 [65, 65] { R2448 += 1, R2398 += 1 };
  s2 -> s1 [66, 65535] { R2448 += 1, R2398 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2448 += 1, R2398 += 1 };
  s3 -> s6 [0, 65535] { R2448 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2448 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2448 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s0 -> s0 [0, 65535] { R2449 += 1, R2450 += 1 };
  s0 -> s2 [0, 65535] { R2450 += 1, R2399 += 1, R2400 += 1 };
  s0 -> s3 [65, 65] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s0 -> s4 [65, 65] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s0 -> s1 [66, 65535] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s1 -> s1 [0, 64] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s1 -> s1 [0, 65535] { R2450 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s1 -> s4 [65, 65] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s1 -> s1 [66, 65535] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s2 -> s1 [0, 64] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s2 -> s2 [0, 65535] { R2450 += 1, R2399 += 1, R2400 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s2 -> s4 [65, 65] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s2 -> s1 [66, 65535] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s3 -> s3 [0, 65535] { R2450 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2450 += 1 };
  s4 -> s4 [0, 65535] { R2450 += 1, R2400 += 1, R2359 += 1, R2360 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2450 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2452 += 1, R2402 += 1 };
  s0 -> s0 [0, 65535] { R2451 += 1, R2452 += 1 };
  s0 -> s2 [0, 65535] { R2452 += 1, R2401 += 1, R2402 += 1 };
  s0 -> s3 [65, 65] { R2452 += 1, R2402 += 1 };
  s0 -> s4 [65, 65] { R2452 += 1, R2402 += 1 };
  s0 -> s1 [66, 65535] { R2452 += 1, R2402 += 1 };
  s1 -> s1 [0, 64] { R2452 += 1, R2402 += 1 };
  s1 -> s1 [0, 65535] { R2452 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2452 += 1, R2402 += 1 };
  s1 -> s4 [65, 65] { R2452 += 1, R2402 += 1 };
  s1 -> s1 [66, 65535] { R2452 += 1, R2402 += 1 };
  s2 -> s1 [0, 64] { R2452 += 1, R2402 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2452 += 1, R2401 += 1, R2402 += 1 };
  s2 -> s3 [65, 65] { R2452 += 1, R2402 += 1 };
  s2 -> s4 [65, 65] { R2452 += 1, R2402 += 1 };
  s2 -> s1 [66, 65535] { R2452 += 1, R2402 += 1 };
  s3 -> s3 [0, 65535] { R2452 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2452 += 1, R2402 += 1 };
  s4 -> s6 [0, 65535] { R2452 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2452 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2384 && R2 = R2452 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2365 = 0 && R2366 = R2384 && R2367 = 0 && R2368 = R2384 && R2369 = 0 && R2370 = R2384 && R2371 = 0 && R2372 = R2384 && R2373 = 0 && R2374 = R2384 && R2375 = 0 && R2376 = R2384 && R2377 = 0 && R2378 = R2384 && R2379 = 0 && R2380 = R2384 && R2381 = 0 && R2382 = R2384 && R2383 = 0 && R2387 = 0 && R2388 = 0 && R2395 = 0 && R2396 = 0 && R2403 = 10 && R2404 = R2452 && R2405 = 10 && R2406 = R2452 && R2407 = 10 && R2408 = R2452 && R2409 = 10 && R2410 = R2452 && R2411 = 10 && R2412 = R2452 && R2413 = 10 && R2414 = R2452 && R2415 = 10 && R2416 = R2452 && R2417 = 10 && R2418 = R2452 && R2419 = 10 && R2420 = R2452 && R2421 = 10 && R2422 = R2452 && R2423 = 10 && R2424 = R2452 && R2425 = 10 && R2426 = R2452 && R2427 = 10 && R2428 = R2452 && R2429 = 10 && R2430 = R2452 && R2431 = 10 && R2432 = R2452 && R2433 = 10 && R2434 = R2452 && R2435 = 10 && R2436 = R2452 && R2437 = 10 && R2438 = R2452 && R2439 = 10 && R2440 = R2452 && R2441 = 10 && R2442 = R2452 && R2443 = 10 && R2444 = R2452 && R2445 = 10 && R2446 = R2452 && R2447 = 10 && R2448 = R2452 && R2449 = 10 && R2450 = R2452 && R2451 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2384 && 9 < R2452 && (R14 = 0 || (R2385 = 0 && R2386 = 0)) && (R14 = 0 || (R2389 = 0 && R2390 = 0)) && (R14 = 0 || (R2391 = 0 && R2392 = 0)) && (R14 = 0 || (R2393 = 0 && R2394 = 0)) && (R14 = 0 || (R2397 = 0 && R2398 = 0)) && (R14 = 0 || (R2399 = 0 && R2400 = 0)) && (R14 = 0 || (R2401 = 0 && R2402 = 0)) && (R2358 + R2355 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R2358 + R2355 = 0 || (R2356 + R2353 = 0 && R2357 + R2354 = 0)) && (R2364 + R2361 = 0 || (R2362 + R2359 = 0 && R2363 + R2360 = 0));
// End of Parikh automata intersection problem
