// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R18, R2, R2353, R2354, R2355, R2356, R2357, R2358, R2453, R2454, R2455, R2456, R2457, R2458, R2459, R2460, R2461, R2462, R2463, R2464, R2465, R2466, R2467, R2468, R2469, R2470, R2471, R2472, R2473, R2474, R2475, R2476, R2477, R2478, R2479, R2480, R2481, R2482, R2483, R2484, R2485, R2486, R2487, R2488, R2489, R2490, R2491, R2492, R2493, R2494, R2495, R2496, R2497, R2498, R2499, R2500, R2501, R2502, R2503, R2504, R2505, R2506, R2507, R2508, R2509, R2510, R2511, R2512, R2513, R2514, R2515, R2516, R2517, R2518, R2519, R2520, R2521, R2522, R2523, R2524, R2525, R2526, R2527, R2528, R2529, R2530, R2531, R2532, R2533, R2534, R2535, R2536, R2537, R2538, R2539, R2540, R2541, R2542, R2543, R2544, R2545, R2546, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2498 += 1 };
  s0 -> s0 [0, 65535] { R2497 += 1, R2498 += 1 };
  s0 -> s1 [45, 45] { R2498 += 1 };
  s0 -> s2 [46, 46] { R2498 += 1 };
  s0 -> s1 [48, 62] { R2498 += 1 };
  s0 -> s3 [65, 65] { R2498 += 1 };
  s0 -> s1 [66, 65535] { R2498 += 1 };
  s1 -> s1 [0, 43] { R2498 += 1 };
  s1 -> s1 [45, 45] { R2498 += 1 };
  s1 -> s2 [46, 46] { R2498 += 1 };
  s1 -> s1 [48, 62] { R2498 += 1 };
  s1 -> s3 [65, 65] { R2498 += 1 };
  s1 -> s1 [66, 65535] { R2498 += 1 };
  s2 -> s1 [0, 43] { R2498 += 1 };
  s2 -> s1 [45, 45] { R2498 += 1 };
  s2 -> s2 [46, 46] { R2498 += 1 };
  s2 -> s1 [48, 62] { R2498 += 1 };
  s2 -> s3 [65, 65] { R2498 += 1 };
  s2 -> s1 [66, 114] { R2498 += 1 };
  s2 -> s8 [115, 115] { R2498 += 1 };
  s2 -> s1 [116, 65535] { R2498 += 1 };
  s3 -> s3 [0, 43] { R2498 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2498 += 1 };
  s3 -> s4 [46, 46] { R2498 += 1 };
  s3 -> s3 [48, 62] { R2498 += 1 };
  s3 -> s3 [65, 65535] { R2498 += 1 };
  s4 -> s3 [0, 43] { R2498 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2498 += 1 };
  s4 -> s4 [46, 46] { R2498 += 1 };
  s4 -> s3 [48, 62] { R2498 += 1 };
  s4 -> s3 [65, 114] { R2498 += 1 };
  s4 -> s5 [115, 115] { R2498 += 1 };
  s4 -> s3 [116, 65535] { R2498 += 1 };
  s5 -> s3 [0, 43] { R2498 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2498 += 1 };
  s5 -> s4 [46, 46] { R2498 += 1 };
  s5 -> s3 [48, 62] { R2498 += 1 };
  s5 -> s3 [65, 110] { R2498 += 1 };
  s5 -> s6 [111, 111] { R2498 += 1 };
  s5 -> s3 [112, 65535] { R2498 += 1 };
  s6 -> s3 [0, 43] { R2498 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2498 += 1 };
  s6 -> s4 [46, 46] { R2498 += 1 };
  s6 -> s3 [48, 62] { R2498 += 1 };
  s6 -> s3 [65, 98] { R2498 += 1 };
  s6 -> s7 [99, 99] { R2498 += 1 };
  s6 -> s3 [100, 65535] { R2498 += 1 };
  s7 -> s3 [0, 43] { R2498 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2498 += 1 };
  s7 -> s4 [46, 46] { R2498 += 1 };
  s7 -> s3 [48, 62] { R2498 += 1 };
  s7 -> s3 [65, 106] { R2498 += 1 };
  s7 -> s3 [108, 65535] { R2498 += 1 };
  s8 -> s1 [0, 43] { R2498 += 1 };
  s8 -> s1 [45, 45] { R2498 += 1 };
  s8 -> s2 [46, 46] { R2498 += 1 };
  s8 -> s1 [48, 62] { R2498 += 1 };
  s8 -> s3 [65, 65] { R2498 += 1 };
  s8 -> s1 [66, 110] { R2498 += 1 };
  s8 -> s9 [111, 111] { R2498 += 1 };
  s8 -> s1 [112, 65535] { R2498 += 1 };
  s9 -> s1 [0, 43] { R2498 += 1 };
  s9 -> s1 [45, 45] { R2498 += 1 };
  s9 -> s2 [46, 46] { R2498 += 1 };
  s9 -> s1 [48, 62] { R2498 += 1 };
  s9 -> s3 [65, 65] { R2498 += 1 };
  s9 -> s1 [66, 98] { R2498 += 1 };
  s9 -> s10 [99, 99] { R2498 += 1 };
  s9 -> s1 [100, 65535] { R2498 += 1 };
  s10 -> s1 [0, 43] { R2498 += 1 };
  s10 -> s1 [45, 45] { R2498 += 1 };
  s10 -> s2 [46, 46] { R2498 += 1 };
  s10 -> s1 [48, 62] { R2498 += 1 };
  s10 -> s3 [65, 65] { R2498 += 1 };
  s10 -> s1 [66, 106] { R2498 += 1 };
  s10 -> s1 [108, 65535] { R2498 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2500 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2499 += 1, R2500 += 1 };
  s1 -> s1 [0, 65535] { R2500 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2502 += 1 };
  s0 -> s2 [0, 65535] { R2502 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2501 += 1, R2502 += 1 };
  s0 -> s3 [58, 58] { R2502 += 1 };
  s0 -> s1 [59, 65535] { R2502 += 1 };
  s1 -> s1 [0, 57] { R2502 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2502 += 1 };
  s1 -> s1 [59, 65535] { R2502 += 1 };
  s2 -> s1 [0, 57] { R2502 += 1 };
  s2 -> s2 [0, 65535] { R2502 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2502 += 1 };
  s2 -> s1 [59, 65535] { R2502 += 1 };
  s3 -> s3 [0, 65535] { R2502 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2504 += 1 };
  s0 -> s0 [0, 65535] { R2503 += 1, R2504 += 1 };
  s0 -> s2 [0, 65535] { R2504 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R2504 += 1 };
  s0 -> s1 [66, 65535] { R2504 += 1 };
  s1 -> s1 [0, 64] { R2504 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2504 += 1 };
  s1 -> s1 [66, 65535] { R2504 += 1 };
  s2 -> s1 [0, 64] { R2504 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2504 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2504 += 1 };
  s2 -> s1 [66, 65535] { R2504 += 1 };
  s3 -> s3 [0, 65535] { R2504 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2506 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2505 += 1, R2506 += 1 };
  s0 -> s2 [0, 65535] { R2506 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R2506 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2506 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2506 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2506 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R2506 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2506 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R2506 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2506 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2506 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2506 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2508 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R2507 += 1, R2508 += 1 };
  s0 -> s2 [0, 65535] { R2508 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R2508 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2508 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2508 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R2508 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2508 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2510 += 1, R2460 += 1 };
  s0 -> s0 [0, 65535] { R2509 += 1, R2510 += 1 };
  s0 -> s2 [0, 65535] { R2510 += 1, R2459 += 1, R2460 += 1 };
  s0 -> s1 [66, 65535] { R2510 += 1, R2460 += 1 };
  s1 -> s1 [0, 64] { R2510 += 1, R2460 += 1 };
  s1 -> s1 [0, 65535] { R2510 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2510 += 1, R2460 += 1 };
  s2 -> s1 [0, 64] { R2510 += 1, R2460 += 1 };
  s2 -> s2 [0, 65535] { R2510 += 1, R2459 += 1, R2460 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2510 += 1, R2460 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2512 += 1, R2462 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2512 += 1, R2461 += 1, R2462 += 1 };
  s0 -> s0 [0, 65535] { R2511 += 1, R2512 += 1 };
  s1 -> s1 [0, 65535] { R2512 += 1, R2462 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2512 += 1 };
  s2 -> s1 [0, 65535] { R2512 += 1, R2462 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2512 += 1, R2461 += 1, R2462 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2512 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2514 += 1, R2464 += 1 };
  s0 -> s0 [0, 65535] { R2513 += 1, R2514 += 1 };
  s0 -> s2 [0, 65535] { R2514 += 1, R2463 += 1, R2464 += 1 };
  s0 -> s1 [80, 65535] { R2514 += 1, R2464 += 1 };
  s1 -> s1 [0, 65] { R2514 += 1, R2464 += 1 };
  s1 -> s1 [0, 65535] { R2514 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2514 += 1, R2464 += 1 };
  s2 -> s1 [0, 65] { R2514 += 1, R2464 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2514 += 1, R2463 += 1, R2464 += 1 };
  s2 -> s1 [80, 65535] { R2514 += 1, R2464 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2516 += 1, R2466 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2515 += 1, R2516 += 1 };
  s0 -> s2 [0, 65535] { R2516 += 1, R2465 += 1, R2466 += 1 };
  s1 -> s1 [0, 65535] { R2516 += 1, R2466 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R2516 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2516 += 1, R2466 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2516 += 1, R2465 += 1, R2466 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2516 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R2518 += 1, R2468 += 1 };
  s0 -> s2 [0, 65535] { R2518 += 1, R2467 += 1, R2468 += 1 };
  s0 -> s0 [0, 65535] { R2517 += 1, R2518 += 1 };
  s0 -> s3 [0, 65535] { R2518 += 1, R2468 += 1, R1772 += 1 };
  s0 -> s1 [81, 65535] { R2518 += 1, R2468 += 1 };
  s1 -> s1 [0, 79] { R2518 += 1, R2468 += 1 };
  s1 -> s1 [0, 65535] { R2518 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R2518 += 1, R2468 += 1 };
  s2 -> s1 [0, 79] { R2518 += 1, R2468 += 1 };
  s2 -> s2 [0, 65535] { R2518 += 1, R2467 += 1, R2468 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2518 += 1, R2468 += 1, R1772 += 1 };
  s2 -> s1 [81, 65535] { R2518 += 1, R2468 += 1 };
  s3 -> s1 [0, 79] { R2518 += 1, R2468 += 1 };
  s3 -> s4 [0, 65535] { R2518 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2518 += 1, R2468 += 1, R1772 += 1 };
  s3 -> s1 [81, 65535] { R2518 += 1, R2468 += 1 };
  s4 -> s4 [0, 65535] { R2518 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s0 -> s0 [0, 65535] { R2519 += 1, R2520 += 1 };
  s0 -> s2 [0, 65535] { R2520 += 1, R2469 += 1, R2470 += 1 };
  s0 -> s3 [0, 65535] { R2520 += 1, R2470 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s1 [81, 65535] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s1 -> s1 [0, 79] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2520 += 1 };
  s1 -> s1 [0, 65535] { R2520 += 1, R2470 += 1 };
  s1 -> s1 [81, 65535] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s2 -> s1 [0, 79] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s2 -> s2 [0, 65535] { R2520 += 1, R2469 += 1, R2470 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2520 += 1, R2470 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s1 [81, 65535] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s3 -> s1 [0, 79] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2520 += 1 };
  s3 -> s3 [0, 65535] { R2520 += 1, R2470 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s1 [81, 65535] { R2520 += 1, R2470 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2520 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2522 += 1, R2472 += 1 };
  s0 -> s2 [0, 65535] { R2522 += 1, R2471 += 1, R2472 += 1 };
  s0 -> s0 [0, 65535] { R2521 += 1, R2522 += 1 };
  s1 -> s1 [0, 65535] { R2522 += 1, R2472 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2522 += 1 };
  s2 -> s1 [0, 65535] { R2522 += 1, R2472 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2522 += 1, R2471 += 1, R2472 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2522 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2524 += 1, R2473 += 1, R2474 += 1 };
  s0 -> s0 [0, 65535] { R2523 += 1, R2524 += 1 };
  s0 -> s2 [0, 65535] { R2524 += 1, R2474 += 1 };
  s1 -> s1 [0, 65535] { R2524 += 1, R2473 += 1, R2474 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2524 += 1, R2474 += 1 };
  s2 -> s3 [0, 65535] { R2524 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2524 += 1, R2474 += 1 };
  s3 -> s3 [0, 65535] { R2524 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2526 += 1, R2476 += 1 };
  s0 -> s2 [0, 65535] { R2526 += 1, R2476 += 1, R2457 += 1, R2458 += 1 };
  s0 -> s3 [0, 65535] { R2526 += 1, R2475 += 1, R2476 += 1 };
  s0 -> s0 [0, 65535] { R2525 += 1, R2526 += 1 };
  s1 -> s1 [0, 65535] { R2526 += 1, R2476 += 1 };
  s1 -> s5 [0, 65535] { R2526 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R2526 += 1, R2476 += 1 };
  s2 -> s2 [0, 65535] { R2526 += 1, R2476 += 1, R2457 += 1, R2458 += 1 };
  s2 -> s5 [0, 65535] { R2526 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2526 += 1, R2476 += 1 };
  s3 -> s2 [0, 65535] { R2526 += 1, R2476 += 1, R2457 += 1, R2458 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2526 += 1, R2475 += 1, R2476 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2526 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2528 += 1, R2478 += 1 };
  s0 -> s2 [0, 65535] { R2528 += 1, R2477 += 1, R2478 += 1 };
  s0 -> s0 [0, 65535] { R2527 += 1, R2528 += 1 };
  s1 -> s4 [0, 65535] { R2528 += 1 };
  s1 -> s1 [0, 65535] { R2528 += 1, R2478 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2528 += 1, R2478 += 1 };
  s2 -> s2 [0, 65535] { R2528 += 1, R2477 += 1, R2478 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2528 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2530 += 1, R2479 += 1, R2480 += 1 };
  s0 -> s2 [0, 65535] { R2530 += 1, R2480 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R2529 += 1, R2530 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2530 += 1, R2479 += 1, R2480 += 1 };
  s1 -> s2 [0, 65535] { R2530 += 1, R2480 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2530 += 1 };
  s2 -> s2 [0, 65535] { R2530 += 1, R2480 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2530 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2532 += 1, R2482 += 1 };
  s0 -> s2 [0, 65535] { R2532 += 1, R2481 += 1, R2482 += 1 };
  s0 -> s0 [0, 65535] { R2531 += 1, R2532 += 1 };
  s0 -> s3 [65, 65] { R2532 += 1, R2482 += 1 };
  s0 -> s4 [65, 65] { R2532 += 1, R2482 += 1 };
  s0 -> s5 [80, 80] { R2532 += 1, R2482 += 1 };
  s0 -> s1 [81, 65535] { R2532 += 1, R2482 += 1 };
  s1 -> s1 [0, 64] { R2532 += 1, R2482 += 1 };
  s1 -> s3 [65, 65] { R2532 += 1, R2482 += 1 };
  s1 -> s4 [65, 65] { R2532 += 1, R2482 += 1 };
  s1 -> s5 [80, 80] { R2532 += 1, R2482 += 1 };
  s1 -> s1 [81, 65535] { R2532 += 1, R2482 += 1 };
  s2 -> s1 [0, 64] { R2532 += 1, R2482 += 1 };
  s2 -> s2 [0, 65535] { R2532 += 1, R2481 += 1, R2482 += 1 };
  s2 -> s3 [65, 65] { R2532 += 1, R2482 += 1 };
  s2 -> s4 [65, 65] { R2532 += 1, R2482 += 1 };
  s2 -> s5 [80, 80] { R2532 += 1, R2482 += 1 };
  s2 -> s1 [81, 65535] { R2532 += 1, R2482 += 1 };
  s3 -> s3 [0, 65] { R2532 += 1, R2482 += 1 };
  s3 -> s8 [80, 80] { R2532 += 1, R2482 += 1 };
  s3 -> s3 [81, 65535] { R2532 += 1, R2482 += 1 };
  s5 -> s5 [0, 64] { R2532 += 1, R2482 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2532 += 1 };
  s5 -> s7 [65, 65] { R2532 += 1, R2482 += 1 };
  s5 -> s8 [65, 65] { R2532 += 1, R2482 += 1 };
  s5 -> s5 [80, 65535] { R2532 += 1, R2482 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2532 += 1 };
  s8 -> s8 [0, 65] { R2532 += 1, R2482 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2532 += 1 };
  s8 -> s8 [80, 65535] { R2532 += 1, R2482 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R2534 += 1, R2483 += 1, R2484 += 1 };
  s0 -> s0 [0, 65535] { R2533 += 1, R2534 += 1 };
  s0 -> s3 [65, 65] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2534 += 1 };
  s1 -> s3 [65, 65] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2534 += 1, R2483 += 1, R2484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2534 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2534 += 1, R2484 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535] { R2534 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2534 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2536 += 1, R2485 += 1, R2486 += 1 };
  s0 -> s0 [0, 65535] { R2535 += 1, R2536 += 1 };
  s0 -> s3 [65, 65] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R2536 += 1 };
  s1 -> s3 [65, 65] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R2536 += 1, R2485 += 1, R2486 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R2536 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2536 += 1 };
  s4 -> s4 [0, 65535] { R2536 += 1, R2486 += 1, R1771 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2536 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s0 [0, 65535] { R2537 += 1, R2538 += 1 };
  s0 -> s2 [0, 65535] { R2538 += 1, R2487 += 1, R2488 += 1 };
  s0 -> s3 [65, 65] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 65535] { R2538 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R2538 += 1, R2487 += 1, R2488 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R2538 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2538 += 1 };
  s4 -> s4 [0, 65535] { R2538 += 1, R2488 += 1, R1773 += 1, R1774 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2538 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s2 [0, 64] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s0 [0, 65535] { R2539 += 1, R2540 += 1 };
  s0 -> s3 [0, 65535] { R2540 += 1, R2489 += 1, R2490 += 1 };
  s0 -> s4 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s5 [65, 65] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s6 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s7 [65, 65] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s1 [66, 65535] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s2 [66, 65535] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s1 [0, 64] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s2 [0, 64] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s4 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s5 [65, 65] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s6 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s7 [65, 65] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s1 [66, 65535] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s2 [66, 65535] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s11 [0, 64] { R2540 += 1, R2490 += 1 };
  s2 -> s2 [0, 64] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s4 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s8 [65, 65] { R2540 += 1, R2490 += 1 };
  s2 -> s12 [65, 65] { R2540 += 1, R2490 += 1 };
  s2 -> s6 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s11 [66, 65535] { R2540 += 1, R2490 += 1 };
  s2 -> s2 [66, 65535] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s1 [0, 64] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s2 [0, 64] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s3 [0, 65535] { R2540 += 1, R2489 += 1, R2490 += 1 };
  s3 -> s4 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s5 [65, 65] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s6 [65, 65] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s7 [65, 65] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s1 [66, 65535] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s2 [66, 65535] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s5 -> s5 [0, 65535] { R2540 += 1, R2490 += 1, R2353 += 1, R2354 += 1 };
  s5 -> s6 [0, 65535] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s6 -> s8 [0, 65535] { R2540 += 1, R2490 += 1 };
  s6 -> s6 [0, 65535] { R2540 += 1, R2490 += 1, R2354 += 1, R2355 += 1 };
  s8 -> s9 [0, 65535] { R2540 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R2540 += 1, R2490 += 1 };
  s9 -> s9 [0, 65535] { R2540 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R2540 += 1, R2490 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R2540 += 1 };
  s11 -> s8 [65, 65] { R2540 += 1, R2490 += 1 };
  s11 -> s12 [65, 65] { R2540 += 1, R2490 += 1 };
  s11 -> s11 [66, 65535] { R2540 += 1, R2490 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R2540 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2542 += 1, R2492 += 1 };
  s0 -> s0 [0, 65535] { R2541 += 1, R2542 += 1 };
  s0 -> s2 [0, 65535] { R2542 += 1, R2491 += 1, R2492 += 1 };
  s0 -> s3 [65, 65] { R2542 += 1, R2492 += 1 };
  s0 -> s4 [65, 65] { R2542 += 1, R2492 += 1 };
  s0 -> s1 [66, 65535] { R2542 += 1, R2492 += 1 };
  s1 -> s1 [0, 64] { R2542 += 1, R2492 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2542 += 1 };
  s1 -> s3 [65, 65] { R2542 += 1, R2492 += 1 };
  s1 -> s4 [65, 65] { R2542 += 1, R2492 += 1 };
  s1 -> s1 [66, 65535] { R2542 += 1, R2492 += 1 };
  s2 -> s1 [0, 64] { R2542 += 1, R2492 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2542 += 1, R2491 += 1, R2492 += 1 };
  s2 -> s3 [65, 65] { R2542 += 1, R2492 += 1 };
  s2 -> s4 [65, 65] { R2542 += 1, R2492 += 1 };
  s2 -> s1 [66, 65535] { R2542 += 1, R2492 += 1 };
  s3 -> s3 [0, 65535] { R2542 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2542 += 1, R2492 += 1 };
  s4 -> s6 [0, 65535] { R2542 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2542 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s0 -> s2 [0, 64] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s0 -> s0 [0, 65535] { R2543 += 1, R2544 += 1 };
  s0 -> s3 [0, 65535] { R2544 += 1, R2493 += 1, R2494 += 1 };
  s0 -> s4 [65, 65] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s0 -> s5 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s0 -> s6 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s0 -> s7 [65, 65] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s0 -> s1 [66, 65535] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s0 -> s2 [66, 65535] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s1 -> s1 [0, 64] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s1 -> s2 [0, 64] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s1 -> s4 [65, 65] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s1 -> s5 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s1 -> s6 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s1 -> s7 [65, 65] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s1 -> s1 [66, 65535] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s1 -> s2 [66, 65535] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s2 -> s2 [0, 64] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R2544 += 1 };
  s2 -> s5 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s2 -> s6 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s2 -> s2 [66, 65535] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s3 -> s1 [0, 64] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s3 -> s2 [0, 64] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s3 -> s3 [0, 65535] { R2544 += 1, R2493 += 1, R2494 += 1 };
  s3 -> s4 [65, 65] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s3 -> s5 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s3 -> s6 [65, 65] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s3 -> s7 [65, 65] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s3 -> s1 [66, 65535] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s3 -> s2 [66, 65535] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s4 -> s4 [0, 65535] { R2544 += 1, R2494 += 1, R2453 += 1, R2454 += 1 };
  s4 -> s6 [0, 65535] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s5 -> s5 [0, 65535] { R2544 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R2544 += 1 };
  s6 -> s6 [0, 65535] { R2544 += 1, R2494 += 1, R2454 += 1, R2455 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2544 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2546 += 1, R2496 += 1 };
  s0 -> s2 [0, 65535] { R2546 += 1, R2495 += 1, R2496 += 1 };
  s0 -> s0 [0, 65535] { R2545 += 1, R2546 += 1 };
  s0 -> s3 [65, 65] { R2546 += 1, R2496 += 1 };
  s0 -> s4 [65, 65] { R2546 += 1, R2496 += 1 };
  s0 -> s1 [66, 65535] { R2546 += 1, R2496 += 1 };
  s1 -> s1 [0, 64] { R2546 += 1, R2496 += 1 };
  s1 -> s1 [0, 65535] { R2546 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2546 += 1, R2496 += 1 };
  s1 -> s4 [65, 65] { R2546 += 1, R2496 += 1 };
  s1 -> s1 [66, 65535] { R2546 += 1, R2496 += 1 };
  s2 -> s1 [0, 64] { R2546 += 1, R2496 += 1 };
  s2 -> s2 [0, 65535] { R2546 += 1, R2495 += 1, R2496 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2546 += 1, R2496 += 1 };
  s2 -> s4 [65, 65] { R2546 += 1, R2496 += 1 };
  s2 -> s1 [66, 65535] { R2546 += 1, R2496 += 1 };
  s3 -> s6 [0, 65535] { R2546 += 1 };
  s3 -> s3 [0, 65535] { R2546 += 1, R2496 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2546 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2546 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2478 && R2 = R2546 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2459 = 0 && R2460 = R2478 && R2461 = 0 && R2462 = R2478 && R2463 = 0 && R2464 = R2478 && R2465 = 0 && R2466 = R2478 && R2467 = 0 && R2468 = R2478 && R2469 = 0 && R2470 = R2478 && R2471 = 0 && R2472 = R2478 && R2473 = 0 && R2474 = R2478 && R2475 = 0 && R2476 = R2478 && R2477 = 0 && R2481 = 0 && R2482 = 0 && R2489 = 0 && R2490 = 0 && R2493 = 0 && R2494 = 0 && R2497 = 10 && R2498 = R2546 && R2499 = 10 && R2500 = R2546 && R2501 = 10 && R2502 = R2546 && R2503 = 10 && R2504 = R2546 && R2505 = 10 && R2506 = R2546 && R2507 = 10 && R2508 = R2546 && R2509 = 10 && R2510 = R2546 && R2511 = 10 && R2512 = R2546 && R2513 = 10 && R2514 = R2546 && R2515 = 10 && R2516 = R2546 && R2517 = 10 && R2518 = R2546 && R2519 = 10 && R2520 = R2546 && R2521 = 10 && R2522 = R2546 && R2523 = 10 && R2524 = R2546 && R2525 = 10 && R2526 = R2546 && R2527 = 10 && R2528 = R2546 && R2529 = 10 && R2530 = R2546 && R2531 = 10 && R2532 = R2546 && R2533 = 10 && R2534 = R2546 && R2535 = 10 && R2536 = R2546 && R2537 = 10 && R2538 = R2546 && R2539 = 10 && R2540 = R2546 && R2541 = 10 && R2542 = R2546 && R2543 = 10 && R2544 = R2546 && R2545 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2478 && 9 < R2546 && (R14 = 0 || (R2479 = 0 && R2480 = 0)) && (R14 = 0 || (R2483 = 0 && R2484 = 0)) && (R14 = 0 || (R2485 = 0 && R2486 = 0)) && (R14 = 0 || (R2487 = 0 && R2488 = 0)) && (R14 = 0 || (R2491 = 0 && R2492 = 0)) && (R14 = 0 || (R2495 = 0 && R2496 = 0)) && (R2358 + R2355 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R2358 + R2355 = 0 || (R2356 + R2353 = 0 && R2357 + R2354 = 0)) && (R2458 + R2455 = 0 || (R2456 + R2453 = 0 && R2457 + R2454 = 0));
// End of Parikh automata intersection problem
