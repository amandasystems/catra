// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R18, R2, R2353, R2354, R2355, R2356, R2357, R2358, R2547, R2548, R2549, R2550, R2551, R2552, R2553, R2554, R2555, R2556, R2557, R2558, R2559, R2560, R2561, R2562, R2563, R2564, R2565, R2566, R2567, R2568, R2569, R2570, R2571, R2572, R2573, R2574, R2575, R2576, R2577, R2578, R2579, R2580, R2581, R2582, R2583, R2584, R2585, R2586, R2587, R2588, R2589, R2590, R2591, R2592, R2593, R2594, R2595, R2596, R2597, R2598, R2599, R2600, R2601, R2602, R2603, R2604, R2605, R2606, R2607, R2608, R2609, R2610, R2611, R2612, R2613, R2614, R2615, R2616, R2617, R2618, R2619, R2620, R2621, R2622, R2623, R2624, R2625, R2626, R2627, R2628, R2629, R2630, R2631, R2632, R2633, R2634, R2635, R2636, R2637, R2638, R2639, R2640, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2592 += 1 };
  s0 -> s0 [0, 65535] { R2591 += 1, R2592 += 1 };
  s0 -> s1 [45, 45] { R2592 += 1 };
  s0 -> s2 [46, 46] { R2592 += 1 };
  s0 -> s1 [48, 62] { R2592 += 1 };
  s0 -> s3 [65, 65] { R2592 += 1 };
  s0 -> s1 [66, 65535] { R2592 += 1 };
  s1 -> s1 [0, 43] { R2592 += 1 };
  s1 -> s1 [45, 45] { R2592 += 1 };
  s1 -> s2 [46, 46] { R2592 += 1 };
  s1 -> s1 [48, 62] { R2592 += 1 };
  s1 -> s3 [65, 65] { R2592 += 1 };
  s1 -> s1 [66, 65535] { R2592 += 1 };
  s2 -> s1 [0, 43] { R2592 += 1 };
  s2 -> s1 [45, 45] { R2592 += 1 };
  s2 -> s2 [46, 46] { R2592 += 1 };
  s2 -> s1 [48, 62] { R2592 += 1 };
  s2 -> s3 [65, 65] { R2592 += 1 };
  s2 -> s1 [66, 114] { R2592 += 1 };
  s2 -> s8 [115, 115] { R2592 += 1 };
  s2 -> s1 [116, 65535] { R2592 += 1 };
  s3 -> s3 [0, 43] { R2592 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2592 += 1 };
  s3 -> s4 [46, 46] { R2592 += 1 };
  s3 -> s3 [48, 62] { R2592 += 1 };
  s3 -> s3 [65, 65535] { R2592 += 1 };
  s4 -> s3 [0, 43] { R2592 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2592 += 1 };
  s4 -> s4 [46, 46] { R2592 += 1 };
  s4 -> s3 [48, 62] { R2592 += 1 };
  s4 -> s3 [65, 114] { R2592 += 1 };
  s4 -> s5 [115, 115] { R2592 += 1 };
  s4 -> s3 [116, 65535] { R2592 += 1 };
  s5 -> s3 [0, 43] { R2592 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2592 += 1 };
  s5 -> s4 [46, 46] { R2592 += 1 };
  s5 -> s3 [48, 62] { R2592 += 1 };
  s5 -> s3 [65, 110] { R2592 += 1 };
  s5 -> s6 [111, 111] { R2592 += 1 };
  s5 -> s3 [112, 65535] { R2592 += 1 };
  s6 -> s3 [0, 43] { R2592 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2592 += 1 };
  s6 -> s4 [46, 46] { R2592 += 1 };
  s6 -> s3 [48, 62] { R2592 += 1 };
  s6 -> s3 [65, 98] { R2592 += 1 };
  s6 -> s7 [99, 99] { R2592 += 1 };
  s6 -> s3 [100, 65535] { R2592 += 1 };
  s7 -> s3 [0, 43] { R2592 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2592 += 1 };
  s7 -> s4 [46, 46] { R2592 += 1 };
  s7 -> s3 [48, 62] { R2592 += 1 };
  s7 -> s3 [65, 106] { R2592 += 1 };
  s7 -> s3 [108, 65535] { R2592 += 1 };
  s8 -> s1 [0, 43] { R2592 += 1 };
  s8 -> s1 [45, 45] { R2592 += 1 };
  s8 -> s2 [46, 46] { R2592 += 1 };
  s8 -> s1 [48, 62] { R2592 += 1 };
  s8 -> s3 [65, 65] { R2592 += 1 };
  s8 -> s1 [66, 110] { R2592 += 1 };
  s8 -> s9 [111, 111] { R2592 += 1 };
  s8 -> s1 [112, 65535] { R2592 += 1 };
  s9 -> s1 [0, 43] { R2592 += 1 };
  s9 -> s1 [45, 45] { R2592 += 1 };
  s9 -> s2 [46, 46] { R2592 += 1 };
  s9 -> s1 [48, 62] { R2592 += 1 };
  s9 -> s3 [65, 65] { R2592 += 1 };
  s9 -> s1 [66, 98] { R2592 += 1 };
  s9 -> s10 [99, 99] { R2592 += 1 };
  s9 -> s1 [100, 65535] { R2592 += 1 };
  s10 -> s1 [0, 43] { R2592 += 1 };
  s10 -> s1 [45, 45] { R2592 += 1 };
  s10 -> s2 [46, 46] { R2592 += 1 };
  s10 -> s1 [48, 62] { R2592 += 1 };
  s10 -> s3 [65, 65] { R2592 += 1 };
  s10 -> s1 [66, 106] { R2592 += 1 };
  s10 -> s1 [108, 65535] { R2592 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2593 += 1, R2594 += 1 };
  s0 -> s1 [0, 65535] { R2594 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2594 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2596 += 1 };
  s0 -> s0 [0, 65535] { R2595 += 1, R2596 += 1 };
  s0 -> s2 [0, 65535] { R2596 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2596 += 1 };
  s0 -> s1 [59, 65535] { R2596 += 1 };
  s1 -> s1 [0, 57] { R2596 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2596 += 1 };
  s1 -> s1 [59, 65535] { R2596 += 1 };
  s2 -> s1 [0, 57] { R2596 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2596 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2596 += 1 };
  s2 -> s1 [59, 65535] { R2596 += 1 };
  s3 -> s3 [0, 65535] { R2596 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2598 += 1 };
  s0 -> s2 [0, 65535] { R2598 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2597 += 1, R2598 += 1 };
  s0 -> s3 [65, 65] { R2598 += 1 };
  s0 -> s1 [66, 65535] { R2598 += 1 };
  s1 -> s1 [0, 64] { R2598 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2598 += 1 };
  s1 -> s1 [66, 65535] { R2598 += 1 };
  s2 -> s1 [0, 64] { R2598 += 1 };
  s2 -> s2 [0, 65535] { R2598 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R2598 += 1 };
  s2 -> s1 [66, 65535] { R2598 += 1 };
  s3 -> s3 [0, 65535] { R2598 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2600 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R2600 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2599 += 1, R2600 += 1 };
  s0 -> s3 [91, 91] { R2600 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2600 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2600 += 1 };
  s1 -> s1 [0, 65535] { R2600 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R2600 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R2600 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2600 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2600 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2600 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2600 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2602 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2601 += 1, R2602 += 1 };
  s0 -> s2 [0, 65535] { R2602 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R2602 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2602 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2602 += 1 };
  s2 -> s2 [0, 65535] { R2602 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2602 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2604 += 1, R2554 += 1 };
  s0 -> s2 [0, 65535] { R2604 += 1, R2553 += 1, R2554 += 1 };
  s0 -> s0 [0, 65535] { R2603 += 1, R2604 += 1 };
  s0 -> s1 [66, 65535] { R2604 += 1, R2554 += 1 };
  s1 -> s1 [0, 64] { R2604 += 1, R2554 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2604 += 1 };
  s1 -> s1 [66, 65535] { R2604 += 1, R2554 += 1 };
  s2 -> s1 [0, 64] { R2604 += 1, R2554 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2604 += 1, R2553 += 1, R2554 += 1 };
  s2 -> s1 [66, 65535] { R2604 += 1, R2554 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2606 += 1, R2555 += 1, R2556 += 1 };
  s0 -> s2 [0, 65535] { R2606 += 1, R2556 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2605 += 1, R2606 += 1 };
  s1 -> s1 [0, 65535] { R2606 += 1, R2555 += 1, R2556 += 1 };
  s1 -> s2 [0, 65535] { R2606 += 1, R2556 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2606 += 1, R2556 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2606 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2606 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2608 += 1, R2558 += 1 };
  s0 -> s2 [0, 65535] { R2608 += 1, R2557 += 1, R2558 += 1 };
  s0 -> s0 [0, 65535] { R2607 += 1, R2608 += 1 };
  s0 -> s1 [80, 65535] { R2608 += 1, R2558 += 1 };
  s1 -> s1 [0, 65] { R2608 += 1, R2558 += 1 };
  s1 -> s1 [0, 65535] { R2608 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R2608 += 1, R2558 += 1 };
  s2 -> s1 [0, 65] { R2608 += 1, R2558 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2608 += 1, R2557 += 1, R2558 += 1 };
  s2 -> s1 [80, 65535] { R2608 += 1, R2558 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2610 += 1, R2560 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2609 += 1, R2610 += 1 };
  s0 -> s2 [0, 65535] { R2610 += 1, R2559 += 1, R2560 += 1 };
  s1 -> s4 [0, 65535] { R2610 += 1 };
  s1 -> s1 [0, 65535] { R2610 += 1, R2560 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2610 += 1, R2560 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2610 += 1, R2559 += 1, R2560 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2610 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R2612 += 1, R2562 += 1 };
  s0 -> s2 [0, 65535] { R2612 += 1, R2561 += 1, R2562 += 1 };
  s0 -> s0 [0, 65535] { R2611 += 1, R2612 += 1 };
  s0 -> s3 [0, 65535] { R2612 += 1, R2562 += 1, R1772 += 1 };
  s0 -> s1 [81, 65535] { R2612 += 1, R2562 += 1 };
  s1 -> s1 [0, 79] { R2612 += 1, R2562 += 1 };
  s1 -> s1 [0, 65535] { R2612 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R2612 += 1, R2562 += 1 };
  s2 -> s1 [0, 79] { R2612 += 1, R2562 += 1 };
  s2 -> s2 [0, 65535] { R2612 += 1, R2561 += 1, R2562 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2612 += 1, R2562 += 1, R1772 += 1 };
  s2 -> s1 [81, 65535] { R2612 += 1, R2562 += 1 };
  s3 -> s1 [0, 79] { R2612 += 1, R2562 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2612 += 1 };
  s3 -> s3 [0, 65535] { R2612 += 1, R2562 += 1, R1772 += 1 };
  s3 -> s1 [81, 65535] { R2612 += 1, R2562 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2612 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s0 -> s2 [0, 65535] { R2614 += 1, R2564 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s0 [0, 65535] { R2613 += 1, R2614 += 1 };
  s0 -> s3 [0, 65535] { R2614 += 1, R2563 += 1, R2564 += 1 };
  s0 -> s1 [81, 65535] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s1 -> s1 [0, 79] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s1 -> s5 [0, 65535] { R2614 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2614 += 1, R2564 += 1 };
  s1 -> s1 [81, 65535] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s2 -> s1 [0, 79] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s2 -> s2 [0, 65535] { R2614 += 1, R2564 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s5 [0, 65535] { R2614 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s3 -> s1 [0, 79] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s3 -> s2 [0, 65535] { R2614 += 1, R2564 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2614 += 1, R2563 += 1, R2564 += 1 };
  s3 -> s1 [81, 65535] { R2614 += 1, R2564 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2614 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2615 += 1, R2616 += 1 };
  s0 -> s1 [0, 65535] { R2616 += 1, R2565 += 1, R2566 += 1 };
  s0 -> s2 [0, 65535] { R2616 += 1, R2566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2616 += 1, R2565 += 1, R2566 += 1 };
  s1 -> s2 [0, 65535] { R2616 += 1, R2566 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2616 += 1 };
  s2 -> s2 [0, 65535] { R2616 += 1, R2566 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2616 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2618 += 1, R2568 += 1 };
  s0 -> s2 [0, 65535] { R2618 += 1, R2567 += 1, R2568 += 1 };
  s0 -> s0 [0, 65535] { R2617 += 1, R2618 += 1 };
  s1 -> s1 [0, 65535] { R2618 += 1, R2568 += 1 };
  s1 -> s4 [0, 65535] { R2618 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2618 += 1, R2568 += 1 };
  s2 -> s2 [0, 65535] { R2618 += 1, R2567 += 1, R2568 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2618 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2620 += 1, R2569 += 1, R2570 += 1 };
  s0 -> s2 [0, 65535] { R2620 += 1, R2570 += 1 };
  s0 -> s0 [0, 65535] { R2619 += 1, R2620 += 1 };
  s1 -> s1 [0, 65535] { R2620 += 1, R2569 += 1, R2570 += 1 };
  s1 -> s2 [0, 65535] { R2620 += 1, R2570 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2620 += 1 };
  s2 -> s2 [0, 65535] { R2620 += 1, R2570 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2620 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2621 += 1, R2622 += 1 };
  s0 -> s1 [0, 65535] { R2622 += 1, R2571 += 1, R2572 += 1 };
  s0 -> s2 [0, 65535] { R2622 += 1, R2572 += 1 };
  s1 -> s1 [0, 65535] { R2622 += 1, R2571 += 1, R2572 += 1 };
  s1 -> s2 [0, 65535] { R2622 += 1, R2572 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2622 += 1 };
  s2 -> s2 [0, 65535] { R2622 += 1, R2572 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2622 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2623 += 1, R2624 += 1 };
  s0 -> s1 [0, 65535] { R2624 += 1, R2574 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R2624 += 1, R2573 += 1, R2574 += 1 };
  s1 -> s4 [0, 65535] { R2624 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2624 += 1, R2574 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2624 += 1, R2574 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R2624 += 1, R2573 += 1, R2574 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2624 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2626 += 1, R2576 += 1 };
  s0 -> s2 [0, 65535] { R2626 += 1, R2575 += 1, R2576 += 1 };
  s0 -> s0 [0, 65535] { R2625 += 1, R2626 += 1 };
  s0 -> s3 [65, 65] { R2626 += 1, R2576 += 1 };
  s0 -> s4 [65, 65] { R2626 += 1, R2576 += 1 };
  s0 -> s5 [80, 80] { R2626 += 1, R2576 += 1 };
  s0 -> s1 [81, 65535] { R2626 += 1, R2576 += 1 };
  s1 -> s1 [0, 64] { R2626 += 1, R2576 += 1 };
  s1 -> s3 [65, 65] { R2626 += 1, R2576 += 1 };
  s1 -> s4 [65, 65] { R2626 += 1, R2576 += 1 };
  s1 -> s5 [80, 80] { R2626 += 1, R2576 += 1 };
  s1 -> s1 [81, 65535] { R2626 += 1, R2576 += 1 };
  s2 -> s1 [0, 64] { R2626 += 1, R2576 += 1 };
  s2 -> s2 [0, 65535] { R2626 += 1, R2575 += 1, R2576 += 1 };
  s2 -> s3 [65, 65] { R2626 += 1, R2576 += 1 };
  s2 -> s4 [65, 65] { R2626 += 1, R2576 += 1 };
  s2 -> s5 [80, 80] { R2626 += 1, R2576 += 1 };
  s2 -> s1 [81, 65535] { R2626 += 1, R2576 += 1 };
  s4 -> s4 [0, 65] { R2626 += 1, R2576 += 1 };
  s4 -> s7 [80, 80] { R2626 += 1, R2576 += 1 };
  s4 -> s4 [81, 65535] { R2626 += 1, R2576 += 1 };
  s5 -> s5 [0, 64] { R2626 += 1, R2576 += 1 };
  s5 -> s5 [0, 65535] { R2626 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2626 += 1, R2576 += 1 };
  s5 -> s8 [65, 65] { R2626 += 1, R2576 += 1 };
  s5 -> s5 [80, 65535] { R2626 += 1, R2576 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2626 += 1, R2576 += 1 };
  s7 -> s7 [0, 65535] { R2626 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R2626 += 1, R2576 += 1 };
  s8 -> s8 [0, 65535] { R2626 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R2628 += 1, R2577 += 1, R2578 += 1 };
  s0 -> s0 [0, 65535] { R2627 += 1, R2628 += 1 };
  s0 -> s3 [65, 65] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R2628 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2628 += 1, R2577 += 1, R2578 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2628 += 1, R2578 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2628 += 1 };
  s4 -> s4 [0, 65535] { R2628 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2628 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2630 += 1, R2579 += 1, R2580 += 1 };
  s0 -> s0 [0, 65535] { R2629 += 1, R2630 += 1 };
  s0 -> s3 [65, 65] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R2630 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R2630 += 1, R2579 += 1, R2580 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R2630 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2630 += 1 };
  s4 -> s4 [0, 65535] { R2630 += 1, R2580 += 1, R1771 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2630 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s2 [0, 65535] { R2632 += 1, R2581 += 1, R2582 += 1 };
  s0 -> s0 [0, 65535] { R2631 += 1, R2632 += 1 };
  s0 -> s3 [65, 65] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2632 += 1 };
  s1 -> s3 [65, 65] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2632 += 1, R2581 += 1, R2582 += 1 };
  s2 -> s3 [65, 65] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R2632 += 1, R2582 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2632 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2632 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2632 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s2 [0, 64] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s3 [0, 65535] { R2634 += 1, R2583 += 1, R2584 += 1 };
  s0 -> s0 [0, 65535] { R2633 += 1, R2634 += 1 };
  s0 -> s4 [65, 65] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s5 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s6 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s0 -> s7 [65, 65] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s1 [66, 65535] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s0 -> s2 [66, 65535] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s1 [0, 64] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s2 [0, 64] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s4 [65, 65] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s5 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s6 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s1 -> s7 [65, 65] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s1 [66, 65535] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s1 -> s2 [66, 65535] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s2 [0, 64] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s11 [0, 64] { R2634 += 1, R2584 += 1 };
  s2 -> s5 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s8 [65, 65] { R2634 += 1, R2584 += 1 };
  s2 -> s6 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s12 [65, 65] { R2634 += 1, R2584 += 1 };
  s2 -> s2 [66, 65535] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s2 -> s11 [66, 65535] { R2634 += 1, R2584 += 1 };
  s3 -> s1 [0, 64] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s2 [0, 64] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s3 [0, 65535] { R2634 += 1, R2583 += 1, R2584 += 1 };
  s3 -> s4 [65, 65] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s5 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s6 [65, 65] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s3 -> s7 [65, 65] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s1 [66, 65535] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s3 -> s2 [66, 65535] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s6 -> s8 [0, 65535] { R2634 += 1, R2584 += 1 };
  s6 -> s6 [0, 65535] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s7 -> s6 [0, 65535] { R2634 += 1, R2584 += 1, R2354 += 1, R2355 += 1 };
  s7 -> s7 [0, 65535] { R2634 += 1, R2584 += 1, R2353 += 1, R2354 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R2634 += 1, R2584 += 1 };
  s8 -> s10 [0, 65535] { R2634 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2634 += 1 };
  s11 -> s11 [0, 64] { R2634 += 1, R2584 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2634 += 1 };
  s11 -> s8 [65, 65] { R2634 += 1, R2584 += 1 };
  s11 -> s12 [65, 65] { R2634 += 1, R2584 += 1 };
  s11 -> s11 [66, 65535] { R2634 += 1, R2584 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2634 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2636 += 1, R2586 += 1 };
  s0 -> s0 [0, 65535] { R2635 += 1, R2636 += 1 };
  s0 -> s2 [0, 65535] { R2636 += 1, R2585 += 1, R2586 += 1 };
  s0 -> s3 [65, 65] { R2636 += 1, R2586 += 1 };
  s0 -> s4 [65, 65] { R2636 += 1, R2586 += 1 };
  s0 -> s1 [66, 65535] { R2636 += 1, R2586 += 1 };
  s1 -> s1 [0, 64] { R2636 += 1, R2586 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2636 += 1 };
  s1 -> s3 [65, 65] { R2636 += 1, R2586 += 1 };
  s1 -> s4 [65, 65] { R2636 += 1, R2586 += 1 };
  s1 -> s1 [66, 65535] { R2636 += 1, R2586 += 1 };
  s2 -> s1 [0, 64] { R2636 += 1, R2586 += 1 };
  s2 -> s2 [0, 65535] { R2636 += 1, R2585 += 1, R2586 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2636 += 1, R2586 += 1 };
  s2 -> s4 [65, 65] { R2636 += 1, R2586 += 1 };
  s2 -> s1 [66, 65535] { R2636 += 1, R2586 += 1 };
  s3 -> s3 [0, 65535] { R2636 += 1, R2586 += 1 };
  s3 -> s6 [0, 65535] { R2636 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2636 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2636 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s0 -> s2 [0, 64] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s0 -> s3 [0, 65535] { R2638 += 1, R2587 += 1, R2588 += 1 };
  s0 -> s0 [0, 65535] { R2637 += 1, R2638 += 1 };
  s0 -> s4 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s0 -> s5 [65, 65] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s0 -> s6 [65, 65] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s0 -> s7 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s0 -> s1 [66, 65535] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s0 -> s2 [66, 65535] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s1 -> s1 [0, 64] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s1 -> s11 [0, 64] { R2638 += 1, R2588 += 1 };
  s1 -> s8 [65, 65] { R2638 += 1, R2588 += 1 };
  s1 -> s12 [65, 65] { R2638 += 1, R2588 += 1 };
  s1 -> s4 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s1 -> s7 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s1 -> s1 [66, 65535] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s1 -> s11 [66, 65535] { R2638 += 1, R2588 += 1 };
  s2 -> s1 [0, 64] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s2 -> s2 [0, 64] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s2 -> s4 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s2 -> s5 [65, 65] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s2 -> s6 [65, 65] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s2 -> s7 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s2 -> s1 [66, 65535] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s2 -> s2 [66, 65535] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s3 -> s1 [0, 64] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s3 -> s2 [0, 64] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s3 -> s3 [0, 65535] { R2638 += 1, R2587 += 1, R2588 += 1 };
  s3 -> s4 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s3 -> s5 [65, 65] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s3 -> s6 [65, 65] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s3 -> s7 [65, 65] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s3 -> s1 [66, 65535] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s3 -> s2 [66, 65535] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s5 -> s5 [0, 65535] { R2638 += 1, R2588 += 1, R2547 += 1, R2548 += 1 };
  s5 -> s7 [0, 65535] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s7 -> s8 [0, 65535] { R2638 += 1, R2588 += 1 };
  s7 -> s7 [0, 65535] { R2638 += 1, R2588 += 1, R2548 += 1, R2549 += 1 };
  s8 -> s8 [0, 65535] { R2638 += 1, R2588 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2638 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2638 += 1 };
  s11 -> s11 [0, 64] { R2638 += 1, R2588 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2638 += 1 };
  s11 -> s8 [65, 65] { R2638 += 1, R2588 += 1 };
  s11 -> s12 [65, 65] { R2638 += 1, R2588 += 1 };
  s11 -> s11 [66, 65535] { R2638 += 1, R2588 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R2638 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2640 += 1, R2590 += 1 };
  s0 -> s2 [0, 65535] { R2640 += 1, R2589 += 1, R2590 += 1 };
  s0 -> s0 [0, 65535] { R2639 += 1, R2640 += 1 };
  s0 -> s3 [65, 65] { R2640 += 1, R2590 += 1 };
  s0 -> s4 [65, 65] { R2640 += 1, R2590 += 1 };
  s0 -> s1 [66, 65535] { R2640 += 1, R2590 += 1 };
  s1 -> s1 [0, 64] { R2640 += 1, R2590 += 1 };
  s1 -> s1 [0, 65535] { R2640 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2640 += 1, R2590 += 1 };
  s1 -> s4 [65, 65] { R2640 += 1, R2590 += 1 };
  s1 -> s1 [66, 65535] { R2640 += 1, R2590 += 1 };
  s2 -> s1 [0, 64] { R2640 += 1, R2590 += 1 };
  s2 -> s2 [0, 65535] { R2640 += 1, R2589 += 1, R2590 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2640 += 1, R2590 += 1 };
  s2 -> s4 [65, 65] { R2640 += 1, R2590 += 1 };
  s2 -> s1 [66, 65535] { R2640 += 1, R2590 += 1 };
  s3 -> s3 [0, 65535] { R2640 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2640 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2640 += 1, R2590 += 1 };
  s5 -> s5 [0, 65535] { R2640 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2572 && R2 = R2640 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2553 = 0 && R2554 = R2572 && R2555 = 0 && R2556 = R2572 && R2557 = 0 && R2558 = R2572 && R2559 = 0 && R2560 = R2572 && R2561 = 0 && R2562 = R2572 && R2563 = 0 && R2564 = R2572 && R2565 = 0 && R2566 = R2572 && R2567 = 0 && R2568 = R2572 && R2569 = 0 && R2570 = R2572 && R2571 = 0 && R2575 = 0 && R2576 = 0 && R2583 = 0 && R2584 = 0 && R2587 = 0 && R2588 = 0 && R2591 = 10 && R2592 = R2640 && R2593 = 10 && R2594 = R2640 && R2595 = 10 && R2596 = R2640 && R2597 = 10 && R2598 = R2640 && R2599 = 10 && R2600 = R2640 && R2601 = 10 && R2602 = R2640 && R2603 = 10 && R2604 = R2640 && R2605 = 10 && R2606 = R2640 && R2607 = 10 && R2608 = R2640 && R2609 = 10 && R2610 = R2640 && R2611 = 10 && R2612 = R2640 && R2613 = 10 && R2614 = R2640 && R2615 = 10 && R2616 = R2640 && R2617 = 10 && R2618 = R2640 && R2619 = 10 && R2620 = R2640 && R2621 = 10 && R2622 = R2640 && R2623 = 10 && R2624 = R2640 && R2625 = 10 && R2626 = R2640 && R2627 = 10 && R2628 = R2640 && R2629 = 10 && R2630 = R2640 && R2631 = 10 && R2632 = R2640 && R2633 = 10 && R2634 = R2640 && R2635 = 10 && R2636 = R2640 && R2637 = 10 && R2638 = R2640 && R2639 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2572 && 9 < R2640 && (R14 = 0 || (R2573 = 0 && R2574 = 0)) && (R14 = 0 || (R2577 = 0 && R2578 = 0)) && (R14 = 0 || (R2579 = 0 && R2580 = 0)) && (R14 = 0 || (R2581 = 0 && R2582 = 0)) && (R14 = 0 || (R2585 = 0 && R2586 = 0)) && (R14 = 0 || (R2589 = 0 && R2590 = 0)) && (R2358 + R2355 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R2358 + R2355 = 0 || (R2356 + R2353 = 0 && R2357 + R2354 = 0)) && (R2552 + R2549 = 0 || (R2550 + R2547 = 0 && R2551 + R2548 = 0));
// End of Parikh automata intersection problem
