// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R1477, R1478, R1479, R1480, R1481, R1482, R15, R16, R1671, R1672, R1673, R1674, R1675, R1676, R1677, R1678, R1679, R1680, R1681, R1682, R1683, R1684, R1685, R1686, R1687, R1688, R1689, R1690, R1691, R1692, R1693, R1694, R1695, R1696, R1697, R1698, R1699, R17, R1700, R1701, R1702, R1703, R1704, R1705, R1706, R1707, R1708, R1709, R1710, R1711, R1712, R1713, R1714, R1715, R1716, R1717, R1718, R1719, R1720, R1721, R1722, R1723, R1724, R1725, R1726, R1727, R1728, R1729, R1730, R1731, R1732, R1733, R1734, R1735, R1736, R1737, R1738, R1739, R1740, R1741, R1742, R1743, R1744, R1745, R1746, R1747, R1748, R1749, R1750, R1751, R1752, R1753, R1754, R1755, R1756, R1757, R1758, R1759, R1760, R1761, R1762, R1763, R1764, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1716 += 1 };
  s0 -> s0 [0, 65535] { R1715 += 1, R1716 += 1 };
  s0 -> s1 [45, 45] { R1716 += 1 };
  s0 -> s2 [46, 46] { R1716 += 1 };
  s0 -> s1 [48, 62] { R1716 += 1 };
  s0 -> s3 [65, 65] { R1716 += 1 };
  s0 -> s1 [66, 65535] { R1716 += 1 };
  s1 -> s1 [0, 43] { R1716 += 1 };
  s1 -> s1 [45, 45] { R1716 += 1 };
  s1 -> s2 [46, 46] { R1716 += 1 };
  s1 -> s1 [48, 62] { R1716 += 1 };
  s1 -> s3 [65, 65] { R1716 += 1 };
  s1 -> s1 [66, 65535] { R1716 += 1 };
  s2 -> s1 [0, 43] { R1716 += 1 };
  s2 -> s1 [45, 45] { R1716 += 1 };
  s2 -> s2 [46, 46] { R1716 += 1 };
  s2 -> s1 [48, 62] { R1716 += 1 };
  s2 -> s3 [65, 65] { R1716 += 1 };
  s2 -> s1 [66, 114] { R1716 += 1 };
  s2 -> s8 [115, 115] { R1716 += 1 };
  s2 -> s1 [116, 65535] { R1716 += 1 };
  s3 -> s3 [0, 43] { R1716 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1716 += 1 };
  s3 -> s4 [46, 46] { R1716 += 1 };
  s3 -> s3 [48, 62] { R1716 += 1 };
  s3 -> s3 [65, 65535] { R1716 += 1 };
  s4 -> s3 [0, 43] { R1716 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1716 += 1 };
  s4 -> s4 [46, 46] { R1716 += 1 };
  s4 -> s3 [48, 62] { R1716 += 1 };
  s4 -> s3 [65, 114] { R1716 += 1 };
  s4 -> s5 [115, 115] { R1716 += 1 };
  s4 -> s3 [116, 65535] { R1716 += 1 };
  s5 -> s3 [0, 43] { R1716 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1716 += 1 };
  s5 -> s4 [46, 46] { R1716 += 1 };
  s5 -> s3 [48, 62] { R1716 += 1 };
  s5 -> s3 [65, 110] { R1716 += 1 };
  s5 -> s6 [111, 111] { R1716 += 1 };
  s5 -> s3 [112, 65535] { R1716 += 1 };
  s6 -> s3 [0, 43] { R1716 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1716 += 1 };
  s6 -> s4 [46, 46] { R1716 += 1 };
  s6 -> s3 [48, 62] { R1716 += 1 };
  s6 -> s3 [65, 98] { R1716 += 1 };
  s6 -> s7 [99, 99] { R1716 += 1 };
  s6 -> s3 [100, 65535] { R1716 += 1 };
  s7 -> s3 [0, 43] { R1716 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1716 += 1 };
  s7 -> s4 [46, 46] { R1716 += 1 };
  s7 -> s3 [48, 62] { R1716 += 1 };
  s7 -> s3 [65, 106] { R1716 += 1 };
  s7 -> s3 [108, 65535] { R1716 += 1 };
  s8 -> s1 [0, 43] { R1716 += 1 };
  s8 -> s1 [45, 45] { R1716 += 1 };
  s8 -> s2 [46, 46] { R1716 += 1 };
  s8 -> s1 [48, 62] { R1716 += 1 };
  s8 -> s3 [65, 65] { R1716 += 1 };
  s8 -> s1 [66, 110] { R1716 += 1 };
  s8 -> s9 [111, 111] { R1716 += 1 };
  s8 -> s1 [112, 65535] { R1716 += 1 };
  s9 -> s1 [0, 43] { R1716 += 1 };
  s9 -> s1 [45, 45] { R1716 += 1 };
  s9 -> s2 [46, 46] { R1716 += 1 };
  s9 -> s1 [48, 62] { R1716 += 1 };
  s9 -> s3 [65, 65] { R1716 += 1 };
  s9 -> s1 [66, 98] { R1716 += 1 };
  s9 -> s10 [99, 99] { R1716 += 1 };
  s9 -> s1 [100, 65535] { R1716 += 1 };
  s10 -> s1 [0, 43] { R1716 += 1 };
  s10 -> s1 [45, 45] { R1716 += 1 };
  s10 -> s2 [46, 46] { R1716 += 1 };
  s10 -> s1 [48, 62] { R1716 += 1 };
  s10 -> s3 [65, 65] { R1716 += 1 };
  s10 -> s1 [66, 106] { R1716 += 1 };
  s10 -> s1 [108, 65535] { R1716 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1718 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1717 += 1, R1718 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1718 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1720 += 1 };
  s0 -> s2 [0, 65535] { R1720 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1719 += 1, R1720 += 1 };
  s0 -> s3 [58, 58] { R1720 += 1 };
  s0 -> s1 [59, 65535] { R1720 += 1 };
  s1 -> s1 [0, 57] { R1720 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1720 += 1 };
  s1 -> s1 [59, 65535] { R1720 += 1 };
  s2 -> s1 [0, 57] { R1720 += 1 };
  s2 -> s2 [0, 65535] { R1720 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R1720 += 1 };
  s2 -> s1 [59, 65535] { R1720 += 1 };
  s3 -> s3 [0, 65535] { R1720 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1722 += 1 };
  s0 -> s0 [0, 65535] { R1721 += 1, R1722 += 1 };
  s0 -> s2 [0, 65535] { R1722 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1722 += 1 };
  s0 -> s1 [66, 65535] { R1722 += 1 };
  s1 -> s1 [0, 64] { R1722 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1722 += 1 };
  s1 -> s1 [66, 65535] { R1722 += 1 };
  s2 -> s1 [0, 64] { R1722 += 1 };
  s2 -> s2 [0, 65535] { R1722 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1722 += 1 };
  s2 -> s1 [66, 65535] { R1722 += 1 };
  s3 -> s3 [0, 65535] { R1722 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1724 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R1724 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1723 += 1, R1724 += 1 };
  s0 -> s3 [91, 91] { R1724 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1724 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R1724 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1724 += 1 };
  s2 -> s1 [0, 90] { R1724 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R1724 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R1724 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1724 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1724 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1724 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1725 += 1, R1726 += 1 };
  s0 -> s1 [0, 65535] { R1726 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1726 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R1726 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R1726 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1726 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1726 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1726 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1728 += 1, R1678 += 1 };
  s0 -> s2 [0, 65535] { R1728 += 1, R1677 += 1, R1678 += 1 };
  s0 -> s0 [0, 65535] { R1727 += 1, R1728 += 1 };
  s0 -> s1 [66, 65535] { R1728 += 1, R1678 += 1 };
  s1 -> s1 [0, 64] { R1728 += 1, R1678 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1728 += 1 };
  s1 -> s1 [66, 65535] { R1728 += 1, R1678 += 1 };
  s2 -> s1 [0, 64] { R1728 += 1, R1678 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1728 += 1, R1677 += 1, R1678 += 1 };
  s2 -> s1 [66, 65535] { R1728 += 1, R1678 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1730 += 1, R1679 += 1, R1680 += 1 };
  s0 -> s2 [0, 65535] { R1730 += 1, R1680 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R1729 += 1, R1730 += 1 };
  s1 -> s1 [0, 65535] { R1730 += 1, R1679 += 1, R1680 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1730 += 1, R1680 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R1730 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1730 += 1, R1680 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R1730 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1732 += 1, R1682 += 1 };
  s0 -> s0 [0, 65535] { R1731 += 1, R1732 += 1 };
  s0 -> s2 [0, 65535] { R1732 += 1, R1681 += 1, R1682 += 1 };
  s0 -> s3 [80, 80] { R1732 += 1, R1682 += 1 };
  s0 -> s1 [81, 65535] { R1732 += 1, R1682 += 1 };
  s1 -> s1 [0, 65] { R1732 += 1, R1682 += 1 };
  s1 -> s3 [80, 80] { R1732 += 1, R1682 += 1 };
  s1 -> s1 [81, 65535] { R1732 += 1, R1682 += 1 };
  s2 -> s1 [0, 65] { R1732 += 1, R1682 += 1 };
  s2 -> s2 [0, 65535] { R1732 += 1, R1681 += 1, R1682 += 1 };
  s2 -> s3 [80, 80] { R1732 += 1, R1682 += 1 };
  s2 -> s1 [81, 65535] { R1732 += 1, R1682 += 1 };
  s3 -> s3 [0, 65] { R1732 += 1, R1682 += 1 };
  s3 -> s3 [0, 65535] { R1732 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [80, 65535] { R1732 += 1, R1682 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1734 += 1, R1683 += 1, R1684 += 1 };
  s0 -> s0 [0, 65535] { R1733 += 1, R1734 += 1 };
  s0 -> s2 [0, 65535] { R1734 += 1, R1684 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R1734 += 1, R1683 += 1, R1684 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1734 += 1, R1684 += 1, R26 += 1 };
  s2 -> s3 [0, 65535] { R1734 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1734 += 1, R1684 += 1, R26 += 1 };
  s3 -> s3 [0, 65535] { R1734 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R1736 += 1, R1686 += 1 };
  s0 -> s2 [0, 65535] { R1736 += 1, R1685 += 1, R1686 += 1 };
  s0 -> s3 [0, 65535] { R1736 += 1, R1686 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1735 += 1, R1736 += 1 };
  s0 -> s1 [81, 65535] { R1736 += 1, R1686 += 1 };
  s1 -> s1 [0, 79] { R1736 += 1, R1686 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1736 += 1 };
  s1 -> s1 [81, 65535] { R1736 += 1, R1686 += 1 };
  s2 -> s1 [0, 79] { R1736 += 1, R1686 += 1 };
  s2 -> s2 [0, 65535] { R1736 += 1, R1685 += 1, R1686 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1736 += 1, R1686 += 1, R28 += 1 };
  s2 -> s1 [81, 65535] { R1736 += 1, R1686 += 1 };
  s3 -> s1 [0, 79] { R1736 += 1, R1686 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1736 += 1 };
  s3 -> s3 [0, 65535] { R1736 += 1, R1686 += 1, R28 += 1 };
  s3 -> s1 [81, 65535] { R1736 += 1, R1686 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1736 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R1738 += 1, R1688 += 1, R900 += 1 };
  s0 -> s0 [0, 65535] { R1737 += 1, R1738 += 1 };
  s0 -> s1 [0, 65535] { R1738 += 1, R1688 += 1 };
  s0 -> s2 [0, 65535] { R1738 += 1, R1687 += 1, R1688 += 1 };
  s0 -> s1 [81, 65535] { R1738 += 1, R1688 += 1, R900 += 1 };
  s1 -> s1 [0, 79] { R1738 += 1, R1688 += 1, R900 += 1 };
  s1 -> s4 [0, 65535] { R1738 += 1 };
  s1 -> s1 [0, 65535] { R1738 += 1, R1688 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1738 += 1, R1688 += 1, R900 += 1 };
  s2 -> s1 [0, 79] { R1738 += 1, R1688 += 1, R900 += 1 };
  s2 -> s1 [0, 65535] { R1738 += 1, R1688 += 1 };
  s2 -> s2 [0, 65535] { R1738 += 1, R1687 += 1, R1688 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R1738 += 1, R1688 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1738 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1740 += 1, R1689 += 1, R1690 += 1 };
  s0 -> s0 [0, 65535] { R1739 += 1, R1740 += 1 };
  s0 -> s2 [0, 65535] { R1740 += 1, R1690 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1740 += 1, R1689 += 1, R1690 += 1 };
  s1 -> s2 [0, 65535] { R1740 += 1, R1690 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1740 += 1 };
  s2 -> s2 [0, 65535] { R1740 += 1, R1690 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1740 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1742 += 1, R1691 += 1, R1692 += 1 };
  s0 -> s0 [0, 65535] { R1741 += 1, R1742 += 1 };
  s0 -> s2 [0, 65535] { R1742 += 1, R1692 += 1 };
  s1 -> s1 [0, 65535] { R1742 += 1, R1691 += 1, R1692 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1742 += 1, R1692 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1742 += 1 };
  s2 -> s2 [0, 65535] { R1742 += 1, R1692 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1742 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R1743 += 1, R1744 += 1 };
  s0 -> s1 [0, 65535] { R1744 += 1, R1693 += 1, R1694 += 1 };
  s0 -> s2 [0, 65535] { R1744 += 1, R1694 += 1 };
  s1 -> s1 [0, 65535] { R1744 += 1, R1693 += 1, R1694 += 1 };
  s1 -> s2 [0, 65535] { R1744 += 1, R1694 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1744 += 1 };
  s2 -> s2 [0, 65535] { R1744 += 1, R1694 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1744 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1746 += 1, R1695 += 1, R1696 += 1 };
  s0 -> s0 [0, 65535] { R1745 += 1, R1746 += 1 };
  s0 -> s2 [0, 65535] { R1746 += 1, R1696 += 1 };
  s1 -> s1 [0, 65535] { R1746 += 1, R1695 += 1, R1696 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1746 += 1, R1696 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1746 += 1, R1696 += 1 };
  s2 -> s4 [0, 65535] { R1746 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1746 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1748 += 1, R1698 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1747 += 1, R1748 += 1 };
  s0 -> s2 [0, 65535] { R1748 += 1, R1697 += 1, R1698 += 1 };
  s1 -> s1 [0, 65535] { R1748 += 1, R1698 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1748 += 1 };
  s2 -> s1 [0, 65535] { R1748 += 1, R1698 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1748 += 1, R1697 += 1, R1698 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1748 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1750 += 1, R1700 += 1 };
  s0 -> s2 [0, 65535] { R1750 += 1, R1699 += 1, R1700 += 1 };
  s0 -> s0 [0, 65535] { R1749 += 1, R1750 += 1 };
  s0 -> s3 [65, 65] { R1750 += 1, R1700 += 1 };
  s0 -> s4 [65, 65] { R1750 += 1, R1700 += 1 };
  s0 -> s1 [81, 65535] { R1750 += 1, R1700 += 1 };
  s1 -> s1 [0, 64] { R1750 += 1, R1700 += 1 };
  s1 -> s1 [0, 65535] { R1750 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1750 += 1, R1700 += 1 };
  s1 -> s4 [65, 65] { R1750 += 1, R1700 += 1 };
  s1 -> s1 [81, 65535] { R1750 += 1, R1700 += 1 };
  s2 -> s1 [0, 64] { R1750 += 1, R1700 += 1 };
  s2 -> s2 [0, 65535] { R1750 += 1, R1699 += 1, R1700 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1750 += 1, R1700 += 1 };
  s2 -> s4 [65, 65] { R1750 += 1, R1700 += 1 };
  s2 -> s1 [81, 65535] { R1750 += 1, R1700 += 1 };
  s3 -> s3 [0, 65535] { R1750 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R1750 += 1, R1700 += 1 };
  s4 -> s4 [0, 65535] { R1750 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [81, 65535] { R1750 += 1, R1700 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1752 += 1, R1702 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1751 += 1, R1752 += 1 };
  s0 -> s2 [0, 65535] { R1752 += 1, R1701 += 1, R1702 += 1 };
  s0 -> s3 [65, 65] { R1752 += 1, R1702 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1752 += 1, R1702 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1752 += 1, R1702 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1752 += 1, R1702 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R1752 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1752 += 1, R1702 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1752 += 1, R1702 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1752 += 1, R1702 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1752 += 1, R1702 += 1, R25 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1752 += 1, R1701 += 1, R1702 += 1 };
  s2 -> s3 [65, 65] { R1752 += 1, R1702 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1752 += 1, R1702 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1752 += 1, R1702 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R1752 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1752 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1752 += 1, R1702 += 1, R25 += 1 };
  s5 -> s5 [0, 65535] { R1752 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1754 += 1, R1704 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1753 += 1, R1754 += 1 };
  s0 -> s2 [0, 65535] { R1754 += 1, R1703 += 1, R1704 += 1 };
  s0 -> s3 [65, 65] { R1754 += 1, R1704 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1754 += 1, R1704 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1754 += 1, R1704 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1754 += 1, R1704 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1754 += 1 };
  s1 -> s3 [65, 65] { R1754 += 1, R1704 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1754 += 1, R1704 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1754 += 1, R1704 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1754 += 1, R1704 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R1754 += 1, R1703 += 1, R1704 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1754 += 1, R1704 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1754 += 1, R1704 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1754 += 1, R1704 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R1754 += 1, R1704 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1754 += 1 };
  s4 -> s4 [0, 65535] { R1754 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1754 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1756 += 1, R1706 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R1756 += 1, R1705 += 1, R1706 += 1 };
  s0 -> s0 [0, 65535] { R1755 += 1, R1756 += 1 };
  s0 -> s4 [65, 65] { R1756 += 1, R1706 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1756 += 1, R1706 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [66, 79] { R1756 += 1, R1706 += 1, R898 += 1 };
  s0 -> s2 [66, 65535] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [81, 65535] { R1756 += 1, R1706 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1756 += 1, R1706 += 1, R898 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1756 += 1 };
  s1 -> s4 [65, 65] { R1756 += 1, R1706 += 1 };
  s1 -> s6 [65, 65] { R1756 += 1, R1706 += 1 };
  s1 -> s1 [66, 79] { R1756 += 1, R1706 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1756 += 1, R1706 += 1 };
  s1 -> s1 [81, 65535] { R1756 += 1, R1706 += 1, R898 += 1 };
  s2 -> s1 [0, 64] { R1756 += 1, R1706 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [65, 65] { R1756 += 1, R1706 += 1, R898 += 1 };
  s2 -> s5 [65, 65] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s2 -> s6 [65, 65] { R1756 += 1, R1706 += 1, R898 += 1 };
  s2 -> s7 [65, 65] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [66, 79] { R1756 += 1, R1706 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [81, 65535] { R1756 += 1, R1706 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1756 += 1, R1706 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1756 += 1, R1705 += 1, R1706 += 1 };
  s3 -> s4 [65, 65] { R1756 += 1, R1706 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1756 += 1, R1706 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [66, 79] { R1756 += 1, R1706 += 1, R898 += 1 };
  s3 -> s2 [66, 65535] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [81, 65535] { R1756 += 1, R1706 += 1, R898 += 1 };
  s4 -> s4 [0, 79] { R1756 += 1, R1706 += 1, R898 += 1 };
  s4 -> s9 [0, 65535] { R1756 += 1 };
  s4 -> s4 [0, 65535] { R1756 += 1, R1706 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R1756 += 1, R1706 += 1, R898 += 1 };
  s5 -> s4 [0, 79] { R1756 += 1, R1706 += 1, R898 += 1 };
  s5 -> s5 [0, 65535] { R1756 += 1, R1706 += 1, R897 += 1, R898 += 1 };
  s5 -> s4 [81, 65535] { R1756 += 1, R1706 += 1, R898 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1756 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1756 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s2 [0, 64] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s0 [0, 65535] { R1757 += 1, R1758 += 1 };
  s0 -> s3 [0, 65535] { R1758 += 1, R1707 += 1, R1708 += 1 };
  s0 -> s4 [65, 65] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s5 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s6 [65, 65] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s7 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s1 [66, 65535] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s2 [66, 65535] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s1 [0, 64] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s2 [0, 64] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s4 [65, 65] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s5 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s6 [65, 65] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s7 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s1 [66, 65535] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s2 [66, 65535] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s2 [0, 64] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s11 [0, 64] { R1758 += 1, R1708 += 1 };
  s2 -> s12 [65, 65] { R1758 += 1, R1708 += 1 };
  s2 -> s8 [65, 65] { R1758 += 1, R1708 += 1 };
  s2 -> s5 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s7 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s2 [66, 65535] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s11 [66, 65535] { R1758 += 1, R1708 += 1 };
  s3 -> s1 [0, 64] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s2 [0, 64] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s3 [0, 65535] { R1758 += 1, R1707 += 1, R1708 += 1 };
  s3 -> s4 [65, 65] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s5 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s6 [65, 65] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s7 [65, 65] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s1 [66, 65535] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s2 [66, 65535] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s6 -> s6 [0, 65535] { R1758 += 1, R1708 += 1, R1477 += 1, R1478 += 1 };
  s6 -> s7 [0, 65535] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s7 -> s8 [0, 65535] { R1758 += 1, R1708 += 1 };
  s7 -> s7 [0, 65535] { R1758 += 1, R1708 += 1, R1478 += 1, R1479 += 1 };
  s8 -> s8 [0, 65535] { R1758 += 1, R1708 += 1 };
  s8 -> s9 [0, 65535] { R1758 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R1758 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R1758 += 1, R1708 += 1 };
  s11 -> s11 [0, 65535] { R1758 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R1758 += 1, R1708 += 1 };
  s11 -> s8 [65, 65] { R1758 += 1, R1708 += 1 };
  s11 -> s11 [66, 65535] { R1758 += 1, R1708 += 1 };
  s12 -> s12 [0, 65535] { R1758 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1760 += 1, R1710 += 1 };
  s0 -> s0 [0, 65535] { R1759 += 1, R1760 += 1 };
  s0 -> s2 [0, 65535] { R1760 += 1, R1709 += 1, R1710 += 1 };
  s0 -> s3 [65, 65] { R1760 += 1, R1710 += 1 };
  s0 -> s4 [65, 65] { R1760 += 1, R1710 += 1 };
  s0 -> s1 [66, 65535] { R1760 += 1, R1710 += 1 };
  s1 -> s1 [0, 64] { R1760 += 1, R1710 += 1 };
  s1 -> s1 [0, 65535] { R1760 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1760 += 1, R1710 += 1 };
  s1 -> s4 [65, 65] { R1760 += 1, R1710 += 1 };
  s1 -> s1 [66, 65535] { R1760 += 1, R1710 += 1 };
  s2 -> s1 [0, 64] { R1760 += 1, R1710 += 1 };
  s2 -> s2 [0, 65535] { R1760 += 1, R1709 += 1, R1710 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1760 += 1, R1710 += 1 };
  s2 -> s4 [65, 65] { R1760 += 1, R1710 += 1 };
  s2 -> s1 [66, 65535] { R1760 += 1, R1710 += 1 };
  s3 -> s3 [0, 65535] { R1760 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1760 += 1 };
  s4 -> s4 [0, 65535] { R1760 += 1, R1710 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1760 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s0 -> s2 [0, 64] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s3 [0, 65535] { R1762 += 1, R1711 += 1, R1712 += 1 };
  s0 -> s0 [0, 65535] { R1761 += 1, R1762 += 1 };
  s0 -> s4 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s5 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s0 -> s6 [65, 65] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s0 -> s7 [65, 65] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s0 -> s1 [66, 65535] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s0 -> s2 [66, 65535] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s1 -> s1 [0, 64] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s1 -> s2 [0, 64] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s1 -> s4 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s1 -> s5 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s1 -> s6 [65, 65] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s1 -> s7 [65, 65] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s1 -> s1 [66, 65535] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s1 -> s2 [66, 65535] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s11 [0, 64] { R1762 += 1, R1712 += 1 };
  s2 -> s2 [0, 64] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s8 [65, 65] { R1762 += 1, R1712 += 1 };
  s2 -> s4 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s5 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s2 -> s12 [65, 65] { R1762 += 1, R1712 += 1 };
  s2 -> s11 [66, 65535] { R1762 += 1, R1712 += 1 };
  s2 -> s2 [66, 65535] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s1 [0, 64] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s3 -> s2 [0, 64] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s3 [0, 65535] { R1762 += 1, R1711 += 1, R1712 += 1 };
  s3 -> s4 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s5 [65, 65] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s3 -> s6 [65, 65] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s3 -> s7 [65, 65] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s3 -> s1 [66, 65535] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s3 -> s2 [66, 65535] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s5 -> s8 [0, 65535] { R1762 += 1, R1712 += 1 };
  s5 -> s5 [0, 65535] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s7 -> s5 [0, 65535] { R1762 += 1, R1712 += 1, R1672 += 1, R1673 += 1 };
  s7 -> s7 [0, 65535] { R1762 += 1, R1712 += 1, R1671 += 1, R1672 += 1 };
  s8 -> s8 [0, 65535] { R1762 += 1, R1712 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R1762 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1762 += 1 };
  s11 -> s11 [0, 64] { R1762 += 1, R1712 += 1 };
  s11 -> s11 [0, 65535] { R1762 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [65, 65] { R1762 += 1, R1712 += 1 };
  s11 -> s12 [65, 65] { R1762 += 1, R1712 += 1 };
  s11 -> s11 [66, 65535] { R1762 += 1, R1712 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1762 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1764 += 1, R1714 += 1 };
  s0 -> s0 [0, 65535] { R1763 += 1, R1764 += 1 };
  s0 -> s2 [0, 65535] { R1764 += 1, R1713 += 1, R1714 += 1 };
  s0 -> s3 [65, 65] { R1764 += 1, R1714 += 1 };
  s0 -> s4 [65, 65] { R1764 += 1, R1714 += 1 };
  s0 -> s1 [66, 65535] { R1764 += 1, R1714 += 1 };
  s1 -> s1 [0, 64] { R1764 += 1, R1714 += 1 };
  s1 -> s1 [0, 65535] { R1764 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1764 += 1, R1714 += 1 };
  s1 -> s4 [65, 65] { R1764 += 1, R1714 += 1 };
  s1 -> s1 [66, 65535] { R1764 += 1, R1714 += 1 };
  s2 -> s1 [0, 64] { R1764 += 1, R1714 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1764 += 1, R1713 += 1, R1714 += 1 };
  s2 -> s3 [65, 65] { R1764 += 1, R1714 += 1 };
  s2 -> s4 [65, 65] { R1764 += 1, R1714 += 1 };
  s2 -> s1 [66, 65535] { R1764 += 1, R1714 += 1 };
  s3 -> s6 [0, 65535] { R1764 += 1 };
  s3 -> s3 [0, 65535] { R1764 += 1, R1714 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1764 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1764 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1696 && R2 = R1764 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1677 = 0 && R1678 = R1696 && R1679 = 0 && R1680 = R1696 && R1681 = 0 && R1682 = R1696 && R1683 = 0 && R1684 = R1696 && R1685 = 0 && R1686 = R1696 && R1687 = 0 && R1688 = R1696 && R1689 = 0 && R1690 = R1696 && R1691 = 0 && R1692 = R1696 && R1693 = 0 && R1694 = R1696 && R1695 = 0 && R1705 = 0 && R1706 = 0 && R1707 = 0 && R1708 = 0 && R1711 = 0 && R1712 = 0 && R1715 = 10 && R1716 = R1764 && R1717 = 10 && R1718 = R1764 && R1719 = 10 && R1720 = R1764 && R1721 = 10 && R1722 = R1764 && R1723 = 10 && R1724 = R1764 && R1725 = 10 && R1726 = R1764 && R1727 = 10 && R1728 = R1764 && R1729 = 10 && R1730 = R1764 && R1731 = 10 && R1732 = R1764 && R1733 = 10 && R1734 = R1764 && R1735 = 10 && R1736 = R1764 && R1737 = 10 && R1738 = R1764 && R1739 = 10 && R1740 = R1764 && R1741 = 10 && R1742 = R1764 && R1743 = 10 && R1744 = R1764 && R1745 = 10 && R1746 = R1764 && R1747 = 10 && R1748 = R1764 && R1749 = 10 && R1750 = R1764 && R1751 = 10 && R1752 = R1764 && R1753 = 10 && R1754 = R1764 && R1755 = 10 && R1756 = R1764 && R1757 = 10 && R1758 = R1764 && R1759 = 10 && R1760 = R1764 && R1761 = 10 && R1762 = R1764 && R1763 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1696 && 9 < R1764 && (R14 = 0 || (R1697 = 0 && R1698 = 0)) && (R14 = 0 || (R1699 = 0 && R1700 = 0)) && (R14 = 0 || (R1701 = 0 && R1702 = 0)) && (R14 = 0 || (R1703 = 0 && R1704 = 0)) && (R14 = 0 || (R1709 = 0 && R1710 = 0)) && (R14 = 0 || (R1713 = 0 && R1714 = 0)) && (R1482 + R1479 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R1482 + R1479 = 0 || (R1480 + R1477 = 0 && R1481 + R1478 = 0)) && (R1676 + R1673 = 0 || (R1674 + R1671 = 0 && R1675 + R1672 = 0));
// End of Parikh automata intersection problem
