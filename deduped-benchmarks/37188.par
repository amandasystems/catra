// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2745, R2746, R2747, R2748, R2749, R2750, R2751, R2752, R2753, R2754, R2755, R2756, R2757, R2758, R2759, R2760, R2761, R2762, R2763, R2764, R2765, R2766, R2767, R2768, R2769, R2770, R2771, R2772, R2773, R2774, R2775, R2776, R2777, R2778, R2779, R2780, R2781, R2782, R2783, R2784, R2785, R2786, R2787, R2788, R2789, R2790, R2791, R2792, R2793, R2794, R2795, R2796, R2797, R2798, R2799, R2800, R2801, R2802, R2803, R2804, R2805, R2806, R2807, R2808, R2809, R2810, R2811, R2812, R2813, R2814, R2815, R2816, R2817, R2818, R2819, R2820, R2821, R2822, R2823, R2824, R2825, R2826, R2827, R2828, R2829, R2830, R2831, R2832, R2833, R2834, R2835, R2836, R2837, R2838, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2790 += 1 };
  s0 -> s0 [0, 65535] { R2789 += 1, R2790 += 1 };
  s0 -> s1 [45, 45] { R2790 += 1 };
  s0 -> s2 [46, 46] { R2790 += 1 };
  s0 -> s1 [48, 62] { R2790 += 1 };
  s0 -> s3 [65, 65] { R2790 += 1 };
  s0 -> s1 [66, 65535] { R2790 += 1 };
  s1 -> s1 [0, 43] { R2790 += 1 };
  s1 -> s1 [45, 45] { R2790 += 1 };
  s1 -> s2 [46, 46] { R2790 += 1 };
  s1 -> s1 [48, 62] { R2790 += 1 };
  s1 -> s3 [65, 65] { R2790 += 1 };
  s1 -> s1 [66, 65535] { R2790 += 1 };
  s2 -> s1 [0, 43] { R2790 += 1 };
  s2 -> s1 [45, 45] { R2790 += 1 };
  s2 -> s2 [46, 46] { R2790 += 1 };
  s2 -> s1 [48, 62] { R2790 += 1 };
  s2 -> s3 [65, 65] { R2790 += 1 };
  s2 -> s1 [66, 114] { R2790 += 1 };
  s2 -> s8 [115, 115] { R2790 += 1 };
  s2 -> s1 [116, 65535] { R2790 += 1 };
  s3 -> s3 [0, 43] { R2790 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2790 += 1 };
  s3 -> s4 [46, 46] { R2790 += 1 };
  s3 -> s3 [48, 62] { R2790 += 1 };
  s3 -> s3 [65, 65535] { R2790 += 1 };
  s4 -> s3 [0, 43] { R2790 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2790 += 1 };
  s4 -> s4 [46, 46] { R2790 += 1 };
  s4 -> s3 [48, 62] { R2790 += 1 };
  s4 -> s3 [65, 114] { R2790 += 1 };
  s4 -> s5 [115, 115] { R2790 += 1 };
  s4 -> s3 [116, 65535] { R2790 += 1 };
  s5 -> s3 [0, 43] { R2790 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2790 += 1 };
  s5 -> s4 [46, 46] { R2790 += 1 };
  s5 -> s3 [48, 62] { R2790 += 1 };
  s5 -> s3 [65, 110] { R2790 += 1 };
  s5 -> s6 [111, 111] { R2790 += 1 };
  s5 -> s3 [112, 65535] { R2790 += 1 };
  s6 -> s3 [0, 43] { R2790 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2790 += 1 };
  s6 -> s4 [46, 46] { R2790 += 1 };
  s6 -> s3 [48, 62] { R2790 += 1 };
  s6 -> s3 [65, 98] { R2790 += 1 };
  s6 -> s7 [99, 99] { R2790 += 1 };
  s6 -> s3 [100, 65535] { R2790 += 1 };
  s7 -> s3 [0, 43] { R2790 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2790 += 1 };
  s7 -> s4 [46, 46] { R2790 += 1 };
  s7 -> s3 [48, 62] { R2790 += 1 };
  s7 -> s3 [65, 106] { R2790 += 1 };
  s7 -> s3 [108, 65535] { R2790 += 1 };
  s8 -> s1 [0, 43] { R2790 += 1 };
  s8 -> s1 [45, 45] { R2790 += 1 };
  s8 -> s2 [46, 46] { R2790 += 1 };
  s8 -> s1 [48, 62] { R2790 += 1 };
  s8 -> s3 [65, 65] { R2790 += 1 };
  s8 -> s1 [66, 110] { R2790 += 1 };
  s8 -> s9 [111, 111] { R2790 += 1 };
  s8 -> s1 [112, 65535] { R2790 += 1 };
  s9 -> s1 [0, 43] { R2790 += 1 };
  s9 -> s1 [45, 45] { R2790 += 1 };
  s9 -> s2 [46, 46] { R2790 += 1 };
  s9 -> s1 [48, 62] { R2790 += 1 };
  s9 -> s3 [65, 65] { R2790 += 1 };
  s9 -> s1 [66, 98] { R2790 += 1 };
  s9 -> s10 [99, 99] { R2790 += 1 };
  s9 -> s1 [100, 65535] { R2790 += 1 };
  s10 -> s1 [0, 43] { R2790 += 1 };
  s10 -> s1 [45, 45] { R2790 += 1 };
  s10 -> s2 [46, 46] { R2790 += 1 };
  s10 -> s1 [48, 62] { R2790 += 1 };
  s10 -> s3 [65, 65] { R2790 += 1 };
  s10 -> s1 [66, 106] { R2790 += 1 };
  s10 -> s1 [108, 65535] { R2790 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2791 += 1, R2792 += 1 };
  s0 -> s1 [0, 65535] { R2792 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2792 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2794 += 1 };
  s0 -> s2 [0, 65535] { R2794 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2793 += 1, R2794 += 1 };
  s0 -> s3 [58, 58] { R2794 += 1 };
  s0 -> s1 [59, 65535] { R2794 += 1 };
  s1 -> s1 [0, 57] { R2794 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2794 += 1 };
  s1 -> s1 [59, 65535] { R2794 += 1 };
  s2 -> s1 [0, 57] { R2794 += 1 };
  s2 -> s2 [0, 65535] { R2794 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2794 += 1 };
  s2 -> s1 [59, 65535] { R2794 += 1 };
  s3 -> s3 [0, 65535] { R2794 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2796 += 1 };
  s0 -> s2 [0, 65535] { R2796 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2795 += 1, R2796 += 1 };
  s0 -> s3 [65, 65] { R2796 += 1 };
  s0 -> s1 [66, 65535] { R2796 += 1 };
  s1 -> s1 [0, 64] { R2796 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2796 += 1 };
  s1 -> s1 [66, 65535] { R2796 += 1 };
  s2 -> s1 [0, 64] { R2796 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2796 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2796 += 1 };
  s2 -> s1 [66, 65535] { R2796 += 1 };
  s3 -> s3 [0, 65535] { R2796 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2798 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R2798 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2797 += 1, R2798 += 1 };
  s0 -> s3 [91, 91] { R2798 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2798 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R2798 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2798 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2798 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R2798 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2798 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2798 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2798 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2798 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R2799 += 1, R2800 += 1 };
  s0 -> s1 [0, 65535] { R2800 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R2800 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2800 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R2800 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2800 += 1 };
  s2 -> s2 [0, 65535] { R2800 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2800 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2802 += 1, R2752 += 1 };
  s0 -> s0 [0, 65535] { R2801 += 1, R2802 += 1 };
  s0 -> s2 [0, 65535] { R2802 += 1, R2751 += 1, R2752 += 1 };
  s0 -> s1 [66, 65535] { R2802 += 1, R2752 += 1 };
  s1 -> s1 [0, 64] { R2802 += 1, R2752 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2802 += 1 };
  s1 -> s1 [66, 65535] { R2802 += 1, R2752 += 1 };
  s2 -> s1 [0, 64] { R2802 += 1, R2752 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2802 += 1, R2751 += 1, R2752 += 1 };
  s2 -> s1 [66, 65535] { R2802 += 1, R2752 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2804 += 1, R2753 += 1, R2754 += 1 };
  s0 -> s2 [0, 65535] { R2804 += 1, R2754 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R2803 += 1, R2804 += 1 };
  s1 -> s1 [0, 65535] { R2804 += 1, R2753 += 1, R2754 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2804 += 1, R2754 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2804 += 1, R2754 += 1, R13 += 1 };
  s2 -> s4 [0, 65535] { R2804 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2804 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2806 += 1, R2756 += 1 };
  s0 -> s2 [0, 65535] { R2806 += 1, R2755 += 1, R2756 += 1 };
  s0 -> s0 [0, 65535] { R2805 += 1, R2806 += 1 };
  s0 -> s1 [80, 65535] { R2806 += 1, R2756 += 1 };
  s1 -> s1 [0, 65] { R2806 += 1, R2756 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2806 += 1 };
  s1 -> s1 [80, 65535] { R2806 += 1, R2756 += 1 };
  s2 -> s1 [0, 65] { R2806 += 1, R2756 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2806 += 1, R2755 += 1, R2756 += 1 };
  s2 -> s1 [80, 65535] { R2806 += 1, R2756 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R2807 += 1, R2808 += 1 };
  s0 -> s1 [0, 65535] { R2808 += 1, R2758 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R2808 += 1, R2757 += 1, R2758 += 1 };
  s1 -> s1 [0, 65535] { R2808 += 1, R2758 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R2808 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2808 += 1, R2758 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R2808 += 1, R2757 += 1, R2758 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2808 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R2810 += 1, R2760 += 1 };
  s0 -> s0 [0, 65535] { R2809 += 1, R2810 += 1 };
  s0 -> s2 [0, 65535] { R2810 += 1, R2759 += 1, R2760 += 1 };
  s0 -> s3 [0, 65535] { R2810 += 1, R2760 += 1, R1772 += 1 };
  s0 -> s1 [81, 65535] { R2810 += 1, R2760 += 1 };
  s1 -> s1 [0, 79] { R2810 += 1, R2760 += 1 };
  s1 -> s1 [0, 65535] { R2810 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R2810 += 1, R2760 += 1 };
  s2 -> s1 [0, 79] { R2810 += 1, R2760 += 1 };
  s2 -> s2 [0, 65535] { R2810 += 1, R2759 += 1, R2760 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2810 += 1, R2760 += 1, R1772 += 1 };
  s2 -> s1 [81, 65535] { R2810 += 1, R2760 += 1 };
  s3 -> s1 [0, 79] { R2810 += 1, R2760 += 1 };
  s3 -> s4 [0, 65535] { R2810 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2810 += 1, R2760 += 1, R1772 += 1 };
  s3 -> s1 [81, 65535] { R2810 += 1, R2760 += 1 };
  s4 -> s4 [0, 65535] { R2810 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R2812 += 1, R2762 += 1, R2644 += 1 };
  s0 -> s1 [0, 65535] { R2812 += 1, R2762 += 1 };
  s0 -> s0 [0, 65535] { R2811 += 1, R2812 += 1 };
  s0 -> s2 [0, 65535] { R2812 += 1, R2761 += 1, R2762 += 1 };
  s0 -> s1 [81, 65535] { R2812 += 1, R2762 += 1, R2644 += 1 };
  s1 -> s1 [0, 79] { R2812 += 1, R2762 += 1, R2644 += 1 };
  s1 -> s4 [0, 65535] { R2812 += 1 };
  s1 -> s1 [0, 65535] { R2812 += 1, R2762 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R2812 += 1, R2762 += 1, R2644 += 1 };
  s2 -> s1 [0, 79] { R2812 += 1, R2762 += 1, R2644 += 1 };
  s2 -> s1 [0, 65535] { R2812 += 1, R2762 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2812 += 1, R2761 += 1, R2762 += 1 };
  s2 -> s1 [81, 65535] { R2812 += 1, R2762 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2812 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R2813 += 1, R2814 += 1 };
  s0 -> s1 [0, 65535] { R2814 += 1, R2764 += 1, R2649 += 1, R2650 += 1 };
  s0 -> s2 [0, 65535] { R2814 += 1, R2763 += 1, R2764 += 1 };
  s0 -> s3 [0, 65535] { R2814 += 1, R2764 += 1, R2648 += 1, R2649 += 1 };
  s1 -> s4 [0, 65535] { R2814 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2814 += 1, R2764 += 1, R2649 += 1, R2650 += 1 };
  s1 -> s6 [0, 65535] { R2814 += 1, R2764 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2814 += 1, R2764 += 1, R2649 += 1, R2650 += 1 };
  s2 -> s2 [0, 65535] { R2814 += 1, R2763 += 1, R2764 += 1 };
  s2 -> s3 [0, 65535] { R2814 += 1, R2764 += 1, R2648 += 1, R2649 += 1 };
  s3 -> s4 [0, 65535] { R2814 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R2814 += 1, R2764 += 1, R2649 += 1, R2650 += 1 };
  s3 -> s3 [0, 65535] { R2814 += 1, R2764 += 1, R2648 += 1, R2649 += 1 };
  s4 -> s4 [0, 65535] { R2814 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2814 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2814 += 1, R2764 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2815 += 1, R2816 += 1 };
  s0 -> s1 [0, 65535] { R2816 += 1, R2765 += 1, R2766 += 1 };
  s0 -> s2 [0, 65535] { R2816 += 1, R2766 += 1 };
  s1 -> s1 [0, 65535] { R2816 += 1, R2765 += 1, R2766 += 1 };
  s1 -> s2 [0, 65535] { R2816 += 1, R2766 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2816 += 1 };
  s2 -> s2 [0, 65535] { R2816 += 1, R2766 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2816 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2818 += 1, R2767 += 1, R2768 += 1 };
  s0 -> s0 [0, 65535] { R2817 += 1, R2818 += 1 };
  s0 -> s2 [0, 65535] { R2818 += 1, R2768 += 1, R2749 += 1, R2750 += 1 };
  s0 -> s3 [0, 65535] { R2818 += 1, R2768 += 1 };
  s1 -> s1 [0, 65535] { R2818 += 1, R2767 += 1, R2768 += 1 };
  s1 -> s2 [0, 65535] { R2818 += 1, R2768 += 1, R2749 += 1, R2750 += 1 };
  s1 -> s3 [0, 65535] { R2818 += 1, R2768 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R2818 += 1 };
  s2 -> s2 [0, 65535] { R2818 += 1, R2768 += 1, R2749 += 1, R2750 += 1 };
  s2 -> s3 [0, 65535] { R2818 += 1, R2768 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R2818 += 1 };
  s3 -> s3 [0, 65535] { R2818 += 1, R2768 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2818 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2819 += 1, R2820 += 1 };
  s0 -> s1 [0, 65535] { R2820 += 1, R2769 += 1, R2770 += 1 };
  s0 -> s2 [0, 65535] { R2820 += 1, R2770 += 1 };
  s1 -> s1 [0, 65535] { R2820 += 1, R2769 += 1, R2770 += 1 };
  s1 -> s2 [0, 65535] { R2820 += 1, R2770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2820 += 1, R2770 += 1 };
  s2 -> s3 [0, 65535] { R2820 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2820 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R2821 += 1, R2822 += 1 };
  s0 -> s1 [0, 65535] { R2822 += 1, R2772 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R2822 += 1, R2771 += 1, R2772 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2822 += 1 };
  s1 -> s1 [0, 65535] { R2822 += 1, R2772 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2822 += 1, R2772 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R2822 += 1, R2771 += 1, R2772 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2822 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2824 += 1, R2774 += 1 };
  s0 -> s2 [0, 65535] { R2824 += 1, R2773 += 1, R2774 += 1 };
  s0 -> s0 [0, 65535] { R2823 += 1, R2824 += 1 };
  s0 -> s3 [65, 65] { R2824 += 1, R2774 += 1 };
  s0 -> s4 [65, 65] { R2824 += 1, R2774 += 1 };
  s0 -> s5 [80, 80] { R2824 += 1, R2774 += 1 };
  s0 -> s1 [81, 65535] { R2824 += 1, R2774 += 1 };
  s1 -> s1 [0, 64] { R2824 += 1, R2774 += 1 };
  s1 -> s3 [65, 65] { R2824 += 1, R2774 += 1 };
  s1 -> s4 [65, 65] { R2824 += 1, R2774 += 1 };
  s1 -> s5 [80, 80] { R2824 += 1, R2774 += 1 };
  s1 -> s1 [81, 65535] { R2824 += 1, R2774 += 1 };
  s2 -> s1 [0, 64] { R2824 += 1, R2774 += 1 };
  s2 -> s2 [0, 65535] { R2824 += 1, R2773 += 1, R2774 += 1 };
  s2 -> s3 [65, 65] { R2824 += 1, R2774 += 1 };
  s2 -> s4 [65, 65] { R2824 += 1, R2774 += 1 };
  s2 -> s5 [80, 80] { R2824 += 1, R2774 += 1 };
  s2 -> s1 [81, 65535] { R2824 += 1, R2774 += 1 };
  s3 -> s3 [0, 65] { R2824 += 1, R2774 += 1 };
  s3 -> s7 [80, 80] { R2824 += 1, R2774 += 1 };
  s3 -> s3 [81, 65535] { R2824 += 1, R2774 += 1 };
  s5 -> s5 [0, 64] { R2824 += 1, R2774 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2824 += 1 };
  s5 -> s7 [65, 65] { R2824 += 1, R2774 += 1 };
  s5 -> s8 [65, 65] { R2824 += 1, R2774 += 1 };
  s5 -> s5 [80, 65535] { R2824 += 1, R2774 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2824 += 1, R2774 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2824 += 1 };
  s7 -> s7 [80, 65535] { R2824 += 1, R2774 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2824 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R2825 += 1, R2826 += 1 };
  s0 -> s2 [0, 65535] { R2826 += 1, R2775 += 1, R2776 += 1 };
  s0 -> s3 [65, 65] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R2826 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2826 += 1, R2775 += 1, R2776 += 1 };
  s2 -> s3 [65, 65] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2826 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2826 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2826 += 1, R2776 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535] { R2826 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2828 += 1, R2777 += 1, R2778 += 1 };
  s0 -> s0 [0, 65535] { R2827 += 1, R2828 += 1 };
  s0 -> s3 [65, 65] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2828 += 1 };
  s1 -> s3 [65, 65] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R2828 += 1, R2777 += 1, R2778 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R2828 += 1, R2778 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2828 += 1 };
  s4 -> s4 [0, 65535] { R2828 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2828 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R2830 += 1, R2779 += 1, R2780 += 1 };
  s0 -> s0 [0, 65535] { R2829 += 1, R2830 += 1 };
  s0 -> s4 [65, 65] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [66, 79] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s0 -> s2 [66, 65535] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [81, 65535] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s1 -> s1 [0, 65535] { R2830 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R2830 += 1, R2780 += 1 };
  s1 -> s5 [65, 65] { R2830 += 1, R2780 += 1 };
  s1 -> s1 [66, 79] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R2830 += 1, R2780 += 1 };
  s1 -> s1 [81, 65535] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s2 -> s1 [0, 64] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s4 [65, 65] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s2 -> s5 [65, 65] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s2 -> s6 [65, 65] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s7 [65, 65] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [66, 79] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [81, 65535] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R2830 += 1, R2779 += 1, R2780 += 1 };
  s3 -> s4 [65, 65] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [66, 79] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s3 -> s2 [66, 65535] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [81, 65535] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R2830 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 79] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s5 -> s5 [0, 65535] { R2830 += 1, R2780 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R2830 += 1 };
  s5 -> s5 [81, 65535] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s6 -> s5 [0, 79] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s6 -> s6 [0, 65535] { R2830 += 1, R2780 += 1, R2641 += 1, R2642 += 1 };
  s6 -> s5 [81, 65535] { R2830 += 1, R2780 += 1, R2642 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2830 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s2 [0, 65535] { R2832 += 1, R2781 += 1, R2782 += 1 };
  s0 -> s0 [0, 65535] { R2831 += 1, R2832 += 1 };
  s0 -> s3 [65, 65] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s4 [65, 65] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s1 [66, 65535] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [0, 64] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [0, 65535] { R2832 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s4 [65, 65] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [66, 65535] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s1 [0, 64] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2832 += 1, R2781 += 1, R2782 += 1 };
  s2 -> s3 [65, 65] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s4 [65, 65] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s1 [66, 65535] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s3 -> s3 [0, 65535] { R2832 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2832 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2832 += 1, R2782 += 1, R2645 += 1, R2646 += 1 };
  s5 -> s5 [0, 65535] { R2832 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2834 += 1, R2784 += 1 };
  s0 -> s2 [0, 65535] { R2834 += 1, R2783 += 1, R2784 += 1 };
  s0 -> s0 [0, 65535] { R2833 += 1, R2834 += 1 };
  s0 -> s3 [65, 65] { R2834 += 1, R2784 += 1 };
  s0 -> s4 [65, 65] { R2834 += 1, R2784 += 1 };
  s0 -> s1 [66, 65535] { R2834 += 1, R2784 += 1 };
  s1 -> s1 [0, 64] { R2834 += 1, R2784 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2834 += 1 };
  s1 -> s3 [65, 65] { R2834 += 1, R2784 += 1 };
  s1 -> s4 [65, 65] { R2834 += 1, R2784 += 1 };
  s1 -> s1 [66, 65535] { R2834 += 1, R2784 += 1 };
  s2 -> s1 [0, 64] { R2834 += 1, R2784 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2834 += 1, R2783 += 1, R2784 += 1 };
  s2 -> s3 [65, 65] { R2834 += 1, R2784 += 1 };
  s2 -> s4 [65, 65] { R2834 += 1, R2784 += 1 };
  s2 -> s1 [66, 65535] { R2834 += 1, R2784 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2834 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2834 += 1 };
  s4 -> s4 [0, 65535] { R2834 += 1, R2784 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2834 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s0 -> s2 [0, 64] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s0 -> s3 [0, 65535] { R2836 += 1, R2785 += 1, R2786 += 1 };
  s0 -> s0 [0, 65535] { R2835 += 1, R2836 += 1 };
  s0 -> s4 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s0 -> s5 [65, 65] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s0 -> s6 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s0 -> s7 [65, 65] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s0 -> s1 [66, 65535] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s0 -> s2 [66, 65535] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s1 -> s1 [0, 64] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s1 -> s2 [0, 64] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s1 -> s4 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s1 -> s5 [65, 65] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s1 -> s6 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s1 -> s7 [65, 65] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s1 -> s1 [66, 65535] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s1 -> s2 [66, 65535] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s2 -> s2 [0, 64] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R2836 += 1 };
  s2 -> s4 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s2 -> s6 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s2 -> s2 [66, 65535] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s3 -> s1 [0, 64] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s3 -> s2 [0, 64] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s3 -> s3 [0, 65535] { R2836 += 1, R2785 += 1, R2786 += 1 };
  s3 -> s4 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s3 -> s5 [65, 65] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s3 -> s6 [65, 65] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s3 -> s7 [65, 65] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s3 -> s1 [66, 65535] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s3 -> s2 [66, 65535] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s4 -> s4 [0, 65535] { R2836 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s6 -> s9 [0, 65535] { R2836 += 1 };
  s7 -> s6 [0, 65535] { R2836 += 1, R2786 += 1, R2746 += 1, R2747 += 1 };
  s7 -> s7 [0, 65535] { R2836 += 1, R2786 += 1, R2745 += 1, R2746 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2836 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2838 += 1, R2788 += 1 };
  s0 -> s2 [0, 65535] { R2838 += 1, R2787 += 1, R2788 += 1 };
  s0 -> s0 [0, 65535] { R2837 += 1, R2838 += 1 };
  s0 -> s3 [65, 65] { R2838 += 1, R2788 += 1 };
  s0 -> s4 [65, 65] { R2838 += 1, R2788 += 1 };
  s0 -> s1 [66, 65535] { R2838 += 1, R2788 += 1 };
  s1 -> s1 [0, 64] { R2838 += 1, R2788 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2838 += 1 };
  s1 -> s3 [65, 65] { R2838 += 1, R2788 += 1 };
  s1 -> s4 [65, 65] { R2838 += 1, R2788 += 1 };
  s1 -> s1 [66, 65535] { R2838 += 1, R2788 += 1 };
  s2 -> s1 [0, 64] { R2838 += 1, R2788 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2838 += 1, R2787 += 1, R2788 += 1 };
  s2 -> s3 [65, 65] { R2838 += 1, R2788 += 1 };
  s2 -> s4 [65, 65] { R2838 += 1, R2788 += 1 };
  s2 -> s1 [66, 65535] { R2838 += 1, R2788 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2838 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2838 += 1 };
  s4 -> s4 [0, 65535] { R2838 += 1, R2788 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2838 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2770 && R2 = R2838 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2751 = 0 && R2752 = R2770 && R2753 = 0 && R2754 = R2770 && R2755 = 0 && R2756 = R2770 && R2757 = 0 && R2758 = R2770 && R2759 = 0 && R2760 = R2770 && R2761 = 0 && R2762 = R2770 && R2763 = 0 && R2764 = R2770 && R2765 = 0 && R2766 = R2770 && R2767 = 0 && R2768 = R2770 && R2769 = 0 && R2773 = 0 && R2774 = 0 && R2779 = 0 && R2780 = 0 && R2785 = 0 && R2786 = 0 && R2789 = 10 && R2790 = R2838 && R2791 = 10 && R2792 = R2838 && R2793 = 10 && R2794 = R2838 && R2795 = 10 && R2796 = R2838 && R2797 = 10 && R2798 = R2838 && R2799 = 10 && R2800 = R2838 && R2801 = 10 && R2802 = R2838 && R2803 = 10 && R2804 = R2838 && R2805 = 10 && R2806 = R2838 && R2807 = 10 && R2808 = R2838 && R2809 = 10 && R2810 = R2838 && R2811 = 10 && R2812 = R2838 && R2813 = 10 && R2814 = R2838 && R2815 = 10 && R2816 = R2838 && R2817 = 10 && R2818 = R2838 && R2819 = 10 && R2820 = R2838 && R2821 = 10 && R2822 = R2838 && R2823 = 10 && R2824 = R2838 && R2825 = 10 && R2826 = R2838 && R2827 = 10 && R2828 = R2838 && R2829 = 10 && R2830 = R2838 && R2831 = 10 && R2832 = R2838 && R2833 = 10 && R2834 = R2838 && R2835 = 10 && R2836 = R2838 && R2837 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2770 && 9 < R2838 && (R14 = 0 || (R2771 = 0 && R2772 = 0)) && (R14 = 0 || (R2775 = 0 && R2776 = 0)) && (R14 = 0 || (R2777 = 0 && R2778 = 0)) && (R14 = 0 || (R2781 = 0 && R2782 = 0)) && (R14 = 0 || (R2783 = 0 && R2784 = 0)) && (R14 = 0 || (R2787 = 0 && R2788 = 0)) && (R2650 + R2647 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R2650 + R2647 = 0 || (R2648 + R2645 = 0 && R2649 + R2646 = 0)) && (R2750 + R2747 = 0 || (R2748 + R2745 = 0 && R2749 + R2746 = 0));
// End of Parikh automata intersection problem
