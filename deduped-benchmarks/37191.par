// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R3803, R3804, R3805, R3806, R3807, R3808, R3809, R3810, R3811, R3812, R3813, R3814, R3815, R3816, R3817, R3818, R3819, R3820, R3821, R3822, R3823, R3824, R3825, R3826, R3827, R3828, R3829, R3830, R3831, R3832, R3833, R3834, R3835, R3836, R3837, R3838, R3839, R3840, R3841, R3842, R3843, R3844, R3845, R3846, R3847, R3848, R3849, R3850, R3851, R3852, R3853, R3854, R3855, R3856, R3857, R3858, R3859, R3860, R3861, R3862, R3863, R3864, R3865, R3866, R3867, R3868, R3869, R3870, R3871, R3872, R3873, R3874, R3875, R3876, R3877, R3878, R3879, R3880, R3881, R3882, R3883, R3884, R3885, R3886, R3887, R3888, R3889, R3890, R3891, R3892, R3893, R3894, R3895, R3896, R3897, R3898, R3899, R3900, R3901, R3902, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3854 += 1 };
  s0 -> s0 [0, 65535] { R3853 += 1, R3854 += 1 };
  s0 -> s1 [45, 45] { R3854 += 1 };
  s0 -> s2 [46, 46] { R3854 += 1 };
  s0 -> s1 [48, 62] { R3854 += 1 };
  s0 -> s3 [65, 65] { R3854 += 1 };
  s0 -> s1 [66, 65535] { R3854 += 1 };
  s1 -> s1 [0, 43] { R3854 += 1 };
  s1 -> s1 [45, 45] { R3854 += 1 };
  s1 -> s2 [46, 46] { R3854 += 1 };
  s1 -> s1 [48, 62] { R3854 += 1 };
  s1 -> s3 [65, 65] { R3854 += 1 };
  s1 -> s1 [66, 65535] { R3854 += 1 };
  s2 -> s1 [0, 43] { R3854 += 1 };
  s2 -> s1 [45, 45] { R3854 += 1 };
  s2 -> s2 [46, 46] { R3854 += 1 };
  s2 -> s1 [48, 62] { R3854 += 1 };
  s2 -> s3 [65, 65] { R3854 += 1 };
  s2 -> s1 [66, 114] { R3854 += 1 };
  s2 -> s8 [115, 115] { R3854 += 1 };
  s2 -> s1 [116, 65535] { R3854 += 1 };
  s3 -> s3 [0, 43] { R3854 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3854 += 1 };
  s3 -> s4 [46, 46] { R3854 += 1 };
  s3 -> s3 [48, 62] { R3854 += 1 };
  s3 -> s3 [65, 65535] { R3854 += 1 };
  s4 -> s3 [0, 43] { R3854 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3854 += 1 };
  s4 -> s4 [46, 46] { R3854 += 1 };
  s4 -> s3 [48, 62] { R3854 += 1 };
  s4 -> s3 [65, 114] { R3854 += 1 };
  s4 -> s5 [115, 115] { R3854 += 1 };
  s4 -> s3 [116, 65535] { R3854 += 1 };
  s5 -> s3 [0, 43] { R3854 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3854 += 1 };
  s5 -> s4 [46, 46] { R3854 += 1 };
  s5 -> s3 [48, 62] { R3854 += 1 };
  s5 -> s3 [65, 110] { R3854 += 1 };
  s5 -> s6 [111, 111] { R3854 += 1 };
  s5 -> s3 [112, 65535] { R3854 += 1 };
  s6 -> s3 [0, 43] { R3854 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3854 += 1 };
  s6 -> s4 [46, 46] { R3854 += 1 };
  s6 -> s3 [48, 62] { R3854 += 1 };
  s6 -> s3 [65, 98] { R3854 += 1 };
  s6 -> s7 [99, 99] { R3854 += 1 };
  s6 -> s3 [100, 65535] { R3854 += 1 };
  s7 -> s3 [0, 43] { R3854 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3854 += 1 };
  s7 -> s4 [46, 46] { R3854 += 1 };
  s7 -> s3 [48, 62] { R3854 += 1 };
  s7 -> s3 [65, 106] { R3854 += 1 };
  s7 -> s3 [108, 65535] { R3854 += 1 };
  s8 -> s1 [0, 43] { R3854 += 1 };
  s8 -> s1 [45, 45] { R3854 += 1 };
  s8 -> s2 [46, 46] { R3854 += 1 };
  s8 -> s1 [48, 62] { R3854 += 1 };
  s8 -> s3 [65, 65] { R3854 += 1 };
  s8 -> s1 [66, 110] { R3854 += 1 };
  s8 -> s9 [111, 111] { R3854 += 1 };
  s8 -> s1 [112, 65535] { R3854 += 1 };
  s9 -> s1 [0, 43] { R3854 += 1 };
  s9 -> s1 [45, 45] { R3854 += 1 };
  s9 -> s2 [46, 46] { R3854 += 1 };
  s9 -> s1 [48, 62] { R3854 += 1 };
  s9 -> s3 [65, 65] { R3854 += 1 };
  s9 -> s1 [66, 98] { R3854 += 1 };
  s9 -> s10 [99, 99] { R3854 += 1 };
  s9 -> s1 [100, 65535] { R3854 += 1 };
  s10 -> s1 [0, 43] { R3854 += 1 };
  s10 -> s1 [45, 45] { R3854 += 1 };
  s10 -> s2 [46, 46] { R3854 += 1 };
  s10 -> s1 [48, 62] { R3854 += 1 };
  s10 -> s3 [65, 65] { R3854 += 1 };
  s10 -> s1 [66, 106] { R3854 += 1 };
  s10 -> s1 [108, 65535] { R3854 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3855 += 1, R3856 += 1 };
  s0 -> s1 [0, 65535] { R3856 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3856 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3858 += 1 };
  s0 -> s2 [0, 65535] { R3858 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3857 += 1, R3858 += 1 };
  s0 -> s3 [58, 58] { R3858 += 1 };
  s0 -> s1 [59, 65535] { R3858 += 1 };
  s1 -> s1 [0, 57] { R3858 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3858 += 1 };
  s1 -> s1 [59, 65535] { R3858 += 1 };
  s2 -> s1 [0, 57] { R3858 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3858 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3858 += 1 };
  s2 -> s1 [59, 65535] { R3858 += 1 };
  s3 -> s3 [0, 65535] { R3858 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3860 += 1 };
  s0 -> s0 [0, 65535] { R3859 += 1, R3860 += 1 };
  s0 -> s2 [0, 65535] { R3860 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3860 += 1 };
  s0 -> s1 [66, 65535] { R3860 += 1 };
  s1 -> s1 [0, 64] { R3860 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3860 += 1 };
  s1 -> s1 [66, 65535] { R3860 += 1 };
  s2 -> s1 [0, 64] { R3860 += 1 };
  s2 -> s2 [0, 65535] { R3860 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3860 += 1 };
  s2 -> s1 [66, 65535] { R3860 += 1 };
  s3 -> s3 [0, 65535] { R3860 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3862 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R3862 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3861 += 1, R3862 += 1 };
  s0 -> s3 [91, 91] { R3862 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3862 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R3862 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R3862 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3862 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R3862 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3862 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3862 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3862 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3862 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3863 += 1, R3864 += 1 };
  s0 -> s1 [0, 65535] { R3864 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R3864 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R3864 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3864 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3864 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R3864 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3864 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3866 += 1, R3816 += 1 };
  s0 -> s2 [0, 65535] { R3866 += 1, R3815 += 1, R3816 += 1 };
  s0 -> s0 [0, 65535] { R3865 += 1, R3866 += 1 };
  s0 -> s1 [66, 65535] { R3866 += 1, R3816 += 1 };
  s1 -> s1 [0, 64] { R3866 += 1, R3816 += 1 };
  s1 -> s1 [0, 65535] { R3866 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3866 += 1, R3816 += 1 };
  s2 -> s1 [0, 64] { R3866 += 1, R3816 += 1 };
  s2 -> s2 [0, 65535] { R3866 += 1, R3815 += 1, R3816 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3866 += 1, R3816 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3868 += 1, R3817 += 1, R3818 += 1 };
  s0 -> s2 [0, 65535] { R3868 += 1, R3818 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R3867 += 1, R3868 += 1 };
  s1 -> s1 [0, 65535] { R3868 += 1, R3817 += 1, R3818 += 1 };
  s1 -> s2 [0, 65535] { R3868 += 1, R3818 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3868 += 1, R3818 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3868 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3868 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3870 += 1, R3820 += 1 };
  s0 -> s2 [0, 65535] { R3870 += 1, R3819 += 1, R3820 += 1 };
  s0 -> s0 [0, 65535] { R3869 += 1, R3870 += 1 };
  s0 -> s1 [80, 65535] { R3870 += 1, R3820 += 1 };
  s1 -> s1 [0, 65] { R3870 += 1, R3820 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3870 += 1 };
  s1 -> s1 [80, 65535] { R3870 += 1, R3820 += 1 };
  s2 -> s1 [0, 65] { R3870 += 1, R3820 += 1 };
  s2 -> s2 [0, 65535] { R3870 += 1, R3819 += 1, R3820 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R3870 += 1, R3820 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3871 += 1, R3872 += 1 };
  s0 -> s1 [0, 65535] { R3872 += 1, R3822 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R3872 += 1, R3821 += 1, R3822 += 1 };
  s1 -> s4 [0, 65535] { R3872 += 1 };
  s1 -> s1 [0, 65535] { R3872 += 1, R3822 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3872 += 1, R3822 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R3872 += 1, R3821 += 1, R3822 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3872 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R3874 += 1, R3824 += 1 };
  s0 -> s2 [0, 65535] { R3874 += 1, R3823 += 1, R3824 += 1 };
  s0 -> s0 [0, 65535] { R3873 += 1, R3874 += 1 };
  s0 -> s1 [81, 65535] { R3874 += 1, R3824 += 1 };
  s1 -> s1 [0, 79] { R3874 += 1, R3824 += 1 };
  s1 -> s1 [0, 65535] { R3874 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R3874 += 1, R3824 += 1 };
  s2 -> s1 [0, 79] { R3874 += 1, R3824 += 1 };
  s2 -> s2 [0, 65535] { R3874 += 1, R3823 += 1, R3824 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R3874 += 1, R3824 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s0 -> s2 [0, 65535] { R3876 += 1, R3825 += 1, R3826 += 1 };
  s0 -> s3 [0, 65535] { R3876 += 1, R3826 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R3875 += 1, R3876 += 1 };
  s0 -> s1 [81, 65535] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s1 -> s1 [0, 79] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3876 += 1, R3826 += 1 };
  s1 -> s5 [0, 65535] { R3876 += 1 };
  s1 -> s1 [81, 65535] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s2 -> s1 [0, 79] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s2 -> s2 [0, 65535] { R3876 += 1, R3825 += 1, R3826 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3876 += 1, R3826 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s1 [81, 65535] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s3 -> s1 [0, 79] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3876 += 1 };
  s3 -> s3 [0, 65535] { R3876 += 1, R3826 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s1 [81, 65535] { R3876 += 1, R3826 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3876 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3878 += 1, R3828 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s2 [0, 65535] { R3878 += 1, R3828 += 1 };
  s0 -> s3 [0, 65535] { R3878 += 1, R3827 += 1, R3828 += 1 };
  s0 -> s0 [0, 65535] { R3877 += 1, R3878 += 1 };
  s1 -> s1 [0, 65535] { R3878 += 1, R3828 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s2 [0, 65535] { R3878 += 1, R3828 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3878 += 1 };
  s2 -> s2 [0, 65535] { R3878 += 1, R3828 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3878 += 1 };
  s3 -> s1 [0, 65535] { R3878 += 1, R3828 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s2 [0, 65535] { R3878 += 1, R3828 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3878 += 1, R3827 += 1, R3828 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3878 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3880 += 1, R3830 += 1 };
  s0 -> s0 [0, 65535] { R3879 += 1, R3880 += 1 };
  s0 -> s2 [0, 65535] { R3880 += 1, R3829 += 1, R3830 += 1 };
  s1 -> s1 [0, 65535] { R3880 += 1, R3830 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3880 += 1 };
  s2 -> s1 [0, 65535] { R3880 += 1, R3830 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3880 += 1, R3829 += 1, R3830 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3880 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3882 += 1, R3831 += 1, R3832 += 1 };
  s0 -> s2 [0, 65535] { R3882 += 1, R3832 += 1, R3812 += 1, R3813 += 1 };
  s0 -> s3 [0, 65535] { R3882 += 1, R3832 += 1, R3813 += 1, R3814 += 1 };
  s0 -> s0 [0, 65535] { R3881 += 1, R3882 += 1 };
  s1 -> s1 [0, 65535] { R3882 += 1, R3831 += 1, R3832 += 1 };
  s1 -> s2 [0, 65535] { R3882 += 1, R3832 += 1, R3812 += 1, R3813 += 1 };
  s1 -> s3 [0, 65535] { R3882 += 1, R3832 += 1, R3813 += 1, R3814 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3882 += 1, R3832 += 1, R3812 += 1, R3813 += 1 };
  s2 -> s3 [0, 65535] { R3882 += 1, R3832 += 1, R3813 += 1, R3814 += 1 };
  s2 -> s4 [0, 65535] { R3882 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3882 += 1, R3832 += 1, R3813 += 1, R3814 += 1 };
  s3 -> s4 [0, 65535] { R3882 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3882 += 1, R3832 += 1 };
  s4 -> s4 [0, 65535] { R3882 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R3882 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3882 += 1, R3832 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3883 += 1, R3884 += 1 };
  s0 -> s1 [0, 65535] { R3884 += 1, R3834 += 1 };
  s0 -> s2 [0, 65535] { R3884 += 1, R3833 += 1, R3834 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3884 += 1 };
  s1 -> s1 [0, 65535] { R3884 += 1, R3834 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3884 += 1, R3834 += 1 };
  s2 -> s2 [0, 65535] { R3884 += 1, R3833 += 1, R3834 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3884 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3886 += 1, R3835 += 1, R3836 += 1 };
  s0 -> s0 [0, 65535] { R3885 += 1, R3886 += 1 };
  s0 -> s2 [0, 65535] { R3886 += 1, R3836 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R3886 += 1, R3835 += 1, R3836 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3886 += 1, R3836 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3886 += 1 };
  s2 -> s2 [0, 65535] { R3886 += 1, R3836 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3886 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3888 += 1, R3838 += 1 };
  s0 -> s0 [0, 65535] { R3887 += 1, R3888 += 1 };
  s0 -> s2 [0, 65535] { R3888 += 1, R3837 += 1, R3838 += 1 };
  s0 -> s3 [65, 65] { R3888 += 1, R3838 += 1 };
  s0 -> s4 [65, 65] { R3888 += 1, R3838 += 1 };
  s0 -> s5 [80, 80] { R3888 += 1, R3838 += 1 };
  s0 -> s1 [81, 65535] { R3888 += 1, R3838 += 1 };
  s1 -> s1 [0, 64] { R3888 += 1, R3838 += 1 };
  s1 -> s3 [65, 65] { R3888 += 1, R3838 += 1 };
  s1 -> s4 [65, 65] { R3888 += 1, R3838 += 1 };
  s1 -> s5 [80, 80] { R3888 += 1, R3838 += 1 };
  s1 -> s1 [81, 65535] { R3888 += 1, R3838 += 1 };
  s2 -> s1 [0, 64] { R3888 += 1, R3838 += 1 };
  s2 -> s2 [0, 65535] { R3888 += 1, R3837 += 1, R3838 += 1 };
  s2 -> s3 [65, 65] { R3888 += 1, R3838 += 1 };
  s2 -> s4 [65, 65] { R3888 += 1, R3838 += 1 };
  s2 -> s5 [80, 80] { R3888 += 1, R3838 += 1 };
  s2 -> s1 [81, 65535] { R3888 += 1, R3838 += 1 };
  s3 -> s3 [0, 65] { R3888 += 1, R3838 += 1 };
  s3 -> s7 [80, 80] { R3888 += 1, R3838 += 1 };
  s3 -> s3 [81, 65535] { R3888 += 1, R3838 += 1 };
  s5 -> s5 [0, 64] { R3888 += 1, R3838 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3888 += 1 };
  s5 -> s7 [65, 65] { R3888 += 1, R3838 += 1 };
  s5 -> s8 [65, 65] { R3888 += 1, R3838 += 1 };
  s5 -> s5 [80, 65535] { R3888 += 1, R3838 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3888 += 1, R3838 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3888 += 1 };
  s7 -> s7 [80, 65535] { R3888 += 1, R3838 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3888 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R3890 += 1, R3839 += 1, R3840 += 1 };
  s0 -> s0 [0, 65535] { R3889 += 1, R3890 += 1 };
  s0 -> s3 [65, 65] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3890 += 1 };
  s1 -> s3 [65, 65] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3890 += 1, R3839 += 1, R3840 += 1 };
  s2 -> s3 [65, 65] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3890 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3890 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3890 += 1, R3840 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535] { R3890 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3892 += 1, R3842 += 1 };
  s0 -> s2 [0, 64] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R3891 += 1, R3892 += 1 };
  s0 -> s3 [0, 65535] { R3892 += 1, R3841 += 1, R3842 += 1 };
  s0 -> s4 [65, 65] { R3892 += 1, R3842 += 1 };
  s0 -> s5 [65, 65] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R3892 += 1, R3842 += 1 };
  s0 -> s7 [65, 65] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s0 -> s1 [66, 79] { R3892 += 1, R3842 += 1 };
  s0 -> s2 [66, 65535] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R3892 += 1, R3842 += 1 };
  s1 -> s1 [0, 64] { R3892 += 1, R3842 += 1 };
  s1 -> s1 [0, 65535] { R3892 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R3892 += 1, R3842 += 1 };
  s1 -> s6 [65, 65] { R3892 += 1, R3842 += 1 };
  s1 -> s1 [66, 79] { R3892 += 1, R3842 += 1 };
  s1 -> s1 [81, 65535] { R3892 += 1, R3842 += 1 };
  s2 -> s1 [0, 64] { R3892 += 1, R3842 += 1 };
  s2 -> s2 [0, 64] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R3892 += 1, R3842 += 1 };
  s2 -> s5 [65, 65] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s2 -> s6 [65, 65] { R3892 += 1, R3842 += 1 };
  s2 -> s7 [65, 65] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s2 -> s1 [66, 79] { R3892 += 1, R3842 += 1 };
  s2 -> s2 [66, 65535] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R3892 += 1, R3842 += 1 };
  s3 -> s1 [0, 64] { R3892 += 1, R3842 += 1 };
  s3 -> s2 [0, 64] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R3892 += 1, R3841 += 1, R3842 += 1 };
  s3 -> s4 [65, 65] { R3892 += 1, R3842 += 1 };
  s3 -> s5 [65, 65] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R3892 += 1, R3842 += 1 };
  s3 -> s7 [65, 65] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s3 -> s1 [66, 79] { R3892 += 1, R3842 += 1 };
  s3 -> s2 [66, 65535] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R3892 += 1, R3842 += 1 };
  s4 -> s4 [0, 65535] { R3892 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 79] { R3892 += 1, R3842 += 1 };
  s5 -> s5 [0, 65535] { R3892 += 1, R3842 += 1, R3509 += 1 };
  s5 -> s6 [81, 65535] { R3892 += 1, R3842 += 1 };
  s6 -> s6 [0, 79] { R3892 += 1, R3842 += 1 };
  s6 -> s6 [0, 65535] { R3892 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [81, 65535] { R3892 += 1, R3842 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s2 [0, 65535] { R3894 += 1, R3843 += 1, R3844 += 1 };
  s0 -> s0 [0, 65535] { R3893 += 1, R3894 += 1 };
  s0 -> s3 [65, 65] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 65535] { R3894 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s2 [0, 65535] { R3894 += 1, R3843 += 1, R3844 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s3 [0, 65535] { R3894 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3894 += 1, R3844 += 1, R3511 += 1, R3512 += 1 };
  s4 -> s5 [0, 65535] { R3894 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3894 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [0, 64] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s0 [0, 65535] { R3895 += 1, R3896 += 1 };
  s0 -> s3 [0, 65535] { R3896 += 1, R3845 += 1, R3846 += 1 };
  s0 -> s4 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s5 [65, 65] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s6 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s7 [65, 65] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s1 [66, 65535] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [66, 65535] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s1 [0, 64] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [0, 64] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s4 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s5 [65, 65] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s6 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s7 [65, 65] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s1 [66, 65535] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [66, 65535] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [0, 64] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s2 [0, 65535] { R3896 += 1 };
  s2 -> s4 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s6 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [66, 65535] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s1 [0, 64] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s2 [0, 64] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s3 [0, 65535] { R3896 += 1, R3845 += 1, R3846 += 1 };
  s3 -> s4 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s5 [65, 65] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s6 [65, 65] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s7 [65, 65] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s1 [66, 65535] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s2 [66, 65535] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s4 -> s4 [0, 65535] { R3896 += 1 };
  s4 -> s9 [0, 65535];
  s6 -> s8 [0, 65535] { R3896 += 1 };
  s6 -> s6 [0, 65535] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s6 [0, 65535] { R3896 += 1, R3846 += 1, R3804 += 1, R3805 += 1 };
  s7 -> s7 [0, 65535] { R3896 += 1, R3846 += 1, R3803 += 1, R3804 += 1 };
  s8 -> s8 [0, 65535] { R3896 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3898 += 1, R3848 += 1 };
  s0 -> s0 [0, 65535] { R3897 += 1, R3898 += 1 };
  s0 -> s2 [0, 65535] { R3898 += 1, R3847 += 1, R3848 += 1 };
  s0 -> s3 [65, 65] { R3898 += 1, R3848 += 1 };
  s0 -> s4 [65, 65] { R3898 += 1, R3848 += 1 };
  s0 -> s1 [66, 65535] { R3898 += 1, R3848 += 1 };
  s1 -> s1 [0, 64] { R3898 += 1, R3848 += 1 };
  s1 -> s1 [0, 65535] { R3898 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3898 += 1, R3848 += 1 };
  s1 -> s4 [65, 65] { R3898 += 1, R3848 += 1 };
  s1 -> s1 [66, 65535] { R3898 += 1, R3848 += 1 };
  s2 -> s1 [0, 64] { R3898 += 1, R3848 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3898 += 1, R3847 += 1, R3848 += 1 };
  s2 -> s3 [65, 65] { R3898 += 1, R3848 += 1 };
  s2 -> s4 [65, 65] { R3898 += 1, R3848 += 1 };
  s2 -> s1 [66, 65535] { R3898 += 1, R3848 += 1 };
  s3 -> s3 [0, 65535] { R3898 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3898 += 1 };
  s4 -> s4 [0, 65535] { R3898 += 1, R3848 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3898 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s0 -> s0 [0, 65535] { R3899 += 1, R3900 += 1 };
  s0 -> s2 [0, 65535] { R3900 += 1, R3849 += 1, R3850 += 1 };
  s0 -> s3 [65, 65] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s0 -> s4 [65, 65] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s0 -> s1 [66, 65535] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s1 -> s1 [0, 64] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3900 += 1 };
  s1 -> s3 [65, 65] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s1 -> s4 [65, 65] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s1 -> s1 [66, 65535] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s2 -> s1 [0, 64] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3900 += 1, R3849 += 1, R3850 += 1 };
  s2 -> s3 [65, 65] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s2 -> s4 [65, 65] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s2 -> s1 [66, 65535] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3900 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3900 += 1, R3850 += 1, R3809 += 1, R3810 += 1 };
  s4 -> s6 [0, 65535] { R3900 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3900 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3902 += 1, R3852 += 1 };
  s0 -> s2 [0, 65535] { R3902 += 1, R3851 += 1, R3852 += 1 };
  s0 -> s0 [0, 65535] { R3901 += 1, R3902 += 1 };
  s0 -> s3 [65, 65] { R3902 += 1, R3852 += 1 };
  s0 -> s4 [65, 65] { R3902 += 1, R3852 += 1 };
  s0 -> s1 [66, 65535] { R3902 += 1, R3852 += 1 };
  s1 -> s1 [0, 64] { R3902 += 1, R3852 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3902 += 1 };
  s1 -> s3 [65, 65] { R3902 += 1, R3852 += 1 };
  s1 -> s4 [65, 65] { R3902 += 1, R3852 += 1 };
  s1 -> s1 [66, 65535] { R3902 += 1, R3852 += 1 };
  s2 -> s1 [0, 64] { R3902 += 1, R3852 += 1 };
  s2 -> s2 [0, 65535] { R3902 += 1, R3851 += 1, R3852 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3902 += 1, R3852 += 1 };
  s2 -> s4 [65, 65] { R3902 += 1, R3852 += 1 };
  s2 -> s1 [66, 65535] { R3902 += 1, R3852 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3902 += 1 };
  s3 -> s3 [0, 65535] { R3902 += 1, R3852 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3902 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3902 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3834 && R2 = R3902 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3815 = 0 && R3816 = R3834 && R3817 = 0 && R3818 = R3834 && R3819 = 0 && R3820 = R3834 && R3821 = 0 && R3822 = R3834 && R3823 = 0 && R3824 = R3834 && R3825 = 0 && R3826 = R3834 && R3827 = 0 && R3828 = R3834 && R3829 = 0 && R3830 = R3834 && R3831 = 0 && R3832 = R3834 && R3833 = 0 && R3837 = 0 && R3838 = 0 && R3841 = 0 && R3842 = 0 && R3845 = 0 && R3846 = 0 && R3853 = 10 && R3854 = R3902 && R3855 = 10 && R3856 = R3902 && R3857 = 10 && R3858 = R3902 && R3859 = 10 && R3860 = R3902 && R3861 = 10 && R3862 = R3902 && R3863 = 10 && R3864 = R3902 && R3865 = 10 && R3866 = R3902 && R3867 = 10 && R3868 = R3902 && R3869 = 10 && R3870 = R3902 && R3871 = 10 && R3872 = R3902 && R3873 = 10 && R3874 = R3902 && R3875 = 10 && R3876 = R3902 && R3877 = 10 && R3878 = R3902 && R3879 = 10 && R3880 = R3902 && R3881 = 10 && R3882 = R3902 && R3883 = 10 && R3884 = R3902 && R3885 = 10 && R3886 = R3902 && R3887 = 10 && R3888 = R3902 && R3889 = 10 && R3890 = R3902 && R3891 = 10 && R3892 = R3902 && R3893 = 10 && R3894 = R3902 && R3895 = 10 && R3896 = R3902 && R3897 = 10 && R3898 = R3902 && R3899 = 10 && R3900 = R3902 && R3901 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R3834 && 9 < R3902 && (R14 = 0 || (R3835 = 0 && R3836 = 0)) && (R14 = 0 || (R3839 = 0 && R3840 = 0)) && (R14 = 0 || (R3843 = 0 && R3844 = 0)) && (R14 = 0 || (R3847 = 0 && R3848 = 0)) && (R14 = 0 || (R3849 = 0 && R3850 = 0)) && (R14 = 0 || (R3851 = 0 && R3852 = 0)) && (R3808 + R3805 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R3808 + R3805 = 0 || (R3806 + R3803 = 0 && R3807 + R3804 = 0)) && (R3814 + R3811 = 0 || (R3812 + R3809 = 0 && R3813 + R3810 = 0));
// End of Parikh automata intersection problem
