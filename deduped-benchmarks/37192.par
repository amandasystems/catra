// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1095, R1096, R1097, R1098, R1099, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1140 += 1 };
  s0 -> s0 [0, 65535] { R1139 += 1, R1140 += 1 };
  s0 -> s1 [45, 45] { R1140 += 1 };
  s0 -> s2 [46, 46] { R1140 += 1 };
  s0 -> s1 [48, 62] { R1140 += 1 };
  s0 -> s3 [65, 65] { R1140 += 1 };
  s0 -> s1 [66, 65535] { R1140 += 1 };
  s1 -> s1 [0, 43] { R1140 += 1 };
  s1 -> s1 [45, 45] { R1140 += 1 };
  s1 -> s2 [46, 46] { R1140 += 1 };
  s1 -> s1 [48, 62] { R1140 += 1 };
  s1 -> s3 [65, 65] { R1140 += 1 };
  s1 -> s1 [66, 65535] { R1140 += 1 };
  s2 -> s1 [0, 43] { R1140 += 1 };
  s2 -> s1 [45, 45] { R1140 += 1 };
  s2 -> s2 [46, 46] { R1140 += 1 };
  s2 -> s1 [48, 62] { R1140 += 1 };
  s2 -> s3 [65, 65] { R1140 += 1 };
  s2 -> s1 [66, 114] { R1140 += 1 };
  s2 -> s8 [115, 115] { R1140 += 1 };
  s2 -> s1 [116, 65535] { R1140 += 1 };
  s3 -> s3 [0, 43] { R1140 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1140 += 1 };
  s3 -> s4 [46, 46] { R1140 += 1 };
  s3 -> s3 [48, 62] { R1140 += 1 };
  s3 -> s3 [65, 65535] { R1140 += 1 };
  s4 -> s3 [0, 43] { R1140 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1140 += 1 };
  s4 -> s4 [46, 46] { R1140 += 1 };
  s4 -> s3 [48, 62] { R1140 += 1 };
  s4 -> s3 [65, 114] { R1140 += 1 };
  s4 -> s5 [115, 115] { R1140 += 1 };
  s4 -> s3 [116, 65535] { R1140 += 1 };
  s5 -> s3 [0, 43] { R1140 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1140 += 1 };
  s5 -> s4 [46, 46] { R1140 += 1 };
  s5 -> s3 [48, 62] { R1140 += 1 };
  s5 -> s3 [65, 110] { R1140 += 1 };
  s5 -> s6 [111, 111] { R1140 += 1 };
  s5 -> s3 [112, 65535] { R1140 += 1 };
  s6 -> s3 [0, 43] { R1140 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1140 += 1 };
  s6 -> s4 [46, 46] { R1140 += 1 };
  s6 -> s3 [48, 62] { R1140 += 1 };
  s6 -> s3 [65, 98] { R1140 += 1 };
  s6 -> s7 [99, 99] { R1140 += 1 };
  s6 -> s3 [100, 65535] { R1140 += 1 };
  s7 -> s3 [0, 43] { R1140 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1140 += 1 };
  s7 -> s4 [46, 46] { R1140 += 1 };
  s7 -> s3 [48, 62] { R1140 += 1 };
  s7 -> s3 [65, 106] { R1140 += 1 };
  s7 -> s3 [108, 65535] { R1140 += 1 };
  s8 -> s1 [0, 43] { R1140 += 1 };
  s8 -> s1 [45, 45] { R1140 += 1 };
  s8 -> s2 [46, 46] { R1140 += 1 };
  s8 -> s1 [48, 62] { R1140 += 1 };
  s8 -> s3 [65, 65] { R1140 += 1 };
  s8 -> s1 [66, 110] { R1140 += 1 };
  s8 -> s9 [111, 111] { R1140 += 1 };
  s8 -> s1 [112, 65535] { R1140 += 1 };
  s9 -> s1 [0, 43] { R1140 += 1 };
  s9 -> s1 [45, 45] { R1140 += 1 };
  s9 -> s2 [46, 46] { R1140 += 1 };
  s9 -> s1 [48, 62] { R1140 += 1 };
  s9 -> s3 [65, 65] { R1140 += 1 };
  s9 -> s1 [66, 98] { R1140 += 1 };
  s9 -> s10 [99, 99] { R1140 += 1 };
  s9 -> s1 [100, 65535] { R1140 += 1 };
  s10 -> s1 [0, 43] { R1140 += 1 };
  s10 -> s1 [45, 45] { R1140 += 1 };
  s10 -> s2 [46, 46] { R1140 += 1 };
  s10 -> s1 [48, 62] { R1140 += 1 };
  s10 -> s3 [65, 65] { R1140 += 1 };
  s10 -> s1 [66, 106] { R1140 += 1 };
  s10 -> s1 [108, 65535] { R1140 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1141 += 1, R1142 += 1 };
  s0 -> s1 [0, 65535] { R1142 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R1142 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1144 += 1 };
  s0 -> s2 [0, 65535] { R1144 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1143 += 1, R1144 += 1 };
  s0 -> s3 [58, 58] { R1144 += 1 };
  s0 -> s1 [59, 65535] { R1144 += 1 };
  s1 -> s1 [0, 57] { R1144 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1144 += 1 };
  s1 -> s1 [59, 65535] { R1144 += 1 };
  s2 -> s1 [0, 57] { R1144 += 1 };
  s2 -> s2 [0, 65535] { R1144 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R1144 += 1 };
  s2 -> s1 [59, 65535] { R1144 += 1 };
  s3 -> s3 [0, 65535] { R1144 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1146 += 1 };
  s0 -> s0 [0, 65535] { R1145 += 1, R1146 += 1 };
  s0 -> s2 [0, 65535] { R1146 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1146 += 1 };
  s0 -> s1 [66, 65535] { R1146 += 1 };
  s1 -> s1 [0, 64] { R1146 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1146 += 1 };
  s1 -> s1 [66, 65535] { R1146 += 1 };
  s2 -> s1 [0, 64] { R1146 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1146 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R1146 += 1 };
  s2 -> s1 [66, 65535] { R1146 += 1 };
  s3 -> s3 [0, 65535] { R1146 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1148 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R1148 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1147 += 1, R1148 += 1 };
  s0 -> s3 [91, 91] { R1148 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1148 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R1148 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1148 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R1148 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R1148 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R1148 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1148 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1148 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1148 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1150 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1149 += 1, R1150 += 1 };
  s0 -> s2 [0, 65535] { R1150 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R1150 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R1150 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1150 += 1 };
  s2 -> s2 [0, 65535] { R1150 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1150 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1152 += 1, R1102 += 1 };
  s0 -> s2 [0, 65535] { R1152 += 1, R1101 += 1, R1102 += 1 };
  s0 -> s0 [0, 65535] { R1151 += 1, R1152 += 1 };
  s0 -> s1 [66, 65535] { R1152 += 1, R1102 += 1 };
  s1 -> s1 [0, 64] { R1152 += 1, R1102 += 1 };
  s1 -> s1 [0, 65535] { R1152 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1152 += 1, R1102 += 1 };
  s2 -> s1 [0, 64] { R1152 += 1, R1102 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1152 += 1, R1101 += 1, R1102 += 1 };
  s2 -> s1 [66, 65535] { R1152 += 1, R1102 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1154 += 1, R1103 += 1, R1104 += 1 };
  s0 -> s0 [0, 65535] { R1153 += 1, R1154 += 1 };
  s0 -> s2 [0, 65535] { R1154 += 1, R1104 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1154 += 1, R1103 += 1, R1104 += 1 };
  s1 -> s2 [0, 65535] { R1154 += 1, R1104 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1154 += 1 };
  s2 -> s2 [0, 65535] { R1154 += 1, R1104 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1154 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1156 += 1, R1106 += 1 };
  s0 -> s0 [0, 65535] { R1155 += 1, R1156 += 1 };
  s0 -> s2 [0, 65535] { R1156 += 1, R1105 += 1, R1106 += 1 };
  s0 -> s3 [80, 80] { R1156 += 1, R1106 += 1 };
  s0 -> s1 [81, 65535] { R1156 += 1, R1106 += 1 };
  s1 -> s1 [0, 65] { R1156 += 1, R1106 += 1 };
  s1 -> s3 [80, 80] { R1156 += 1, R1106 += 1 };
  s1 -> s1 [81, 65535] { R1156 += 1, R1106 += 1 };
  s2 -> s1 [0, 65] { R1156 += 1, R1106 += 1 };
  s2 -> s2 [0, 65535] { R1156 += 1, R1105 += 1, R1106 += 1 };
  s2 -> s3 [80, 80] { R1156 += 1, R1106 += 1 };
  s2 -> s1 [81, 65535] { R1156 += 1, R1106 += 1 };
  s3 -> s3 [0, 65] { R1156 += 1, R1106 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1156 += 1 };
  s3 -> s3 [80, 65535] { R1156 += 1, R1106 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1158 += 1, R1108 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R1158 += 1, R1107 += 1, R1108 += 1 };
  s0 -> s0 [0, 65535] { R1157 += 1, R1158 += 1 };
  s1 -> s1 [0, 65535] { R1158 += 1, R1108 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1158 += 1 };
  s2 -> s1 [0, 65535] { R1158 += 1, R1108 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1158 += 1, R1107 += 1, R1108 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1158 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R1160 += 1, R1110 += 1 };
  s0 -> s2 [0, 65535] { R1160 += 1, R1110 += 1, R28 += 1 };
  s0 -> s3 [0, 65535] { R1160 += 1, R1109 += 1, R1110 += 1 };
  s0 -> s0 [0, 65535] { R1159 += 1, R1160 += 1 };
  s0 -> s1 [81, 65535] { R1160 += 1, R1110 += 1 };
  s1 -> s1 [0, 79] { R1160 += 1, R1110 += 1 };
  s1 -> s1 [0, 65535] { R1160 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [81, 65535] { R1160 += 1, R1110 += 1 };
  s2 -> s1 [0, 79] { R1160 += 1, R1110 += 1 };
  s2 -> s2 [0, 65535] { R1160 += 1, R1110 += 1, R28 += 1 };
  s2 -> s5 [0, 65535] { R1160 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [81, 65535] { R1160 += 1, R1110 += 1 };
  s3 -> s1 [0, 79] { R1160 += 1, R1110 += 1 };
  s3 -> s2 [0, 65535] { R1160 += 1, R1110 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R1160 += 1, R1109 += 1, R1110 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [81, 65535] { R1160 += 1, R1110 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1160 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R1162 += 1, R1112 += 1, R900 += 1 };
  s0 -> s1 [0, 65535] { R1162 += 1, R1112 += 1 };
  s0 -> s2 [0, 65535] { R1162 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s0 [0, 65535] { R1161 += 1, R1162 += 1 };
  s0 -> s1 [81, 65535] { R1162 += 1, R1112 += 1, R900 += 1 };
  s1 -> s1 [0, 79] { R1162 += 1, R1112 += 1, R900 += 1 };
  s1 -> s1 [0, 65535] { R1162 += 1, R1112 += 1 };
  s1 -> s4 [0, 65535] { R1162 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1162 += 1, R1112 += 1, R900 += 1 };
  s2 -> s1 [0, 79] { R1162 += 1, R1112 += 1, R900 += 1 };
  s2 -> s1 [0, 65535] { R1162 += 1, R1112 += 1 };
  s2 -> s2 [0, 65535] { R1162 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R1162 += 1, R1112 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1162 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1164 += 1, R1114 += 1, R905 += 1, R906 += 1 };
  s0 -> s0 [0, 65535] { R1163 += 1, R1164 += 1 };
  s0 -> s2 [0, 65535] { R1164 += 1, R1114 += 1, R904 += 1, R905 += 1 };
  s0 -> s3 [0, 65535] { R1164 += 1, R1113 += 1, R1114 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1164 += 1, R1114 += 1 };
  s1 -> s5 [0, 65535] { R1164 += 1 };
  s1 -> s1 [0, 65535] { R1164 += 1, R1114 += 1, R905 += 1, R906 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1164 += 1 };
  s2 -> s1 [0, 65535] { R1164 += 1, R1114 += 1, R905 += 1, R906 += 1 };
  s2 -> s2 [0, 65535] { R1164 += 1, R1114 += 1, R904 += 1, R905 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1164 += 1, R1114 += 1, R905 += 1, R906 += 1 };
  s3 -> s2 [0, 65535] { R1164 += 1, R1114 += 1, R904 += 1, R905 += 1 };
  s3 -> s3 [0, 65535] { R1164 += 1, R1113 += 1, R1114 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1164 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1164 += 1, R1114 += 1 };
  s6 -> s5 [0, 65535] { R1164 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1166 += 1, R1116 += 1 };
  s0 -> s0 [0, 65535] { R1165 += 1, R1166 += 1 };
  s0 -> s2 [0, 65535] { R1166 += 1, R1115 += 1, R1116 += 1 };
  s1 -> s1 [0, 65535] { R1166 += 1, R1116 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1166 += 1 };
  s2 -> s1 [0, 65535] { R1166 += 1, R1116 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1166 += 1, R1115 += 1, R1116 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1166 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1168 += 1, R1118 += 1 };
  s0 -> s2 [0, 65535] { R1168 += 1, R1117 += 1, R1118 += 1 };
  s0 -> s0 [0, 65535] { R1167 += 1, R1168 += 1 };
  s1 -> s1 [0, 65535] { R1168 += 1, R1118 += 1 };
  s1 -> s4 [0, 65535] { R1168 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1168 += 1, R1118 += 1 };
  s2 -> s2 [0, 65535] { R1168 += 1, R1117 += 1, R1118 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1168 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1169 += 1, R1170 += 1 };
  s0 -> s1 [0, 65535] { R1170 += 1, R1119 += 1, R1120 += 1 };
  s0 -> s2 [0, 65535] { R1170 += 1, R1120 += 1 };
  s1 -> s1 [0, 65535] { R1170 += 1, R1119 += 1, R1120 += 1 };
  s1 -> s2 [0, 65535] { R1170 += 1, R1120 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1170 += 1, R1120 += 1 };
  s2 -> s3 [0, 65535] { R1170 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1170 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1171 += 1, R1172 += 1 };
  s0 -> s1 [0, 65535] { R1172 += 1, R1121 += 1, R1122 += 1 };
  s0 -> s2 [0, 65535] { R1172 += 1, R1122 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1172 += 1, R1121 += 1, R1122 += 1 };
  s1 -> s2 [0, 65535] { R1172 += 1, R1122 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1172 += 1 };
  s2 -> s2 [0, 65535] { R1172 += 1, R1122 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1172 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1174 += 1, R1124 += 1 };
  s0 -> s0 [0, 65535] { R1173 += 1, R1174 += 1 };
  s0 -> s2 [0, 65535] { R1174 += 1, R1123 += 1, R1124 += 1 };
  s0 -> s3 [65, 65] { R1174 += 1, R1124 += 1 };
  s0 -> s4 [65, 65] { R1174 += 1, R1124 += 1 };
  s0 -> s1 [81, 65535] { R1174 += 1, R1124 += 1 };
  s1 -> s1 [0, 64] { R1174 += 1, R1124 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1174 += 1 };
  s1 -> s3 [65, 65] { R1174 += 1, R1124 += 1 };
  s1 -> s4 [65, 65] { R1174 += 1, R1124 += 1 };
  s1 -> s1 [81, 65535] { R1174 += 1, R1124 += 1 };
  s2 -> s1 [0, 64] { R1174 += 1, R1124 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1174 += 1, R1123 += 1, R1124 += 1 };
  s2 -> s3 [65, 65] { R1174 += 1, R1124 += 1 };
  s2 -> s4 [65, 65] { R1174 += 1, R1124 += 1 };
  s2 -> s1 [81, 65535] { R1174 += 1, R1124 += 1 };
  s3 -> s3 [0, 65535] { R1174 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R1174 += 1, R1124 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1174 += 1 };
  s4 -> s4 [81, 65535] { R1174 += 1, R1124 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1176 += 1, R1126 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1175 += 1, R1176 += 1 };
  s0 -> s2 [0, 65535] { R1176 += 1, R1125 += 1, R1126 += 1 };
  s0 -> s3 [65, 65] { R1176 += 1, R1126 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1176 += 1, R1126 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1176 += 1, R1126 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1176 += 1, R1126 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1176 += 1 };
  s1 -> s3 [65, 65] { R1176 += 1, R1126 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1176 += 1, R1126 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1176 += 1, R1126 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1176 += 1, R1126 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1176 += 1, R1125 += 1, R1126 += 1 };
  s2 -> s3 [65, 65] { R1176 += 1, R1126 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1176 += 1, R1126 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1176 += 1, R1126 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R1176 += 1, R1126 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1176 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1176 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1178 += 1, R1128 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1177 += 1, R1178 += 1 };
  s0 -> s2 [0, 65535] { R1178 += 1, R1127 += 1, R1128 += 1 };
  s0 -> s3 [65, 65] { R1178 += 1, R1128 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1178 += 1, R1128 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1178 += 1, R1128 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1178 += 1, R1128 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R1178 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1178 += 1, R1128 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1178 += 1, R1128 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1178 += 1, R1128 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1178 += 1, R1128 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R1178 += 1, R1127 += 1, R1128 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1178 += 1, R1128 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1178 += 1, R1128 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1178 += 1, R1128 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R1178 += 1, R1128 += 1, R27 += 1 };
  s3 -> s6 [0, 65535] { R1178 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1178 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1178 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1180 += 1, R1130 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R1180 += 1, R1129 += 1, R1130 += 1 };
  s0 -> s0 [0, 65535] { R1179 += 1, R1180 += 1 };
  s0 -> s4 [65, 65] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1180 += 1, R1130 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1180 += 1, R1130 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [66, 79] { R1180 += 1, R1130 += 1, R898 += 1 };
  s0 -> s2 [66, 65535] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [81, 65535] { R1180 += 1, R1130 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1180 += 1, R1130 += 1, R898 += 1 };
  s1 -> s1 [0, 65535] { R1180 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R1180 += 1, R1130 += 1 };
  s1 -> s6 [65, 65] { R1180 += 1, R1130 += 1 };
  s1 -> s1 [66, 79] { R1180 += 1, R1130 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1180 += 1, R1130 += 1 };
  s1 -> s1 [81, 65535] { R1180 += 1, R1130 += 1, R898 += 1 };
  s2 -> s1 [0, 64] { R1180 += 1, R1130 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [65, 65] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s2 -> s5 [65, 65] { R1180 += 1, R1130 += 1, R898 += 1 };
  s2 -> s6 [65, 65] { R1180 += 1, R1130 += 1, R898 += 1 };
  s2 -> s7 [65, 65] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [66, 79] { R1180 += 1, R1130 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [81, 65535] { R1180 += 1, R1130 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1180 += 1, R1130 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1180 += 1, R1129 += 1, R1130 += 1 };
  s3 -> s4 [65, 65] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1180 += 1, R1130 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1180 += 1, R1130 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [66, 79] { R1180 += 1, R1130 += 1, R898 += 1 };
  s3 -> s2 [66, 65535] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [81, 65535] { R1180 += 1, R1130 += 1, R898 += 1 };
  s4 -> s5 [0, 79] { R1180 += 1, R1130 += 1, R898 += 1 };
  s4 -> s4 [0, 65535] { R1180 += 1, R1130 += 1, R897 += 1, R898 += 1 };
  s4 -> s5 [81, 65535] { R1180 += 1, R1130 += 1, R898 += 1 };
  s5 -> s5 [0, 79] { R1180 += 1, R1130 += 1, R898 += 1 };
  s5 -> s9 [0, 65535] { R1180 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1180 += 1, R1130 += 1 };
  s5 -> s5 [81, 65535] { R1180 += 1, R1130 += 1, R898 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1180 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1180 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s0 -> s0 [0, 65535] { R1181 += 1, R1182 += 1 };
  s0 -> s2 [0, 65535] { R1182 += 1, R1131 += 1, R1132 += 1 };
  s0 -> s3 [65, 65] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s0 -> s4 [65, 65] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s0 -> s1 [66, 65535] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [0, 64] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [0, 65535] { R1182 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s1 -> s4 [65, 65] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [66, 65535] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s2 -> s1 [0, 64] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1182 += 1, R1131 += 1, R1132 += 1 };
  s2 -> s3 [65, 65] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s2 -> s4 [65, 65] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s2 -> s1 [66, 65535] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1182 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1182 += 1 };
  s4 -> s4 [0, 65535] { R1182 += 1, R1132 += 1, R901 += 1, R902 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1182 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1184 += 1, R1134 += 1 };
  s0 -> s2 [0, 65535] { R1184 += 1, R1133 += 1, R1134 += 1 };
  s0 -> s0 [0, 65535] { R1183 += 1, R1184 += 1 };
  s0 -> s3 [65, 65] { R1184 += 1, R1134 += 1 };
  s0 -> s4 [65, 65] { R1184 += 1, R1134 += 1 };
  s0 -> s1 [66, 65535] { R1184 += 1, R1134 += 1 };
  s1 -> s1 [0, 64] { R1184 += 1, R1134 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1184 += 1 };
  s1 -> s3 [65, 65] { R1184 += 1, R1134 += 1 };
  s1 -> s4 [65, 65] { R1184 += 1, R1134 += 1 };
  s1 -> s1 [66, 65535] { R1184 += 1, R1134 += 1 };
  s2 -> s1 [0, 64] { R1184 += 1, R1134 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1184 += 1, R1133 += 1, R1134 += 1 };
  s2 -> s3 [65, 65] { R1184 += 1, R1134 += 1 };
  s2 -> s4 [65, 65] { R1184 += 1, R1134 += 1 };
  s2 -> s1 [66, 65535] { R1184 += 1, R1134 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1184 += 1 };
  s4 -> s5 [0, 65535] { R1184 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1184 += 1, R1134 += 1 };
  s5 -> s5 [0, 65535] { R1184 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s2 [0, 64] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s0 -> s0 [0, 65535] { R1185 += 1, R1186 += 1 };
  s0 -> s3 [0, 65535] { R1186 += 1, R1135 += 1, R1136 += 1 };
  s0 -> s4 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s5 [65, 65] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s0 -> s6 [65, 65] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s0 -> s7 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s1 [66, 65535] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s0 -> s2 [66, 65535] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s1 -> s11 [0, 64] { R1186 += 1, R1136 += 1 };
  s1 -> s1 [0, 64] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s1 -> s4 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s1 -> s7 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s1 -> s8 [65, 65] { R1186 += 1, R1136 += 1 };
  s1 -> s12 [65, 65] { R1186 += 1, R1136 += 1 };
  s1 -> s11 [66, 65535] { R1186 += 1, R1136 += 1 };
  s1 -> s1 [66, 65535] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s2 -> s1 [0, 64] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s2 -> s2 [0, 64] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s2 -> s4 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s2 -> s5 [65, 65] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s2 -> s6 [65, 65] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s2 -> s7 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s2 -> s1 [66, 65535] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s2 -> s2 [66, 65535] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s3 -> s1 [0, 64] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s2 [0, 64] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s3 -> s3 [0, 65535] { R1186 += 1, R1135 += 1, R1136 += 1 };
  s3 -> s4 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s5 [65, 65] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s3 -> s6 [65, 65] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s3 -> s7 [65, 65] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s1 [66, 65535] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s3 -> s2 [66, 65535] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s6 -> s6 [0, 65535] { R1186 += 1, R1136 += 1, R1095 += 1, R1096 += 1 };
  s6 -> s7 [0, 65535] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s7 -> s7 [0, 65535] { R1186 += 1, R1136 += 1, R1096 += 1, R1097 += 1 };
  s7 -> s8 [0, 65535] { R1186 += 1, R1136 += 1 };
  s8 -> s8 [0, 65535] { R1186 += 1, R1136 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R1186 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1186 += 1 };
  s11 -> s11 [0, 64] { R1186 += 1, R1136 += 1 };
  s11 -> s11 [0, 65535] { R1186 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [65, 65] { R1186 += 1, R1136 += 1 };
  s11 -> s12 [65, 65] { R1186 += 1, R1136 += 1 };
  s11 -> s11 [66, 65535] { R1186 += 1, R1136 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1186 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1188 += 1, R1138 += 1 };
  s0 -> s2 [0, 65535] { R1188 += 1, R1137 += 1, R1138 += 1 };
  s0 -> s0 [0, 65535] { R1187 += 1, R1188 += 1 };
  s0 -> s3 [65, 65] { R1188 += 1, R1138 += 1 };
  s0 -> s4 [65, 65] { R1188 += 1, R1138 += 1 };
  s0 -> s1 [66, 65535] { R1188 += 1, R1138 += 1 };
  s1 -> s1 [0, 64] { R1188 += 1, R1138 += 1 };
  s1 -> s1 [0, 65535] { R1188 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1188 += 1, R1138 += 1 };
  s1 -> s4 [65, 65] { R1188 += 1, R1138 += 1 };
  s1 -> s1 [66, 65535] { R1188 += 1, R1138 += 1 };
  s2 -> s1 [0, 64] { R1188 += 1, R1138 += 1 };
  s2 -> s2 [0, 65535] { R1188 += 1, R1137 += 1, R1138 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1188 += 1, R1138 += 1 };
  s2 -> s4 [65, 65] { R1188 += 1, R1138 += 1 };
  s2 -> s1 [66, 65535] { R1188 += 1, R1138 += 1 };
  s3 -> s3 [0, 65535] { R1188 += 1, R1138 += 1 };
  s3 -> s6 [0, 65535] { R1188 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1188 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1188 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1120 && R2 = R1188 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1101 = 0 && R1102 = R1120 && R1103 = 0 && R1104 = R1120 && R1105 = 0 && R1106 = R1120 && R1107 = 0 && R1108 = R1120 && R1109 = 0 && R1110 = R1120 && R1111 = 0 && R1112 = R1120 && R1113 = 0 && R1114 = R1120 && R1115 = 0 && R1116 = R1120 && R1117 = 0 && R1118 = R1120 && R1119 = 0 && R1129 = 0 && R1130 = 0 && R1135 = 0 && R1136 = 0 && R1139 = 10 && R1140 = R1188 && R1141 = 10 && R1142 = R1188 && R1143 = 10 && R1144 = R1188 && R1145 = 10 && R1146 = R1188 && R1147 = 10 && R1148 = R1188 && R1149 = 10 && R1150 = R1188 && R1151 = 10 && R1152 = R1188 && R1153 = 10 && R1154 = R1188 && R1155 = 10 && R1156 = R1188 && R1157 = 10 && R1158 = R1188 && R1159 = 10 && R1160 = R1188 && R1161 = 10 && R1162 = R1188 && R1163 = 10 && R1164 = R1188 && R1165 = 10 && R1166 = R1188 && R1167 = 10 && R1168 = R1188 && R1169 = 10 && R1170 = R1188 && R1171 = 10 && R1172 = R1188 && R1173 = 10 && R1174 = R1188 && R1175 = 10 && R1176 = R1188 && R1177 = 10 && R1178 = R1188 && R1179 = 10 && R1180 = R1188 && R1181 = 10 && R1182 = R1188 && R1183 = 10 && R1184 = R1188 && R1185 = 10 && R1186 = R1188 && R1187 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1120 && 9 < R1188 && (R14 = 0 || (R1121 = 0 && R1122 = 0)) && (R14 = 0 || (R1123 = 0 && R1124 = 0)) && (R14 = 0 || (R1125 = 0 && R1126 = 0)) && (R14 = 0 || (R1127 = 0 && R1128 = 0)) && (R14 = 0 || (R1131 = 0 && R1132 = 0)) && (R14 = 0 || (R1133 = 0 && R1134 = 0)) && (R14 = 0 || (R1137 = 0 && R1138 = 0)) && (R906 + R903 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R906 + R903 = 0 || (R904 + R901 = 0 && R905 + R902 = 0)) && (R1100 + R1097 = 0 || (R1098 + R1095 = 0 && R1099 + R1096 = 0));
// End of Parikh automata intersection problem
