// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R3515, R3516, R3517, R3518, R3519, R3520, R3709, R3710, R3711, R3712, R3713, R3714, R3715, R3716, R3717, R3718, R3719, R3720, R3721, R3722, R3723, R3724, R3725, R3726, R3727, R3728, R3729, R3730, R3731, R3732, R3733, R3734, R3735, R3736, R3737, R3738, R3739, R3740, R3741, R3742, R3743, R3744, R3745, R3746, R3747, R3748, R3749, R3750, R3751, R3752, R3753, R3754, R3755, R3756, R3757, R3758, R3759, R3760, R3761, R3762, R3763, R3764, R3765, R3766, R3767, R3768, R3769, R3770, R3771, R3772, R3773, R3774, R3775, R3776, R3777, R3778, R3779, R3780, R3781, R3782, R3783, R3784, R3785, R3786, R3787, R3788, R3789, R3790, R3791, R3792, R3793, R3794, R3795, R3796, R3797, R3798, R3799, R3800, R3801, R3802, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3754 += 1 };
  s0 -> s0 [0, 65535] { R3753 += 1, R3754 += 1 };
  s0 -> s1 [45, 45] { R3754 += 1 };
  s0 -> s2 [46, 46] { R3754 += 1 };
  s0 -> s1 [48, 62] { R3754 += 1 };
  s0 -> s3 [65, 65] { R3754 += 1 };
  s0 -> s1 [66, 65535] { R3754 += 1 };
  s1 -> s1 [0, 43] { R3754 += 1 };
  s1 -> s1 [45, 45] { R3754 += 1 };
  s1 -> s2 [46, 46] { R3754 += 1 };
  s1 -> s1 [48, 62] { R3754 += 1 };
  s1 -> s3 [65, 65] { R3754 += 1 };
  s1 -> s1 [66, 65535] { R3754 += 1 };
  s2 -> s1 [0, 43] { R3754 += 1 };
  s2 -> s1 [45, 45] { R3754 += 1 };
  s2 -> s2 [46, 46] { R3754 += 1 };
  s2 -> s1 [48, 62] { R3754 += 1 };
  s2 -> s3 [65, 65] { R3754 += 1 };
  s2 -> s1 [66, 114] { R3754 += 1 };
  s2 -> s8 [115, 115] { R3754 += 1 };
  s2 -> s1 [116, 65535] { R3754 += 1 };
  s3 -> s3 [0, 43] { R3754 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3754 += 1 };
  s3 -> s4 [46, 46] { R3754 += 1 };
  s3 -> s3 [48, 62] { R3754 += 1 };
  s3 -> s3 [65, 65535] { R3754 += 1 };
  s4 -> s3 [0, 43] { R3754 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3754 += 1 };
  s4 -> s4 [46, 46] { R3754 += 1 };
  s4 -> s3 [48, 62] { R3754 += 1 };
  s4 -> s3 [65, 114] { R3754 += 1 };
  s4 -> s5 [115, 115] { R3754 += 1 };
  s4 -> s3 [116, 65535] { R3754 += 1 };
  s5 -> s3 [0, 43] { R3754 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3754 += 1 };
  s5 -> s4 [46, 46] { R3754 += 1 };
  s5 -> s3 [48, 62] { R3754 += 1 };
  s5 -> s3 [65, 110] { R3754 += 1 };
  s5 -> s6 [111, 111] { R3754 += 1 };
  s5 -> s3 [112, 65535] { R3754 += 1 };
  s6 -> s3 [0, 43] { R3754 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3754 += 1 };
  s6 -> s4 [46, 46] { R3754 += 1 };
  s6 -> s3 [48, 62] { R3754 += 1 };
  s6 -> s3 [65, 98] { R3754 += 1 };
  s6 -> s7 [99, 99] { R3754 += 1 };
  s6 -> s3 [100, 65535] { R3754 += 1 };
  s7 -> s3 [0, 43] { R3754 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3754 += 1 };
  s7 -> s4 [46, 46] { R3754 += 1 };
  s7 -> s3 [48, 62] { R3754 += 1 };
  s7 -> s3 [65, 106] { R3754 += 1 };
  s7 -> s3 [108, 65535] { R3754 += 1 };
  s8 -> s1 [0, 43] { R3754 += 1 };
  s8 -> s1 [45, 45] { R3754 += 1 };
  s8 -> s2 [46, 46] { R3754 += 1 };
  s8 -> s1 [48, 62] { R3754 += 1 };
  s8 -> s3 [65, 65] { R3754 += 1 };
  s8 -> s1 [66, 110] { R3754 += 1 };
  s8 -> s9 [111, 111] { R3754 += 1 };
  s8 -> s1 [112, 65535] { R3754 += 1 };
  s9 -> s1 [0, 43] { R3754 += 1 };
  s9 -> s1 [45, 45] { R3754 += 1 };
  s9 -> s2 [46, 46] { R3754 += 1 };
  s9 -> s1 [48, 62] { R3754 += 1 };
  s9 -> s3 [65, 65] { R3754 += 1 };
  s9 -> s1 [66, 98] { R3754 += 1 };
  s9 -> s10 [99, 99] { R3754 += 1 };
  s9 -> s1 [100, 65535] { R3754 += 1 };
  s10 -> s1 [0, 43] { R3754 += 1 };
  s10 -> s1 [45, 45] { R3754 += 1 };
  s10 -> s2 [46, 46] { R3754 += 1 };
  s10 -> s1 [48, 62] { R3754 += 1 };
  s10 -> s3 [65, 65] { R3754 += 1 };
  s10 -> s1 [66, 106] { R3754 += 1 };
  s10 -> s1 [108, 65535] { R3754 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3755 += 1, R3756 += 1 };
  s0 -> s1 [0, 65535] { R3756 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3756 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3758 += 1 };
  s0 -> s0 [0, 65535] { R3757 += 1, R3758 += 1 };
  s0 -> s2 [0, 65535] { R3758 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R3758 += 1 };
  s0 -> s1 [59, 65535] { R3758 += 1 };
  s1 -> s1 [0, 57] { R3758 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3758 += 1 };
  s1 -> s1 [59, 65535] { R3758 += 1 };
  s2 -> s1 [0, 57] { R3758 += 1 };
  s2 -> s2 [0, 65535] { R3758 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3758 += 1 };
  s2 -> s1 [59, 65535] { R3758 += 1 };
  s3 -> s3 [0, 65535] { R3758 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3760 += 1 };
  s0 -> s0 [0, 65535] { R3759 += 1, R3760 += 1 };
  s0 -> s2 [0, 65535] { R3760 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3760 += 1 };
  s0 -> s1 [66, 65535] { R3760 += 1 };
  s1 -> s1 [0, 64] { R3760 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3760 += 1 };
  s1 -> s1 [66, 65535] { R3760 += 1 };
  s2 -> s1 [0, 64] { R3760 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3760 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R3760 += 1 };
  s2 -> s1 [66, 65535] { R3760 += 1 };
  s3 -> s3 [0, 65535] { R3760 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3762 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3761 += 1, R3762 += 1 };
  s0 -> s2 [0, 65535] { R3762 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R3762 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3762 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R3762 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R3762 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3762 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R3762 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3762 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3762 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3762 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3762 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3764 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3763 += 1, R3764 += 1 };
  s0 -> s2 [0, 65535] { R3764 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R3764 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3764 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R3764 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3764 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R3764 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3766 += 1, R3716 += 1 };
  s0 -> s0 [0, 65535] { R3765 += 1, R3766 += 1 };
  s0 -> s2 [0, 65535] { R3766 += 1, R3715 += 1, R3716 += 1 };
  s0 -> s1 [66, 65535] { R3766 += 1, R3716 += 1 };
  s1 -> s1 [0, 64] { R3766 += 1, R3716 += 1 };
  s1 -> s1 [0, 65535] { R3766 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3766 += 1, R3716 += 1 };
  s2 -> s1 [0, 64] { R3766 += 1, R3716 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3766 += 1, R3715 += 1, R3716 += 1 };
  s2 -> s1 [66, 65535] { R3766 += 1, R3716 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3768 += 1, R3717 += 1, R3718 += 1 };
  s0 -> s0 [0, 65535] { R3767 += 1, R3768 += 1 };
  s0 -> s2 [0, 65535] { R3768 += 1, R3718 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3768 += 1, R3717 += 1, R3718 += 1 };
  s1 -> s2 [0, 65535] { R3768 += 1, R3718 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3768 += 1 };
  s2 -> s2 [0, 65535] { R3768 += 1, R3718 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3768 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3770 += 1, R3720 += 1 };
  s0 -> s2 [0, 65535] { R3770 += 1, R3719 += 1, R3720 += 1 };
  s0 -> s0 [0, 65535] { R3769 += 1, R3770 += 1 };
  s0 -> s1 [80, 65535] { R3770 += 1, R3720 += 1 };
  s1 -> s1 [0, 65] { R3770 += 1, R3720 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3770 += 1 };
  s1 -> s1 [80, 65535] { R3770 += 1, R3720 += 1 };
  s2 -> s1 [0, 65] { R3770 += 1, R3720 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3770 += 1, R3719 += 1, R3720 += 1 };
  s2 -> s1 [80, 65535] { R3770 += 1, R3720 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3771 += 1, R3772 += 1 };
  s0 -> s1 [0, 65535] { R3772 += 1, R3722 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R3772 += 1, R3721 += 1, R3722 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3772 += 1, R3722 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R3772 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3772 += 1, R3722 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R3772 += 1, R3721 += 1, R3722 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3772 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R3774 += 1, R3724 += 1 };
  s0 -> s2 [0, 65535] { R3774 += 1, R3723 += 1, R3724 += 1 };
  s0 -> s0 [0, 65535] { R3773 += 1, R3774 += 1 };
  s0 -> s1 [81, 65535] { R3774 += 1, R3724 += 1 };
  s1 -> s1 [0, 79] { R3774 += 1, R3724 += 1 };
  s1 -> s1 [0, 65535] { R3774 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R3774 += 1, R3724 += 1 };
  s2 -> s1 [0, 79] { R3774 += 1, R3724 += 1 };
  s2 -> s2 [0, 65535] { R3774 += 1, R3723 += 1, R3724 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R3774 += 1, R3724 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s0 -> s2 [0, 65535] { R3776 += 1, R3726 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R3775 += 1, R3776 += 1 };
  s0 -> s3 [0, 65535] { R3776 += 1, R3725 += 1, R3726 += 1 };
  s0 -> s1 [81, 65535] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s1 -> s1 [0, 79] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3776 += 1, R3726 += 1 };
  s1 -> s5 [0, 65535] { R3776 += 1 };
  s1 -> s1 [81, 65535] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s2 -> s1 [0, 79] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s2 -> s2 [0, 65535] { R3776 += 1, R3726 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3776 += 1 };
  s2 -> s1 [81, 65535] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s3 -> s1 [0, 79] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s3 -> s2 [0, 65535] { R3776 += 1, R3726 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3776 += 1, R3725 += 1, R3726 += 1 };
  s3 -> s1 [81, 65535] { R3776 += 1, R3726 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3776 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3778 += 1, R3728 += 1, R3519 += 1, R3520 += 1 };
  s0 -> s2 [0, 65535] { R3778 += 1, R3728 += 1, R3518 += 1, R3519 += 1 };
  s0 -> s0 [0, 65535] { R3777 += 1, R3778 += 1 };
  s0 -> s3 [0, 65535] { R3778 += 1, R3727 += 1, R3728 += 1 };
  s1 -> s1 [0, 65535] { R3778 += 1, R3728 += 1, R3519 += 1, R3520 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R3778 += 1, R3728 += 1 };
  s1 -> s5 [0, 65535] { R3778 += 1 };
  s2 -> s1 [0, 65535] { R3778 += 1, R3728 += 1, R3519 += 1, R3520 += 1 };
  s2 -> s2 [0, 65535] { R3778 += 1, R3728 += 1, R3518 += 1, R3519 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3778 += 1 };
  s3 -> s1 [0, 65535] { R3778 += 1, R3728 += 1, R3519 += 1, R3520 += 1 };
  s3 -> s2 [0, 65535] { R3778 += 1, R3728 += 1, R3518 += 1, R3519 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3778 += 1, R3727 += 1, R3728 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3778 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3778 += 1, R3728 += 1 };
  s6 -> s5 [0, 65535] { R3778 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3779 += 1, R3780 += 1 };
  s0 -> s1 [0, 65535] { R3780 += 1, R3730 += 1 };
  s0 -> s2 [0, 65535] { R3780 += 1, R3729 += 1, R3730 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3780 += 1 };
  s1 -> s1 [0, 65535] { R3780 += 1, R3730 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3780 += 1, R3730 += 1 };
  s2 -> s2 [0, 65535] { R3780 += 1, R3729 += 1, R3730 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3780 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3782 += 1, R3732 += 1 };
  s0 -> s0 [0, 65535] { R3781 += 1, R3782 += 1 };
  s0 -> s2 [0, 65535] { R3782 += 1, R3731 += 1, R3732 += 1 };
  s1 -> s4 [0, 65535] { R3782 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3782 += 1, R3732 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3782 += 1, R3732 += 1 };
  s2 -> s2 [0, 65535] { R3782 += 1, R3731 += 1, R3732 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3782 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3784 += 1, R3734 += 1 };
  s0 -> s2 [0, 65535] { R3784 += 1, R3733 += 1, R3734 += 1 };
  s0 -> s0 [0, 65535] { R3783 += 1, R3784 += 1 };
  s1 -> s1 [0, 65535] { R3784 += 1, R3734 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3784 += 1 };
  s2 -> s1 [0, 65535] { R3784 += 1, R3734 += 1 };
  s2 -> s2 [0, 65535] { R3784 += 1, R3733 += 1, R3734 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3784 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3786 += 1, R3736 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3785 += 1, R3786 += 1 };
  s0 -> s2 [0, 65535] { R3786 += 1, R3735 += 1, R3736 += 1 };
  s1 -> s1 [0, 65535] { R3786 += 1, R3736 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3786 += 1 };
  s2 -> s1 [0, 65535] { R3786 += 1, R3736 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3786 += 1, R3735 += 1, R3736 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3786 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3788 += 1, R3738 += 1 };
  s0 -> s0 [0, 65535] { R3787 += 1, R3788 += 1 };
  s0 -> s2 [0, 65535] { R3788 += 1, R3737 += 1, R3738 += 1 };
  s0 -> s3 [65, 65] { R3788 += 1, R3738 += 1 };
  s0 -> s4 [65, 65] { R3788 += 1, R3738 += 1 };
  s0 -> s5 [80, 80] { R3788 += 1, R3738 += 1 };
  s0 -> s1 [81, 65535] { R3788 += 1, R3738 += 1 };
  s1 -> s1 [0, 64] { R3788 += 1, R3738 += 1 };
  s1 -> s3 [65, 65] { R3788 += 1, R3738 += 1 };
  s1 -> s4 [65, 65] { R3788 += 1, R3738 += 1 };
  s1 -> s5 [80, 80] { R3788 += 1, R3738 += 1 };
  s1 -> s1 [81, 65535] { R3788 += 1, R3738 += 1 };
  s2 -> s1 [0, 64] { R3788 += 1, R3738 += 1 };
  s2 -> s2 [0, 65535] { R3788 += 1, R3737 += 1, R3738 += 1 };
  s2 -> s3 [65, 65] { R3788 += 1, R3738 += 1 };
  s2 -> s4 [65, 65] { R3788 += 1, R3738 += 1 };
  s2 -> s5 [80, 80] { R3788 += 1, R3738 += 1 };
  s2 -> s1 [81, 65535] { R3788 += 1, R3738 += 1 };
  s3 -> s3 [0, 65] { R3788 += 1, R3738 += 1 };
  s3 -> s7 [80, 80] { R3788 += 1, R3738 += 1 };
  s3 -> s3 [81, 65535] { R3788 += 1, R3738 += 1 };
  s5 -> s5 [0, 64] { R3788 += 1, R3738 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3788 += 1 };
  s5 -> s7 [65, 65] { R3788 += 1, R3738 += 1 };
  s5 -> s8 [65, 65] { R3788 += 1, R3738 += 1 };
  s5 -> s5 [80, 65535] { R3788 += 1, R3738 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3788 += 1, R3738 += 1 };
  s7 -> s7 [0, 65535] { R3788 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [80, 65535] { R3788 += 1, R3738 += 1 };
  s8 -> s8 [0, 65535] { R3788 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3789 += 1, R3790 += 1 };
  s0 -> s2 [0, 65535] { R3790 += 1, R3739 += 1, R3740 += 1 };
  s0 -> s3 [65, 65] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3790 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3790 += 1, R3739 += 1, R3740 += 1 };
  s2 -> s3 [65, 65] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3790 += 1, R3740 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R3790 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3790 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3790 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3792 += 1, R3742 += 1 };
  s0 -> s2 [0, 64] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R3791 += 1, R3792 += 1 };
  s0 -> s3 [0, 65535] { R3792 += 1, R3741 += 1, R3742 += 1 };
  s0 -> s4 [65, 65] { R3792 += 1, R3742 += 1 };
  s0 -> s5 [65, 65] { R3792 += 1, R3742 += 1 };
  s0 -> s6 [65, 65] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s0 -> s1 [66, 79] { R3792 += 1, R3742 += 1 };
  s0 -> s2 [66, 65535] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R3792 += 1, R3742 += 1 };
  s1 -> s1 [0, 64] { R3792 += 1, R3742 += 1 };
  s1 -> s1 [0, 65535] { R3792 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R3792 += 1, R3742 += 1 };
  s1 -> s5 [65, 65] { R3792 += 1, R3742 += 1 };
  s1 -> s1 [66, 79] { R3792 += 1, R3742 += 1 };
  s1 -> s1 [81, 65535] { R3792 += 1, R3742 += 1 };
  s2 -> s1 [0, 64] { R3792 += 1, R3742 += 1 };
  s2 -> s2 [0, 64] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R3792 += 1, R3742 += 1 };
  s2 -> s5 [65, 65] { R3792 += 1, R3742 += 1 };
  s2 -> s6 [65, 65] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s2 -> s7 [65, 65] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s2 -> s1 [66, 79] { R3792 += 1, R3742 += 1 };
  s2 -> s2 [66, 65535] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R3792 += 1, R3742 += 1 };
  s3 -> s1 [0, 64] { R3792 += 1, R3742 += 1 };
  s3 -> s2 [0, 64] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R3792 += 1, R3741 += 1, R3742 += 1 };
  s3 -> s4 [65, 65] { R3792 += 1, R3742 += 1 };
  s3 -> s5 [65, 65] { R3792 += 1, R3742 += 1 };
  s3 -> s6 [65, 65] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s3 -> s1 [66, 79] { R3792 += 1, R3742 += 1 };
  s3 -> s2 [66, 65535] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R3792 += 1, R3742 += 1 };
  s4 -> s4 [0, 79] { R3792 += 1, R3742 += 1 };
  s4 -> s4 [0, 65535] { R3792 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R3792 += 1, R3742 += 1 };
  s5 -> s5 [0, 65535] { R3792 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 79] { R3792 += 1, R3742 += 1 };
  s7 -> s7 [0, 65535] { R3792 += 1, R3742 += 1, R3509 += 1 };
  s7 -> s4 [81, 65535] { R3792 += 1, R3742 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s2 [0, 65535] { R3794 += 1, R3743 += 1, R3744 += 1 };
  s0 -> s0 [0, 65535] { R3793 += 1, R3794 += 1 };
  s0 -> s3 [65, 65] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3794 += 1 };
  s1 -> s3 [65, 65] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s2 [0, 65535] { R3794 += 1, R3743 += 1, R3744 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3794 += 1 };
  s3 -> s3 [0, 65535] { R3794 += 1, R3744 += 1, R3511 += 1, R3512 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3794 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3794 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s2 [0, 65535] { R3796 += 1, R3745 += 1, R3746 += 1 };
  s0 -> s0 [0, 65535] { R3795 += 1, R3796 += 1 };
  s0 -> s3 [65, 65] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s4 [65, 65] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s1 [66, 65535] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [0, 64] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3796 += 1 };
  s1 -> s3 [65, 65] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s4 [65, 65] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [66, 65535] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s1 [0, 64] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3796 += 1, R3745 += 1, R3746 += 1 };
  s2 -> s3 [65, 65] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s4 [65, 65] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s1 [66, 65535] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3796 += 1 };
  s3 -> s3 [0, 65535] { R3796 += 1, R3746 += 1, R3515 += 1, R3516 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3796 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3796 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3798 += 1, R3748 += 1 };
  s0 -> s0 [0, 65535] { R3797 += 1, R3798 += 1 };
  s0 -> s2 [0, 65535] { R3798 += 1, R3747 += 1, R3748 += 1 };
  s0 -> s3 [65, 65] { R3798 += 1, R3748 += 1 };
  s0 -> s4 [65, 65] { R3798 += 1, R3748 += 1 };
  s0 -> s1 [66, 65535] { R3798 += 1, R3748 += 1 };
  s1 -> s1 [0, 64] { R3798 += 1, R3748 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3798 += 1 };
  s1 -> s3 [65, 65] { R3798 += 1, R3748 += 1 };
  s1 -> s4 [65, 65] { R3798 += 1, R3748 += 1 };
  s1 -> s1 [66, 65535] { R3798 += 1, R3748 += 1 };
  s2 -> s1 [0, 64] { R3798 += 1, R3748 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3798 += 1, R3747 += 1, R3748 += 1 };
  s2 -> s3 [65, 65] { R3798 += 1, R3748 += 1 };
  s2 -> s4 [65, 65] { R3798 += 1, R3748 += 1 };
  s2 -> s1 [66, 65535] { R3798 += 1, R3748 += 1 };
  s3 -> s3 [0, 65535] { R3798 += 1, R3748 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3798 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3798 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3798 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s0 -> s2 [0, 64] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s0 -> s0 [0, 65535] { R3799 += 1, R3800 += 1 };
  s0 -> s3 [0, 65535] { R3800 += 1, R3749 += 1, R3750 += 1 };
  s0 -> s4 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s0 -> s5 [65, 65] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s0 -> s6 [65, 65] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s0 -> s7 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s0 -> s1 [66, 65535] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s0 -> s2 [66, 65535] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s1 -> s1 [0, 64] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s1 -> s2 [0, 64] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s1 -> s4 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s1 -> s5 [65, 65] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s1 -> s6 [65, 65] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s1 -> s7 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s1 -> s1 [66, 65535] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s1 -> s2 [66, 65535] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s2 -> s11 [0, 64] { R3800 += 1, R3750 += 1 };
  s2 -> s2 [0, 64] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s2 -> s12 [65, 65] { R3800 += 1, R3750 += 1 };
  s2 -> s4 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s2 -> s8 [65, 65] { R3800 += 1, R3750 += 1 };
  s2 -> s7 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s2 -> s11 [66, 65535] { R3800 += 1, R3750 += 1 };
  s2 -> s2 [66, 65535] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s3 -> s1 [0, 64] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s3 -> s2 [0, 64] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s3 -> s3 [0, 65535] { R3800 += 1, R3749 += 1, R3750 += 1 };
  s3 -> s4 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s3 -> s5 [65, 65] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s3 -> s6 [65, 65] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s3 -> s7 [65, 65] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s3 -> s1 [66, 65535] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s3 -> s2 [66, 65535] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s6 -> s6 [0, 65535] { R3800 += 1, R3750 += 1, R3709 += 1, R3710 += 1 };
  s6 -> s7 [0, 65535] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s7 -> s8 [0, 65535] { R3800 += 1, R3750 += 1 };
  s7 -> s7 [0, 65535] { R3800 += 1, R3750 += 1, R3710 += 1, R3711 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3800 += 1, R3750 += 1 };
  s8 -> s10 [0, 65535] { R3800 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3800 += 1 };
  s11 -> s11 [0, 64] { R3800 += 1, R3750 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3800 += 1 };
  s11 -> s12 [65, 65] { R3800 += 1, R3750 += 1 };
  s11 -> s8 [65, 65] { R3800 += 1, R3750 += 1 };
  s11 -> s11 [66, 65535] { R3800 += 1, R3750 += 1 };
  s12 -> s12 [0, 65535] { R3800 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3802 += 1, R3752 += 1 };
  s0 -> s0 [0, 65535] { R3801 += 1, R3802 += 1 };
  s0 -> s2 [0, 65535] { R3802 += 1, R3751 += 1, R3752 += 1 };
  s0 -> s3 [65, 65] { R3802 += 1, R3752 += 1 };
  s0 -> s4 [65, 65] { R3802 += 1, R3752 += 1 };
  s0 -> s1 [66, 65535] { R3802 += 1, R3752 += 1 };
  s1 -> s1 [0, 64] { R3802 += 1, R3752 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3802 += 1 };
  s1 -> s3 [65, 65] { R3802 += 1, R3752 += 1 };
  s1 -> s4 [65, 65] { R3802 += 1, R3752 += 1 };
  s1 -> s1 [66, 65535] { R3802 += 1, R3752 += 1 };
  s2 -> s1 [0, 64] { R3802 += 1, R3752 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3802 += 1, R3751 += 1, R3752 += 1 };
  s2 -> s3 [65, 65] { R3802 += 1, R3752 += 1 };
  s2 -> s4 [65, 65] { R3802 += 1, R3752 += 1 };
  s2 -> s1 [66, 65535] { R3802 += 1, R3752 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3802 += 1, R3752 += 1 };
  s3 -> s6 [0, 65535] { R3802 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3802 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3802 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3734 && R2 = R3802 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3715 = 0 && R3716 = R3734 && R3717 = 0 && R3718 = R3734 && R3719 = 0 && R3720 = R3734 && R3721 = 0 && R3722 = R3734 && R3723 = 0 && R3724 = R3734 && R3725 = 0 && R3726 = R3734 && R3727 = 0 && R3728 = R3734 && R3729 = 0 && R3730 = R3734 && R3731 = 0 && R3732 = R3734 && R3733 = 0 && R3737 = 0 && R3738 = 0 && R3741 = 0 && R3742 = 0 && R3749 = 0 && R3750 = 0 && R3753 = 10 && R3754 = R3802 && R3755 = 10 && R3756 = R3802 && R3757 = 10 && R3758 = R3802 && R3759 = 10 && R3760 = R3802 && R3761 = 10 && R3762 = R3802 && R3763 = 10 && R3764 = R3802 && R3765 = 10 && R3766 = R3802 && R3767 = 10 && R3768 = R3802 && R3769 = 10 && R3770 = R3802 && R3771 = 10 && R3772 = R3802 && R3773 = 10 && R3774 = R3802 && R3775 = 10 && R3776 = R3802 && R3777 = 10 && R3778 = R3802 && R3779 = 10 && R3780 = R3802 && R3781 = 10 && R3782 = R3802 && R3783 = 10 && R3784 = R3802 && R3785 = 10 && R3786 = R3802 && R3787 = 10 && R3788 = R3802 && R3789 = 10 && R3790 = R3802 && R3791 = 10 && R3792 = R3802 && R3793 = 10 && R3794 = R3802 && R3795 = 10 && R3796 = R3802 && R3797 = 10 && R3798 = R3802 && R3799 = 10 && R3800 = R3802 && R3801 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R3734 && 9 < R3802 && (R14 = 0 || (R3735 = 0 && R3736 = 0)) && (R14 = 0 || (R3739 = 0 && R3740 = 0)) && (R14 = 0 || (R3743 = 0 && R3744 = 0)) && (R14 = 0 || (R3745 = 0 && R3746 = 0)) && (R14 = 0 || (R3747 = 0 && R3748 = 0)) && (R14 = 0 || (R3751 = 0 && R3752 = 0)) && (R3520 + R3517 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R3520 + R3517 = 0 || (R3518 + R3515 = 0 && R3519 + R3516 = 0)) && (R3714 + R3711 = 0 || (R3712 + R3709 = 0 && R3713 + R3710 = 0));
// End of Parikh automata intersection problem
