// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R1243, R1244, R1245, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R1275, R1276, R1277, R1278, R1279, R1280, R1281, R1282, R1283, R1284, R1285, R1286, R1287, R1288, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1240 += 1 };
  s0 -> s0 [0, 65535] { R1239 += 1, R1240 += 1 };
  s0 -> s1 [45, 45] { R1240 += 1 };
  s0 -> s2 [46, 46] { R1240 += 1 };
  s0 -> s1 [48, 62] { R1240 += 1 };
  s0 -> s3 [65, 65] { R1240 += 1 };
  s0 -> s1 [66, 65535] { R1240 += 1 };
  s1 -> s1 [0, 43] { R1240 += 1 };
  s1 -> s1 [45, 45] { R1240 += 1 };
  s1 -> s2 [46, 46] { R1240 += 1 };
  s1 -> s1 [48, 62] { R1240 += 1 };
  s1 -> s3 [65, 65] { R1240 += 1 };
  s1 -> s1 [66, 65535] { R1240 += 1 };
  s2 -> s1 [0, 43] { R1240 += 1 };
  s2 -> s1 [45, 45] { R1240 += 1 };
  s2 -> s2 [46, 46] { R1240 += 1 };
  s2 -> s1 [48, 62] { R1240 += 1 };
  s2 -> s3 [65, 65] { R1240 += 1 };
  s2 -> s1 [66, 114] { R1240 += 1 };
  s2 -> s8 [115, 115] { R1240 += 1 };
  s2 -> s1 [116, 65535] { R1240 += 1 };
  s3 -> s3 [0, 43] { R1240 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1240 += 1 };
  s3 -> s4 [46, 46] { R1240 += 1 };
  s3 -> s3 [48, 62] { R1240 += 1 };
  s3 -> s3 [65, 65535] { R1240 += 1 };
  s4 -> s3 [0, 43] { R1240 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1240 += 1 };
  s4 -> s4 [46, 46] { R1240 += 1 };
  s4 -> s3 [48, 62] { R1240 += 1 };
  s4 -> s3 [65, 114] { R1240 += 1 };
  s4 -> s5 [115, 115] { R1240 += 1 };
  s4 -> s3 [116, 65535] { R1240 += 1 };
  s5 -> s3 [0, 43] { R1240 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1240 += 1 };
  s5 -> s4 [46, 46] { R1240 += 1 };
  s5 -> s3 [48, 62] { R1240 += 1 };
  s5 -> s3 [65, 110] { R1240 += 1 };
  s5 -> s6 [111, 111] { R1240 += 1 };
  s5 -> s3 [112, 65535] { R1240 += 1 };
  s6 -> s3 [0, 43] { R1240 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1240 += 1 };
  s6 -> s4 [46, 46] { R1240 += 1 };
  s6 -> s3 [48, 62] { R1240 += 1 };
  s6 -> s3 [65, 98] { R1240 += 1 };
  s6 -> s7 [99, 99] { R1240 += 1 };
  s6 -> s3 [100, 65535] { R1240 += 1 };
  s7 -> s3 [0, 43] { R1240 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1240 += 1 };
  s7 -> s4 [46, 46] { R1240 += 1 };
  s7 -> s3 [48, 62] { R1240 += 1 };
  s7 -> s3 [65, 106] { R1240 += 1 };
  s7 -> s3 [108, 65535] { R1240 += 1 };
  s8 -> s1 [0, 43] { R1240 += 1 };
  s8 -> s1 [45, 45] { R1240 += 1 };
  s8 -> s2 [46, 46] { R1240 += 1 };
  s8 -> s1 [48, 62] { R1240 += 1 };
  s8 -> s3 [65, 65] { R1240 += 1 };
  s8 -> s1 [66, 110] { R1240 += 1 };
  s8 -> s9 [111, 111] { R1240 += 1 };
  s8 -> s1 [112, 65535] { R1240 += 1 };
  s9 -> s1 [0, 43] { R1240 += 1 };
  s9 -> s1 [45, 45] { R1240 += 1 };
  s9 -> s2 [46, 46] { R1240 += 1 };
  s9 -> s1 [48, 62] { R1240 += 1 };
  s9 -> s3 [65, 65] { R1240 += 1 };
  s9 -> s1 [66, 98] { R1240 += 1 };
  s9 -> s10 [99, 99] { R1240 += 1 };
  s9 -> s1 [100, 65535] { R1240 += 1 };
  s10 -> s1 [0, 43] { R1240 += 1 };
  s10 -> s1 [45, 45] { R1240 += 1 };
  s10 -> s2 [46, 46] { R1240 += 1 };
  s10 -> s1 [48, 62] { R1240 += 1 };
  s10 -> s3 [65, 65] { R1240 += 1 };
  s10 -> s1 [66, 106] { R1240 += 1 };
  s10 -> s1 [108, 65535] { R1240 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1242 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1241 += 1, R1242 += 1 };
  s1 -> s1 [0, 65535] { R1242 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1244 += 1 };
  s0 -> s2 [0, 65535] { R1244 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1243 += 1, R1244 += 1 };
  s0 -> s3 [58, 58] { R1244 += 1 };
  s0 -> s1 [59, 65535] { R1244 += 1 };
  s1 -> s1 [0, 57] { R1244 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1244 += 1 };
  s1 -> s1 [59, 65535] { R1244 += 1 };
  s2 -> s1 [0, 57] { R1244 += 1 };
  s2 -> s2 [0, 65535] { R1244 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R1244 += 1 };
  s2 -> s1 [59, 65535] { R1244 += 1 };
  s3 -> s3 [0, 65535] { R1244 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1246 += 1 };
  s0 -> s0 [0, 65535] { R1245 += 1, R1246 += 1 };
  s0 -> s2 [0, 65535] { R1246 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1246 += 1 };
  s0 -> s1 [66, 65535] { R1246 += 1 };
  s1 -> s1 [0, 64] { R1246 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1246 += 1 };
  s1 -> s1 [66, 65535] { R1246 += 1 };
  s2 -> s1 [0, 64] { R1246 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1246 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R1246 += 1 };
  s2 -> s1 [66, 65535] { R1246 += 1 };
  s3 -> s3 [0, 65535] { R1246 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1248 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R1248 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1247 += 1, R1248 += 1 };
  s0 -> s3 [91, 91] { R1248 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1248 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1248 += 1 };
  s1 -> s1 [0, 65535] { R1248 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R1248 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R1248 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R1248 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1248 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1248 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1248 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1250 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1249 += 1, R1250 += 1 };
  s0 -> s2 [0, 65535] { R1250 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1250 += 1 };
  s1 -> s1 [0, 65535] { R1250 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1250 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1250 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1250 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1252 += 1, R1202 += 1 };
  s0 -> s0 [0, 65535] { R1251 += 1, R1252 += 1 };
  s0 -> s2 [0, 65535] { R1252 += 1, R1201 += 1, R1202 += 1 };
  s0 -> s1 [66, 65535] { R1252 += 1, R1202 += 1 };
  s1 -> s1 [0, 64] { R1252 += 1, R1202 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1252 += 1 };
  s1 -> s1 [66, 65535] { R1252 += 1, R1202 += 1 };
  s2 -> s1 [0, 64] { R1252 += 1, R1202 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1252 += 1, R1201 += 1, R1202 += 1 };
  s2 -> s1 [66, 65535] { R1252 += 1, R1202 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1254 += 1, R1203 += 1, R1204 += 1 };
  s0 -> s0 [0, 65535] { R1253 += 1, R1254 += 1 };
  s0 -> s2 [0, 65535] { R1254 += 1, R1204 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1254 += 1, R1203 += 1, R1204 += 1 };
  s1 -> s2 [0, 65535] { R1254 += 1, R1204 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1254 += 1, R1204 += 1, R13 += 1 };
  s2 -> s4 [0, 65535] { R1254 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1254 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1256 += 1, R1206 += 1 };
  s0 -> s0 [0, 65535] { R1255 += 1, R1256 += 1 };
  s0 -> s2 [0, 65535] { R1256 += 1, R1205 += 1, R1206 += 1 };
  s0 -> s3 [80, 80] { R1256 += 1, R1206 += 1 };
  s0 -> s1 [81, 65535] { R1256 += 1, R1206 += 1 };
  s1 -> s1 [0, 65] { R1256 += 1, R1206 += 1 };
  s1 -> s3 [80, 80] { R1256 += 1, R1206 += 1 };
  s1 -> s1 [81, 65535] { R1256 += 1, R1206 += 1 };
  s2 -> s1 [0, 65] { R1256 += 1, R1206 += 1 };
  s2 -> s2 [0, 65535] { R1256 += 1, R1205 += 1, R1206 += 1 };
  s2 -> s3 [80, 80] { R1256 += 1, R1206 += 1 };
  s2 -> s1 [81, 65535] { R1256 += 1, R1206 += 1 };
  s3 -> s3 [0, 65] { R1256 += 1, R1206 += 1 };
  s3 -> s3 [0, 65535] { R1256 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [80, 65535] { R1256 += 1, R1206 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1258 += 1, R1207 += 1, R1208 += 1 };
  s0 -> s2 [0, 65535] { R1258 += 1, R1208 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R1257 += 1, R1258 += 1 };
  s1 -> s1 [0, 65535] { R1258 += 1, R1207 += 1, R1208 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1258 += 1, R1208 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1258 += 1 };
  s2 -> s2 [0, 65535] { R1258 += 1, R1208 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1258 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R1260 += 1, R1210 += 1 };
  s0 -> s2 [0, 65535] { R1260 += 1, R1209 += 1, R1210 += 1 };
  s0 -> s0 [0, 65535] { R1259 += 1, R1260 += 1 };
  s0 -> s3 [0, 65535] { R1260 += 1, R1210 += 1, R28 += 1 };
  s0 -> s1 [81, 65535] { R1260 += 1, R1210 += 1 };
  s1 -> s1 [0, 79] { R1260 += 1, R1210 += 1 };
  s1 -> s1 [0, 65535] { R1260 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R1260 += 1, R1210 += 1 };
  s2 -> s1 [0, 79] { R1260 += 1, R1210 += 1 };
  s2 -> s2 [0, 65535] { R1260 += 1, R1209 += 1, R1210 += 1 };
  s2 -> s3 [0, 65535] { R1260 += 1, R1210 += 1, R28 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R1260 += 1, R1210 += 1 };
  s3 -> s1 [0, 79] { R1260 += 1, R1210 += 1 };
  s3 -> s4 [0, 65535] { R1260 += 1 };
  s3 -> s3 [0, 65535] { R1260 += 1, R1210 += 1, R28 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R1260 += 1, R1210 += 1 };
  s4 -> s4 [0, 65535] { R1260 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R1262 += 1, R1212 += 1, R900 += 1 };
  s0 -> s2 [0, 65535] { R1262 += 1, R1211 += 1, R1212 += 1 };
  s0 -> s1 [0, 65535] { R1262 += 1, R1212 += 1 };
  s0 -> s0 [0, 65535] { R1261 += 1, R1262 += 1 };
  s0 -> s1 [81, 65535] { R1262 += 1, R1212 += 1, R900 += 1 };
  s1 -> s1 [0, 79] { R1262 += 1, R1212 += 1, R900 += 1 };
  s1 -> s4 [0, 65535] { R1262 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1262 += 1, R1212 += 1 };
  s1 -> s1 [81, 65535] { R1262 += 1, R1212 += 1, R900 += 1 };
  s2 -> s1 [0, 79] { R1262 += 1, R1212 += 1, R900 += 1 };
  s2 -> s2 [0, 65535] { R1262 += 1, R1211 += 1, R1212 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1262 += 1, R1212 += 1 };
  s2 -> s1 [81, 65535] { R1262 += 1, R1212 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1262 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1264 += 1, R1213 += 1, R1214 += 1 };
  s0 -> s2 [0, 65535] { R1264 += 1, R1214 += 1, R1193 += 1, R1194 += 1 };
  s0 -> s3 [0, 65535] { R1264 += 1, R1214 += 1 };
  s0 -> s0 [0, 65535] { R1263 += 1, R1264 += 1 };
  s1 -> s1 [0, 65535] { R1264 += 1, R1213 += 1, R1214 += 1 };
  s1 -> s2 [0, 65535] { R1264 += 1, R1214 += 1, R1193 += 1, R1194 += 1 };
  s1 -> s3 [0, 65535] { R1264 += 1, R1214 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1264 += 1 };
  s2 -> s2 [0, 65535] { R1264 += 1, R1214 += 1, R1193 += 1, R1194 += 1 };
  s2 -> s3 [0, 65535] { R1264 += 1, R1214 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1264 += 1 };
  s3 -> s3 [0, 65535] { R1264 += 1, R1214 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1264 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1266 += 1, R1215 += 1, R1216 += 1 };
  s0 -> s2 [0, 65535] { R1266 += 1, R1216 += 1 };
  s0 -> s0 [0, 65535] { R1265 += 1, R1266 += 1 };
  s1 -> s1 [0, 65535] { R1266 += 1, R1215 += 1, R1216 += 1 };
  s1 -> s2 [0, 65535] { R1266 += 1, R1216 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1266 += 1, R1216 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1266 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1266 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R1267 += 1, R1268 += 1 };
  s0 -> s1 [0, 65535] { R1268 += 1, R1218 += 1, R1199 += 1, R1200 += 1 };
  s0 -> s2 [0, 65535] { R1268 += 1, R1218 += 1, R1198 += 1, R1199 += 1 };
  s0 -> s3 [0, 65535] { R1268 += 1, R1217 += 1, R1218 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1268 += 1 };
  s1 -> s6 [0, 65535] { R1268 += 1, R1218 += 1 };
  s1 -> s1 [0, 65535] { R1268 += 1, R1218 += 1, R1199 += 1, R1200 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1268 += 1 };
  s2 -> s1 [0, 65535] { R1268 += 1, R1218 += 1, R1199 += 1, R1200 += 1 };
  s2 -> s2 [0, 65535] { R1268 += 1, R1218 += 1, R1198 += 1, R1199 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1268 += 1, R1218 += 1, R1199 += 1, R1200 += 1 };
  s3 -> s2 [0, 65535] { R1268 += 1, R1218 += 1, R1198 += 1, R1199 += 1 };
  s3 -> s3 [0, 65535] { R1268 += 1, R1217 += 1, R1218 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1268 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1268 += 1 };
  s6 -> s6 [0, 65535] { R1268 += 1, R1218 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1270 += 1, R1220 += 1 };
  s0 -> s2 [0, 65535] { R1270 += 1, R1219 += 1, R1220 += 1 };
  s0 -> s0 [0, 65535] { R1269 += 1, R1270 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1270 += 1, R1220 += 1 };
  s1 -> s4 [0, 65535] { R1270 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1270 += 1, R1220 += 1 };
  s2 -> s2 [0, 65535] { R1270 += 1, R1219 += 1, R1220 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1270 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1272 += 1, R1222 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R1272 += 1, R1221 += 1, R1222 += 1 };
  s0 -> s0 [0, 65535] { R1271 += 1, R1272 += 1 };
  s1 -> s1 [0, 65535] { R1272 += 1, R1222 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R1272 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1272 += 1, R1222 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R1272 += 1, R1221 += 1, R1222 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1272 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1274 += 1, R1224 += 1 };
  s0 -> s0 [0, 65535] { R1273 += 1, R1274 += 1 };
  s0 -> s2 [0, 65535] { R1274 += 1, R1223 += 1, R1224 += 1 };
  s0 -> s3 [65, 65] { R1274 += 1, R1224 += 1 };
  s0 -> s4 [65, 65] { R1274 += 1, R1224 += 1 };
  s0 -> s1 [81, 65535] { R1274 += 1, R1224 += 1 };
  s1 -> s1 [0, 64] { R1274 += 1, R1224 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1274 += 1 };
  s1 -> s3 [65, 65] { R1274 += 1, R1224 += 1 };
  s1 -> s4 [65, 65] { R1274 += 1, R1224 += 1 };
  s1 -> s1 [81, 65535] { R1274 += 1, R1224 += 1 };
  s2 -> s1 [0, 64] { R1274 += 1, R1224 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1274 += 1, R1223 += 1, R1224 += 1 };
  s2 -> s3 [65, 65] { R1274 += 1, R1224 += 1 };
  s2 -> s4 [65, 65] { R1274 += 1, R1224 += 1 };
  s2 -> s1 [81, 65535] { R1274 += 1, R1224 += 1 };
  s3 -> s3 [0, 65] { R1274 += 1, R1224 += 1 };
  s3 -> s3 [0, 65535] { R1274 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [81, 65535] { R1274 += 1, R1224 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1274 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1276 += 1, R1226 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1275 += 1, R1276 += 1 };
  s0 -> s2 [0, 65535] { R1276 += 1, R1225 += 1, R1226 += 1 };
  s0 -> s3 [65, 65] { R1276 += 1, R1226 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1276 += 1, R1226 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1276 += 1, R1226 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1276 += 1, R1226 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R1276 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1276 += 1, R1226 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1276 += 1, R1226 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1276 += 1, R1226 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1276 += 1, R1226 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R1276 += 1, R1225 += 1, R1226 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1276 += 1, R1226 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1276 += 1, R1226 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1276 += 1, R1226 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R1276 += 1, R1226 += 1, R25 += 1 };
  s3 -> s6 [0, 65535] { R1276 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1276 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1276 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1278 += 1, R1228 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1277 += 1, R1278 += 1 };
  s0 -> s2 [0, 65535] { R1278 += 1, R1227 += 1, R1228 += 1 };
  s0 -> s3 [65, 65] { R1278 += 1, R1228 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1278 += 1, R1228 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1278 += 1, R1228 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1278 += 1, R1228 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R1278 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1278 += 1, R1228 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1278 += 1, R1228 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1278 += 1, R1228 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1278 += 1, R1228 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1278 += 1, R1227 += 1, R1228 += 1 };
  s2 -> s3 [65, 65] { R1278 += 1, R1228 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1278 += 1, R1228 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1278 += 1, R1228 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R1278 += 1, R1228 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1278 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1278 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1278 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1280 += 1, R1230 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R1280 += 1, R1229 += 1, R1230 += 1 };
  s0 -> s0 [0, 65535] { R1279 += 1, R1280 += 1 };
  s0 -> s4 [65, 65] { R1280 += 1, R1230 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1280 += 1, R1230 += 1, R898 += 1 };
  s0 -> s2 [66, 79] { R1280 += 1, R1230 += 1, R898 += 1 };
  s0 -> s1 [66, 65535] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s0 -> s2 [81, 65535] { R1280 += 1, R1230 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s1 -> s2 [0, 64] { R1280 += 1, R1230 += 1, R898 += 1 };
  s1 -> s4 [65, 65] { R1280 += 1, R1230 += 1, R898 += 1 };
  s1 -> s5 [65, 65] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s1 -> s6 [65, 65] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s1 -> s7 [65, 65] { R1280 += 1, R1230 += 1, R898 += 1 };
  s1 -> s2 [66, 79] { R1280 += 1, R1230 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s1 -> s2 [81, 65535] { R1280 += 1, R1230 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1280 += 1, R1230 += 1, R898 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1280 += 1 };
  s2 -> s4 [65, 65] { R1280 += 1, R1230 += 1 };
  s2 -> s7 [65, 65] { R1280 += 1, R1230 += 1 };
  s2 -> s2 [66, 79] { R1280 += 1, R1230 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1280 += 1, R1230 += 1 };
  s2 -> s2 [81, 65535] { R1280 += 1, R1230 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1280 += 1, R1230 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1280 += 1, R1229 += 1, R1230 += 1 };
  s3 -> s4 [65, 65] { R1280 += 1, R1230 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1280 += 1, R1230 += 1, R898 += 1 };
  s3 -> s2 [66, 79] { R1280 += 1, R1230 += 1, R898 += 1 };
  s3 -> s1 [66, 65535] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s3 -> s2 [81, 65535] { R1280 += 1, R1230 += 1, R898 += 1 };
  s4 -> s4 [0, 79] { R1280 += 1, R1230 += 1, R898 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R1280 += 1, R1230 += 1 };
  s4 -> s9 [0, 65535] { R1280 += 1 };
  s4 -> s4 [81, 65535] { R1280 += 1, R1230 += 1, R898 += 1 };
  s5 -> s4 [0, 79] { R1280 += 1, R1230 += 1, R898 += 1 };
  s5 -> s5 [0, 65535] { R1280 += 1, R1230 += 1, R897 += 1, R898 += 1 };
  s5 -> s4 [81, 65535] { R1280 += 1, R1230 += 1, R898 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1280 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1280 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s2 [0, 64] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s0 [0, 65535] { R1281 += 1, R1282 += 1 };
  s0 -> s3 [0, 65535] { R1282 += 1, R1231 += 1, R1232 += 1 };
  s0 -> s4 [65, 65] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s5 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s6 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s7 [65, 65] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s1 [66, 65535] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s2 [66, 65535] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s1 [0, 64] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s2 [0, 64] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s4 [65, 65] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s5 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s6 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s7 [65, 65] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s1 [66, 65535] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s2 [66, 65535] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [0, 64] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [0, 65535] { R1282 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s5 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s6 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [66, 65535] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s1 [0, 64] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s2 [0, 64] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s3 [0, 65535] { R1282 += 1, R1231 += 1, R1232 += 1 };
  s3 -> s4 [65, 65] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s5 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s6 [65, 65] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s7 [65, 65] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s1 [66, 65535] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s2 [66, 65535] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s4 -> s4 [0, 65535] { R1282 += 1, R1232 += 1, R1189 += 1, R1190 += 1 };
  s4 -> s6 [0, 65535] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s5 -> s5 [0, 65535] { R1282 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R1282 += 1, R1232 += 1, R1190 += 1, R1191 += 1 };
  s6 -> s8 [0, 65535] { R1282 += 1 };
  s6 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1282 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s2, s9, s6;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1284 += 1, R1234 += 1 };
  s0 -> s0 [0, 65535] { R1283 += 1, R1284 += 1 };
  s0 -> s2 [0, 65535] { R1284 += 1, R1233 += 1, R1234 += 1 };
  s0 -> s3 [65, 65] { R1284 += 1, R1234 += 1 };
  s0 -> s4 [65, 65] { R1284 += 1, R1234 += 1 };
  s0 -> s1 [66, 65535] { R1284 += 1, R1234 += 1 };
  s1 -> s1 [0, 64] { R1284 += 1, R1234 += 1 };
  s1 -> s1 [0, 65535] { R1284 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1284 += 1, R1234 += 1 };
  s1 -> s4 [65, 65] { R1284 += 1, R1234 += 1 };
  s1 -> s1 [66, 65535] { R1284 += 1, R1234 += 1 };
  s2 -> s1 [0, 64] { R1284 += 1, R1234 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1284 += 1, R1233 += 1, R1234 += 1 };
  s2 -> s3 [65, 65] { R1284 += 1, R1234 += 1 };
  s2 -> s4 [65, 65] { R1284 += 1, R1234 += 1 };
  s2 -> s1 [66, 65535] { R1284 += 1, R1234 += 1 };
  s3 -> s6 [0, 65535] { R1284 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1284 += 1, R1234 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1284 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1284 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s0 -> s2 [0, 65535] { R1286 += 1, R1235 += 1, R1236 += 1 };
  s0 -> s0 [0, 65535] { R1285 += 1, R1286 += 1 };
  s0 -> s3 [65, 65] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s0 -> s4 [65, 65] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s0 -> s1 [66, 65535] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s1 -> s1 [0, 64] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s1 -> s1 [0, 65535] { R1286 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s1 -> s4 [65, 65] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s1 -> s1 [66, 65535] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s2 -> s1 [0, 64] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1286 += 1, R1235 += 1, R1236 += 1 };
  s2 -> s3 [65, 65] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s2 -> s4 [65, 65] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s2 -> s1 [66, 65535] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1286 += 1 };
  s4 -> s5 [0, 65535] { R1286 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1286 += 1, R1236 += 1, R1195 += 1, R1196 += 1 };
  s5 -> s5 [0, 65535] { R1286 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1288 += 1, R1238 += 1 };
  s0 -> s0 [0, 65535] { R1287 += 1, R1288 += 1 };
  s0 -> s2 [0, 65535] { R1288 += 1, R1237 += 1, R1238 += 1 };
  s0 -> s3 [65, 65] { R1288 += 1, R1238 += 1 };
  s0 -> s4 [65, 65] { R1288 += 1, R1238 += 1 };
  s0 -> s1 [66, 65535] { R1288 += 1, R1238 += 1 };
  s1 -> s1 [0, 64] { R1288 += 1, R1238 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1288 += 1 };
  s1 -> s3 [65, 65] { R1288 += 1, R1238 += 1 };
  s1 -> s4 [65, 65] { R1288 += 1, R1238 += 1 };
  s1 -> s1 [66, 65535] { R1288 += 1, R1238 += 1 };
  s2 -> s1 [0, 64] { R1288 += 1, R1238 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1288 += 1, R1237 += 1, R1238 += 1 };
  s2 -> s3 [65, 65] { R1288 += 1, R1238 += 1 };
  s2 -> s4 [65, 65] { R1288 += 1, R1238 += 1 };
  s2 -> s1 [66, 65535] { R1288 += 1, R1238 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1288 += 1 };
  s3 -> s3 [0, 65535] { R1288 += 1, R1238 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1288 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1288 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1220 && R2 = R1288 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1201 = 0 && R1202 = R1220 && R1203 = 0 && R1204 = R1220 && R1205 = 0 && R1206 = R1220 && R1207 = 0 && R1208 = R1220 && R1209 = 0 && R1210 = R1220 && R1211 = 0 && R1212 = R1220 && R1213 = 0 && R1214 = R1220 && R1215 = 0 && R1216 = R1220 && R1217 = 0 && R1218 = R1220 && R1219 = 0 && R1229 = 0 && R1230 = 0 && R1231 = 0 && R1232 = 0 && R1239 = 10 && R1240 = R1288 && R1241 = 10 && R1242 = R1288 && R1243 = 10 && R1244 = R1288 && R1245 = 10 && R1246 = R1288 && R1247 = 10 && R1248 = R1288 && R1249 = 10 && R1250 = R1288 && R1251 = 10 && R1252 = R1288 && R1253 = 10 && R1254 = R1288 && R1255 = 10 && R1256 = R1288 && R1257 = 10 && R1258 = R1288 && R1259 = 10 && R1260 = R1288 && R1261 = 10 && R1262 = R1288 && R1263 = 10 && R1264 = R1288 && R1265 = 10 && R1266 = R1288 && R1267 = 10 && R1268 = R1288 && R1269 = 10 && R1270 = R1288 && R1271 = 10 && R1272 = R1288 && R1273 = 10 && R1274 = R1288 && R1275 = 10 && R1276 = R1288 && R1277 = 10 && R1278 = R1288 && R1279 = 10 && R1280 = R1288 && R1281 = 10 && R1282 = R1288 && R1283 = 10 && R1284 = R1288 && R1285 = 10 && R1286 = R1288 && R1287 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1220 && 9 < R1288 && (R14 = 0 || (R1221 = 0 && R1222 = 0)) && (R14 = 0 || (R1223 = 0 && R1224 = 0)) && (R14 = 0 || (R1225 = 0 && R1226 = 0)) && (R14 = 0 || (R1227 = 0 && R1228 = 0)) && (R14 = 0 || (R1233 = 0 && R1234 = 0)) && (R14 = 0 || (R1235 = 0 && R1236 = 0)) && (R14 = 0 || (R1237 = 0 && R1238 = 0)) && (R1194 + R1191 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R1194 + R1191 = 0 || (R1192 + R1189 = 0 && R1193 + R1190 = 0)) && (R1200 + R1197 = 0 || (R1198 + R1195 = 0 && R1199 + R1196 = 0));
// End of Parikh automata intersection problem
