// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1189, R1190, R1191, R1192, R1193, R1194, R1289, R1290, R1291, R1292, R1293, R1294, R1295, R1296, R1297, R1298, R1299, R13, R1300, R1301, R1302, R1303, R1304, R1305, R1306, R1307, R1308, R1309, R1310, R1311, R1312, R1313, R1314, R1315, R1316, R1317, R1318, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R1337, R1338, R1339, R1340, R1341, R1342, R1343, R1344, R1345, R1346, R1347, R1348, R1349, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1360, R1361, R1362, R1363, R1364, R1365, R1366, R1367, R1368, R1369, R1370, R1371, R1372, R1373, R1374, R1375, R1376, R1377, R1378, R1379, R1380, R1381, R1382, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1334 += 1 };
  s0 -> s0 [0, 65535] { R1333 += 1, R1334 += 1 };
  s0 -> s1 [45, 45] { R1334 += 1 };
  s0 -> s2 [46, 46] { R1334 += 1 };
  s0 -> s1 [48, 62] { R1334 += 1 };
  s0 -> s3 [65, 65] { R1334 += 1 };
  s0 -> s1 [66, 65535] { R1334 += 1 };
  s1 -> s1 [0, 43] { R1334 += 1 };
  s1 -> s1 [45, 45] { R1334 += 1 };
  s1 -> s2 [46, 46] { R1334 += 1 };
  s1 -> s1 [48, 62] { R1334 += 1 };
  s1 -> s3 [65, 65] { R1334 += 1 };
  s1 -> s1 [66, 65535] { R1334 += 1 };
  s2 -> s1 [0, 43] { R1334 += 1 };
  s2 -> s1 [45, 45] { R1334 += 1 };
  s2 -> s2 [46, 46] { R1334 += 1 };
  s2 -> s1 [48, 62] { R1334 += 1 };
  s2 -> s3 [65, 65] { R1334 += 1 };
  s2 -> s1 [66, 114] { R1334 += 1 };
  s2 -> s8 [115, 115] { R1334 += 1 };
  s2 -> s1 [116, 65535] { R1334 += 1 };
  s3 -> s3 [0, 43] { R1334 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1334 += 1 };
  s3 -> s4 [46, 46] { R1334 += 1 };
  s3 -> s3 [48, 62] { R1334 += 1 };
  s3 -> s3 [65, 65535] { R1334 += 1 };
  s4 -> s3 [0, 43] { R1334 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1334 += 1 };
  s4 -> s4 [46, 46] { R1334 += 1 };
  s4 -> s3 [48, 62] { R1334 += 1 };
  s4 -> s3 [65, 114] { R1334 += 1 };
  s4 -> s5 [115, 115] { R1334 += 1 };
  s4 -> s3 [116, 65535] { R1334 += 1 };
  s5 -> s3 [0, 43] { R1334 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1334 += 1 };
  s5 -> s4 [46, 46] { R1334 += 1 };
  s5 -> s3 [48, 62] { R1334 += 1 };
  s5 -> s3 [65, 110] { R1334 += 1 };
  s5 -> s6 [111, 111] { R1334 += 1 };
  s5 -> s3 [112, 65535] { R1334 += 1 };
  s6 -> s3 [0, 43] { R1334 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1334 += 1 };
  s6 -> s4 [46, 46] { R1334 += 1 };
  s6 -> s3 [48, 62] { R1334 += 1 };
  s6 -> s3 [65, 98] { R1334 += 1 };
  s6 -> s7 [99, 99] { R1334 += 1 };
  s6 -> s3 [100, 65535] { R1334 += 1 };
  s7 -> s3 [0, 43] { R1334 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1334 += 1 };
  s7 -> s4 [46, 46] { R1334 += 1 };
  s7 -> s3 [48, 62] { R1334 += 1 };
  s7 -> s3 [65, 106] { R1334 += 1 };
  s7 -> s3 [108, 65535] { R1334 += 1 };
  s8 -> s1 [0, 43] { R1334 += 1 };
  s8 -> s1 [45, 45] { R1334 += 1 };
  s8 -> s2 [46, 46] { R1334 += 1 };
  s8 -> s1 [48, 62] { R1334 += 1 };
  s8 -> s3 [65, 65] { R1334 += 1 };
  s8 -> s1 [66, 110] { R1334 += 1 };
  s8 -> s9 [111, 111] { R1334 += 1 };
  s8 -> s1 [112, 65535] { R1334 += 1 };
  s9 -> s1 [0, 43] { R1334 += 1 };
  s9 -> s1 [45, 45] { R1334 += 1 };
  s9 -> s2 [46, 46] { R1334 += 1 };
  s9 -> s1 [48, 62] { R1334 += 1 };
  s9 -> s3 [65, 65] { R1334 += 1 };
  s9 -> s1 [66, 98] { R1334 += 1 };
  s9 -> s10 [99, 99] { R1334 += 1 };
  s9 -> s1 [100, 65535] { R1334 += 1 };
  s10 -> s1 [0, 43] { R1334 += 1 };
  s10 -> s1 [45, 45] { R1334 += 1 };
  s10 -> s2 [46, 46] { R1334 += 1 };
  s10 -> s1 [48, 62] { R1334 += 1 };
  s10 -> s3 [65, 65] { R1334 += 1 };
  s10 -> s1 [66, 106] { R1334 += 1 };
  s10 -> s1 [108, 65535] { R1334 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1335 += 1, R1336 += 1 };
  s0 -> s1 [0, 65535] { R1336 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R1336 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1338 += 1 };
  s0 -> s2 [0, 65535] { R1338 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1337 += 1, R1338 += 1 };
  s0 -> s3 [58, 58] { R1338 += 1 };
  s0 -> s1 [59, 65535] { R1338 += 1 };
  s1 -> s1 [0, 57] { R1338 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1338 += 1 };
  s1 -> s1 [59, 65535] { R1338 += 1 };
  s2 -> s1 [0, 57] { R1338 += 1 };
  s2 -> s2 [0, 65535] { R1338 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R1338 += 1 };
  s2 -> s1 [59, 65535] { R1338 += 1 };
  s3 -> s3 [0, 65535] { R1338 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1340 += 1 };
  s0 -> s0 [0, 65535] { R1339 += 1, R1340 += 1 };
  s0 -> s2 [0, 65535] { R1340 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1340 += 1 };
  s0 -> s1 [66, 65535] { R1340 += 1 };
  s1 -> s1 [0, 64] { R1340 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1340 += 1 };
  s1 -> s1 [66, 65535] { R1340 += 1 };
  s2 -> s1 [0, 64] { R1340 += 1 };
  s2 -> s2 [0, 65535] { R1340 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1340 += 1 };
  s2 -> s1 [66, 65535] { R1340 += 1 };
  s3 -> s3 [0, 65535] { R1340 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1342 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1341 += 1, R1342 += 1 };
  s0 -> s2 [0, 65535] { R1342 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R1342 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1342 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R1342 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1342 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R1342 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R1342 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R1342 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1342 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1342 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1342 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1344 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1343 += 1, R1344 += 1 };
  s0 -> s2 [0, 65535] { R1344 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R1344 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R1344 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1344 += 1 };
  s2 -> s2 [0, 65535] { R1344 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1344 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1346 += 1, R1296 += 1 };
  s0 -> s2 [0, 65535] { R1346 += 1, R1295 += 1, R1296 += 1 };
  s0 -> s0 [0, 65535] { R1345 += 1, R1346 += 1 };
  s0 -> s1 [66, 65535] { R1346 += 1, R1296 += 1 };
  s1 -> s1 [0, 64] { R1346 += 1, R1296 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1346 += 1 };
  s1 -> s1 [66, 65535] { R1346 += 1, R1296 += 1 };
  s2 -> s1 [0, 64] { R1346 += 1, R1296 += 1 };
  s2 -> s2 [0, 65535] { R1346 += 1, R1295 += 1, R1296 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1346 += 1, R1296 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1348 += 1, R1297 += 1, R1298 += 1 };
  s0 -> s0 [0, 65535] { R1347 += 1, R1348 += 1 };
  s0 -> s2 [0, 65535] { R1348 += 1, R1298 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R1348 += 1, R1297 += 1, R1298 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1348 += 1, R1298 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R1348 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1348 += 1, R1298 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R1348 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1350 += 1, R1300 += 1 };
  s0 -> s2 [0, 65535] { R1350 += 1, R1299 += 1, R1300 += 1 };
  s0 -> s0 [0, 65535] { R1349 += 1, R1350 += 1 };
  s0 -> s3 [80, 80] { R1350 += 1, R1300 += 1 };
  s0 -> s1 [81, 65535] { R1350 += 1, R1300 += 1 };
  s1 -> s1 [0, 65] { R1350 += 1, R1300 += 1 };
  s1 -> s3 [80, 80] { R1350 += 1, R1300 += 1 };
  s1 -> s1 [81, 65535] { R1350 += 1, R1300 += 1 };
  s2 -> s1 [0, 65] { R1350 += 1, R1300 += 1 };
  s2 -> s2 [0, 65535] { R1350 += 1, R1299 += 1, R1300 += 1 };
  s2 -> s3 [80, 80] { R1350 += 1, R1300 += 1 };
  s2 -> s1 [81, 65535] { R1350 += 1, R1300 += 1 };
  s3 -> s3 [0, 65] { R1350 += 1, R1300 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1350 += 1 };
  s3 -> s3 [80, 65535] { R1350 += 1, R1300 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1352 += 1, R1302 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R1352 += 1, R1301 += 1, R1302 += 1 };
  s0 -> s0 [0, 65535] { R1351 += 1, R1352 += 1 };
  s1 -> s1 [0, 65535] { R1352 += 1, R1302 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1352 += 1 };
  s2 -> s1 [0, 65535] { R1352 += 1, R1302 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1352 += 1, R1301 += 1, R1302 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1352 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R1354 += 1, R1304 += 1 };
  s0 -> s2 [0, 65535] { R1354 += 1, R1304 += 1, R28 += 1 };
  s0 -> s3 [0, 65535] { R1354 += 1, R1303 += 1, R1304 += 1 };
  s0 -> s0 [0, 65535] { R1353 += 1, R1354 += 1 };
  s0 -> s1 [81, 65535] { R1354 += 1, R1304 += 1 };
  s1 -> s1 [0, 79] { R1354 += 1, R1304 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1354 += 1 };
  s1 -> s1 [81, 65535] { R1354 += 1, R1304 += 1 };
  s2 -> s1 [0, 79] { R1354 += 1, R1304 += 1 };
  s2 -> s2 [0, 65535] { R1354 += 1, R1304 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1354 += 1 };
  s2 -> s1 [81, 65535] { R1354 += 1, R1304 += 1 };
  s3 -> s1 [0, 79] { R1354 += 1, R1304 += 1 };
  s3 -> s2 [0, 65535] { R1354 += 1, R1304 += 1, R28 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1354 += 1, R1303 += 1, R1304 += 1 };
  s3 -> s1 [81, 65535] { R1354 += 1, R1304 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1354 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R1356 += 1, R1306 += 1, R900 += 1 };
  s0 -> s1 [0, 65535] { R1356 += 1, R1306 += 1 };
  s0 -> s2 [0, 65535] { R1356 += 1, R1305 += 1, R1306 += 1 };
  s0 -> s0 [0, 65535] { R1355 += 1, R1356 += 1 };
  s0 -> s1 [81, 65535] { R1356 += 1, R1306 += 1, R900 += 1 };
  s1 -> s1 [0, 79] { R1356 += 1, R1306 += 1, R900 += 1 };
  s1 -> s1 [0, 65535] { R1356 += 1, R1306 += 1 };
  s1 -> s4 [0, 65535] { R1356 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [81, 65535] { R1356 += 1, R1306 += 1, R900 += 1 };
  s2 -> s1 [0, 79] { R1356 += 1, R1306 += 1, R900 += 1 };
  s2 -> s1 [0, 65535] { R1356 += 1, R1306 += 1 };
  s2 -> s2 [0, 65535] { R1356 += 1, R1305 += 1, R1306 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R1356 += 1, R1306 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1356 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1358 += 1, R1308 += 1 };
  s0 -> s2 [0, 65535] { R1358 += 1, R1308 += 1, R1193 += 1, R1194 += 1 };
  s0 -> s3 [0, 65535] { R1358 += 1, R1307 += 1, R1308 += 1 };
  s0 -> s0 [0, 65535] { R1357 += 1, R1358 += 1 };
  s1 -> s5 [0, 65535] { R1358 += 1 };
  s1 -> s1 [0, 65535] { R1358 += 1, R1308 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1358 += 1 };
  s2 -> s1 [0, 65535] { R1358 += 1, R1308 += 1 };
  s2 -> s2 [0, 65535] { R1358 += 1, R1308 += 1, R1193 += 1, R1194 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1358 += 1, R1308 += 1 };
  s3 -> s2 [0, 65535] { R1358 += 1, R1308 += 1, R1193 += 1, R1194 += 1 };
  s3 -> s3 [0, 65535] { R1358 += 1, R1307 += 1, R1308 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1358 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1360 += 1, R1310 += 1 };
  s0 -> s0 [0, 65535] { R1359 += 1, R1360 += 1 };
  s0 -> s2 [0, 65535] { R1360 += 1, R1309 += 1, R1310 += 1 };
  s1 -> s1 [0, 65535] { R1360 += 1, R1310 += 1 };
  s1 -> s4 [0, 65535] { R1360 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1360 += 1, R1310 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1360 += 1, R1309 += 1, R1310 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1360 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1362 += 1, R1311 += 1, R1312 += 1 };
  s0 -> s2 [0, 65535] { R1362 += 1, R1312 += 1 };
  s0 -> s3 [0, 65535] { R1362 += 1, R1312 += 1, R1293 += 1, R1294 += 1 };
  s0 -> s0 [0, 65535] { R1361 += 1, R1362 += 1 };
  s1 -> s1 [0, 65535] { R1362 += 1, R1311 += 1, R1312 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1362 += 1, R1312 += 1 };
  s1 -> s3 [0, 65535] { R1362 += 1, R1312 += 1, R1293 += 1, R1294 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1362 += 1, R1312 += 1 };
  s2 -> s5 [0, 65535] { R1362 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1362 += 1, R1312 += 1 };
  s3 -> s3 [0, 65535] { R1362 += 1, R1312 += 1, R1293 += 1, R1294 += 1 };
  s3 -> s5 [0, 65535] { R1362 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1362 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1363 += 1, R1364 += 1 };
  s0 -> s1 [0, 65535] { R1364 += 1, R1313 += 1, R1314 += 1 };
  s0 -> s2 [0, 65535] { R1364 += 1, R1314 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1364 += 1, R1313 += 1, R1314 += 1 };
  s1 -> s2 [0, 65535] { R1364 += 1, R1314 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1364 += 1 };
  s2 -> s2 [0, 65535] { R1364 += 1, R1314 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1364 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1365 += 1, R1366 += 1 };
  s0 -> s1 [0, 65535] { R1366 += 1, R1316 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R1366 += 1, R1315 += 1, R1316 += 1 };
  s1 -> s4 [0, 65535] { R1366 += 1 };
  s1 -> s1 [0, 65535] { R1366 += 1, R1316 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1366 += 1, R1316 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R1366 += 1, R1315 += 1, R1316 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1366 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1368 += 1, R1318 += 1 };
  s0 -> s0 [0, 65535] { R1367 += 1, R1368 += 1 };
  s0 -> s2 [0, 65535] { R1368 += 1, R1317 += 1, R1318 += 1 };
  s0 -> s3 [65, 65] { R1368 += 1, R1318 += 1 };
  s0 -> s4 [65, 65] { R1368 += 1, R1318 += 1 };
  s0 -> s1 [81, 65535] { R1368 += 1, R1318 += 1 };
  s1 -> s1 [0, 64] { R1368 += 1, R1318 += 1 };
  s1 -> s1 [0, 65535] { R1368 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1368 += 1, R1318 += 1 };
  s1 -> s4 [65, 65] { R1368 += 1, R1318 += 1 };
  s1 -> s1 [81, 65535] { R1368 += 1, R1318 += 1 };
  s2 -> s1 [0, 64] { R1368 += 1, R1318 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1368 += 1, R1317 += 1, R1318 += 1 };
  s2 -> s3 [65, 65] { R1368 += 1, R1318 += 1 };
  s2 -> s4 [65, 65] { R1368 += 1, R1318 += 1 };
  s2 -> s1 [81, 65535] { R1368 += 1, R1318 += 1 };
  s3 -> s3 [0, 65] { R1368 += 1, R1318 += 1 };
  s3 -> s3 [0, 65535] { R1368 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [81, 65535] { R1368 += 1, R1318 += 1 };
  s4 -> s4 [0, 65535] { R1368 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1370 += 1, R1320 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R1370 += 1, R1319 += 1, R1320 += 1 };
  s0 -> s0 [0, 65535] { R1369 += 1, R1370 += 1 };
  s0 -> s3 [65, 65] { R1370 += 1, R1320 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1370 += 1, R1320 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1370 += 1, R1320 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1370 += 1, R1320 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1370 += 1 };
  s1 -> s3 [65, 65] { R1370 += 1, R1320 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1370 += 1, R1320 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1370 += 1, R1320 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1370 += 1, R1320 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1370 += 1, R1319 += 1, R1320 += 1 };
  s2 -> s3 [65, 65] { R1370 += 1, R1320 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1370 += 1, R1320 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1370 += 1, R1320 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1370 += 1 };
  s3 -> s3 [0, 65535] { R1370 += 1, R1320 += 1, R25 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1370 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1370 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1372 += 1, R1322 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1371 += 1, R1372 += 1 };
  s0 -> s2 [0, 65535] { R1372 += 1, R1321 += 1, R1322 += 1 };
  s0 -> s3 [65, 65] { R1372 += 1, R1322 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1372 += 1, R1322 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1372 += 1, R1322 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1372 += 1, R1322 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1372 += 1 };
  s1 -> s3 [65, 65] { R1372 += 1, R1322 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1372 += 1, R1322 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1372 += 1, R1322 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1372 += 1, R1322 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1372 += 1, R1321 += 1, R1322 += 1 };
  s2 -> s3 [65, 65] { R1372 += 1, R1322 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1372 += 1, R1322 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1372 += 1, R1322 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1372 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1372 += 1 };
  s4 -> s4 [0, 65535] { R1372 += 1, R1322 += 1, R27 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1372 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1374 += 1, R1324 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R1374 += 1, R1323 += 1, R1324 += 1 };
  s0 -> s0 [0, 65535] { R1373 += 1, R1374 += 1 };
  s0 -> s4 [65, 65] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1374 += 1, R1324 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1374 += 1, R1324 += 1, R898 += 1 };
  s0 -> s2 [66, 79] { R1374 += 1, R1324 += 1, R898 += 1 };
  s0 -> s1 [66, 65535] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s0 -> s2 [81, 65535] { R1374 += 1, R1324 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s1 -> s2 [0, 64] { R1374 += 1, R1324 += 1, R898 += 1 };
  s1 -> s4 [65, 65] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s1 -> s5 [65, 65] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s1 -> s6 [65, 65] { R1374 += 1, R1324 += 1, R898 += 1 };
  s1 -> s7 [65, 65] { R1374 += 1, R1324 += 1, R898 += 1 };
  s1 -> s2 [66, 79] { R1374 += 1, R1324 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s1 -> s2 [81, 65535] { R1374 += 1, R1324 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1374 += 1, R1324 += 1, R898 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1374 += 1 };
  s2 -> s6 [65, 65] { R1374 += 1, R1324 += 1 };
  s2 -> s7 [65, 65] { R1374 += 1, R1324 += 1 };
  s2 -> s2 [66, 79] { R1374 += 1, R1324 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1374 += 1, R1324 += 1 };
  s2 -> s2 [81, 65535] { R1374 += 1, R1324 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1374 += 1, R1324 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1374 += 1, R1323 += 1, R1324 += 1 };
  s3 -> s4 [65, 65] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1374 += 1, R1324 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1374 += 1, R1324 += 1, R898 += 1 };
  s3 -> s2 [66, 79] { R1374 += 1, R1324 += 1, R898 += 1 };
  s3 -> s1 [66, 65535] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s3 -> s2 [81, 65535] { R1374 += 1, R1324 += 1, R898 += 1 };
  s4 -> s7 [0, 79] { R1374 += 1, R1324 += 1, R898 += 1 };
  s4 -> s4 [0, 65535] { R1374 += 1, R1324 += 1, R897 += 1, R898 += 1 };
  s4 -> s7 [81, 65535] { R1374 += 1, R1324 += 1, R898 += 1 };
  s6 -> s6 [0, 65535] { R1374 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 79] { R1374 += 1, R1324 += 1, R898 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R1374 += 1 };
  s7 -> s7 [0, 65535] { R1374 += 1, R1324 += 1 };
  s7 -> s7 [81, 65535] { R1374 += 1, R1324 += 1, R898 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1374 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s2 [0, 64] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s0 [0, 65535] { R1375 += 1, R1376 += 1 };
  s0 -> s3 [0, 65535] { R1376 += 1, R1325 += 1, R1326 += 1 };
  s0 -> s4 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s5 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s6 [65, 65] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s7 [65, 65] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s1 [66, 65535] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s2 [66, 65535] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s1 [0, 64] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s1 [0, 65535] { R1376 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s5 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s1 [66, 65535] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s1 [0, 64] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [0, 64] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s2 -> s4 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s5 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s6 [65, 65] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s2 -> s7 [65, 65] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s2 -> s1 [66, 65535] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [66, 65535] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s1 [0, 64] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s2 [0, 64] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s3 [0, 65535] { R1376 += 1, R1325 += 1, R1326 += 1 };
  s3 -> s4 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s5 [65, 65] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s6 [65, 65] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s7 [65, 65] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s1 [66, 65535] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s2 [66, 65535] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s4 -> s4 [0, 65535] { R1376 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s5 -> s8 [0, 65535] { R1376 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R1376 += 1, R1326 += 1, R1190 += 1, R1191 += 1 };
  s7 -> s7 [0, 65535] { R1376 += 1, R1326 += 1, R1189 += 1, R1190 += 1 };
  s8 -> s8 [0, 65535] { R1376 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1378 += 1, R1328 += 1 };
  s0 -> s2 [0, 65535] { R1378 += 1, R1327 += 1, R1328 += 1 };
  s0 -> s0 [0, 65535] { R1377 += 1, R1378 += 1 };
  s0 -> s3 [65, 65] { R1378 += 1, R1328 += 1 };
  s0 -> s4 [65, 65] { R1378 += 1, R1328 += 1 };
  s0 -> s1 [66, 65535] { R1378 += 1, R1328 += 1 };
  s1 -> s1 [0, 64] { R1378 += 1, R1328 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1378 += 1 };
  s1 -> s3 [65, 65] { R1378 += 1, R1328 += 1 };
  s1 -> s4 [65, 65] { R1378 += 1, R1328 += 1 };
  s1 -> s1 [66, 65535] { R1378 += 1, R1328 += 1 };
  s2 -> s1 [0, 64] { R1378 += 1, R1328 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1378 += 1, R1327 += 1, R1328 += 1 };
  s2 -> s3 [65, 65] { R1378 += 1, R1328 += 1 };
  s2 -> s4 [65, 65] { R1378 += 1, R1328 += 1 };
  s2 -> s1 [66, 65535] { R1378 += 1, R1328 += 1 };
  s3 -> s3 [0, 65535] { R1378 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1378 += 1, R1328 += 1 };
  s4 -> s6 [0, 65535] { R1378 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1378 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s0 -> s2 [0, 64] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s0 -> s3 [0, 65535] { R1380 += 1, R1329 += 1, R1330 += 1 };
  s0 -> s0 [0, 65535] { R1379 += 1, R1380 += 1 };
  s0 -> s4 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s0 -> s5 [65, 65] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s0 -> s6 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s0 -> s7 [65, 65] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s0 -> s1 [66, 65535] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s0 -> s2 [66, 65535] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s1 -> s1 [0, 64] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s1 -> s2 [0, 64] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s1 -> s4 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s1 -> s5 [65, 65] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s1 -> s6 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s1 -> s7 [65, 65] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s1 -> s1 [66, 65535] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s1 -> s2 [66, 65535] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s2 -> s2 [0, 64] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1380 += 1 };
  s2 -> s4 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s2 -> s6 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s2 -> s2 [66, 65535] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s3 -> s1 [0, 64] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s3 -> s2 [0, 64] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s3 -> s3 [0, 65535] { R1380 += 1, R1329 += 1, R1330 += 1 };
  s3 -> s4 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s3 -> s5 [65, 65] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s3 -> s6 [65, 65] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s3 -> s7 [65, 65] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s3 -> s1 [66, 65535] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s3 -> s2 [66, 65535] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s4 -> s9 [0, 65535] { R1380 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1380 += 1 };
  s7 -> s4 [0, 65535] { R1380 += 1, R1330 += 1, R1290 += 1, R1291 += 1 };
  s7 -> s7 [0, 65535] { R1380 += 1, R1330 += 1, R1289 += 1, R1290 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1380 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1382 += 1, R1332 += 1 };
  s0 -> s0 [0, 65535] { R1381 += 1, R1382 += 1 };
  s0 -> s2 [0, 65535] { R1382 += 1, R1331 += 1, R1332 += 1 };
  s0 -> s3 [65, 65] { R1382 += 1, R1332 += 1 };
  s0 -> s4 [65, 65] { R1382 += 1, R1332 += 1 };
  s0 -> s1 [66, 65535] { R1382 += 1, R1332 += 1 };
  s1 -> s1 [0, 64] { R1382 += 1, R1332 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1382 += 1 };
  s1 -> s3 [65, 65] { R1382 += 1, R1332 += 1 };
  s1 -> s4 [65, 65] { R1382 += 1, R1332 += 1 };
  s1 -> s1 [66, 65535] { R1382 += 1, R1332 += 1 };
  s2 -> s1 [0, 64] { R1382 += 1, R1332 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1382 += 1, R1331 += 1, R1332 += 1 };
  s2 -> s3 [65, 65] { R1382 += 1, R1332 += 1 };
  s2 -> s4 [65, 65] { R1382 += 1, R1332 += 1 };
  s2 -> s1 [66, 65535] { R1382 += 1, R1332 += 1 };
  s3 -> s3 [0, 65535] { R1382 += 1, R1332 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1382 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1382 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1382 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1314 && R2 = R1382 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1295 = 0 && R1296 = R1314 && R1297 = 0 && R1298 = R1314 && R1299 = 0 && R1300 = R1314 && R1301 = 0 && R1302 = R1314 && R1303 = 0 && R1304 = R1314 && R1305 = 0 && R1306 = R1314 && R1307 = 0 && R1308 = R1314 && R1309 = 0 && R1310 = R1314 && R1311 = 0 && R1312 = R1314 && R1313 = 0 && R1323 = 0 && R1324 = 0 && R1325 = 0 && R1326 = 0 && R1329 = 0 && R1330 = 0 && R1333 = 10 && R1334 = R1382 && R1335 = 10 && R1336 = R1382 && R1337 = 10 && R1338 = R1382 && R1339 = 10 && R1340 = R1382 && R1341 = 10 && R1342 = R1382 && R1343 = 10 && R1344 = R1382 && R1345 = 10 && R1346 = R1382 && R1347 = 10 && R1348 = R1382 && R1349 = 10 && R1350 = R1382 && R1351 = 10 && R1352 = R1382 && R1353 = 10 && R1354 = R1382 && R1355 = 10 && R1356 = R1382 && R1357 = 10 && R1358 = R1382 && R1359 = 10 && R1360 = R1382 && R1361 = 10 && R1362 = R1382 && R1363 = 10 && R1364 = R1382 && R1365 = 10 && R1366 = R1382 && R1367 = 10 && R1368 = R1382 && R1369 = 10 && R1370 = R1382 && R1371 = 10 && R1372 = R1382 && R1373 = 10 && R1374 = R1382 && R1375 = 10 && R1376 = R1382 && R1377 = 10 && R1378 = R1382 && R1379 = 10 && R1380 = R1382 && R1381 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1314 && 9 < R1382 && (R14 = 0 || (R1315 = 0 && R1316 = 0)) && (R14 = 0 || (R1317 = 0 && R1318 = 0)) && (R14 = 0 || (R1319 = 0 && R1320 = 0)) && (R14 = 0 || (R1321 = 0 && R1322 = 0)) && (R14 = 0 || (R1327 = 0 && R1328 = 0)) && (R14 = 0 || (R1331 = 0 && R1332 = 0)) && (R1194 + R1191 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R1194 + R1191 = 0 || (R1192 + R1189 = 0 && R1193 + R1190 = 0)) && (R1294 + R1291 = 0 || (R1292 + R1289 = 0 && R1293 + R1290 = 0));
// End of Parikh automata intersection problem
