// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4671, R4672, R4673, R4674, R4675, R4676, R4771, R4772, R4773, R4774, R4775, R4776, R4777, R4778, R4779, R4780, R4781, R4782, R4783, R4784, R4785, R4786, R4787, R4788, R4789, R4790, R4791, R4792, R4793, R4794, R4795, R4796, R4797, R4798, R4799, R4800, R4801, R4802, R4803, R4804, R4805, R4806, R4807, R4808, R4809, R4810, R4811, R4812, R4813, R4814, R4815, R4816, R4817, R4818, R4819, R4820, R4821, R4822, R4823, R4824, R4825, R4826, R4827, R4828, R4829, R4830, R4831, R4832, R4833, R4834, R4835, R4836, R4837, R4838, R4839, R4840, R4841, R4842, R4843, R4844, R4845, R4846, R4847, R4848, R4849, R4850, R4851, R4852, R4853, R4854, R4855, R4856, R4857, R4858, R4859, R4860, R4861, R4862, R4863, R4864, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4816 += 1 };
  s0 -> s0 [0, 65535] { R4815 += 1, R4816 += 1 };
  s0 -> s1 [45, 45] { R4816 += 1 };
  s0 -> s2 [46, 46] { R4816 += 1 };
  s0 -> s1 [48, 62] { R4816 += 1 };
  s0 -> s3 [65, 65] { R4816 += 1 };
  s0 -> s1 [66, 65535] { R4816 += 1 };
  s1 -> s1 [0, 43] { R4816 += 1 };
  s1 -> s1 [45, 45] { R4816 += 1 };
  s1 -> s2 [46, 46] { R4816 += 1 };
  s1 -> s1 [48, 62] { R4816 += 1 };
  s1 -> s3 [65, 65] { R4816 += 1 };
  s1 -> s1 [66, 65535] { R4816 += 1 };
  s2 -> s1 [0, 43] { R4816 += 1 };
  s2 -> s1 [45, 45] { R4816 += 1 };
  s2 -> s2 [46, 46] { R4816 += 1 };
  s2 -> s1 [48, 62] { R4816 += 1 };
  s2 -> s3 [65, 65] { R4816 += 1 };
  s2 -> s1 [66, 114] { R4816 += 1 };
  s2 -> s8 [115, 115] { R4816 += 1 };
  s2 -> s1 [116, 65535] { R4816 += 1 };
  s3 -> s3 [0, 43] { R4816 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4816 += 1 };
  s3 -> s4 [46, 46] { R4816 += 1 };
  s3 -> s3 [48, 62] { R4816 += 1 };
  s3 -> s3 [65, 65535] { R4816 += 1 };
  s4 -> s3 [0, 43] { R4816 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4816 += 1 };
  s4 -> s4 [46, 46] { R4816 += 1 };
  s4 -> s3 [48, 62] { R4816 += 1 };
  s4 -> s3 [65, 114] { R4816 += 1 };
  s4 -> s5 [115, 115] { R4816 += 1 };
  s4 -> s3 [116, 65535] { R4816 += 1 };
  s5 -> s3 [0, 43] { R4816 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4816 += 1 };
  s5 -> s4 [46, 46] { R4816 += 1 };
  s5 -> s3 [48, 62] { R4816 += 1 };
  s5 -> s3 [65, 110] { R4816 += 1 };
  s5 -> s6 [111, 111] { R4816 += 1 };
  s5 -> s3 [112, 65535] { R4816 += 1 };
  s6 -> s3 [0, 43] { R4816 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4816 += 1 };
  s6 -> s4 [46, 46] { R4816 += 1 };
  s6 -> s3 [48, 62] { R4816 += 1 };
  s6 -> s3 [65, 98] { R4816 += 1 };
  s6 -> s7 [99, 99] { R4816 += 1 };
  s6 -> s3 [100, 65535] { R4816 += 1 };
  s7 -> s3 [0, 43] { R4816 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4816 += 1 };
  s7 -> s4 [46, 46] { R4816 += 1 };
  s7 -> s3 [48, 62] { R4816 += 1 };
  s7 -> s3 [65, 106] { R4816 += 1 };
  s7 -> s3 [108, 65535] { R4816 += 1 };
  s8 -> s1 [0, 43] { R4816 += 1 };
  s8 -> s1 [45, 45] { R4816 += 1 };
  s8 -> s2 [46, 46] { R4816 += 1 };
  s8 -> s1 [48, 62] { R4816 += 1 };
  s8 -> s3 [65, 65] { R4816 += 1 };
  s8 -> s1 [66, 110] { R4816 += 1 };
  s8 -> s9 [111, 111] { R4816 += 1 };
  s8 -> s1 [112, 65535] { R4816 += 1 };
  s9 -> s1 [0, 43] { R4816 += 1 };
  s9 -> s1 [45, 45] { R4816 += 1 };
  s9 -> s2 [46, 46] { R4816 += 1 };
  s9 -> s1 [48, 62] { R4816 += 1 };
  s9 -> s3 [65, 65] { R4816 += 1 };
  s9 -> s1 [66, 98] { R4816 += 1 };
  s9 -> s10 [99, 99] { R4816 += 1 };
  s9 -> s1 [100, 65535] { R4816 += 1 };
  s10 -> s1 [0, 43] { R4816 += 1 };
  s10 -> s1 [45, 45] { R4816 += 1 };
  s10 -> s2 [46, 46] { R4816 += 1 };
  s10 -> s1 [48, 62] { R4816 += 1 };
  s10 -> s3 [65, 65] { R4816 += 1 };
  s10 -> s1 [66, 106] { R4816 += 1 };
  s10 -> s1 [108, 65535] { R4816 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R4817 += 1, R4818 += 1 };
  s0 -> s1 [0, 65535] { R4818 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4818 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4820 += 1 };
  s0 -> s2 [0, 65535] { R4820 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4819 += 1, R4820 += 1 };
  s0 -> s3 [58, 58] { R4820 += 1 };
  s0 -> s1 [59, 65535] { R4820 += 1 };
  s1 -> s1 [0, 57] { R4820 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4820 += 1 };
  s1 -> s1 [59, 65535] { R4820 += 1 };
  s2 -> s1 [0, 57] { R4820 += 1 };
  s2 -> s2 [0, 65535] { R4820 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4820 += 1 };
  s2 -> s1 [59, 65535] { R4820 += 1 };
  s3 -> s3 [0, 65535] { R4820 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4822 += 1 };
  s0 -> s0 [0, 65535] { R4821 += 1, R4822 += 1 };
  s0 -> s2 [0, 65535] { R4822 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4822 += 1 };
  s0 -> s1 [66, 65535] { R4822 += 1 };
  s1 -> s1 [0, 64] { R4822 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4822 += 1 };
  s1 -> s1 [66, 65535] { R4822 += 1 };
  s2 -> s1 [0, 64] { R4822 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4822 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4822 += 1 };
  s2 -> s1 [66, 65535] { R4822 += 1 };
  s3 -> s3 [0, 65535] { R4822 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4824 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4823 += 1, R4824 += 1 };
  s0 -> s2 [0, 65535] { R4824 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R4824 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4824 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R4824 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4824 += 1 };
  s2 -> s1 [0, 90] { R4824 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R4824 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4824 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4824 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4824 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4824 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4826 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R4825 += 1, R4826 += 1 };
  s0 -> s2 [0, 65535] { R4826 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R4826 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R4826 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4826 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4826 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4826 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4828 += 1, R4778 += 1 };
  s0 -> s2 [0, 65535] { R4828 += 1, R4777 += 1, R4778 += 1 };
  s0 -> s0 [0, 65535] { R4827 += 1, R4828 += 1 };
  s0 -> s1 [66, 65535] { R4828 += 1, R4778 += 1 };
  s1 -> s1 [0, 64] { R4828 += 1, R4778 += 1 };
  s1 -> s1 [0, 65535] { R4828 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R4828 += 1, R4778 += 1 };
  s2 -> s1 [0, 64] { R4828 += 1, R4778 += 1 };
  s2 -> s2 [0, 65535] { R4828 += 1, R4777 += 1, R4778 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R4828 += 1, R4778 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4830 += 1, R4780 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R4829 += 1, R4830 += 1 };
  s0 -> s2 [0, 65535] { R4830 += 1, R4779 += 1, R4780 += 1 };
  s1 -> s4 [0, 65535] { R4830 += 1 };
  s1 -> s1 [0, 65535] { R4830 += 1, R4780 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4830 += 1, R4780 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4830 += 1, R4779 += 1, R4780 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4830 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4832 += 1, R4782 += 1 };
  s0 -> s2 [0, 65535] { R4832 += 1, R4781 += 1, R4782 += 1 };
  s0 -> s0 [0, 65535] { R4831 += 1, R4832 += 1 };
  s0 -> s1 [80, 65535] { R4832 += 1, R4782 += 1 };
  s1 -> s1 [0, 65] { R4832 += 1, R4782 += 1 };
  s1 -> s1 [0, 65535] { R4832 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [80, 65535] { R4832 += 1, R4782 += 1 };
  s2 -> s1 [0, 65] { R4832 += 1, R4782 += 1 };
  s2 -> s2 [0, 65535] { R4832 += 1, R4781 += 1, R4782 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [80, 65535] { R4832 += 1, R4782 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R4833 += 1, R4834 += 1 };
  s0 -> s1 [0, 65535] { R4834 += 1, R4783 += 1, R4784 += 1 };
  s0 -> s2 [0, 65535] { R4834 += 1, R4784 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4834 += 1, R4783 += 1, R4784 += 1 };
  s1 -> s2 [0, 65535] { R4834 += 1, R4784 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535] { R4834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4834 += 1, R4784 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535] { R4834 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R4836 += 1, R4786 += 1 };
  s0 -> s0 [0, 65535] { R4835 += 1, R4836 += 1 };
  s0 -> s2 [0, 65535] { R4836 += 1, R4785 += 1, R4786 += 1 };
  s0 -> s1 [81, 65535] { R4836 += 1, R4786 += 1 };
  s1 -> s1 [0, 79] { R4836 += 1, R4786 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4836 += 1 };
  s1 -> s1 [81, 65535] { R4836 += 1, R4786 += 1 };
  s2 -> s1 [0, 79] { R4836 += 1, R4786 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4836 += 1, R4785 += 1, R4786 += 1 };
  s2 -> s1 [81, 65535] { R4836 += 1, R4786 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R4838 += 1, R4788 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R4837 += 1, R4838 += 1 };
  s0 -> s1 [0, 65535] { R4838 += 1, R4788 += 1 };
  s0 -> s2 [0, 65535] { R4838 += 1, R4787 += 1, R4788 += 1 };
  s0 -> s1 [81, 65535] { R4838 += 1, R4788 += 1, R4382 += 1 };
  s1 -> s1 [0, 79] { R4838 += 1, R4788 += 1, R4382 += 1 };
  s1 -> s1 [0, 65535] { R4838 += 1, R4788 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4838 += 1 };
  s1 -> s1 [81, 65535] { R4838 += 1, R4788 += 1, R4382 += 1 };
  s2 -> s1 [0, 79] { R4838 += 1, R4788 += 1, R4382 += 1 };
  s2 -> s1 [0, 65535] { R4838 += 1, R4788 += 1 };
  s2 -> s2 [0, 65535] { R4838 += 1, R4787 += 1, R4788 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [81, 65535] { R4838 += 1, R4788 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4838 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4840 += 1, R4790 += 1, R4675 += 1, R4676 += 1 };
  s0 -> s2 [0, 65535] { R4840 += 1, R4790 += 1 };
  s0 -> s0 [0, 65535] { R4839 += 1, R4840 += 1 };
  s0 -> s3 [0, 65535] { R4840 += 1, R4789 += 1, R4790 += 1 };
  s1 -> s5 [0, 65535] { R4840 += 1 };
  s1 -> s1 [0, 65535] { R4840 += 1, R4790 += 1, R4675 += 1, R4676 += 1 };
  s1 -> s2 [0, 65535] { R4840 += 1, R4790 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R4840 += 1 };
  s2 -> s2 [0, 65535] { R4840 += 1, R4790 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4840 += 1, R4790 += 1, R4675 += 1, R4676 += 1 };
  s3 -> s2 [0, 65535] { R4840 += 1, R4790 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4840 += 1, R4789 += 1, R4790 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4840 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4841 += 1, R4842 += 1 };
  s0 -> s1 [0, 65535] { R4842 += 1, R4791 += 1, R4792 += 1 };
  s0 -> s2 [0, 65535] { R4842 += 1, R4792 += 1 };
  s1 -> s1 [0, 65535] { R4842 += 1, R4791 += 1, R4792 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4842 += 1, R4792 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4842 += 1 };
  s2 -> s2 [0, 65535] { R4842 += 1, R4792 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4842 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4844 += 1, R4793 += 1, R4794 += 1 };
  s0 -> s0 [0, 65535] { R4843 += 1, R4844 += 1 };
  s0 -> s2 [0, 65535] { R4844 += 1, R4794 += 1, R4775 += 1, R4776 += 1 };
  s0 -> s3 [0, 65535] { R4844 += 1, R4794 += 1 };
  s1 -> s1 [0, 65535] { R4844 += 1, R4793 += 1, R4794 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4844 += 1, R4794 += 1, R4775 += 1, R4776 += 1 };
  s1 -> s3 [0, 65535] { R4844 += 1, R4794 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4844 += 1, R4794 += 1, R4775 += 1, R4776 += 1 };
  s2 -> s3 [0, 65535] { R4844 += 1, R4794 += 1 };
  s2 -> s5 [0, 65535] { R4844 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4844 += 1, R4794 += 1 };
  s3 -> s5 [0, 65535] { R4844 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4844 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4846 += 1, R4796 += 1 };
  s0 -> s0 [0, 65535] { R4845 += 1, R4846 += 1 };
  s0 -> s2 [0, 65535] { R4846 += 1, R4795 += 1, R4796 += 1 };
  s1 -> s1 [0, 65535] { R4846 += 1, R4796 += 1 };
  s1 -> s4 [0, 65535] { R4846 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4846 += 1, R4796 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4846 += 1, R4795 += 1, R4796 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4846 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4848 += 1, R4797 += 1, R4798 += 1 };
  s0 -> s0 [0, 65535] { R4847 += 1, R4848 += 1 };
  s0 -> s2 [0, 65535] { R4848 += 1, R4798 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R4848 += 1, R4797 += 1, R4798 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4848 += 1, R4798 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4848 += 1, R4798 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R4848 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4848 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4850 += 1, R4800 += 1 };
  s0 -> s2 [0, 65535] { R4850 += 1, R4799 += 1, R4800 += 1 };
  s0 -> s0 [0, 65535] { R4849 += 1, R4850 += 1 };
  s0 -> s3 [65, 65] { R4850 += 1, R4800 += 1 };
  s0 -> s4 [65, 65] { R4850 += 1, R4800 += 1 };
  s0 -> s5 [80, 80] { R4850 += 1, R4800 += 1 };
  s0 -> s1 [81, 65535] { R4850 += 1, R4800 += 1 };
  s1 -> s1 [0, 64] { R4850 += 1, R4800 += 1 };
  s1 -> s3 [65, 65] { R4850 += 1, R4800 += 1 };
  s1 -> s4 [65, 65] { R4850 += 1, R4800 += 1 };
  s1 -> s5 [80, 80] { R4850 += 1, R4800 += 1 };
  s1 -> s1 [81, 65535] { R4850 += 1, R4800 += 1 };
  s2 -> s1 [0, 64] { R4850 += 1, R4800 += 1 };
  s2 -> s2 [0, 65535] { R4850 += 1, R4799 += 1, R4800 += 1 };
  s2 -> s3 [65, 65] { R4850 += 1, R4800 += 1 };
  s2 -> s4 [65, 65] { R4850 += 1, R4800 += 1 };
  s2 -> s5 [80, 80] { R4850 += 1, R4800 += 1 };
  s2 -> s1 [81, 65535] { R4850 += 1, R4800 += 1 };
  s4 -> s4 [0, 65] { R4850 += 1, R4800 += 1 };
  s4 -> s8 [80, 80] { R4850 += 1, R4800 += 1 };
  s4 -> s4 [81, 65535] { R4850 += 1, R4800 += 1 };
  s5 -> s5 [0, 64] { R4850 += 1, R4800 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4850 += 1 };
  s5 -> s7 [65, 65] { R4850 += 1, R4800 += 1 };
  s5 -> s8 [65, 65] { R4850 += 1, R4800 += 1 };
  s5 -> s5 [80, 65535] { R4850 += 1, R4800 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4850 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R4850 += 1, R4800 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4850 += 1 };
  s8 -> s8 [80, 65535] { R4850 += 1, R4800 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R4851 += 1, R4852 += 1 };
  s0 -> s2 [0, 65535] { R4852 += 1, R4801 += 1, R4802 += 1 };
  s0 -> s3 [65, 65] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4852 += 1 };
  s1 -> s3 [65, 65] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4852 += 1, R4801 += 1, R4802 += 1 };
  s2 -> s3 [65, 65] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R4852 += 1, R4802 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4852 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4852 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4852 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4854 += 1, R4804 += 1 };
  s0 -> s2 [0, 64] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R4853 += 1, R4854 += 1 };
  s0 -> s3 [0, 65535] { R4854 += 1, R4803 += 1, R4804 += 1 };
  s0 -> s4 [65, 65] { R4854 += 1, R4804 += 1 };
  s0 -> s5 [65, 65] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R4854 += 1, R4804 += 1 };
  s0 -> s1 [66, 79] { R4854 += 1, R4804 += 1 };
  s0 -> s2 [66, 65535] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s0 -> s1 [81, 65535] { R4854 += 1, R4804 += 1 };
  s1 -> s1 [0, 64] { R4854 += 1, R4804 += 1 };
  s1 -> s1 [0, 65535] { R4854 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R4854 += 1, R4804 += 1 };
  s1 -> s7 [65, 65] { R4854 += 1, R4804 += 1 };
  s1 -> s1 [66, 79] { R4854 += 1, R4804 += 1 };
  s1 -> s1 [81, 65535] { R4854 += 1, R4804 += 1 };
  s2 -> s1 [0, 64] { R4854 += 1, R4804 += 1 };
  s2 -> s2 [0, 64] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4854 += 1, R4804 += 1 };
  s2 -> s5 [65, 65] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s2 -> s6 [65, 65] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s2 -> s7 [65, 65] { R4854 += 1, R4804 += 1 };
  s2 -> s1 [66, 79] { R4854 += 1, R4804 += 1 };
  s2 -> s2 [66, 65535] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s2 -> s1 [81, 65535] { R4854 += 1, R4804 += 1 };
  s3 -> s1 [0, 64] { R4854 += 1, R4804 += 1 };
  s3 -> s2 [0, 64] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4854 += 1, R4803 += 1, R4804 += 1 };
  s3 -> s4 [65, 65] { R4854 += 1, R4804 += 1 };
  s3 -> s5 [65, 65] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R4854 += 1, R4804 += 1 };
  s3 -> s1 [66, 79] { R4854 += 1, R4804 += 1 };
  s3 -> s2 [66, 65535] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s3 -> s1 [81, 65535] { R4854 += 1, R4804 += 1 };
  s4 -> s4 [0, 79] { R4854 += 1, R4804 += 1 };
  s4 -> s4 [0, 65535] { R4854 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [81, 65535] { R4854 += 1, R4804 += 1 };
  s6 -> s4 [0, 79] { R4854 += 1, R4804 += 1 };
  s6 -> s6 [0, 65535] { R4854 += 1, R4804 += 1, R3509 += 1 };
  s6 -> s4 [81, 65535] { R4854 += 1, R4804 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4854 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R4856 += 1, R4805 += 1, R4806 += 1 };
  s0 -> s0 [0, 65535] { R4855 += 1, R4856 += 1 };
  s0 -> s4 [65, 65] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s0 -> s1 [66, 79] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s0 -> s2 [66, 65535] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [81, 65535] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s1 -> s1 [0, 65535] { R4856 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R4856 += 1, R4806 += 1 };
  s1 -> s7 [65, 65] { R4856 += 1, R4806 += 1 };
  s1 -> s1 [66, 79] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R4856 += 1, R4806 += 1 };
  s1 -> s1 [81, 65535] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s2 -> s1 [0, 64] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s4 [65, 65] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s5 [65, 65] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s6 [65, 65] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s2 -> s7 [65, 65] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s2 -> s1 [66, 79] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [81, 65535] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R4856 += 1, R4805 += 1, R4806 += 1 };
  s3 -> s4 [65, 65] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s3 -> s1 [66, 79] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s3 -> s2 [66, 65535] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [81, 65535] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s5 -> s6 [0, 79] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s5 -> s5 [0, 65535] { R4856 += 1, R4806 += 1, R4379 += 1, R4380 += 1 };
  s5 -> s6 [81, 65535] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s6 -> s6 [0, 79] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s6 -> s6 [0, 65535] { R4856 += 1, R4806 += 1 };
  s6 -> s9 [0, 65535] { R4856 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [81, 65535] { R4856 += 1, R4806 += 1, R4380 += 1 };
  s7 -> s7 [0, 65535] { R4856 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4856 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s9, s6, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s2 [0, 64] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s0 [0, 65535] { R4857 += 1, R4858 += 1 };
  s0 -> s3 [0, 65535] { R4858 += 1, R4807 += 1, R4808 += 1 };
  s0 -> s4 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s5 [65, 65] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s6 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s7 [65, 65] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s1 [66, 65535] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s2 [66, 65535] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s1 [0, 64] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s2 [0, 64] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s4 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s5 [65, 65] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s6 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s7 [65, 65] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s1 [66, 65535] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s2 [66, 65535] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [0, 64] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4858 += 1 };
  s2 -> s4 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s6 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [66, 65535] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s1 [0, 64] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s2 [0, 64] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s3 [0, 65535] { R4858 += 1, R4807 += 1, R4808 += 1 };
  s3 -> s4 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s5 [65, 65] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s6 [65, 65] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s7 [65, 65] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s1 [66, 65535] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s2 [66, 65535] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s4 -> s4 [0, 65535] { R4858 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4858 += 1, R4808 += 1, R4671 += 1, R4672 += 1 };
  s5 -> s6 [0, 65535] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R4858 += 1, R4808 += 1, R4672 += 1, R4673 += 1 };
  s6 -> s9 [0, 65535] { R4858 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4858 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4860 += 1, R4810 += 1 };
  s0 -> s0 [0, 65535] { R4859 += 1, R4860 += 1 };
  s0 -> s2 [0, 65535] { R4860 += 1, R4809 += 1, R4810 += 1 };
  s0 -> s3 [65, 65] { R4860 += 1, R4810 += 1 };
  s0 -> s4 [65, 65] { R4860 += 1, R4810 += 1 };
  s0 -> s1 [66, 65535] { R4860 += 1, R4810 += 1 };
  s1 -> s1 [0, 64] { R4860 += 1, R4810 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4860 += 1 };
  s1 -> s3 [65, 65] { R4860 += 1, R4810 += 1 };
  s1 -> s4 [65, 65] { R4860 += 1, R4810 += 1 };
  s1 -> s1 [66, 65535] { R4860 += 1, R4810 += 1 };
  s2 -> s1 [0, 64] { R4860 += 1, R4810 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4860 += 1, R4809 += 1, R4810 += 1 };
  s2 -> s3 [65, 65] { R4860 += 1, R4810 += 1 };
  s2 -> s4 [65, 65] { R4860 += 1, R4810 += 1 };
  s2 -> s1 [66, 65535] { R4860 += 1, R4810 += 1 };
  s3 -> s3 [0, 65535] { R4860 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4860 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4860 += 1, R4810 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4860 += 1 };
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s0 -> s2 [0, 64] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s0 -> s0 [0, 65535] { R4861 += 1, R4862 += 1 };
  s0 -> s3 [0, 65535] { R4862 += 1, R4811 += 1, R4812 += 1 };
  s0 -> s4 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s0 -> s5 [65, 65] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s0 -> s6 [65, 65] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s0 -> s7 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s0 -> s1 [66, 65535] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s0 -> s2 [66, 65535] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s1 -> s1 [0, 64] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s1 -> s2 [0, 64] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s1 -> s4 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s1 -> s5 [65, 65] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s1 -> s6 [65, 65] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s1 -> s7 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s1 -> s1 [66, 65535] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s1 -> s2 [66, 65535] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s2 -> s2 [0, 64] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4862 += 1 };
  s2 -> s4 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s2 -> s7 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s2 -> s2 [66, 65535] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s3 -> s1 [0, 64] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s3 -> s2 [0, 64] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s3 -> s3 [0, 65535] { R4862 += 1, R4811 += 1, R4812 += 1 };
  s3 -> s4 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s3 -> s5 [65, 65] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s3 -> s6 [65, 65] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s3 -> s7 [65, 65] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s3 -> s1 [66, 65535] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s3 -> s2 [66, 65535] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s4 -> s9 [0, 65535] { R4862 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s5 -> s5 [0, 65535] { R4862 += 1, R4812 += 1, R4771 += 1, R4772 += 1 };
  s5 -> s4 [0, 65535] { R4862 += 1, R4812 += 1, R4772 += 1, R4773 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4862 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4862 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4864 += 1, R4814 += 1 };
  s0 -> s2 [0, 65535] { R4864 += 1, R4813 += 1, R4814 += 1 };
  s0 -> s0 [0, 65535] { R4863 += 1, R4864 += 1 };
  s0 -> s3 [65, 65] { R4864 += 1, R4814 += 1 };
  s0 -> s4 [65, 65] { R4864 += 1, R4814 += 1 };
  s0 -> s1 [66, 65535] { R4864 += 1, R4814 += 1 };
  s1 -> s1 [0, 64] { R4864 += 1, R4814 += 1 };
  s1 -> s1 [0, 65535] { R4864 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4864 += 1, R4814 += 1 };
  s1 -> s4 [65, 65] { R4864 += 1, R4814 += 1 };
  s1 -> s1 [66, 65535] { R4864 += 1, R4814 += 1 };
  s2 -> s1 [0, 64] { R4864 += 1, R4814 += 1 };
  s2 -> s2 [0, 65535] { R4864 += 1, R4813 += 1, R4814 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4864 += 1, R4814 += 1 };
  s2 -> s4 [65, 65] { R4864 += 1, R4814 += 1 };
  s2 -> s1 [66, 65535] { R4864 += 1, R4814 += 1 };
  s3 -> s6 [0, 65535] { R4864 += 1 };
  s3 -> s3 [0, 65535] { R4864 += 1, R4814 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4864 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4864 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4796 && R2 = R4864 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4777 = 0 && R4778 = R4796 && R4779 = 0 && R4780 = R4796 && R4781 = 0 && R4782 = R4796 && R4783 = 0 && R4784 = R4796 && R4785 = 0 && R4786 = R4796 && R4787 = 0 && R4788 = R4796 && R4789 = 0 && R4790 = R4796 && R4791 = 0 && R4792 = R4796 && R4793 = 0 && R4794 = R4796 && R4795 = 0 && R4799 = 0 && R4800 = 0 && R4803 = 0 && R4804 = 0 && R4805 = 0 && R4806 = 0 && R4807 = 0 && R4808 = 0 && R4811 = 0 && R4812 = 0 && R4815 = 10 && R4816 = R4864 && R4817 = 10 && R4818 = R4864 && R4819 = 10 && R4820 = R4864 && R4821 = 10 && R4822 = R4864 && R4823 = 10 && R4824 = R4864 && R4825 = 10 && R4826 = R4864 && R4827 = 10 && R4828 = R4864 && R4829 = 10 && R4830 = R4864 && R4831 = 10 && R4832 = R4864 && R4833 = 10 && R4834 = R4864 && R4835 = 10 && R4836 = R4864 && R4837 = 10 && R4838 = R4864 && R4839 = 10 && R4840 = R4864 && R4841 = 10 && R4842 = R4864 && R4843 = 10 && R4844 = R4864 && R4845 = 10 && R4846 = R4864 && R4847 = 10 && R4848 = R4864 && R4849 = 10 && R4850 = R4864 && R4851 = 10 && R4852 = R4864 && R4853 = 10 && R4854 = R4864 && R4855 = 10 && R4856 = R4864 && R4857 = 10 && R4858 = R4864 && R4859 = 10 && R4860 = R4864 && R4861 = 10 && R4862 = R4864 && R4863 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4796 && 9 < R4864 && (R14 = 0 || (R4797 = 0 && R4798 = 0)) && (R14 = 0 || (R4801 = 0 && R4802 = 0)) && (R14 = 0 || (R4809 = 0 && R4810 = 0)) && (R14 = 0 || (R4813 = 0 && R4814 = 0)) && (R4676 + R4673 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4676 + R4673 = 0 || (R4674 + R4671 = 0 && R4675 + R4672 = 0)) && (R4776 + R4773 = 0 || (R4774 + R4771 = 0 && R4775 + R4772 = 0));
// End of Parikh automata intersection problem
