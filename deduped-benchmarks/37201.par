// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R29, R3, R30, R31, R32, R609, R610, R611, R612, R613, R614, R7, R709, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R784, R785, R786, R787, R788, R789, R790, R791, R792, R793, R794, R795, R796, R797, R798, R799, R8, R800, R801, R802;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R754 += 1 };
  s0 -> s0 [0, 65535] { R753 += 1, R754 += 1 };
  s0 -> s1 [45, 45] { R754 += 1 };
  s0 -> s2 [46, 46] { R754 += 1 };
  s0 -> s1 [48, 62] { R754 += 1 };
  s0 -> s3 [65, 65] { R754 += 1 };
  s0 -> s1 [66, 65535] { R754 += 1 };
  s1 -> s1 [0, 43] { R754 += 1 };
  s1 -> s1 [45, 45] { R754 += 1 };
  s1 -> s2 [46, 46] { R754 += 1 };
  s1 -> s1 [48, 62] { R754 += 1 };
  s1 -> s3 [65, 65] { R754 += 1 };
  s1 -> s1 [66, 65535] { R754 += 1 };
  s2 -> s1 [0, 43] { R754 += 1 };
  s2 -> s1 [45, 45] { R754 += 1 };
  s2 -> s2 [46, 46] { R754 += 1 };
  s2 -> s1 [48, 62] { R754 += 1 };
  s2 -> s3 [65, 65] { R754 += 1 };
  s2 -> s1 [66, 114] { R754 += 1 };
  s2 -> s8 [115, 115] { R754 += 1 };
  s2 -> s1 [116, 65535] { R754 += 1 };
  s3 -> s3 [0, 43] { R754 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R754 += 1 };
  s3 -> s4 [46, 46] { R754 += 1 };
  s3 -> s3 [48, 62] { R754 += 1 };
  s3 -> s3 [65, 65535] { R754 += 1 };
  s4 -> s3 [0, 43] { R754 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R754 += 1 };
  s4 -> s4 [46, 46] { R754 += 1 };
  s4 -> s3 [48, 62] { R754 += 1 };
  s4 -> s3 [65, 114] { R754 += 1 };
  s4 -> s5 [115, 115] { R754 += 1 };
  s4 -> s3 [116, 65535] { R754 += 1 };
  s5 -> s3 [0, 43] { R754 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R754 += 1 };
  s5 -> s4 [46, 46] { R754 += 1 };
  s5 -> s3 [48, 62] { R754 += 1 };
  s5 -> s3 [65, 110] { R754 += 1 };
  s5 -> s6 [111, 111] { R754 += 1 };
  s5 -> s3 [112, 65535] { R754 += 1 };
  s6 -> s3 [0, 43] { R754 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R754 += 1 };
  s6 -> s4 [46, 46] { R754 += 1 };
  s6 -> s3 [48, 62] { R754 += 1 };
  s6 -> s3 [65, 98] { R754 += 1 };
  s6 -> s7 [99, 99] { R754 += 1 };
  s6 -> s3 [100, 65535] { R754 += 1 };
  s7 -> s3 [0, 43] { R754 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R754 += 1 };
  s7 -> s4 [46, 46] { R754 += 1 };
  s7 -> s3 [48, 62] { R754 += 1 };
  s7 -> s3 [65, 106] { R754 += 1 };
  s7 -> s3 [108, 65535] { R754 += 1 };
  s8 -> s1 [0, 43] { R754 += 1 };
  s8 -> s1 [45, 45] { R754 += 1 };
  s8 -> s2 [46, 46] { R754 += 1 };
  s8 -> s1 [48, 62] { R754 += 1 };
  s8 -> s3 [65, 65] { R754 += 1 };
  s8 -> s1 [66, 110] { R754 += 1 };
  s8 -> s9 [111, 111] { R754 += 1 };
  s8 -> s1 [112, 65535] { R754 += 1 };
  s9 -> s1 [0, 43] { R754 += 1 };
  s9 -> s1 [45, 45] { R754 += 1 };
  s9 -> s2 [46, 46] { R754 += 1 };
  s9 -> s1 [48, 62] { R754 += 1 };
  s9 -> s3 [65, 65] { R754 += 1 };
  s9 -> s1 [66, 98] { R754 += 1 };
  s9 -> s10 [99, 99] { R754 += 1 };
  s9 -> s1 [100, 65535] { R754 += 1 };
  s10 -> s1 [0, 43] { R754 += 1 };
  s10 -> s1 [45, 45] { R754 += 1 };
  s10 -> s2 [46, 46] { R754 += 1 };
  s10 -> s1 [48, 62] { R754 += 1 };
  s10 -> s3 [65, 65] { R754 += 1 };
  s10 -> s1 [66, 106] { R754 += 1 };
  s10 -> s1 [108, 65535] { R754 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R755 += 1, R756 += 1 };
  s0 -> s1 [0, 65535] { R756 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R756 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R758 += 1 };
  s0 -> s0 [0, 65535] { R757 += 1, R758 += 1 };
  s0 -> s2 [0, 65535] { R758 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R758 += 1 };
  s0 -> s1 [59, 65535] { R758 += 1 };
  s1 -> s1 [0, 57] { R758 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R758 += 1 };
  s1 -> s1 [59, 65535] { R758 += 1 };
  s2 -> s1 [0, 57] { R758 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R758 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R758 += 1 };
  s2 -> s1 [59, 65535] { R758 += 1 };
  s3 -> s3 [0, 65535] { R758 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R760 += 1 };
  s0 -> s0 [0, 65535] { R759 += 1, R760 += 1 };
  s0 -> s2 [0, 65535] { R760 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R760 += 1 };
  s0 -> s1 [66, 65535] { R760 += 1 };
  s1 -> s1 [0, 64] { R760 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R760 += 1 };
  s1 -> s1 [66, 65535] { R760 += 1 };
  s2 -> s1 [0, 64] { R760 += 1 };
  s2 -> s2 [0, 65535] { R760 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R760 += 1 };
  s2 -> s1 [66, 65535] { R760 += 1 };
  s3 -> s3 [0, 65535] { R760 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R762 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R761 += 1, R762 += 1 };
  s0 -> s2 [0, 65535] { R762 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R762 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R762 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R762 += 1 };
  s1 -> s1 [0, 65535] { R762 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R762 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R762 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R762 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R762 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R762 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R762 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R764 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R763 += 1, R764 += 1 };
  s0 -> s2 [0, 65535] { R764 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R764 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R764 += 1 };
  s2 -> s1 [0, 65535] { R764 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R764 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R764 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R766 += 1, R716 += 1 };
  s0 -> s0 [0, 65535] { R765 += 1, R766 += 1 };
  s0 -> s2 [0, 65535] { R766 += 1, R715 += 1, R716 += 1 };
  s0 -> s1 [66, 65535] { R766 += 1, R716 += 1 };
  s1 -> s1 [0, 64] { R766 += 1, R716 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R766 += 1 };
  s1 -> s1 [66, 65535] { R766 += 1, R716 += 1 };
  s2 -> s1 [0, 64] { R766 += 1, R716 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R766 += 1, R715 += 1, R716 += 1 };
  s2 -> s1 [66, 65535] { R766 += 1, R716 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R768 += 1, R717 += 1, R718 += 1 };
  s0 -> s2 [0, 65535] { R768 += 1, R718 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R767 += 1, R768 += 1 };
  s1 -> s1 [0, 65535] { R768 += 1, R717 += 1, R718 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R768 += 1, R718 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R768 += 1, R718 += 1, R13 += 1 };
  s2 -> s4 [0, 65535] { R768 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R768 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R770 += 1, R720 += 1 };
  s0 -> s2 [0, 65535] { R770 += 1, R719 += 1, R720 += 1 };
  s0 -> s0 [0, 65535] { R769 += 1, R770 += 1 };
  s0 -> s3 [80, 80] { R770 += 1, R720 += 1 };
  s0 -> s1 [81, 65535] { R770 += 1, R720 += 1 };
  s1 -> s1 [0, 65] { R770 += 1, R720 += 1 };
  s1 -> s3 [80, 80] { R770 += 1, R720 += 1 };
  s1 -> s1 [81, 65535] { R770 += 1, R720 += 1 };
  s2 -> s1 [0, 65] { R770 += 1, R720 += 1 };
  s2 -> s2 [0, 65535] { R770 += 1, R719 += 1, R720 += 1 };
  s2 -> s3 [80, 80] { R770 += 1, R720 += 1 };
  s2 -> s1 [81, 65535] { R770 += 1, R720 += 1 };
  s3 -> s3 [0, 65] { R770 += 1, R720 += 1 };
  s3 -> s3 [0, 65535] { R770 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [80, 65535] { R770 += 1, R720 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R771 += 1, R772 += 1 };
  s0 -> s1 [0, 65535] { R772 += 1, R721 += 1, R722 += 1 };
  s0 -> s2 [0, 65535] { R772 += 1, R722 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R772 += 1, R721 += 1, R722 += 1 };
  s1 -> s2 [0, 65535] { R772 += 1, R722 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R772 += 1 };
  s2 -> s2 [0, 65535] { R772 += 1, R722 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R772 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R774 += 1, R724 += 1 };
  s0 -> s0 [0, 65535] { R773 += 1, R774 += 1 };
  s0 -> s2 [0, 65535] { R774 += 1, R723 += 1, R724 += 1 };
  s0 -> s3 [0, 65535] { R774 += 1, R724 += 1, R28 += 1 };
  s0 -> s1 [81, 65535] { R774 += 1, R724 += 1 };
  s1 -> s1 [0, 79] { R774 += 1, R724 += 1 };
  s1 -> s1 [0, 65535] { R774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R774 += 1, R724 += 1 };
  s2 -> s1 [0, 79] { R774 += 1, R724 += 1 };
  s2 -> s2 [0, 65535] { R774 += 1, R723 += 1, R724 += 1 };
  s2 -> s3 [0, 65535] { R774 += 1, R724 += 1, R28 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [81, 65535] { R774 += 1, R724 += 1 };
  s3 -> s1 [0, 79] { R774 += 1, R724 += 1 };
  s3 -> s4 [0, 65535] { R774 += 1 };
  s3 -> s3 [0, 65535] { R774 += 1, R724 += 1, R28 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [81, 65535] { R774 += 1, R724 += 1 };
  s4 -> s4 [0, 65535] { R774 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R776 += 1, R726 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R776 += 1, R725 += 1, R726 += 1 };
  s0 -> s0 [0, 65535] { R775 += 1, R776 += 1 };
  s0 -> s3 [0, 65535] { R776 += 1, R726 += 1, R31 += 1, R32 += 1 };
  s0 -> s1 [81, 65535] { R776 += 1, R726 += 1, R32 += 1 };
  s1 -> s1 [0, 79] { R776 += 1, R726 += 1, R32 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R776 += 1, R726 += 1 };
  s1 -> s5 [0, 65535] { R776 += 1 };
  s1 -> s1 [81, 65535] { R776 += 1, R726 += 1, R32 += 1 };
  s2 -> s1 [0, 79] { R776 += 1, R726 += 1, R32 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R776 += 1, R725 += 1, R726 += 1 };
  s2 -> s3 [0, 65535] { R776 += 1, R726 += 1, R31 += 1, R32 += 1 };
  s2 -> s1 [81, 65535] { R776 += 1, R726 += 1, R32 += 1 };
  s3 -> s1 [0, 79] { R776 += 1, R726 += 1, R32 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R776 += 1, R726 += 1, R31 += 1, R32 += 1 };
  s3 -> s5 [0, 65535] { R776 += 1 };
  s3 -> s1 [81, 65535] { R776 += 1, R726 += 1, R32 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R776 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R778 += 1, R727 += 1, R728 += 1 };
  s0 -> s2 [0, 65535] { R778 += 1, R728 += 1 };
  s0 -> s0 [0, 65535] { R777 += 1, R778 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R778 += 1, R727 += 1, R728 += 1 };
  s1 -> s2 [0, 65535] { R778 += 1, R728 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R778 += 1, R728 += 1 };
  s2 -> s4 [0, 65535] { R778 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R778 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R780 += 1, R730 += 1 };
  s0 -> s2 [0, 65535] { R780 += 1, R729 += 1, R730 += 1 };
  s0 -> s0 [0, 65535] { R779 += 1, R780 += 1 };
  s1 -> s1 [0, 65535] { R780 += 1, R730 += 1 };
  s1 -> s4 [0, 65535] { R780 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R780 += 1, R730 += 1 };
  s2 -> s2 [0, 65535] { R780 += 1, R729 += 1, R730 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R780 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R781 += 1, R782 += 1 };
  s0 -> s1 [0, 65535] { R782 += 1, R732 += 1, R713 += 1, R714 += 1 };
  s0 -> s2 [0, 65535] { R782 += 1, R731 += 1, R732 += 1 };
  s0 -> s3 [0, 65535] { R782 += 1, R732 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R782 += 1, R732 += 1, R713 += 1, R714 += 1 };
  s1 -> s3 [0, 65535] { R782 += 1, R732 += 1 };
  s1 -> s5 [0, 65535] { R782 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R782 += 1, R732 += 1, R713 += 1, R714 += 1 };
  s2 -> s2 [0, 65535] { R782 += 1, R731 += 1, R732 += 1 };
  s2 -> s3 [0, 65535] { R782 += 1, R732 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R782 += 1, R732 += 1 };
  s3 -> s5 [0, 65535] { R782 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R782 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R784 += 1, R734 += 1 };
  s0 -> s2 [0, 65535] { R784 += 1, R733 += 1, R734 += 1 };
  s0 -> s0 [0, 65535] { R783 += 1, R784 += 1 };
  s1 -> s1 [0, 65535] { R784 += 1, R734 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R784 += 1 };
  s2 -> s1 [0, 65535] { R784 += 1, R734 += 1 };
  s2 -> s2 [0, 65535] { R784 += 1, R733 += 1, R734 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R784 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R786 += 1, R736 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R785 += 1, R786 += 1 };
  s0 -> s2 [0, 65535] { R786 += 1, R735 += 1, R736 += 1 };
  s1 -> s1 [0, 65535] { R786 += 1, R736 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R786 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R786 += 1, R736 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R786 += 1, R735 += 1, R736 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R786 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R788 += 1, R738 += 1 };
  s0 -> s2 [0, 65535] { R788 += 1, R737 += 1, R738 += 1 };
  s0 -> s0 [0, 65535] { R787 += 1, R788 += 1 };
  s0 -> s3 [65, 65] { R788 += 1, R738 += 1 };
  s0 -> s4 [65, 65] { R788 += 1, R738 += 1 };
  s0 -> s1 [81, 65535] { R788 += 1, R738 += 1 };
  s1 -> s1 [0, 64] { R788 += 1, R738 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R788 += 1 };
  s1 -> s3 [65, 65] { R788 += 1, R738 += 1 };
  s1 -> s4 [65, 65] { R788 += 1, R738 += 1 };
  s1 -> s1 [81, 65535] { R788 += 1, R738 += 1 };
  s2 -> s1 [0, 64] { R788 += 1, R738 += 1 };
  s2 -> s2 [0, 65535] { R788 += 1, R737 += 1, R738 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R788 += 1, R738 += 1 };
  s2 -> s4 [65, 65] { R788 += 1, R738 += 1 };
  s2 -> s1 [81, 65535] { R788 += 1, R738 += 1 };
  s3 -> s3 [0, 65] { R788 += 1, R738 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R788 += 1 };
  s3 -> s3 [81, 65535] { R788 += 1, R738 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R788 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R790 += 1, R740 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R789 += 1, R790 += 1 };
  s0 -> s2 [0, 65535] { R790 += 1, R739 += 1, R740 += 1 };
  s0 -> s3 [65, 65] { R790 += 1, R740 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R790 += 1, R740 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R790 += 1, R740 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R790 += 1, R740 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R790 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R790 += 1, R740 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R790 += 1, R740 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R790 += 1, R740 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R790 += 1, R740 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R790 += 1, R739 += 1, R740 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R790 += 1, R740 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R790 += 1, R740 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R790 += 1, R740 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R790 += 1, R740 += 1, R25 += 1 };
  s3 -> s6 [0, 65535] { R790 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R790 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R790 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R792 += 1, R742 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R792 += 1, R741 += 1, R742 += 1 };
  s0 -> s0 [0, 65535] { R791 += 1, R792 += 1 };
  s0 -> s3 [65, 65] { R792 += 1, R742 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R792 += 1, R742 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R792 += 1, R742 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R792 += 1, R742 += 1, R27 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R792 += 1 };
  s1 -> s3 [65, 65] { R792 += 1, R742 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R792 += 1, R742 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R792 += 1, R742 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R792 += 1, R742 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R792 += 1, R741 += 1, R742 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R792 += 1, R742 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R792 += 1, R742 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R792 += 1, R742 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R792 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R792 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R792 += 1, R742 += 1, R27 += 1 };
  s5 -> s5 [0, 65535] { R792 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R794 += 1, R743 += 1, R744 += 1 };
  s0 -> s0 [0, 65535] { R793 += 1, R794 += 1 };
  s0 -> s3 [65, 65] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R794 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R794 += 1, R743 += 1, R744 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R794 += 1, R744 += 1, R29 += 1, R30 += 1 };
  s3 -> s6 [0, 65535] { R794 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R794 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R794 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s0 -> s2 [0, 64] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R795 += 1, R796 += 1 };
  s0 -> s3 [0, 65535] { R796 += 1, R745 += 1, R746 += 1 };
  s0 -> s4 [65, 65] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s0 -> s5 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s0 -> s6 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s0 -> s7 [65, 65] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s0 -> s1 [66, 65535] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s0 -> s2 [66, 65535] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s1 -> s1 [0, 64] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s1 -> s11 [0, 64] { R796 += 1, R746 += 1 };
  s1 -> s12 [65, 65] { R796 += 1, R746 += 1 };
  s1 -> s8 [65, 65] { R796 += 1, R746 += 1 };
  s1 -> s5 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s1 -> s6 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s1 -> s1 [66, 65535] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s1 -> s11 [66, 65535] { R796 += 1, R746 += 1 };
  s2 -> s1 [0, 64] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s2 -> s2 [0, 64] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s2 -> s4 [65, 65] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s2 -> s6 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s2 -> s7 [65, 65] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s2 -> s1 [66, 65535] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s2 -> s2 [66, 65535] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s3 -> s1 [0, 64] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s3 -> s2 [0, 64] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s3 -> s3 [0, 65535] { R796 += 1, R745 += 1, R746 += 1 };
  s3 -> s4 [65, 65] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s3 -> s6 [65, 65] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s3 -> s7 [65, 65] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s3 -> s1 [66, 65535] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s3 -> s2 [66, 65535] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s4 -> s4 [0, 65535] { R796 += 1, R746 += 1, R609 += 1, R610 += 1 };
  s4 -> s6 [0, 65535] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s6 -> s8 [0, 65535] { R796 += 1, R746 += 1 };
  s6 -> s6 [0, 65535] { R796 += 1, R746 += 1, R610 += 1, R611 += 1 };
  s8 -> s8 [0, 65535] { R796 += 1, R746 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R796 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R796 += 1 };
  s11 -> s11 [0, 64] { R796 += 1, R746 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R796 += 1 };
  s11 -> s12 [65, 65] { R796 += 1, R746 += 1 };
  s11 -> s8 [65, 65] { R796 += 1, R746 += 1 };
  s11 -> s11 [66, 65535] { R796 += 1, R746 += 1 };
  s12 -> s12 [0, 65535] { R796 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R798 += 1, R748 += 1 };
  s0 -> s2 [0, 65535] { R798 += 1, R747 += 1, R748 += 1 };
  s0 -> s0 [0, 65535] { R797 += 1, R798 += 1 };
  s0 -> s3 [65, 65] { R798 += 1, R748 += 1 };
  s0 -> s4 [65, 65] { R798 += 1, R748 += 1 };
  s0 -> s1 [66, 65535] { R798 += 1, R748 += 1 };
  s1 -> s1 [0, 64] { R798 += 1, R748 += 1 };
  s1 -> s1 [0, 65535] { R798 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R798 += 1, R748 += 1 };
  s1 -> s4 [65, 65] { R798 += 1, R748 += 1 };
  s1 -> s1 [66, 65535] { R798 += 1, R748 += 1 };
  s2 -> s1 [0, 64] { R798 += 1, R748 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R798 += 1, R747 += 1, R748 += 1 };
  s2 -> s3 [65, 65] { R798 += 1, R748 += 1 };
  s2 -> s4 [65, 65] { R798 += 1, R748 += 1 };
  s2 -> s1 [66, 65535] { R798 += 1, R748 += 1 };
  s3 -> s3 [0, 65535] { R798 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R798 += 1, R748 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R798 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R798 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s0 -> s2 [0, 64] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s0 -> s3 [0, 65535] { R800 += 1, R749 += 1, R750 += 1 };
  s0 -> s0 [0, 65535] { R799 += 1, R800 += 1 };
  s0 -> s4 [65, 65] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s0 -> s5 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s0 -> s6 [65, 65] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s0 -> s7 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s0 -> s1 [66, 65535] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s0 -> s2 [66, 65535] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s1 -> s1 [0, 64] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s1 -> s1 [0, 65535] { R800 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s1 -> s7 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s1 -> s1 [66, 65535] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s2 -> s1 [0, 64] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s2 -> s2 [0, 64] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s2 -> s4 [65, 65] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s2 -> s5 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s2 -> s6 [65, 65] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s2 -> s7 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s2 -> s1 [66, 65535] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s2 -> s2 [66, 65535] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s3 -> s1 [0, 64] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s3 -> s2 [0, 64] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s3 -> s3 [0, 65535] { R800 += 1, R749 += 1, R750 += 1 };
  s3 -> s4 [65, 65] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s3 -> s5 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s3 -> s6 [65, 65] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s3 -> s7 [65, 65] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s3 -> s1 [66, 65535] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s3 -> s2 [66, 65535] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s5 -> s5 [0, 65535] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R800 += 1 };
  s6 -> s5 [0, 65535] { R800 += 1, R750 += 1, R710 += 1, R711 += 1 };
  s6 -> s6 [0, 65535] { R800 += 1, R750 += 1, R709 += 1, R710 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R800 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R800 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R802 += 1, R752 += 1 };
  s0 -> s2 [0, 65535] { R802 += 1, R751 += 1, R752 += 1 };
  s0 -> s0 [0, 65535] { R801 += 1, R802 += 1 };
  s0 -> s3 [65, 65] { R802 += 1, R752 += 1 };
  s0 -> s4 [65, 65] { R802 += 1, R752 += 1 };
  s0 -> s1 [66, 65535] { R802 += 1, R752 += 1 };
  s1 -> s1 [0, 64] { R802 += 1, R752 += 1 };
  s1 -> s1 [0, 65535] { R802 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R802 += 1, R752 += 1 };
  s1 -> s4 [65, 65] { R802 += 1, R752 += 1 };
  s1 -> s1 [66, 65535] { R802 += 1, R752 += 1 };
  s2 -> s1 [0, 64] { R802 += 1, R752 += 1 };
  s2 -> s2 [0, 65535] { R802 += 1, R751 += 1, R752 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R802 += 1, R752 += 1 };
  s2 -> s4 [65, 65] { R802 += 1, R752 += 1 };
  s2 -> s1 [66, 65535] { R802 += 1, R752 += 1 };
  s3 -> s3 [0, 65535] { R802 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R802 += 1, R752 += 1 };
  s4 -> s5 [0, 65535] { R802 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R802 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R734 && R2 = R802 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R715 = 0 && R716 = R734 && R717 = 0 && R718 = R734 && R719 = 0 && R720 = R734 && R721 = 0 && R722 = R734 && R723 = 0 && R724 = R734 && R725 = 0 && R726 = R734 && R727 = 0 && R728 = R734 && R729 = 0 && R730 = R734 && R731 = 0 && R732 = R734 && R733 = 0 && R745 = 0 && R746 = 0 && R749 = 0 && R750 = 0 && R753 = 10 && R754 = R802 && R755 = 10 && R756 = R802 && R757 = 10 && R758 = R802 && R759 = 10 && R760 = R802 && R761 = 10 && R762 = R802 && R763 = 10 && R764 = R802 && R765 = 10 && R766 = R802 && R767 = 10 && R768 = R802 && R769 = 10 && R770 = R802 && R771 = 10 && R772 = R802 && R773 = 10 && R774 = R802 && R775 = 10 && R776 = R802 && R777 = 10 && R778 = R802 && R779 = 10 && R780 = R802 && R781 = 10 && R782 = R802 && R783 = 10 && R784 = R802 && R785 = 10 && R786 = R802 && R787 = 10 && R788 = R802 && R789 = 10 && R790 = R802 && R791 = 10 && R792 = R802 && R793 = 10 && R794 = R802 && R795 = 10 && R796 = R802 && R797 = 10 && R798 = R802 && R799 = 10 && R800 = R802 && R801 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R734 && 9 < R802 && (R14 = 0 || (R735 = 0 && R736 = 0)) && (R14 = 0 || (R737 = 0 && R738 = 0)) && (R14 = 0 || (R739 = 0 && R740 = 0)) && (R14 = 0 || (R741 = 0 && R742 = 0)) && (R14 = 0 || (R743 = 0 && R744 = 0)) && (R14 = 0 || (R747 = 0 && R748 = 0)) && (R14 = 0 || (R751 = 0 && R752 = 0)) && (R614 + R611 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R614 + R611 = 0 || (R612 + R609 = 0 && R613 + R610 = 0)) && (R714 + R711 = 0 || (R712 + R709 = 0 && R713 + R710 = 0));
// End of Parikh automata intersection problem
