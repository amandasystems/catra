// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R2, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R25, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R26, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R27, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R28, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R29, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R30, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R31, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R32, R320, R33, R34, R35, R36, R37, R38, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [112, 112];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R272 += 1 };
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s0 -> s1 [45, 45] { R272 += 1 };
  s0 -> s2 [46, 46] { R272 += 1 };
  s0 -> s1 [48, 62] { R272 += 1 };
  s0 -> s3 [65, 65] { R272 += 1 };
  s0 -> s1 [66, 65535] { R272 += 1 };
  s1 -> s1 [0, 43] { R272 += 1 };
  s1 -> s1 [45, 45] { R272 += 1 };
  s1 -> s2 [46, 46] { R272 += 1 };
  s1 -> s1 [48, 62] { R272 += 1 };
  s1 -> s3 [65, 65] { R272 += 1 };
  s1 -> s1 [66, 65535] { R272 += 1 };
  s2 -> s1 [0, 43] { R272 += 1 };
  s2 -> s1 [45, 45] { R272 += 1 };
  s2 -> s2 [46, 46] { R272 += 1 };
  s2 -> s1 [48, 62] { R272 += 1 };
  s2 -> s3 [65, 65] { R272 += 1 };
  s2 -> s1 [66, 114] { R272 += 1 };
  s2 -> s8 [115, 115] { R272 += 1 };
  s2 -> s1 [116, 65535] { R272 += 1 };
  s3 -> s3 [0, 43] { R272 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R272 += 1 };
  s3 -> s4 [46, 46] { R272 += 1 };
  s3 -> s3 [48, 62] { R272 += 1 };
  s3 -> s3 [65, 65535] { R272 += 1 };
  s4 -> s3 [0, 43] { R272 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R272 += 1 };
  s4 -> s4 [46, 46] { R272 += 1 };
  s4 -> s3 [48, 62] { R272 += 1 };
  s4 -> s3 [65, 114] { R272 += 1 };
  s4 -> s5 [115, 115] { R272 += 1 };
  s4 -> s3 [116, 65535] { R272 += 1 };
  s5 -> s3 [0, 43] { R272 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R272 += 1 };
  s5 -> s4 [46, 46] { R272 += 1 };
  s5 -> s3 [48, 62] { R272 += 1 };
  s5 -> s3 [65, 110] { R272 += 1 };
  s5 -> s6 [111, 111] { R272 += 1 };
  s5 -> s3 [112, 65535] { R272 += 1 };
  s6 -> s3 [0, 43] { R272 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R272 += 1 };
  s6 -> s4 [46, 46] { R272 += 1 };
  s6 -> s3 [48, 62] { R272 += 1 };
  s6 -> s3 [65, 98] { R272 += 1 };
  s6 -> s7 [99, 99] { R272 += 1 };
  s6 -> s3 [100, 65535] { R272 += 1 };
  s7 -> s3 [0, 43] { R272 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R272 += 1 };
  s7 -> s4 [46, 46] { R272 += 1 };
  s7 -> s3 [48, 62] { R272 += 1 };
  s7 -> s3 [65, 106] { R272 += 1 };
  s7 -> s3 [108, 65535] { R272 += 1 };
  s8 -> s1 [0, 43] { R272 += 1 };
  s8 -> s1 [45, 45] { R272 += 1 };
  s8 -> s2 [46, 46] { R272 += 1 };
  s8 -> s1 [48, 62] { R272 += 1 };
  s8 -> s3 [65, 65] { R272 += 1 };
  s8 -> s1 [66, 110] { R272 += 1 };
  s8 -> s9 [111, 111] { R272 += 1 };
  s8 -> s1 [112, 65535] { R272 += 1 };
  s9 -> s1 [0, 43] { R272 += 1 };
  s9 -> s1 [45, 45] { R272 += 1 };
  s9 -> s2 [46, 46] { R272 += 1 };
  s9 -> s1 [48, 62] { R272 += 1 };
  s9 -> s3 [65, 65] { R272 += 1 };
  s9 -> s1 [66, 98] { R272 += 1 };
  s9 -> s10 [99, 99] { R272 += 1 };
  s9 -> s1 [100, 65535] { R272 += 1 };
  s10 -> s1 [0, 43] { R272 += 1 };
  s10 -> s1 [45, 45] { R272 += 1 };
  s10 -> s2 [46, 46] { R272 += 1 };
  s10 -> s1 [48, 62] { R272 += 1 };
  s10 -> s3 [65, 65] { R272 += 1 };
  s10 -> s1 [66, 106] { R272 += 1 };
  s10 -> s1 [108, 65535] { R272 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R273 += 1, R274 += 1 };
  s0 -> s1 [0, 65535] { R274 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R274 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R276 += 1 };
  s0 -> s0 [0, 65535] { R275 += 1, R276 += 1 };
  s0 -> s2 [0, 65535] { R276 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R276 += 1 };
  s0 -> s1 [59, 65535] { R276 += 1 };
  s1 -> s1 [0, 57] { R276 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R276 += 1 };
  s1 -> s1 [59, 65535] { R276 += 1 };
  s2 -> s1 [0, 57] { R276 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R276 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R276 += 1 };
  s2 -> s1 [59, 65535] { R276 += 1 };
  s3 -> s3 [0, 65535] { R276 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R278 += 1 };
  s0 -> s0 [0, 65535] { R277 += 1, R278 += 1 };
  s0 -> s2 [0, 65535] { R278 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R278 += 1 };
  s0 -> s1 [66, 65535] { R278 += 1 };
  s1 -> s1 [0, 64] { R278 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R278 += 1 };
  s1 -> s1 [66, 65535] { R278 += 1 };
  s2 -> s1 [0, 64] { R278 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R278 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R278 += 1 };
  s2 -> s1 [66, 65535] { R278 += 1 };
  s3 -> s3 [0, 65535] { R278 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R280 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R280 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R279 += 1, R280 += 1 };
  s0 -> s3 [91, 91] { R280 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R280 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R280 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R280 += 1 };
  s2 -> s1 [0, 90] { R280 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R280 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R280 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R280 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R280 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R280 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R281 += 1, R282 += 1 };
  s0 -> s1 [0, 65535] { R282 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R282 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R282 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R282 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R282 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R282 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R282 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R284 += 1, R234 += 1 };
  s0 -> s2 [0, 65535] { R284 += 1, R233 += 1, R234 += 1 };
  s0 -> s0 [0, 65535] { R283 += 1, R284 += 1 };
  s0 -> s1 [66, 65535] { R284 += 1, R234 += 1 };
  s1 -> s1 [0, 64] { R284 += 1, R234 += 1 };
  s1 -> s1 [0, 65535] { R284 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R284 += 1, R234 += 1 };
  s2 -> s1 [0, 64] { R284 += 1, R234 += 1 };
  s2 -> s2 [0, 65535] { R284 += 1, R233 += 1, R234 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R284 += 1, R234 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R286 += 1, R235 += 1, R236 += 1 };
  s0 -> s0 [0, 65535] { R285 += 1, R286 += 1 };
  s0 -> s2 [0, 65535] { R286 += 1, R236 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R286 += 1, R235 += 1, R236 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R286 += 1, R236 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R286 += 1 };
  s2 -> s2 [0, 65535] { R286 += 1, R236 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R286 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R288 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R288 += 1, R237 += 1, R238 += 1 };
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s0 -> s3 [80, 80] { R288 += 1, R238 += 1 };
  s0 -> s1 [81, 65535] { R288 += 1, R238 += 1 };
  s1 -> s1 [0, 65] { R288 += 1, R238 += 1 };
  s1 -> s3 [80, 80] { R288 += 1, R238 += 1 };
  s1 -> s1 [81, 65535] { R288 += 1, R238 += 1 };
  s2 -> s1 [0, 65] { R288 += 1, R238 += 1 };
  s2 -> s2 [0, 65535] { R288 += 1, R237 += 1, R238 += 1 };
  s2 -> s3 [80, 80] { R288 += 1, R238 += 1 };
  s2 -> s1 [81, 65535] { R288 += 1, R238 += 1 };
  s3 -> s3 [0, 65] { R288 += 1, R238 += 1 };
  s3 -> s3 [0, 65535] { R288 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [80, 65535] { R288 += 1, R238 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s0 -> s1 [0, 65535] { R290 += 1, R239 += 1, R240 += 1 };
  s0 -> s2 [0, 65535] { R290 += 1, R240 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R290 += 1, R239 += 1, R240 += 1 };
  s1 -> s2 [0, 65535] { R290 += 1, R240 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R290 += 1 };
  s2 -> s2 [0, 65535] { R290 += 1, R240 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R290 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 79] { R292 += 1, R242 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s0 -> s2 [0, 65535] { R292 += 1, R241 += 1, R242 += 1 };
  s0 -> s3 [0, 65535] { R292 += 1, R242 += 1, R28 += 1 };
  s0 -> s1 [81, 65535] { R292 += 1, R242 += 1 };
  s1 -> s1 [0, 79] { R292 += 1, R242 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R292 += 1 };
  s1 -> s1 [81, 65535] { R292 += 1, R242 += 1 };
  s2 -> s1 [0, 79] { R292 += 1, R242 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R292 += 1, R241 += 1, R242 += 1 };
  s2 -> s3 [0, 65535] { R292 += 1, R242 += 1, R28 += 1 };
  s2 -> s1 [81, 65535] { R292 += 1, R242 += 1 };
  s3 -> s1 [0, 79] { R292 += 1, R242 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R292 += 1 };
  s3 -> s3 [0, 65535] { R292 += 1, R242 += 1, R28 += 1 };
  s3 -> s1 [81, 65535] { R292 += 1, R242 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R292 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 79] { R294 += 1, R244 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R243 += 1, R244 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s3 [0, 65535] { R294 += 1, R244 += 1, R31 += 1, R32 += 1 };
  s0 -> s1 [81, 65535] { R294 += 1, R244 += 1, R32 += 1 };
  s1 -> s1 [0, 79] { R294 += 1, R244 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R294 += 1, R244 += 1 };
  s1 -> s4 [0, 65535] { R294 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [81, 65535] { R294 += 1, R244 += 1, R32 += 1 };
  s2 -> s1 [0, 79] { R294 += 1, R244 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R294 += 1, R243 += 1, R244 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R294 += 1, R244 += 1, R31 += 1, R32 += 1 };
  s2 -> s1 [81, 65535] { R294 += 1, R244 += 1, R32 += 1 };
  s3 -> s1 [0, 79] { R294 += 1, R244 += 1, R32 += 1 };
  s3 -> s4 [0, 65535] { R294 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R294 += 1, R244 += 1, R31 += 1, R32 += 1 };
  s3 -> s1 [81, 65535] { R294 += 1, R244 += 1, R32 += 1 };
  s4 -> s4 [0, 65535] { R294 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R296 += 1, R246 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R246 += 1, R37 += 1, R38 += 1 };
  s0 -> s3 [0, 65535] { R296 += 1, R245 += 1, R246 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R296 += 1, R246 += 1, R36 += 1, R37 += 1 };
  s1 -> s6 [0, 65535] { R296 += 1 };
  s1 -> s2 [0, 65535] { R296 += 1, R246 += 1, R37 += 1, R38 += 1 };
  s2 -> s5 [0, 65535] { R296 += 1, R246 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R296 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R246 += 1, R37 += 1, R38 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R296 += 1, R246 += 1, R36 += 1, R37 += 1 };
  s3 -> s2 [0, 65535] { R296 += 1, R246 += 1, R37 += 1, R38 += 1 };
  s3 -> s3 [0, 65535] { R296 += 1, R245 += 1, R246 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R296 += 1, R246 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R296 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R296 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R298 += 1, R247 += 1, R248 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R248 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s1 -> s1 [0, 65535] { R298 += 1, R247 += 1, R248 += 1 };
  s1 -> s2 [0, 65535] { R298 += 1, R248 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R298 += 1, R248 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R298 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R298 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s1 [0, 65535] { R300 += 1, R250 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R249 += 1, R250 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R300 += 1, R250 += 1 };
  s1 -> s4 [0, 65535] { R300 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R300 += 1, R250 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R249 += 1, R250 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R300 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R302 += 1, R251 += 1, R252 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R252 += 1 };
  s1 -> s1 [0, 65535] { R302 += 1, R251 += 1, R252 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R302 += 1, R252 += 1 };
  s2 -> s3 [0, 65535] { R302 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R302 += 1, R252 += 1 };
  s3 -> s3 [0, 65535] { R302 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R304 += 1, R253 += 1, R254 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R254 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s1 -> s1 [0, 65535] { R304 += 1, R253 += 1, R254 += 1 };
  s1 -> s2 [0, 65535] { R304 += 1, R254 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R304 += 1, R254 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R304 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R304 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R306 += 1, R256 += 1 };
  s0 -> s2 [0, 65535] { R306 += 1, R255 += 1, R256 += 1 };
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s3 [65, 65] { R306 += 1, R256 += 1 };
  s0 -> s4 [65, 65] { R306 += 1, R256 += 1 };
  s0 -> s1 [81, 65535] { R306 += 1, R256 += 1 };
  s1 -> s1 [0, 64] { R306 += 1, R256 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R306 += 1 };
  s1 -> s3 [65, 65] { R306 += 1, R256 += 1 };
  s1 -> s4 [65, 65] { R306 += 1, R256 += 1 };
  s1 -> s1 [81, 65535] { R306 += 1, R256 += 1 };
  s2 -> s1 [0, 64] { R306 += 1, R256 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R306 += 1, R255 += 1, R256 += 1 };
  s2 -> s3 [65, 65] { R306 += 1, R256 += 1 };
  s2 -> s4 [65, 65] { R306 += 1, R256 += 1 };
  s2 -> s1 [81, 65535] { R306 += 1, R256 += 1 };
  s3 -> s3 [0, 65] { R306 += 1, R256 += 1 };
  s3 -> s3 [0, 65535] { R306 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [81, 65535] { R306 += 1, R256 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R306 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R308 += 1, R258 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R257 += 1, R258 += 1 };
  s0 -> s3 [65, 65] { R308 += 1, R258 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R308 += 1, R258 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R308 += 1, R258 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R308 += 1, R258 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R308 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R308 += 1, R258 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R308 += 1, R258 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R308 += 1, R258 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R308 += 1, R258 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R308 += 1, R257 += 1, R258 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R308 += 1, R258 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R308 += 1, R258 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R308 += 1, R258 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R308 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R308 += 1 };
  s4 -> s4 [0, 65535] { R308 += 1, R258 += 1, R25 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R308 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R310 += 1, R260 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R259 += 1, R260 += 1 };
  s0 -> s3 [65, 65] { R310 += 1, R260 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R310 += 1, R260 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R310 += 1, R260 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R310 += 1, R260 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R310 += 1 };
  s1 -> s3 [65, 65] { R310 += 1, R260 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R310 += 1, R260 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R310 += 1, R260 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R310 += 1, R260 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R310 += 1, R259 += 1, R260 += 1 };
  s2 -> s3 [65, 65] { R310 += 1, R260 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R310 += 1, R260 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R310 += 1, R260 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R310 += 1, R260 += 1, R27 += 1 };
  s3 -> s6 [0, 65535] { R310 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R310 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R310 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R312 += 1, R261 += 1, R262 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s3 [65, 65] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R312 += 1 };
  s1 -> s3 [65, 65] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R312 += 1, R261 += 1, R262 += 1 };
  s2 -> s3 [65, 65] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R312 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R312 += 1, R262 += 1, R29 += 1, R30 += 1 };
  s4 -> s5 [0, 65535] { R312 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R312 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R314 += 1, R263 += 1, R264 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s3 [65, 65] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s0 -> s4 [65, 65] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s0 -> s1 [66, 65535] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s1 -> s1 [0, 64] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R314 += 1 };
  s1 -> s3 [65, 65] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s1 -> s4 [65, 65] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s1 -> s1 [66, 65535] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s2 -> s1 [0, 64] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R314 += 1, R263 += 1, R264 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [65, 65] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s2 -> s1 [66, 65535] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R314 += 1, R264 += 1, R33 += 1, R34 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R314 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R314 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R314 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R316 += 1, R266 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R265 += 1, R266 += 1 };
  s0 -> s3 [65, 65] { R316 += 1, R266 += 1 };
  s0 -> s4 [65, 65] { R316 += 1, R266 += 1 };
  s0 -> s1 [66, 65535] { R316 += 1, R266 += 1 };
  s1 -> s1 [0, 64] { R316 += 1, R266 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R316 += 1 };
  s1 -> s3 [65, 65] { R316 += 1, R266 += 1 };
  s1 -> s4 [65, 65] { R316 += 1, R266 += 1 };
  s1 -> s1 [66, 65535] { R316 += 1, R266 += 1 };
  s2 -> s1 [0, 64] { R316 += 1, R266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R316 += 1, R265 += 1, R266 += 1 };
  s2 -> s3 [65, 65] { R316 += 1, R266 += 1 };
  s2 -> s4 [65, 65] { R316 += 1, R266 += 1 };
  s2 -> s1 [66, 65535] { R316 += 1, R266 += 1 };
  s3 -> s3 [0, 65535] { R316 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R316 += 1 };
  s4 -> s4 [0, 65535] { R316 += 1, R266 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R316 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s0 -> s2 [0, 64] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s0 -> s3 [0, 65535] { R318 += 1, R267 += 1, R268 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s4 [65, 65] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s0 -> s5 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s0 -> s6 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s0 -> s7 [65, 65] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s0 -> s1 [66, 65535] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s0 -> s2 [66, 65535] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s1 -> s1 [0, 64] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s1 -> s2 [0, 64] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s1 -> s4 [65, 65] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s1 -> s5 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s1 -> s6 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s1 -> s7 [65, 65] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s1 -> s1 [66, 65535] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s1 -> s2 [66, 65535] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s2 -> s11 [0, 64] { R318 += 1, R268 += 1 };
  s2 -> s2 [0, 64] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s2 -> s5 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s2 -> s12 [65, 65] { R318 += 1, R268 += 1 };
  s2 -> s6 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s2 -> s8 [65, 65] { R318 += 1, R268 += 1 };
  s2 -> s11 [66, 65535] { R318 += 1, R268 += 1 };
  s2 -> s2 [66, 65535] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s3 -> s1 [0, 64] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s3 -> s2 [0, 64] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s3 -> s3 [0, 65535] { R318 += 1, R267 += 1, R268 += 1 };
  s3 -> s4 [65, 65] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s3 -> s5 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s3 -> s6 [65, 65] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s3 -> s7 [65, 65] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s3 -> s1 [66, 65535] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s3 -> s2 [66, 65535] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s5 -> s5 [0, 65535] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s5 -> s8 [0, 65535] { R318 += 1, R268 += 1 };
  s7 -> s5 [0, 65535] { R318 += 1, R268 += 1, R228 += 1, R229 += 1 };
  s7 -> s7 [0, 65535] { R318 += 1, R268 += 1, R227 += 1, R228 += 1 };
  s8 -> s9 [0, 65535] { R318 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R318 += 1, R268 += 1 };
  s9 -> s9 [0, 65535] { R318 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R318 += 1, R268 += 1 };
  s11 -> s11 [0, 65535] { R318 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R318 += 1, R268 += 1 };
  s11 -> s8 [65, 65] { R318 += 1, R268 += 1 };
  s11 -> s11 [66, 65535] { R318 += 1, R268 += 1 };
  s12 -> s12 [0, 65535] { R318 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R320 += 1, R270 += 1 };
  s0 -> s2 [0, 65535] { R320 += 1, R269 += 1, R270 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s0 -> s3 [65, 65] { R320 += 1, R270 += 1 };
  s0 -> s4 [65, 65] { R320 += 1, R270 += 1 };
  s0 -> s1 [66, 65535] { R320 += 1, R270 += 1 };
  s1 -> s1 [0, 64] { R320 += 1, R270 += 1 };
  s1 -> s1 [0, 65535] { R320 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R320 += 1, R270 += 1 };
  s1 -> s4 [65, 65] { R320 += 1, R270 += 1 };
  s1 -> s1 [66, 65535] { R320 += 1, R270 += 1 };
  s2 -> s1 [0, 64] { R320 += 1, R270 += 1 };
  s2 -> s2 [0, 65535] { R320 += 1, R269 += 1, R270 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R320 += 1, R270 += 1 };
  s2 -> s4 [65, 65] { R320 += 1, R270 += 1 };
  s2 -> s1 [66, 65535] { R320 += 1, R270 += 1 };
  s3 -> s3 [0, 65535] { R320 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R320 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R320 += 1, R270 += 1 };
  s5 -> s5 [0, 65535] { R320 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R252 && R2 = R320 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R233 = 0 && R234 = R252 && R235 = 0 && R236 = R252 && R237 = 0 && R238 = R252 && R239 = 0 && R240 = R252 && R241 = 0 && R242 = R252 && R243 = 0 && R244 = R252 && R245 = 0 && R246 = R252 && R247 = 0 && R248 = R252 && R249 = 0 && R250 = R252 && R251 = 0 && R267 = 0 && R268 = 0 && R271 = 10 && R272 = R320 && R273 = 10 && R274 = R320 && R275 = 10 && R276 = R320 && R277 = 10 && R278 = R320 && R279 = 10 && R280 = R320 && R281 = 10 && R282 = R320 && R283 = 10 && R284 = R320 && R285 = 10 && R286 = R320 && R287 = 10 && R288 = R320 && R289 = 10 && R290 = R320 && R291 = 10 && R292 = R320 && R293 = 10 && R294 = R320 && R295 = 10 && R296 = R320 && R297 = 10 && R298 = R320 && R299 = 10 && R300 = R320 && R301 = 10 && R302 = R320 && R303 = 10 && R304 = R320 && R305 = 10 && R306 = R320 && R307 = 10 && R308 = R320 && R309 = 10 && R310 = R320 && R311 = 10 && R312 = R320 && R313 = 10 && R314 = R320 && R315 = 10 && R316 = R320 && R317 = 10 && R318 = R320 && R319 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R252 && 9 < R320 && (R14 = 0 || (R253 = 0 && R254 = 0)) && (R14 = 0 || (R255 = 0 && R256 = 0)) && (R14 = 0 || (R257 = 0 && R258 = 0)) && (R14 = 0 || (R259 = 0 && R260 = 0)) && (R14 = 0 || (R261 = 0 && R262 = 0)) && (R14 = 0 || (R263 = 0 && R264 = 0)) && (R14 = 0 || (R265 = 0 && R266 = 0)) && (R14 = 0 || (R269 = 0 && R270 = 0)) && (R38 + R35 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R38 + R35 = 0 || (R36 + R33 = 0 && R37 + R34 = 0)) && (R232 + R229 = 0 || (R230 + R227 = 0 && R231 + R228 = 0));
// End of Parikh automata intersection problem
