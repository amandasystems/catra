// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R3803, R3804, R3805, R3806, R3807, R3808, R3997, R3998, R3999, R4000, R4001, R4002, R4003, R4004, R4005, R4006, R4007, R4008, R4009, R4010, R4011, R4012, R4013, R4014, R4015, R4016, R4017, R4018, R4019, R4020, R4021, R4022, R4023, R4024, R4025, R4026, R4027, R4028, R4029, R4030, R4031, R4032, R4033, R4034, R4035, R4036, R4037, R4038, R4039, R4040, R4041, R4042, R4043, R4044, R4045, R4046, R4047, R4048, R4049, R4050, R4051, R4052, R4053, R4054, R4055, R4056, R4057, R4058, R4059, R4060, R4061, R4062, R4063, R4064, R4065, R4066, R4067, R4068, R4069, R4070, R4071, R4072, R4073, R4074, R4075, R4076, R4077, R4078, R4079, R4080, R4081, R4082, R4083, R4084, R4085, R4086, R4087, R4088, R4089, R4090, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4042 += 1 };
  s0 -> s0 [0, 65535] { R4041 += 1, R4042 += 1 };
  s0 -> s1 [45, 45] { R4042 += 1 };
  s0 -> s2 [46, 46] { R4042 += 1 };
  s0 -> s1 [48, 62] { R4042 += 1 };
  s0 -> s3 [65, 65] { R4042 += 1 };
  s0 -> s1 [66, 65535] { R4042 += 1 };
  s1 -> s1 [0, 43] { R4042 += 1 };
  s1 -> s1 [45, 45] { R4042 += 1 };
  s1 -> s2 [46, 46] { R4042 += 1 };
  s1 -> s1 [48, 62] { R4042 += 1 };
  s1 -> s3 [65, 65] { R4042 += 1 };
  s1 -> s1 [66, 65535] { R4042 += 1 };
  s2 -> s1 [0, 43] { R4042 += 1 };
  s2 -> s1 [45, 45] { R4042 += 1 };
  s2 -> s2 [46, 46] { R4042 += 1 };
  s2 -> s1 [48, 62] { R4042 += 1 };
  s2 -> s3 [65, 65] { R4042 += 1 };
  s2 -> s1 [66, 114] { R4042 += 1 };
  s2 -> s8 [115, 115] { R4042 += 1 };
  s2 -> s1 [116, 65535] { R4042 += 1 };
  s3 -> s3 [0, 43] { R4042 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4042 += 1 };
  s3 -> s4 [46, 46] { R4042 += 1 };
  s3 -> s3 [48, 62] { R4042 += 1 };
  s3 -> s3 [65, 65535] { R4042 += 1 };
  s4 -> s3 [0, 43] { R4042 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4042 += 1 };
  s4 -> s4 [46, 46] { R4042 += 1 };
  s4 -> s3 [48, 62] { R4042 += 1 };
  s4 -> s3 [65, 114] { R4042 += 1 };
  s4 -> s5 [115, 115] { R4042 += 1 };
  s4 -> s3 [116, 65535] { R4042 += 1 };
  s5 -> s3 [0, 43] { R4042 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4042 += 1 };
  s5 -> s4 [46, 46] { R4042 += 1 };
  s5 -> s3 [48, 62] { R4042 += 1 };
  s5 -> s3 [65, 110] { R4042 += 1 };
  s5 -> s6 [111, 111] { R4042 += 1 };
  s5 -> s3 [112, 65535] { R4042 += 1 };
  s6 -> s3 [0, 43] { R4042 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4042 += 1 };
  s6 -> s4 [46, 46] { R4042 += 1 };
  s6 -> s3 [48, 62] { R4042 += 1 };
  s6 -> s3 [65, 98] { R4042 += 1 };
  s6 -> s7 [99, 99] { R4042 += 1 };
  s6 -> s3 [100, 65535] { R4042 += 1 };
  s7 -> s3 [0, 43] { R4042 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4042 += 1 };
  s7 -> s4 [46, 46] { R4042 += 1 };
  s7 -> s3 [48, 62] { R4042 += 1 };
  s7 -> s3 [65, 106] { R4042 += 1 };
  s7 -> s3 [108, 65535] { R4042 += 1 };
  s8 -> s1 [0, 43] { R4042 += 1 };
  s8 -> s1 [45, 45] { R4042 += 1 };
  s8 -> s2 [46, 46] { R4042 += 1 };
  s8 -> s1 [48, 62] { R4042 += 1 };
  s8 -> s3 [65, 65] { R4042 += 1 };
  s8 -> s1 [66, 110] { R4042 += 1 };
  s8 -> s9 [111, 111] { R4042 += 1 };
  s8 -> s1 [112, 65535] { R4042 += 1 };
  s9 -> s1 [0, 43] { R4042 += 1 };
  s9 -> s1 [45, 45] { R4042 += 1 };
  s9 -> s2 [46, 46] { R4042 += 1 };
  s9 -> s1 [48, 62] { R4042 += 1 };
  s9 -> s3 [65, 65] { R4042 += 1 };
  s9 -> s1 [66, 98] { R4042 += 1 };
  s9 -> s10 [99, 99] { R4042 += 1 };
  s9 -> s1 [100, 65535] { R4042 += 1 };
  s10 -> s1 [0, 43] { R4042 += 1 };
  s10 -> s1 [45, 45] { R4042 += 1 };
  s10 -> s2 [46, 46] { R4042 += 1 };
  s10 -> s1 [48, 62] { R4042 += 1 };
  s10 -> s3 [65, 65] { R4042 += 1 };
  s10 -> s1 [66, 106] { R4042 += 1 };
  s10 -> s1 [108, 65535] { R4042 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4044 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4043 += 1, R4044 += 1 };
  s1 -> s1 [0, 65535] { R4044 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4046 += 1 };
  s0 -> s2 [0, 65535] { R4046 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4045 += 1, R4046 += 1 };
  s0 -> s3 [58, 58] { R4046 += 1 };
  s0 -> s1 [59, 65535] { R4046 += 1 };
  s1 -> s1 [0, 57] { R4046 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4046 += 1 };
  s1 -> s1 [59, 65535] { R4046 += 1 };
  s2 -> s1 [0, 57] { R4046 += 1 };
  s2 -> s2 [0, 65535] { R4046 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R4046 += 1 };
  s2 -> s1 [59, 65535] { R4046 += 1 };
  s3 -> s3 [0, 65535] { R4046 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4048 += 1 };
  s0 -> s0 [0, 65535] { R4047 += 1, R4048 += 1 };
  s0 -> s2 [0, 65535] { R4048 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4048 += 1 };
  s0 -> s1 [66, 65535] { R4048 += 1 };
  s1 -> s1 [0, 64] { R4048 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4048 += 1 };
  s1 -> s1 [66, 65535] { R4048 += 1 };
  s2 -> s1 [0, 64] { R4048 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4048 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4048 += 1 };
  s2 -> s1 [66, 65535] { R4048 += 1 };
  s3 -> s3 [0, 65535] { R4048 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4050 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4049 += 1, R4050 += 1 };
  s0 -> s2 [0, 65535] { R4050 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R4050 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4050 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4050 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4050 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R4050 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R4050 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4050 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4050 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4050 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4050 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4052 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R4051 += 1, R4052 += 1 };
  s0 -> s2 [0, 65535] { R4052 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R4052 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4052 += 1 };
  s2 -> s1 [0, 65535] { R4052 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4052 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4052 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4054 += 1, R4004 += 1 };
  s0 -> s2 [0, 65535] { R4054 += 1, R4003 += 1, R4004 += 1 };
  s0 -> s0 [0, 65535] { R4053 += 1, R4054 += 1 };
  s0 -> s1 [66, 65535] { R4054 += 1, R4004 += 1 };
  s1 -> s1 [0, 64] { R4054 += 1, R4004 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4054 += 1 };
  s1 -> s1 [66, 65535] { R4054 += 1, R4004 += 1 };
  s2 -> s1 [0, 64] { R4054 += 1, R4004 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4054 += 1, R4003 += 1, R4004 += 1 };
  s2 -> s1 [66, 65535] { R4054 += 1, R4004 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4056 += 1, R4005 += 1, R4006 += 1 };
  s0 -> s0 [0, 65535] { R4055 += 1, R4056 += 1 };
  s0 -> s2 [0, 65535] { R4056 += 1, R4006 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R4056 += 1, R4005 += 1, R4006 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R4056 += 1, R4006 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4056 += 1 };
  s2 -> s2 [0, 65535] { R4056 += 1, R4006 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4056 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4058 += 1, R4008 += 1 };
  s0 -> s2 [0, 65535] { R4058 += 1, R4007 += 1, R4008 += 1 };
  s0 -> s0 [0, 65535] { R4057 += 1, R4058 += 1 };
  s0 -> s1 [87, 65535] { R4058 += 1, R4008 += 1 };
  s1 -> s1 [0, 65] { R4058 += 1, R4008 += 1 };
  s1 -> s1 [0, 65535] { R4058 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R4058 += 1, R4008 += 1 };
  s2 -> s1 [0, 65] { R4058 += 1, R4008 += 1 };
  s2 -> s2 [0, 65535] { R4058 += 1, R4007 += 1, R4008 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R4058 += 1, R4008 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4060 += 1, R4009 += 1, R4010 += 1 };
  s0 -> s0 [0, 65535] { R4059 += 1, R4060 += 1 };
  s0 -> s2 [0, 65535] { R4060 += 1, R4010 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4060 += 1, R4009 += 1, R4010 += 1 };
  s1 -> s2 [0, 65535] { R4060 += 1, R4010 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4060 += 1 };
  s2 -> s2 [0, 65535] { R4060 += 1, R4010 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4060 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R4062 += 1, R4012 += 1 };
  s0 -> s2 [0, 65535] { R4062 += 1, R4011 += 1, R4012 += 1 };
  s0 -> s0 [0, 65535] { R4061 += 1, R4062 += 1 };
  s0 -> s1 [88, 65535] { R4062 += 1, R4012 += 1 };
  s1 -> s1 [0, 86] { R4062 += 1, R4012 += 1 };
  s1 -> s1 [0, 65535] { R4062 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R4062 += 1, R4012 += 1 };
  s2 -> s1 [0, 86] { R4062 += 1, R4012 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4062 += 1, R4011 += 1, R4012 += 1 };
  s2 -> s1 [88, 65535] { R4062 += 1, R4012 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s0 -> s0 [0, 65535] { R4063 += 1, R4064 += 1 };
  s0 -> s2 [0, 65535] { R4064 += 1, R4013 += 1, R4014 += 1 };
  s0 -> s3 [0, 65535] { R4064 += 1, R4014 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s1 [88, 65535] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s1 -> s1 [0, 86] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535] { R4064 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4064 += 1, R4014 += 1 };
  s1 -> s1 [88, 65535] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s2 -> s1 [0, 86] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4064 += 1, R4013 += 1, R4014 += 1 };
  s2 -> s3 [0, 65535] { R4064 += 1, R4014 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s1 [88, 65535] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s3 -> s1 [0, 86] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s3 -> s4 [0, 65535] { R4064 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4064 += 1, R4014 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s1 [88, 65535] { R4064 += 1, R4014 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535] { R4064 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4065 += 1, R4066 += 1 };
  s0 -> s1 [0, 65535] { R4066 += 1, R4016 += 1, R3807 += 1, R3808 += 1 };
  s0 -> s2 [0, 65535] { R4066 += 1, R4016 += 1 };
  s0 -> s3 [0, 65535] { R4066 += 1, R4015 += 1, R4016 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4066 += 1, R4016 += 1, R3807 += 1, R3808 += 1 };
  s1 -> s2 [0, 65535] { R4066 += 1, R4016 += 1 };
  s1 -> s5 [0, 65535] { R4066 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4066 += 1, R4016 += 1 };
  s2 -> s5 [0, 65535] { R4066 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4066 += 1, R4016 += 1, R3807 += 1, R3808 += 1 };
  s3 -> s2 [0, 65535] { R4066 += 1, R4016 += 1 };
  s3 -> s3 [0, 65535] { R4066 += 1, R4015 += 1, R4016 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4066 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4067 += 1, R4068 += 1 };
  s0 -> s1 [0, 65535] { R4068 += 1, R4017 += 1, R4018 += 1 };
  s0 -> s2 [0, 65535] { R4068 += 1, R4018 += 1 };
  s1 -> s1 [0, 65535] { R4068 += 1, R4017 += 1, R4018 += 1 };
  s1 -> s2 [0, 65535] { R4068 += 1, R4018 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R4068 += 1 };
  s2 -> s2 [0, 65535] { R4068 += 1, R4018 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4068 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4070 += 1, R4019 += 1, R4020 += 1 };
  s0 -> s0 [0, 65535] { R4069 += 1, R4070 += 1 };
  s0 -> s2 [0, 65535] { R4070 += 1, R4020 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4070 += 1, R4019 += 1, R4020 += 1 };
  s1 -> s2 [0, 65535] { R4070 += 1, R4020 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4070 += 1 };
  s2 -> s2 [0, 65535] { R4070 += 1, R4020 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4070 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4072 += 1, R4022 += 1 };
  s0 -> s0 [0, 65535] { R4071 += 1, R4072 += 1 };
  s0 -> s2 [0, 65535] { R4072 += 1, R4021 += 1, R4022 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4072 += 1, R4022 += 1 };
  s1 -> s4 [0, 65535] { R4072 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4072 += 1, R4022 += 1 };
  s2 -> s2 [0, 65535] { R4072 += 1, R4021 += 1, R4022 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4072 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4074 += 1, R4023 += 1, R4024 += 1 };
  s0 -> s0 [0, 65535] { R4073 += 1, R4074 += 1 };
  s0 -> s2 [0, 65535] { R4074 += 1, R4024 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4074 += 1, R4023 += 1, R4024 += 1 };
  s1 -> s2 [0, 65535] { R4074 += 1, R4024 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R4074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4074 += 1, R4024 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R4074 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4076 += 1, R4026 += 1 };
  s0 -> s0 [0, 65535] { R4075 += 1, R4076 += 1 };
  s0 -> s2 [0, 65535] { R4076 += 1, R4025 += 1, R4026 += 1 };
  s0 -> s3 [65, 65] { R4076 += 1, R4026 += 1 };
  s0 -> s4 [65, 65] { R4076 += 1, R4026 += 1 };
  s0 -> s5 [87, 87] { R4076 += 1, R4026 += 1 };
  s0 -> s1 [88, 65535] { R4076 += 1, R4026 += 1 };
  s1 -> s1 [0, 64] { R4076 += 1, R4026 += 1 };
  s1 -> s3 [65, 65] { R4076 += 1, R4026 += 1 };
  s1 -> s4 [65, 65] { R4076 += 1, R4026 += 1 };
  s1 -> s5 [87, 87] { R4076 += 1, R4026 += 1 };
  s1 -> s1 [88, 65535] { R4076 += 1, R4026 += 1 };
  s2 -> s1 [0, 64] { R4076 += 1, R4026 += 1 };
  s2 -> s2 [0, 65535] { R4076 += 1, R4025 += 1, R4026 += 1 };
  s2 -> s3 [65, 65] { R4076 += 1, R4026 += 1 };
  s2 -> s4 [65, 65] { R4076 += 1, R4026 += 1 };
  s2 -> s5 [87, 87] { R4076 += 1, R4026 += 1 };
  s2 -> s1 [88, 65535] { R4076 += 1, R4026 += 1 };
  s3 -> s3 [0, 65] { R4076 += 1, R4026 += 1 };
  s3 -> s7 [87, 87] { R4076 += 1, R4026 += 1 };
  s3 -> s3 [88, 65535] { R4076 += 1, R4026 += 1 };
  s5 -> s5 [0, 64] { R4076 += 1, R4026 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4076 += 1 };
  s5 -> s7 [65, 65] { R4076 += 1, R4026 += 1 };
  s5 -> s8 [65, 65] { R4076 += 1, R4026 += 1 };
  s5 -> s5 [87, 65535] { R4076 += 1, R4026 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4076 += 1, R4026 += 1 };
  s7 -> s7 [0, 65535] { R4076 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R4076 += 1, R4026 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R4076 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R4078 += 1, R4027 += 1, R4028 += 1 };
  s0 -> s0 [0, 65535] { R4077 += 1, R4078 += 1 };
  s0 -> s3 [65, 65] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R4078 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R4078 += 1, R4027 += 1, R4028 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R4078 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4078 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4078 += 1, R4028 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535] { R4078 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4080 += 1, R4030 += 1 };
  s0 -> s2 [0, 64] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s0 -> s3 [0, 65535] { R4080 += 1, R4029 += 1, R4030 += 1 };
  s0 -> s0 [0, 65535] { R4079 += 1, R4080 += 1 };
  s0 -> s4 [65, 65] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R4080 += 1, R4030 += 1 };
  s0 -> s6 [65, 65] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R4080 += 1, R4030 += 1 };
  s0 -> s1 [66, 86] { R4080 += 1, R4030 += 1 };
  s0 -> s2 [66, 65535] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s0 -> s1 [88, 65535] { R4080 += 1, R4030 += 1 };
  s1 -> s1 [0, 64] { R4080 += 1, R4030 += 1 };
  s1 -> s1 [0, 65535] { R4080 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R4080 += 1, R4030 += 1 };
  s1 -> s7 [65, 65] { R4080 += 1, R4030 += 1 };
  s1 -> s1 [66, 86] { R4080 += 1, R4030 += 1 };
  s1 -> s1 [88, 65535] { R4080 += 1, R4030 += 1 };
  s2 -> s1 [0, 64] { R4080 += 1, R4030 += 1 };
  s2 -> s2 [0, 64] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R4080 += 1, R4030 += 1 };
  s2 -> s6 [65, 65] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s2 -> s7 [65, 65] { R4080 += 1, R4030 += 1 };
  s2 -> s1 [66, 86] { R4080 += 1, R4030 += 1 };
  s2 -> s2 [66, 65535] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s2 -> s1 [88, 65535] { R4080 += 1, R4030 += 1 };
  s3 -> s1 [0, 64] { R4080 += 1, R4030 += 1 };
  s3 -> s2 [0, 64] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4080 += 1, R4029 += 1, R4030 += 1 };
  s3 -> s4 [65, 65] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R4080 += 1, R4030 += 1 };
  s3 -> s6 [65, 65] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R4080 += 1, R4030 += 1 };
  s3 -> s1 [66, 86] { R4080 += 1, R4030 += 1 };
  s3 -> s2 [66, 65535] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s3 -> s1 [88, 65535] { R4080 += 1, R4030 += 1 };
  s5 -> s5 [0, 65535] { R4080 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s7 [0, 86] { R4080 += 1, R4030 += 1 };
  s6 -> s6 [0, 65535] { R4080 += 1, R4030 += 1, R3509 += 1 };
  s6 -> s7 [88, 65535] { R4080 += 1, R4030 += 1 };
  s7 -> s7 [0, 86] { R4080 += 1, R4030 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4080 += 1 };
  s7 -> s7 [88, 65535] { R4080 += 1, R4030 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s0 [0, 65535] { R4081 += 1, R4082 += 1 };
  s0 -> s2 [0, 65535] { R4082 += 1, R4031 += 1, R4032 += 1 };
  s0 -> s3 [65, 65] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 65535] { R4082 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4082 += 1, R4031 += 1, R4032 += 1 };
  s2 -> s3 [65, 65] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s6 [0, 65535] { R4082 += 1 };
  s3 -> s3 [0, 65535] { R4082 += 1, R4032 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4082 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4082 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [0, 64] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s0 [0, 65535] { R4083 += 1, R4084 += 1 };
  s0 -> s3 [0, 65535] { R4084 += 1, R4033 += 1, R4034 += 1 };
  s0 -> s4 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s5 [65, 65] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s6 [65, 65] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s7 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s0 -> s1 [66, 65535] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s0 -> s2 [66, 65535] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s1 [0, 64] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [0, 64] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s4 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s5 [65, 65] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s6 [65, 65] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s7 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s1 -> s1 [66, 65535] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s1 -> s2 [66, 65535] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [0, 64] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4084 += 1 };
  s2 -> s4 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s7 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s2 -> s2 [66, 65535] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s1 [0, 64] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s2 [0, 64] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s3 [0, 65535] { R4084 += 1, R4033 += 1, R4034 += 1 };
  s3 -> s4 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s5 [65, 65] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s6 [65, 65] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s7 [65, 65] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s3 -> s1 [66, 65535] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s3 -> s2 [66, 65535] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s4 -> s9 [0, 65535] { R4084 += 1 };
  s6 -> s4 [0, 65535] { R4084 += 1, R4034 += 1, R3804 += 1, R3805 += 1 };
  s6 -> s6 [0, 65535] { R4084 += 1, R4034 += 1, R3803 += 1, R3804 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4084 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4084 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4086 += 1, R4036 += 1 };
  s0 -> s0 [0, 65535] { R4085 += 1, R4086 += 1 };
  s0 -> s2 [0, 65535] { R4086 += 1, R4035 += 1, R4036 += 1 };
  s0 -> s3 [65, 65] { R4086 += 1, R4036 += 1 };
  s0 -> s4 [65, 65] { R4086 += 1, R4036 += 1 };
  s0 -> s1 [66, 65535] { R4086 += 1, R4036 += 1 };
  s1 -> s1 [0, 64] { R4086 += 1, R4036 += 1 };
  s1 -> s1 [0, 65535] { R4086 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4086 += 1, R4036 += 1 };
  s1 -> s4 [65, 65] { R4086 += 1, R4036 += 1 };
  s1 -> s1 [66, 65535] { R4086 += 1, R4036 += 1 };
  s2 -> s1 [0, 64] { R4086 += 1, R4036 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4086 += 1, R4035 += 1, R4036 += 1 };
  s2 -> s3 [65, 65] { R4086 += 1, R4036 += 1 };
  s2 -> s4 [65, 65] { R4086 += 1, R4036 += 1 };
  s2 -> s1 [66, 65535] { R4086 += 1, R4036 += 1 };
  s3 -> s3 [0, 65535] { R4086 += 1, R4036 += 1 };
  s3 -> s6 [0, 65535] { R4086 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4086 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4086 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s0 -> s2 [0, 64] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s0 -> s0 [0, 65535] { R4087 += 1, R4088 += 1 };
  s0 -> s3 [0, 65535] { R4088 += 1, R4037 += 1, R4038 += 1 };
  s0 -> s4 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s0 -> s5 [65, 65] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s0 -> s6 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s0 -> s7 [65, 65] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s0 -> s1 [66, 65535] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s0 -> s2 [66, 65535] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s1 -> s1 [0, 64] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s1 -> s2 [0, 64] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s1 -> s4 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s1 -> s5 [65, 65] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s1 -> s6 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s1 -> s7 [65, 65] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s1 -> s1 [66, 65535] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s1 -> s2 [66, 65535] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s2 -> s11 [0, 64] { R4088 += 1, R4038 += 1 };
  s2 -> s2 [0, 64] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s2 -> s4 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s2 -> s6 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s2 -> s8 [65, 65] { R4088 += 1, R4038 += 1 };
  s2 -> s12 [65, 65] { R4088 += 1, R4038 += 1 };
  s2 -> s11 [66, 65535] { R4088 += 1, R4038 += 1 };
  s2 -> s2 [66, 65535] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s3 -> s1 [0, 64] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s3 -> s2 [0, 64] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s3 -> s3 [0, 65535] { R4088 += 1, R4037 += 1, R4038 += 1 };
  s3 -> s4 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s3 -> s5 [65, 65] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s3 -> s6 [65, 65] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s3 -> s7 [65, 65] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s3 -> s1 [66, 65535] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s3 -> s2 [66, 65535] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s6 -> s6 [0, 65535] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s6 -> s8 [0, 65535] { R4088 += 1, R4038 += 1 };
  s7 -> s6 [0, 65535] { R4088 += 1, R4038 += 1, R3998 += 1, R3999 += 1 };
  s7 -> s7 [0, 65535] { R4088 += 1, R4038 += 1, R3997 += 1, R3998 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R4088 += 1 };
  s8 -> s8 [0, 65535] { R4088 += 1, R4038 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R4088 += 1 };
  s11 -> s11 [0, 64] { R4088 += 1, R4038 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R4088 += 1 };
  s11 -> s8 [65, 65] { R4088 += 1, R4038 += 1 };
  s11 -> s12 [65, 65] { R4088 += 1, R4038 += 1 };
  s11 -> s11 [66, 65535] { R4088 += 1, R4038 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R4088 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4090 += 1, R4040 += 1 };
  s0 -> s2 [0, 65535] { R4090 += 1, R4039 += 1, R4040 += 1 };
  s0 -> s0 [0, 65535] { R4089 += 1, R4090 += 1 };
  s0 -> s3 [65, 65] { R4090 += 1, R4040 += 1 };
  s0 -> s4 [65, 65] { R4090 += 1, R4040 += 1 };
  s0 -> s1 [66, 65535] { R4090 += 1, R4040 += 1 };
  s1 -> s1 [0, 64] { R4090 += 1, R4040 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R4090 += 1 };
  s1 -> s3 [65, 65] { R4090 += 1, R4040 += 1 };
  s1 -> s4 [65, 65] { R4090 += 1, R4040 += 1 };
  s1 -> s1 [66, 65535] { R4090 += 1, R4040 += 1 };
  s2 -> s1 [0, 64] { R4090 += 1, R4040 += 1 };
  s2 -> s2 [0, 65535] { R4090 += 1, R4039 += 1, R4040 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4090 += 1, R4040 += 1 };
  s2 -> s4 [65, 65] { R4090 += 1, R4040 += 1 };
  s2 -> s1 [66, 65535] { R4090 += 1, R4040 += 1 };
  s3 -> s3 [0, 65535] { R4090 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4090 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4090 += 1, R4040 += 1 };
  s5 -> s5 [0, 65535] { R4090 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4022 && R2 = R4090 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4003 = 0 && R4004 = R4022 && R4005 = 0 && R4006 = R4022 && R4007 = 0 && R4008 = R4022 && R4009 = 0 && R4010 = R4022 && R4011 = 0 && R4012 = R4022 && R4013 = 0 && R4014 = R4022 && R4015 = 0 && R4016 = R4022 && R4017 = 0 && R4018 = R4022 && R4019 = 0 && R4020 = R4022 && R4021 = 0 && R4025 = 0 && R4026 = 0 && R4029 = 0 && R4030 = 0 && R4033 = 0 && R4034 = 0 && R4037 = 0 && R4038 = 0 && R4041 = 10 && R4042 = R4090 && R4043 = 10 && R4044 = R4090 && R4045 = 10 && R4046 = R4090 && R4047 = 10 && R4048 = R4090 && R4049 = 10 && R4050 = R4090 && R4051 = 10 && R4052 = R4090 && R4053 = 10 && R4054 = R4090 && R4055 = 10 && R4056 = R4090 && R4057 = 10 && R4058 = R4090 && R4059 = 10 && R4060 = R4090 && R4061 = 10 && R4062 = R4090 && R4063 = 10 && R4064 = R4090 && R4065 = 10 && R4066 = R4090 && R4067 = 10 && R4068 = R4090 && R4069 = 10 && R4070 = R4090 && R4071 = 10 && R4072 = R4090 && R4073 = 10 && R4074 = R4090 && R4075 = 10 && R4076 = R4090 && R4077 = 10 && R4078 = R4090 && R4079 = 10 && R4080 = R4090 && R4081 = 10 && R4082 = R4090 && R4083 = 10 && R4084 = R4090 && R4085 = 10 && R4086 = R4090 && R4087 = 10 && R4088 = R4090 && R4089 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4022 && 9 < R4090 && (R14 = 0 || (R4023 = 0 && R4024 = 0)) && (R14 = 0 || (R4027 = 0 && R4028 = 0)) && (R14 = 0 || (R4031 = 0 && R4032 = 0)) && (R14 = 0 || (R4035 = 0 && R4036 = 0)) && (R14 = 0 || (R4039 = 0 && R4040 = 0)) && (R3808 + R3805 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R3808 + R3805 = 0 || (R3806 + R3803 = 0 && R3807 + R3804 = 0)) && (R4002 + R3999 = 0 || (R4000 + R3997 = 0 && R4001 + R3998 = 0));
// End of Parikh automata intersection problem
