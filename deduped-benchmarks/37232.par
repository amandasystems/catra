// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4383, R4384, R4385, R4386, R4387, R4388, R4483, R4484, R4485, R4486, R4487, R4488, R4489, R4490, R4491, R4492, R4493, R4494, R4495, R4496, R4497, R4498, R4499, R4500, R4501, R4502, R4503, R4504, R4505, R4506, R4507, R4508, R4509, R4510, R4511, R4512, R4513, R4514, R4515, R4516, R4517, R4518, R4519, R4520, R4521, R4522, R4523, R4524, R4525, R4526, R4527, R4528, R4529, R4530, R4531, R4532, R4533, R4534, R4535, R4536, R4537, R4538, R4539, R4540, R4541, R4542, R4543, R4544, R4545, R4546, R4547, R4548, R4549, R4550, R4551, R4552, R4553, R4554, R4555, R4556, R4557, R4558, R4559, R4560, R4561, R4562, R4563, R4564, R4565, R4566, R4567, R4568, R4569, R4570, R4571, R4572, R4573, R4574, R4575, R4576, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4528 += 1 };
  s0 -> s0 [0, 65535] { R4527 += 1, R4528 += 1 };
  s0 -> s1 [45, 45] { R4528 += 1 };
  s0 -> s2 [46, 46] { R4528 += 1 };
  s0 -> s1 [48, 62] { R4528 += 1 };
  s0 -> s3 [65, 65] { R4528 += 1 };
  s0 -> s1 [66, 65535] { R4528 += 1 };
  s1 -> s1 [0, 43] { R4528 += 1 };
  s1 -> s1 [45, 45] { R4528 += 1 };
  s1 -> s2 [46, 46] { R4528 += 1 };
  s1 -> s1 [48, 62] { R4528 += 1 };
  s1 -> s3 [65, 65] { R4528 += 1 };
  s1 -> s1 [66, 65535] { R4528 += 1 };
  s2 -> s1 [0, 43] { R4528 += 1 };
  s2 -> s1 [45, 45] { R4528 += 1 };
  s2 -> s2 [46, 46] { R4528 += 1 };
  s2 -> s1 [48, 62] { R4528 += 1 };
  s2 -> s3 [65, 65] { R4528 += 1 };
  s2 -> s1 [66, 114] { R4528 += 1 };
  s2 -> s8 [115, 115] { R4528 += 1 };
  s2 -> s1 [116, 65535] { R4528 += 1 };
  s3 -> s3 [0, 43] { R4528 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4528 += 1 };
  s3 -> s4 [46, 46] { R4528 += 1 };
  s3 -> s3 [48, 62] { R4528 += 1 };
  s3 -> s3 [65, 65535] { R4528 += 1 };
  s4 -> s3 [0, 43] { R4528 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4528 += 1 };
  s4 -> s4 [46, 46] { R4528 += 1 };
  s4 -> s3 [48, 62] { R4528 += 1 };
  s4 -> s3 [65, 114] { R4528 += 1 };
  s4 -> s5 [115, 115] { R4528 += 1 };
  s4 -> s3 [116, 65535] { R4528 += 1 };
  s5 -> s3 [0, 43] { R4528 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4528 += 1 };
  s5 -> s4 [46, 46] { R4528 += 1 };
  s5 -> s3 [48, 62] { R4528 += 1 };
  s5 -> s3 [65, 110] { R4528 += 1 };
  s5 -> s6 [111, 111] { R4528 += 1 };
  s5 -> s3 [112, 65535] { R4528 += 1 };
  s6 -> s3 [0, 43] { R4528 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4528 += 1 };
  s6 -> s4 [46, 46] { R4528 += 1 };
  s6 -> s3 [48, 62] { R4528 += 1 };
  s6 -> s3 [65, 98] { R4528 += 1 };
  s6 -> s7 [99, 99] { R4528 += 1 };
  s6 -> s3 [100, 65535] { R4528 += 1 };
  s7 -> s3 [0, 43] { R4528 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4528 += 1 };
  s7 -> s4 [46, 46] { R4528 += 1 };
  s7 -> s3 [48, 62] { R4528 += 1 };
  s7 -> s3 [65, 106] { R4528 += 1 };
  s7 -> s3 [108, 65535] { R4528 += 1 };
  s8 -> s1 [0, 43] { R4528 += 1 };
  s8 -> s1 [45, 45] { R4528 += 1 };
  s8 -> s2 [46, 46] { R4528 += 1 };
  s8 -> s1 [48, 62] { R4528 += 1 };
  s8 -> s3 [65, 65] { R4528 += 1 };
  s8 -> s1 [66, 110] { R4528 += 1 };
  s8 -> s9 [111, 111] { R4528 += 1 };
  s8 -> s1 [112, 65535] { R4528 += 1 };
  s9 -> s1 [0, 43] { R4528 += 1 };
  s9 -> s1 [45, 45] { R4528 += 1 };
  s9 -> s2 [46, 46] { R4528 += 1 };
  s9 -> s1 [48, 62] { R4528 += 1 };
  s9 -> s3 [65, 65] { R4528 += 1 };
  s9 -> s1 [66, 98] { R4528 += 1 };
  s9 -> s10 [99, 99] { R4528 += 1 };
  s9 -> s1 [100, 65535] { R4528 += 1 };
  s10 -> s1 [0, 43] { R4528 += 1 };
  s10 -> s1 [45, 45] { R4528 += 1 };
  s10 -> s2 [46, 46] { R4528 += 1 };
  s10 -> s1 [48, 62] { R4528 += 1 };
  s10 -> s3 [65, 65] { R4528 += 1 };
  s10 -> s1 [66, 106] { R4528 += 1 };
  s10 -> s1 [108, 65535] { R4528 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4530 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4529 += 1, R4530 += 1 };
  s1 -> s1 [0, 65535] { R4530 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4532 += 1 };
  s0 -> s2 [0, 65535] { R4532 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4531 += 1, R4532 += 1 };
  s0 -> s3 [58, 58] { R4532 += 1 };
  s0 -> s1 [59, 65535] { R4532 += 1 };
  s1 -> s1 [0, 57] { R4532 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4532 += 1 };
  s1 -> s1 [59, 65535] { R4532 += 1 };
  s2 -> s1 [0, 57] { R4532 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4532 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4532 += 1 };
  s2 -> s1 [59, 65535] { R4532 += 1 };
  s3 -> s3 [0, 65535] { R4532 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4534 += 1 };
  s0 -> s0 [0, 65535] { R4533 += 1, R4534 += 1 };
  s0 -> s2 [0, 65535] { R4534 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R4534 += 1 };
  s0 -> s1 [66, 65535] { R4534 += 1 };
  s1 -> s1 [0, 64] { R4534 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4534 += 1 };
  s1 -> s1 [66, 65535] { R4534 += 1 };
  s2 -> s1 [0, 64] { R4534 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4534 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R4534 += 1 };
  s2 -> s1 [66, 65535] { R4534 += 1 };
  s3 -> s3 [0, 65535] { R4534 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4536 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R4536 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4535 += 1, R4536 += 1 };
  s0 -> s3 [91, 91] { R4536 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4536 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R4536 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4536 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R4536 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R4536 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4536 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4536 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4536 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4536 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4538 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4537 += 1, R4538 += 1 };
  s0 -> s2 [0, 65535] { R4538 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R4538 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R4538 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4538 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4538 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4538 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4540 += 1, R4490 += 1 };
  s0 -> s2 [0, 65535] { R4540 += 1, R4489 += 1, R4490 += 1 };
  s0 -> s0 [0, 65535] { R4539 += 1, R4540 += 1 };
  s0 -> s1 [66, 65535] { R4540 += 1, R4490 += 1 };
  s1 -> s1 [0, 64] { R4540 += 1, R4490 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4540 += 1 };
  s1 -> s1 [66, 65535] { R4540 += 1, R4490 += 1 };
  s2 -> s1 [0, 64] { R4540 += 1, R4490 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4540 += 1, R4489 += 1, R4490 += 1 };
  s2 -> s1 [66, 65535] { R4540 += 1, R4490 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4542 += 1, R4491 += 1, R4492 += 1 };
  s0 -> s0 [0, 65535] { R4541 += 1, R4542 += 1 };
  s0 -> s2 [0, 65535] { R4542 += 1, R4492 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R4542 += 1, R4491 += 1, R4492 += 1 };
  s1 -> s2 [0, 65535] { R4542 += 1, R4492 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4542 += 1, R4492 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4542 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4542 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4544 += 1, R4494 += 1 };
  s0 -> s0 [0, 65535] { R4543 += 1, R4544 += 1 };
  s0 -> s2 [0, 65535] { R4544 += 1, R4493 += 1, R4494 += 1 };
  s0 -> s1 [87, 65535] { R4544 += 1, R4494 += 1 };
  s1 -> s1 [0, 65] { R4544 += 1, R4494 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4544 += 1 };
  s1 -> s1 [87, 65535] { R4544 += 1, R4494 += 1 };
  s2 -> s1 [0, 65] { R4544 += 1, R4494 += 1 };
  s2 -> s2 [0, 65535] { R4544 += 1, R4493 += 1, R4494 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R4544 += 1, R4494 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R4546 += 1, R4496 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R4545 += 1, R4546 += 1 };
  s0 -> s2 [0, 65535] { R4546 += 1, R4495 += 1, R4496 += 1 };
  s1 -> s1 [0, 65535] { R4546 += 1, R4496 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R4546 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4546 += 1, R4496 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R4546 += 1, R4495 += 1, R4496 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4546 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R4548 += 1, R4498 += 1 };
  s0 -> s2 [0, 65535] { R4548 += 1, R4497 += 1, R4498 += 1 };
  s0 -> s0 [0, 65535] { R4547 += 1, R4548 += 1 };
  s0 -> s1 [88, 65535] { R4548 += 1, R4498 += 1 };
  s1 -> s1 [0, 86] { R4548 += 1, R4498 += 1 };
  s1 -> s1 [0, 65535] { R4548 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R4548 += 1, R4498 += 1 };
  s2 -> s1 [0, 86] { R4548 += 1, R4498 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4548 += 1, R4497 += 1, R4498 += 1 };
  s2 -> s1 [88, 65535] { R4548 += 1, R4498 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R4550 += 1, R4500 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R4549 += 1, R4550 += 1 };
  s0 -> s1 [0, 65535] { R4550 += 1, R4500 += 1 };
  s0 -> s2 [0, 65535] { R4550 += 1, R4499 += 1, R4500 += 1 };
  s0 -> s1 [88, 65535] { R4550 += 1, R4500 += 1, R4382 += 1 };
  s1 -> s1 [0, 86] { R4550 += 1, R4500 += 1, R4382 += 1 };
  s1 -> s1 [0, 65535] { R4550 += 1, R4500 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R4550 += 1 };
  s1 -> s1 [88, 65535] { R4550 += 1, R4500 += 1, R4382 += 1 };
  s2 -> s1 [0, 86] { R4550 += 1, R4500 += 1, R4382 += 1 };
  s2 -> s1 [0, 65535] { R4550 += 1, R4500 += 1 };
  s2 -> s2 [0, 65535] { R4550 += 1, R4499 += 1, R4500 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R4550 += 1, R4500 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4550 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R4551 += 1, R4552 += 1 };
  s0 -> s1 [0, 65535] { R4552 += 1, R4502 += 1, R4387 += 1, R4388 += 1 };
  s0 -> s2 [0, 65535] { R4552 += 1, R4502 += 1, R4386 += 1, R4387 += 1 };
  s0 -> s3 [0, 65535] { R4552 += 1, R4501 += 1, R4502 += 1 };
  s1 -> s6 [0, 65535] { R4552 += 1, R4502 += 1 };
  s1 -> s1 [0, 65535] { R4552 += 1, R4502 += 1, R4387 += 1, R4388 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R4552 += 1 };
  s2 -> s1 [0, 65535] { R4552 += 1, R4502 += 1, R4387 += 1, R4388 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4552 += 1, R4502 += 1, R4386 += 1, R4387 += 1 };
  s2 -> s5 [0, 65535] { R4552 += 1 };
  s3 -> s1 [0, 65535] { R4552 += 1, R4502 += 1, R4387 += 1, R4388 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R4552 += 1, R4502 += 1, R4386 += 1, R4387 += 1 };
  s3 -> s3 [0, 65535] { R4552 += 1, R4501 += 1, R4502 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4552 += 1 };
  s6 -> s6 [0, 65535] { R4552 += 1, R4502 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R4552 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4553 += 1, R4554 += 1 };
  s0 -> s1 [0, 65535] { R4554 += 1, R4504 += 1 };
  s0 -> s2 [0, 65535] { R4554 += 1, R4503 += 1, R4504 += 1 };
  s1 -> s4 [0, 65535] { R4554 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4554 += 1, R4504 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4554 += 1, R4504 += 1 };
  s2 -> s2 [0, 65535] { R4554 += 1, R4503 += 1, R4504 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4554 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4556 += 1, R4506 += 1 };
  s0 -> s2 [0, 65535] { R4556 += 1, R4506 += 1, R4487 += 1, R4488 += 1 };
  s0 -> s0 [0, 65535] { R4555 += 1, R4556 += 1 };
  s0 -> s3 [0, 65535] { R4556 += 1, R4505 += 1, R4506 += 1 };
  s1 -> s1 [0, 65535] { R4556 += 1, R4506 += 1 };
  s1 -> s5 [0, 65535] { R4556 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4556 += 1, R4506 += 1 };
  s2 -> s2 [0, 65535] { R4556 += 1, R4506 += 1, R4487 += 1, R4488 += 1 };
  s2 -> s5 [0, 65535] { R4556 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4556 += 1, R4506 += 1 };
  s3 -> s2 [0, 65535] { R4556 += 1, R4506 += 1, R4487 += 1, R4488 += 1 };
  s3 -> s3 [0, 65535] { R4556 += 1, R4505 += 1, R4506 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4556 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4558 += 1, R4508 += 1 };
  s0 -> s2 [0, 65535] { R4558 += 1, R4507 += 1, R4508 += 1 };
  s0 -> s0 [0, 65535] { R4557 += 1, R4558 += 1 };
  s1 -> s1 [0, 65535] { R4558 += 1, R4508 += 1 };
  s1 -> s4 [0, 65535] { R4558 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4558 += 1, R4508 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4558 += 1, R4507 += 1, R4508 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4558 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R4559 += 1, R4560 += 1 };
  s0 -> s1 [0, 65535] { R4560 += 1, R4510 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R4560 += 1, R4509 += 1, R4510 += 1 };
  s1 -> s4 [0, 65535] { R4560 += 1 };
  s1 -> s1 [0, 65535] { R4560 += 1, R4510 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4560 += 1, R4510 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R4560 += 1, R4509 += 1, R4510 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4560 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4562 += 1, R4512 += 1 };
  s0 -> s0 [0, 65535] { R4561 += 1, R4562 += 1 };
  s0 -> s2 [0, 65535] { R4562 += 1, R4511 += 1, R4512 += 1 };
  s0 -> s3 [65, 65] { R4562 += 1, R4512 += 1 };
  s0 -> s4 [65, 65] { R4562 += 1, R4512 += 1 };
  s0 -> s5 [87, 87] { R4562 += 1, R4512 += 1 };
  s0 -> s1 [88, 65535] { R4562 += 1, R4512 += 1 };
  s1 -> s1 [0, 64] { R4562 += 1, R4512 += 1 };
  s1 -> s3 [65, 65] { R4562 += 1, R4512 += 1 };
  s1 -> s4 [65, 65] { R4562 += 1, R4512 += 1 };
  s1 -> s5 [87, 87] { R4562 += 1, R4512 += 1 };
  s1 -> s1 [88, 65535] { R4562 += 1, R4512 += 1 };
  s2 -> s1 [0, 64] { R4562 += 1, R4512 += 1 };
  s2 -> s2 [0, 65535] { R4562 += 1, R4511 += 1, R4512 += 1 };
  s2 -> s3 [65, 65] { R4562 += 1, R4512 += 1 };
  s2 -> s4 [65, 65] { R4562 += 1, R4512 += 1 };
  s2 -> s5 [87, 87] { R4562 += 1, R4512 += 1 };
  s2 -> s1 [88, 65535] { R4562 += 1, R4512 += 1 };
  s4 -> s4 [0, 65] { R4562 += 1, R4512 += 1 };
  s4 -> s8 [87, 87] { R4562 += 1, R4512 += 1 };
  s4 -> s4 [88, 65535] { R4562 += 1, R4512 += 1 };
  s5 -> s5 [0, 64] { R4562 += 1, R4512 += 1 };
  s5 -> s5 [0, 65535] { R4562 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4562 += 1, R4512 += 1 };
  s5 -> s8 [65, 65] { R4562 += 1, R4512 += 1 };
  s5 -> s5 [87, 65535] { R4562 += 1, R4512 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R4562 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R4562 += 1, R4512 += 1 };
  s8 -> s8 [0, 65535] { R4562 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [87, 65535] { R4562 += 1, R4512 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R4564 += 1, R4513 += 1, R4514 += 1 };
  s0 -> s0 [0, 65535] { R4563 += 1, R4564 += 1 };
  s0 -> s3 [65, 65] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4564 += 1 };
  s1 -> s3 [65, 65] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4564 += 1, R4513 += 1, R4514 += 1 };
  s2 -> s3 [65, 65] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4564 += 1, R4514 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R4564 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4564 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4564 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4566 += 1, R4516 += 1 };
  s0 -> s2 [0, 64] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s0 -> s3 [0, 65535] { R4566 += 1, R4515 += 1, R4516 += 1 };
  s0 -> s0 [0, 65535] { R4565 += 1, R4566 += 1 };
  s0 -> s4 [65, 65] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R4566 += 1, R4516 += 1 };
  s0 -> s6 [65, 65] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R4566 += 1, R4516 += 1 };
  s0 -> s1 [66, 86] { R4566 += 1, R4516 += 1 };
  s0 -> s2 [66, 65535] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s0 -> s1 [88, 65535] { R4566 += 1, R4516 += 1 };
  s1 -> s1 [0, 64] { R4566 += 1, R4516 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R4566 += 1 };
  s1 -> s5 [65, 65] { R4566 += 1, R4516 += 1 };
  s1 -> s7 [65, 65] { R4566 += 1, R4516 += 1 };
  s1 -> s1 [66, 86] { R4566 += 1, R4516 += 1 };
  s1 -> s1 [88, 65535] { R4566 += 1, R4516 += 1 };
  s2 -> s1 [0, 64] { R4566 += 1, R4516 += 1 };
  s2 -> s2 [0, 64] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R4566 += 1, R4516 += 1 };
  s2 -> s6 [65, 65] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s2 -> s7 [65, 65] { R4566 += 1, R4516 += 1 };
  s2 -> s1 [66, 86] { R4566 += 1, R4516 += 1 };
  s2 -> s2 [66, 65535] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s2 -> s1 [88, 65535] { R4566 += 1, R4516 += 1 };
  s3 -> s1 [0, 64] { R4566 += 1, R4516 += 1 };
  s3 -> s2 [0, 64] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4566 += 1, R4515 += 1, R4516 += 1 };
  s3 -> s4 [65, 65] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R4566 += 1, R4516 += 1 };
  s3 -> s6 [65, 65] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R4566 += 1, R4516 += 1 };
  s3 -> s1 [66, 86] { R4566 += 1, R4516 += 1 };
  s3 -> s2 [66, 65535] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s3 -> s1 [88, 65535] { R4566 += 1, R4516 += 1 };
  s4 -> s7 [0, 86] { R4566 += 1, R4516 += 1 };
  s4 -> s4 [0, 65535] { R4566 += 1, R4516 += 1, R3509 += 1 };
  s4 -> s7 [88, 65535] { R4566 += 1, R4516 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R4566 += 1 };
  s7 -> s7 [0, 86] { R4566 += 1, R4516 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4566 += 1 };
  s7 -> s7 [88, 65535] { R4566 += 1, R4516 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R4568 += 1, R4517 += 1, R4518 += 1 };
  s0 -> s0 [0, 65535] { R4567 += 1, R4568 += 1 };
  s0 -> s4 [65, 65] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s0 -> s1 [66, 86] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s0 -> s2 [66, 65535] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [88, 65535] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s1 -> s1 [0, 65535] { R4568 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R4568 += 1, R4518 += 1 };
  s1 -> s7 [65, 65] { R4568 += 1, R4518 += 1 };
  s1 -> s1 [66, 86] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R4568 += 1, R4518 += 1 };
  s1 -> s1 [88, 65535] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s2 -> s1 [0, 64] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s4 [65, 65] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s5 [65, 65] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s2 -> s6 [65, 65] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s7 [65, 65] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s2 -> s1 [66, 86] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [88, 65535] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R4568 += 1, R4517 += 1, R4518 += 1 };
  s3 -> s4 [65, 65] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s3 -> s1 [66, 86] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s3 -> s2 [66, 65535] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [88, 65535] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s5 -> s5 [0, 86] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s5 -> s9 [0, 65535] { R4568 += 1 };
  s5 -> s5 [0, 65535] { R4568 += 1, R4518 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [88, 65535] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s6 -> s5 [0, 86] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s6 -> s6 [0, 65535] { R4568 += 1, R4518 += 1, R4379 += 1, R4380 += 1 };
  s6 -> s5 [88, 65535] { R4568 += 1, R4518 += 1, R4380 += 1 };
  s7 -> s7 [0, 65535] { R4568 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4568 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s2 [0, 65535] { R4570 += 1, R4519 += 1, R4520 += 1 };
  s0 -> s0 [0, 65535] { R4569 += 1, R4570 += 1 };
  s0 -> s3 [65, 65] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s4 [65, 65] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s0 -> s1 [66, 65535] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [0, 64] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [0, 65535] { R4570 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s4 [65, 65] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s1 -> s1 [66, 65535] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s1 [0, 64] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s2 [0, 65535] { R4570 += 1, R4519 += 1, R4520 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s4 [65, 65] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s2 -> s1 [66, 65535] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s3 -> s6 [0, 65535] { R4570 += 1 };
  s3 -> s3 [0, 65535] { R4570 += 1, R4520 += 1, R4383 += 1, R4384 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4570 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4570 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4572 += 1, R4522 += 1 };
  s0 -> s0 [0, 65535] { R4571 += 1, R4572 += 1 };
  s0 -> s2 [0, 65535] { R4572 += 1, R4521 += 1, R4522 += 1 };
  s0 -> s3 [65, 65] { R4572 += 1, R4522 += 1 };
  s0 -> s4 [65, 65] { R4572 += 1, R4522 += 1 };
  s0 -> s1 [66, 65535] { R4572 += 1, R4522 += 1 };
  s1 -> s1 [0, 64] { R4572 += 1, R4522 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4572 += 1 };
  s1 -> s3 [65, 65] { R4572 += 1, R4522 += 1 };
  s1 -> s4 [65, 65] { R4572 += 1, R4522 += 1 };
  s1 -> s1 [66, 65535] { R4572 += 1, R4522 += 1 };
  s2 -> s1 [0, 64] { R4572 += 1, R4522 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4572 += 1, R4521 += 1, R4522 += 1 };
  s2 -> s3 [65, 65] { R4572 += 1, R4522 += 1 };
  s2 -> s4 [65, 65] { R4572 += 1, R4522 += 1 };
  s2 -> s1 [66, 65535] { R4572 += 1, R4522 += 1 };
  s3 -> s3 [0, 65535] { R4572 += 1, R4522 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4572 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4572 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4572 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s0 -> s2 [0, 64] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s0 -> s0 [0, 65535] { R4573 += 1, R4574 += 1 };
  s0 -> s3 [0, 65535] { R4574 += 1, R4523 += 1, R4524 += 1 };
  s0 -> s4 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s0 -> s5 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s0 -> s6 [65, 65] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s0 -> s7 [65, 65] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s0 -> s1 [66, 65535] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s0 -> s2 [66, 65535] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s1 -> s1 [0, 64] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s1 -> s2 [0, 64] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s1 -> s4 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s1 -> s5 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s1 -> s6 [65, 65] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s1 -> s7 [65, 65] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s1 -> s1 [66, 65535] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s1 -> s2 [66, 65535] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s2 -> s2 [0, 64] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4574 += 1 };
  s2 -> s4 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s2 -> s5 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s2 -> s2 [66, 65535] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s3 -> s1 [0, 64] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s3 -> s2 [0, 64] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s3 -> s3 [0, 65535] { R4574 += 1, R4523 += 1, R4524 += 1 };
  s3 -> s4 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s3 -> s5 [65, 65] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s3 -> s6 [65, 65] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s3 -> s7 [65, 65] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s3 -> s1 [66, 65535] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s3 -> s2 [66, 65535] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s4 -> s4 [0, 65535] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R4574 += 1 };
  s5 -> s5 [0, 65535] { R4574 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R4574 += 1, R4524 += 1, R4484 += 1, R4485 += 1 };
  s7 -> s7 [0, 65535] { R4574 += 1, R4524 += 1, R4483 += 1, R4484 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4574 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4576 += 1, R4526 += 1 };
  s0 -> s0 [0, 65535] { R4575 += 1, R4576 += 1 };
  s0 -> s2 [0, 65535] { R4576 += 1, R4525 += 1, R4526 += 1 };
  s0 -> s3 [65, 65] { R4576 += 1, R4526 += 1 };
  s0 -> s4 [65, 65] { R4576 += 1, R4526 += 1 };
  s0 -> s1 [66, 65535] { R4576 += 1, R4526 += 1 };
  s1 -> s1 [0, 64] { R4576 += 1, R4526 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R4576 += 1 };
  s1 -> s3 [65, 65] { R4576 += 1, R4526 += 1 };
  s1 -> s4 [65, 65] { R4576 += 1, R4526 += 1 };
  s1 -> s1 [66, 65535] { R4576 += 1, R4526 += 1 };
  s2 -> s1 [0, 64] { R4576 += 1, R4526 += 1 };
  s2 -> s2 [0, 65535] { R4576 += 1, R4525 += 1, R4526 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R4576 += 1, R4526 += 1 };
  s2 -> s4 [65, 65] { R4576 += 1, R4526 += 1 };
  s2 -> s1 [66, 65535] { R4576 += 1, R4526 += 1 };
  s3 -> s3 [0, 65535] { R4576 += 1, R4526 += 1 };
  s3 -> s6 [0, 65535] { R4576 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4576 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4576 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4508 && R2 = R4576 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4489 = 0 && R4490 = R4508 && R4491 = 0 && R4492 = R4508 && R4493 = 0 && R4494 = R4508 && R4495 = 0 && R4496 = R4508 && R4497 = 0 && R4498 = R4508 && R4499 = 0 && R4500 = R4508 && R4501 = 0 && R4502 = R4508 && R4503 = 0 && R4504 = R4508 && R4505 = 0 && R4506 = R4508 && R4507 = 0 && R4511 = 0 && R4512 = 0 && R4515 = 0 && R4516 = 0 && R4517 = 0 && R4518 = 0 && R4523 = 0 && R4524 = 0 && R4527 = 10 && R4528 = R4576 && R4529 = 10 && R4530 = R4576 && R4531 = 10 && R4532 = R4576 && R4533 = 10 && R4534 = R4576 && R4535 = 10 && R4536 = R4576 && R4537 = 10 && R4538 = R4576 && R4539 = 10 && R4540 = R4576 && R4541 = 10 && R4542 = R4576 && R4543 = 10 && R4544 = R4576 && R4545 = 10 && R4546 = R4576 && R4547 = 10 && R4548 = R4576 && R4549 = 10 && R4550 = R4576 && R4551 = 10 && R4552 = R4576 && R4553 = 10 && R4554 = R4576 && R4555 = 10 && R4556 = R4576 && R4557 = 10 && R4558 = R4576 && R4559 = 10 && R4560 = R4576 && R4561 = 10 && R4562 = R4576 && R4563 = 10 && R4564 = R4576 && R4565 = 10 && R4566 = R4576 && R4567 = 10 && R4568 = R4576 && R4569 = 10 && R4570 = R4576 && R4571 = 10 && R4572 = R4576 && R4573 = 10 && R4574 = R4576 && R4575 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4508 && 9 < R4576 && (R14 = 0 || (R4509 = 0 && R4510 = 0)) && (R14 = 0 || (R4513 = 0 && R4514 = 0)) && (R14 = 0 || (R4519 = 0 && R4520 = 0)) && (R14 = 0 || (R4521 = 0 && R4522 = 0)) && (R14 = 0 || (R4525 = 0 && R4526 = 0)) && (R4388 + R4385 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4388 + R4385 = 0 || (R4386 + R4383 = 0 && R4387 + R4384 = 0)) && (R4488 + R4485 = 0 || (R4486 + R4483 = 0 && R4487 + R4484 = 0));
// End of Parikh automata intersection problem
