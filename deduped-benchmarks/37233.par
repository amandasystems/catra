// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4959, R4960, R4961, R4962, R4963, R4964, R5059, R5060, R5061, R5062, R5063, R5064, R5065, R5066, R5067, R5068, R5069, R5070, R5071, R5072, R5073, R5074, R5075, R5076, R5077, R5078, R5079, R5080, R5081, R5082, R5083, R5084, R5085, R5086, R5087, R5088, R5089, R5090, R5091, R5092, R5093, R5094, R5095, R5096, R5097, R5098, R5099, R5100, R5101, R5102, R5103, R5104, R5105, R5106, R5107, R5108, R5109, R5110, R5111, R5112, R5113, R5114, R5115, R5116, R5117, R5118, R5119, R5120, R5121, R5122, R5123, R5124, R5125, R5126, R5127, R5128, R5129, R5130, R5131, R5132, R5133, R5134, R5135, R5136, R5137, R5138, R5139, R5140, R5141, R5142, R5143, R5144, R5145, R5146, R5147, R5148, R5149, R5150, R5151, R5152, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R5104 += 1 };
  s0 -> s0 [0, 65535] { R5103 += 1, R5104 += 1 };
  s0 -> s1 [45, 45] { R5104 += 1 };
  s0 -> s2 [46, 46] { R5104 += 1 };
  s0 -> s1 [48, 62] { R5104 += 1 };
  s0 -> s3 [65, 65] { R5104 += 1 };
  s0 -> s1 [66, 65535] { R5104 += 1 };
  s1 -> s1 [0, 43] { R5104 += 1 };
  s1 -> s1 [45, 45] { R5104 += 1 };
  s1 -> s2 [46, 46] { R5104 += 1 };
  s1 -> s1 [48, 62] { R5104 += 1 };
  s1 -> s3 [65, 65] { R5104 += 1 };
  s1 -> s1 [66, 65535] { R5104 += 1 };
  s2 -> s1 [0, 43] { R5104 += 1 };
  s2 -> s1 [45, 45] { R5104 += 1 };
  s2 -> s2 [46, 46] { R5104 += 1 };
  s2 -> s1 [48, 62] { R5104 += 1 };
  s2 -> s3 [65, 65] { R5104 += 1 };
  s2 -> s1 [66, 114] { R5104 += 1 };
  s2 -> s8 [115, 115] { R5104 += 1 };
  s2 -> s1 [116, 65535] { R5104 += 1 };
  s3 -> s3 [0, 43] { R5104 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5104 += 1 };
  s3 -> s4 [46, 46] { R5104 += 1 };
  s3 -> s3 [48, 62] { R5104 += 1 };
  s3 -> s3 [65, 65535] { R5104 += 1 };
  s4 -> s3 [0, 43] { R5104 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5104 += 1 };
  s4 -> s4 [46, 46] { R5104 += 1 };
  s4 -> s3 [48, 62] { R5104 += 1 };
  s4 -> s3 [65, 114] { R5104 += 1 };
  s4 -> s5 [115, 115] { R5104 += 1 };
  s4 -> s3 [116, 65535] { R5104 += 1 };
  s5 -> s3 [0, 43] { R5104 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5104 += 1 };
  s5 -> s4 [46, 46] { R5104 += 1 };
  s5 -> s3 [48, 62] { R5104 += 1 };
  s5 -> s3 [65, 110] { R5104 += 1 };
  s5 -> s6 [111, 111] { R5104 += 1 };
  s5 -> s3 [112, 65535] { R5104 += 1 };
  s6 -> s3 [0, 43] { R5104 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5104 += 1 };
  s6 -> s4 [46, 46] { R5104 += 1 };
  s6 -> s3 [48, 62] { R5104 += 1 };
  s6 -> s3 [65, 98] { R5104 += 1 };
  s6 -> s7 [99, 99] { R5104 += 1 };
  s6 -> s3 [100, 65535] { R5104 += 1 };
  s7 -> s3 [0, 43] { R5104 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5104 += 1 };
  s7 -> s4 [46, 46] { R5104 += 1 };
  s7 -> s3 [48, 62] { R5104 += 1 };
  s7 -> s3 [65, 106] { R5104 += 1 };
  s7 -> s3 [108, 65535] { R5104 += 1 };
  s8 -> s1 [0, 43] { R5104 += 1 };
  s8 -> s1 [45, 45] { R5104 += 1 };
  s8 -> s2 [46, 46] { R5104 += 1 };
  s8 -> s1 [48, 62] { R5104 += 1 };
  s8 -> s3 [65, 65] { R5104 += 1 };
  s8 -> s1 [66, 110] { R5104 += 1 };
  s8 -> s9 [111, 111] { R5104 += 1 };
  s8 -> s1 [112, 65535] { R5104 += 1 };
  s9 -> s1 [0, 43] { R5104 += 1 };
  s9 -> s1 [45, 45] { R5104 += 1 };
  s9 -> s2 [46, 46] { R5104 += 1 };
  s9 -> s1 [48, 62] { R5104 += 1 };
  s9 -> s3 [65, 65] { R5104 += 1 };
  s9 -> s1 [66, 98] { R5104 += 1 };
  s9 -> s10 [99, 99] { R5104 += 1 };
  s9 -> s1 [100, 65535] { R5104 += 1 };
  s10 -> s1 [0, 43] { R5104 += 1 };
  s10 -> s1 [45, 45] { R5104 += 1 };
  s10 -> s2 [46, 46] { R5104 += 1 };
  s10 -> s1 [48, 62] { R5104 += 1 };
  s10 -> s3 [65, 65] { R5104 += 1 };
  s10 -> s1 [66, 106] { R5104 += 1 };
  s10 -> s1 [108, 65535] { R5104 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R5105 += 1, R5106 += 1 };
  s0 -> s1 [0, 65535] { R5106 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R5106 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R5108 += 1 };
  s0 -> s2 [0, 65535] { R5108 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R5107 += 1, R5108 += 1 };
  s0 -> s3 [58, 58] { R5108 += 1 };
  s0 -> s1 [59, 65535] { R5108 += 1 };
  s1 -> s1 [0, 57] { R5108 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5108 += 1 };
  s1 -> s1 [59, 65535] { R5108 += 1 };
  s2 -> s1 [0, 57] { R5108 += 1 };
  s2 -> s2 [0, 65535] { R5108 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R5108 += 1 };
  s2 -> s1 [59, 65535] { R5108 += 1 };
  s3 -> s3 [0, 65535] { R5108 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R5110 += 1 };
  s0 -> s0 [0, 65535] { R5109 += 1, R5110 += 1 };
  s0 -> s2 [0, 65535] { R5110 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R5110 += 1 };
  s0 -> s1 [66, 65535] { R5110 += 1 };
  s1 -> s1 [0, 64] { R5110 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5110 += 1 };
  s1 -> s1 [66, 65535] { R5110 += 1 };
  s2 -> s1 [0, 64] { R5110 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5110 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R5110 += 1 };
  s2 -> s1 [66, 65535] { R5110 += 1 };
  s3 -> s3 [0, 65535] { R5110 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R5112 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R5112 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R5111 += 1, R5112 += 1 };
  s0 -> s3 [91, 91] { R5112 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R5112 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R5112 += 1 };
  s1 -> s1 [0, 65535] { R5112 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R5112 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R5112 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R5112 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R5112 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R5112 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5112 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R5114 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R5114 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R5113 += 1, R5114 += 1 };
  s1 -> s1 [0, 65535] { R5114 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R5114 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5114 += 1 };
  s2 -> s2 [0, 65535] { R5114 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5114 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R5116 += 1, R5066 += 1 };
  s0 -> s2 [0, 65535] { R5116 += 1, R5065 += 1, R5066 += 1 };
  s0 -> s0 [0, 65535] { R5115 += 1, R5116 += 1 };
  s0 -> s1 [66, 65535] { R5116 += 1, R5066 += 1 };
  s1 -> s1 [0, 64] { R5116 += 1, R5066 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5116 += 1 };
  s1 -> s1 [66, 65535] { R5116 += 1, R5066 += 1 };
  s2 -> s1 [0, 64] { R5116 += 1, R5066 += 1 };
  s2 -> s2 [0, 65535] { R5116 += 1, R5065 += 1, R5066 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R5116 += 1, R5066 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R5117 += 1, R5118 += 1 };
  s0 -> s1 [0, 65535] { R5118 += 1, R5068 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R5118 += 1, R5067 += 1, R5068 += 1 };
  s1 -> s4 [0, 65535] { R5118 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5118 += 1, R5068 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5118 += 1, R5068 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R5118 += 1, R5067 += 1, R5068 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5118 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R5120 += 1, R5070 += 1 };
  s0 -> s0 [0, 65535] { R5119 += 1, R5120 += 1 };
  s0 -> s2 [0, 65535] { R5120 += 1, R5069 += 1, R5070 += 1 };
  s0 -> s1 [87, 65535] { R5120 += 1, R5070 += 1 };
  s1 -> s1 [0, 65] { R5120 += 1, R5070 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5120 += 1 };
  s1 -> s1 [87, 65535] { R5120 += 1, R5070 += 1 };
  s2 -> s1 [0, 65] { R5120 += 1, R5070 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5120 += 1, R5069 += 1, R5070 += 1 };
  s2 -> s1 [87, 65535] { R5120 += 1, R5070 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R5121 += 1, R5122 += 1 };
  s0 -> s1 [0, 65535] { R5122 += 1, R5071 += 1, R5072 += 1 };
  s0 -> s2 [0, 65535] { R5122 += 1, R5072 += 1, R1770 += 1 };
  s1 -> s1 [0, 65535] { R5122 += 1, R5071 += 1, R5072 += 1 };
  s1 -> s2 [0, 65535] { R5122 += 1, R5072 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R5122 += 1 };
  s2 -> s2 [0, 65535] { R5122 += 1, R5072 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R5122 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R5124 += 1, R5074 += 1 };
  s0 -> s2 [0, 65535] { R5124 += 1, R5073 += 1, R5074 += 1 };
  s0 -> s0 [0, 65535] { R5123 += 1, R5124 += 1 };
  s0 -> s1 [88, 65535] { R5124 += 1, R5074 += 1 };
  s1 -> s1 [0, 86] { R5124 += 1, R5074 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5124 += 1 };
  s1 -> s1 [88, 65535] { R5124 += 1, R5074 += 1 };
  s2 -> s1 [0, 86] { R5124 += 1, R5074 += 1 };
  s2 -> s2 [0, 65535] { R5124 += 1, R5073 += 1, R5074 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R5124 += 1, R5074 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R5126 += 1, R5076 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R5125 += 1, R5126 += 1 };
  s0 -> s1 [0, 65535] { R5126 += 1, R5076 += 1 };
  s0 -> s2 [0, 65535] { R5126 += 1, R5075 += 1, R5076 += 1 };
  s0 -> s1 [88, 65535] { R5126 += 1, R5076 += 1, R4382 += 1 };
  s1 -> s1 [0, 86] { R5126 += 1, R5076 += 1, R4382 += 1 };
  s1 -> s4 [0, 65535] { R5126 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5126 += 1, R5076 += 1 };
  s1 -> s1 [88, 65535] { R5126 += 1, R5076 += 1, R4382 += 1 };
  s2 -> s1 [0, 86] { R5126 += 1, R5076 += 1, R4382 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5126 += 1, R5076 += 1 };
  s2 -> s2 [0, 65535] { R5126 += 1, R5075 += 1, R5076 += 1 };
  s2 -> s1 [88, 65535] { R5126 += 1, R5076 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5126 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R5128 += 1, R5077 += 1, R5078 += 1 };
  s0 -> s0 [0, 65535] { R5127 += 1, R5128 += 1 };
  s0 -> s2 [0, 65535] { R5128 += 1, R5078 += 1 };
  s1 -> s1 [0, 65535] { R5128 += 1, R5077 += 1, R5078 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5128 += 1, R5078 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5128 += 1 };
  s2 -> s2 [0, 65535] { R5128 += 1, R5078 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5128 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R5130 += 1, R5080 += 1 };
  s0 -> s0 [0, 65535] { R5129 += 1, R5130 += 1 };
  s0 -> s2 [0, 65535] { R5130 += 1, R5079 += 1, R5080 += 1 };
  s1 -> s4 [0, 65535] { R5130 += 1 };
  s1 -> s1 [0, 65535] { R5130 += 1, R5080 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5130 += 1, R5080 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5130 += 1, R5079 += 1, R5080 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5130 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R5131 += 1, R5132 += 1 };
  s0 -> s1 [0, 65535] { R5132 += 1, R5082 += 1, R5063 += 1, R5064 += 1 };
  s0 -> s2 [0, 65535] { R5132 += 1, R5081 += 1, R5082 += 1 };
  s0 -> s3 [0, 65535] { R5132 += 1, R5082 += 1 };
  s1 -> s1 [0, 65535] { R5132 += 1, R5082 += 1, R5063 += 1, R5064 += 1 };
  s1 -> s4 [0, 65535] { R5132 += 1 };
  s1 -> s3 [0, 65535] { R5132 += 1, R5082 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R5132 += 1, R5082 += 1, R5063 += 1, R5064 += 1 };
  s2 -> s2 [0, 65535] { R5132 += 1, R5081 += 1, R5082 += 1 };
  s2 -> s3 [0, 65535] { R5132 += 1, R5082 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R5132 += 1 };
  s3 -> s3 [0, 65535] { R5132 += 1, R5082 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5132 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R5133 += 1, R5134 += 1 };
  s0 -> s1 [0, 65535] { R5134 += 1, R5084 += 1 };
  s0 -> s2 [0, 65535] { R5134 += 1, R5083 += 1, R5084 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5134 += 1 };
  s1 -> s1 [0, 65535] { R5134 += 1, R5084 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5134 += 1, R5084 += 1 };
  s2 -> s2 [0, 65535] { R5134 += 1, R5083 += 1, R5084 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R5136 += 1, R5085 += 1, R5086 += 1 };
  s0 -> s0 [0, 65535] { R5135 += 1, R5136 += 1 };
  s0 -> s2 [0, 65535] { R5136 += 1, R5086 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R5136 += 1, R5085 += 1, R5086 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5136 += 1, R5086 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R5136 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5136 += 1, R5086 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R5136 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R5138 += 1, R5088 += 1 };
  s0 -> s2 [0, 65535] { R5138 += 1, R5087 += 1, R5088 += 1 };
  s0 -> s0 [0, 65535] { R5137 += 1, R5138 += 1 };
  s0 -> s3 [65, 65] { R5138 += 1, R5088 += 1 };
  s0 -> s4 [65, 65] { R5138 += 1, R5088 += 1 };
  s0 -> s5 [87, 87] { R5138 += 1, R5088 += 1 };
  s0 -> s1 [88, 65535] { R5138 += 1, R5088 += 1 };
  s1 -> s1 [0, 64] { R5138 += 1, R5088 += 1 };
  s1 -> s3 [65, 65] { R5138 += 1, R5088 += 1 };
  s1 -> s4 [65, 65] { R5138 += 1, R5088 += 1 };
  s1 -> s5 [87, 87] { R5138 += 1, R5088 += 1 };
  s1 -> s1 [88, 65535] { R5138 += 1, R5088 += 1 };
  s2 -> s1 [0, 64] { R5138 += 1, R5088 += 1 };
  s2 -> s2 [0, 65535] { R5138 += 1, R5087 += 1, R5088 += 1 };
  s2 -> s3 [65, 65] { R5138 += 1, R5088 += 1 };
  s2 -> s4 [65, 65] { R5138 += 1, R5088 += 1 };
  s2 -> s5 [87, 87] { R5138 += 1, R5088 += 1 };
  s2 -> s1 [88, 65535] { R5138 += 1, R5088 += 1 };
  s4 -> s4 [0, 65] { R5138 += 1, R5088 += 1 };
  s4 -> s8 [87, 87] { R5138 += 1, R5088 += 1 };
  s4 -> s4 [88, 65535] { R5138 += 1, R5088 += 1 };
  s5 -> s5 [0, 64] { R5138 += 1, R5088 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5138 += 1 };
  s5 -> s7 [65, 65] { R5138 += 1, R5088 += 1 };
  s5 -> s8 [65, 65] { R5138 += 1, R5088 += 1 };
  s5 -> s5 [87, 65535] { R5138 += 1, R5088 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5138 += 1 };
  s8 -> s8 [0, 65] { R5138 += 1, R5088 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5138 += 1 };
  s8 -> s8 [87, 65535] { R5138 += 1, R5088 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R5139 += 1, R5140 += 1 };
  s0 -> s2 [0, 65535] { R5140 += 1, R5089 += 1, R5090 += 1 };
  s0 -> s3 [65, 65] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R5140 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R5140 += 1, R5089 += 1, R5090 += 1 };
  s2 -> s3 [65, 65] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R5140 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R5140 += 1 };
  s4 -> s4 [0, 65535] { R5140 += 1, R5090 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5140 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R5142 += 1, R5092 += 1 };
  s0 -> s2 [0, 64] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s0 -> s3 [0, 65535] { R5142 += 1, R5091 += 1, R5092 += 1 };
  s0 -> s0 [0, 65535] { R5141 += 1, R5142 += 1 };
  s0 -> s4 [65, 65] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R5142 += 1, R5092 += 1 };
  s0 -> s7 [65, 65] { R5142 += 1, R5092 += 1 };
  s0 -> s1 [66, 86] { R5142 += 1, R5092 += 1 };
  s0 -> s2 [66, 65535] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s0 -> s1 [88, 65535] { R5142 += 1, R5092 += 1 };
  s1 -> s1 [0, 64] { R5142 += 1, R5092 += 1 };
  s1 -> s1 [0, 65535] { R5142 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s6 [65, 65] { R5142 += 1, R5092 += 1 };
  s1 -> s7 [65, 65] { R5142 += 1, R5092 += 1 };
  s1 -> s1 [66, 86] { R5142 += 1, R5092 += 1 };
  s1 -> s1 [88, 65535] { R5142 += 1, R5092 += 1 };
  s2 -> s1 [0, 64] { R5142 += 1, R5092 += 1 };
  s2 -> s2 [0, 64] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s2 -> s6 [65, 65] { R5142 += 1, R5092 += 1 };
  s2 -> s7 [65, 65] { R5142 += 1, R5092 += 1 };
  s2 -> s1 [66, 86] { R5142 += 1, R5092 += 1 };
  s2 -> s2 [66, 65535] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s2 -> s1 [88, 65535] { R5142 += 1, R5092 += 1 };
  s3 -> s1 [0, 64] { R5142 += 1, R5092 += 1 };
  s3 -> s2 [0, 64] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R5142 += 1, R5091 += 1, R5092 += 1 };
  s3 -> s4 [65, 65] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R5142 += 1, R5092 += 1 };
  s3 -> s7 [65, 65] { R5142 += 1, R5092 += 1 };
  s3 -> s1 [66, 86] { R5142 += 1, R5092 += 1 };
  s3 -> s2 [66, 65535] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s3 -> s1 [88, 65535] { R5142 += 1, R5092 += 1 };
  s4 -> s6 [0, 86] { R5142 += 1, R5092 += 1 };
  s4 -> s4 [0, 65535] { R5142 += 1, R5092 += 1, R3509 += 1 };
  s4 -> s6 [88, 65535] { R5142 += 1, R5092 += 1 };
  s6 -> s6 [0, 86] { R5142 += 1, R5092 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5142 += 1 };
  s6 -> s6 [88, 65535] { R5142 += 1, R5092 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R5142 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s6, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s0 [0, 65535] { R5143 += 1, R5144 += 1 };
  s0 -> s3 [0, 65535] { R5144 += 1, R5093 += 1, R5094 += 1 };
  s0 -> s4 [65, 65] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [66, 86] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s0 -> s2 [66, 65535] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [88, 65535] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s1 -> s1 [0, 65535] { R5144 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R5144 += 1, R5094 += 1 };
  s1 -> s5 [65, 65] { R5144 += 1, R5094 += 1 };
  s1 -> s1 [66, 86] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R5144 += 1, R5094 += 1 };
  s1 -> s1 [88, 65535] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s2 -> s1 [0, 64] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s4 [65, 65] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s2 -> s5 [65, 65] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s2 -> s6 [65, 65] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s7 [65, 65] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [66, 86] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [88, 65535] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R5144 += 1, R5093 += 1, R5094 += 1 };
  s3 -> s4 [65, 65] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [66, 86] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s3 -> s2 [66, 65535] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [88, 65535] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s4 -> s4 [0, 86] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s4 -> s4 [0, 65535] { R5144 += 1, R5094 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R5144 += 1 };
  s4 -> s4 [88, 65535] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R5144 += 1 };
  s7 -> s4 [0, 86] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s7 -> s7 [0, 65535] { R5144 += 1, R5094 += 1, R4379 += 1, R4380 += 1 };
  s7 -> s4 [88, 65535] { R5144 += 1, R5094 += 1, R4380 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5144 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s2 [0, 64] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s0 [0, 65535] { R5145 += 1, R5146 += 1 };
  s0 -> s3 [0, 65535] { R5146 += 1, R5095 += 1, R5096 += 1 };
  s0 -> s4 [65, 65] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s5 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s6 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s7 [65, 65] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s1 [66, 65535] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s2 [66, 65535] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s1 [0, 64] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s2 [0, 64] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s4 [65, 65] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s5 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s6 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s7 [65, 65] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s1 [66, 65535] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s2 [66, 65535] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s11 [0, 64] { R5146 += 1, R5096 += 1 };
  s2 -> s2 [0, 64] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s5 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s12 [65, 65] { R5146 += 1, R5096 += 1 };
  s2 -> s8 [65, 65] { R5146 += 1, R5096 += 1 };
  s2 -> s6 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s11 [66, 65535] { R5146 += 1, R5096 += 1 };
  s2 -> s2 [66, 65535] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s1 [0, 64] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s2 [0, 64] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s3 [0, 65535] { R5146 += 1, R5095 += 1, R5096 += 1 };
  s3 -> s4 [65, 65] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s5 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s6 [65, 65] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s7 [65, 65] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s1 [66, 65535] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s2 [66, 65535] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s4 -> s4 [0, 65535] { R5146 += 1, R5096 += 1, R4959 += 1, R4960 += 1 };
  s4 -> s6 [0, 65535] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s6 -> s8 [0, 65535] { R5146 += 1, R5096 += 1 };
  s6 -> s6 [0, 65535] { R5146 += 1, R5096 += 1, R4960 += 1, R4961 += 1 };
  s8 -> s8 [0, 65535] { R5146 += 1, R5096 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R5146 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R5146 += 1 };
  s11 -> s11 [0, 64] { R5146 += 1, R5096 += 1 };
  s11 -> s11 [0, 65535] { R5146 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R5146 += 1, R5096 += 1 };
  s11 -> s8 [65, 65] { R5146 += 1, R5096 += 1 };
  s11 -> s11 [66, 65535] { R5146 += 1, R5096 += 1 };
  s12 -> s12 [0, 65535] { R5146 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R5148 += 1, R5098 += 1 };
  s0 -> s0 [0, 65535] { R5147 += 1, R5148 += 1 };
  s0 -> s2 [0, 65535] { R5148 += 1, R5097 += 1, R5098 += 1 };
  s0 -> s3 [65, 65] { R5148 += 1, R5098 += 1 };
  s0 -> s4 [65, 65] { R5148 += 1, R5098 += 1 };
  s0 -> s1 [66, 65535] { R5148 += 1, R5098 += 1 };
  s1 -> s1 [0, 64] { R5148 += 1, R5098 += 1 };
  s1 -> s1 [0, 65535] { R5148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R5148 += 1, R5098 += 1 };
  s1 -> s4 [65, 65] { R5148 += 1, R5098 += 1 };
  s1 -> s1 [66, 65535] { R5148 += 1, R5098 += 1 };
  s2 -> s1 [0, 64] { R5148 += 1, R5098 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5148 += 1, R5097 += 1, R5098 += 1 };
  s2 -> s3 [65, 65] { R5148 += 1, R5098 += 1 };
  s2 -> s4 [65, 65] { R5148 += 1, R5098 += 1 };
  s2 -> s1 [66, 65535] { R5148 += 1, R5098 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R5148 += 1 };
  s3 -> s3 [0, 65535] { R5148 += 1, R5098 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5148 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5148 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s0 -> s2 [0, 64] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s0 -> s0 [0, 65535] { R5149 += 1, R5150 += 1 };
  s0 -> s3 [0, 65535] { R5150 += 1, R5099 += 1, R5100 += 1 };
  s0 -> s4 [65, 65] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s0 -> s5 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s0 -> s6 [65, 65] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s0 -> s7 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s0 -> s1 [66, 65535] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s0 -> s2 [66, 65535] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s1 -> s1 [0, 64] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s1 -> s1 [0, 65535] { R5150 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s1 -> s7 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s1 -> s1 [66, 65535] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s2 -> s1 [0, 64] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s2 -> s2 [0, 64] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s2 -> s4 [65, 65] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s2 -> s5 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s2 -> s6 [65, 65] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s2 -> s7 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s2 -> s1 [66, 65535] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s2 -> s2 [66, 65535] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s3 -> s1 [0, 64] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s3 -> s2 [0, 64] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s3 -> s3 [0, 65535] { R5150 += 1, R5099 += 1, R5100 += 1 };
  s3 -> s4 [65, 65] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s3 -> s5 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s3 -> s6 [65, 65] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s3 -> s7 [65, 65] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s3 -> s1 [66, 65535] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s3 -> s2 [66, 65535] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s4 -> s4 [0, 65535] { R5150 += 1, R5100 += 1, R5059 += 1, R5060 += 1 };
  s4 -> s7 [0, 65535] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s5 -> s5 [0, 65535] { R5150 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R5150 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R5150 += 1, R5100 += 1, R5060 += 1, R5061 += 1 };
  s8 -> s8 [0, 65535] { R5150 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R5152 += 1, R5102 += 1 };
  s0 -> s2 [0, 65535] { R5152 += 1, R5101 += 1, R5102 += 1 };
  s0 -> s0 [0, 65535] { R5151 += 1, R5152 += 1 };
  s0 -> s3 [65, 65] { R5152 += 1, R5102 += 1 };
  s0 -> s4 [65, 65] { R5152 += 1, R5102 += 1 };
  s0 -> s1 [66, 65535] { R5152 += 1, R5102 += 1 };
  s1 -> s1 [0, 64] { R5152 += 1, R5102 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5152 += 1 };
  s1 -> s3 [65, 65] { R5152 += 1, R5102 += 1 };
  s1 -> s4 [65, 65] { R5152 += 1, R5102 += 1 };
  s1 -> s1 [66, 65535] { R5152 += 1, R5102 += 1 };
  s2 -> s1 [0, 64] { R5152 += 1, R5102 += 1 };
  s2 -> s2 [0, 65535] { R5152 += 1, R5101 += 1, R5102 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5152 += 1, R5102 += 1 };
  s2 -> s4 [65, 65] { R5152 += 1, R5102 += 1 };
  s2 -> s1 [66, 65535] { R5152 += 1, R5102 += 1 };
  s3 -> s3 [0, 65535] { R5152 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5152 += 1, R5102 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5152 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5152 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R5084 && R2 = R5152 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R5065 = 0 && R5066 = R5084 && R5067 = 0 && R5068 = R5084 && R5069 = 0 && R5070 = R5084 && R5071 = 0 && R5072 = R5084 && R5073 = 0 && R5074 = R5084 && R5075 = 0 && R5076 = R5084 && R5077 = 0 && R5078 = R5084 && R5079 = 0 && R5080 = R5084 && R5081 = 0 && R5082 = R5084 && R5083 = 0 && R5087 = 0 && R5088 = 0 && R5091 = 0 && R5092 = 0 && R5093 = 0 && R5094 = 0 && R5095 = 0 && R5096 = 0 && R5099 = 0 && R5100 = 0 && R5103 = 10 && R5104 = R5152 && R5105 = 10 && R5106 = R5152 && R5107 = 10 && R5108 = R5152 && R5109 = 10 && R5110 = R5152 && R5111 = 10 && R5112 = R5152 && R5113 = 10 && R5114 = R5152 && R5115 = 10 && R5116 = R5152 && R5117 = 10 && R5118 = R5152 && R5119 = 10 && R5120 = R5152 && R5121 = 10 && R5122 = R5152 && R5123 = 10 && R5124 = R5152 && R5125 = 10 && R5126 = R5152 && R5127 = 10 && R5128 = R5152 && R5129 = 10 && R5130 = R5152 && R5131 = 10 && R5132 = R5152 && R5133 = 10 && R5134 = R5152 && R5135 = 10 && R5136 = R5152 && R5137 = 10 && R5138 = R5152 && R5139 = 10 && R5140 = R5152 && R5141 = 10 && R5142 = R5152 && R5143 = 10 && R5144 = R5152 && R5145 = 10 && R5146 = R5152 && R5147 = 10 && R5148 = R5152 && R5149 = 10 && R5150 = R5152 && R5151 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R5084 && 9 < R5152 && (R14 = 0 || (R5085 = 0 && R5086 = 0)) && (R14 = 0 || (R5089 = 0 && R5090 = 0)) && (R14 = 0 || (R5097 = 0 && R5098 = 0)) && (R14 = 0 || (R5101 = 0 && R5102 = 0)) && (R4964 + R4961 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4964 + R4961 = 0 || (R4962 + R4959 = 0 && R4963 + R4960 = 0)) && (R5064 + R5061 = 0 || (R5062 + R5059 = 0 && R5063 + R5060 = 0));
// End of Parikh automata intersection problem
