// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4959, R4960, R4961, R4962, R4963, R4964, R4965, R4966, R4967, R4968, R4969, R4970, R4971, R4972, R4973, R4974, R4975, R4976, R4977, R4978, R4979, R4980, R4981, R4982, R4983, R4984, R4985, R4986, R4987, R4988, R4989, R4990, R4991, R4992, R4993, R4994, R4995, R4996, R4997, R4998, R4999, R5000, R5001, R5002, R5003, R5004, R5005, R5006, R5007, R5008, R5009, R5010, R5011, R5012, R5013, R5014, R5015, R5016, R5017, R5018, R5019, R5020, R5021, R5022, R5023, R5024, R5025, R5026, R5027, R5028, R5029, R5030, R5031, R5032, R5033, R5034, R5035, R5036, R5037, R5038, R5039, R5040, R5041, R5042, R5043, R5044, R5045, R5046, R5047, R5048, R5049, R5050, R5051, R5052, R5053, R5054, R5055, R5056, R5057, R5058, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R5010 += 1 };
  s0 -> s0 [0, 65535] { R5009 += 1, R5010 += 1 };
  s0 -> s1 [45, 45] { R5010 += 1 };
  s0 -> s2 [46, 46] { R5010 += 1 };
  s0 -> s1 [48, 62] { R5010 += 1 };
  s0 -> s3 [65, 65] { R5010 += 1 };
  s0 -> s1 [66, 65535] { R5010 += 1 };
  s1 -> s1 [0, 43] { R5010 += 1 };
  s1 -> s1 [45, 45] { R5010 += 1 };
  s1 -> s2 [46, 46] { R5010 += 1 };
  s1 -> s1 [48, 62] { R5010 += 1 };
  s1 -> s3 [65, 65] { R5010 += 1 };
  s1 -> s1 [66, 65535] { R5010 += 1 };
  s2 -> s1 [0, 43] { R5010 += 1 };
  s2 -> s1 [45, 45] { R5010 += 1 };
  s2 -> s2 [46, 46] { R5010 += 1 };
  s2 -> s1 [48, 62] { R5010 += 1 };
  s2 -> s3 [65, 65] { R5010 += 1 };
  s2 -> s1 [66, 114] { R5010 += 1 };
  s2 -> s8 [115, 115] { R5010 += 1 };
  s2 -> s1 [116, 65535] { R5010 += 1 };
  s3 -> s3 [0, 43] { R5010 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R5010 += 1 };
  s3 -> s4 [46, 46] { R5010 += 1 };
  s3 -> s3 [48, 62] { R5010 += 1 };
  s3 -> s3 [65, 65535] { R5010 += 1 };
  s4 -> s3 [0, 43] { R5010 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R5010 += 1 };
  s4 -> s4 [46, 46] { R5010 += 1 };
  s4 -> s3 [48, 62] { R5010 += 1 };
  s4 -> s3 [65, 114] { R5010 += 1 };
  s4 -> s5 [115, 115] { R5010 += 1 };
  s4 -> s3 [116, 65535] { R5010 += 1 };
  s5 -> s3 [0, 43] { R5010 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R5010 += 1 };
  s5 -> s4 [46, 46] { R5010 += 1 };
  s5 -> s3 [48, 62] { R5010 += 1 };
  s5 -> s3 [65, 110] { R5010 += 1 };
  s5 -> s6 [111, 111] { R5010 += 1 };
  s5 -> s3 [112, 65535] { R5010 += 1 };
  s6 -> s3 [0, 43] { R5010 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R5010 += 1 };
  s6 -> s4 [46, 46] { R5010 += 1 };
  s6 -> s3 [48, 62] { R5010 += 1 };
  s6 -> s3 [65, 98] { R5010 += 1 };
  s6 -> s7 [99, 99] { R5010 += 1 };
  s6 -> s3 [100, 65535] { R5010 += 1 };
  s7 -> s3 [0, 43] { R5010 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R5010 += 1 };
  s7 -> s4 [46, 46] { R5010 += 1 };
  s7 -> s3 [48, 62] { R5010 += 1 };
  s7 -> s3 [65, 106] { R5010 += 1 };
  s7 -> s3 [108, 65535] { R5010 += 1 };
  s8 -> s1 [0, 43] { R5010 += 1 };
  s8 -> s1 [45, 45] { R5010 += 1 };
  s8 -> s2 [46, 46] { R5010 += 1 };
  s8 -> s1 [48, 62] { R5010 += 1 };
  s8 -> s3 [65, 65] { R5010 += 1 };
  s8 -> s1 [66, 110] { R5010 += 1 };
  s8 -> s9 [111, 111] { R5010 += 1 };
  s8 -> s1 [112, 65535] { R5010 += 1 };
  s9 -> s1 [0, 43] { R5010 += 1 };
  s9 -> s1 [45, 45] { R5010 += 1 };
  s9 -> s2 [46, 46] { R5010 += 1 };
  s9 -> s1 [48, 62] { R5010 += 1 };
  s9 -> s3 [65, 65] { R5010 += 1 };
  s9 -> s1 [66, 98] { R5010 += 1 };
  s9 -> s10 [99, 99] { R5010 += 1 };
  s9 -> s1 [100, 65535] { R5010 += 1 };
  s10 -> s1 [0, 43] { R5010 += 1 };
  s10 -> s1 [45, 45] { R5010 += 1 };
  s10 -> s2 [46, 46] { R5010 += 1 };
  s10 -> s1 [48, 62] { R5010 += 1 };
  s10 -> s3 [65, 65] { R5010 += 1 };
  s10 -> s1 [66, 106] { R5010 += 1 };
  s10 -> s1 [108, 65535] { R5010 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R5012 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R5011 += 1, R5012 += 1 };
  s1 -> s1 [0, 65535] { R5012 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R5014 += 1 };
  s0 -> s0 [0, 65535] { R5013 += 1, R5014 += 1 };
  s0 -> s2 [0, 65535] { R5014 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R5014 += 1 };
  s0 -> s1 [59, 65535] { R5014 += 1 };
  s1 -> s1 [0, 57] { R5014 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R5014 += 1 };
  s1 -> s1 [59, 65535] { R5014 += 1 };
  s2 -> s1 [0, 57] { R5014 += 1 };
  s2 -> s2 [0, 65535] { R5014 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R5014 += 1 };
  s2 -> s1 [59, 65535] { R5014 += 1 };
  s3 -> s3 [0, 65535] { R5014 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R5016 += 1 };
  s0 -> s0 [0, 65535] { R5015 += 1, R5016 += 1 };
  s0 -> s2 [0, 65535] { R5016 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R5016 += 1 };
  s0 -> s1 [66, 65535] { R5016 += 1 };
  s1 -> s1 [0, 64] { R5016 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R5016 += 1 };
  s1 -> s1 [66, 65535] { R5016 += 1 };
  s2 -> s1 [0, 64] { R5016 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5016 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R5016 += 1 };
  s2 -> s1 [66, 65535] { R5016 += 1 };
  s3 -> s3 [0, 65535] { R5016 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R5018 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R5018 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R5017 += 1, R5018 += 1 };
  s0 -> s3 [91, 91] { R5018 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R5018 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R5018 += 1 };
  s1 -> s1 [0, 65535] { R5018 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R5018 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R5018 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R5018 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R5018 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R5018 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R5018 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R5020 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R5020 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R5019 += 1, R5020 += 1 };
  s1 -> s1 [0, 65535] { R5020 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R5020 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R5020 += 1 };
  s2 -> s2 [0, 65535] { R5020 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5020 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R5022 += 1, R4972 += 1 };
  s0 -> s2 [0, 65535] { R5022 += 1, R4971 += 1, R4972 += 1 };
  s0 -> s0 [0, 65535] { R5021 += 1, R5022 += 1 };
  s0 -> s1 [66, 65535] { R5022 += 1, R4972 += 1 };
  s1 -> s1 [0, 64] { R5022 += 1, R4972 += 1 };
  s1 -> s1 [0, 65535] { R5022 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R5022 += 1, R4972 += 1 };
  s2 -> s1 [0, 64] { R5022 += 1, R4972 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5022 += 1, R4971 += 1, R4972 += 1 };
  s2 -> s1 [66, 65535] { R5022 += 1, R4972 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R5023 += 1, R5024 += 1 };
  s0 -> s1 [0, 65535] { R5024 += 1, R4973 += 1, R4974 += 1 };
  s0 -> s2 [0, 65535] { R5024 += 1, R4974 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R5024 += 1, R4973 += 1, R4974 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5024 += 1, R4974 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R5024 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5024 += 1, R4974 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R5024 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R5026 += 1, R4976 += 1 };
  s0 -> s2 [0, 65535] { R5026 += 1, R4975 += 1, R4976 += 1 };
  s0 -> s0 [0, 65535] { R5025 += 1, R5026 += 1 };
  s0 -> s1 [87, 65535] { R5026 += 1, R4976 += 1 };
  s1 -> s1 [0, 65] { R5026 += 1, R4976 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5026 += 1 };
  s1 -> s1 [87, 65535] { R5026 += 1, R4976 += 1 };
  s2 -> s1 [0, 65] { R5026 += 1, R4976 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5026 += 1, R4975 += 1, R4976 += 1 };
  s2 -> s1 [87, 65535] { R5026 += 1, R4976 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R5028 += 1, R4978 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R5027 += 1, R5028 += 1 };
  s0 -> s2 [0, 65535] { R5028 += 1, R4977 += 1, R4978 += 1 };
  s1 -> s1 [0, 65535] { R5028 += 1, R4978 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R5028 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5028 += 1, R4978 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R5028 += 1, R4977 += 1, R4978 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5028 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R5030 += 1, R4980 += 1 };
  s0 -> s0 [0, 65535] { R5029 += 1, R5030 += 1 };
  s0 -> s2 [0, 65535] { R5030 += 1, R4979 += 1, R4980 += 1 };
  s0 -> s1 [88, 65535] { R5030 += 1, R4980 += 1 };
  s1 -> s1 [0, 86] { R5030 += 1, R4980 += 1 };
  s1 -> s1 [0, 65535] { R5030 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R5030 += 1, R4980 += 1 };
  s2 -> s1 [0, 86] { R5030 += 1, R4980 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5030 += 1, R4979 += 1, R4980 += 1 };
  s2 -> s1 [88, 65535] { R5030 += 1, R4980 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R5032 += 1, R4982 += 1, R4382 += 1 };
  s0 -> s2 [0, 65535] { R5032 += 1, R4981 += 1, R4982 += 1 };
  s0 -> s1 [0, 65535] { R5032 += 1, R4982 += 1 };
  s0 -> s0 [0, 65535] { R5031 += 1, R5032 += 1 };
  s0 -> s1 [88, 65535] { R5032 += 1, R4982 += 1, R4382 += 1 };
  s1 -> s1 [0, 86] { R5032 += 1, R4982 += 1, R4382 += 1 };
  s1 -> s1 [0, 65535] { R5032 += 1, R4982 += 1 };
  s1 -> s4 [0, 65535] { R5032 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R5032 += 1, R4982 += 1, R4382 += 1 };
  s2 -> s1 [0, 86] { R5032 += 1, R4982 += 1, R4382 += 1 };
  s2 -> s2 [0, 65535] { R5032 += 1, R4981 += 1, R4982 += 1 };
  s2 -> s1 [0, 65535] { R5032 += 1, R4982 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R5032 += 1, R4982 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5032 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R5034 += 1, R4984 += 1 };
  s0 -> s2 [0, 65535] { R5034 += 1, R4983 += 1, R4984 += 1 };
  s0 -> s0 [0, 65535] { R5033 += 1, R5034 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5034 += 1, R4984 += 1 };
  s1 -> s4 [0, 65535] { R5034 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R5034 += 1, R4984 += 1 };
  s2 -> s2 [0, 65535] { R5034 += 1, R4983 += 1, R4984 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5034 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R5036 += 1, R4985 += 1, R4986 += 1 };
  s0 -> s2 [0, 65535] { R5036 += 1, R4986 += 1 };
  s0 -> s0 [0, 65535] { R5035 += 1, R5036 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R5036 += 1, R4985 += 1, R4986 += 1 };
  s1 -> s2 [0, 65535] { R5036 += 1, R4986 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R5036 += 1, R4986 += 1 };
  s2 -> s4 [0, 65535] { R5036 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5036 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R5038 += 1, R4987 += 1, R4988 += 1 };
  s0 -> s2 [0, 65535] { R5038 += 1, R4988 += 1, R4968 += 1, R4969 += 1 };
  s0 -> s3 [0, 65535] { R5038 += 1, R4988 += 1, R4969 += 1, R4970 += 1 };
  s0 -> s0 [0, 65535] { R5037 += 1, R5038 += 1 };
  s1 -> s1 [0, 65535] { R5038 += 1, R4987 += 1, R4988 += 1 };
  s1 -> s2 [0, 65535] { R5038 += 1, R4988 += 1, R4968 += 1, R4969 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R5038 += 1, R4988 += 1, R4969 += 1, R4970 += 1 };
  s2 -> s2 [0, 65535] { R5038 += 1, R4988 += 1, R4968 += 1, R4969 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R5038 += 1, R4988 += 1, R4969 += 1, R4970 += 1 };
  s2 -> s6 [0, 65535] { R5038 += 1 };
  s3 -> s4 [0, 65535] { R5038 += 1, R4988 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5038 += 1, R4988 += 1, R4969 += 1, R4970 += 1 };
  s3 -> s6 [0, 65535] { R5038 += 1 };
  s4 -> s4 [0, 65535] { R5038 += 1, R4988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R5038 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5038 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R5039 += 1, R5040 += 1 };
  s0 -> s1 [0, 65535] { R5040 += 1, R4989 += 1, R4990 += 1 };
  s0 -> s2 [0, 65535] { R5040 += 1, R4990 += 1 };
  s1 -> s1 [0, 65535] { R5040 += 1, R4989 += 1, R4990 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R5040 += 1, R4990 += 1 };
  s2 -> s3 [0, 65535] { R5040 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R5040 += 1, R4990 += 1 };
  s3 -> s3 [0, 65535] { R5040 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R5042 += 1, R4992 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R5042 += 1, R4991 += 1, R4992 += 1 };
  s0 -> s0 [0, 65535] { R5041 += 1, R5042 += 1 };
  s1 -> s1 [0, 65535] { R5042 += 1, R4992 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R5042 += 1 };
  s2 -> s1 [0, 65535] { R5042 += 1, R4992 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R5042 += 1, R4991 += 1, R4992 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R5042 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R5044 += 1, R4994 += 1 };
  s0 -> s2 [0, 65535] { R5044 += 1, R4993 += 1, R4994 += 1 };
  s0 -> s0 [0, 65535] { R5043 += 1, R5044 += 1 };
  s0 -> s3 [65, 65] { R5044 += 1, R4994 += 1 };
  s0 -> s4 [65, 65] { R5044 += 1, R4994 += 1 };
  s0 -> s5 [87, 87] { R5044 += 1, R4994 += 1 };
  s0 -> s1 [88, 65535] { R5044 += 1, R4994 += 1 };
  s1 -> s1 [0, 64] { R5044 += 1, R4994 += 1 };
  s1 -> s3 [65, 65] { R5044 += 1, R4994 += 1 };
  s1 -> s4 [65, 65] { R5044 += 1, R4994 += 1 };
  s1 -> s5 [87, 87] { R5044 += 1, R4994 += 1 };
  s1 -> s1 [88, 65535] { R5044 += 1, R4994 += 1 };
  s2 -> s1 [0, 64] { R5044 += 1, R4994 += 1 };
  s2 -> s2 [0, 65535] { R5044 += 1, R4993 += 1, R4994 += 1 };
  s2 -> s3 [65, 65] { R5044 += 1, R4994 += 1 };
  s2 -> s4 [65, 65] { R5044 += 1, R4994 += 1 };
  s2 -> s5 [87, 87] { R5044 += 1, R4994 += 1 };
  s2 -> s1 [88, 65535] { R5044 += 1, R4994 += 1 };
  s4 -> s4 [0, 65] { R5044 += 1, R4994 += 1 };
  s4 -> s7 [87, 87] { R5044 += 1, R4994 += 1 };
  s4 -> s4 [88, 65535] { R5044 += 1, R4994 += 1 };
  s5 -> s5 [0, 64] { R5044 += 1, R4994 += 1 };
  s5 -> s5 [0, 65535] { R5044 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R5044 += 1, R4994 += 1 };
  s5 -> s8 [65, 65] { R5044 += 1, R4994 += 1 };
  s5 -> s5 [87, 65535] { R5044 += 1, R4994 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R5044 += 1, R4994 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R5044 += 1 };
  s7 -> s7 [87, 65535] { R5044 += 1, R4994 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R5044 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R5045 += 1, R5046 += 1 };
  s0 -> s2 [0, 65535] { R5046 += 1, R4995 += 1, R4996 += 1 };
  s0 -> s3 [65, 65] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5046 += 1 };
  s1 -> s3 [65, 65] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5046 += 1, R4995 += 1, R4996 += 1 };
  s2 -> s3 [65, 65] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R5046 += 1, R4996 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R5046 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5046 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5046 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s0 -> s2 [0, 64] { R5048 += 1, R4998 += 1 };
  s0 -> s0 [0, 65535] { R5047 += 1, R5048 += 1 };
  s0 -> s3 [0, 65535] { R5048 += 1, R4997 += 1, R4998 += 1 };
  s0 -> s4 [65, 65] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R5048 += 1, R4998 += 1 };
  s0 -> s7 [65, 65] { R5048 += 1, R4998 += 1 };
  s0 -> s2 [66, 86] { R5048 += 1, R4998 += 1 };
  s0 -> s1 [66, 65535] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s0 -> s2 [88, 65535] { R5048 += 1, R4998 += 1 };
  s1 -> s1 [0, 64] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s1 -> s2 [0, 64] { R5048 += 1, R4998 += 1 };
  s1 -> s4 [65, 65] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s1 -> s5 [65, 65] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s1 -> s6 [65, 65] { R5048 += 1, R4998 += 1 };
  s1 -> s7 [65, 65] { R5048 += 1, R4998 += 1 };
  s1 -> s2 [66, 86] { R5048 += 1, R4998 += 1 };
  s1 -> s1 [66, 65535] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s1 -> s2 [88, 65535] { R5048 += 1, R4998 += 1 };
  s2 -> s2 [0, 64] { R5048 += 1, R4998 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R5048 += 1 };
  s2 -> s6 [65, 65] { R5048 += 1, R4998 += 1 };
  s2 -> s7 [65, 65] { R5048 += 1, R4998 += 1 };
  s2 -> s2 [66, 86] { R5048 += 1, R4998 += 1 };
  s2 -> s2 [88, 65535] { R5048 += 1, R4998 += 1 };
  s3 -> s1 [0, 64] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s3 -> s2 [0, 64] { R5048 += 1, R4998 += 1 };
  s3 -> s3 [0, 65535] { R5048 += 1, R4997 += 1, R4998 += 1 };
  s3 -> s4 [65, 65] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R5048 += 1, R4998 += 1 };
  s3 -> s7 [65, 65] { R5048 += 1, R4998 += 1 };
  s3 -> s2 [66, 86] { R5048 += 1, R4998 += 1 };
  s3 -> s1 [66, 65535] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s3 -> s2 [88, 65535] { R5048 += 1, R4998 += 1 };
  s5 -> s7 [0, 86] { R5048 += 1, R4998 += 1 };
  s5 -> s5 [0, 65535] { R5048 += 1, R4998 += 1, R3509 += 1 };
  s5 -> s7 [88, 65535] { R5048 += 1, R4998 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R5048 += 1 };
  s7 -> s7 [0, 86] { R5048 += 1, R4998 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R5048 += 1 };
  s7 -> s7 [88, 65535] { R5048 += 1, R4998 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s6, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R5050 += 1, R4999 += 1, R5000 += 1 };
  s0 -> s0 [0, 65535] { R5049 += 1, R5050 += 1 };
  s0 -> s4 [65, 65] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [66, 86] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s0 -> s2 [66, 65535] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s1 [88, 65535] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s1 -> s1 [0, 65535] { R5050 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R5050 += 1, R5000 += 1 };
  s1 -> s5 [65, 65] { R5050 += 1, R5000 += 1 };
  s1 -> s1 [66, 86] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R5050 += 1, R5000 += 1 };
  s1 -> s1 [88, 65535] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s2 -> s1 [0, 64] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s4 [65, 65] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s2 -> s5 [65, 65] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s2 -> s6 [65, 65] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s7 [65, 65] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [66, 86] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s2 -> s1 [88, 65535] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R5050 += 1, R4999 += 1, R5000 += 1 };
  s3 -> s4 [65, 65] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [66, 86] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s3 -> s2 [66, 65535] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s1 [88, 65535] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s4 -> s4 [0, 86] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s4 -> s9 [0, 65535] { R5050 += 1 };
  s4 -> s4 [0, 65535] { R5050 += 1, R5000 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [88, 65535] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s5 -> s5 [0, 65535] { R5050 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 86] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s7 -> s7 [0, 65535] { R5050 += 1, R5000 += 1, R4379 += 1, R4380 += 1 };
  s7 -> s4 [88, 65535] { R5050 += 1, R5000 += 1, R4380 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R5050 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s2 [0, 64] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s3 [0, 65535] { R5052 += 1, R5001 += 1, R5002 += 1 };
  s0 -> s0 [0, 65535] { R5051 += 1, R5052 += 1 };
  s0 -> s4 [65, 65] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s5 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s6 [65, 65] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s0 -> s7 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s1 [66, 65535] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s0 -> s2 [66, 65535] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s1 -> s1 [0, 64] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s11 [0, 64] { R5052 += 1, R5002 += 1 };
  s1 -> s8 [65, 65] { R5052 += 1, R5002 += 1 };
  s1 -> s5 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s7 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s12 [65, 65] { R5052 += 1, R5002 += 1 };
  s1 -> s1 [66, 65535] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s1 -> s11 [66, 65535] { R5052 += 1, R5002 += 1 };
  s2 -> s1 [0, 64] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s2 [0, 64] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s2 -> s4 [65, 65] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s2 -> s5 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s6 [65, 65] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s2 -> s7 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s1 [66, 65535] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s2 -> s2 [66, 65535] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s1 [0, 64] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s2 [0, 64] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s3 [0, 65535] { R5052 += 1, R5001 += 1, R5002 += 1 };
  s3 -> s4 [65, 65] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s5 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s6 [65, 65] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s3 -> s7 [65, 65] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s1 [66, 65535] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s3 -> s2 [66, 65535] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s5 -> s8 [0, 65535] { R5052 += 1, R5002 += 1 };
  s5 -> s5 [0, 65535] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s6 -> s5 [0, 65535] { R5052 += 1, R5002 += 1, R4960 += 1, R4961 += 1 };
  s6 -> s6 [0, 65535] { R5052 += 1, R5002 += 1, R4959 += 1, R4960 += 1 };
  s8 -> s9 [0, 65535] { R5052 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R5052 += 1, R5002 += 1 };
  s9 -> s9 [0, 65535] { R5052 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R5052 += 1, R5002 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R5052 += 1 };
  s11 -> s8 [65, 65] { R5052 += 1, R5002 += 1 };
  s11 -> s12 [65, 65] { R5052 += 1, R5002 += 1 };
  s11 -> s11 [66, 65535] { R5052 += 1, R5002 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R5052 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R5054 += 1, R5004 += 1 };
  s0 -> s2 [0, 65535] { R5054 += 1, R5003 += 1, R5004 += 1 };
  s0 -> s0 [0, 65535] { R5053 += 1, R5054 += 1 };
  s0 -> s3 [65, 65] { R5054 += 1, R5004 += 1 };
  s0 -> s4 [65, 65] { R5054 += 1, R5004 += 1 };
  s0 -> s1 [66, 65535] { R5054 += 1, R5004 += 1 };
  s1 -> s1 [0, 64] { R5054 += 1, R5004 += 1 };
  s1 -> s1 [0, 65535] { R5054 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R5054 += 1, R5004 += 1 };
  s1 -> s4 [65, 65] { R5054 += 1, R5004 += 1 };
  s1 -> s1 [66, 65535] { R5054 += 1, R5004 += 1 };
  s2 -> s1 [0, 64] { R5054 += 1, R5004 += 1 };
  s2 -> s2 [0, 65535] { R5054 += 1, R5003 += 1, R5004 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R5054 += 1, R5004 += 1 };
  s2 -> s4 [65, 65] { R5054 += 1, R5004 += 1 };
  s2 -> s1 [66, 65535] { R5054 += 1, R5004 += 1 };
  s3 -> s3 [0, 65535] { R5054 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R5054 += 1, R5004 += 1 };
  s4 -> s5 [0, 65535] { R5054 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R5054 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s0 -> s0 [0, 65535] { R5055 += 1, R5056 += 1 };
  s0 -> s2 [0, 65535] { R5056 += 1, R5005 += 1, R5006 += 1 };
  s0 -> s3 [65, 65] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s0 -> s4 [65, 65] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s0 -> s1 [66, 65535] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s1 -> s1 [0, 64] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5056 += 1 };
  s1 -> s3 [65, 65] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s1 -> s4 [65, 65] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s1 -> s1 [66, 65535] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s2 -> s1 [0, 64] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R5056 += 1, R5005 += 1, R5006 += 1 };
  s2 -> s3 [65, 65] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s2 -> s4 [65, 65] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s2 -> s1 [66, 65535] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R5056 += 1, R5006 += 1, R4965 += 1, R4966 += 1 };
  s3 -> s6 [0, 65535] { R5056 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5056 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5056 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R5058 += 1, R5008 += 1 };
  s0 -> s2 [0, 65535] { R5058 += 1, R5007 += 1, R5008 += 1 };
  s0 -> s0 [0, 65535] { R5057 += 1, R5058 += 1 };
  s0 -> s3 [65, 65] { R5058 += 1, R5008 += 1 };
  s0 -> s4 [65, 65] { R5058 += 1, R5008 += 1 };
  s0 -> s1 [66, 65535] { R5058 += 1, R5008 += 1 };
  s1 -> s1 [0, 64] { R5058 += 1, R5008 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R5058 += 1 };
  s1 -> s3 [65, 65] { R5058 += 1, R5008 += 1 };
  s1 -> s4 [65, 65] { R5058 += 1, R5008 += 1 };
  s1 -> s1 [66, 65535] { R5058 += 1, R5008 += 1 };
  s2 -> s1 [0, 64] { R5058 += 1, R5008 += 1 };
  s2 -> s2 [0, 65535] { R5058 += 1, R5007 += 1, R5008 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R5058 += 1, R5008 += 1 };
  s2 -> s4 [65, 65] { R5058 += 1, R5008 += 1 };
  s2 -> s1 [66, 65535] { R5058 += 1, R5008 += 1 };
  s3 -> s3 [0, 65535] { R5058 += 1, R5008 += 1 };
  s3 -> s6 [0, 65535] { R5058 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R5058 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R5058 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4990 && R2 = R5058 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4971 = 0 && R4972 = R4990 && R4973 = 0 && R4974 = R4990 && R4975 = 0 && R4976 = R4990 && R4977 = 0 && R4978 = R4990 && R4979 = 0 && R4980 = R4990 && R4981 = 0 && R4982 = R4990 && R4983 = 0 && R4984 = R4990 && R4985 = 0 && R4986 = R4990 && R4987 = 0 && R4988 = R4990 && R4989 = 0 && R4993 = 0 && R4994 = 0 && R4997 = 0 && R4998 = 0 && R4999 = 0 && R5000 = 0 && R5001 = 0 && R5002 = 0 && R5009 = 10 && R5010 = R5058 && R5011 = 10 && R5012 = R5058 && R5013 = 10 && R5014 = R5058 && R5015 = 10 && R5016 = R5058 && R5017 = 10 && R5018 = R5058 && R5019 = 10 && R5020 = R5058 && R5021 = 10 && R5022 = R5058 && R5023 = 10 && R5024 = R5058 && R5025 = 10 && R5026 = R5058 && R5027 = 10 && R5028 = R5058 && R5029 = 10 && R5030 = R5058 && R5031 = 10 && R5032 = R5058 && R5033 = 10 && R5034 = R5058 && R5035 = 10 && R5036 = R5058 && R5037 = 10 && R5038 = R5058 && R5039 = 10 && R5040 = R5058 && R5041 = 10 && R5042 = R5058 && R5043 = 10 && R5044 = R5058 && R5045 = 10 && R5046 = R5058 && R5047 = 10 && R5048 = R5058 && R5049 = 10 && R5050 = R5058 && R5051 = 10 && R5052 = R5058 && R5053 = 10 && R5054 = R5058 && R5055 = 10 && R5056 = R5058 && R5057 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4990 && 9 < R5058 && (R14 = 0 || (R4991 = 0 && R4992 = 0)) && (R14 = 0 || (R4995 = 0 && R4996 = 0)) && (R14 = 0 || (R5003 = 0 && R5004 = 0)) && (R14 = 0 || (R5005 = 0 && R5006 = 0)) && (R14 = 0 || (R5007 = 0 && R5008 = 0)) && (R4964 + R4961 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4964 + R4961 = 0 || (R4962 + R4959 = 0 && R4963 + R4960 = 0)) && (R4970 + R4967 = 0 || (R4968 + R4965 = 0 && R4969 + R4966 = 0));
// End of Parikh automata intersection problem
