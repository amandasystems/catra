// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1000, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R952 += 1 };
  s0 -> s0 [0, 65535] { R951 += 1, R952 += 1 };
  s0 -> s1 [45, 45] { R952 += 1 };
  s0 -> s2 [46, 46] { R952 += 1 };
  s0 -> s1 [48, 62] { R952 += 1 };
  s0 -> s3 [65, 65] { R952 += 1 };
  s0 -> s1 [66, 65535] { R952 += 1 };
  s1 -> s1 [0, 43] { R952 += 1 };
  s1 -> s1 [45, 45] { R952 += 1 };
  s1 -> s2 [46, 46] { R952 += 1 };
  s1 -> s1 [48, 62] { R952 += 1 };
  s1 -> s3 [65, 65] { R952 += 1 };
  s1 -> s1 [66, 65535] { R952 += 1 };
  s2 -> s1 [0, 43] { R952 += 1 };
  s2 -> s1 [45, 45] { R952 += 1 };
  s2 -> s2 [46, 46] { R952 += 1 };
  s2 -> s1 [48, 62] { R952 += 1 };
  s2 -> s3 [65, 65] { R952 += 1 };
  s2 -> s1 [66, 114] { R952 += 1 };
  s2 -> s8 [115, 115] { R952 += 1 };
  s2 -> s1 [116, 65535] { R952 += 1 };
  s3 -> s3 [0, 43] { R952 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R952 += 1 };
  s3 -> s4 [46, 46] { R952 += 1 };
  s3 -> s3 [48, 62] { R952 += 1 };
  s3 -> s3 [65, 65535] { R952 += 1 };
  s4 -> s3 [0, 43] { R952 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R952 += 1 };
  s4 -> s4 [46, 46] { R952 += 1 };
  s4 -> s3 [48, 62] { R952 += 1 };
  s4 -> s3 [65, 114] { R952 += 1 };
  s4 -> s5 [115, 115] { R952 += 1 };
  s4 -> s3 [116, 65535] { R952 += 1 };
  s5 -> s3 [0, 43] { R952 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R952 += 1 };
  s5 -> s4 [46, 46] { R952 += 1 };
  s5 -> s3 [48, 62] { R952 += 1 };
  s5 -> s3 [65, 110] { R952 += 1 };
  s5 -> s6 [111, 111] { R952 += 1 };
  s5 -> s3 [112, 65535] { R952 += 1 };
  s6 -> s3 [0, 43] { R952 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R952 += 1 };
  s6 -> s4 [46, 46] { R952 += 1 };
  s6 -> s3 [48, 62] { R952 += 1 };
  s6 -> s3 [65, 98] { R952 += 1 };
  s6 -> s7 [99, 99] { R952 += 1 };
  s6 -> s3 [100, 65535] { R952 += 1 };
  s7 -> s3 [0, 43] { R952 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R952 += 1 };
  s7 -> s4 [46, 46] { R952 += 1 };
  s7 -> s3 [48, 62] { R952 += 1 };
  s7 -> s3 [65, 106] { R952 += 1 };
  s7 -> s3 [108, 65535] { R952 += 1 };
  s8 -> s1 [0, 43] { R952 += 1 };
  s8 -> s1 [45, 45] { R952 += 1 };
  s8 -> s2 [46, 46] { R952 += 1 };
  s8 -> s1 [48, 62] { R952 += 1 };
  s8 -> s3 [65, 65] { R952 += 1 };
  s8 -> s1 [66, 110] { R952 += 1 };
  s8 -> s9 [111, 111] { R952 += 1 };
  s8 -> s1 [112, 65535] { R952 += 1 };
  s9 -> s1 [0, 43] { R952 += 1 };
  s9 -> s1 [45, 45] { R952 += 1 };
  s9 -> s2 [46, 46] { R952 += 1 };
  s9 -> s1 [48, 62] { R952 += 1 };
  s9 -> s3 [65, 65] { R952 += 1 };
  s9 -> s1 [66, 98] { R952 += 1 };
  s9 -> s10 [99, 99] { R952 += 1 };
  s9 -> s1 [100, 65535] { R952 += 1 };
  s10 -> s1 [0, 43] { R952 += 1 };
  s10 -> s1 [45, 45] { R952 += 1 };
  s10 -> s2 [46, 46] { R952 += 1 };
  s10 -> s1 [48, 62] { R952 += 1 };
  s10 -> s3 [65, 65] { R952 += 1 };
  s10 -> s1 [66, 106] { R952 += 1 };
  s10 -> s1 [108, 65535] { R952 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R954 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R953 += 1, R954 += 1 };
  s1 -> s1 [0, 65535] { R954 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R956 += 1 };
  s0 -> s2 [0, 65535] { R956 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R955 += 1, R956 += 1 };
  s0 -> s3 [58, 58] { R956 += 1 };
  s0 -> s1 [59, 65535] { R956 += 1 };
  s1 -> s1 [0, 57] { R956 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R956 += 1 };
  s1 -> s1 [59, 65535] { R956 += 1 };
  s2 -> s1 [0, 57] { R956 += 1 };
  s2 -> s2 [0, 65535] { R956 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R956 += 1 };
  s2 -> s1 [59, 65535] { R956 += 1 };
  s3 -> s3 [0, 65535] { R956 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R958 += 1 };
  s0 -> s0 [0, 65535] { R957 += 1, R958 += 1 };
  s0 -> s2 [0, 65535] { R958 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R958 += 1 };
  s0 -> s1 [66, 65535] { R958 += 1 };
  s1 -> s1 [0, 64] { R958 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R958 += 1 };
  s1 -> s1 [66, 65535] { R958 += 1 };
  s2 -> s1 [0, 64] { R958 += 1 };
  s2 -> s2 [0, 65535] { R958 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R958 += 1 };
  s2 -> s1 [66, 65535] { R958 += 1 };
  s3 -> s3 [0, 65535] { R958 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R960 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R960 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R959 += 1, R960 += 1 };
  s0 -> s3 [91, 91] { R960 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R960 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R960 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R960 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R960 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R960 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R960 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R960 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R960 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R960 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R961 += 1, R962 += 1 };
  s0 -> s1 [0, 65535] { R962 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R962 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R962 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R962 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R962 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R962 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R962 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R964 += 1, R914 += 1 };
  s0 -> s0 [0, 65535] { R963 += 1, R964 += 1 };
  s0 -> s2 [0, 65535] { R964 += 1, R913 += 1, R914 += 1 };
  s0 -> s1 [66, 65535] { R964 += 1, R914 += 1 };
  s1 -> s1 [0, 64] { R964 += 1, R914 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R964 += 1 };
  s1 -> s1 [66, 65535] { R964 += 1, R914 += 1 };
  s2 -> s1 [0, 64] { R964 += 1, R914 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R964 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [66, 65535] { R964 += 1, R914 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R965 += 1, R966 += 1 };
  s0 -> s1 [0, 65535] { R966 += 1, R915 += 1, R916 += 1 };
  s0 -> s2 [0, 65535] { R966 += 1, R916 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R966 += 1, R915 += 1, R916 += 1 };
  s1 -> s2 [0, 65535] { R966 += 1, R916 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R966 += 1 };
  s2 -> s2 [0, 65535] { R966 += 1, R916 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R966 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R968 += 1, R918 += 1 };
  s0 -> s0 [0, 65535] { R967 += 1, R968 += 1 };
  s0 -> s2 [0, 65535] { R968 += 1, R917 += 1, R918 += 1 };
  s0 -> s3 [87, 87] { R968 += 1, R918 += 1 };
  s0 -> s1 [88, 65535] { R968 += 1, R918 += 1 };
  s1 -> s1 [0, 65] { R968 += 1, R918 += 1 };
  s1 -> s3 [87, 87] { R968 += 1, R918 += 1 };
  s1 -> s1 [88, 65535] { R968 += 1, R918 += 1 };
  s2 -> s1 [0, 65] { R968 += 1, R918 += 1 };
  s2 -> s2 [0, 65535] { R968 += 1, R917 += 1, R918 += 1 };
  s2 -> s3 [87, 87] { R968 += 1, R918 += 1 };
  s2 -> s1 [88, 65535] { R968 += 1, R918 += 1 };
  s3 -> s3 [0, 65] { R968 += 1, R918 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R968 += 1 };
  s3 -> s3 [87, 65535] { R968 += 1, R918 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R969 += 1, R970 += 1 };
  s0 -> s1 [0, 65535] { R970 += 1, R920 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R970 += 1, R919 += 1, R920 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R970 += 1 };
  s1 -> s1 [0, 65535] { R970 += 1, R920 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R970 += 1, R920 += 1, R26 += 1 };
  s2 -> s2 [0, 65535] { R970 += 1, R919 += 1, R920 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R970 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R972 += 1, R922 += 1 };
  s0 -> s2 [0, 65535] { R972 += 1, R921 += 1, R922 += 1 };
  s0 -> s3 [0, 65535] { R972 += 1, R922 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R971 += 1, R972 += 1 };
  s0 -> s1 [88, 65535] { R972 += 1, R922 += 1 };
  s1 -> s1 [0, 86] { R972 += 1, R922 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R972 += 1 };
  s1 -> s1 [88, 65535] { R972 += 1, R922 += 1 };
  s2 -> s1 [0, 86] { R972 += 1, R922 += 1 };
  s2 -> s2 [0, 65535] { R972 += 1, R921 += 1, R922 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R972 += 1, R922 += 1, R28 += 1 };
  s2 -> s1 [88, 65535] { R972 += 1, R922 += 1 };
  s3 -> s1 [0, 86] { R972 += 1, R922 += 1 };
  s3 -> s4 [0, 65535] { R972 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R972 += 1, R922 += 1, R28 += 1 };
  s3 -> s1 [88, 65535] { R972 += 1, R922 += 1 };
  s4 -> s4 [0, 65535] { R972 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R974 += 1, R924 += 1, R900 += 1 };
  s0 -> s0 [0, 65535] { R973 += 1, R974 += 1 };
  s0 -> s2 [0, 65535] { R974 += 1, R923 += 1, R924 += 1 };
  s0 -> s1 [0, 65535] { R974 += 1, R924 += 1 };
  s0 -> s1 [88, 65535] { R974 += 1, R924 += 1, R900 += 1 };
  s1 -> s1 [0, 86] { R974 += 1, R924 += 1, R900 += 1 };
  s1 -> s4 [0, 65535] { R974 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R974 += 1, R924 += 1 };
  s1 -> s1 [88, 65535] { R974 += 1, R924 += 1, R900 += 1 };
  s2 -> s1 [0, 86] { R974 += 1, R924 += 1, R900 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R974 += 1, R923 += 1, R924 += 1 };
  s2 -> s1 [0, 65535] { R974 += 1, R924 += 1 };
  s2 -> s1 [88, 65535] { R974 += 1, R924 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R974 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R976 += 1, R925 += 1, R926 += 1 };
  s0 -> s0 [0, 65535] { R975 += 1, R976 += 1 };
  s0 -> s2 [0, 65535] { R976 += 1, R926 += 1, R904 += 1, R905 += 1 };
  s0 -> s3 [0, 65535] { R976 += 1, R926 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 65535] { R976 += 1, R925 += 1, R926 += 1 };
  s1 -> s2 [0, 65535] { R976 += 1, R926 += 1, R904 += 1, R905 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R976 += 1, R926 += 1, R905 += 1, R906 += 1 };
  s2 -> s4 [0, 65535] { R976 += 1 };
  s2 -> s2 [0, 65535] { R976 += 1, R926 += 1, R904 += 1, R905 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R976 += 1, R926 += 1, R905 += 1, R906 += 1 };
  s3 -> s4 [0, 65535] { R976 += 1 };
  s3 -> s5 [0, 65535] { R976 += 1, R926 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R976 += 1, R926 += 1, R905 += 1, R906 += 1 };
  s4 -> s4 [0, 65535] { R976 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R976 += 1 };
  s5 -> s5 [0, 65535] { R976 += 1, R926 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R978 += 1, R928 += 1 };
  s0 -> s0 [0, 65535] { R977 += 1, R978 += 1 };
  s0 -> s2 [0, 65535] { R978 += 1, R927 += 1, R928 += 1 };
  s1 -> s1 [0, 65535] { R978 += 1, R928 += 1 };
  s1 -> s4 [0, 65535] { R978 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R978 += 1, R928 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R978 += 1, R927 += 1, R928 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R978 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R980 += 1, R930 += 1, R911 += 1, R912 += 1 };
  s0 -> s2 [0, 65535] { R980 += 1, R929 += 1, R930 += 1 };
  s0 -> s0 [0, 65535] { R979 += 1, R980 += 1 };
  s0 -> s3 [0, 65535] { R980 += 1, R930 += 1, R910 += 1, R911 += 1 };
  s1 -> s1 [0, 65535] { R980 += 1, R930 += 1, R911 += 1, R912 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R980 += 1, R930 += 1 };
  s1 -> s5 [0, 65535] { R980 += 1 };
  s2 -> s1 [0, 65535] { R980 += 1, R930 += 1, R911 += 1, R912 += 1 };
  s2 -> s2 [0, 65535] { R980 += 1, R929 += 1, R930 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R980 += 1, R930 += 1, R910 += 1, R911 += 1 };
  s3 -> s1 [0, 65535] { R980 += 1, R930 += 1, R911 += 1, R912 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R980 += 1, R930 += 1, R910 += 1, R911 += 1 };
  s3 -> s5 [0, 65535] { R980 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R980 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R980 += 1, R930 += 1 };
  s6 -> s5 [0, 65535] { R980 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R982 += 1, R932 += 1 };
  s0 -> s0 [0, 65535] { R981 += 1, R982 += 1 };
  s0 -> s2 [0, 65535] { R982 += 1, R931 += 1, R932 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R982 += 1, R932 += 1 };
  s1 -> s4 [0, 65535] { R982 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R982 += 1, R932 += 1 };
  s2 -> s2 [0, 65535] { R982 += 1, R931 += 1, R932 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R982 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R983 += 1, R984 += 1 };
  s0 -> s1 [0, 65535] { R984 += 1, R933 += 1, R934 += 1 };
  s0 -> s2 [0, 65535] { R984 += 1, R934 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R984 += 1, R933 += 1, R934 += 1 };
  s1 -> s2 [0, 65535] { R984 += 1, R934 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R984 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R984 += 1, R934 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R984 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R986 += 1, R936 += 1 };
  s0 -> s2 [0, 65535] { R986 += 1, R935 += 1, R936 += 1 };
  s0 -> s0 [0, 65535] { R985 += 1, R986 += 1 };
  s0 -> s3 [65, 65] { R986 += 1, R936 += 1 };
  s0 -> s4 [65, 65] { R986 += 1, R936 += 1 };
  s0 -> s1 [88, 65535] { R986 += 1, R936 += 1 };
  s1 -> s1 [0, 64] { R986 += 1, R936 += 1 };
  s1 -> s1 [0, 65535] { R986 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R986 += 1, R936 += 1 };
  s1 -> s4 [65, 65] { R986 += 1, R936 += 1 };
  s1 -> s1 [88, 65535] { R986 += 1, R936 += 1 };
  s2 -> s1 [0, 64] { R986 += 1, R936 += 1 };
  s2 -> s2 [0, 65535] { R986 += 1, R935 += 1, R936 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R986 += 1, R936 += 1 };
  s2 -> s4 [65, 65] { R986 += 1, R936 += 1 };
  s2 -> s1 [88, 65535] { R986 += 1, R936 += 1 };
  s3 -> s3 [0, 65] { R986 += 1, R936 += 1 };
  s3 -> s3 [0, 65535] { R986 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [88, 65535] { R986 += 1, R936 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R986 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R988 += 1, R938 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R988 += 1, R937 += 1, R938 += 1 };
  s0 -> s0 [0, 65535] { R987 += 1, R988 += 1 };
  s0 -> s3 [65, 65] { R988 += 1, R938 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R988 += 1, R938 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R988 += 1, R938 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R988 += 1, R938 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R988 += 1 };
  s1 -> s3 [65, 65] { R988 += 1, R938 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R988 += 1, R938 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R988 += 1, R938 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R988 += 1, R938 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R988 += 1, R937 += 1, R938 += 1 };
  s2 -> s3 [65, 65] { R988 += 1, R938 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R988 += 1, R938 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R988 += 1, R938 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R988 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R988 += 1 };
  s4 -> s4 [0, 65535] { R988 += 1, R938 += 1, R25 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R988 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R990 += 1, R940 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R990 += 1, R939 += 1, R940 += 1 };
  s0 -> s0 [0, 65535] { R989 += 1, R990 += 1 };
  s0 -> s3 [65, 65] { R990 += 1, R940 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R990 += 1, R940 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R990 += 1, R940 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R990 += 1, R940 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R990 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R990 += 1, R940 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R990 += 1, R940 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R990 += 1, R940 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R990 += 1, R940 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R990 += 1, R939 += 1, R940 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R990 += 1, R940 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R990 += 1, R940 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R990 += 1, R940 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R990 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R990 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R990 += 1, R940 += 1, R27 += 1 };
  s5 -> s5 [0, 65535] { R990 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R992 += 1, R942 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R992 += 1, R941 += 1, R942 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s0 -> s4 [65, 65] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R992 += 1, R942 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R992 += 1, R942 += 1, R898 += 1 };
  s0 -> s1 [66, 86] { R992 += 1, R942 += 1, R898 += 1 };
  s0 -> s2 [66, 65535] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [88, 65535] { R992 += 1, R942 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R992 += 1, R942 += 1, R898 += 1 };
  s1 -> s1 [0, 65535] { R992 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s5 [65, 65] { R992 += 1, R942 += 1 };
  s1 -> s7 [65, 65] { R992 += 1, R942 += 1 };
  s1 -> s1 [66, 86] { R992 += 1, R942 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R992 += 1, R942 += 1 };
  s1 -> s1 [88, 65535] { R992 += 1, R942 += 1, R898 += 1 };
  s2 -> s1 [0, 64] { R992 += 1, R942 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [65, 65] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s2 -> s5 [65, 65] { R992 += 1, R942 += 1, R898 += 1 };
  s2 -> s6 [65, 65] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s2 -> s7 [65, 65] { R992 += 1, R942 += 1, R898 += 1 };
  s2 -> s1 [66, 86] { R992 += 1, R942 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [88, 65535] { R992 += 1, R942 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R992 += 1, R942 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R992 += 1, R941 += 1, R942 += 1 };
  s3 -> s4 [65, 65] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R992 += 1, R942 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R992 += 1, R942 += 1, R898 += 1 };
  s3 -> s1 [66, 86] { R992 += 1, R942 += 1, R898 += 1 };
  s3 -> s2 [66, 65535] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [88, 65535] { R992 += 1, R942 += 1, R898 += 1 };
  s5 -> s5 [0, 65535] { R992 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s7 [0, 86] { R992 += 1, R942 += 1, R898 += 1 };
  s6 -> s6 [0, 65535] { R992 += 1, R942 += 1, R897 += 1, R898 += 1 };
  s6 -> s7 [88, 65535] { R992 += 1, R942 += 1, R898 += 1 };
  s7 -> s7 [0, 86] { R992 += 1, R942 += 1, R898 += 1 };
  s7 -> s8 [0, 65535] { R992 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R992 += 1, R942 += 1 };
  s7 -> s7 [88, 65535] { R992 += 1, R942 += 1, R898 += 1 };
  s8 -> s8 [0, 65535] { R992 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R943 += 1, R944 += 1 };
  s0 -> s3 [65, 65] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s0 -> s4 [65, 65] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s0 -> s1 [66, 65535] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [0, 64] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [0, 65535] { R994 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s1 -> s4 [65, 65] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [66, 65535] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s2 -> s1 [0, 64] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s2 -> s2 [0, 65535] { R994 += 1, R943 += 1, R944 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s2 -> s4 [65, 65] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s2 -> s1 [66, 65535] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s3 -> s3 [0, 65535] { R994 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R994 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R994 += 1, R944 += 1, R901 += 1, R902 += 1 };
  s5 -> s5 [0, 65535] { R994 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R996 += 1, R946 += 1 };
  s0 -> s0 [0, 65535] { R995 += 1, R996 += 1 };
  s0 -> s2 [0, 65535] { R996 += 1, R945 += 1, R946 += 1 };
  s0 -> s3 [65, 65] { R996 += 1, R946 += 1 };
  s0 -> s4 [65, 65] { R996 += 1, R946 += 1 };
  s0 -> s1 [66, 65535] { R996 += 1, R946 += 1 };
  s1 -> s1 [0, 64] { R996 += 1, R946 += 1 };
  s1 -> s1 [0, 65535] { R996 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R996 += 1, R946 += 1 };
  s1 -> s4 [65, 65] { R996 += 1, R946 += 1 };
  s1 -> s1 [66, 65535] { R996 += 1, R946 += 1 };
  s2 -> s1 [0, 64] { R996 += 1, R946 += 1 };
  s2 -> s2 [0, 65535] { R996 += 1, R945 += 1, R946 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R996 += 1, R946 += 1 };
  s2 -> s4 [65, 65] { R996 += 1, R946 += 1 };
  s2 -> s1 [66, 65535] { R996 += 1, R946 += 1 };
  s3 -> s3 [0, 65535] { R996 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R996 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R996 += 1, R946 += 1 };
  s5 -> s5 [0, 65535] { R996 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s0 -> s2 [0, 65535] { R998 += 1, R947 += 1, R948 += 1 };
  s0 -> s0 [0, 65535] { R997 += 1, R998 += 1 };
  s0 -> s3 [65, 65] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s0 -> s4 [65, 65] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s0 -> s1 [66, 65535] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s1 -> s1 [0, 64] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R998 += 1 };
  s1 -> s3 [65, 65] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s1 -> s4 [65, 65] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s1 -> s1 [66, 65535] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s2 -> s1 [0, 64] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s2 -> s2 [0, 65535] { R998 += 1, R947 += 1, R948 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s2 -> s4 [65, 65] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s2 -> s1 [66, 65535] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s3 -> s3 [0, 65535] { R998 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R998 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R998 += 1, R948 += 1, R907 += 1, R908 += 1 };
  s5 -> s5 [0, 65535] { R998 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1000 += 1, R950 += 1 };
  s0 -> s2 [0, 65535] { R1000 += 1, R949 += 1, R950 += 1 };
  s0 -> s0 [0, 65535] { R999 += 1, R1000 += 1 };
  s0 -> s3 [65, 65] { R1000 += 1, R950 += 1 };
  s0 -> s4 [65, 65] { R1000 += 1, R950 += 1 };
  s0 -> s1 [66, 65535] { R1000 += 1, R950 += 1 };
  s1 -> s1 [0, 64] { R1000 += 1, R950 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1000 += 1 };
  s1 -> s3 [65, 65] { R1000 += 1, R950 += 1 };
  s1 -> s4 [65, 65] { R1000 += 1, R950 += 1 };
  s1 -> s1 [66, 65535] { R1000 += 1, R950 += 1 };
  s2 -> s1 [0, 64] { R1000 += 1, R950 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1000 += 1, R949 += 1, R950 += 1 };
  s2 -> s3 [65, 65] { R1000 += 1, R950 += 1 };
  s2 -> s4 [65, 65] { R1000 += 1, R950 += 1 };
  s2 -> s1 [66, 65535] { R1000 += 1, R950 += 1 };
  s3 -> s6 [0, 65535] { R1000 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1000 += 1, R950 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1000 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1000 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R932 && R2 = R1000 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R913 = 0 && R914 = R932 && R915 = 0 && R916 = R932 && R917 = 0 && R918 = R932 && R919 = 0 && R920 = R932 && R921 = 0 && R922 = R932 && R923 = 0 && R924 = R932 && R925 = 0 && R926 = R932 && R927 = 0 && R928 = R932 && R929 = 0 && R930 = R932 && R931 = 0 && R941 = 0 && R942 = 0 && R951 = 10 && R952 = R1000 && R953 = 10 && R954 = R1000 && R955 = 10 && R956 = R1000 && R957 = 10 && R958 = R1000 && R959 = 10 && R960 = R1000 && R961 = 10 && R962 = R1000 && R963 = 10 && R964 = R1000 && R965 = 10 && R966 = R1000 && R967 = 10 && R968 = R1000 && R969 = 10 && R970 = R1000 && R971 = 10 && R972 = R1000 && R973 = 10 && R974 = R1000 && R975 = 10 && R976 = R1000 && R977 = 10 && R978 = R1000 && R979 = 10 && R980 = R1000 && R981 = 10 && R982 = R1000 && R983 = 10 && R984 = R1000 && R985 = 10 && R986 = R1000 && R987 = 10 && R988 = R1000 && R989 = 10 && R990 = R1000 && R991 = 10 && R992 = R1000 && R993 = 10 && R994 = R1000 && R995 = 10 && R996 = R1000 && R997 = 10 && R998 = R1000 && R999 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R932 && 9 < R1000 && (R14 = 0 || (R933 = 0 && R934 = 0)) && (R14 = 0 || (R935 = 0 && R936 = 0)) && (R14 = 0 || (R937 = 0 && R938 = 0)) && (R14 = 0 || (R939 = 0 && R940 = 0)) && (R14 = 0 || (R943 = 0 && R944 = 0)) && (R14 = 0 || (R945 = 0 && R946 = 0)) && (R14 = 0 || (R947 = 0 && R948 = 0)) && (R14 = 0 || (R949 = 0 && R950 = 0)) && (R906 + R903 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R906 + R903 = 0 || (R904 + R901 = 0 && R905 + R902 = 0)) && (R912 + R909 = 0 || (R910 + R907 = 0 && R911 + R908 = 0));
// End of Parikh automata intersection problem
