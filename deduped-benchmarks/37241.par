// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R3511, R3512, R3513, R3514, R3515, R3516, R3517, R3518, R3519, R3520, R3521, R3522, R3523, R3524, R3525, R3526, R3527, R3528, R3529, R3530, R3531, R3532, R3533, R3534, R3535, R3536, R3537, R3538, R3539, R3540, R3541, R3542, R3543, R3544, R3545, R3546, R3547, R3548, R3549, R3550, R3551, R3552, R3553, R3554, R3555, R3556, R3557, R3558, R3559, R3560, R3561, R3562, R3563, R3564, R3565, R3566, R3567, R3568, R3569, R3570, R3571, R3572, R3573, R3574, R3575, R3576, R3577, R3578, R3579, R3580, R3581, R3582, R3583, R3584, R3585, R3586, R3587, R3588, R3589, R3590, R3591, R3592, R3593, R3594, R3595, R3596, R3597, R3598, R3599, R3600, R3601, R3602, R3603, R3604, R3605, R3606, R3607, R3608, R3609, R3610, R3611, R3612, R3613, R3614, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3566 += 1 };
  s0 -> s0 [0, 65535] { R3565 += 1, R3566 += 1 };
  s0 -> s1 [45, 45] { R3566 += 1 };
  s0 -> s2 [46, 46] { R3566 += 1 };
  s0 -> s1 [48, 62] { R3566 += 1 };
  s0 -> s3 [65, 65] { R3566 += 1 };
  s0 -> s1 [66, 65535] { R3566 += 1 };
  s1 -> s1 [0, 43] { R3566 += 1 };
  s1 -> s1 [45, 45] { R3566 += 1 };
  s1 -> s2 [46, 46] { R3566 += 1 };
  s1 -> s1 [48, 62] { R3566 += 1 };
  s1 -> s3 [65, 65] { R3566 += 1 };
  s1 -> s1 [66, 65535] { R3566 += 1 };
  s2 -> s1 [0, 43] { R3566 += 1 };
  s2 -> s1 [45, 45] { R3566 += 1 };
  s2 -> s2 [46, 46] { R3566 += 1 };
  s2 -> s1 [48, 62] { R3566 += 1 };
  s2 -> s3 [65, 65] { R3566 += 1 };
  s2 -> s1 [66, 114] { R3566 += 1 };
  s2 -> s8 [115, 115] { R3566 += 1 };
  s2 -> s1 [116, 65535] { R3566 += 1 };
  s3 -> s3 [0, 43] { R3566 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3566 += 1 };
  s3 -> s4 [46, 46] { R3566 += 1 };
  s3 -> s3 [48, 62] { R3566 += 1 };
  s3 -> s3 [65, 65535] { R3566 += 1 };
  s4 -> s3 [0, 43] { R3566 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3566 += 1 };
  s4 -> s4 [46, 46] { R3566 += 1 };
  s4 -> s3 [48, 62] { R3566 += 1 };
  s4 -> s3 [65, 114] { R3566 += 1 };
  s4 -> s5 [115, 115] { R3566 += 1 };
  s4 -> s3 [116, 65535] { R3566 += 1 };
  s5 -> s3 [0, 43] { R3566 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3566 += 1 };
  s5 -> s4 [46, 46] { R3566 += 1 };
  s5 -> s3 [48, 62] { R3566 += 1 };
  s5 -> s3 [65, 110] { R3566 += 1 };
  s5 -> s6 [111, 111] { R3566 += 1 };
  s5 -> s3 [112, 65535] { R3566 += 1 };
  s6 -> s3 [0, 43] { R3566 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3566 += 1 };
  s6 -> s4 [46, 46] { R3566 += 1 };
  s6 -> s3 [48, 62] { R3566 += 1 };
  s6 -> s3 [65, 98] { R3566 += 1 };
  s6 -> s7 [99, 99] { R3566 += 1 };
  s6 -> s3 [100, 65535] { R3566 += 1 };
  s7 -> s3 [0, 43] { R3566 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3566 += 1 };
  s7 -> s4 [46, 46] { R3566 += 1 };
  s7 -> s3 [48, 62] { R3566 += 1 };
  s7 -> s3 [65, 106] { R3566 += 1 };
  s7 -> s3 [108, 65535] { R3566 += 1 };
  s8 -> s1 [0, 43] { R3566 += 1 };
  s8 -> s1 [45, 45] { R3566 += 1 };
  s8 -> s2 [46, 46] { R3566 += 1 };
  s8 -> s1 [48, 62] { R3566 += 1 };
  s8 -> s3 [65, 65] { R3566 += 1 };
  s8 -> s1 [66, 110] { R3566 += 1 };
  s8 -> s9 [111, 111] { R3566 += 1 };
  s8 -> s1 [112, 65535] { R3566 += 1 };
  s9 -> s1 [0, 43] { R3566 += 1 };
  s9 -> s1 [45, 45] { R3566 += 1 };
  s9 -> s2 [46, 46] { R3566 += 1 };
  s9 -> s1 [48, 62] { R3566 += 1 };
  s9 -> s3 [65, 65] { R3566 += 1 };
  s9 -> s1 [66, 98] { R3566 += 1 };
  s9 -> s10 [99, 99] { R3566 += 1 };
  s9 -> s1 [100, 65535] { R3566 += 1 };
  s10 -> s1 [0, 43] { R3566 += 1 };
  s10 -> s1 [45, 45] { R3566 += 1 };
  s10 -> s2 [46, 46] { R3566 += 1 };
  s10 -> s1 [48, 62] { R3566 += 1 };
  s10 -> s3 [65, 65] { R3566 += 1 };
  s10 -> s1 [66, 106] { R3566 += 1 };
  s10 -> s1 [108, 65535] { R3566 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3568 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3567 += 1, R3568 += 1 };
  s1 -> s1 [0, 65535] { R3568 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3570 += 1 };
  s0 -> s0 [0, 65535] { R3569 += 1, R3570 += 1 };
  s0 -> s2 [0, 65535] { R3570 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R3570 += 1 };
  s0 -> s1 [59, 65535] { R3570 += 1 };
  s1 -> s1 [0, 57] { R3570 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3570 += 1 };
  s1 -> s1 [59, 65535] { R3570 += 1 };
  s2 -> s1 [0, 57] { R3570 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3570 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3570 += 1 };
  s2 -> s1 [59, 65535] { R3570 += 1 };
  s3 -> s3 [0, 65535] { R3570 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3572 += 1 };
  s0 -> s2 [0, 65535] { R3572 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3571 += 1, R3572 += 1 };
  s0 -> s3 [65, 65] { R3572 += 1 };
  s0 -> s1 [66, 65535] { R3572 += 1 };
  s1 -> s1 [0, 64] { R3572 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3572 += 1 };
  s1 -> s1 [66, 65535] { R3572 += 1 };
  s2 -> s1 [0, 64] { R3572 += 1 };
  s2 -> s2 [0, 65535] { R3572 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3572 += 1 };
  s2 -> s1 [66, 65535] { R3572 += 1 };
  s3 -> s3 [0, 65535] { R3572 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3574 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3573 += 1, R3574 += 1 };
  s0 -> s2 [0, 65535] { R3574 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R3574 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3574 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R3574 += 1 };
  s1 -> s1 [0, 65535] { R3574 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3574 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3574 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3574 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3574 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3574 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3574 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3576 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R3576 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3575 += 1, R3576 += 1 };
  s1 -> s1 [0, 65535] { R3576 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3576 += 1 };
  s2 -> s1 [0, 65535] { R3576 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R3576 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3576 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3578 += 1, R3528 += 1 };
  s0 -> s2 [0, 65535] { R3578 += 1, R3527 += 1, R3528 += 1 };
  s0 -> s0 [0, 65535] { R3577 += 1, R3578 += 1 };
  s0 -> s1 [66, 65535] { R3578 += 1, R3528 += 1 };
  s1 -> s1 [0, 64] { R3578 += 1, R3528 += 1 };
  s1 -> s1 [0, 65535] { R3578 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3578 += 1, R3528 += 1 };
  s2 -> s1 [0, 64] { R3578 += 1, R3528 += 1 };
  s2 -> s2 [0, 65535] { R3578 += 1, R3527 += 1, R3528 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3578 += 1, R3528 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3580 += 1, R3529 += 1, R3530 += 1 };
  s0 -> s0 [0, 65535] { R3579 += 1, R3580 += 1 };
  s0 -> s2 [0, 65535] { R3580 += 1, R3530 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R3580 += 1, R3529 += 1, R3530 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3580 += 1, R3530 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R3580 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3580 += 1, R3530 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R3580 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3582 += 1, R3532 += 1 };
  s0 -> s2 [0, 65535] { R3582 += 1, R3531 += 1, R3532 += 1 };
  s0 -> s0 [0, 65535] { R3581 += 1, R3582 += 1 };
  s0 -> s1 [87, 65535] { R3582 += 1, R3532 += 1 };
  s1 -> s1 [0, 65] { R3582 += 1, R3532 += 1 };
  s1 -> s1 [0, 65535] { R3582 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R3582 += 1, R3532 += 1 };
  s2 -> s1 [0, 65] { R3582 += 1, R3532 += 1 };
  s2 -> s2 [0, 65535] { R3582 += 1, R3531 += 1, R3532 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R3582 += 1, R3532 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3584 += 1, R3534 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R3584 += 1, R3533 += 1, R3534 += 1 };
  s0 -> s0 [0, 65535] { R3583 += 1, R3584 += 1 };
  s1 -> s1 [0, 65535] { R3584 += 1, R3534 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R3584 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3584 += 1, R3534 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R3584 += 1, R3533 += 1, R3534 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3584 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R3586 += 1, R3536 += 1 };
  s0 -> s2 [0, 65535] { R3586 += 1, R3535 += 1, R3536 += 1 };
  s0 -> s0 [0, 65535] { R3585 += 1, R3586 += 1 };
  s0 -> s1 [88, 65535] { R3586 += 1, R3536 += 1 };
  s1 -> s1 [0, 86] { R3586 += 1, R3536 += 1 };
  s1 -> s1 [0, 65535] { R3586 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R3586 += 1, R3536 += 1 };
  s2 -> s1 [0, 86] { R3586 += 1, R3536 += 1 };
  s2 -> s2 [0, 65535] { R3586 += 1, R3535 += 1, R3536 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R3586 += 1, R3536 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s0 -> s2 [0, 65535] { R3588 += 1, R3538 += 1, R3513 += 1, R3514 += 1 };
  s0 -> s3 [0, 65535] { R3588 += 1, R3537 += 1, R3538 += 1 };
  s0 -> s0 [0, 65535] { R3587 += 1, R3588 += 1 };
  s0 -> s1 [88, 65535] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s1 -> s1 [0, 86] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3588 += 1 };
  s1 -> s1 [0, 65535] { R3588 += 1, R3538 += 1 };
  s1 -> s1 [88, 65535] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s2 -> s1 [0, 86] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s2 -> s2 [0, 65535] { R3588 += 1, R3538 += 1, R3513 += 1, R3514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3588 += 1 };
  s2 -> s1 [88, 65535] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s3 -> s1 [0, 86] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s3 -> s2 [0, 65535] { R3588 += 1, R3538 += 1, R3513 += 1, R3514 += 1 };
  s3 -> s3 [0, 65535] { R3588 += 1, R3537 += 1, R3538 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R3588 += 1, R3538 += 1, R3514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3588 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3590 += 1, R3540 += 1, R3519 += 1, R3520 += 1 };
  s0 -> s2 [0, 65535] { R3590 += 1, R3540 += 1, R3518 += 1, R3519 += 1 };
  s0 -> s3 [0, 65535] { R3590 += 1, R3539 += 1, R3540 += 1 };
  s0 -> s0 [0, 65535] { R3589 += 1, R3590 += 1 };
  s1 -> s1 [0, 65535] { R3590 += 1, R3540 += 1, R3519 += 1, R3520 += 1 };
  s1 -> s6 [0, 65535] { R3590 += 1, R3540 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3590 += 1 };
  s2 -> s1 [0, 65535] { R3590 += 1, R3540 += 1, R3519 += 1, R3520 += 1 };
  s2 -> s2 [0, 65535] { R3590 += 1, R3540 += 1, R3518 += 1, R3519 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3590 += 1 };
  s3 -> s1 [0, 65535] { R3590 += 1, R3540 += 1, R3519 += 1, R3520 += 1 };
  s3 -> s2 [0, 65535] { R3590 += 1, R3540 += 1, R3518 += 1, R3519 += 1 };
  s3 -> s3 [0, 65535] { R3590 += 1, R3539 += 1, R3540 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3590 += 1 };
  s6 -> s6 [0, 65535] { R3590 += 1, R3540 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3590 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3592 += 1, R3541 += 1, R3542 += 1 };
  s0 -> s0 [0, 65535] { R3591 += 1, R3592 += 1 };
  s0 -> s2 [0, 65535] { R3592 += 1, R3542 += 1 };
  s1 -> s1 [0, 65535] { R3592 += 1, R3541 += 1, R3542 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3592 += 1, R3542 += 1 };
  s2 -> s3 [0, 65535] { R3592 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3592 += 1, R3542 += 1 };
  s3 -> s3 [0, 65535] { R3592 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3594 += 1, R3544 += 1, R3525 += 1, R3526 += 1 };
  s0 -> s2 [0, 65535] { R3594 += 1, R3543 += 1, R3544 += 1 };
  s0 -> s0 [0, 65535] { R3593 += 1, R3594 += 1 };
  s0 -> s3 [0, 65535] { R3594 += 1, R3544 += 1, R3524 += 1, R3525 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3594 += 1, R3544 += 1, R3525 += 1, R3526 += 1 };
  s1 -> s5 [0, 65535] { R3594 += 1 };
  s1 -> s6 [0, 65535] { R3594 += 1, R3544 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R3594 += 1, R3544 += 1, R3525 += 1, R3526 += 1 };
  s2 -> s2 [0, 65535] { R3594 += 1, R3543 += 1, R3544 += 1 };
  s2 -> s3 [0, 65535] { R3594 += 1, R3544 += 1, R3524 += 1, R3525 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R3594 += 1, R3544 += 1, R3525 += 1, R3526 += 1 };
  s3 -> s5 [0, 65535] { R3594 += 1 };
  s3 -> s3 [0, 65535] { R3594 += 1, R3544 += 1, R3524 += 1, R3525 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3594 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3594 += 1 };
  s6 -> s6 [0, 65535] { R3594 += 1, R3544 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3596 += 1, R3545 += 1, R3546 += 1 };
  s0 -> s2 [0, 65535] { R3596 += 1, R3546 += 1 };
  s0 -> s0 [0, 65535] { R3595 += 1, R3596 += 1 };
  s1 -> s1 [0, 65535] { R3596 += 1, R3545 += 1, R3546 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3596 += 1, R3546 += 1 };
  s2 -> s3 [0, 65535] { R3596 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3596 += 1, R3546 += 1 };
  s3 -> s3 [0, 65535] { R3596 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3598 += 1, R3548 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3597 += 1, R3598 += 1 };
  s0 -> s2 [0, 65535] { R3598 += 1, R3547 += 1, R3548 += 1 };
  s1 -> s1 [0, 65535] { R3598 += 1, R3548 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3598 += 1 };
  s2 -> s1 [0, 65535] { R3598 += 1, R3548 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3598 += 1, R3547 += 1, R3548 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3598 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3600 += 1, R3550 += 1 };
  s0 -> s0 [0, 65535] { R3599 += 1, R3600 += 1 };
  s0 -> s2 [0, 65535] { R3600 += 1, R3549 += 1, R3550 += 1 };
  s0 -> s3 [65, 65] { R3600 += 1, R3550 += 1 };
  s0 -> s4 [65, 65] { R3600 += 1, R3550 += 1 };
  s0 -> s5 [87, 87] { R3600 += 1, R3550 += 1 };
  s0 -> s1 [88, 65535] { R3600 += 1, R3550 += 1 };
  s1 -> s1 [0, 64] { R3600 += 1, R3550 += 1 };
  s1 -> s3 [65, 65] { R3600 += 1, R3550 += 1 };
  s1 -> s4 [65, 65] { R3600 += 1, R3550 += 1 };
  s1 -> s5 [87, 87] { R3600 += 1, R3550 += 1 };
  s1 -> s1 [88, 65535] { R3600 += 1, R3550 += 1 };
  s2 -> s1 [0, 64] { R3600 += 1, R3550 += 1 };
  s2 -> s2 [0, 65535] { R3600 += 1, R3549 += 1, R3550 += 1 };
  s2 -> s3 [65, 65] { R3600 += 1, R3550 += 1 };
  s2 -> s4 [65, 65] { R3600 += 1, R3550 += 1 };
  s2 -> s5 [87, 87] { R3600 += 1, R3550 += 1 };
  s2 -> s1 [88, 65535] { R3600 += 1, R3550 += 1 };
  s4 -> s4 [0, 65] { R3600 += 1, R3550 += 1 };
  s4 -> s7 [87, 87] { R3600 += 1, R3550 += 1 };
  s4 -> s4 [88, 65535] { R3600 += 1, R3550 += 1 };
  s5 -> s5 [0, 64] { R3600 += 1, R3550 += 1 };
  s5 -> s5 [0, 65535] { R3600 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3600 += 1, R3550 += 1 };
  s5 -> s8 [65, 65] { R3600 += 1, R3550 += 1 };
  s5 -> s5 [87, 65535] { R3600 += 1, R3550 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3600 += 1, R3550 += 1 };
  s7 -> s7 [0, 65535] { R3600 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R3600 += 1, R3550 += 1 };
  s8 -> s8 [0, 65535] { R3600 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3601 += 1, R3602 += 1 };
  s0 -> s2 [0, 65535] { R3602 += 1, R3551 += 1, R3552 += 1 };
  s0 -> s3 [65, 65] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3602 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3602 += 1, R3551 += 1, R3552 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3602 += 1, R3552 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R3602 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3602 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3602 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s0 -> s2 [0, 64] { R3604 += 1, R3554 += 1 };
  s0 -> s3 [0, 65535] { R3604 += 1, R3553 += 1, R3554 += 1 };
  s0 -> s0 [0, 65535] { R3603 += 1, R3604 += 1 };
  s0 -> s4 [65, 65] { R3604 += 1, R3554 += 1 };
  s0 -> s5 [65, 65] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s0 -> s6 [65, 65] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s0 -> s7 [65, 65] { R3604 += 1, R3554 += 1 };
  s0 -> s2 [66, 86] { R3604 += 1, R3554 += 1 };
  s0 -> s1 [66, 65535] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s0 -> s2 [88, 65535] { R3604 += 1, R3554 += 1 };
  s1 -> s1 [0, 64] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s1 -> s2 [0, 64] { R3604 += 1, R3554 += 1 };
  s1 -> s4 [65, 65] { R3604 += 1, R3554 += 1 };
  s1 -> s5 [65, 65] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s1 -> s6 [65, 65] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s1 -> s7 [65, 65] { R3604 += 1, R3554 += 1 };
  s1 -> s2 [66, 86] { R3604 += 1, R3554 += 1 };
  s1 -> s1 [66, 65535] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s1 -> s2 [88, 65535] { R3604 += 1, R3554 += 1 };
  s2 -> s2 [0, 64] { R3604 += 1, R3554 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3604 += 1 };
  s2 -> s4 [65, 65] { R3604 += 1, R3554 += 1 };
  s2 -> s7 [65, 65] { R3604 += 1, R3554 += 1 };
  s2 -> s2 [66, 86] { R3604 += 1, R3554 += 1 };
  s2 -> s2 [88, 65535] { R3604 += 1, R3554 += 1 };
  s3 -> s1 [0, 64] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s3 -> s2 [0, 64] { R3604 += 1, R3554 += 1 };
  s3 -> s3 [0, 65535] { R3604 += 1, R3553 += 1, R3554 += 1 };
  s3 -> s4 [65, 65] { R3604 += 1, R3554 += 1 };
  s3 -> s5 [65, 65] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s3 -> s6 [65, 65] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s3 -> s7 [65, 65] { R3604 += 1, R3554 += 1 };
  s3 -> s2 [66, 86] { R3604 += 1, R3554 += 1 };
  s3 -> s1 [66, 65535] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s3 -> s2 [88, 65535] { R3604 += 1, R3554 += 1 };
  s4 -> s4 [0, 65535] { R3604 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s7 [0, 86] { R3604 += 1, R3554 += 1 };
  s6 -> s6 [0, 65535] { R3604 += 1, R3554 += 1, R3509 += 1 };
  s6 -> s7 [88, 65535] { R3604 += 1, R3554 += 1 };
  s7 -> s7 [0, 86] { R3604 += 1, R3554 += 1 };
  s7 -> s7 [0, 65535] { R3604 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [88, 65535] { R3604 += 1, R3554 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s7, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s0 [0, 65535] { R3605 += 1, R3606 += 1 };
  s0 -> s2 [0, 65535] { R3606 += 1, R3555 += 1, R3556 += 1 };
  s0 -> s3 [65, 65] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s4 [65, 65] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s0 -> s1 [66, 65535] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [0, 64] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3606 += 1 };
  s1 -> s3 [65, 65] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s4 [65, 65] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s1 -> s1 [66, 65535] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [0, 64] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s2 [0, 65535] { R3606 += 1, R3555 += 1, R3556 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s4 [65, 65] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s2 -> s1 [66, 65535] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s3 -> s3 [0, 65535] { R3606 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3606 += 1, R3556 += 1, R3511 += 1, R3512 += 1 };
  s4 -> s5 [0, 65535] { R3606 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3606 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s2 [0, 65535] { R3608 += 1, R3557 += 1, R3558 += 1 };
  s0 -> s0 [0, 65535] { R3607 += 1, R3608 += 1 };
  s0 -> s3 [65, 65] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s4 [65, 65] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s0 -> s1 [66, 65535] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [0, 64] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3608 += 1 };
  s1 -> s3 [65, 65] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s4 [65, 65] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s1 -> s1 [66, 65535] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s1 [0, 64] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3608 += 1, R3557 += 1, R3558 += 1 };
  s2 -> s3 [65, 65] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s4 [65, 65] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s2 -> s1 [66, 65535] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s3 -> s3 [0, 65535] { R3608 += 1, R3558 += 1, R3515 += 1, R3516 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3608 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3608 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3608 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3610 += 1, R3560 += 1 };
  s0 -> s0 [0, 65535] { R3609 += 1, R3610 += 1 };
  s0 -> s2 [0, 65535] { R3610 += 1, R3559 += 1, R3560 += 1 };
  s0 -> s3 [65, 65] { R3610 += 1, R3560 += 1 };
  s0 -> s4 [65, 65] { R3610 += 1, R3560 += 1 };
  s0 -> s1 [66, 65535] { R3610 += 1, R3560 += 1 };
  s1 -> s1 [0, 64] { R3610 += 1, R3560 += 1 };
  s1 -> s1 [0, 65535] { R3610 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3610 += 1, R3560 += 1 };
  s1 -> s4 [65, 65] { R3610 += 1, R3560 += 1 };
  s1 -> s1 [66, 65535] { R3610 += 1, R3560 += 1 };
  s2 -> s1 [0, 64] { R3610 += 1, R3560 += 1 };
  s2 -> s2 [0, 65535] { R3610 += 1, R3559 += 1, R3560 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3610 += 1, R3560 += 1 };
  s2 -> s4 [65, 65] { R3610 += 1, R3560 += 1 };
  s2 -> s1 [66, 65535] { R3610 += 1, R3560 += 1 };
  s3 -> s6 [0, 65535] { R3610 += 1 };
  s3 -> s3 [0, 65535] { R3610 += 1, R3560 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3610 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3610 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s0 -> s2 [0, 65535] { R3612 += 1, R3561 += 1, R3562 += 1 };
  s0 -> s0 [0, 65535] { R3611 += 1, R3612 += 1 };
  s0 -> s3 [65, 65] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s0 -> s4 [65, 65] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s0 -> s1 [66, 65535] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s1 -> s1 [0, 64] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s1 -> s1 [0, 65535] { R3612 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s1 -> s4 [65, 65] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s1 -> s1 [66, 65535] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s2 -> s1 [0, 64] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s2 -> s2 [0, 65535] { R3612 += 1, R3561 += 1, R3562 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s2 -> s4 [65, 65] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s2 -> s1 [66, 65535] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s3 -> s3 [0, 65535] { R3612 += 1, R3562 += 1, R3521 += 1, R3522 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3612 += 1 };
  s4 -> s4 [0, 65535] { R3612 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3612 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3614 += 1, R3564 += 1 };
  s0 -> s0 [0, 65535] { R3613 += 1, R3614 += 1 };
  s0 -> s2 [0, 65535] { R3614 += 1, R3563 += 1, R3564 += 1 };
  s0 -> s3 [65, 65] { R3614 += 1, R3564 += 1 };
  s0 -> s4 [65, 65] { R3614 += 1, R3564 += 1 };
  s0 -> s1 [66, 65535] { R3614 += 1, R3564 += 1 };
  s1 -> s1 [0, 64] { R3614 += 1, R3564 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3614 += 1 };
  s1 -> s3 [65, 65] { R3614 += 1, R3564 += 1 };
  s1 -> s4 [65, 65] { R3614 += 1, R3564 += 1 };
  s1 -> s1 [66, 65535] { R3614 += 1, R3564 += 1 };
  s2 -> s1 [0, 64] { R3614 += 1, R3564 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R3614 += 1, R3563 += 1, R3564 += 1 };
  s2 -> s3 [65, 65] { R3614 += 1, R3564 += 1 };
  s2 -> s4 [65, 65] { R3614 += 1, R3564 += 1 };
  s2 -> s1 [66, 65535] { R3614 += 1, R3564 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R3614 += 1 };
  s4 -> s5 [0, 65535] { R3614 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3614 += 1, R3564 += 1 };
  s5 -> s5 [0, 65535] { R3614 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3546 && R2 = R3614 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3527 = 0 && R3528 = R3546 && R3529 = 0 && R3530 = R3546 && R3531 = 0 && R3532 = R3546 && R3533 = 0 && R3534 = R3546 && R3535 = 0 && R3536 = R3546 && R3537 = 0 && R3538 = R3546 && R3539 = 0 && R3540 = R3546 && R3541 = 0 && R3542 = R3546 && R3543 = 0 && R3544 = R3546 && R3545 = 0 && R3549 = 0 && R3550 = 0 && R3553 = 0 && R3554 = 0 && R3565 = 10 && R3566 = R3614 && R3567 = 10 && R3568 = R3614 && R3569 = 10 && R3570 = R3614 && R3571 = 10 && R3572 = R3614 && R3573 = 10 && R3574 = R3614 && R3575 = 10 && R3576 = R3614 && R3577 = 10 && R3578 = R3614 && R3579 = 10 && R3580 = R3614 && R3581 = 10 && R3582 = R3614 && R3583 = 10 && R3584 = R3614 && R3585 = 10 && R3586 = R3614 && R3587 = 10 && R3588 = R3614 && R3589 = 10 && R3590 = R3614 && R3591 = 10 && R3592 = R3614 && R3593 = 10 && R3594 = R3614 && R3595 = 10 && R3596 = R3614 && R3597 = 10 && R3598 = R3614 && R3599 = 10 && R3600 = R3614 && R3601 = 10 && R3602 = R3614 && R3603 = 10 && R3604 = R3614 && R3605 = 10 && R3606 = R3614 && R3607 = 10 && R3608 = R3614 && R3609 = 10 && R3610 = R3614 && R3611 = 10 && R3612 = R3614 && R3613 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R3546 && 9 < R3614 && (R14 = 0 || (R3547 = 0 && R3548 = 0)) && (R14 = 0 || (R3551 = 0 && R3552 = 0)) && (R14 = 0 || (R3555 = 0 && R3556 = 0)) && (R14 = 0 || (R3557 = 0 && R3558 = 0)) && (R14 = 0 || (R3559 = 0 && R3560 = 0)) && (R14 = 0 || (R3561 = 0 && R3562 = 0)) && (R14 = 0 || (R3563 = 0 && R3564 = 0)) && (R3520 + R3517 = 0 || (R3513 + R3511 = 0 && R3514 + R3512 = 0)) && (R3520 + R3517 = 0 || (R3518 + R3515 = 0 && R3519 + R3516 = 0)) && (R3526 + R3523 = 0 || (R3524 + R3521 = 0 && R3525 + R3522 = 0));
// End of Parikh automata intersection problem
