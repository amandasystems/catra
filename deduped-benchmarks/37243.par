// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R18, R2, R2065, R2066, R2067, R2068, R2069, R2070, R2259, R2260, R2261, R2262, R2263, R2264, R2265, R2266, R2267, R2268, R2269, R2270, R2271, R2272, R2273, R2274, R2275, R2276, R2277, R2278, R2279, R2280, R2281, R2282, R2283, R2284, R2285, R2286, R2287, R2288, R2289, R2290, R2291, R2292, R2293, R2294, R2295, R2296, R2297, R2298, R2299, R2300, R2301, R2302, R2303, R2304, R2305, R2306, R2307, R2308, R2309, R2310, R2311, R2312, R2313, R2314, R2315, R2316, R2317, R2318, R2319, R2320, R2321, R2322, R2323, R2324, R2325, R2326, R2327, R2328, R2329, R2330, R2331, R2332, R2333, R2334, R2335, R2336, R2337, R2338, R2339, R2340, R2341, R2342, R2343, R2344, R2345, R2346, R2347, R2348, R2349, R2350, R2351, R2352, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2304 += 1 };
  s0 -> s0 [0, 65535] { R2303 += 1, R2304 += 1 };
  s0 -> s1 [45, 45] { R2304 += 1 };
  s0 -> s2 [46, 46] { R2304 += 1 };
  s0 -> s1 [48, 62] { R2304 += 1 };
  s0 -> s3 [65, 65] { R2304 += 1 };
  s0 -> s1 [66, 65535] { R2304 += 1 };
  s1 -> s1 [0, 43] { R2304 += 1 };
  s1 -> s1 [45, 45] { R2304 += 1 };
  s1 -> s2 [46, 46] { R2304 += 1 };
  s1 -> s1 [48, 62] { R2304 += 1 };
  s1 -> s3 [65, 65] { R2304 += 1 };
  s1 -> s1 [66, 65535] { R2304 += 1 };
  s2 -> s1 [0, 43] { R2304 += 1 };
  s2 -> s1 [45, 45] { R2304 += 1 };
  s2 -> s2 [46, 46] { R2304 += 1 };
  s2 -> s1 [48, 62] { R2304 += 1 };
  s2 -> s3 [65, 65] { R2304 += 1 };
  s2 -> s1 [66, 114] { R2304 += 1 };
  s2 -> s8 [115, 115] { R2304 += 1 };
  s2 -> s1 [116, 65535] { R2304 += 1 };
  s3 -> s3 [0, 43] { R2304 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2304 += 1 };
  s3 -> s4 [46, 46] { R2304 += 1 };
  s3 -> s3 [48, 62] { R2304 += 1 };
  s3 -> s3 [65, 65535] { R2304 += 1 };
  s4 -> s3 [0, 43] { R2304 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2304 += 1 };
  s4 -> s4 [46, 46] { R2304 += 1 };
  s4 -> s3 [48, 62] { R2304 += 1 };
  s4 -> s3 [65, 114] { R2304 += 1 };
  s4 -> s5 [115, 115] { R2304 += 1 };
  s4 -> s3 [116, 65535] { R2304 += 1 };
  s5 -> s3 [0, 43] { R2304 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2304 += 1 };
  s5 -> s4 [46, 46] { R2304 += 1 };
  s5 -> s3 [48, 62] { R2304 += 1 };
  s5 -> s3 [65, 110] { R2304 += 1 };
  s5 -> s6 [111, 111] { R2304 += 1 };
  s5 -> s3 [112, 65535] { R2304 += 1 };
  s6 -> s3 [0, 43] { R2304 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2304 += 1 };
  s6 -> s4 [46, 46] { R2304 += 1 };
  s6 -> s3 [48, 62] { R2304 += 1 };
  s6 -> s3 [65, 98] { R2304 += 1 };
  s6 -> s7 [99, 99] { R2304 += 1 };
  s6 -> s3 [100, 65535] { R2304 += 1 };
  s7 -> s3 [0, 43] { R2304 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2304 += 1 };
  s7 -> s4 [46, 46] { R2304 += 1 };
  s7 -> s3 [48, 62] { R2304 += 1 };
  s7 -> s3 [65, 106] { R2304 += 1 };
  s7 -> s3 [108, 65535] { R2304 += 1 };
  s8 -> s1 [0, 43] { R2304 += 1 };
  s8 -> s1 [45, 45] { R2304 += 1 };
  s8 -> s2 [46, 46] { R2304 += 1 };
  s8 -> s1 [48, 62] { R2304 += 1 };
  s8 -> s3 [65, 65] { R2304 += 1 };
  s8 -> s1 [66, 110] { R2304 += 1 };
  s8 -> s9 [111, 111] { R2304 += 1 };
  s8 -> s1 [112, 65535] { R2304 += 1 };
  s9 -> s1 [0, 43] { R2304 += 1 };
  s9 -> s1 [45, 45] { R2304 += 1 };
  s9 -> s2 [46, 46] { R2304 += 1 };
  s9 -> s1 [48, 62] { R2304 += 1 };
  s9 -> s3 [65, 65] { R2304 += 1 };
  s9 -> s1 [66, 98] { R2304 += 1 };
  s9 -> s10 [99, 99] { R2304 += 1 };
  s9 -> s1 [100, 65535] { R2304 += 1 };
  s10 -> s1 [0, 43] { R2304 += 1 };
  s10 -> s1 [45, 45] { R2304 += 1 };
  s10 -> s2 [46, 46] { R2304 += 1 };
  s10 -> s1 [48, 62] { R2304 += 1 };
  s10 -> s3 [65, 65] { R2304 += 1 };
  s10 -> s1 [66, 106] { R2304 += 1 };
  s10 -> s1 [108, 65535] { R2304 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R2305 += 1, R2306 += 1 };
  s0 -> s1 [0, 65535] { R2306 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2306 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2308 += 1 };
  s0 -> s2 [0, 65535] { R2308 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2307 += 1, R2308 += 1 };
  s0 -> s3 [58, 58] { R2308 += 1 };
  s0 -> s1 [59, 65535] { R2308 += 1 };
  s1 -> s1 [0, 57] { R2308 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2308 += 1 };
  s1 -> s1 [59, 65535] { R2308 += 1 };
  s2 -> s1 [0, 57] { R2308 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2308 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2308 += 1 };
  s2 -> s1 [59, 65535] { R2308 += 1 };
  s3 -> s3 [0, 65535] { R2308 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2310 += 1 };
  s0 -> s0 [0, 65535] { R2309 += 1, R2310 += 1 };
  s0 -> s2 [0, 65535] { R2310 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R2310 += 1 };
  s0 -> s1 [66, 65535] { R2310 += 1 };
  s1 -> s1 [0, 64] { R2310 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2310 += 1 };
  s1 -> s1 [66, 65535] { R2310 += 1 };
  s2 -> s1 [0, 64] { R2310 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2310 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2310 += 1 };
  s2 -> s1 [66, 65535] { R2310 += 1 };
  s3 -> s3 [0, 65535] { R2310 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2312 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R2312 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2311 += 1, R2312 += 1 };
  s0 -> s3 [91, 91] { R2312 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2312 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2312 += 1 };
  s1 -> s1 [0, 65535] { R2312 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R2312 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2312 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R2312 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2312 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2312 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2312 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2314 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R2314 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R2313 += 1, R2314 += 1 };
  s1 -> s1 [0, 65535] { R2314 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2314 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2314 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R2314 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2314 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2316 += 1, R2266 += 1 };
  s0 -> s0 [0, 65535] { R2315 += 1, R2316 += 1 };
  s0 -> s2 [0, 65535] { R2316 += 1, R2265 += 1, R2266 += 1 };
  s0 -> s1 [66, 65535] { R2316 += 1, R2266 += 1 };
  s1 -> s1 [0, 64] { R2316 += 1, R2266 += 1 };
  s1 -> s1 [0, 65535] { R2316 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2316 += 1, R2266 += 1 };
  s2 -> s1 [0, 64] { R2316 += 1, R2266 += 1 };
  s2 -> s2 [0, 65535] { R2316 += 1, R2265 += 1, R2266 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2316 += 1, R2266 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2317 += 1, R2318 += 1 };
  s0 -> s1 [0, 65535] { R2318 += 1, R2268 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2318 += 1, R2267 += 1, R2268 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2318 += 1, R2268 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R2318 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2318 += 1, R2268 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2318 += 1, R2267 += 1, R2268 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2318 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2320 += 1, R2270 += 1 };
  s0 -> s0 [0, 65535] { R2319 += 1, R2320 += 1 };
  s0 -> s2 [0, 65535] { R2320 += 1, R2269 += 1, R2270 += 1 };
  s0 -> s1 [87, 65535] { R2320 += 1, R2270 += 1 };
  s1 -> s1 [0, 65] { R2320 += 1, R2270 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2320 += 1 };
  s1 -> s1 [87, 65535] { R2320 += 1, R2270 += 1 };
  s2 -> s1 [0, 65] { R2320 += 1, R2270 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2320 += 1, R2269 += 1, R2270 += 1 };
  s2 -> s1 [87, 65535] { R2320 += 1, R2270 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2322 += 1, R2272 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2321 += 1, R2322 += 1 };
  s0 -> s2 [0, 65535] { R2322 += 1, R2271 += 1, R2272 += 1 };
  s1 -> s1 [0, 65535] { R2322 += 1, R2272 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2322 += 1 };
  s2 -> s1 [0, 65535] { R2322 += 1, R2272 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2322 += 1, R2271 += 1, R2272 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2322 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R2324 += 1, R2274 += 1 };
  s0 -> s2 [0, 65535] { R2324 += 1, R2274 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R2323 += 1, R2324 += 1 };
  s0 -> s3 [0, 65535] { R2324 += 1, R2273 += 1, R2274 += 1 };
  s0 -> s1 [88, 65535] { R2324 += 1, R2274 += 1 };
  s1 -> s1 [0, 86] { R2324 += 1, R2274 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2324 += 1 };
  s1 -> s1 [88, 65535] { R2324 += 1, R2274 += 1 };
  s2 -> s1 [0, 86] { R2324 += 1, R2274 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2324 += 1, R2274 += 1, R1772 += 1 };
  s2 -> s5 [0, 65535] { R2324 += 1 };
  s2 -> s1 [88, 65535] { R2324 += 1, R2274 += 1 };
  s3 -> s1 [0, 86] { R2324 += 1, R2274 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2324 += 1, R2274 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R2324 += 1, R2273 += 1, R2274 += 1 };
  s3 -> s1 [88, 65535] { R2324 += 1, R2274 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2324 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s0 -> s0 [0, 65535] { R2325 += 1, R2326 += 1 };
  s0 -> s2 [0, 65535] { R2326 += 1, R2276 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s3 [0, 65535] { R2326 += 1, R2275 += 1, R2276 += 1 };
  s0 -> s1 [88, 65535] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s1 -> s1 [0, 86] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2326 += 1, R2276 += 1 };
  s1 -> s5 [0, 65535] { R2326 += 1 };
  s1 -> s1 [88, 65535] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s2 -> s1 [0, 86] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2326 += 1, R2276 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s5 [0, 65535] { R2326 += 1 };
  s2 -> s1 [88, 65535] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s3 -> s1 [0, 86] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2326 += 1, R2276 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s3 [0, 65535] { R2326 += 1, R2275 += 1, R2276 += 1 };
  s3 -> s1 [88, 65535] { R2326 += 1, R2276 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2326 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2328 += 1, R2278 += 1 };
  s0 -> s2 [0, 65535] { R2328 += 1, R2277 += 1, R2278 += 1 };
  s0 -> s3 [0, 65535] { R2328 += 1, R2278 += 1, R2069 += 1, R2070 += 1 };
  s0 -> s0 [0, 65535] { R2327 += 1, R2328 += 1 };
  s1 -> s1 [0, 65535] { R2328 += 1, R2278 += 1 };
  s1 -> s4 [0, 65535] { R2328 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R2328 += 1, R2278 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2328 += 1, R2277 += 1, R2278 += 1 };
  s2 -> s3 [0, 65535] { R2328 += 1, R2278 += 1, R2069 += 1, R2070 += 1 };
  s3 -> s1 [0, 65535] { R2328 += 1, R2278 += 1 };
  s3 -> s4 [0, 65535] { R2328 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2328 += 1, R2278 += 1, R2069 += 1, R2070 += 1 };
  s4 -> s4 [0, 65535] { R2328 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2329 += 1, R2330 += 1 };
  s0 -> s1 [0, 65535] { R2330 += 1, R2280 += 1 };
  s0 -> s2 [0, 65535] { R2330 += 1, R2279 += 1, R2280 += 1 };
  s1 -> s4 [0, 65535] { R2330 += 1 };
  s1 -> s1 [0, 65535] { R2330 += 1, R2280 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2330 += 1, R2280 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2330 += 1, R2279 += 1, R2280 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2330 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2332 += 1, R2281 += 1, R2282 += 1 };
  s0 -> s2 [0, 65535] { R2332 += 1, R2282 += 1 };
  s0 -> s0 [0, 65535] { R2331 += 1, R2332 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2332 += 1, R2281 += 1, R2282 += 1 };
  s1 -> s2 [0, 65535] { R2332 += 1, R2282 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2332 += 1, R2282 += 1 };
  s2 -> s4 [0, 65535] { R2332 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2332 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2333 += 1, R2334 += 1 };
  s0 -> s1 [0, 65535] { R2334 += 1, R2284 += 1 };
  s0 -> s2 [0, 65535] { R2334 += 1, R2283 += 1, R2284 += 1 };
  s1 -> s4 [0, 65535] { R2334 += 1 };
  s1 -> s1 [0, 65535] { R2334 += 1, R2284 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2334 += 1, R2284 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2334 += 1, R2283 += 1, R2284 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2334 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2336 += 1, R2286 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R2336 += 1, R2285 += 1, R2286 += 1 };
  s0 -> s0 [0, 65535] { R2335 += 1, R2336 += 1 };
  s1 -> s1 [0, 65535] { R2336 += 1, R2286 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R2336 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2336 += 1, R2286 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R2336 += 1, R2285 += 1, R2286 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2336 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2338 += 1, R2288 += 1 };
  s0 -> s0 [0, 65535] { R2337 += 1, R2338 += 1 };
  s0 -> s2 [0, 65535] { R2338 += 1, R2287 += 1, R2288 += 1 };
  s0 -> s3 [65, 65] { R2338 += 1, R2288 += 1 };
  s0 -> s4 [65, 65] { R2338 += 1, R2288 += 1 };
  s0 -> s5 [87, 87] { R2338 += 1, R2288 += 1 };
  s0 -> s1 [88, 65535] { R2338 += 1, R2288 += 1 };
  s1 -> s1 [0, 64] { R2338 += 1, R2288 += 1 };
  s1 -> s3 [65, 65] { R2338 += 1, R2288 += 1 };
  s1 -> s4 [65, 65] { R2338 += 1, R2288 += 1 };
  s1 -> s5 [87, 87] { R2338 += 1, R2288 += 1 };
  s1 -> s1 [88, 65535] { R2338 += 1, R2288 += 1 };
  s2 -> s1 [0, 64] { R2338 += 1, R2288 += 1 };
  s2 -> s2 [0, 65535] { R2338 += 1, R2287 += 1, R2288 += 1 };
  s2 -> s3 [65, 65] { R2338 += 1, R2288 += 1 };
  s2 -> s4 [65, 65] { R2338 += 1, R2288 += 1 };
  s2 -> s5 [87, 87] { R2338 += 1, R2288 += 1 };
  s2 -> s1 [88, 65535] { R2338 += 1, R2288 += 1 };
  s3 -> s3 [0, 65] { R2338 += 1, R2288 += 1 };
  s3 -> s8 [87, 87] { R2338 += 1, R2288 += 1 };
  s3 -> s3 [88, 65535] { R2338 += 1, R2288 += 1 };
  s5 -> s5 [0, 64] { R2338 += 1, R2288 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2338 += 1 };
  s5 -> s7 [65, 65] { R2338 += 1, R2288 += 1 };
  s5 -> s8 [65, 65] { R2338 += 1, R2288 += 1 };
  s5 -> s5 [87, 65535] { R2338 += 1, R2288 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2338 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R2338 += 1, R2288 += 1 };
  s8 -> s8 [0, 65535] { R2338 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [87, 65535] { R2338 += 1, R2288 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R2340 += 1, R2289 += 1, R2290 += 1 };
  s0 -> s0 [0, 65535] { R2339 += 1, R2340 += 1 };
  s0 -> s3 [65, 65] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2340 += 1 };
  s1 -> s3 [65, 65] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2340 += 1, R2289 += 1, R2290 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R2340 += 1 };
  s3 -> s3 [0, 65535] { R2340 += 1, R2290 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2340 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2340 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R2341 += 1, R2342 += 1 };
  s0 -> s2 [0, 65535] { R2342 += 1, R2291 += 1, R2292 += 1 };
  s0 -> s3 [65, 65] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R2342 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2342 += 1, R2291 += 1, R2292 += 1 };
  s2 -> s3 [65, 65] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2342 += 1, R2292 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R2342 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2342 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2342 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s2 [0, 65535] { R2344 += 1, R2293 += 1, R2294 += 1 };
  s0 -> s0 [0, 65535] { R2343 += 1, R2344 += 1 };
  s0 -> s3 [65, 65] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 65535] { R2344 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2344 += 1, R2293 += 1, R2294 += 1 };
  s2 -> s3 [65, 65] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R2344 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2344 += 1, R2294 += 1, R1773 += 1, R1774 += 1 };
  s4 -> s5 [0, 65535] { R2344 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2344 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s2 [0, 64] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s0 [0, 65535] { R2345 += 1, R2346 += 1 };
  s0 -> s3 [0, 65535] { R2346 += 1, R2295 += 1, R2296 += 1 };
  s0 -> s4 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s5 [65, 65] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s6 [65, 65] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s7 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s1 [66, 65535] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s2 [66, 65535] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s1 [0, 64] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s2 [0, 64] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s4 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s5 [65, 65] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s6 [65, 65] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s7 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s1 [66, 65535] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s2 [66, 65535] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [0, 64] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R2346 += 1 };
  s2 -> s4 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s7 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [66, 65535] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s1 [0, 64] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s2 [0, 64] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s3 [0, 65535] { R2346 += 1, R2295 += 1, R2296 += 1 };
  s3 -> s4 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s5 [65, 65] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s6 [65, 65] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s7 [65, 65] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s1 [66, 65535] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s2 [66, 65535] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R2346 += 1 };
  s4 -> s4 [0, 65535] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s6 -> s4 [0, 65535] { R2346 += 1, R2296 += 1, R2066 += 1, R2067 += 1 };
  s6 -> s6 [0, 65535] { R2346 += 1, R2296 += 1, R2065 += 1, R2066 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R2346 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2346 += 1 };
  accepting s4, s8, s2, s9, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2348 += 1, R2298 += 1 };
  s0 -> s2 [0, 65535] { R2348 += 1, R2297 += 1, R2298 += 1 };
  s0 -> s0 [0, 65535] { R2347 += 1, R2348 += 1 };
  s0 -> s3 [65, 65] { R2348 += 1, R2298 += 1 };
  s0 -> s4 [65, 65] { R2348 += 1, R2298 += 1 };
  s0 -> s1 [66, 65535] { R2348 += 1, R2298 += 1 };
  s1 -> s1 [0, 64] { R2348 += 1, R2298 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2348 += 1 };
  s1 -> s3 [65, 65] { R2348 += 1, R2298 += 1 };
  s1 -> s4 [65, 65] { R2348 += 1, R2298 += 1 };
  s1 -> s1 [66, 65535] { R2348 += 1, R2298 += 1 };
  s2 -> s1 [0, 64] { R2348 += 1, R2298 += 1 };
  s2 -> s2 [0, 65535] { R2348 += 1, R2297 += 1, R2298 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2348 += 1, R2298 += 1 };
  s2 -> s4 [65, 65] { R2348 += 1, R2298 += 1 };
  s2 -> s1 [66, 65535] { R2348 += 1, R2298 += 1 };
  s3 -> s3 [0, 65535] { R2348 += 1, R2298 += 1 };
  s3 -> s6 [0, 65535] { R2348 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2348 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2348 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s0 -> s2 [0, 64] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s0 -> s3 [0, 65535] { R2350 += 1, R2299 += 1, R2300 += 1 };
  s0 -> s0 [0, 65535] { R2349 += 1, R2350 += 1 };
  s0 -> s4 [65, 65] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s0 -> s5 [65, 65] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s0 -> s6 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s0 -> s7 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s0 -> s1 [66, 65535] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s0 -> s2 [66, 65535] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s1 -> s1 [0, 64] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s1 -> s11 [0, 64] { R2350 += 1, R2300 += 1 };
  s1 -> s8 [65, 65] { R2350 += 1, R2300 += 1 };
  s1 -> s6 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s1 -> s7 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s1 -> s12 [65, 65] { R2350 += 1, R2300 += 1 };
  s1 -> s1 [66, 65535] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s1 -> s11 [66, 65535] { R2350 += 1, R2300 += 1 };
  s2 -> s1 [0, 64] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s2 -> s2 [0, 64] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s2 -> s4 [65, 65] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s2 -> s5 [65, 65] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s2 -> s6 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s2 -> s7 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s2 -> s1 [66, 65535] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s2 -> s2 [66, 65535] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s3 -> s1 [0, 64] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s3 -> s2 [0, 64] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s3 -> s3 [0, 65535] { R2350 += 1, R2299 += 1, R2300 += 1 };
  s3 -> s4 [65, 65] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s3 -> s5 [65, 65] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s3 -> s6 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s3 -> s7 [65, 65] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s3 -> s1 [66, 65535] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s3 -> s2 [66, 65535] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s4 -> s4 [0, 65535] { R2350 += 1, R2300 += 1, R2259 += 1, R2260 += 1 };
  s4 -> s7 [0, 65535] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s7 -> s8 [0, 65535] { R2350 += 1, R2300 += 1 };
  s7 -> s7 [0, 65535] { R2350 += 1, R2300 += 1, R2260 += 1, R2261 += 1 };
  s8 -> s8 [0, 65535] { R2350 += 1, R2300 += 1 };
  s8 -> s9 [0, 65535] { R2350 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R2350 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R2350 += 1, R2300 += 1 };
  s11 -> s11 [0, 65535] { R2350 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R2350 += 1, R2300 += 1 };
  s11 -> s12 [65, 65] { R2350 += 1, R2300 += 1 };
  s11 -> s11 [66, 65535] { R2350 += 1, R2300 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R2350 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2352 += 1, R2302 += 1 };
  s0 -> s2 [0, 65535] { R2352 += 1, R2301 += 1, R2302 += 1 };
  s0 -> s0 [0, 65535] { R2351 += 1, R2352 += 1 };
  s0 -> s3 [65, 65] { R2352 += 1, R2302 += 1 };
  s0 -> s4 [65, 65] { R2352 += 1, R2302 += 1 };
  s0 -> s1 [66, 65535] { R2352 += 1, R2302 += 1 };
  s1 -> s1 [0, 64] { R2352 += 1, R2302 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2352 += 1 };
  s1 -> s3 [65, 65] { R2352 += 1, R2302 += 1 };
  s1 -> s4 [65, 65] { R2352 += 1, R2302 += 1 };
  s1 -> s1 [66, 65535] { R2352 += 1, R2302 += 1 };
  s2 -> s1 [0, 64] { R2352 += 1, R2302 += 1 };
  s2 -> s2 [0, 65535] { R2352 += 1, R2301 += 1, R2302 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2352 += 1, R2302 += 1 };
  s2 -> s4 [65, 65] { R2352 += 1, R2302 += 1 };
  s2 -> s1 [66, 65535] { R2352 += 1, R2302 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2352 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2352 += 1, R2302 += 1 };
  s4 -> s6 [0, 65535] { R2352 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2352 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2284 && R2 = R2352 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2265 = 0 && R2266 = R2284 && R2267 = 0 && R2268 = R2284 && R2269 = 0 && R2270 = R2284 && R2271 = 0 && R2272 = R2284 && R2273 = 0 && R2274 = R2284 && R2275 = 0 && R2276 = R2284 && R2277 = 0 && R2278 = R2284 && R2279 = 0 && R2280 = R2284 && R2281 = 0 && R2282 = R2284 && R2283 = 0 && R2287 = 0 && R2288 = 0 && R2295 = 0 && R2296 = 0 && R2299 = 0 && R2300 = 0 && R2303 = 10 && R2304 = R2352 && R2305 = 10 && R2306 = R2352 && R2307 = 10 && R2308 = R2352 && R2309 = 10 && R2310 = R2352 && R2311 = 10 && R2312 = R2352 && R2313 = 10 && R2314 = R2352 && R2315 = 10 && R2316 = R2352 && R2317 = 10 && R2318 = R2352 && R2319 = 10 && R2320 = R2352 && R2321 = 10 && R2322 = R2352 && R2323 = 10 && R2324 = R2352 && R2325 = 10 && R2326 = R2352 && R2327 = 10 && R2328 = R2352 && R2329 = 10 && R2330 = R2352 && R2331 = 10 && R2332 = R2352 && R2333 = 10 && R2334 = R2352 && R2335 = 10 && R2336 = R2352 && R2337 = 10 && R2338 = R2352 && R2339 = 10 && R2340 = R2352 && R2341 = 10 && R2342 = R2352 && R2343 = 10 && R2344 = R2352 && R2345 = 10 && R2346 = R2352 && R2347 = 10 && R2348 = R2352 && R2349 = 10 && R2350 = R2352 && R2351 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2284 && 9 < R2352 && (R14 = 0 || (R2285 = 0 && R2286 = 0)) && (R14 = 0 || (R2289 = 0 && R2290 = 0)) && (R14 = 0 || (R2291 = 0 && R2292 = 0)) && (R14 = 0 || (R2293 = 0 && R2294 = 0)) && (R14 = 0 || (R2297 = 0 && R2298 = 0)) && (R14 = 0 || (R2301 = 0 && R2302 = 0)) && (R2070 + R2067 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R2070 + R2067 = 0 || (R2068 + R2065 = 0 && R2069 + R2066 = 0)) && (R2264 + R2261 = 0 || (R2262 + R2259 = 0 && R2263 + R2260 = 0));
// End of Parikh automata intersection problem
