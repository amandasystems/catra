// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R3, R3221, R3222, R3223, R3224, R3225, R3226, R3415, R3416, R3417, R3418, R3419, R3420, R3421, R3422, R3423, R3424, R3425, R3426, R3427, R3428, R3429, R3430, R3431, R3432, R3433, R3434, R3435, R3436, R3437, R3438, R3439, R3440, R3441, R3442, R3443, R3444, R3445, R3446, R3447, R3448, R3449, R3450, R3451, R3452, R3453, R3454, R3455, R3456, R3457, R3458, R3459, R3460, R3461, R3462, R3463, R3464, R3465, R3466, R3467, R3468, R3469, R3470, R3471, R3472, R3473, R3474, R3475, R3476, R3477, R3478, R3479, R3480, R3481, R3482, R3483, R3484, R3485, R3486, R3487, R3488, R3489, R3490, R3491, R3492, R3493, R3494, R3495, R3496, R3497, R3498, R3499, R3500, R3501, R3502, R3503, R3504, R3505, R3506, R3507, R3508, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3460 += 1 };
  s0 -> s0 [0, 65535] { R3459 += 1, R3460 += 1 };
  s0 -> s1 [45, 45] { R3460 += 1 };
  s0 -> s2 [46, 46] { R3460 += 1 };
  s0 -> s1 [48, 62] { R3460 += 1 };
  s0 -> s3 [65, 65] { R3460 += 1 };
  s0 -> s1 [66, 65535] { R3460 += 1 };
  s1 -> s1 [0, 43] { R3460 += 1 };
  s1 -> s1 [45, 45] { R3460 += 1 };
  s1 -> s2 [46, 46] { R3460 += 1 };
  s1 -> s1 [48, 62] { R3460 += 1 };
  s1 -> s3 [65, 65] { R3460 += 1 };
  s1 -> s1 [66, 65535] { R3460 += 1 };
  s2 -> s1 [0, 43] { R3460 += 1 };
  s2 -> s1 [45, 45] { R3460 += 1 };
  s2 -> s2 [46, 46] { R3460 += 1 };
  s2 -> s1 [48, 62] { R3460 += 1 };
  s2 -> s3 [65, 65] { R3460 += 1 };
  s2 -> s1 [66, 114] { R3460 += 1 };
  s2 -> s8 [115, 115] { R3460 += 1 };
  s2 -> s1 [116, 65535] { R3460 += 1 };
  s3 -> s3 [0, 43] { R3460 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3460 += 1 };
  s3 -> s4 [46, 46] { R3460 += 1 };
  s3 -> s3 [48, 62] { R3460 += 1 };
  s3 -> s3 [65, 65535] { R3460 += 1 };
  s4 -> s3 [0, 43] { R3460 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3460 += 1 };
  s4 -> s4 [46, 46] { R3460 += 1 };
  s4 -> s3 [48, 62] { R3460 += 1 };
  s4 -> s3 [65, 114] { R3460 += 1 };
  s4 -> s5 [115, 115] { R3460 += 1 };
  s4 -> s3 [116, 65535] { R3460 += 1 };
  s5 -> s3 [0, 43] { R3460 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3460 += 1 };
  s5 -> s4 [46, 46] { R3460 += 1 };
  s5 -> s3 [48, 62] { R3460 += 1 };
  s5 -> s3 [65, 110] { R3460 += 1 };
  s5 -> s6 [111, 111] { R3460 += 1 };
  s5 -> s3 [112, 65535] { R3460 += 1 };
  s6 -> s3 [0, 43] { R3460 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3460 += 1 };
  s6 -> s4 [46, 46] { R3460 += 1 };
  s6 -> s3 [48, 62] { R3460 += 1 };
  s6 -> s3 [65, 98] { R3460 += 1 };
  s6 -> s7 [99, 99] { R3460 += 1 };
  s6 -> s3 [100, 65535] { R3460 += 1 };
  s7 -> s3 [0, 43] { R3460 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3460 += 1 };
  s7 -> s4 [46, 46] { R3460 += 1 };
  s7 -> s3 [48, 62] { R3460 += 1 };
  s7 -> s3 [65, 106] { R3460 += 1 };
  s7 -> s3 [108, 65535] { R3460 += 1 };
  s8 -> s1 [0, 43] { R3460 += 1 };
  s8 -> s1 [45, 45] { R3460 += 1 };
  s8 -> s2 [46, 46] { R3460 += 1 };
  s8 -> s1 [48, 62] { R3460 += 1 };
  s8 -> s3 [65, 65] { R3460 += 1 };
  s8 -> s1 [66, 110] { R3460 += 1 };
  s8 -> s9 [111, 111] { R3460 += 1 };
  s8 -> s1 [112, 65535] { R3460 += 1 };
  s9 -> s1 [0, 43] { R3460 += 1 };
  s9 -> s1 [45, 45] { R3460 += 1 };
  s9 -> s2 [46, 46] { R3460 += 1 };
  s9 -> s1 [48, 62] { R3460 += 1 };
  s9 -> s3 [65, 65] { R3460 += 1 };
  s9 -> s1 [66, 98] { R3460 += 1 };
  s9 -> s10 [99, 99] { R3460 += 1 };
  s9 -> s1 [100, 65535] { R3460 += 1 };
  s10 -> s1 [0, 43] { R3460 += 1 };
  s10 -> s1 [45, 45] { R3460 += 1 };
  s10 -> s2 [46, 46] { R3460 += 1 };
  s10 -> s1 [48, 62] { R3460 += 1 };
  s10 -> s3 [65, 65] { R3460 += 1 };
  s10 -> s1 [66, 106] { R3460 += 1 };
  s10 -> s1 [108, 65535] { R3460 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3462 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3461 += 1, R3462 += 1 };
  s1 -> s1 [0, 65535] { R3462 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3464 += 1 };
  s0 -> s2 [0, 65535] { R3464 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3463 += 1, R3464 += 1 };
  s0 -> s3 [58, 58] { R3464 += 1 };
  s0 -> s1 [59, 65535] { R3464 += 1 };
  s1 -> s1 [0, 57] { R3464 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3464 += 1 };
  s1 -> s1 [59, 65535] { R3464 += 1 };
  s2 -> s1 [0, 57] { R3464 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3464 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3464 += 1 };
  s2 -> s1 [59, 65535] { R3464 += 1 };
  s3 -> s3 [0, 65535] { R3464 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3466 += 1 };
  s0 -> s2 [0, 65535] { R3466 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3465 += 1, R3466 += 1 };
  s0 -> s3 [65, 65] { R3466 += 1 };
  s0 -> s1 [66, 65535] { R3466 += 1 };
  s1 -> s1 [0, 64] { R3466 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3466 += 1 };
  s1 -> s1 [66, 65535] { R3466 += 1 };
  s2 -> s1 [0, 64] { R3466 += 1 };
  s2 -> s2 [0, 65535] { R3466 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3466 += 1 };
  s2 -> s1 [66, 65535] { R3466 += 1 };
  s3 -> s3 [0, 65535] { R3466 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3468 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R3468 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3467 += 1, R3468 += 1 };
  s0 -> s3 [91, 91] { R3468 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3468 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R3468 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3468 += 1 };
  s2 -> s1 [0, 90] { R3468 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3468 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3468 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3468 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3468 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3468 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3470 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R3470 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3469 += 1, R3470 += 1 };
  s1 -> s1 [0, 65535] { R3470 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3470 += 1 };
  s2 -> s1 [0, 65535] { R3470 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R3470 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3470 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3472 += 1, R3422 += 1 };
  s0 -> s2 [0, 65535] { R3472 += 1, R3421 += 1, R3422 += 1 };
  s0 -> s0 [0, 65535] { R3471 += 1, R3472 += 1 };
  s0 -> s1 [66, 65535] { R3472 += 1, R3422 += 1 };
  s1 -> s1 [0, 64] { R3472 += 1, R3422 += 1 };
  s1 -> s1 [0, 65535] { R3472 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3472 += 1, R3422 += 1 };
  s2 -> s1 [0, 64] { R3472 += 1, R3422 += 1 };
  s2 -> s2 [0, 65535] { R3472 += 1, R3421 += 1, R3422 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3472 += 1, R3422 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3474 += 1, R3423 += 1, R3424 += 1 };
  s0 -> s2 [0, 65535] { R3474 += 1, R3424 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R3473 += 1, R3474 += 1 };
  s1 -> s1 [0, 65535] { R3474 += 1, R3423 += 1, R3424 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R3474 += 1, R3424 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3474 += 1 };
  s2 -> s2 [0, 65535] { R3474 += 1, R3424 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3474 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3476 += 1, R3426 += 1 };
  s0 -> s0 [0, 65535] { R3475 += 1, R3476 += 1 };
  s0 -> s2 [0, 65535] { R3476 += 1, R3425 += 1, R3426 += 1 };
  s0 -> s1 [87, 65535] { R3476 += 1, R3426 += 1 };
  s1 -> s1 [0, 65] { R3476 += 1, R3426 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3476 += 1 };
  s1 -> s1 [87, 65535] { R3476 += 1, R3426 += 1 };
  s2 -> s1 [0, 65] { R3476 += 1, R3426 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3476 += 1, R3425 += 1, R3426 += 1 };
  s2 -> s1 [87, 65535] { R3476 += 1, R3426 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3478 += 1, R3427 += 1, R3428 += 1 };
  s0 -> s2 [0, 65535] { R3478 += 1, R3428 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R3477 += 1, R3478 += 1 };
  s1 -> s1 [0, 65535] { R3478 += 1, R3427 += 1, R3428 += 1 };
  s1 -> s2 [0, 65535] { R3478 += 1, R3428 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3478 += 1 };
  s2 -> s2 [0, 65535] { R3478 += 1, R3428 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3478 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R3480 += 1, R3430 += 1 };
  s0 -> s2 [0, 65535] { R3480 += 1, R3430 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R3479 += 1, R3480 += 1 };
  s0 -> s3 [0, 65535] { R3480 += 1, R3429 += 1, R3430 += 1 };
  s0 -> s1 [88, 65535] { R3480 += 1, R3430 += 1 };
  s1 -> s1 [0, 86] { R3480 += 1, R3430 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3480 += 1 };
  s1 -> s1 [88, 65535] { R3480 += 1, R3430 += 1 };
  s2 -> s1 [0, 86] { R3480 += 1, R3430 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3480 += 1, R3430 += 1, R1772 += 1 };
  s2 -> s5 [0, 65535] { R3480 += 1 };
  s2 -> s1 [88, 65535] { R3480 += 1, R3430 += 1 };
  s3 -> s1 [0, 86] { R3480 += 1, R3430 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3480 += 1, R3430 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R3480 += 1, R3429 += 1, R3430 += 1 };
  s3 -> s1 [88, 65535] { R3480 += 1, R3430 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3480 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R3482 += 1, R3432 += 1, R2644 += 1 };
  s0 -> s1 [0, 65535] { R3482 += 1, R3432 += 1 };
  s0 -> s2 [0, 65535] { R3482 += 1, R3431 += 1, R3432 += 1 };
  s0 -> s0 [0, 65535] { R3481 += 1, R3482 += 1 };
  s0 -> s1 [88, 65535] { R3482 += 1, R3432 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R3482 += 1, R3432 += 1, R2644 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3482 += 1, R3432 += 1 };
  s1 -> s4 [0, 65535] { R3482 += 1 };
  s1 -> s1 [88, 65535] { R3482 += 1, R3432 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R3482 += 1, R3432 += 1, R2644 += 1 };
  s2 -> s1 [0, 65535] { R3482 += 1, R3432 += 1 };
  s2 -> s2 [0, 65535] { R3482 += 1, R3431 += 1, R3432 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R3482 += 1, R3432 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3482 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3484 += 1, R3434 += 1 };
  s0 -> s2 [0, 65535] { R3484 += 1, R3433 += 1, R3434 += 1 };
  s0 -> s0 [0, 65535] { R3483 += 1, R3484 += 1 };
  s1 -> s1 [0, 65535] { R3484 += 1, R3434 += 1 };
  s1 -> s4 [0, 65535] { R3484 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3484 += 1, R3434 += 1 };
  s2 -> s2 [0, 65535] { R3484 += 1, R3433 += 1, R3434 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3484 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R3485 += 1, R3486 += 1 };
  s0 -> s1 [0, 65535] { R3486 += 1, R3436 += 1 };
  s0 -> s2 [0, 65535] { R3486 += 1, R3435 += 1, R3436 += 1 };
  s1 -> s4 [0, 65535] { R3486 += 1 };
  s1 -> s1 [0, 65535] { R3486 += 1, R3436 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3486 += 1, R3436 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3486 += 1, R3435 += 1, R3436 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3486 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R3487 += 1, R3488 += 1 };
  s0 -> s1 [0, 65535] { R3488 += 1, R3438 += 1 };
  s0 -> s2 [0, 65535] { R3488 += 1, R3437 += 1, R3438 += 1 };
  s1 -> s1 [0, 65535] { R3488 += 1, R3438 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3488 += 1 };
  s2 -> s1 [0, 65535] { R3488 += 1, R3438 += 1 };
  s2 -> s2 [0, 65535] { R3488 += 1, R3437 += 1, R3438 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3488 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R3490 += 1, R3439 += 1, R3440 += 1 };
  s0 -> s2 [0, 65535] { R3490 += 1, R3440 += 1 };
  s0 -> s0 [0, 65535] { R3489 += 1, R3490 += 1 };
  s1 -> s1 [0, 65535] { R3490 += 1, R3439 += 1, R3440 += 1 };
  s1 -> s2 [0, 65535] { R3490 += 1, R3440 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3490 += 1 };
  s2 -> s2 [0, 65535] { R3490 += 1, R3440 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3490 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3492 += 1, R3441 += 1, R3442 += 1 };
  s0 -> s2 [0, 65535] { R3492 += 1, R3442 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3491 += 1, R3492 += 1 };
  s1 -> s1 [0, 65535] { R3492 += 1, R3441 += 1, R3442 += 1 };
  s1 -> s2 [0, 65535] { R3492 += 1, R3442 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3492 += 1, R3442 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3492 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3492 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3494 += 1, R3444 += 1 };
  s0 -> s2 [0, 65535] { R3494 += 1, R3443 += 1, R3444 += 1 };
  s0 -> s0 [0, 65535] { R3493 += 1, R3494 += 1 };
  s0 -> s3 [65, 65] { R3494 += 1, R3444 += 1 };
  s0 -> s4 [65, 65] { R3494 += 1, R3444 += 1 };
  s0 -> s5 [87, 87] { R3494 += 1, R3444 += 1 };
  s0 -> s1 [88, 65535] { R3494 += 1, R3444 += 1 };
  s1 -> s1 [0, 64] { R3494 += 1, R3444 += 1 };
  s1 -> s3 [65, 65] { R3494 += 1, R3444 += 1 };
  s1 -> s4 [65, 65] { R3494 += 1, R3444 += 1 };
  s1 -> s5 [87, 87] { R3494 += 1, R3444 += 1 };
  s1 -> s1 [88, 65535] { R3494 += 1, R3444 += 1 };
  s2 -> s1 [0, 64] { R3494 += 1, R3444 += 1 };
  s2 -> s2 [0, 65535] { R3494 += 1, R3443 += 1, R3444 += 1 };
  s2 -> s3 [65, 65] { R3494 += 1, R3444 += 1 };
  s2 -> s4 [65, 65] { R3494 += 1, R3444 += 1 };
  s2 -> s5 [87, 87] { R3494 += 1, R3444 += 1 };
  s2 -> s1 [88, 65535] { R3494 += 1, R3444 += 1 };
  s4 -> s4 [0, 65] { R3494 += 1, R3444 += 1 };
  s4 -> s8 [87, 87] { R3494 += 1, R3444 += 1 };
  s4 -> s4 [88, 65535] { R3494 += 1, R3444 += 1 };
  s5 -> s5 [0, 64] { R3494 += 1, R3444 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3494 += 1 };
  s5 -> s7 [65, 65] { R3494 += 1, R3444 += 1 };
  s5 -> s8 [65, 65] { R3494 += 1, R3444 += 1 };
  s5 -> s5 [87, 65535] { R3494 += 1, R3444 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3494 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R3494 += 1, R3444 += 1 };
  s8 -> s8 [0, 65535] { R3494 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [87, 65535] { R3494 += 1, R3444 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3495 += 1, R3496 += 1 };
  s0 -> s2 [0, 65535] { R3496 += 1, R3445 += 1, R3446 += 1 };
  s0 -> s3 [65, 65] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3496 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3496 += 1, R3445 += 1, R3446 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3496 += 1, R3446 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R3496 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3496 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3496 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R3498 += 1, R3447 += 1, R3448 += 1 };
  s0 -> s0 [0, 65535] { R3497 += 1, R3498 += 1 };
  s0 -> s3 [65, 65] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3498 += 1 };
  s1 -> s3 [65, 65] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3498 += 1, R3447 += 1, R3448 += 1 };
  s2 -> s3 [65, 65] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3498 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3498 += 1, R3448 += 1, R1771 += 1 };
  s4 -> s6 [0, 65535] { R3498 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3498 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R3500 += 1, R3449 += 1, R3450 += 1 };
  s0 -> s0 [0, 65535] { R3499 += 1, R3500 += 1 };
  s0 -> s4 [65, 65] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [66, 86] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s0 -> s1 [66, 65535] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [88, 65535] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [0, 64] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s1 -> s4 [65, 65] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s1 -> s5 [65, 65] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s6 [65, 65] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s1 -> s7 [65, 65] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [66, 86] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [88, 65535] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3500 += 1 };
  s2 -> s4 [65, 65] { R3500 += 1, R3450 += 1 };
  s2 -> s6 [65, 65] { R3500 += 1, R3450 += 1 };
  s2 -> s2 [66, 86] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R3500 += 1, R3450 += 1 };
  s2 -> s2 [88, 65535] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R3500 += 1, R3449 += 1, R3450 += 1 };
  s3 -> s4 [65, 65] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [66, 86] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s3 -> s1 [66, 65535] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [88, 65535] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s4 -> s4 [0, 86] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R3500 += 1, R3450 += 1 };
  s4 -> s9 [0, 65535] { R3500 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [88, 65535] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s5 -> s4 [0, 86] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s5 -> s5 [0, 65535] { R3500 += 1, R3450 += 1, R2641 += 1, R2642 += 1 };
  s5 -> s4 [88, 65535] { R3500 += 1, R3450 += 1, R2642 += 1 };
  s6 -> s6 [0, 65535] { R3500 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3500 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s2 [0, 64] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s0 [0, 65535] { R3501 += 1, R3502 += 1 };
  s0 -> s3 [0, 65535] { R3502 += 1, R3451 += 1, R3452 += 1 };
  s0 -> s4 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s5 [65, 65] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s6 [65, 65] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s7 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s1 [66, 65535] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s2 [66, 65535] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s1 -> s1 [0, 64] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s11 [0, 64] { R3502 += 1, R3452 += 1 };
  s1 -> s4 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s8 [65, 65] { R3502 += 1, R3452 += 1 };
  s1 -> s12 [65, 65] { R3502 += 1, R3452 += 1 };
  s1 -> s7 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s1 [66, 65535] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s11 [66, 65535] { R3502 += 1, R3452 += 1 };
  s2 -> s1 [0, 64] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s2 [0, 64] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s2 -> s4 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s5 [65, 65] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s2 -> s6 [65, 65] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s2 -> s7 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s1 [66, 65535] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s2 [66, 65535] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s1 [0, 64] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s2 [0, 64] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s3 [0, 65535] { R3502 += 1, R3451 += 1, R3452 += 1 };
  s3 -> s4 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s5 [65, 65] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s6 [65, 65] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s7 [65, 65] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s1 [66, 65535] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s2 [66, 65535] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s4 -> s4 [0, 65535] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s4 -> s8 [0, 65535] { R3502 += 1, R3452 += 1 };
  s5 -> s4 [0, 65535] { R3502 += 1, R3452 += 1, R3222 += 1, R3223 += 1 };
  s5 -> s5 [0, 65535] { R3502 += 1, R3452 += 1, R3221 += 1, R3222 += 1 };
  s8 -> s8 [0, 65535] { R3502 += 1, R3452 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R3502 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3502 += 1 };
  s11 -> s11 [0, 64] { R3502 += 1, R3452 += 1 };
  s11 -> s11 [0, 65535] { R3502 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s8 [65, 65] { R3502 += 1, R3452 += 1 };
  s11 -> s12 [65, 65] { R3502 += 1, R3452 += 1 };
  s11 -> s11 [66, 65535] { R3502 += 1, R3452 += 1 };
  s12 -> s12 [0, 65535] { R3502 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3504 += 1, R3454 += 1 };
  s0 -> s2 [0, 65535] { R3504 += 1, R3453 += 1, R3454 += 1 };
  s0 -> s0 [0, 65535] { R3503 += 1, R3504 += 1 };
  s0 -> s3 [65, 65] { R3504 += 1, R3454 += 1 };
  s0 -> s4 [65, 65] { R3504 += 1, R3454 += 1 };
  s0 -> s1 [66, 65535] { R3504 += 1, R3454 += 1 };
  s1 -> s1 [0, 64] { R3504 += 1, R3454 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3504 += 1 };
  s1 -> s3 [65, 65] { R3504 += 1, R3454 += 1 };
  s1 -> s4 [65, 65] { R3504 += 1, R3454 += 1 };
  s1 -> s1 [66, 65535] { R3504 += 1, R3454 += 1 };
  s2 -> s1 [0, 64] { R3504 += 1, R3454 += 1 };
  s2 -> s2 [0, 65535] { R3504 += 1, R3453 += 1, R3454 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3504 += 1, R3454 += 1 };
  s2 -> s4 [65, 65] { R3504 += 1, R3454 += 1 };
  s2 -> s1 [66, 65535] { R3504 += 1, R3454 += 1 };
  s3 -> s3 [0, 65535] { R3504 += 1, R3454 += 1 };
  s3 -> s6 [0, 65535] { R3504 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3504 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3504 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s0 -> s2 [0, 64] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s0 -> s0 [0, 65535] { R3505 += 1, R3506 += 1 };
  s0 -> s3 [0, 65535] { R3506 += 1, R3455 += 1, R3456 += 1 };
  s0 -> s4 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s0 -> s5 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s0 -> s6 [65, 65] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s0 -> s7 [65, 65] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s0 -> s1 [66, 65535] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s0 -> s2 [66, 65535] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s1 -> s1 [0, 64] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s1 -> s2 [0, 64] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s1 -> s4 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s1 -> s5 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s1 -> s6 [65, 65] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s1 -> s7 [65, 65] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s1 -> s1 [66, 65535] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s1 -> s2 [66, 65535] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s2 -> s2 [0, 64] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s2 -> s11 [0, 64] { R3506 += 1, R3456 += 1 };
  s2 -> s4 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s2 -> s5 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s2 -> s8 [65, 65] { R3506 += 1, R3456 += 1 };
  s2 -> s12 [65, 65] { R3506 += 1, R3456 += 1 };
  s2 -> s2 [66, 65535] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s2 -> s11 [66, 65535] { R3506 += 1, R3456 += 1 };
  s3 -> s1 [0, 64] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s3 -> s2 [0, 64] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s3 -> s3 [0, 65535] { R3506 += 1, R3455 += 1, R3456 += 1 };
  s3 -> s4 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s3 -> s5 [65, 65] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s3 -> s6 [65, 65] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s3 -> s7 [65, 65] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s3 -> s1 [66, 65535] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s3 -> s2 [66, 65535] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s4 -> s4 [0, 65535] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s4 -> s8 [0, 65535] { R3506 += 1, R3456 += 1 };
  s7 -> s4 [0, 65535] { R3506 += 1, R3456 += 1, R3416 += 1, R3417 += 1 };
  s7 -> s7 [0, 65535] { R3506 += 1, R3456 += 1, R3415 += 1, R3416 += 1 };
  s8 -> s8 [0, 65535] { R3506 += 1, R3456 += 1 };
  s8 -> s9 [0, 65535] { R3506 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R3506 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3506 += 1, R3456 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R3506 += 1 };
  s11 -> s8 [65, 65] { R3506 += 1, R3456 += 1 };
  s11 -> s12 [65, 65] { R3506 += 1, R3456 += 1 };
  s11 -> s11 [66, 65535] { R3506 += 1, R3456 += 1 };
  s12 -> s12 [0, 65535] { R3506 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3508 += 1, R3458 += 1 };
  s0 -> s2 [0, 65535] { R3508 += 1, R3457 += 1, R3458 += 1 };
  s0 -> s0 [0, 65535] { R3507 += 1, R3508 += 1 };
  s0 -> s3 [65, 65] { R3508 += 1, R3458 += 1 };
  s0 -> s4 [65, 65] { R3508 += 1, R3458 += 1 };
  s0 -> s1 [66, 65535] { R3508 += 1, R3458 += 1 };
  s1 -> s1 [0, 64] { R3508 += 1, R3458 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3508 += 1 };
  s1 -> s3 [65, 65] { R3508 += 1, R3458 += 1 };
  s1 -> s4 [65, 65] { R3508 += 1, R3458 += 1 };
  s1 -> s1 [66, 65535] { R3508 += 1, R3458 += 1 };
  s2 -> s1 [0, 64] { R3508 += 1, R3458 += 1 };
  s2 -> s2 [0, 65535] { R3508 += 1, R3457 += 1, R3458 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3508 += 1, R3458 += 1 };
  s2 -> s4 [65, 65] { R3508 += 1, R3458 += 1 };
  s2 -> s1 [66, 65535] { R3508 += 1, R3458 += 1 };
  s3 -> s3 [0, 65535] { R3508 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3508 += 1, R3458 += 1 };
  s4 -> s6 [0, 65535] { R3508 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3508 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3440 && R2 = R3508 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3421 = 0 && R3422 = R3440 && R3423 = 0 && R3424 = R3440 && R3425 = 0 && R3426 = R3440 && R3427 = 0 && R3428 = R3440 && R3429 = 0 && R3430 = R3440 && R3431 = 0 && R3432 = R3440 && R3433 = 0 && R3434 = R3440 && R3435 = 0 && R3436 = R3440 && R3437 = 0 && R3438 = R3440 && R3439 = 0 && R3443 = 0 && R3444 = 0 && R3449 = 0 && R3450 = 0 && R3451 = 0 && R3452 = 0 && R3455 = 0 && R3456 = 0 && R3459 = 10 && R3460 = R3508 && R3461 = 10 && R3462 = R3508 && R3463 = 10 && R3464 = R3508 && R3465 = 10 && R3466 = R3508 && R3467 = 10 && R3468 = R3508 && R3469 = 10 && R3470 = R3508 && R3471 = 10 && R3472 = R3508 && R3473 = 10 && R3474 = R3508 && R3475 = 10 && R3476 = R3508 && R3477 = 10 && R3478 = R3508 && R3479 = 10 && R3480 = R3508 && R3481 = 10 && R3482 = R3508 && R3483 = 10 && R3484 = R3508 && R3485 = 10 && R3486 = R3508 && R3487 = 10 && R3488 = R3508 && R3489 = 10 && R3490 = R3508 && R3491 = 10 && R3492 = R3508 && R3493 = 10 && R3494 = R3508 && R3495 = 10 && R3496 = R3508 && R3497 = 10 && R3498 = R3508 && R3499 = 10 && R3500 = R3508 && R3501 = 10 && R3502 = R3508 && R3503 = 10 && R3504 = R3508 && R3505 = 10 && R3506 = R3508 && R3507 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R3440 && 9 < R3508 && (R14 = 0 || (R3441 = 0 && R3442 = 0)) && (R14 = 0 || (R3445 = 0 && R3446 = 0)) && (R14 = 0 || (R3447 = 0 && R3448 = 0)) && (R14 = 0 || (R3453 = 0 && R3454 = 0)) && (R14 = 0 || (R3457 = 0 && R3458 = 0)) && (R3226 + R3223 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R3226 + R3223 = 0 || (R3224 + R3221 = 0 && R3225 + R3222 = 0)) && (R3420 + R3417 = 0 || (R3418 + R3415 = 0 && R3419 + R3416 = 0));
// End of Parikh automata intersection problem
