// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R18, R2, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R2081, R2082, R2083, R2084, R2085, R2086, R2087, R2088, R2089, R2090, R2091, R2092, R2093, R2094, R2095, R2096, R2097, R2098, R2099, R2100, R2101, R2102, R2103, R2104, R2105, R2106, R2107, R2108, R2109, R2110, R2111, R2112, R2113, R2114, R2115, R2116, R2117, R2118, R2119, R2120, R2121, R2122, R2123, R2124, R2125, R2126, R2127, R2128, R2129, R2130, R2131, R2132, R2133, R2134, R2135, R2136, R2137, R2138, R2139, R2140, R2141, R2142, R2143, R2144, R2145, R2146, R2147, R2148, R2149, R2150, R2151, R2152, R2153, R2154, R2155, R2156, R2157, R2158, R2159, R2160, R2161, R2162, R2163, R2164, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2116 += 1 };
  s0 -> s0 [0, 65535] { R2115 += 1, R2116 += 1 };
  s0 -> s1 [45, 45] { R2116 += 1 };
  s0 -> s2 [46, 46] { R2116 += 1 };
  s0 -> s1 [48, 62] { R2116 += 1 };
  s0 -> s3 [65, 65] { R2116 += 1 };
  s0 -> s1 [66, 65535] { R2116 += 1 };
  s1 -> s1 [0, 43] { R2116 += 1 };
  s1 -> s1 [45, 45] { R2116 += 1 };
  s1 -> s2 [46, 46] { R2116 += 1 };
  s1 -> s1 [48, 62] { R2116 += 1 };
  s1 -> s3 [65, 65] { R2116 += 1 };
  s1 -> s1 [66, 65535] { R2116 += 1 };
  s2 -> s1 [0, 43] { R2116 += 1 };
  s2 -> s1 [45, 45] { R2116 += 1 };
  s2 -> s2 [46, 46] { R2116 += 1 };
  s2 -> s1 [48, 62] { R2116 += 1 };
  s2 -> s3 [65, 65] { R2116 += 1 };
  s2 -> s1 [66, 114] { R2116 += 1 };
  s2 -> s8 [115, 115] { R2116 += 1 };
  s2 -> s1 [116, 65535] { R2116 += 1 };
  s3 -> s3 [0, 43] { R2116 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2116 += 1 };
  s3 -> s4 [46, 46] { R2116 += 1 };
  s3 -> s3 [48, 62] { R2116 += 1 };
  s3 -> s3 [65, 65535] { R2116 += 1 };
  s4 -> s3 [0, 43] { R2116 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2116 += 1 };
  s4 -> s4 [46, 46] { R2116 += 1 };
  s4 -> s3 [48, 62] { R2116 += 1 };
  s4 -> s3 [65, 114] { R2116 += 1 };
  s4 -> s5 [115, 115] { R2116 += 1 };
  s4 -> s3 [116, 65535] { R2116 += 1 };
  s5 -> s3 [0, 43] { R2116 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2116 += 1 };
  s5 -> s4 [46, 46] { R2116 += 1 };
  s5 -> s3 [48, 62] { R2116 += 1 };
  s5 -> s3 [65, 110] { R2116 += 1 };
  s5 -> s6 [111, 111] { R2116 += 1 };
  s5 -> s3 [112, 65535] { R2116 += 1 };
  s6 -> s3 [0, 43] { R2116 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2116 += 1 };
  s6 -> s4 [46, 46] { R2116 += 1 };
  s6 -> s3 [48, 62] { R2116 += 1 };
  s6 -> s3 [65, 98] { R2116 += 1 };
  s6 -> s7 [99, 99] { R2116 += 1 };
  s6 -> s3 [100, 65535] { R2116 += 1 };
  s7 -> s3 [0, 43] { R2116 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2116 += 1 };
  s7 -> s4 [46, 46] { R2116 += 1 };
  s7 -> s3 [48, 62] { R2116 += 1 };
  s7 -> s3 [65, 106] { R2116 += 1 };
  s7 -> s3 [108, 65535] { R2116 += 1 };
  s8 -> s1 [0, 43] { R2116 += 1 };
  s8 -> s1 [45, 45] { R2116 += 1 };
  s8 -> s2 [46, 46] { R2116 += 1 };
  s8 -> s1 [48, 62] { R2116 += 1 };
  s8 -> s3 [65, 65] { R2116 += 1 };
  s8 -> s1 [66, 110] { R2116 += 1 };
  s8 -> s9 [111, 111] { R2116 += 1 };
  s8 -> s1 [112, 65535] { R2116 += 1 };
  s9 -> s1 [0, 43] { R2116 += 1 };
  s9 -> s1 [45, 45] { R2116 += 1 };
  s9 -> s2 [46, 46] { R2116 += 1 };
  s9 -> s1 [48, 62] { R2116 += 1 };
  s9 -> s3 [65, 65] { R2116 += 1 };
  s9 -> s1 [66, 98] { R2116 += 1 };
  s9 -> s10 [99, 99] { R2116 += 1 };
  s9 -> s1 [100, 65535] { R2116 += 1 };
  s10 -> s1 [0, 43] { R2116 += 1 };
  s10 -> s1 [45, 45] { R2116 += 1 };
  s10 -> s2 [46, 46] { R2116 += 1 };
  s10 -> s1 [48, 62] { R2116 += 1 };
  s10 -> s3 [65, 65] { R2116 += 1 };
  s10 -> s1 [66, 106] { R2116 += 1 };
  s10 -> s1 [108, 65535] { R2116 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2118 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2117 += 1, R2118 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2118 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2120 += 1 };
  s0 -> s0 [0, 65535] { R2119 += 1, R2120 += 1 };
  s0 -> s2 [0, 65535] { R2120 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R2120 += 1 };
  s0 -> s1 [59, 65535] { R2120 += 1 };
  s1 -> s1 [0, 57] { R2120 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2120 += 1 };
  s1 -> s1 [59, 65535] { R2120 += 1 };
  s2 -> s1 [0, 57] { R2120 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2120 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R2120 += 1 };
  s2 -> s1 [59, 65535] { R2120 += 1 };
  s3 -> s3 [0, 65535] { R2120 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2122 += 1 };
  s0 -> s0 [0, 65535] { R2121 += 1, R2122 += 1 };
  s0 -> s2 [0, 65535] { R2122 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R2122 += 1 };
  s0 -> s1 [66, 65535] { R2122 += 1 };
  s1 -> s1 [0, 64] { R2122 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2122 += 1 };
  s1 -> s1 [66, 65535] { R2122 += 1 };
  s2 -> s1 [0, 64] { R2122 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2122 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2122 += 1 };
  s2 -> s1 [66, 65535] { R2122 += 1 };
  s3 -> s3 [0, 65535] { R2122 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2124 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2123 += 1, R2124 += 1 };
  s0 -> s2 [0, 65535] { R2124 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R2124 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2124 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2124 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2124 += 1 };
  s2 -> s1 [0, 90] { R2124 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2124 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R2124 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2124 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2124 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2124 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R2125 += 1, R2126 += 1 };
  s0 -> s1 [0, 65535] { R2126 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R2126 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R2126 += 1 };
  s1 -> s1 [0, 65535] { R2126 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2126 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R2126 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2126 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2128 += 1, R2078 += 1 };
  s0 -> s2 [0, 65535] { R2128 += 1, R2077 += 1, R2078 += 1 };
  s0 -> s0 [0, 65535] { R2127 += 1, R2128 += 1 };
  s0 -> s1 [66, 65535] { R2128 += 1, R2078 += 1 };
  s1 -> s1 [0, 64] { R2128 += 1, R2078 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2128 += 1 };
  s1 -> s1 [66, 65535] { R2128 += 1, R2078 += 1 };
  s2 -> s1 [0, 64] { R2128 += 1, R2078 += 1 };
  s2 -> s2 [0, 65535] { R2128 += 1, R2077 += 1, R2078 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2128 += 1, R2078 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2130 += 1, R2080 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2130 += 1, R2079 += 1, R2080 += 1 };
  s0 -> s0 [0, 65535] { R2129 += 1, R2130 += 1 };
  s1 -> s1 [0, 65535] { R2130 += 1, R2080 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2130 += 1 };
  s2 -> s1 [0, 65535] { R2130 += 1, R2080 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2130 += 1, R2079 += 1, R2080 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2130 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2132 += 1, R2082 += 1 };
  s0 -> s2 [0, 65535] { R2132 += 1, R2081 += 1, R2082 += 1 };
  s0 -> s0 [0, 65535] { R2131 += 1, R2132 += 1 };
  s0 -> s1 [87, 65535] { R2132 += 1, R2082 += 1 };
  s1 -> s1 [0, 65] { R2132 += 1, R2082 += 1 };
  s1 -> s1 [0, 65535] { R2132 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R2132 += 1, R2082 += 1 };
  s2 -> s1 [0, 65] { R2132 += 1, R2082 += 1 };
  s2 -> s2 [0, 65535] { R2132 += 1, R2081 += 1, R2082 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R2132 += 1, R2082 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R2133 += 1, R2134 += 1 };
  s0 -> s1 [0, 65535] { R2134 += 1, R2084 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R2134 += 1, R2083 += 1, R2084 += 1 };
  s1 -> s1 [0, 65535] { R2134 += 1, R2084 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2134 += 1 };
  s2 -> s1 [0, 65535] { R2134 += 1, R2084 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2134 += 1, R2083 += 1, R2084 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R2136 += 1, R2086 += 1 };
  s0 -> s2 [0, 65535] { R2136 += 1, R2085 += 1, R2086 += 1 };
  s0 -> s0 [0, 65535] { R2135 += 1, R2136 += 1 };
  s0 -> s3 [0, 65535] { R2136 += 1, R2086 += 1, R1772 += 1 };
  s0 -> s1 [88, 65535] { R2136 += 1, R2086 += 1 };
  s1 -> s1 [0, 86] { R2136 += 1, R2086 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2136 += 1 };
  s1 -> s1 [88, 65535] { R2136 += 1, R2086 += 1 };
  s2 -> s1 [0, 86] { R2136 += 1, R2086 += 1 };
  s2 -> s2 [0, 65535] { R2136 += 1, R2085 += 1, R2086 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R2136 += 1, R2086 += 1, R1772 += 1 };
  s2 -> s1 [88, 65535] { R2136 += 1, R2086 += 1 };
  s3 -> s1 [0, 86] { R2136 += 1, R2086 += 1 };
  s3 -> s4 [0, 65535] { R2136 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2136 += 1, R2086 += 1, R1772 += 1 };
  s3 -> s1 [88, 65535] { R2136 += 1, R2086 += 1 };
  s4 -> s4 [0, 65535] { R2136 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s0 -> s2 [0, 65535] { R2138 += 1, R2087 += 1, R2088 += 1 };
  s0 -> s0 [0, 65535] { R2137 += 1, R2138 += 1 };
  s0 -> s3 [0, 65535] { R2138 += 1, R2088 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s1 [88, 65535] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s1 -> s1 [0, 86] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s1 -> s1 [0, 65535] { R2138 += 1, R2088 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2138 += 1 };
  s1 -> s1 [88, 65535] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s2 -> s1 [0, 86] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s2 -> s2 [0, 65535] { R2138 += 1, R2087 += 1, R2088 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2138 += 1, R2088 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s1 [88, 65535] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s3 -> s1 [0, 86] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2138 += 1 };
  s3 -> s3 [0, 65535] { R2138 += 1, R2088 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s1 [88, 65535] { R2138 += 1, R2088 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2138 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2140 += 1, R2090 += 1, R2069 += 1, R2070 += 1 };
  s0 -> s2 [0, 65535] { R2140 += 1, R2090 += 1 };
  s0 -> s3 [0, 65535] { R2140 += 1, R2089 += 1, R2090 += 1 };
  s0 -> s0 [0, 65535] { R2139 += 1, R2140 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2140 += 1, R2090 += 1, R2069 += 1, R2070 += 1 };
  s1 -> s5 [0, 65535] { R2140 += 1 };
  s1 -> s2 [0, 65535] { R2140 += 1, R2090 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2140 += 1 };
  s2 -> s2 [0, 65535] { R2140 += 1, R2090 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2140 += 1, R2090 += 1, R2069 += 1, R2070 += 1 };
  s3 -> s2 [0, 65535] { R2140 += 1, R2090 += 1 };
  s3 -> s3 [0, 65535] { R2140 += 1, R2089 += 1, R2090 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2140 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2142 += 1, R2091 += 1, R2092 += 1 };
  s0 -> s2 [0, 65535] { R2142 += 1, R2092 += 1 };
  s0 -> s0 [0, 65535] { R2141 += 1, R2142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2142 += 1, R2091 += 1, R2092 += 1 };
  s1 -> s2 [0, 65535] { R2142 += 1, R2092 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2142 += 1, R2092 += 1 };
  s2 -> s4 [0, 65535] { R2142 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2142 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2144 += 1, R2094 += 1, R2074 += 1, R2075 += 1 };
  s0 -> s0 [0, 65535] { R2143 += 1, R2144 += 1 };
  s0 -> s2 [0, 65535] { R2144 += 1, R2094 += 1, R2075 += 1, R2076 += 1 };
  s0 -> s3 [0, 65535] { R2144 += 1, R2093 += 1, R2094 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2144 += 1 };
  s1 -> s1 [0, 65535] { R2144 += 1, R2094 += 1, R2074 += 1, R2075 += 1 };
  s1 -> s2 [0, 65535] { R2144 += 1, R2094 += 1, R2075 += 1, R2076 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2144 += 1 };
  s2 -> s6 [0, 65535] { R2144 += 1, R2094 += 1 };
  s2 -> s2 [0, 65535] { R2144 += 1, R2094 += 1, R2075 += 1, R2076 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2144 += 1, R2094 += 1, R2074 += 1, R2075 += 1 };
  s3 -> s2 [0, 65535] { R2144 += 1, R2094 += 1, R2075 += 1, R2076 += 1 };
  s3 -> s3 [0, 65535] { R2144 += 1, R2093 += 1, R2094 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2144 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2144 += 1 };
  s6 -> s6 [0, 65535] { R2144 += 1, R2094 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2145 += 1, R2146 += 1 };
  s0 -> s1 [0, 65535] { R2146 += 1, R2096 += 1 };
  s0 -> s2 [0, 65535] { R2146 += 1, R2095 += 1, R2096 += 1 };
  s1 -> s4 [0, 65535] { R2146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2146 += 1, R2096 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2146 += 1, R2096 += 1 };
  s2 -> s2 [0, 65535] { R2146 += 1, R2095 += 1, R2096 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2146 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2148 += 1, R2097 += 1, R2098 += 1 };
  s0 -> s0 [0, 65535] { R2147 += 1, R2148 += 1 };
  s0 -> s2 [0, 65535] { R2148 += 1, R2098 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R2148 += 1, R2097 += 1, R2098 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2148 += 1, R2098 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R2148 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2148 += 1, R2098 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R2148 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2150 += 1, R2100 += 1 };
  s0 -> s0 [0, 65535] { R2149 += 1, R2150 += 1 };
  s0 -> s2 [0, 65535] { R2150 += 1, R2099 += 1, R2100 += 1 };
  s0 -> s3 [65, 65] { R2150 += 1, R2100 += 1 };
  s0 -> s4 [65, 65] { R2150 += 1, R2100 += 1 };
  s0 -> s5 [87, 87] { R2150 += 1, R2100 += 1 };
  s0 -> s1 [88, 65535] { R2150 += 1, R2100 += 1 };
  s1 -> s1 [0, 64] { R2150 += 1, R2100 += 1 };
  s1 -> s3 [65, 65] { R2150 += 1, R2100 += 1 };
  s1 -> s4 [65, 65] { R2150 += 1, R2100 += 1 };
  s1 -> s5 [87, 87] { R2150 += 1, R2100 += 1 };
  s1 -> s1 [88, 65535] { R2150 += 1, R2100 += 1 };
  s2 -> s1 [0, 64] { R2150 += 1, R2100 += 1 };
  s2 -> s2 [0, 65535] { R2150 += 1, R2099 += 1, R2100 += 1 };
  s2 -> s3 [65, 65] { R2150 += 1, R2100 += 1 };
  s2 -> s4 [65, 65] { R2150 += 1, R2100 += 1 };
  s2 -> s5 [87, 87] { R2150 += 1, R2100 += 1 };
  s2 -> s1 [88, 65535] { R2150 += 1, R2100 += 1 };
  s3 -> s3 [0, 65] { R2150 += 1, R2100 += 1 };
  s3 -> s7 [87, 87] { R2150 += 1, R2100 += 1 };
  s3 -> s3 [88, 65535] { R2150 += 1, R2100 += 1 };
  s5 -> s5 [0, 64] { R2150 += 1, R2100 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2150 += 1 };
  s5 -> s7 [65, 65] { R2150 += 1, R2100 += 1 };
  s5 -> s8 [65, 65] { R2150 += 1, R2100 += 1 };
  s5 -> s5 [87, 65535] { R2150 += 1, R2100 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2150 += 1, R2100 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2150 += 1 };
  s7 -> s7 [87, 65535] { R2150 += 1, R2100 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2150 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R2151 += 1, R2152 += 1 };
  s0 -> s2 [0, 65535] { R2152 += 1, R2101 += 1, R2102 += 1 };
  s0 -> s3 [65, 65] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R2152 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2152 += 1, R2101 += 1, R2102 += 1 };
  s2 -> s3 [65, 65] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2152 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2152 += 1, R2102 += 1, R1769 += 1 };
  s4 -> s5 [0, 65535] { R2152 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2152 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R2153 += 1, R2154 += 1 };
  s0 -> s2 [0, 65535] { R2154 += 1, R2103 += 1, R2104 += 1 };
  s0 -> s3 [65, 65] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R2154 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2154 += 1, R2103 += 1, R2104 += 1 };
  s2 -> s3 [65, 65] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R2154 += 1 };
  s3 -> s3 [0, 65535] { R2154 += 1, R2104 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2154 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2154 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s0 [0, 65535] { R2155 += 1, R2156 += 1 };
  s0 -> s2 [0, 65535] { R2156 += 1, R2105 += 1, R2106 += 1 };
  s0 -> s3 [65, 65] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 65535] { R2156 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R2156 += 1, R2105 += 1, R2106 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2156 += 1 };
  s4 -> s5 [0, 65535] { R2156 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2156 += 1, R2106 += 1, R1773 += 1, R1774 += 1 };
  s5 -> s5 [0, 65535] { R2156 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s2 [0, 64] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s0 [0, 65535] { R2157 += 1, R2158 += 1 };
  s0 -> s3 [0, 65535] { R2158 += 1, R2107 += 1, R2108 += 1 };
  s0 -> s4 [65, 65] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s5 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s6 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s0 -> s7 [65, 65] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s1 [66, 65535] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s0 -> s2 [66, 65535] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s1 [0, 64] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s2 [0, 64] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s4 [65, 65] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s5 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s6 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s1 -> s7 [65, 65] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s1 [66, 65535] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s1 -> s2 [66, 65535] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [0, 64] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [0, 65535] { R2158 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s5 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s6 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s2 -> s2 [66, 65535] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s1 [0, 64] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s2 [0, 64] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s3 [0, 65535] { R2158 += 1, R2107 += 1, R2108 += 1 };
  s3 -> s4 [65, 65] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s5 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s6 [65, 65] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s3 -> s7 [65, 65] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s1 [66, 65535] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s3 -> s2 [66, 65535] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s4 -> s4 [0, 65535] { R2158 += 1, R2108 += 1, R2065 += 1, R2066 += 1 };
  s4 -> s6 [0, 65535] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R2158 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R2158 += 1, R2108 += 1, R2066 += 1, R2067 += 1 };
  s6 -> s9 [0, 65535] { R2158 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2158 += 1 };
  accepting s8, s5, s2, s9, s6;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2160 += 1, R2110 += 1 };
  s0 -> s2 [0, 65535] { R2160 += 1, R2109 += 1, R2110 += 1 };
  s0 -> s0 [0, 65535] { R2159 += 1, R2160 += 1 };
  s0 -> s3 [65, 65] { R2160 += 1, R2110 += 1 };
  s0 -> s4 [65, 65] { R2160 += 1, R2110 += 1 };
  s0 -> s1 [66, 65535] { R2160 += 1, R2110 += 1 };
  s1 -> s1 [0, 64] { R2160 += 1, R2110 += 1 };
  s1 -> s1 [0, 65535] { R2160 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2160 += 1, R2110 += 1 };
  s1 -> s4 [65, 65] { R2160 += 1, R2110 += 1 };
  s1 -> s1 [66, 65535] { R2160 += 1, R2110 += 1 };
  s2 -> s1 [0, 64] { R2160 += 1, R2110 += 1 };
  s2 -> s2 [0, 65535] { R2160 += 1, R2109 += 1, R2110 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2160 += 1, R2110 += 1 };
  s2 -> s4 [65, 65] { R2160 += 1, R2110 += 1 };
  s2 -> s1 [66, 65535] { R2160 += 1, R2110 += 1 };
  s3 -> s3 [0, 65535] { R2160 += 1, R2110 += 1 };
  s3 -> s6 [0, 65535] { R2160 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2160 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2160 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s0 -> s2 [0, 65535] { R2162 += 1, R2111 += 1, R2112 += 1 };
  s0 -> s0 [0, 65535] { R2161 += 1, R2162 += 1 };
  s0 -> s3 [65, 65] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s0 -> s4 [65, 65] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s0 -> s1 [66, 65535] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s1 -> s1 [0, 64] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s1 -> s1 [0, 65535] { R2162 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s1 -> s4 [65, 65] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s1 -> s1 [66, 65535] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s2 -> s1 [0, 64] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s2 -> s2 [0, 65535] { R2162 += 1, R2111 += 1, R2112 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s2 -> s4 [65, 65] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s2 -> s1 [66, 65535] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2162 += 1 };
  s4 -> s5 [0, 65535] { R2162 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2162 += 1, R2112 += 1, R2071 += 1, R2072 += 1 };
  s5 -> s5 [0, 65535] { R2162 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2164 += 1, R2114 += 1 };
  s0 -> s0 [0, 65535] { R2163 += 1, R2164 += 1 };
  s0 -> s2 [0, 65535] { R2164 += 1, R2113 += 1, R2114 += 1 };
  s0 -> s3 [65, 65] { R2164 += 1, R2114 += 1 };
  s0 -> s4 [65, 65] { R2164 += 1, R2114 += 1 };
  s0 -> s1 [66, 65535] { R2164 += 1, R2114 += 1 };
  s1 -> s1 [0, 64] { R2164 += 1, R2114 += 1 };
  s1 -> s1 [0, 65535] { R2164 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2164 += 1, R2114 += 1 };
  s1 -> s4 [65, 65] { R2164 += 1, R2114 += 1 };
  s1 -> s1 [66, 65535] { R2164 += 1, R2114 += 1 };
  s2 -> s1 [0, 64] { R2164 += 1, R2114 += 1 };
  s2 -> s2 [0, 65535] { R2164 += 1, R2113 += 1, R2114 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2164 += 1, R2114 += 1 };
  s2 -> s4 [65, 65] { R2164 += 1, R2114 += 1 };
  s2 -> s1 [66, 65535] { R2164 += 1, R2114 += 1 };
  s3 -> s3 [0, 65535] { R2164 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2164 += 1 };
  s4 -> s4 [0, 65535] { R2164 += 1, R2114 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2164 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2096 && R2 = R2164 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2077 = 0 && R2078 = R2096 && R2079 = 0 && R2080 = R2096 && R2081 = 0 && R2082 = R2096 && R2083 = 0 && R2084 = R2096 && R2085 = 0 && R2086 = R2096 && R2087 = 0 && R2088 = R2096 && R2089 = 0 && R2090 = R2096 && R2091 = 0 && R2092 = R2096 && R2093 = 0 && R2094 = R2096 && R2095 = 0 && R2099 = 0 && R2100 = 0 && R2107 = 0 && R2108 = 0 && R2115 = 10 && R2116 = R2164 && R2117 = 10 && R2118 = R2164 && R2119 = 10 && R2120 = R2164 && R2121 = 10 && R2122 = R2164 && R2123 = 10 && R2124 = R2164 && R2125 = 10 && R2126 = R2164 && R2127 = 10 && R2128 = R2164 && R2129 = 10 && R2130 = R2164 && R2131 = 10 && R2132 = R2164 && R2133 = 10 && R2134 = R2164 && R2135 = 10 && R2136 = R2164 && R2137 = 10 && R2138 = R2164 && R2139 = 10 && R2140 = R2164 && R2141 = 10 && R2142 = R2164 && R2143 = 10 && R2144 = R2164 && R2145 = 10 && R2146 = R2164 && R2147 = 10 && R2148 = R2164 && R2149 = 10 && R2150 = R2164 && R2151 = 10 && R2152 = R2164 && R2153 = 10 && R2154 = R2164 && R2155 = 10 && R2156 = R2164 && R2157 = 10 && R2158 = R2164 && R2159 = 10 && R2160 = R2164 && R2161 = 10 && R2162 = R2164 && R2163 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2096 && 9 < R2164 && (R14 = 0 || (R2097 = 0 && R2098 = 0)) && (R14 = 0 || (R2101 = 0 && R2102 = 0)) && (R14 = 0 || (R2103 = 0 && R2104 = 0)) && (R14 = 0 || (R2105 = 0 && R2106 = 0)) && (R14 = 0 || (R2109 = 0 && R2110 = 0)) && (R14 = 0 || (R2111 = 0 && R2112 = 0)) && (R14 = 0 || (R2113 = 0 && R2114 = 0)) && (R2070 + R2067 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R2070 + R2067 = 0 || (R2068 + R2065 = 0 && R2069 + R2066 = 0)) && (R2076 + R2073 = 0 || (R2074 + R2071 = 0 && R2075 + R2072 = 0));
// End of Parikh automata intersection problem
