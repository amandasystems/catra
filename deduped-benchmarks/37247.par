// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R3, R3221, R3222, R3223, R3224, R3225, R3226, R3321, R3322, R3323, R3324, R3325, R3326, R3327, R3328, R3329, R3330, R3331, R3332, R3333, R3334, R3335, R3336, R3337, R3338, R3339, R3340, R3341, R3342, R3343, R3344, R3345, R3346, R3347, R3348, R3349, R3350, R3351, R3352, R3353, R3354, R3355, R3356, R3357, R3358, R3359, R3360, R3361, R3362, R3363, R3364, R3365, R3366, R3367, R3368, R3369, R3370, R3371, R3372, R3373, R3374, R3375, R3376, R3377, R3378, R3379, R3380, R3381, R3382, R3383, R3384, R3385, R3386, R3387, R3388, R3389, R3390, R3391, R3392, R3393, R3394, R3395, R3396, R3397, R3398, R3399, R3400, R3401, R3402, R3403, R3404, R3405, R3406, R3407, R3408, R3409, R3410, R3411, R3412, R3413, R3414, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3366 += 1 };
  s0 -> s0 [0, 65535] { R3365 += 1, R3366 += 1 };
  s0 -> s1 [45, 45] { R3366 += 1 };
  s0 -> s2 [46, 46] { R3366 += 1 };
  s0 -> s1 [48, 62] { R3366 += 1 };
  s0 -> s3 [65, 65] { R3366 += 1 };
  s0 -> s1 [66, 65535] { R3366 += 1 };
  s1 -> s1 [0, 43] { R3366 += 1 };
  s1 -> s1 [45, 45] { R3366 += 1 };
  s1 -> s2 [46, 46] { R3366 += 1 };
  s1 -> s1 [48, 62] { R3366 += 1 };
  s1 -> s3 [65, 65] { R3366 += 1 };
  s1 -> s1 [66, 65535] { R3366 += 1 };
  s2 -> s1 [0, 43] { R3366 += 1 };
  s2 -> s1 [45, 45] { R3366 += 1 };
  s2 -> s2 [46, 46] { R3366 += 1 };
  s2 -> s1 [48, 62] { R3366 += 1 };
  s2 -> s3 [65, 65] { R3366 += 1 };
  s2 -> s1 [66, 114] { R3366 += 1 };
  s2 -> s8 [115, 115] { R3366 += 1 };
  s2 -> s1 [116, 65535] { R3366 += 1 };
  s3 -> s3 [0, 43] { R3366 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3366 += 1 };
  s3 -> s4 [46, 46] { R3366 += 1 };
  s3 -> s3 [48, 62] { R3366 += 1 };
  s3 -> s3 [65, 65535] { R3366 += 1 };
  s4 -> s3 [0, 43] { R3366 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3366 += 1 };
  s4 -> s4 [46, 46] { R3366 += 1 };
  s4 -> s3 [48, 62] { R3366 += 1 };
  s4 -> s3 [65, 114] { R3366 += 1 };
  s4 -> s5 [115, 115] { R3366 += 1 };
  s4 -> s3 [116, 65535] { R3366 += 1 };
  s5 -> s3 [0, 43] { R3366 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3366 += 1 };
  s5 -> s4 [46, 46] { R3366 += 1 };
  s5 -> s3 [48, 62] { R3366 += 1 };
  s5 -> s3 [65, 110] { R3366 += 1 };
  s5 -> s6 [111, 111] { R3366 += 1 };
  s5 -> s3 [112, 65535] { R3366 += 1 };
  s6 -> s3 [0, 43] { R3366 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3366 += 1 };
  s6 -> s4 [46, 46] { R3366 += 1 };
  s6 -> s3 [48, 62] { R3366 += 1 };
  s6 -> s3 [65, 98] { R3366 += 1 };
  s6 -> s7 [99, 99] { R3366 += 1 };
  s6 -> s3 [100, 65535] { R3366 += 1 };
  s7 -> s3 [0, 43] { R3366 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3366 += 1 };
  s7 -> s4 [46, 46] { R3366 += 1 };
  s7 -> s3 [48, 62] { R3366 += 1 };
  s7 -> s3 [65, 106] { R3366 += 1 };
  s7 -> s3 [108, 65535] { R3366 += 1 };
  s8 -> s1 [0, 43] { R3366 += 1 };
  s8 -> s1 [45, 45] { R3366 += 1 };
  s8 -> s2 [46, 46] { R3366 += 1 };
  s8 -> s1 [48, 62] { R3366 += 1 };
  s8 -> s3 [65, 65] { R3366 += 1 };
  s8 -> s1 [66, 110] { R3366 += 1 };
  s8 -> s9 [111, 111] { R3366 += 1 };
  s8 -> s1 [112, 65535] { R3366 += 1 };
  s9 -> s1 [0, 43] { R3366 += 1 };
  s9 -> s1 [45, 45] { R3366 += 1 };
  s9 -> s2 [46, 46] { R3366 += 1 };
  s9 -> s1 [48, 62] { R3366 += 1 };
  s9 -> s3 [65, 65] { R3366 += 1 };
  s9 -> s1 [66, 98] { R3366 += 1 };
  s9 -> s10 [99, 99] { R3366 += 1 };
  s9 -> s1 [100, 65535] { R3366 += 1 };
  s10 -> s1 [0, 43] { R3366 += 1 };
  s10 -> s1 [45, 45] { R3366 += 1 };
  s10 -> s2 [46, 46] { R3366 += 1 };
  s10 -> s1 [48, 62] { R3366 += 1 };
  s10 -> s3 [65, 65] { R3366 += 1 };
  s10 -> s1 [66, 106] { R3366 += 1 };
  s10 -> s1 [108, 65535] { R3366 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3368 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3367 += 1, R3368 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3368 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3370 += 1 };
  s0 -> s0 [0, 65535] { R3369 += 1, R3370 += 1 };
  s0 -> s2 [0, 65535] { R3370 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R3370 += 1 };
  s0 -> s1 [59, 65535] { R3370 += 1 };
  s1 -> s1 [0, 57] { R3370 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3370 += 1 };
  s1 -> s1 [59, 65535] { R3370 += 1 };
  s2 -> s1 [0, 57] { R3370 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3370 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3370 += 1 };
  s2 -> s1 [59, 65535] { R3370 += 1 };
  s3 -> s3 [0, 65535] { R3370 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3372 += 1 };
  s0 -> s2 [0, 65535] { R3372 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3371 += 1, R3372 += 1 };
  s0 -> s3 [65, 65] { R3372 += 1 };
  s0 -> s1 [66, 65535] { R3372 += 1 };
  s1 -> s1 [0, 64] { R3372 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3372 += 1 };
  s1 -> s1 [66, 65535] { R3372 += 1 };
  s2 -> s1 [0, 64] { R3372 += 1 };
  s2 -> s2 [0, 65535] { R3372 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3372 += 1 };
  s2 -> s1 [66, 65535] { R3372 += 1 };
  s3 -> s3 [0, 65535] { R3372 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3374 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R3374 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3373 += 1, R3374 += 1 };
  s0 -> s3 [91, 91] { R3374 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3374 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3374 += 1 };
  s1 -> s1 [0, 65535] { R3374 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R3374 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3374 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3374 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3374 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3374 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3374 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3375 += 1, R3376 += 1 };
  s0 -> s1 [0, 65535] { R3376 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R3376 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3376 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R3376 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3376 += 1 };
  s2 -> s2 [0, 65535] { R3376 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3376 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3378 += 1, R3328 += 1 };
  s0 -> s2 [0, 65535] { R3378 += 1, R3327 += 1, R3328 += 1 };
  s0 -> s0 [0, 65535] { R3377 += 1, R3378 += 1 };
  s0 -> s1 [66, 65535] { R3378 += 1, R3328 += 1 };
  s1 -> s1 [0, 64] { R3378 += 1, R3328 += 1 };
  s1 -> s1 [0, 65535] { R3378 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R3378 += 1, R3328 += 1 };
  s2 -> s1 [0, 64] { R3378 += 1, R3328 += 1 };
  s2 -> s2 [0, 65535] { R3378 += 1, R3327 += 1, R3328 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3378 += 1, R3328 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3380 += 1, R3329 += 1, R3330 += 1 };
  s0 -> s0 [0, 65535] { R3379 += 1, R3380 += 1 };
  s0 -> s2 [0, 65535] { R3380 += 1, R3330 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3380 += 1, R3329 += 1, R3330 += 1 };
  s1 -> s2 [0, 65535] { R3380 += 1, R3330 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3380 += 1 };
  s2 -> s2 [0, 65535] { R3380 += 1, R3330 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3380 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3382 += 1, R3332 += 1 };
  s0 -> s0 [0, 65535] { R3381 += 1, R3382 += 1 };
  s0 -> s2 [0, 65535] { R3382 += 1, R3331 += 1, R3332 += 1 };
  s0 -> s1 [87, 65535] { R3382 += 1, R3332 += 1 };
  s1 -> s1 [0, 65] { R3382 += 1, R3332 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3382 += 1 };
  s1 -> s1 [87, 65535] { R3382 += 1, R3332 += 1 };
  s2 -> s1 [0, 65] { R3382 += 1, R3332 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3382 += 1, R3331 += 1, R3332 += 1 };
  s2 -> s1 [87, 65535] { R3382 += 1, R3332 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3384 += 1, R3333 += 1, R3334 += 1 };
  s0 -> s0 [0, 65535] { R3383 += 1, R3384 += 1 };
  s0 -> s2 [0, 65535] { R3384 += 1, R3334 += 1, R1770 += 1 };
  s1 -> s1 [0, 65535] { R3384 += 1, R3333 += 1, R3334 += 1 };
  s1 -> s2 [0, 65535] { R3384 += 1, R3334 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3384 += 1 };
  s2 -> s2 [0, 65535] { R3384 += 1, R3334 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3384 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R3386 += 1, R3336 += 1 };
  s0 -> s2 [0, 65535] { R3386 += 1, R3335 += 1, R3336 += 1 };
  s0 -> s0 [0, 65535] { R3385 += 1, R3386 += 1 };
  s0 -> s3 [0, 65535] { R3386 += 1, R3336 += 1, R1772 += 1 };
  s0 -> s1 [88, 65535] { R3386 += 1, R3336 += 1 };
  s1 -> s1 [0, 86] { R3386 += 1, R3336 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3386 += 1 };
  s1 -> s1 [88, 65535] { R3386 += 1, R3336 += 1 };
  s2 -> s1 [0, 86] { R3386 += 1, R3336 += 1 };
  s2 -> s2 [0, 65535] { R3386 += 1, R3335 += 1, R3336 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R3386 += 1, R3336 += 1, R1772 += 1 };
  s2 -> s1 [88, 65535] { R3386 += 1, R3336 += 1 };
  s3 -> s1 [0, 86] { R3386 += 1, R3336 += 1 };
  s3 -> s4 [0, 65535] { R3386 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3386 += 1, R3336 += 1, R1772 += 1 };
  s3 -> s1 [88, 65535] { R3386 += 1, R3336 += 1 };
  s4 -> s4 [0, 65535] { R3386 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R3388 += 1, R3338 += 1, R2644 += 1 };
  s0 -> s0 [0, 65535] { R3387 += 1, R3388 += 1 };
  s0 -> s1 [0, 65535] { R3388 += 1, R3338 += 1 };
  s0 -> s2 [0, 65535] { R3388 += 1, R3337 += 1, R3338 += 1 };
  s0 -> s1 [88, 65535] { R3388 += 1, R3338 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R3388 += 1, R3338 += 1, R2644 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3388 += 1 };
  s1 -> s1 [0, 65535] { R3388 += 1, R3338 += 1 };
  s1 -> s1 [88, 65535] { R3388 += 1, R3338 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R3388 += 1, R3338 += 1, R2644 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3388 += 1, R3338 += 1 };
  s2 -> s2 [0, 65535] { R3388 += 1, R3337 += 1, R3338 += 1 };
  s2 -> s1 [88, 65535] { R3388 += 1, R3338 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3388 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3390 += 1, R3339 += 1, R3340 += 1 };
  s0 -> s2 [0, 65535] { R3390 += 1, R3340 += 1 };
  s0 -> s0 [0, 65535] { R3389 += 1, R3390 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3390 += 1, R3339 += 1, R3340 += 1 };
  s1 -> s2 [0, 65535] { R3390 += 1, R3340 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3390 += 1, R3340 += 1 };
  s2 -> s4 [0, 65535] { R3390 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3390 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3392 += 1, R3342 += 1 };
  s0 -> s0 [0, 65535] { R3391 += 1, R3392 += 1 };
  s0 -> s2 [0, 65535] { R3392 += 1, R3341 += 1, R3342 += 1 };
  s1 -> s1 [0, 65535] { R3392 += 1, R3342 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3392 += 1 };
  s2 -> s1 [0, 65535] { R3392 += 1, R3342 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3392 += 1, R3341 += 1, R3342 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3392 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3394 += 1, R3344 += 1 };
  s0 -> s2 [0, 65535] { R3394 += 1, R3344 += 1, R3325 += 1, R3326 += 1 };
  s0 -> s0 [0, 65535] { R3393 += 1, R3394 += 1 };
  s0 -> s3 [0, 65535] { R3394 += 1, R3343 += 1, R3344 += 1 };
  s1 -> s1 [0, 65535] { R3394 += 1, R3344 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3394 += 1 };
  s2 -> s1 [0, 65535] { R3394 += 1, R3344 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3394 += 1, R3344 += 1, R3325 += 1, R3326 += 1 };
  s2 -> s5 [0, 65535] { R3394 += 1 };
  s3 -> s1 [0, 65535] { R3394 += 1, R3344 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3394 += 1, R3344 += 1, R3325 += 1, R3326 += 1 };
  s3 -> s3 [0, 65535] { R3394 += 1, R3343 += 1, R3344 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3394 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3395 += 1, R3396 += 1 };
  s0 -> s1 [0, 65535] { R3396 += 1, R3345 += 1, R3346 += 1 };
  s0 -> s2 [0, 65535] { R3396 += 1, R3346 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3396 += 1, R3345 += 1, R3346 += 1 };
  s1 -> s2 [0, 65535] { R3396 += 1, R3346 += 1 };
  s2 -> s3 [0, 65535] { R3396 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3396 += 1, R3346 += 1 };
  s3 -> s3 [0, 65535] { R3396 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3398 += 1, R3348 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R3398 += 1, R3347 += 1, R3348 += 1 };
  s0 -> s0 [0, 65535] { R3397 += 1, R3398 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3398 += 1 };
  s1 -> s1 [0, 65535] { R3398 += 1, R3348 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3398 += 1, R3348 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R3398 += 1, R3347 += 1, R3348 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3398 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3400 += 1, R3350 += 1 };
  s0 -> s0 [0, 65535] { R3399 += 1, R3400 += 1 };
  s0 -> s2 [0, 65535] { R3400 += 1, R3349 += 1, R3350 += 1 };
  s0 -> s3 [65, 65] { R3400 += 1, R3350 += 1 };
  s0 -> s4 [65, 65] { R3400 += 1, R3350 += 1 };
  s0 -> s5 [87, 87] { R3400 += 1, R3350 += 1 };
  s0 -> s1 [88, 65535] { R3400 += 1, R3350 += 1 };
  s1 -> s1 [0, 64] { R3400 += 1, R3350 += 1 };
  s1 -> s3 [65, 65] { R3400 += 1, R3350 += 1 };
  s1 -> s4 [65, 65] { R3400 += 1, R3350 += 1 };
  s1 -> s5 [87, 87] { R3400 += 1, R3350 += 1 };
  s1 -> s1 [88, 65535] { R3400 += 1, R3350 += 1 };
  s2 -> s1 [0, 64] { R3400 += 1, R3350 += 1 };
  s2 -> s2 [0, 65535] { R3400 += 1, R3349 += 1, R3350 += 1 };
  s2 -> s3 [65, 65] { R3400 += 1, R3350 += 1 };
  s2 -> s4 [65, 65] { R3400 += 1, R3350 += 1 };
  s2 -> s5 [87, 87] { R3400 += 1, R3350 += 1 };
  s2 -> s1 [88, 65535] { R3400 += 1, R3350 += 1 };
  s4 -> s4 [0, 65] { R3400 += 1, R3350 += 1 };
  s4 -> s7 [87, 87] { R3400 += 1, R3350 += 1 };
  s4 -> s4 [88, 65535] { R3400 += 1, R3350 += 1 };
  s5 -> s5 [0, 64] { R3400 += 1, R3350 += 1 };
  s5 -> s5 [0, 65535] { R3400 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3400 += 1, R3350 += 1 };
  s5 -> s8 [65, 65] { R3400 += 1, R3350 += 1 };
  s5 -> s5 [87, 65535] { R3400 += 1, R3350 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3400 += 1, R3350 += 1 };
  s7 -> s7 [0, 65535] { R3400 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R3400 += 1, R3350 += 1 };
  s8 -> s8 [0, 65535] { R3400 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3401 += 1, R3402 += 1 };
  s0 -> s2 [0, 65535] { R3402 += 1, R3351 += 1, R3352 += 1 };
  s0 -> s3 [65, 65] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3402 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3402 += 1, R3351 += 1, R3352 += 1 };
  s2 -> s3 [65, 65] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3402 += 1, R3352 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3402 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3402 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3402 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R3403 += 1, R3404 += 1 };
  s0 -> s2 [0, 65535] { R3404 += 1, R3353 += 1, R3354 += 1 };
  s0 -> s3 [65, 65] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R3404 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3404 += 1, R3353 += 1, R3354 += 1 };
  s2 -> s3 [65, 65] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R3404 += 1, R3354 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R3404 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3404 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3404 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R3406 += 1, R3355 += 1, R3356 += 1 };
  s0 -> s0 [0, 65535] { R3405 += 1, R3406 += 1 };
  s0 -> s4 [65, 65] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s0 -> s1 [66, 86] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s0 -> s2 [66, 65535] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [88, 65535] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s1 -> s1 [0, 65535] { R3406 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R3406 += 1, R3356 += 1 };
  s1 -> s7 [65, 65] { R3406 += 1, R3356 += 1 };
  s1 -> s1 [66, 86] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R3406 += 1, R3356 += 1 };
  s1 -> s1 [88, 65535] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s2 -> s1 [0, 64] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s4 [65, 65] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s5 [65, 65] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s2 -> s6 [65, 65] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s7 [65, 65] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s2 -> s1 [66, 86] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [88, 65535] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R3406 += 1, R3355 += 1, R3356 += 1 };
  s3 -> s4 [65, 65] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s3 -> s1 [66, 86] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s3 -> s2 [66, 65535] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [88, 65535] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s4 -> s5 [0, 86] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R3406 += 1, R3356 += 1, R2641 += 1, R2642 += 1 };
  s4 -> s5 [88, 65535] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s5 -> s5 [0, 86] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s5 -> s9 [0, 65535] { R3406 += 1 };
  s5 -> s5 [0, 65535] { R3406 += 1, R3356 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [88, 65535] { R3406 += 1, R3356 += 1, R2642 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3406 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3406 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s2 [0, 64] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s3 [0, 65535] { R3408 += 1, R3357 += 1, R3358 += 1 };
  s0 -> s0 [0, 65535] { R3407 += 1, R3408 += 1 };
  s0 -> s4 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s5 [65, 65] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s6 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s7 [65, 65] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s1 [66, 65535] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s2 [66, 65535] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s1 -> s1 [0, 64] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s11 [0, 64] { R3408 += 1, R3358 += 1 };
  s1 -> s4 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s8 [65, 65] { R3408 += 1, R3358 += 1 };
  s1 -> s6 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s12 [65, 65] { R3408 += 1, R3358 += 1 };
  s1 -> s1 [66, 65535] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s11 [66, 65535] { R3408 += 1, R3358 += 1 };
  s2 -> s1 [0, 64] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s2 [0, 64] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s2 -> s4 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s5 [65, 65] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s2 -> s6 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s7 [65, 65] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s2 -> s1 [66, 65535] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s2 [66, 65535] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s1 [0, 64] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s2 [0, 64] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s3 [0, 65535] { R3408 += 1, R3357 += 1, R3358 += 1 };
  s3 -> s4 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s5 [65, 65] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s6 [65, 65] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s7 [65, 65] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s1 [66, 65535] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s2 [66, 65535] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s4 -> s4 [0, 65535] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s4 -> s8 [0, 65535] { R3408 += 1, R3358 += 1 };
  s5 -> s4 [0, 65535] { R3408 += 1, R3358 += 1, R3222 += 1, R3223 += 1 };
  s5 -> s5 [0, 65535] { R3408 += 1, R3358 += 1, R3221 += 1, R3222 += 1 };
  s8 -> s8 [0, 65535] { R3408 += 1, R3358 += 1 };
  s8 -> s9 [0, 65535] { R3408 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R3408 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R3408 += 1, R3358 += 1 };
  s11 -> s11 [0, 65535] { R3408 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R3408 += 1, R3358 += 1 };
  s11 -> s12 [65, 65] { R3408 += 1, R3358 += 1 };
  s11 -> s11 [66, 65535] { R3408 += 1, R3358 += 1 };
  s12 -> s12 [0, 65535] { R3408 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3410 += 1, R3360 += 1 };
  s0 -> s2 [0, 65535] { R3410 += 1, R3359 += 1, R3360 += 1 };
  s0 -> s0 [0, 65535] { R3409 += 1, R3410 += 1 };
  s0 -> s3 [65, 65] { R3410 += 1, R3360 += 1 };
  s0 -> s4 [65, 65] { R3410 += 1, R3360 += 1 };
  s0 -> s1 [66, 65535] { R3410 += 1, R3360 += 1 };
  s1 -> s1 [0, 64] { R3410 += 1, R3360 += 1 };
  s1 -> s1 [0, 65535] { R3410 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3410 += 1, R3360 += 1 };
  s1 -> s4 [65, 65] { R3410 += 1, R3360 += 1 };
  s1 -> s1 [66, 65535] { R3410 += 1, R3360 += 1 };
  s2 -> s1 [0, 64] { R3410 += 1, R3360 += 1 };
  s2 -> s2 [0, 65535] { R3410 += 1, R3359 += 1, R3360 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3410 += 1, R3360 += 1 };
  s2 -> s4 [65, 65] { R3410 += 1, R3360 += 1 };
  s2 -> s1 [66, 65535] { R3410 += 1, R3360 += 1 };
  s3 -> s3 [0, 65535] { R3410 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3410 += 1 };
  s4 -> s4 [0, 65535] { R3410 += 1, R3360 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3410 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s0 -> s2 [0, 64] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s0 -> s0 [0, 65535] { R3411 += 1, R3412 += 1 };
  s0 -> s3 [0, 65535] { R3412 += 1, R3361 += 1, R3362 += 1 };
  s0 -> s4 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s0 -> s5 [65, 65] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s0 -> s6 [65, 65] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s0 -> s7 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s0 -> s1 [66, 65535] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s0 -> s2 [66, 65535] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s1 -> s1 [0, 64] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s1 -> s1 [0, 65535] { R3412 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s1 -> s7 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s1 -> s1 [66, 65535] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s2 -> s1 [0, 64] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s2 -> s2 [0, 64] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s2 -> s4 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s2 -> s5 [65, 65] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s2 -> s6 [65, 65] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s2 -> s7 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s2 -> s1 [66, 65535] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s2 -> s2 [66, 65535] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s3 -> s1 [0, 64] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s3 -> s2 [0, 64] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s3 -> s3 [0, 65535] { R3412 += 1, R3361 += 1, R3362 += 1 };
  s3 -> s4 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s3 -> s5 [65, 65] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s3 -> s6 [65, 65] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s3 -> s7 [65, 65] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s3 -> s1 [66, 65535] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s3 -> s2 [66, 65535] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s4 -> s4 [0, 65535] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R3412 += 1 };
  s6 -> s4 [0, 65535] { R3412 += 1, R3362 += 1, R3322 += 1, R3323 += 1 };
  s6 -> s6 [0, 65535] { R3412 += 1, R3362 += 1, R3321 += 1, R3322 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R3412 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3412 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3414 += 1, R3364 += 1 };
  s0 -> s2 [0, 65535] { R3414 += 1, R3363 += 1, R3364 += 1 };
  s0 -> s0 [0, 65535] { R3413 += 1, R3414 += 1 };
  s0 -> s3 [65, 65] { R3414 += 1, R3364 += 1 };
  s0 -> s4 [65, 65] { R3414 += 1, R3364 += 1 };
  s0 -> s1 [66, 65535] { R3414 += 1, R3364 += 1 };
  s1 -> s1 [0, 64] { R3414 += 1, R3364 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3414 += 1 };
  s1 -> s3 [65, 65] { R3414 += 1, R3364 += 1 };
  s1 -> s4 [65, 65] { R3414 += 1, R3364 += 1 };
  s1 -> s1 [66, 65535] { R3414 += 1, R3364 += 1 };
  s2 -> s1 [0, 64] { R3414 += 1, R3364 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3414 += 1, R3363 += 1, R3364 += 1 };
  s2 -> s3 [65, 65] { R3414 += 1, R3364 += 1 };
  s2 -> s4 [65, 65] { R3414 += 1, R3364 += 1 };
  s2 -> s1 [66, 65535] { R3414 += 1, R3364 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3414 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R3414 += 1 };
  s4 -> s4 [0, 65535] { R3414 += 1, R3364 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3414 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3346 && R2 = R3414 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3327 = 0 && R3328 = R3346 && R3329 = 0 && R3330 = R3346 && R3331 = 0 && R3332 = R3346 && R3333 = 0 && R3334 = R3346 && R3335 = 0 && R3336 = R3346 && R3337 = 0 && R3338 = R3346 && R3339 = 0 && R3340 = R3346 && R3341 = 0 && R3342 = R3346 && R3343 = 0 && R3344 = R3346 && R3345 = 0 && R3349 = 0 && R3350 = 0 && R3355 = 0 && R3356 = 0 && R3357 = 0 && R3358 = 0 && R3361 = 0 && R3362 = 0 && R3365 = 10 && R3366 = R3414 && R3367 = 10 && R3368 = R3414 && R3369 = 10 && R3370 = R3414 && R3371 = 10 && R3372 = R3414 && R3373 = 10 && R3374 = R3414 && R3375 = 10 && R3376 = R3414 && R3377 = 10 && R3378 = R3414 && R3379 = 10 && R3380 = R3414 && R3381 = 10 && R3382 = R3414 && R3383 = 10 && R3384 = R3414 && R3385 = 10 && R3386 = R3414 && R3387 = 10 && R3388 = R3414 && R3389 = 10 && R3390 = R3414 && R3391 = 10 && R3392 = R3414 && R3393 = 10 && R3394 = R3414 && R3395 = 10 && R3396 = R3414 && R3397 = 10 && R3398 = R3414 && R3399 = 10 && R3400 = R3414 && R3401 = 10 && R3402 = R3414 && R3403 = 10 && R3404 = R3414 && R3405 = 10 && R3406 = R3414 && R3407 = 10 && R3408 = R3414 && R3409 = 10 && R3410 = R3414 && R3411 = 10 && R3412 = R3414 && R3413 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R3346 && 9 < R3414 && (R14 = 0 || (R3347 = 0 && R3348 = 0)) && (R14 = 0 || (R3351 = 0 && R3352 = 0)) && (R14 = 0 || (R3353 = 0 && R3354 = 0)) && (R14 = 0 || (R3359 = 0 && R3360 = 0)) && (R14 = 0 || (R3363 = 0 && R3364 = 0)) && (R3226 + R3223 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R3226 + R3223 = 0 || (R3224 + R3221 = 0 && R3225 + R3222 = 0)) && (R3326 + R3323 = 0 || (R3324 + R3321 = 0 && R3325 + R3322 = 0));
// End of Parikh automata intersection problem
