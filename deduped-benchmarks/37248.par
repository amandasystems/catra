// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R1777, R1778, R1779, R1780, R1781, R1782, R1783, R1784, R1785, R1786, R1787, R1788, R1789, R1790, R1791, R1792, R1793, R1794, R1795, R1796, R1797, R1798, R1799, R18, R1800, R1801, R1802, R1803, R1804, R1805, R1806, R1807, R1808, R1809, R1810, R1811, R1812, R1813, R1814, R1815, R1816, R1817, R1818, R1819, R1820, R1821, R1822, R1823, R1824, R1825, R1826, R1827, R1828, R1829, R1830, R1831, R1832, R1833, R1834, R1835, R1836, R1837, R1838, R1839, R1840, R1841, R1842, R1843, R1844, R1845, R1846, R1847, R1848, R1849, R1850, R1851, R1852, R1853, R1854, R1855, R1856, R1857, R1858, R1859, R1860, R1861, R1862, R1863, R1864, R1865, R1866, R1867, R1868, R1869, R1870, R1871, R1872, R1873, R1874, R1875, R1876, R2, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1828 += 1 };
  s0 -> s0 [0, 65535] { R1827 += 1, R1828 += 1 };
  s0 -> s1 [45, 45] { R1828 += 1 };
  s0 -> s2 [46, 46] { R1828 += 1 };
  s0 -> s1 [48, 62] { R1828 += 1 };
  s0 -> s3 [65, 65] { R1828 += 1 };
  s0 -> s1 [66, 65535] { R1828 += 1 };
  s1 -> s1 [0, 43] { R1828 += 1 };
  s1 -> s1 [45, 45] { R1828 += 1 };
  s1 -> s2 [46, 46] { R1828 += 1 };
  s1 -> s1 [48, 62] { R1828 += 1 };
  s1 -> s3 [65, 65] { R1828 += 1 };
  s1 -> s1 [66, 65535] { R1828 += 1 };
  s2 -> s1 [0, 43] { R1828 += 1 };
  s2 -> s1 [45, 45] { R1828 += 1 };
  s2 -> s2 [46, 46] { R1828 += 1 };
  s2 -> s1 [48, 62] { R1828 += 1 };
  s2 -> s3 [65, 65] { R1828 += 1 };
  s2 -> s1 [66, 114] { R1828 += 1 };
  s2 -> s8 [115, 115] { R1828 += 1 };
  s2 -> s1 [116, 65535] { R1828 += 1 };
  s3 -> s3 [0, 43] { R1828 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1828 += 1 };
  s3 -> s4 [46, 46] { R1828 += 1 };
  s3 -> s3 [48, 62] { R1828 += 1 };
  s3 -> s3 [65, 65535] { R1828 += 1 };
  s4 -> s3 [0, 43] { R1828 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1828 += 1 };
  s4 -> s4 [46, 46] { R1828 += 1 };
  s4 -> s3 [48, 62] { R1828 += 1 };
  s4 -> s3 [65, 114] { R1828 += 1 };
  s4 -> s5 [115, 115] { R1828 += 1 };
  s4 -> s3 [116, 65535] { R1828 += 1 };
  s5 -> s3 [0, 43] { R1828 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1828 += 1 };
  s5 -> s4 [46, 46] { R1828 += 1 };
  s5 -> s3 [48, 62] { R1828 += 1 };
  s5 -> s3 [65, 110] { R1828 += 1 };
  s5 -> s6 [111, 111] { R1828 += 1 };
  s5 -> s3 [112, 65535] { R1828 += 1 };
  s6 -> s3 [0, 43] { R1828 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1828 += 1 };
  s6 -> s4 [46, 46] { R1828 += 1 };
  s6 -> s3 [48, 62] { R1828 += 1 };
  s6 -> s3 [65, 98] { R1828 += 1 };
  s6 -> s7 [99, 99] { R1828 += 1 };
  s6 -> s3 [100, 65535] { R1828 += 1 };
  s7 -> s3 [0, 43] { R1828 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1828 += 1 };
  s7 -> s4 [46, 46] { R1828 += 1 };
  s7 -> s3 [48, 62] { R1828 += 1 };
  s7 -> s3 [65, 106] { R1828 += 1 };
  s7 -> s3 [108, 65535] { R1828 += 1 };
  s8 -> s1 [0, 43] { R1828 += 1 };
  s8 -> s1 [45, 45] { R1828 += 1 };
  s8 -> s2 [46, 46] { R1828 += 1 };
  s8 -> s1 [48, 62] { R1828 += 1 };
  s8 -> s3 [65, 65] { R1828 += 1 };
  s8 -> s1 [66, 110] { R1828 += 1 };
  s8 -> s9 [111, 111] { R1828 += 1 };
  s8 -> s1 [112, 65535] { R1828 += 1 };
  s9 -> s1 [0, 43] { R1828 += 1 };
  s9 -> s1 [45, 45] { R1828 += 1 };
  s9 -> s2 [46, 46] { R1828 += 1 };
  s9 -> s1 [48, 62] { R1828 += 1 };
  s9 -> s3 [65, 65] { R1828 += 1 };
  s9 -> s1 [66, 98] { R1828 += 1 };
  s9 -> s10 [99, 99] { R1828 += 1 };
  s9 -> s1 [100, 65535] { R1828 += 1 };
  s10 -> s1 [0, 43] { R1828 += 1 };
  s10 -> s1 [45, 45] { R1828 += 1 };
  s10 -> s2 [46, 46] { R1828 += 1 };
  s10 -> s1 [48, 62] { R1828 += 1 };
  s10 -> s3 [65, 65] { R1828 += 1 };
  s10 -> s1 [66, 106] { R1828 += 1 };
  s10 -> s1 [108, 65535] { R1828 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1830 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1829 += 1, R1830 += 1 };
  s1 -> s1 [0, 65535] { R1830 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1832 += 1 };
  s0 -> s2 [0, 65535] { R1832 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1831 += 1, R1832 += 1 };
  s0 -> s3 [58, 58] { R1832 += 1 };
  s0 -> s1 [59, 65535] { R1832 += 1 };
  s1 -> s1 [0, 57] { R1832 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1832 += 1 };
  s1 -> s1 [59, 65535] { R1832 += 1 };
  s2 -> s1 [0, 57] { R1832 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1832 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R1832 += 1 };
  s2 -> s1 [59, 65535] { R1832 += 1 };
  s3 -> s3 [0, 65535] { R1832 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1834 += 1 };
  s0 -> s2 [0, 65535] { R1834 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1833 += 1, R1834 += 1 };
  s0 -> s3 [65, 65] { R1834 += 1 };
  s0 -> s1 [66, 65535] { R1834 += 1 };
  s1 -> s1 [0, 64] { R1834 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1834 += 1 };
  s1 -> s1 [66, 65535] { R1834 += 1 };
  s2 -> s1 [0, 64] { R1834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1834 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R1834 += 1 };
  s2 -> s1 [66, 65535] { R1834 += 1 };
  s3 -> s3 [0, 65535] { R1834 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1836 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1835 += 1, R1836 += 1 };
  s0 -> s2 [0, 65535] { R1836 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R1836 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1836 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R1836 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1836 += 1 };
  s2 -> s1 [0, 90] { R1836 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1836 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R1836 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1836 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1836 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1836 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1837 += 1, R1838 += 1 };
  s0 -> s1 [0, 65535] { R1838 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1838 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1838 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R1838 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1838 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1838 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1838 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1840 += 1, R1790 += 1 };
  s0 -> s2 [0, 65535] { R1840 += 1, R1789 += 1, R1790 += 1 };
  s0 -> s0 [0, 65535] { R1839 += 1, R1840 += 1 };
  s0 -> s1 [66, 65535] { R1840 += 1, R1790 += 1 };
  s1 -> s1 [0, 64] { R1840 += 1, R1790 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1840 += 1 };
  s1 -> s1 [66, 65535] { R1840 += 1, R1790 += 1 };
  s2 -> s1 [0, 64] { R1840 += 1, R1790 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1840 += 1, R1789 += 1, R1790 += 1 };
  s2 -> s1 [66, 65535] { R1840 += 1, R1790 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1841 += 1, R1842 += 1 };
  s0 -> s1 [0, 65535] { R1842 += 1, R1792 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R1842 += 1, R1791 += 1, R1792 += 1 };
  s1 -> s1 [0, 65535] { R1842 += 1, R1792 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1842 += 1 };
  s2 -> s1 [0, 65535] { R1842 += 1, R1792 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1842 += 1, R1791 += 1, R1792 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1842 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1844 += 1, R1794 += 1 };
  s0 -> s2 [0, 65535] { R1844 += 1, R1793 += 1, R1794 += 1 };
  s0 -> s0 [0, 65535] { R1843 += 1, R1844 += 1 };
  s0 -> s1 [87, 65535] { R1844 += 1, R1794 += 1 };
  s1 -> s1 [0, 65] { R1844 += 1, R1794 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1844 += 1 };
  s1 -> s1 [87, 65535] { R1844 += 1, R1794 += 1 };
  s2 -> s1 [0, 65] { R1844 += 1, R1794 += 1 };
  s2 -> s2 [0, 65535] { R1844 += 1, R1793 += 1, R1794 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R1844 += 1, R1794 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1846 += 1, R1795 += 1, R1796 += 1 };
  s0 -> s0 [0, 65535] { R1845 += 1, R1846 += 1 };
  s0 -> s2 [0, 65535] { R1846 += 1, R1796 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1846 += 1, R1795 += 1, R1796 += 1 };
  s1 -> s2 [0, 65535] { R1846 += 1, R1796 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535] { R1846 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1846 += 1, R1796 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535] { R1846 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R1848 += 1, R1798 += 1 };
  s0 -> s0 [0, 65535] { R1847 += 1, R1848 += 1 };
  s0 -> s2 [0, 65535] { R1848 += 1, R1798 += 1, R1772 += 1 };
  s0 -> s3 [0, 65535] { R1848 += 1, R1797 += 1, R1798 += 1 };
  s0 -> s1 [88, 65535] { R1848 += 1, R1798 += 1 };
  s1 -> s1 [0, 86] { R1848 += 1, R1798 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1848 += 1 };
  s1 -> s1 [88, 65535] { R1848 += 1, R1798 += 1 };
  s2 -> s1 [0, 86] { R1848 += 1, R1798 += 1 };
  s2 -> s5 [0, 65535] { R1848 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1848 += 1, R1798 += 1, R1772 += 1 };
  s2 -> s1 [88, 65535] { R1848 += 1, R1798 += 1 };
  s3 -> s1 [0, 86] { R1848 += 1, R1798 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1848 += 1, R1798 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R1848 += 1, R1797 += 1, R1798 += 1 };
  s3 -> s1 [88, 65535] { R1848 += 1, R1798 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1848 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s0 -> s2 [0, 65535] { R1850 += 1, R1800 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s3 [0, 65535] { R1850 += 1, R1799 += 1, R1800 += 1 };
  s0 -> s0 [0, 65535] { R1849 += 1, R1850 += 1 };
  s0 -> s1 [88, 65535] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s1 -> s1 [0, 86] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1850 += 1 };
  s1 -> s1 [0, 65535] { R1850 += 1, R1800 += 1 };
  s1 -> s1 [88, 65535] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s2 -> s1 [0, 86] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s2 -> s2 [0, 65535] { R1850 += 1, R1800 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1850 += 1 };
  s2 -> s1 [88, 65535] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s3 -> s1 [0, 86] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s3 -> s2 [0, 65535] { R1850 += 1, R1800 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1850 += 1, R1799 += 1, R1800 += 1 };
  s3 -> s1 [88, 65535] { R1850 += 1, R1800 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1850 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1852 += 1, R1802 += 1, R1780 += 1, R1781 += 1 };
  s0 -> s2 [0, 65535] { R1852 += 1, R1802 += 1, R1781 += 1, R1782 += 1 };
  s0 -> s0 [0, 65535] { R1851 += 1, R1852 += 1 };
  s0 -> s3 [0, 65535] { R1852 += 1, R1801 += 1, R1802 += 1 };
  s1 -> s5 [0, 65535] { R1852 += 1 };
  s1 -> s1 [0, 65535] { R1852 += 1, R1802 += 1, R1780 += 1, R1781 += 1 };
  s1 -> s2 [0, 65535] { R1852 += 1, R1802 += 1, R1781 += 1, R1782 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1852 += 1 };
  s2 -> s2 [0, 65535] { R1852 += 1, R1802 += 1, R1781 += 1, R1782 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1852 += 1, R1802 += 1 };
  s3 -> s1 [0, 65535] { R1852 += 1, R1802 += 1, R1780 += 1, R1781 += 1 };
  s3 -> s2 [0, 65535] { R1852 += 1, R1802 += 1, R1781 += 1, R1782 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1852 += 1, R1801 += 1, R1802 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1852 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1852 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1852 += 1, R1802 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1853 += 1, R1854 += 1 };
  s0 -> s1 [0, 65535] { R1854 += 1, R1804 += 1 };
  s0 -> s2 [0, 65535] { R1854 += 1, R1803 += 1, R1804 += 1 };
  s1 -> s1 [0, 65535] { R1854 += 1, R1804 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1854 += 1 };
  s2 -> s1 [0, 65535] { R1854 += 1, R1804 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1854 += 1, R1803 += 1, R1804 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1854 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1856 += 1, R1806 += 1, R1786 += 1, R1787 += 1 };
  s0 -> s2 [0, 65535] { R1856 += 1, R1806 += 1, R1787 += 1, R1788 += 1 };
  s0 -> s3 [0, 65535] { R1856 += 1, R1805 += 1, R1806 += 1 };
  s0 -> s0 [0, 65535] { R1855 += 1, R1856 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1856 += 1 };
  s1 -> s1 [0, 65535] { R1856 += 1, R1806 += 1, R1786 += 1, R1787 += 1 };
  s1 -> s2 [0, 65535] { R1856 += 1, R1806 += 1, R1787 += 1, R1788 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1856 += 1, R1806 += 1 };
  s2 -> s6 [0, 65535] { R1856 += 1 };
  s2 -> s2 [0, 65535] { R1856 += 1, R1806 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1856 += 1, R1806 += 1, R1786 += 1, R1787 += 1 };
  s3 -> s2 [0, 65535] { R1856 += 1, R1806 += 1, R1787 += 1, R1788 += 1 };
  s3 -> s3 [0, 65535] { R1856 += 1, R1805 += 1, R1806 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1856 += 1, R1806 += 1 };
  s5 -> s6 [0, 65535] { R1856 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1856 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1858 += 1, R1807 += 1, R1808 += 1 };
  s0 -> s2 [0, 65535] { R1858 += 1, R1808 += 1 };
  s0 -> s0 [0, 65535] { R1857 += 1, R1858 += 1 };
  s1 -> s1 [0, 65535] { R1858 += 1, R1807 += 1, R1808 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1858 += 1, R1808 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1858 += 1, R1808 += 1 };
  s2 -> s4 [0, 65535] { R1858 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1858 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1860 += 1, R1809 += 1, R1810 += 1 };
  s0 -> s2 [0, 65535] { R1860 += 1, R1810 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1859 += 1, R1860 += 1 };
  s1 -> s1 [0, 65535] { R1860 += 1, R1809 += 1, R1810 += 1 };
  s1 -> s2 [0, 65535] { R1860 += 1, R1810 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1860 += 1, R1810 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1860 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1860 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1862 += 1, R1812 += 1 };
  s0 -> s2 [0, 65535] { R1862 += 1, R1811 += 1, R1812 += 1 };
  s0 -> s0 [0, 65535] { R1861 += 1, R1862 += 1 };
  s0 -> s3 [65, 65] { R1862 += 1, R1812 += 1 };
  s0 -> s4 [65, 65] { R1862 += 1, R1812 += 1 };
  s0 -> s5 [87, 87] { R1862 += 1, R1812 += 1 };
  s0 -> s1 [88, 65535] { R1862 += 1, R1812 += 1 };
  s1 -> s1 [0, 64] { R1862 += 1, R1812 += 1 };
  s1 -> s3 [65, 65] { R1862 += 1, R1812 += 1 };
  s1 -> s4 [65, 65] { R1862 += 1, R1812 += 1 };
  s1 -> s5 [87, 87] { R1862 += 1, R1812 += 1 };
  s1 -> s1 [88, 65535] { R1862 += 1, R1812 += 1 };
  s2 -> s1 [0, 64] { R1862 += 1, R1812 += 1 };
  s2 -> s2 [0, 65535] { R1862 += 1, R1811 += 1, R1812 += 1 };
  s2 -> s3 [65, 65] { R1862 += 1, R1812 += 1 };
  s2 -> s4 [65, 65] { R1862 += 1, R1812 += 1 };
  s2 -> s5 [87, 87] { R1862 += 1, R1812 += 1 };
  s2 -> s1 [88, 65535] { R1862 += 1, R1812 += 1 };
  s3 -> s3 [0, 65] { R1862 += 1, R1812 += 1 };
  s3 -> s7 [87, 87] { R1862 += 1, R1812 += 1 };
  s3 -> s3 [88, 65535] { R1862 += 1, R1812 += 1 };
  s5 -> s5 [0, 64] { R1862 += 1, R1812 += 1 };
  s5 -> s5 [0, 65535] { R1862 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R1862 += 1, R1812 += 1 };
  s5 -> s8 [65, 65] { R1862 += 1, R1812 += 1 };
  s5 -> s5 [87, 65535] { R1862 += 1, R1812 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R1862 += 1, R1812 += 1 };
  s7 -> s7 [0, 65535] { R1862 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R1862 += 1, R1812 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1862 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R1863 += 1, R1864 += 1 };
  s0 -> s2 [0, 65535] { R1864 += 1, R1813 += 1, R1814 += 1 };
  s0 -> s3 [65, 65] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R1864 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R1864 += 1, R1813 += 1, R1814 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R1864 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1864 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1864 += 1, R1814 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535] { R1864 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R1865 += 1, R1866 += 1 };
  s0 -> s2 [0, 65535] { R1866 += 1, R1815 += 1, R1816 += 1 };
  s0 -> s3 [65, 65] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R1866 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R1866 += 1, R1815 += 1, R1816 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R1866 += 1, R1816 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R1866 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1866 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1866 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s2 [0, 65535] { R1868 += 1, R1817 += 1, R1818 += 1 };
  s0 -> s0 [0, 65535] { R1867 += 1, R1868 += 1 };
  s0 -> s3 [65, 65] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 65535] { R1868 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R1868 += 1, R1817 += 1, R1818 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s3 [0, 65535] { R1868 += 1, R1818 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s6 [0, 65535] { R1868 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1868 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1868 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s2 [0, 65535] { R1870 += 1, R1819 += 1, R1820 += 1 };
  s0 -> s0 [0, 65535] { R1869 += 1, R1870 += 1 };
  s0 -> s3 [65, 65] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s4 [65, 65] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s1 [66, 65535] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 64] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1870 += 1 };
  s1 -> s3 [65, 65] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s4 [65, 65] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [66, 65535] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [0, 64] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [0, 65535] { R1870 += 1, R1819 += 1, R1820 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s4 [65, 65] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [66, 65535] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s3 [0, 65535] { R1870 += 1, R1820 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1870 += 1 };
  s4 -> s4 [0, 65535] { R1870 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1870 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1872 += 1, R1822 += 1 };
  s0 -> s2 [0, 65535] { R1872 += 1, R1821 += 1, R1822 += 1 };
  s0 -> s0 [0, 65535] { R1871 += 1, R1872 += 1 };
  s0 -> s3 [65, 65] { R1872 += 1, R1822 += 1 };
  s0 -> s4 [65, 65] { R1872 += 1, R1822 += 1 };
  s0 -> s1 [66, 65535] { R1872 += 1, R1822 += 1 };
  s1 -> s1 [0, 64] { R1872 += 1, R1822 += 1 };
  s1 -> s1 [0, 65535] { R1872 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1872 += 1, R1822 += 1 };
  s1 -> s4 [65, 65] { R1872 += 1, R1822 += 1 };
  s1 -> s1 [66, 65535] { R1872 += 1, R1822 += 1 };
  s2 -> s1 [0, 64] { R1872 += 1, R1822 += 1 };
  s2 -> s2 [0, 65535] { R1872 += 1, R1821 += 1, R1822 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1872 += 1, R1822 += 1 };
  s2 -> s4 [65, 65] { R1872 += 1, R1822 += 1 };
  s2 -> s1 [66, 65535] { R1872 += 1, R1822 += 1 };
  s3 -> s3 [0, 65535] { R1872 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1872 += 1 };
  s4 -> s4 [0, 65535] { R1872 += 1, R1822 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1872 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s0 -> s0 [0, 65535] { R1873 += 1, R1874 += 1 };
  s0 -> s2 [0, 65535] { R1874 += 1, R1823 += 1, R1824 += 1 };
  s0 -> s3 [65, 65] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s0 -> s4 [65, 65] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s0 -> s1 [66, 65535] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s1 -> s1 [0, 64] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s1 -> s1 [0, 65535] { R1874 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s1 -> s4 [65, 65] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s1 -> s1 [66, 65535] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s2 -> s1 [0, 64] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s2 -> s2 [0, 65535] { R1874 += 1, R1823 += 1, R1824 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s2 -> s4 [65, 65] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s2 -> s1 [66, 65535] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s3 -> s3 [0, 65535] { R1874 += 1, R1824 += 1, R1783 += 1, R1784 += 1 };
  s3 -> s6 [0, 65535] { R1874 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1874 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1874 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1876 += 1, R1826 += 1 };
  s0 -> s0 [0, 65535] { R1875 += 1, R1876 += 1 };
  s0 -> s2 [0, 65535] { R1876 += 1, R1825 += 1, R1826 += 1 };
  s0 -> s3 [65, 65] { R1876 += 1, R1826 += 1 };
  s0 -> s4 [65, 65] { R1876 += 1, R1826 += 1 };
  s0 -> s1 [66, 65535] { R1876 += 1, R1826 += 1 };
  s1 -> s1 [0, 64] { R1876 += 1, R1826 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1876 += 1 };
  s1 -> s3 [65, 65] { R1876 += 1, R1826 += 1 };
  s1 -> s4 [65, 65] { R1876 += 1, R1826 += 1 };
  s1 -> s1 [66, 65535] { R1876 += 1, R1826 += 1 };
  s2 -> s1 [0, 64] { R1876 += 1, R1826 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1876 += 1, R1825 += 1, R1826 += 1 };
  s2 -> s3 [65, 65] { R1876 += 1, R1826 += 1 };
  s2 -> s4 [65, 65] { R1876 += 1, R1826 += 1 };
  s2 -> s1 [66, 65535] { R1876 += 1, R1826 += 1 };
  s3 -> s3 [0, 65535] { R1876 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1876 += 1, R1826 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1876 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1876 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1808 && R2 = R1876 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R1789 = 0 && R1790 = R1808 && R1791 = 0 && R1792 = R1808 && R1793 = 0 && R1794 = R1808 && R1795 = 0 && R1796 = R1808 && R1797 = 0 && R1798 = R1808 && R1799 = 0 && R1800 = R1808 && R1801 = 0 && R1802 = R1808 && R1803 = 0 && R1804 = R1808 && R1805 = 0 && R1806 = R1808 && R1807 = 0 && R1811 = 0 && R1812 = 0 && R1827 = 10 && R1828 = R1876 && R1829 = 10 && R1830 = R1876 && R1831 = 10 && R1832 = R1876 && R1833 = 10 && R1834 = R1876 && R1835 = 10 && R1836 = R1876 && R1837 = 10 && R1838 = R1876 && R1839 = 10 && R1840 = R1876 && R1841 = 10 && R1842 = R1876 && R1843 = 10 && R1844 = R1876 && R1845 = 10 && R1846 = R1876 && R1847 = 10 && R1848 = R1876 && R1849 = 10 && R1850 = R1876 && R1851 = 10 && R1852 = R1876 && R1853 = 10 && R1854 = R1876 && R1855 = 10 && R1856 = R1876 && R1857 = 10 && R1858 = R1876 && R1859 = 10 && R1860 = R1876 && R1861 = 10 && R1862 = R1876 && R1863 = 10 && R1864 = R1876 && R1865 = 10 && R1866 = R1876 && R1867 = 10 && R1868 = R1876 && R1869 = 10 && R1870 = R1876 && R1871 = 10 && R1872 = R1876 && R1873 = 10 && R1874 = R1876 && R1875 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R1808 && 9 < R1876 && (R14 = 0 || (R1809 = 0 && R1810 = 0)) && (R14 = 0 || (R1813 = 0 && R1814 = 0)) && (R14 = 0 || (R1815 = 0 && R1816 = 0)) && (R14 = 0 || (R1817 = 0 && R1818 = 0)) && (R14 = 0 || (R1819 = 0 && R1820 = 0)) && (R14 = 0 || (R1821 = 0 && R1822 = 0)) && (R14 = 0 || (R1823 = 0 && R1824 = 0)) && (R14 = 0 || (R1825 = 0 && R1826 = 0)) && (R1782 + R1779 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R1782 + R1779 = 0 || (R1780 + R1777 = 0 && R1781 + R1778 = 0)) && (R1788 + R1785 = 0 || (R1786 + R1783 = 0 && R1787 + R1784 = 0));
// End of Parikh automata intersection problem
