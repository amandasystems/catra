// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R2933, R2934, R2935, R2936, R2937, R2938, R3, R3033, R3034, R3035, R3036, R3037, R3038, R3039, R3040, R3041, R3042, R3043, R3044, R3045, R3046, R3047, R3048, R3049, R3050, R3051, R3052, R3053, R3054, R3055, R3056, R3057, R3058, R3059, R3060, R3061, R3062, R3063, R3064, R3065, R3066, R3067, R3068, R3069, R3070, R3071, R3072, R3073, R3074, R3075, R3076, R3077, R3078, R3079, R3080, R3081, R3082, R3083, R3084, R3085, R3086, R3087, R3088, R3089, R3090, R3091, R3092, R3093, R3094, R3095, R3096, R3097, R3098, R3099, R3100, R3101, R3102, R3103, R3104, R3105, R3106, R3107, R3108, R3109, R3110, R3111, R3112, R3113, R3114, R3115, R3116, R3117, R3118, R3119, R3120, R3121, R3122, R3123, R3124, R3125, R3126, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3078 += 1 };
  s0 -> s0 [0, 65535] { R3077 += 1, R3078 += 1 };
  s0 -> s1 [45, 45] { R3078 += 1 };
  s0 -> s2 [46, 46] { R3078 += 1 };
  s0 -> s1 [48, 62] { R3078 += 1 };
  s0 -> s3 [65, 65] { R3078 += 1 };
  s0 -> s1 [66, 65535] { R3078 += 1 };
  s1 -> s1 [0, 43] { R3078 += 1 };
  s1 -> s1 [45, 45] { R3078 += 1 };
  s1 -> s2 [46, 46] { R3078 += 1 };
  s1 -> s1 [48, 62] { R3078 += 1 };
  s1 -> s3 [65, 65] { R3078 += 1 };
  s1 -> s1 [66, 65535] { R3078 += 1 };
  s2 -> s1 [0, 43] { R3078 += 1 };
  s2 -> s1 [45, 45] { R3078 += 1 };
  s2 -> s2 [46, 46] { R3078 += 1 };
  s2 -> s1 [48, 62] { R3078 += 1 };
  s2 -> s3 [65, 65] { R3078 += 1 };
  s2 -> s1 [66, 114] { R3078 += 1 };
  s2 -> s8 [115, 115] { R3078 += 1 };
  s2 -> s1 [116, 65535] { R3078 += 1 };
  s3 -> s3 [0, 43] { R3078 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3078 += 1 };
  s3 -> s4 [46, 46] { R3078 += 1 };
  s3 -> s3 [48, 62] { R3078 += 1 };
  s3 -> s3 [65, 65535] { R3078 += 1 };
  s4 -> s3 [0, 43] { R3078 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3078 += 1 };
  s4 -> s4 [46, 46] { R3078 += 1 };
  s4 -> s3 [48, 62] { R3078 += 1 };
  s4 -> s3 [65, 114] { R3078 += 1 };
  s4 -> s5 [115, 115] { R3078 += 1 };
  s4 -> s3 [116, 65535] { R3078 += 1 };
  s5 -> s3 [0, 43] { R3078 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3078 += 1 };
  s5 -> s4 [46, 46] { R3078 += 1 };
  s5 -> s3 [48, 62] { R3078 += 1 };
  s5 -> s3 [65, 110] { R3078 += 1 };
  s5 -> s6 [111, 111] { R3078 += 1 };
  s5 -> s3 [112, 65535] { R3078 += 1 };
  s6 -> s3 [0, 43] { R3078 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3078 += 1 };
  s6 -> s4 [46, 46] { R3078 += 1 };
  s6 -> s3 [48, 62] { R3078 += 1 };
  s6 -> s3 [65, 98] { R3078 += 1 };
  s6 -> s7 [99, 99] { R3078 += 1 };
  s6 -> s3 [100, 65535] { R3078 += 1 };
  s7 -> s3 [0, 43] { R3078 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3078 += 1 };
  s7 -> s4 [46, 46] { R3078 += 1 };
  s7 -> s3 [48, 62] { R3078 += 1 };
  s7 -> s3 [65, 106] { R3078 += 1 };
  s7 -> s3 [108, 65535] { R3078 += 1 };
  s8 -> s1 [0, 43] { R3078 += 1 };
  s8 -> s1 [45, 45] { R3078 += 1 };
  s8 -> s2 [46, 46] { R3078 += 1 };
  s8 -> s1 [48, 62] { R3078 += 1 };
  s8 -> s3 [65, 65] { R3078 += 1 };
  s8 -> s1 [66, 110] { R3078 += 1 };
  s8 -> s9 [111, 111] { R3078 += 1 };
  s8 -> s1 [112, 65535] { R3078 += 1 };
  s9 -> s1 [0, 43] { R3078 += 1 };
  s9 -> s1 [45, 45] { R3078 += 1 };
  s9 -> s2 [46, 46] { R3078 += 1 };
  s9 -> s1 [48, 62] { R3078 += 1 };
  s9 -> s3 [65, 65] { R3078 += 1 };
  s9 -> s1 [66, 98] { R3078 += 1 };
  s9 -> s10 [99, 99] { R3078 += 1 };
  s9 -> s1 [100, 65535] { R3078 += 1 };
  s10 -> s1 [0, 43] { R3078 += 1 };
  s10 -> s1 [45, 45] { R3078 += 1 };
  s10 -> s2 [46, 46] { R3078 += 1 };
  s10 -> s1 [48, 62] { R3078 += 1 };
  s10 -> s3 [65, 65] { R3078 += 1 };
  s10 -> s1 [66, 106] { R3078 += 1 };
  s10 -> s1 [108, 65535] { R3078 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3079 += 1, R3080 += 1 };
  s0 -> s1 [0, 65535] { R3080 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R3080 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3082 += 1 };
  s0 -> s0 [0, 65535] { R3081 += 1, R3082 += 1 };
  s0 -> s2 [0, 65535] { R3082 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R3082 += 1 };
  s0 -> s1 [59, 65535] { R3082 += 1 };
  s1 -> s1 [0, 57] { R3082 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3082 += 1 };
  s1 -> s1 [59, 65535] { R3082 += 1 };
  s2 -> s1 [0, 57] { R3082 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3082 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R3082 += 1 };
  s2 -> s1 [59, 65535] { R3082 += 1 };
  s3 -> s3 [0, 65535] { R3082 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3084 += 1 };
  s0 -> s2 [0, 65535] { R3084 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3083 += 1, R3084 += 1 };
  s0 -> s3 [65, 65] { R3084 += 1 };
  s0 -> s1 [66, 65535] { R3084 += 1 };
  s1 -> s1 [0, 64] { R3084 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3084 += 1 };
  s1 -> s1 [66, 65535] { R3084 += 1 };
  s2 -> s1 [0, 64] { R3084 += 1 };
  s2 -> s2 [0, 65535] { R3084 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3084 += 1 };
  s2 -> s1 [66, 65535] { R3084 += 1 };
  s3 -> s3 [0, 65535] { R3084 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3086 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R3086 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3085 += 1, R3086 += 1 };
  s0 -> s3 [91, 91] { R3086 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3086 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R3086 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R3086 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R3086 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3086 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3086 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3086 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3086 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3086 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3087 += 1, R3088 += 1 };
  s0 -> s1 [0, 65535] { R3088 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R3088 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R3088 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3088 += 1 };
  s2 -> s1 [0, 65535] { R3088 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3088 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3088 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3090 += 1, R3040 += 1 };
  s0 -> s2 [0, 65535] { R3090 += 1, R3039 += 1, R3040 += 1 };
  s0 -> s0 [0, 65535] { R3089 += 1, R3090 += 1 };
  s0 -> s1 [66, 65535] { R3090 += 1, R3040 += 1 };
  s1 -> s1 [0, 64] { R3090 += 1, R3040 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3090 += 1 };
  s1 -> s1 [66, 65535] { R3090 += 1, R3040 += 1 };
  s2 -> s1 [0, 64] { R3090 += 1, R3040 += 1 };
  s2 -> s2 [0, 65535] { R3090 += 1, R3039 += 1, R3040 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3090 += 1, R3040 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3092 += 1, R3041 += 1, R3042 += 1 };
  s0 -> s2 [0, 65535] { R3092 += 1, R3042 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R3091 += 1, R3092 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3092 += 1, R3041 += 1, R3042 += 1 };
  s1 -> s2 [0, 65535] { R3092 += 1, R3042 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3092 += 1 };
  s2 -> s2 [0, 65535] { R3092 += 1, R3042 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3092 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3094 += 1, R3044 += 1 };
  s0 -> s2 [0, 65535] { R3094 += 1, R3043 += 1, R3044 += 1 };
  s0 -> s0 [0, 65535] { R3093 += 1, R3094 += 1 };
  s0 -> s1 [87, 65535] { R3094 += 1, R3044 += 1 };
  s1 -> s1 [0, 65] { R3094 += 1, R3044 += 1 };
  s1 -> s1 [0, 65535] { R3094 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R3094 += 1, R3044 += 1 };
  s2 -> s1 [0, 65] { R3094 += 1, R3044 += 1 };
  s2 -> s2 [0, 65535] { R3094 += 1, R3043 += 1, R3044 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R3094 += 1, R3044 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3096 += 1, R3046 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R3096 += 1, R3045 += 1, R3046 += 1 };
  s0 -> s0 [0, 65535] { R3095 += 1, R3096 += 1 };
  s1 -> s1 [0, 65535] { R3096 += 1, R3046 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R3096 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3096 += 1, R3046 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R3096 += 1, R3045 += 1, R3046 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3096 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R3098 += 1, R3048 += 1 };
  s0 -> s2 [0, 65535] { R3098 += 1, R3047 += 1, R3048 += 1 };
  s0 -> s3 [0, 65535] { R3098 += 1, R3048 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R3097 += 1, R3098 += 1 };
  s0 -> s1 [88, 65535] { R3098 += 1, R3048 += 1 };
  s1 -> s1 [0, 86] { R3098 += 1, R3048 += 1 };
  s1 -> s1 [0, 65535] { R3098 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R3098 += 1, R3048 += 1 };
  s2 -> s1 [0, 86] { R3098 += 1, R3048 += 1 };
  s2 -> s2 [0, 65535] { R3098 += 1, R3047 += 1, R3048 += 1 };
  s2 -> s3 [0, 65535] { R3098 += 1, R3048 += 1, R1772 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R3098 += 1, R3048 += 1 };
  s3 -> s1 [0, 86] { R3098 += 1, R3048 += 1 };
  s3 -> s3 [0, 65535] { R3098 += 1, R3048 += 1, R1772 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3098 += 1 };
  s3 -> s1 [88, 65535] { R3098 += 1, R3048 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3098 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R3100 += 1, R3050 += 1, R2644 += 1 };
  s0 -> s2 [0, 65535] { R3100 += 1, R3049 += 1, R3050 += 1 };
  s0 -> s1 [0, 65535] { R3100 += 1, R3050 += 1 };
  s0 -> s0 [0, 65535] { R3099 += 1, R3100 += 1 };
  s0 -> s1 [88, 65535] { R3100 += 1, R3050 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R3100 += 1, R3050 += 1, R2644 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3100 += 1 };
  s1 -> s1 [0, 65535] { R3100 += 1, R3050 += 1 };
  s1 -> s1 [88, 65535] { R3100 += 1, R3050 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R3100 += 1, R3050 += 1, R2644 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3100 += 1, R3049 += 1, R3050 += 1 };
  s2 -> s1 [0, 65535] { R3100 += 1, R3050 += 1 };
  s2 -> s1 [88, 65535] { R3100 += 1, R3050 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3100 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3102 += 1, R3052 += 1 };
  s0 -> s2 [0, 65535] { R3102 += 1, R3052 += 1, R2937 += 1, R2938 += 1 };
  s0 -> s0 [0, 65535] { R3101 += 1, R3102 += 1 };
  s0 -> s3 [0, 65535] { R3102 += 1, R3051 += 1, R3052 += 1 };
  s1 -> s1 [0, 65535] { R3102 += 1, R3052 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3102 += 1 };
  s2 -> s1 [0, 65535] { R3102 += 1, R3052 += 1 };
  s2 -> s2 [0, 65535] { R3102 += 1, R3052 += 1, R2937 += 1, R2938 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3102 += 1 };
  s3 -> s1 [0, 65535] { R3102 += 1, R3052 += 1 };
  s3 -> s2 [0, 65535] { R3102 += 1, R3052 += 1, R2937 += 1, R2938 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3102 += 1, R3051 += 1, R3052 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3102 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3104 += 1, R3054 += 1 };
  s0 -> s0 [0, 65535] { R3103 += 1, R3104 += 1 };
  s0 -> s2 [0, 65535] { R3104 += 1, R3053 += 1, R3054 += 1 };
  s1 -> s1 [0, 65535] { R3104 += 1, R3054 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3104 += 1 };
  s2 -> s1 [0, 65535] { R3104 += 1, R3054 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3104 += 1, R3053 += 1, R3054 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3104 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3106 += 1, R3056 += 1, R3037 += 1, R3038 += 1 };
  s0 -> s2 [0, 65535] { R3106 += 1, R3055 += 1, R3056 += 1 };
  s0 -> s3 [0, 65535] { R3106 += 1, R3056 += 1 };
  s0 -> s0 [0, 65535] { R3105 += 1, R3106 += 1 };
  s1 -> s1 [0, 65535] { R3106 += 1, R3056 += 1, R3037 += 1, R3038 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3106 += 1 };
  s1 -> s3 [0, 65535] { R3106 += 1, R3056 += 1 };
  s2 -> s1 [0, 65535] { R3106 += 1, R3056 += 1, R3037 += 1, R3038 += 1 };
  s2 -> s2 [0, 65535] { R3106 += 1, R3055 += 1, R3056 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3106 += 1, R3056 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3106 += 1 };
  s3 -> s3 [0, 65535] { R3106 += 1, R3056 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3106 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3107 += 1, R3108 += 1 };
  s0 -> s1 [0, 65535] { R3108 += 1, R3058 += 1 };
  s0 -> s2 [0, 65535] { R3108 += 1, R3057 += 1, R3058 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3108 += 1 };
  s1 -> s1 [0, 65535] { R3108 += 1, R3058 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3108 += 1, R3058 += 1 };
  s2 -> s2 [0, 65535] { R3108 += 1, R3057 += 1, R3058 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3108 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s0 [0, 65535] { R3109 += 1, R3110 += 1 };
  s0 -> s1 [0, 65535] { R3110 += 1, R3059 += 1, R3060 += 1 };
  s0 -> s2 [0, 65535] { R3110 += 1, R3060 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3110 += 1, R3059 += 1, R3060 += 1 };
  s1 -> s2 [0, 65535] { R3110 += 1, R3060 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R3110 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3110 += 1, R3060 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R3110 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3112 += 1, R3062 += 1 };
  s0 -> s0 [0, 65535] { R3111 += 1, R3112 += 1 };
  s0 -> s2 [0, 65535] { R3112 += 1, R3061 += 1, R3062 += 1 };
  s0 -> s3 [65, 65] { R3112 += 1, R3062 += 1 };
  s0 -> s4 [65, 65] { R3112 += 1, R3062 += 1 };
  s0 -> s5 [87, 87] { R3112 += 1, R3062 += 1 };
  s0 -> s1 [88, 65535] { R3112 += 1, R3062 += 1 };
  s1 -> s1 [0, 64] { R3112 += 1, R3062 += 1 };
  s1 -> s3 [65, 65] { R3112 += 1, R3062 += 1 };
  s1 -> s4 [65, 65] { R3112 += 1, R3062 += 1 };
  s1 -> s5 [87, 87] { R3112 += 1, R3062 += 1 };
  s1 -> s1 [88, 65535] { R3112 += 1, R3062 += 1 };
  s2 -> s1 [0, 64] { R3112 += 1, R3062 += 1 };
  s2 -> s2 [0, 65535] { R3112 += 1, R3061 += 1, R3062 += 1 };
  s2 -> s3 [65, 65] { R3112 += 1, R3062 += 1 };
  s2 -> s4 [65, 65] { R3112 += 1, R3062 += 1 };
  s2 -> s5 [87, 87] { R3112 += 1, R3062 += 1 };
  s2 -> s1 [88, 65535] { R3112 += 1, R3062 += 1 };
  s3 -> s3 [0, 65] { R3112 += 1, R3062 += 1 };
  s3 -> s7 [87, 87] { R3112 += 1, R3062 += 1 };
  s3 -> s3 [88, 65535] { R3112 += 1, R3062 += 1 };
  s5 -> s5 [0, 64] { R3112 += 1, R3062 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3112 += 1 };
  s5 -> s7 [65, 65] { R3112 += 1, R3062 += 1 };
  s5 -> s8 [65, 65] { R3112 += 1, R3062 += 1 };
  s5 -> s5 [87, 65535] { R3112 += 1, R3062 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3112 += 1, R3062 += 1 };
  s7 -> s7 [0, 65535] { R3112 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R3112 += 1, R3062 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3112 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3113 += 1, R3114 += 1 };
  s0 -> s2 [0, 65535] { R3114 += 1, R3063 += 1, R3064 += 1 };
  s0 -> s3 [65, 65] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3114 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3114 += 1, R3063 += 1, R3064 += 1 };
  s2 -> s3 [65, 65] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3114 += 1, R3064 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3114 += 1 };
  s4 -> s4 [0, 65535] { R3114 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3114 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R3116 += 1, R3065 += 1, R3066 += 1 };
  s0 -> s0 [0, 65535] { R3115 += 1, R3116 += 1 };
  s0 -> s3 [65, 65] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3116 += 1 };
  s1 -> s3 [65, 65] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3116 += 1, R3065 += 1, R3066 += 1 };
  s2 -> s3 [65, 65] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R3116 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3116 += 1, R3066 += 1, R1771 += 1 };
  s4 -> s6 [0, 65535] { R3116 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3116 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R3118 += 1, R3067 += 1, R3068 += 1 };
  s0 -> s0 [0, 65535] { R3117 += 1, R3118 += 1 };
  s0 -> s4 [65, 65] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [66, 86] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s0 -> s2 [66, 65535] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [88, 65535] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s1 -> s1 [0, 65535] { R3118 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R3118 += 1, R3068 += 1 };
  s1 -> s6 [65, 65] { R3118 += 1, R3068 += 1 };
  s1 -> s1 [66, 86] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R3118 += 1, R3068 += 1 };
  s1 -> s1 [88, 65535] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s2 -> s1 [0, 64] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s4 [65, 65] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s5 [65, 65] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s2 -> s6 [65, 65] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s2 -> s7 [65, 65] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [66, 86] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [88, 65535] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R3118 += 1, R3067 += 1, R3068 += 1 };
  s3 -> s4 [65, 65] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [66, 86] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s3 -> s2 [66, 65535] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [88, 65535] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s4 -> s5 [0, 86] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R3118 += 1, R3068 += 1, R2641 += 1, R2642 += 1 };
  s4 -> s5 [88, 65535] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s5 -> s5 [0, 86] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s5 -> s9 [0, 65535] { R3118 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R3118 += 1, R3068 += 1 };
  s5 -> s5 [88, 65535] { R3118 += 1, R3068 += 1, R2642 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R3118 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3118 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s5, s9, s6, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s2 [0, 64] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s3 [0, 65535] { R3120 += 1, R3069 += 1, R3070 += 1 };
  s0 -> s0 [0, 65535] { R3119 += 1, R3120 += 1 };
  s0 -> s4 [65, 65] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s5 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s6 [65, 65] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s7 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s1 [66, 65535] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s2 [66, 65535] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s1 [0, 64] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R3120 += 1 };
  s1 -> s5 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s7 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s1 [66, 65535] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s1 [0, 64] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [0, 64] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s2 -> s4 [65, 65] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s2 -> s5 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s6 [65, 65] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s2 -> s7 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s1 [66, 65535] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [66, 65535] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s1 [0, 64] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s2 [0, 64] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s3 [0, 65535] { R3120 += 1, R3069 += 1, R3070 += 1 };
  s3 -> s4 [65, 65] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s5 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s6 [65, 65] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s7 [65, 65] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s1 [66, 65535] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s2 [66, 65535] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s4 -> s4 [0, 65535] { R3120 += 1, R3070 += 1, R2933 += 1, R2934 += 1 };
  s4 -> s7 [0, 65535] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s5 -> s5 [0, 65535] { R3120 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R3120 += 1 };
  s7 -> s7 [0, 65535] { R3120 += 1, R3070 += 1, R2934 += 1, R2935 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3120 += 1 };
  accepting s8, s5, s9, s1, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3122 += 1, R3072 += 1 };
  s0 -> s0 [0, 65535] { R3121 += 1, R3122 += 1 };
  s0 -> s2 [0, 65535] { R3122 += 1, R3071 += 1, R3072 += 1 };
  s0 -> s3 [65, 65] { R3122 += 1, R3072 += 1 };
  s0 -> s4 [65, 65] { R3122 += 1, R3072 += 1 };
  s0 -> s1 [66, 65535] { R3122 += 1, R3072 += 1 };
  s1 -> s1 [0, 64] { R3122 += 1, R3072 += 1 };
  s1 -> s1 [0, 65535] { R3122 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3122 += 1, R3072 += 1 };
  s1 -> s4 [65, 65] { R3122 += 1, R3072 += 1 };
  s1 -> s1 [66, 65535] { R3122 += 1, R3072 += 1 };
  s2 -> s1 [0, 64] { R3122 += 1, R3072 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3122 += 1, R3071 += 1, R3072 += 1 };
  s2 -> s3 [65, 65] { R3122 += 1, R3072 += 1 };
  s2 -> s4 [65, 65] { R3122 += 1, R3072 += 1 };
  s2 -> s1 [66, 65535] { R3122 += 1, R3072 += 1 };
  s3 -> s3 [0, 65535] { R3122 += 1, R3072 += 1 };
  s3 -> s6 [0, 65535] { R3122 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3122 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3122 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s0 -> s2 [0, 64] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s0 -> s0 [0, 65535] { R3123 += 1, R3124 += 1 };
  s0 -> s3 [0, 65535] { R3124 += 1, R3073 += 1, R3074 += 1 };
  s0 -> s4 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s0 -> s5 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s0 -> s6 [65, 65] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s0 -> s7 [65, 65] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s0 -> s1 [66, 65535] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s0 -> s2 [66, 65535] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s1 -> s1 [0, 64] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s1 -> s2 [0, 64] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s1 -> s4 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s1 -> s5 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s1 -> s6 [65, 65] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s1 -> s7 [65, 65] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s1 -> s1 [66, 65535] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s1 -> s2 [66, 65535] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s2 -> s2 [0, 64] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3124 += 1 };
  s2 -> s4 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s2 -> s5 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s2 -> s2 [66, 65535] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s3 -> s1 [0, 64] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s3 -> s2 [0, 64] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s3 -> s3 [0, 65535] { R3124 += 1, R3073 += 1, R3074 += 1 };
  s3 -> s4 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s3 -> s5 [65, 65] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s3 -> s6 [65, 65] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s3 -> s7 [65, 65] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s3 -> s1 [66, 65535] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s3 -> s2 [66, 65535] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R3124 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R3124 += 1 };
  s5 -> s5 [0, 65535] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s6 -> s5 [0, 65535] { R3124 += 1, R3074 += 1, R3034 += 1, R3035 += 1 };
  s6 -> s6 [0, 65535] { R3124 += 1, R3074 += 1, R3033 += 1, R3034 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3124 += 1 };
  accepting s4, s8, s5, s2, s9;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3126 += 1, R3076 += 1 };
  s0 -> s2 [0, 65535] { R3126 += 1, R3075 += 1, R3076 += 1 };
  s0 -> s0 [0, 65535] { R3125 += 1, R3126 += 1 };
  s0 -> s3 [65, 65] { R3126 += 1, R3076 += 1 };
  s0 -> s4 [65, 65] { R3126 += 1, R3076 += 1 };
  s0 -> s1 [66, 65535] { R3126 += 1, R3076 += 1 };
  s1 -> s1 [0, 64] { R3126 += 1, R3076 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3126 += 1 };
  s1 -> s3 [65, 65] { R3126 += 1, R3076 += 1 };
  s1 -> s4 [65, 65] { R3126 += 1, R3076 += 1 };
  s1 -> s1 [66, 65535] { R3126 += 1, R3076 += 1 };
  s2 -> s1 [0, 64] { R3126 += 1, R3076 += 1 };
  s2 -> s2 [0, 65535] { R3126 += 1, R3075 += 1, R3076 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3126 += 1, R3076 += 1 };
  s2 -> s4 [65, 65] { R3126 += 1, R3076 += 1 };
  s2 -> s1 [66, 65535] { R3126 += 1, R3076 += 1 };
  s3 -> s6 [0, 65535] { R3126 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3126 += 1, R3076 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3126 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3126 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3058 && R2 = R3126 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3039 = 0 && R3040 = R3058 && R3041 = 0 && R3042 = R3058 && R3043 = 0 && R3044 = R3058 && R3045 = 0 && R3046 = R3058 && R3047 = 0 && R3048 = R3058 && R3049 = 0 && R3050 = R3058 && R3051 = 0 && R3052 = R3058 && R3053 = 0 && R3054 = R3058 && R3055 = 0 && R3056 = R3058 && R3057 = 0 && R3061 = 0 && R3062 = 0 && R3067 = 0 && R3068 = 0 && R3069 = 0 && R3070 = 0 && R3073 = 0 && R3074 = 0 && R3077 = 10 && R3078 = R3126 && R3079 = 10 && R3080 = R3126 && R3081 = 10 && R3082 = R3126 && R3083 = 10 && R3084 = R3126 && R3085 = 10 && R3086 = R3126 && R3087 = 10 && R3088 = R3126 && R3089 = 10 && R3090 = R3126 && R3091 = 10 && R3092 = R3126 && R3093 = 10 && R3094 = R3126 && R3095 = 10 && R3096 = R3126 && R3097 = 10 && R3098 = R3126 && R3099 = 10 && R3100 = R3126 && R3101 = 10 && R3102 = R3126 && R3103 = 10 && R3104 = R3126 && R3105 = 10 && R3106 = R3126 && R3107 = 10 && R3108 = R3126 && R3109 = 10 && R3110 = R3126 && R3111 = 10 && R3112 = R3126 && R3113 = 10 && R3114 = R3126 && R3115 = 10 && R3116 = R3126 && R3117 = 10 && R3118 = R3126 && R3119 = 10 && R3120 = R3126 && R3121 = 10 && R3122 = R3126 && R3123 = 10 && R3124 = R3126 && R3125 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R3058 && 9 < R3126 && (R14 = 0 || (R3059 = 0 && R3060 = 0)) && (R14 = 0 || (R3063 = 0 && R3064 = 0)) && (R14 = 0 || (R3065 = 0 && R3066 = 0)) && (R14 = 0 || (R3071 = 0 && R3072 = 0)) && (R14 = 0 || (R3075 = 0 && R3076 = 0)) && (R2938 + R2935 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R2938 + R2935 = 0 || (R2936 + R2933 = 0 && R2937 + R2934 = 0)) && (R3038 + R3035 = 0 || (R3036 + R3033 = 0 && R3037 + R3034 = 0));
// End of Parikh automata intersection problem
