// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R1777, R1778, R1779, R1780, R1781, R1782, R18, R1877, R1878, R1879, R1880, R1881, R1882, R1883, R1884, R1885, R1886, R1887, R1888, R1889, R1890, R1891, R1892, R1893, R1894, R1895, R1896, R1897, R1898, R1899, R1900, R1901, R1902, R1903, R1904, R1905, R1906, R1907, R1908, R1909, R1910, R1911, R1912, R1913, R1914, R1915, R1916, R1917, R1918, R1919, R1920, R1921, R1922, R1923, R1924, R1925, R1926, R1927, R1928, R1929, R1930, R1931, R1932, R1933, R1934, R1935, R1936, R1937, R1938, R1939, R1940, R1941, R1942, R1943, R1944, R1945, R1946, R1947, R1948, R1949, R1950, R1951, R1952, R1953, R1954, R1955, R1956, R1957, R1958, R1959, R1960, R1961, R1962, R1963, R1964, R1965, R1966, R1967, R1968, R1969, R1970, R2, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1922 += 1 };
  s0 -> s0 [0, 65535] { R1921 += 1, R1922 += 1 };
  s0 -> s1 [45, 45] { R1922 += 1 };
  s0 -> s2 [46, 46] { R1922 += 1 };
  s0 -> s1 [48, 62] { R1922 += 1 };
  s0 -> s3 [65, 65] { R1922 += 1 };
  s0 -> s1 [66, 65535] { R1922 += 1 };
  s1 -> s1 [0, 43] { R1922 += 1 };
  s1 -> s1 [45, 45] { R1922 += 1 };
  s1 -> s2 [46, 46] { R1922 += 1 };
  s1 -> s1 [48, 62] { R1922 += 1 };
  s1 -> s3 [65, 65] { R1922 += 1 };
  s1 -> s1 [66, 65535] { R1922 += 1 };
  s2 -> s1 [0, 43] { R1922 += 1 };
  s2 -> s1 [45, 45] { R1922 += 1 };
  s2 -> s2 [46, 46] { R1922 += 1 };
  s2 -> s1 [48, 62] { R1922 += 1 };
  s2 -> s3 [65, 65] { R1922 += 1 };
  s2 -> s1 [66, 114] { R1922 += 1 };
  s2 -> s8 [115, 115] { R1922 += 1 };
  s2 -> s1 [116, 65535] { R1922 += 1 };
  s3 -> s3 [0, 43] { R1922 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1922 += 1 };
  s3 -> s4 [46, 46] { R1922 += 1 };
  s3 -> s3 [48, 62] { R1922 += 1 };
  s3 -> s3 [65, 65535] { R1922 += 1 };
  s4 -> s3 [0, 43] { R1922 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1922 += 1 };
  s4 -> s4 [46, 46] { R1922 += 1 };
  s4 -> s3 [48, 62] { R1922 += 1 };
  s4 -> s3 [65, 114] { R1922 += 1 };
  s4 -> s5 [115, 115] { R1922 += 1 };
  s4 -> s3 [116, 65535] { R1922 += 1 };
  s5 -> s3 [0, 43] { R1922 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1922 += 1 };
  s5 -> s4 [46, 46] { R1922 += 1 };
  s5 -> s3 [48, 62] { R1922 += 1 };
  s5 -> s3 [65, 110] { R1922 += 1 };
  s5 -> s6 [111, 111] { R1922 += 1 };
  s5 -> s3 [112, 65535] { R1922 += 1 };
  s6 -> s3 [0, 43] { R1922 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1922 += 1 };
  s6 -> s4 [46, 46] { R1922 += 1 };
  s6 -> s3 [48, 62] { R1922 += 1 };
  s6 -> s3 [65, 98] { R1922 += 1 };
  s6 -> s7 [99, 99] { R1922 += 1 };
  s6 -> s3 [100, 65535] { R1922 += 1 };
  s7 -> s3 [0, 43] { R1922 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1922 += 1 };
  s7 -> s4 [46, 46] { R1922 += 1 };
  s7 -> s3 [48, 62] { R1922 += 1 };
  s7 -> s3 [65, 106] { R1922 += 1 };
  s7 -> s3 [108, 65535] { R1922 += 1 };
  s8 -> s1 [0, 43] { R1922 += 1 };
  s8 -> s1 [45, 45] { R1922 += 1 };
  s8 -> s2 [46, 46] { R1922 += 1 };
  s8 -> s1 [48, 62] { R1922 += 1 };
  s8 -> s3 [65, 65] { R1922 += 1 };
  s8 -> s1 [66, 110] { R1922 += 1 };
  s8 -> s9 [111, 111] { R1922 += 1 };
  s8 -> s1 [112, 65535] { R1922 += 1 };
  s9 -> s1 [0, 43] { R1922 += 1 };
  s9 -> s1 [45, 45] { R1922 += 1 };
  s9 -> s2 [46, 46] { R1922 += 1 };
  s9 -> s1 [48, 62] { R1922 += 1 };
  s9 -> s3 [65, 65] { R1922 += 1 };
  s9 -> s1 [66, 98] { R1922 += 1 };
  s9 -> s10 [99, 99] { R1922 += 1 };
  s9 -> s1 [100, 65535] { R1922 += 1 };
  s10 -> s1 [0, 43] { R1922 += 1 };
  s10 -> s1 [45, 45] { R1922 += 1 };
  s10 -> s2 [46, 46] { R1922 += 1 };
  s10 -> s1 [48, 62] { R1922 += 1 };
  s10 -> s3 [65, 65] { R1922 += 1 };
  s10 -> s1 [66, 106] { R1922 += 1 };
  s10 -> s1 [108, 65535] { R1922 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1924 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1923 += 1, R1924 += 1 };
  s1 -> s1 [0, 65535] { R1924 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1926 += 1 };
  s0 -> s0 [0, 65535] { R1925 += 1, R1926 += 1 };
  s0 -> s2 [0, 65535] { R1926 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R1926 += 1 };
  s0 -> s1 [59, 65535] { R1926 += 1 };
  s1 -> s1 [0, 57] { R1926 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1926 += 1 };
  s1 -> s1 [59, 65535] { R1926 += 1 };
  s2 -> s1 [0, 57] { R1926 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1926 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R1926 += 1 };
  s2 -> s1 [59, 65535] { R1926 += 1 };
  s3 -> s3 [0, 65535] { R1926 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1928 += 1 };
  s0 -> s0 [0, 65535] { R1927 += 1, R1928 += 1 };
  s0 -> s2 [0, 65535] { R1928 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1928 += 1 };
  s0 -> s1 [66, 65535] { R1928 += 1 };
  s1 -> s1 [0, 64] { R1928 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1928 += 1 };
  s1 -> s1 [66, 65535] { R1928 += 1 };
  s2 -> s1 [0, 64] { R1928 += 1 };
  s2 -> s2 [0, 65535] { R1928 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1928 += 1 };
  s2 -> s1 [66, 65535] { R1928 += 1 };
  s3 -> s3 [0, 65535] { R1928 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1930 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1929 += 1, R1930 += 1 };
  s0 -> s2 [0, 65535] { R1930 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R1930 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1930 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R1930 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1930 += 1 };
  s2 -> s1 [0, 90] { R1930 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R1930 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R1930 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1930 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1930 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1930 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1932 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R1931 += 1, R1932 += 1 };
  s0 -> s2 [0, 65535] { R1932 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R1932 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1932 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1932 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1932 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1932 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1934 += 1, R1884 += 1 };
  s0 -> s0 [0, 65535] { R1933 += 1, R1934 += 1 };
  s0 -> s2 [0, 65535] { R1934 += 1, R1883 += 1, R1884 += 1 };
  s0 -> s1 [66, 65535] { R1934 += 1, R1884 += 1 };
  s1 -> s1 [0, 64] { R1934 += 1, R1884 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1934 += 1 };
  s1 -> s1 [66, 65535] { R1934 += 1, R1884 += 1 };
  s2 -> s1 [0, 64] { R1934 += 1, R1884 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1934 += 1, R1883 += 1, R1884 += 1 };
  s2 -> s1 [66, 65535] { R1934 += 1, R1884 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1936 += 1, R1886 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R1935 += 1, R1936 += 1 };
  s0 -> s2 [0, 65535] { R1936 += 1, R1885 += 1, R1886 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1936 += 1, R1886 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R1936 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1936 += 1, R1886 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R1936 += 1, R1885 += 1, R1886 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1936 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1938 += 1, R1888 += 1 };
  s0 -> s2 [0, 65535] { R1938 += 1, R1887 += 1, R1888 += 1 };
  s0 -> s0 [0, 65535] { R1937 += 1, R1938 += 1 };
  s0 -> s1 [87, 65535] { R1938 += 1, R1888 += 1 };
  s1 -> s1 [0, 65] { R1938 += 1, R1888 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1938 += 1 };
  s1 -> s1 [87, 65535] { R1938 += 1, R1888 += 1 };
  s2 -> s1 [0, 65] { R1938 += 1, R1888 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1938 += 1, R1887 += 1, R1888 += 1 };
  s2 -> s1 [87, 65535] { R1938 += 1, R1888 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1940 += 1, R1889 += 1, R1890 += 1 };
  s0 -> s2 [0, 65535] { R1940 += 1, R1890 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R1939 += 1, R1940 += 1 };
  s1 -> s1 [0, 65535] { R1940 += 1, R1889 += 1, R1890 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1940 += 1, R1890 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1940 += 1, R1890 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535] { R1940 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1940 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R1942 += 1, R1892 += 1 };
  s0 -> s2 [0, 65535] { R1942 += 1, R1892 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R1941 += 1, R1942 += 1 };
  s0 -> s3 [0, 65535] { R1942 += 1, R1891 += 1, R1892 += 1 };
  s0 -> s1 [88, 65535] { R1942 += 1, R1892 += 1 };
  s1 -> s1 [0, 86] { R1942 += 1, R1892 += 1 };
  s1 -> s1 [0, 65535] { R1942 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R1942 += 1, R1892 += 1 };
  s2 -> s1 [0, 86] { R1942 += 1, R1892 += 1 };
  s2 -> s2 [0, 65535] { R1942 += 1, R1892 += 1, R1772 += 1 };
  s2 -> s5 [0, 65535] { R1942 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R1942 += 1, R1892 += 1 };
  s3 -> s1 [0, 86] { R1942 += 1, R1892 += 1 };
  s3 -> s2 [0, 65535] { R1942 += 1, R1892 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R1942 += 1, R1891 += 1, R1892 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R1942 += 1, R1892 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1942 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s0 -> s2 [0, 65535] { R1944 += 1, R1894 += 1, R1775 += 1, R1776 += 1 };
  s0 -> s3 [0, 65535] { R1944 += 1, R1893 += 1, R1894 += 1 };
  s0 -> s0 [0, 65535] { R1943 += 1, R1944 += 1 };
  s0 -> s1 [88, 65535] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s1 -> s1 [0, 86] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s1 -> s5 [0, 65535] { R1944 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1944 += 1, R1894 += 1 };
  s1 -> s1 [88, 65535] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s2 -> s1 [0, 86] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s2 -> s5 [0, 65535] { R1944 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1944 += 1, R1894 += 1, R1775 += 1, R1776 += 1 };
  s2 -> s1 [88, 65535] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s3 -> s1 [0, 86] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1944 += 1, R1894 += 1, R1775 += 1, R1776 += 1 };
  s3 -> s3 [0, 65535] { R1944 += 1, R1893 += 1, R1894 += 1 };
  s3 -> s1 [88, 65535] { R1944 += 1, R1894 += 1, R1776 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1944 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1946 += 1, R1896 += 1, R1780 += 1, R1781 += 1 };
  s0 -> s2 [0, 65535] { R1946 += 1, R1895 += 1, R1896 += 1 };
  s0 -> s3 [0, 65535] { R1946 += 1, R1896 += 1, R1781 += 1, R1782 += 1 };
  s0 -> s0 [0, 65535] { R1945 += 1, R1946 += 1 };
  s1 -> s1 [0, 65535] { R1946 += 1, R1896 += 1, R1780 += 1, R1781 += 1 };
  s1 -> s4 [0, 65535] { R1946 += 1 };
  s1 -> s3 [0, 65535] { R1946 += 1, R1896 += 1, R1781 += 1, R1782 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R1946 += 1, R1896 += 1, R1780 += 1, R1781 += 1 };
  s2 -> s2 [0, 65535] { R1946 += 1, R1895 += 1, R1896 += 1 };
  s2 -> s3 [0, 65535] { R1946 += 1, R1896 += 1, R1781 += 1, R1782 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1946 += 1 };
  s3 -> s5 [0, 65535] { R1946 += 1, R1896 += 1 };
  s3 -> s3 [0, 65535] { R1946 += 1, R1896 += 1, R1781 += 1, R1782 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1946 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1946 += 1 };
  s5 -> s5 [0, 65535] { R1946 += 1, R1896 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1947 += 1, R1948 += 1 };
  s0 -> s1 [0, 65535] { R1948 += 1, R1898 += 1 };
  s0 -> s2 [0, 65535] { R1948 += 1, R1897 += 1, R1898 += 1 };
  s1 -> s1 [0, 65535] { R1948 += 1, R1898 += 1 };
  s1 -> s4 [0, 65535] { R1948 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1948 += 1, R1898 += 1 };
  s2 -> s2 [0, 65535] { R1948 += 1, R1897 += 1, R1898 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1948 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1950 += 1, R1899 += 1, R1900 += 1 };
  s0 -> s2 [0, 65535] { R1950 += 1, R1900 += 1, R1881 += 1, R1882 += 1 };
  s0 -> s3 [0, 65535] { R1950 += 1, R1900 += 1 };
  s0 -> s0 [0, 65535] { R1949 += 1, R1950 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1950 += 1, R1899 += 1, R1900 += 1 };
  s1 -> s2 [0, 65535] { R1950 += 1, R1900 += 1, R1881 += 1, R1882 += 1 };
  s1 -> s3 [0, 65535] { R1950 += 1, R1900 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1950 += 1, R1900 += 1, R1881 += 1, R1882 += 1 };
  s2 -> s5 [0, 65535] { R1950 += 1 };
  s2 -> s3 [0, 65535] { R1950 += 1, R1900 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1950 += 1 };
  s3 -> s3 [0, 65535] { R1950 += 1, R1900 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1950 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1952 += 1, R1901 += 1, R1902 += 1 };
  s0 -> s0 [0, 65535] { R1951 += 1, R1952 += 1 };
  s0 -> s2 [0, 65535] { R1952 += 1, R1902 += 1 };
  s1 -> s1 [0, 65535] { R1952 += 1, R1901 += 1, R1902 += 1 };
  s1 -> s2 [0, 65535] { R1952 += 1, R1902 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1952 += 1, R1902 += 1 };
  s2 -> s3 [0, 65535] { R1952 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1952 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1954 += 1, R1904 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R1954 += 1, R1903 += 1, R1904 += 1 };
  s0 -> s0 [0, 65535] { R1953 += 1, R1954 += 1 };
  s1 -> s1 [0, 65535] { R1954 += 1, R1904 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1954 += 1 };
  s2 -> s1 [0, 65535] { R1954 += 1, R1904 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1954 += 1, R1903 += 1, R1904 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1954 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1956 += 1, R1906 += 1 };
  s0 -> s2 [0, 65535] { R1956 += 1, R1905 += 1, R1906 += 1 };
  s0 -> s0 [0, 65535] { R1955 += 1, R1956 += 1 };
  s0 -> s3 [65, 65] { R1956 += 1, R1906 += 1 };
  s0 -> s4 [65, 65] { R1956 += 1, R1906 += 1 };
  s0 -> s5 [87, 87] { R1956 += 1, R1906 += 1 };
  s0 -> s1 [88, 65535] { R1956 += 1, R1906 += 1 };
  s1 -> s1 [0, 64] { R1956 += 1, R1906 += 1 };
  s1 -> s3 [65, 65] { R1956 += 1, R1906 += 1 };
  s1 -> s4 [65, 65] { R1956 += 1, R1906 += 1 };
  s1 -> s5 [87, 87] { R1956 += 1, R1906 += 1 };
  s1 -> s1 [88, 65535] { R1956 += 1, R1906 += 1 };
  s2 -> s1 [0, 64] { R1956 += 1, R1906 += 1 };
  s2 -> s2 [0, 65535] { R1956 += 1, R1905 += 1, R1906 += 1 };
  s2 -> s3 [65, 65] { R1956 += 1, R1906 += 1 };
  s2 -> s4 [65, 65] { R1956 += 1, R1906 += 1 };
  s2 -> s5 [87, 87] { R1956 += 1, R1906 += 1 };
  s2 -> s1 [88, 65535] { R1956 += 1, R1906 += 1 };
  s3 -> s3 [0, 65] { R1956 += 1, R1906 += 1 };
  s3 -> s7 [87, 87] { R1956 += 1, R1906 += 1 };
  s3 -> s3 [88, 65535] { R1956 += 1, R1906 += 1 };
  s5 -> s5 [0, 64] { R1956 += 1, R1906 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1956 += 1 };
  s5 -> s7 [65, 65] { R1956 += 1, R1906 += 1 };
  s5 -> s8 [65, 65] { R1956 += 1, R1906 += 1 };
  s5 -> s5 [87, 65535] { R1956 += 1, R1906 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R1956 += 1, R1906 += 1 };
  s7 -> s7 [0, 65535] { R1956 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R1956 += 1, R1906 += 1 };
  s8 -> s8 [0, 65535] { R1956 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R1958 += 1, R1907 += 1, R1908 += 1 };
  s0 -> s0 [0, 65535] { R1957 += 1, R1958 += 1 };
  s0 -> s3 [65, 65] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1958 += 1 };
  s1 -> s3 [65, 65] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R1958 += 1, R1907 += 1, R1908 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R1958 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1958 += 1, R1908 += 1, R1769 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1958 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1958 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R1959 += 1, R1960 += 1 };
  s0 -> s2 [0, 65535] { R1960 += 1, R1909 += 1, R1910 += 1 };
  s0 -> s3 [65, 65] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R1960 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1960 += 1, R1909 += 1, R1910 += 1 };
  s2 -> s3 [65, 65] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R1960 += 1, R1910 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1960 += 1 };
  s4 -> s4 [0, 65535] { R1960 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1960 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s2 [0, 65535] { R1962 += 1, R1911 += 1, R1912 += 1 };
  s0 -> s0 [0, 65535] { R1961 += 1, R1962 += 1 };
  s0 -> s3 [65, 65] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s4 [65, 65] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s0 -> s1 [66, 65535] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [0, 64] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1962 += 1 };
  s1 -> s3 [65, 65] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s4 [65, 65] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s1 -> s1 [66, 65535] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [0, 64] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s2 [0, 65535] { R1962 += 1, R1911 += 1, R1912 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s4 [65, 65] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s2 -> s1 [66, 65535] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s3 -> s6 [0, 65535] { R1962 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1962 += 1, R1912 += 1, R1773 += 1, R1774 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1962 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1962 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s2 [0, 65535] { R1964 += 1, R1913 += 1, R1914 += 1 };
  s0 -> s0 [0, 65535] { R1963 += 1, R1964 += 1 };
  s0 -> s3 [65, 65] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s4 [65, 65] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s0 -> s1 [66, 65535] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 64] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [0, 65535] { R1964 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s4 [65, 65] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s1 -> s1 [66, 65535] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [0, 64] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s2 [0, 65535] { R1964 += 1, R1913 += 1, R1914 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s4 [65, 65] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s2 -> s1 [66, 65535] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s6 [0, 65535] { R1964 += 1 };
  s3 -> s3 [0, 65535] { R1964 += 1, R1914 += 1, R1777 += 1, R1778 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1964 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1964 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1966 += 1, R1916 += 1 };
  s0 -> s0 [0, 65535] { R1965 += 1, R1966 += 1 };
  s0 -> s2 [0, 65535] { R1966 += 1, R1915 += 1, R1916 += 1 };
  s0 -> s3 [65, 65] { R1966 += 1, R1916 += 1 };
  s0 -> s4 [65, 65] { R1966 += 1, R1916 += 1 };
  s0 -> s1 [66, 65535] { R1966 += 1, R1916 += 1 };
  s1 -> s1 [0, 64] { R1966 += 1, R1916 += 1 };
  s1 -> s1 [0, 65535] { R1966 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1966 += 1, R1916 += 1 };
  s1 -> s4 [65, 65] { R1966 += 1, R1916 += 1 };
  s1 -> s1 [66, 65535] { R1966 += 1, R1916 += 1 };
  s2 -> s1 [0, 64] { R1966 += 1, R1916 += 1 };
  s2 -> s2 [0, 65535] { R1966 += 1, R1915 += 1, R1916 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1966 += 1, R1916 += 1 };
  s2 -> s4 [65, 65] { R1966 += 1, R1916 += 1 };
  s2 -> s1 [66, 65535] { R1966 += 1, R1916 += 1 };
  s3 -> s3 [0, 65535] { R1966 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1966 += 1, R1916 += 1 };
  s4 -> s5 [0, 65535] { R1966 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1966 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s0 -> s2 [0, 64] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s0 -> s0 [0, 65535] { R1967 += 1, R1968 += 1 };
  s0 -> s3 [0, 65535] { R1968 += 1, R1917 += 1, R1918 += 1 };
  s0 -> s4 [65, 65] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s0 -> s5 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s0 -> s6 [65, 65] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s0 -> s7 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s0 -> s1 [66, 65535] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s0 -> s2 [66, 65535] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s1 -> s1 [0, 64] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R1968 += 1 };
  s1 -> s5 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s1 -> s7 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s1 -> s1 [66, 65535] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s2 -> s1 [0, 64] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s2 -> s2 [0, 64] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s2 -> s4 [65, 65] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s2 -> s5 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s2 -> s6 [65, 65] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s2 -> s7 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s2 -> s1 [66, 65535] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s2 -> s2 [66, 65535] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s3 -> s1 [0, 64] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s3 -> s2 [0, 64] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s3 -> s3 [0, 65535] { R1968 += 1, R1917 += 1, R1918 += 1 };
  s3 -> s4 [65, 65] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s3 -> s5 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s3 -> s6 [65, 65] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s3 -> s7 [65, 65] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s3 -> s1 [66, 65535] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s3 -> s2 [66, 65535] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s4 -> s4 [0, 65535] { R1968 += 1, R1918 += 1, R1877 += 1, R1878 += 1 };
  s4 -> s7 [0, 65535] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R1968 += 1 };
  s7 -> s8 [0, 65535] { R1968 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R1968 += 1, R1918 += 1, R1878 += 1, R1879 += 1 };
  s8 -> s8 [0, 65535] { R1968 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s5, s9, s1, s7;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1970 += 1, R1920 += 1 };
  s0 -> s0 [0, 65535] { R1969 += 1, R1970 += 1 };
  s0 -> s2 [0, 65535] { R1970 += 1, R1919 += 1, R1920 += 1 };
  s0 -> s3 [65, 65] { R1970 += 1, R1920 += 1 };
  s0 -> s4 [65, 65] { R1970 += 1, R1920 += 1 };
  s0 -> s1 [66, 65535] { R1970 += 1, R1920 += 1 };
  s1 -> s1 [0, 64] { R1970 += 1, R1920 += 1 };
  s1 -> s1 [0, 65535] { R1970 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1970 += 1, R1920 += 1 };
  s1 -> s4 [65, 65] { R1970 += 1, R1920 += 1 };
  s1 -> s1 [66, 65535] { R1970 += 1, R1920 += 1 };
  s2 -> s1 [0, 64] { R1970 += 1, R1920 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1970 += 1, R1919 += 1, R1920 += 1 };
  s2 -> s3 [65, 65] { R1970 += 1, R1920 += 1 };
  s2 -> s4 [65, 65] { R1970 += 1, R1920 += 1 };
  s2 -> s1 [66, 65535] { R1970 += 1, R1920 += 1 };
  s3 -> s3 [0, 65535] { R1970 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1970 += 1 };
  s4 -> s4 [0, 65535] { R1970 += 1, R1920 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1970 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1902 && R2 = R1970 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R1883 = 0 && R1884 = R1902 && R1885 = 0 && R1886 = R1902 && R1887 = 0 && R1888 = R1902 && R1889 = 0 && R1890 = R1902 && R1891 = 0 && R1892 = R1902 && R1893 = 0 && R1894 = R1902 && R1895 = 0 && R1896 = R1902 && R1897 = 0 && R1898 = R1902 && R1899 = 0 && R1900 = R1902 && R1901 = 0 && R1905 = 0 && R1906 = 0 && R1917 = 0 && R1918 = 0 && R1921 = 10 && R1922 = R1970 && R1923 = 10 && R1924 = R1970 && R1925 = 10 && R1926 = R1970 && R1927 = 10 && R1928 = R1970 && R1929 = 10 && R1930 = R1970 && R1931 = 10 && R1932 = R1970 && R1933 = 10 && R1934 = R1970 && R1935 = 10 && R1936 = R1970 && R1937 = 10 && R1938 = R1970 && R1939 = 10 && R1940 = R1970 && R1941 = 10 && R1942 = R1970 && R1943 = 10 && R1944 = R1970 && R1945 = 10 && R1946 = R1970 && R1947 = 10 && R1948 = R1970 && R1949 = 10 && R1950 = R1970 && R1951 = 10 && R1952 = R1970 && R1953 = 10 && R1954 = R1970 && R1955 = 10 && R1956 = R1970 && R1957 = 10 && R1958 = R1970 && R1959 = 10 && R1960 = R1970 && R1961 = 10 && R1962 = R1970 && R1963 = 10 && R1964 = R1970 && R1965 = 10 && R1966 = R1970 && R1967 = 10 && R1968 = R1970 && R1969 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R1902 && 9 < R1970 && (R14 = 0 || (R1903 = 0 && R1904 = 0)) && (R14 = 0 || (R1907 = 0 && R1908 = 0)) && (R14 = 0 || (R1909 = 0 && R1910 = 0)) && (R14 = 0 || (R1911 = 0 && R1912 = 0)) && (R14 = 0 || (R1913 = 0 && R1914 = 0)) && (R14 = 0 || (R1915 = 0 && R1916 = 0)) && (R14 = 0 || (R1919 = 0 && R1920 = 0)) && (R1782 + R1779 = 0 || (R1775 + R1773 = 0 && R1776 + R1774 = 0)) && (R1782 + R1779 = 0 || (R1780 + R1777 = 0 && R1781 + R1778 = 0)) && (R1882 + R1879 = 0 || (R1880 + R1877 = 0 && R1881 + R1878 = 0));
// End of Parikh automata intersection problem
