// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2651, R2652, R2653, R2654, R2655, R2656, R2657, R2658, R2659, R2660, R2661, R2662, R2663, R2664, R2665, R2666, R2667, R2668, R2669, R2670, R2671, R2672, R2673, R2674, R2675, R2676, R2677, R2678, R2679, R2680, R2681, R2682, R2683, R2684, R2685, R2686, R2687, R2688, R2689, R2690, R2691, R2692, R2693, R2694, R2695, R2696, R2697, R2698, R2699, R2700, R2701, R2702, R2703, R2704, R2705, R2706, R2707, R2708, R2709, R2710, R2711, R2712, R2713, R2714, R2715, R2716, R2717, R2718, R2719, R2720, R2721, R2722, R2723, R2724, R2725, R2726, R2727, R2728, R2729, R2730, R2731, R2732, R2733, R2734, R2735, R2736, R2737, R2738, R2739, R2740, R2741, R2742, R2743, R2744, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2696 += 1 };
  s0 -> s0 [0, 65535] { R2695 += 1, R2696 += 1 };
  s0 -> s1 [45, 45] { R2696 += 1 };
  s0 -> s2 [46, 46] { R2696 += 1 };
  s0 -> s1 [48, 62] { R2696 += 1 };
  s0 -> s3 [65, 65] { R2696 += 1 };
  s0 -> s1 [66, 65535] { R2696 += 1 };
  s1 -> s1 [0, 43] { R2696 += 1 };
  s1 -> s1 [45, 45] { R2696 += 1 };
  s1 -> s2 [46, 46] { R2696 += 1 };
  s1 -> s1 [48, 62] { R2696 += 1 };
  s1 -> s3 [65, 65] { R2696 += 1 };
  s1 -> s1 [66, 65535] { R2696 += 1 };
  s2 -> s1 [0, 43] { R2696 += 1 };
  s2 -> s1 [45, 45] { R2696 += 1 };
  s2 -> s2 [46, 46] { R2696 += 1 };
  s2 -> s1 [48, 62] { R2696 += 1 };
  s2 -> s3 [65, 65] { R2696 += 1 };
  s2 -> s1 [66, 114] { R2696 += 1 };
  s2 -> s8 [115, 115] { R2696 += 1 };
  s2 -> s1 [116, 65535] { R2696 += 1 };
  s3 -> s3 [0, 43] { R2696 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2696 += 1 };
  s3 -> s4 [46, 46] { R2696 += 1 };
  s3 -> s3 [48, 62] { R2696 += 1 };
  s3 -> s3 [65, 65535] { R2696 += 1 };
  s4 -> s3 [0, 43] { R2696 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2696 += 1 };
  s4 -> s4 [46, 46] { R2696 += 1 };
  s4 -> s3 [48, 62] { R2696 += 1 };
  s4 -> s3 [65, 114] { R2696 += 1 };
  s4 -> s5 [115, 115] { R2696 += 1 };
  s4 -> s3 [116, 65535] { R2696 += 1 };
  s5 -> s3 [0, 43] { R2696 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2696 += 1 };
  s5 -> s4 [46, 46] { R2696 += 1 };
  s5 -> s3 [48, 62] { R2696 += 1 };
  s5 -> s3 [65, 110] { R2696 += 1 };
  s5 -> s6 [111, 111] { R2696 += 1 };
  s5 -> s3 [112, 65535] { R2696 += 1 };
  s6 -> s3 [0, 43] { R2696 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2696 += 1 };
  s6 -> s4 [46, 46] { R2696 += 1 };
  s6 -> s3 [48, 62] { R2696 += 1 };
  s6 -> s3 [65, 98] { R2696 += 1 };
  s6 -> s7 [99, 99] { R2696 += 1 };
  s6 -> s3 [100, 65535] { R2696 += 1 };
  s7 -> s3 [0, 43] { R2696 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2696 += 1 };
  s7 -> s4 [46, 46] { R2696 += 1 };
  s7 -> s3 [48, 62] { R2696 += 1 };
  s7 -> s3 [65, 106] { R2696 += 1 };
  s7 -> s3 [108, 65535] { R2696 += 1 };
  s8 -> s1 [0, 43] { R2696 += 1 };
  s8 -> s1 [45, 45] { R2696 += 1 };
  s8 -> s2 [46, 46] { R2696 += 1 };
  s8 -> s1 [48, 62] { R2696 += 1 };
  s8 -> s3 [65, 65] { R2696 += 1 };
  s8 -> s1 [66, 110] { R2696 += 1 };
  s8 -> s9 [111, 111] { R2696 += 1 };
  s8 -> s1 [112, 65535] { R2696 += 1 };
  s9 -> s1 [0, 43] { R2696 += 1 };
  s9 -> s1 [45, 45] { R2696 += 1 };
  s9 -> s2 [46, 46] { R2696 += 1 };
  s9 -> s1 [48, 62] { R2696 += 1 };
  s9 -> s3 [65, 65] { R2696 += 1 };
  s9 -> s1 [66, 98] { R2696 += 1 };
  s9 -> s10 [99, 99] { R2696 += 1 };
  s9 -> s1 [100, 65535] { R2696 += 1 };
  s10 -> s1 [0, 43] { R2696 += 1 };
  s10 -> s1 [45, 45] { R2696 += 1 };
  s10 -> s2 [46, 46] { R2696 += 1 };
  s10 -> s1 [48, 62] { R2696 += 1 };
  s10 -> s3 [65, 65] { R2696 += 1 };
  s10 -> s1 [66, 106] { R2696 += 1 };
  s10 -> s1 [108, 65535] { R2696 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2698 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2697 += 1, R2698 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2698 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2700 += 1 };
  s0 -> s2 [0, 65535] { R2700 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2699 += 1, R2700 += 1 };
  s0 -> s3 [58, 58] { R2700 += 1 };
  s0 -> s1 [59, 65535] { R2700 += 1 };
  s1 -> s1 [0, 57] { R2700 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2700 += 1 };
  s1 -> s1 [59, 65535] { R2700 += 1 };
  s2 -> s1 [0, 57] { R2700 += 1 };
  s2 -> s2 [0, 65535] { R2700 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2700 += 1 };
  s2 -> s1 [59, 65535] { R2700 += 1 };
  s3 -> s3 [0, 65535] { R2700 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2702 += 1 };
  s0 -> s2 [0, 65535] { R2702 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2701 += 1, R2702 += 1 };
  s0 -> s3 [65, 65] { R2702 += 1 };
  s0 -> s1 [66, 65535] { R2702 += 1 };
  s1 -> s1 [0, 64] { R2702 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2702 += 1 };
  s1 -> s1 [66, 65535] { R2702 += 1 };
  s2 -> s1 [0, 64] { R2702 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2702 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2702 += 1 };
  s2 -> s1 [66, 65535] { R2702 += 1 };
  s3 -> s3 [0, 65535] { R2702 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2704 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2703 += 1, R2704 += 1 };
  s0 -> s2 [0, 65535] { R2704 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R2704 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2704 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R2704 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2704 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2704 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2704 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R2704 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2704 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2704 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2704 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2706 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R2706 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2705 += 1, R2706 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2706 += 1 };
  s1 -> s1 [0, 65535] { R2706 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2706 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R2706 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2706 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2708 += 1, R2658 += 1 };
  s0 -> s2 [0, 65535] { R2708 += 1, R2657 += 1, R2658 += 1 };
  s0 -> s0 [0, 65535] { R2707 += 1, R2708 += 1 };
  s0 -> s1 [66, 65535] { R2708 += 1, R2658 += 1 };
  s1 -> s1 [0, 64] { R2708 += 1, R2658 += 1 };
  s1 -> s1 [0, 65535] { R2708 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2708 += 1, R2658 += 1 };
  s2 -> s1 [0, 64] { R2708 += 1, R2658 += 1 };
  s2 -> s2 [0, 65535] { R2708 += 1, R2657 += 1, R2658 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2708 += 1, R2658 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2709 += 1, R2710 += 1 };
  s0 -> s1 [0, 65535] { R2710 += 1, R2660 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2710 += 1, R2659 += 1, R2660 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2710 += 1 };
  s1 -> s1 [0, 65535] { R2710 += 1, R2660 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2710 += 1, R2660 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2710 += 1, R2659 += 1, R2660 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2710 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2712 += 1, R2662 += 1 };
  s0 -> s0 [0, 65535] { R2711 += 1, R2712 += 1 };
  s0 -> s2 [0, 65535] { R2712 += 1, R2661 += 1, R2662 += 1 };
  s0 -> s1 [87, 65535] { R2712 += 1, R2662 += 1 };
  s1 -> s1 [0, 65] { R2712 += 1, R2662 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2712 += 1 };
  s1 -> s1 [87, 65535] { R2712 += 1, R2662 += 1 };
  s2 -> s1 [0, 65] { R2712 += 1, R2662 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2712 += 1, R2661 += 1, R2662 += 1 };
  s2 -> s1 [87, 65535] { R2712 += 1, R2662 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2714 += 1, R2663 += 1, R2664 += 1 };
  s0 -> s2 [0, 65535] { R2714 += 1, R2664 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R2713 += 1, R2714 += 1 };
  s1 -> s1 [0, 65535] { R2714 += 1, R2663 += 1, R2664 += 1 };
  s1 -> s2 [0, 65535] { R2714 += 1, R2664 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2714 += 1 };
  s2 -> s2 [0, 65535] { R2714 += 1, R2664 += 1, R1770 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2714 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R2716 += 1, R2666 += 1 };
  s0 -> s2 [0, 65535] { R2716 += 1, R2665 += 1, R2666 += 1 };
  s0 -> s3 [0, 65535] { R2716 += 1, R2666 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R2715 += 1, R2716 += 1 };
  s0 -> s1 [88, 65535] { R2716 += 1, R2666 += 1 };
  s1 -> s1 [0, 86] { R2716 += 1, R2666 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R2716 += 1 };
  s1 -> s1 [88, 65535] { R2716 += 1, R2666 += 1 };
  s2 -> s1 [0, 86] { R2716 += 1, R2666 += 1 };
  s2 -> s2 [0, 65535] { R2716 += 1, R2665 += 1, R2666 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2716 += 1, R2666 += 1, R1772 += 1 };
  s2 -> s1 [88, 65535] { R2716 += 1, R2666 += 1 };
  s3 -> s1 [0, 86] { R2716 += 1, R2666 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2716 += 1 };
  s3 -> s3 [0, 65535] { R2716 += 1, R2666 += 1, R1772 += 1 };
  s3 -> s1 [88, 65535] { R2716 += 1, R2666 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2716 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R2718 += 1, R2668 += 1, R2644 += 1 };
  s0 -> s2 [0, 65535] { R2718 += 1, R2667 += 1, R2668 += 1 };
  s0 -> s1 [0, 65535] { R2718 += 1, R2668 += 1 };
  s0 -> s0 [0, 65535] { R2717 += 1, R2718 += 1 };
  s0 -> s1 [88, 65535] { R2718 += 1, R2668 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R2718 += 1, R2668 += 1, R2644 += 1 };
  s1 -> s4 [0, 65535] { R2718 += 1 };
  s1 -> s1 [0, 65535] { R2718 += 1, R2668 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R2718 += 1, R2668 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R2718 += 1, R2668 += 1, R2644 += 1 };
  s2 -> s2 [0, 65535] { R2718 += 1, R2667 += 1, R2668 += 1 };
  s2 -> s1 [0, 65535] { R2718 += 1, R2668 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R2718 += 1, R2668 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2718 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2720 += 1, R2669 += 1, R2670 += 1 };
  s0 -> s0 [0, 65535] { R2719 += 1, R2720 += 1 };
  s0 -> s2 [0, 65535] { R2720 += 1, R2670 += 1, R2649 += 1, R2650 += 1 };
  s0 -> s3 [0, 65535] { R2720 += 1, R2670 += 1, R2648 += 1, R2649 += 1 };
  s1 -> s1 [0, 65535] { R2720 += 1, R2669 += 1, R2670 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R2720 += 1, R2670 += 1, R2649 += 1, R2650 += 1 };
  s1 -> s3 [0, 65535] { R2720 += 1, R2670 += 1, R2648 += 1, R2649 += 1 };
  s2 -> s4 [0, 65535] { R2720 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2720 += 1, R2670 += 1, R2649 += 1, R2650 += 1 };
  s2 -> s6 [0, 65535] { R2720 += 1, R2670 += 1 };
  s3 -> s4 [0, 65535] { R2720 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2720 += 1, R2670 += 1, R2649 += 1, R2650 += 1 };
  s3 -> s3 [0, 65535] { R2720 += 1, R2670 += 1, R2648 += 1, R2649 += 1 };
  s4 -> s4 [0, 65535] { R2720 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R2720 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2720 += 1, R2670 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2722 += 1, R2671 += 1, R2672 += 1 };
  s0 -> s2 [0, 65535] { R2722 += 1, R2672 += 1 };
  s0 -> s0 [0, 65535] { R2721 += 1, R2722 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2722 += 1, R2671 += 1, R2672 += 1 };
  s1 -> s2 [0, 65535] { R2722 += 1, R2672 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2722 += 1 };
  s2 -> s2 [0, 65535] { R2722 += 1, R2672 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2722 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R2724 += 1, R2673 += 1, R2674 += 1 };
  s0 -> s2 [0, 65535] { R2724 += 1, R2674 += 1, R2655 += 1, R2656 += 1 };
  s0 -> s0 [0, 65535] { R2723 += 1, R2724 += 1 };
  s0 -> s3 [0, 65535] { R2724 += 1, R2674 += 1, R2654 += 1, R2655 += 1 };
  s1 -> s1 [0, 65535] { R2724 += 1, R2673 += 1, R2674 += 1 };
  s1 -> s2 [0, 65535] { R2724 += 1, R2674 += 1, R2655 += 1, R2656 += 1 };
  s1 -> s3 [0, 65535] { R2724 += 1, R2674 += 1, R2654 += 1, R2655 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2724 += 1, R2674 += 1, R2655 += 1, R2656 += 1 };
  s2 -> s6 [0, 65535] { R2724 += 1, R2674 += 1 };
  s2 -> s4 [0, 65535] { R2724 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R2724 += 1, R2674 += 1, R2655 += 1, R2656 += 1 };
  s3 -> s3 [0, 65535] { R2724 += 1, R2674 += 1, R2654 += 1, R2655 += 1 };
  s3 -> s4 [0, 65535] { R2724 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2724 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2724 += 1, R2674 += 1 };
  s6 -> s4 [0, 65535] { R2724 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2725 += 1, R2726 += 1 };
  s0 -> s1 [0, 65535] { R2726 += 1, R2675 += 1, R2676 += 1 };
  s0 -> s2 [0, 65535] { R2726 += 1, R2676 += 1 };
  s1 -> s1 [0, 65535] { R2726 += 1, R2675 += 1, R2676 += 1 };
  s1 -> s2 [0, 65535] { R2726 += 1, R2676 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2726 += 1 };
  s2 -> s2 [0, 65535] { R2726 += 1, R2676 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2726 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2728 += 1, R2678 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R2728 += 1, R2677 += 1, R2678 += 1 };
  s0 -> s0 [0, 65535] { R2727 += 1, R2728 += 1 };
  s1 -> s1 [0, 65535] { R2728 += 1, R2678 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R2728 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2728 += 1, R2678 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R2728 += 1, R2677 += 1, R2678 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2728 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2730 += 1, R2680 += 1 };
  s0 -> s0 [0, 65535] { R2729 += 1, R2730 += 1 };
  s0 -> s2 [0, 65535] { R2730 += 1, R2679 += 1, R2680 += 1 };
  s0 -> s3 [65, 65] { R2730 += 1, R2680 += 1 };
  s0 -> s4 [65, 65] { R2730 += 1, R2680 += 1 };
  s0 -> s5 [87, 87] { R2730 += 1, R2680 += 1 };
  s0 -> s1 [88, 65535] { R2730 += 1, R2680 += 1 };
  s1 -> s1 [0, 64] { R2730 += 1, R2680 += 1 };
  s1 -> s3 [65, 65] { R2730 += 1, R2680 += 1 };
  s1 -> s4 [65, 65] { R2730 += 1, R2680 += 1 };
  s1 -> s5 [87, 87] { R2730 += 1, R2680 += 1 };
  s1 -> s1 [88, 65535] { R2730 += 1, R2680 += 1 };
  s2 -> s1 [0, 64] { R2730 += 1, R2680 += 1 };
  s2 -> s2 [0, 65535] { R2730 += 1, R2679 += 1, R2680 += 1 };
  s2 -> s3 [65, 65] { R2730 += 1, R2680 += 1 };
  s2 -> s4 [65, 65] { R2730 += 1, R2680 += 1 };
  s2 -> s5 [87, 87] { R2730 += 1, R2680 += 1 };
  s2 -> s1 [88, 65535] { R2730 += 1, R2680 += 1 };
  s4 -> s4 [0, 65] { R2730 += 1, R2680 += 1 };
  s4 -> s8 [87, 87] { R2730 += 1, R2680 += 1 };
  s4 -> s4 [88, 65535] { R2730 += 1, R2680 += 1 };
  s5 -> s5 [0, 64] { R2730 += 1, R2680 += 1 };
  s5 -> s5 [0, 65535] { R2730 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2730 += 1, R2680 += 1 };
  s5 -> s8 [65, 65] { R2730 += 1, R2680 += 1 };
  s5 -> s5 [87, 65535] { R2730 += 1, R2680 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R2730 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65] { R2730 += 1, R2680 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2730 += 1 };
  s8 -> s8 [87, 65535] { R2730 += 1, R2680 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R2731 += 1, R2732 += 1 };
  s0 -> s2 [0, 65535] { R2732 += 1, R2681 += 1, R2682 += 1 };
  s0 -> s3 [65, 65] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R2732 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2732 += 1, R2681 += 1, R2682 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2732 += 1, R2682 += 1, R1769 += 1 };
  s3 -> s6 [0, 65535] { R2732 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2732 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2732 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2734 += 1, R2683 += 1, R2684 += 1 };
  s0 -> s0 [0, 65535] { R2733 += 1, R2734 += 1 };
  s0 -> s3 [65, 65] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R2734 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R2734 += 1, R2683 += 1, R2684 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R2734 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2734 += 1, R2684 += 1, R1771 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2734 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2734 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s0 [0, 65535] { R2735 += 1, R2736 += 1 };
  s0 -> s3 [0, 65535] { R2736 += 1, R2685 += 1, R2686 += 1 };
  s0 -> s4 [65, 65] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s0 -> s1 [66, 86] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s0 -> s2 [66, 65535] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s1 [88, 65535] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s1 -> s1 [0, 65535] { R2736 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R2736 += 1, R2686 += 1 };
  s1 -> s7 [65, 65] { R2736 += 1, R2686 += 1 };
  s1 -> s1 [66, 86] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R2736 += 1, R2686 += 1 };
  s1 -> s1 [88, 65535] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s2 -> s1 [0, 64] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s4 [65, 65] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s2 -> s5 [65, 65] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s6 [65, 65] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s7 [65, 65] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s2 -> s1 [66, 86] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s2 -> s1 [88, 65535] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R2736 += 1, R2685 += 1, R2686 += 1 };
  s3 -> s4 [65, 65] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s3 -> s1 [66, 86] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s3 -> s2 [66, 65535] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s1 [88, 65535] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R2736 += 1 };
  s4 -> s8 [0, 65535];
  s6 -> s7 [0, 86] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s6 -> s6 [0, 65535] { R2736 += 1, R2686 += 1, R2641 += 1, R2642 += 1 };
  s6 -> s7 [88, 65535] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s7 -> s7 [0, 86] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s7 -> s7 [0, 65535] { R2736 += 1, R2686 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s9 [0, 65535] { R2736 += 1 };
  s7 -> s7 [88, 65535] { R2736 += 1, R2686 += 1, R2642 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R2736 += 1 };
  accepting s4, s8, s9, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s0 [0, 65535] { R2737 += 1, R2738 += 1 };
  s0 -> s2 [0, 65535] { R2738 += 1, R2687 += 1, R2688 += 1 };
  s0 -> s3 [65, 65] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s4 [65, 65] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s1 [66, 65535] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [0, 64] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [0, 65535] { R2738 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s4 [65, 65] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [66, 65535] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s1 [0, 64] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2738 += 1, R2687 += 1, R2688 += 1 };
  s2 -> s3 [65, 65] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s4 [65, 65] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s1 [66, 65535] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R2738 += 1 };
  s4 -> s5 [0, 65535] { R2738 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R2738 += 1, R2688 += 1, R2645 += 1, R2646 += 1 };
  s5 -> s5 [0, 65535] { R2738 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2740 += 1, R2690 += 1 };
  s0 -> s0 [0, 65535] { R2739 += 1, R2740 += 1 };
  s0 -> s2 [0, 65535] { R2740 += 1, R2689 += 1, R2690 += 1 };
  s0 -> s3 [65, 65] { R2740 += 1, R2690 += 1 };
  s0 -> s4 [65, 65] { R2740 += 1, R2690 += 1 };
  s0 -> s1 [66, 65535] { R2740 += 1, R2690 += 1 };
  s1 -> s1 [0, 64] { R2740 += 1, R2690 += 1 };
  s1 -> s1 [0, 65535] { R2740 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2740 += 1, R2690 += 1 };
  s1 -> s4 [65, 65] { R2740 += 1, R2690 += 1 };
  s1 -> s1 [66, 65535] { R2740 += 1, R2690 += 1 };
  s2 -> s1 [0, 64] { R2740 += 1, R2690 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2740 += 1, R2689 += 1, R2690 += 1 };
  s2 -> s3 [65, 65] { R2740 += 1, R2690 += 1 };
  s2 -> s4 [65, 65] { R2740 += 1, R2690 += 1 };
  s2 -> s1 [66, 65535] { R2740 += 1, R2690 += 1 };
  s3 -> s3 [0, 65535] { R2740 += 1, R2690 += 1 };
  s3 -> s6 [0, 65535] { R2740 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2740 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2740 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s0 -> s0 [0, 65535] { R2741 += 1, R2742 += 1 };
  s0 -> s2 [0, 65535] { R2742 += 1, R2691 += 1, R2692 += 1 };
  s0 -> s3 [65, 65] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s0 -> s4 [65, 65] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s0 -> s1 [66, 65535] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s1 -> s1 [0, 64] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2742 += 1 };
  s1 -> s3 [65, 65] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s1 -> s4 [65, 65] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s1 -> s1 [66, 65535] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s2 -> s1 [0, 64] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2742 += 1, R2691 += 1, R2692 += 1 };
  s2 -> s3 [65, 65] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s2 -> s4 [65, 65] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s2 -> s1 [66, 65535] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2742 += 1, R2692 += 1, R2651 += 1, R2652 += 1 };
  s3 -> s6 [0, 65535] { R2742 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2742 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2742 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2744 += 1, R2694 += 1 };
  s0 -> s2 [0, 65535] { R2744 += 1, R2693 += 1, R2694 += 1 };
  s0 -> s0 [0, 65535] { R2743 += 1, R2744 += 1 };
  s0 -> s3 [65, 65] { R2744 += 1, R2694 += 1 };
  s0 -> s4 [65, 65] { R2744 += 1, R2694 += 1 };
  s0 -> s1 [66, 65535] { R2744 += 1, R2694 += 1 };
  s1 -> s1 [0, 64] { R2744 += 1, R2694 += 1 };
  s1 -> s1 [0, 65535] { R2744 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2744 += 1, R2694 += 1 };
  s1 -> s4 [65, 65] { R2744 += 1, R2694 += 1 };
  s1 -> s1 [66, 65535] { R2744 += 1, R2694 += 1 };
  s2 -> s1 [0, 64] { R2744 += 1, R2694 += 1 };
  s2 -> s2 [0, 65535] { R2744 += 1, R2693 += 1, R2694 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R2744 += 1, R2694 += 1 };
  s2 -> s4 [65, 65] { R2744 += 1, R2694 += 1 };
  s2 -> s1 [66, 65535] { R2744 += 1, R2694 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2744 += 1, R2694 += 1 };
  s3 -> s6 [0, 65535] { R2744 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2744 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2744 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2676 && R2 = R2744 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2657 = 0 && R2658 = R2676 && R2659 = 0 && R2660 = R2676 && R2661 = 0 && R2662 = R2676 && R2663 = 0 && R2664 = R2676 && R2665 = 0 && R2666 = R2676 && R2667 = 0 && R2668 = R2676 && R2669 = 0 && R2670 = R2676 && R2671 = 0 && R2672 = R2676 && R2673 = 0 && R2674 = R2676 && R2675 = 0 && R2679 = 0 && R2680 = 0 && R2685 = 0 && R2686 = 0 && R2695 = 10 && R2696 = R2744 && R2697 = 10 && R2698 = R2744 && R2699 = 10 && R2700 = R2744 && R2701 = 10 && R2702 = R2744 && R2703 = 10 && R2704 = R2744 && R2705 = 10 && R2706 = R2744 && R2707 = 10 && R2708 = R2744 && R2709 = 10 && R2710 = R2744 && R2711 = 10 && R2712 = R2744 && R2713 = 10 && R2714 = R2744 && R2715 = 10 && R2716 = R2744 && R2717 = 10 && R2718 = R2744 && R2719 = 10 && R2720 = R2744 && R2721 = 10 && R2722 = R2744 && R2723 = 10 && R2724 = R2744 && R2725 = 10 && R2726 = R2744 && R2727 = 10 && R2728 = R2744 && R2729 = 10 && R2730 = R2744 && R2731 = 10 && R2732 = R2744 && R2733 = 10 && R2734 = R2744 && R2735 = 10 && R2736 = R2744 && R2737 = 10 && R2738 = R2744 && R2739 = 10 && R2740 = R2744 && R2741 = 10 && R2742 = R2744 && R2743 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2676 && 9 < R2744 && (R14 = 0 || (R2677 = 0 && R2678 = 0)) && (R14 = 0 || (R2681 = 0 && R2682 = 0)) && (R14 = 0 || (R2683 = 0 && R2684 = 0)) && (R14 = 0 || (R2687 = 0 && R2688 = 0)) && (R14 = 0 || (R2689 = 0 && R2690 = 0)) && (R14 = 0 || (R2691 = 0 && R2692 = 0)) && (R14 = 0 || (R2693 = 0 && R2694 = 0)) && (R2650 + R2647 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R2650 + R2647 = 0 || (R2648 + R2645 = 0 && R2649 + R2646 = 0)) && (R2656 + R2653 = 0 || (R2654 + R2651 = 0 && R2655 + R2652 = 0));
// End of Parikh automata intersection problem
