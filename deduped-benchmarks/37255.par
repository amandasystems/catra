// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R3, R3221, R3222, R3223, R3224, R3225, R3226, R3227, R3228, R3229, R3230, R3231, R3232, R3233, R3234, R3235, R3236, R3237, R3238, R3239, R3240, R3241, R3242, R3243, R3244, R3245, R3246, R3247, R3248, R3249, R3250, R3251, R3252, R3253, R3254, R3255, R3256, R3257, R3258, R3259, R3260, R3261, R3262, R3263, R3264, R3265, R3266, R3267, R3268, R3269, R3270, R3271, R3272, R3273, R3274, R3275, R3276, R3277, R3278, R3279, R3280, R3281, R3282, R3283, R3284, R3285, R3286, R3287, R3288, R3289, R3290, R3291, R3292, R3293, R3294, R3295, R3296, R3297, R3298, R3299, R3300, R3301, R3302, R3303, R3304, R3305, R3306, R3307, R3308, R3309, R3310, R3311, R3312, R3313, R3314, R3315, R3316, R3317, R3318, R3319, R3320, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3272 += 1 };
  s0 -> s0 [0, 65535] { R3271 += 1, R3272 += 1 };
  s0 -> s1 [45, 45] { R3272 += 1 };
  s0 -> s2 [46, 46] { R3272 += 1 };
  s0 -> s1 [48, 62] { R3272 += 1 };
  s0 -> s3 [65, 65] { R3272 += 1 };
  s0 -> s1 [66, 65535] { R3272 += 1 };
  s1 -> s1 [0, 43] { R3272 += 1 };
  s1 -> s1 [45, 45] { R3272 += 1 };
  s1 -> s2 [46, 46] { R3272 += 1 };
  s1 -> s1 [48, 62] { R3272 += 1 };
  s1 -> s3 [65, 65] { R3272 += 1 };
  s1 -> s1 [66, 65535] { R3272 += 1 };
  s2 -> s1 [0, 43] { R3272 += 1 };
  s2 -> s1 [45, 45] { R3272 += 1 };
  s2 -> s2 [46, 46] { R3272 += 1 };
  s2 -> s1 [48, 62] { R3272 += 1 };
  s2 -> s3 [65, 65] { R3272 += 1 };
  s2 -> s1 [66, 114] { R3272 += 1 };
  s2 -> s8 [115, 115] { R3272 += 1 };
  s2 -> s1 [116, 65535] { R3272 += 1 };
  s3 -> s3 [0, 43] { R3272 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3272 += 1 };
  s3 -> s4 [46, 46] { R3272 += 1 };
  s3 -> s3 [48, 62] { R3272 += 1 };
  s3 -> s3 [65, 65535] { R3272 += 1 };
  s4 -> s3 [0, 43] { R3272 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3272 += 1 };
  s4 -> s4 [46, 46] { R3272 += 1 };
  s4 -> s3 [48, 62] { R3272 += 1 };
  s4 -> s3 [65, 114] { R3272 += 1 };
  s4 -> s5 [115, 115] { R3272 += 1 };
  s4 -> s3 [116, 65535] { R3272 += 1 };
  s5 -> s3 [0, 43] { R3272 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3272 += 1 };
  s5 -> s4 [46, 46] { R3272 += 1 };
  s5 -> s3 [48, 62] { R3272 += 1 };
  s5 -> s3 [65, 110] { R3272 += 1 };
  s5 -> s6 [111, 111] { R3272 += 1 };
  s5 -> s3 [112, 65535] { R3272 += 1 };
  s6 -> s3 [0, 43] { R3272 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3272 += 1 };
  s6 -> s4 [46, 46] { R3272 += 1 };
  s6 -> s3 [48, 62] { R3272 += 1 };
  s6 -> s3 [65, 98] { R3272 += 1 };
  s6 -> s7 [99, 99] { R3272 += 1 };
  s6 -> s3 [100, 65535] { R3272 += 1 };
  s7 -> s3 [0, 43] { R3272 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3272 += 1 };
  s7 -> s4 [46, 46] { R3272 += 1 };
  s7 -> s3 [48, 62] { R3272 += 1 };
  s7 -> s3 [65, 106] { R3272 += 1 };
  s7 -> s3 [108, 65535] { R3272 += 1 };
  s8 -> s1 [0, 43] { R3272 += 1 };
  s8 -> s1 [45, 45] { R3272 += 1 };
  s8 -> s2 [46, 46] { R3272 += 1 };
  s8 -> s1 [48, 62] { R3272 += 1 };
  s8 -> s3 [65, 65] { R3272 += 1 };
  s8 -> s1 [66, 110] { R3272 += 1 };
  s8 -> s9 [111, 111] { R3272 += 1 };
  s8 -> s1 [112, 65535] { R3272 += 1 };
  s9 -> s1 [0, 43] { R3272 += 1 };
  s9 -> s1 [45, 45] { R3272 += 1 };
  s9 -> s2 [46, 46] { R3272 += 1 };
  s9 -> s1 [48, 62] { R3272 += 1 };
  s9 -> s3 [65, 65] { R3272 += 1 };
  s9 -> s1 [66, 98] { R3272 += 1 };
  s9 -> s10 [99, 99] { R3272 += 1 };
  s9 -> s1 [100, 65535] { R3272 += 1 };
  s10 -> s1 [0, 43] { R3272 += 1 };
  s10 -> s1 [45, 45] { R3272 += 1 };
  s10 -> s2 [46, 46] { R3272 += 1 };
  s10 -> s1 [48, 62] { R3272 += 1 };
  s10 -> s3 [65, 65] { R3272 += 1 };
  s10 -> s1 [66, 106] { R3272 += 1 };
  s10 -> s1 [108, 65535] { R3272 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R3274 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R3273 += 1, R3274 += 1 };
  s1 -> s1 [0, 65535] { R3274 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3276 += 1 };
  s0 -> s2 [0, 65535] { R3276 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3275 += 1, R3276 += 1 };
  s0 -> s3 [58, 58] { R3276 += 1 };
  s0 -> s1 [59, 65535] { R3276 += 1 };
  s1 -> s1 [0, 57] { R3276 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3276 += 1 };
  s1 -> s1 [59, 65535] { R3276 += 1 };
  s2 -> s1 [0, 57] { R3276 += 1 };
  s2 -> s2 [0, 65535] { R3276 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3276 += 1 };
  s2 -> s1 [59, 65535] { R3276 += 1 };
  s3 -> s3 [0, 65535] { R3276 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3278 += 1 };
  s0 -> s2 [0, 65535] { R3278 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R3277 += 1, R3278 += 1 };
  s0 -> s3 [65, 65] { R3278 += 1 };
  s0 -> s1 [66, 65535] { R3278 += 1 };
  s1 -> s1 [0, 64] { R3278 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3278 += 1 };
  s1 -> s1 [66, 65535] { R3278 += 1 };
  s2 -> s1 [0, 64] { R3278 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3278 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R3278 += 1 };
  s2 -> s1 [66, 65535] { R3278 += 1 };
  s3 -> s3 [0, 65535] { R3278 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3280 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R3280 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3279 += 1, R3280 += 1 };
  s0 -> s3 [91, 91] { R3280 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3280 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3280 += 1 };
  s1 -> s1 [0, 65535] { R3280 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R3280 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R3280 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R3280 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3280 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3280 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3280 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R3281 += 1, R3282 += 1 };
  s0 -> s1 [0, 65535] { R3282 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R3282 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3282 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R3282 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3282 += 1 };
  s2 -> s2 [0, 65535] { R3282 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3282 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3284 += 1, R3234 += 1 };
  s0 -> s2 [0, 65535] { R3284 += 1, R3233 += 1, R3234 += 1 };
  s0 -> s0 [0, 65535] { R3283 += 1, R3284 += 1 };
  s0 -> s1 [66, 65535] { R3284 += 1, R3234 += 1 };
  s1 -> s1 [0, 64] { R3284 += 1, R3234 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3284 += 1 };
  s1 -> s1 [66, 65535] { R3284 += 1, R3234 += 1 };
  s2 -> s1 [0, 64] { R3284 += 1, R3234 += 1 };
  s2 -> s2 [0, 65535] { R3284 += 1, R3233 += 1, R3234 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R3284 += 1, R3234 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3286 += 1, R3235 += 1, R3236 += 1 };
  s0 -> s2 [0, 65535] { R3286 += 1, R3236 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R3285 += 1, R3286 += 1 };
  s1 -> s1 [0, 65535] { R3286 += 1, R3235 += 1, R3236 += 1 };
  s1 -> s2 [0, 65535] { R3286 += 1, R3236 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3286 += 1 };
  s2 -> s2 [0, 65535] { R3286 += 1, R3236 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3286 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3288 += 1, R3238 += 1 };
  s0 -> s0 [0, 65535] { R3287 += 1, R3288 += 1 };
  s0 -> s2 [0, 65535] { R3288 += 1, R3237 += 1, R3238 += 1 };
  s0 -> s1 [87, 65535] { R3288 += 1, R3238 += 1 };
  s1 -> s1 [0, 65] { R3288 += 1, R3238 += 1 };
  s1 -> s1 [0, 65535] { R3288 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R3288 += 1, R3238 += 1 };
  s2 -> s1 [0, 65] { R3288 += 1, R3238 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3288 += 1, R3237 += 1, R3238 += 1 };
  s2 -> s1 [87, 65535] { R3288 += 1, R3238 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R3290 += 1, R3239 += 1, R3240 += 1 };
  s0 -> s2 [0, 65535] { R3290 += 1, R3240 += 1, R1770 += 1 };
  s0 -> s0 [0, 65535] { R3289 += 1, R3290 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3290 += 1, R3239 += 1, R3240 += 1 };
  s1 -> s2 [0, 65535] { R3290 += 1, R3240 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3290 += 1 };
  s2 -> s2 [0, 65535] { R3290 += 1, R3240 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3290 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R3292 += 1, R3242 += 1 };
  s0 -> s0 [0, 65535] { R3291 += 1, R3292 += 1 };
  s0 -> s2 [0, 65535] { R3292 += 1, R3241 += 1, R3242 += 1 };
  s0 -> s3 [0, 65535] { R3292 += 1, R3242 += 1, R1772 += 1 };
  s0 -> s1 [88, 65535] { R3292 += 1, R3242 += 1 };
  s1 -> s1 [0, 86] { R3292 += 1, R3242 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3292 += 1 };
  s1 -> s1 [88, 65535] { R3292 += 1, R3242 += 1 };
  s2 -> s1 [0, 86] { R3292 += 1, R3242 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3292 += 1, R3241 += 1, R3242 += 1 };
  s2 -> s3 [0, 65535] { R3292 += 1, R3242 += 1, R1772 += 1 };
  s2 -> s1 [88, 65535] { R3292 += 1, R3242 += 1 };
  s3 -> s1 [0, 86] { R3292 += 1, R3242 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R3292 += 1 };
  s3 -> s3 [0, 65535] { R3292 += 1, R3242 += 1, R1772 += 1 };
  s3 -> s1 [88, 65535] { R3292 += 1, R3242 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3292 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R3294 += 1, R3244 += 1, R2644 += 1 };
  s0 -> s2 [0, 65535] { R3294 += 1, R3243 += 1, R3244 += 1 };
  s0 -> s1 [0, 65535] { R3294 += 1, R3244 += 1 };
  s0 -> s0 [0, 65535] { R3293 += 1, R3294 += 1 };
  s0 -> s1 [88, 65535] { R3294 += 1, R3244 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R3294 += 1, R3244 += 1, R2644 += 1 };
  s1 -> s1 [0, 65535] { R3294 += 1, R3244 += 1 };
  s1 -> s4 [0, 65535] { R3294 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R3294 += 1, R3244 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R3294 += 1, R3244 += 1, R2644 += 1 };
  s2 -> s2 [0, 65535] { R3294 += 1, R3243 += 1, R3244 += 1 };
  s2 -> s1 [0, 65535] { R3294 += 1, R3244 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R3294 += 1, R3244 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3294 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3296 += 1, R3246 += 1 };
  s0 -> s2 [0, 65535] { R3296 += 1, R3245 += 1, R3246 += 1 };
  s0 -> s0 [0, 65535] { R3295 += 1, R3296 += 1 };
  s1 -> s1 [0, 65535] { R3296 += 1, R3246 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3296 += 1 };
  s2 -> s1 [0, 65535] { R3296 += 1, R3246 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3296 += 1, R3245 += 1, R3246 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3296 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3298 += 1, R3248 += 1 };
  s0 -> s2 [0, 65535] { R3298 += 1, R3247 += 1, R3248 += 1 };
  s0 -> s0 [0, 65535] { R3297 += 1, R3298 += 1 };
  s1 -> s1 [0, 65535] { R3298 += 1, R3248 += 1 };
  s1 -> s4 [0, 65535] { R3298 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3298 += 1, R3248 += 1 };
  s2 -> s2 [0, 65535] { R3298 += 1, R3247 += 1, R3248 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3298 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3300 += 1, R3250 += 1, R3230 += 1, R3231 += 1 };
  s0 -> s2 [0, 65535] { R3300 += 1, R3250 += 1, R3231 += 1, R3232 += 1 };
  s0 -> s0 [0, 65535] { R3299 += 1, R3300 += 1 };
  s0 -> s3 [0, 65535] { R3300 += 1, R3249 += 1, R3250 += 1 };
  s1 -> s1 [0, 65535] { R3300 += 1, R3250 += 1, R3230 += 1, R3231 += 1 };
  s1 -> s5 [0, 65535] { R3300 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3300 += 1, R3250 += 1, R3231 += 1, R3232 += 1 };
  s2 -> s5 [0, 65535] { R3300 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3300 += 1, R3250 += 1, R3231 += 1, R3232 += 1 };
  s2 -> s6 [0, 65535] { R3300 += 1, R3250 += 1 };
  s3 -> s1 [0, 65535] { R3300 += 1, R3250 += 1, R3230 += 1, R3231 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3300 += 1, R3250 += 1, R3231 += 1, R3232 += 1 };
  s3 -> s3 [0, 65535] { R3300 += 1, R3249 += 1, R3250 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3300 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R3300 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R3300 += 1, R3250 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3301 += 1, R3302 += 1 };
  s0 -> s1 [0, 65535] { R3302 += 1, R3251 += 1, R3252 += 1 };
  s0 -> s2 [0, 65535] { R3302 += 1, R3252 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R3302 += 1, R3251 += 1, R3252 += 1 };
  s1 -> s2 [0, 65535] { R3302 += 1, R3252 += 1 };
  s2 -> s3 [0, 65535] { R3302 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3302 += 1, R3252 += 1 };
  s3 -> s3 [0, 65535] { R3302 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3304 += 1, R3253 += 1, R3254 += 1 };
  s0 -> s0 [0, 65535] { R3303 += 1, R3304 += 1 };
  s0 -> s2 [0, 65535] { R3304 += 1, R3254 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R3304 += 1, R3253 += 1, R3254 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R3304 += 1, R3254 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R3304 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3304 += 1, R3254 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R3304 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3306 += 1, R3256 += 1 };
  s0 -> s2 [0, 65535] { R3306 += 1, R3255 += 1, R3256 += 1 };
  s0 -> s0 [0, 65535] { R3305 += 1, R3306 += 1 };
  s0 -> s3 [65, 65] { R3306 += 1, R3256 += 1 };
  s0 -> s4 [65, 65] { R3306 += 1, R3256 += 1 };
  s0 -> s5 [87, 87] { R3306 += 1, R3256 += 1 };
  s0 -> s1 [88, 65535] { R3306 += 1, R3256 += 1 };
  s1 -> s1 [0, 64] { R3306 += 1, R3256 += 1 };
  s1 -> s3 [65, 65] { R3306 += 1, R3256 += 1 };
  s1 -> s4 [65, 65] { R3306 += 1, R3256 += 1 };
  s1 -> s5 [87, 87] { R3306 += 1, R3256 += 1 };
  s1 -> s1 [88, 65535] { R3306 += 1, R3256 += 1 };
  s2 -> s1 [0, 64] { R3306 += 1, R3256 += 1 };
  s2 -> s2 [0, 65535] { R3306 += 1, R3255 += 1, R3256 += 1 };
  s2 -> s3 [65, 65] { R3306 += 1, R3256 += 1 };
  s2 -> s4 [65, 65] { R3306 += 1, R3256 += 1 };
  s2 -> s5 [87, 87] { R3306 += 1, R3256 += 1 };
  s2 -> s1 [88, 65535] { R3306 += 1, R3256 += 1 };
  s3 -> s3 [0, 65] { R3306 += 1, R3256 += 1 };
  s3 -> s7 [87, 87] { R3306 += 1, R3256 += 1 };
  s3 -> s3 [88, 65535] { R3306 += 1, R3256 += 1 };
  s5 -> s5 [0, 64] { R3306 += 1, R3256 += 1 };
  s5 -> s5 [0, 65535] { R3306 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R3306 += 1, R3256 += 1 };
  s5 -> s8 [65, 65] { R3306 += 1, R3256 += 1 };
  s5 -> s5 [87, 65535] { R3306 += 1, R3256 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R3306 += 1, R3256 += 1 };
  s7 -> s7 [0, 65535] { R3306 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R3306 += 1, R3256 += 1 };
  s8 -> s8 [0, 65535] { R3306 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R3308 += 1, R3257 += 1, R3258 += 1 };
  s0 -> s0 [0, 65535] { R3307 += 1, R3308 += 1 };
  s0 -> s3 [65, 65] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3308 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3308 += 1, R3257 += 1, R3258 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3308 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3308 += 1 };
  s4 -> s4 [0, 65535] { R3308 += 1, R3258 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3308 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R3310 += 1, R3259 += 1, R3260 += 1 };
  s0 -> s0 [0, 65535] { R3309 += 1, R3310 += 1 };
  s0 -> s3 [65, 65] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R3310 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R3310 += 1, R3259 += 1, R3260 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R3310 += 1, R3260 += 1, R1771 += 1 };
  s3 -> s6 [0, 65535] { R3310 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3310 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3310 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R3312 += 1, R3261 += 1, R3262 += 1 };
  s0 -> s0 [0, 65535] { R3311 += 1, R3312 += 1 };
  s0 -> s4 [65, 65] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [66, 86] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s0 -> s1 [66, 65535] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [88, 65535] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [0, 64] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s1 -> s4 [65, 65] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s1 -> s5 [65, 65] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s6 [65, 65] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s1 -> s7 [65, 65] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [66, 86] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [88, 65535] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R3312 += 1 };
  s2 -> s4 [65, 65] { R3312 += 1, R3262 += 1 };
  s2 -> s6 [65, 65] { R3312 += 1, R3262 += 1 };
  s2 -> s2 [66, 86] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R3312 += 1, R3262 += 1 };
  s2 -> s2 [88, 65535] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R3312 += 1, R3261 += 1, R3262 += 1 };
  s3 -> s4 [65, 65] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [66, 86] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s3 -> s1 [66, 65535] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [88, 65535] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R3312 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 86] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s5 -> s5 [0, 65535] { R3312 += 1, R3262 += 1, R2641 += 1, R2642 += 1 };
  s5 -> s6 [88, 65535] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s6 -> s6 [0, 86] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s6 -> s6 [0, 65535] { R3312 += 1, R3262 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R3312 += 1 };
  s6 -> s6 [88, 65535] { R3312 += 1, R3262 += 1, R2642 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R3312 += 1 };
  accepting s4, s8, s2, s9, s6;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s2 [0, 64] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s3 [0, 65535] { R3314 += 1, R3263 += 1, R3264 += 1 };
  s0 -> s0 [0, 65535] { R3313 += 1, R3314 += 1 };
  s0 -> s4 [65, 65] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s5 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s6 [65, 65] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s7 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s0 -> s1 [66, 65535] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s0 -> s2 [66, 65535] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s1 [0, 64] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s1 -> s2 [0, 64] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s4 [65, 65] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s1 -> s5 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s6 [65, 65] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s1 -> s7 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s1 -> s1 [66, 65535] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s1 -> s2 [66, 65535] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s11 [0, 64] { R3314 += 1, R3264 += 1 };
  s2 -> s2 [0, 64] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s12 [65, 65] { R3314 += 1, R3264 += 1 };
  s2 -> s5 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s8 [65, 65] { R3314 += 1, R3264 += 1 };
  s2 -> s7 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s2 -> s11 [66, 65535] { R3314 += 1, R3264 += 1 };
  s2 -> s2 [66, 65535] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s1 [0, 64] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s2 [0, 64] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s3 [0, 65535] { R3314 += 1, R3263 += 1, R3264 += 1 };
  s3 -> s4 [65, 65] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s5 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s6 [65, 65] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s7 [65, 65] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s3 -> s1 [66, 65535] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s3 -> s2 [66, 65535] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s4 -> s4 [0, 65535] { R3314 += 1, R3264 += 1, R3221 += 1, R3222 += 1 };
  s4 -> s5 [0, 65535] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s5 -> s5 [0, 65535] { R3314 += 1, R3264 += 1, R3222 += 1, R3223 += 1 };
  s5 -> s8 [0, 65535] { R3314 += 1, R3264 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R3314 += 1, R3264 += 1 };
  s8 -> s10 [0, 65535] { R3314 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3314 += 1 };
  s11 -> s11 [0, 64] { R3314 += 1, R3264 += 1 };
  s11 -> s11 [0, 65535] { R3314 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R3314 += 1, R3264 += 1 };
  s11 -> s8 [65, 65] { R3314 += 1, R3264 += 1 };
  s11 -> s11 [66, 65535] { R3314 += 1, R3264 += 1 };
  s12 -> s12 [0, 65535] { R3314 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3316 += 1, R3266 += 1 };
  s0 -> s0 [0, 65535] { R3315 += 1, R3316 += 1 };
  s0 -> s2 [0, 65535] { R3316 += 1, R3265 += 1, R3266 += 1 };
  s0 -> s3 [65, 65] { R3316 += 1, R3266 += 1 };
  s0 -> s4 [65, 65] { R3316 += 1, R3266 += 1 };
  s0 -> s1 [66, 65535] { R3316 += 1, R3266 += 1 };
  s1 -> s1 [0, 64] { R3316 += 1, R3266 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3316 += 1 };
  s1 -> s3 [65, 65] { R3316 += 1, R3266 += 1 };
  s1 -> s4 [65, 65] { R3316 += 1, R3266 += 1 };
  s1 -> s1 [66, 65535] { R3316 += 1, R3266 += 1 };
  s2 -> s1 [0, 64] { R3316 += 1, R3266 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3316 += 1, R3265 += 1, R3266 += 1 };
  s2 -> s3 [65, 65] { R3316 += 1, R3266 += 1 };
  s2 -> s4 [65, 65] { R3316 += 1, R3266 += 1 };
  s2 -> s1 [66, 65535] { R3316 += 1, R3266 += 1 };
  s3 -> s3 [0, 65535] { R3316 += 1, R3266 += 1 };
  s3 -> s6 [0, 65535] { R3316 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3316 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3316 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s0 -> s0 [0, 65535] { R3317 += 1, R3318 += 1 };
  s0 -> s2 [0, 65535] { R3318 += 1, R3267 += 1, R3268 += 1 };
  s0 -> s3 [65, 65] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s0 -> s4 [65, 65] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s0 -> s1 [66, 65535] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s1 -> s1 [0, 64] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R3318 += 1 };
  s1 -> s3 [65, 65] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s1 -> s4 [65, 65] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s1 -> s1 [66, 65535] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s2 -> s1 [0, 64] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3318 += 1, R3267 += 1, R3268 += 1 };
  s2 -> s3 [65, 65] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s2 -> s4 [65, 65] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s2 -> s1 [66, 65535] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R3318 += 1, R3268 += 1, R3227 += 1, R3228 += 1 };
  s3 -> s6 [0, 65535] { R3318 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3318 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3318 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3320 += 1, R3270 += 1 };
  s0 -> s0 [0, 65535] { R3319 += 1, R3320 += 1 };
  s0 -> s2 [0, 65535] { R3320 += 1, R3269 += 1, R3270 += 1 };
  s0 -> s3 [65, 65] { R3320 += 1, R3270 += 1 };
  s0 -> s4 [65, 65] { R3320 += 1, R3270 += 1 };
  s0 -> s1 [66, 65535] { R3320 += 1, R3270 += 1 };
  s1 -> s1 [0, 64] { R3320 += 1, R3270 += 1 };
  s1 -> s1 [0, 65535] { R3320 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3320 += 1, R3270 += 1 };
  s1 -> s4 [65, 65] { R3320 += 1, R3270 += 1 };
  s1 -> s1 [66, 65535] { R3320 += 1, R3270 += 1 };
  s2 -> s1 [0, 64] { R3320 += 1, R3270 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3320 += 1, R3269 += 1, R3270 += 1 };
  s2 -> s3 [65, 65] { R3320 += 1, R3270 += 1 };
  s2 -> s4 [65, 65] { R3320 += 1, R3270 += 1 };
  s2 -> s1 [66, 65535] { R3320 += 1, R3270 += 1 };
  s3 -> s3 [0, 65535] { R3320 += 1, R3270 += 1 };
  s3 -> s6 [0, 65535] { R3320 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3320 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3320 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3252 && R2 = R3320 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3233 = 0 && R3234 = R3252 && R3235 = 0 && R3236 = R3252 && R3237 = 0 && R3238 = R3252 && R3239 = 0 && R3240 = R3252 && R3241 = 0 && R3242 = R3252 && R3243 = 0 && R3244 = R3252 && R3245 = 0 && R3246 = R3252 && R3247 = 0 && R3248 = R3252 && R3249 = 0 && R3250 = R3252 && R3251 = 0 && R3255 = 0 && R3256 = 0 && R3261 = 0 && R3262 = 0 && R3263 = 0 && R3264 = 0 && R3271 = 10 && R3272 = R3320 && R3273 = 10 && R3274 = R3320 && R3275 = 10 && R3276 = R3320 && R3277 = 10 && R3278 = R3320 && R3279 = 10 && R3280 = R3320 && R3281 = 10 && R3282 = R3320 && R3283 = 10 && R3284 = R3320 && R3285 = 10 && R3286 = R3320 && R3287 = 10 && R3288 = R3320 && R3289 = 10 && R3290 = R3320 && R3291 = 10 && R3292 = R3320 && R3293 = 10 && R3294 = R3320 && R3295 = 10 && R3296 = R3320 && R3297 = 10 && R3298 = R3320 && R3299 = 10 && R3300 = R3320 && R3301 = 10 && R3302 = R3320 && R3303 = 10 && R3304 = R3320 && R3305 = 10 && R3306 = R3320 && R3307 = 10 && R3308 = R3320 && R3309 = 10 && R3310 = R3320 && R3311 = 10 && R3312 = R3320 && R3313 = 10 && R3314 = R3320 && R3315 = 10 && R3316 = R3320 && R3317 = 10 && R3318 = R3320 && R3319 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R3252 && 9 < R3320 && (R14 = 0 || (R3253 = 0 && R3254 = 0)) && (R14 = 0 || (R3257 = 0 && R3258 = 0)) && (R14 = 0 || (R3259 = 0 && R3260 = 0)) && (R14 = 0 || (R3265 = 0 && R3266 = 0)) && (R14 = 0 || (R3267 = 0 && R3268 = 0)) && (R14 = 0 || (R3269 = 0 && R3270 = 0)) && (R3226 + R3223 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R3226 + R3223 = 0 || (R3224 + R3221 = 0 && R3225 + R3222 = 0)) && (R3232 + R3229 = 0 || (R3230 + R3227 = 0 && R3231 + R3228 = 0));
// End of Parikh automata intersection problem
