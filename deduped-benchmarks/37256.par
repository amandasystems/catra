// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R2933, R2934, R2935, R2936, R2937, R2938, R3, R3127, R3128, R3129, R3130, R3131, R3132, R3133, R3134, R3135, R3136, R3137, R3138, R3139, R3140, R3141, R3142, R3143, R3144, R3145, R3146, R3147, R3148, R3149, R3150, R3151, R3152, R3153, R3154, R3155, R3156, R3157, R3158, R3159, R3160, R3161, R3162, R3163, R3164, R3165, R3166, R3167, R3168, R3169, R3170, R3171, R3172, R3173, R3174, R3175, R3176, R3177, R3178, R3179, R3180, R3181, R3182, R3183, R3184, R3185, R3186, R3187, R3188, R3189, R3190, R3191, R3192, R3193, R3194, R3195, R3196, R3197, R3198, R3199, R3200, R3201, R3202, R3203, R3204, R3205, R3206, R3207, R3208, R3209, R3210, R3211, R3212, R3213, R3214, R3215, R3216, R3217, R3218, R3219, R3220, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R3172 += 1 };
  s0 -> s0 [0, 65535] { R3171 += 1, R3172 += 1 };
  s0 -> s1 [45, 45] { R3172 += 1 };
  s0 -> s2 [46, 46] { R3172 += 1 };
  s0 -> s1 [48, 62] { R3172 += 1 };
  s0 -> s3 [65, 65] { R3172 += 1 };
  s0 -> s1 [66, 65535] { R3172 += 1 };
  s1 -> s1 [0, 43] { R3172 += 1 };
  s1 -> s1 [45, 45] { R3172 += 1 };
  s1 -> s2 [46, 46] { R3172 += 1 };
  s1 -> s1 [48, 62] { R3172 += 1 };
  s1 -> s3 [65, 65] { R3172 += 1 };
  s1 -> s1 [66, 65535] { R3172 += 1 };
  s2 -> s1 [0, 43] { R3172 += 1 };
  s2 -> s1 [45, 45] { R3172 += 1 };
  s2 -> s2 [46, 46] { R3172 += 1 };
  s2 -> s1 [48, 62] { R3172 += 1 };
  s2 -> s3 [65, 65] { R3172 += 1 };
  s2 -> s1 [66, 114] { R3172 += 1 };
  s2 -> s8 [115, 115] { R3172 += 1 };
  s2 -> s1 [116, 65535] { R3172 += 1 };
  s3 -> s3 [0, 43] { R3172 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R3172 += 1 };
  s3 -> s4 [46, 46] { R3172 += 1 };
  s3 -> s3 [48, 62] { R3172 += 1 };
  s3 -> s3 [65, 65535] { R3172 += 1 };
  s4 -> s3 [0, 43] { R3172 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R3172 += 1 };
  s4 -> s4 [46, 46] { R3172 += 1 };
  s4 -> s3 [48, 62] { R3172 += 1 };
  s4 -> s3 [65, 114] { R3172 += 1 };
  s4 -> s5 [115, 115] { R3172 += 1 };
  s4 -> s3 [116, 65535] { R3172 += 1 };
  s5 -> s3 [0, 43] { R3172 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R3172 += 1 };
  s5 -> s4 [46, 46] { R3172 += 1 };
  s5 -> s3 [48, 62] { R3172 += 1 };
  s5 -> s3 [65, 110] { R3172 += 1 };
  s5 -> s6 [111, 111] { R3172 += 1 };
  s5 -> s3 [112, 65535] { R3172 += 1 };
  s6 -> s3 [0, 43] { R3172 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R3172 += 1 };
  s6 -> s4 [46, 46] { R3172 += 1 };
  s6 -> s3 [48, 62] { R3172 += 1 };
  s6 -> s3 [65, 98] { R3172 += 1 };
  s6 -> s7 [99, 99] { R3172 += 1 };
  s6 -> s3 [100, 65535] { R3172 += 1 };
  s7 -> s3 [0, 43] { R3172 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R3172 += 1 };
  s7 -> s4 [46, 46] { R3172 += 1 };
  s7 -> s3 [48, 62] { R3172 += 1 };
  s7 -> s3 [65, 106] { R3172 += 1 };
  s7 -> s3 [108, 65535] { R3172 += 1 };
  s8 -> s1 [0, 43] { R3172 += 1 };
  s8 -> s1 [45, 45] { R3172 += 1 };
  s8 -> s2 [46, 46] { R3172 += 1 };
  s8 -> s1 [48, 62] { R3172 += 1 };
  s8 -> s3 [65, 65] { R3172 += 1 };
  s8 -> s1 [66, 110] { R3172 += 1 };
  s8 -> s9 [111, 111] { R3172 += 1 };
  s8 -> s1 [112, 65535] { R3172 += 1 };
  s9 -> s1 [0, 43] { R3172 += 1 };
  s9 -> s1 [45, 45] { R3172 += 1 };
  s9 -> s2 [46, 46] { R3172 += 1 };
  s9 -> s1 [48, 62] { R3172 += 1 };
  s9 -> s3 [65, 65] { R3172 += 1 };
  s9 -> s1 [66, 98] { R3172 += 1 };
  s9 -> s10 [99, 99] { R3172 += 1 };
  s9 -> s1 [100, 65535] { R3172 += 1 };
  s10 -> s1 [0, 43] { R3172 += 1 };
  s10 -> s1 [45, 45] { R3172 += 1 };
  s10 -> s2 [46, 46] { R3172 += 1 };
  s10 -> s1 [48, 62] { R3172 += 1 };
  s10 -> s3 [65, 65] { R3172 += 1 };
  s10 -> s1 [66, 106] { R3172 += 1 };
  s10 -> s1 [108, 65535] { R3172 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R3173 += 1, R3174 += 1 };
  s0 -> s1 [0, 65535] { R3174 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R3174 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R3176 += 1 };
  s0 -> s2 [0, 65535] { R3176 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R3175 += 1, R3176 += 1 };
  s0 -> s3 [58, 58] { R3176 += 1 };
  s0 -> s1 [59, 65535] { R3176 += 1 };
  s1 -> s1 [0, 57] { R3176 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R3176 += 1 };
  s1 -> s1 [59, 65535] { R3176 += 1 };
  s2 -> s1 [0, 57] { R3176 += 1 };
  s2 -> s2 [0, 65535] { R3176 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R3176 += 1 };
  s2 -> s1 [59, 65535] { R3176 += 1 };
  s3 -> s3 [0, 65535] { R3176 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R3178 += 1 };
  s0 -> s0 [0, 65535] { R3177 += 1, R3178 += 1 };
  s0 -> s2 [0, 65535] { R3178 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R3178 += 1 };
  s0 -> s1 [66, 65535] { R3178 += 1 };
  s1 -> s1 [0, 64] { R3178 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R3178 += 1 };
  s1 -> s1 [66, 65535] { R3178 += 1 };
  s2 -> s1 [0, 64] { R3178 += 1 };
  s2 -> s2 [0, 65535] { R3178 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R3178 += 1 };
  s2 -> s1 [66, 65535] { R3178 += 1 };
  s3 -> s3 [0, 65535] { R3178 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R3180 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R3179 += 1, R3180 += 1 };
  s0 -> s2 [0, 65535] { R3180 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R3180 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R3180 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R3180 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R3180 += 1 };
  s2 -> s1 [0, 90] { R3180 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3180 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R3180 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R3180 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R3180 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3180 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R3182 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R3181 += 1, R3182 += 1 };
  s0 -> s2 [0, 65535] { R3182 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R3182 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R3182 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R3182 += 1 };
  s2 -> s2 [0, 65535] { R3182 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3182 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R3184 += 1, R3134 += 1 };
  s0 -> s2 [0, 65535] { R3184 += 1, R3133 += 1, R3134 += 1 };
  s0 -> s0 [0, 65535] { R3183 += 1, R3184 += 1 };
  s0 -> s1 [66, 65535] { R3184 += 1, R3134 += 1 };
  s1 -> s1 [0, 64] { R3184 += 1, R3134 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R3184 += 1 };
  s1 -> s1 [66, 65535] { R3184 += 1, R3134 += 1 };
  s2 -> s1 [0, 64] { R3184 += 1, R3134 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3184 += 1, R3133 += 1, R3134 += 1 };
  s2 -> s1 [66, 65535] { R3184 += 1, R3134 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R3186 += 1, R3135 += 1, R3136 += 1 };
  s0 -> s2 [0, 65535] { R3186 += 1, R3136 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R3185 += 1, R3186 += 1 };
  s1 -> s1 [0, 65535] { R3186 += 1, R3135 += 1, R3136 += 1 };
  s1 -> s2 [0, 65535] { R3186 += 1, R3136 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3186 += 1, R3136 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3186 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3186 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R3188 += 1, R3138 += 1 };
  s0 -> s2 [0, 65535] { R3188 += 1, R3137 += 1, R3138 += 1 };
  s0 -> s0 [0, 65535] { R3187 += 1, R3188 += 1 };
  s0 -> s1 [87, 65535] { R3188 += 1, R3138 += 1 };
  s1 -> s1 [0, 65] { R3188 += 1, R3138 += 1 };
  s1 -> s1 [0, 65535] { R3188 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R3188 += 1, R3138 += 1 };
  s2 -> s1 [0, 65] { R3188 += 1, R3138 += 1 };
  s2 -> s2 [0, 65535] { R3188 += 1, R3137 += 1, R3138 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R3188 += 1, R3138 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R3189 += 1, R3190 += 1 };
  s0 -> s1 [0, 65535] { R3190 += 1, R3140 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R3190 += 1, R3139 += 1, R3140 += 1 };
  s1 -> s1 [0, 65535] { R3190 += 1, R3140 += 1, R1770 += 1 };
  s1 -> s4 [0, 65535] { R3190 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3190 += 1, R3140 += 1, R1770 += 1 };
  s2 -> s2 [0, 65535] { R3190 += 1, R3139 += 1, R3140 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3190 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R3192 += 1, R3142 += 1 };
  s0 -> s2 [0, 65535] { R3192 += 1, R3142 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R3191 += 1, R3192 += 1 };
  s0 -> s3 [0, 65535] { R3192 += 1, R3141 += 1, R3142 += 1 };
  s0 -> s1 [88, 65535] { R3192 += 1, R3142 += 1 };
  s1 -> s1 [0, 86] { R3192 += 1, R3142 += 1 };
  s1 -> s1 [0, 65535] { R3192 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R3192 += 1, R3142 += 1 };
  s2 -> s1 [0, 86] { R3192 += 1, R3142 += 1 };
  s2 -> s5 [0, 65535] { R3192 += 1 };
  s2 -> s2 [0, 65535] { R3192 += 1, R3142 += 1, R1772 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R3192 += 1, R3142 += 1 };
  s3 -> s1 [0, 86] { R3192 += 1, R3142 += 1 };
  s3 -> s2 [0, 65535] { R3192 += 1, R3142 += 1, R1772 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3192 += 1, R3141 += 1, R3142 += 1 };
  s3 -> s1 [88, 65535] { R3192 += 1, R3142 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3192 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R3194 += 1, R3144 += 1, R2644 += 1 };
  s0 -> s0 [0, 65535] { R3193 += 1, R3194 += 1 };
  s0 -> s1 [0, 65535] { R3194 += 1, R3144 += 1 };
  s0 -> s2 [0, 65535] { R3194 += 1, R3143 += 1, R3144 += 1 };
  s0 -> s1 [88, 65535] { R3194 += 1, R3144 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R3194 += 1, R3144 += 1, R2644 += 1 };
  s1 -> s4 [0, 65535] { R3194 += 1 };
  s1 -> s1 [0, 65535] { R3194 += 1, R3144 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R3194 += 1, R3144 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R3194 += 1, R3144 += 1, R2644 += 1 };
  s2 -> s1 [0, 65535] { R3194 += 1, R3144 += 1 };
  s2 -> s2 [0, 65535] { R3194 += 1, R3143 += 1, R3144 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R3194 += 1, R3144 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3194 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R3196 += 1, R3146 += 1 };
  s0 -> s2 [0, 65535] { R3196 += 1, R3146 += 1, R2937 += 1, R2938 += 1 };
  s0 -> s3 [0, 65535] { R3196 += 1, R3145 += 1, R3146 += 1 };
  s0 -> s0 [0, 65535] { R3195 += 1, R3196 += 1 };
  s1 -> s5 [0, 65535] { R3196 += 1 };
  s1 -> s1 [0, 65535] { R3196 += 1, R3146 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R3196 += 1 };
  s2 -> s1 [0, 65535] { R3196 += 1, R3146 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3196 += 1, R3146 += 1, R2937 += 1, R2938 += 1 };
  s3 -> s1 [0, 65535] { R3196 += 1, R3146 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R3196 += 1, R3146 += 1, R2937 += 1, R2938 += 1 };
  s3 -> s3 [0, 65535] { R3196 += 1, R3145 += 1, R3146 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R3196 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R3198 += 1, R3147 += 1, R3148 += 1 };
  s0 -> s2 [0, 65535] { R3198 += 1, R3148 += 1 };
  s0 -> s0 [0, 65535] { R3197 += 1, R3198 += 1 };
  s1 -> s1 [0, 65535] { R3198 += 1, R3147 += 1, R3148 += 1 };
  s1 -> s2 [0, 65535] { R3198 += 1, R3148 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R3198 += 1, R3148 += 1 };
  s2 -> s3 [0, 65535] { R3198 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R3198 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R3200 += 1, R3149 += 1, R3150 += 1 };
  s0 -> s0 [0, 65535] { R3199 += 1, R3200 += 1 };
  s0 -> s2 [0, 65535] { R3200 += 1, R3150 += 1 };
  s1 -> s1 [0, 65535] { R3200 += 1, R3149 += 1, R3150 += 1 };
  s1 -> s2 [0, 65535] { R3200 += 1, R3150 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R3200 += 1, R3150 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R3200 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3200 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R3201 += 1, R3202 += 1 };
  s0 -> s1 [0, 65535] { R3202 += 1, R3152 += 1 };
  s0 -> s2 [0, 65535] { R3202 += 1, R3151 += 1, R3152 += 1 };
  s1 -> s4 [0, 65535] { R3202 += 1 };
  s1 -> s1 [0, 65535] { R3202 += 1, R3152 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R3202 += 1, R3152 += 1 };
  s2 -> s2 [0, 65535] { R3202 += 1, R3151 += 1, R3152 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3202 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R3204 += 1, R3154 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R3203 += 1, R3204 += 1 };
  s0 -> s2 [0, 65535] { R3204 += 1, R3153 += 1, R3154 += 1 };
  s1 -> s1 [0, 65535] { R3204 += 1, R3154 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R3204 += 1 };
  s2 -> s1 [0, 65535] { R3204 += 1, R3154 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R3204 += 1, R3153 += 1, R3154 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R3204 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R3206 += 1, R3156 += 1 };
  s0 -> s0 [0, 65535] { R3205 += 1, R3206 += 1 };
  s0 -> s2 [0, 65535] { R3206 += 1, R3155 += 1, R3156 += 1 };
  s0 -> s3 [65, 65] { R3206 += 1, R3156 += 1 };
  s0 -> s4 [65, 65] { R3206 += 1, R3156 += 1 };
  s0 -> s5 [87, 87] { R3206 += 1, R3156 += 1 };
  s0 -> s1 [88, 65535] { R3206 += 1, R3156 += 1 };
  s1 -> s1 [0, 64] { R3206 += 1, R3156 += 1 };
  s1 -> s3 [65, 65] { R3206 += 1, R3156 += 1 };
  s1 -> s4 [65, 65] { R3206 += 1, R3156 += 1 };
  s1 -> s5 [87, 87] { R3206 += 1, R3156 += 1 };
  s1 -> s1 [88, 65535] { R3206 += 1, R3156 += 1 };
  s2 -> s1 [0, 64] { R3206 += 1, R3156 += 1 };
  s2 -> s2 [0, 65535] { R3206 += 1, R3155 += 1, R3156 += 1 };
  s2 -> s3 [65, 65] { R3206 += 1, R3156 += 1 };
  s2 -> s4 [65, 65] { R3206 += 1, R3156 += 1 };
  s2 -> s5 [87, 87] { R3206 += 1, R3156 += 1 };
  s2 -> s1 [88, 65535] { R3206 += 1, R3156 += 1 };
  s4 -> s4 [0, 65] { R3206 += 1, R3156 += 1 };
  s4 -> s8 [87, 87] { R3206 += 1, R3156 += 1 };
  s4 -> s4 [88, 65535] { R3206 += 1, R3156 += 1 };
  s5 -> s5 [0, 64] { R3206 += 1, R3156 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R3206 += 1 };
  s5 -> s7 [65, 65] { R3206 += 1, R3156 += 1 };
  s5 -> s8 [65, 65] { R3206 += 1, R3156 += 1 };
  s5 -> s5 [87, 65535] { R3206 += 1, R3156 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R3206 += 1 };
  s8 -> s8 [0, 65] { R3206 += 1, R3156 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R3206 += 1 };
  s8 -> s8 [87, 65535] { R3206 += 1, R3156 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R3207 += 1, R3208 += 1 };
  s0 -> s2 [0, 65535] { R3208 += 1, R3157 += 1, R3158 += 1 };
  s0 -> s3 [65, 65] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R3208 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R3208 += 1, R3157 += 1, R3158 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R3208 += 1, R3158 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3208 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3208 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3208 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R3209 += 1, R3210 += 1 };
  s0 -> s2 [0, 65535] { R3210 += 1, R3159 += 1, R3160 += 1 };
  s0 -> s3 [65, 65] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s1 -> s1 [0, 65535] { R3210 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s2 -> s2 [0, 65535] { R3210 += 1, R3159 += 1, R3160 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s3 -> s3 [0, 65535] { R3210 += 1, R3160 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3210 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R3210 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3210 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R3212 += 1, R3161 += 1, R3162 += 1 };
  s0 -> s0 [0, 65535] { R3211 += 1, R3212 += 1 };
  s0 -> s4 [65, 65] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s0 -> s2 [66, 86] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s0 -> s1 [66, 65535] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [88, 65535] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [0, 64] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s1 -> s4 [65, 65] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s1 -> s5 [65, 65] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s6 [65, 65] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s7 [65, 65] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s1 -> s2 [66, 86] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [88, 65535] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s2 -> s2 [0, 65535] { R3212 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R3212 += 1, R3162 += 1 };
  s2 -> s7 [65, 65] { R3212 += 1, R3162 += 1 };
  s2 -> s2 [66, 86] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R3212 += 1, R3162 += 1 };
  s2 -> s2 [88, 65535] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R3212 += 1, R3161 += 1, R3162 += 1 };
  s3 -> s4 [65, 65] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s3 -> s2 [66, 86] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s3 -> s1 [66, 65535] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [88, 65535] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R3212 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s7 [0, 86] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s5 -> s5 [0, 65535] { R3212 += 1, R3162 += 1, R2641 += 1, R2642 += 1 };
  s5 -> s7 [88, 65535] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s7 -> s7 [0, 86] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s7 -> s8 [0, 65535] { R3212 += 1 };
  s7 -> s7 [0, 65535] { R3212 += 1, R3162 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [88, 65535] { R3212 += 1, R3162 += 1, R2642 += 1 };
  s8 -> s8 [0, 65535] { R3212 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s2 [0, 64] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s3 [0, 65535] { R3214 += 1, R3163 += 1, R3164 += 1 };
  s0 -> s0 [0, 65535] { R3213 += 1, R3214 += 1 };
  s0 -> s4 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s5 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s0 -> s6 [65, 65] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s7 [65, 65] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s1 [66, 65535] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s0 -> s2 [66, 65535] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s1 [0, 64] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s2 [0, 64] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s4 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s5 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s1 -> s6 [65, 65] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s7 [65, 65] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s1 [66, 65535] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s1 -> s2 [66, 65535] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [0, 64] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [0, 65535] { R3214 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s5 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s2 -> s2 [66, 65535] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s1 [0, 64] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s2 [0, 64] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s3 [0, 65535] { R3214 += 1, R3163 += 1, R3164 += 1 };
  s3 -> s4 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s5 [65, 65] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s3 -> s6 [65, 65] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s7 [65, 65] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s1 [66, 65535] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s3 -> s2 [66, 65535] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s4 -> s4 [0, 65535] { R3214 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s8 [0, 65535] { R3214 += 1 };
  s5 -> s5 [0, 65535] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s5 -> s9 [0, 65535];
  s7 -> s5 [0, 65535] { R3214 += 1, R3164 += 1, R2934 += 1, R2935 += 1 };
  s7 -> s7 [0, 65535] { R3214 += 1, R3164 += 1, R2933 += 1, R2934 += 1 };
  s8 -> s8 [0, 65535] { R3214 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s2, s9;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R3216 += 1, R3166 += 1 };
  s0 -> s2 [0, 65535] { R3216 += 1, R3165 += 1, R3166 += 1 };
  s0 -> s0 [0, 65535] { R3215 += 1, R3216 += 1 };
  s0 -> s3 [65, 65] { R3216 += 1, R3166 += 1 };
  s0 -> s4 [65, 65] { R3216 += 1, R3166 += 1 };
  s0 -> s1 [66, 65535] { R3216 += 1, R3166 += 1 };
  s1 -> s1 [0, 64] { R3216 += 1, R3166 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R3216 += 1 };
  s1 -> s3 [65, 65] { R3216 += 1, R3166 += 1 };
  s1 -> s4 [65, 65] { R3216 += 1, R3166 += 1 };
  s1 -> s1 [66, 65535] { R3216 += 1, R3166 += 1 };
  s2 -> s1 [0, 64] { R3216 += 1, R3166 += 1 };
  s2 -> s2 [0, 65535] { R3216 += 1, R3165 += 1, R3166 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R3216 += 1, R3166 += 1 };
  s2 -> s4 [65, 65] { R3216 += 1, R3166 += 1 };
  s2 -> s1 [66, 65535] { R3216 += 1, R3166 += 1 };
  s3 -> s3 [0, 65535] { R3216 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R3216 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R3216 += 1, R3166 += 1 };
  s5 -> s5 [0, 65535] { R3216 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s0 -> s2 [0, 64] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s0 -> s0 [0, 65535] { R3217 += 1, R3218 += 1 };
  s0 -> s3 [0, 65535] { R3218 += 1, R3167 += 1, R3168 += 1 };
  s0 -> s4 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s0 -> s5 [65, 65] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s0 -> s6 [65, 65] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s0 -> s7 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s0 -> s1 [66, 65535] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s0 -> s2 [66, 65535] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s1 -> s1 [0, 64] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s1 -> s2 [0, 64] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s1 -> s4 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s1 -> s5 [65, 65] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s1 -> s6 [65, 65] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s1 -> s7 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s1 -> s1 [66, 65535] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s1 -> s2 [66, 65535] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s2 -> s2 [0, 64] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s2 -> s11 [0, 64] { R3218 += 1, R3168 += 1 };
  s2 -> s4 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s2 -> s8 [65, 65] { R3218 += 1, R3168 += 1 };
  s2 -> s12 [65, 65] { R3218 += 1, R3168 += 1 };
  s2 -> s7 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s2 -> s2 [66, 65535] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s2 -> s11 [66, 65535] { R3218 += 1, R3168 += 1 };
  s3 -> s1 [0, 64] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s3 -> s2 [0, 64] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s3 -> s3 [0, 65535] { R3218 += 1, R3167 += 1, R3168 += 1 };
  s3 -> s4 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s3 -> s5 [65, 65] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s3 -> s6 [65, 65] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s3 -> s7 [65, 65] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s3 -> s1 [66, 65535] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s3 -> s2 [66, 65535] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s5 -> s5 [0, 65535] { R3218 += 1, R3168 += 1, R3127 += 1, R3128 += 1 };
  s5 -> s7 [0, 65535] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s7 -> s8 [0, 65535] { R3218 += 1, R3168 += 1 };
  s7 -> s7 [0, 65535] { R3218 += 1, R3168 += 1, R3128 += 1, R3129 += 1 };
  s8 -> s8 [0, 65535] { R3218 += 1, R3168 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R3218 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R3218 += 1 };
  s11 -> s11 [0, 64] { R3218 += 1, R3168 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R3218 += 1 };
  s11 -> s8 [65, 65] { R3218 += 1, R3168 += 1 };
  s11 -> s12 [65, 65] { R3218 += 1, R3168 += 1 };
  s11 -> s11 [66, 65535] { R3218 += 1, R3168 += 1 };
  s12 -> s12 [0, 65535] { R3218 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R3220 += 1, R3170 += 1 };
  s0 -> s0 [0, 65535] { R3219 += 1, R3220 += 1 };
  s0 -> s2 [0, 65535] { R3220 += 1, R3169 += 1, R3170 += 1 };
  s0 -> s3 [65, 65] { R3220 += 1, R3170 += 1 };
  s0 -> s4 [65, 65] { R3220 += 1, R3170 += 1 };
  s0 -> s1 [66, 65535] { R3220 += 1, R3170 += 1 };
  s1 -> s1 [0, 64] { R3220 += 1, R3170 += 1 };
  s1 -> s1 [0, 65535] { R3220 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R3220 += 1, R3170 += 1 };
  s1 -> s4 [65, 65] { R3220 += 1, R3170 += 1 };
  s1 -> s1 [66, 65535] { R3220 += 1, R3170 += 1 };
  s2 -> s1 [0, 64] { R3220 += 1, R3170 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R3220 += 1, R3169 += 1, R3170 += 1 };
  s2 -> s3 [65, 65] { R3220 += 1, R3170 += 1 };
  s2 -> s4 [65, 65] { R3220 += 1, R3170 += 1 };
  s2 -> s1 [66, 65535] { R3220 += 1, R3170 += 1 };
  s3 -> s3 [0, 65535] { R3220 += 1, R3170 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R3220 += 1 };
  s4 -> s4 [0, 65535] { R3220 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R3220 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R3152 && R2 = R3220 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R3133 = 0 && R3134 = R3152 && R3135 = 0 && R3136 = R3152 && R3137 = 0 && R3138 = R3152 && R3139 = 0 && R3140 = R3152 && R3141 = 0 && R3142 = R3152 && R3143 = 0 && R3144 = R3152 && R3145 = 0 && R3146 = R3152 && R3147 = 0 && R3148 = R3152 && R3149 = 0 && R3150 = R3152 && R3151 = 0 && R3155 = 0 && R3156 = 0 && R3161 = 0 && R3162 = 0 && R3163 = 0 && R3164 = 0 && R3167 = 0 && R3168 = 0 && R3171 = 10 && R3172 = R3220 && R3173 = 10 && R3174 = R3220 && R3175 = 10 && R3176 = R3220 && R3177 = 10 && R3178 = R3220 && R3179 = 10 && R3180 = R3220 && R3181 = 10 && R3182 = R3220 && R3183 = 10 && R3184 = R3220 && R3185 = 10 && R3186 = R3220 && R3187 = 10 && R3188 = R3220 && R3189 = 10 && R3190 = R3220 && R3191 = 10 && R3192 = R3220 && R3193 = 10 && R3194 = R3220 && R3195 = 10 && R3196 = R3220 && R3197 = 10 && R3198 = R3220 && R3199 = 10 && R3200 = R3220 && R3201 = 10 && R3202 = R3220 && R3203 = 10 && R3204 = R3220 && R3205 = 10 && R3206 = R3220 && R3207 = 10 && R3208 = R3220 && R3209 = 10 && R3210 = R3220 && R3211 = 10 && R3212 = R3220 && R3213 = 10 && R3214 = R3220 && R3215 = 10 && R3216 = R3220 && R3217 = 10 && R3218 = R3220 && R3219 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R3152 && 9 < R3220 && (R14 = 0 || (R3153 = 0 && R3154 = 0)) && (R14 = 0 || (R3157 = 0 && R3158 = 0)) && (R14 = 0 || (R3159 = 0 && R3160 = 0)) && (R14 = 0 || (R3165 = 0 && R3166 = 0)) && (R14 = 0 || (R3169 = 0 && R3170 = 0)) && (R2938 + R2935 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R2938 + R2935 = 0 || (R2936 + R2933 = 0 && R2937 + R2934 = 0)) && (R3132 + R3129 = 0 || (R3130 + R3127 = 0 && R3131 + R3128 = 0));
// End of Parikh automata intersection problem
