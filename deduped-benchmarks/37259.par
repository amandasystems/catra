// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R1477, R1478, R1479, R1480, R1481, R1482, R15, R1577, R1578, R1579, R1580, R1581, R1582, R1583, R1584, R1585, R1586, R1587, R1588, R1589, R1590, R1591, R1592, R1593, R1594, R1595, R1596, R1597, R1598, R1599, R16, R1600, R1601, R1602, R1603, R1604, R1605, R1606, R1607, R1608, R1609, R1610, R1611, R1612, R1613, R1614, R1615, R1616, R1617, R1618, R1619, R1620, R1621, R1622, R1623, R1624, R1625, R1626, R1627, R1628, R1629, R1630, R1631, R1632, R1633, R1634, R1635, R1636, R1637, R1638, R1639, R1640, R1641, R1642, R1643, R1644, R1645, R1646, R1647, R1648, R1649, R1650, R1651, R1652, R1653, R1654, R1655, R1656, R1657, R1658, R1659, R1660, R1661, R1662, R1663, R1664, R1665, R1666, R1667, R1668, R1669, R1670, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1622 += 1 };
  s0 -> s0 [0, 65535] { R1621 += 1, R1622 += 1 };
  s0 -> s1 [45, 45] { R1622 += 1 };
  s0 -> s2 [46, 46] { R1622 += 1 };
  s0 -> s1 [48, 62] { R1622 += 1 };
  s0 -> s3 [65, 65] { R1622 += 1 };
  s0 -> s1 [66, 65535] { R1622 += 1 };
  s1 -> s1 [0, 43] { R1622 += 1 };
  s1 -> s1 [45, 45] { R1622 += 1 };
  s1 -> s2 [46, 46] { R1622 += 1 };
  s1 -> s1 [48, 62] { R1622 += 1 };
  s1 -> s3 [65, 65] { R1622 += 1 };
  s1 -> s1 [66, 65535] { R1622 += 1 };
  s2 -> s1 [0, 43] { R1622 += 1 };
  s2 -> s1 [45, 45] { R1622 += 1 };
  s2 -> s2 [46, 46] { R1622 += 1 };
  s2 -> s1 [48, 62] { R1622 += 1 };
  s2 -> s3 [65, 65] { R1622 += 1 };
  s2 -> s1 [66, 114] { R1622 += 1 };
  s2 -> s8 [115, 115] { R1622 += 1 };
  s2 -> s1 [116, 65535] { R1622 += 1 };
  s3 -> s3 [0, 43] { R1622 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1622 += 1 };
  s3 -> s4 [46, 46] { R1622 += 1 };
  s3 -> s3 [48, 62] { R1622 += 1 };
  s3 -> s3 [65, 65535] { R1622 += 1 };
  s4 -> s3 [0, 43] { R1622 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1622 += 1 };
  s4 -> s4 [46, 46] { R1622 += 1 };
  s4 -> s3 [48, 62] { R1622 += 1 };
  s4 -> s3 [65, 114] { R1622 += 1 };
  s4 -> s5 [115, 115] { R1622 += 1 };
  s4 -> s3 [116, 65535] { R1622 += 1 };
  s5 -> s3 [0, 43] { R1622 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1622 += 1 };
  s5 -> s4 [46, 46] { R1622 += 1 };
  s5 -> s3 [48, 62] { R1622 += 1 };
  s5 -> s3 [65, 110] { R1622 += 1 };
  s5 -> s6 [111, 111] { R1622 += 1 };
  s5 -> s3 [112, 65535] { R1622 += 1 };
  s6 -> s3 [0, 43] { R1622 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1622 += 1 };
  s6 -> s4 [46, 46] { R1622 += 1 };
  s6 -> s3 [48, 62] { R1622 += 1 };
  s6 -> s3 [65, 98] { R1622 += 1 };
  s6 -> s7 [99, 99] { R1622 += 1 };
  s6 -> s3 [100, 65535] { R1622 += 1 };
  s7 -> s3 [0, 43] { R1622 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1622 += 1 };
  s7 -> s4 [46, 46] { R1622 += 1 };
  s7 -> s3 [48, 62] { R1622 += 1 };
  s7 -> s3 [65, 106] { R1622 += 1 };
  s7 -> s3 [108, 65535] { R1622 += 1 };
  s8 -> s1 [0, 43] { R1622 += 1 };
  s8 -> s1 [45, 45] { R1622 += 1 };
  s8 -> s2 [46, 46] { R1622 += 1 };
  s8 -> s1 [48, 62] { R1622 += 1 };
  s8 -> s3 [65, 65] { R1622 += 1 };
  s8 -> s1 [66, 110] { R1622 += 1 };
  s8 -> s9 [111, 111] { R1622 += 1 };
  s8 -> s1 [112, 65535] { R1622 += 1 };
  s9 -> s1 [0, 43] { R1622 += 1 };
  s9 -> s1 [45, 45] { R1622 += 1 };
  s9 -> s2 [46, 46] { R1622 += 1 };
  s9 -> s1 [48, 62] { R1622 += 1 };
  s9 -> s3 [65, 65] { R1622 += 1 };
  s9 -> s1 [66, 98] { R1622 += 1 };
  s9 -> s10 [99, 99] { R1622 += 1 };
  s9 -> s1 [100, 65535] { R1622 += 1 };
  s10 -> s1 [0, 43] { R1622 += 1 };
  s10 -> s1 [45, 45] { R1622 += 1 };
  s10 -> s2 [46, 46] { R1622 += 1 };
  s10 -> s1 [48, 62] { R1622 += 1 };
  s10 -> s3 [65, 65] { R1622 += 1 };
  s10 -> s1 [66, 106] { R1622 += 1 };
  s10 -> s1 [108, 65535] { R1622 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1623 += 1, R1624 += 1 };
  s0 -> s1 [0, 65535] { R1624 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1624 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1626 += 1 };
  s0 -> s2 [0, 65535] { R1626 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R1625 += 1, R1626 += 1 };
  s0 -> s3 [58, 58] { R1626 += 1 };
  s0 -> s1 [59, 65535] { R1626 += 1 };
  s1 -> s1 [0, 57] { R1626 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1626 += 1 };
  s1 -> s1 [59, 65535] { R1626 += 1 };
  s2 -> s1 [0, 57] { R1626 += 1 };
  s2 -> s2 [0, 65535] { R1626 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R1626 += 1 };
  s2 -> s1 [59, 65535] { R1626 += 1 };
  s3 -> s3 [0, 65535] { R1626 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1628 += 1 };
  s0 -> s2 [0, 65535] { R1628 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R1627 += 1, R1628 += 1 };
  s0 -> s3 [65, 65] { R1628 += 1 };
  s0 -> s1 [66, 65535] { R1628 += 1 };
  s1 -> s1 [0, 64] { R1628 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1628 += 1 };
  s1 -> s1 [66, 65535] { R1628 += 1 };
  s2 -> s1 [0, 64] { R1628 += 1 };
  s2 -> s2 [0, 65535] { R1628 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1628 += 1 };
  s2 -> s1 [66, 65535] { R1628 += 1 };
  s3 -> s3 [0, 65535] { R1628 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1630 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1629 += 1, R1630 += 1 };
  s0 -> s2 [0, 65535] { R1630 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R1630 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1630 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R1630 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1630 += 1 };
  s2 -> s1 [0, 90] { R1630 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1630 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R1630 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1630 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1630 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1630 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1631 += 1, R1632 += 1 };
  s0 -> s1 [0, 65535] { R1632 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1632 += 1, R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R1632 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R1632 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1632 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1632 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1632 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1634 += 1, R1584 += 1 };
  s0 -> s2 [0, 65535] { R1634 += 1, R1583 += 1, R1584 += 1 };
  s0 -> s0 [0, 65535] { R1633 += 1, R1634 += 1 };
  s0 -> s1 [66, 65535] { R1634 += 1, R1584 += 1 };
  s1 -> s1 [0, 64] { R1634 += 1, R1584 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1634 += 1 };
  s1 -> s1 [66, 65535] { R1634 += 1, R1584 += 1 };
  s2 -> s1 [0, 64] { R1634 += 1, R1584 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1634 += 1, R1583 += 1, R1584 += 1 };
  s2 -> s1 [66, 65535] { R1634 += 1, R1584 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1635 += 1, R1636 += 1 };
  s0 -> s1 [0, 65535] { R1636 += 1, R1586 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R1636 += 1, R1585 += 1, R1586 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1636 += 1, R1586 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R1636 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1636 += 1, R1586 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R1636 += 1, R1585 += 1, R1586 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1636 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1638 += 1, R1588 += 1 };
  s0 -> s0 [0, 65535] { R1637 += 1, R1638 += 1 };
  s0 -> s2 [0, 65535] { R1638 += 1, R1587 += 1, R1588 += 1 };
  s0 -> s3 [87, 87] { R1638 += 1, R1588 += 1 };
  s0 -> s1 [88, 65535] { R1638 += 1, R1588 += 1 };
  s1 -> s1 [0, 65] { R1638 += 1, R1588 += 1 };
  s1 -> s3 [87, 87] { R1638 += 1, R1588 += 1 };
  s1 -> s1 [88, 65535] { R1638 += 1, R1588 += 1 };
  s2 -> s1 [0, 65] { R1638 += 1, R1588 += 1 };
  s2 -> s2 [0, 65535] { R1638 += 1, R1587 += 1, R1588 += 1 };
  s2 -> s3 [87, 87] { R1638 += 1, R1588 += 1 };
  s2 -> s1 [88, 65535] { R1638 += 1, R1588 += 1 };
  s3 -> s3 [0, 65] { R1638 += 1, R1588 += 1 };
  s3 -> s3 [0, 65535] { R1638 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [87, 65535] { R1638 += 1, R1588 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1639 += 1, R1640 += 1 };
  s0 -> s1 [0, 65535] { R1640 += 1, R1589 += 1, R1590 += 1 };
  s0 -> s2 [0, 65535] { R1640 += 1, R1590 += 1, R26 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1640 += 1, R1589 += 1, R1590 += 1 };
  s1 -> s2 [0, 65535] { R1640 += 1, R1590 += 1, R26 += 1 };
  s2 -> s3 [0, 65535] { R1640 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1640 += 1, R1590 += 1, R26 += 1 };
  s3 -> s3 [0, 65535] { R1640 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R1642 += 1, R1592 += 1 };
  s0 -> s2 [0, 65535] { R1642 += 1, R1591 += 1, R1592 += 1 };
  s0 -> s3 [0, 65535] { R1642 += 1, R1592 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1641 += 1, R1642 += 1 };
  s0 -> s1 [88, 65535] { R1642 += 1, R1592 += 1 };
  s1 -> s1 [0, 86] { R1642 += 1, R1592 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1642 += 1 };
  s1 -> s1 [88, 65535] { R1642 += 1, R1592 += 1 };
  s2 -> s1 [0, 86] { R1642 += 1, R1592 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1642 += 1, R1591 += 1, R1592 += 1 };
  s2 -> s3 [0, 65535] { R1642 += 1, R1592 += 1, R28 += 1 };
  s2 -> s1 [88, 65535] { R1642 += 1, R1592 += 1 };
  s3 -> s1 [0, 86] { R1642 += 1, R1592 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1642 += 1, R1592 += 1, R28 += 1 };
  s3 -> s5 [0, 65535] { R1642 += 1 };
  s3 -> s1 [88, 65535] { R1642 += 1, R1592 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1642 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R1644 += 1, R1594 += 1, R900 += 1 };
  s0 -> s1 [0, 65535] { R1644 += 1, R1594 += 1 };
  s0 -> s2 [0, 65535] { R1644 += 1, R1593 += 1, R1594 += 1 };
  s0 -> s0 [0, 65535] { R1643 += 1, R1644 += 1 };
  s0 -> s1 [88, 65535] { R1644 += 1, R1594 += 1, R900 += 1 };
  s1 -> s1 [0, 86] { R1644 += 1, R1594 += 1, R900 += 1 };
  s1 -> s4 [0, 65535] { R1644 += 1 };
  s1 -> s1 [0, 65535] { R1644 += 1, R1594 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R1644 += 1, R1594 += 1, R900 += 1 };
  s2 -> s1 [0, 86] { R1644 += 1, R1594 += 1, R900 += 1 };
  s2 -> s1 [0, 65535] { R1644 += 1, R1594 += 1 };
  s2 -> s2 [0, 65535] { R1644 += 1, R1593 += 1, R1594 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R1644 += 1, R1594 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1644 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1645 += 1, R1646 += 1 };
  s0 -> s1 [0, 65535] { R1646 += 1, R1595 += 1, R1596 += 1 };
  s0 -> s2 [0, 65535] { R1646 += 1, R1596 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1646 += 1, R1595 += 1, R1596 += 1 };
  s1 -> s2 [0, 65535] { R1646 += 1, R1596 += 1 };
  s2 -> s3 [0, 65535] { R1646 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1646 += 1, R1596 += 1 };
  s3 -> s3 [0, 65535] { R1646 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1648 += 1, R1598 += 1 };
  s0 -> s2 [0, 65535] { R1648 += 1, R1597 += 1, R1598 += 1 };
  s0 -> s0 [0, 65535] { R1647 += 1, R1648 += 1 };
  s1 -> s1 [0, 65535] { R1648 += 1, R1598 += 1 };
  s1 -> s4 [0, 65535] { R1648 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1648 += 1, R1598 += 1 };
  s2 -> s2 [0, 65535] { R1648 += 1, R1597 += 1, R1598 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1648 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1650 += 1, R1600 += 1, R1581 += 1, R1582 += 1 };
  s0 -> s2 [0, 65535] { R1650 += 1, R1599 += 1, R1600 += 1 };
  s0 -> s3 [0, 65535] { R1650 += 1, R1600 += 1 };
  s0 -> s0 [0, 65535] { R1649 += 1, R1650 += 1 };
  s1 -> s1 [0, 65535] { R1650 += 1, R1600 += 1, R1581 += 1, R1582 += 1 };
  s1 -> s3 [0, 65535] { R1650 += 1, R1600 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1650 += 1 };
  s2 -> s1 [0, 65535] { R1650 += 1, R1600 += 1, R1581 += 1, R1582 += 1 };
  s2 -> s2 [0, 65535] { R1650 += 1, R1599 += 1, R1600 += 1 };
  s2 -> s3 [0, 65535] { R1650 += 1, R1600 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1650 += 1, R1600 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1650 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1650 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1652 += 1, R1601 += 1, R1602 += 1 };
  s0 -> s0 [0, 65535] { R1651 += 1, R1652 += 1 };
  s0 -> s2 [0, 65535] { R1652 += 1, R1602 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1652 += 1, R1601 += 1, R1602 += 1 };
  s1 -> s2 [0, 65535] { R1652 += 1, R1602 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1652 += 1 };
  s2 -> s2 [0, 65535] { R1652 += 1, R1602 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1652 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1654 += 1, R1603 += 1, R1604 += 1 };
  s0 -> s2 [0, 65535] { R1654 += 1, R1604 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1653 += 1, R1654 += 1 };
  s1 -> s1 [0, 65535] { R1654 += 1, R1603 += 1, R1604 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1654 += 1, R1604 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1654 += 1 };
  s2 -> s2 [0, 65535] { R1654 += 1, R1604 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1654 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1656 += 1, R1606 += 1 };
  s0 -> s2 [0, 65535] { R1656 += 1, R1605 += 1, R1606 += 1 };
  s0 -> s0 [0, 65535] { R1655 += 1, R1656 += 1 };
  s0 -> s3 [65, 65] { R1656 += 1, R1606 += 1 };
  s0 -> s4 [65, 65] { R1656 += 1, R1606 += 1 };
  s0 -> s1 [88, 65535] { R1656 += 1, R1606 += 1 };
  s1 -> s1 [0, 64] { R1656 += 1, R1606 += 1 };
  s1 -> s1 [0, 65535] { R1656 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1656 += 1, R1606 += 1 };
  s1 -> s4 [65, 65] { R1656 += 1, R1606 += 1 };
  s1 -> s1 [88, 65535] { R1656 += 1, R1606 += 1 };
  s2 -> s1 [0, 64] { R1656 += 1, R1606 += 1 };
  s2 -> s2 [0, 65535] { R1656 += 1, R1605 += 1, R1606 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1656 += 1, R1606 += 1 };
  s2 -> s4 [65, 65] { R1656 += 1, R1606 += 1 };
  s2 -> s1 [88, 65535] { R1656 += 1, R1606 += 1 };
  s3 -> s3 [0, 65535] { R1656 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R1656 += 1, R1606 += 1 };
  s4 -> s4 [0, 65535] { R1656 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [88, 65535] { R1656 += 1, R1606 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1658 += 1, R1608 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1657 += 1, R1658 += 1 };
  s0 -> s2 [0, 65535] { R1658 += 1, R1607 += 1, R1608 += 1 };
  s0 -> s3 [65, 65] { R1658 += 1, R1608 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1658 += 1, R1608 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1658 += 1, R1608 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1658 += 1, R1608 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R1658 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1658 += 1, R1608 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1658 += 1, R1608 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1658 += 1, R1608 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1658 += 1, R1608 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R1658 += 1, R1607 += 1, R1608 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1658 += 1, R1608 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1658 += 1, R1608 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1658 += 1, R1608 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R1658 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1658 += 1 };
  s4 -> s4 [0, 65535] { R1658 += 1, R1608 += 1, R25 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1658 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1660 += 1, R1610 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1659 += 1, R1660 += 1 };
  s0 -> s2 [0, 65535] { R1660 += 1, R1609 += 1, R1610 += 1 };
  s0 -> s3 [65, 65] { R1660 += 1, R1610 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1660 += 1, R1610 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1660 += 1, R1610 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1660 += 1, R1610 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R1660 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1660 += 1, R1610 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1660 += 1, R1610 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1660 += 1, R1610 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1660 += 1, R1610 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R1660 += 1, R1609 += 1, R1610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1660 += 1, R1610 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1660 += 1, R1610 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1660 += 1, R1610 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R1660 += 1, R1610 += 1, R27 += 1 };
  s3 -> s6 [0, 65535] { R1660 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1660 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1660 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1662 += 1, R1612 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s0 -> s0 [0, 65535] { R1661 += 1, R1662 += 1 };
  s0 -> s3 [0, 65535] { R1662 += 1, R1611 += 1, R1612 += 1 };
  s0 -> s4 [65, 65] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1662 += 1, R1612 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1662 += 1, R1612 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [66, 86] { R1662 += 1, R1612 += 1, R898 += 1 };
  s0 -> s2 [66, 65535] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [88, 65535] { R1662 += 1, R1612 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1662 += 1, R1612 += 1, R898 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1662 += 1 };
  s1 -> s5 [65, 65] { R1662 += 1, R1612 += 1 };
  s1 -> s6 [65, 65] { R1662 += 1, R1612 += 1 };
  s1 -> s1 [66, 86] { R1662 += 1, R1612 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1662 += 1, R1612 += 1 };
  s1 -> s1 [88, 65535] { R1662 += 1, R1612 += 1, R898 += 1 };
  s2 -> s1 [0, 64] { R1662 += 1, R1612 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [65, 65] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s2 -> s5 [65, 65] { R1662 += 1, R1612 += 1, R898 += 1 };
  s2 -> s6 [65, 65] { R1662 += 1, R1612 += 1, R898 += 1 };
  s2 -> s7 [65, 65] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [66, 86] { R1662 += 1, R1612 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [88, 65535] { R1662 += 1, R1612 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1662 += 1, R1612 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1662 += 1, R1611 += 1, R1612 += 1 };
  s3 -> s4 [65, 65] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1662 += 1, R1612 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1662 += 1, R1612 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [66, 86] { R1662 += 1, R1612 += 1, R898 += 1 };
  s3 -> s2 [66, 65535] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [88, 65535] { R1662 += 1, R1612 += 1, R898 += 1 };
  s4 -> s5 [0, 86] { R1662 += 1, R1612 += 1, R898 += 1 };
  s4 -> s4 [0, 65535] { R1662 += 1, R1612 += 1, R897 += 1, R898 += 1 };
  s4 -> s5 [88, 65535] { R1662 += 1, R1612 += 1, R898 += 1 };
  s5 -> s5 [0, 86] { R1662 += 1, R1612 += 1, R898 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1662 += 1, R1612 += 1 };
  s5 -> s9 [0, 65535] { R1662 += 1 };
  s5 -> s5 [88, 65535] { R1662 += 1, R1612 += 1, R898 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1662 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1662 += 1 };
  accepting s8, s5, s9, s6, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s2 [0, 64] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s0 [0, 65535] { R1663 += 1, R1664 += 1 };
  s0 -> s3 [0, 65535] { R1664 += 1, R1613 += 1, R1614 += 1 };
  s0 -> s4 [65, 65] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s5 [65, 65] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s6 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s7 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s0 -> s1 [66, 65535] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s0 -> s2 [66, 65535] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s1 [0, 64] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s2 [0, 64] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s4 [65, 65] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s5 [65, 65] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s6 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s7 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s1 -> s1 [66, 65535] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s1 -> s2 [66, 65535] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s11 [0, 64] { R1664 += 1, R1614 += 1 };
  s2 -> s2 [0, 64] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s12 [65, 65] { R1664 += 1, R1614 += 1 };
  s2 -> s8 [65, 65] { R1664 += 1, R1614 += 1 };
  s2 -> s6 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s7 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s2 -> s11 [66, 65535] { R1664 += 1, R1614 += 1 };
  s2 -> s2 [66, 65535] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s1 [0, 64] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s2 [0, 64] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s3 [0, 65535] { R1664 += 1, R1613 += 1, R1614 += 1 };
  s3 -> s4 [65, 65] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s5 [65, 65] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s6 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s7 [65, 65] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s3 -> s1 [66, 65535] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s3 -> s2 [66, 65535] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s5 -> s5 [0, 65535] { R1664 += 1, R1614 += 1, R1477 += 1, R1478 += 1 };
  s5 -> s6 [0, 65535] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s6 -> s8 [0, 65535] { R1664 += 1, R1614 += 1 };
  s6 -> s6 [0, 65535] { R1664 += 1, R1614 += 1, R1478 += 1, R1479 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1664 += 1, R1614 += 1 };
  s8 -> s10 [0, 65535] { R1664 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1664 += 1 };
  s11 -> s11 [0, 64] { R1664 += 1, R1614 += 1 };
  s11 -> s11 [0, 65535] { R1664 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [65, 65] { R1664 += 1, R1614 += 1 };
  s11 -> s8 [65, 65] { R1664 += 1, R1614 += 1 };
  s11 -> s11 [66, 65535] { R1664 += 1, R1614 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1664 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1666 += 1, R1616 += 1 };
  s0 -> s2 [0, 65535] { R1666 += 1, R1615 += 1, R1616 += 1 };
  s0 -> s0 [0, 65535] { R1665 += 1, R1666 += 1 };
  s0 -> s3 [65, 65] { R1666 += 1, R1616 += 1 };
  s0 -> s4 [65, 65] { R1666 += 1, R1616 += 1 };
  s0 -> s1 [66, 65535] { R1666 += 1, R1616 += 1 };
  s1 -> s1 [0, 64] { R1666 += 1, R1616 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1666 += 1 };
  s1 -> s3 [65, 65] { R1666 += 1, R1616 += 1 };
  s1 -> s4 [65, 65] { R1666 += 1, R1616 += 1 };
  s1 -> s1 [66, 65535] { R1666 += 1, R1616 += 1 };
  s2 -> s1 [0, 64] { R1666 += 1, R1616 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1666 += 1, R1615 += 1, R1616 += 1 };
  s2 -> s3 [65, 65] { R1666 += 1, R1616 += 1 };
  s2 -> s4 [65, 65] { R1666 += 1, R1616 += 1 };
  s2 -> s1 [66, 65535] { R1666 += 1, R1616 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1666 += 1, R1616 += 1 };
  s3 -> s6 [0, 65535] { R1666 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1666 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1666 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s0 -> s2 [0, 64] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s0 -> s3 [0, 65535] { R1668 += 1, R1617 += 1, R1618 += 1 };
  s0 -> s0 [0, 65535] { R1667 += 1, R1668 += 1 };
  s0 -> s4 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s0 -> s5 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s0 -> s6 [65, 65] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s0 -> s7 [65, 65] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s0 -> s1 [66, 65535] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s0 -> s2 [66, 65535] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s1 -> s1 [0, 64] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s1 -> s1 [0, 65535] { R1668 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s4 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s1 -> s5 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s1 -> s1 [66, 65535] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s2 -> s1 [0, 64] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s2 -> s2 [0, 64] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s2 -> s4 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s2 -> s5 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s2 -> s6 [65, 65] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s2 -> s7 [65, 65] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s2 -> s1 [66, 65535] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s2 -> s2 [66, 65535] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s3 -> s1 [0, 64] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s3 -> s2 [0, 64] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s3 -> s3 [0, 65535] { R1668 += 1, R1617 += 1, R1618 += 1 };
  s3 -> s4 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s3 -> s5 [65, 65] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s3 -> s6 [65, 65] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s3 -> s7 [65, 65] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s3 -> s1 [66, 65535] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s3 -> s2 [66, 65535] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s4 -> s4 [0, 65535] { R1668 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s5 -> s8 [0, 65535] { R1668 += 1 };
  s5 -> s9 [0, 65535];
  s6 -> s5 [0, 65535] { R1668 += 1, R1618 += 1, R1578 += 1, R1579 += 1 };
  s6 -> s6 [0, 65535] { R1668 += 1, R1618 += 1, R1577 += 1, R1578 += 1 };
  s8 -> s8 [0, 65535] { R1668 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s5, s9, s1;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1670 += 1, R1620 += 1 };
  s0 -> s0 [0, 65535] { R1669 += 1, R1670 += 1 };
  s0 -> s2 [0, 65535] { R1670 += 1, R1619 += 1, R1620 += 1 };
  s0 -> s3 [65, 65] { R1670 += 1, R1620 += 1 };
  s0 -> s4 [65, 65] { R1670 += 1, R1620 += 1 };
  s0 -> s1 [66, 65535] { R1670 += 1, R1620 += 1 };
  s1 -> s1 [0, 64] { R1670 += 1, R1620 += 1 };
  s1 -> s1 [0, 65535] { R1670 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1670 += 1, R1620 += 1 };
  s1 -> s4 [65, 65] { R1670 += 1, R1620 += 1 };
  s1 -> s1 [66, 65535] { R1670 += 1, R1620 += 1 };
  s2 -> s1 [0, 64] { R1670 += 1, R1620 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1670 += 1, R1619 += 1, R1620 += 1 };
  s2 -> s3 [65, 65] { R1670 += 1, R1620 += 1 };
  s2 -> s4 [65, 65] { R1670 += 1, R1620 += 1 };
  s2 -> s1 [66, 65535] { R1670 += 1, R1620 += 1 };
  s3 -> s3 [0, 65535] { R1670 += 1, R1620 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1670 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1670 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1670 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1602 && R2 = R1670 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1583 = 0 && R1584 = R1602 && R1585 = 0 && R1586 = R1602 && R1587 = 0 && R1588 = R1602 && R1589 = 0 && R1590 = R1602 && R1591 = 0 && R1592 = R1602 && R1593 = 0 && R1594 = R1602 && R1595 = 0 && R1596 = R1602 && R1597 = 0 && R1598 = R1602 && R1599 = 0 && R1600 = R1602 && R1601 = 0 && R1611 = 0 && R1612 = 0 && R1613 = 0 && R1614 = 0 && R1617 = 0 && R1618 = 0 && R1621 = 10 && R1622 = R1670 && R1623 = 10 && R1624 = R1670 && R1625 = 10 && R1626 = R1670 && R1627 = 10 && R1628 = R1670 && R1629 = 10 && R1630 = R1670 && R1631 = 10 && R1632 = R1670 && R1633 = 10 && R1634 = R1670 && R1635 = 10 && R1636 = R1670 && R1637 = 10 && R1638 = R1670 && R1639 = 10 && R1640 = R1670 && R1641 = 10 && R1642 = R1670 && R1643 = 10 && R1644 = R1670 && R1645 = 10 && R1646 = R1670 && R1647 = 10 && R1648 = R1670 && R1649 = 10 && R1650 = R1670 && R1651 = 10 && R1652 = R1670 && R1653 = 10 && R1654 = R1670 && R1655 = 10 && R1656 = R1670 && R1657 = 10 && R1658 = R1670 && R1659 = 10 && R1660 = R1670 && R1661 = 10 && R1662 = R1670 && R1663 = 10 && R1664 = R1670 && R1665 = 10 && R1666 = R1670 && R1667 = 10 && R1668 = R1670 && R1669 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1602 && 9 < R1670 && (R14 = 0 || (R1603 = 0 && R1604 = 0)) && (R14 = 0 || (R1605 = 0 && R1606 = 0)) && (R14 = 0 || (R1607 = 0 && R1608 = 0)) && (R14 = 0 || (R1609 = 0 && R1610 = 0)) && (R14 = 0 || (R1615 = 0 && R1616 = 0)) && (R14 = 0 || (R1619 = 0 && R1620 = 0)) && (R1482 + R1479 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R1482 + R1479 = 0 || (R1480 + R1477 = 0 && R1481 + R1478 = 0)) && (R1582 + R1579 = 0 || (R1580 + R1577 = 0 && R1581 + R1578 = 0));
// End of Parikh automata intersection problem
