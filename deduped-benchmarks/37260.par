// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1189, R1190, R1191, R1192, R1193, R1194, R13, R1383, R1384, R1385, R1386, R1387, R1388, R1389, R1390, R1391, R1392, R1393, R1394, R1395, R1396, R1397, R1398, R1399, R14, R1400, R1401, R1402, R1403, R1404, R1405, R1406, R1407, R1408, R1409, R1410, R1411, R1412, R1413, R1414, R1415, R1416, R1417, R1418, R1419, R1420, R1421, R1422, R1423, R1424, R1425, R1426, R1427, R1428, R1429, R1430, R1431, R1432, R1433, R1434, R1435, R1436, R1437, R1438, R1439, R1440, R1441, R1442, R1443, R1444, R1445, R1446, R1447, R1448, R1449, R1450, R1451, R1452, R1453, R1454, R1455, R1456, R1457, R1458, R1459, R1460, R1461, R1462, R1463, R1464, R1465, R1466, R1467, R1468, R1469, R1470, R1471, R1472, R1473, R1474, R1475, R1476, R15, R16, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1428 += 1 };
  s0 -> s0 [0, 65535] { R1427 += 1, R1428 += 1 };
  s0 -> s1 [45, 45] { R1428 += 1 };
  s0 -> s2 [46, 46] { R1428 += 1 };
  s0 -> s1 [48, 62] { R1428 += 1 };
  s0 -> s3 [65, 65] { R1428 += 1 };
  s0 -> s1 [66, 65535] { R1428 += 1 };
  s1 -> s1 [0, 43] { R1428 += 1 };
  s1 -> s1 [45, 45] { R1428 += 1 };
  s1 -> s2 [46, 46] { R1428 += 1 };
  s1 -> s1 [48, 62] { R1428 += 1 };
  s1 -> s3 [65, 65] { R1428 += 1 };
  s1 -> s1 [66, 65535] { R1428 += 1 };
  s2 -> s1 [0, 43] { R1428 += 1 };
  s2 -> s1 [45, 45] { R1428 += 1 };
  s2 -> s2 [46, 46] { R1428 += 1 };
  s2 -> s1 [48, 62] { R1428 += 1 };
  s2 -> s3 [65, 65] { R1428 += 1 };
  s2 -> s1 [66, 114] { R1428 += 1 };
  s2 -> s8 [115, 115] { R1428 += 1 };
  s2 -> s1 [116, 65535] { R1428 += 1 };
  s3 -> s3 [0, 43] { R1428 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1428 += 1 };
  s3 -> s4 [46, 46] { R1428 += 1 };
  s3 -> s3 [48, 62] { R1428 += 1 };
  s3 -> s3 [65, 65535] { R1428 += 1 };
  s4 -> s3 [0, 43] { R1428 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1428 += 1 };
  s4 -> s4 [46, 46] { R1428 += 1 };
  s4 -> s3 [48, 62] { R1428 += 1 };
  s4 -> s3 [65, 114] { R1428 += 1 };
  s4 -> s5 [115, 115] { R1428 += 1 };
  s4 -> s3 [116, 65535] { R1428 += 1 };
  s5 -> s3 [0, 43] { R1428 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1428 += 1 };
  s5 -> s4 [46, 46] { R1428 += 1 };
  s5 -> s3 [48, 62] { R1428 += 1 };
  s5 -> s3 [65, 110] { R1428 += 1 };
  s5 -> s6 [111, 111] { R1428 += 1 };
  s5 -> s3 [112, 65535] { R1428 += 1 };
  s6 -> s3 [0, 43] { R1428 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1428 += 1 };
  s6 -> s4 [46, 46] { R1428 += 1 };
  s6 -> s3 [48, 62] { R1428 += 1 };
  s6 -> s3 [65, 98] { R1428 += 1 };
  s6 -> s7 [99, 99] { R1428 += 1 };
  s6 -> s3 [100, 65535] { R1428 += 1 };
  s7 -> s3 [0, 43] { R1428 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1428 += 1 };
  s7 -> s4 [46, 46] { R1428 += 1 };
  s7 -> s3 [48, 62] { R1428 += 1 };
  s7 -> s3 [65, 106] { R1428 += 1 };
  s7 -> s3 [108, 65535] { R1428 += 1 };
  s8 -> s1 [0, 43] { R1428 += 1 };
  s8 -> s1 [45, 45] { R1428 += 1 };
  s8 -> s2 [46, 46] { R1428 += 1 };
  s8 -> s1 [48, 62] { R1428 += 1 };
  s8 -> s3 [65, 65] { R1428 += 1 };
  s8 -> s1 [66, 110] { R1428 += 1 };
  s8 -> s9 [111, 111] { R1428 += 1 };
  s8 -> s1 [112, 65535] { R1428 += 1 };
  s9 -> s1 [0, 43] { R1428 += 1 };
  s9 -> s1 [45, 45] { R1428 += 1 };
  s9 -> s2 [46, 46] { R1428 += 1 };
  s9 -> s1 [48, 62] { R1428 += 1 };
  s9 -> s3 [65, 65] { R1428 += 1 };
  s9 -> s1 [66, 98] { R1428 += 1 };
  s9 -> s10 [99, 99] { R1428 += 1 };
  s9 -> s1 [100, 65535] { R1428 += 1 };
  s10 -> s1 [0, 43] { R1428 += 1 };
  s10 -> s1 [45, 45] { R1428 += 1 };
  s10 -> s2 [46, 46] { R1428 += 1 };
  s10 -> s1 [48, 62] { R1428 += 1 };
  s10 -> s3 [65, 65] { R1428 += 1 };
  s10 -> s1 [66, 106] { R1428 += 1 };
  s10 -> s1 [108, 65535] { R1428 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1430 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1429 += 1, R1430 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1430 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1432 += 1 };
  s0 -> s0 [0, 65535] { R1431 += 1, R1432 += 1 };
  s0 -> s2 [0, 65535] { R1432 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R1432 += 1 };
  s0 -> s1 [59, 65535] { R1432 += 1 };
  s1 -> s1 [0, 57] { R1432 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1432 += 1 };
  s1 -> s1 [59, 65535] { R1432 += 1 };
  s2 -> s1 [0, 57] { R1432 += 1 };
  s2 -> s2 [0, 65535] { R1432 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R1432 += 1 };
  s2 -> s1 [59, 65535] { R1432 += 1 };
  s3 -> s3 [0, 65535] { R1432 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1434 += 1 };
  s0 -> s0 [0, 65535] { R1433 += 1, R1434 += 1 };
  s0 -> s2 [0, 65535] { R1434 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1434 += 1 };
  s0 -> s1 [66, 65535] { R1434 += 1 };
  s1 -> s1 [0, 64] { R1434 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1434 += 1 };
  s1 -> s1 [66, 65535] { R1434 += 1 };
  s2 -> s1 [0, 64] { R1434 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1434 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R1434 += 1 };
  s2 -> s1 [66, 65535] { R1434 += 1 };
  s3 -> s3 [0, 65535] { R1434 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1436 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1435 += 1, R1436 += 1 };
  s0 -> s2 [0, 65535] { R1436 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R1436 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1436 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1436 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R1436 += 1 };
  s2 -> s1 [0, 90] { R1436 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1436 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R1436 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1436 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1436 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1436 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R1438 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R1437 += 1, R1438 += 1 };
  s0 -> s2 [0, 65535] { R1438 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R1438 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R1438 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1438 += 1 };
  s2 -> s2 [0, 65535] { R1438 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1438 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1440 += 1, R1390 += 1 };
  s0 -> s2 [0, 65535] { R1440 += 1, R1389 += 1, R1390 += 1 };
  s0 -> s0 [0, 65535] { R1439 += 1, R1440 += 1 };
  s0 -> s1 [66, 65535] { R1440 += 1, R1390 += 1 };
  s1 -> s1 [0, 64] { R1440 += 1, R1390 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1440 += 1 };
  s1 -> s1 [66, 65535] { R1440 += 1, R1390 += 1 };
  s2 -> s1 [0, 64] { R1440 += 1, R1390 += 1 };
  s2 -> s2 [0, 65535] { R1440 += 1, R1389 += 1, R1390 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1440 += 1, R1390 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1442 += 1, R1392 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R1442 += 1, R1391 += 1, R1392 += 1 };
  s0 -> s0 [0, 65535] { R1441 += 1, R1442 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1442 += 1 };
  s1 -> s1 [0, 65535] { R1442 += 1, R1392 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1442 += 1, R1392 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R1442 += 1, R1391 += 1, R1392 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1442 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1444 += 1, R1394 += 1 };
  s0 -> s2 [0, 65535] { R1444 += 1, R1393 += 1, R1394 += 1 };
  s0 -> s0 [0, 65535] { R1443 += 1, R1444 += 1 };
  s0 -> s3 [87, 87] { R1444 += 1, R1394 += 1 };
  s0 -> s1 [88, 65535] { R1444 += 1, R1394 += 1 };
  s1 -> s1 [0, 65] { R1444 += 1, R1394 += 1 };
  s1 -> s3 [87, 87] { R1444 += 1, R1394 += 1 };
  s1 -> s1 [88, 65535] { R1444 += 1, R1394 += 1 };
  s2 -> s1 [0, 65] { R1444 += 1, R1394 += 1 };
  s2 -> s2 [0, 65535] { R1444 += 1, R1393 += 1, R1394 += 1 };
  s2 -> s3 [87, 87] { R1444 += 1, R1394 += 1 };
  s2 -> s1 [88, 65535] { R1444 += 1, R1394 += 1 };
  s3 -> s3 [0, 65] { R1444 += 1, R1394 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1444 += 1 };
  s3 -> s3 [87, 65535] { R1444 += 1, R1394 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1446 += 1, R1395 += 1, R1396 += 1 };
  s0 -> s0 [0, 65535] { R1445 += 1, R1446 += 1 };
  s0 -> s2 [0, 65535] { R1446 += 1, R1396 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R1446 += 1, R1395 += 1, R1396 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1446 += 1, R1396 += 1, R26 += 1 };
  s2 -> s3 [0, 65535] { R1446 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1446 += 1, R1396 += 1, R26 += 1 };
  s3 -> s3 [0, 65535] { R1446 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R1448 += 1, R1398 += 1 };
  s0 -> s2 [0, 65535] { R1448 += 1, R1398 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1447 += 1, R1448 += 1 };
  s0 -> s3 [0, 65535] { R1448 += 1, R1397 += 1, R1398 += 1 };
  s0 -> s1 [88, 65535] { R1448 += 1, R1398 += 1 };
  s1 -> s1 [0, 86] { R1448 += 1, R1398 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1448 += 1 };
  s1 -> s1 [88, 65535] { R1448 += 1, R1398 += 1 };
  s2 -> s1 [0, 86] { R1448 += 1, R1398 += 1 };
  s2 -> s5 [0, 65535] { R1448 += 1 };
  s2 -> s2 [0, 65535] { R1448 += 1, R1398 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R1448 += 1, R1398 += 1 };
  s3 -> s1 [0, 86] { R1448 += 1, R1398 += 1 };
  s3 -> s2 [0, 65535] { R1448 += 1, R1398 += 1, R28 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1448 += 1, R1397 += 1, R1398 += 1 };
  s3 -> s1 [88, 65535] { R1448 += 1, R1398 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1448 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R1450 += 1, R1400 += 1, R900 += 1 };
  s0 -> s2 [0, 65535] { R1450 += 1, R1399 += 1, R1400 += 1 };
  s0 -> s0 [0, 65535] { R1449 += 1, R1450 += 1 };
  s0 -> s1 [0, 65535] { R1450 += 1, R1400 += 1 };
  s0 -> s1 [88, 65535] { R1450 += 1, R1400 += 1, R900 += 1 };
  s1 -> s1 [0, 86] { R1450 += 1, R1400 += 1, R900 += 1 };
  s1 -> s4 [0, 65535] { R1450 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1450 += 1, R1400 += 1 };
  s1 -> s1 [88, 65535] { R1450 += 1, R1400 += 1, R900 += 1 };
  s2 -> s1 [0, 86] { R1450 += 1, R1400 += 1, R900 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1450 += 1, R1399 += 1, R1400 += 1 };
  s2 -> s1 [0, 65535] { R1450 += 1, R1400 += 1 };
  s2 -> s1 [88, 65535] { R1450 += 1, R1400 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1450 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1451 += 1, R1452 += 1 };
  s0 -> s1 [0, 65535] { R1452 += 1, R1401 += 1, R1402 += 1 };
  s0 -> s2 [0, 65535] { R1452 += 1, R1402 += 1 };
  s0 -> s3 [0, 65535] { R1452 += 1, R1402 += 1, R1193 += 1, R1194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1452 += 1, R1401 += 1, R1402 += 1 };
  s1 -> s2 [0, 65535] { R1452 += 1, R1402 += 1 };
  s1 -> s3 [0, 65535] { R1452 += 1, R1402 += 1, R1193 += 1, R1194 += 1 };
  s2 -> s4 [0, 65535] { R1452 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1452 += 1, R1402 += 1 };
  s3 -> s4 [0, 65535] { R1452 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R1452 += 1, R1402 += 1 };
  s3 -> s3 [0, 65535] { R1452 += 1, R1402 += 1, R1193 += 1, R1194 += 1 };
  s4 -> s4 [0, 65535] { R1452 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1453 += 1, R1454 += 1 };
  s0 -> s1 [0, 65535] { R1454 += 1, R1403 += 1, R1404 += 1 };
  s0 -> s2 [0, 65535] { R1454 += 1, R1404 += 1 };
  s1 -> s1 [0, 65535] { R1454 += 1, R1403 += 1, R1404 += 1 };
  s1 -> s2 [0, 65535] { R1454 += 1, R1404 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1454 += 1 };
  s2 -> s2 [0, 65535] { R1454 += 1, R1404 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1454 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R1456 += 1, R1405 += 1, R1406 += 1 };
  s0 -> s0 [0, 65535] { R1455 += 1, R1456 += 1 };
  s0 -> s2 [0, 65535] { R1456 += 1, R1406 += 1 };
  s1 -> s1 [0, 65535] { R1456 += 1, R1405 += 1, R1406 += 1 };
  s1 -> s2 [0, 65535] { R1456 += 1, R1406 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1456 += 1 };
  s2 -> s2 [0, 65535] { R1456 += 1, R1406 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1456 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1457 += 1, R1458 += 1 };
  s0 -> s1 [0, 65535] { R1458 += 1, R1407 += 1, R1408 += 1 };
  s0 -> s2 [0, 65535] { R1458 += 1, R1408 += 1 };
  s1 -> s1 [0, 65535] { R1458 += 1, R1407 += 1, R1408 += 1 };
  s1 -> s2 [0, 65535] { R1458 += 1, R1408 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1458 += 1 };
  s2 -> s2 [0, 65535] { R1458 += 1, R1408 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1458 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1460 += 1, R1409 += 1, R1410 += 1 };
  s0 -> s2 [0, 65535] { R1460 += 1, R1410 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1459 += 1, R1460 += 1 };
  s1 -> s1 [0, 65535] { R1460 += 1, R1409 += 1, R1410 += 1 };
  s1 -> s2 [0, 65535] { R1460 += 1, R1410 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1460 += 1, R1410 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R1460 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1460 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1462 += 1, R1412 += 1 };
  s0 -> s2 [0, 65535] { R1462 += 1, R1411 += 1, R1412 += 1 };
  s0 -> s0 [0, 65535] { R1461 += 1, R1462 += 1 };
  s0 -> s3 [65, 65] { R1462 += 1, R1412 += 1 };
  s0 -> s4 [65, 65] { R1462 += 1, R1412 += 1 };
  s0 -> s1 [88, 65535] { R1462 += 1, R1412 += 1 };
  s1 -> s1 [0, 64] { R1462 += 1, R1412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1462 += 1 };
  s1 -> s3 [65, 65] { R1462 += 1, R1412 += 1 };
  s1 -> s4 [65, 65] { R1462 += 1, R1412 += 1 };
  s1 -> s1 [88, 65535] { R1462 += 1, R1412 += 1 };
  s2 -> s1 [0, 64] { R1462 += 1, R1412 += 1 };
  s2 -> s2 [0, 65535] { R1462 += 1, R1411 += 1, R1412 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1462 += 1, R1412 += 1 };
  s2 -> s4 [65, 65] { R1462 += 1, R1412 += 1 };
  s2 -> s1 [88, 65535] { R1462 += 1, R1412 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1462 += 1 };
  s4 -> s4 [0, 65] { R1462 += 1, R1412 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1462 += 1 };
  s4 -> s4 [88, 65535] { R1462 += 1, R1412 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1464 += 1, R1414 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R1464 += 1, R1413 += 1, R1414 += 1 };
  s0 -> s0 [0, 65535] { R1463 += 1, R1464 += 1 };
  s0 -> s3 [65, 65] { R1464 += 1, R1414 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1464 += 1, R1414 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1464 += 1, R1414 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1464 += 1, R1414 += 1, R25 += 1 };
  s1 -> s1 [0, 65535] { R1464 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1464 += 1, R1414 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1464 += 1, R1414 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1464 += 1, R1414 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1464 += 1, R1414 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R1464 += 1, R1413 += 1, R1414 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1464 += 1, R1414 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1464 += 1, R1414 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1464 += 1, R1414 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R1464 += 1, R1414 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1464 += 1 };
  s4 -> s4 [0, 65535] { R1464 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1464 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1466 += 1, R1416 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1465 += 1, R1466 += 1 };
  s0 -> s2 [0, 65535] { R1466 += 1, R1415 += 1, R1416 += 1 };
  s0 -> s3 [65, 65] { R1466 += 1, R1416 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1466 += 1, R1416 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1466 += 1, R1416 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1466 += 1, R1416 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1466 += 1 };
  s1 -> s3 [65, 65] { R1466 += 1, R1416 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1466 += 1, R1416 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1466 += 1, R1416 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1466 += 1, R1416 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1466 += 1, R1415 += 1, R1416 += 1 };
  s2 -> s3 [65, 65] { R1466 += 1, R1416 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1466 += 1, R1416 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1466 += 1, R1416 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1466 += 1, R1416 += 1, R27 += 1 };
  s3 -> s6 [0, 65535] { R1466 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1466 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1466 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1468 += 1, R1418 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R1468 += 1, R1417 += 1, R1418 += 1 };
  s0 -> s0 [0, 65535] { R1467 += 1, R1468 += 1 };
  s0 -> s4 [65, 65] { R1468 += 1, R1418 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1468 += 1, R1418 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [66, 86] { R1468 += 1, R1418 += 1, R898 += 1 };
  s0 -> s2 [66, 65535] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [88, 65535] { R1468 += 1, R1418 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1468 += 1, R1418 += 1, R898 += 1 };
  s1 -> s1 [0, 65535] { R1468 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R1468 += 1, R1418 += 1 };
  s1 -> s6 [65, 65] { R1468 += 1, R1418 += 1 };
  s1 -> s1 [66, 86] { R1468 += 1, R1418 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1468 += 1, R1418 += 1 };
  s1 -> s1 [88, 65535] { R1468 += 1, R1418 += 1, R898 += 1 };
  s2 -> s1 [0, 64] { R1468 += 1, R1418 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [65, 65] { R1468 += 1, R1418 += 1, R898 += 1 };
  s2 -> s5 [65, 65] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s2 -> s6 [65, 65] { R1468 += 1, R1418 += 1, R898 += 1 };
  s2 -> s7 [65, 65] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [66, 86] { R1468 += 1, R1418 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [88, 65535] { R1468 += 1, R1418 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1468 += 1, R1418 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1468 += 1, R1417 += 1, R1418 += 1 };
  s3 -> s4 [65, 65] { R1468 += 1, R1418 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1468 += 1, R1418 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [66, 86] { R1468 += 1, R1418 += 1, R898 += 1 };
  s3 -> s2 [66, 65535] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [88, 65535] { R1468 += 1, R1418 += 1, R898 += 1 };
  s4 -> s4 [0, 86] { R1468 += 1, R1418 += 1, R898 += 1 };
  s4 -> s4 [0, 65535] { R1468 += 1, R1418 += 1 };
  s4 -> s9 [0, 65535] { R1468 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [88, 65535] { R1468 += 1, R1418 += 1, R898 += 1 };
  s5 -> s4 [0, 86] { R1468 += 1, R1418 += 1, R898 += 1 };
  s5 -> s5 [0, 65535] { R1468 += 1, R1418 += 1, R897 += 1, R898 += 1 };
  s5 -> s4 [88, 65535] { R1468 += 1, R1418 += 1, R898 += 1 };
  s6 -> s6 [0, 65535] { R1468 += 1 };
  s6 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1468 += 1 };
  s9 -> s8 [0, 65535];
  accepting s4, s8, s9, s6, s1;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s2 [0, 64] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s0 [0, 65535] { R1469 += 1, R1470 += 1 };
  s0 -> s3 [0, 65535] { R1470 += 1, R1419 += 1, R1420 += 1 };
  s0 -> s4 [65, 65] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s5 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s6 [65, 65] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s7 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s0 -> s1 [66, 65535] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s0 -> s2 [66, 65535] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s1 [0, 64] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s2 [0, 64] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s4 [65, 65] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s5 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s6 [65, 65] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s7 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s1 -> s1 [66, 65535] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s1 -> s2 [66, 65535] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [0, 64] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1470 += 1 };
  s2 -> s5 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s7 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s2 -> s2 [66, 65535] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s1 [0, 64] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s2 [0, 64] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s3 [0, 65535] { R1470 += 1, R1419 += 1, R1420 += 1 };
  s3 -> s4 [65, 65] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s5 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s6 [65, 65] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s7 [65, 65] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s3 -> s1 [66, 65535] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s3 -> s2 [66, 65535] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s4 -> s4 [0, 65535] { R1470 += 1, R1420 += 1, R1189 += 1, R1190 += 1 };
  s4 -> s5 [0, 65535] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1470 += 1, R1420 += 1, R1190 += 1, R1191 += 1 };
  s5 -> s9 [0, 65535] { R1470 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1470 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1470 += 1 };
  accepting s8, s5, s2, s9, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1472 += 1, R1422 += 1 };
  s0 -> s2 [0, 65535] { R1472 += 1, R1421 += 1, R1422 += 1 };
  s0 -> s0 [0, 65535] { R1471 += 1, R1472 += 1 };
  s0 -> s3 [65, 65] { R1472 += 1, R1422 += 1 };
  s0 -> s4 [65, 65] { R1472 += 1, R1422 += 1 };
  s0 -> s1 [66, 65535] { R1472 += 1, R1422 += 1 };
  s1 -> s1 [0, 64] { R1472 += 1, R1422 += 1 };
  s1 -> s1 [0, 65535] { R1472 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1472 += 1, R1422 += 1 };
  s1 -> s4 [65, 65] { R1472 += 1, R1422 += 1 };
  s1 -> s1 [66, 65535] { R1472 += 1, R1422 += 1 };
  s2 -> s1 [0, 64] { R1472 += 1, R1422 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1472 += 1, R1421 += 1, R1422 += 1 };
  s2 -> s3 [65, 65] { R1472 += 1, R1422 += 1 };
  s2 -> s4 [65, 65] { R1472 += 1, R1422 += 1 };
  s2 -> s1 [66, 65535] { R1472 += 1, R1422 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1472 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1472 += 1, R1422 += 1 };
  s4 -> s6 [0, 65535] { R1472 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1472 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s0 -> s2 [0, 64] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s0 -> s0 [0, 65535] { R1473 += 1, R1474 += 1 };
  s0 -> s3 [0, 65535] { R1474 += 1, R1423 += 1, R1424 += 1 };
  s0 -> s4 [65, 65] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s0 -> s5 [65, 65] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s0 -> s6 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s0 -> s7 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s0 -> s1 [66, 65535] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s0 -> s2 [66, 65535] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s1 -> s1 [0, 64] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s1 -> s2 [0, 64] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s1 -> s4 [65, 65] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s1 -> s5 [65, 65] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s1 -> s6 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s1 -> s7 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s1 -> s1 [66, 65535] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s1 -> s2 [66, 65535] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s2 -> s2 [0, 64] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s2 -> s11 [0, 64] { R1474 += 1, R1424 += 1 };
  s2 -> s8 [65, 65] { R1474 += 1, R1424 += 1 };
  s2 -> s12 [65, 65] { R1474 += 1, R1424 += 1 };
  s2 -> s6 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s2 -> s7 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s2 -> s2 [66, 65535] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s2 -> s11 [66, 65535] { R1474 += 1, R1424 += 1 };
  s3 -> s1 [0, 64] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s3 -> s2 [0, 64] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s3 -> s3 [0, 65535] { R1474 += 1, R1423 += 1, R1424 += 1 };
  s3 -> s4 [65, 65] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s3 -> s5 [65, 65] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s3 -> s6 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s3 -> s7 [65, 65] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s3 -> s1 [66, 65535] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s3 -> s2 [66, 65535] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s5 -> s5 [0, 65535] { R1474 += 1, R1424 += 1, R1383 += 1, R1384 += 1 };
  s5 -> s7 [0, 65535] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s7 -> s8 [0, 65535] { R1474 += 1, R1424 += 1 };
  s7 -> s7 [0, 65535] { R1474 += 1, R1424 += 1, R1384 += 1, R1385 += 1 };
  s8 -> s8 [0, 65535] { R1474 += 1, R1424 += 1 };
  s8 -> s9 [0, 65535] { R1474 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R1474 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R1474 += 1, R1424 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R1474 += 1 };
  s11 -> s8 [65, 65] { R1474 += 1, R1424 += 1 };
  s11 -> s12 [65, 65] { R1474 += 1, R1424 += 1 };
  s11 -> s11 [66, 65535] { R1474 += 1, R1424 += 1 };
  s12 -> s12 [0, 65535] { R1474 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1476 += 1, R1426 += 1 };
  s0 -> s0 [0, 65535] { R1475 += 1, R1476 += 1 };
  s0 -> s2 [0, 65535] { R1476 += 1, R1425 += 1, R1426 += 1 };
  s0 -> s3 [65, 65] { R1476 += 1, R1426 += 1 };
  s0 -> s4 [65, 65] { R1476 += 1, R1426 += 1 };
  s0 -> s1 [66, 65535] { R1476 += 1, R1426 += 1 };
  s1 -> s1 [0, 64] { R1476 += 1, R1426 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1476 += 1 };
  s1 -> s3 [65, 65] { R1476 += 1, R1426 += 1 };
  s1 -> s4 [65, 65] { R1476 += 1, R1426 += 1 };
  s1 -> s1 [66, 65535] { R1476 += 1, R1426 += 1 };
  s2 -> s1 [0, 64] { R1476 += 1, R1426 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1476 += 1, R1425 += 1, R1426 += 1 };
  s2 -> s3 [65, 65] { R1476 += 1, R1426 += 1 };
  s2 -> s4 [65, 65] { R1476 += 1, R1426 += 1 };
  s2 -> s1 [66, 65535] { R1476 += 1, R1426 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1476 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1476 += 1, R1426 += 1 };
  s4 -> s6 [0, 65535] { R1476 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1476 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1408 && R2 = R1476 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1389 = 0 && R1390 = R1408 && R1391 = 0 && R1392 = R1408 && R1393 = 0 && R1394 = R1408 && R1395 = 0 && R1396 = R1408 && R1397 = 0 && R1398 = R1408 && R1399 = 0 && R1400 = R1408 && R1401 = 0 && R1402 = R1408 && R1403 = 0 && R1404 = R1408 && R1405 = 0 && R1406 = R1408 && R1407 = 0 && R1417 = 0 && R1418 = 0 && R1419 = 0 && R1420 = 0 && R1423 = 0 && R1424 = 0 && R1427 = 10 && R1428 = R1476 && R1429 = 10 && R1430 = R1476 && R1431 = 10 && R1432 = R1476 && R1433 = 10 && R1434 = R1476 && R1435 = 10 && R1436 = R1476 && R1437 = 10 && R1438 = R1476 && R1439 = 10 && R1440 = R1476 && R1441 = 10 && R1442 = R1476 && R1443 = 10 && R1444 = R1476 && R1445 = 10 && R1446 = R1476 && R1447 = 10 && R1448 = R1476 && R1449 = 10 && R1450 = R1476 && R1451 = 10 && R1452 = R1476 && R1453 = 10 && R1454 = R1476 && R1455 = 10 && R1456 = R1476 && R1457 = 10 && R1458 = R1476 && R1459 = 10 && R1460 = R1476 && R1461 = 10 && R1462 = R1476 && R1463 = 10 && R1464 = R1476 && R1465 = 10 && R1466 = R1476 && R1467 = 10 && R1468 = R1476 && R1469 = 10 && R1470 = R1476 && R1471 = 10 && R1472 = R1476 && R1473 = 10 && R1474 = R1476 && R1475 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1408 && 9 < R1476 && (R14 = 0 || (R1409 = 0 && R1410 = 0)) && (R14 = 0 || (R1411 = 0 && R1412 = 0)) && (R14 = 0 || (R1413 = 0 && R1414 = 0)) && (R14 = 0 || (R1415 = 0 && R1416 = 0)) && (R14 = 0 || (R1421 = 0 && R1422 = 0)) && (R14 = 0 || (R1425 = 0 && R1426 = 0)) && (R1194 + R1191 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R1194 + R1191 = 0 || (R1192 + R1189 = 0 && R1193 + R1190 = 0)) && (R1388 + R1385 = 0 || (R1386 + R1383 = 0 && R1387 + R1384 = 0));
// End of Parikh automata intersection problem
