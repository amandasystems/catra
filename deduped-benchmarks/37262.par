// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R1771, R1772, R18, R2, R2641, R2642, R2643, R2644, R2645, R2646, R2647, R2648, R2649, R2650, R2839, R2840, R2841, R2842, R2843, R2844, R2845, R2846, R2847, R2848, R2849, R2850, R2851, R2852, R2853, R2854, R2855, R2856, R2857, R2858, R2859, R2860, R2861, R2862, R2863, R2864, R2865, R2866, R2867, R2868, R2869, R2870, R2871, R2872, R2873, R2874, R2875, R2876, R2877, R2878, R2879, R2880, R2881, R2882, R2883, R2884, R2885, R2886, R2887, R2888, R2889, R2890, R2891, R2892, R2893, R2894, R2895, R2896, R2897, R2898, R2899, R2900, R2901, R2902, R2903, R2904, R2905, R2906, R2907, R2908, R2909, R2910, R2911, R2912, R2913, R2914, R2915, R2916, R2917, R2918, R2919, R2920, R2921, R2922, R2923, R2924, R2925, R2926, R2927, R2928, R2929, R2930, R2931, R2932, R3, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R2884 += 1 };
  s0 -> s0 [0, 65535] { R2883 += 1, R2884 += 1 };
  s0 -> s1 [45, 45] { R2884 += 1 };
  s0 -> s2 [46, 46] { R2884 += 1 };
  s0 -> s1 [48, 62] { R2884 += 1 };
  s0 -> s3 [65, 65] { R2884 += 1 };
  s0 -> s1 [66, 65535] { R2884 += 1 };
  s1 -> s1 [0, 43] { R2884 += 1 };
  s1 -> s1 [45, 45] { R2884 += 1 };
  s1 -> s2 [46, 46] { R2884 += 1 };
  s1 -> s1 [48, 62] { R2884 += 1 };
  s1 -> s3 [65, 65] { R2884 += 1 };
  s1 -> s1 [66, 65535] { R2884 += 1 };
  s2 -> s1 [0, 43] { R2884 += 1 };
  s2 -> s1 [45, 45] { R2884 += 1 };
  s2 -> s2 [46, 46] { R2884 += 1 };
  s2 -> s1 [48, 62] { R2884 += 1 };
  s2 -> s3 [65, 65] { R2884 += 1 };
  s2 -> s1 [66, 114] { R2884 += 1 };
  s2 -> s8 [115, 115] { R2884 += 1 };
  s2 -> s1 [116, 65535] { R2884 += 1 };
  s3 -> s3 [0, 43] { R2884 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R2884 += 1 };
  s3 -> s4 [46, 46] { R2884 += 1 };
  s3 -> s3 [48, 62] { R2884 += 1 };
  s3 -> s3 [65, 65535] { R2884 += 1 };
  s4 -> s3 [0, 43] { R2884 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R2884 += 1 };
  s4 -> s4 [46, 46] { R2884 += 1 };
  s4 -> s3 [48, 62] { R2884 += 1 };
  s4 -> s3 [65, 114] { R2884 += 1 };
  s4 -> s5 [115, 115] { R2884 += 1 };
  s4 -> s3 [116, 65535] { R2884 += 1 };
  s5 -> s3 [0, 43] { R2884 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R2884 += 1 };
  s5 -> s4 [46, 46] { R2884 += 1 };
  s5 -> s3 [48, 62] { R2884 += 1 };
  s5 -> s3 [65, 110] { R2884 += 1 };
  s5 -> s6 [111, 111] { R2884 += 1 };
  s5 -> s3 [112, 65535] { R2884 += 1 };
  s6 -> s3 [0, 43] { R2884 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R2884 += 1 };
  s6 -> s4 [46, 46] { R2884 += 1 };
  s6 -> s3 [48, 62] { R2884 += 1 };
  s6 -> s3 [65, 98] { R2884 += 1 };
  s6 -> s7 [99, 99] { R2884 += 1 };
  s6 -> s3 [100, 65535] { R2884 += 1 };
  s7 -> s3 [0, 43] { R2884 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R2884 += 1 };
  s7 -> s4 [46, 46] { R2884 += 1 };
  s7 -> s3 [48, 62] { R2884 += 1 };
  s7 -> s3 [65, 106] { R2884 += 1 };
  s7 -> s3 [108, 65535] { R2884 += 1 };
  s8 -> s1 [0, 43] { R2884 += 1 };
  s8 -> s1 [45, 45] { R2884 += 1 };
  s8 -> s2 [46, 46] { R2884 += 1 };
  s8 -> s1 [48, 62] { R2884 += 1 };
  s8 -> s3 [65, 65] { R2884 += 1 };
  s8 -> s1 [66, 110] { R2884 += 1 };
  s8 -> s9 [111, 111] { R2884 += 1 };
  s8 -> s1 [112, 65535] { R2884 += 1 };
  s9 -> s1 [0, 43] { R2884 += 1 };
  s9 -> s1 [45, 45] { R2884 += 1 };
  s9 -> s2 [46, 46] { R2884 += 1 };
  s9 -> s1 [48, 62] { R2884 += 1 };
  s9 -> s3 [65, 65] { R2884 += 1 };
  s9 -> s1 [66, 98] { R2884 += 1 };
  s9 -> s10 [99, 99] { R2884 += 1 };
  s9 -> s1 [100, 65535] { R2884 += 1 };
  s10 -> s1 [0, 43] { R2884 += 1 };
  s10 -> s1 [45, 45] { R2884 += 1 };
  s10 -> s2 [46, 46] { R2884 += 1 };
  s10 -> s1 [48, 62] { R2884 += 1 };
  s10 -> s3 [65, 65] { R2884 += 1 };
  s10 -> s1 [66, 106] { R2884 += 1 };
  s10 -> s1 [108, 65535] { R2884 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2886 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R2885 += 1, R2886 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2886 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R2888 += 1 };
  s0 -> s2 [0, 65535] { R2888 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R2887 += 1, R2888 += 1 };
  s0 -> s3 [58, 58] { R2888 += 1 };
  s0 -> s1 [59, 65535] { R2888 += 1 };
  s1 -> s1 [0, 57] { R2888 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R2888 += 1 };
  s1 -> s1 [59, 65535] { R2888 += 1 };
  s2 -> s1 [0, 57] { R2888 += 1 };
  s2 -> s2 [0, 65535] { R2888 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R2888 += 1 };
  s2 -> s1 [59, 65535] { R2888 += 1 };
  s3 -> s3 [0, 65535] { R2888 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R2890 += 1 };
  s0 -> s2 [0, 65535] { R2890 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R2889 += 1, R2890 += 1 };
  s0 -> s3 [65, 65] { R2890 += 1 };
  s0 -> s1 [66, 65535] { R2890 += 1 };
  s1 -> s1 [0, 64] { R2890 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R2890 += 1 };
  s1 -> s1 [66, 65535] { R2890 += 1 };
  s2 -> s1 [0, 64] { R2890 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2890 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R2890 += 1 };
  s2 -> s1 [66, 65535] { R2890 += 1 };
  s3 -> s3 [0, 65535] { R2890 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R2892 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R2892 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R2891 += 1, R2892 += 1 };
  s0 -> s3 [91, 91] { R2892 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R2892 += 1, R16 += 1 };
  s1 -> s1 [0, 65535] { R2892 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R2892 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R2892 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R2892 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R2892 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R2892 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R2892 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2892 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R2894 += 1, R18 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R2894 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R2893 += 1, R2894 += 1 };
  s1 -> s4 [0, 65535] { R2894 += 1 };
  s1 -> s1 [0, 65535] { R2894 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2894 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R2894 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2894 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R2896 += 1, R2846 += 1 };
  s0 -> s0 [0, 65535] { R2895 += 1, R2896 += 1 };
  s0 -> s2 [0, 65535] { R2896 += 1, R2845 += 1, R2846 += 1 };
  s0 -> s1 [66, 65535] { R2896 += 1, R2846 += 1 };
  s1 -> s1 [0, 64] { R2896 += 1, R2846 += 1 };
  s1 -> s1 [0, 65535] { R2896 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R2896 += 1, R2846 += 1 };
  s2 -> s1 [0, 64] { R2896 += 1, R2846 += 1 };
  s2 -> s2 [0, 65535] { R2896 += 1, R2845 += 1, R2846 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R2896 += 1, R2846 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R2897 += 1, R2898 += 1 };
  s0 -> s1 [0, 65535] { R2898 += 1, R2848 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R2898 += 1, R2847 += 1, R2848 += 1 };
  s1 -> s1 [0, 65535] { R2898 += 1, R2848 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2898 += 1 };
  s2 -> s1 [0, 65535] { R2898 += 1, R2848 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R2898 += 1, R2847 += 1, R2848 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2898 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R2900 += 1, R2850 += 1 };
  s0 -> s2 [0, 65535] { R2900 += 1, R2849 += 1, R2850 += 1 };
  s0 -> s0 [0, 65535] { R2899 += 1, R2900 += 1 };
  s0 -> s1 [87, 65535] { R2900 += 1, R2850 += 1 };
  s1 -> s1 [0, 65] { R2900 += 1, R2850 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2900 += 1 };
  s1 -> s1 [87, 65535] { R2900 += 1, R2850 += 1 };
  s2 -> s1 [0, 65] { R2900 += 1, R2850 += 1 };
  s2 -> s2 [0, 65535] { R2900 += 1, R2849 += 1, R2850 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R2900 += 1, R2850 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2902 += 1, R2852 += 1, R1770 += 1 };
  s0 -> s2 [0, 65535] { R2902 += 1, R2851 += 1, R2852 += 1 };
  s0 -> s0 [0, 65535] { R2901 += 1, R2902 += 1 };
  s1 -> s1 [0, 65535] { R2902 += 1, R2852 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2902 += 1 };
  s2 -> s1 [0, 65535] { R2902 += 1, R2852 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2902 += 1, R2851 += 1, R2852 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2902 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R2904 += 1, R2854 += 1 };
  s0 -> s2 [0, 65535] { R2904 += 1, R2854 += 1, R1772 += 1 };
  s0 -> s0 [0, 65535] { R2903 += 1, R2904 += 1 };
  s0 -> s3 [0, 65535] { R2904 += 1, R2853 += 1, R2854 += 1 };
  s0 -> s1 [88, 65535] { R2904 += 1, R2854 += 1 };
  s1 -> s1 [0, 86] { R2904 += 1, R2854 += 1 };
  s1 -> s1 [0, 65535] { R2904 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R2904 += 1, R2854 += 1 };
  s2 -> s1 [0, 86] { R2904 += 1, R2854 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R2904 += 1, R2854 += 1, R1772 += 1 };
  s2 -> s5 [0, 65535] { R2904 += 1 };
  s2 -> s1 [88, 65535] { R2904 += 1, R2854 += 1 };
  s3 -> s1 [0, 86] { R2904 += 1, R2854 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R2904 += 1, R2854 += 1, R1772 += 1 };
  s3 -> s3 [0, 65535] { R2904 += 1, R2853 += 1, R2854 += 1 };
  s3 -> s1 [88, 65535] { R2904 += 1, R2854 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2904 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R2906 += 1, R2856 += 1, R2644 += 1 };
  s0 -> s2 [0, 65535] { R2906 += 1, R2855 += 1, R2856 += 1 };
  s0 -> s1 [0, 65535] { R2906 += 1, R2856 += 1 };
  s0 -> s0 [0, 65535] { R2905 += 1, R2906 += 1 };
  s0 -> s1 [88, 65535] { R2906 += 1, R2856 += 1, R2644 += 1 };
  s1 -> s1 [0, 86] { R2906 += 1, R2856 += 1, R2644 += 1 };
  s1 -> s4 [0, 65535] { R2906 += 1 };
  s1 -> s1 [0, 65535] { R2906 += 1, R2856 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [88, 65535] { R2906 += 1, R2856 += 1, R2644 += 1 };
  s2 -> s1 [0, 86] { R2906 += 1, R2856 += 1, R2644 += 1 };
  s2 -> s2 [0, 65535] { R2906 += 1, R2855 += 1, R2856 += 1 };
  s2 -> s1 [0, 65535] { R2906 += 1, R2856 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [88, 65535] { R2906 += 1, R2856 += 1, R2644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2906 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R2908 += 1, R2857 += 1, R2858 += 1 };
  s0 -> s2 [0, 65535] { R2908 += 1, R2858 += 1, R2649 += 1, R2650 += 1 };
  s0 -> s3 [0, 65535] { R2908 += 1, R2858 += 1, R2648 += 1, R2649 += 1 };
  s0 -> s0 [0, 65535] { R2907 += 1, R2908 += 1 };
  s1 -> s1 [0, 65535] { R2908 += 1, R2857 += 1, R2858 += 1 };
  s1 -> s2 [0, 65535] { R2908 += 1, R2858 += 1, R2649 += 1, R2650 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R2908 += 1, R2858 += 1, R2648 += 1, R2649 += 1 };
  s2 -> s2 [0, 65535] { R2908 += 1, R2858 += 1, R2649 += 1, R2650 += 1 };
  s2 -> s6 [0, 65535] { R2908 += 1, R2858 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2908 += 1 };
  s3 -> s2 [0, 65535] { R2908 += 1, R2858 += 1, R2649 += 1, R2650 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2908 += 1, R2858 += 1, R2648 += 1, R2649 += 1 };
  s3 -> s5 [0, 65535] { R2908 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2908 += 1 };
  s6 -> s6 [0, 65535] { R2908 += 1, R2858 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2908 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R2909 += 1, R2910 += 1 };
  s0 -> s1 [0, 65535] { R2910 += 1, R2860 += 1 };
  s0 -> s2 [0, 65535] { R2910 += 1, R2859 += 1, R2860 += 1 };
  s1 -> s4 [0, 65535] { R2910 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2910 += 1, R2860 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2910 += 1, R2860 += 1 };
  s2 -> s2 [0, 65535] { R2910 += 1, R2859 += 1, R2860 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2910 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R2911 += 1, R2912 += 1 };
  s0 -> s1 [0, 65535] { R2912 += 1, R2861 += 1, R2862 += 1 };
  s0 -> s2 [0, 65535] { R2912 += 1, R2862 += 1 };
  s1 -> s1 [0, 65535] { R2912 += 1, R2861 += 1, R2862 += 1 };
  s1 -> s2 [0, 65535] { R2912 += 1, R2862 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2912 += 1 };
  s2 -> s2 [0, 65535] { R2912 += 1, R2862 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2912 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s0 [0, 65535] { R2913 += 1, R2914 += 1 };
  s0 -> s1 [0, 65535] { R2914 += 1, R2863 += 1, R2864 += 1 };
  s0 -> s2 [0, 65535] { R2914 += 1, R2864 += 1 };
  s1 -> s1 [0, 65535] { R2914 += 1, R2863 += 1, R2864 += 1 };
  s1 -> s2 [0, 65535] { R2914 += 1, R2864 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R2914 += 1 };
  s2 -> s2 [0, 65535] { R2914 += 1, R2864 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2914 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R2916 += 1, R2865 += 1, R2866 += 1 };
  s0 -> s2 [0, 65535] { R2916 += 1, R2866 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R2915 += 1, R2916 += 1 };
  s1 -> s1 [0, 65535] { R2916 += 1, R2865 += 1, R2866 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2916 += 1, R2866 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2916 += 1, R2866 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R2916 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2916 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R2918 += 1, R2868 += 1 };
  s0 -> s0 [0, 65535] { R2917 += 1, R2918 += 1 };
  s0 -> s2 [0, 65535] { R2918 += 1, R2867 += 1, R2868 += 1 };
  s0 -> s3 [65, 65] { R2918 += 1, R2868 += 1 };
  s0 -> s4 [65, 65] { R2918 += 1, R2868 += 1 };
  s0 -> s5 [87, 87] { R2918 += 1, R2868 += 1 };
  s0 -> s1 [88, 65535] { R2918 += 1, R2868 += 1 };
  s1 -> s1 [0, 64] { R2918 += 1, R2868 += 1 };
  s1 -> s3 [65, 65] { R2918 += 1, R2868 += 1 };
  s1 -> s4 [65, 65] { R2918 += 1, R2868 += 1 };
  s1 -> s5 [87, 87] { R2918 += 1, R2868 += 1 };
  s1 -> s1 [88, 65535] { R2918 += 1, R2868 += 1 };
  s2 -> s1 [0, 64] { R2918 += 1, R2868 += 1 };
  s2 -> s2 [0, 65535] { R2918 += 1, R2867 += 1, R2868 += 1 };
  s2 -> s3 [65, 65] { R2918 += 1, R2868 += 1 };
  s2 -> s4 [65, 65] { R2918 += 1, R2868 += 1 };
  s2 -> s5 [87, 87] { R2918 += 1, R2868 += 1 };
  s2 -> s1 [88, 65535] { R2918 += 1, R2868 += 1 };
  s3 -> s3 [0, 65] { R2918 += 1, R2868 += 1 };
  s3 -> s7 [87, 87] { R2918 += 1, R2868 += 1 };
  s3 -> s3 [88, 65535] { R2918 += 1, R2868 += 1 };
  s5 -> s5 [0, 64] { R2918 += 1, R2868 += 1 };
  s5 -> s5 [0, 65535] { R2918 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R2918 += 1, R2868 += 1 };
  s5 -> s8 [65, 65] { R2918 += 1, R2868 += 1 };
  s5 -> s5 [87, 65535] { R2918 += 1, R2868 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R2918 += 1, R2868 += 1 };
  s7 -> s7 [0, 65535] { R2918 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R2918 += 1, R2868 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R2918 += 1 };
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R2919 += 1, R2920 += 1 };
  s0 -> s2 [0, 65535] { R2920 += 1, R2869 += 1, R2870 += 1 };
  s0 -> s3 [65, 65] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R2920 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R2920 += 1, R2869 += 1, R2870 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s3 -> s3 [0, 65535] { R2920 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2920 += 1 };
  s4 -> s4 [0, 65535] { R2920 += 1, R2870 += 1, R1769 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2920 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s0 -> s2 [0, 65535] { R2922 += 1, R2871 += 1, R2872 += 1 };
  s0 -> s0 [0, 65535] { R2921 += 1, R2922 += 1 };
  s0 -> s3 [65, 65] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s0 -> s4 [65, 65] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s0 -> s1 [66, 65535] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s1 -> s1 [0, 64] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R2922 += 1 };
  s1 -> s3 [65, 65] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s1 -> s4 [65, 65] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s1 -> s1 [66, 65535] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s2 -> s1 [0, 64] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2922 += 1, R2871 += 1, R2872 += 1 };
  s2 -> s3 [65, 65] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s2 -> s4 [65, 65] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s2 -> s1 [66, 65535] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2922 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R2922 += 1, R2872 += 1, R1771 += 1 };
  s4 -> s6 [0, 65535] { R2922 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2922 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [0, 64] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s0 -> s3 [0, 65535] { R2924 += 1, R2873 += 1, R2874 += 1 };
  s0 -> s0 [0, 65535] { R2923 += 1, R2924 += 1 };
  s0 -> s4 [65, 65] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s0 -> s5 [65, 65] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s6 [65, 65] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s0 -> s7 [65, 65] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [66, 86] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s0 -> s1 [66, 65535] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s0 -> s2 [88, 65535] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s1 -> s1 [0, 64] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [0, 64] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s1 -> s4 [65, 65] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s1 -> s5 [65, 65] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s6 [65, 65] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s1 -> s7 [65, 65] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [66, 86] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s1 -> s1 [66, 65535] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s1 -> s2 [88, 65535] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s2 -> s2 [0, 64] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s2 -> s2 [0, 65535] { R2924 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s4 [65, 65] { R2924 += 1, R2874 += 1 };
  s2 -> s6 [65, 65] { R2924 += 1, R2874 += 1 };
  s2 -> s2 [66, 86] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s2 -> s2 [66, 65535] { R2924 += 1, R2874 += 1 };
  s2 -> s2 [88, 65535] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s3 -> s1 [0, 64] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [0, 64] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s3 -> s3 [0, 65535] { R2924 += 1, R2873 += 1, R2874 += 1 };
  s3 -> s4 [65, 65] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s3 -> s5 [65, 65] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s6 [65, 65] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s3 -> s7 [65, 65] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [66, 86] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s3 -> s1 [66, 65535] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s3 -> s2 [88, 65535] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s4 -> s4 [0, 65535] { R2924 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s6 [0, 86] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s5 -> s5 [0, 65535] { R2924 += 1, R2874 += 1, R2641 += 1, R2642 += 1 };
  s5 -> s6 [88, 65535] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s6 -> s6 [0, 86] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s6 -> s8 [0, 65535] { R2924 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s6 [0, 65535] { R2924 += 1, R2874 += 1 };
  s6 -> s6 [88, 65535] { R2924 += 1, R2874 += 1, R2642 += 1 };
  s8 -> s8 [0, 65535] { R2924 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s2, s9, s6;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s0 [0, 65535] { R2925 += 1, R2926 += 1 };
  s0 -> s2 [0, 65535] { R2926 += 1, R2875 += 1, R2876 += 1 };
  s0 -> s3 [65, 65] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s4 [65, 65] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s0 -> s1 [66, 65535] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [0, 64] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [0, 65535] { R2926 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s4 [65, 65] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s1 -> s1 [66, 65535] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s1 [0, 64] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R2926 += 1, R2875 += 1, R2876 += 1 };
  s2 -> s3 [65, 65] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s4 [65, 65] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s2 -> s1 [66, 65535] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s3 -> s3 [0, 65535] { R2926 += 1, R2876 += 1, R2645 += 1, R2646 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R2926 += 1 };
  s4 -> s4 [0, 65535] { R2926 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2926 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R2928 += 1, R2878 += 1 };
  s0 -> s2 [0, 65535] { R2928 += 1, R2877 += 1, R2878 += 1 };
  s0 -> s0 [0, 65535] { R2927 += 1, R2928 += 1 };
  s0 -> s3 [65, 65] { R2928 += 1, R2878 += 1 };
  s0 -> s4 [65, 65] { R2928 += 1, R2878 += 1 };
  s0 -> s1 [66, 65535] { R2928 += 1, R2878 += 1 };
  s1 -> s1 [0, 64] { R2928 += 1, R2878 += 1 };
  s1 -> s1 [0, 65535] { R2928 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2928 += 1, R2878 += 1 };
  s1 -> s4 [65, 65] { R2928 += 1, R2878 += 1 };
  s1 -> s1 [66, 65535] { R2928 += 1, R2878 += 1 };
  s2 -> s1 [0, 64] { R2928 += 1, R2878 += 1 };
  s2 -> s2 [0, 65535] { R2928 += 1, R2877 += 1, R2878 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R2928 += 1, R2878 += 1 };
  s2 -> s4 [65, 65] { R2928 += 1, R2878 += 1 };
  s2 -> s1 [66, 65535] { R2928 += 1, R2878 += 1 };
  s3 -> s3 [0, 65535] { R2928 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2928 += 1 };
  s4 -> s4 [0, 65535] { R2928 += 1, R2878 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2928 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s0 -> s2 [0, 64] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s0 -> s3 [0, 65535] { R2930 += 1, R2879 += 1, R2880 += 1 };
  s0 -> s0 [0, 65535] { R2929 += 1, R2930 += 1 };
  s0 -> s4 [65, 65] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s0 -> s5 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s0 -> s6 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s0 -> s7 [65, 65] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s0 -> s1 [66, 65535] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s0 -> s2 [66, 65535] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s1 -> s1 [0, 64] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s1 -> s2 [0, 64] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s1 -> s4 [65, 65] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s1 -> s5 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s1 -> s6 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s1 -> s7 [65, 65] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s1 -> s1 [66, 65535] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s1 -> s2 [66, 65535] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s2 -> s11 [0, 64] { R2930 += 1, R2880 += 1 };
  s2 -> s2 [0, 64] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s2 -> s12 [65, 65] { R2930 += 1, R2880 += 1 };
  s2 -> s5 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s2 -> s6 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s2 -> s8 [65, 65] { R2930 += 1, R2880 += 1 };
  s2 -> s11 [66, 65535] { R2930 += 1, R2880 += 1 };
  s2 -> s2 [66, 65535] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s3 -> s1 [0, 64] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s3 -> s2 [0, 64] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s3 -> s3 [0, 65535] { R2930 += 1, R2879 += 1, R2880 += 1 };
  s3 -> s4 [65, 65] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s3 -> s5 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s3 -> s6 [65, 65] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s3 -> s7 [65, 65] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s3 -> s1 [66, 65535] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s3 -> s2 [66, 65535] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s4 -> s4 [0, 65535] { R2930 += 1, R2880 += 1, R2839 += 1, R2840 += 1 };
  s4 -> s5 [0, 65535] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s5 -> s5 [0, 65535] { R2930 += 1, R2880 += 1, R2840 += 1, R2841 += 1 };
  s5 -> s8 [0, 65535] { R2930 += 1, R2880 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R2930 += 1 };
  s8 -> s8 [0, 65535] { R2930 += 1, R2880 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R2930 += 1 };
  s11 -> s11 [0, 64] { R2930 += 1, R2880 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R2930 += 1 };
  s11 -> s12 [65, 65] { R2930 += 1, R2880 += 1 };
  s11 -> s8 [65, 65] { R2930 += 1, R2880 += 1 };
  s11 -> s11 [66, 65535] { R2930 += 1, R2880 += 1 };
  s12 -> s12 [0, 65535] { R2930 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R2932 += 1, R2882 += 1 };
  s0 -> s0 [0, 65535] { R2931 += 1, R2932 += 1 };
  s0 -> s2 [0, 65535] { R2932 += 1, R2881 += 1, R2882 += 1 };
  s0 -> s3 [65, 65] { R2932 += 1, R2882 += 1 };
  s0 -> s4 [65, 65] { R2932 += 1, R2882 += 1 };
  s0 -> s1 [66, 65535] { R2932 += 1, R2882 += 1 };
  s1 -> s1 [0, 64] { R2932 += 1, R2882 += 1 };
  s1 -> s1 [0, 65535] { R2932 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R2932 += 1, R2882 += 1 };
  s1 -> s4 [65, 65] { R2932 += 1, R2882 += 1 };
  s1 -> s1 [66, 65535] { R2932 += 1, R2882 += 1 };
  s2 -> s1 [0, 64] { R2932 += 1, R2882 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R2932 += 1, R2881 += 1, R2882 += 1 };
  s2 -> s3 [65, 65] { R2932 += 1, R2882 += 1 };
  s2 -> s4 [65, 65] { R2932 += 1, R2882 += 1 };
  s2 -> s1 [66, 65535] { R2932 += 1, R2882 += 1 };
  s3 -> s3 [0, 65535] { R2932 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R2932 += 1 };
  s4 -> s4 [0, 65535] { R2932 += 1, R2882 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R2932 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2864 && R2 = R2932 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R2845 = 0 && R2846 = R2864 && R2847 = 0 && R2848 = R2864 && R2849 = 0 && R2850 = R2864 && R2851 = 0 && R2852 = R2864 && R2853 = 0 && R2854 = R2864 && R2855 = 0 && R2856 = R2864 && R2857 = 0 && R2858 = R2864 && R2859 = 0 && R2860 = R2864 && R2861 = 0 && R2862 = R2864 && R2863 = 0 && R2867 = 0 && R2868 = 0 && R2873 = 0 && R2874 = 0 && R2879 = 0 && R2880 = 0 && R2883 = 10 && R2884 = R2932 && R2885 = 10 && R2886 = R2932 && R2887 = 10 && R2888 = R2932 && R2889 = 10 && R2890 = R2932 && R2891 = 10 && R2892 = R2932 && R2893 = 10 && R2894 = R2932 && R2895 = 10 && R2896 = R2932 && R2897 = 10 && R2898 = R2932 && R2899 = 10 && R2900 = R2932 && R2901 = 10 && R2902 = R2932 && R2903 = 10 && R2904 = R2932 && R2905 = 10 && R2906 = R2932 && R2907 = 10 && R2908 = R2932 && R2909 = 10 && R2910 = R2932 && R2911 = 10 && R2912 = R2932 && R2913 = 10 && R2914 = R2932 && R2915 = 10 && R2916 = R2932 && R2917 = 10 && R2918 = R2932 && R2919 = 10 && R2920 = R2932 && R2921 = 10 && R2922 = R2932 && R2923 = 10 && R2924 = R2932 && R2925 = 10 && R2926 = R2932 && R2927 = 10 && R2928 = R2932 && R2929 = 10 && R2930 = R2932 && R2931 = 10 && R7 < 1 && R8 < 1 && R1772 + R1771 < 1 && 0 < R2864 && 9 < R2932 && (R14 = 0 || (R2865 = 0 && R2866 = 0)) && (R14 = 0 || (R2869 = 0 && R2870 = 0)) && (R14 = 0 || (R2871 = 0 && R2872 = 0)) && (R14 = 0 || (R2875 = 0 && R2876 = 0)) && (R14 = 0 || (R2877 = 0 && R2878 = 0)) && (R14 = 0 || (R2881 = 0 && R2882 = 0)) && (R2650 + R2647 = 0 || (R2643 + R2641 = 0 && R2644 + R2642 = 0)) && (R2650 + R2647 = 0 || (R2648 + R2645 = 0 && R2649 + R2646 = 0)) && (R2844 + R2841 = 0 || (R2842 + R2839 = 0 && R2843 + R2840 = 0));
// End of Parikh automata intersection problem
