// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R3, R7, R8, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R1046 += 1 };
  s0 -> s0 [0, 65535] { R1045 += 1, R1046 += 1 };
  s0 -> s1 [45, 45] { R1046 += 1 };
  s0 -> s2 [46, 46] { R1046 += 1 };
  s0 -> s1 [48, 62] { R1046 += 1 };
  s0 -> s3 [65, 65] { R1046 += 1 };
  s0 -> s1 [66, 65535] { R1046 += 1 };
  s1 -> s1 [0, 43] { R1046 += 1 };
  s1 -> s1 [45, 45] { R1046 += 1 };
  s1 -> s2 [46, 46] { R1046 += 1 };
  s1 -> s1 [48, 62] { R1046 += 1 };
  s1 -> s3 [65, 65] { R1046 += 1 };
  s1 -> s1 [66, 65535] { R1046 += 1 };
  s2 -> s1 [0, 43] { R1046 += 1 };
  s2 -> s1 [45, 45] { R1046 += 1 };
  s2 -> s2 [46, 46] { R1046 += 1 };
  s2 -> s1 [48, 62] { R1046 += 1 };
  s2 -> s3 [65, 65] { R1046 += 1 };
  s2 -> s1 [66, 114] { R1046 += 1 };
  s2 -> s8 [115, 115] { R1046 += 1 };
  s2 -> s1 [116, 65535] { R1046 += 1 };
  s3 -> s3 [0, 43] { R1046 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R1046 += 1 };
  s3 -> s4 [46, 46] { R1046 += 1 };
  s3 -> s3 [48, 62] { R1046 += 1 };
  s3 -> s3 [65, 65535] { R1046 += 1 };
  s4 -> s3 [0, 43] { R1046 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R1046 += 1 };
  s4 -> s4 [46, 46] { R1046 += 1 };
  s4 -> s3 [48, 62] { R1046 += 1 };
  s4 -> s3 [65, 114] { R1046 += 1 };
  s4 -> s5 [115, 115] { R1046 += 1 };
  s4 -> s3 [116, 65535] { R1046 += 1 };
  s5 -> s3 [0, 43] { R1046 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R1046 += 1 };
  s5 -> s4 [46, 46] { R1046 += 1 };
  s5 -> s3 [48, 62] { R1046 += 1 };
  s5 -> s3 [65, 110] { R1046 += 1 };
  s5 -> s6 [111, 111] { R1046 += 1 };
  s5 -> s3 [112, 65535] { R1046 += 1 };
  s6 -> s3 [0, 43] { R1046 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R1046 += 1 };
  s6 -> s4 [46, 46] { R1046 += 1 };
  s6 -> s3 [48, 62] { R1046 += 1 };
  s6 -> s3 [65, 98] { R1046 += 1 };
  s6 -> s7 [99, 99] { R1046 += 1 };
  s6 -> s3 [100, 65535] { R1046 += 1 };
  s7 -> s3 [0, 43] { R1046 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R1046 += 1 };
  s7 -> s4 [46, 46] { R1046 += 1 };
  s7 -> s3 [48, 62] { R1046 += 1 };
  s7 -> s3 [65, 106] { R1046 += 1 };
  s7 -> s3 [108, 65535] { R1046 += 1 };
  s8 -> s1 [0, 43] { R1046 += 1 };
  s8 -> s1 [45, 45] { R1046 += 1 };
  s8 -> s2 [46, 46] { R1046 += 1 };
  s8 -> s1 [48, 62] { R1046 += 1 };
  s8 -> s3 [65, 65] { R1046 += 1 };
  s8 -> s1 [66, 110] { R1046 += 1 };
  s8 -> s9 [111, 111] { R1046 += 1 };
  s8 -> s1 [112, 65535] { R1046 += 1 };
  s9 -> s1 [0, 43] { R1046 += 1 };
  s9 -> s1 [45, 45] { R1046 += 1 };
  s9 -> s2 [46, 46] { R1046 += 1 };
  s9 -> s1 [48, 62] { R1046 += 1 };
  s9 -> s3 [65, 65] { R1046 += 1 };
  s9 -> s1 [66, 98] { R1046 += 1 };
  s9 -> s10 [99, 99] { R1046 += 1 };
  s9 -> s1 [100, 65535] { R1046 += 1 };
  s10 -> s1 [0, 43] { R1046 += 1 };
  s10 -> s1 [45, 45] { R1046 += 1 };
  s10 -> s2 [46, 46] { R1046 += 1 };
  s10 -> s1 [48, 62] { R1046 += 1 };
  s10 -> s3 [65, 65] { R1046 += 1 };
  s10 -> s1 [66, 106] { R1046 += 1 };
  s10 -> s1 [108, 65535] { R1046 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1048 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1047 += 1, R1048 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1048 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R1050 += 1 };
  s0 -> s0 [0, 65535] { R1049 += 1, R1050 += 1 };
  s0 -> s2 [0, 65535] { R1050 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R1050 += 1 };
  s0 -> s1 [59, 65535] { R1050 += 1 };
  s1 -> s1 [0, 57] { R1050 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R1050 += 1 };
  s1 -> s1 [59, 65535] { R1050 += 1 };
  s2 -> s1 [0, 57] { R1050 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1050 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R1050 += 1 };
  s2 -> s1 [59, 65535] { R1050 += 1 };
  s3 -> s3 [0, 65535] { R1050 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R1052 += 1 };
  s0 -> s0 [0, 65535] { R1051 += 1, R1052 += 1 };
  s0 -> s2 [0, 65535] { R1052 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R1052 += 1 };
  s0 -> s1 [66, 65535] { R1052 += 1 };
  s1 -> s1 [0, 64] { R1052 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1052 += 1 };
  s1 -> s1 [66, 65535] { R1052 += 1 };
  s2 -> s1 [0, 64] { R1052 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1052 += 1, R8 += 1 };
  s2 -> s3 [65, 65] { R1052 += 1 };
  s2 -> s1 [66, 65535] { R1052 += 1 };
  s3 -> s3 [0, 65535] { R1052 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R1054 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R1053 += 1, R1054 += 1 };
  s0 -> s2 [0, 65535] { R1054 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R1054 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R1054 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1054 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R1054 += 1 };
  s2 -> s1 [0, 90] { R1054 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1054 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R1054 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R1054 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R1054 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1054 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R1055 += 1, R1056 += 1 };
  s0 -> s1 [0, 65535] { R1056 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R1056 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1056 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R1056 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1056 += 1 };
  s2 -> s2 [0, 65535] { R1056 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1056 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R1058 += 1, R1008 += 1 };
  s0 -> s2 [0, 65535] { R1058 += 1, R1007 += 1, R1008 += 1 };
  s0 -> s0 [0, 65535] { R1057 += 1, R1058 += 1 };
  s0 -> s1 [66, 65535] { R1058 += 1, R1008 += 1 };
  s1 -> s1 [0, 64] { R1058 += 1, R1008 += 1 };
  s1 -> s1 [0, 65535] { R1058 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1058 += 1, R1008 += 1 };
  s2 -> s1 [0, 64] { R1058 += 1, R1008 += 1 };
  s2 -> s2 [0, 65535] { R1058 += 1, R1007 += 1, R1008 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1058 += 1, R1008 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1059 += 1, R1060 += 1 };
  s0 -> s1 [0, 65535] { R1060 += 1, R1009 += 1, R1010 += 1 };
  s0 -> s2 [0, 65535] { R1060 += 1, R1010 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R1060 += 1, R1009 += 1, R1010 += 1 };
  s1 -> s2 [0, 65535] { R1060 += 1, R1010 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1060 += 1, R1010 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1060 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1060 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R1062 += 1, R1012 += 1 };
  s0 -> s0 [0, 65535] { R1061 += 1, R1062 += 1 };
  s0 -> s2 [0, 65535] { R1062 += 1, R1011 += 1, R1012 += 1 };
  s0 -> s3 [87, 87] { R1062 += 1, R1012 += 1 };
  s0 -> s1 [88, 65535] { R1062 += 1, R1012 += 1 };
  s1 -> s1 [0, 65] { R1062 += 1, R1012 += 1 };
  s1 -> s3 [87, 87] { R1062 += 1, R1012 += 1 };
  s1 -> s1 [88, 65535] { R1062 += 1, R1012 += 1 };
  s2 -> s1 [0, 65] { R1062 += 1, R1012 += 1 };
  s2 -> s2 [0, 65535] { R1062 += 1, R1011 += 1, R1012 += 1 };
  s2 -> s3 [87, 87] { R1062 += 1, R1012 += 1 };
  s2 -> s1 [88, 65535] { R1062 += 1, R1012 += 1 };
  s3 -> s3 [0, 65] { R1062 += 1, R1012 += 1 };
  s3 -> s3 [0, 65535] { R1062 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [87, 65535] { R1062 += 1, R1012 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1063 += 1, R1064 += 1 };
  s0 -> s1 [0, 65535] { R1064 += 1, R1014 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R1064 += 1, R1013 += 1, R1014 += 1 };
  s1 -> s1 [0, 65535] { R1064 += 1, R1014 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1064 += 1 };
  s2 -> s1 [0, 65535] { R1064 += 1, R1014 += 1, R26 += 1 };
  s2 -> s2 [0, 65535] { R1064 += 1, R1013 += 1, R1014 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1064 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R1066 += 1, R1016 += 1 };
  s0 -> s2 [0, 65535] { R1066 += 1, R1016 += 1, R28 += 1 };
  s0 -> s3 [0, 65535] { R1066 += 1, R1015 += 1, R1016 += 1 };
  s0 -> s0 [0, 65535] { R1065 += 1, R1066 += 1 };
  s0 -> s1 [88, 65535] { R1066 += 1, R1016 += 1 };
  s1 -> s1 [0, 86] { R1066 += 1, R1016 += 1 };
  s1 -> s1 [0, 65535] { R1066 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R1066 += 1, R1016 += 1 };
  s2 -> s1 [0, 86] { R1066 += 1, R1016 += 1 };
  s2 -> s5 [0, 65535] { R1066 += 1 };
  s2 -> s2 [0, 65535] { R1066 += 1, R1016 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R1066 += 1, R1016 += 1 };
  s3 -> s1 [0, 86] { R1066 += 1, R1016 += 1 };
  s3 -> s2 [0, 65535] { R1066 += 1, R1016 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R1066 += 1, R1015 += 1, R1016 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R1066 += 1, R1016 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1066 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R1068 += 1, R1018 += 1, R900 += 1 };
  s0 -> s2 [0, 65535] { R1068 += 1, R1017 += 1, R1018 += 1 };
  s0 -> s0 [0, 65535] { R1067 += 1, R1068 += 1 };
  s0 -> s1 [0, 65535] { R1068 += 1, R1018 += 1 };
  s0 -> s1 [88, 65535] { R1068 += 1, R1018 += 1, R900 += 1 };
  s1 -> s1 [0, 86] { R1068 += 1, R1018 += 1, R900 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1068 += 1, R1018 += 1 };
  s1 -> s4 [0, 65535] { R1068 += 1 };
  s1 -> s1 [88, 65535] { R1068 += 1, R1018 += 1, R900 += 1 };
  s2 -> s1 [0, 86] { R1068 += 1, R1018 += 1, R900 += 1 };
  s2 -> s2 [0, 65535] { R1068 += 1, R1017 += 1, R1018 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1068 += 1, R1018 += 1 };
  s2 -> s1 [88, 65535] { R1068 += 1, R1018 += 1, R900 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1068 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1070 += 1, R1020 += 1, R905 += 1, R906 += 1 };
  s0 -> s2 [0, 65535] { R1070 += 1, R1019 += 1, R1020 += 1 };
  s0 -> s0 [0, 65535] { R1069 += 1, R1070 += 1 };
  s0 -> s3 [0, 65535] { R1070 += 1, R1020 += 1, R904 += 1, R905 += 1 };
  s1 -> s6 [0, 65535] { R1070 += 1, R1020 += 1 };
  s1 -> s1 [0, 65535] { R1070 += 1, R1020 += 1, R905 += 1, R906 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1070 += 1 };
  s2 -> s1 [0, 65535] { R1070 += 1, R1020 += 1, R905 += 1, R906 += 1 };
  s2 -> s2 [0, 65535] { R1070 += 1, R1019 += 1, R1020 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1070 += 1, R1020 += 1, R904 += 1, R905 += 1 };
  s3 -> s1 [0, 65535] { R1070 += 1, R1020 += 1, R905 += 1, R906 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1070 += 1, R1020 += 1, R904 += 1, R905 += 1 };
  s3 -> s5 [0, 65535] { R1070 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1070 += 1 };
  s6 -> s6 [0, 65535] { R1070 += 1, R1020 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1071 += 1, R1072 += 1 };
  s0 -> s1 [0, 65535] { R1072 += 1, R1022 += 1 };
  s0 -> s2 [0, 65535] { R1072 += 1, R1021 += 1, R1022 += 1 };
  s1 -> s4 [0, 65535] { R1072 += 1 };
  s1 -> s1 [0, 65535] { R1072 += 1, R1022 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1072 += 1, R1022 += 1 };
  s2 -> s2 [0, 65535] { R1072 += 1, R1021 += 1, R1022 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1072 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R1073 += 1, R1074 += 1 };
  s0 -> s1 [0, 65535] { R1074 += 1, R1024 += 1 };
  s0 -> s2 [0, 65535] { R1074 += 1, R1024 += 1, R1005 += 1, R1006 += 1 };
  s0 -> s3 [0, 65535] { R1074 += 1, R1023 += 1, R1024 += 1 };
  s1 -> s1 [0, 65535] { R1074 += 1, R1024 += 1 };
  s1 -> s5 [0, 65535] { R1074 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1074 += 1, R1024 += 1 };
  s2 -> s5 [0, 65535] { R1074 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1074 += 1, R1024 += 1, R1005 += 1, R1006 += 1 };
  s3 -> s1 [0, 65535] { R1074 += 1, R1024 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1074 += 1, R1024 += 1, R1005 += 1, R1006 += 1 };
  s3 -> s3 [0, 65535] { R1074 += 1, R1023 += 1, R1024 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1074 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1076 += 1, R1026 += 1 };
  s0 -> s2 [0, 65535] { R1076 += 1, R1025 += 1, R1026 += 1 };
  s0 -> s0 [0, 65535] { R1075 += 1, R1076 += 1 };
  s1 -> s4 [0, 65535] { R1076 += 1 };
  s1 -> s1 [0, 65535] { R1076 += 1, R1026 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1076 += 1, R1026 += 1 };
  s2 -> s2 [0, 65535] { R1076 += 1, R1025 += 1, R1026 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1076 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1078 += 1, R1027 += 1, R1028 += 1 };
  s0 -> s0 [0, 65535] { R1077 += 1, R1078 += 1 };
  s0 -> s2 [0, 65535] { R1078 += 1, R1028 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R1078 += 1, R1027 += 1, R1028 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1078 += 1, R1028 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R1078 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1078 += 1, R1028 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R1078 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R1080 += 1, R1030 += 1 };
  s0 -> s0 [0, 65535] { R1079 += 1, R1080 += 1 };
  s0 -> s2 [0, 65535] { R1080 += 1, R1029 += 1, R1030 += 1 };
  s0 -> s3 [65, 65] { R1080 += 1, R1030 += 1 };
  s0 -> s4 [65, 65] { R1080 += 1, R1030 += 1 };
  s0 -> s1 [88, 65535] { R1080 += 1, R1030 += 1 };
  s1 -> s1 [0, 64] { R1080 += 1, R1030 += 1 };
  s1 -> s1 [0, 65535] { R1080 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1080 += 1, R1030 += 1 };
  s1 -> s4 [65, 65] { R1080 += 1, R1030 += 1 };
  s1 -> s1 [88, 65535] { R1080 += 1, R1030 += 1 };
  s2 -> s1 [0, 64] { R1080 += 1, R1030 += 1 };
  s2 -> s2 [0, 65535] { R1080 += 1, R1029 += 1, R1030 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1080 += 1, R1030 += 1 };
  s2 -> s4 [65, 65] { R1080 += 1, R1030 += 1 };
  s2 -> s1 [88, 65535] { R1080 += 1, R1030 += 1 };
  s3 -> s3 [0, 65] { R1080 += 1, R1030 += 1 };
  s3 -> s3 [0, 65535] { R1080 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [88, 65535] { R1080 += 1, R1030 += 1 };
  s4 -> s4 [0, 65535] { R1080 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R1082 += 1, R1032 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R1081 += 1, R1082 += 1 };
  s0 -> s2 [0, 65535] { R1082 += 1, R1031 += 1, R1032 += 1 };
  s0 -> s3 [65, 65] { R1082 += 1, R1032 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R1082 += 1, R1032 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R1082 += 1, R1032 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R1082 += 1, R1032 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1082 += 1 };
  s1 -> s3 [65, 65] { R1082 += 1, R1032 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R1082 += 1, R1032 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R1082 += 1, R1032 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R1082 += 1, R1032 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1082 += 1, R1031 += 1, R1032 += 1 };
  s2 -> s3 [65, 65] { R1082 += 1, R1032 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R1082 += 1, R1032 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R1082 += 1, R1032 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R1082 += 1, R1032 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1082 += 1 };
  s4 -> s4 [0, 65535] { R1082 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1082 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R1084 += 1, R1034 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R1083 += 1, R1084 += 1 };
  s0 -> s2 [0, 65535] { R1084 += 1, R1033 += 1, R1034 += 1 };
  s0 -> s3 [65, 65] { R1084 += 1, R1034 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R1084 += 1, R1034 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R1084 += 1, R1034 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R1084 += 1, R1034 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R1084 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1084 += 1, R1034 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R1084 += 1, R1034 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R1084 += 1, R1034 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R1084 += 1, R1034 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1084 += 1, R1033 += 1, R1034 += 1 };
  s2 -> s3 [65, 65] { R1084 += 1, R1034 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R1084 += 1, R1034 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R1084 += 1, R1034 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1084 += 1 };
  s3 -> s3 [0, 65535] { R1084 += 1, R1034 += 1, R27 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1084 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1084 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R1086 += 1, R1036 += 1, R898 += 1 };
  s0 -> s2 [0, 64] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s0 -> s3 [0, 65535] { R1086 += 1, R1035 += 1, R1036 += 1 };
  s0 -> s0 [0, 65535] { R1085 += 1, R1086 += 1 };
  s0 -> s4 [65, 65] { R1086 += 1, R1036 += 1, R898 += 1 };
  s0 -> s5 [65, 65] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s0 -> s6 [65, 65] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s0 -> s7 [65, 65] { R1086 += 1, R1036 += 1, R898 += 1 };
  s0 -> s1 [66, 86] { R1086 += 1, R1036 += 1, R898 += 1 };
  s0 -> s2 [66, 65535] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s0 -> s1 [88, 65535] { R1086 += 1, R1036 += 1, R898 += 1 };
  s1 -> s1 [0, 64] { R1086 += 1, R1036 += 1, R898 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R1086 += 1 };
  s1 -> s4 [65, 65] { R1086 += 1, R1036 += 1 };
  s1 -> s7 [65, 65] { R1086 += 1, R1036 += 1 };
  s1 -> s1 [66, 86] { R1086 += 1, R1036 += 1, R898 += 1 };
  s1 -> s1 [66, 65535] { R1086 += 1, R1036 += 1 };
  s1 -> s1 [88, 65535] { R1086 += 1, R1036 += 1, R898 += 1 };
  s2 -> s1 [0, 64] { R1086 += 1, R1036 += 1, R898 += 1 };
  s2 -> s2 [0, 64] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s2 -> s4 [65, 65] { R1086 += 1, R1036 += 1, R898 += 1 };
  s2 -> s5 [65, 65] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s2 -> s6 [65, 65] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s2 -> s7 [65, 65] { R1086 += 1, R1036 += 1, R898 += 1 };
  s2 -> s1 [66, 86] { R1086 += 1, R1036 += 1, R898 += 1 };
  s2 -> s2 [66, 65535] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s2 -> s1 [88, 65535] { R1086 += 1, R1036 += 1, R898 += 1 };
  s3 -> s1 [0, 64] { R1086 += 1, R1036 += 1, R898 += 1 };
  s3 -> s2 [0, 64] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535] { R1086 += 1, R1035 += 1, R1036 += 1 };
  s3 -> s4 [65, 65] { R1086 += 1, R1036 += 1, R898 += 1 };
  s3 -> s5 [65, 65] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s3 -> s6 [65, 65] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s3 -> s7 [65, 65] { R1086 += 1, R1036 += 1, R898 += 1 };
  s3 -> s1 [66, 86] { R1086 += 1, R1036 += 1, R898 += 1 };
  s3 -> s2 [66, 65535] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s3 -> s1 [88, 65535] { R1086 += 1, R1036 += 1, R898 += 1 };
  s4 -> s4 [0, 65535] { R1086 += 1 };
  s4 -> s9 [0, 65535];
  s5 -> s7 [0, 86] { R1086 += 1, R1036 += 1, R898 += 1 };
  s5 -> s5 [0, 65535] { R1086 += 1, R1036 += 1, R897 += 1, R898 += 1 };
  s5 -> s7 [88, 65535] { R1086 += 1, R1036 += 1, R898 += 1 };
  s7 -> s7 [0, 86] { R1086 += 1, R1036 += 1, R898 += 1 };
  s7 -> s8 [0, 65535] { R1086 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s7 [0, 65535] { R1086 += 1, R1036 += 1 };
  s7 -> s7 [88, 65535] { R1086 += 1, R1036 += 1, R898 += 1 };
  s8 -> s8 [0, 65535] { R1086 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s4, s8, s9, s1, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s0 -> s2 [0, 65535] { R1088 += 1, R1037 += 1, R1038 += 1 };
  s0 -> s0 [0, 65535] { R1087 += 1, R1088 += 1 };
  s0 -> s3 [65, 65] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s0 -> s4 [65, 65] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s0 -> s1 [66, 65535] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [0, 64] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1088 += 1 };
  s1 -> s3 [65, 65] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s1 -> s4 [65, 65] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s1 -> s1 [66, 65535] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s2 -> s1 [0, 64] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s2 -> s2 [0, 65535] { R1088 += 1, R1037 += 1, R1038 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s2 -> s4 [65, 65] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s2 -> s1 [66, 65535] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s3 -> s6 [0, 65535] { R1088 += 1 };
  s3 -> s3 [0, 65535] { R1088 += 1, R1038 += 1, R901 += 1, R902 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1088 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1088 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R1090 += 1, R1040 += 1 };
  s0 -> s2 [0, 65535] { R1090 += 1, R1039 += 1, R1040 += 1 };
  s0 -> s0 [0, 65535] { R1089 += 1, R1090 += 1 };
  s0 -> s3 [65, 65] { R1090 += 1, R1040 += 1 };
  s0 -> s4 [65, 65] { R1090 += 1, R1040 += 1 };
  s0 -> s1 [66, 65535] { R1090 += 1, R1040 += 1 };
  s1 -> s1 [0, 64] { R1090 += 1, R1040 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1090 += 1 };
  s1 -> s3 [65, 65] { R1090 += 1, R1040 += 1 };
  s1 -> s4 [65, 65] { R1090 += 1, R1040 += 1 };
  s1 -> s1 [66, 65535] { R1090 += 1, R1040 += 1 };
  s2 -> s1 [0, 64] { R1090 += 1, R1040 += 1 };
  s2 -> s2 [0, 65535] { R1090 += 1, R1039 += 1, R1040 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1090 += 1, R1040 += 1 };
  s2 -> s4 [65, 65] { R1090 += 1, R1040 += 1 };
  s2 -> s1 [66, 65535] { R1090 += 1, R1040 += 1 };
  s3 -> s3 [0, 65535] { R1090 += 1, R1040 += 1 };
  s3 -> s6 [0, 65535] { R1090 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1090 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1090 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s2 [0, 64] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s3 [0, 65535] { R1092 += 1, R1041 += 1, R1042 += 1 };
  s0 -> s0 [0, 65535] { R1091 += 1, R1092 += 1 };
  s0 -> s4 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s5 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s6 [65, 65] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s7 [65, 65] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s0 -> s1 [66, 65535] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s0 -> s2 [66, 65535] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s1 -> s1 [0, 64] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s1 -> s1 [0, 65535] { R1092 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s1 -> s5 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s1 -> s1 [66, 65535] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s1 [0, 64] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s2 [0, 64] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s4 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s5 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s6 [65, 65] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s7 [65, 65] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s2 -> s1 [66, 65535] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s2 -> s2 [66, 65535] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s1 [0, 64] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s2 [0, 64] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s3 [0, 65535] { R1092 += 1, R1041 += 1, R1042 += 1 };
  s3 -> s4 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s5 [65, 65] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s6 [65, 65] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s7 [65, 65] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s3 -> s1 [66, 65535] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s3 -> s2 [66, 65535] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s4 -> s4 [0, 65535] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s9 [0, 65535] { R1092 += 1 };
  s5 -> s5 [0, 65535] { R1092 += 1 };
  s5 -> s8 [0, 65535];
  s7 -> s4 [0, 65535] { R1092 += 1, R1042 += 1, R1002 += 1, R1003 += 1 };
  s7 -> s7 [0, 65535] { R1092 += 1, R1042 += 1, R1001 += 1, R1002 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1092 += 1 };
  accepting s4, s8, s5, s9, s1;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R1094 += 1, R1044 += 1 };
  s0 -> s2 [0, 65535] { R1094 += 1, R1043 += 1, R1044 += 1 };
  s0 -> s0 [0, 65535] { R1093 += 1, R1094 += 1 };
  s0 -> s3 [65, 65] { R1094 += 1, R1044 += 1 };
  s0 -> s4 [65, 65] { R1094 += 1, R1044 += 1 };
  s0 -> s1 [66, 65535] { R1094 += 1, R1044 += 1 };
  s1 -> s1 [0, 64] { R1094 += 1, R1044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1094 += 1 };
  s1 -> s3 [65, 65] { R1094 += 1, R1044 += 1 };
  s1 -> s4 [65, 65] { R1094 += 1, R1044 += 1 };
  s1 -> s1 [66, 65535] { R1094 += 1, R1044 += 1 };
  s2 -> s1 [0, 64] { R1094 += 1, R1044 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1094 += 1, R1043 += 1, R1044 += 1 };
  s2 -> s3 [65, 65] { R1094 += 1, R1044 += 1 };
  s2 -> s4 [65, 65] { R1094 += 1, R1044 += 1 };
  s2 -> s1 [66, 65535] { R1094 += 1, R1044 += 1 };
  s3 -> s3 [0, 65535] { R1094 += 1, R1044 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1094 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1094 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1094 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1026 && R2 = R1094 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R1007 = 0 && R1008 = R1026 && R1009 = 0 && R1010 = R1026 && R1011 = 0 && R1012 = R1026 && R1013 = 0 && R1014 = R1026 && R1015 = 0 && R1016 = R1026 && R1017 = 0 && R1018 = R1026 && R1019 = 0 && R1020 = R1026 && R1021 = 0 && R1022 = R1026 && R1023 = 0 && R1024 = R1026 && R1025 = 0 && R1035 = 0 && R1036 = 0 && R1041 = 0 && R1042 = 0 && R1045 = 10 && R1046 = R1094 && R1047 = 10 && R1048 = R1094 && R1049 = 10 && R1050 = R1094 && R1051 = 10 && R1052 = R1094 && R1053 = 10 && R1054 = R1094 && R1055 = 10 && R1056 = R1094 && R1057 = 10 && R1058 = R1094 && R1059 = 10 && R1060 = R1094 && R1061 = 10 && R1062 = R1094 && R1063 = 10 && R1064 = R1094 && R1065 = 10 && R1066 = R1094 && R1067 = 10 && R1068 = R1094 && R1069 = 10 && R1070 = R1094 && R1071 = 10 && R1072 = R1094 && R1073 = 10 && R1074 = R1094 && R1075 = 10 && R1076 = R1094 && R1077 = 10 && R1078 = R1094 && R1079 = 10 && R1080 = R1094 && R1081 = 10 && R1082 = R1094 && R1083 = 10 && R1084 = R1094 && R1085 = 10 && R1086 = R1094 && R1087 = 10 && R1088 = R1094 && R1089 = 10 && R1090 = R1094 && R1091 = 10 && R1092 = R1094 && R1093 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R1026 && 9 < R1094 && (R14 = 0 || (R1027 = 0 && R1028 = 0)) && (R14 = 0 || (R1029 = 0 && R1030 = 0)) && (R14 = 0 || (R1031 = 0 && R1032 = 0)) && (R14 = 0 || (R1033 = 0 && R1034 = 0)) && (R14 = 0 || (R1037 = 0 && R1038 = 0)) && (R14 = 0 || (R1039 = 0 && R1040 = 0)) && (R14 = 0 || (R1043 = 0 && R1044 = 0)) && (R906 + R903 = 0 || (R899 + R897 = 0 && R900 + R898 = 0)) && (R906 + R903 = 0 || (R904 + R901 = 0 && R905 + R902 = 0)) && (R1006 + R1003 = 0 || (R1004 + R1001 = 0 && R1005 + R1002 = 0));
// End of Parikh automata intersection problem
