// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R1769, R1770, R18, R2, R3, R3509, R3510, R4379, R4380, R4381, R4382, R4671, R4672, R4673, R4674, R4675, R4676, R4677, R4678, R4679, R4680, R4681, R4682, R4683, R4684, R4685, R4686, R4687, R4688, R4689, R4690, R4691, R4692, R4693, R4694, R4695, R4696, R4697, R4698, R4699, R4700, R4701, R4702, R4703, R4704, R4705, R4706, R4707, R4708, R4709, R4710, R4711, R4712, R4713, R4714, R4715, R4716, R4717, R4718, R4719, R4720, R4721, R4722, R4723, R4724, R4725, R4726, R4727, R4728, R4729, R4730, R4731, R4732, R4733, R4734, R4735, R4736, R4737, R4738, R4739, R4740, R4741, R4742, R4743, R4744, R4745, R4746, R4747, R4748, R4749, R4750, R4751, R4752, R4753, R4754, R4755, R4756, R4757, R4758, R4759, R4760, R4761, R4762, R4763, R4764, R4765, R4766, R4767, R4768, R4769, R4770, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R4722 += 1 };
  s0 -> s0 [0, 65535] { R4721 += 1, R4722 += 1 };
  s0 -> s1 [45, 45] { R4722 += 1 };
  s0 -> s2 [46, 46] { R4722 += 1 };
  s0 -> s1 [48, 62] { R4722 += 1 };
  s0 -> s3 [65, 65] { R4722 += 1 };
  s0 -> s1 [66, 65535] { R4722 += 1 };
  s1 -> s1 [0, 43] { R4722 += 1 };
  s1 -> s1 [45, 45] { R4722 += 1 };
  s1 -> s2 [46, 46] { R4722 += 1 };
  s1 -> s1 [48, 62] { R4722 += 1 };
  s1 -> s3 [65, 65] { R4722 += 1 };
  s1 -> s1 [66, 65535] { R4722 += 1 };
  s2 -> s1 [0, 43] { R4722 += 1 };
  s2 -> s1 [45, 45] { R4722 += 1 };
  s2 -> s2 [46, 46] { R4722 += 1 };
  s2 -> s1 [48, 62] { R4722 += 1 };
  s2 -> s3 [65, 65] { R4722 += 1 };
  s2 -> s1 [66, 114] { R4722 += 1 };
  s2 -> s8 [115, 115] { R4722 += 1 };
  s2 -> s1 [116, 65535] { R4722 += 1 };
  s3 -> s3 [0, 43] { R4722 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R4722 += 1 };
  s3 -> s4 [46, 46] { R4722 += 1 };
  s3 -> s3 [48, 62] { R4722 += 1 };
  s3 -> s3 [65, 65535] { R4722 += 1 };
  s4 -> s3 [0, 43] { R4722 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R4722 += 1 };
  s4 -> s4 [46, 46] { R4722 += 1 };
  s4 -> s3 [48, 62] { R4722 += 1 };
  s4 -> s3 [65, 114] { R4722 += 1 };
  s4 -> s5 [115, 115] { R4722 += 1 };
  s4 -> s3 [116, 65535] { R4722 += 1 };
  s5 -> s3 [0, 43] { R4722 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R4722 += 1 };
  s5 -> s4 [46, 46] { R4722 += 1 };
  s5 -> s3 [48, 62] { R4722 += 1 };
  s5 -> s3 [65, 110] { R4722 += 1 };
  s5 -> s6 [111, 111] { R4722 += 1 };
  s5 -> s3 [112, 65535] { R4722 += 1 };
  s6 -> s3 [0, 43] { R4722 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R4722 += 1 };
  s6 -> s4 [46, 46] { R4722 += 1 };
  s6 -> s3 [48, 62] { R4722 += 1 };
  s6 -> s3 [65, 98] { R4722 += 1 };
  s6 -> s7 [99, 99] { R4722 += 1 };
  s6 -> s3 [100, 65535] { R4722 += 1 };
  s7 -> s3 [0, 43] { R4722 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R4722 += 1 };
  s7 -> s4 [46, 46] { R4722 += 1 };
  s7 -> s3 [48, 62] { R4722 += 1 };
  s7 -> s3 [65, 106] { R4722 += 1 };
  s7 -> s3 [108, 65535] { R4722 += 1 };
  s8 -> s1 [0, 43] { R4722 += 1 };
  s8 -> s1 [45, 45] { R4722 += 1 };
  s8 -> s2 [46, 46] { R4722 += 1 };
  s8 -> s1 [48, 62] { R4722 += 1 };
  s8 -> s3 [65, 65] { R4722 += 1 };
  s8 -> s1 [66, 110] { R4722 += 1 };
  s8 -> s9 [111, 111] { R4722 += 1 };
  s8 -> s1 [112, 65535] { R4722 += 1 };
  s9 -> s1 [0, 43] { R4722 += 1 };
  s9 -> s1 [45, 45] { R4722 += 1 };
  s9 -> s2 [46, 46] { R4722 += 1 };
  s9 -> s1 [48, 62] { R4722 += 1 };
  s9 -> s3 [65, 65] { R4722 += 1 };
  s9 -> s1 [66, 98] { R4722 += 1 };
  s9 -> s10 [99, 99] { R4722 += 1 };
  s9 -> s1 [100, 65535] { R4722 += 1 };
  s10 -> s1 [0, 43] { R4722 += 1 };
  s10 -> s1 [45, 45] { R4722 += 1 };
  s10 -> s2 [46, 46] { R4722 += 1 };
  s10 -> s1 [48, 62] { R4722 += 1 };
  s10 -> s3 [65, 65] { R4722 += 1 };
  s10 -> s1 [66, 106] { R4722 += 1 };
  s10 -> s1 [108, 65535] { R4722 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R4724 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R4723 += 1, R4724 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R4724 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R4726 += 1 };
  s0 -> s2 [0, 65535] { R4726 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R4725 += 1, R4726 += 1 };
  s0 -> s3 [58, 58] { R4726 += 1 };
  s0 -> s1 [59, 65535] { R4726 += 1 };
  s1 -> s1 [0, 57] { R4726 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R4726 += 1 };
  s1 -> s1 [59, 65535] { R4726 += 1 };
  s2 -> s1 [0, 57] { R4726 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4726 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R4726 += 1 };
  s2 -> s1 [59, 65535] { R4726 += 1 };
  s3 -> s3 [0, 65535] { R4726 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R4728 += 1 };
  s0 -> s2 [0, 65535] { R4728 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R4727 += 1, R4728 += 1 };
  s0 -> s3 [65, 65] { R4728 += 1 };
  s0 -> s1 [66, 65535] { R4728 += 1 };
  s1 -> s1 [0, 64] { R4728 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R4728 += 1 };
  s1 -> s1 [66, 65535] { R4728 += 1 };
  s2 -> s1 [0, 64] { R4728 += 1 };
  s2 -> s2 [0, 65535] { R4728 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R4728 += 1 };
  s2 -> s1 [66, 65535] { R4728 += 1 };
  s3 -> s3 [0, 65535] { R4728 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R4730 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R4730 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R4729 += 1, R4730 += 1 };
  s0 -> s3 [91, 91] { R4730 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R4730 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R4730 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R4730 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R4730 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R4730 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R4730 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R4730 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R4730 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4730 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R4732 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R4731 += 1, R4732 += 1 };
  s0 -> s2 [0, 65535] { R4732 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R4732 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4732 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R4732 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4732 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R4732 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R4734 += 1, R4684 += 1 };
  s0 -> s2 [0, 65535] { R4734 += 1, R4683 += 1, R4684 += 1 };
  s0 -> s0 [0, 65535] { R4733 += 1, R4734 += 1 };
  s0 -> s1 [66, 65535] { R4734 += 1, R4684 += 1 };
  s1 -> s1 [0, 64] { R4734 += 1, R4684 += 1 };
  s1 -> s1 [0, 65535] { R4734 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R4734 += 1, R4684 += 1 };
  s2 -> s1 [0, 64] { R4734 += 1, R4684 += 1 };
  s2 -> s2 [0, 65535] { R4734 += 1, R4683 += 1, R4684 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R4734 += 1, R4684 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R4736 += 1, R4685 += 1, R4686 += 1 };
  s0 -> s2 [0, 65535] { R4736 += 1, R4686 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R4735 += 1, R4736 += 1 };
  s1 -> s1 [0, 65535] { R4736 += 1, R4685 += 1, R4686 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R4736 += 1, R4686 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R4736 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R4736 += 1, R4686 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R4736 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R4738 += 1, R4688 += 1 };
  s0 -> s0 [0, 65535] { R4737 += 1, R4738 += 1 };
  s0 -> s2 [0, 65535] { R4738 += 1, R4687 += 1, R4688 += 1 };
  s0 -> s1 [87, 65535] { R4738 += 1, R4688 += 1 };
  s1 -> s1 [0, 65] { R4738 += 1, R4688 += 1 };
  s1 -> s1 [0, 65535] { R4738 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [87, 65535] { R4738 += 1, R4688 += 1 };
  s2 -> s1 [0, 65] { R4738 += 1, R4688 += 1 };
  s2 -> s2 [0, 65535] { R4738 += 1, R4687 += 1, R4688 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [87, 65535] { R4738 += 1, R4688 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R4739 += 1, R4740 += 1 };
  s0 -> s1 [0, 65535] { R4740 += 1, R4689 += 1, R4690 += 1 };
  s0 -> s2 [0, 65535] { R4740 += 1, R4690 += 1, R1770 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4740 += 1, R4689 += 1, R4690 += 1 };
  s1 -> s2 [0, 65535] { R4740 += 1, R4690 += 1, R1770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R4740 += 1 };
  s2 -> s2 [0, 65535] { R4740 += 1, R4690 += 1, R1770 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4740 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R4742 += 1, R4692 += 1 };
  s0 -> s2 [0, 65535] { R4742 += 1, R4691 += 1, R4692 += 1 };
  s0 -> s0 [0, 65535] { R4741 += 1, R4742 += 1 };
  s0 -> s1 [88, 65535] { R4742 += 1, R4692 += 1 };
  s1 -> s1 [0, 86] { R4742 += 1, R4692 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4742 += 1 };
  s1 -> s1 [88, 65535] { R4742 += 1, R4692 += 1 };
  s2 -> s1 [0, 86] { R4742 += 1, R4692 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4742 += 1, R4691 += 1, R4692 += 1 };
  s2 -> s1 [88, 65535] { R4742 += 1, R4692 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R4744 += 1, R4694 += 1, R4382 += 1 };
  s0 -> s0 [0, 65535] { R4743 += 1, R4744 += 1 };
  s0 -> s1 [0, 65535] { R4744 += 1, R4694 += 1 };
  s0 -> s2 [0, 65535] { R4744 += 1, R4693 += 1, R4694 += 1 };
  s0 -> s1 [88, 65535] { R4744 += 1, R4694 += 1, R4382 += 1 };
  s1 -> s1 [0, 86] { R4744 += 1, R4694 += 1, R4382 += 1 };
  s1 -> s4 [0, 65535] { R4744 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4744 += 1, R4694 += 1 };
  s1 -> s1 [88, 65535] { R4744 += 1, R4694 += 1, R4382 += 1 };
  s2 -> s1 [0, 86] { R4744 += 1, R4694 += 1, R4382 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4744 += 1, R4694 += 1 };
  s2 -> s2 [0, 65535] { R4744 += 1, R4693 += 1, R4694 += 1 };
  s2 -> s1 [88, 65535] { R4744 += 1, R4694 += 1, R4382 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4744 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R4746 += 1, R4696 += 1 };
  s0 -> s2 [0, 65535] { R4746 += 1, R4696 += 1, R4675 += 1, R4676 += 1 };
  s0 -> s0 [0, 65535] { R4745 += 1, R4746 += 1 };
  s0 -> s3 [0, 65535] { R4746 += 1, R4695 += 1, R4696 += 1 };
  s1 -> s1 [0, 65535] { R4746 += 1, R4696 += 1 };
  s1 -> s5 [0, 65535] { R4746 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4746 += 1, R4696 += 1 };
  s2 -> s5 [0, 65535] { R4746 += 1 };
  s2 -> s2 [0, 65535] { R4746 += 1, R4696 += 1, R4675 += 1, R4676 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4746 += 1, R4696 += 1 };
  s3 -> s2 [0, 65535] { R4746 += 1, R4696 += 1, R4675 += 1, R4676 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R4746 += 1, R4695 += 1, R4696 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4746 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R4747 += 1, R4748 += 1 };
  s0 -> s1 [0, 65535] { R4748 += 1, R4698 += 1 };
  s0 -> s2 [0, 65535] { R4748 += 1, R4697 += 1, R4698 += 1 };
  s1 -> s4 [0, 65535] { R4748 += 1 };
  s1 -> s1 [0, 65535] { R4748 += 1, R4698 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4748 += 1, R4698 += 1 };
  s2 -> s2 [0, 65535] { R4748 += 1, R4697 += 1, R4698 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4748 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R4750 += 1, R4700 += 1, R4681 += 1, R4682 += 1 };
  s0 -> s2 [0, 65535] { R4750 += 1, R4700 += 1, R4680 += 1, R4681 += 1 };
  s0 -> s3 [0, 65535] { R4750 += 1, R4699 += 1, R4700 += 1 };
  s0 -> s0 [0, 65535] { R4749 += 1, R4750 += 1 };
  s1 -> s1 [0, 65535] { R4750 += 1, R4700 += 1, R4681 += 1, R4682 += 1 };
  s1 -> s6 [0, 65535] { R4750 += 1, R4700 += 1 };
  s1 -> s5 [0, 65535] { R4750 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R4750 += 1, R4700 += 1, R4681 += 1, R4682 += 1 };
  s2 -> s2 [0, 65535] { R4750 += 1, R4700 += 1, R4680 += 1, R4681 += 1 };
  s2 -> s5 [0, 65535] { R4750 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R4750 += 1, R4700 += 1, R4681 += 1, R4682 += 1 };
  s3 -> s2 [0, 65535] { R4750 += 1, R4700 += 1, R4680 += 1, R4681 += 1 };
  s3 -> s3 [0, 65535] { R4750 += 1, R4699 += 1, R4700 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R4750 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R4750 += 1, R4700 += 1 };
  s6 -> s5 [0, 65535] { R4750 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R4752 += 1, R4702 += 1 };
  s0 -> s0 [0, 65535] { R4751 += 1, R4752 += 1 };
  s0 -> s2 [0, 65535] { R4752 += 1, R4701 += 1, R4702 += 1 };
  s1 -> s1 [0, 65535] { R4752 += 1, R4702 += 1 };
  s1 -> s4 [0, 65535] { R4752 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R4752 += 1, R4702 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4752 += 1, R4701 += 1, R4702 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4752 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R4754 += 1, R4703 += 1, R4704 += 1 };
  s0 -> s0 [0, 65535] { R4753 += 1, R4754 += 1 };
  s0 -> s2 [0, 65535] { R4754 += 1, R4704 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R4754 += 1, R4703 += 1, R4704 += 1 };
  s1 -> s2 [0, 65535] { R4754 += 1, R4704 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R4754 += 1, R4704 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R4754 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R4754 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R4756 += 1, R4706 += 1 };
  s0 -> s0 [0, 65535] { R4755 += 1, R4756 += 1 };
  s0 -> s2 [0, 65535] { R4756 += 1, R4705 += 1, R4706 += 1 };
  s0 -> s3 [65, 65] { R4756 += 1, R4706 += 1 };
  s0 -> s4 [65, 65] { R4756 += 1, R4706 += 1 };
  s0 -> s5 [87, 87] { R4756 += 1, R4706 += 1 };
  s0 -> s1 [88, 65535] { R4756 += 1, R4706 += 1 };
  s1 -> s1 [0, 64] { R4756 += 1, R4706 += 1 };
  s1 -> s3 [65, 65] { R4756 += 1, R4706 += 1 };
  s1 -> s4 [65, 65] { R4756 += 1, R4706 += 1 };
  s1 -> s5 [87, 87] { R4756 += 1, R4706 += 1 };
  s1 -> s1 [88, 65535] { R4756 += 1, R4706 += 1 };
  s2 -> s1 [0, 64] { R4756 += 1, R4706 += 1 };
  s2 -> s2 [0, 65535] { R4756 += 1, R4705 += 1, R4706 += 1 };
  s2 -> s3 [65, 65] { R4756 += 1, R4706 += 1 };
  s2 -> s4 [65, 65] { R4756 += 1, R4706 += 1 };
  s2 -> s5 [87, 87] { R4756 += 1, R4706 += 1 };
  s2 -> s1 [88, 65535] { R4756 += 1, R4706 += 1 };
  s3 -> s3 [0, 65] { R4756 += 1, R4706 += 1 };
  s3 -> s7 [87, 87] { R4756 += 1, R4706 += 1 };
  s3 -> s3 [88, 65535] { R4756 += 1, R4706 += 1 };
  s5 -> s5 [0, 64] { R4756 += 1, R4706 += 1 };
  s5 -> s5 [0, 65535] { R4756 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R4756 += 1, R4706 += 1 };
  s5 -> s8 [65, 65] { R4756 += 1, R4706 += 1 };
  s5 -> s5 [87, 65535] { R4756 += 1, R4706 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65] { R4756 += 1, R4706 += 1 };
  s7 -> s7 [0, 65535] { R4756 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [87, 65535] { R4756 += 1, R4706 += 1 };
  s8 -> s8 [0, 65535] { R4756 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R4758 += 1, R4707 += 1, R4708 += 1 };
  s0 -> s0 [0, 65535] { R4757 += 1, R4758 += 1 };
  s0 -> s3 [65, 65] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s0 -> s1 [66, 65535] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s1 -> s1 [0, 65535] { R4758 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s1 -> s1 [66, 65535] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4758 += 1, R4707 += 1, R4708 += 1 };
  s2 -> s3 [65, 65] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s2 -> s1 [66, 65535] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R4758 += 1 };
  s4 -> s4 [0, 65535] { R4758 += 1, R4708 += 1, R1769 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R4758 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4758 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R4760 += 1, R4710 += 1 };
  s0 -> s2 [0, 64] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s0 -> s0 [0, 65535] { R4759 += 1, R4760 += 1 };
  s0 -> s3 [0, 65535] { R4760 += 1, R4709 += 1, R4710 += 1 };
  s0 -> s4 [65, 65] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s0 -> s5 [65, 65] { R4760 += 1, R4710 += 1 };
  s0 -> s6 [65, 65] { R4760 += 1, R4710 += 1 };
  s0 -> s7 [65, 65] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s0 -> s1 [66, 86] { R4760 += 1, R4710 += 1 };
  s0 -> s2 [66, 65535] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s0 -> s1 [88, 65535] { R4760 += 1, R4710 += 1 };
  s1 -> s1 [0, 64] { R4760 += 1, R4710 += 1 };
  s1 -> s1 [0, 65535] { R4760 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s5 [65, 65] { R4760 += 1, R4710 += 1 };
  s1 -> s6 [65, 65] { R4760 += 1, R4710 += 1 };
  s1 -> s1 [66, 86] { R4760 += 1, R4710 += 1 };
  s1 -> s1 [88, 65535] { R4760 += 1, R4710 += 1 };
  s2 -> s1 [0, 64] { R4760 += 1, R4710 += 1 };
  s2 -> s2 [0, 64] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s2 -> s4 [65, 65] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s2 -> s5 [65, 65] { R4760 += 1, R4710 += 1 };
  s2 -> s6 [65, 65] { R4760 += 1, R4710 += 1 };
  s2 -> s7 [65, 65] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s2 -> s1 [66, 86] { R4760 += 1, R4710 += 1 };
  s2 -> s2 [66, 65535] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s2 -> s1 [88, 65535] { R4760 += 1, R4710 += 1 };
  s3 -> s1 [0, 64] { R4760 += 1, R4710 += 1 };
  s3 -> s2 [0, 64] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s3 -> s3 [0, 65535] { R4760 += 1, R4709 += 1, R4710 += 1 };
  s3 -> s4 [65, 65] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s3 -> s5 [65, 65] { R4760 += 1, R4710 += 1 };
  s3 -> s6 [65, 65] { R4760 += 1, R4710 += 1 };
  s3 -> s7 [65, 65] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s3 -> s1 [66, 86] { R4760 += 1, R4710 += 1 };
  s3 -> s2 [66, 65535] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s3 -> s1 [88, 65535] { R4760 += 1, R4710 += 1 };
  s4 -> s6 [0, 86] { R4760 += 1, R4710 += 1 };
  s4 -> s4 [0, 65535] { R4760 += 1, R4710 += 1, R3509 += 1 };
  s4 -> s6 [88, 65535] { R4760 += 1, R4710 += 1 };
  s5 -> s5 [0, 65535] { R4760 += 1 };
  s5 -> s8 [0, 65535];
  s6 -> s6 [0, 86] { R4760 += 1, R4710 += 1 };
  s6 -> s6 [0, 65535] { R4760 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [88, 65535] { R4760 += 1, R4710 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s5, s6, s8;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [0, 64] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s0 -> s3 [0, 65535] { R4762 += 1, R4711 += 1, R4712 += 1 };
  s0 -> s0 [0, 65535] { R4761 += 1, R4762 += 1 };
  s0 -> s4 [65, 65] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s5 [65, 65] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s6 [65, 65] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s0 -> s7 [65, 65] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s0 -> s2 [66, 86] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s0 -> s1 [66, 65535] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s0 -> s2 [88, 65535] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s1 -> s1 [0, 64] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [0, 64] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s1 -> s4 [65, 65] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s5 [65, 65] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s6 [65, 65] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s1 -> s7 [65, 65] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s1 -> s2 [66, 86] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s1 -> s1 [66, 65535] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s1 -> s2 [88, 65535] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s2 -> s2 [0, 64] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R4762 += 1 };
  s2 -> s6 [65, 65] { R4762 += 1, R4712 += 1 };
  s2 -> s7 [65, 65] { R4762 += 1, R4712 += 1 };
  s2 -> s2 [66, 86] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s2 -> s2 [66, 65535] { R4762 += 1, R4712 += 1 };
  s2 -> s2 [88, 65535] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s3 -> s1 [0, 64] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [0, 64] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s3 -> s3 [0, 65535] { R4762 += 1, R4711 += 1, R4712 += 1 };
  s3 -> s4 [65, 65] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s5 [65, 65] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s6 [65, 65] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s3 -> s7 [65, 65] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s3 -> s2 [66, 86] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s3 -> s1 [66, 65535] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s3 -> s2 [88, 65535] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s4 -> s6 [0, 86] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s4 -> s4 [0, 65535] { R4762 += 1, R4712 += 1, R4379 += 1, R4380 += 1 };
  s4 -> s6 [88, 65535] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s6 -> s6 [0, 86] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R4762 += 1 };
  s6 -> s6 [0, 65535] { R4762 += 1, R4712 += 1 };
  s6 -> s6 [88, 65535] { R4762 += 1, R4712 += 1, R4380 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R4762 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R4762 += 1 };
  accepting s8, s2, s9, s6, s7;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s2 [0, 64] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s0 [0, 65535] { R4763 += 1, R4764 += 1 };
  s0 -> s3 [0, 65535] { R4764 += 1, R4713 += 1, R4714 += 1 };
  s0 -> s4 [65, 65] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s5 [65, 65] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s6 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s7 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s0 -> s1 [66, 65535] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s0 -> s2 [66, 65535] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s1 [0, 64] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s2 [0, 64] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s4 [65, 65] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s5 [65, 65] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s6 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s7 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s1 -> s1 [66, 65535] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s1 -> s2 [66, 65535] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [0, 64] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [0, 65535] { R4764 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s6 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s7 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s2 -> s2 [66, 65535] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s1 [0, 64] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s2 [0, 64] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s3 [0, 65535] { R4764 += 1, R4713 += 1, R4714 += 1 };
  s3 -> s4 [65, 65] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s5 [65, 65] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s6 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s7 [65, 65] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s3 -> s1 [66, 65535] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s3 -> s2 [66, 65535] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s4 -> s4 [0, 65535] { R4764 += 1, R4714 += 1, R4671 += 1, R4672 += 1 };
  s4 -> s7 [0, 65535] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s6 -> s6 [0, 65535] { R4764 += 1 };
  s6 -> s9 [0, 65535];
  s7 -> s8 [0, 65535] { R4764 += 1 };
  s7 -> s7 [0, 65535] { R4764 += 1, R4714 += 1, R4672 += 1, R4673 += 1 };
  s7 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R4764 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R4766 += 1, R4716 += 1 };
  s0 -> s0 [0, 65535] { R4765 += 1, R4766 += 1 };
  s0 -> s2 [0, 65535] { R4766 += 1, R4715 += 1, R4716 += 1 };
  s0 -> s3 [65, 65] { R4766 += 1, R4716 += 1 };
  s0 -> s4 [65, 65] { R4766 += 1, R4716 += 1 };
  s0 -> s1 [66, 65535] { R4766 += 1, R4716 += 1 };
  s1 -> s1 [0, 64] { R4766 += 1, R4716 += 1 };
  s1 -> s1 [0, 65535] { R4766 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R4766 += 1, R4716 += 1 };
  s1 -> s4 [65, 65] { R4766 += 1, R4716 += 1 };
  s1 -> s1 [66, 65535] { R4766 += 1, R4716 += 1 };
  s2 -> s1 [0, 64] { R4766 += 1, R4716 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R4766 += 1, R4715 += 1, R4716 += 1 };
  s2 -> s3 [65, 65] { R4766 += 1, R4716 += 1 };
  s2 -> s4 [65, 65] { R4766 += 1, R4716 += 1 };
  s2 -> s1 [66, 65535] { R4766 += 1, R4716 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R4766 += 1 };
  s3 -> s3 [0, 65535] { R4766 += 1, R4716 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R4766 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R4766 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s0 -> s0 [0, 65535] { R4767 += 1, R4768 += 1 };
  s0 -> s2 [0, 65535] { R4768 += 1, R4717 += 1, R4718 += 1 };
  s0 -> s3 [65, 65] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s0 -> s4 [65, 65] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s0 -> s1 [66, 65535] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s1 -> s1 [0, 64] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s1 -> s1 [0, 65535] { R4768 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s1 -> s4 [65, 65] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s1 -> s1 [66, 65535] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s2 -> s1 [0, 64] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R4768 += 1, R4717 += 1, R4718 += 1 };
  s2 -> s3 [65, 65] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s2 -> s4 [65, 65] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s2 -> s1 [66, 65535] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s3 -> s3 [0, 65535] { R4768 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R4768 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4768 += 1, R4718 += 1, R4677 += 1, R4678 += 1 };
  s5 -> s5 [0, 65535] { R4768 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R4770 += 1, R4720 += 1 };
  s0 -> s0 [0, 65535] { R4769 += 1, R4770 += 1 };
  s0 -> s2 [0, 65535] { R4770 += 1, R4719 += 1, R4720 += 1 };
  s0 -> s3 [65, 65] { R4770 += 1, R4720 += 1 };
  s0 -> s4 [65, 65] { R4770 += 1, R4720 += 1 };
  s0 -> s1 [66, 65535] { R4770 += 1, R4720 += 1 };
  s1 -> s1 [0, 64] { R4770 += 1, R4720 += 1 };
  s1 -> s1 [0, 65535] { R4770 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R4770 += 1, R4720 += 1 };
  s1 -> s4 [65, 65] { R4770 += 1, R4720 += 1 };
  s1 -> s1 [66, 65535] { R4770 += 1, R4720 += 1 };
  s2 -> s1 [0, 64] { R4770 += 1, R4720 += 1 };
  s2 -> s2 [0, 65535] { R4770 += 1, R4719 += 1, R4720 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R4770 += 1, R4720 += 1 };
  s2 -> s4 [65, 65] { R4770 += 1, R4720 += 1 };
  s2 -> s1 [66, 65535] { R4770 += 1, R4720 += 1 };
  s3 -> s3 [0, 65535] { R4770 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R4770 += 1, R4720 += 1 };
  s4 -> s5 [0, 65535] { R4770 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R4770 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R4702 && R2 = R4770 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R1770 + R1769 = 0 && R4683 = 0 && R4684 = R4702 && R4685 = 0 && R4686 = R4702 && R4687 = 0 && R4688 = R4702 && R4689 = 0 && R4690 = R4702 && R4691 = 0 && R4692 = R4702 && R4693 = 0 && R4694 = R4702 && R4695 = 0 && R4696 = R4702 && R4697 = 0 && R4698 = R4702 && R4699 = 0 && R4700 = R4702 && R4701 = 0 && R4705 = 0 && R4706 = 0 && R4709 = 0 && R4710 = 0 && R4711 = 0 && R4712 = 0 && R4713 = 0 && R4714 = 0 && R4721 = 10 && R4722 = R4770 && R4723 = 10 && R4724 = R4770 && R4725 = 10 && R4726 = R4770 && R4727 = 10 && R4728 = R4770 && R4729 = 10 && R4730 = R4770 && R4731 = 10 && R4732 = R4770 && R4733 = 10 && R4734 = R4770 && R4735 = 10 && R4736 = R4770 && R4737 = 10 && R4738 = R4770 && R4739 = 10 && R4740 = R4770 && R4741 = 10 && R4742 = R4770 && R4743 = 10 && R4744 = R4770 && R4745 = 10 && R4746 = R4770 && R4747 = 10 && R4748 = R4770 && R4749 = 10 && R4750 = R4770 && R4751 = 10 && R4752 = R4770 && R4753 = 10 && R4754 = R4770 && R4755 = 10 && R4756 = R4770 && R4757 = 10 && R4758 = R4770 && R4759 = 10 && R4760 = R4770 && R4761 = 10 && R4762 = R4770 && R4763 = 10 && R4764 = R4770 && R4765 = 10 && R4766 = R4770 && R4767 = 10 && R4768 = R4770 && R4769 = 10 && R7 < 1 && R8 < 1 && R3510 + R3509 < 1 && 0 < R4702 && 9 < R4770 && (R14 = 0 || (R4703 = 0 && R4704 = 0)) && (R14 = 0 || (R4707 = 0 && R4708 = 0)) && (R14 = 0 || (R4715 = 0 && R4716 = 0)) && (R14 = 0 || (R4717 = 0 && R4718 = 0)) && (R14 = 0 || (R4719 = 0 && R4720 = 0)) && (R4676 + R4673 = 0 || (R4381 + R4379 = 0 && R4382 + R4380 = 0)) && (R4676 + R4673 = 0 || (R4674 + R4671 = 0 && R4675 + R4672 = 0)) && (R4682 + R4679 = 0 || (R4680 + R4677 = 0 && R4681 + R4678 = 0));
// End of Parikh automata intersection problem
