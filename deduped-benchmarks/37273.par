// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R29, R3, R30, R31, R32, R321, R322, R323, R324, R325, R326, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R600, R601, R602, R603, R604, R605, R606, R607, R608, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R560 += 1 };
  s0 -> s0 [0, 65535] { R559 += 1, R560 += 1 };
  s0 -> s1 [45, 45] { R560 += 1 };
  s0 -> s2 [46, 46] { R560 += 1 };
  s0 -> s1 [48, 62] { R560 += 1 };
  s0 -> s3 [65, 65] { R560 += 1 };
  s0 -> s1 [66, 65535] { R560 += 1 };
  s1 -> s1 [0, 43] { R560 += 1 };
  s1 -> s1 [45, 45] { R560 += 1 };
  s1 -> s2 [46, 46] { R560 += 1 };
  s1 -> s1 [48, 62] { R560 += 1 };
  s1 -> s3 [65, 65] { R560 += 1 };
  s1 -> s1 [66, 65535] { R560 += 1 };
  s2 -> s1 [0, 43] { R560 += 1 };
  s2 -> s1 [45, 45] { R560 += 1 };
  s2 -> s2 [46, 46] { R560 += 1 };
  s2 -> s1 [48, 62] { R560 += 1 };
  s2 -> s3 [65, 65] { R560 += 1 };
  s2 -> s1 [66, 114] { R560 += 1 };
  s2 -> s8 [115, 115] { R560 += 1 };
  s2 -> s1 [116, 65535] { R560 += 1 };
  s3 -> s3 [0, 43] { R560 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R560 += 1 };
  s3 -> s4 [46, 46] { R560 += 1 };
  s3 -> s3 [48, 62] { R560 += 1 };
  s3 -> s3 [65, 65535] { R560 += 1 };
  s4 -> s3 [0, 43] { R560 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R560 += 1 };
  s4 -> s4 [46, 46] { R560 += 1 };
  s4 -> s3 [48, 62] { R560 += 1 };
  s4 -> s3 [65, 114] { R560 += 1 };
  s4 -> s5 [115, 115] { R560 += 1 };
  s4 -> s3 [116, 65535] { R560 += 1 };
  s5 -> s3 [0, 43] { R560 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R560 += 1 };
  s5 -> s4 [46, 46] { R560 += 1 };
  s5 -> s3 [48, 62] { R560 += 1 };
  s5 -> s3 [65, 110] { R560 += 1 };
  s5 -> s6 [111, 111] { R560 += 1 };
  s5 -> s3 [112, 65535] { R560 += 1 };
  s6 -> s3 [0, 43] { R560 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R560 += 1 };
  s6 -> s4 [46, 46] { R560 += 1 };
  s6 -> s3 [48, 62] { R560 += 1 };
  s6 -> s3 [65, 98] { R560 += 1 };
  s6 -> s7 [99, 99] { R560 += 1 };
  s6 -> s3 [100, 65535] { R560 += 1 };
  s7 -> s3 [0, 43] { R560 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R560 += 1 };
  s7 -> s4 [46, 46] { R560 += 1 };
  s7 -> s3 [48, 62] { R560 += 1 };
  s7 -> s3 [65, 106] { R560 += 1 };
  s7 -> s3 [108, 65535] { R560 += 1 };
  s8 -> s1 [0, 43] { R560 += 1 };
  s8 -> s1 [45, 45] { R560 += 1 };
  s8 -> s2 [46, 46] { R560 += 1 };
  s8 -> s1 [48, 62] { R560 += 1 };
  s8 -> s3 [65, 65] { R560 += 1 };
  s8 -> s1 [66, 110] { R560 += 1 };
  s8 -> s9 [111, 111] { R560 += 1 };
  s8 -> s1 [112, 65535] { R560 += 1 };
  s9 -> s1 [0, 43] { R560 += 1 };
  s9 -> s1 [45, 45] { R560 += 1 };
  s9 -> s2 [46, 46] { R560 += 1 };
  s9 -> s1 [48, 62] { R560 += 1 };
  s9 -> s3 [65, 65] { R560 += 1 };
  s9 -> s1 [66, 98] { R560 += 1 };
  s9 -> s10 [99, 99] { R560 += 1 };
  s9 -> s1 [100, 65535] { R560 += 1 };
  s10 -> s1 [0, 43] { R560 += 1 };
  s10 -> s1 [45, 45] { R560 += 1 };
  s10 -> s2 [46, 46] { R560 += 1 };
  s10 -> s1 [48, 62] { R560 += 1 };
  s10 -> s3 [65, 65] { R560 += 1 };
  s10 -> s1 [66, 106] { R560 += 1 };
  s10 -> s1 [108, 65535] { R560 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R561 += 1, R562 += 1 };
  s0 -> s1 [0, 65535] { R562 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R562 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R564 += 1 };
  s0 -> s0 [0, 65535] { R563 += 1, R564 += 1 };
  s0 -> s2 [0, 65535] { R564 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R564 += 1 };
  s0 -> s1 [59, 65535] { R564 += 1 };
  s1 -> s1 [0, 57] { R564 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R564 += 1 };
  s1 -> s1 [59, 65535] { R564 += 1 };
  s2 -> s1 [0, 57] { R564 += 1 };
  s2 -> s2 [0, 65535] { R564 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R564 += 1 };
  s2 -> s1 [59, 65535] { R564 += 1 };
  s3 -> s3 [0, 65535] { R564 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R566 += 1 };
  s0 -> s2 [0, 65535] { R566 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R565 += 1, R566 += 1 };
  s0 -> s3 [65, 65] { R566 += 1 };
  s0 -> s1 [66, 65535] { R566 += 1 };
  s1 -> s1 [0, 64] { R566 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R566 += 1 };
  s1 -> s1 [66, 65535] { R566 += 1 };
  s2 -> s1 [0, 64] { R566 += 1 };
  s2 -> s2 [0, 65535] { R566 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R566 += 1 };
  s2 -> s1 [66, 65535] { R566 += 1 };
  s3 -> s3 [0, 65535] { R566 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R568 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R568 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R567 += 1, R568 += 1 };
  s0 -> s3 [91, 91] { R568 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R568 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R568 += 1 };
  s1 -> s1 [0, 65535] { R568 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R568 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R568 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R568 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R568 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R568 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R568 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R570 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R569 += 1, R570 += 1 };
  s0 -> s2 [0, 65535] { R570 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R570 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R570 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R570 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R570 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R570 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R572 += 1, R522 += 1 };
  s0 -> s2 [0, 65535] { R572 += 1, R521 += 1, R522 += 1 };
  s0 -> s0 [0, 65535] { R571 += 1, R572 += 1 };
  s0 -> s1 [66, 65535] { R572 += 1, R522 += 1 };
  s1 -> s1 [0, 64] { R572 += 1, R522 += 1 };
  s1 -> s1 [0, 65535] { R572 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R572 += 1, R522 += 1 };
  s2 -> s1 [0, 64] { R572 += 1, R522 += 1 };
  s2 -> s2 [0, 65535] { R572 += 1, R521 += 1, R522 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R572 += 1, R522 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R573 += 1, R574 += 1 };
  s0 -> s1 [0, 65535] { R574 += 1, R523 += 1, R524 += 1 };
  s0 -> s2 [0, 65535] { R574 += 1, R524 += 1, R13 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R574 += 1, R523 += 1, R524 += 1 };
  s1 -> s2 [0, 65535] { R574 += 1, R524 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R574 += 1 };
  s2 -> s2 [0, 65535] { R574 += 1, R524 += 1, R13 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R574 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R576 += 1, R526 += 1 };
  s0 -> s2 [0, 65535] { R576 += 1, R525 += 1, R526 += 1 };
  s0 -> s0 [0, 65535] { R575 += 1, R576 += 1 };
  s0 -> s3 [87, 87] { R576 += 1, R526 += 1 };
  s0 -> s1 [88, 65535] { R576 += 1, R526 += 1 };
  s1 -> s1 [0, 65] { R576 += 1, R526 += 1 };
  s1 -> s3 [87, 87] { R576 += 1, R526 += 1 };
  s1 -> s1 [88, 65535] { R576 += 1, R526 += 1 };
  s2 -> s1 [0, 65] { R576 += 1, R526 += 1 };
  s2 -> s2 [0, 65535] { R576 += 1, R525 += 1, R526 += 1 };
  s2 -> s3 [87, 87] { R576 += 1, R526 += 1 };
  s2 -> s1 [88, 65535] { R576 += 1, R526 += 1 };
  s3 -> s3 [0, 65] { R576 += 1, R526 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R576 += 1 };
  s3 -> s3 [87, 65535] { R576 += 1, R526 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R578 += 1, R527 += 1, R528 += 1 };
  s0 -> s2 [0, 65535] { R578 += 1, R528 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R577 += 1, R578 += 1 };
  s1 -> s1 [0, 65535] { R578 += 1, R527 += 1, R528 += 1 };
  s1 -> s2 [0, 65535] { R578 += 1, R528 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R578 += 1, R528 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R578 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R578 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R580 += 1, R530 += 1 };
  s0 -> s0 [0, 65535] { R579 += 1, R580 += 1 };
  s0 -> s2 [0, 65535] { R580 += 1, R530 += 1, R28 += 1 };
  s0 -> s3 [0, 65535] { R580 += 1, R529 += 1, R530 += 1 };
  s0 -> s1 [88, 65535] { R580 += 1, R530 += 1 };
  s1 -> s1 [0, 86] { R580 += 1, R530 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R580 += 1 };
  s1 -> s1 [88, 65535] { R580 += 1, R530 += 1 };
  s2 -> s1 [0, 86] { R580 += 1, R530 += 1 };
  s2 -> s5 [0, 65535] { R580 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R580 += 1, R530 += 1, R28 += 1 };
  s2 -> s1 [88, 65535] { R580 += 1, R530 += 1 };
  s3 -> s1 [0, 86] { R580 += 1, R530 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R580 += 1, R530 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R580 += 1, R529 += 1, R530 += 1 };
  s3 -> s1 [88, 65535] { R580 += 1, R530 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R580 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R582 += 1, R532 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R581 += 1, R582 += 1 };
  s0 -> s2 [0, 65535] { R582 += 1, R531 += 1, R532 += 1 };
  s0 -> s3 [0, 65535] { R582 += 1, R532 += 1, R31 += 1, R32 += 1 };
  s0 -> s1 [88, 65535] { R582 += 1, R532 += 1, R32 += 1 };
  s1 -> s1 [0, 86] { R582 += 1, R532 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R582 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R582 += 1, R532 += 1 };
  s1 -> s1 [88, 65535] { R582 += 1, R532 += 1, R32 += 1 };
  s2 -> s1 [0, 86] { R582 += 1, R532 += 1, R32 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R582 += 1, R531 += 1, R532 += 1 };
  s2 -> s3 [0, 65535] { R582 += 1, R532 += 1, R31 += 1, R32 += 1 };
  s2 -> s1 [88, 65535] { R582 += 1, R532 += 1, R32 += 1 };
  s3 -> s1 [0, 86] { R582 += 1, R532 += 1, R32 += 1 };
  s3 -> s4 [0, 65535] { R582 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R582 += 1, R532 += 1, R31 += 1, R32 += 1 };
  s3 -> s1 [88, 65535] { R582 += 1, R532 += 1, R32 += 1 };
  s4 -> s4 [0, 65535] { R582 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R584 += 1, R534 += 1, R325 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R584 += 1, R534 += 1 };
  s0 -> s0 [0, 65535] { R583 += 1, R584 += 1 };
  s0 -> s3 [0, 65535] { R584 += 1, R533 += 1, R534 += 1 };
  s1 -> s1 [0, 65535] { R584 += 1, R534 += 1, R325 += 1, R326 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R584 += 1 };
  s1 -> s2 [0, 65535] { R584 += 1, R534 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R584 += 1 };
  s2 -> s2 [0, 65535] { R584 += 1, R534 += 1 };
  s3 -> s1 [0, 65535] { R584 += 1, R534 += 1, R325 += 1, R326 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R584 += 1, R534 += 1 };
  s3 -> s3 [0, 65535] { R584 += 1, R533 += 1, R534 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R584 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R586 += 1, R535 += 1, R536 += 1 };
  s0 -> s2 [0, 65535] { R586 += 1, R536 += 1 };
  s0 -> s0 [0, 65535] { R585 += 1, R586 += 1 };
  s1 -> s1 [0, 65535] { R586 += 1, R535 += 1, R536 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R586 += 1, R536 += 1 };
  s2 -> s3 [0, 65535] { R586 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R586 += 1, R536 += 1 };
  s3 -> s3 [0, 65535] { R586 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R587 += 1, R588 += 1 };
  s0 -> s1 [0, 65535] { R588 += 1, R538 += 1 };
  s0 -> s2 [0, 65535] { R588 += 1, R537 += 1, R538 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R588 += 1, R538 += 1 };
  s1 -> s4 [0, 65535] { R588 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R588 += 1, R538 += 1 };
  s2 -> s2 [0, 65535] { R588 += 1, R537 += 1, R538 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R588 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R590 += 1, R540 += 1 };
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s0 -> s2 [0, 65535] { R590 += 1, R539 += 1, R540 += 1 };
  s1 -> s4 [0, 65535] { R590 += 1 };
  s1 -> s1 [0, 65535] { R590 += 1, R540 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R590 += 1, R540 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R590 += 1, R539 += 1, R540 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R590 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R592 += 1, R541 += 1, R542 += 1 };
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s0 -> s2 [0, 65535] { R592 += 1, R542 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R592 += 1, R541 += 1, R542 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R592 += 1, R542 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R592 += 1, R542 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R592 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R592 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R594 += 1, R544 += 1 };
  s0 -> s0 [0, 65535] { R593 += 1, R594 += 1 };
  s0 -> s2 [0, 65535] { R594 += 1, R543 += 1, R544 += 1 };
  s0 -> s3 [65, 65] { R594 += 1, R544 += 1 };
  s0 -> s4 [65, 65] { R594 += 1, R544 += 1 };
  s0 -> s1 [88, 65535] { R594 += 1, R544 += 1 };
  s1 -> s1 [0, 64] { R594 += 1, R544 += 1 };
  s1 -> s1 [0, 65535] { R594 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R594 += 1, R544 += 1 };
  s1 -> s4 [65, 65] { R594 += 1, R544 += 1 };
  s1 -> s1 [88, 65535] { R594 += 1, R544 += 1 };
  s2 -> s1 [0, 64] { R594 += 1, R544 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R594 += 1, R543 += 1, R544 += 1 };
  s2 -> s3 [65, 65] { R594 += 1, R544 += 1 };
  s2 -> s4 [65, 65] { R594 += 1, R544 += 1 };
  s2 -> s1 [88, 65535] { R594 += 1, R544 += 1 };
  s3 -> s3 [0, 65535] { R594 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R594 += 1, R544 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R594 += 1 };
  s4 -> s4 [88, 65535] { R594 += 1, R544 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R596 += 1, R546 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R596 += 1, R545 += 1, R546 += 1 };
  s0 -> s0 [0, 65535] { R595 += 1, R596 += 1 };
  s0 -> s3 [65, 65] { R596 += 1, R546 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R596 += 1, R546 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R596 += 1, R546 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R596 += 1, R546 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R596 += 1 };
  s1 -> s3 [65, 65] { R596 += 1, R546 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R596 += 1, R546 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R596 += 1, R546 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R596 += 1, R546 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R596 += 1, R545 += 1, R546 += 1 };
  s2 -> s3 [65, 65] { R596 += 1, R546 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R596 += 1, R546 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R596 += 1, R546 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R596 += 1 };
  s3 -> s3 [0, 65535] { R596 += 1, R546 += 1, R25 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R596 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R596 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R598 += 1, R548 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R598 += 1, R547 += 1, R548 += 1 };
  s0 -> s0 [0, 65535] { R597 += 1, R598 += 1 };
  s0 -> s3 [65, 65] { R598 += 1, R548 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R598 += 1, R548 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R598 += 1, R548 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R598 += 1, R548 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R598 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R598 += 1, R548 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R598 += 1, R548 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R598 += 1, R548 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R598 += 1, R548 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R598 += 1, R547 += 1, R548 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R598 += 1, R548 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R598 += 1, R548 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R598 += 1, R548 += 1, R27 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R598 += 1 };
  s4 -> s5 [0, 65535] { R598 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R598 += 1, R548 += 1, R27 += 1 };
  s5 -> s5 [0, 65535] { R598 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R600 += 1, R549 += 1, R550 += 1 };
  s0 -> s0 [0, 65535] { R599 += 1, R600 += 1 };
  s0 -> s3 [65, 65] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R600 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R600 += 1, R549 += 1, R550 += 1 };
  s2 -> s3 [65, 65] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R600 += 1, R550 += 1, R29 += 1, R30 += 1 };
  s3 -> s6 [0, 65535] { R600 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R600 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R600 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s0 -> s2 [0, 64] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s0 -> s3 [0, 65535] { R602 += 1, R551 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R601 += 1, R602 += 1 };
  s0 -> s4 [65, 65] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s0 -> s5 [65, 65] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s0 -> s6 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s0 -> s7 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s0 -> s1 [66, 65535] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s0 -> s2 [66, 65535] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s1 -> s1 [0, 64] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s1 -> s2 [0, 64] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s1 -> s4 [65, 65] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s1 -> s5 [65, 65] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s1 -> s6 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s1 -> s7 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s1 -> s1 [66, 65535] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s1 -> s2 [66, 65535] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s2 -> s2 [0, 64] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R602 += 1 };
  s2 -> s6 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s2 -> s7 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s2 -> s2 [66, 65535] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s3 -> s1 [0, 64] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s3 -> s2 [0, 64] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s3 -> s3 [0, 65535] { R602 += 1, R551 += 1, R552 += 1 };
  s3 -> s4 [65, 65] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s3 -> s5 [65, 65] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s3 -> s6 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s3 -> s7 [65, 65] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s3 -> s1 [66, 65535] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s3 -> s2 [66, 65535] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s5 -> s5 [0, 65535] { R602 += 1, R552 += 1, R321 += 1, R322 += 1 };
  s5 -> s6 [0, 65535] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s6 -> s9 [0, 65535] { R602 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R602 += 1, R552 += 1, R322 += 1, R323 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R602 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R602 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R604 += 1, R554 += 1 };
  s0 -> s2 [0, 65535] { R604 += 1, R553 += 1, R554 += 1 };
  s0 -> s0 [0, 65535] { R603 += 1, R604 += 1 };
  s0 -> s3 [65, 65] { R604 += 1, R554 += 1 };
  s0 -> s4 [65, 65] { R604 += 1, R554 += 1 };
  s0 -> s1 [66, 65535] { R604 += 1, R554 += 1 };
  s1 -> s1 [0, 64] { R604 += 1, R554 += 1 };
  s1 -> s1 [0, 65535] { R604 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R604 += 1, R554 += 1 };
  s1 -> s4 [65, 65] { R604 += 1, R554 += 1 };
  s1 -> s1 [66, 65535] { R604 += 1, R554 += 1 };
  s2 -> s1 [0, 64] { R604 += 1, R554 += 1 };
  s2 -> s2 [0, 65535] { R604 += 1, R553 += 1, R554 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R604 += 1, R554 += 1 };
  s2 -> s4 [65, 65] { R604 += 1, R554 += 1 };
  s2 -> s1 [66, 65535] { R604 += 1, R554 += 1 };
  s3 -> s3 [0, 65535] { R604 += 1, R554 += 1 };
  s3 -> s6 [0, 65535] { R604 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R604 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R604 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s0 -> s2 [0, 64] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s0 -> s0 [0, 65535] { R605 += 1, R606 += 1 };
  s0 -> s3 [0, 65535] { R606 += 1, R555 += 1, R556 += 1 };
  s0 -> s4 [65, 65] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s0 -> s5 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s0 -> s6 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s0 -> s7 [65, 65] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s0 -> s1 [66, 65535] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s0 -> s2 [66, 65535] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s1 -> s1 [0, 64] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s1 -> s2 [0, 64] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s1 -> s4 [65, 65] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s1 -> s5 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s1 -> s6 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s1 -> s7 [65, 65] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s1 -> s1 [66, 65535] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s1 -> s2 [66, 65535] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s2 -> s2 [0, 64] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s2 -> s11 [0, 64] { R606 += 1, R556 += 1 };
  s2 -> s5 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s2 -> s6 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s2 -> s8 [65, 65] { R606 += 1, R556 += 1 };
  s2 -> s12 [65, 65] { R606 += 1, R556 += 1 };
  s2 -> s2 [66, 65535] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s2 -> s11 [66, 65535] { R606 += 1, R556 += 1 };
  s3 -> s1 [0, 64] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s3 -> s2 [0, 64] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s3 -> s3 [0, 65535] { R606 += 1, R555 += 1, R556 += 1 };
  s3 -> s4 [65, 65] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s3 -> s5 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s3 -> s6 [65, 65] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s3 -> s7 [65, 65] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s3 -> s1 [66, 65535] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s3 -> s2 [66, 65535] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s4 -> s4 [0, 65535] { R606 += 1, R556 += 1, R515 += 1, R516 += 1 };
  s4 -> s6 [0, 65535] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s6 -> s6 [0, 65535] { R606 += 1, R556 += 1, R516 += 1, R517 += 1 };
  s6 -> s8 [0, 65535] { R606 += 1, R556 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R606 += 1 };
  s8 -> s8 [0, 65535] { R606 += 1, R556 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R606 += 1 };
  s11 -> s11 [0, 64] { R606 += 1, R556 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R606 += 1 };
  s11 -> s8 [65, 65] { R606 += 1, R556 += 1 };
  s11 -> s12 [65, 65] { R606 += 1, R556 += 1 };
  s11 -> s11 [66, 65535] { R606 += 1, R556 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R606 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R608 += 1, R558 += 1 };
  s0 -> s0 [0, 65535] { R607 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R608 += 1, R557 += 1, R558 += 1 };
  s0 -> s3 [65, 65] { R608 += 1, R558 += 1 };
  s0 -> s4 [65, 65] { R608 += 1, R558 += 1 };
  s0 -> s1 [66, 65535] { R608 += 1, R558 += 1 };
  s1 -> s1 [0, 64] { R608 += 1, R558 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R608 += 1 };
  s1 -> s3 [65, 65] { R608 += 1, R558 += 1 };
  s1 -> s4 [65, 65] { R608 += 1, R558 += 1 };
  s1 -> s1 [66, 65535] { R608 += 1, R558 += 1 };
  s2 -> s1 [0, 64] { R608 += 1, R558 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R608 += 1, R557 += 1, R558 += 1 };
  s2 -> s3 [65, 65] { R608 += 1, R558 += 1 };
  s2 -> s4 [65, 65] { R608 += 1, R558 += 1 };
  s2 -> s1 [66, 65535] { R608 += 1, R558 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R608 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R608 += 1 };
  s4 -> s4 [0, 65535] { R608 += 1, R558 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R608 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R540 && R2 = R608 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R521 = 0 && R522 = R540 && R523 = 0 && R524 = R540 && R525 = 0 && R526 = R540 && R527 = 0 && R528 = R540 && R529 = 0 && R530 = R540 && R531 = 0 && R532 = R540 && R533 = 0 && R534 = R540 && R535 = 0 && R536 = R540 && R537 = 0 && R538 = R540 && R539 = 0 && R551 = 0 && R552 = 0 && R555 = 0 && R556 = 0 && R559 = 10 && R560 = R608 && R561 = 10 && R562 = R608 && R563 = 10 && R564 = R608 && R565 = 10 && R566 = R608 && R567 = 10 && R568 = R608 && R569 = 10 && R570 = R608 && R571 = 10 && R572 = R608 && R573 = 10 && R574 = R608 && R575 = 10 && R576 = R608 && R577 = 10 && R578 = R608 && R579 = 10 && R580 = R608 && R581 = 10 && R582 = R608 && R583 = 10 && R584 = R608 && R585 = 10 && R586 = R608 && R587 = 10 && R588 = R608 && R589 = 10 && R590 = R608 && R591 = 10 && R592 = R608 && R593 = 10 && R594 = R608 && R595 = 10 && R596 = R608 && R597 = 10 && R598 = R608 && R599 = 10 && R600 = R608 && R601 = 10 && R602 = R608 && R603 = 10 && R604 = R608 && R605 = 10 && R606 = R608 && R607 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R540 && 9 < R608 && (R14 = 0 || (R541 = 0 && R542 = 0)) && (R14 = 0 || (R543 = 0 && R544 = 0)) && (R14 = 0 || (R545 = 0 && R546 = 0)) && (R14 = 0 || (R547 = 0 && R548 = 0)) && (R14 = 0 || (R549 = 0 && R550 = 0)) && (R14 = 0 || (R553 = 0 && R554 = 0)) && (R14 = 0 || (R557 = 0 && R558 = 0)) && (R326 + R323 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R326 + R323 = 0 || (R324 + R321 = 0 && R325 + R322 = 0)) && (R520 + R517 = 0 || (R518 + R515 = 0 && R519 + R516 = 0));
// End of Parikh automata intersection problem
