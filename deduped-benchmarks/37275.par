// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R29, R3, R30, R31, R32, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R708, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R660 += 1 };
  s0 -> s0 [0, 65535] { R659 += 1, R660 += 1 };
  s0 -> s1 [45, 45] { R660 += 1 };
  s0 -> s2 [46, 46] { R660 += 1 };
  s0 -> s1 [48, 62] { R660 += 1 };
  s0 -> s3 [65, 65] { R660 += 1 };
  s0 -> s1 [66, 65535] { R660 += 1 };
  s1 -> s1 [0, 43] { R660 += 1 };
  s1 -> s1 [45, 45] { R660 += 1 };
  s1 -> s2 [46, 46] { R660 += 1 };
  s1 -> s1 [48, 62] { R660 += 1 };
  s1 -> s3 [65, 65] { R660 += 1 };
  s1 -> s1 [66, 65535] { R660 += 1 };
  s2 -> s1 [0, 43] { R660 += 1 };
  s2 -> s1 [45, 45] { R660 += 1 };
  s2 -> s2 [46, 46] { R660 += 1 };
  s2 -> s1 [48, 62] { R660 += 1 };
  s2 -> s3 [65, 65] { R660 += 1 };
  s2 -> s1 [66, 114] { R660 += 1 };
  s2 -> s8 [115, 115] { R660 += 1 };
  s2 -> s1 [116, 65535] { R660 += 1 };
  s3 -> s3 [0, 43] { R660 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R660 += 1 };
  s3 -> s4 [46, 46] { R660 += 1 };
  s3 -> s3 [48, 62] { R660 += 1 };
  s3 -> s3 [65, 65535] { R660 += 1 };
  s4 -> s3 [0, 43] { R660 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R660 += 1 };
  s4 -> s4 [46, 46] { R660 += 1 };
  s4 -> s3 [48, 62] { R660 += 1 };
  s4 -> s3 [65, 114] { R660 += 1 };
  s4 -> s5 [115, 115] { R660 += 1 };
  s4 -> s3 [116, 65535] { R660 += 1 };
  s5 -> s3 [0, 43] { R660 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R660 += 1 };
  s5 -> s4 [46, 46] { R660 += 1 };
  s5 -> s3 [48, 62] { R660 += 1 };
  s5 -> s3 [65, 110] { R660 += 1 };
  s5 -> s6 [111, 111] { R660 += 1 };
  s5 -> s3 [112, 65535] { R660 += 1 };
  s6 -> s3 [0, 43] { R660 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R660 += 1 };
  s6 -> s4 [46, 46] { R660 += 1 };
  s6 -> s3 [48, 62] { R660 += 1 };
  s6 -> s3 [65, 98] { R660 += 1 };
  s6 -> s7 [99, 99] { R660 += 1 };
  s6 -> s3 [100, 65535] { R660 += 1 };
  s7 -> s3 [0, 43] { R660 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R660 += 1 };
  s7 -> s4 [46, 46] { R660 += 1 };
  s7 -> s3 [48, 62] { R660 += 1 };
  s7 -> s3 [65, 106] { R660 += 1 };
  s7 -> s3 [108, 65535] { R660 += 1 };
  s8 -> s1 [0, 43] { R660 += 1 };
  s8 -> s1 [45, 45] { R660 += 1 };
  s8 -> s2 [46, 46] { R660 += 1 };
  s8 -> s1 [48, 62] { R660 += 1 };
  s8 -> s3 [65, 65] { R660 += 1 };
  s8 -> s1 [66, 110] { R660 += 1 };
  s8 -> s9 [111, 111] { R660 += 1 };
  s8 -> s1 [112, 65535] { R660 += 1 };
  s9 -> s1 [0, 43] { R660 += 1 };
  s9 -> s1 [45, 45] { R660 += 1 };
  s9 -> s2 [46, 46] { R660 += 1 };
  s9 -> s1 [48, 62] { R660 += 1 };
  s9 -> s3 [65, 65] { R660 += 1 };
  s9 -> s1 [66, 98] { R660 += 1 };
  s9 -> s10 [99, 99] { R660 += 1 };
  s9 -> s1 [100, 65535] { R660 += 1 };
  s10 -> s1 [0, 43] { R660 += 1 };
  s10 -> s1 [45, 45] { R660 += 1 };
  s10 -> s2 [46, 46] { R660 += 1 };
  s10 -> s1 [48, 62] { R660 += 1 };
  s10 -> s3 [65, 65] { R660 += 1 };
  s10 -> s1 [66, 106] { R660 += 1 };
  s10 -> s1 [108, 65535] { R660 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R662 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R661 += 1, R662 += 1 };
  s1 -> s1 [0, 65535] { R662 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R664 += 1 };
  s0 -> s2 [0, 65535] { R664 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R663 += 1, R664 += 1 };
  s0 -> s3 [58, 58] { R664 += 1 };
  s0 -> s1 [59, 65535] { R664 += 1 };
  s1 -> s1 [0, 57] { R664 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R664 += 1 };
  s1 -> s1 [59, 65535] { R664 += 1 };
  s2 -> s1 [0, 57] { R664 += 1 };
  s2 -> s2 [0, 65535] { R664 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R664 += 1 };
  s2 -> s1 [59, 65535] { R664 += 1 };
  s3 -> s3 [0, 65535] { R664 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R666 += 1 };
  s0 -> s2 [0, 65535] { R666 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s3 [65, 65] { R666 += 1 };
  s0 -> s1 [66, 65535] { R666 += 1 };
  s1 -> s1 [0, 64] { R666 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R666 += 1 };
  s1 -> s1 [66, 65535] { R666 += 1 };
  s2 -> s1 [0, 64] { R666 += 1 };
  s2 -> s2 [0, 65535] { R666 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R666 += 1 };
  s2 -> s1 [66, 65535] { R666 += 1 };
  s3 -> s3 [0, 65535] { R666 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R668 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s0 -> s2 [0, 65535] { R668 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [91, 91] { R668 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R668 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R668 += 1 };
  s1 -> s1 [0, 65535] { R668 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R668 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R668 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [91, 91] { R668 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R668 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R668 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R668 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R670 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R669 += 1, R670 += 1 };
  s0 -> s2 [0, 65535] { R670 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535] { R670 += 1 };
  s1 -> s1 [0, 65535] { R670 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R670 += 1, R18 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R670 += 1, R17 += 1, R18 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R670 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R672 += 1, R622 += 1 };
  s0 -> s2 [0, 65535] { R672 += 1, R621 += 1, R622 += 1 };
  s0 -> s0 [0, 65535] { R671 += 1, R672 += 1 };
  s0 -> s1 [66, 65535] { R672 += 1, R622 += 1 };
  s1 -> s1 [0, 64] { R672 += 1, R622 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R672 += 1 };
  s1 -> s1 [66, 65535] { R672 += 1, R622 += 1 };
  s2 -> s1 [0, 64] { R672 += 1, R622 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R672 += 1, R621 += 1, R622 += 1 };
  s2 -> s1 [66, 65535] { R672 += 1, R622 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R674 += 1, R623 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R674 += 1, R624 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R673 += 1, R674 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R674 += 1, R623 += 1, R624 += 1 };
  s1 -> s2 [0, 65535] { R674 += 1, R624 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R674 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R674 += 1, R624 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R674 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R676 += 1, R626 += 1 };
  s0 -> s2 [0, 65535] { R676 += 1, R625 += 1, R626 += 1 };
  s0 -> s0 [0, 65535] { R675 += 1, R676 += 1 };
  s0 -> s3 [87, 87] { R676 += 1, R626 += 1 };
  s0 -> s1 [88, 65535] { R676 += 1, R626 += 1 };
  s1 -> s1 [0, 65] { R676 += 1, R626 += 1 };
  s1 -> s3 [87, 87] { R676 += 1, R626 += 1 };
  s1 -> s1 [88, 65535] { R676 += 1, R626 += 1 };
  s2 -> s1 [0, 65] { R676 += 1, R626 += 1 };
  s2 -> s2 [0, 65535] { R676 += 1, R625 += 1, R626 += 1 };
  s2 -> s3 [87, 87] { R676 += 1, R626 += 1 };
  s2 -> s1 [88, 65535] { R676 += 1, R626 += 1 };
  s3 -> s3 [0, 65] { R676 += 1, R626 += 1 };
  s3 -> s3 [0, 65535] { R676 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [87, 65535] { R676 += 1, R626 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R678 += 1, R628 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R678 += 1, R627 += 1, R628 += 1 };
  s0 -> s0 [0, 65535] { R677 += 1, R678 += 1 };
  s1 -> s1 [0, 65535] { R678 += 1, R628 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R678 += 1 };
  s2 -> s1 [0, 65535] { R678 += 1, R628 += 1, R26 += 1 };
  s2 -> s2 [0, 65535] { R678 += 1, R627 += 1, R628 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R678 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R680 += 1, R630 += 1 };
  s0 -> s2 [0, 65535] { R680 += 1, R630 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R679 += 1, R680 += 1 };
  s0 -> s3 [0, 65535] { R680 += 1, R629 += 1, R630 += 1 };
  s0 -> s1 [88, 65535] { R680 += 1, R630 += 1 };
  s1 -> s1 [0, 86] { R680 += 1, R630 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R680 += 1 };
  s1 -> s1 [88, 65535] { R680 += 1, R630 += 1 };
  s2 -> s1 [0, 86] { R680 += 1, R630 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R680 += 1, R630 += 1, R28 += 1 };
  s2 -> s5 [0, 65535] { R680 += 1 };
  s2 -> s1 [88, 65535] { R680 += 1, R630 += 1 };
  s3 -> s1 [0, 86] { R680 += 1, R630 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R680 += 1, R630 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R680 += 1, R629 += 1, R630 += 1 };
  s3 -> s1 [88, 65535] { R680 += 1, R630 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R680 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R682 += 1, R632 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R682 += 1, R632 += 1, R31 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R681 += 1, R682 += 1 };
  s0 -> s3 [0, 65535] { R682 += 1, R631 += 1, R632 += 1 };
  s0 -> s1 [88, 65535] { R682 += 1, R632 += 1, R32 += 1 };
  s1 -> s1 [0, 86] { R682 += 1, R632 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R682 += 1, R632 += 1 };
  s1 -> s5 [0, 65535] { R682 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R682 += 1, R632 += 1, R32 += 1 };
  s2 -> s1 [0, 86] { R682 += 1, R632 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R682 += 1, R632 += 1, R31 += 1, R32 += 1 };
  s2 -> s5 [0, 65535] { R682 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R682 += 1, R632 += 1, R32 += 1 };
  s3 -> s1 [0, 86] { R682 += 1, R632 += 1, R32 += 1 };
  s3 -> s2 [0, 65535] { R682 += 1, R632 += 1, R31 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R682 += 1, R631 += 1, R632 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R682 += 1, R632 += 1, R32 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R682 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s0 [0, 65535] { R683 += 1, R684 += 1 };
  s0 -> s1 [0, 65535] { R684 += 1, R633 += 1, R634 += 1 };
  s0 -> s2 [0, 65535] { R684 += 1, R634 += 1 };
  s1 -> s1 [0, 65535] { R684 += 1, R633 += 1, R634 += 1 };
  s1 -> s2 [0, 65535] { R684 += 1, R634 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R684 += 1, R634 += 1 };
  s2 -> s3 [0, 65535] { R684 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R684 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R686 += 1, R636 += 1 };
  s0 -> s2 [0, 65535] { R686 += 1, R635 += 1, R636 += 1 };
  s0 -> s0 [0, 65535] { R685 += 1, R686 += 1 };
  s1 -> s1 [0, 65535] { R686 += 1, R636 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R686 += 1 };
  s2 -> s1 [0, 65535] { R686 += 1, R636 += 1 };
  s2 -> s2 [0, 65535] { R686 += 1, R635 += 1, R636 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R686 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R687 += 1, R688 += 1 };
  s0 -> s1 [0, 65535] { R688 += 1, R638 += 1, R618 += 1, R619 += 1 };
  s0 -> s2 [0, 65535] { R688 += 1, R638 += 1, R619 += 1, R620 += 1 };
  s0 -> s3 [0, 65535] { R688 += 1, R637 += 1, R638 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R688 += 1 };
  s1 -> s1 [0, 65535] { R688 += 1, R638 += 1, R618 += 1, R619 += 1 };
  s1 -> s2 [0, 65535] { R688 += 1, R638 += 1, R619 += 1, R620 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R688 += 1 };
  s2 -> s6 [0, 65535] { R688 += 1, R638 += 1 };
  s2 -> s2 [0, 65535] { R688 += 1, R638 += 1, R619 += 1, R620 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R688 += 1, R638 += 1, R618 += 1, R619 += 1 };
  s3 -> s2 [0, 65535] { R688 += 1, R638 += 1, R619 += 1, R620 += 1 };
  s3 -> s3 [0, 65535] { R688 += 1, R637 += 1, R638 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R688 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R688 += 1 };
  s6 -> s6 [0, 65535] { R688 += 1, R638 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R690 += 1, R640 += 1 };
  s0 -> s2 [0, 65535] { R690 += 1, R639 += 1, R640 += 1 };
  s0 -> s0 [0, 65535] { R689 += 1, R690 += 1 };
  s1 -> s1 [0, 65535] { R690 += 1, R640 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R690 += 1 };
  s2 -> s1 [0, 65535] { R690 += 1, R640 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R690 += 1, R639 += 1, R640 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R690 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R692 += 1, R642 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R691 += 1, R692 += 1 };
  s0 -> s2 [0, 65535] { R692 += 1, R641 += 1, R642 += 1 };
  s1 -> s1 [0, 65535] { R692 += 1, R642 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R692 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R692 += 1, R642 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R692 += 1, R641 += 1, R642 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R692 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R694 += 1, R644 += 1 };
  s0 -> s0 [0, 65535] { R693 += 1, R694 += 1 };
  s0 -> s2 [0, 65535] { R694 += 1, R643 += 1, R644 += 1 };
  s0 -> s3 [65, 65] { R694 += 1, R644 += 1 };
  s0 -> s4 [65, 65] { R694 += 1, R644 += 1 };
  s0 -> s1 [88, 65535] { R694 += 1, R644 += 1 };
  s1 -> s1 [0, 64] { R694 += 1, R644 += 1 };
  s1 -> s1 [0, 65535] { R694 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R694 += 1, R644 += 1 };
  s1 -> s4 [65, 65] { R694 += 1, R644 += 1 };
  s1 -> s1 [88, 65535] { R694 += 1, R644 += 1 };
  s2 -> s1 [0, 64] { R694 += 1, R644 += 1 };
  s2 -> s2 [0, 65535] { R694 += 1, R643 += 1, R644 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R694 += 1, R644 += 1 };
  s2 -> s4 [65, 65] { R694 += 1, R644 += 1 };
  s2 -> s1 [88, 65535] { R694 += 1, R644 += 1 };
  s3 -> s3 [0, 65535] { R694 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R694 += 1, R644 += 1 };
  s4 -> s4 [0, 65535] { R694 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [88, 65535] { R694 += 1, R644 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R696 += 1, R646 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R696 += 1, R645 += 1, R646 += 1 };
  s0 -> s0 [0, 65535] { R695 += 1, R696 += 1 };
  s0 -> s3 [65, 65] { R696 += 1, R646 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R696 += 1, R646 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R696 += 1, R646 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R696 += 1, R646 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R696 += 1 };
  s1 -> s3 [65, 65] { R696 += 1, R646 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R696 += 1, R646 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R696 += 1, R646 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R696 += 1, R646 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R696 += 1, R645 += 1, R646 += 1 };
  s2 -> s3 [65, 65] { R696 += 1, R646 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R696 += 1, R646 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R696 += 1, R646 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R696 += 1, R646 += 1, R25 += 1 };
  s3 -> s6 [0, 65535] { R696 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R696 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R696 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R698 += 1, R648 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R697 += 1, R698 += 1 };
  s0 -> s2 [0, 65535] { R698 += 1, R647 += 1, R648 += 1 };
  s0 -> s3 [65, 65] { R698 += 1, R648 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R698 += 1, R648 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R698 += 1, R648 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R698 += 1, R648 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R698 += 1 };
  s1 -> s3 [65, 65] { R698 += 1, R648 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R698 += 1, R648 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R698 += 1, R648 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R698 += 1, R648 += 1, R27 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R698 += 1, R647 += 1, R648 += 1 };
  s2 -> s3 [65, 65] { R698 += 1, R648 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R698 += 1, R648 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R698 += 1, R648 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R698 += 1, R648 += 1, R27 += 1 };
  s3 -> s6 [0, 65535] { R698 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R698 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R698 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R700 += 1, R649 += 1, R650 += 1 };
  s0 -> s0 [0, 65535] { R699 += 1, R700 += 1 };
  s0 -> s3 [65, 65] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R700 += 1 };
  s1 -> s3 [65, 65] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R700 += 1, R649 += 1, R650 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R700 += 1, R650 += 1, R29 += 1, R30 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R700 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R700 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R700 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s0 -> s2 [0, 64] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s0 -> s3 [0, 65535] { R702 += 1, R651 += 1, R652 += 1 };
  s0 -> s0 [0, 65535] { R701 += 1, R702 += 1 };
  s0 -> s4 [65, 65] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s0 -> s5 [65, 65] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s0 -> s6 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s0 -> s7 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s0 -> s1 [66, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s0 -> s2 [66, 65535] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s1 -> s1 [0, 64] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s1 -> s2 [0, 64] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s1 -> s4 [65, 65] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s1 -> s5 [65, 65] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s1 -> s6 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s1 -> s7 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s1 -> s1 [66, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s1 -> s2 [66, 65535] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s2 -> s11 [0, 64] { R702 += 1, R652 += 1 };
  s2 -> s2 [0, 64] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s2 -> s8 [65, 65] { R702 += 1, R652 += 1 };
  s2 -> s6 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s2 -> s12 [65, 65] { R702 += 1, R652 += 1 };
  s2 -> s7 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s2 -> s11 [66, 65535] { R702 += 1, R652 += 1 };
  s2 -> s2 [66, 65535] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s3 -> s1 [0, 64] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s3 -> s2 [0, 64] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s3 -> s3 [0, 65535] { R702 += 1, R651 += 1, R652 += 1 };
  s3 -> s4 [65, 65] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s3 -> s5 [65, 65] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s3 -> s6 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s3 -> s7 [65, 65] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s3 -> s1 [66, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s3 -> s2 [66, 65535] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s5 -> s5 [0, 65535] { R702 += 1, R652 += 1, R609 += 1, R610 += 1 };
  s5 -> s6 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s6 -> s8 [0, 65535] { R702 += 1, R652 += 1 };
  s6 -> s6 [0, 65535] { R702 += 1, R652 += 1, R610 += 1, R611 += 1 };
  s8 -> s8 [0, 65535] { R702 += 1, R652 += 1 };
  s8 -> s9 [0, 65535] { R702 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R702 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R702 += 1, R652 += 1 };
  s11 -> s11 [0, 65535] { R702 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [65, 65] { R702 += 1, R652 += 1 };
  s11 -> s12 [65, 65] { R702 += 1, R652 += 1 };
  s11 -> s11 [66, 65535] { R702 += 1, R652 += 1 };
  s12 -> s12 [0, 65535] { R702 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R704 += 1, R654 += 1 };
  s0 -> s0 [0, 65535] { R703 += 1, R704 += 1 };
  s0 -> s2 [0, 65535] { R704 += 1, R653 += 1, R654 += 1 };
  s0 -> s3 [65, 65] { R704 += 1, R654 += 1 };
  s0 -> s4 [65, 65] { R704 += 1, R654 += 1 };
  s0 -> s1 [66, 65535] { R704 += 1, R654 += 1 };
  s1 -> s1 [0, 64] { R704 += 1, R654 += 1 };
  s1 -> s1 [0, 65535] { R704 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R704 += 1, R654 += 1 };
  s1 -> s4 [65, 65] { R704 += 1, R654 += 1 };
  s1 -> s1 [66, 65535] { R704 += 1, R654 += 1 };
  s2 -> s1 [0, 64] { R704 += 1, R654 += 1 };
  s2 -> s2 [0, 65535] { R704 += 1, R653 += 1, R654 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R704 += 1, R654 += 1 };
  s2 -> s4 [65, 65] { R704 += 1, R654 += 1 };
  s2 -> s1 [66, 65535] { R704 += 1, R654 += 1 };
  s3 -> s3 [0, 65535] { R704 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R704 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R704 += 1, R654 += 1 };
  s5 -> s5 [0, 65535] { R704 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s0 -> s0 [0, 65535] { R705 += 1, R706 += 1 };
  s0 -> s2 [0, 65535] { R706 += 1, R655 += 1, R656 += 1 };
  s0 -> s3 [65, 65] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s0 -> s4 [65, 65] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s0 -> s1 [66, 65535] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 64] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [0, 65535] { R706 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [65, 65] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s1 -> s1 [66, 65535] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [0, 64] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R706 += 1, R655 += 1, R656 += 1 };
  s2 -> s3 [65, 65] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s2 -> s4 [65, 65] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s2 -> s1 [66, 65535] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R706 += 1 };
  s4 -> s5 [0, 65535] { R706 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R706 += 1, R656 += 1, R615 += 1, R616 += 1 };
  s5 -> s5 [0, 65535] { R706 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R708 += 1, R658 += 1 };
  s0 -> s0 [0, 65535] { R707 += 1, R708 += 1 };
  s0 -> s2 [0, 65535] { R708 += 1, R657 += 1, R658 += 1 };
  s0 -> s3 [65, 65] { R708 += 1, R658 += 1 };
  s0 -> s4 [65, 65] { R708 += 1, R658 += 1 };
  s0 -> s1 [66, 65535] { R708 += 1, R658 += 1 };
  s1 -> s1 [0, 64] { R708 += 1, R658 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R708 += 1 };
  s1 -> s3 [65, 65] { R708 += 1, R658 += 1 };
  s1 -> s4 [65, 65] { R708 += 1, R658 += 1 };
  s1 -> s1 [66, 65535] { R708 += 1, R658 += 1 };
  s2 -> s1 [0, 64] { R708 += 1, R658 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R708 += 1, R657 += 1, R658 += 1 };
  s2 -> s3 [65, 65] { R708 += 1, R658 += 1 };
  s2 -> s4 [65, 65] { R708 += 1, R658 += 1 };
  s2 -> s1 [66, 65535] { R708 += 1, R658 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R708 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R708 += 1 };
  s4 -> s4 [0, 65535] { R708 += 1, R658 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R708 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R640 && R2 = R708 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R621 = 0 && R622 = R640 && R623 = 0 && R624 = R640 && R625 = 0 && R626 = R640 && R627 = 0 && R628 = R640 && R629 = 0 && R630 = R640 && R631 = 0 && R632 = R640 && R633 = 0 && R634 = R640 && R635 = 0 && R636 = R640 && R637 = 0 && R638 = R640 && R639 = 0 && R651 = 0 && R652 = 0 && R659 = 10 && R660 = R708 && R661 = 10 && R662 = R708 && R663 = 10 && R664 = R708 && R665 = 10 && R666 = R708 && R667 = 10 && R668 = R708 && R669 = 10 && R670 = R708 && R671 = 10 && R672 = R708 && R673 = 10 && R674 = R708 && R675 = 10 && R676 = R708 && R677 = 10 && R678 = R708 && R679 = 10 && R680 = R708 && R681 = 10 && R682 = R708 && R683 = 10 && R684 = R708 && R685 = 10 && R686 = R708 && R687 = 10 && R688 = R708 && R689 = 10 && R690 = R708 && R691 = 10 && R692 = R708 && R693 = 10 && R694 = R708 && R695 = 10 && R696 = R708 && R697 = 10 && R698 = R708 && R699 = 10 && R700 = R708 && R701 = 10 && R702 = R708 && R703 = 10 && R704 = R708 && R705 = 10 && R706 = R708 && R707 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R640 && 9 < R708 && (R14 = 0 || (R641 = 0 && R642 = 0)) && (R14 = 0 || (R643 = 0 && R644 = 0)) && (R14 = 0 || (R645 = 0 && R646 = 0)) && (R14 = 0 || (R647 = 0 && R648 = 0)) && (R14 = 0 || (R649 = 0 && R650 = 0)) && (R14 = 0 || (R653 = 0 && R654 = 0)) && (R14 = 0 || (R655 = 0 && R656 = 0)) && (R14 = 0 || (R657 = 0 && R658 = 0)) && (R614 + R611 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R614 + R611 = 0 || (R612 + R609 = 0 && R613 + R610 = 0)) && (R620 + R617 = 0 || (R618 + R615 = 0 && R619 + R616 = 0));
// End of Parikh automata intersection problem
