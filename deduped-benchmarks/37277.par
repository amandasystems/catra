// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R13, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R29, R3, R30, R31, R32, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R7, R8;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R372 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s1 [45, 45] { R372 += 1 };
  s0 -> s2 [46, 46] { R372 += 1 };
  s0 -> s1 [48, 62] { R372 += 1 };
  s0 -> s3 [65, 65] { R372 += 1 };
  s0 -> s1 [66, 65535] { R372 += 1 };
  s1 -> s1 [0, 43] { R372 += 1 };
  s1 -> s1 [45, 45] { R372 += 1 };
  s1 -> s2 [46, 46] { R372 += 1 };
  s1 -> s1 [48, 62] { R372 += 1 };
  s1 -> s3 [65, 65] { R372 += 1 };
  s1 -> s1 [66, 65535] { R372 += 1 };
  s2 -> s1 [0, 43] { R372 += 1 };
  s2 -> s1 [45, 45] { R372 += 1 };
  s2 -> s2 [46, 46] { R372 += 1 };
  s2 -> s1 [48, 62] { R372 += 1 };
  s2 -> s3 [65, 65] { R372 += 1 };
  s2 -> s1 [66, 114] { R372 += 1 };
  s2 -> s8 [115, 115] { R372 += 1 };
  s2 -> s1 [116, 65535] { R372 += 1 };
  s3 -> s3 [0, 43] { R372 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R372 += 1 };
  s3 -> s4 [46, 46] { R372 += 1 };
  s3 -> s3 [48, 62] { R372 += 1 };
  s3 -> s3 [65, 65535] { R372 += 1 };
  s4 -> s3 [0, 43] { R372 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R372 += 1 };
  s4 -> s4 [46, 46] { R372 += 1 };
  s4 -> s3 [48, 62] { R372 += 1 };
  s4 -> s3 [65, 114] { R372 += 1 };
  s4 -> s5 [115, 115] { R372 += 1 };
  s4 -> s3 [116, 65535] { R372 += 1 };
  s5 -> s3 [0, 43] { R372 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R372 += 1 };
  s5 -> s4 [46, 46] { R372 += 1 };
  s5 -> s3 [48, 62] { R372 += 1 };
  s5 -> s3 [65, 110] { R372 += 1 };
  s5 -> s6 [111, 111] { R372 += 1 };
  s5 -> s3 [112, 65535] { R372 += 1 };
  s6 -> s3 [0, 43] { R372 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R372 += 1 };
  s6 -> s4 [46, 46] { R372 += 1 };
  s6 -> s3 [48, 62] { R372 += 1 };
  s6 -> s3 [65, 98] { R372 += 1 };
  s6 -> s7 [99, 99] { R372 += 1 };
  s6 -> s3 [100, 65535] { R372 += 1 };
  s7 -> s3 [0, 43] { R372 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R372 += 1 };
  s7 -> s4 [46, 46] { R372 += 1 };
  s7 -> s3 [48, 62] { R372 += 1 };
  s7 -> s3 [65, 106] { R372 += 1 };
  s7 -> s3 [108, 65535] { R372 += 1 };
  s8 -> s1 [0, 43] { R372 += 1 };
  s8 -> s1 [45, 45] { R372 += 1 };
  s8 -> s2 [46, 46] { R372 += 1 };
  s8 -> s1 [48, 62] { R372 += 1 };
  s8 -> s3 [65, 65] { R372 += 1 };
  s8 -> s1 [66, 110] { R372 += 1 };
  s8 -> s9 [111, 111] { R372 += 1 };
  s8 -> s1 [112, 65535] { R372 += 1 };
  s9 -> s1 [0, 43] { R372 += 1 };
  s9 -> s1 [45, 45] { R372 += 1 };
  s9 -> s2 [46, 46] { R372 += 1 };
  s9 -> s1 [48, 62] { R372 += 1 };
  s9 -> s3 [65, 65] { R372 += 1 };
  s9 -> s1 [66, 98] { R372 += 1 };
  s9 -> s10 [99, 99] { R372 += 1 };
  s9 -> s1 [100, 65535] { R372 += 1 };
  s10 -> s1 [0, 43] { R372 += 1 };
  s10 -> s1 [45, 45] { R372 += 1 };
  s10 -> s2 [46, 46] { R372 += 1 };
  s10 -> s1 [48, 62] { R372 += 1 };
  s10 -> s3 [65, 65] { R372 += 1 };
  s10 -> s1 [66, 106] { R372 += 1 };
  s10 -> s1 [108, 65535] { R372 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 65535] { R374 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s1 -> s1 [0, 65535] { R374 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R376 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s3 [58, 58] { R376 += 1 };
  s0 -> s1 [59, 65535] { R376 += 1 };
  s1 -> s1 [0, 57] { R376 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R376 += 1 };
  s1 -> s1 [59, 65535] { R376 += 1 };
  s2 -> s1 [0, 57] { R376 += 1 };
  s2 -> s2 [0, 65535] { R376 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [58, 58] { R376 += 1 };
  s2 -> s1 [59, 65535] { R376 += 1 };
  s3 -> s3 [0, 65535] { R376 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R378 += 1 };
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R8 += 1 };
  s0 -> s3 [65, 65] { R378 += 1 };
  s0 -> s1 [66, 65535] { R378 += 1 };
  s1 -> s1 [0, 64] { R378 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R378 += 1 };
  s1 -> s1 [66, 65535] { R378 += 1 };
  s2 -> s1 [0, 64] { R378 += 1 };
  s2 -> s2 [0, 65535] { R378 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R378 += 1 };
  s2 -> s1 [66, 65535] { R378 += 1 };
  s3 -> s3 [0, 65535] { R378 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R380 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R380 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s3 [91, 91] { R380 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R380 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R380 += 1 };
  s1 -> s1 [0, 65535] { R380 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 90] { R380 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R380 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R380 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R380 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R380 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R380 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R382 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s0 -> s2 [0, 65535] { R382 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R382 += 1, R17 += 1, R18 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R382 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R382 += 1 };
  s2 -> s2 [0, 65535] { R382 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R382 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R384 += 1, R334 += 1 };
  s0 -> s2 [0, 65535] { R384 += 1, R333 += 1, R334 += 1 };
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s1 [66, 65535] { R384 += 1, R334 += 1 };
  s1 -> s1 [0, 64] { R384 += 1, R334 += 1 };
  s1 -> s1 [0, 65535] { R384 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R384 += 1, R334 += 1 };
  s2 -> s1 [0, 64] { R384 += 1, R334 += 1 };
  s2 -> s2 [0, 65535] { R384 += 1, R333 += 1, R334 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R384 += 1, R334 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s1 [0, 65535] { R386 += 1, R336 += 1, R13 += 1 };
  s0 -> s2 [0, 65535] { R386 += 1, R335 += 1, R336 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s1 -> s1 [0, 65535] { R386 += 1, R336 += 1, R13 += 1 };
  s1 -> s4 [0, 65535] { R386 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R386 += 1, R336 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R386 += 1, R335 += 1, R336 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R386 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R388 += 1, R338 += 1 };
  s0 -> s2 [0, 65535] { R388 += 1, R337 += 1, R338 += 1 };
  s0 -> s0 [0, 65535] { R387 += 1, R388 += 1 };
  s0 -> s3 [87, 87] { R388 += 1, R338 += 1 };
  s0 -> s1 [88, 65535] { R388 += 1, R338 += 1 };
  s1 -> s1 [0, 65] { R388 += 1, R338 += 1 };
  s1 -> s3 [87, 87] { R388 += 1, R338 += 1 };
  s1 -> s1 [88, 65535] { R388 += 1, R338 += 1 };
  s2 -> s1 [0, 65] { R388 += 1, R338 += 1 };
  s2 -> s2 [0, 65535] { R388 += 1, R337 += 1, R338 += 1 };
  s2 -> s3 [87, 87] { R388 += 1, R338 += 1 };
  s2 -> s1 [88, 65535] { R388 += 1, R338 += 1 };
  s3 -> s3 [0, 65] { R388 += 1, R338 += 1 };
  s3 -> s3 [0, 65535] { R388 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [87, 65535] { R388 += 1, R338 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s0 [0, 65535] { R389 += 1, R390 += 1 };
  s0 -> s1 [0, 65535] { R390 += 1, R339 += 1, R340 += 1 };
  s0 -> s2 [0, 65535] { R390 += 1, R340 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R390 += 1, R339 += 1, R340 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R390 += 1, R340 += 1, R26 += 1 };
  s2 -> s3 [0, 65535] { R390 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R390 += 1, R340 += 1, R26 += 1 };
  s3 -> s3 [0, 65535] { R390 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R392 += 1, R342 += 1 };
  s0 -> s2 [0, 65535] { R392 += 1, R342 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R391 += 1, R392 += 1 };
  s0 -> s3 [0, 65535] { R392 += 1, R341 += 1, R342 += 1 };
  s0 -> s1 [88, 65535] { R392 += 1, R342 += 1 };
  s1 -> s1 [0, 86] { R392 += 1, R342 += 1 };
  s1 -> s1 [0, 65535] { R392 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R392 += 1, R342 += 1 };
  s2 -> s1 [0, 86] { R392 += 1, R342 += 1 };
  s2 -> s2 [0, 65535] { R392 += 1, R342 += 1, R28 += 1 };
  s2 -> s5 [0, 65535] { R392 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R392 += 1, R342 += 1 };
  s3 -> s1 [0, 86] { R392 += 1, R342 += 1 };
  s3 -> s2 [0, 65535] { R392 += 1, R342 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R392 += 1, R341 += 1, R342 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R392 += 1, R342 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R392 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R394 += 1, R344 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R393 += 1, R394 += 1 };
  s0 -> s2 [0, 65535] { R394 += 1, R343 += 1, R344 += 1 };
  s0 -> s3 [0, 65535] { R394 += 1, R344 += 1, R31 += 1, R32 += 1 };
  s0 -> s1 [88, 65535] { R394 += 1, R344 += 1, R32 += 1 };
  s1 -> s1 [0, 86] { R394 += 1, R344 += 1, R32 += 1 };
  s1 -> s4 [0, 65535] { R394 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R394 += 1, R344 += 1 };
  s1 -> s1 [88, 65535] { R394 += 1, R344 += 1, R32 += 1 };
  s2 -> s1 [0, 86] { R394 += 1, R344 += 1, R32 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R394 += 1, R343 += 1, R344 += 1 };
  s2 -> s3 [0, 65535] { R394 += 1, R344 += 1, R31 += 1, R32 += 1 };
  s2 -> s1 [88, 65535] { R394 += 1, R344 += 1, R32 += 1 };
  s3 -> s1 [0, 86] { R394 += 1, R344 += 1, R32 += 1 };
  s3 -> s4 [0, 65535] { R394 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R394 += 1, R344 += 1, R31 += 1, R32 += 1 };
  s3 -> s1 [88, 65535] { R394 += 1, R344 += 1, R32 += 1 };
  s4 -> s4 [0, 65535] { R394 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R396 += 1, R346 += 1 };
  s0 -> s2 [0, 65535] { R396 += 1, R345 += 1, R346 += 1 };
  s0 -> s3 [0, 65535] { R396 += 1, R346 += 1, R325 += 1, R326 += 1 };
  s0 -> s0 [0, 65535] { R395 += 1, R396 += 1 };
  s1 -> s1 [0, 65535] { R396 += 1, R346 += 1 };
  s1 -> s4 [0, 65535] { R396 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R396 += 1, R346 += 1 };
  s2 -> s2 [0, 65535] { R396 += 1, R345 += 1, R346 += 1 };
  s2 -> s3 [0, 65535] { R396 += 1, R346 += 1, R325 += 1, R326 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R396 += 1, R346 += 1 };
  s3 -> s4 [0, 65535] { R396 += 1 };
  s3 -> s3 [0, 65535] { R396 += 1, R346 += 1, R325 += 1, R326 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R396 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s1 [0, 65535] { R398 += 1, R347 += 1, R348 += 1 };
  s0 -> s2 [0, 65535] { R398 += 1, R348 += 1 };
  s0 -> s0 [0, 65535] { R397 += 1, R398 += 1 };
  s1 -> s1 [0, 65535] { R398 += 1, R347 += 1, R348 += 1 };
  s1 -> s2 [0, 65535] { R398 += 1, R348 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R398 += 1, R348 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R398 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R398 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s0 [0, 65535] { R399 += 1, R400 += 1 };
  s0 -> s1 [0, 65535] { R400 += 1, R350 += 1, R331 += 1, R332 += 1 };
  s0 -> s2 [0, 65535] { R400 += 1, R350 += 1, R330 += 1, R331 += 1 };
  s0 -> s3 [0, 65535] { R400 += 1, R349 += 1, R350 += 1 };
  s1 -> s1 [0, 65535] { R400 += 1, R350 += 1, R331 += 1, R332 += 1 };
  s1 -> s6 [0, 65535] { R400 += 1, R350 += 1 };
  s1 -> s5 [0, 65535] { R400 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R400 += 1, R350 += 1, R331 += 1, R332 += 1 };
  s2 -> s5 [0, 65535] { R400 += 1 };
  s2 -> s2 [0, 65535] { R400 += 1, R350 += 1, R330 += 1, R331 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R400 += 1, R350 += 1, R331 += 1, R332 += 1 };
  s3 -> s2 [0, 65535] { R400 += 1, R350 += 1, R330 += 1, R331 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R400 += 1, R349 += 1, R350 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R400 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R400 += 1, R350 += 1 };
  s6 -> s5 [0, 65535] { R400 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R402 += 1, R351 += 1, R352 += 1 };
  s0 -> s0 [0, 65535] { R401 += 1, R402 += 1 };
  s0 -> s2 [0, 65535] { R402 += 1, R352 += 1 };
  s1 -> s1 [0, 65535] { R402 += 1, R351 += 1, R352 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R402 += 1, R352 += 1 };
  s2 -> s3 [0, 65535] { R402 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R402 += 1, R352 += 1 };
  s3 -> s3 [0, 65535] { R402 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R404 += 1, R353 += 1, R354 += 1 };
  s0 -> s0 [0, 65535] { R403 += 1, R404 += 1 };
  s0 -> s2 [0, 65535] { R404 += 1, R354 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R404 += 1, R353 += 1, R354 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R404 += 1, R354 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R404 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R404 += 1, R354 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R404 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R406 += 1, R356 += 1 };
  s0 -> s0 [0, 65535] { R405 += 1, R406 += 1 };
  s0 -> s2 [0, 65535] { R406 += 1, R355 += 1, R356 += 1 };
  s0 -> s3 [65, 65] { R406 += 1, R356 += 1 };
  s0 -> s4 [65, 65] { R406 += 1, R356 += 1 };
  s0 -> s1 [88, 65535] { R406 += 1, R356 += 1 };
  s1 -> s1 [0, 64] { R406 += 1, R356 += 1 };
  s1 -> s1 [0, 65535] { R406 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R406 += 1, R356 += 1 };
  s1 -> s4 [65, 65] { R406 += 1, R356 += 1 };
  s1 -> s1 [88, 65535] { R406 += 1, R356 += 1 };
  s2 -> s1 [0, 64] { R406 += 1, R356 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R406 += 1, R355 += 1, R356 += 1 };
  s2 -> s3 [65, 65] { R406 += 1, R356 += 1 };
  s2 -> s4 [65, 65] { R406 += 1, R356 += 1 };
  s2 -> s1 [88, 65535] { R406 += 1, R356 += 1 };
  s3 -> s3 [0, 65535] { R406 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R406 += 1, R356 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R406 += 1 };
  s4 -> s4 [88, 65535] { R406 += 1, R356 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R408 += 1, R358 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R407 += 1, R408 += 1 };
  s0 -> s2 [0, 65535] { R408 += 1, R357 += 1, R358 += 1 };
  s0 -> s3 [65, 65] { R408 += 1, R358 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R408 += 1, R358 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R408 += 1, R358 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R408 += 1, R358 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R408 += 1 };
  s1 -> s3 [65, 65] { R408 += 1, R358 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R408 += 1, R358 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R408 += 1, R358 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R408 += 1, R358 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R408 += 1, R357 += 1, R358 += 1 };
  s2 -> s3 [65, 65] { R408 += 1, R358 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R408 += 1, R358 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R408 += 1, R358 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R408 += 1, R358 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R408 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R408 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R408 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R410 += 1, R360 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R410 += 1, R359 += 1, R360 += 1 };
  s0 -> s0 [0, 65535] { R409 += 1, R410 += 1 };
  s0 -> s3 [65, 65] { R410 += 1, R360 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R410 += 1, R360 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R410 += 1, R360 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R410 += 1, R360 += 1, R27 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R410 += 1 };
  s1 -> s3 [65, 65] { R410 += 1, R360 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R410 += 1, R360 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R410 += 1, R360 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R410 += 1, R360 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R410 += 1, R359 += 1, R360 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R410 += 1, R360 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R410 += 1, R360 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R410 += 1, R360 += 1, R27 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R410 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R410 += 1 };
  s4 -> s4 [0, 65535] { R410 += 1, R360 += 1, R27 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R410 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R411 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R412 += 1, R361 += 1, R362 += 1 };
  s0 -> s3 [65, 65] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R412 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R412 += 1, R361 += 1, R362 += 1 };
  s2 -> s3 [65, 65] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R412 += 1, R362 += 1, R29 += 1, R30 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R412 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R412 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R412 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s0 -> s2 [0, 64] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s0 -> s3 [0, 65535] { R414 += 1, R363 += 1, R364 += 1 };
  s0 -> s0 [0, 65535] { R413 += 1, R414 += 1 };
  s0 -> s4 [65, 65] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s0 -> s5 [65, 65] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s0 -> s6 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s0 -> s7 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s0 -> s1 [66, 65535] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s0 -> s2 [66, 65535] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s1 -> s1 [0, 64] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s1 -> s2 [0, 64] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s1 -> s4 [65, 65] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s1 -> s5 [65, 65] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s1 -> s6 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s1 -> s7 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s1 -> s1 [66, 65535] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s1 -> s2 [66, 65535] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s2 -> s2 [0, 64] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R414 += 1 };
  s2 -> s6 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s2 -> s7 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s2 -> s2 [66, 65535] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s3 -> s1 [0, 64] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s3 -> s2 [0, 64] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s3 -> s3 [0, 65535] { R414 += 1, R363 += 1, R364 += 1 };
  s3 -> s4 [65, 65] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s3 -> s5 [65, 65] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s3 -> s6 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s3 -> s7 [65, 65] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s3 -> s1 [66, 65535] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s3 -> s2 [66, 65535] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s5 -> s5 [0, 65535] { R414 += 1, R364 += 1, R321 += 1, R322 += 1 };
  s5 -> s6 [0, 65535] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s6 -> s9 [0, 65535] { R414 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R414 += 1, R364 += 1, R322 += 1, R323 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R414 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R414 += 1 };
  s9 -> s8 [0, 65535];
  accepting s8, s2, s9, s6, s7;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R416 += 1, R366 += 1 };
  s0 -> s0 [0, 65535] { R415 += 1, R416 += 1 };
  s0 -> s2 [0, 65535] { R416 += 1, R365 += 1, R366 += 1 };
  s0 -> s3 [65, 65] { R416 += 1, R366 += 1 };
  s0 -> s4 [65, 65] { R416 += 1, R366 += 1 };
  s0 -> s1 [66, 65535] { R416 += 1, R366 += 1 };
  s1 -> s1 [0, 64] { R416 += 1, R366 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R416 += 1 };
  s1 -> s3 [65, 65] { R416 += 1, R366 += 1 };
  s1 -> s4 [65, 65] { R416 += 1, R366 += 1 };
  s1 -> s1 [66, 65535] { R416 += 1, R366 += 1 };
  s2 -> s1 [0, 64] { R416 += 1, R366 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R416 += 1, R365 += 1, R366 += 1 };
  s2 -> s3 [65, 65] { R416 += 1, R366 += 1 };
  s2 -> s4 [65, 65] { R416 += 1, R366 += 1 };
  s2 -> s1 [66, 65535] { R416 += 1, R366 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R416 += 1 };
  s3 -> s3 [0, 65535] { R416 += 1, R366 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R416 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R416 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s0 -> s2 [0, 65535] { R418 += 1, R367 += 1, R368 += 1 };
  s0 -> s0 [0, 65535] { R417 += 1, R418 += 1 };
  s0 -> s3 [65, 65] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s0 -> s4 [65, 65] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s0 -> s1 [66, 65535] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s1 -> s1 [0, 64] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s1 -> s1 [0, 65535] { R418 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s1 -> s4 [65, 65] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s1 -> s1 [66, 65535] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s2 -> s1 [0, 64] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s2 -> s2 [0, 65535] { R418 += 1, R367 += 1, R368 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s2 -> s4 [65, 65] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s2 -> s1 [66, 65535] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s3 -> s3 [0, 65535] { R418 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R418 += 1 };
  s4 -> s4 [0, 65535] { R418 += 1, R368 += 1, R327 += 1, R328 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R418 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R420 += 1, R370 += 1 };
  s0 -> s0 [0, 65535] { R419 += 1, R420 += 1 };
  s0 -> s2 [0, 65535] { R420 += 1, R369 += 1, R370 += 1 };
  s0 -> s3 [65, 65] { R420 += 1, R370 += 1 };
  s0 -> s4 [65, 65] { R420 += 1, R370 += 1 };
  s0 -> s1 [66, 65535] { R420 += 1, R370 += 1 };
  s1 -> s1 [0, 64] { R420 += 1, R370 += 1 };
  s1 -> s1 [0, 65535] { R420 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R420 += 1, R370 += 1 };
  s1 -> s4 [65, 65] { R420 += 1, R370 += 1 };
  s1 -> s1 [66, 65535] { R420 += 1, R370 += 1 };
  s2 -> s1 [0, 64] { R420 += 1, R370 += 1 };
  s2 -> s2 [0, 65535] { R420 += 1, R369 += 1, R370 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R420 += 1, R370 += 1 };
  s2 -> s4 [65, 65] { R420 += 1, R370 += 1 };
  s2 -> s1 [66, 65535] { R420 += 1, R370 += 1 };
  s3 -> s3 [0, 65535] { R420 += 1, R370 += 1 };
  s3 -> s6 [0, 65535] { R420 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R420 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R420 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R352 && R2 = R420 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R333 = 0 && R334 = R352 && R335 = 0 && R336 = R352 && R337 = 0 && R338 = R352 && R339 = 0 && R340 = R352 && R341 = 0 && R342 = R352 && R343 = 0 && R344 = R352 && R345 = 0 && R346 = R352 && R347 = 0 && R348 = R352 && R349 = 0 && R350 = R352 && R351 = 0 && R363 = 0 && R364 = 0 && R371 = 10 && R372 = R420 && R373 = 10 && R374 = R420 && R375 = 10 && R376 = R420 && R377 = 10 && R378 = R420 && R379 = 10 && R380 = R420 && R381 = 10 && R382 = R420 && R383 = 10 && R384 = R420 && R385 = 10 && R386 = R420 && R387 = 10 && R388 = R420 && R389 = 10 && R390 = R420 && R391 = 10 && R392 = R420 && R393 = 10 && R394 = R420 && R395 = 10 && R396 = R420 && R397 = 10 && R398 = R420 && R399 = 10 && R400 = R420 && R401 = 10 && R402 = R420 && R403 = 10 && R404 = R420 && R405 = 10 && R406 = R420 && R407 = 10 && R408 = R420 && R409 = 10 && R410 = R420 && R411 = 10 && R412 = R420 && R413 = 10 && R414 = R420 && R415 = 10 && R416 = R420 && R417 = 10 && R418 = R420 && R419 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R352 && 9 < R420 && (R14 = 0 || (R353 = 0 && R354 = 0)) && (R14 = 0 || (R355 = 0 && R356 = 0)) && (R14 = 0 || (R357 = 0 && R358 = 0)) && (R14 = 0 || (R359 = 0 && R360 = 0)) && (R14 = 0 || (R361 = 0 && R362 = 0)) && (R14 = 0 || (R365 = 0 && R366 = 0)) && (R14 = 0 || (R367 = 0 && R368 = 0)) && (R14 = 0 || (R369 = 0 && R370 = 0)) && (R326 + R323 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R326 + R323 = 0 || (R324 + R321 = 0 && R325 + R322 = 0)) && (R332 + R329 = 0 || (R330 + R327 = 0 && R331 + R328 = 0));
// End of Parikh automata intersection problem
