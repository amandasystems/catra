// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R14, R15, R16, R17, R18, R2, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining P58
automaton P58_0 {
  init s0;
  s0 -> s1 [119, 119];
  accepting s1;
};
};
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s1 [109, 109];
  s1 -> s2 [111, 111];
  s2 -> s3 [110, 110];
  s3 -> s4 [103, 103];
  s4 -> s5 [111, 111];
  s5 -> s6 [100, 100];
  s6 -> s7 [98, 98];
  s7 -> s8 [58, 58];
  s8 -> s9 [47, 47];
  s9 -> s10 [47, 47];
  s10 -> s10 [0, 65535];
  accepting s10;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 43] { R84 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s1 [45, 45] { R84 += 1 };
  s0 -> s2 [46, 46] { R84 += 1 };
  s0 -> s1 [48, 62] { R84 += 1 };
  s0 -> s3 [65, 65] { R84 += 1 };
  s0 -> s1 [66, 65535] { R84 += 1 };
  s1 -> s1 [0, 43] { R84 += 1 };
  s1 -> s1 [45, 45] { R84 += 1 };
  s1 -> s2 [46, 46] { R84 += 1 };
  s1 -> s1 [48, 62] { R84 += 1 };
  s1 -> s3 [65, 65] { R84 += 1 };
  s1 -> s1 [66, 65535] { R84 += 1 };
  s2 -> s1 [0, 43] { R84 += 1 };
  s2 -> s1 [45, 45] { R84 += 1 };
  s2 -> s2 [46, 46] { R84 += 1 };
  s2 -> s1 [48, 62] { R84 += 1 };
  s2 -> s3 [65, 65] { R84 += 1 };
  s2 -> s1 [66, 114] { R84 += 1 };
  s2 -> s8 [115, 115] { R84 += 1 };
  s2 -> s1 [116, 65535] { R84 += 1 };
  s3 -> s3 [0, 43] { R84 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [45, 45] { R84 += 1 };
  s3 -> s4 [46, 46] { R84 += 1 };
  s3 -> s3 [48, 62] { R84 += 1 };
  s3 -> s3 [65, 65535] { R84 += 1 };
  s4 -> s3 [0, 43] { R84 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s3 [45, 45] { R84 += 1 };
  s4 -> s4 [46, 46] { R84 += 1 };
  s4 -> s3 [48, 62] { R84 += 1 };
  s4 -> s3 [65, 114] { R84 += 1 };
  s4 -> s5 [115, 115] { R84 += 1 };
  s4 -> s3 [116, 65535] { R84 += 1 };
  s5 -> s3 [0, 43] { R84 += 1 };
  s5 -> s5 [0, 65535];
  s5 -> s3 [45, 45] { R84 += 1 };
  s5 -> s4 [46, 46] { R84 += 1 };
  s5 -> s3 [48, 62] { R84 += 1 };
  s5 -> s3 [65, 110] { R84 += 1 };
  s5 -> s6 [111, 111] { R84 += 1 };
  s5 -> s3 [112, 65535] { R84 += 1 };
  s6 -> s3 [0, 43] { R84 += 1 };
  s6 -> s6 [0, 65535];
  s6 -> s3 [45, 45] { R84 += 1 };
  s6 -> s4 [46, 46] { R84 += 1 };
  s6 -> s3 [48, 62] { R84 += 1 };
  s6 -> s3 [65, 98] { R84 += 1 };
  s6 -> s7 [99, 99] { R84 += 1 };
  s6 -> s3 [100, 65535] { R84 += 1 };
  s7 -> s3 [0, 43] { R84 += 1 };
  s7 -> s7 [0, 65535];
  s7 -> s3 [45, 45] { R84 += 1 };
  s7 -> s4 [46, 46] { R84 += 1 };
  s7 -> s3 [48, 62] { R84 += 1 };
  s7 -> s3 [65, 106] { R84 += 1 };
  s7 -> s3 [108, 65535] { R84 += 1 };
  s8 -> s1 [0, 43] { R84 += 1 };
  s8 -> s1 [45, 45] { R84 += 1 };
  s8 -> s2 [46, 46] { R84 += 1 };
  s8 -> s1 [48, 62] { R84 += 1 };
  s8 -> s3 [65, 65] { R84 += 1 };
  s8 -> s1 [66, 110] { R84 += 1 };
  s8 -> s9 [111, 111] { R84 += 1 };
  s8 -> s1 [112, 65535] { R84 += 1 };
  s9 -> s1 [0, 43] { R84 += 1 };
  s9 -> s1 [45, 45] { R84 += 1 };
  s9 -> s2 [46, 46] { R84 += 1 };
  s9 -> s1 [48, 62] { R84 += 1 };
  s9 -> s3 [65, 65] { R84 += 1 };
  s9 -> s1 [66, 98] { R84 += 1 };
  s9 -> s10 [99, 99] { R84 += 1 };
  s9 -> s1 [100, 65535] { R84 += 1 };
  s10 -> s1 [0, 43] { R84 += 1 };
  s10 -> s1 [45, 45] { R84 += 1 };
  s10 -> s2 [46, 46] { R84 += 1 };
  s10 -> s1 [48, 62] { R84 += 1 };
  s10 -> s3 [65, 65] { R84 += 1 };
  s10 -> s1 [66, 106] { R84 += 1 };
  s10 -> s1 [108, 65535] { R84 += 1 };
  accepting s3, s4, s5, s6, s7;
};
automaton uri_3 {
  init s0;
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s1 [0, 65535] { R86 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R86 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_4 {
  init s0;
  s0 -> s1 [0, 57] { R88 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R7 += 1 };
  s0 -> s3 [58, 58] { R88 += 1 };
  s0 -> s1 [59, 65535] { R88 += 1 };
  s1 -> s1 [0, 57] { R88 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [58, 58] { R88 += 1 };
  s1 -> s1 [59, 65535] { R88 += 1 };
  s2 -> s1 [0, 57] { R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R88 += 1, R7 += 1 };
  s2 -> s3 [58, 58] { R88 += 1 };
  s2 -> s1 [59, 65535] { R88 += 1 };
  s3 -> s3 [0, 65535] { R88 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 64] { R90 += 1 };
  s0 -> s2 [0, 65535] { R90 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s3 [65, 65] { R90 += 1 };
  s0 -> s1 [66, 65535] { R90 += 1 };
  s1 -> s1 [0, 64] { R90 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R90 += 1 };
  s1 -> s1 [66, 65535] { R90 += 1 };
  s2 -> s1 [0, 64] { R90 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R90 += 1 };
  s2 -> s1 [66, 65535] { R90 += 1 };
  s3 -> s3 [0, 65535] { R90 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 90] { R92 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R92 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s3 [91, 91] { R92 += 1, R16 += 1 };
  s0 -> s1 [92, 65535] { R92 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R92 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R92 += 1, R16 += 1 };
  s2 -> s1 [0, 90] { R92 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R92 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [91, 91] { R92 += 1, R16 += 1 };
  s2 -> s1 [92, 65535] { R92 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R92 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R92 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton uri_7 {
  init s0;
  s0 -> s1 [0, 65535] { R94 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R94 += 1, R18 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s1 -> s1 [0, 65535] { R94 += 1, R17 += 1, R18 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R94 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R94 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R94 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R94 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 64] { R96 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [0, 65535] { R96 += 1, R45 += 1, R46 += 1 };
  s0 -> s1 [66, 65535] { R96 += 1, R46 += 1 };
  s1 -> s1 [0, 64] { R96 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R96 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R96 += 1, R46 += 1 };
  s2 -> s1 [0, 64] { R96 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R96 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R96 += 1, R46 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton uri_9 {
  init s0;
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s1 [0, 65535] { R98 += 1, R47 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R98 += 1, R48 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R98 += 1, R47 += 1, R48 += 1 };
  s1 -> s2 [0, 65535] { R98 += 1, R48 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R98 += 1, R48 += 1, R13 += 1 };
  s2 -> s3 [0, 65535] { R98 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R98 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_10 {
  init s0;
  s0 -> s1 [0, 65] { R100 += 1, R50 += 1 };
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R100 += 1, R49 += 1, R50 += 1 };
  s0 -> s3 [87, 87] { R100 += 1, R50 += 1 };
  s0 -> s1 [88, 65535] { R100 += 1, R50 += 1 };
  s1 -> s1 [0, 65] { R100 += 1, R50 += 1 };
  s1 -> s3 [87, 87] { R100 += 1, R50 += 1 };
  s1 -> s1 [88, 65535] { R100 += 1, R50 += 1 };
  s2 -> s1 [0, 65] { R100 += 1, R50 += 1 };
  s2 -> s2 [0, 65535] { R100 += 1, R49 += 1, R50 += 1 };
  s2 -> s3 [87, 87] { R100 += 1, R50 += 1 };
  s2 -> s1 [88, 65535] { R100 += 1, R50 += 1 };
  s3 -> s3 [0, 65] { R100 += 1, R50 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R100 += 1 };
  s3 -> s3 [87, 65535] { R100 += 1, R50 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_11 {
  init s0;
  s0 -> s1 [0, 65535] { R102 += 1, R52 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R51 += 1, R52 += 1 };
  s1 -> s4 [0, 65535] { R102 += 1 };
  s1 -> s1 [0, 65535] { R102 += 1, R52 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R102 += 1, R52 += 1, R26 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R51 += 1, R52 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R102 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_12 {
  init s0;
  s0 -> s1 [0, 86] { R104 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R54 += 1, R28 += 1 };
  s0 -> s3 [0, 65535] { R104 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s1 [88, 65535] { R104 += 1, R54 += 1 };
  s1 -> s1 [0, 86] { R104 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R104 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [88, 65535] { R104 += 1, R54 += 1 };
  s2 -> s1 [0, 86] { R104 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R104 += 1, R54 += 1, R28 += 1 };
  s2 -> s5 [0, 65535] { R104 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [88, 65535] { R104 += 1, R54 += 1 };
  s3 -> s1 [0, 86] { R104 += 1, R54 += 1 };
  s3 -> s2 [0, 65535] { R104 += 1, R54 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R104 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [88, 65535] { R104 += 1, R54 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R104 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_13 {
  init s0;
  s0 -> s1 [0, 86] { R106 += 1, R56 += 1, R32 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s3 [0, 65535] { R106 += 1, R56 += 1, R31 += 1, R32 += 1 };
  s0 -> s1 [88, 65535] { R106 += 1, R56 += 1, R32 += 1 };
  s1 -> s1 [0, 86] { R106 += 1, R56 += 1, R32 += 1 };
  s1 -> s1 [0, 65535] { R106 += 1, R56 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R106 += 1 };
  s1 -> s1 [88, 65535] { R106 += 1, R56 += 1, R32 += 1 };
  s2 -> s1 [0, 86] { R106 += 1, R56 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R106 += 1, R55 += 1, R56 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R106 += 1, R56 += 1, R31 += 1, R32 += 1 };
  s2 -> s1 [88, 65535] { R106 += 1, R56 += 1, R32 += 1 };
  s3 -> s1 [0, 86] { R106 += 1, R56 += 1, R32 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R106 += 1 };
  s3 -> s3 [0, 65535] { R106 += 1, R56 += 1, R31 += 1, R32 += 1 };
  s3 -> s1 [88, 65535] { R106 += 1, R56 += 1, R32 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R106 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_14 {
  init s0;
  s0 -> s1 [0, 65535] { R108 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R58 += 1, R36 += 1, R37 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s3 [0, 65535] { R108 += 1, R58 += 1, R37 += 1, R38 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R108 += 1, R57 += 1, R58 += 1 };
  s1 -> s2 [0, 65535] { R108 += 1, R58 += 1, R36 += 1, R37 += 1 };
  s1 -> s3 [0, 65535] { R108 += 1, R58 += 1, R37 += 1, R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R108 += 1, R58 += 1, R36 += 1, R37 += 1 };
  s2 -> s3 [0, 65535] { R108 += 1, R58 += 1, R37 += 1, R38 += 1 };
  s2 -> s5 [0, 65535] { R108 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R108 += 1, R58 += 1, R37 += 1, R38 += 1 };
  s3 -> s5 [0, 65535] { R108 += 1 };
  s3 -> s6 [0, 65535] { R108 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R108 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R108 += 1 };
  s6 -> s6 [0, 65535] { R108 += 1, R58 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_15 {
  init s0;
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s1 [0, 65535] { R110 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R59 += 1, R60 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R110 += 1, R60 += 1 };
  s1 -> s4 [0, 65535] { R110 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R110 += 1, R60 += 1 };
  s2 -> s2 [0, 65535] { R110 += 1, R59 += 1, R60 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R110 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_16 {
  init s0;
  s0 -> s1 [0, 65535] { R112 += 1, R62 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R61 += 1, R62 += 1 };
  s0 -> s3 [0, 65535] { R112 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R112 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1, R62 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [0, 65535] { R112 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R112 += 1, R62 += 1, R42 += 1, R43 += 1 };
  s2 -> s2 [0, 65535] { R112 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [0, 65535] { R112 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R112 += 1 };
  s3 -> s6 [0, 65535] { R112 += 1, R62 += 1 };
  s3 -> s3 [0, 65535] { R112 += 1, R62 += 1, R43 += 1, R44 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R112 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R112 += 1 };
  s6 -> s6 [0, 65535] { R112 += 1, R62 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_17 {
  init s0;
  s0 -> s1 [0, 65535] { R114 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R114 += 1, R64 += 1 };
  s1 -> s4 [0, 65535] { R114 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R114 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R114 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton uri_18 {
  init s0;
  s0 -> s1 [0, 65535] { R116 += 1, R65 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R66 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R65 += 1, R66 += 1 };
  s1 -> s2 [0, 65535] { R116 += 1, R66 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R116 += 1 };
  s2 -> s2 [0, 65535] { R116 += 1, R66 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_19 {
  init s0;
  s0 -> s1 [0, 64] { R118 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R67 += 1, R68 += 1 };
  s0 -> s3 [65, 65] { R118 += 1, R68 += 1 };
  s0 -> s4 [65, 65] { R118 += 1, R68 += 1 };
  s0 -> s1 [88, 65535] { R118 += 1, R68 += 1 };
  s1 -> s1 [0, 64] { R118 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R118 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R118 += 1, R68 += 1 };
  s1 -> s4 [65, 65] { R118 += 1, R68 += 1 };
  s1 -> s1 [88, 65535] { R118 += 1, R68 += 1 };
  s2 -> s1 [0, 64] { R118 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R118 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R118 += 1, R68 += 1 };
  s2 -> s4 [65, 65] { R118 += 1, R68 += 1 };
  s2 -> s1 [88, 65535] { R118 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R118 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R118 += 1, R68 += 1 };
  s4 -> s4 [0, 65535] { R118 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [88, 65535] { R118 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton uri_20 {
  init s0;
  s0 -> s1 [0, 64] { R120 += 1, R70 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R120 += 1, R69 += 1, R70 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s3 [65, 65] { R120 += 1, R70 += 1, R25 += 1 };
  s0 -> s4 [65, 65] { R120 += 1, R70 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R120 += 1, R70 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R120 += 1, R70 += 1, R25 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R120 += 1 };
  s1 -> s3 [65, 65] { R120 += 1, R70 += 1, R25 += 1 };
  s1 -> s4 [65, 65] { R120 += 1, R70 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R120 += 1, R70 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R120 += 1, R70 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R120 += 1, R69 += 1, R70 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R120 += 1, R70 += 1, R25 += 1 };
  s2 -> s4 [65, 65] { R120 += 1, R70 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R120 += 1, R70 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R120 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R120 += 1, R70 += 1, R25 += 1 };
  s4 -> s5 [0, 65535] { R120 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R120 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_21 {
  init s0;
  s0 -> s1 [0, 64] { R122 += 1, R72 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R121 += 1, R122 += 1 };
  s0 -> s2 [0, 65535] { R122 += 1, R71 += 1, R72 += 1 };
  s0 -> s3 [65, 65] { R122 += 1, R72 += 1, R27 += 1 };
  s0 -> s4 [65, 65] { R122 += 1, R72 += 1, R27 += 1 };
  s0 -> s1 [66, 65535] { R122 += 1, R72 += 1, R27 += 1 };
  s1 -> s1 [0, 64] { R122 += 1, R72 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R122 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R122 += 1, R72 += 1, R27 += 1 };
  s1 -> s4 [65, 65] { R122 += 1, R72 += 1, R27 += 1 };
  s1 -> s1 [66, 65535] { R122 += 1, R72 += 1, R27 += 1 };
  s2 -> s1 [0, 64] { R122 += 1, R72 += 1, R27 += 1 };
  s2 -> s2 [0, 65535] { R122 += 1, R71 += 1, R72 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R122 += 1, R72 += 1, R27 += 1 };
  s2 -> s4 [65, 65] { R122 += 1, R72 += 1, R27 += 1 };
  s2 -> s1 [66, 65535] { R122 += 1, R72 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R122 += 1, R72 += 1, R27 += 1 };
  s3 -> s6 [0, 65535] { R122 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R122 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R122 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_22 {
  init s0;
  s0 -> s1 [0, 64] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R124 += 1, R73 += 1, R74 += 1 };
  s0 -> s3 [65, 65] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s0 -> s4 [65, 65] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s0 -> s1 [66, 65535] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 64] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [65, 65] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [66, 65535] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [0, 64] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s2 -> s2 [0, 65535] { R124 += 1, R73 += 1, R74 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s2 -> s4 [65, 65] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s2 -> s1 [66, 65535] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535] { R124 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R124 += 1, R74 += 1, R29 += 1, R30 += 1 };
  s4 -> s5 [0, 65535] { R124 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R124 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_23 {
  init s0;
  s0 -> s1 [0, 64] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s0 -> s2 [0, 65535] { R126 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s3 [65, 65] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s0 -> s4 [65, 65] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s0 -> s1 [66, 65535] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s1 -> s1 [0, 64] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R126 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s1 -> s4 [65, 65] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s1 -> s1 [66, 65535] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s2 -> s1 [0, 64] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s2 -> s2 [0, 65535] { R126 += 1, R75 += 1, R76 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s2 -> s4 [65, 65] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s2 -> s1 [66, 65535] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s3 -> s3 [0, 65535] { R126 += 1, R76 += 1, R33 += 1, R34 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R126 += 1 };
  s4 -> s4 [0, 65535] { R126 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R126 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_24 {
  init s0;
  s0 -> s1 [0, 64] { R128 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s0 -> s2 [0, 65535] { R128 += 1, R77 += 1, R78 += 1 };
  s0 -> s3 [65, 65] { R128 += 1, R78 += 1 };
  s0 -> s4 [65, 65] { R128 += 1, R78 += 1 };
  s0 -> s1 [66, 65535] { R128 += 1, R78 += 1 };
  s1 -> s1 [0, 64] { R128 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R128 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R128 += 1, R78 += 1 };
  s1 -> s4 [65, 65] { R128 += 1, R78 += 1 };
  s1 -> s1 [66, 65535] { R128 += 1, R78 += 1 };
  s2 -> s1 [0, 64] { R128 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R128 += 1, R77 += 1, R78 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R128 += 1, R78 += 1 };
  s2 -> s4 [65, 65] { R128 += 1, R78 += 1 };
  s2 -> s1 [66, 65535] { R128 += 1, R78 += 1 };
  s3 -> s6 [0, 65535] { R128 += 1 };
  s3 -> s3 [0, 65535] { R128 += 1, R78 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R128 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R128 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_25 {
  init s0;
  s0 -> s1 [0, 64] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R79 += 1, R80 += 1 };
  s0 -> s3 [65, 65] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s0 -> s4 [65, 65] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s0 -> s1 [66, 65535] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [0, 64] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R130 += 1 };
  s1 -> s3 [65, 65] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s1 -> s4 [65, 65] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s1 -> s1 [66, 65535] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s2 -> s1 [0, 64] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R130 += 1, R79 += 1, R80 += 1 };
  s2 -> s3 [65, 65] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s2 -> s4 [65, 65] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s2 -> s1 [66, 65535] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R130 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R130 += 1 };
  s4 -> s4 [0, 65535] { R130 += 1, R80 += 1, R39 += 1, R40 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R130 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton uri_26 {
  init s0;
  s0 -> s1 [0, 64] { R132 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R81 += 1, R82 += 1 };
  s0 -> s3 [65, 65] { R132 += 1, R82 += 1 };
  s0 -> s4 [65, 65] { R132 += 1, R82 += 1 };
  s0 -> s1 [66, 65535] { R132 += 1, R82 += 1 };
  s1 -> s1 [0, 64] { R132 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R132 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R132 += 1, R82 += 1 };
  s1 -> s4 [65, 65] { R132 += 1, R82 += 1 };
  s1 -> s1 [66, 65535] { R132 += 1, R82 += 1 };
  s2 -> s1 [0, 64] { R132 += 1, R82 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R132 += 1, R81 += 1, R82 += 1 };
  s2 -> s3 [65, 65] { R132 += 1, R82 += 1 };
  s2 -> s4 [65, 65] { R132 += 1, R82 += 1 };
  s2 -> s1 [66, 65535] { R132 += 1, R82 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R132 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R132 += 1, R82 += 1 };
  s4 -> s6 [0, 65535] { R132 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R132 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R64 && R2 = R132 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R26 + R25 = 0 && R45 = 0 && R46 = R64 && R47 = 0 && R48 = R64 && R49 = 0 && R50 = R64 && R51 = 0 && R52 = R64 && R53 = 0 && R54 = R64 && R55 = 0 && R56 = R64 && R57 = 0 && R58 = R64 && R59 = 0 && R60 = R64 && R61 = 0 && R62 = R64 && R63 = 0 && R83 = 10 && R84 = R132 && R85 = 10 && R86 = R132 && R87 = 10 && R88 = R132 && R89 = 10 && R90 = R132 && R91 = 10 && R92 = R132 && R93 = 10 && R94 = R132 && R95 = 10 && R96 = R132 && R97 = 10 && R98 = R132 && R99 = 10 && R100 = R132 && R101 = 10 && R102 = R132 && R103 = 10 && R104 = R132 && R105 = 10 && R106 = R132 && R107 = 10 && R108 = R132 && R109 = 10 && R110 = R132 && R111 = 10 && R112 = R132 && R113 = 10 && R114 = R132 && R115 = 10 && R116 = R132 && R117 = 10 && R118 = R132 && R119 = 10 && R120 = R132 && R121 = 10 && R122 = R132 && R123 = 10 && R124 = R132 && R125 = 10 && R126 = R132 && R127 = 10 && R128 = R132 && R129 = 10 && R130 = R132 && R131 = 10 && R7 < 1 && R8 < 1 && R28 + R27 < 1 && 0 < R64 && 9 < R132 && (R14 = 0 || (R65 = 0 && R66 = 0)) && (R14 = 0 || (R67 = 0 && R68 = 0)) && (R14 = 0 || (R69 = 0 && R70 = 0)) && (R14 = 0 || (R71 = 0 && R72 = 0)) && (R14 = 0 || (R73 = 0 && R74 = 0)) && (R14 = 0 || (R75 = 0 && R76 = 0)) && (R14 = 0 || (R77 = 0 && R78 = 0)) && (R14 = 0 || (R79 = 0 && R80 = 0)) && (R14 = 0 || (R81 = 0 && R82 = 0)) && (R38 + R35 = 0 || (R31 + R29 = 0 && R32 + R30 = 0)) && (R38 + R35 = 0 || (R36 + R33 = 0 && R37 + R34 = 0)) && (R44 + R41 = 0 || (R42 + R39 = 0 && R43 + R40 = 0));
// End of Parikh automata intersection problem
