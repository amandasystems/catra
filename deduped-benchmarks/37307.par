// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R14, R15, R16, R17, R18, R19, R2, R20, R21, R4, R5;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36] { R5 += 1 };
  s0 -> s0 [0, 65535] { R4 += 1, R5 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535] { R5 += 1 };
  s1 -> s1 [0, 36] { R5 += 1 };
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535] { R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s1 [38, 65535] { R17 += 1 };
  s1 -> s1 [0, 36] { R17 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [38, 65535] { R17 += 1 };
  accepting s0, s1;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [0, 65535] { R19 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 65535] { R21 += 1, R14 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R21 += 1, R15 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1, R14 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R21 += 1, R15 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R21 += 1, R15 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R21 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R21 && R4 = 0 && R5 - R20 = -1 && R16 = R20 && R17 = R21 && R18 = R20 && R19 = R21 && R0 != 2 && R1 != 0 && R20 - R21 < 1 && -1 < R20 && 0 < R21 && (R14 != 0 || ((R0 != 0 || ((R1 != R15 || R15 < 3) && (R1 != 1 || R15 != 2) && (R1 = R15 || R15 = 2 || R1 < 1))) && (R0 = 0 || (R15 < 3 && (R15 != 2 || 1 < R1) && (R1 = R15 || 1 < R15))))) && (R14 = 0 || (R0 = 0 && R1 < 0));
// End of Parikh automata intersection problem
