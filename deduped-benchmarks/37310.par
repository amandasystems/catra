// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R4, R48, R49, R5, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87;
synchronised {  // Automata constraining uri
automaton uri_0 {
  init s0;
  s0 -> s0 [0, 36];
  s0 -> s1 [37, 37];
  s0 -> s0 [38, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton uri_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton uri_2 {
  init s0;
  s0 -> s1 [0, 36] { R49 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s2 [37, 37];
  s0 -> s1 [38, 65535] { R49 += 1 };
  s1 -> s1 [0, 36] { R49 += 1 };
  s1 -> s2 [37, 37];
  s1 -> s1 [38, 65535] { R49 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton uri_3 {
  init s0;
  s0 -> s1 [0, 36] { R77 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s2 [37, 37] { R77 += 1 };
  s0 -> s1 [38, 65535] { R77 += 1 };
  s1 -> s1 [0, 36] { R77 += 1 };
  s1 -> s2 [37, 37] { R77 += 1 };
  s1 -> s1 [38, 65535] { R77 += 1 };
  s2 -> s2 [0, 65535] { R77 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton uri_4 {
  init s0;
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s1 [0, 65535] { R79 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_5 {
  init s0;
  s0 -> s1 [0, 36] { R81 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R4 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s3 [37, 37] { R81 += 1 };
  s0 -> s1 [38, 65535] { R81 += 1, R5 += 1 };
  s1 -> s1 [0, 36] { R81 += 1, R5 += 1 };
  s1 -> s3 [37, 37] { R81 += 1 };
  s1 -> s1 [38, 65535] { R81 += 1, R5 += 1 };
  s2 -> s1 [0, 36] { R81 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R81 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [37, 37] { R81 += 1 };
  s2 -> s1 [38, 65535] { R81 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R81 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton uri_6 {
  init s0;
  s0 -> s1 [0, 65535] { R83 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s1 -> s1 [0, 65535] { R83 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton uri_7 {
  init s0;
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s1 [0, 65535] { R85 += 1, R73 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R85 += 1, R72 += 1, R73 += 1 };
  s1 -> s4 [0, 65535] { R85 += 1 };
  s1 -> s1 [0, 65535] { R85 += 1, R73 += 1, R69 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R85 += 1, R73 += 1, R69 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R85 += 1, R72 += 1, R73 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R85 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton uri_8 {
  init s0;
  s0 -> s1 [0, 65535] { R87 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R75 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s3 [0, 65535] { R87 += 1, R75 += 1, R71 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R87 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R87 += 1, R75 += 1, R70 += 1, R71 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R87 += 1, R75 += 1, R71 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R87 += 1, R75 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R87 += 1, R75 += 1, R71 += 1, R0 += 1 };
  s2 -> s6 [0, 65535] { R87 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R87 += 1, R75 += 1, R71 += 1, R0 += 1 };
  s3 -> s5 [0, 65535] { R87 += 1, R75 += 1 };
  s3 -> s6 [0, 65535] { R87 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R87 += 1, R75 += 1 };
  s5 -> s6 [0, 65535] { R87 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R87 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = 2 && R1 - R5 = 1 && R2 = R87 && R4 = 0 && R48 = 0 && R49 - R86 = -1 && R70 = 0 && R76 = R86 && R77 = R87 && R78 = R86 && R79 = R87 && R80 = R86 && R81 = R87 && R82 = R86 && R83 = R87 && R84 = R86 && R85 = R87 && -1 < R5 && R71 < 3 && R86 - R87 < 1 && -1 < R86 && 0 < R87 && (R5 != 0 || R69 = 0 || (R72 = 0 && R73 = 0)) && (R5 != 0 || R69 = 0 || (R74 = 0 && R75 = 0)) && (R71 != 2 || 1 < R69) && (R72 != 0 || R5 = R73 || R5 < 1) && (R74 != 0 || R5 = R75 || R5 < 1) && (R69 = R71 || 1 < R71) && (R72 = 0 || R5 < 1) && (R74 = 0 || R5 < 1);
// End of Parikh automata intersection problem
