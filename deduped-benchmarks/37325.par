// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R6, R7;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R7 += 1 };
  s1 -> s1 [0, 57] { R7 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R295 += 1, R285 += 1 };
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s0 -> s2 [0, 65535] { R295 += 1, R284 += 1, R285 += 1 };
  s0 -> s3 [47, 47] { R295 += 1, R285 += 1 };
  s0 -> s1 [48, 65535] { R295 += 1, R285 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R295 += 1, R285 += 1 };
  s1 -> s6 [0, 65535] { R295 += 1 };
  s2 -> s1 [0, 46] { R295 += 1, R285 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R295 += 1, R284 += 1, R285 += 1 };
  s2 -> s3 [47, 47] { R295 += 1, R285 += 1 };
  s2 -> s1 [48, 65535] { R295 += 1, R285 += 1 };
  s3 -> s1 [0, 46] { R295 += 1, R285 += 1 };
  s3 -> s3 [0, 65535] { R295 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R295 += 1, R285 += 1 };
  s3 -> s1 [48, 65535] { R295 += 1, R285 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R295 += 1, R285 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R295 += 1 };
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R297 += 1, R286 += 1, R287 += 1 };
  s0 -> s2 [0, 65535] { R297 += 1, R287 += 1, R281 += 1 };
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s1 -> s1 [0, 65535] { R297 += 1, R286 += 1, R287 += 1 };
  s1 -> s2 [0, 65535] { R297 += 1, R287 += 1, R281 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R297 += 1, R287 += 1, R281 += 1 };
  s2 -> s3 [0, 65535] { R297 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R297 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R301 += 1 };
  s0 -> s0 [0, 65535] { R300 += 1, R301 += 1 };
  s0 -> s2 [65, 65] { R301 += 1 };
  s0 -> s1 [66, 65535] { R301 += 1 };
  s1 -> s1 [0, 64] { R301 += 1 };
  s1 -> s2 [65, 65] { R301 += 1 };
  s1 -> s1 [66, 65535] { R301 += 1 };
  s2 -> s2 [0, 65535] { R301 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R302 += 1, R303 += 1 };
  s0 -> s1 [0, 65535] { R303 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R303 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R305 += 1 };
  s0 -> s2 [0, 65535] { R305 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R304 += 1, R305 += 1 };
  s0 -> s3 [65, 65] { R305 += 1 };
  s0 -> s1 [66, 65535] { R305 += 1 };
  s1 -> s1 [0, 64] { R305 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R305 += 1 };
  s1 -> s1 [66, 65535] { R305 += 1 };
  s2 -> s1 [0, 64] { R305 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R305 += 1, R2 += 1 };
  s2 -> s3 [65, 65] { R305 += 1 };
  s2 -> s1 [66, 65535] { R305 += 1 };
  s3 -> s3 [0, 65535] { R305 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R307 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R307 += 1, R288 += 1, R289 += 1 };
  s0 -> s0 [0, 65535] { R306 += 1, R307 += 1 };
  s0 -> s1 [66, 65535] { R307 += 1, R289 += 1 };
  s1 -> s1 [0, 64] { R307 += 1, R289 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R307 += 1 };
  s1 -> s1 [66, 65535] { R307 += 1, R289 += 1 };
  s2 -> s1 [0, 64] { R307 += 1, R289 += 1 };
  s2 -> s2 [0, 65535] { R307 += 1, R288 += 1, R289 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R307 += 1, R289 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R308 += 1, R309 += 1 };
  s0 -> s1 [0, 65535] { R309 += 1, R291 += 1, R282 += 1 };
  s0 -> s2 [0, 65535] { R309 += 1, R290 += 1, R291 += 1 };
  s1 -> s4 [0, 65535] { R309 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R309 += 1, R291 += 1, R282 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R309 += 1, R291 += 1, R282 += 1 };
  s2 -> s2 [0, 65535] { R309 += 1, R290 += 1, R291 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R309 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R311 += 1, R292 += 1, R293 += 1 };
  s0 -> s0 [0, 65535] { R310 += 1, R311 += 1 };
  s0 -> s2 [112, 112] { R311 += 1, R293 += 1 };
  s1 -> s1 [0, 65535] { R311 += 1, R292 += 1, R293 += 1 };
  s1 -> s2 [112, 112] { R311 += 1, R293 += 1 };
  s2 -> s3 [114, 114] { R311 += 1, R293 += 1 };
  s3 -> s4 [111, 111] { R311 += 1, R293 += 1 };
  s4 -> s5 [115, 115] { R311 += 1, R293 += 1 };
  s5 -> s6 [112, 112] { R311 += 1, R293 += 1 };
  s6 -> s7 [101, 101] { R311 += 1, R293 += 1 };
  s7 -> s8 [114, 114] { R311 += 1, R293 += 1 };
  s8 -> s9 [111, 111] { R311 += 1, R293 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R311 += 1 };
  s10 -> s10 [0, 65535];
  accepting s9, s10;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R313 += 1, R299 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R313 += 1, R298 += 1, R299 += 1 };
  s0 -> s0 [0, 65535] { R312 += 1, R313 += 1 };
  s1 -> s4 [0, 65535] { R313 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R313 += 1, R299 += 1, R283 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R313 += 1, R299 += 1, R283 += 1 };
  s2 -> s2 [0, 65535] { R313 += 1, R298 += 1, R299 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R313 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s1 [0, 65535] { R315 += 1 };
  s1 -> s1 [0, 65535] { R315 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R293 && R1 - R315 = 1 && R6 = 0 && R7 = R315 && R292 = 0 && R300 = 0 && R301 = R315 && R302 = 0 && R303 = R315 && R304 = 0 && R305 = R315 && R306 = 0 && R307 = R315 && R308 = 0 && R309 = R315 && R310 = 0 && R311 = R315 && R312 = 0 && R313 = R315 && R314 = 0 && R2 < 1 && -1 < R293 && 0 < R315 && (R288 != 0 || R289 = R293 || (R282 = 0 && R293 = 0)) && (R290 != 0 || R291 = R293 || (R282 = 0 && R293 = 0)) && (R281 = 0 || (R284 = 0 && R285 = 0)) && (R281 = 0 || (R286 = 0 && R287 = 0)) && (R283 = 0 || (R298 = 0 && R299 = 0)) && (R288 = 0 || (R282 = 0 && R293 = 0)) && (R290 = 0 || (R282 = 0 && R293 = 0));
// End of Parikh automata intersection problem
