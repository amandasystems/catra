// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R1100, R1101, R1102, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R1080 += 1, R834 += 1 };
  s0 -> s2 [0, 65535] { R1080 += 1, R833 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R1079 += 1, R1080 += 1 };
  s0 -> s3 [47, 47] { R1080 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R1080 += 1, R834 += 1 };
  s1 -> s1 [0, 65535] { R1080 += 1, R834 += 1 };
  s1 -> s6 [0, 65535] { R1080 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R1080 += 1, R834 += 1 };
  s2 -> s2 [0, 65535] { R1080 += 1, R833 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R1080 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R1080 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R1080 += 1, R834 += 1 };
  s3 -> s3 [0, 65535] { R1080 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R1080 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R1080 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R1080 += 1, R834 += 1 };
  s6 -> s6 [0, 65535] { R1080 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R1082 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R1081 += 1, R1082 += 1 };
  s0 -> s2 [0, 65535] { R1082 += 1, R836 += 1, R830 += 1 };
  s1 -> s1 [0, 65535] { R1082 += 1, R835 += 1, R836 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1082 += 1, R836 += 1, R830 += 1 };
  s2 -> s3 [0, 65535] { R1082 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1082 += 1, R836 += 1, R830 += 1 };
  s3 -> s3 [0, 65535] { R1082 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R1088 += 1 };
  s0 -> s0 [0, 65535] { R1087 += 1, R1088 += 1 };
  s0 -> s2 [65, 65] { R1088 += 1 };
  s0 -> s1 [66, 65535] { R1088 += 1 };
  s1 -> s1 [0, 64] { R1088 += 1 };
  s1 -> s2 [65, 65] { R1088 += 1 };
  s1 -> s1 [66, 65535] { R1088 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1088 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1090 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R1089 += 1, R1090 += 1 };
  s1 -> s1 [0, 65535] { R1090 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R1092 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1092 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1091 += 1, R1092 += 1 };
  s0 -> s3 [65, 65] { R1092 += 1 };
  s0 -> s1 [66, 65535] { R1092 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R1092 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R1092 += 1 };
  s1 -> s1 [66, 65535] { R1092 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R1092 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1092 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R1092 += 1 };
  s2 -> s1 [66, 65535] { R1092 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1092 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R1094 += 1, R1076 += 1 };
  s0 -> s2 [0, 65535] { R1094 += 1, R1075 += 1, R1076 += 1 };
  s0 -> s0 [0, 65535] { R1093 += 1, R1094 += 1 };
  s0 -> s1 [66, 65535] { R1094 += 1, R1076 += 1 };
  s1 -> s1 [0, 64] { R1094 += 1, R1076 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1094 += 1 };
  s1 -> s1 [66, 65535] { R1094 += 1, R1076 += 1 };
  s2 -> s1 [0, 64] { R1094 += 1, R1076 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1094 += 1, R1075 += 1, R1076 += 1 };
  s2 -> s1 [66, 65535] { R1094 += 1, R1076 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1096 += 1, R1078 += 1, R831 += 1 };
  s0 -> s0 [0, 65535] { R1095 += 1, R1096 += 1 };
  s0 -> s2 [0, 65535] { R1096 += 1, R1077 += 1, R1078 += 1 };
  s1 -> s1 [0, 65535] { R1096 += 1, R1078 += 1, R831 += 1 };
  s1 -> s4 [0, 65535] { R1096 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1096 += 1, R1078 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1096 += 1, R1077 += 1, R1078 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1096 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1097 += 1, R1098 += 1 };
  s0 -> s1 [0, 65535] { R1098 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1098 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1100 += 1, R1083 += 1, R1084 += 1 };
  s0 -> s0 [0, 65535] { R1099 += 1, R1100 += 1 };
  s0 -> s2 [0, 65535] { R1100 += 1, R1084 += 1, R832 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1100 += 1, R1083 += 1, R1084 += 1 };
  s1 -> s2 [0, 65535] { R1100 += 1, R1084 += 1, R832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1100 += 1 };
  s2 -> s2 [0, 65535] { R1100 += 1, R1084 += 1, R832 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1100 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 65535] { R1102 += 1, R1085 += 1, R1086 += 1 };
  s0 -> s0 [0, 65535] { R1101 += 1, R1102 += 1 };
  s0 -> s2 [112, 112] { R1102 += 1, R1086 += 1 };
  s1 -> s1 [0, 65535] { R1102 += 1, R1085 += 1, R1086 += 1 };
  s1 -> s2 [112, 112] { R1102 += 1, R1086 += 1 };
  s2 -> s3 [114, 114] { R1102 += 1, R1086 += 1 };
  s3 -> s4 [111, 111] { R1102 += 1, R1086 += 1 };
  s4 -> s5 [115, 115] { R1102 += 1, R1086 += 1 };
  s5 -> s6 [112, 112] { R1102 += 1, R1086 += 1 };
  s6 -> s7 [101, 101] { R1102 += 1, R1086 += 1 };
  s7 -> s8 [114, 114] { R1102 += 1, R1086 += 1 };
  s8 -> s9 [111, 111] { R1102 += 1, R1086 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R1102 += 1 };
  s10 -> s10 [0, 65535];
  accepting s9, s10;
};
};
constraint R0 = R1086 && R1 - R1102 = 1 && R3 = 0 && R4 - R1086 = -1 && R555 = 0 && R556 = R1102 && R1085 = 0 && R1087 = 0 && R1088 = R1102 && R1089 = 0 && R1090 = R1102 && R1091 = 0 && R1092 = R1102 && R1093 = 0 && R1094 = R1102 && R1095 = 0 && R1096 = R1102 && R1097 = 0 && R1098 = R1102 && R1099 = 0 && R1100 = R1102 && R1101 = 0 && -1 < R1086 && 0 < R1102 && (R1083 != 0 || R1084 = R1086 || (R832 = 0 && R1086 = 0)) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R831 = 0 || (R1075 = R1086 && R1076 = R1086)) && (R831 = 0 || (R1077 = R1086 && R1078 = R1086)) && (R1083 = 0 || (R832 = 0 && R1086 = 0));
// End of Parikh automata intersection problem
