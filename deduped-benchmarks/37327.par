// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R1052 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R1051 += 1, R1052 += 1 };
  s0 -> s2 [0, 65535] { R1052 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [47, 47] { R1052 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R1052 += 1, R834 += 1 };
  s1 -> s6 [0, 65535] { R1052 += 1 };
  s1 -> s1 [0, 65535] { R1052 += 1, R834 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R1052 += 1, R834 += 1 };
  s2 -> s2 [0, 65535] { R1052 += 1, R833 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R1052 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R1052 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R1052 += 1, R834 += 1 };
  s3 -> s3 [0, 65535] { R1052 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R1052 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R1052 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R1052 += 1, R834 += 1 };
  s6 -> s6 [0, 65535] { R1052 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R1054 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R1053 += 1, R1054 += 1 };
  s0 -> s2 [0, 65535] { R1054 += 1, R836 += 1, R830 += 1 };
  s1 -> s1 [0, 65535] { R1054 += 1, R835 += 1, R836 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1054 += 1, R836 += 1, R830 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1054 += 1, R836 += 1, R830 += 1 };
  s2 -> s4 [0, 65535] { R1054 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1054 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R1060 += 1 };
  s0 -> s0 [0, 65535] { R1059 += 1, R1060 += 1 };
  s0 -> s2 [65, 65] { R1060 += 1 };
  s0 -> s1 [66, 65535] { R1060 += 1 };
  s1 -> s1 [0, 64] { R1060 += 1 };
  s1 -> s2 [65, 65] { R1060 += 1 };
  s1 -> s1 [66, 65535] { R1060 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1060 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1061 += 1, R1062 += 1 };
  s0 -> s1 [0, 65535] { R1062 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R1062 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R1064 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1063 += 1, R1064 += 1 };
  s0 -> s2 [0, 65535] { R1064 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [65, 65] { R1064 += 1 };
  s0 -> s1 [66, 65535] { R1064 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R1064 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R1064 += 1 };
  s1 -> s1 [66, 65535] { R1064 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R1064 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1064 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R1064 += 1 };
  s2 -> s1 [66, 65535] { R1064 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1064 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R1066 += 1, R1046 += 1 };
  s0 -> s2 [0, 65535] { R1066 += 1, R1045 += 1, R1046 += 1 };
  s0 -> s0 [0, 65535] { R1065 += 1, R1066 += 1 };
  s0 -> s1 [66, 65535] { R1066 += 1, R1046 += 1 };
  s1 -> s1 [0, 64] { R1066 += 1, R1046 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1066 += 1 };
  s1 -> s1 [66, 65535] { R1066 += 1, R1046 += 1 };
  s2 -> s1 [0, 64] { R1066 += 1, R1046 += 1 };
  s2 -> s2 [0, 65535] { R1066 += 1, R1045 += 1, R1046 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1066 += 1, R1046 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1068 += 1, R1047 += 1, R1048 += 1 };
  s0 -> s0 [0, 65535] { R1067 += 1, R1068 += 1 };
  s0 -> s2 [0, 65535] { R1068 += 1, R1048 += 1, R831 += 1 };
  s1 -> s1 [0, 65535] { R1068 += 1, R1047 += 1, R1048 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1068 += 1, R1048 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1068 += 1, R1048 += 1, R831 += 1 };
  s2 -> s4 [0, 65535] { R1068 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1068 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1070 += 1, R1049 += 1, R1050 += 1 };
  s0 -> s0 [0, 65535] { R1069 += 1, R1070 += 1 };
  s0 -> s2 [111, 111] { R1070 += 1, R1050 += 1 };
  s1 -> s1 [0, 65535] { R1070 += 1, R1049 += 1, R1050 += 1 };
  s1 -> s2 [111, 111] { R1070 += 1, R1050 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1070 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1071 += 1, R1072 += 1 };
  s0 -> s1 [0, 65535] { R1072 += 1, R1056 += 1, R832 += 1 };
  s0 -> s2 [0, 65535] { R1072 += 1, R1055 += 1, R1056 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1072 += 1, R1056 += 1, R832 += 1 };
  s1 -> s4 [0, 65535] { R1072 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1072 += 1, R1056 += 1, R832 += 1 };
  s2 -> s2 [0, 65535] { R1072 += 1, R1055 += 1, R1056 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1072 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R1073 += 1, R1074 += 1 };
  s0 -> s1 [0, 65535] { R1074 += 1, R1057 += 1, R1058 += 1 };
  s0 -> s2 [112, 112] { R1074 += 1, R1058 += 1 };
  s1 -> s1 [0, 65535] { R1074 += 1, R1057 += 1, R1058 += 1 };
  s1 -> s2 [112, 112] { R1074 += 1, R1058 += 1 };
  s2 -> s3 [114, 114] { R1074 += 1, R1058 += 1 };
  s3 -> s4 [111, 111] { R1074 += 1, R1058 += 1 };
  s4 -> s5 [115, 115] { R1074 += 1, R1058 += 1 };
  s5 -> s6 [112, 112] { R1074 += 1, R1058 += 1 };
  s6 -> s7 [101, 101] { R1074 += 1, R1058 += 1 };
  s7 -> s8 [114, 114] { R1074 += 1, R1058 += 1 };
  s8 -> s8 [0, 65535] { R1074 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9;
};
};
constraint R0 = R1050 && R1 - R1074 = 1 && R3 = 0 && R4 - R1058 = -1 && R555 = 0 && R556 = R1074 && R1049 = R1058 && R1057 = 0 && R1059 = 0 && R1060 = R1074 && R1061 = 0 && R1062 = R1074 && R1063 = 0 && R1064 = R1074 && R1065 = 0 && R1066 = R1074 && R1067 = 0 && R1068 = R1074 && R1069 = 0 && R1070 = R1074 && R1071 = 0 && R1072 = R1074 && R1073 = 0 && R1058 - R1050 < 1 && -1 < R1058 && 0 < R1074 && (R1045 != R1058 || R1046 = R1050 || (R831 = 0 && R1050 = R1058)) && (R1047 != R1058 || R1048 = R1050 || (R831 = 0 && R1050 = R1058)) && (R1055 != 0 || R1056 = R1058 || (R832 = 0 && (R1050 < 1 || R1058 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R1045 = R1058 || (R831 = 0 && R1050 = R1058)) && (R1047 = R1058 || (R831 = 0 && R1050 = R1058)) && (R1055 = 0 || (R832 = 0 && (R1050 < 1 || R1058 < 1)));
// End of Parikh automata intersection problem
