// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R932 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R931 += 1, R932 += 1 };
  s0 -> s2 [0, 65535] { R932 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [47, 47] { R932 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R932 += 1, R834 += 1 };
  s1 -> s1 [0, 65535] { R932 += 1, R834 += 1 };
  s1 -> s6 [0, 65535] { R932 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R932 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R932 += 1, R833 += 1, R834 += 1 };
  s2 -> s3 [47, 47] { R932 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R932 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R932 += 1, R834 += 1 };
  s3 -> s3 [0, 65535] { R932 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R932 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R932 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R932 += 1, R834 += 1 };
  s6 -> s6 [0, 65535] { R932 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R934 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R933 += 1, R934 += 1 };
  s0 -> s2 [0, 65535] { R934 += 1, R836 += 1, R830 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R934 += 1, R835 += 1, R836 += 1 };
  s1 -> s2 [0, 65535] { R934 += 1, R836 += 1, R830 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R934 += 1 };
  s2 -> s2 [0, 65535] { R934 += 1, R836 += 1, R830 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R934 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R940 += 1 };
  s0 -> s0 [0, 65535] { R939 += 1, R940 += 1 };
  s0 -> s2 [65, 65] { R940 += 1 };
  s0 -> s1 [66, 65535] { R940 += 1 };
  s1 -> s1 [0, 64] { R940 += 1 };
  s1 -> s2 [65, 65] { R940 += 1 };
  s1 -> s1 [66, 65535] { R940 += 1 };
  s2 -> s2 [0, 65535] { R940 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R942 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R941 += 1, R942 += 1 };
  s1 -> s1 [0, 65535] { R942 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R944 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R943 += 1, R944 += 1 };
  s0 -> s2 [0, 65535] { R944 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [65, 65] { R944 += 1 };
  s0 -> s1 [66, 65535] { R944 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R944 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R944 += 1 };
  s1 -> s1 [66, 65535] { R944 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R944 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R944 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R944 += 1 };
  s2 -> s1 [66, 65535] { R944 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R944 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R946 += 1, R926 += 1 };
  s0 -> s2 [0, 65535] { R946 += 1, R925 += 1, R926 += 1 };
  s0 -> s0 [0, 65535] { R945 += 1, R946 += 1 };
  s0 -> s1 [66, 65535] { R946 += 1, R926 += 1 };
  s1 -> s1 [0, 64] { R946 += 1, R926 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R946 += 1 };
  s1 -> s1 [66, 65535] { R946 += 1, R926 += 1 };
  s2 -> s1 [0, 64] { R946 += 1, R926 += 1 };
  s2 -> s2 [0, 65535] { R946 += 1, R925 += 1, R926 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R946 += 1, R926 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R948 += 1, R927 += 1, R928 += 1 };
  s0 -> s0 [0, 65535] { R947 += 1, R948 += 1 };
  s0 -> s2 [0, 65535] { R948 += 1, R928 += 1, R831 += 1 };
  s1 -> s1 [0, 65535] { R948 += 1, R927 += 1, R928 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R948 += 1, R928 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R948 += 1 };
  s2 -> s2 [0, 65535] { R948 += 1, R928 += 1, R831 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R948 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R950 += 1, R929 += 1, R930 += 1 };
  s0 -> s0 [0, 65535] { R949 += 1, R950 += 1 };
  s0 -> s2 [115, 115] { R950 += 1, R930 += 1 };
  s1 -> s1 [0, 65535] { R950 += 1, R929 += 1, R930 += 1 };
  s1 -> s2 [115, 115] { R950 += 1, R930 += 1 };
  s2 -> s3 [112, 112] { R950 += 1, R930 += 1 };
  s3 -> s4 [101, 101] { R950 += 1, R930 += 1 };
  s4 -> s5 [114, 114] { R950 += 1, R930 += 1 };
  s5 -> s6 [111, 111] { R950 += 1, R930 += 1 };
  s6 -> s6 [0, 65535] { R950 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s6, s7;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R952 += 1, R935 += 1, R936 += 1 };
  s0 -> s0 [0, 65535] { R951 += 1, R952 += 1 };
  s0 -> s2 [0, 65535] { R952 += 1, R936 += 1, R832 += 1 };
  s1 -> s1 [0, 65535] { R952 += 1, R935 += 1, R936 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R952 += 1, R936 += 1, R832 += 1 };
  s2 -> s3 [0, 65535] { R952 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R952 += 1, R936 += 1, R832 += 1 };
  s3 -> s3 [0, 65535] { R952 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 65535] { R954 += 1, R937 += 1, R938 += 1 };
  s0 -> s0 [0, 65535] { R953 += 1, R954 += 1 };
  s0 -> s2 [112, 112] { R954 += 1, R938 += 1 };
  s1 -> s1 [0, 65535] { R954 += 1, R937 += 1, R938 += 1 };
  s1 -> s2 [112, 112] { R954 += 1, R938 += 1 };
  s2 -> s3 [114, 114] { R954 += 1, R938 += 1 };
  s3 -> s4 [111, 111] { R954 += 1, R938 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R954 += 1 };
  s5 -> s5 [0, 65535];
  accepting s4, s5;
};
};
constraint R0 = R930 && R1 - R954 = 1 && R3 = 0 && R4 - R938 = -1 && R555 = 0 && R556 = R954 && R929 = R938 && R937 = 0 && R939 = 0 && R940 = R954 && R941 = 0 && R942 = R954 && R943 = 0 && R944 = R954 && R945 = 0 && R946 = R954 && R947 = 0 && R948 = R954 && R949 = 0 && R950 = R954 && R951 = 0 && R952 = R954 && R953 = 0 && R938 - R930 < 1 && -1 < R938 && 0 < R954 && (R925 != R938 || R926 = R930 || (R831 = 0 && R930 = R938)) && (R927 != R938 || R928 = R930 || (R831 = 0 && R930 = R938)) && (R935 != 0 || R936 = R938 || (R832 = 0 && (R930 < 1 || R938 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R925 = R938 || (R831 = 0 && R930 = R938)) && (R927 = R938 || (R831 = 0 && R930 = R938)) && (R935 = 0 || (R832 = 0 && (R930 < 1 || R938 < 1)));
// End of Parikh automata intersection problem
