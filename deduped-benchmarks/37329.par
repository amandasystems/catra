// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R962 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R961 += 1, R962 += 1 };
  s0 -> s2 [0, 65535] { R962 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [47, 47] { R962 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R962 += 1, R834 += 1 };
  s1 -> s1 [0, 65535] { R962 += 1, R834 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R962 += 1 };
  s2 -> s1 [0, 46] { R962 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R962 += 1, R833 += 1, R834 += 1 };
  s2 -> s3 [47, 47] { R962 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R962 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R962 += 1, R834 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R962 += 1 };
  s3 -> s5 [47, 47] { R962 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R962 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R962 += 1, R834 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R962 += 1 };
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R964 += 1, R836 += 1, R830 += 1 };
  s0 -> s2 [0, 65535] { R964 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R963 += 1, R964 += 1 };
  s1 -> s1 [0, 65535] { R964 += 1, R836 += 1, R830 += 1 };
  s1 -> s4 [0, 65535] { R964 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R964 += 1, R836 += 1, R830 += 1 };
  s2 -> s2 [0, 65535] { R964 += 1, R835 += 1, R836 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R964 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R970 += 1 };
  s0 -> s0 [0, 65535] { R969 += 1, R970 += 1 };
  s0 -> s2 [65, 65] { R970 += 1 };
  s0 -> s1 [66, 65535] { R970 += 1 };
  s1 -> s1 [0, 64] { R970 += 1 };
  s1 -> s2 [65, 65] { R970 += 1 };
  s1 -> s1 [66, 65535] { R970 += 1 };
  s2 -> s2 [0, 65535] { R970 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R971 += 1, R972 += 1 };
  s0 -> s1 [0, 65535] { R972 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R972 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R974 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R974 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R973 += 1, R974 += 1 };
  s0 -> s3 [65, 65] { R974 += 1 };
  s0 -> s1 [66, 65535] { R974 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R974 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R974 += 1 };
  s1 -> s1 [66, 65535] { R974 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R974 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R974 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R974 += 1 };
  s2 -> s1 [66, 65535] { R974 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R974 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R976 += 1, R956 += 1 };
  s0 -> s2 [0, 65535] { R976 += 1, R955 += 1, R956 += 1 };
  s0 -> s0 [0, 65535] { R975 += 1, R976 += 1 };
  s0 -> s1 [66, 65535] { R976 += 1, R956 += 1 };
  s1 -> s1 [0, 64] { R976 += 1, R956 += 1 };
  s1 -> s1 [0, 65535] { R976 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R976 += 1, R956 += 1 };
  s2 -> s1 [0, 64] { R976 += 1, R956 += 1 };
  s2 -> s2 [0, 65535] { R976 += 1, R955 += 1, R956 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R976 += 1, R956 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R978 += 1, R958 += 1, R831 += 1 };
  s0 -> s2 [0, 65535] { R978 += 1, R957 += 1, R958 += 1 };
  s0 -> s0 [0, 65535] { R977 += 1, R978 += 1 };
  s1 -> s1 [0, 65535] { R978 += 1, R958 += 1, R831 += 1 };
  s1 -> s4 [0, 65535] { R978 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R978 += 1, R958 += 1, R831 += 1 };
  s2 -> s2 [0, 65535] { R978 += 1, R957 += 1, R958 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R978 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R979 += 1, R980 += 1 };
  s0 -> s1 [0, 65535] { R980 += 1, R959 += 1, R960 += 1 };
  s0 -> s2 [112, 112] { R980 += 1, R960 += 1 };
  s1 -> s1 [0, 65535] { R980 += 1, R959 += 1, R960 += 1 };
  s1 -> s2 [112, 112] { R980 += 1, R960 += 1 };
  s2 -> s3 [101, 101] { R980 += 1, R960 += 1 };
  s3 -> s4 [114, 114] { R980 += 1, R960 += 1 };
  s4 -> s5 [111, 111] { R980 += 1, R960 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R980 += 1 };
  s6 -> s6 [0, 65535];
  accepting s5, s6;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R982 += 1, R965 += 1, R966 += 1 };
  s0 -> s2 [0, 65535] { R982 += 1, R966 += 1, R832 += 1 };
  s0 -> s0 [0, 65535] { R981 += 1, R982 += 1 };
  s1 -> s1 [0, 65535] { R982 += 1, R965 += 1, R966 += 1 };
  s1 -> s2 [0, 65535] { R982 += 1, R966 += 1, R832 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R982 += 1, R966 += 1, R832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R982 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R982 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R983 += 1, R984 += 1 };
  s0 -> s1 [0, 65535] { R984 += 1, R967 += 1, R968 += 1 };
  s0 -> s2 [112, 112] { R984 += 1, R968 += 1 };
  s1 -> s1 [0, 65535] { R984 += 1, R967 += 1, R968 += 1 };
  s1 -> s2 [112, 112] { R984 += 1, R968 += 1 };
  s2 -> s3 [114, 114] { R984 += 1, R968 += 1 };
  s3 -> s4 [111, 111] { R984 += 1, R968 += 1 };
  s4 -> s5 [115, 115] { R984 += 1, R968 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R984 += 1 };
  s6 -> s6 [0, 65535];
  accepting s5, s6;
};
};
constraint R0 = R960 && R1 - R984 = 1 && R3 = 0 && R4 - R968 = -1 && R555 = 0 && R556 = R984 && R959 = R968 && R967 = 0 && R969 = 0 && R970 = R984 && R971 = 0 && R972 = R984 && R973 = 0 && R974 = R984 && R975 = 0 && R976 = R984 && R977 = 0 && R978 = R984 && R979 = 0 && R980 = R984 && R981 = 0 && R982 = R984 && R983 = 0 && R968 - R960 < 1 && -1 < R968 && 0 < R984 && (R955 != R968 || R956 = R960 || (R831 = 0 && R960 = R968)) && (R957 != R968 || R958 = R960 || (R831 = 0 && R960 = R968)) && (R965 != 0 || R966 = R968 || (R832 = 0 && (R960 < 1 || R968 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R955 = R968 || (R831 = 0 && R960 = R968)) && (R957 = R968 || (R831 = 0 && R960 = R968)) && (R965 = 0 || (R832 = 0 && (R960 < 1 || R968 < 1)));
// End of Parikh automata intersection problem
