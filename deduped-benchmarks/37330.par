// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R1022 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R1021 += 1, R1022 += 1 };
  s0 -> s2 [0, 65535] { R1022 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [47, 47] { R1022 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R1022 += 1, R834 += 1 };
  s1 -> s1 [0, 65535] { R1022 += 1, R834 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R1022 += 1 };
  s2 -> s1 [0, 46] { R1022 += 1, R834 += 1 };
  s2 -> s2 [0, 65535] { R1022 += 1, R833 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R1022 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R1022 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R1022 += 1, R834 += 1 };
  s3 -> s3 [0, 65535] { R1022 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R1022 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R1022 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R1022 += 1, R834 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1022 += 1 };
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R1024 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R1023 += 1, R1024 += 1 };
  s0 -> s2 [0, 65535] { R1024 += 1, R836 += 1, R830 += 1 };
  s1 -> s1 [0, 65535] { R1024 += 1, R835 += 1, R836 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1024 += 1, R836 += 1, R830 += 1 };
  s2 -> s3 [0, 65535] { R1024 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1024 += 1, R836 += 1, R830 += 1 };
  s3 -> s3 [0, 65535] { R1024 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R1030 += 1 };
  s0 -> s0 [0, 65535] { R1029 += 1, R1030 += 1 };
  s0 -> s2 [65, 65] { R1030 += 1 };
  s0 -> s1 [66, 65535] { R1030 += 1 };
  s1 -> s1 [0, 64] { R1030 += 1 };
  s1 -> s2 [65, 65] { R1030 += 1 };
  s1 -> s1 [66, 65535] { R1030 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1030 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1031 += 1, R1032 += 1 };
  s0 -> s1 [0, 65535] { R1032 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1032 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R1034 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1034 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1033 += 1, R1034 += 1 };
  s0 -> s3 [65, 65] { R1034 += 1 };
  s0 -> s1 [66, 65535] { R1034 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R1034 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R1034 += 1 };
  s1 -> s1 [66, 65535] { R1034 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R1034 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1034 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R1034 += 1 };
  s2 -> s1 [66, 65535] { R1034 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1034 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R1036 += 1, R1016 += 1 };
  s0 -> s0 [0, 65535] { R1035 += 1, R1036 += 1 };
  s0 -> s2 [0, 65535] { R1036 += 1, R1015 += 1, R1016 += 1 };
  s0 -> s1 [66, 65535] { R1036 += 1, R1016 += 1 };
  s1 -> s1 [0, 64] { R1036 += 1, R1016 += 1 };
  s1 -> s1 [0, 65535] { R1036 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1036 += 1, R1016 += 1 };
  s2 -> s1 [0, 64] { R1036 += 1, R1016 += 1 };
  s2 -> s2 [0, 65535] { R1036 += 1, R1015 += 1, R1016 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1036 += 1, R1016 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1038 += 1, R1018 += 1, R831 += 1 };
  s0 -> s0 [0, 65535] { R1037 += 1, R1038 += 1 };
  s0 -> s2 [0, 65535] { R1038 += 1, R1017 += 1, R1018 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1038 += 1 };
  s1 -> s1 [0, 65535] { R1038 += 1, R1018 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1038 += 1, R1018 += 1, R831 += 1 };
  s2 -> s2 [0, 65535] { R1038 += 1, R1017 += 1, R1018 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1038 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1039 += 1, R1040 += 1 };
  s0 -> s1 [0, 65535] { R1040 += 1, R1019 += 1, R1020 += 1 };
  s0 -> s2 [114, 114] { R1040 += 1, R1020 += 1 };
  s1 -> s1 [0, 65535] { R1040 += 1, R1019 += 1, R1020 += 1 };
  s1 -> s2 [114, 114] { R1040 += 1, R1020 += 1 };
  s2 -> s3 [111, 111] { R1040 += 1, R1020 += 1 };
  s3 -> s3 [0, 65535] { R1040 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1042 += 1, R1026 += 1, R832 += 1 };
  s0 -> s2 [0, 65535] { R1042 += 1, R1025 += 1, R1026 += 1 };
  s0 -> s0 [0, 65535] { R1041 += 1, R1042 += 1 };
  s1 -> s4 [0, 65535] { R1042 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1042 += 1, R1026 += 1, R832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1042 += 1, R1026 += 1, R832 += 1 };
  s2 -> s2 [0, 65535] { R1042 += 1, R1025 += 1, R1026 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1042 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R1043 += 1, R1044 += 1 };
  s0 -> s1 [0, 65535] { R1044 += 1, R1027 += 1, R1028 += 1 };
  s0 -> s2 [112, 112] { R1044 += 1, R1028 += 1 };
  s1 -> s1 [0, 65535] { R1044 += 1, R1027 += 1, R1028 += 1 };
  s1 -> s2 [112, 112] { R1044 += 1, R1028 += 1 };
  s2 -> s3 [114, 114] { R1044 += 1, R1028 += 1 };
  s3 -> s4 [111, 111] { R1044 += 1, R1028 += 1 };
  s4 -> s5 [115, 115] { R1044 += 1, R1028 += 1 };
  s5 -> s6 [112, 112] { R1044 += 1, R1028 += 1 };
  s6 -> s7 [101, 101] { R1044 += 1, R1028 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1044 += 1 };
  s8 -> s8 [0, 65535];
  accepting s7, s8;
};
};
constraint R0 = R1020 && R1 - R1044 = 1 && R3 = 0 && R4 - R1028 = -1 && R555 = 0 && R556 = R1044 && R1019 = R1028 && R1027 = 0 && R1029 = 0 && R1030 = R1044 && R1031 = 0 && R1032 = R1044 && R1033 = 0 && R1034 = R1044 && R1035 = 0 && R1036 = R1044 && R1037 = 0 && R1038 = R1044 && R1039 = 0 && R1040 = R1044 && R1041 = 0 && R1042 = R1044 && R1043 = 0 && R1028 - R1020 < 1 && -1 < R1028 && 0 < R1044 && (R1015 != R1028 || R1016 = R1020 || (R831 = 0 && R1020 = R1028)) && (R1017 != R1028 || R1018 = R1020 || (R831 = 0 && R1020 = R1028)) && (R1025 != 0 || R1026 = R1028 || (R832 = 0 && (R1020 < 1 || R1028 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R1015 = R1028 || (R831 = 0 && R1020 = R1028)) && (R1017 = R1028 || (R831 = 0 && R1020 = R1028)) && (R1025 = 0 || (R832 = 0 && (R1020 < 1 || R1028 < 1)));
// End of Parikh automata intersection problem
