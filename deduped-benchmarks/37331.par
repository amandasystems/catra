// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R992 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s0 -> s2 [0, 65535] { R992 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [47, 47] { R992 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R992 += 1, R834 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R992 += 1 };
  s1 -> s1 [0, 65535] { R992 += 1, R834 += 1 };
  s2 -> s1 [0, 46] { R992 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R992 += 1, R833 += 1, R834 += 1 };
  s2 -> s3 [47, 47] { R992 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R992 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R992 += 1, R834 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R992 += 1 };
  s3 -> s5 [47, 47] { R992 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R992 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R992 += 1, R834 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R992 += 1 };
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R994 += 1, R835 += 1, R836 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R836 += 1, R830 += 1 };
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s1 -> s1 [0, 65535] { R994 += 1, R835 += 1, R836 += 1 };
  s1 -> s2 [0, 65535] { R994 += 1, R836 += 1, R830 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R994 += 1 };
  s2 -> s2 [0, 65535] { R994 += 1, R836 += 1, R830 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R994 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R1000 += 1 };
  s0 -> s0 [0, 65535] { R999 += 1, R1000 += 1 };
  s0 -> s2 [65, 65] { R1000 += 1 };
  s0 -> s1 [66, 65535] { R1000 += 1 };
  s1 -> s1 [0, 64] { R1000 += 1 };
  s1 -> s2 [65, 65] { R1000 += 1 };
  s1 -> s1 [66, 65535] { R1000 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1000 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1002 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R1001 += 1, R1002 += 1 };
  s1 -> s1 [0, 65535] { R1002 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R1004 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1003 += 1, R1004 += 1 };
  s0 -> s2 [0, 65535] { R1004 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [65, 65] { R1004 += 1 };
  s0 -> s1 [66, 65535] { R1004 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R1004 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R1004 += 1 };
  s1 -> s1 [66, 65535] { R1004 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R1004 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1004 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R1004 += 1 };
  s2 -> s1 [66, 65535] { R1004 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1004 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R1006 += 1, R986 += 1 };
  s0 -> s2 [0, 65535] { R1006 += 1, R985 += 1, R986 += 1 };
  s0 -> s0 [0, 65535] { R1005 += 1, R1006 += 1 };
  s0 -> s1 [66, 65535] { R1006 += 1, R986 += 1 };
  s1 -> s1 [0, 64] { R1006 += 1, R986 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1006 += 1 };
  s1 -> s1 [66, 65535] { R1006 += 1, R986 += 1 };
  s2 -> s1 [0, 64] { R1006 += 1, R986 += 1 };
  s2 -> s2 [0, 65535] { R1006 += 1, R985 += 1, R986 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1006 += 1, R986 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1008 += 1, R987 += 1, R988 += 1 };
  s0 -> s0 [0, 65535] { R1007 += 1, R1008 += 1 };
  s0 -> s2 [0, 65535] { R1008 += 1, R988 += 1, R831 += 1 };
  s1 -> s1 [0, 65535] { R1008 += 1, R987 += 1, R988 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1008 += 1, R988 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1008 += 1, R988 += 1, R831 += 1 };
  s2 -> s4 [0, 65535] { R1008 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1008 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1009 += 1, R1010 += 1 };
  s0 -> s1 [0, 65535] { R1010 += 1, R989 += 1, R990 += 1 };
  s0 -> s2 [101, 101] { R1010 += 1, R990 += 1 };
  s1 -> s1 [0, 65535] { R1010 += 1, R989 += 1, R990 += 1 };
  s1 -> s2 [101, 101] { R1010 += 1, R990 += 1 };
  s2 -> s3 [114, 114] { R1010 += 1, R990 += 1 };
  s3 -> s4 [111, 111] { R1010 += 1, R990 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1010 += 1 };
  s5 -> s5 [0, 65535];
  accepting s4, s5;
};
automaton url_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1011 += 1, R1012 += 1 };
  s0 -> s1 [0, 65535] { R1012 += 1, R996 += 1, R832 += 1 };
  s0 -> s2 [0, 65535] { R1012 += 1, R995 += 1, R996 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1012 += 1, R996 += 1, R832 += 1 };
  s1 -> s4 [0, 65535] { R1012 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1012 += 1, R996 += 1, R832 += 1 };
  s2 -> s2 [0, 65535] { R1012 += 1, R995 += 1, R996 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1012 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R1013 += 1, R1014 += 1 };
  s0 -> s1 [0, 65535] { R1014 += 1, R997 += 1, R998 += 1 };
  s0 -> s2 [112, 112] { R1014 += 1, R998 += 1 };
  s1 -> s1 [0, 65535] { R1014 += 1, R997 += 1, R998 += 1 };
  s1 -> s2 [112, 112] { R1014 += 1, R998 += 1 };
  s2 -> s3 [114, 114] { R1014 += 1, R998 += 1 };
  s3 -> s4 [111, 111] { R1014 += 1, R998 += 1 };
  s4 -> s5 [115, 115] { R1014 += 1, R998 += 1 };
  s5 -> s6 [112, 112] { R1014 += 1, R998 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R1014 += 1 };
  s7 -> s7 [0, 65535];
  accepting s6, s7;
};
};
constraint R0 = R990 && R1 - R1014 = 1 && R3 = 0 && R4 - R998 = -1 && R555 = 0 && R556 = R1014 && R989 = R998 && R997 = 0 && R999 = 0 && R1000 = R1014 && R1001 = 0 && R1002 = R1014 && R1003 = 0 && R1004 = R1014 && R1005 = 0 && R1006 = R1014 && R1007 = 0 && R1008 = R1014 && R1009 = 0 && R1010 = R1014 && R1011 = 0 && R1012 = R1014 && R1013 = 0 && R998 - R990 < 1 && -1 < R998 && 0 < R1014 && (R985 != R998 || R986 = R990 || (R831 = 0 && R990 = R998)) && (R987 != R998 || R988 = R990 || (R831 = 0 && R990 = R998)) && (R995 != 0 || R996 = R998 || (R832 = 0 && (R990 < 1 || R998 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R985 = R998 || (R831 = 0 && R990 = R998)) && (R987 = R998 || (R831 = 0 && R990 = R998)) && (R995 = 0 || (R832 = 0 && (R990 < 1 || R998 < 1)));
// End of Parikh automata intersection problem
