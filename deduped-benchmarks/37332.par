// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R872 += 1, R834 += 1 };
  s0 -> s2 [0, 65535] { R872 += 1, R833 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R871 += 1, R872 += 1 };
  s0 -> s3 [47, 47] { R872 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R872 += 1, R834 += 1 };
  s1 -> s6 [0, 65535] { R872 += 1 };
  s1 -> s1 [0, 65535] { R872 += 1, R834 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R872 += 1, R834 += 1 };
  s2 -> s2 [0, 65535] { R872 += 1, R833 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R872 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R872 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R872 += 1, R834 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R872 += 1 };
  s3 -> s5 [47, 47] { R872 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R872 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R872 += 1, R834 += 1 };
  s6 -> s6 [0, 65535] { R872 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R874 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R873 += 1, R874 += 1 };
  s0 -> s2 [0, 65535] { R874 += 1, R836 += 1, R830 += 1 };
  s1 -> s1 [0, 65535] { R874 += 1, R835 += 1, R836 += 1 };
  s1 -> s2 [0, 65535] { R874 += 1, R836 += 1, R830 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R874 += 1 };
  s2 -> s2 [0, 65535] { R874 += 1, R836 += 1, R830 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R874 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R880 += 1 };
  s0 -> s0 [0, 65535] { R879 += 1, R880 += 1 };
  s0 -> s2 [65, 65] { R880 += 1 };
  s0 -> s1 [66, 65535] { R880 += 1 };
  s1 -> s1 [0, 64] { R880 += 1 };
  s1 -> s2 [65, 65] { R880 += 1 };
  s1 -> s1 [66, 65535] { R880 += 1 };
  s2 -> s2 [0, 65535] { R880 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R882 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R881 += 1, R882 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R882 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R884 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R883 += 1, R884 += 1 };
  s0 -> s2 [0, 65535] { R884 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [65, 65] { R884 += 1 };
  s0 -> s1 [66, 65535] { R884 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R884 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R884 += 1 };
  s1 -> s1 [66, 65535] { R884 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R884 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R884 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R884 += 1 };
  s2 -> s1 [66, 65535] { R884 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R884 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R886 += 1, R866 += 1 };
  s0 -> s2 [0, 65535] { R886 += 1, R865 += 1, R866 += 1 };
  s0 -> s0 [0, 65535] { R885 += 1, R886 += 1 };
  s0 -> s1 [66, 65535] { R886 += 1, R866 += 1 };
  s1 -> s1 [0, 64] { R886 += 1, R866 += 1 };
  s1 -> s1 [0, 65535] { R886 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R886 += 1, R866 += 1 };
  s2 -> s1 [0, 64] { R886 += 1, R866 += 1 };
  s2 -> s2 [0, 65535] { R886 += 1, R865 += 1, R866 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R886 += 1, R866 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R887 += 1, R888 += 1 };
  s0 -> s1 [0, 65535] { R888 += 1, R868 += 1, R831 += 1 };
  s0 -> s2 [0, 65535] { R888 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [0, 65535] { R888 += 1, R868 += 1, R831 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R888 += 1 };
  s2 -> s1 [0, 65535] { R888 += 1, R868 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R888 += 1, R867 += 1, R868 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R888 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R889 += 1, R890 += 1 };
  s0 -> s1 [0, 65535] { R890 += 1, R869 += 1, R870 += 1 };
  s0 -> s2 [114, 114] { R890 += 1, R870 += 1 };
  s1 -> s1 [0, 65535] { R890 += 1, R869 += 1, R870 += 1 };
  s1 -> s2 [114, 114] { R890 += 1, R870 += 1 };
  s2 -> s3 [111, 111] { R890 += 1, R870 += 1 };
  s3 -> s4 [115, 115] { R890 += 1, R870 += 1 };
  s4 -> s5 [112, 112] { R890 += 1, R870 += 1 };
  s5 -> s6 [101, 101] { R890 += 1, R870 += 1 };
  s6 -> s7 [114, 114] { R890 += 1, R870 += 1 };
  s7 -> s8 [111, 111] { R890 += 1, R870 += 1 };
  s8 -> s8 [0, 65535] { R890 += 1 };
  s8 -> s9 [0, 65535];
  s9 -> s9 [0, 65535];
  accepting s8, s9;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R892 += 1, R875 += 1, R876 += 1 };
  s0 -> s0 [0, 65535] { R891 += 1, R892 += 1 };
  s0 -> s2 [0, 65535] { R892 += 1, R876 += 1, R832 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R892 += 1, R875 += 1, R876 += 1 };
  s1 -> s2 [0, 65535] { R892 += 1, R876 += 1, R832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R892 += 1 };
  s2 -> s2 [0, 65535] { R892 += 1, R876 += 1, R832 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R892 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R893 += 1, R894 += 1 };
  s0 -> s1 [0, 65535] { R894 += 1, R877 += 1, R878 += 1 };
  s0 -> s2 [112, 112] { R894 += 1, R878 += 1 };
  s1 -> s1 [0, 65535] { R894 += 1, R877 += 1, R878 += 1 };
  s1 -> s2 [112, 112] { R894 += 1, R878 += 1 };
  s2 -> s2 [0, 65535] { R894 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
};
constraint R0 = R870 && R1 - R894 = 1 && R3 = 0 && R4 - R878 = -1 && R555 = 0 && R556 = R894 && R869 = R878 && R877 = 0 && R879 = 0 && R880 = R894 && R881 = 0 && R882 = R894 && R883 = 0 && R884 = R894 && R885 = 0 && R886 = R894 && R887 = 0 && R888 = R894 && R889 = 0 && R890 = R894 && R891 = 0 && R892 = R894 && R893 = 0 && R878 - R870 < 1 && -1 < R878 && 0 < R894 && (R865 != R878 || R866 = R870 || (R831 = 0 && R870 = R878)) && (R867 != R878 || R868 = R870 || (R831 = 0 && R870 = R878)) && (R875 != 0 || R876 = R878 || (R832 = 0 && (R870 < 1 || R878 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R865 = R878 || (R831 = 0 && R870 = R878)) && (R867 = R878 || (R831 = 0 && R870 = R878)) && (R875 = 0 || (R832 = 0 && (R870 < 1 || R878 < 1)));
// End of Parikh automata intersection problem
