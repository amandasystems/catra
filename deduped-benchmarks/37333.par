// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R4, R555, R556, R830, R831, R832, R833, R834, R835, R836, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R556 += 1 };
  s0 -> s0 [0, 65535] { R555 += 1, R556 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R556 += 1 };
  s1 -> s1 [0, 57] { R556 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R556 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R902 += 1, R834 += 1 };
  s0 -> s0 [0, 65535] { R901 += 1, R902 += 1 };
  s0 -> s2 [0, 65535] { R902 += 1, R833 += 1, R834 += 1 };
  s0 -> s3 [47, 47] { R902 += 1, R834 += 1 };
  s0 -> s1 [48, 65535] { R902 += 1, R834 += 1 };
  s1 -> s1 [0, 65535] { R902 += 1, R834 += 1 };
  s1 -> s6 [0, 65535] { R902 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R902 += 1, R834 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R902 += 1, R833 += 1, R834 += 1 };
  s2 -> s3 [47, 47] { R902 += 1, R834 += 1 };
  s2 -> s1 [48, 65535] { R902 += 1, R834 += 1 };
  s3 -> s1 [0, 46] { R902 += 1, R834 += 1 };
  s3 -> s3 [0, 65535] { R902 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R902 += 1, R834 += 1 };
  s3 -> s1 [48, 65535] { R902 += 1, R834 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R902 += 1, R834 += 1 };
  s6 -> s6 [0, 65535] { R902 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R904 += 1, R836 += 1, R830 += 1 };
  s0 -> s2 [0, 65535] { R904 += 1, R835 += 1, R836 += 1 };
  s0 -> s0 [0, 65535] { R903 += 1, R904 += 1 };
  s1 -> s4 [0, 65535] { R904 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R904 += 1, R836 += 1, R830 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R904 += 1, R836 += 1, R830 += 1 };
  s2 -> s2 [0, 65535] { R904 += 1, R835 += 1, R836 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R904 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R910 += 1 };
  s0 -> s0 [0, 65535] { R909 += 1, R910 += 1 };
  s0 -> s2 [65, 65] { R910 += 1 };
  s0 -> s1 [66, 65535] { R910 += 1 };
  s1 -> s1 [0, 64] { R910 += 1 };
  s1 -> s2 [65, 65] { R910 += 1 };
  s1 -> s1 [66, 65535] { R910 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R910 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R911 += 1, R912 += 1 };
  s0 -> s1 [0, 65535] { R912 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R912 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R914 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R914 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R913 += 1, R914 += 1 };
  s0 -> s3 [65, 65] { R914 += 1 };
  s0 -> s1 [66, 65535] { R914 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R914 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R914 += 1 };
  s1 -> s1 [66, 65535] { R914 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R914 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R914 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R914 += 1 };
  s2 -> s1 [66, 65535] { R914 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R914 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R916 += 1, R896 += 1 };
  s0 -> s2 [0, 65535] { R916 += 1, R895 += 1, R896 += 1 };
  s0 -> s0 [0, 65535] { R915 += 1, R916 += 1 };
  s0 -> s1 [66, 65535] { R916 += 1, R896 += 1 };
  s1 -> s1 [0, 64] { R916 += 1, R896 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R916 += 1 };
  s1 -> s1 [66, 65535] { R916 += 1, R896 += 1 };
  s2 -> s1 [0, 64] { R916 += 1, R896 += 1 };
  s2 -> s2 [0, 65535] { R916 += 1, R895 += 1, R896 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R916 += 1, R896 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R917 += 1, R918 += 1 };
  s0 -> s1 [0, 65535] { R918 += 1, R898 += 1, R831 += 1 };
  s0 -> s2 [0, 65535] { R918 += 1, R897 += 1, R898 += 1 };
  s1 -> s1 [0, 65535] { R918 += 1, R898 += 1, R831 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R918 += 1 };
  s2 -> s1 [0, 65535] { R918 += 1, R898 += 1, R831 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R918 += 1, R897 += 1, R898 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R918 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R919 += 1, R920 += 1 };
  s0 -> s1 [0, 65535] { R920 += 1, R899 += 1, R900 += 1 };
  s0 -> s2 [111, 111] { R920 += 1, R900 += 1 };
  s1 -> s1 [0, 65535] { R920 += 1, R899 += 1, R900 += 1 };
  s1 -> s2 [111, 111] { R920 += 1, R900 += 1 };
  s2 -> s3 [115, 115] { R920 += 1, R900 += 1 };
  s3 -> s4 [112, 112] { R920 += 1, R900 += 1 };
  s4 -> s5 [101, 101] { R920 += 1, R900 += 1 };
  s5 -> s6 [114, 114] { R920 += 1, R900 += 1 };
  s6 -> s7 [111, 111] { R920 += 1, R900 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R920 += 1 };
  s8 -> s8 [0, 65535];
  accepting s7, s8;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R922 += 1, R906 += 1, R832 += 1 };
  s0 -> s0 [0, 65535] { R921 += 1, R922 += 1 };
  s0 -> s2 [0, 65535] { R922 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 65535] { R922 += 1, R906 += 1, R832 += 1 };
  s1 -> s4 [0, 65535] { R922 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R922 += 1, R906 += 1, R832 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R922 += 1, R905 += 1, R906 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R922 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 65535] { R924 += 1, R907 += 1, R908 += 1 };
  s0 -> s0 [0, 65535] { R923 += 1, R924 += 1 };
  s0 -> s2 [112, 112] { R924 += 1, R908 += 1 };
  s1 -> s1 [0, 65535] { R924 += 1, R907 += 1, R908 += 1 };
  s1 -> s2 [112, 112] { R924 += 1, R908 += 1 };
  s2 -> s3 [114, 114] { R924 += 1, R908 += 1 };
  s3 -> s3 [0, 65535] { R924 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
};
constraint R0 = R900 && R1 - R924 = 1 && R3 = 0 && R4 - R908 = -1 && R555 = 0 && R556 = R924 && R899 = R908 && R907 = 0 && R909 = 0 && R910 = R924 && R911 = 0 && R912 = R924 && R913 = 0 && R914 = R924 && R915 = 0 && R916 = R924 && R917 = 0 && R918 = R924 && R919 = 0 && R920 = R924 && R921 = 0 && R922 = R924 && R923 = 0 && R908 - R900 < 1 && -1 < R908 && 0 < R924 && (R895 != R908 || R896 = R900 || (R831 = 0 && R900 = R908)) && (R897 != R908 || R898 = R900 || (R831 = 0 && R900 = R908)) && (R905 != 0 || R906 = R908 || (R832 = 0 && (R900 < 1 || R908 < 1))) && (R830 = 0 || (R833 = 0 && R834 = 0)) && (R830 = 0 || (R835 = 0 && R836 = 0)) && (R895 = R908 || (R831 = 0 && R900 = R908)) && (R897 = R908 || (R831 = 0 && R900 = R908)) && (R905 = 0 || (R832 = 0 && (R900 < 1 || R908 < 1)));
// End of Parikh automata intersection problem
