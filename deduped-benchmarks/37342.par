// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R2, R5, R9, R95, R96;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R96 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R96 += 1 };
  s1 -> s1 [0, 57] { R96 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R96 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R153 += 1, R154 += 1 };
  s0 -> s1 [104, 104] { R154 += 1 };
  s1 -> s2 [116, 116] { R154 += 1 };
  s2 -> s3 [116, 116] { R154 += 1 };
  s3 -> s4 [112, 112] { R154 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s1 [0, 65535] { R156 += 1, R140 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R156 += 1, R140 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s1 [0, 65535] { R158 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R158 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R160 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R2 += 1 };
  s0 -> s3 [35, 35] { R160 += 1 };
  s0 -> s1 [36, 65535] { R160 += 1 };
  s1 -> s1 [0, 34] { R160 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R160 += 1 };
  s1 -> s1 [36, 65535] { R160 += 1 };
  s2 -> s1 [0, 34] { R160 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [35, 35] { R160 += 1 };
  s2 -> s1 [36, 65535] { R160 += 1 };
  s3 -> s3 [0, 65535] { R160 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R162 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s3 [63, 63] { R162 += 1 };
  s0 -> s1 [64, 65535] { R162 += 1 };
  s1 -> s1 [0, 62] { R162 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [63, 63] { R162 += 1 };
  s1 -> s1 [64, 65535] { R162 += 1 };
  s2 -> s1 [0, 62] { R162 += 1 };
  s2 -> s2 [0, 65535] { R162 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [63, 63] { R162 += 1 };
  s2 -> s1 [64, 65535] { R162 += 1 };
  s3 -> s3 [0, 65535] { R162 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R164 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R9 += 1, R10 += 1 };
  s0 -> s3 [47, 47] { R164 += 1 };
  s0 -> s1 [48, 65535] { R164 += 1, R10 += 1 };
  s1 -> s1 [0, 46] { R164 += 1, R10 += 1 };
  s1 -> s3 [47, 47] { R164 += 1 };
  s1 -> s1 [48, 65535] { R164 += 1, R10 += 1 };
  s2 -> s1 [0, 46] { R164 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [47, 47] { R164 += 1 };
  s2 -> s1 [48, 65535] { R164 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 34] { R166 += 1, R142 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s1 [36, 58] { R166 += 1, R142 += 1 };
  s0 -> s3 [59, 59] { R166 += 1, R142 += 1 };
  s0 -> s1 [60, 62] { R166 += 1, R142 += 1 };
  s0 -> s1 [64, 65535] { R166 += 1, R142 += 1 };
  s1 -> s1 [0, 34] { R166 += 1, R142 += 1 };
  s1 -> s1 [36, 58] { R166 += 1, R142 += 1 };
  s1 -> s3 [59, 59] { R166 += 1, R142 += 1 };
  s1 -> s1 [60, 62] { R166 += 1, R142 += 1 };
  s1 -> s1 [64, 65535] { R166 += 1, R142 += 1 };
  s2 -> s1 [0, 34] { R166 += 1, R142 += 1 };
  s2 -> s2 [0, 65535] { R166 += 1, R141 += 1, R142 += 1 };
  s2 -> s1 [36, 58] { R166 += 1, R142 += 1 };
  s2 -> s3 [59, 59] { R166 += 1, R142 += 1 };
  s2 -> s1 [60, 62] { R166 += 1, R142 += 1 };
  s2 -> s1 [64, 65535] { R166 += 1, R142 += 1 };
  s3 -> s3 [0, 34] { R166 += 1, R142 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R166 += 1 };
  s3 -> s3 [36, 62] { R166 += 1, R142 += 1 };
  s3 -> s3 [64, 65535] { R166 += 1, R142 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [0, 65535] { R168 += 1, R144 += 1, R137 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R143 += 1, R144 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1, R144 += 1, R137 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R168 += 1 };
  s2 -> s1 [0, 65535] { R168 += 1, R144 += 1, R137 += 1 };
  s2 -> s2 [0, 65535] { R168 += 1, R143 += 1, R144 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R168 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 90] { R170 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R145 += 1, R146 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s1 [92, 92] { R170 += 1, R146 += 1 };
  s0 -> s1 [94, 65535] { R170 += 1, R146 += 1 };
  s1 -> s1 [0, 90] { R170 += 1, R146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R170 += 1 };
  s1 -> s1 [92, 92] { R170 += 1, R146 += 1 };
  s1 -> s1 [94, 65535] { R170 += 1, R146 += 1 };
  s2 -> s1 [0, 90] { R170 += 1, R146 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R145 += 1, R146 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R170 += 1, R146 += 1 };
  s2 -> s1 [94, 65535] { R170 += 1, R146 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R172 += 1, R148 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R147 += 1, R148 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1, R148 += 1, R138 += 1 };
  s1 -> s4 [0, 65535] { R172 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R172 += 1, R148 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R147 += 1, R148 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R172 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s2 [47, 47] { R174 += 1, R150 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R149 += 1, R150 += 1 };
  s1 -> s2 [47, 47] { R174 += 1, R150 += 1 };
  s2 -> s3 [47, 47] { R174 += 1, R150 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R174 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s1 [0, 65535] { R176 += 1, R152 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R151 += 1, R152 += 1 };
  s1 -> s4 [0, 65535] { R176 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1, R152 += 1, R139 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R176 += 1, R152 += 1, R139 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R151 += 1, R152 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R176 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R144 && R1 = R176 && R9 = 2 && R10 = R143 && R95 = 0 && R96 - R175 = -1 && R141 = R143 && R142 = R144 && R149 = 0 && R150 = 2 && R151 = 0 && R152 = 2 && R153 = 0 && R154 - R175 = -1 && R155 = 0 && R156 - R175 = -1 && R157 = R175 && R158 = R176 && R159 = R175 && R160 = R176 && R161 = R175 && R162 = R176 && R163 = R175 && R164 = R176 && R165 = R175 && R166 = R176 && R167 = R175 && R168 = R176 && R169 = R175 && R170 = R176 && R171 = R175 && R172 = R176 && R173 = R175 && R174 = R176 && R2 < 3 && R5 < 3 && R143 < R144 && 1 < R143 && R175 - R176 < 1 && 1 < R175 && (R143 != R146 || R145 = 2 || ((R138 != 0 || R144 - R146 < 1 || R146 < 3) && (R138 = 0 || R144 - R146 < 1 || R146 < 2))) && (R143 != R148 || R147 = 2 || ((R138 != 0 || R144 - R148 < 1 || R148 < 3) && (R138 = 0 || R144 - R148 < 1 || R148 < 2))) && (R143 = R146 || (R138 = 0 && R143 = 2)) && (R143 = R148 || (R138 = 0 && R143 = 2));
// End of Parikh automata intersection problem
