// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1007, R1008, R1107, R1108, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R1200, R1201, R1202, R2, R4, R5, R803, R807, R808;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R1108 += 1 };
  s0 -> s0 [0, 65535] { R1107 += 1, R1108 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R1108 += 1 };
  s1 -> s1 [0, 57] { R1108 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R1108 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R1167 += 1, R1168 += 1 };
  s0 -> s1 [104, 104] { R1168 += 1 };
  s1 -> s2 [116, 116] { R1168 += 1 };
  s2 -> s3 [116, 116] { R1168 += 1 };
  s3 -> s4 [112, 112] { R1168 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1169 += 1, R1170 += 1 };
  s0 -> s1 [0, 65535] { R1170 += 1, R1158 += 1 };
  s1 -> s1 [0, 65535] { R1170 += 1, R1158 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R1180 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1179 += 1, R1180 += 1 };
  s1 -> s1 [0, 65535] { R1180 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R1182 += 1 };
  s0 -> s2 [0, 65535] { R1182 += 1, R803 += 1 };
  s0 -> s0 [0, 65535] { R1181 += 1, R1182 += 1 };
  s0 -> s3 [35, 35] { R1182 += 1 };
  s0 -> s1 [36, 65535] { R1182 += 1 };
  s1 -> s1 [0, 34] { R1182 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R1182 += 1 };
  s1 -> s1 [36, 65535] { R1182 += 1 };
  s2 -> s1 [0, 34] { R1182 += 1 };
  s2 -> s2 [0, 65535] { R1182 += 1, R803 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [35, 35] { R1182 += 1 };
  s2 -> s1 [36, 65535] { R1182 += 1 };
  s3 -> s3 [0, 65535] { R1182 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R1184 += 1, R808 += 1 };
  s0 -> s2 [0, 65535] { R1184 += 1, R807 += 1, R808 += 1 };
  s0 -> s0 [0, 65535] { R1183 += 1, R1184 += 1 };
  s0 -> s3 [63, 63] { R1184 += 1 };
  s0 -> s1 [64, 65535] { R1184 += 1, R808 += 1 };
  s1 -> s1 [0, 62] { R1184 += 1, R808 += 1 };
  s1 -> s3 [63, 63] { R1184 += 1 };
  s1 -> s1 [64, 65535] { R1184 += 1, R808 += 1 };
  s2 -> s1 [0, 62] { R1184 += 1, R808 += 1 };
  s2 -> s2 [0, 65535] { R1184 += 1, R807 += 1, R808 += 1 };
  s2 -> s3 [63, 63] { R1184 += 1 };
  s2 -> s1 [64, 65535] { R1184 += 1, R808 += 1 };
  s3 -> s3 [0, 65535] { R1184 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R1186 += 1, R1008 += 1 };
  s0 -> s0 [0, 65535] { R1185 += 1, R1186 += 1 };
  s0 -> s2 [0, 65535] { R1186 += 1, R1007 += 1, R1008 += 1 };
  s0 -> s3 [47, 47] { R1186 += 1 };
  s0 -> s1 [48, 65535] { R1186 += 1, R1008 += 1 };
  s1 -> s1 [0, 46] { R1186 += 1, R1008 += 1 };
  s1 -> s3 [47, 47] { R1186 += 1 };
  s1 -> s1 [48, 65535] { R1186 += 1, R1008 += 1 };
  s2 -> s1 [0, 46] { R1186 += 1, R1008 += 1 };
  s2 -> s2 [0, 65535] { R1186 += 1, R1007 += 1, R1008 += 1 };
  s2 -> s3 [47, 47] { R1186 += 1 };
  s2 -> s1 [48, 65535] { R1186 += 1, R1008 += 1 };
  s3 -> s3 [0, 65535] { R1186 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R1188 += 1, R1160 += 1 };
  s0 -> s0 [0, 65535] { R1187 += 1, R1188 += 1 };
  s0 -> s2 [0, 65535] { R1188 += 1, R1159 += 1, R1160 += 1 };
  s0 -> s1 [92, 92] { R1188 += 1, R1160 += 1 };
  s0 -> s1 [94, 65535] { R1188 += 1, R1160 += 1 };
  s1 -> s1 [0, 90] { R1188 += 1, R1160 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1188 += 1 };
  s1 -> s1 [92, 92] { R1188 += 1, R1160 += 1 };
  s1 -> s1 [94, 65535] { R1188 += 1, R1160 += 1 };
  s2 -> s1 [0, 90] { R1188 += 1, R1160 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1188 += 1, R1159 += 1, R1160 += 1 };
  s2 -> s1 [92, 92] { R1188 += 1, R1160 += 1 };
  s2 -> s1 [94, 65535] { R1188 += 1, R1160 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1190 += 1, R1161 += 1, R1162 += 1 };
  s0 -> s0 [0, 65535] { R1189 += 1, R1190 += 1 };
  s0 -> s2 [0, 65535] { R1190 += 1, R1162 += 1, R1156 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1190 += 1, R1161 += 1, R1162 += 1 };
  s1 -> s2 [0, 65535] { R1190 += 1, R1162 += 1, R1156 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1190 += 1 };
  s2 -> s2 [0, 65535] { R1190 += 1, R1162 += 1, R1156 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1190 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1191 += 1, R1192 += 1 };
  s0 -> s1 [0, 65535] { R1192 += 1, R1163 += 1, R1164 += 1 };
  s0 -> s2 [47, 47] { R1192 += 1, R1164 += 1 };
  s1 -> s1 [0, 65535] { R1192 += 1, R1163 += 1, R1164 += 1 };
  s1 -> s2 [47, 47] { R1192 += 1, R1164 += 1 };
  s2 -> s3 [47, 47] { R1192 += 1, R1164 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1192 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1194 += 1, R1165 += 1, R1166 += 1 };
  s0 -> s2 [0, 65535] { R1194 += 1, R1166 += 1, R1157 += 1 };
  s0 -> s0 [0, 65535] { R1193 += 1, R1194 += 1 };
  s1 -> s1 [0, 65535] { R1194 += 1, R1165 += 1, R1166 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1194 += 1, R1166 += 1, R1157 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1194 += 1 };
  s2 -> s2 [0, 65535] { R1194 += 1, R1166 += 1, R1157 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1194 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R1196 += 1, R1172 += 1 };
  s0 -> s0 [0, 65535] { R1195 += 1, R1196 += 1 };
  s0 -> s2 [0, 65535] { R1196 += 1, R1171 += 1, R1172 += 1 };
  s0 -> s1 [36, 62] { R1196 += 1, R1172 += 1 };
  s0 -> s3 [63, 63] { R1196 += 1, R1172 += 1 };
  s0 -> s1 [64, 65535] { R1196 += 1, R1172 += 1 };
  s1 -> s1 [0, 34] { R1196 += 1, R1172 += 1 };
  s1 -> s1 [36, 62] { R1196 += 1, R1172 += 1 };
  s1 -> s3 [63, 63] { R1196 += 1, R1172 += 1 };
  s1 -> s1 [64, 65535] { R1196 += 1, R1172 += 1 };
  s2 -> s1 [0, 34] { R1196 += 1, R1172 += 1 };
  s2 -> s2 [0, 65535] { R1196 += 1, R1171 += 1, R1172 += 1 };
  s2 -> s1 [36, 62] { R1196 += 1, R1172 += 1 };
  s2 -> s3 [63, 63] { R1196 += 1, R1172 += 1 };
  s2 -> s1 [64, 65535] { R1196 += 1, R1172 += 1 };
  s3 -> s3 [0, 34] { R1196 += 1, R1172 += 1 };
  s3 -> s3 [0, 65535] { R1196 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [36, 65535] { R1196 += 1, R1172 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1198 += 1, R1174 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R1198 += 1, R1173 += 1, R1174 += 1 };
  s0 -> s0 [0, 65535] { R1197 += 1, R1198 += 1 };
  s1 -> s1 [0, 65535] { R1198 += 1, R1174 += 1, R0 += 1 };
  s1 -> s4 [0, 65535] { R1198 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1198 += 1, R1174 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1198 += 1, R1173 += 1, R1174 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1198 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 62] { R1200 += 1, R1176 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1199 += 1, R1200 += 1 };
  s0 -> s2 [0, 65535] { R1200 += 1, R1176 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R1200 += 1, R1175 += 1, R1176 += 1 };
  s0 -> s4 [63, 63] { R1200 += 1, R1176 += 1 };
  s0 -> s1 [64, 65535] { R1200 += 1, R1176 += 1, R5 += 1 };
  s1 -> s1 [0, 62] { R1200 += 1, R1176 += 1, R5 += 1 };
  s1 -> s4 [63, 63] { R1200 += 1, R1176 += 1 };
  s1 -> s1 [64, 65535] { R1200 += 1, R1176 += 1, R5 += 1 };
  s2 -> s1 [0, 62] { R1200 += 1, R1176 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1200 += 1, R1176 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [63, 63] { R1200 += 1, R1176 += 1 };
  s2 -> s1 [64, 65535] { R1200 += 1, R1176 += 1, R5 += 1 };
  s3 -> s1 [0, 62] { R1200 += 1, R1176 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R1200 += 1, R1176 += 1, R4 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1200 += 1, R1175 += 1, R1176 += 1 };
  s3 -> s4 [63, 63] { R1200 += 1, R1176 += 1 };
  s3 -> s1 [64, 65535] { R1200 += 1, R1176 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1200 += 1, R1176 += 1 };
  s4 -> s6 [0, 65535] { R1200 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1200 += 1 };
  accepting s4, s5, s6;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1202 += 1, R1177 += 1, R1178 += 1 };
  s0 -> s0 [0, 65535] { R1201 += 1, R1202 += 1 };
  s0 -> s2 [0, 65535] { R1202 += 1, R1178 += 1 };
  s1 -> s1 [0, 65535] { R1202 += 1, R1177 += 1, R1178 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1202 += 1, R1178 += 1 };
  s2 -> s3 [0, 65535] { R1202 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1202 += 1, R1178 += 1 };
  s3 -> s3 [0, 65535] { R1202 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 - R5 = 1 && R1 = R1178 && R2 = R1202 && R4 = 0 && R807 = 2 && R1007 = 2 && R1008 = R1177 && R1107 = 0 && R1108 - R1201 = -1 && R1163 = 0 && R1164 = 2 && R1165 = 0 && R1166 = 2 && R1167 = 0 && R1168 - R1201 = -1 && R1169 = 0 && R1170 - R1201 = -1 && R1171 = R1177 && R1172 = R1178 && R1173 = R1177 && R1174 = R1178 && R1175 = R1177 && R1176 = R1178 && R1179 = R1201 && R1180 = R1202 && R1181 = R1201 && R1182 = R1202 && R1183 = R1201 && R1184 = R1202 && R1185 = R1201 && R1186 = R1202 && R1187 = R1201 && R1188 = R1202 && R1189 = R1201 && R1190 = R1202 && R1191 = R1201 && R1192 = R1202 && R1193 = R1201 && R1194 = R1202 && R1195 = R1201 && R1196 = R1202 && R1197 = R1201 && R1198 = R1202 && R1199 = R1201 && R1200 = R1202 && -1 < R5 && R803 < 3 && R1177 - R808 < 1 && R1177 < R1178 && 1 < R1177 && R1201 - R1202 < 1 && 1 < R1201 && (R1159 != 2 || R1160 = R1177 || (R1156 = 0 && R1177 = 2)) && (R1161 != 2 || R1162 = R1177 || (R1156 = 0 && R1177 = 2)) && (R1159 = 2 || (R1156 = 0 && R1177 = 2)) && (R1161 = 2 || (R1156 = 0 && R1177 = 2));
// End of Parikh automata intersection problem
