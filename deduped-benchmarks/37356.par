// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R117, R118, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R200, R3, R4;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R118 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R118 += 1 };
  s1 -> s1 [0, 57] { R118 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R118 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 64] { R186 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s2 [65, 65] { R186 += 1 };
  s0 -> s1 [66, 65535] { R186 += 1 };
  s1 -> s1 [0, 64] { R186 += 1 };
  s1 -> s2 [65, 65] { R186 += 1 };
  s1 -> s1 [66, 65535] { R186 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R186 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R188 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R190 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R190 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s0 -> s3 [65, 65] { R190 += 1 };
  s0 -> s1 [66, 65535] { R190 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R190 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R190 += 1 };
  s1 -> s1 [66, 65535] { R190 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R190 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R190 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R190 += 1 };
  s2 -> s1 [66, 65535] { R190 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R190 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 64] { R192 += 1, R176 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [0, 65535] { R192 += 1, R175 += 1, R176 += 1 };
  s0 -> s1 [66, 65535] { R192 += 1, R176 += 1 };
  s1 -> s1 [0, 64] { R192 += 1, R176 += 1 };
  s1 -> s1 [0, 65535] { R192 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R192 += 1, R176 += 1 };
  s2 -> s1 [0, 64] { R192 += 1, R176 += 1 };
  s2 -> s2 [0, 65535] { R192 += 1, R175 += 1, R176 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R192 += 1, R176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R194 += 1, R178 += 1, R173 += 1 };
  s0 -> s2 [0, 65535] { R194 += 1, R177 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s1 -> s4 [0, 65535] { R194 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R178 += 1, R173 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R194 += 1, R178 += 1, R173 += 1 };
  s2 -> s2 [0, 65535] { R194 += 1, R177 += 1, R178 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R194 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65] { R196 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R195 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R196 += 1, R179 += 1, R180 += 1 };
  s0 -> s3 [69, 69] { R196 += 1, R180 += 1 };
  s0 -> s1 [70, 65535] { R196 += 1, R180 += 1 };
  s1 -> s1 [0, 65] { R196 += 1, R180 += 1 };
  s1 -> s3 [69, 69] { R196 += 1, R180 += 1 };
  s1 -> s1 [70, 65535] { R196 += 1, R180 += 1 };
  s2 -> s1 [0, 65] { R196 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R196 += 1, R179 += 1, R180 += 1 };
  s2 -> s3 [69, 69] { R196 += 1, R180 += 1 };
  s2 -> s1 [70, 65535] { R196 += 1, R180 += 1 };
  s3 -> s3 [0, 65] { R196 += 1, R180 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R196 += 1 };
  s3 -> s3 [69, 65535] { R196 += 1, R180 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R198 += 1, R181 += 1, R182 += 1 };
  s0 -> s2 [0, 65535] { R198 += 1, R182 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R197 += 1, R198 += 1 };
  s1 -> s1 [0, 65535] { R198 += 1, R181 += 1, R182 += 1 };
  s1 -> s2 [0, 65535] { R198 += 1, R182 += 1, R174 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R198 += 1, R182 += 1, R174 += 1 };
  s2 -> s4 [0, 65535] { R198 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R198 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 64] { R200 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s2 [0, 65535] { R200 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [65, 65] { R200 += 1, R184 += 1 };
  s0 -> s4 [65, 65] { R200 += 1, R184 += 1 };
  s0 -> s1 [70, 65535] { R200 += 1, R184 += 1 };
  s1 -> s1 [0, 64] { R200 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R200 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R200 += 1, R184 += 1 };
  s1 -> s4 [65, 65] { R200 += 1, R184 += 1 };
  s1 -> s1 [70, 65535] { R200 += 1, R184 += 1 };
  s2 -> s1 [0, 64] { R200 += 1, R184 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R200 += 1, R183 += 1, R184 += 1 };
  s2 -> s3 [65, 65] { R200 += 1, R184 += 1 };
  s2 -> s4 [65, 65] { R200 += 1, R184 += 1 };
  s2 -> s1 [70, 65535] { R200 += 1, R184 += 1 };
  s3 -> s3 [0, 65535] { R200 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R200 += 1, R184 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R200 += 1 };
  s4 -> s4 [70, 65535] { R200 += 1, R184 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R180 && R1 - R200 = 1 && R3 = 0 && R4 - R179 = -1 && R117 = 0 && R118 = R200 && R185 = 0 && R186 = R200 && R187 = 0 && R188 = R200 && R189 = 0 && R190 = R200 && R191 = 0 && R192 = R200 && R193 = 0 && R194 = R200 && R195 = 0 && R196 = R200 && R197 = 0 && R198 = R200 && R199 = 0 && R179 - R180 < 1 && -1 < R179 && 0 < R200 && (R175 != R179 || R176 = R180 || (R173 = 0 && R179 = R180)) && (R177 != R179 || R178 = R180 || (R173 = 0 && R179 = R180)) && (R181 != 0 || R179 = R182 || (R174 = 0 && R179 = 0)) && (R183 != 0 || R179 = R184 || (R174 = 0 && R179 = 0)) && (R175 = R179 || (R173 = 0 && R179 = R180)) && (R177 = R179 || (R173 = 0 && R179 = R180)) && (R181 = 0 || (R174 = 0 && R179 = 0)) && (R183 = 0 || (R174 = 0 && R179 = 0));
// End of Parikh automata intersection problem
