// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R275, R276, R3, R4, R411, R412, R479, R480, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R480 += 1 };
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R480 += 1 };
  s1 -> s1 [0, 57] { R480 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R480 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R523 += 1, R524 += 1 };
  s0 -> s1 [104, 104] { R524 += 1 };
  s1 -> s2 [116, 116] { R524 += 1 };
  s2 -> s3 [116, 116] { R524 += 1 };
  s3 -> s4 [112, 112] { R524 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R525 += 1, R526 += 1 };
  s0 -> s1 [0, 65535] { R526 += 1, R514 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R526 += 1, R514 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R527 += 1, R528 += 1 };
  s0 -> s1 [0, 65535] { R528 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R528 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R530 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R529 += 1, R530 += 1 };
  s0 -> s2 [0, 65535] { R530 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [35, 35] { R530 += 1 };
  s0 -> s1 [36, 65535] { R530 += 1, R4 += 1 };
  s1 -> s1 [0, 34] { R530 += 1, R4 += 1 };
  s1 -> s3 [35, 35] { R530 += 1 };
  s1 -> s1 [36, 65535] { R530 += 1, R4 += 1 };
  s2 -> s1 [0, 34] { R530 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R530 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [35, 35] { R530 += 1 };
  s2 -> s1 [36, 65535] { R530 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R530 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R532 += 1, R276 += 1 };
  s0 -> s2 [0, 65535] { R532 += 1, R275 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R531 += 1, R532 += 1 };
  s0 -> s3 [63, 63] { R532 += 1 };
  s0 -> s1 [64, 65535] { R532 += 1, R276 += 1 };
  s1 -> s1 [0, 62] { R532 += 1, R276 += 1 };
  s1 -> s3 [63, 63] { R532 += 1 };
  s1 -> s1 [64, 65535] { R532 += 1, R276 += 1 };
  s2 -> s1 [0, 62] { R532 += 1, R276 += 1 };
  s2 -> s2 [0, 65535] { R532 += 1, R275 += 1, R276 += 1 };
  s2 -> s3 [63, 63] { R532 += 1 };
  s2 -> s1 [64, 65535] { R532 += 1, R276 += 1 };
  s3 -> s3 [0, 65535] { R532 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R534 += 1, R412 += 1 };
  s0 -> s2 [0, 65535] { R534 += 1, R411 += 1, R412 += 1 };
  s0 -> s0 [0, 65535] { R533 += 1, R534 += 1 };
  s0 -> s3 [47, 47] { R534 += 1 };
  s0 -> s1 [48, 65535] { R534 += 1, R412 += 1 };
  s1 -> s1 [0, 46] { R534 += 1, R412 += 1 };
  s1 -> s3 [47, 47] { R534 += 1 };
  s1 -> s1 [48, 65535] { R534 += 1, R412 += 1 };
  s2 -> s1 [0, 46] { R534 += 1, R412 += 1 };
  s2 -> s2 [0, 65535] { R534 += 1, R411 += 1, R412 += 1 };
  s2 -> s3 [47, 47] { R534 += 1 };
  s2 -> s1 [48, 65535] { R534 += 1, R412 += 1 };
  s3 -> s3 [0, 65535] { R534 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R536 += 1, R516 += 1 };
  s0 -> s2 [0, 65535] { R536 += 1, R515 += 1, R516 += 1 };
  s0 -> s0 [0, 65535] { R535 += 1, R536 += 1 };
  s0 -> s1 [92, 92] { R536 += 1, R516 += 1 };
  s0 -> s3 [93, 93] { R536 += 1, R516 += 1 };
  s0 -> s1 [94, 65535] { R536 += 1, R516 += 1 };
  s1 -> s1 [0, 90] { R536 += 1, R516 += 1 };
  s1 -> s1 [92, 92] { R536 += 1, R516 += 1 };
  s1 -> s3 [93, 93] { R536 += 1, R516 += 1 };
  s1 -> s1 [94, 65535] { R536 += 1, R516 += 1 };
  s2 -> s1 [0, 90] { R536 += 1, R516 += 1 };
  s2 -> s2 [0, 65535] { R536 += 1, R515 += 1, R516 += 1 };
  s2 -> s1 [92, 92] { R536 += 1, R516 += 1 };
  s2 -> s3 [93, 93] { R536 += 1, R516 += 1 };
  s2 -> s1 [94, 65535] { R536 += 1, R516 += 1 };
  s3 -> s3 [0, 90] { R536 += 1, R516 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R536 += 1 };
  s3 -> s3 [92, 65535] { R536 += 1, R516 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R538 += 1, R517 += 1, R518 += 1 };
  s0 -> s2 [0, 65535] { R538 += 1, R518 += 1, R512 += 1 };
  s0 -> s0 [0, 65535] { R537 += 1, R538 += 1 };
  s1 -> s1 [0, 65535] { R538 += 1, R517 += 1, R518 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R538 += 1, R518 += 1, R512 += 1 };
  s2 -> s3 [0, 65535] { R538 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R538 += 1, R518 += 1, R512 += 1 };
  s3 -> s3 [0, 65535] { R538 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R539 += 1, R540 += 1 };
  s0 -> s1 [0, 65535] { R540 += 1, R519 += 1, R520 += 1 };
  s0 -> s2 [47, 47] { R540 += 1, R520 += 1 };
  s1 -> s1 [0, 65535] { R540 += 1, R519 += 1, R520 += 1 };
  s1 -> s2 [47, 47] { R540 += 1, R520 += 1 };
  s2 -> s3 [47, 47] { R540 += 1, R520 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R540 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R542 += 1, R522 += 1, R513 += 1 };
  s0 -> s2 [0, 65535] { R542 += 1, R521 += 1, R522 += 1 };
  s0 -> s0 [0, 65535] { R541 += 1, R542 += 1 };
  s1 -> s4 [0, 65535] { R542 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R542 += 1, R522 += 1, R513 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R542 += 1, R522 += 1, R513 += 1 };
  s2 -> s2 [0, 65535] { R542 += 1, R521 += 1, R522 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R542 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R1 = R542 && R3 = 2 && R275 = 2 && R411 = 2 && R412 = R516 && R479 = 0 && R480 - R541 = -1 && R515 = 2 && R519 = 0 && R520 = 2 && R521 = 0 && R522 = 2 && R523 = 0 && R524 - R541 = -1 && R525 = 0 && R526 - R541 = -1 && R527 = R541 && R528 = R542 && R529 = R541 && R530 = R542 && R531 = R541 && R532 = R542 && R533 = R541 && R534 = R542 && R535 = R541 && R536 = R542 && R537 = R541 && R538 = R542 && R539 = R541 && R540 = R542 && R516 < R0 && R516 - R4 < 1 && R516 - R276 < 1 && 1 < R516 && R541 - R542 < 1 && 1 < R541 && (R516 != R518 || R517 = 2 || ((R512 != 0 || R0 - R518 < 1 || R4 < R518 || R276 < R518 || R518 < 3) && (R512 = 0 || R0 - R518 < 1 || R4 < R518 || R276 < R518 || R518 < 2))) && (R516 = R518 || (R512 = 0 && R516 = 2));
// End of Parikh automata intersection problem
