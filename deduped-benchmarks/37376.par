// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1143, R1147, R1148, R1431, R1432, R1573, R1574, R1643, R1644, R1645, R1646, R1647, R1648, R1649, R1650, R1651, R1652, R1653, R1654, R1655, R1656, R1657, R1658, R1659, R1660, R1661, R1662, R1663, R1664, R1665, R1666, R1667, R1668, R1669, R1670, R1671, R1672, R1673, R1674, R1675, R1676, R1677, R1678, R1679, R1680, R1681, R1682, R1683, R1684, R1685, R1686, R1687, R1688, R1689, R1690, R1691, R1692, R1693, R1694, R1695, R1696, R1697, R1698, R1699, R1700, R1701, R1702, R1703, R1704, R1705, R1706, R1707, R1708, R1709, R1710, R2, R3, R4, R8, R9;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R1574 += 1 };
  s0 -> s0 [0, 65535] { R1573 += 1, R1574 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R1574 += 1 };
  s1 -> s1 [0, 57] { R1574 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R1574 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R1663 += 1, R1664 += 1 };
  s0 -> s1 [104, 104] { R1664 += 1 };
  s1 -> s2 [116, 116] { R1664 += 1 };
  s2 -> s3 [116, 116] { R1664 += 1 };
  s3 -> s4 [112, 112] { R1664 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1665 += 1, R1666 += 1 };
  s0 -> s1 [0, 65535] { R1666 += 1, R1646 += 1 };
  s1 -> s1 [0, 65535] { R1666 += 1, R1646 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R1682 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R1681 += 1, R1682 += 1 };
  s1 -> s1 [0, 65535] { R1682 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R1684 += 1 };
  s0 -> s0 [0, 65535] { R1683 += 1, R1684 += 1 };
  s0 -> s2 [0, 65535] { R1684 += 1, R1143 += 1 };
  s0 -> s3 [35, 35] { R1684 += 1 };
  s0 -> s1 [36, 65535] { R1684 += 1 };
  s1 -> s1 [0, 34] { R1684 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R1684 += 1 };
  s1 -> s1 [36, 65535] { R1684 += 1 };
  s2 -> s1 [0, 34] { R1684 += 1 };
  s2 -> s2 [0, 65535] { R1684 += 1, R1143 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [35, 35] { R1684 += 1 };
  s2 -> s1 [36, 65535] { R1684 += 1 };
  s3 -> s3 [0, 65535] { R1684 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R1686 += 1, R1148 += 1 };
  s0 -> s0 [0, 65535] { R1685 += 1, R1686 += 1 };
  s0 -> s2 [0, 65535] { R1686 += 1, R1147 += 1, R1148 += 1 };
  s0 -> s3 [63, 63] { R1686 += 1 };
  s0 -> s1 [64, 65535] { R1686 += 1, R1148 += 1 };
  s1 -> s1 [0, 62] { R1686 += 1, R1148 += 1 };
  s1 -> s3 [63, 63] { R1686 += 1 };
  s1 -> s1 [64, 65535] { R1686 += 1, R1148 += 1 };
  s2 -> s1 [0, 62] { R1686 += 1, R1148 += 1 };
  s2 -> s2 [0, 65535] { R1686 += 1, R1147 += 1, R1148 += 1 };
  s2 -> s3 [63, 63] { R1686 += 1 };
  s2 -> s1 [64, 65535] { R1686 += 1, R1148 += 1 };
  s3 -> s3 [0, 65535] { R1686 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R1688 += 1, R1432 += 1 };
  s0 -> s0 [0, 65535] { R1687 += 1, R1688 += 1 };
  s0 -> s2 [0, 65535] { R1688 += 1, R1431 += 1, R1432 += 1 };
  s0 -> s3 [47, 47] { R1688 += 1 };
  s0 -> s1 [48, 65535] { R1688 += 1, R1432 += 1 };
  s1 -> s1 [0, 46] { R1688 += 1, R1432 += 1 };
  s1 -> s3 [47, 47] { R1688 += 1 };
  s1 -> s1 [48, 65535] { R1688 += 1, R1432 += 1 };
  s2 -> s1 [0, 46] { R1688 += 1, R1432 += 1 };
  s2 -> s2 [0, 65535] { R1688 += 1, R1431 += 1, R1432 += 1 };
  s2 -> s3 [47, 47] { R1688 += 1 };
  s2 -> s1 [48, 65535] { R1688 += 1, R1432 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1688 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R1690 += 1, R1656 += 1 };
  s0 -> s0 [0, 65535] { R1689 += 1, R1690 += 1 };
  s0 -> s2 [0, 65535] { R1690 += 1, R1655 += 1, R1656 += 1 };
  s0 -> s1 [92, 92] { R1690 += 1, R1656 += 1 };
  s0 -> s1 [94, 65535] { R1690 += 1, R1656 += 1 };
  s1 -> s1 [0, 90] { R1690 += 1, R1656 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1690 += 1 };
  s1 -> s1 [92, 92] { R1690 += 1, R1656 += 1 };
  s1 -> s1 [94, 65535] { R1690 += 1, R1656 += 1 };
  s2 -> s1 [0, 90] { R1690 += 1, R1656 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1690 += 1, R1655 += 1, R1656 += 1 };
  s2 -> s1 [92, 92] { R1690 += 1, R1656 += 1 };
  s2 -> s1 [94, 65535] { R1690 += 1, R1656 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1691 += 1, R1692 += 1 };
  s0 -> s1 [0, 65535] { R1692 += 1, R1658 += 1, R1644 += 1 };
  s0 -> s2 [0, 65535] { R1692 += 1, R1657 += 1, R1658 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1692 += 1, R1658 += 1, R1644 += 1 };
  s1 -> s4 [0, 65535] { R1692 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1692 += 1, R1658 += 1, R1644 += 1 };
  s2 -> s2 [0, 65535] { R1692 += 1, R1657 += 1, R1658 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1692 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1693 += 1, R1694 += 1 };
  s0 -> s1 [0, 65535] { R1694 += 1, R1659 += 1, R1660 += 1 };
  s0 -> s2 [47, 47] { R1694 += 1, R1660 += 1 };
  s1 -> s1 [0, 65535] { R1694 += 1, R1659 += 1, R1660 += 1 };
  s1 -> s2 [47, 47] { R1694 += 1, R1660 += 1 };
  s2 -> s3 [47, 47] { R1694 += 1, R1660 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1694 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1696 += 1, R1661 += 1, R1662 += 1 };
  s0 -> s0 [0, 65535] { R1695 += 1, R1696 += 1 };
  s0 -> s2 [0, 65535] { R1696 += 1, R1662 += 1, R1645 += 1 };
  s1 -> s1 [0, 65535] { R1696 += 1, R1661 += 1, R1662 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1696 += 1, R1662 += 1, R1645 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1696 += 1 };
  s2 -> s2 [0, 65535] { R1696 += 1, R1662 += 1, R1645 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1696 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R1698 += 1, R1668 += 1 };
  s0 -> s2 [0, 65535] { R1698 += 1, R1667 += 1, R1668 += 1 };
  s0 -> s0 [0, 65535] { R1697 += 1, R1698 += 1 };
  s0 -> s1 [36, 62] { R1698 += 1, R1668 += 1 };
  s0 -> s3 [63, 63] { R1698 += 1, R1668 += 1 };
  s0 -> s1 [64, 65535] { R1698 += 1, R1668 += 1 };
  s1 -> s1 [0, 34] { R1698 += 1, R1668 += 1 };
  s1 -> s1 [36, 62] { R1698 += 1, R1668 += 1 };
  s1 -> s3 [63, 63] { R1698 += 1, R1668 += 1 };
  s1 -> s1 [64, 65535] { R1698 += 1, R1668 += 1 };
  s2 -> s1 [0, 34] { R1698 += 1, R1668 += 1 };
  s2 -> s2 [0, 65535] { R1698 += 1, R1667 += 1, R1668 += 1 };
  s2 -> s1 [36, 62] { R1698 += 1, R1668 += 1 };
  s2 -> s3 [63, 63] { R1698 += 1, R1668 += 1 };
  s2 -> s1 [64, 65535] { R1698 += 1, R1668 += 1 };
  s3 -> s3 [0, 34] { R1698 += 1, R1668 += 1 };
  s3 -> s3 [0, 65535] { R1698 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [36, 65535] { R1698 += 1, R1668 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1700 += 1, R1670 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R1700 += 1, R1669 += 1, R1670 += 1 };
  s0 -> s0 [0, 65535] { R1699 += 1, R1700 += 1 };
  s1 -> s4 [0, 65535] { R1700 += 1 };
  s1 -> s1 [0, 65535] { R1700 += 1, R1670 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1700 += 1, R1670 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R1700 += 1, R1669 += 1, R1670 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1700 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 62] { R1702 += 1, R1672 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R1702 += 1, R1671 += 1, R1672 += 1 };
  s0 -> s0 [0, 65535] { R1701 += 1, R1702 += 1 };
  s0 -> s3 [0, 65535] { R1702 += 1, R1672 += 1, R8 += 1, R9 += 1 };
  s0 -> s4 [63, 63] { R1702 += 1, R1672 += 1 };
  s0 -> s1 [64, 65535] { R1702 += 1, R1672 += 1, R9 += 1 };
  s1 -> s1 [0, 62] { R1702 += 1, R1672 += 1, R9 += 1 };
  s1 -> s4 [63, 63] { R1702 += 1, R1672 += 1 };
  s1 -> s1 [64, 65535] { R1702 += 1, R1672 += 1, R9 += 1 };
  s2 -> s1 [0, 62] { R1702 += 1, R1672 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R1702 += 1, R1671 += 1, R1672 += 1 };
  s2 -> s3 [0, 65535] { R1702 += 1, R1672 += 1, R8 += 1, R9 += 1 };
  s2 -> s4 [63, 63] { R1702 += 1, R1672 += 1 };
  s2 -> s1 [64, 65535] { R1702 += 1, R1672 += 1, R9 += 1 };
  s3 -> s1 [0, 62] { R1702 += 1, R1672 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R1702 += 1, R1672 += 1, R8 += 1, R9 += 1 };
  s3 -> s4 [63, 63] { R1702 += 1, R1672 += 1 };
  s3 -> s1 [64, 65535] { R1702 += 1, R1672 += 1, R9 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1702 += 1, R1672 += 1 };
  s4 -> s6 [0, 65535] { R1702 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1702 += 1 };
  accepting s4, s5, s6;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1704 += 1, R1673 += 1, R1674 += 1 };
  s0 -> s2 [0, 65535] { R1704 += 1, R1674 += 1, R1648 += 1, R0 += 1 };
  s0 -> s3 [0, 65535] { R1704 += 1, R1674 += 1, R1647 += 1, R1648 += 1 };
  s0 -> s0 [0, 65535] { R1703 += 1, R1704 += 1 };
  s1 -> s1 [0, 65535] { R1704 += 1, R1673 += 1, R1674 += 1 };
  s1 -> s2 [0, 65535] { R1704 += 1, R1674 += 1, R1648 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R1704 += 1, R1674 += 1, R1647 += 1, R1648 += 1 };
  s2 -> s6 [0, 65535] { R1704 += 1, R1674 += 1 };
  s2 -> s2 [0, 65535] { R1704 += 1, R1674 += 1, R1648 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1704 += 1 };
  s3 -> s2 [0, 65535] { R1704 += 1, R1674 += 1, R1648 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1704 += 1, R1674 += 1, R1647 += 1, R1648 += 1 };
  s3 -> s5 [0, 65535] { R1704 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1704 += 1 };
  s6 -> s6 [0, 65535] { R1704 += 1, R1674 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1704 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton url_16 {
  init s0;
  s0 -> s1 [0, 46] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s0 -> s2 [0, 65535] { R1706 += 1, R1676 += 1, R1649 += 1, R1650 += 1 };
  s0 -> s3 [0, 65535] { R1706 += 1, R1675 += 1, R1676 += 1 };
  s0 -> s0 [0, 65535] { R1705 += 1, R1706 += 1 };
  s0 -> s4 [47, 47] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s0 -> s1 [48, 58] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s0 -> s5 [59, 59] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s0 -> s1 [60, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s1 -> s1 [0, 46] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s1 -> s4 [47, 47] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s1 -> s1 [48, 58] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s1 -> s5 [59, 59] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s1 -> s1 [60, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s2 -> s1 [0, 46] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s2 -> s2 [0, 65535] { R1706 += 1, R1676 += 1, R1649 += 1, R1650 += 1 };
  s2 -> s4 [47, 47] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s2 -> s1 [48, 58] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s2 -> s5 [59, 59] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s2 -> s1 [60, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s3 -> s1 [0, 46] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s3 -> s2 [0, 65535] { R1706 += 1, R1676 += 1, R1649 += 1, R1650 += 1 };
  s3 -> s3 [0, 65535] { R1706 += 1, R1675 += 1, R1676 += 1 };
  s3 -> s4 [47, 47] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s3 -> s1 [48, 58] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s3 -> s5 [59, 59] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s3 -> s1 [60, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s4 -> s4 [0, 58] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s4 -> s6 [59, 59] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s4 -> s4 [60, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s5 -> s5 [0, 46] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s5 -> s6 [47, 47] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s5 -> s5 [48, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R1706 += 1, R1676 += 1 };
  s6 -> s9 [0, 65535] { R1706 += 1 };
  s6 -> s6 [0, 65535] { R1706 += 1, R1676 += 1, R1650 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R1706 += 1, R1676 += 1 };
  s8 -> s9 [0, 65535] { R1706 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s9 [0, 65535] { R1706 += 1 };
  accepting s6, s7, s8, s9;
};
automaton url_17 {
  init s0;
  s0 -> s1 [0, 58] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s0 -> s2 [0, 65535] { R1708 += 1, R1678 += 1, R1652 += 1, R4 += 1 };
  s0 -> s3 [0, 65535] { R1708 += 1, R1678 += 1, R1651 += 1, R1652 += 1 };
  s0 -> s4 [0, 65535] { R1708 += 1, R1677 += 1, R1678 += 1 };
  s0 -> s0 [0, 65535] { R1707 += 1, R1708 += 1 };
  s0 -> s5 [59, 59] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s0 -> s1 [60, 65535] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s1 -> s1 [0, 58] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s1 -> s1 [0, 65535] { R1708 += 1, R1678 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R1708 += 1 };
  s1 -> s5 [59, 59] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s1 -> s1 [60, 65535] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s2 -> s1 [0, 58] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s2 -> s2 [0, 65535] { R1708 += 1, R1678 += 1, R1652 += 1, R4 += 1 };
  s2 -> s8 [0, 65535] { R1708 += 1, R1678 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1708 += 1 };
  s2 -> s5 [59, 59] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s2 -> s1 [60, 65535] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s3 -> s1 [0, 58] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s3 -> s2 [0, 65535] { R1708 += 1, R1678 += 1, R1652 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1708 += 1, R1678 += 1, R1651 += 1, R1652 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R1708 += 1 };
  s3 -> s5 [59, 59] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s3 -> s1 [60, 65535] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s4 -> s1 [0, 58] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s4 -> s2 [0, 65535] { R1708 += 1, R1678 += 1, R1652 += 1, R4 += 1 };
  s4 -> s3 [0, 65535] { R1708 += 1, R1678 += 1, R1651 += 1, R1652 += 1 };
  s4 -> s4 [0, 65535] { R1708 += 1, R1677 += 1, R1678 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s5 [59, 59] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s4 -> s1 [60, 65535] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s5 -> s5 [0, 65535] { R1708 += 1, R1678 += 1, R1652 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1708 += 1 };
  s8 -> s8 [0, 65535] { R1708 += 1, R1678 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1708 += 1 };
  accepting s3, s4, s8, s2, s6, s1, s7, s0;
};
automaton url_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1710 += 1, R1680 += 1, R1654 += 1, R1643 += 1 };
  s0 -> s0 [0, 65535] { R1709 += 1, R1710 += 1 };
  s0 -> s2 [0, 65535] { R1710 += 1, R1679 += 1, R1680 += 1 };
  s0 -> s3 [0, 65535] { R1710 += 1, R1680 += 1, R1653 += 1, R1654 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1710 += 1 };
  s1 -> s1 [0, 65535] { R1710 += 1, R1680 += 1, R1654 += 1, R1643 += 1 };
  s1 -> s6 [0, 65535] { R1710 += 1, R1680 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1710 += 1, R1680 += 1, R1654 += 1, R1643 += 1 };
  s2 -> s2 [0, 65535] { R1710 += 1, R1679 += 1, R1680 += 1 };
  s2 -> s3 [0, 65535] { R1710 += 1, R1680 += 1, R1653 += 1, R1654 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1710 += 1 };
  s3 -> s1 [0, 65535] { R1710 += 1, R1680 += 1, R1654 += 1, R1643 += 1 };
  s3 -> s3 [0, 65535] { R1710 += 1, R1680 += 1, R1653 += 1, R1654 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1710 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1710 += 1 };
  s6 -> s6 [0, 65535] { R1710 += 1, R1680 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1648 && R2 = R1680 && R3 = R1710 && R8 = 0 && R9 = R1650 && R1147 = 2 && R1431 = 2 && R1432 = R1679 && R1573 = 0 && R1574 - R1709 = -1 && R1647 - R1650 = 1 && R1649 = 0 && R1659 = 0 && R1660 = 2 && R1661 = 0 && R1662 = 2 && R1663 = 0 && R1664 - R1709 = -1 && R1665 = 0 && R1666 - R1709 = -1 && R1667 = R1679 && R1668 = R1680 && R1669 = R1679 && R1670 = R1680 && R1671 = R1679 && R1672 = R1680 && R1673 = R1679 && R1674 = R1680 && R1675 = R1679 && R1676 = R1680 && R1677 = R1679 && R1678 = R1680 && R1681 = R1709 && R1682 = R1710 && R1683 = R1709 && R1684 = R1710 && R1685 = R1709 && R1686 = R1710 && R1687 = R1709 && R1688 = R1710 && R1689 = R1709 && R1690 = R1710 && R1691 = R1709 && R1692 = R1710 && R1693 = R1709 && R1694 = R1710 && R1695 = R1709 && R1696 = R1710 && R1697 = R1709 && R1698 = R1710 && R1699 = R1709 && R1700 = R1710 && R1701 = R1709 && R1702 = R1710 && R1703 = R1709 && R1704 = R1710 && R1705 = R1709 && R1706 = R1710 && R1707 = R1709 && R1708 = R1710 && R0 != 0 && R4 < 1 && R1143 < 3 && R1679 - R1148 < 1 && R1650 < R1648 && -1 < R1650 && R1679 < R1680 && 1 < R1679 && R1709 - R1710 < 1 && 1 < R1709 && (R1651 != 0 || R1650 = R1652 || (R1643 = 0 && R1650 = 0)) && (R1653 != 0 || R1650 = R1654 || (R1643 = 0 && R1650 = 0)) && (R1655 != 2 || R1656 = R1679 || (R1644 = 0 && R1679 = 2)) && (R1657 != 2 || R1658 = R1679 || (R1644 = 0 && R1679 = 2)) && (R1651 = 0 || (R1643 = 0 && R1650 = 0)) && (R1653 = 0 || (R1643 = 0 && R1650 = 0)) && (R1655 = 2 || (R1644 = 0 && R1679 = 2)) && (R1657 = 2 || (R1644 = 0 && R1679 = 2));
// End of Parikh automata intersection problem
