// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R347, R348, R4, R519, R520, R605, R606, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R606 += 1 };
  s0 -> s0 [0, 65535] { R605 += 1, R606 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R606 += 1 };
  s1 -> s1 [0, 57] { R606 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R606 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R663 += 1, R664 += 1 };
  s0 -> s1 [104, 104] { R664 += 1 };
  s1 -> s2 [116, 116] { R664 += 1 };
  s2 -> s3 [116, 116] { R664 += 1 };
  s3 -> s4 [112, 112] { R664 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s1 [0, 65535] { R666 += 1, R650 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R666 += 1, R650 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R668 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s1 -> s1 [0, 65535] { R668 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R670 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R670 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R669 += 1, R670 += 1 };
  s0 -> s3 [35, 35] { R670 += 1 };
  s0 -> s1 [36, 65535] { R670 += 1, R4 += 1 };
  s1 -> s1 [0, 34] { R670 += 1, R4 += 1 };
  s1 -> s3 [35, 35] { R670 += 1 };
  s1 -> s1 [36, 65535] { R670 += 1, R4 += 1 };
  s2 -> s1 [0, 34] { R670 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R670 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [35, 35] { R670 += 1 };
  s2 -> s1 [36, 65535] { R670 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R670 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R672 += 1, R348 += 1 };
  s0 -> s0 [0, 65535] { R671 += 1, R672 += 1 };
  s0 -> s2 [0, 65535] { R672 += 1, R347 += 1, R348 += 1 };
  s0 -> s3 [63, 63] { R672 += 1 };
  s0 -> s1 [64, 65535] { R672 += 1, R348 += 1 };
  s1 -> s1 [0, 62] { R672 += 1, R348 += 1 };
  s1 -> s3 [63, 63] { R672 += 1 };
  s1 -> s1 [64, 65535] { R672 += 1, R348 += 1 };
  s2 -> s1 [0, 62] { R672 += 1, R348 += 1 };
  s2 -> s2 [0, 65535] { R672 += 1, R347 += 1, R348 += 1 };
  s2 -> s3 [63, 63] { R672 += 1 };
  s2 -> s1 [64, 65535] { R672 += 1, R348 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R672 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R674 += 1, R520 += 1 };
  s0 -> s0 [0, 65535] { R673 += 1, R674 += 1 };
  s0 -> s2 [0, 65535] { R674 += 1, R519 += 1, R520 += 1 };
  s0 -> s3 [47, 47] { R674 += 1 };
  s0 -> s1 [48, 65535] { R674 += 1, R520 += 1 };
  s1 -> s1 [0, 46] { R674 += 1, R520 += 1 };
  s1 -> s3 [47, 47] { R674 += 1 };
  s1 -> s1 [48, 65535] { R674 += 1, R520 += 1 };
  s2 -> s1 [0, 46] { R674 += 1, R520 += 1 };
  s2 -> s2 [0, 65535] { R674 += 1, R519 += 1, R520 += 1 };
  s2 -> s3 [47, 47] { R674 += 1 };
  s2 -> s1 [48, 65535] { R674 += 1, R520 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R674 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 34] { R676 += 1, R652 += 1 };
  s0 -> s2 [0, 65535] { R676 += 1, R651 += 1, R652 += 1 };
  s0 -> s0 [0, 65535] { R675 += 1, R676 += 1 };
  s0 -> s1 [36, 65535] { R676 += 1, R652 += 1 };
  s1 -> s1 [0, 34] { R676 += 1, R652 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R676 += 1 };
  s1 -> s1 [36, 65535] { R676 += 1, R652 += 1 };
  s2 -> s1 [0, 34] { R676 += 1, R652 += 1 };
  s2 -> s2 [0, 65535] { R676 += 1, R651 += 1, R652 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [36, 65535] { R676 += 1, R652 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R678 += 1, R654 += 1, R647 += 1 };
  s0 -> s2 [0, 65535] { R678 += 1, R653 += 1, R654 += 1 };
  s0 -> s0 [0, 65535] { R677 += 1, R678 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R678 += 1, R654 += 1, R647 += 1 };
  s1 -> s4 [0, 65535] { R678 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R678 += 1, R654 += 1, R647 += 1 };
  s2 -> s2 [0, 65535] { R678 += 1, R653 += 1, R654 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R678 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 90] { R680 += 1, R656 += 1 };
  s0 -> s2 [0, 65535] { R680 += 1, R655 += 1, R656 += 1 };
  s0 -> s0 [0, 65535] { R679 += 1, R680 += 1 };
  s0 -> s1 [92, 92] { R680 += 1, R656 += 1 };
  s0 -> s1 [94, 65535] { R680 += 1, R656 += 1 };
  s1 -> s1 [0, 90] { R680 += 1, R656 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R680 += 1 };
  s1 -> s1 [92, 92] { R680 += 1, R656 += 1 };
  s1 -> s1 [94, 65535] { R680 += 1, R656 += 1 };
  s2 -> s1 [0, 90] { R680 += 1, R656 += 1 };
  s2 -> s2 [0, 65535] { R680 += 1, R655 += 1, R656 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R680 += 1, R656 += 1 };
  s2 -> s1 [94, 65535] { R680 += 1, R656 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R682 += 1, R658 += 1, R648 += 1 };
  s0 -> s2 [0, 65535] { R682 += 1, R657 += 1, R658 += 1 };
  s0 -> s0 [0, 65535] { R681 += 1, R682 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R682 += 1, R658 += 1, R648 += 1 };
  s1 -> s4 [0, 65535] { R682 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R682 += 1, R658 += 1, R648 += 1 };
  s2 -> s2 [0, 65535] { R682 += 1, R657 += 1, R658 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R682 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R683 += 1, R684 += 1 };
  s0 -> s1 [0, 65535] { R684 += 1, R659 += 1, R660 += 1 };
  s0 -> s2 [47, 47] { R684 += 1, R660 += 1 };
  s1 -> s1 [0, 65535] { R684 += 1, R659 += 1, R660 += 1 };
  s1 -> s2 [47, 47] { R684 += 1, R660 += 1 };
  s2 -> s3 [47, 47] { R684 += 1, R660 += 1 };
  s3 -> s3 [0, 65535] { R684 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R685 += 1, R686 += 1 };
  s0 -> s1 [0, 65535] { R686 += 1, R662 += 1, R649 += 1 };
  s0 -> s2 [0, 65535] { R686 += 1, R661 += 1, R662 += 1 };
  s1 -> s1 [0, 65535] { R686 += 1, R662 += 1, R649 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R686 += 1 };
  s2 -> s1 [0, 65535] { R686 += 1, R662 += 1, R649 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R686 += 1, R661 += 1, R662 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R686 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R654 && R1 = R686 && R3 = 2 && R347 = 2 && R519 = 2 && R520 = R653 && R605 = 0 && R606 - R685 = -1 && R651 = R653 && R652 = R654 && R659 = 0 && R660 = 2 && R661 = 0 && R662 = 2 && R663 = 0 && R664 - R685 = -1 && R665 = 0 && R666 - R685 = -1 && R667 = R685 && R668 = R686 && R669 = R685 && R670 = R686 && R671 = R685 && R672 = R686 && R673 = R685 && R674 = R686 && R675 = R685 && R676 = R686 && R677 = R685 && R678 = R686 && R679 = R685 && R680 = R686 && R681 = R685 && R682 = R686 && R683 = R685 && R684 = R686 && R653 - R4 < 1 && R653 - R348 < 1 && R653 < R654 && 1 < R653 && R685 - R686 < 1 && 1 < R685 && (R653 != R656 || R655 = 2 || ((R648 != 0 || R4 < R656 || R348 < R656 || R654 - R656 < 1 || R656 < 3) && (R648 = 0 || R4 < R656 || R348 < R656 || R654 - R656 < 1 || R656 < 2))) && (R653 != R658 || R657 = 2 || ((R648 != 0 || R4 < R658 || R348 < R658 || R654 - R658 < 1 || R658 < 3) && (R648 = 0 || R4 < R658 || R348 < R658 || R654 - R658 < 1 || R658 < 2))) && (R653 = R656 || (R648 = 0 && R653 = 2)) && (R653 = R658 || (R648 = 0 && R653 = 2));
// End of Parikh automata intersection problem
