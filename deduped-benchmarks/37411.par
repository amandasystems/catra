// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R315, R316, R4, R470, R471, R472, R473, R474, R475, R476, R565, R566, R567, R568, R569, R570, R571, R572, R573, R574, R575, R576, R577, R578, R579, R580, R581, R582, R583, R584, R585, R586, R587, R588, R589, R590, R591, R592, R593, R594;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R316 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R316 += 1 };
  s1 -> s1 [0, 57] { R316 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R316 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R572 += 1, R474 += 1 };
  s0 -> s0 [0, 65535] { R571 += 1, R572 += 1 };
  s0 -> s2 [0, 65535] { R572 += 1, R473 += 1, R474 += 1 };
  s0 -> s3 [47, 47] { R572 += 1, R474 += 1 };
  s0 -> s1 [48, 65535] { R572 += 1, R474 += 1 };
  s1 -> s1 [0, 65535] { R572 += 1, R474 += 1 };
  s1 -> s6 [0, 65535] { R572 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R572 += 1, R474 += 1 };
  s2 -> s2 [0, 65535] { R572 += 1, R473 += 1, R474 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R572 += 1, R474 += 1 };
  s2 -> s1 [48, 65535] { R572 += 1, R474 += 1 };
  s3 -> s1 [0, 46] { R572 += 1, R474 += 1 };
  s3 -> s3 [0, 65535] { R572 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R572 += 1, R474 += 1 };
  s3 -> s1 [48, 65535] { R572 += 1, R474 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R572 += 1, R474 += 1 };
  s6 -> s6 [0, 65535] { R572 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R574 += 1, R475 += 1, R476 += 1 };
  s0 -> s0 [0, 65535] { R573 += 1, R574 += 1 };
  s0 -> s2 [0, 65535] { R574 += 1, R476 += 1, R470 += 1 };
  s1 -> s1 [0, 65535] { R574 += 1, R475 += 1, R476 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R574 += 1, R476 += 1, R470 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R574 += 1 };
  s2 -> s2 [0, 65535] { R574 += 1, R476 += 1, R470 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R574 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R580 += 1 };
  s0 -> s0 [0, 65535] { R579 += 1, R580 += 1 };
  s0 -> s2 [65, 65] { R580 += 1 };
  s0 -> s1 [66, 65535] { R580 += 1 };
  s1 -> s1 [0, 64] { R580 += 1 };
  s1 -> s2 [65, 65] { R580 += 1 };
  s1 -> s1 [66, 65535] { R580 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R580 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R581 += 1, R582 += 1 };
  s0 -> s1 [0, 65535] { R582 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R582 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R584 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R584 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R583 += 1, R584 += 1 };
  s0 -> s3 [65, 65] { R584 += 1 };
  s0 -> s1 [66, 65535] { R584 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R584 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R584 += 1 };
  s1 -> s1 [66, 65535] { R584 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R584 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R584 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R584 += 1 };
  s2 -> s1 [66, 65535] { R584 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R584 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R586 += 1, R566 += 1 };
  s0 -> s0 [0, 65535] { R585 += 1, R586 += 1 };
  s0 -> s2 [0, 65535] { R586 += 1, R565 += 1, R566 += 1 };
  s0 -> s1 [66, 65535] { R586 += 1, R566 += 1 };
  s1 -> s1 [0, 64] { R586 += 1, R566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R586 += 1 };
  s1 -> s1 [66, 65535] { R586 += 1, R566 += 1 };
  s2 -> s1 [0, 64] { R586 += 1, R566 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R586 += 1, R565 += 1, R566 += 1 };
  s2 -> s1 [66, 65535] { R586 += 1, R566 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R587 += 1, R588 += 1 };
  s0 -> s1 [0, 65535] { R588 += 1, R568 += 1, R471 += 1 };
  s0 -> s2 [0, 65535] { R588 += 1, R567 += 1, R568 += 1 };
  s1 -> s1 [0, 65535] { R588 += 1, R568 += 1, R471 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R588 += 1 };
  s2 -> s1 [0, 65535] { R588 += 1, R568 += 1, R471 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R588 += 1, R567 += 1, R568 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R588 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R589 += 1, R590 += 1 };
  s0 -> s1 [0, 65535] { R590 += 1, R569 += 1, R570 += 1 };
  s0 -> s2 [112, 112] { R590 += 1, R570 += 1 };
  s1 -> s1 [0, 65535] { R590 += 1, R569 += 1, R570 += 1 };
  s1 -> s2 [112, 112] { R590 += 1, R570 += 1 };
  s2 -> s2 [0, 65535] { R590 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R592 += 1, R575 += 1, R576 += 1 };
  s0 -> s2 [0, 65535] { R592 += 1, R576 += 1, R472 += 1 };
  s0 -> s0 [0, 65535] { R591 += 1, R592 += 1 };
  s1 -> s1 [0, 65535] { R592 += 1, R575 += 1, R576 += 1 };
  s1 -> s2 [0, 65535] { R592 += 1, R576 += 1, R472 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R592 += 1 };
  s2 -> s2 [0, 65535] { R592 += 1, R576 += 1, R472 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R592 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 65535] { R594 += 1, R577 += 1, R578 += 1 };
  s0 -> s0 [0, 65535] { R593 += 1, R594 += 1 };
  s0 -> s2 [104, 104] { R594 += 1, R578 += 1 };
  s1 -> s1 [0, 65535] { R594 += 1, R577 += 1, R578 += 1 };
  s1 -> s2 [104, 104] { R594 += 1, R578 += 1 };
  s2 -> s3 [116, 116] { R594 += 1, R578 += 1 };
  s3 -> s4 [116, 116] { R594 += 1, R578 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R594 += 1 };
  s5 -> s5 [0, 65535];
  accepting s4, s5;
};
};
constraint R0 = R570 && R1 - R594 = 1 && R3 = 0 && R4 - R578 = -1 && R315 = 0 && R316 = R594 && R569 = R578 && R577 = 0 && R579 = 0 && R580 = R594 && R581 = 0 && R582 = R594 && R583 = 0 && R584 = R594 && R585 = 0 && R586 = R594 && R587 = 0 && R588 = R594 && R589 = 0 && R590 = R594 && R591 = 0 && R592 = R594 && R593 = 0 && R578 - R570 < 1 && -1 < R578 && 0 < R594 && (R565 != R578 || R566 = R570 || (R471 = 0 && R570 = R578)) && (R567 != R578 || R568 = R570 || (R471 = 0 && R570 = R578)) && (R575 != 0 || R576 = R578 || (R472 = 0 && (R570 < 1 || R578 < 1))) && (R470 = 0 || (R473 = 0 && R474 = 0)) && (R470 = 0 || (R475 = 0 && R476 = 0)) && (R565 = R578 || (R471 = 0 && R570 = R578)) && (R567 = R578 || (R471 = 0 && R570 = R578)) && (R575 = 0 || (R472 = 0 && (R570 < 1 || R578 < 1)));
// End of Parikh automata intersection problem
