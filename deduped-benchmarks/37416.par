// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R2, R209, R212, R216, R217, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R3;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R217 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R217 += 1 };
  s1 -> s1 [0, 57] { R217 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R217 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s1 [104, 104] { R249 += 1 };
  s1 -> s2 [116, 116] { R249 += 1 };
  s2 -> s3 [116, 116] { R249 += 1 };
  s3 -> s4 [112, 112] { R249 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R251 += 1, R243 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1, R243 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 34] { R253 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R2 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s3 [35, 35] { R253 += 1 };
  s0 -> s1 [36, 65535] { R253 += 1, R3 += 1 };
  s1 -> s1 [0, 34] { R253 += 1, R3 += 1 };
  s1 -> s3 [35, 35] { R253 += 1 };
  s1 -> s1 [36, 65535] { R253 += 1, R3 += 1 };
  s2 -> s1 [0, 34] { R253 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R253 += 1, R2 += 1, R3 += 1 };
  s2 -> s3 [35, 35] { R253 += 1 };
  s2 -> s1 [36, 65535] { R253 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R253 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 62] { R255 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R209 += 1 };
  s0 -> s3 [63, 63] { R255 += 1 };
  s0 -> s1 [64, 65535] { R255 += 1 };
  s1 -> s1 [0, 62] { R255 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [63, 63] { R255 += 1 };
  s1 -> s1 [64, 65535] { R255 += 1 };
  s2 -> s1 [0, 62] { R255 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R255 += 1, R209 += 1 };
  s2 -> s3 [63, 63] { R255 += 1 };
  s2 -> s1 [64, 65535] { R255 += 1 };
  s3 -> s3 [0, 65535] { R255 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R257 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R212 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s3 [47, 47] { R257 += 1 };
  s0 -> s1 [48, 65535] { R257 += 1 };
  s1 -> s1 [0, 46] { R257 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [47, 47] { R257 += 1 };
  s1 -> s1 [48, 65535] { R257 += 1 };
  s2 -> s1 [0, 46] { R257 += 1 };
  s2 -> s2 [0, 65535] { R257 += 1, R212 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R257 += 1 };
  s2 -> s1 [48, 65535] { R257 += 1 };
  s3 -> s3 [0, 65535] { R257 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_7 {
  init s0;
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s1 [0, 65535] { R259 += 1, R241 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1, R241 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65535] { R261 += 1, R244 += 1, R245 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s2 [47, 47] { R261 += 1, R245 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R244 += 1, R245 += 1 };
  s1 -> s2 [47, 47] { R261 += 1, R245 += 1 };
  s2 -> s3 [47, 47] { R261 += 1, R245 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R261 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R263 += 1, R247 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R246 += 1, R247 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R247 += 1, R242 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R263 += 1 };
  s2 -> s1 [0, 65535] { R263 += 1, R247 += 1, R242 += 1 };
  s2 -> s2 [0, 65535] { R263 += 1, R246 += 1, R247 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R263 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R261 && R2 = 2 && R216 = 0 && R217 - R260 = -1 && R244 = 0 && R248 = 0 && R249 - R260 = -1 && R250 = 0 && R251 - R260 = -1 && R252 = R260 && R253 = R261 && -1 < R3 && R209 < 3 && R212 < 3 && R245 < 3 && R260 - R261 < 1 && 1 < R260 && (R245 != 2 || 1 < R241) && (R246 != 0 || ((R242 != 0 || ((R241 != R247 || R247 < 3) && (R241 != 1 || R247 != 2) && (R241 = R247 || R247 = 2 || R241 < 1))) && (R242 = 0 || (R247 < 3 && (R247 != 2 || 1 < R241) && (R241 = R247 || 1 < R247))))) && (R254 != R260 || R255 = R261 || (R241 = 0 && R260 = R261)) && (R256 != R260 || R257 = R261 || (R241 = 0 && R260 = R261)) && (R258 != R260 || R259 = R261 || (R241 = 0 && R260 = R261)) && (R260 != R262 || R261 = R263 || ((R241 != 0 || R261 - R262 < 1 || R262 < 2) && (R241 = 0 || R261 < R262 || R262 < 2))) && (R241 = R245 || 1 < R245) && (R246 = 0 || (R242 = 0 && R241 < 1)) && (R254 = R260 || (R241 = 0 && R260 = R261)) && (R256 = R260 || (R241 = 0 && R260 = R261)) && (R258 = R260 || (R241 = 0 && R260 = R261)) && (R260 = R262 || (R241 = 0 && R260 = R261));
// End of Parikh automata intersection problem
