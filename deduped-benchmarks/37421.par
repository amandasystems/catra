// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R375, R376, R4, R560, R561, R562, R563, R564, R565, R566, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654;
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [104, 104];
  s1 -> s2 [116, 116];
  s2 -> s3 [116, 116];
  s3 -> s4 [112, 112];
  accepting s4;
};
};
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R376 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R376 += 1 };
  s1 -> s1 [0, 57] { R376 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R376 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R632 += 1, R564 += 1 };
  s0 -> s0 [0, 65535] { R631 += 1, R632 += 1 };
  s0 -> s2 [0, 65535] { R632 += 1, R563 += 1, R564 += 1 };
  s0 -> s3 [47, 47] { R632 += 1, R564 += 1 };
  s0 -> s1 [48, 65535] { R632 += 1, R564 += 1 };
  s1 -> s6 [0, 65535] { R632 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R632 += 1, R564 += 1 };
  s2 -> s1 [0, 46] { R632 += 1, R564 += 1 };
  s2 -> s2 [0, 65535] { R632 += 1, R563 += 1, R564 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R632 += 1, R564 += 1 };
  s2 -> s1 [48, 65535] { R632 += 1, R564 += 1 };
  s3 -> s1 [0, 46] { R632 += 1, R564 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R632 += 1 };
  s3 -> s5 [47, 47] { R632 += 1, R564 += 1 };
  s3 -> s1 [48, 65535] { R632 += 1, R564 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R632 += 1, R564 += 1 };
  s6 -> s6 [0, 65535] { R632 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R634 += 1, R565 += 1, R566 += 1 };
  s0 -> s2 [0, 65535] { R634 += 1, R566 += 1, R560 += 1 };
  s0 -> s0 [0, 65535] { R633 += 1, R634 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R634 += 1, R565 += 1, R566 += 1 };
  s1 -> s2 [0, 65535] { R634 += 1, R566 += 1, R560 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R634 += 1 };
  s2 -> s2 [0, 65535] { R634 += 1, R566 += 1, R560 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R634 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R640 += 1 };
  s0 -> s0 [0, 65535] { R639 += 1, R640 += 1 };
  s0 -> s2 [65, 65] { R640 += 1 };
  s0 -> s1 [66, 65535] { R640 += 1 };
  s1 -> s1 [0, 64] { R640 += 1 };
  s1 -> s2 [65, 65] { R640 += 1 };
  s1 -> s1 [66, 65535] { R640 += 1 };
  s2 -> s2 [0, 65535] { R640 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R641 += 1, R642 += 1 };
  s0 -> s1 [0, 65535] { R642 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R642 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R644 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R644 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R643 += 1, R644 += 1 };
  s0 -> s3 [65, 65] { R644 += 1 };
  s0 -> s1 [66, 65535] { R644 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R644 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R644 += 1 };
  s1 -> s1 [66, 65535] { R644 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R644 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R644 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R644 += 1 };
  s2 -> s1 [66, 65535] { R644 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R644 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R646 += 1, R626 += 1 };
  s0 -> s2 [0, 65535] { R646 += 1, R625 += 1, R626 += 1 };
  s0 -> s0 [0, 65535] { R645 += 1, R646 += 1 };
  s0 -> s1 [66, 65535] { R646 += 1, R626 += 1 };
  s1 -> s1 [0, 64] { R646 += 1, R626 += 1 };
  s1 -> s1 [0, 65535] { R646 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R646 += 1, R626 += 1 };
  s2 -> s1 [0, 64] { R646 += 1, R626 += 1 };
  s2 -> s2 [0, 65535] { R646 += 1, R625 += 1, R626 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R646 += 1, R626 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R648 += 1, R628 += 1, R561 += 1 };
  s0 -> s0 [0, 65535] { R647 += 1, R648 += 1 };
  s0 -> s2 [0, 65535] { R648 += 1, R627 += 1, R628 += 1 };
  s1 -> s4 [0, 65535] { R648 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R648 += 1, R628 += 1, R561 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R648 += 1, R628 += 1, R561 += 1 };
  s2 -> s2 [0, 65535] { R648 += 1, R627 += 1, R628 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R648 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R650 += 1, R629 += 1, R630 += 1 };
  s0 -> s0 [0, 65535] { R649 += 1, R650 += 1 };
  s0 -> s2 [116, 116] { R650 += 1, R630 += 1 };
  s1 -> s1 [0, 65535] { R650 += 1, R629 += 1, R630 += 1 };
  s1 -> s2 [116, 116] { R650 += 1, R630 += 1 };
  s2 -> s3 [112, 112] { R650 += 1, R630 += 1 };
  s3 -> s4 [115, 115] { R650 += 1, R630 += 1 };
  s4 -> s4 [0, 65535] { R650 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s4, s5;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R652 += 1, R636 += 1, R562 += 1 };
  s0 -> s0 [0, 65535] { R651 += 1, R652 += 1 };
  s0 -> s2 [0, 65535] { R652 += 1, R635 += 1, R636 += 1 };
  s1 -> s1 [0, 65535] { R652 += 1, R636 += 1, R562 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R652 += 1 };
  s2 -> s1 [0, 65535] { R652 += 1, R636 += 1, R562 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R652 += 1, R635 += 1, R636 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R652 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s0 [0, 65535] { R653 += 1, R654 += 1 };
  s0 -> s1 [0, 65535] { R654 += 1, R637 += 1, R638 += 1 };
  s0 -> s2 [104, 104] { R654 += 1, R638 += 1 };
  s1 -> s1 [0, 65535] { R654 += 1, R637 += 1, R638 += 1 };
  s1 -> s2 [104, 104] { R654 += 1, R638 += 1 };
  s2 -> s3 [116, 116] { R654 += 1, R638 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R654 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
};
constraint R0 = R630 && R1 - R654 = 1 && R3 = 0 && R4 - R638 = -1 && R375 = 0 && R376 = R654 && R629 = R638 && R637 = 0 && R639 = 0 && R640 = R654 && R641 = 0 && R642 = R654 && R643 = 0 && R644 = R654 && R645 = 0 && R646 = R654 && R647 = 0 && R648 = R654 && R649 = 0 && R650 = R654 && R651 = 0 && R652 = R654 && R653 = 0 && R638 - R630 < 1 && -1 < R638 && 0 < R654 && (R625 != R638 || R626 = R630 || (R561 = 0 && R630 = R638)) && (R627 != R638 || R628 = R630 || (R561 = 0 && R630 = R638)) && (R635 != 0 || R636 = R638 || (R562 = 0 && (R630 < 1 || R638 < 1))) && (R560 = 0 || (R563 = 0 && R564 = 0)) && (R560 = 0 || (R565 = 0 && R566 = 0)) && (R625 = R638 || (R561 = 0 && R630 = R638)) && (R627 = R638 || (R561 = 0 && R630 = R638)) && (R635 = 0 || (R562 = 0 && (R630 < 1 || R638 < 1)));
// End of Parikh automata intersection problem
