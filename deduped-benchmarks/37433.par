// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1204, R1205, R1404, R1405, R1504, R1505, R1553, R1554, R1555, R1556, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R1564, R1565, R1566, R1567, R1568, R1569, R1570, R1571, R1572, R1573, R1574, R1575, R1576, R1577, R1578, R1579, R1580, R1581, R1582, R1583, R1584, R1585, R1586, R1587, R1588, R1589, R1590, R1591, R1592, R1593, R1594, R1595, R1596, R1597, R1598, R1599, R2, R4, R5, R804, R805;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R1505 += 1 };
  s0 -> s0 [0, 65535] { R1504 += 1, R1505 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R1505 += 1 };
  s1 -> s1 [0, 57] { R1505 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R1505 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R1564 += 1, R1565 += 1 };
  s0 -> s1 [104, 104] { R1565 += 1 };
  s1 -> s2 [116, 116] { R1565 += 1 };
  s2 -> s3 [116, 116] { R1565 += 1 };
  s3 -> s4 [112, 112] { R1565 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s0 [0, 65535] { R1566 += 1, R1567 += 1 };
  s0 -> s1 [0, 65535] { R1567 += 1, R1555 += 1 };
  s1 -> s1 [0, 65535] { R1567 += 1, R1555 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R1576 += 1, R1577 += 1 };
  s0 -> s1 [0, 65535] { R1577 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1577 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 62] { R1579 += 1, R805 += 1 };
  s0 -> s0 [0, 65535] { R1578 += 1, R1579 += 1 };
  s0 -> s2 [0, 65535] { R1579 += 1, R804 += 1, R805 += 1 };
  s0 -> s3 [63, 63] { R1579 += 1 };
  s0 -> s1 [64, 65535] { R1579 += 1, R805 += 1 };
  s1 -> s1 [0, 62] { R1579 += 1, R805 += 1 };
  s1 -> s3 [63, 63] { R1579 += 1 };
  s1 -> s1 [64, 65535] { R1579 += 1, R805 += 1 };
  s2 -> s1 [0, 62] { R1579 += 1, R805 += 1 };
  s2 -> s2 [0, 65535] { R1579 += 1, R804 += 1, R805 += 1 };
  s2 -> s3 [63, 63] { R1579 += 1 };
  s2 -> s1 [64, 65535] { R1579 += 1, R805 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1579 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 34] { R1581 += 1, R1205 += 1 };
  s0 -> s2 [0, 65535] { R1581 += 1, R1204 += 1, R1205 += 1 };
  s0 -> s0 [0, 65535] { R1580 += 1, R1581 += 1 };
  s0 -> s3 [35, 35] { R1581 += 1 };
  s0 -> s1 [36, 65535] { R1581 += 1, R1205 += 1 };
  s1 -> s1 [0, 34] { R1581 += 1, R1205 += 1 };
  s1 -> s3 [35, 35] { R1581 += 1 };
  s1 -> s1 [36, 65535] { R1581 += 1, R1205 += 1 };
  s2 -> s1 [0, 34] { R1581 += 1, R1205 += 1 };
  s2 -> s2 [0, 65535] { R1581 += 1, R1204 += 1, R1205 += 1 };
  s2 -> s3 [35, 35] { R1581 += 1 };
  s2 -> s1 [36, 65535] { R1581 += 1, R1205 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1581 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R1583 += 1, R1405 += 1 };
  s0 -> s2 [0, 65535] { R1583 += 1, R1404 += 1, R1405 += 1 };
  s0 -> s0 [0, 65535] { R1582 += 1, R1583 += 1 };
  s0 -> s3 [47, 47] { R1583 += 1 };
  s0 -> s1 [48, 65535] { R1583 += 1, R1405 += 1 };
  s1 -> s1 [0, 46] { R1583 += 1, R1405 += 1 };
  s1 -> s3 [47, 47] { R1583 += 1 };
  s1 -> s1 [48, 65535] { R1583 += 1, R1405 += 1 };
  s2 -> s1 [0, 46] { R1583 += 1, R1405 += 1 };
  s2 -> s2 [0, 65535] { R1583 += 1, R1404 += 1, R1405 += 1 };
  s2 -> s3 [47, 47] { R1583 += 1 };
  s2 -> s1 [48, 65535] { R1583 += 1, R1405 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1583 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R1585 += 1, R1557 += 1 };
  s0 -> s2 [0, 65535] { R1585 += 1, R1556 += 1, R1557 += 1 };
  s0 -> s0 [0, 65535] { R1584 += 1, R1585 += 1 };
  s0 -> s1 [92, 92] { R1585 += 1, R1557 += 1 };
  s0 -> s1 [94, 65535] { R1585 += 1, R1557 += 1 };
  s1 -> s1 [0, 90] { R1585 += 1, R1557 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1585 += 1 };
  s1 -> s1 [92, 92] { R1585 += 1, R1557 += 1 };
  s1 -> s1 [94, 65535] { R1585 += 1, R1557 += 1 };
  s2 -> s1 [0, 90] { R1585 += 1, R1557 += 1 };
  s2 -> s2 [0, 65535] { R1585 += 1, R1556 += 1, R1557 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R1585 += 1, R1557 += 1 };
  s2 -> s1 [94, 65535] { R1585 += 1, R1557 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1587 += 1, R1558 += 1, R1559 += 1 };
  s0 -> s0 [0, 65535] { R1586 += 1, R1587 += 1 };
  s0 -> s2 [0, 65535] { R1587 += 1, R1559 += 1, R1553 += 1 };
  s1 -> s1 [0, 65535] { R1587 += 1, R1558 += 1, R1559 += 1 };
  s1 -> s2 [0, 65535] { R1587 += 1, R1559 += 1, R1553 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1587 += 1 };
  s2 -> s2 [0, 65535] { R1587 += 1, R1559 += 1, R1553 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1587 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R1589 += 1, R1560 += 1, R1561 += 1 };
  s0 -> s0 [0, 65535] { R1588 += 1, R1589 += 1 };
  s0 -> s2 [47, 47] { R1589 += 1, R1561 += 1 };
  s1 -> s1 [0, 65535] { R1589 += 1, R1560 += 1, R1561 += 1 };
  s1 -> s2 [47, 47] { R1589 += 1, R1561 += 1 };
  s2 -> s3 [47, 47] { R1589 += 1, R1561 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1589 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1590 += 1, R1591 += 1 };
  s0 -> s1 [0, 65535] { R1591 += 1, R1563 += 1, R1554 += 1 };
  s0 -> s2 [0, 65535] { R1591 += 1, R1562 += 1, R1563 += 1 };
  s1 -> s4 [0, 65535] { R1591 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1591 += 1, R1563 += 1, R1554 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1591 += 1, R1563 += 1, R1554 += 1 };
  s2 -> s2 [0, 65535] { R1591 += 1, R1562 += 1, R1563 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1591 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R1593 += 1, R1569 += 1 };
  s0 -> s2 [0, 65535] { R1593 += 1, R1568 += 1, R1569 += 1 };
  s0 -> s0 [0, 65535] { R1592 += 1, R1593 += 1 };
  s0 -> s3 [35, 35] { R1593 += 1, R1569 += 1 };
  s0 -> s1 [36, 65535] { R1593 += 1, R1569 += 1 };
  s1 -> s1 [0, 34] { R1593 += 1, R1569 += 1 };
  s1 -> s3 [35, 35] { R1593 += 1, R1569 += 1 };
  s1 -> s1 [36, 65535] { R1593 += 1, R1569 += 1 };
  s2 -> s1 [0, 34] { R1593 += 1, R1569 += 1 };
  s2 -> s2 [0, 65535] { R1593 += 1, R1568 += 1, R1569 += 1 };
  s2 -> s3 [35, 35] { R1593 += 1, R1569 += 1 };
  s2 -> s1 [36, 65535] { R1593 += 1, R1569 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1593 += 1 };
  s3 -> s3 [0, 65535] { R1593 += 1, R1569 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1593 += 1 };
  accepting s3, s4, s5;
};
automaton url_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1594 += 1, R1595 += 1 };
  s0 -> s1 [0, 65535] { R1595 += 1, R1570 += 1, R1571 += 1 };
  s0 -> s2 [0, 65535] { R1595 += 1, R1571 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R1595 += 1, R1570 += 1, R1571 += 1 };
  s1 -> s2 [0, 65535] { R1595 += 1, R1571 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1595 += 1 };
  s2 -> s2 [0, 65535] { R1595 += 1, R1571 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1595 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 34] { R1597 += 1, R1573 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1596 += 1, R1597 += 1 };
  s0 -> s2 [0, 65535] { R1597 += 1, R1573 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R1597 += 1, R1572 += 1, R1573 += 1 };
  s0 -> s4 [35, 35] { R1597 += 1, R1573 += 1 };
  s0 -> s1 [36, 65535] { R1597 += 1, R1573 += 1, R5 += 1 };
  s1 -> s1 [0, 34] { R1597 += 1, R1573 += 1, R5 += 1 };
  s1 -> s4 [35, 35] { R1597 += 1, R1573 += 1 };
  s1 -> s1 [36, 65535] { R1597 += 1, R1573 += 1, R5 += 1 };
  s2 -> s1 [0, 34] { R1597 += 1, R1573 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1597 += 1, R1573 += 1, R4 += 1, R5 += 1 };
  s2 -> s4 [35, 35] { R1597 += 1, R1573 += 1 };
  s2 -> s1 [36, 65535] { R1597 += 1, R1573 += 1, R5 += 1 };
  s3 -> s1 [0, 34] { R1597 += 1, R1573 += 1, R5 += 1 };
  s3 -> s2 [0, 65535] { R1597 += 1, R1573 += 1, R4 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R1597 += 1, R1572 += 1, R1573 += 1 };
  s3 -> s4 [35, 35] { R1597 += 1, R1573 += 1 };
  s3 -> s1 [36, 65535] { R1597 += 1, R1573 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R1597 += 1, R1573 += 1 };
  s4 -> s5 [0, 65535] { R1597 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1597 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1599 += 1, R1575 += 1 };
  s0 -> s2 [0, 65535] { R1599 += 1, R1574 += 1, R1575 += 1 };
  s0 -> s0 [0, 65535] { R1598 += 1, R1599 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1599 += 1 };
  s1 -> s1 [0, 65535] { R1599 += 1, R1575 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1599 += 1, R1575 += 1 };
  s2 -> s2 [0, 65535] { R1599 += 1, R1574 += 1, R1575 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1599 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 - R5 = 1 && R1 = R1575 && R2 = R1599 && R4 = 0 && R804 = 2 && R1204 = 2 && R1404 = 2 && R1405 = R1574 && R1504 = 0 && R1505 - R1598 = -1 && R1560 = 0 && R1561 = 2 && R1562 = 0 && R1563 = 2 && R1564 = 0 && R1565 - R1598 = -1 && R1566 = 0 && R1567 - R1598 = -1 && R1568 = R1574 && R1569 = R1575 && R1570 = R1574 && R1571 = R1575 && R1572 = R1574 && R1573 = R1575 && R1576 = R1598 && R1577 = R1599 && R1578 = R1598 && R1579 = R1599 && R1580 = R1598 && R1581 = R1599 && R1582 = R1598 && R1583 = R1599 && R1584 = R1598 && R1585 = R1599 && R1586 = R1598 && R1587 = R1599 && R1588 = R1598 && R1589 = R1599 && R1590 = R1598 && R1591 = R1599 && R1592 = R1598 && R1593 = R1599 && R1594 = R1598 && R1595 = R1599 && R1596 = R1598 && R1597 = R1599 && -1 < R5 && R1574 - R805 < 1 && R1574 - R1205 < 1 && R1574 < R1575 && 1 < R1574 && R1598 - R1599 < 1 && 1 < R1598 && (R1556 != 2 || R1557 = R1574 || (R1553 = 0 && R1574 = 2)) && (R1558 != 2 || R1559 = R1574 || (R1553 = 0 && R1574 = 2)) && (R1556 = 2 || (R1553 = 0 && R1574 = 2)) && (R1558 = 2 || (R1553 = 0 && R1574 = 2));
// End of Parikh automata intersection problem
