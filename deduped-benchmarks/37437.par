// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R117, R118, R173, R174, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R3, R4;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R118 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R118 += 1 };
  s1 -> s1 [0, 57] { R118 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R118 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 64] { R212 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [65, 65] { R212 += 1 };
  s0 -> s1 [66, 65535] { R212 += 1 };
  s1 -> s1 [0, 64] { R212 += 1 };
  s1 -> s2 [65, 65] { R212 += 1 };
  s1 -> s1 [66, 65535] { R212 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R214 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R216 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s3 [65, 65] { R216 += 1 };
  s0 -> s1 [66, 65535] { R216 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R216 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R216 += 1 };
  s1 -> s1 [66, 65535] { R216 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R216 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R216 += 1 };
  s2 -> s1 [66, 65535] { R216 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R216 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 64] { R218 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R201 += 1, R202 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s1 [66, 65535] { R218 += 1, R202 += 1 };
  s1 -> s1 [0, 64] { R218 += 1, R202 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R218 += 1 };
  s1 -> s1 [66, 65535] { R218 += 1, R202 += 1 };
  s2 -> s1 [0, 64] { R218 += 1, R202 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R218 += 1, R201 += 1, R202 += 1 };
  s2 -> s1 [66, 65535] { R218 += 1, R202 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R220 += 1, R204 += 1, R173 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R203 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s1 -> s1 [0, 65535] { R220 += 1, R204 += 1, R173 += 1 };
  s1 -> s4 [0, 65535] { R220 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R220 += 1, R204 += 1, R173 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R203 += 1, R204 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R220 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 65] { R222 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R205 += 1, R206 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s1 [73, 65535] { R222 += 1, R206 += 1 };
  s1 -> s1 [0, 65] { R222 += 1, R206 += 1 };
  s1 -> s1 [0, 65535] { R222 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [73, 65535] { R222 += 1, R206 += 1 };
  s2 -> s1 [0, 65] { R222 += 1, R206 += 1 };
  s2 -> s2 [0, 65535] { R222 += 1, R205 += 1, R206 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [73, 65535] { R222 += 1, R206 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s0 -> s1 [0, 65535] { R224 += 1, R207 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R208 += 1, R174 += 1 };
  s1 -> s1 [0, 65535] { R224 += 1, R207 += 1, R208 += 1 };
  s1 -> s2 [0, 65535] { R224 += 1, R208 += 1, R174 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R224 += 1 };
  s2 -> s2 [0, 65535] { R224 += 1, R208 += 1, R174 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R224 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 64] { R226 += 1, R210 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R209 += 1, R210 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s3 [65, 65] { R226 += 1, R210 += 1 };
  s0 -> s4 [65, 65] { R226 += 1, R210 += 1 };
  s0 -> s5 [73, 73] { R226 += 1, R210 += 1 };
  s0 -> s1 [74, 65535] { R226 += 1, R210 += 1 };
  s1 -> s1 [0, 64] { R226 += 1, R210 += 1 };
  s1 -> s3 [65, 65] { R226 += 1, R210 += 1 };
  s1 -> s4 [65, 65] { R226 += 1, R210 += 1 };
  s1 -> s5 [73, 73] { R226 += 1, R210 += 1 };
  s1 -> s1 [74, 65535] { R226 += 1, R210 += 1 };
  s2 -> s1 [0, 64] { R226 += 1, R210 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R209 += 1, R210 += 1 };
  s2 -> s3 [65, 65] { R226 += 1, R210 += 1 };
  s2 -> s4 [65, 65] { R226 += 1, R210 += 1 };
  s2 -> s5 [73, 73] { R226 += 1, R210 += 1 };
  s2 -> s1 [74, 65535] { R226 += 1, R210 += 1 };
  s3 -> s3 [0, 65] { R226 += 1, R210 += 1 };
  s3 -> s8 [73, 73] { R226 += 1, R210 += 1 };
  s3 -> s3 [74, 65535] { R226 += 1, R210 += 1 };
  s5 -> s5 [0, 64] { R226 += 1, R210 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R226 += 1 };
  s5 -> s7 [65, 65] { R226 += 1, R210 += 1 };
  s5 -> s8 [65, 65] { R226 += 1, R210 += 1 };
  s5 -> s5 [73, 65535] { R226 += 1, R210 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R226 += 1 };
  s8 -> s8 [0, 65] { R226 += 1, R210 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R226 += 1 };
  s8 -> s8 [73, 65535] { R226 += 1, R210 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R1 - R226 = 1 && R3 = 0 && R4 - R210 = -1 && R117 = 0 && R118 = R226 && R209 = 0 && R211 = 0 && R212 = R226 && R213 = 0 && R214 = R226 && R215 = 0 && R216 = R226 && R217 = 0 && R218 = R226 && R219 = 0 && R220 = R226 && R221 = 0 && R222 = R226 && R223 = 0 && R224 = R226 && R225 = 0 && R210 - R0 < 1 && -1 < R210 && 0 < R226 && (R173 != 0 || ((R0 != R202 || R201 = R210 || R202 - R210 < 1) && (R0 = R202 || R0 - R210 < 1))) && (R173 != 0 || ((R0 != R204 || R203 = R210 || R204 - R210 < 1) && (R0 = R204 || R0 - R210 < 1))) && (R173 != 0 || ((R0 != R206 || R205 = R210 || R206 - R210 < 1) && (R0 = R206 || R0 - R210 < 1))) && (R207 != 0 || R208 = R210 || (R174 = 0 && (R0 < 1 || R210 < 1))) && (R173 = 0 || (R0 = R202 && (R201 = R210 || R202 < R210))) && (R173 = 0 || (R0 = R204 && (R203 = R210 || R204 < R210))) && (R173 = 0 || (R0 = R206 && (R205 = R210 || R206 < R210))) && (R207 = 0 || (R174 = 0 && (R0 < 1 || R210 < 1)));
// End of Parikh automata intersection problem
