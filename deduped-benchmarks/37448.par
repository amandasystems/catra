// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1045, R1046, R1565, R1566, R1825, R1826, R1955, R1956, R2, R2019, R2020, R2021, R2022, R2023, R2024, R2025, R2026, R2027, R2028, R2029, R2030, R2031, R2032, R2033, R2034, R2035, R2036, R2037, R2038, R2039, R2040, R2041, R2042, R2043, R2044, R2045, R2046, R2047, R2048, R2049, R2050, R2051, R2052, R2053, R2054, R2055, R2056, R2057, R2058, R2059, R2060, R2061, R2062, R2063, R2064, R2065, R2066, R2067, R2068, R2069, R2070, R2071, R2072, R2073, R2074, R2075, R2076, R2077, R2078, R2079, R2080, R3, R5, R6;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R1956 += 1 };
  s0 -> s0 [0, 65535] { R1955 += 1, R1956 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R1956 += 1 };
  s1 -> s1 [0, 57] { R1956 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R1956 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R2037 += 1, R2038 += 1 };
  s0 -> s1 [104, 104] { R2038 += 1 };
  s1 -> s2 [116, 116] { R2038 += 1 };
  s2 -> s3 [116, 116] { R2038 += 1 };
  s3 -> s4 [112, 112] { R2038 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R2040 += 1, R2022 += 1 };
  s0 -> s0 [0, 65535] { R2039 += 1, R2040 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2040 += 1, R2022 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R2053 += 1, R2054 += 1 };
  s0 -> s1 [0, 65535] { R2054 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R2054 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 62] { R2056 += 1, R1046 += 1 };
  s0 -> s2 [0, 65535] { R2056 += 1, R1045 += 1, R1046 += 1 };
  s0 -> s0 [0, 65535] { R2055 += 1, R2056 += 1 };
  s0 -> s3 [63, 63] { R2056 += 1 };
  s0 -> s1 [64, 65535] { R2056 += 1, R1046 += 1 };
  s1 -> s1 [0, 62] { R2056 += 1, R1046 += 1 };
  s1 -> s3 [63, 63] { R2056 += 1 };
  s1 -> s1 [64, 65535] { R2056 += 1, R1046 += 1 };
  s2 -> s1 [0, 62] { R2056 += 1, R1046 += 1 };
  s2 -> s2 [0, 65535] { R2056 += 1, R1045 += 1, R1046 += 1 };
  s2 -> s3 [63, 63] { R2056 += 1 };
  s2 -> s1 [64, 65535] { R2056 += 1, R1046 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2056 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 34] { R2058 += 1, R1566 += 1 };
  s0 -> s2 [0, 65535] { R2058 += 1, R1565 += 1, R1566 += 1 };
  s0 -> s0 [0, 65535] { R2057 += 1, R2058 += 1 };
  s0 -> s3 [35, 35] { R2058 += 1 };
  s0 -> s1 [36, 65535] { R2058 += 1, R1566 += 1 };
  s1 -> s1 [0, 34] { R2058 += 1, R1566 += 1 };
  s1 -> s3 [35, 35] { R2058 += 1 };
  s1 -> s1 [36, 65535] { R2058 += 1, R1566 += 1 };
  s2 -> s1 [0, 34] { R2058 += 1, R1566 += 1 };
  s2 -> s2 [0, 65535] { R2058 += 1, R1565 += 1, R1566 += 1 };
  s2 -> s3 [35, 35] { R2058 += 1 };
  s2 -> s1 [36, 65535] { R2058 += 1, R1566 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2058 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R2060 += 1, R1826 += 1 };
  s0 -> s2 [0, 65535] { R2060 += 1, R1825 += 1, R1826 += 1 };
  s0 -> s0 [0, 65535] { R2059 += 1, R2060 += 1 };
  s0 -> s3 [47, 47] { R2060 += 1 };
  s0 -> s1 [48, 65535] { R2060 += 1, R1826 += 1 };
  s1 -> s1 [0, 46] { R2060 += 1, R1826 += 1 };
  s1 -> s3 [47, 47] { R2060 += 1 };
  s1 -> s1 [48, 65535] { R2060 += 1, R1826 += 1 };
  s2 -> s1 [0, 46] { R2060 += 1, R1826 += 1 };
  s2 -> s2 [0, 65535] { R2060 += 1, R1825 += 1, R1826 += 1 };
  s2 -> s3 [47, 47] { R2060 += 1 };
  s2 -> s1 [48, 65535] { R2060 += 1, R1826 += 1 };
  s3 -> s3 [0, 65535] { R2060 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R2062 += 1, R2030 += 1 };
  s0 -> s2 [0, 65535] { R2062 += 1, R2029 += 1, R2030 += 1 };
  s0 -> s0 [0, 65535] { R2061 += 1, R2062 += 1 };
  s0 -> s1 [92, 92] { R2062 += 1, R2030 += 1 };
  s0 -> s1 [94, 65535] { R2062 += 1, R2030 += 1 };
  s1 -> s1 [0, 90] { R2062 += 1, R2030 += 1 };
  s1 -> s1 [0, 65535] { R2062 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [92, 92] { R2062 += 1, R2030 += 1 };
  s1 -> s1 [94, 65535] { R2062 += 1, R2030 += 1 };
  s2 -> s1 [0, 90] { R2062 += 1, R2030 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2062 += 1, R2029 += 1, R2030 += 1 };
  s2 -> s1 [92, 92] { R2062 += 1, R2030 += 1 };
  s2 -> s1 [94, 65535] { R2062 += 1, R2030 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R2064 += 1, R2032 += 1, R2020 += 1 };
  s0 -> s2 [0, 65535] { R2064 += 1, R2031 += 1, R2032 += 1 };
  s0 -> s0 [0, 65535] { R2063 += 1, R2064 += 1 };
  s1 -> s1 [0, 65535] { R2064 += 1, R2032 += 1, R2020 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R2064 += 1 };
  s2 -> s1 [0, 65535] { R2064 += 1, R2032 += 1, R2020 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R2064 += 1, R2031 += 1, R2032 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2064 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R2066 += 1, R2033 += 1, R2034 += 1 };
  s0 -> s0 [0, 65535] { R2065 += 1, R2066 += 1 };
  s0 -> s2 [47, 47] { R2066 += 1, R2034 += 1 };
  s1 -> s1 [0, 65535] { R2066 += 1, R2033 += 1, R2034 += 1 };
  s1 -> s2 [47, 47] { R2066 += 1, R2034 += 1 };
  s2 -> s3 [47, 47] { R2066 += 1, R2034 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R2066 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R2068 += 1, R2036 += 1, R2021 += 1 };
  s0 -> s0 [0, 65535] { R2067 += 1, R2068 += 1 };
  s0 -> s2 [0, 65535] { R2068 += 1, R2035 += 1, R2036 += 1 };
  s1 -> s4 [0, 65535] { R2068 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R2068 += 1, R2036 += 1, R2021 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R2068 += 1, R2036 += 1, R2021 += 1 };
  s2 -> s2 [0, 65535] { R2068 += 1, R2035 += 1, R2036 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2068 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R2070 += 1, R2042 += 1 };
  s0 -> s0 [0, 65535] { R2069 += 1, R2070 += 1 };
  s0 -> s2 [0, 65535] { R2070 += 1, R2041 += 1, R2042 += 1 };
  s0 -> s3 [35, 35] { R2070 += 1, R2042 += 1 };
  s0 -> s1 [36, 65535] { R2070 += 1, R2042 += 1 };
  s1 -> s1 [0, 34] { R2070 += 1, R2042 += 1 };
  s1 -> s3 [35, 35] { R2070 += 1, R2042 += 1 };
  s1 -> s1 [36, 65535] { R2070 += 1, R2042 += 1 };
  s2 -> s1 [0, 34] { R2070 += 1, R2042 += 1 };
  s2 -> s2 [0, 65535] { R2070 += 1, R2041 += 1, R2042 += 1 };
  s2 -> s3 [35, 35] { R2070 += 1, R2042 += 1 };
  s2 -> s1 [36, 65535] { R2070 += 1, R2042 += 1 };
  s3 -> s4 [0, 65535] { R2070 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R2070 += 1, R2042 += 1 };
  s4 -> s4 [0, 65535] { R2070 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton url_13 {
  init s0;
  s0 -> s1 [0, 65535] { R2072 += 1, R2043 += 1, R2044 += 1 };
  s0 -> s0 [0, 65535] { R2071 += 1, R2072 += 1 };
  s0 -> s2 [0, 65535] { R2072 += 1, R2044 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R2072 += 1, R2043 += 1, R2044 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R2072 += 1, R2044 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R2072 += 1 };
  s2 -> s2 [0, 65535] { R2072 += 1, R2044 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R2072 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 34] { R2074 += 1, R2046 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R2073 += 1, R2074 += 1 };
  s0 -> s2 [0, 65535] { R2074 += 1, R2046 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R2074 += 1, R2045 += 1, R2046 += 1 };
  s0 -> s4 [35, 35] { R2074 += 1, R2046 += 1 };
  s0 -> s1 [36, 65535] { R2074 += 1, R2046 += 1, R6 += 1 };
  s1 -> s1 [0, 34] { R2074 += 1, R2046 += 1, R6 += 1 };
  s1 -> s4 [35, 35] { R2074 += 1, R2046 += 1 };
  s1 -> s1 [36, 65535] { R2074 += 1, R2046 += 1, R6 += 1 };
  s2 -> s1 [0, 34] { R2074 += 1, R2046 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R2074 += 1, R2046 += 1, R5 += 1, R6 += 1 };
  s2 -> s4 [35, 35] { R2074 += 1, R2046 += 1 };
  s2 -> s1 [36, 65535] { R2074 += 1, R2046 += 1, R6 += 1 };
  s3 -> s1 [0, 34] { R2074 += 1, R2046 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R2074 += 1, R2046 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R2074 += 1, R2045 += 1, R2046 += 1 };
  s3 -> s4 [35, 35] { R2074 += 1, R2046 += 1 };
  s3 -> s1 [36, 65535] { R2074 += 1, R2046 += 1, R6 += 1 };
  s4 -> s4 [0, 65535] { R2074 += 1, R2046 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R2074 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R2074 += 1 };
  accepting s4, s5, s6;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R2076 += 1, R2047 += 1, R2048 += 1 };
  s0 -> s2 [0, 65535] { R2076 += 1, R2048 += 1, R2024 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R2075 += 1, R2076 += 1 };
  s0 -> s3 [0, 65535] { R2076 += 1, R2048 += 1, R2023 += 1, R2024 += 1 };
  s1 -> s1 [0, 65535] { R2076 += 1, R2047 += 1, R2048 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R2076 += 1, R2048 += 1, R2024 += 1, R0 += 1 };
  s1 -> s3 [0, 65535] { R2076 += 1, R2048 += 1, R2023 += 1, R2024 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R2076 += 1, R2048 += 1 };
  s2 -> s5 [0, 65535] { R2076 += 1 };
  s2 -> s2 [0, 65535] { R2076 += 1, R2048 += 1, R2024 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R2076 += 1 };
  s3 -> s2 [0, 65535] { R2076 += 1, R2048 += 1, R2024 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R2076 += 1, R2048 += 1, R2023 += 1, R2024 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2076 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R2076 += 1, R2048 += 1 };
  s6 -> s5 [0, 65535] { R2076 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton url_16 {
  init s0;
  s0 -> s1 [0, 62] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s0 -> s2 [0, 65535] { R2078 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s0 -> s0 [0, 65535] { R2077 += 1, R2078 += 1 };
  s0 -> s3 [0, 65535] { R2078 += 1, R2049 += 1, R2050 += 1 };
  s0 -> s4 [63, 63] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s0 -> s1 [64, 65535] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s1 -> s1 [0, 62] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s1 -> s4 [63, 63] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s1 -> s1 [64, 65535] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s2 -> s1 [0, 62] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s2 -> s2 [0, 65535] { R2078 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s2 -> s4 [63, 63] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s2 -> s1 [64, 65535] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s3 -> s1 [0, 62] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s3 -> s2 [0, 65535] { R2078 += 1, R2050 += 1, R2025 += 1, R2026 += 1 };
  s3 -> s3 [0, 65535] { R2078 += 1, R2049 += 1, R2050 += 1 };
  s3 -> s4 [63, 63] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s3 -> s1 [64, 65535] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s4 -> s5 [0, 65535] { R2078 += 1 };
  s4 -> s6 [0, 65535] { R2078 += 1, R2050 += 1 };
  s4 -> s4 [0, 65535] { R2078 += 1, R2050 += 1, R2026 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R2078 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R2078 += 1 };
  s6 -> s6 [0, 65535] { R2078 += 1, R2050 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton url_17 {
  init s0;
  s0 -> s1 [0, 65535] { R2080 += 1, R2052 += 1, R2027 += 1, R2028 += 1 };
  s0 -> s0 [0, 65535] { R2079 += 1, R2080 += 1 };
  s0 -> s2 [0, 65535] { R2080 += 1, R2052 += 1, R2028 += 1, R2019 += 1 };
  s0 -> s3 [0, 65535] { R2080 += 1, R2051 += 1, R2052 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R2080 += 1 };
  s1 -> s1 [0, 65535] { R2080 += 1, R2052 += 1, R2027 += 1, R2028 += 1 };
  s1 -> s2 [0, 65535] { R2080 += 1, R2052 += 1, R2028 += 1, R2019 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R2080 += 1 };
  s2 -> s6 [0, 65535] { R2080 += 1, R2052 += 1 };
  s2 -> s2 [0, 65535] { R2080 += 1, R2052 += 1, R2028 += 1, R2019 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R2080 += 1, R2052 += 1, R2027 += 1, R2028 += 1 };
  s3 -> s2 [0, 65535] { R2080 += 1, R2052 += 1, R2028 += 1, R2019 += 1 };
  s3 -> s3 [0, 65535] { R2080 += 1, R2051 += 1, R2052 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R2080 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R2080 += 1 };
  s6 -> s6 [0, 65535] { R2080 += 1, R2052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R2024 && R2 = R2052 && R3 = R2080 && R5 = 0 && R6 = R2026 && R1045 = 2 && R1565 = 2 && R1825 = 2 && R1826 = R2051 && R1955 = 0 && R1956 - R2079 = -1 && R2023 - R2026 = 1 && R2025 = 0 && R2033 = 0 && R2034 = 2 && R2035 = 0 && R2036 = 2 && R2037 = 0 && R2038 - R2079 = -1 && R2039 = 0 && R2040 - R2079 = -1 && R2041 = R2051 && R2042 = R2052 && R2043 = R2051 && R2044 = R2052 && R2045 = R2051 && R2046 = R2052 && R2047 = R2051 && R2048 = R2052 && R2049 = R2051 && R2050 = R2052 && R2053 = R2079 && R2054 = R2080 && R2055 = R2079 && R2056 = R2080 && R2057 = R2079 && R2058 = R2080 && R2059 = R2079 && R2060 = R2080 && R2061 = R2079 && R2062 = R2080 && R2063 = R2079 && R2064 = R2080 && R2065 = R2079 && R2066 = R2080 && R2067 = R2079 && R2068 = R2080 && R2069 = R2079 && R2070 = R2080 && R2071 = R2079 && R2072 = R2080 && R2073 = R2079 && R2074 = R2080 && R2075 = R2079 && R2076 = R2080 && R2077 = R2079 && R2078 = R2080 && R0 != 0 && R2051 - R1046 < 1 && R2051 - R1566 < 1 && R2026 < R2024 && -1 < R2026 && R2051 < R2052 && 1 < R2051 && R2079 - R2080 < 1 && 1 < R2079 && (R2027 != 0 || R2026 = R2028 || (R2019 = 0 && R2026 = 0)) && (R2029 != 2 || R2030 = R2051 || (R2020 = 0 && R2051 = 2)) && (R2031 != 2 || R2032 = R2051 || (R2020 = 0 && R2051 = 2)) && (R2027 = 0 || (R2019 = 0 && R2026 = 0)) && (R2029 = 2 || (R2020 = 0 && R2051 = 2)) && (R2031 = 2 || (R2020 = 0 && R2051 = 2));
// End of Parikh automata intersection problem
