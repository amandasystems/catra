// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R1044, R1048, R1049, R1308, R1309, R1438, R1439, R1502, R1503, R1504, R1505, R1506, R1507, R1508, R1509, R1510, R1511, R1512, R1513, R1514, R1515, R1516, R1517, R1518, R1519, R1520, R1521, R1522, R1523, R1524, R1525, R1526, R1527, R1528, R1529, R1530, R1531, R1532, R1533, R1534, R1535, R1536, R1537, R1538, R1539, R1540, R1541, R1542, R1543, R1544, R1545, R1546, R1547, R1548, R1549, R1550, R1551, R1552, R1553, R1554, R1555, R1556, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R2, R3, R5, R6;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R1439 += 1 };
  s0 -> s0 [0, 65535] { R1438 += 1, R1439 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R1439 += 1 };
  s1 -> s1 [0, 57] { R1439 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R1439 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R1520 += 1, R1521 += 1 };
  s0 -> s1 [104, 104] { R1521 += 1 };
  s1 -> s2 [116, 116] { R1521 += 1 };
  s2 -> s3 [116, 116] { R1521 += 1 };
  s3 -> s4 [112, 112] { R1521 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R1523 += 1, R1505 += 1 };
  s0 -> s0 [0, 65535] { R1522 += 1, R1523 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1523 += 1, R1505 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R1536 += 1, R1537 += 1 };
  s0 -> s1 [0, 65535] { R1537 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1537 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 34] { R1539 += 1 };
  s0 -> s0 [0, 65535] { R1538 += 1, R1539 += 1 };
  s0 -> s2 [0, 65535] { R1539 += 1, R1044 += 1 };
  s0 -> s3 [35, 35] { R1539 += 1 };
  s0 -> s1 [36, 65535] { R1539 += 1 };
  s1 -> s1 [0, 34] { R1539 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [35, 35] { R1539 += 1 };
  s1 -> s1 [36, 65535] { R1539 += 1 };
  s2 -> s1 [0, 34] { R1539 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1539 += 1, R1044 += 1 };
  s2 -> s3 [35, 35] { R1539 += 1 };
  s2 -> s1 [36, 65535] { R1539 += 1 };
  s3 -> s3 [0, 65535] { R1539 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 62] { R1541 += 1, R1049 += 1 };
  s0 -> s2 [0, 65535] { R1541 += 1, R1048 += 1, R1049 += 1 };
  s0 -> s0 [0, 65535] { R1540 += 1, R1541 += 1 };
  s0 -> s3 [63, 63] { R1541 += 1 };
  s0 -> s1 [64, 65535] { R1541 += 1, R1049 += 1 };
  s1 -> s1 [0, 62] { R1541 += 1, R1049 += 1 };
  s1 -> s3 [63, 63] { R1541 += 1 };
  s1 -> s1 [64, 65535] { R1541 += 1, R1049 += 1 };
  s2 -> s1 [0, 62] { R1541 += 1, R1049 += 1 };
  s2 -> s2 [0, 65535] { R1541 += 1, R1048 += 1, R1049 += 1 };
  s2 -> s3 [63, 63] { R1541 += 1 };
  s2 -> s1 [64, 65535] { R1541 += 1, R1049 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1541 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 46] { R1543 += 1, R1309 += 1 };
  s0 -> s0 [0, 65535] { R1542 += 1, R1543 += 1 };
  s0 -> s2 [0, 65535] { R1543 += 1, R1308 += 1, R1309 += 1 };
  s0 -> s3 [47, 47] { R1543 += 1 };
  s0 -> s1 [48, 65535] { R1543 += 1, R1309 += 1 };
  s1 -> s1 [0, 46] { R1543 += 1, R1309 += 1 };
  s1 -> s3 [47, 47] { R1543 += 1 };
  s1 -> s1 [48, 65535] { R1543 += 1, R1309 += 1 };
  s2 -> s1 [0, 46] { R1543 += 1, R1309 += 1 };
  s2 -> s2 [0, 65535] { R1543 += 1, R1308 += 1, R1309 += 1 };
  s2 -> s3 [47, 47] { R1543 += 1 };
  s2 -> s1 [48, 65535] { R1543 += 1, R1309 += 1 };
  s3 -> s3 [0, 65535] { R1543 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 90] { R1545 += 1, R1513 += 1 };
  s0 -> s2 [0, 65535] { R1545 += 1, R1512 += 1, R1513 += 1 };
  s0 -> s0 [0, 65535] { R1544 += 1, R1545 += 1 };
  s0 -> s1 [92, 92] { R1545 += 1, R1513 += 1 };
  s0 -> s1 [94, 65535] { R1545 += 1, R1513 += 1 };
  s1 -> s1 [0, 90] { R1545 += 1, R1513 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1545 += 1 };
  s1 -> s1 [92, 92] { R1545 += 1, R1513 += 1 };
  s1 -> s1 [94, 65535] { R1545 += 1, R1513 += 1 };
  s2 -> s1 [0, 90] { R1545 += 1, R1513 += 1 };
  s2 -> s2 [0, 65535] { R1545 += 1, R1512 += 1, R1513 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [92, 92] { R1545 += 1, R1513 += 1 };
  s2 -> s1 [94, 65535] { R1545 += 1, R1513 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1546 += 1, R1547 += 1 };
  s0 -> s1 [0, 65535] { R1547 += 1, R1514 += 1, R1515 += 1 };
  s0 -> s2 [0, 65535] { R1547 += 1, R1515 += 1, R1503 += 1 };
  s1 -> s1 [0, 65535] { R1547 += 1, R1514 += 1, R1515 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1547 += 1, R1515 += 1, R1503 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1547 += 1, R1515 += 1, R1503 += 1 };
  s2 -> s4 [0, 65535] { R1547 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1547 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s0 [0, 65535] { R1548 += 1, R1549 += 1 };
  s0 -> s1 [0, 65535] { R1549 += 1, R1516 += 1, R1517 += 1 };
  s0 -> s2 [47, 47] { R1549 += 1, R1517 += 1 };
  s1 -> s1 [0, 65535] { R1549 += 1, R1516 += 1, R1517 += 1 };
  s1 -> s2 [47, 47] { R1549 += 1, R1517 += 1 };
  s2 -> s3 [47, 47] { R1549 += 1, R1517 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1549 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1550 += 1, R1551 += 1 };
  s0 -> s1 [0, 65535] { R1551 += 1, R1519 += 1, R1504 += 1 };
  s0 -> s2 [0, 65535] { R1551 += 1, R1518 += 1, R1519 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1551 += 1 };
  s1 -> s1 [0, 65535] { R1551 += 1, R1519 += 1, R1504 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1551 += 1, R1519 += 1, R1504 += 1 };
  s2 -> s2 [0, 65535] { R1551 += 1, R1518 += 1, R1519 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1551 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 34] { R1553 += 1, R1525 += 1 };
  s0 -> s0 [0, 65535] { R1552 += 1, R1553 += 1 };
  s0 -> s2 [0, 65535] { R1553 += 1, R1524 += 1, R1525 += 1 };
  s0 -> s1 [36, 62] { R1553 += 1, R1525 += 1 };
  s0 -> s3 [63, 63] { R1553 += 1, R1525 += 1 };
  s0 -> s1 [64, 65535] { R1553 += 1, R1525 += 1 };
  s1 -> s1 [0, 34] { R1553 += 1, R1525 += 1 };
  s1 -> s1 [36, 62] { R1553 += 1, R1525 += 1 };
  s1 -> s3 [63, 63] { R1553 += 1, R1525 += 1 };
  s1 -> s1 [64, 65535] { R1553 += 1, R1525 += 1 };
  s2 -> s1 [0, 34] { R1553 += 1, R1525 += 1 };
  s2 -> s2 [0, 65535] { R1553 += 1, R1524 += 1, R1525 += 1 };
  s2 -> s1 [36, 62] { R1553 += 1, R1525 += 1 };
  s2 -> s3 [63, 63] { R1553 += 1, R1525 += 1 };
  s2 -> s1 [64, 65535] { R1553 += 1, R1525 += 1 };
  s3 -> s3 [0, 34] { R1553 += 1, R1525 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1553 += 1 };
  s3 -> s3 [36, 65535] { R1553 += 1, R1525 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1555 += 1, R1526 += 1, R1527 += 1 };
  s0 -> s0 [0, 65535] { R1554 += 1, R1555 += 1 };
  s0 -> s2 [0, 65535] { R1555 += 1, R1527 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R1555 += 1, R1526 += 1, R1527 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1555 += 1, R1527 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R1555 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1555 += 1, R1527 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R1555 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_14 {
  init s0;
  s0 -> s1 [0, 62] { R1557 += 1, R1529 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R1557 += 1, R1529 += 1, R5 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R1557 += 1, R1528 += 1, R1529 += 1 };
  s0 -> s0 [0, 65535] { R1556 += 1, R1557 += 1 };
  s0 -> s4 [63, 63] { R1557 += 1, R1529 += 1 };
  s0 -> s1 [64, 65535] { R1557 += 1, R1529 += 1, R6 += 1 };
  s1 -> s1 [0, 62] { R1557 += 1, R1529 += 1, R6 += 1 };
  s1 -> s4 [63, 63] { R1557 += 1, R1529 += 1 };
  s1 -> s1 [64, 65535] { R1557 += 1, R1529 += 1, R6 += 1 };
  s2 -> s1 [0, 62] { R1557 += 1, R1529 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R1557 += 1, R1529 += 1, R5 += 1, R6 += 1 };
  s2 -> s4 [63, 63] { R1557 += 1, R1529 += 1 };
  s2 -> s1 [64, 65535] { R1557 += 1, R1529 += 1, R6 += 1 };
  s3 -> s1 [0, 62] { R1557 += 1, R1529 += 1, R6 += 1 };
  s3 -> s2 [0, 65535] { R1557 += 1, R1529 += 1, R5 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R1557 += 1, R1528 += 1, R1529 += 1 };
  s3 -> s4 [63, 63] { R1557 += 1, R1529 += 1 };
  s3 -> s1 [64, 65535] { R1557 += 1, R1529 += 1, R6 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1557 += 1, R1529 += 1 };
  s4 -> s6 [0, 65535] { R1557 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1557 += 1 };
  accepting s4, s5, s6;
};
automaton url_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1559 += 1, R1530 += 1, R1531 += 1 };
  s0 -> s2 [0, 65535] { R1559 += 1, R1531 += 1, R1506 += 1, R1507 += 1 };
  s0 -> s0 [0, 65535] { R1558 += 1, R1559 += 1 };
  s0 -> s3 [0, 65535] { R1559 += 1, R1531 += 1, R1507 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R1559 += 1, R1530 += 1, R1531 += 1 };
  s1 -> s2 [0, 65535] { R1559 += 1, R1531 += 1, R1506 += 1, R1507 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R1559 += 1, R1531 += 1, R1507 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R1559 += 1, R1531 += 1, R1506 += 1, R1507 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1559 += 1, R1531 += 1, R1507 += 1, R0 += 1 };
  s2 -> s6 [0, 65535] { R1559 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1559 += 1, R1531 += 1 };
  s3 -> s3 [0, 65535] { R1559 += 1, R1531 += 1, R1507 += 1, R0 += 1 };
  s3 -> s6 [0, 65535] { R1559 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1559 += 1, R1531 += 1 };
  s5 -> s6 [0, 65535] { R1559 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1559 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton url_16 {
  init s0;
  s0 -> s1 [0, 46] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s0 -> s2 [0, 65535] { R1561 += 1, R1533 += 1, R1508 += 1, R1509 += 1 };
  s0 -> s0 [0, 65535] { R1560 += 1, R1561 += 1 };
  s0 -> s3 [0, 65535] { R1561 += 1, R1532 += 1, R1533 += 1 };
  s0 -> s1 [48, 58] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s0 -> s4 [59, 59] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s0 -> s1 [60, 65535] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s1 -> s1 [0, 46] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s1 -> s1 [48, 58] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s1 -> s4 [59, 59] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s1 -> s1 [60, 65535] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s2 -> s1 [0, 46] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s2 -> s2 [0, 65535] { R1561 += 1, R1533 += 1, R1508 += 1, R1509 += 1 };
  s2 -> s1 [48, 58] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s2 -> s4 [59, 59] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s2 -> s1 [60, 65535] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s3 -> s1 [0, 46] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s3 -> s2 [0, 65535] { R1561 += 1, R1533 += 1, R1508 += 1, R1509 += 1 };
  s3 -> s3 [0, 65535] { R1561 += 1, R1532 += 1, R1533 += 1 };
  s3 -> s1 [48, 58] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s3 -> s4 [59, 59] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s3 -> s1 [60, 65535] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s4 -> s4 [0, 46] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1561 += 1 };
  s4 -> s4 [0, 65535] { R1561 += 1, R1533 += 1 };
  s4 -> s4 [48, 65535] { R1561 += 1, R1533 += 1, R1509 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1561 += 1 };
  accepting s4, s5, s6;
};
automaton url_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1563 += 1, R1535 += 1, R1510 += 1, R1511 += 1 };
  s0 -> s2 [0, 65535] { R1563 += 1, R1534 += 1, R1535 += 1 };
  s0 -> s3 [0, 65535] { R1563 += 1, R1535 += 1, R1511 += 1, R1502 += 1 };
  s0 -> s0 [0, 65535] { R1562 += 1, R1563 += 1 };
  s1 -> s4 [0, 65535] { R1563 += 1 };
  s1 -> s1 [0, 65535] { R1563 += 1, R1535 += 1, R1510 += 1, R1511 += 1 };
  s1 -> s3 [0, 65535] { R1563 += 1, R1535 += 1, R1511 += 1, R1502 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R1563 += 1, R1535 += 1, R1510 += 1, R1511 += 1 };
  s2 -> s2 [0, 65535] { R1563 += 1, R1534 += 1, R1535 += 1 };
  s2 -> s3 [0, 65535] { R1563 += 1, R1535 += 1, R1511 += 1, R1502 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R1563 += 1 };
  s3 -> s5 [0, 65535] { R1563 += 1, R1535 += 1 };
  s3 -> s3 [0, 65535] { R1563 += 1, R1535 += 1, R1511 += 1, R1502 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1563 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1563 += 1 };
  s5 -> s5 [0, 65535] { R1563 += 1, R1535 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1507 && R2 = R1535 && R3 = R1563 && R5 = 0 && R6 = R1509 && R1048 = 2 && R1308 = 2 && R1309 = R1534 && R1438 = 0 && R1439 - R1562 = -1 && R1506 - R1509 = 1 && R1508 = 0 && R1516 = 0 && R1517 = 2 && R1518 = 0 && R1519 = 2 && R1520 = 0 && R1521 - R1562 = -1 && R1522 = 0 && R1523 - R1562 = -1 && R1524 = R1534 && R1525 = R1535 && R1526 = R1534 && R1527 = R1535 && R1528 = R1534 && R1529 = R1535 && R1530 = R1534 && R1531 = R1535 && R1532 = R1534 && R1533 = R1535 && R1536 = R1562 && R1537 = R1563 && R1538 = R1562 && R1539 = R1563 && R1540 = R1562 && R1541 = R1563 && R1542 = R1562 && R1543 = R1563 && R1544 = R1562 && R1545 = R1563 && R1546 = R1562 && R1547 = R1563 && R1548 = R1562 && R1549 = R1563 && R1550 = R1562 && R1551 = R1563 && R1552 = R1562 && R1553 = R1563 && R1554 = R1562 && R1555 = R1563 && R1556 = R1562 && R1557 = R1563 && R1558 = R1562 && R1559 = R1563 && R1560 = R1562 && R1561 = R1563 && R0 != 0 && R1044 < 3 && R1534 - R1049 < 1 && R1509 < R1507 && -1 < R1509 && R1534 < R1535 && 1 < R1534 && R1562 - R1563 < 1 && 1 < R1562 && (R1510 != 0 || R1509 = R1511 || (R1502 = 0 && R1509 = 0)) && (R1512 != 2 || R1513 = R1534 || (R1503 = 0 && R1534 = 2)) && (R1514 != 2 || R1515 = R1534 || (R1503 = 0 && R1534 = 2)) && (R1510 = 0 || (R1502 = 0 && R1509 = 0)) && (R1512 = 2 || (R1503 = 0 && R1534 = 2)) && (R1514 = 2 || (R1503 = 0 && R1534 = 2));
// End of Parikh automata intersection problem
