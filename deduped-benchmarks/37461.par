// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R255, R256, R3, R380, R381, R382, R383, R384, R385, R386, R4, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474;
synchronised {  // Automata constraining P15
automaton P15_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R256 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R256 += 1 };
  s1 -> s1 [0, 57] { R256 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R256 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 46] { R452 += 1, R384 += 1 };
  s0 -> s0 [0, 65535] { R451 += 1, R452 += 1 };
  s0 -> s2 [0, 65535] { R452 += 1, R383 += 1, R384 += 1 };
  s0 -> s3 [47, 47] { R452 += 1, R384 += 1 };
  s0 -> s1 [48, 65535] { R452 += 1, R384 += 1 };
  s1 -> s1 [0, 65535] { R452 += 1, R384 += 1 };
  s1 -> s6 [0, 65535] { R452 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 46] { R452 += 1, R384 += 1 };
  s2 -> s2 [0, 65535] { R452 += 1, R383 += 1, R384 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R452 += 1, R384 += 1 };
  s2 -> s1 [48, 65535] { R452 += 1, R384 += 1 };
  s3 -> s1 [0, 46] { R452 += 1, R384 += 1 };
  s3 -> s3 [0, 65535] { R452 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R452 += 1, R384 += 1 };
  s3 -> s1 [48, 65535] { R452 += 1, R384 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R452 += 1, R384 += 1 };
  s6 -> s6 [0, 65535] { R452 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R454 += 1, R385 += 1, R386 += 1 };
  s0 -> s2 [0, 65535] { R454 += 1, R386 += 1, R380 += 1 };
  s0 -> s0 [0, 65535] { R453 += 1, R454 += 1 };
  s1 -> s1 [0, 65535] { R454 += 1, R385 += 1, R386 += 1 };
  s1 -> s2 [0, 65535] { R454 += 1, R386 += 1, R380 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R454 += 1 };
  s2 -> s2 [0, 65535] { R454 += 1, R386 += 1, R380 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R454 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R460 += 1 };
  s0 -> s0 [0, 65535] { R459 += 1, R460 += 1 };
  s0 -> s2 [65, 65] { R460 += 1 };
  s0 -> s1 [66, 65535] { R460 += 1 };
  s1 -> s1 [0, 64] { R460 += 1 };
  s1 -> s2 [65, 65] { R460 += 1 };
  s1 -> s1 [66, 65535] { R460 += 1 };
  s2 -> s2 [0, 65535] { R460 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_6 {
  init s0;
  s0 -> s0 [0, 65535] { R461 += 1, R462 += 1 };
  s0 -> s1 [0, 65535] { R462 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R462 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 64] { R464 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R464 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R463 += 1, R464 += 1 };
  s0 -> s3 [65, 65] { R464 += 1 };
  s0 -> s1 [66, 65535] { R464 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R464 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R464 += 1 };
  s1 -> s1 [66, 65535] { R464 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R464 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R464 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R464 += 1 };
  s2 -> s1 [66, 65535] { R464 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R464 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_8 {
  init s0;
  s0 -> s1 [0, 64] { R466 += 1, R446 += 1 };
  s0 -> s0 [0, 65535] { R465 += 1, R466 += 1 };
  s0 -> s2 [0, 65535] { R466 += 1, R445 += 1, R446 += 1 };
  s0 -> s1 [66, 65535] { R466 += 1, R446 += 1 };
  s1 -> s1 [0, 64] { R466 += 1, R446 += 1 };
  s1 -> s1 [0, 65535] { R466 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R466 += 1, R446 += 1 };
  s2 -> s1 [0, 64] { R466 += 1, R446 += 1 };
  s2 -> s2 [0, 65535] { R466 += 1, R445 += 1, R446 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R466 += 1, R446 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton url_9 {
  init s0;
  s0 -> s1 [0, 65535] { R468 += 1, R447 += 1, R448 += 1 };
  s0 -> s0 [0, 65535] { R467 += 1, R468 += 1 };
  s0 -> s2 [0, 65535] { R468 += 1, R448 += 1, R381 += 1 };
  s1 -> s1 [0, 65535] { R468 += 1, R447 += 1, R448 += 1 };
  s1 -> s2 [0, 65535] { R468 += 1, R448 += 1, R381 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R468 += 1 };
  s2 -> s2 [0, 65535] { R468 += 1, R448 += 1, R381 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R468 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton url_10 {
  init s0;
  s0 -> s1 [0, 65535] { R470 += 1, R449 += 1, R450 += 1 };
  s0 -> s0 [0, 65535] { R469 += 1, R470 += 1 };
  s0 -> s2 [112, 112] { R470 += 1, R450 += 1 };
  s1 -> s1 [0, 65535] { R470 += 1, R449 += 1, R450 += 1 };
  s1 -> s2 [112, 112] { R470 += 1, R450 += 1 };
  s2 -> s2 [0, 65535] { R470 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_11 {
  init s0;
  s0 -> s1 [0, 65535] { R472 += 1, R456 += 1, R382 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s0 -> s2 [0, 65535] { R472 += 1, R455 += 1, R456 += 1 };
  s1 -> s1 [0, 65535] { R472 += 1, R456 += 1, R382 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R472 += 1 };
  s2 -> s1 [0, 65535] { R472 += 1, R456 += 1, R382 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R472 += 1, R455 += 1, R456 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R472 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_12 {
  init s0;
  s0 -> s1 [0, 65535] { R474 += 1, R457 += 1, R458 += 1 };
  s0 -> s0 [0, 65535] { R473 += 1, R474 += 1 };
  s0 -> s2 [102, 102] { R474 += 1, R458 += 1 };
  s1 -> s1 [0, 65535] { R474 += 1, R457 += 1, R458 += 1 };
  s1 -> s2 [102, 102] { R474 += 1, R458 += 1 };
  s2 -> s3 [116, 116] { R474 += 1, R458 += 1 };
  s3 -> s3 [0, 65535] { R474 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
};
constraint R0 = R450 && R1 - R474 = 1 && R3 = 0 && R4 - R458 = -1 && R255 = 0 && R256 = R474 && R449 = R458 && R457 = 0 && R459 = 0 && R460 = R474 && R461 = 0 && R462 = R474 && R463 = 0 && R464 = R474 && R465 = 0 && R466 = R474 && R467 = 0 && R468 = R474 && R469 = 0 && R470 = R474 && R471 = 0 && R472 = R474 && R473 = 0 && R458 - R450 < 1 && -1 < R458 && 0 < R474 && (R445 != R458 || R446 = R450 || (R381 = 0 && R450 = R458)) && (R447 != R458 || R448 = R450 || (R381 = 0 && R450 = R458)) && (R455 != 0 || R456 = R458 || (R382 = 0 && (R450 < 1 || R458 < 1))) && (R380 = 0 || (R383 = 0 && R384 = 0)) && (R380 = 0 || (R385 = 0 && R386 = 0)) && (R445 = R458 || (R381 = 0 && R450 = R458)) && (R447 = R458 || (R381 = 0 && R450 = R458)) && (R455 = 0 || (R382 = 0 && (R450 < 1 || R458 < 1)));
// End of Parikh automata intersection problem
