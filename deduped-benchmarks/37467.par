// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R2, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R3 += 1 };
  s1 -> s1 [0, 57] { R3 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s0 -> s1 [104, 104] { R31 += 1 };
  s1 -> s2 [116, 116] { R31 += 1 };
  s2 -> s3 [116, 116] { R31 += 1 };
  s3 -> s4 [112, 112] { R31 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R33 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s1 -> s1 [0, 65535] { R33 += 1, R25 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 34] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s1 [36, 58] { R35 += 1 };
  s0 -> s2 [59, 59] { R35 += 1 };
  s0 -> s1 [60, 62] { R35 += 1 };
  s0 -> s1 [64, 65535] { R35 += 1 };
  s1 -> s1 [0, 34] { R35 += 1 };
  s1 -> s1 [36, 58] { R35 += 1 };
  s1 -> s2 [59, 59] { R35 += 1 };
  s1 -> s1 [60, 62] { R35 += 1 };
  s1 -> s1 [64, 65535] { R35 += 1 };
  s2 -> s2 [0, 34] { R35 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [36, 62] { R35 += 1 };
  s2 -> s2 [64, 65535] { R35 += 1 };
  accepting s2;
};
automaton url_5 {
  init s0;
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s1 [0, 65535] { R37 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 46] { R39 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R39 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s3 [47, 47] { R39 += 1, R27 += 1 };
  s0 -> s1 [48, 65535] { R39 += 1, R27 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R39 += 1, R27 += 1 };
  s1 -> s6 [0, 65535] { R39 += 1 };
  s2 -> s1 [0, 46] { R39 += 1, R27 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R39 += 1, R26 += 1, R27 += 1 };
  s2 -> s3 [47, 47] { R39 += 1, R27 += 1 };
  s2 -> s1 [48, 65535] { R39 += 1, R27 += 1 };
  s3 -> s1 [0, 46] { R39 += 1, R27 += 1 };
  s3 -> s3 [0, 65535] { R39 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R39 += 1, R27 += 1 };
  s3 -> s1 [48, 65535] { R39 += 1, R27 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R39 += 1, R27 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R39 += 1 };
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R41 += 1, R29 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s2 [0, 65535] { R41 += 1, R28 += 1, R29 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R41 += 1 };
  s1 -> s1 [0, 65535] { R41 += 1, R29 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R41 += 1, R29 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R41 += 1, R28 += 1, R29 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R41 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R35 && R2 = 0 && R3 - R34 = -1 && R30 = 0 && R31 - R34 = -1 && R32 = 0 && R33 - R34 = -1 && R34 - R35 < 1 && 1 < R34 && (R23 != 0 || ((R34 != R40 || ((R35 != R41 || ((R36 != R40 || ((R37 != R41 || ((R38 != R40 || R39 = R41 || R41 - R40 < 1 || R40 < 2) && (R38 = R40 || R41 - R40 < 1 || R40 < 2))) && (R37 = R41 || R41 - R40 < 1 || R40 < 2))) && (R36 = R40 || R41 - R40 < 1 || R40 < 2))) && (R35 = R41 || R35 - R40 < 1 || R40 < 2))) && (R34 = R40 || R35 - R34 < 1))) && (R26 != 0 || ((R24 != 0 || ((R23 != R27 || R27 < 3) && (R23 != 1 || R27 != 2) && (R23 = R27 || R27 = 2 || R23 < 1))) && (R24 = 0 || (R27 < 3 && (R27 != 2 || 1 < R23) && (R23 = R27 || 1 < R27))))) && (R28 != 0 || ((R24 != 0 || ((R23 != R29 || R29 < 3) && (R23 != 1 || R29 != 2) && (R23 = R29 || R29 = 2 || R23 < 1))) && (R24 = 0 || (R29 < 3 && (R29 != 2 || 1 < R23) && (R23 = R29 || 1 < R29))))) && (R23 = 0 || (R34 = R40 && (R35 != R41 || ((R36 != R40 || ((R37 != R41 || ((R38 != R40 || R39 = R41 || R41 < R40 || R40 < 2) && (R38 = R40 || R41 < R40 || R40 < 2))) && (R37 = R41 || R41 < R40 || R40 < 2))) && (R36 = R40 || R41 < R40 || R40 < 2))) && (R35 = R41 || R35 < R40 || R40 < 2))) && (R26 = 0 || (R24 = 0 && R23 < 1)) && (R28 = 0 || (R24 = 0 && R23 < 1));
// End of Parikh automata intersection problem
