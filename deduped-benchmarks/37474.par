// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R10, R11, R12, R13, R2, R3, R9;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R3 += 1 };
  s1 -> s1 [0, 57] { R3 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 64] { R11 += 1 };
  s0 -> s0 [0, 65535] { R10 += 1, R11 += 1 };
  s0 -> s1 [66, 103] { R11 += 1 };
  s0 -> s2 [104, 104] { R11 += 1 };
  s0 -> s1 [105, 65535] { R11 += 1 };
  s1 -> s1 [0, 64] { R11 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [66, 65535] { R11 += 1 };
  s2 -> s1 [0, 64] { R11 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s1 [66, 115] { R11 += 1 };
  s2 -> s3 [116, 116] { R11 += 1 };
  s2 -> s1 [117, 65535] { R11 += 1 };
  s3 -> s1 [0, 64] { R11 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s1 [66, 115] { R11 += 1 };
  s3 -> s4 [116, 116] { R11 += 1 };
  s3 -> s1 [117, 65535] { R11 += 1 };
  s4 -> s1 [0, 64] { R11 += 1 };
  s4 -> s4 [0, 65535];
  s4 -> s1 [66, 111] { R11 += 1 };
  s4 -> s5 [112, 112] { R11 += 1 };
  s4 -> s1 [113, 65535] { R11 += 1 };
  s5 -> s1 [0, 64] { R11 += 1 };
  s5 -> s1 [66, 65535] { R11 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s1 [0, 65535] { R13 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R13 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 - R13 = 1 && R2 = 0 && R3 = R13 && R10 = 0 && R11 = R13 && R12 = 0 && 0 < R13;
// End of Parikh automata intersection problem
