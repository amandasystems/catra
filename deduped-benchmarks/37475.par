// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R3, R39, R4, R40, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R40 += 1 };
  s1 -> s1 [0, 57] { R40 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R40 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 64] { R62 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s2 [65, 65] { R62 += 1 };
  s0 -> s1 [66, 65535] { R62 += 1 };
  s1 -> s1 [0, 64] { R62 += 1 };
  s1 -> s2 [65, 65] { R62 += 1 };
  s1 -> s1 [66, 65535] { R62 += 1 };
  s2 -> s2 [0, 65535] { R62 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R64 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R66 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R3 += 1, R4 += 1 };
  s0 -> s3 [65, 65] { R66 += 1 };
  s0 -> s1 [66, 65535] { R66 += 1, R4 += 1 };
  s1 -> s1 [0, 64] { R66 += 1, R4 += 1 };
  s1 -> s3 [65, 65] { R66 += 1 };
  s1 -> s1 [66, 65535] { R66 += 1, R4 += 1 };
  s2 -> s1 [0, 64] { R66 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R66 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [65, 65] { R66 += 1 };
  s2 -> s1 [66, 65535] { R66 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R66 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 64] { R68 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s3 [65, 65] { R68 += 1, R58 += 1 };
  s0 -> s1 [66, 65535] { R68 += 1, R58 += 1 };
  s1 -> s1 [0, 64] { R68 += 1, R58 += 1 };
  s1 -> s3 [65, 65] { R68 += 1, R58 += 1 };
  s1 -> s1 [66, 65535] { R68 += 1, R58 += 1 };
  s2 -> s1 [0, 64] { R68 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R68 += 1, R57 += 1, R58 += 1 };
  s2 -> s3 [65, 65] { R68 += 1, R58 += 1 };
  s2 -> s1 [66, 65535] { R68 += 1, R58 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R68 += 1 };
  s3 -> s3 [0, 65535] { R68 += 1, R58 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R68 += 1 };
  accepting s3, s4, s5;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R70 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R60 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s1 -> s1 [0, 65535] { R70 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R70 += 1, R60 += 1, R56 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R70 += 1, R60 += 1, R56 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R70 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R70 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R58 && R1 - R70 = 1 && R3 = 0 && R4 - R57 = -1 && R39 = 0 && R40 = R70 && R61 = 0 && R62 = R70 && R63 = 0 && R64 = R70 && R65 = 0 && R66 = R70 && R67 = 0 && R68 = R70 && R69 = 0 && R57 - R58 < 1 && -1 < R57 && 0 < R70 && (R57 != R59 || R58 = R60 || ((R56 != 0 || R58 - R59 < 1 || R59 < 0) && (R56 = 0 || R58 < R59 || R59 < 0))) && (R57 = R59 || (R56 = 0 && R57 = R58));
// End of Parikh automata intersection problem
