// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R6, R7;
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R7 += 1 };
  s1 -> s1 [0, 57] { R7 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 64] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [65, 65] { R29 += 1 };
  s0 -> s1 [66, 65535] { R29 += 1 };
  s1 -> s1 [0, 64] { R29 += 1 };
  s1 -> s2 [65, 65] { R29 += 1 };
  s1 -> s1 [66, 65535] { R29 += 1 };
  s2 -> s2 [0, 65535] { R29 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton url_4 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 64] { R33 += 1 };
  s0 -> s2 [0, 65535] { R33 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s3 [65, 65] { R33 += 1 };
  s0 -> s1 [66, 65535] { R33 += 1 };
  s1 -> s1 [0, 64] { R33 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R33 += 1 };
  s1 -> s1 [66, 65535] { R33 += 1 };
  s2 -> s1 [0, 64] { R33 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R33 += 1, R2 += 1 };
  s2 -> s3 [65, 65] { R33 += 1 };
  s2 -> s1 [66, 65535] { R33 += 1 };
  s3 -> s3 [0, 65535] { R33 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 64] { R35 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R35 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s3 [65, 65] { R35 += 1, R25 += 1 };
  s0 -> s1 [66, 65535] { R35 += 1, R25 += 1 };
  s1 -> s1 [0, 64] { R35 += 1, R25 += 1 };
  s1 -> s3 [65, 65] { R35 += 1, R25 += 1 };
  s1 -> s1 [66, 65535] { R35 += 1, R25 += 1 };
  s2 -> s1 [0, 64] { R35 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R35 += 1, R24 += 1, R25 += 1 };
  s2 -> s3 [65, 65] { R35 += 1, R25 += 1 };
  s2 -> s1 [66, 65535] { R35 += 1, R25 += 1 };
  s3 -> s4 [0, 65535] { R35 += 1 };
  s3 -> s3 [0, 65535] { R35 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R35 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton url_7 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R27 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R37 += 1, R26 += 1, R27 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R27 += 1, R23 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R37 += 1 };
  s2 -> s1 [0, 65535] { R37 += 1, R27 += 1, R23 += 1 };
  s2 -> s2 [0, 65535] { R37 += 1, R26 += 1, R27 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R37 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R25 && R1 - R37 = 1 && R6 = 0 && R7 = R37 && R24 = 0 && R28 = 0 && R29 = R37 && R30 = 0 && R31 = R37 && R32 = 0 && R33 = R37 && R34 = 0 && R35 = R37 && R36 = 0 && R2 < 1 && -1 < R25 && 0 < R37 && (R26 != 0 || R25 = R27 || (R23 = 0 && R25 = 0)) && (R26 = 0 || (R23 = 0 && R25 = 0));
// End of Parikh automata intersection problem
