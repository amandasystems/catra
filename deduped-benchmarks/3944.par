// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R15, R16, R2, R3, R361, R362, R4, R5, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R564, R565, R566, R6, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R362 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R362 += 1 };
  s1 -> s1 [0, 60] { R362 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R362 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R657 += 1, R658 += 1 };
  s0 -> s1 [0, 65535] { R658 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R658 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R659 += 1, R660 += 1 };
  s0 -> s1 [0, 65535] { R660 += 1, R559 += 1, R560 += 1 };
  s0 -> s2 [9, 9] { R660 += 1, R560 += 1 };
  s1 -> s1 [0, 65535] { R660 += 1, R559 += 1, R560 += 1 };
  s1 -> s2 [9, 9] { R660 += 1, R560 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R660 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R661 += 1, R662 += 1 };
  s0 -> s1 [0, 65535] { R662 += 1, R562 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R662 += 1, R561 += 1, R562 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R662 += 1, R562 += 1, R11 += 1 };
  s1 -> s4 [0, 65535] { R662 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R662 += 1, R562 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R662 += 1, R561 += 1, R562 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R662 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R664 += 1, R564 += 1 };
  s0 -> s2 [0, 65535] { R664 += 1, R563 += 1, R564 += 1 };
  s0 -> s0 [0, 65535] { R663 += 1, R664 += 1 };
  s0 -> s3 [9, 13] { R664 += 1, R564 += 1 };
  s0 -> s1 [14, 31] { R664 += 1, R564 += 1 };
  s0 -> s3 [32, 32] { R664 += 1, R564 += 1 };
  s0 -> s1 [33, 65535] { R664 += 1, R564 += 1 };
  s1 -> s1 [0, 65535] { R664 += 1, R564 += 1 };
  s1 -> s5 [0, 65535] { R664 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R664 += 1, R564 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R664 += 1, R563 += 1, R564 += 1 };
  s2 -> s3 [9, 13] { R664 += 1, R564 += 1 };
  s2 -> s1 [14, 31] { R664 += 1, R564 += 1 };
  s2 -> s3 [32, 32] { R664 += 1, R564 += 1 };
  s2 -> s1 [33, 65535] { R664 += 1, R564 += 1 };
  s3 -> s1 [0, 65535] { R664 += 1, R564 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R664 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R666 += 1, R566 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s2 [0, 65535] { R666 += 1, R565 += 1, R566 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R666 += 1, R566 += 1, R12 += 1 };
  s1 -> s4 [0, 65535] { R666 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R666 += 1, R566 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R666 += 1, R565 += 1, R566 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R666 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 64] { R668 += 1, R642 += 1 };
  s0 -> s2 [0, 65535] { R668 += 1, R641 += 1, R642 += 1 };
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s0 -> s1 [91, 65535] { R668 += 1, R642 += 1 };
  s1 -> s1 [0, 64] { R668 += 1, R642 += 1 };
  s1 -> s1 [0, 65535] { R668 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R668 += 1, R642 += 1 };
  s2 -> s1 [0, 64] { R668 += 1, R642 += 1 };
  s2 -> s2 [0, 65535] { R668 += 1, R641 += 1, R642 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R668 += 1, R642 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R669 += 1, R670 += 1 };
  s0 -> s1 [0, 65535] { R670 += 1, R644 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R670 += 1, R643 += 1, R644 += 1 };
  s1 -> s4 [0, 65535] { R670 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R670 += 1, R644 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R670 += 1, R644 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R670 += 1, R643 += 1, R644 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R670 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R672 += 1, R646 += 1, R536 += 1 };
  s0 -> s2 [0, 65535] { R672 += 1, R645 += 1, R646 += 1 };
  s0 -> s0 [0, 65535] { R671 += 1, R672 += 1 };
  s0 -> s3 [0, 65535] { R672 += 1, R646 += 1, R535 += 1, R536 += 1 };
  s0 -> s4 [9, 13] { R672 += 1, R646 += 1, R536 += 1 };
  s0 -> s1 [14, 31] { R672 += 1, R646 += 1, R536 += 1 };
  s0 -> s4 [32, 32] { R672 += 1, R646 += 1, R536 += 1 };
  s0 -> s1 [33, 65535] { R672 += 1, R646 += 1, R536 += 1 };
  s1 -> s7 [0, 65535] { R672 += 1, R646 += 1 };
  s1 -> s1 [0, 65535] { R672 += 1, R646 += 1, R536 += 1 };
  s1 -> s5 [0, 65535] { R672 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R672 += 1, R646 += 1, R536 += 1 };
  s2 -> s2 [0, 65535] { R672 += 1, R645 += 1, R646 += 1 };
  s2 -> s3 [0, 65535] { R672 += 1, R646 += 1, R535 += 1, R536 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R672 += 1, R646 += 1, R536 += 1 };
  s2 -> s1 [14, 31] { R672 += 1, R646 += 1, R536 += 1 };
  s2 -> s4 [32, 32] { R672 += 1, R646 += 1, R536 += 1 };
  s2 -> s1 [33, 65535] { R672 += 1, R646 += 1, R536 += 1 };
  s3 -> s1 [0, 8] { R672 += 1, R646 += 1, R536 += 1 };
  s3 -> s3 [0, 65535] { R672 += 1, R646 += 1, R535 += 1, R536 += 1 };
  s3 -> s5 [0, 65535] { R672 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R672 += 1, R646 += 1, R536 += 1 };
  s3 -> s1 [14, 31] { R672 += 1, R646 += 1, R536 += 1 };
  s3 -> s4 [32, 32] { R672 += 1, R646 += 1, R536 += 1 };
  s3 -> s1 [33, 65535] { R672 += 1, R646 += 1, R536 += 1 };
  s4 -> s1 [0, 65535] { R672 += 1, R646 += 1, R536 += 1 };
  s5 -> s5 [0, 65535] { R672 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R672 += 1, R646 += 1 };
  s7 -> s5 [0, 65535] { R672 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R674 += 1, R647 += 1, R648 += 1 };
  s0 -> s0 [0, 65535] { R673 += 1, R674 += 1 };
  s0 -> s2 [0, 65535] { R674 += 1, R648 += 1, R538 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R674 += 1, R648 += 1, R537 += 1, R538 += 1 };
  s1 -> s1 [0, 65535] { R674 += 1, R647 += 1, R648 += 1 };
  s1 -> s2 [0, 65535] { R674 += 1, R648 += 1, R538 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R674 += 1, R648 += 1, R537 += 1, R538 += 1 };
  s2 -> s2 [0, 65535] { R674 += 1, R648 += 1, R538 += 1, R5 += 1 };
  s2 -> s6 [0, 65535] { R674 += 1, R648 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R674 += 1 };
  s3 -> s2 [0, 65535] { R674 += 1, R648 += 1, R538 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R674 += 1 };
  s3 -> s3 [0, 65535] { R674 += 1, R648 += 1, R537 += 1, R538 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R674 += 1 };
  s6 -> s6 [0, 65535] { R674 += 1, R648 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R674 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R676 += 1, R650 += 1, R540 += 1 };
  s0 -> s2 [0, 65535] { R676 += 1, R650 += 1, R539 += 1, R540 += 1 };
  s0 -> s0 [0, 65535] { R675 += 1, R676 += 1 };
  s0 -> s3 [0, 65535] { R676 += 1, R649 += 1, R650 += 1 };
  s0 -> s4 [9, 13] { R676 += 1, R650 += 1, R540 += 1 };
  s0 -> s1 [14, 31] { R676 += 1, R650 += 1, R540 += 1 };
  s0 -> s4 [32, 32] { R676 += 1, R650 += 1, R540 += 1 };
  s0 -> s1 [33, 65535] { R676 += 1, R650 += 1, R540 += 1 };
  s1 -> s6 [0, 65535] { R676 += 1 };
  s1 -> s7 [0, 65535] { R676 += 1, R650 += 1 };
  s1 -> s1 [0, 65535] { R676 += 1, R650 += 1, R540 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R676 += 1, R650 += 1, R540 += 1 };
  s2 -> s6 [0, 65535] { R676 += 1 };
  s2 -> s2 [0, 65535] { R676 += 1, R650 += 1, R539 += 1, R540 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R676 += 1, R650 += 1, R540 += 1 };
  s2 -> s1 [14, 31] { R676 += 1, R650 += 1, R540 += 1 };
  s2 -> s4 [32, 32] { R676 += 1, R650 += 1, R540 += 1 };
  s2 -> s1 [33, 65535] { R676 += 1, R650 += 1, R540 += 1 };
  s3 -> s1 [0, 8] { R676 += 1, R650 += 1, R540 += 1 };
  s3 -> s2 [0, 65535] { R676 += 1, R650 += 1, R539 += 1, R540 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R676 += 1, R649 += 1, R650 += 1 };
  s3 -> s4 [9, 13] { R676 += 1, R650 += 1, R540 += 1 };
  s3 -> s1 [14, 31] { R676 += 1, R650 += 1, R540 += 1 };
  s3 -> s4 [32, 32] { R676 += 1, R650 += 1, R540 += 1 };
  s3 -> s1 [33, 65535] { R676 += 1, R650 += 1, R540 += 1 };
  s4 -> s1 [0, 65535] { R676 += 1, R650 += 1, R540 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R676 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R676 += 1 };
  s7 -> s7 [0, 65535] { R676 += 1, R650 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R678 += 1, R651 += 1, R652 += 1 };
  s0 -> s2 [0, 65535] { R678 += 1, R652 += 1, R542 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R677 += 1, R678 += 1 };
  s0 -> s3 [0, 65535] { R678 += 1, R652 += 1, R541 += 1, R542 += 1 };
  s1 -> s1 [0, 65535] { R678 += 1, R651 += 1, R652 += 1 };
  s1 -> s2 [0, 65535] { R678 += 1, R652 += 1, R542 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R678 += 1, R652 += 1, R541 += 1, R542 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R678 += 1, R652 += 1 };
  s2 -> s4 [0, 65535] { R678 += 1 };
  s2 -> s2 [0, 65535] { R678 += 1, R652 += 1, R542 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R678 += 1 };
  s3 -> s2 [0, 65535] { R678 += 1, R652 += 1, R542 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R678 += 1, R652 += 1, R541 += 1, R542 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R678 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R678 += 1, R652 += 1 };
  s6 -> s4 [0, 65535] { R678 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 64] { R680 += 1 };
  s0 -> s0 [0, 65535] { R679 += 1, R680 += 1 };
  s0 -> s2 [75, 75] { R680 += 1 };
  s0 -> s1 [76, 65535] { R680 += 1 };
  s1 -> s1 [0, 64] { R680 += 1 };
  s1 -> s2 [75, 75] { R680 += 1 };
  s1 -> s1 [76, 65535] { R680 += 1 };
  s2 -> s2 [0, 64] { R680 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R680 += 1 };
  accepting s2;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R681 += 1, R682 += 1 };
  s0 -> s1 [0, 65535] { R682 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R682 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 74] { R684 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R684 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R683 += 1, R684 += 1 };
  s0 -> s3 [75, 75] { R684 += 1 };
  s0 -> s1 [76, 65535] { R684 += 1, R16 += 1 };
  s1 -> s1 [0, 74] { R684 += 1, R16 += 1 };
  s1 -> s3 [75, 75] { R684 += 1 };
  s1 -> s1 [76, 65535] { R684 += 1, R16 += 1 };
  s2 -> s1 [0, 74] { R684 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R684 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [75, 75] { R684 += 1 };
  s2 -> s1 [76, 65535] { R684 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R684 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R686 += 1, R552 += 1 };
  s0 -> s2 [0, 65535] { R686 += 1, R551 += 1, R552 += 1 };
  s0 -> s0 [0, 65535] { R685 += 1, R686 += 1 };
  s0 -> s3 [9, 13] { R686 += 1, R552 += 1 };
  s0 -> s1 [14, 31] { R686 += 1, R552 += 1 };
  s0 -> s3 [32, 32] { R686 += 1, R552 += 1 };
  s0 -> s1 [33, 65535] { R686 += 1, R552 += 1 };
  s1 -> s1 [0, 65535] { R686 += 1, R552 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R686 += 1 };
  s2 -> s1 [0, 8] { R686 += 1, R552 += 1 };
  s2 -> s2 [0, 65535] { R686 += 1, R551 += 1, R552 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R686 += 1, R552 += 1 };
  s2 -> s1 [14, 31] { R686 += 1, R552 += 1 };
  s2 -> s3 [32, 32] { R686 += 1, R552 += 1 };
  s2 -> s1 [33, 65535] { R686 += 1, R552 += 1 };
  s3 -> s1 [0, 65535] { R686 += 1, R552 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R686 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R688 += 1, R554 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R688 += 1, R553 += 1, R554 += 1 };
  s0 -> s0 [0, 65535] { R687 += 1, R688 += 1 };
  s1 -> s4 [0, 65535] { R688 += 1 };
  s1 -> s1 [0, 65535] { R688 += 1, R554 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R688 += 1, R554 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R688 += 1, R553 += 1, R554 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R688 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R690 += 1, R556 += 1 };
  s0 -> s2 [0, 65535] { R690 += 1, R555 += 1, R556 += 1 };
  s0 -> s0 [0, 65535] { R689 += 1, R690 += 1 };
  s0 -> s3 [9, 13] { R690 += 1, R556 += 1 };
  s0 -> s1 [14, 31] { R690 += 1, R556 += 1 };
  s0 -> s3 [32, 32] { R690 += 1, R556 += 1 };
  s0 -> s1 [33, 65535] { R690 += 1, R556 += 1 };
  s1 -> s5 [0, 65535] { R690 += 1 };
  s1 -> s1 [0, 65535] { R690 += 1, R556 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R690 += 1, R556 += 1 };
  s2 -> s2 [0, 65535] { R690 += 1, R555 += 1, R556 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R690 += 1, R556 += 1 };
  s2 -> s1 [14, 31] { R690 += 1, R556 += 1 };
  s2 -> s3 [32, 32] { R690 += 1, R556 += 1 };
  s2 -> s1 [33, 65535] { R690 += 1, R556 += 1 };
  s3 -> s1 [0, 65535] { R690 += 1, R556 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R690 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R692 += 1, R557 += 1, R558 += 1 };
  s0 -> s0 [0, 65535] { R691 += 1, R692 += 1 };
  s0 -> s2 [0, 65535] { R692 += 1, R558 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R692 += 1, R557 += 1, R558 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R692 += 1, R558 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R692 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R692 += 1, R558 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R692 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 74] { R694 += 1, R636 += 1 };
  s0 -> s2 [0, 65535] { R694 += 1, R635 += 1, R636 += 1 };
  s0 -> s0 [0, 65535] { R693 += 1, R694 += 1 };
  s0 -> s1 [76, 65535] { R694 += 1, R636 += 1 };
  s1 -> s1 [0, 74] { R694 += 1, R636 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R694 += 1 };
  s1 -> s1 [76, 65535] { R694 += 1, R636 += 1 };
  s2 -> s1 [0, 74] { R694 += 1, R636 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R694 += 1, R635 += 1, R636 += 1 };
  s2 -> s1 [76, 65535] { R694 += 1, R636 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R696 += 1, R637 += 1, R638 += 1 };
  s0 -> s2 [0, 65535] { R696 += 1, R638 += 1, R533 += 1 };
  s0 -> s0 [0, 65535] { R695 += 1, R696 += 1 };
  s1 -> s1 [0, 65535] { R696 += 1, R637 += 1, R638 += 1 };
  s1 -> s2 [0, 65535] { R696 += 1, R638 += 1, R533 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R696 += 1 };
  s2 -> s2 [0, 65535] { R696 += 1, R638 += 1, R533 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R696 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 75] { R698 += 1, R640 += 1 };
  s0 -> s2 [0, 65535] { R698 += 1, R639 += 1, R640 += 1 };
  s0 -> s0 [0, 65535] { R697 += 1, R698 += 1 };
  s0 -> s1 [79, 65535] { R698 += 1, R640 += 1 };
  s1 -> s1 [0, 75] { R698 += 1, R640 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R698 += 1 };
  s1 -> s1 [79, 65535] { R698 += 1, R640 += 1 };
  s2 -> s1 [0, 75] { R698 += 1, R640 += 1 };
  s2 -> s2 [0, 65535] { R698 += 1, R639 += 1, R640 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [79, 65535] { R698 += 1, R640 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_24 {
  init s0;
  s0 -> s0 [0, 65535] { R699 += 1, R700 += 1 };
  s0 -> s1 [0, 65535] { R700 += 1, R653 += 1, R654 += 1 };
  s0 -> s2 [0, 65535] { R700 += 1, R654 += 1, R534 += 1 };
  s1 -> s1 [0, 65535] { R700 += 1, R653 += 1, R654 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R700 += 1, R654 += 1, R534 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R700 += 1 };
  s2 -> s2 [0, 65535] { R700 += 1, R654 += 1, R534 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R700 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 74] { R702 += 1, R656 += 1 };
  s0 -> s0 [0, 65535] { R701 += 1, R702 += 1 };
  s0 -> s2 [0, 65535] { R702 += 1, R655 += 1, R656 += 1 };
  s0 -> s3 [75, 75] { R702 += 1, R656 += 1 };
  s0 -> s4 [75, 75] { R702 += 1, R656 += 1 };
  s0 -> s5 [79, 79] { R702 += 1, R656 += 1 };
  s0 -> s1 [80, 65535] { R702 += 1, R656 += 1 };
  s1 -> s1 [0, 74] { R702 += 1, R656 += 1 };
  s1 -> s3 [75, 75] { R702 += 1, R656 += 1 };
  s1 -> s4 [75, 75] { R702 += 1, R656 += 1 };
  s1 -> s5 [79, 79] { R702 += 1, R656 += 1 };
  s1 -> s1 [80, 65535] { R702 += 1, R656 += 1 };
  s2 -> s1 [0, 74] { R702 += 1, R656 += 1 };
  s2 -> s2 [0, 65535] { R702 += 1, R655 += 1, R656 += 1 };
  s2 -> s3 [75, 75] { R702 += 1, R656 += 1 };
  s2 -> s4 [75, 75] { R702 += 1, R656 += 1 };
  s2 -> s5 [79, 79] { R702 += 1, R656 += 1 };
  s2 -> s1 [80, 65535] { R702 += 1, R656 += 1 };
  s3 -> s3 [0, 75] { R702 += 1, R656 += 1 };
  s3 -> s8 [79, 79] { R702 += 1, R656 += 1 };
  s3 -> s3 [80, 65535] { R702 += 1, R656 += 1 };
  s5 -> s5 [0, 74] { R702 += 1, R656 += 1 };
  s5 -> s5 [0, 65535] { R702 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R702 += 1, R656 += 1 };
  s5 -> s8 [75, 75] { R702 += 1, R656 += 1 };
  s5 -> s5 [79, 65535] { R702 += 1, R656 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R702 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R702 += 1, R656 += 1 };
  s8 -> s8 [0, 65535] { R702 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [79, 65535] { R702 += 1, R656 += 1 };
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R544 += 1 };
  s0 -> s0 [0, 65535] { R543 += 1, R544 += 1 };
  s0 -> s2 [9, 13] { R544 += 1 };
  s0 -> s1 [14, 31] { R544 += 1 };
  s0 -> s2 [32, 32] { R544 += 1 };
  s0 -> s1 [33, 65535] { R544 += 1 };
  s1 -> s1 [0, 65535] { R544 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R544 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R545 += 1, R546 += 1 };
  s0 -> s1 [0, 65535] { R546 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R546 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R548 += 1 };
  s0 -> s0 [0, 65535] { R547 += 1, R548 += 1 };
  s0 -> s2 [9, 13] { R548 += 1 };
  s0 -> s1 [14, 31] { R548 += 1 };
  s0 -> s2 [32, 32] { R548 += 1 };
  s0 -> s1 [33, 65535] { R548 += 1 };
  s1 -> s1 [0, 65535] { R548 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R548 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R550 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R549 += 1, R550 += 1 };
  s1 -> s1 [0, 65535] { R550 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P68
automaton P68_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R554 && R3 - R652 = 1 && R4 = R702 && R15 = 0 && R16 - R656 = -1 && R361 = 0 && R362 - R701 = -1 && R551 - R554 = -1 && R552 = R554 && R553 - R554 = -1 && R555 = 0 && R556 = 1 && R557 = 0 && R558 = 1 && R559 = R652 && R560 - R652 = 1 && R561 = R652 && R562 - R652 = 1 && R563 = 0 && R564 = 1 && R565 = 0 && R566 = 1 && R641 = 0 && R642 = R652 && R643 = 0 && R644 = R652 && R645 = 0 && R646 = R652 && R647 = 0 && R648 = R652 && R649 = 0 && R650 = R652 && R651 = 0 && R655 = 0 && R657 = 0 && R658 - R701 = -1 && R659 = 0 && R660 - R701 = -1 && R661 = 0 && R662 - R701 = -1 && R663 = 0 && R664 - R701 = -1 && R665 = 0 && R666 - R701 = -1 && R667 = 0 && R668 - R701 = -1 && R669 = 0 && R670 - R701 = -1 && R671 = 0 && R672 - R701 = -1 && R673 = 0 && R674 - R701 = -1 && R675 = 0 && R676 - R701 = -1 && R677 = 0 && R678 - R701 = -1 && R679 = R701 && R680 = R702 && R681 = R701 && R682 = R702 && R683 = R701 && R684 = R702 && R685 = R701 && R686 = R702 && R687 = R701 && R688 = R702 && R689 = R701 && R690 = R702 && R691 = R701 && R692 = R702 && R693 = R701 && R694 = R702 && R695 = R701 && R696 = R702 && R697 = R701 && R698 = R702 && R699 = R701 && R700 = R702 && R0 != 0 && R1 != 0 && R13 < 1 && R656 - R554 < 1 && 0 < R554 && -1 < R652 && -1 < R656 && R701 - R702 < 1 && 0 < R701 && (R5 != 0 || ((R0 != R536 || R535 - R536 = -1 || R536 < 0) && (R0 = R536 || R0 < 1))) && (R5 != 0 || ((R0 != R538 || R537 - R538 = -1 || R538 < 0) && (R0 = R538 || R0 < 1))) && (R7 != 0 || ((R1 != R544 || R543 - R544 = -1 || R544 < 0) && (R1 = R544 || R1 < 1))) && (R7 != 0 || ((R1 != R546 || R545 - R546 = -1 || R546 < 0) && (R1 = R546 || R1 < 1))) && (R539 != 0 || ((R6 != 0 || ((R0 != R540 || R540 = 1 || R540 < 0) && (R0 = R540 || R540 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R540 || R540 = 1 || R540 < 0) && (R540 != 1 || -1 < R0) && (R0 = R540 || R540 = 1))))) && (R541 != 0 || ((R6 != 0 || ((R0 != R542 || R542 = 1 || R542 < 0) && (R0 = R542 || R542 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R542 || R542 = 1 || R542 < 0) && (R542 != 1 || -1 < R0) && (R0 = R542 || R542 = 1))))) && (R547 != 0 || ((R8 != 0 || ((R1 != R548 || R548 = 1 || R548 < 0) && (R1 = R548 || R548 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R548 || R548 = 1 || R548 < 0) && (R548 != 1 || -1 < R1) && (R1 = R548 || R548 = 1))))) && (R549 != 0 || ((R8 != 0 || ((R1 != R550 || R550 = 1 || R550 < 0) && (R1 = R550 || R550 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R550 || R550 = 1 || R550 < 0) && (R550 != 1 || -1 < R1) && (R1 = R550 || R550 = 1))))) && (R554 != R636 || R635 = R656 || ((R533 != 0 || R636 - R656 < 1 || R636 < 1) && (R533 = 0 || R636 < R656 || R636 < 1))) && (R554 != R638 || R637 = R656 || ((R533 != 0 || R638 - R656 < 1 || R638 < 1) && (R533 = 0 || R638 < R656 || R638 < 1))) && (R554 != R640 || R639 = R656 || ((R533 != 0 || R640 - R656 < 1 || R640 < 1) && (R533 = 0 || R640 < R656 || R640 < 1))) && (R653 != 0 || R654 = R656 || (R534 = 0 && R656 = 0)) && (R5 = 0 || (R0 = R536 && R535 - R536 = -1)) && (R5 = 0 || (R0 = R538 && R537 - R538 = -1)) && (R7 = 0 || (R1 = R544 && R543 - R544 = -1)) && (R7 = 0 || (R1 = R546 && R545 - R546 = -1)) && (R539 = 0 || (R6 = 0 && R0 < 0)) && (R541 = 0 || (R6 = 0 && R0 < 0)) && (R547 = 0 || (R8 = 0 && R1 < 0)) && (R549 = 0 || (R8 = 0 && R1 < 0)) && (R554 = R636 || (R533 = 0 && R554 = R656)) && (R554 = R638 || (R533 = 0 && R554 = R656)) && (R554 = R640 || (R533 = 0 && R554 = R656)) && (R653 = 0 || (R534 = 0 && R656 = 0));
// End of Parikh automata intersection problem
