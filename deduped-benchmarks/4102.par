// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R14, R15, R2, R232, R233, R3, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R233 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R233 += 1 };
  s1 -> s1 [0, 60] { R233 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R233 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R377 += 1 };
  s0 -> s0 [0, 65535] { R376 += 1, R377 += 1 };
  s0 -> s1 [67, 65535] { R377 += 1 };
  s1 -> s1 [0, 64] { R377 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [67, 65535] { R377 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R378 += 1, R379 += 1 };
  s0 -> s1 [0, 65535] { R379 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R379 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R381 += 1, R343 += 1 };
  s0 -> s0 [0, 65535] { R380 += 1, R381 += 1 };
  s0 -> s2 [0, 65535] { R381 += 1, R342 += 1, R343 += 1 };
  s0 -> s3 [9, 13] { R381 += 1, R343 += 1 };
  s0 -> s1 [14, 31] { R381 += 1, R343 += 1 };
  s0 -> s3 [32, 32] { R381 += 1, R343 += 1 };
  s0 -> s1 [33, 65535] { R381 += 1, R343 += 1 };
  s1 -> s5 [0, 65535] { R381 += 1 };
  s1 -> s1 [0, 65535] { R381 += 1, R343 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R381 += 1, R343 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R381 += 1, R342 += 1, R343 += 1 };
  s2 -> s3 [9, 13] { R381 += 1, R343 += 1 };
  s2 -> s1 [14, 31] { R381 += 1, R343 += 1 };
  s2 -> s3 [32, 32] { R381 += 1, R343 += 1 };
  s2 -> s1 [33, 65535] { R381 += 1, R343 += 1 };
  s3 -> s1 [0, 65535] { R381 += 1, R343 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R381 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R383 += 1, R344 += 1, R345 += 1 };
  s0 -> s2 [0, 65535] { R383 += 1, R345 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R382 += 1, R383 += 1 };
  s1 -> s1 [0, 65535] { R383 += 1, R344 += 1, R345 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R383 += 1, R345 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R383 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R383 += 1, R345 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R383 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R385 += 1, R347 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [0, 65535] { R385 += 1, R346 += 1, R347 += 1 };
  s0 -> s3 [9, 13] { R385 += 1, R347 += 1 };
  s0 -> s1 [14, 31] { R385 += 1, R347 += 1 };
  s0 -> s3 [32, 32] { R385 += 1, R347 += 1 };
  s0 -> s1 [33, 65535] { R385 += 1, R347 += 1 };
  s1 -> s5 [0, 65535] { R385 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R385 += 1, R347 += 1 };
  s2 -> s1 [0, 8] { R385 += 1, R347 += 1 };
  s2 -> s2 [0, 65535] { R385 += 1, R346 += 1, R347 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R385 += 1, R347 += 1 };
  s2 -> s1 [14, 31] { R385 += 1, R347 += 1 };
  s2 -> s3 [32, 32] { R385 += 1, R347 += 1 };
  s2 -> s1 [33, 65535] { R385 += 1, R347 += 1 };
  s3 -> s1 [0, 65535] { R385 += 1, R347 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R385 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s0 -> s1 [0, 65535] { R387 += 1, R349 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R387 += 1, R348 += 1, R349 += 1 };
  s1 -> s4 [0, 65535] { R387 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R387 += 1, R349 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R387 += 1, R349 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R387 += 1, R348 += 1, R349 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R387 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R416 += 1, R417 += 1 };
  s0 -> s1 [0, 65535] { R417 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R417 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R419 += 1, R366 += 1, R367 += 1 };
  s0 -> s0 [0, 65535] { R418 += 1, R419 += 1 };
  s0 -> s2 [13, 13] { R419 += 1, R367 += 1 };
  s1 -> s1 [0, 65535] { R419 += 1, R366 += 1, R367 += 1 };
  s1 -> s2 [13, 13] { R419 += 1, R367 += 1 };
  s2 -> s2 [0, 65535] { R419 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R421 += 1, R369 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R421 += 1, R368 += 1, R369 += 1 };
  s0 -> s0 [0, 65535] { R420 += 1, R421 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R421 += 1, R369 += 1, R11 += 1 };
  s1 -> s4 [0, 65535] { R421 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R421 += 1, R369 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R421 += 1, R368 += 1, R369 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R421 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R423 += 1, R393 += 1 };
  s0 -> s0 [0, 65535] { R422 += 1, R423 += 1 };
  s0 -> s2 [0, 65535] { R423 += 1, R392 += 1, R393 += 1 };
  s0 -> s3 [67, 67] { R423 += 1, R393 += 1 };
  s0 -> s1 [68, 65535] { R423 += 1, R393 += 1 };
  s1 -> s1 [0, 64] { R423 += 1, R393 += 1 };
  s1 -> s3 [67, 67] { R423 += 1, R393 += 1 };
  s1 -> s1 [68, 65535] { R423 += 1, R393 += 1 };
  s2 -> s1 [0, 64] { R423 += 1, R393 += 1 };
  s2 -> s2 [0, 65535] { R423 += 1, R392 += 1, R393 += 1 };
  s2 -> s3 [67, 67] { R423 += 1, R393 += 1 };
  s2 -> s1 [68, 65535] { R423 += 1, R393 += 1 };
  s3 -> s3 [0, 64] { R423 += 1, R393 += 1 };
  s3 -> s3 [0, 65535] { R423 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [67, 65535] { R423 += 1, R393 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R425 += 1, R394 += 1, R395 += 1 };
  s0 -> s2 [0, 65535] { R425 += 1, R395 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R424 += 1, R425 += 1 };
  s1 -> s1 [0, 65535] { R425 += 1, R394 += 1, R395 += 1 };
  s1 -> s2 [0, 65535] { R425 += 1, R395 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R425 += 1 };
  s2 -> s2 [0, 65535] { R425 += 1, R395 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R425 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R427 += 1, R397 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R427 += 1, R397 += 1, R14 += 1, R15 += 1 };
  s0 -> s3 [0, 65535] { R427 += 1, R396 += 1, R397 += 1 };
  s0 -> s0 [0, 65535] { R426 += 1, R427 += 1 };
  s0 -> s4 [67, 67] { R427 += 1, R397 += 1 };
  s0 -> s1 [68, 65535] { R427 += 1, R397 += 1, R15 += 1 };
  s1 -> s1 [0, 66] { R427 += 1, R397 += 1, R15 += 1 };
  s1 -> s4 [67, 67] { R427 += 1, R397 += 1 };
  s1 -> s1 [68, 65535] { R427 += 1, R397 += 1, R15 += 1 };
  s2 -> s1 [0, 66] { R427 += 1, R397 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R427 += 1, R397 += 1, R14 += 1, R15 += 1 };
  s2 -> s4 [67, 67] { R427 += 1, R397 += 1 };
  s2 -> s1 [68, 65535] { R427 += 1, R397 += 1, R15 += 1 };
  s3 -> s1 [0, 66] { R427 += 1, R397 += 1, R15 += 1 };
  s3 -> s2 [0, 65535] { R427 += 1, R397 += 1, R14 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R427 += 1, R396 += 1, R397 += 1 };
  s3 -> s4 [67, 67] { R427 += 1, R397 += 1 };
  s3 -> s1 [68, 65535] { R427 += 1, R397 += 1, R15 += 1 };
  s4 -> s5 [0, 65535] { R427 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R427 += 1, R397 += 1 };
  s5 -> s5 [0, 65535] { R427 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R429 += 1, R399 += 1, R359 += 1 };
  s0 -> s0 [0, 65535] { R428 += 1, R429 += 1 };
  s0 -> s2 [0, 65535] { R429 += 1, R399 += 1, R358 += 1, R359 += 1 };
  s0 -> s3 [0, 65535] { R429 += 1, R398 += 1, R399 += 1 };
  s0 -> s4 [9, 13] { R429 += 1, R399 += 1, R359 += 1 };
  s0 -> s1 [14, 31] { R429 += 1, R399 += 1, R359 += 1 };
  s0 -> s4 [32, 32] { R429 += 1, R399 += 1, R359 += 1 };
  s0 -> s1 [33, 65535] { R429 += 1, R399 += 1, R359 += 1 };
  s1 -> s7 [0, 65535] { R429 += 1, R399 += 1 };
  s1 -> s6 [0, 65535] { R429 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R429 += 1, R399 += 1, R359 += 1 };
  s2 -> s1 [0, 8] { R429 += 1, R399 += 1, R359 += 1 };
  s2 -> s6 [0, 65535] { R429 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R429 += 1, R399 += 1, R358 += 1, R359 += 1 };
  s2 -> s4 [9, 13] { R429 += 1, R399 += 1, R359 += 1 };
  s2 -> s1 [14, 31] { R429 += 1, R399 += 1, R359 += 1 };
  s2 -> s4 [32, 32] { R429 += 1, R399 += 1, R359 += 1 };
  s2 -> s1 [33, 65535] { R429 += 1, R399 += 1, R359 += 1 };
  s3 -> s1 [0, 8] { R429 += 1, R399 += 1, R359 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R429 += 1, R399 += 1, R358 += 1, R359 += 1 };
  s3 -> s3 [0, 65535] { R429 += 1, R398 += 1, R399 += 1 };
  s3 -> s4 [9, 13] { R429 += 1, R399 += 1, R359 += 1 };
  s3 -> s1 [14, 31] { R429 += 1, R399 += 1, R359 += 1 };
  s3 -> s4 [32, 32] { R429 += 1, R399 += 1, R359 += 1 };
  s3 -> s1 [33, 65535] { R429 += 1, R399 += 1, R359 += 1 };
  s4 -> s1 [0, 65535] { R429 += 1, R399 += 1, R359 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R429 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R429 += 1, R399 += 1 };
  s7 -> s6 [0, 65535] { R429 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R431 += 1, R401 += 1, R361 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R431 += 1, R400 += 1, R401 += 1 };
  s0 -> s3 [0, 65535] { R431 += 1, R401 += 1, R360 += 1, R361 += 1 };
  s0 -> s0 [0, 65535] { R430 += 1, R431 += 1 };
  s1 -> s4 [0, 65535] { R431 += 1 };
  s1 -> s6 [0, 65535] { R431 += 1, R401 += 1 };
  s1 -> s1 [0, 65535] { R431 += 1, R401 += 1, R361 += 1, R9 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R431 += 1, R401 += 1, R361 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R431 += 1, R400 += 1, R401 += 1 };
  s2 -> s3 [0, 65535] { R431 += 1, R401 += 1, R360 += 1, R361 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R431 += 1 };
  s3 -> s1 [0, 65535] { R431 += 1, R401 += 1, R361 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R431 += 1, R401 += 1, R360 += 1, R361 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R431 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R431 += 1 };
  s6 -> s6 [0, 65535] { R431 += 1, R401 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R433 += 1, R403 += 1, R363 += 1 };
  s0 -> s2 [0, 65535] { R433 += 1, R403 += 1, R362 += 1, R363 += 1 };
  s0 -> s0 [0, 65535] { R432 += 1, R433 += 1 };
  s0 -> s3 [0, 65535] { R433 += 1, R402 += 1, R403 += 1 };
  s0 -> s4 [9, 13] { R433 += 1, R403 += 1, R363 += 1 };
  s0 -> s1 [14, 31] { R433 += 1, R403 += 1, R363 += 1 };
  s0 -> s4 [32, 32] { R433 += 1, R403 += 1, R363 += 1 };
  s0 -> s1 [33, 65535] { R433 += 1, R403 += 1, R363 += 1 };
  s1 -> s7 [0, 65535] { R433 += 1, R403 += 1 };
  s1 -> s1 [0, 65535] { R433 += 1, R403 += 1, R363 += 1 };
  s1 -> s6 [0, 65535] { R433 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R433 += 1, R403 += 1, R363 += 1 };
  s2 -> s2 [0, 65535] { R433 += 1, R403 += 1, R362 += 1, R363 += 1 };
  s2 -> s6 [0, 65535] { R433 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R433 += 1, R403 += 1, R363 += 1 };
  s2 -> s1 [14, 31] { R433 += 1, R403 += 1, R363 += 1 };
  s2 -> s4 [32, 32] { R433 += 1, R403 += 1, R363 += 1 };
  s2 -> s1 [33, 65535] { R433 += 1, R403 += 1, R363 += 1 };
  s3 -> s1 [0, 8] { R433 += 1, R403 += 1, R363 += 1 };
  s3 -> s2 [0, 65535] { R433 += 1, R403 += 1, R362 += 1, R363 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R433 += 1, R402 += 1, R403 += 1 };
  s3 -> s4 [9, 13] { R433 += 1, R403 += 1, R363 += 1 };
  s3 -> s1 [14, 31] { R433 += 1, R403 += 1, R363 += 1 };
  s3 -> s4 [32, 32] { R433 += 1, R403 += 1, R363 += 1 };
  s3 -> s1 [33, 65535] { R433 += 1, R403 += 1, R363 += 1 };
  s4 -> s1 [0, 65535] { R433 += 1, R403 += 1, R363 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R433 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R433 += 1, R403 += 1 };
  s7 -> s6 [0, 65535] { R433 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R435 += 1, R405 += 1, R364 += 1, R365 += 1 };
  s0 -> s0 [0, 65535] { R434 += 1, R435 += 1 };
  s0 -> s2 [0, 65535] { R435 += 1, R404 += 1, R405 += 1 };
  s0 -> s3 [0, 65535] { R435 += 1, R405 += 1, R365 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R435 += 1, R405 += 1, R364 += 1, R365 += 1 };
  s1 -> s4 [0, 65535] { R435 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R435 += 1, R405 += 1, R365 += 1, R10 += 1 };
  s2 -> s1 [0, 65535] { R435 += 1, R405 += 1, R364 += 1, R365 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R435 += 1, R404 += 1, R405 += 1 };
  s2 -> s3 [0, 65535] { R435 += 1, R405 += 1, R365 += 1, R10 += 1 };
  s3 -> s4 [0, 65535] { R435 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R435 += 1, R405 += 1 };
  s3 -> s3 [0, 65535] { R435 += 1, R405 += 1, R365 += 1, R10 += 1 };
  s4 -> s4 [0, 65535] { R435 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R435 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R435 += 1, R405 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 66] { R437 += 1, R407 += 1, R371 += 1 };
  s0 -> s0 [0, 65535] { R436 += 1, R437 += 1 };
  s0 -> s2 [0, 65535] { R437 += 1, R406 += 1, R407 += 1 };
  s0 -> s3 [0, 65535] { R437 += 1, R407 += 1, R370 += 1, R371 += 1 };
  s0 -> s1 [68, 65535] { R437 += 1, R407 += 1, R371 += 1 };
  s1 -> s1 [0, 66] { R437 += 1, R407 += 1, R371 += 1 };
  s1 -> s1 [0, 65535] { R437 += 1, R407 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R437 += 1 };
  s1 -> s1 [68, 65535] { R437 += 1, R407 += 1, R371 += 1 };
  s2 -> s1 [0, 66] { R437 += 1, R407 += 1, R371 += 1 };
  s2 -> s2 [0, 65535] { R437 += 1, R406 += 1, R407 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R437 += 1, R407 += 1, R370 += 1, R371 += 1 };
  s2 -> s1 [68, 65535] { R437 += 1, R407 += 1, R371 += 1 };
  s3 -> s1 [0, 66] { R437 += 1, R407 += 1, R371 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R437 += 1 };
  s3 -> s3 [0, 65535] { R437 += 1, R407 += 1, R370 += 1, R371 += 1 };
  s3 -> s1 [68, 65535] { R437 += 1, R407 += 1, R371 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R437 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R439 += 1, R408 += 1, R409 += 1 };
  s0 -> s2 [0, 65535] { R439 += 1, R409 += 1, R373 += 1, R340 += 1 };
  s0 -> s3 [0, 65535] { R439 += 1, R409 += 1, R372 += 1, R373 += 1 };
  s0 -> s0 [0, 65535] { R438 += 1, R439 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R439 += 1, R408 += 1, R409 += 1 };
  s1 -> s2 [0, 65535] { R439 += 1, R409 += 1, R373 += 1, R340 += 1 };
  s1 -> s3 [0, 65535] { R439 += 1, R409 += 1, R372 += 1, R373 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R439 += 1, R409 += 1, R373 += 1, R340 += 1 };
  s2 -> s6 [0, 65535] { R439 += 1, R409 += 1 };
  s2 -> s5 [0, 65535] { R439 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R439 += 1, R409 += 1, R373 += 1, R340 += 1 };
  s3 -> s3 [0, 65535] { R439 += 1, R409 += 1, R372 += 1, R373 += 1 };
  s3 -> s5 [0, 65535] { R439 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R439 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R439 += 1, R409 += 1 };
  s6 -> s5 [0, 65535] { R439 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 67] { R441 += 1, R411 += 1, R375 += 1 };
  s0 -> s0 [0, 65535] { R440 += 1, R441 += 1 };
  s0 -> s2 [0, 65535] { R441 += 1, R411 += 1, R374 += 1, R375 += 1 };
  s0 -> s3 [0, 65535] { R441 += 1, R410 += 1, R411 += 1 };
  s0 -> s1 [91, 65535] { R441 += 1, R411 += 1, R375 += 1 };
  s1 -> s1 [0, 67] { R441 += 1, R411 += 1, R375 += 1 };
  s1 -> s5 [0, 65535] { R441 += 1 };
  s1 -> s1 [0, 65535] { R441 += 1, R411 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [91, 65535] { R441 += 1, R411 += 1, R375 += 1 };
  s2 -> s1 [0, 67] { R441 += 1, R411 += 1, R375 += 1 };
  s2 -> s5 [0, 65535] { R441 += 1 };
  s2 -> s2 [0, 65535] { R441 += 1, R411 += 1, R374 += 1, R375 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R441 += 1, R411 += 1, R375 += 1 };
  s3 -> s1 [0, 67] { R441 += 1, R411 += 1, R375 += 1 };
  s3 -> s2 [0, 65535] { R441 += 1, R411 += 1, R374 += 1, R375 += 1 };
  s3 -> s3 [0, 65535] { R441 += 1, R410 += 1, R411 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [91, 65535] { R441 += 1, R411 += 1, R375 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R441 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R443 += 1, R412 += 1, R413 += 1 };
  s0 -> s2 [0, 65535] { R443 += 1, R413 += 1, R389 += 1, R341 += 1 };
  s0 -> s0 [0, 65535] { R442 += 1, R443 += 1 };
  s0 -> s3 [0, 65535] { R443 += 1, R413 += 1, R388 += 1, R389 += 1 };
  s1 -> s1 [0, 65535] { R443 += 1, R412 += 1, R413 += 1 };
  s1 -> s2 [0, 65535] { R443 += 1, R413 += 1, R389 += 1, R341 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R443 += 1, R413 += 1, R388 += 1, R389 += 1 };
  s2 -> s6 [0, 65535] { R443 += 1, R413 += 1 };
  s2 -> s2 [0, 65535] { R443 += 1, R413 += 1, R389 += 1, R341 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R443 += 1 };
  s3 -> s2 [0, 65535] { R443 += 1, R413 += 1, R389 += 1, R341 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R443 += 1, R413 += 1, R388 += 1, R389 += 1 };
  s3 -> s5 [0, 65535] { R443 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R443 += 1 };
  s6 -> s6 [0, 65535] { R443 += 1, R413 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R443 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 66] { R445 += 1, R415 += 1, R391 += 1 };
  s0 -> s0 [0, 65535] { R444 += 1, R445 += 1 };
  s0 -> s2 [0, 65535] { R445 += 1, R414 += 1, R415 += 1 };
  s0 -> s3 [0, 65535] { R445 += 1, R415 += 1, R390 += 1, R391 += 1 };
  s0 -> s4 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s0 -> s5 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s0 -> s1 [91, 65535] { R445 += 1, R415 += 1, R391 += 1 };
  s1 -> s1 [0, 66] { R445 += 1, R415 += 1, R391 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R445 += 1, R415 += 1 };
  s1 -> s7 [0, 65535] { R445 += 1 };
  s1 -> s4 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s1 -> s5 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s1 -> s1 [91, 65535] { R445 += 1, R415 += 1, R391 += 1 };
  s2 -> s1 [0, 66] { R445 += 1, R415 += 1, R391 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R445 += 1, R414 += 1, R415 += 1 };
  s2 -> s3 [0, 65535] { R445 += 1, R415 += 1, R390 += 1, R391 += 1 };
  s2 -> s4 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s2 -> s5 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s2 -> s1 [91, 65535] { R445 += 1, R415 += 1, R391 += 1 };
  s3 -> s1 [0, 66] { R445 += 1, R415 += 1, R391 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R445 += 1, R415 += 1, R390 += 1, R391 += 1 };
  s3 -> s7 [0, 65535] { R445 += 1 };
  s3 -> s4 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s3 -> s5 [67, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s3 -> s1 [91, 65535] { R445 += 1, R415 += 1, R391 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R445 += 1, R415 += 1 };
  s4 -> s7 [0, 65535] { R445 += 1 };
  s5 -> s5 [0, 67] { R445 += 1, R415 += 1, R391 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R445 += 1, R415 += 1 };
  s5 -> s7 [0, 65535] { R445 += 1 };
  s5 -> s5 [91, 65535] { R445 += 1, R415 += 1, R391 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R445 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R351 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s2 [9, 13] { R351 += 1 };
  s0 -> s1 [14, 31] { R351 += 1 };
  s0 -> s2 [32, 32] { R351 += 1 };
  s0 -> s1 [33, 65535] { R351 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R351 += 1 };
  s2 -> s1 [0, 65535] { R351 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s1 [0, 65535] { R353 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R353 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R355 += 1 };
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s2 [9, 13] { R355 += 1 };
  s0 -> s1 [14, 31] { R355 += 1 };
  s0 -> s2 [32, 32] { R355 += 1 };
  s0 -> s1 [33, 65535] { R355 += 1 };
  s1 -> s1 [0, 65535] { R355 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R355 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R357 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s1 -> s1 [0, 65535] { R357 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R361 && R3 = R415 && R4 = R387 && R14 = 0 && R232 = 0 && R233 = R445 && R358 - R361 = -1 && R359 = R361 && R360 - R361 = -1 && R362 = 0 && R363 = 1 && R364 = 0 && R365 = 1 && R366 = 0 && R367 = 1 && R368 = 0 && R369 = 1 && R376 - R445 = 1 && R377 = R387 && R378 - R445 = 1 && R379 = R387 && R380 - R445 = 1 && R381 = R387 && R382 - R445 = 1 && R383 = R387 && R384 - R445 = 1 && R385 = R387 && R386 - R445 = 1 && R392 = 1 && R393 = R415 && R394 = 1 && R395 = R415 && R396 = 1 && R397 = R415 && R398 = 1 && R399 = R415 && R400 = 1 && R401 = R415 && R402 = 1 && R403 = R415 && R404 = 1 && R405 = R415 && R406 = 1 && R407 = R415 && R408 = 1 && R409 = R415 && R410 = 1 && R411 = R415 && R412 = 1 && R413 = R415 && R414 = 1 && R416 = 0 && R417 = R445 && R418 = 0 && R419 = R445 && R420 = 0 && R421 = R445 && R422 = 0 && R423 = R445 && R424 = 0 && R425 = R445 && R426 = 0 && R427 = R445 && R428 = 0 && R429 = R445 && R430 = 0 && R431 = R445 && R432 = 0 && R433 = R445 && R434 = 0 && R435 = R445 && R436 = 0 && R437 = R445 && R438 = 0 && R439 = R445 && R440 = 0 && R441 = R445 && R442 = 0 && R443 = R445 && R444 = 0 && R0 != 0 && R1 != 0 && R12 < 1 && R15 < R361 && -2 < R15 && 0 < R361 && R445 < R387 && 0 < R415 && -1 < R445 && (R5 != 0 || ((R0 != R343 || R342 - R343 = -1 || R343 < 0) && (R0 = R343 || R0 < 1))) && (R5 != 0 || ((R0 != R345 || R344 - R345 = -1 || R345 < 0) && (R0 = R345 || R0 < 1))) && (R7 != 0 || ((R1 != R351 || R350 - R351 = -1 || R351 < 0) && (R1 = R351 || R1 < 1))) && (R7 != 0 || ((R1 != R353 || R352 - R353 = -1 || R353 < 0) && (R1 = R353 || R1 < 1))) && (R341 != 0 || ((R388 != 0 || R15 - R389 = -1 || R15 < 0) && (R388 = 0 || R15 < 0))) && (R341 != 0 || ((R390 != 0 || R15 - R391 = -1 || R15 < 0) && (R390 = 0 || R15 < 0))) && (R346 != 0 || ((R6 != 0 || ((R0 != R347 || R347 = 1 || R347 < 0) && (R0 = R347 || R347 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R347 || R347 = 1 || R347 < 0) && (R347 != 1 || -1 < R0) && (R0 = R347 || R347 = 1))))) && (R348 != 0 || ((R6 != 0 || ((R0 != R349 || R349 = 1 || R349 < 0) && (R0 = R349 || R349 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R349 || R349 = 1 || R349 < 0) && (R349 != 1 || -1 < R0) && (R0 = R349 || R349 = 1))))) && (R354 != 0 || ((R8 != 0 || ((R1 != R355 || R355 = 1 || R355 < 0) && (R1 = R355 || R355 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R355 || R355 = 1 || R355 < 0) && (R355 != 1 || -1 < R1) && (R1 = R355 || R355 = 1))))) && (R356 != 0 || ((R8 != 0 || ((R1 != R357 || R357 = 1 || R357 < 0) && (R1 = R357 || R357 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R357 || R357 = 1 || R357 < 0) && (R357 != 1 || -1 < R1) && (R1 = R357 || R357 = 1))))) && (R361 != R371 || R15 - R370 = -1 || ((R340 != 0 || R371 - R15 < 2) && (R340 = 0 || R371 - R15 < 1 || R371 < 1))) && (R361 != R373 || R15 - R372 = -1 || ((R340 != 0 || R373 - R15 < 2) && (R340 = 0 || R373 - R15 < 1 || R373 < 1))) && (R361 != R375 || R15 - R374 = -1 || ((R340 != 0 || R375 - R15 < 2) && (R340 = 0 || R375 - R15 < 1 || R375 < 1))) && (R5 = 0 || (R0 = R343 && R342 - R343 = -1)) && (R5 = 0 || (R0 = R345 && R344 - R345 = -1)) && (R7 = 0 || (R1 = R351 && R350 - R351 = -1)) && (R7 = 0 || (R1 = R353 && R352 - R353 = -1)) && (R341 = 0 || (R15 - R389 = -1 && R388 = 0)) && (R341 = 0 || (R15 - R391 = -1 && R390 = 0)) && (R346 = 0 || (R6 = 0 && R0 < 0)) && (R348 = 0 || (R6 = 0 && R0 < 0)) && (R354 = 0 || (R8 = 0 && R1 < 0)) && (R356 = 0 || (R8 = 0 && R1 < 0)) && (R361 = R371 || (R15 - R361 = -1 && R340 = 0)) && (R361 = R373 || (R15 - R361 = -1 && R340 = 0)) && (R361 = R375 || (R15 - R361 = -1 && R340 = 0));
// End of Parikh automata intersection problem
