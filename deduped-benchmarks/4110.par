// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R17, R18, R2, R275, R276, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [69, 69];
  s0 -> s0 [70, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [69, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R275 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 68];
  s0 -> s0 [0, 65535] { R276 += 1 };
  s0 -> s2 [69, 69];
  s0 -> s1 [70, 65535];
  s1 -> s1 [0, 68];
  s1 -> s2 [69, 69];
  s1 -> s1 [70, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R308 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s2 [9, 13] { R308 += 1 };
  s0 -> s1 [14, 31] { R308 += 1 };
  s0 -> s2 [32, 32] { R308 += 1 };
  s0 -> s1 [33, 65535] { R308 += 1 };
  s1 -> s1 [0, 65535] { R308 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R308 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s1 [0, 65535] { R310 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R310 += 1, R11 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R312 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s2 [9, 13] { R312 += 1 };
  s0 -> s1 [14, 31] { R312 += 1 };
  s0 -> s2 [32, 32] { R312 += 1 };
  s0 -> s1 [33, 65535] { R312 += 1 };
  s1 -> s1 [0, 65535] { R312 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R312 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s1 [0, 65535] { R314 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R314 += 1, R12 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 68] { R334 += 1 };
  s0 -> s0 [0, 65535] { R333 += 1, R334 += 1 };
  s0 -> s1 [70, 65535] { R334 += 1 };
  s1 -> s1 [0, 68] { R334 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [70, 65535] { R334 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R335 += 1, R336 += 1 };
  s0 -> s1 [0, 65535] { R336 += 1, R281 += 1 };
  s1 -> s1 [0, 65535] { R336 += 1, R281 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 69] { R338 += 1 };
  s0 -> s0 [0, 65535] { R337 += 1, R338 += 1 };
  s0 -> s1 [91, 65535] { R338 += 1 };
  s1 -> s1 [0, 69] { R338 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R338 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s0 -> s1 [0, 65535] { R344 += 1, R282 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R344 += 1, R282 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R346 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s2 [69, 69] { R346 += 1 };
  s0 -> s3 [69, 69] { R346 += 1 };
  s0 -> s1 [91, 65535] { R346 += 1 };
  s1 -> s1 [0, 68] { R346 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [69, 69] { R346 += 1 };
  s1 -> s3 [69, 69] { R346 += 1 };
  s1 -> s1 [91, 65535] { R346 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 69] { R346 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R346 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P29
automaton P29_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R322 += 1 };
  s0 -> s0 [0, 65535] { R321 += 1, R322 += 1 };
  s0 -> s2 [75, 75] { R322 += 1 };
  s0 -> s1 [76, 65535] { R322 += 1 };
  s1 -> s1 [0, 64] { R322 += 1 };
  s1 -> s2 [75, 75] { R322 += 1 };
  s1 -> s1 [76, 65535] { R322 += 1 };
  s2 -> s2 [0, 64] { R322 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R322 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R324 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R323 += 1, R324 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R324 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R326 += 1, R284 += 1 };
  s0 -> s2 [0, 65535] { R326 += 1, R283 += 1, R284 += 1 };
  s0 -> s0 [0, 65535] { R325 += 1, R326 += 1 };
  s0 -> s3 [9, 13] { R326 += 1, R284 += 1 };
  s0 -> s1 [14, 31] { R326 += 1, R284 += 1 };
  s0 -> s3 [32, 32] { R326 += 1, R284 += 1 };
  s0 -> s1 [33, 65535] { R326 += 1, R284 += 1 };
  s1 -> s5 [0, 65535] { R326 += 1 };
  s1 -> s1 [0, 65535] { R326 += 1, R284 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R326 += 1, R284 += 1 };
  s2 -> s2 [0, 65535] { R326 += 1, R283 += 1, R284 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R326 += 1, R284 += 1 };
  s2 -> s1 [14, 31] { R326 += 1, R284 += 1 };
  s2 -> s3 [32, 32] { R326 += 1, R284 += 1 };
  s2 -> s1 [33, 65535] { R326 += 1, R284 += 1 };
  s3 -> s1 [0, 65535] { R326 += 1, R284 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R326 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R328 += 1, R285 += 1, R286 += 1 };
  s0 -> s0 [0, 65535] { R327 += 1, R328 += 1 };
  s0 -> s2 [0, 65535] { R328 += 1, R286 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R328 += 1, R285 += 1, R286 += 1 };
  s1 -> s2 [0, 65535] { R328 += 1, R286 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R328 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R328 += 1, R286 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R328 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R330 += 1, R288 += 1 };
  s0 -> s0 [0, 65535] { R329 += 1, R330 += 1 };
  s0 -> s2 [0, 65535] { R330 += 1, R287 += 1, R288 += 1 };
  s0 -> s3 [9, 13] { R330 += 1, R288 += 1 };
  s0 -> s1 [14, 31] { R330 += 1, R288 += 1 };
  s0 -> s3 [32, 32] { R330 += 1, R288 += 1 };
  s0 -> s1 [33, 65535] { R330 += 1, R288 += 1 };
  s1 -> s1 [0, 65535] { R330 += 1, R288 += 1 };
  s1 -> s5 [0, 65535] { R330 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R330 += 1, R288 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R330 += 1, R287 += 1, R288 += 1 };
  s2 -> s3 [9, 13] { R330 += 1, R288 += 1 };
  s2 -> s1 [14, 31] { R330 += 1, R288 += 1 };
  s2 -> s3 [32, 32] { R330 += 1, R288 += 1 };
  s2 -> s1 [33, 65535] { R330 += 1, R288 += 1 };
  s3 -> s1 [0, 65535] { R330 += 1, R288 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R330 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R332 += 1, R289 += 1, R290 += 1 };
  s0 -> s0 [0, 65535] { R331 += 1, R332 += 1 };
  s0 -> s2 [0, 65535] { R332 += 1, R290 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R332 += 1, R289 += 1, R290 += 1 };
  s1 -> s2 [0, 65535] { R332 += 1, R290 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R332 += 1, R290 += 1, R6 += 1 };
  s2 -> s4 [0, 65535] { R332 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R332 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R372 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s1 -> s1 [0, 65535] { R372 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s0 -> s1 [0, 65535] { R374 += 1, R299 += 1, R300 += 1 };
  s0 -> s2 [12, 12] { R374 += 1, R300 += 1 };
  s1 -> s1 [0, 65535] { R374 += 1, R299 += 1, R300 += 1 };
  s1 -> s2 [12, 12] { R374 += 1, R300 += 1 };
  s2 -> s2 [0, 65535] { R374 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R376 += 1, R302 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R301 += 1, R302 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R376 += 1, R302 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R376 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R376 += 1, R302 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R376 += 1, R301 += 1, R302 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R376 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R378 += 1, R304 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R303 += 1, R304 += 1 };
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s3 [9, 13] { R378 += 1, R304 += 1 };
  s0 -> s1 [14, 31] { R378 += 1, R304 += 1 };
  s0 -> s3 [32, 32] { R378 += 1, R304 += 1 };
  s0 -> s1 [33, 65535] { R378 += 1, R304 += 1 };
  s1 -> s1 [0, 65535] { R378 += 1, R304 += 1 };
  s1 -> s5 [0, 65535] { R378 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R378 += 1, R304 += 1 };
  s2 -> s2 [0, 65535] { R378 += 1, R303 += 1, R304 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R378 += 1, R304 += 1 };
  s2 -> s1 [14, 31] { R378 += 1, R304 += 1 };
  s2 -> s3 [32, 32] { R378 += 1, R304 += 1 };
  s2 -> s1 [33, 65535] { R378 += 1, R304 += 1 };
  s3 -> s1 [0, 65535] { R378 += 1, R304 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R378 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R380 += 1, R305 += 1, R306 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s2 [0, 65535] { R380 += 1, R306 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R380 += 1, R305 += 1, R306 += 1 };
  s1 -> s2 [0, 65535] { R380 += 1, R306 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R380 += 1, R306 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R380 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R380 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 64] { R382 += 1, R348 += 1 };
  s0 -> s2 [0, 65535] { R382 += 1, R347 += 1, R348 += 1 };
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s0 -> s3 [69, 69] { R382 += 1, R348 += 1 };
  s0 -> s1 [70, 65535] { R382 += 1, R348 += 1 };
  s1 -> s1 [0, 64] { R382 += 1, R348 += 1 };
  s1 -> s3 [69, 69] { R382 += 1, R348 += 1 };
  s1 -> s1 [70, 65535] { R382 += 1, R348 += 1 };
  s2 -> s1 [0, 64] { R382 += 1, R348 += 1 };
  s2 -> s2 [0, 65535] { R382 += 1, R347 += 1, R348 += 1 };
  s2 -> s3 [69, 69] { R382 += 1, R348 += 1 };
  s2 -> s1 [70, 65535] { R382 += 1, R348 += 1 };
  s3 -> s3 [0, 64] { R382 += 1, R348 += 1 };
  s3 -> s3 [0, 65535] { R382 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [69, 65535] { R382 += 1, R348 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s1 [0, 65535] { R384 += 1, R349 += 1, R350 += 1 };
  s0 -> s2 [0, 65535] { R384 += 1, R350 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R384 += 1, R349 += 1, R350 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R384 += 1, R350 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R384 += 1 };
  s2 -> s2 [0, 65535] { R384 += 1, R350 += 1, R1 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R384 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 68] { R386 += 1, R352 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s0 -> s2 [0, 65535] { R386 += 1, R351 += 1, R352 += 1 };
  s0 -> s3 [0, 65535] { R386 += 1, R352 += 1, R13 += 1 };
  s0 -> s4 [69, 69] { R386 += 1, R352 += 1 };
  s0 -> s1 [70, 65535] { R386 += 1, R352 += 1 };
  s1 -> s1 [0, 68] { R386 += 1, R352 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R386 += 1 };
  s1 -> s4 [69, 69] { R386 += 1, R352 += 1 };
  s1 -> s1 [70, 65535] { R386 += 1, R352 += 1 };
  s2 -> s1 [0, 68] { R386 += 1, R352 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R386 += 1, R351 += 1, R352 += 1 };
  s2 -> s3 [0, 65535] { R386 += 1, R352 += 1, R13 += 1 };
  s2 -> s4 [69, 69] { R386 += 1, R352 += 1 };
  s2 -> s1 [70, 65535] { R386 += 1, R352 += 1 };
  s3 -> s1 [0, 68] { R386 += 1, R352 += 1 };
  s3 -> s5 [0, 65535] { R386 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R386 += 1, R352 += 1, R13 += 1 };
  s3 -> s4 [69, 69] { R386 += 1, R352 += 1 };
  s3 -> s1 [70, 65535] { R386 += 1, R352 += 1 };
  s4 -> s4 [0, 65535] { R386 += 1, R352 += 1 };
  s5 -> s5 [0, 65535] { R386 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R388 += 1, R354 += 1, R292 += 1 };
  s0 -> s0 [0, 65535] { R387 += 1, R388 += 1 };
  s0 -> s2 [0, 65535] { R388 += 1, R354 += 1, R291 += 1, R292 += 1 };
  s0 -> s3 [0, 65535] { R388 += 1, R353 += 1, R354 += 1 };
  s0 -> s4 [9, 13] { R388 += 1, R354 += 1, R292 += 1 };
  s0 -> s1 [14, 31] { R388 += 1, R354 += 1, R292 += 1 };
  s0 -> s4 [32, 32] { R388 += 1, R354 += 1, R292 += 1 };
  s0 -> s1 [33, 65535] { R388 += 1, R354 += 1, R292 += 1 };
  s1 -> s7 [0, 65535] { R388 += 1, R354 += 1 };
  s1 -> s6 [0, 65535] { R388 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R388 += 1, R354 += 1, R292 += 1 };
  s2 -> s1 [0, 8] { R388 += 1, R354 += 1, R292 += 1 };
  s2 -> s2 [0, 65535] { R388 += 1, R354 += 1, R291 += 1, R292 += 1 };
  s2 -> s6 [0, 65535] { R388 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R388 += 1, R354 += 1, R292 += 1 };
  s2 -> s1 [14, 31] { R388 += 1, R354 += 1, R292 += 1 };
  s2 -> s4 [32, 32] { R388 += 1, R354 += 1, R292 += 1 };
  s2 -> s1 [33, 65535] { R388 += 1, R354 += 1, R292 += 1 };
  s3 -> s1 [0, 8] { R388 += 1, R354 += 1, R292 += 1 };
  s3 -> s2 [0, 65535] { R388 += 1, R354 += 1, R291 += 1, R292 += 1 };
  s3 -> s3 [0, 65535] { R388 += 1, R353 += 1, R354 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R388 += 1, R354 += 1, R292 += 1 };
  s3 -> s1 [14, 31] { R388 += 1, R354 += 1, R292 += 1 };
  s3 -> s4 [32, 32] { R388 += 1, R354 += 1, R292 += 1 };
  s3 -> s1 [33, 65535] { R388 += 1, R354 += 1, R292 += 1 };
  s4 -> s1 [0, 65535] { R388 += 1, R354 += 1, R292 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R388 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R388 += 1, R354 += 1 };
  s7 -> s6 [0, 65535] { R388 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R390 += 1, R355 += 1, R356 += 1 };
  s0 -> s0 [0, 65535] { R389 += 1, R390 += 1 };
  s0 -> s2 [0, 65535] { R390 += 1, R356 += 1, R294 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R390 += 1, R356 += 1, R293 += 1, R294 += 1 };
  s1 -> s1 [0, 65535] { R390 += 1, R355 += 1, R356 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R390 += 1, R356 += 1, R294 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R390 += 1, R356 += 1, R293 += 1, R294 += 1 };
  s2 -> s6 [0, 65535] { R390 += 1, R356 += 1 };
  s2 -> s4 [0, 65535] { R390 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R390 += 1, R356 += 1, R294 += 1, R7 += 1 };
  s3 -> s4 [0, 65535] { R390 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R390 += 1, R356 += 1, R294 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R390 += 1, R356 += 1, R293 += 1, R294 += 1 };
  s4 -> s4 [0, 65535] { R390 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R390 += 1, R356 += 1 };
  s6 -> s4 [0, 65535] { R390 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R392 += 1, R358 += 1, R296 += 1 };
  s0 -> s2 [0, 65535] { R392 += 1, R357 += 1, R358 += 1 };
  s0 -> s0 [0, 65535] { R391 += 1, R392 += 1 };
  s0 -> s3 [0, 65535] { R392 += 1, R358 += 1, R295 += 1, R296 += 1 };
  s0 -> s4 [9, 13] { R392 += 1, R358 += 1, R296 += 1 };
  s0 -> s1 [14, 31] { R392 += 1, R358 += 1, R296 += 1 };
  s0 -> s4 [32, 32] { R392 += 1, R358 += 1, R296 += 1 };
  s0 -> s1 [33, 65535] { R392 += 1, R358 += 1, R296 += 1 };
  s1 -> s5 [0, 65535] { R392 += 1 };
  s1 -> s1 [0, 65535] { R392 += 1, R358 += 1, R296 += 1 };
  s1 -> s7 [0, 65535] { R392 += 1, R358 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R392 += 1, R358 += 1, R296 += 1 };
  s2 -> s2 [0, 65535] { R392 += 1, R357 += 1, R358 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R392 += 1, R358 += 1, R295 += 1, R296 += 1 };
  s2 -> s4 [9, 13] { R392 += 1, R358 += 1, R296 += 1 };
  s2 -> s1 [14, 31] { R392 += 1, R358 += 1, R296 += 1 };
  s2 -> s4 [32, 32] { R392 += 1, R358 += 1, R296 += 1 };
  s2 -> s1 [33, 65535] { R392 += 1, R358 += 1, R296 += 1 };
  s3 -> s1 [0, 8] { R392 += 1, R358 += 1, R296 += 1 };
  s3 -> s5 [0, 65535] { R392 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R392 += 1, R358 += 1, R295 += 1, R296 += 1 };
  s3 -> s4 [9, 13] { R392 += 1, R358 += 1, R296 += 1 };
  s3 -> s1 [14, 31] { R392 += 1, R358 += 1, R296 += 1 };
  s3 -> s4 [32, 32] { R392 += 1, R358 += 1, R296 += 1 };
  s3 -> s1 [33, 65535] { R392 += 1, R358 += 1, R296 += 1 };
  s4 -> s1 [0, 65535] { R392 += 1, R358 += 1, R296 += 1 };
  s5 -> s5 [0, 65535] { R392 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R392 += 1 };
  s7 -> s7 [0, 65535] { R392 += 1, R358 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s0 [0, 65535] { R393 += 1, R394 += 1 };
  s0 -> s1 [0, 65535] { R394 += 1, R360 += 1, R297 += 1, R298 += 1 };
  s0 -> s2 [0, 65535] { R394 += 1, R359 += 1, R360 += 1 };
  s0 -> s3 [0, 65535] { R394 += 1, R360 += 1, R298 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R394 += 1, R360 += 1, R297 += 1, R298 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R394 += 1 };
  s1 -> s3 [0, 65535] { R394 += 1, R360 += 1, R298 += 1, R8 += 1 };
  s2 -> s1 [0, 65535] { R394 += 1, R360 += 1, R297 += 1, R298 += 1 };
  s2 -> s2 [0, 65535] { R394 += 1, R359 += 1, R360 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R394 += 1, R360 += 1, R298 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R394 += 1, R360 += 1, R298 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R394 += 1 };
  s3 -> s6 [0, 65535] { R394 += 1, R360 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R394 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R394 += 1 };
  s6 -> s6 [0, 65535] { R394 += 1, R360 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 68] { R396 += 1, R362 += 1, R316 += 1 };
  s0 -> s2 [0, 65535] { R396 += 1, R362 += 1, R315 += 1, R316 += 1 };
  s0 -> s0 [0, 65535] { R395 += 1, R396 += 1 };
  s0 -> s3 [0, 65535] { R396 += 1, R361 += 1, R362 += 1 };
  s0 -> s1 [70, 65535] { R396 += 1, R362 += 1, R316 += 1 };
  s1 -> s1 [0, 68] { R396 += 1, R362 += 1, R316 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R396 += 1, R362 += 1 };
  s1 -> s5 [0, 65535] { R396 += 1 };
  s1 -> s1 [70, 65535] { R396 += 1, R362 += 1, R316 += 1 };
  s2 -> s1 [0, 68] { R396 += 1, R362 += 1, R316 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R396 += 1, R362 += 1, R315 += 1, R316 += 1 };
  s2 -> s5 [0, 65535] { R396 += 1 };
  s2 -> s1 [70, 65535] { R396 += 1, R362 += 1, R316 += 1 };
  s3 -> s1 [0, 68] { R396 += 1, R362 += 1, R316 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R396 += 1, R362 += 1, R315 += 1, R316 += 1 };
  s3 -> s3 [0, 65535] { R396 += 1, R361 += 1, R362 += 1 };
  s3 -> s1 [70, 65535] { R396 += 1, R362 += 1, R316 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R396 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R397 += 1, R398 += 1 };
  s0 -> s1 [0, 65535] { R398 += 1, R363 += 1, R364 += 1 };
  s0 -> s2 [0, 65535] { R398 += 1, R364 += 1, R317 += 1, R318 += 1 };
  s0 -> s3 [0, 65535] { R398 += 1, R364 += 1, R318 += 1, R279 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R398 += 1, R363 += 1, R364 += 1 };
  s1 -> s2 [0, 65535] { R398 += 1, R364 += 1, R317 += 1, R318 += 1 };
  s1 -> s3 [0, 65535] { R398 += 1, R364 += 1, R318 += 1, R279 += 1 };
  s2 -> s4 [0, 65535] { R398 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R398 += 1, R364 += 1, R317 += 1, R318 += 1 };
  s2 -> s3 [0, 65535] { R398 += 1, R364 += 1, R318 += 1, R279 += 1 };
  s3 -> s4 [0, 65535] { R398 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R398 += 1, R364 += 1 };
  s3 -> s3 [0, 65535] { R398 += 1, R364 += 1, R318 += 1, R279 += 1 };
  s4 -> s4 [0, 65535] { R398 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R398 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R398 += 1, R364 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 69] { R400 += 1, R366 += 1, R320 += 1 };
  s0 -> s0 [0, 65535] { R399 += 1, R400 += 1 };
  s0 -> s2 [0, 65535] { R400 += 1, R366 += 1, R319 += 1, R320 += 1 };
  s0 -> s3 [0, 65535] { R400 += 1, R365 += 1, R366 += 1 };
  s0 -> s1 [91, 65535] { R400 += 1, R366 += 1, R320 += 1 };
  s1 -> s1 [0, 69] { R400 += 1, R366 += 1, R320 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R400 += 1, R366 += 1 };
  s1 -> s5 [0, 65535] { R400 += 1 };
  s1 -> s1 [91, 65535] { R400 += 1, R366 += 1, R320 += 1 };
  s2 -> s1 [0, 69] { R400 += 1, R366 += 1, R320 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R400 += 1, R366 += 1, R319 += 1, R320 += 1 };
  s2 -> s5 [0, 65535] { R400 += 1 };
  s2 -> s1 [91, 65535] { R400 += 1, R366 += 1, R320 += 1 };
  s3 -> s1 [0, 69] { R400 += 1, R366 += 1, R320 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R400 += 1, R366 += 1, R319 += 1, R320 += 1 };
  s3 -> s3 [0, 65535] { R400 += 1, R365 += 1, R366 += 1 };
  s3 -> s1 [91, 65535] { R400 += 1, R366 += 1, R320 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R400 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_24 {
  init s0;
  s0 -> s1 [0, 65535] { R402 += 1, R367 += 1, R368 += 1 };
  s0 -> s2 [0, 65535] { R402 += 1, R368 += 1, R340 += 1, R280 += 1 };
  s0 -> s0 [0, 65535] { R401 += 1, R402 += 1 };
  s0 -> s3 [0, 65535] { R402 += 1, R368 += 1, R339 += 1, R340 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R402 += 1, R367 += 1, R368 += 1 };
  s1 -> s2 [0, 65535] { R402 += 1, R368 += 1, R340 += 1, R280 += 1 };
  s1 -> s3 [0, 65535] { R402 += 1, R368 += 1, R339 += 1, R340 += 1 };
  s2 -> s4 [0, 65535] { R402 += 1 };
  s2 -> s6 [0, 65535] { R402 += 1, R368 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R402 += 1, R368 += 1, R340 += 1, R280 += 1 };
  s3 -> s4 [0, 65535] { R402 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R402 += 1, R368 += 1, R340 += 1, R280 += 1 };
  s3 -> s3 [0, 65535] { R402 += 1, R368 += 1, R339 += 1, R340 += 1 };
  s4 -> s4 [0, 65535] { R402 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R402 += 1 };
  s6 -> s6 [0, 65535] { R402 += 1, R368 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 68] { R404 += 1, R370 += 1, R342 += 1 };
  s0 -> s2 [0, 65535] { R404 += 1, R370 += 1, R341 += 1, R342 += 1 };
  s0 -> s0 [0, 65535] { R403 += 1, R404 += 1 };
  s0 -> s3 [0, 65535] { R404 += 1, R369 += 1, R370 += 1 };
  s0 -> s4 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s0 -> s5 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s0 -> s1 [91, 65535] { R404 += 1, R370 += 1, R342 += 1 };
  s1 -> s1 [0, 68] { R404 += 1, R370 += 1, R342 += 1 };
  s1 -> s1 [0, 65535] { R404 += 1, R370 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R404 += 1 };
  s1 -> s4 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s1 -> s5 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s1 -> s1 [91, 65535] { R404 += 1, R370 += 1, R342 += 1 };
  s2 -> s1 [0, 68] { R404 += 1, R370 += 1, R342 += 1 };
  s2 -> s2 [0, 65535] { R404 += 1, R370 += 1, R341 += 1, R342 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R404 += 1 };
  s2 -> s4 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s2 -> s5 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s2 -> s1 [91, 65535] { R404 += 1, R370 += 1, R342 += 1 };
  s3 -> s1 [0, 68] { R404 += 1, R370 += 1, R342 += 1 };
  s3 -> s2 [0, 65535] { R404 += 1, R370 += 1, R341 += 1, R342 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R404 += 1, R369 += 1, R370 += 1 };
  s3 -> s4 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s3 -> s5 [69, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s3 -> s1 [91, 65535] { R404 += 1, R370 += 1, R342 += 1 };
  s4 -> s4 [0, 69] { R404 += 1, R370 += 1, R342 += 1 };
  s4 -> s4 [0, 65535] { R404 += 1, R370 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R404 += 1 };
  s4 -> s4 [91, 65535] { R404 += 1, R370 += 1, R342 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R404 += 1, R370 += 1 };
  s5 -> s7 [0, 65535] { R404 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R404 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R320 && R2 - R370 = 1 && R3 = R332 && R4 = R338 && R17 = 0 && R18 = R404 && R291 - R320 = -1 && R292 = R320 && R293 - R320 = -1 && R294 = R320 && R295 = 0 && R296 = 1 && R297 = 0 && R298 = 1 && R299 = R370 && R300 - R370 = 1 && R301 = R370 && R302 - R370 = 1 && R303 = 0 && R304 = 1 && R305 = 0 && R306 = 1 && R307 - R338 = -1 && R308 = R338 && R309 - R338 = -1 && R310 = R338 && R311 = 0 && R312 = 1 && R313 = 0 && R314 = 1 && R315 = 0 && R316 = R320 && R317 = 0 && R318 = R320 && R319 = 0 && R321 - R404 = 1 && R322 = R332 && R323 - R404 = 1 && R324 = R332 && R325 - R404 = 1 && R326 = R332 && R327 - R404 = 1 && R328 = R332 && R329 - R404 = 1 && R330 = R332 && R331 - R404 = 1 && R333 = 0 && R334 = R338 && R335 = 0 && R336 = R338 && R337 = 0 && R347 = 0 && R348 = R370 && R349 = 0 && R350 = R370 && R351 = 0 && R352 = R370 && R353 = 0 && R354 = R370 && R355 = 0 && R356 = R370 && R357 = 0 && R358 = R370 && R359 = 0 && R360 = R370 && R361 = 0 && R362 = R370 && R363 = 0 && R364 = R370 && R365 = 0 && R366 = R370 && R367 = 0 && R368 = R370 && R369 = 0 && R371 = 0 && R372 = R404 && R373 = 0 && R374 = R404 && R375 = 0 && R376 = R404 && R377 = 0 && R378 = R404 && R379 = 0 && R380 = R404 && R381 = 0 && R382 = R404 && R383 = 0 && R384 = R404 && R385 = 0 && R386 = R404 && R387 = 0 && R388 = R404 && R389 = 0 && R390 = R404 && R391 = 0 && R392 = R404 && R393 = 0 && R394 = R404 && R395 = 0 && R396 = R404 && R397 = 0 && R398 = R404 && R399 = 0 && R400 = R404 && R401 = 0 && R402 = R404 && R403 = 0 && R0 != 0 && R13 < 1 && R275 < 1 && R276 < 1 && 0 < R320 && R404 < R332 && 0 < R338 && -1 < R370 && -1 < R404 && (R5 != 0 || ((R0 != R284 || R283 - R284 = -1 || R284 < 0) && (R0 = R284 || R0 < 1))) && (R5 != 0 || ((R0 != R286 || R285 - R286 = -1 || R286 < 0) && (R0 = R286 || R0 < 1))) && (R287 != 0 || ((R6 != 0 || ((R0 != R288 || R288 = 1 || R288 < 0) && (R0 = R288 || R288 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R288 || R288 = 1 || R288 < 0) && (R288 != 1 || -1 < R0) && (R0 = R288 || R288 = 1))))) && (R289 != 0 || ((R6 != 0 || ((R0 != R290 || R290 = 1 || R290 < 0) && (R0 = R290 || R290 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R290 || R290 = 1 || R290 < 0) && (R290 != 1 || -1 < R0) && (R0 = R290 || R290 = 1))))) && (R5 = 0 || (R0 = R284 && R283 - R284 = -1)) && (R5 = 0 || (R0 = R286 && R285 - R286 = -1)) && (R280 = 0 || (R339 = 0 && R340 = 0)) && (R280 = 0 || (R341 = 0 && R342 = 0)) && (R282 = 0 || (R343 = 0 && R344 = 0)) && (R282 = 0 || (R345 = 0 && R346 = 0)) && (R287 = 0 || (R6 = 0 && R0 < 0)) && (R289 = 0 || (R6 = 0 && R0 < 0));
// End of Parikh automata intersection problem
