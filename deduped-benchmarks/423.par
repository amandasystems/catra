// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R2, R3, R4, R5, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P23
automaton P23_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [12, 12] { R75 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [0, 65535] { R77 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 31] { R89 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s2 [32, 32] { R89 += 1 };
  s0 -> s1 [33, 65535] { R89 += 1 };
  s1 -> s1 [0, 31] { R89 += 1 };
  s1 -> s2 [32, 32] { R89 += 1 };
  s1 -> s1 [33, 65535] { R89 += 1 };
  s2 -> s2 [0, 65535] { R89 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_4 {
  init s0;
  s0 -> s1 [0, 65535] { R91 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 31] { R93 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [32, 32] { R93 += 1 };
  s0 -> s1 [33, 65535] { R93 += 1, R9 += 1 };
  s1 -> s1 [0, 31] { R93 += 1, R9 += 1 };
  s1 -> s3 [32, 32] { R93 += 1 };
  s1 -> s1 [33, 65535] { R93 += 1, R9 += 1 };
  s2 -> s1 [0, 31] { R93 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R93 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [32, 32] { R93 += 1 };
  s2 -> s1 [33, 65535] { R93 += 1, R9 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R93 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_6 {
  init s0;
  s0 -> s1 [0, 8] { R95 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R66 += 1, R67 += 1 };
  s0 -> s3 [9, 13] { R95 += 1, R67 += 1 };
  s0 -> s1 [14, 31] { R95 += 1, R67 += 1 };
  s0 -> s3 [32, 32] { R95 += 1, R67 += 1 };
  s0 -> s1 [33, 65535] { R95 += 1, R67 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R95 += 1 };
  s1 -> s1 [0, 65535] { R95 += 1, R67 += 1 };
  s2 -> s1 [0, 8] { R95 += 1, R67 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R95 += 1, R66 += 1, R67 += 1 };
  s2 -> s3 [9, 13] { R95 += 1, R67 += 1 };
  s2 -> s1 [14, 31] { R95 += 1, R67 += 1 };
  s2 -> s3 [32, 32] { R95 += 1, R67 += 1 };
  s2 -> s1 [33, 65535] { R95 += 1, R67 += 1 };
  s3 -> s1 [0, 65535] { R95 += 1, R67 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R95 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 65535] { R97 += 1, R68 += 1, R69 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R69 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s1 -> s1 [0, 65535] { R97 += 1, R68 += 1, R69 += 1 };
  s1 -> s2 [0, 65535] { R97 += 1, R69 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R97 += 1 };
  s2 -> s2 [0, 65535] { R97 += 1, R69 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R97 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 8] { R99 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s3 [9, 13] { R99 += 1, R71 += 1 };
  s0 -> s1 [14, 31] { R99 += 1, R71 += 1 };
  s0 -> s3 [32, 32] { R99 += 1, R71 += 1 };
  s0 -> s1 [33, 65535] { R99 += 1, R71 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1, R71 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R99 += 1 };
  s2 -> s1 [0, 8] { R99 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R70 += 1, R71 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R99 += 1, R71 += 1 };
  s2 -> s1 [14, 31] { R99 += 1, R71 += 1 };
  s2 -> s3 [32, 32] { R99 += 1, R71 += 1 };
  s2 -> s1 [33, 65535] { R99 += 1, R71 += 1 };
  s3 -> s1 [0, 65535] { R99 += 1, R71 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R99 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s1 [0, 65535] { R101 += 1, R72 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R73 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R101 += 1, R72 += 1, R73 += 1 };
  s1 -> s2 [0, 65535] { R101 += 1, R73 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R101 += 1, R73 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R101 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R101 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 64] { R103 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R103 += 1, R78 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [91, 65535] { R103 += 1, R79 += 1 };
  s1 -> s1 [0, 64] { R103 += 1, R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R103 += 1 };
  s1 -> s1 [91, 65535] { R103 += 1, R79 += 1 };
  s2 -> s1 [0, 64] { R103 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R103 += 1, R78 += 1, R79 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R103 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 65535] { R105 += 1, R80 += 1, R81 += 1 };
  s0 -> s2 [0, 65535] { R105 += 1, R81 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R105 += 1, R80 += 1, R81 += 1 };
  s1 -> s2 [0, 65535] { R105 += 1, R81 += 1, R61 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R105 += 1, R81 += 1, R61 += 1 };
  s2 -> s3 [0, 65535] { R105 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R105 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_12 {
  init s0;
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s1 [0, 65535] { R107 += 1, R82 += 1, R83 += 1 };
  s0 -> s2 [0, 65535] { R107 += 1, R83 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R107 += 1, R82 += 1, R83 += 1 };
  s1 -> s2 [0, 65535] { R107 += 1, R83 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R107 += 1 };
  s2 -> s2 [0, 65535] { R107 += 1, R83 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R107 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_13 {
  init s0;
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s0 -> s1 [0, 65535] { R109 += 1, R85 += 1, R62 += 1, R63 += 1 };
  s0 -> s2 [0, 65535] { R109 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [11, 11] { R109 += 1, R85 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R109 += 1, R85 += 1, R62 += 1, R63 += 1 };
  s1 -> s3 [11, 11] { R109 += 1, R85 += 1, R63 += 1 };
  s2 -> s1 [0, 65535] { R109 += 1, R85 += 1, R62 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R109 += 1, R84 += 1, R85 += 1 };
  s2 -> s3 [11, 11] { R109 += 1, R85 += 1, R63 += 1 };
  s3 -> s3 [0, 65535] { R109 += 1, R85 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R109 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R109 += 1 };
  accepting s3, s4, s5;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R111 += 1, R86 += 1, R87 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s2 [0, 65535] { R111 += 1, R87 += 1, R64 += 1, R65 += 1 };
  s0 -> s3 [0, 65535] { R111 += 1, R87 += 1, R65 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R111 += 1, R86 += 1, R87 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R111 += 1, R87 += 1, R64 += 1, R65 += 1 };
  s1 -> s3 [0, 65535] { R111 += 1, R87 += 1, R65 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R111 += 1 };
  s2 -> s2 [0, 65535] { R111 += 1, R87 += 1, R64 += 1, R65 += 1 };
  s2 -> s3 [0, 65535] { R111 += 1, R87 += 1, R65 += 1, R3 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R111 += 1 };
  s3 -> s3 [0, 65535] { R111 += 1, R87 += 1, R65 += 1, R3 += 1 };
  s3 -> s6 [0, 65535] { R111 += 1, R87 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R111 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R111 += 1 };
  s6 -> s6 [0, 65535] { R111 += 1, R87 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P3
automaton P3_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R87 && R2 = R111 && R8 = 0 && R9 - R86 = -1 && R62 = 0 && R66 - R87 = -1 && R67 = R87 && R68 - R87 = -1 && R69 = R87 && R70 = 0 && R71 = 1 && R72 = 0 && R73 = 1 && R74 = 0 && R75 = 1 && R76 = 0 && R77 = 1 && R82 = R86 && R83 = R87 && R84 = R86 && R85 = R87 && R88 = 1 && R89 = R111 && R90 = 1 && R91 = R111 && R92 = 1 && R93 = R111 && R94 = 1 && R95 = R111 && R96 = 1 && R97 = R111 && R98 = 1 && R99 = R111 && R100 = 1 && R101 = R111 && R102 = 1 && R103 = R111 && R104 = 1 && R105 = R111 && R106 = 1 && R107 = R111 && R108 = 1 && R109 = R111 && R110 = 1 && R0 != 0 && R86 - R87 < 1 && 0 < R86 && 0 < R111 && (R0 != R63 || R63 = 1 || R63 < 0) && (R63 != 1 || -1 < R0) && (R64 != 0 || ((R3 != 0 || ((R0 != R65 || R65 = 1 || R65 < 0) && (R0 = R65 || R65 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R65 || R65 = 1 || R65 < 0) && (R65 != 1 || -1 < R0) && (R0 = R65 || R65 = 1))))) && (R78 != 0 || R79 - R86 = -1 || (R61 = 0 && R86 = 1)) && (R80 != 0 || R81 - R86 = -1 || (R61 = 0 && R86 = 1)) && (R0 = R63 || R63 = 1) && (R64 = 0 || (R3 = 0 && R0 < 0)) && (R78 = 0 || (R61 = 0 && R86 = 1)) && (R80 = 0 || (R61 = 0 && R86 = 1));
// End of Parikh automata intersection problem
