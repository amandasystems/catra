// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R2, R3, R4, R5, R6, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P3
automaton P3_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value
automaton value_0 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value_1 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [10, 10] { R80 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value_2 {
  init s0;
  s0 -> s1 [0, 65535] { R82 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_3 {
  init s0;
  s0 -> s1 [0, 8] { R84 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s0 -> s2 [9, 13] { R84 += 1 };
  s0 -> s1 [14, 31] { R84 += 1 };
  s0 -> s2 [32, 32] { R84 += 1 };
  s0 -> s1 [33, 65535] { R84 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R84 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value_4 {
  init s0;
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s1 [0, 65535] { R86 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R86 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_5 {
  init s0;
  s0 -> s1 [0, 31] { R98 += 1 };
  s0 -> s0 [0, 65535] { R97 += 1, R98 += 1 };
  s0 -> s2 [32, 32] { R98 += 1 };
  s0 -> s1 [33, 65535] { R98 += 1 };
  s1 -> s1 [0, 31] { R98 += 1 };
  s1 -> s2 [32, 32] { R98 += 1 };
  s1 -> s1 [33, 65535] { R98 += 1 };
  s2 -> s2 [0, 65535] { R98 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value_6 {
  init s0;
  s0 -> s0 [0, 65535] { R99 += 1, R100 += 1 };
  s0 -> s1 [0, 65535] { R100 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R100 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value_7 {
  init s0;
  s0 -> s1 [0, 31] { R102 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R102 += 1, R9 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R101 += 1, R102 += 1 };
  s0 -> s3 [32, 32] { R102 += 1 };
  s0 -> s1 [33, 65535] { R102 += 1, R10 += 1 };
  s1 -> s1 [0, 31] { R102 += 1, R10 += 1 };
  s1 -> s3 [32, 32] { R102 += 1 };
  s1 -> s1 [33, 65535] { R102 += 1, R10 += 1 };
  s2 -> s1 [0, 31] { R102 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R102 += 1, R9 += 1, R10 += 1 };
  s2 -> s3 [32, 32] { R102 += 1 };
  s2 -> s1 [33, 65535] { R102 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R102 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value_8 {
  init s0;
  s0 -> s1 [0, 8] { R104 += 1, R72 += 1 };
  s0 -> s0 [0, 65535] { R103 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R104 += 1, R71 += 1, R72 += 1 };
  s0 -> s3 [9, 13] { R104 += 1, R72 += 1 };
  s0 -> s1 [14, 31] { R104 += 1, R72 += 1 };
  s0 -> s3 [32, 32] { R104 += 1, R72 += 1 };
  s0 -> s1 [33, 65535] { R104 += 1, R72 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R104 += 1, R72 += 1 };
  s1 -> s5 [0, 65535] { R104 += 1 };
  s2 -> s1 [0, 8] { R104 += 1, R72 += 1 };
  s2 -> s2 [0, 65535] { R104 += 1, R71 += 1, R72 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R104 += 1, R72 += 1 };
  s2 -> s1 [14, 31] { R104 += 1, R72 += 1 };
  s2 -> s3 [32, 32] { R104 += 1, R72 += 1 };
  s2 -> s1 [33, 65535] { R104 += 1, R72 += 1 };
  s3 -> s1 [0, 65535] { R104 += 1, R72 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R104 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value_9 {
  init s0;
  s0 -> s1 [0, 65535] { R106 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R105 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R106 += 1, R74 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R106 += 1, R73 += 1, R74 += 1 };
  s1 -> s2 [0, 65535] { R106 += 1, R74 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R106 += 1 };
  s2 -> s2 [0, 65535] { R106 += 1, R74 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R106 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value_10 {
  init s0;
  s0 -> s1 [0, 8] { R108 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R108 += 1, R75 += 1, R76 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s3 [9, 13] { R108 += 1, R76 += 1 };
  s0 -> s1 [14, 31] { R108 += 1, R76 += 1 };
  s0 -> s3 [32, 32] { R108 += 1, R76 += 1 };
  s0 -> s1 [33, 65535] { R108 += 1, R76 += 1 };
  s1 -> s5 [0, 65535] { R108 += 1 };
  s1 -> s1 [0, 65535] { R108 += 1, R76 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R108 += 1, R76 += 1 };
  s2 -> s2 [0, 65535] { R108 += 1, R75 += 1, R76 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R108 += 1, R76 += 1 };
  s2 -> s1 [14, 31] { R108 += 1, R76 += 1 };
  s2 -> s3 [32, 32] { R108 += 1, R76 += 1 };
  s2 -> s1 [33, 65535] { R108 += 1, R76 += 1 };
  s3 -> s1 [0, 65535] { R108 += 1, R76 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R108 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value_11 {
  init s0;
  s0 -> s1 [0, 65535] { R110 += 1, R78 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s2 [0, 65535] { R110 += 1, R77 += 1, R78 += 1 };
  s1 -> s4 [0, 65535] { R110 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R78 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R110 += 1, R78 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R110 += 1, R77 += 1, R78 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R110 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_12 {
  init s0;
  s0 -> s1 [0, 64] { R112 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R112 += 1, R87 += 1, R88 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s1 [91, 65535] { R112 += 1, R88 += 1 };
  s1 -> s1 [0, 64] { R112 += 1, R88 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R112 += 1, R88 += 1 };
  s2 -> s1 [0, 64] { R112 += 1, R88 += 1 };
  s2 -> s2 [0, 65535] { R112 += 1, R87 += 1, R88 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R112 += 1, R88 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value_13 {
  init s0;
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s1 [0, 65535] { R114 += 1, R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R114 += 1, R90 += 1, R66 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1, R89 += 1, R90 += 1 };
  s1 -> s2 [0, 65535] { R114 += 1, R90 += 1, R66 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R114 += 1 };
  s2 -> s2 [0, 65535] { R114 += 1, R90 += 1, R66 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R114 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_14 {
  init s0;
  s0 -> s1 [0, 65535] { R116 += 1, R91 += 1, R92 += 1 };
  s0 -> s2 [0, 65535] { R116 += 1, R92 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R115 += 1, R116 += 1 };
  s1 -> s1 [0, 65535] { R116 += 1, R91 += 1, R92 += 1 };
  s1 -> s2 [0, 65535] { R116 += 1, R92 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R116 += 1 };
  s2 -> s2 [0, 65535] { R116 += 1, R92 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R116 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value_15 {
  init s0;
  s0 -> s1 [0, 65535] { R118 += 1, R94 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R118 += 1, R93 += 1, R94 += 1 };
  s0 -> s0 [0, 65535] { R117 += 1, R118 += 1 };
  s0 -> s3 [9, 9] { R118 += 1, R94 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R118 += 1, R94 += 1, R67 += 1, R68 += 1 };
  s1 -> s3 [9, 9] { R118 += 1, R94 += 1, R68 += 1 };
  s2 -> s1 [0, 65535] { R118 += 1, R94 += 1, R67 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R118 += 1, R93 += 1, R94 += 1 };
  s2 -> s3 [9, 9] { R118 += 1, R94 += 1, R68 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R118 += 1, R94 += 1 };
  s3 -> s5 [0, 65535] { R118 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R118 += 1 };
  accepting s3, s4, s5;
};
automaton value_16 {
  init s0;
  s0 -> s1 [0, 65535] { R120 += 1, R96 += 1, R70 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R120 += 1, R95 += 1, R96 += 1 };
  s0 -> s0 [0, 65535] { R119 += 1, R120 += 1 };
  s0 -> s3 [0, 65535] { R120 += 1, R96 += 1, R69 += 1, R70 += 1 };
  s1 -> s1 [0, 65535] { R120 += 1, R96 += 1, R70 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R120 += 1 };
  s1 -> s6 [0, 65535] { R120 += 1, R96 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R120 += 1, R96 += 1, R70 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R120 += 1, R95 += 1, R96 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R120 += 1, R96 += 1, R69 += 1, R70 += 1 };
  s3 -> s1 [0, 65535] { R120 += 1, R96 += 1, R70 += 1, R3 += 1 };
  s3 -> s4 [0, 65535] { R120 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R120 += 1, R96 += 1, R69 += 1, R70 += 1 };
  s4 -> s4 [0, 65535] { R120 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R120 += 1 };
  s6 -> s6 [0, 65535] { R120 += 1, R96 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R96 && R2 - R120 = 1 && R9 = 0 && R10 - R95 = -1 && R67 = 0 && R71 - R96 = -1 && R72 = R96 && R73 - R96 = -1 && R74 = R96 && R75 = 0 && R76 = 1 && R77 = 0 && R78 = 1 && R79 = R120 && R80 - R120 = 1 && R81 = R120 && R82 - R120 = 1 && R83 = 0 && R84 = 1 && R85 = 0 && R86 = 1 && R91 = R95 && R92 = R96 && R93 = R95 && R94 = R96 && R97 = 0 && R98 = R120 && R99 = 0 && R100 = R120 && R101 = 0 && R102 = R120 && R103 = 0 && R104 = R120 && R105 = 0 && R106 = R120 && R107 = 0 && R108 = R120 && R109 = 0 && R110 = R120 && R111 = 0 && R112 = R120 && R113 = 0 && R114 = R120 && R115 = 0 && R116 = R120 && R117 = 0 && R118 = R120 && R119 = 0 && R0 != 0 && R95 - R96 < 1 && 0 < R95 && -1 < R120 && (R0 != R68 || R68 = 1 || R68 < 0) && (R68 != 1 || -1 < R0) && (R69 != 0 || ((R3 != 0 || ((R0 != R70 || R70 = 1 || R70 < 0) && (R0 = R70 || R70 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R70 || R70 = 1 || R70 < 0) && (R70 != 1 || -1 < R0) && (R0 = R70 || R70 = 1))))) && (R87 != 0 || R88 - R95 = -1 || (R66 = 0 && R95 = 1)) && (R89 != 0 || R90 - R95 = -1 || (R66 = 0 && R95 = 1)) && (R0 = R68 || R68 = 1) && (R69 = 0 || (R3 = 0 && R0 < 0)) && (R87 = 0 || (R66 = 0 && R95 = 1)) && (R89 = 0 || (R66 = 0 && R95 = 1));
// End of Parikh automata intersection problem
