// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P18
automaton P18_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s1 [11, 11] { R15 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s1 [0, 65535] { R17 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R17 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [0, 65535] { R19 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s1 [0, 65535] { R21 += 1, R6 += 1, R7 += 1 };
  s0 -> s2 [9, 9] { R21 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1, R6 += 1, R7 += 1 };
  s1 -> s2 [9, 9] { R21 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R21 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s0 -> s1 [0, 65535] { R23 += 1, R8 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R23 += 1, R9 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R23 += 1, R8 += 1, R9 += 1 };
  s1 -> s2 [0, 65535] { R23 += 1, R9 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R23 += 1 };
  s2 -> s2 [0, 65535] { R23 += 1, R9 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R23 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R25 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R25 += 1, R10 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s3 [9, 13] { R25 += 1, R11 += 1 };
  s0 -> s1 [14, 31] { R25 += 1, R11 += 1 };
  s0 -> s3 [32, 32] { R25 += 1, R11 += 1 };
  s0 -> s1 [33, 65535] { R25 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R25 += 1, R11 += 1 };
  s1 -> s5 [0, 65535] { R25 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R25 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R25 += 1, R10 += 1, R11 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R25 += 1, R11 += 1 };
  s2 -> s1 [14, 31] { R25 += 1, R11 += 1 };
  s2 -> s3 [32, 32] { R25 += 1, R11 += 1 };
  s2 -> s1 [33, 65535] { R25 += 1, R11 += 1 };
  s3 -> s1 [0, 65535] { R25 += 1, R11 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R25 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R13 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R27 += 1, R12 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R13 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R27 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R27 += 1, R13 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R27 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R27 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R7 && R1 = R27 && R6 - R7 = -1 && R14 = 0 && R15 = 1 && R16 = 0 && R17 = 1 && R18 = 1 && R19 = R27 && R20 = 1 && R21 = R27 && R22 = 1 && R23 = R27 && R24 = 1 && R25 = R27 && R26 = 1 && R7 != 0 && R5 < 1 && 0 < R27 && (R7 != R9 || R8 - R9 = -1 || (R2 = 0 && R9 < 0)) && (R10 != 0 || ((R3 != 0 || ((R7 != R11 || R11 = 1 || R11 < 0) && (R7 = R11 || R11 = 1 || R7 < 1))) && (R3 = 0 || ((R7 != R11 || R11 = 1 || R11 < 0) && (R11 != 1 || -1 < R7) && (R7 = R11 || R11 = 1))))) && (R12 != 0 || ((R3 != 0 || ((R7 != R13 || R13 = 1 || R13 < 0) && (R7 = R13 || R13 = 1 || R7 < 1))) && (R3 = 0 || ((R7 != R13 || R13 = 1 || R13 < 0) && (R13 != 1 || -1 < R7) && (R7 = R13 || R13 = 1))))) && (R7 = R9 || (R2 = 0 && R7 < 0)) && (R10 = 0 || (R3 = 0 && R7 < 0)) && (R12 = 0 || (R3 = 0 && R7 < 0));
// End of Parikh automata intersection problem
