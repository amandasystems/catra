// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R16 += 1 };
  s1 -> s1 [0, 60] { R16 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R192 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s1 -> s1 [0, 65535] { R192 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s0 -> s1 [0, 65535] { R228 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R228 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R230 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s2 [13, 13] { R230 += 1, R188 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1, R187 += 1, R188 += 1 };
  s1 -> s2 [13, 13] { R230 += 1, R188 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R230 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R232 += 1, R190 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R231 += 1, R232 += 1 };
  s0 -> s2 [0, 65535] { R232 += 1, R189 += 1, R190 += 1 };
  s1 -> s1 [0, 65535] { R232 += 1, R190 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R232 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R232 += 1, R190 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R232 += 1, R189 += 1, R190 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R232 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 64] { R234 += 1, R204 += 1 };
  s0 -> s2 [0, 65535] { R234 += 1, R203 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R233 += 1, R234 += 1 };
  s0 -> s3 [67, 67] { R234 += 1, R204 += 1 };
  s0 -> s1 [68, 65535] { R234 += 1, R204 += 1 };
  s1 -> s1 [0, 64] { R234 += 1, R204 += 1 };
  s1 -> s3 [67, 67] { R234 += 1, R204 += 1 };
  s1 -> s1 [68, 65535] { R234 += 1, R204 += 1 };
  s2 -> s1 [0, 64] { R234 += 1, R204 += 1 };
  s2 -> s2 [0, 65535] { R234 += 1, R203 += 1, R204 += 1 };
  s2 -> s3 [67, 67] { R234 += 1, R204 += 1 };
  s2 -> s1 [68, 65535] { R234 += 1, R204 += 1 };
  s3 -> s3 [0, 64] { R234 += 1, R204 += 1 };
  s3 -> s3 [0, 65535] { R234 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [67, 65535] { R234 += 1, R204 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R235 += 1, R236 += 1 };
  s0 -> s1 [0, 65535] { R236 += 1, R205 += 1, R206 += 1 };
  s0 -> s2 [0, 65535] { R236 += 1, R206 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R236 += 1, R205 += 1, R206 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R236 += 1, R206 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R236 += 1 };
  s2 -> s2 [0, 65535] { R236 += 1, R206 += 1, R2 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R236 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 66] { R238 += 1, R208 += 1 };
  s0 -> s2 [0, 65535] { R238 += 1, R207 += 1, R208 += 1 };
  s0 -> s0 [0, 65535] { R237 += 1, R238 += 1 };
  s0 -> s3 [0, 65535] { R238 += 1, R208 += 1, R11 += 1 };
  s0 -> s4 [67, 67] { R238 += 1, R208 += 1 };
  s0 -> s1 [68, 65535] { R238 += 1, R208 += 1 };
  s1 -> s1 [0, 66] { R238 += 1, R208 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R238 += 1 };
  s1 -> s4 [67, 67] { R238 += 1, R208 += 1 };
  s1 -> s1 [68, 65535] { R238 += 1, R208 += 1 };
  s2 -> s1 [0, 66] { R238 += 1, R208 += 1 };
  s2 -> s2 [0, 65535] { R238 += 1, R207 += 1, R208 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R238 += 1, R208 += 1, R11 += 1 };
  s2 -> s4 [67, 67] { R238 += 1, R208 += 1 };
  s2 -> s1 [68, 65535] { R238 += 1, R208 += 1 };
  s3 -> s1 [0, 66] { R238 += 1, R208 += 1 };
  s3 -> s5 [0, 65535] { R238 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R238 += 1, R208 += 1, R11 += 1 };
  s3 -> s4 [67, 67] { R238 += 1, R208 += 1 };
  s3 -> s1 [68, 65535] { R238 += 1, R208 += 1 };
  s4 -> s4 [0, 65535] { R238 += 1, R208 += 1 };
  s5 -> s5 [0, 65535] { R238 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R240 += 1, R210 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R240 += 1, R210 += 1, R179 += 1, R180 += 1 };
  s0 -> s3 [0, 65535] { R240 += 1, R209 += 1, R210 += 1 };
  s0 -> s0 [0, 65535] { R239 += 1, R240 += 1 };
  s0 -> s4 [9, 13] { R240 += 1, R210 += 1, R180 += 1 };
  s0 -> s1 [14, 31] { R240 += 1, R210 += 1, R180 += 1 };
  s0 -> s4 [32, 32] { R240 += 1, R210 += 1, R180 += 1 };
  s0 -> s1 [33, 65535] { R240 += 1, R210 += 1, R180 += 1 };
  s1 -> s1 [0, 65535] { R240 += 1, R210 += 1, R180 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R240 += 1, R210 += 1 };
  s1 -> s6 [0, 65535] { R240 += 1 };
  s2 -> s1 [0, 8] { R240 += 1, R210 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R240 += 1, R210 += 1, R179 += 1, R180 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R240 += 1 };
  s2 -> s4 [9, 13] { R240 += 1, R210 += 1, R180 += 1 };
  s2 -> s1 [14, 31] { R240 += 1, R210 += 1, R180 += 1 };
  s2 -> s4 [32, 32] { R240 += 1, R210 += 1, R180 += 1 };
  s2 -> s1 [33, 65535] { R240 += 1, R210 += 1, R180 += 1 };
  s3 -> s1 [0, 8] { R240 += 1, R210 += 1, R180 += 1 };
  s3 -> s2 [0, 65535] { R240 += 1, R210 += 1, R179 += 1, R180 += 1 };
  s3 -> s3 [0, 65535] { R240 += 1, R209 += 1, R210 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R240 += 1, R210 += 1, R180 += 1 };
  s3 -> s1 [14, 31] { R240 += 1, R210 += 1, R180 += 1 };
  s3 -> s4 [32, 32] { R240 += 1, R210 += 1, R180 += 1 };
  s3 -> s1 [33, 65535] { R240 += 1, R210 += 1, R180 += 1 };
  s4 -> s1 [0, 65535] { R240 += 1, R210 += 1, R180 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R240 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R240 += 1, R210 += 1 };
  s7 -> s6 [0, 65535] { R240 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R242 += 1, R212 += 1, R182 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R241 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R242 += 1, R212 += 1, R181 += 1, R182 += 1 };
  s0 -> s3 [0, 65535] { R242 += 1, R211 += 1, R212 += 1 };
  s1 -> s1 [0, 65535] { R242 += 1, R212 += 1, R182 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R242 += 1, R212 += 1 };
  s1 -> s5 [0, 65535] { R242 += 1 };
  s2 -> s1 [0, 65535] { R242 += 1, R212 += 1, R182 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R242 += 1, R212 += 1, R181 += 1, R182 += 1 };
  s2 -> s5 [0, 65535] { R242 += 1 };
  s3 -> s1 [0, 65535] { R242 += 1, R212 += 1, R182 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R242 += 1, R212 += 1, R181 += 1, R182 += 1 };
  s3 -> s3 [0, 65535] { R242 += 1, R211 += 1, R212 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R242 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R242 += 1, R212 += 1 };
  s6 -> s5 [0, 65535] { R242 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R244 += 1, R214 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R244 += 1, R213 += 1, R214 += 1 };
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s3 [0, 65535] { R244 += 1, R214 += 1, R183 += 1, R184 += 1 };
  s0 -> s4 [9, 13] { R244 += 1, R214 += 1, R184 += 1 };
  s0 -> s1 [14, 31] { R244 += 1, R214 += 1, R184 += 1 };
  s0 -> s4 [32, 32] { R244 += 1, R214 += 1, R184 += 1 };
  s0 -> s1 [33, 65535] { R244 += 1, R214 += 1, R184 += 1 };
  s1 -> s7 [0, 65535] { R244 += 1, R214 += 1 };
  s1 -> s1 [0, 65535] { R244 += 1, R214 += 1, R184 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R244 += 1 };
  s2 -> s1 [0, 8] { R244 += 1, R214 += 1, R184 += 1 };
  s2 -> s2 [0, 65535] { R244 += 1, R213 += 1, R214 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R244 += 1, R214 += 1, R183 += 1, R184 += 1 };
  s2 -> s4 [9, 13] { R244 += 1, R214 += 1, R184 += 1 };
  s2 -> s1 [14, 31] { R244 += 1, R214 += 1, R184 += 1 };
  s2 -> s4 [32, 32] { R244 += 1, R214 += 1, R184 += 1 };
  s2 -> s1 [33, 65535] { R244 += 1, R214 += 1, R184 += 1 };
  s3 -> s1 [0, 8] { R244 += 1, R214 += 1, R184 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R244 += 1, R214 += 1, R183 += 1, R184 += 1 };
  s3 -> s6 [0, 65535] { R244 += 1 };
  s3 -> s4 [9, 13] { R244 += 1, R214 += 1, R184 += 1 };
  s3 -> s1 [14, 31] { R244 += 1, R214 += 1, R184 += 1 };
  s3 -> s4 [32, 32] { R244 += 1, R214 += 1, R184 += 1 };
  s3 -> s1 [33, 65535] { R244 += 1, R214 += 1, R184 += 1 };
  s4 -> s1 [0, 65535] { R244 += 1, R214 += 1, R184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R244 += 1 };
  s7 -> s7 [0, 65535] { R244 += 1, R214 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R244 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R246 += 1, R216 += 1, R186 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R246 += 1, R216 += 1, R185 += 1, R186 += 1 };
  s0 -> s3 [0, 65535] { R246 += 1, R215 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R216 += 1, R186 += 1, R8 += 1 };
  s1 -> s5 [0, 65535] { R246 += 1 };
  s1 -> s6 [0, 65535] { R246 += 1, R216 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R246 += 1, R216 += 1, R186 += 1, R8 += 1 };
  s2 -> s5 [0, 65535] { R246 += 1 };
  s2 -> s2 [0, 65535] { R246 += 1, R216 += 1, R185 += 1, R186 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R246 += 1, R216 += 1, R186 += 1, R8 += 1 };
  s3 -> s2 [0, 65535] { R246 += 1, R216 += 1, R185 += 1, R186 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R246 += 1, R215 += 1, R216 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R246 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R246 += 1 };
  s6 -> s6 [0, 65535] { R246 += 1, R216 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R248 += 1, R218 += 1, R194 += 1 };
  s0 -> s2 [0, 65535] { R248 += 1, R218 += 1, R193 += 1, R194 += 1 };
  s0 -> s3 [0, 65535] { R248 += 1, R217 += 1, R218 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s1 [68, 65535] { R248 += 1, R218 += 1, R194 += 1 };
  s1 -> s1 [0, 66] { R248 += 1, R218 += 1, R194 += 1 };
  s1 -> s5 [0, 65535] { R248 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R248 += 1, R218 += 1 };
  s1 -> s1 [68, 65535] { R248 += 1, R218 += 1, R194 += 1 };
  s2 -> s1 [0, 66] { R248 += 1, R218 += 1, R194 += 1 };
  s2 -> s2 [0, 65535] { R248 += 1, R218 += 1, R193 += 1, R194 += 1 };
  s2 -> s5 [0, 65535] { R248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [68, 65535] { R248 += 1, R218 += 1, R194 += 1 };
  s3 -> s1 [0, 66] { R248 += 1, R218 += 1, R194 += 1 };
  s3 -> s2 [0, 65535] { R248 += 1, R218 += 1, R193 += 1, R194 += 1 };
  s3 -> s3 [0, 65535] { R248 += 1, R217 += 1, R218 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [68, 65535] { R248 += 1, R218 += 1, R194 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R248 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R220 += 1, R196 += 1, R169 += 1 };
  s0 -> s2 [0, 65535] { R250 += 1, R220 += 1, R195 += 1, R196 += 1 };
  s0 -> s3 [0, 65535] { R250 += 1, R219 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R250 += 1, R220 += 1, R196 += 1, R169 += 1 };
  s1 -> s6 [0, 65535] { R250 += 1, R220 += 1 };
  s1 -> s5 [0, 65535] { R250 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R250 += 1, R220 += 1, R196 += 1, R169 += 1 };
  s2 -> s2 [0, 65535] { R250 += 1, R220 += 1, R195 += 1, R196 += 1 };
  s2 -> s5 [0, 65535] { R250 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R250 += 1, R220 += 1, R196 += 1, R169 += 1 };
  s3 -> s2 [0, 65535] { R250 += 1, R220 += 1, R195 += 1, R196 += 1 };
  s3 -> s3 [0, 65535] { R250 += 1, R219 += 1, R220 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R250 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R250 += 1, R220 += 1 };
  s6 -> s5 [0, 65535] { R250 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 67] { R252 += 1, R222 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R252 += 1, R221 += 1, R222 += 1 };
  s0 -> s0 [0, 65535] { R251 += 1, R252 += 1 };
  s0 -> s3 [0, 65535] { R252 += 1, R222 += 1, R197 += 1, R198 += 1 };
  s0 -> s4 [68, 68] { R252 += 1, R222 += 1, R198 += 1 };
  s0 -> s1 [69, 65535] { R252 += 1, R222 += 1, R198 += 1 };
  s1 -> s1 [0, 67] { R252 += 1, R222 += 1, R198 += 1 };
  s1 -> s4 [68, 68] { R252 += 1, R222 += 1, R198 += 1 };
  s1 -> s1 [69, 65535] { R252 += 1, R222 += 1, R198 += 1 };
  s2 -> s1 [0, 67] { R252 += 1, R222 += 1, R198 += 1 };
  s2 -> s2 [0, 65535] { R252 += 1, R221 += 1, R222 += 1 };
  s2 -> s3 [0, 65535] { R252 += 1, R222 += 1, R197 += 1, R198 += 1 };
  s2 -> s4 [68, 68] { R252 += 1, R222 += 1, R198 += 1 };
  s2 -> s1 [69, 65535] { R252 += 1, R222 += 1, R198 += 1 };
  s3 -> s1 [0, 67] { R252 += 1, R222 += 1, R198 += 1 };
  s3 -> s3 [0, 65535] { R252 += 1, R222 += 1, R197 += 1, R198 += 1 };
  s3 -> s4 [68, 68] { R252 += 1, R222 += 1, R198 += 1 };
  s3 -> s1 [69, 65535] { R252 += 1, R222 += 1, R198 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R252 += 1 };
  s4 -> s7 [0, 65535] { R252 += 1, R222 += 1 };
  s4 -> s4 [0, 65535] { R252 += 1, R222 += 1, R198 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R252 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R252 += 1 };
  s7 -> s7 [0, 65535] { R252 += 1, R222 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R254 += 1, R224 += 1, R200 += 1, R170 += 1 };
  s0 -> s2 [0, 65535] { R254 += 1, R224 += 1, R199 += 1, R200 += 1 };
  s0 -> s0 [0, 65535] { R253 += 1, R254 += 1 };
  s0 -> s3 [0, 65535] { R254 += 1, R223 += 1, R224 += 1 };
  s1 -> s6 [0, 65535] { R254 += 1, R224 += 1 };
  s1 -> s1 [0, 65535] { R254 += 1, R224 += 1, R200 += 1, R170 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R254 += 1 };
  s2 -> s1 [0, 65535] { R254 += 1, R224 += 1, R200 += 1, R170 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R254 += 1 };
  s2 -> s2 [0, 65535] { R254 += 1, R224 += 1, R199 += 1, R200 += 1 };
  s3 -> s1 [0, 65535] { R254 += 1, R224 += 1, R200 += 1, R170 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R254 += 1, R224 += 1, R199 += 1, R200 += 1 };
  s3 -> s3 [0, 65535] { R254 += 1, R223 += 1, R224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R254 += 1 };
  s6 -> s6 [0, 65535] { R254 += 1, R224 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R254 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R256 += 1, R226 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R256 += 1, R225 += 1, R226 += 1 };
  s0 -> s0 [0, 65535] { R255 += 1, R256 += 1 };
  s0 -> s3 [0, 65535] { R256 += 1, R226 += 1, R201 += 1, R202 += 1 };
  s0 -> s4 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s0 -> s5 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s0 -> s1 [69, 65535] { R256 += 1, R226 += 1, R202 += 1 };
  s1 -> s1 [0, 66] { R256 += 1, R226 += 1, R202 += 1 };
  s1 -> s6 [0, 65535] { R256 += 1 };
  s1 -> s1 [0, 65535] { R256 += 1, R226 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s1 -> s5 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s1 -> s1 [69, 65535] { R256 += 1, R226 += 1, R202 += 1 };
  s2 -> s1 [0, 66] { R256 += 1, R226 += 1, R202 += 1 };
  s2 -> s2 [0, 65535] { R256 += 1, R225 += 1, R226 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R256 += 1, R226 += 1, R201 += 1, R202 += 1 };
  s2 -> s4 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s2 -> s5 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s2 -> s1 [69, 65535] { R256 += 1, R226 += 1, R202 += 1 };
  s3 -> s1 [0, 66] { R256 += 1, R226 += 1, R202 += 1 };
  s3 -> s6 [0, 65535] { R256 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R256 += 1, R226 += 1, R201 += 1, R202 += 1 };
  s3 -> s4 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s3 -> s5 [67, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s3 -> s1 [69, 65535] { R256 += 1, R226 += 1, R202 += 1 };
  s4 -> s4 [0, 67] { R256 += 1, R226 += 1, R202 += 1 };
  s4 -> s4 [0, 65535] { R256 += 1, R226 += 1 };
  s4 -> s6 [0, 65535] { R256 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [69, 65535] { R256 += 1, R226 += 1, R202 += 1 };
  s5 -> s6 [0, 65535] { R256 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R256 += 1, R226 += 1 };
  s6 -> s6 [0, 65535] { R256 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R172 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [9, 13] { R172 += 1 };
  s0 -> s1 [14, 31] { R172 += 1 };
  s0 -> s2 [32, 32] { R172 += 1 };
  s0 -> s1 [33, 65535] { R172 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R172 += 1 };
  s2 -> s1 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s1 [0, 65535] { R174 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R176 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [9, 13] { R176 += 1 };
  s0 -> s1 [14, 31] { R176 += 1 };
  s0 -> s2 [32, 32] { R176 += 1 };
  s0 -> s1 [33, 65535] { R176 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R176 += 1 };
  s2 -> s1 [0, 65535] { R176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R178 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R198 && R3 = R226 && R4 = R192 && R15 = 0 && R16 = R256 && R179 - R198 = -1 && R180 = R198 && R181 - R198 = -1 && R182 = R198 && R183 = 0 && R184 = 1 && R185 = 0 && R186 = 1 && R187 = 0 && R188 = 1 && R189 = 0 && R190 = 1 && R191 - R256 = 1 && R193 = 0 && R194 = R198 && R195 = 0 && R196 = R198 && R197 = 0 && R203 = 1 && R204 = R226 && R205 = 1 && R206 = R226 && R207 = 1 && R208 = R226 && R209 = 1 && R210 = R226 && R211 = 1 && R212 = R226 && R213 = 1 && R214 = R226 && R215 = 1 && R216 = R226 && R217 = 1 && R218 = R226 && R219 = 1 && R220 = R226 && R221 = 1 && R222 = R226 && R223 = 1 && R224 = R226 && R225 = 1 && R227 = 0 && R228 = R256 && R229 = 0 && R230 = R256 && R231 = 0 && R232 = R256 && R233 = 0 && R234 = R256 && R235 = 0 && R236 = R256 && R237 = 0 && R238 = R256 && R239 = 0 && R240 = R256 && R241 = 0 && R242 = R256 && R243 = 0 && R244 = R256 && R245 = 0 && R246 = R256 && R247 = 0 && R248 = R256 && R249 = 0 && R250 = R256 && R251 = 0 && R252 = R256 && R253 = 0 && R254 = R256 && R255 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && R256 < R192 && 0 < R198 && 0 < R226 && -1 < R256 && (R5 != 0 || ((R1 != R172 || R171 - R172 = -1 || R172 < 0) && (R1 = R172 || R1 < 1))) && (R5 != 0 || ((R1 != R174 || R173 - R174 = -1 || R174 < 0) && (R1 = R174 || R1 < 1))) && (R175 != 0 || ((R6 != 0 || ((R1 != R176 || R176 = 1 || R176 < 0) && (R1 = R176 || R176 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R176 || R176 = 1 || R176 < 0) && (R176 != 1 || -1 < R1) && (R1 = R176 || R176 = 1))))) && (R177 != 0 || ((R6 != 0 || ((R1 != R178 || R178 = 1 || R178 < 0) && (R1 = R178 || R178 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R178 || R178 = 1 || R178 < 0) && (R178 != 1 || -1 < R1) && (R1 = R178 || R178 = 1))))) && (R5 = 0 || (R1 = R172 && R171 - R172 = -1)) && (R5 = 0 || (R1 = R174 && R173 - R174 = -1)) && (R170 = 0 || (R199 = 0 && R200 = 0)) && (R170 = 0 || (R201 = 0 && R202 = 0)) && (R175 = 0 || (R6 = 0 && R1 < 0)) && (R177 = 0 || (R6 = 0 && R1 < 0));
// End of Parikh automata intersection problem
