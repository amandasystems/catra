// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R18, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R19 += 1 };
  s1 -> s1 [0, 60] { R19 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s1 [0, 65535] { R315 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R315 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R317 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s0 -> s2 [9, 9] { R317 += 1, R217 += 1 };
  s1 -> s1 [0, 65535] { R317 += 1, R216 += 1, R217 += 1 };
  s1 -> s2 [9, 9] { R317 += 1, R217 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R317 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R319 += 1, R219 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R319 += 1, R218 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s1 -> s1 [0, 65535] { R319 += 1, R219 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R319 += 1 };
  s2 -> s1 [0, 65535] { R319 += 1, R219 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R319 += 1, R218 += 1, R219 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R319 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R321 += 1, R221 += 1 };
  s0 -> s2 [0, 65535] { R321 += 1, R220 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s0 -> s3 [9, 13] { R321 += 1, R221 += 1 };
  s0 -> s1 [14, 31] { R321 += 1, R221 += 1 };
  s0 -> s3 [32, 32] { R321 += 1, R221 += 1 };
  s0 -> s1 [33, 65535] { R321 += 1, R221 += 1 };
  s1 -> s1 [0, 65535] { R321 += 1, R221 += 1 };
  s1 -> s5 [0, 65535] { R321 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R321 += 1, R221 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R321 += 1, R220 += 1, R221 += 1 };
  s2 -> s3 [9, 13] { R321 += 1, R221 += 1 };
  s2 -> s1 [14, 31] { R321 += 1, R221 += 1 };
  s2 -> s3 [32, 32] { R321 += 1, R221 += 1 };
  s2 -> s1 [33, 65535] { R321 += 1, R221 += 1 };
  s3 -> s1 [0, 65535] { R321 += 1, R221 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R321 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R323 += 1, R223 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s2 [0, 65535] { R323 += 1, R222 += 1, R223 += 1 };
  s1 -> s1 [0, 65535] { R323 += 1, R223 += 1, R12 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R323 += 1 };
  s2 -> s1 [0, 65535] { R323 += 1, R223 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R323 += 1, R222 += 1, R223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R323 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 64] { R325 += 1, R299 += 1 };
  s0 -> s0 [0, 65535] { R324 += 1, R325 += 1 };
  s0 -> s2 [0, 65535] { R325 += 1, R298 += 1, R299 += 1 };
  s0 -> s1 [91, 65535] { R325 += 1, R299 += 1 };
  s1 -> s1 [0, 64] { R325 += 1, R299 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R325 += 1 };
  s1 -> s1 [91, 65535] { R325 += 1, R299 += 1 };
  s2 -> s1 [0, 64] { R325 += 1, R299 += 1 };
  s2 -> s2 [0, 65535] { R325 += 1, R298 += 1, R299 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R325 += 1, R299 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R327 += 1, R300 += 1, R301 += 1 };
  s0 -> s2 [0, 65535] { R327 += 1, R301 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R326 += 1, R327 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R327 += 1, R300 += 1, R301 += 1 };
  s1 -> s2 [0, 65535] { R327 += 1, R301 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R327 += 1 };
  s2 -> s2 [0, 65535] { R327 += 1, R301 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R327 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R329 += 1, R303 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R329 += 1, R303 += 1, R192 += 1, R193 += 1 };
  s0 -> s0 [0, 65535] { R328 += 1, R329 += 1 };
  s0 -> s3 [0, 65535] { R329 += 1, R302 += 1, R303 += 1 };
  s0 -> s4 [9, 13] { R329 += 1, R303 += 1, R193 += 1 };
  s0 -> s1 [14, 31] { R329 += 1, R303 += 1, R193 += 1 };
  s0 -> s4 [32, 32] { R329 += 1, R303 += 1, R193 += 1 };
  s0 -> s1 [33, 65535] { R329 += 1, R303 += 1, R193 += 1 };
  s1 -> s7 [0, 65535] { R329 += 1, R303 += 1 };
  s1 -> s1 [0, 65535] { R329 += 1, R303 += 1, R193 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R329 += 1 };
  s2 -> s1 [0, 8] { R329 += 1, R303 += 1, R193 += 1 };
  s2 -> s2 [0, 65535] { R329 += 1, R303 += 1, R192 += 1, R193 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R329 += 1 };
  s2 -> s4 [9, 13] { R329 += 1, R303 += 1, R193 += 1 };
  s2 -> s1 [14, 31] { R329 += 1, R303 += 1, R193 += 1 };
  s2 -> s4 [32, 32] { R329 += 1, R303 += 1, R193 += 1 };
  s2 -> s1 [33, 65535] { R329 += 1, R303 += 1, R193 += 1 };
  s3 -> s1 [0, 8] { R329 += 1, R303 += 1, R193 += 1 };
  s3 -> s2 [0, 65535] { R329 += 1, R303 += 1, R192 += 1, R193 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R329 += 1, R302 += 1, R303 += 1 };
  s3 -> s4 [9, 13] { R329 += 1, R303 += 1, R193 += 1 };
  s3 -> s1 [14, 31] { R329 += 1, R303 += 1, R193 += 1 };
  s3 -> s4 [32, 32] { R329 += 1, R303 += 1, R193 += 1 };
  s3 -> s1 [33, 65535] { R329 += 1, R303 += 1, R193 += 1 };
  s4 -> s1 [0, 65535] { R329 += 1, R303 += 1, R193 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R329 += 1 };
  s7 -> s7 [0, 65535] { R329 += 1, R303 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R329 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R331 += 1, R305 += 1, R195 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R330 += 1, R331 += 1 };
  s0 -> s2 [0, 65535] { R331 += 1, R305 += 1, R194 += 1, R195 += 1 };
  s0 -> s3 [0, 65535] { R331 += 1, R304 += 1, R305 += 1 };
  s1 -> s1 [0, 65535] { R331 += 1, R305 += 1, R195 += 1, R5 += 1 };
  s1 -> s5 [0, 65535] { R331 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R331 += 1, R305 += 1 };
  s2 -> s1 [0, 65535] { R331 += 1, R305 += 1, R195 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R331 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R331 += 1, R305 += 1, R194 += 1, R195 += 1 };
  s3 -> s1 [0, 65535] { R331 += 1, R305 += 1, R195 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R331 += 1, R305 += 1, R194 += 1, R195 += 1 };
  s3 -> s3 [0, 65535] { R331 += 1, R304 += 1, R305 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R331 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R331 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R331 += 1, R305 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R333 += 1, R307 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R333 += 1, R306 += 1, R307 += 1 };
  s0 -> s0 [0, 65535] { R332 += 1, R333 += 1 };
  s0 -> s3 [0, 65535] { R333 += 1, R307 += 1, R196 += 1, R197 += 1 };
  s0 -> s4 [9, 13] { R333 += 1, R307 += 1, R197 += 1 };
  s0 -> s1 [14, 31] { R333 += 1, R307 += 1, R197 += 1 };
  s0 -> s4 [32, 32] { R333 += 1, R307 += 1, R197 += 1 };
  s0 -> s1 [33, 65535] { R333 += 1, R307 += 1, R197 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R333 += 1, R307 += 1 };
  s1 -> s6 [0, 65535] { R333 += 1 };
  s1 -> s1 [0, 65535] { R333 += 1, R307 += 1, R197 += 1 };
  s2 -> s1 [0, 8] { R333 += 1, R307 += 1, R197 += 1 };
  s2 -> s2 [0, 65535] { R333 += 1, R306 += 1, R307 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R333 += 1, R307 += 1, R196 += 1, R197 += 1 };
  s2 -> s4 [9, 13] { R333 += 1, R307 += 1, R197 += 1 };
  s2 -> s1 [14, 31] { R333 += 1, R307 += 1, R197 += 1 };
  s2 -> s4 [32, 32] { R333 += 1, R307 += 1, R197 += 1 };
  s2 -> s1 [33, 65535] { R333 += 1, R307 += 1, R197 += 1 };
  s3 -> s1 [0, 8] { R333 += 1, R307 += 1, R197 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R333 += 1, R307 += 1, R196 += 1, R197 += 1 };
  s3 -> s6 [0, 65535] { R333 += 1 };
  s3 -> s4 [9, 13] { R333 += 1, R307 += 1, R197 += 1 };
  s3 -> s1 [14, 31] { R333 += 1, R307 += 1, R197 += 1 };
  s3 -> s4 [32, 32] { R333 += 1, R307 += 1, R197 += 1 };
  s3 -> s1 [33, 65535] { R333 += 1, R307 += 1, R197 += 1 };
  s4 -> s1 [0, 65535] { R333 += 1, R307 += 1, R197 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R333 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R333 += 1, R307 += 1 };
  s7 -> s6 [0, 65535] { R333 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R335 += 1, R308 += 1, R309 += 1 };
  s0 -> s2 [0, 65535] { R335 += 1, R309 += 1, R198 += 1, R199 += 1 };
  s0 -> s3 [0, 65535] { R335 += 1, R309 += 1, R199 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s1 -> s1 [0, 65535] { R335 += 1, R308 += 1, R309 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R335 += 1, R309 += 1, R198 += 1, R199 += 1 };
  s1 -> s3 [0, 65535] { R335 += 1, R309 += 1, R199 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R335 += 1, R309 += 1, R198 += 1, R199 += 1 };
  s2 -> s5 [0, 65535] { R335 += 1 };
  s2 -> s3 [0, 65535] { R335 += 1, R309 += 1, R199 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R335 += 1 };
  s3 -> s6 [0, 65535] { R335 += 1, R309 += 1 };
  s3 -> s3 [0, 65535] { R335 += 1, R309 += 1, R199 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R335 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R335 += 1 };
  s6 -> s6 [0, 65535] { R335 += 1, R309 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 64] { R337 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s2 [75, 75] { R337 += 1 };
  s0 -> s1 [76, 65535] { R337 += 1 };
  s1 -> s1 [0, 64] { R337 += 1 };
  s1 -> s2 [75, 75] { R337 += 1 };
  s1 -> s1 [76, 65535] { R337 += 1 };
  s2 -> s2 [0, 64] { R337 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R337 += 1 };
  accepting s2;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R338 += 1, R339 += 1 };
  s0 -> s1 [0, 65535] { R339 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R339 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 74] { R341 += 1 };
  s0 -> s2 [0, 65535] { R341 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R340 += 1, R341 += 1 };
  s0 -> s3 [75, 75] { R341 += 1 };
  s0 -> s1 [76, 65535] { R341 += 1 };
  s1 -> s1 [0, 74] { R341 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [75, 75] { R341 += 1 };
  s1 -> s1 [76, 65535] { R341 += 1 };
  s2 -> s1 [0, 74] { R341 += 1 };
  s2 -> s2 [0, 65535] { R341 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [75, 75] { R341 += 1 };
  s2 -> s1 [76, 65535] { R341 += 1 };
  s3 -> s3 [0, 65535] { R341 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R343 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R343 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R342 += 1, R343 += 1 };
  s0 -> s3 [9, 13] { R343 += 1, R209 += 1 };
  s0 -> s1 [14, 31] { R343 += 1, R209 += 1 };
  s0 -> s3 [32, 32] { R343 += 1, R209 += 1 };
  s0 -> s1 [33, 65535] { R343 += 1, R209 += 1 };
  s1 -> s1 [0, 65535] { R343 += 1, R209 += 1 };
  s1 -> s5 [0, 65535] { R343 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R343 += 1, R209 += 1 };
  s2 -> s2 [0, 65535] { R343 += 1, R208 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R343 += 1, R209 += 1 };
  s2 -> s1 [14, 31] { R343 += 1, R209 += 1 };
  s2 -> s3 [32, 32] { R343 += 1, R209 += 1 };
  s2 -> s1 [33, 65535] { R343 += 1, R209 += 1 };
  s3 -> s1 [0, 65535] { R343 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R343 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R344 += 1, R345 += 1 };
  s0 -> s1 [0, 65535] { R345 += 1, R211 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R345 += 1, R210 += 1, R211 += 1 };
  s1 -> s1 [0, 65535] { R345 += 1, R211 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R345 += 1 };
  s2 -> s1 [0, 65535] { R345 += 1, R211 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R345 += 1, R210 += 1, R211 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R345 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R347 += 1, R213 += 1 };
  s0 -> s2 [0, 65535] { R347 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R346 += 1, R347 += 1 };
  s0 -> s3 [9, 13] { R347 += 1, R213 += 1 };
  s0 -> s1 [14, 31] { R347 += 1, R213 += 1 };
  s0 -> s3 [32, 32] { R347 += 1, R213 += 1 };
  s0 -> s1 [33, 65535] { R347 += 1, R213 += 1 };
  s1 -> s1 [0, 65535] { R347 += 1, R213 += 1 };
  s1 -> s5 [0, 65535] { R347 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R347 += 1, R213 += 1 };
  s2 -> s2 [0, 65535] { R347 += 1, R212 += 1, R213 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R347 += 1, R213 += 1 };
  s2 -> s1 [14, 31] { R347 += 1, R213 += 1 };
  s2 -> s3 [32, 32] { R347 += 1, R213 += 1 };
  s2 -> s1 [33, 65535] { R347 += 1, R213 += 1 };
  s3 -> s1 [0, 65535] { R347 += 1, R213 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R347 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R349 += 1, R214 += 1, R215 += 1 };
  s0 -> s0 [0, 65535] { R348 += 1, R349 += 1 };
  s0 -> s2 [0, 65535] { R349 += 1, R215 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R349 += 1, R214 += 1, R215 += 1 };
  s1 -> s2 [0, 65535] { R349 += 1, R215 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R349 += 1, R215 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R349 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R349 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 74] { R351 += 1, R293 += 1 };
  s0 -> s2 [0, 65535] { R351 += 1, R292 += 1, R293 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s1 [76, 65535] { R351 += 1, R293 += 1 };
  s1 -> s1 [0, 74] { R351 += 1, R293 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R351 += 1 };
  s1 -> s1 [76, 65535] { R351 += 1, R293 += 1 };
  s2 -> s1 [0, 74] { R351 += 1, R293 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R351 += 1, R292 += 1, R293 += 1 };
  s2 -> s1 [76, 65535] { R351 += 1, R293 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R353 += 1, R294 += 1, R295 += 1 };
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s2 [0, 65535] { R353 += 1, R295 += 1, R190 += 1 };
  s1 -> s1 [0, 65535] { R353 += 1, R294 += 1, R295 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R353 += 1, R295 += 1, R190 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R353 += 1, R295 += 1, R190 += 1 };
  s2 -> s4 [0, 65535] { R353 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R353 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 75] { R355 += 1, R297 += 1 };
  s0 -> s2 [0, 65535] { R355 += 1, R296 += 1, R297 += 1 };
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s1 [89, 65535] { R355 += 1, R297 += 1 };
  s1 -> s1 [0, 75] { R355 += 1, R297 += 1 };
  s1 -> s1 [0, 65535] { R355 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [89, 65535] { R355 += 1, R297 += 1 };
  s2 -> s1 [0, 75] { R355 += 1, R297 += 1 };
  s2 -> s2 [0, 65535] { R355 += 1, R296 += 1, R297 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [89, 65535] { R355 += 1, R297 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_24 {
  init s0;
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s0 -> s1 [0, 65535] { R357 += 1, R310 += 1, R311 += 1 };
  s0 -> s2 [0, 65535] { R357 += 1, R311 += 1, R191 += 1 };
  s1 -> s1 [0, 65535] { R357 += 1, R310 += 1, R311 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R357 += 1, R311 += 1, R191 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R357 += 1 };
  s2 -> s2 [0, 65535] { R357 += 1, R311 += 1, R191 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R357 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 74] { R359 += 1, R313 += 1 };
  s0 -> s2 [0, 65535] { R359 += 1, R312 += 1, R313 += 1 };
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s0 -> s3 [75, 75] { R359 += 1, R313 += 1 };
  s0 -> s4 [75, 75] { R359 += 1, R313 += 1 };
  s0 -> s5 [89, 89] { R359 += 1, R313 += 1 };
  s0 -> s1 [90, 65535] { R359 += 1, R313 += 1 };
  s1 -> s1 [0, 74] { R359 += 1, R313 += 1 };
  s1 -> s3 [75, 75] { R359 += 1, R313 += 1 };
  s1 -> s4 [75, 75] { R359 += 1, R313 += 1 };
  s1 -> s5 [89, 89] { R359 += 1, R313 += 1 };
  s1 -> s1 [90, 65535] { R359 += 1, R313 += 1 };
  s2 -> s1 [0, 74] { R359 += 1, R313 += 1 };
  s2 -> s2 [0, 65535] { R359 += 1, R312 += 1, R313 += 1 };
  s2 -> s3 [75, 75] { R359 += 1, R313 += 1 };
  s2 -> s4 [75, 75] { R359 += 1, R313 += 1 };
  s2 -> s5 [89, 89] { R359 += 1, R313 += 1 };
  s2 -> s1 [90, 65535] { R359 += 1, R313 += 1 };
  s3 -> s3 [0, 75] { R359 += 1, R313 += 1 };
  s3 -> s8 [89, 89] { R359 += 1, R313 += 1 };
  s3 -> s3 [90, 65535] { R359 += 1, R313 += 1 };
  s5 -> s5 [0, 74] { R359 += 1, R313 += 1 };
  s5 -> s5 [0, 65535] { R359 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [75, 75] { R359 += 1, R313 += 1 };
  s5 -> s8 [75, 75] { R359 += 1, R313 += 1 };
  s5 -> s5 [89, 65535] { R359 += 1, R313 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R359 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 75] { R359 += 1, R313 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R359 += 1 };
  s8 -> s8 [89, 65535] { R359 += 1, R313 += 1 };
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R201 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s2 [9, 13] { R201 += 1 };
  s0 -> s1 [14, 31] { R201 += 1 };
  s0 -> s2 [32, 32] { R201 += 1 };
  s0 -> s1 [33, 65535] { R201 += 1 };
  s1 -> s1 [0, 65535] { R201 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R201 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s0 -> s1 [0, 65535] { R203 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R203 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R205 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s2 [9, 13] { R205 += 1 };
  s0 -> s1 [14, 31] { R205 += 1 };
  s0 -> s2 [32, 32] { R205 += 1 };
  s0 -> s1 [33, 65535] { R205 += 1 };
  s1 -> s1 [0, 65535] { R205 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R205 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R207 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R206 += 1, R207 += 1 };
  s1 -> s1 [0, 65535] { R207 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P68
automaton P68_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
constraint R2 = R297 && R3 - R309 = 1 && R4 = R359 && R18 = 0 && R19 - R358 = -1 && R208 - R297 = -1 && R209 = R297 && R210 - R297 = -1 && R211 = R297 && R212 = 0 && R213 = 1 && R214 = 0 && R215 = 1 && R216 = R309 && R217 - R309 = 1 && R218 = R309 && R219 - R309 = 1 && R220 = 0 && R221 = 1 && R222 = 0 && R223 = 1 && R292 = 0 && R293 = R297 && R294 = 0 && R295 = R297 && R296 = 0 && R298 = 0 && R299 = R309 && R300 = 0 && R301 = R309 && R302 = 0 && R303 = R309 && R304 = 0 && R305 = R309 && R306 = 0 && R307 = R309 && R308 = 0 && R312 = 0 && R313 = 0 && R314 = 0 && R315 - R358 = -1 && R316 = 0 && R317 - R358 = -1 && R318 = 0 && R319 - R358 = -1 && R320 = 0 && R321 - R358 = -1 && R322 = 0 && R323 - R358 = -1 && R324 = 0 && R325 - R358 = -1 && R326 = 0 && R327 - R358 = -1 && R328 = 0 && R329 - R358 = -1 && R330 = 0 && R331 - R358 = -1 && R332 = 0 && R333 - R358 = -1 && R334 = 0 && R335 - R358 = -1 && R336 = R358 && R337 = R359 && R338 = R358 && R339 = R359 && R340 = R358 && R341 = R359 && R342 = R358 && R343 = R359 && R344 = R358 && R345 = R359 && R346 = R358 && R347 = R359 && R348 = R358 && R349 = R359 && R350 = R358 && R351 = R359 && R352 = R358 && R353 = R359 && R354 = R358 && R355 = R359 && R356 = R358 && R357 = R359 && R0 != 0 && R1 != 0 && R13 < 1 && R14 < 1 && 0 < R297 && -1 < R309 && R358 - R359 < 1 && 0 < R358 && (R5 != 0 || ((R0 != R193 || R192 - R193 = -1 || R193 < 0) && (R0 = R193 || R0 < 1))) && (R5 != 0 || ((R0 != R195 || R194 - R195 = -1 || R195 < 0) && (R0 = R195 || R0 < 1))) && (R7 != 0 || ((R1 != R201 || R200 - R201 = -1 || R201 < 0) && (R1 = R201 || R1 < 1))) && (R7 != 0 || ((R1 != R203 || R202 - R203 = -1 || R203 < 0) && (R1 = R203 || R1 < 1))) && (R196 != 0 || ((R6 != 0 || ((R0 != R197 || R197 = 1 || R197 < 0) && (R0 = R197 || R197 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R197 || R197 = 1 || R197 < 0) && (R197 != 1 || -1 < R0) && (R0 = R197 || R197 = 1))))) && (R198 != 0 || ((R6 != 0 || ((R0 != R199 || R199 = 1 || R199 < 0) && (R0 = R199 || R199 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R199 || R199 = 1 || R199 < 0) && (R199 != 1 || -1 < R0) && (R0 = R199 || R199 = 1))))) && (R204 != 0 || ((R8 != 0 || ((R1 != R205 || R205 = 1 || R205 < 0) && (R1 = R205 || R205 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R205 || R205 = 1 || R205 < 0) && (R205 != 1 || -1 < R1) && (R1 = R205 || R205 = 1))))) && (R206 != 0 || ((R8 != 0 || ((R1 != R207 || R207 = 1 || R207 < 0) && (R1 = R207 || R207 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R207 || R207 = 1 || R207 < 0) && (R207 != 1 || -1 < R1) && (R1 = R207 || R207 = 1))))) && (R5 = 0 || (R0 = R193 && R192 - R193 = -1)) && (R5 = 0 || (R0 = R195 && R194 - R195 = -1)) && (R7 = 0 || (R1 = R201 && R200 - R201 = -1)) && (R7 = 0 || (R1 = R203 && R202 - R203 = -1)) && (R191 = 0 || (R310 = 0 && R311 = 0)) && (R196 = 0 || (R6 = 0 && R0 < 0)) && (R198 = 0 || (R6 = 0 && R0 < 0)) && (R204 = 0 || (R8 = 0 && R1 < 0)) && (R206 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
