// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R708, R709, R710, R711, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R745 += 1 };
  s0 -> s0 [0, 65535] { R744 += 1, R745 += 1 };
  s0 -> s2 [65, 65] { R745 += 1 };
  s0 -> s1 [66, 65535] { R745 += 1 };
  s1 -> s1 [0, 64] { R745 += 1 };
  s1 -> s2 [65, 65] { R745 += 1 };
  s1 -> s1 [66, 65535] { R745 += 1 };
  s2 -> s2 [0, 65535] { R745 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R747 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R746 += 1, R747 += 1 };
  s1 -> s1 [0, 65535] { R747 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R749 += 1 };
  s0 -> s0 [0, 65535] { R748 += 1, R749 += 1 };
  s0 -> s2 [0, 65535] { R749 += 1, R9 += 1 };
  s0 -> s3 [65, 65] { R749 += 1 };
  s0 -> s1 [66, 65535] { R749 += 1 };
  s1 -> s1 [0, 64] { R749 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R749 += 1 };
  s1 -> s1 [66, 65535] { R749 += 1 };
  s2 -> s1 [0, 64] { R749 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R749 += 1, R9 += 1 };
  s2 -> s3 [65, 65] { R749 += 1 };
  s2 -> s1 [66, 65535] { R749 += 1 };
  s3 -> s3 [0, 65535] { R749 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R751 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R751 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R750 += 1, R751 += 1 };
  s0 -> s3 [9, 13] { R751 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R751 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R751 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R751 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R751 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R751 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R751 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R751 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R751 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R751 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R751 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R751 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R751 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R751 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R753 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R753 += 1, R19 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R752 += 1, R753 += 1 };
  s1 -> s1 [0, 65535] { R753 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R753 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R753 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R753 += 1, R19 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R753 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R755 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R754 += 1, R755 += 1 };
  s0 -> s2 [0, 65535] { R755 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R755 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R755 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R755 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R755 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R755 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R755 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R755 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R755 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R755 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R755 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R755 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R755 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R755 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R755 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R757 += 1, R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R756 += 1, R757 += 1 };
  s0 -> s2 [0, 65535] { R757 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R757 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R757 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R757 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R757 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R757 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R759 += 1, R719 += 1 };
  s0 -> s0 [0, 65535] { R758 += 1, R759 += 1 };
  s0 -> s2 [0, 65535] { R759 += 1, R718 += 1, R719 += 1 };
  s0 -> s1 [66, 65535] { R759 += 1, R719 += 1 };
  s1 -> s1 [0, 64] { R759 += 1, R719 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R759 += 1 };
  s1 -> s1 [66, 65535] { R759 += 1, R719 += 1 };
  s2 -> s1 [0, 64] { R759 += 1, R719 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R759 += 1, R718 += 1, R719 += 1 };
  s2 -> s1 [66, 65535] { R759 += 1, R719 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R761 += 1, R721 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R760 += 1, R761 += 1 };
  s0 -> s2 [0, 65535] { R761 += 1, R720 += 1, R721 += 1 };
  s1 -> s1 [0, 65535] { R761 += 1, R721 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R761 += 1 };
  s2 -> s1 [0, 65535] { R761 += 1, R721 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R761 += 1, R720 += 1, R721 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R761 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R763 += 1, R722 += 1, R723 += 1 };
  s0 -> s2 [0, 65535] { R763 += 1, R723 += 1 };
  s0 -> s0 [0, 65535] { R762 += 1, R763 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R763 += 1, R722 += 1, R723 += 1 };
  s1 -> s2 [0, 65535] { R763 += 1, R723 += 1 };
  s2 -> s3 [0, 65535] { R763 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R763 += 1, R723 += 1 };
  s3 -> s3 [0, 65535] { R763 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R765 += 1, R725 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R765 += 1, R724 += 1, R725 += 1 };
  s0 -> s0 [0, 65535] { R764 += 1, R765 += 1 };
  s1 -> s4 [0, 65535] { R765 += 1 };
  s1 -> s1 [0, 65535] { R765 += 1, R725 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R765 += 1, R725 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R765 += 1, R724 += 1, R725 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R765 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R767 += 1, R727 += 1 };
  s0 -> s2 [0, 65535] { R767 += 1, R726 += 1, R727 += 1 };
  s0 -> s3 [0, 65535] { R767 += 1, R727 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R766 += 1, R767 += 1 };
  s0 -> s1 [67, 65535] { R767 += 1, R727 += 1 };
  s1 -> s1 [0, 65] { R767 += 1, R727 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R767 += 1 };
  s1 -> s1 [67, 65535] { R767 += 1, R727 += 1 };
  s2 -> s1 [0, 65] { R767 += 1, R727 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R767 += 1, R726 += 1, R727 += 1 };
  s2 -> s3 [0, 65535] { R767 += 1, R727 += 1, R487 += 1 };
  s2 -> s1 [67, 65535] { R767 += 1, R727 += 1 };
  s3 -> s1 [0, 65] { R767 += 1, R727 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R767 += 1, R727 += 1, R487 += 1 };
  s3 -> s5 [0, 65535] { R767 += 1 };
  s3 -> s1 [67, 65535] { R767 += 1, R727 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R767 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R769 += 1, R729 += 1, R711 += 1 };
  s0 -> s2 [0, 65535] { R769 += 1, R728 += 1, R729 += 1 };
  s0 -> s0 [0, 65535] { R768 += 1, R769 += 1 };
  s0 -> s3 [66, 66] { R769 += 1, R729 += 1, R711 += 1 };
  s0 -> s1 [67, 65535] { R769 += 1, R729 += 1, R711 += 1 };
  s1 -> s1 [0, 65] { R769 += 1, R729 += 1, R711 += 1 };
  s1 -> s3 [66, 66] { R769 += 1, R729 += 1, R711 += 1 };
  s1 -> s1 [67, 65535] { R769 += 1, R729 += 1, R711 += 1 };
  s2 -> s1 [0, 65] { R769 += 1, R729 += 1, R711 += 1 };
  s2 -> s2 [0, 65535] { R769 += 1, R728 += 1, R729 += 1 };
  s2 -> s3 [66, 66] { R769 += 1, R729 += 1, R711 += 1 };
  s2 -> s1 [67, 65535] { R769 += 1, R729 += 1, R711 += 1 };
  s3 -> s4 [0, 65535] { R769 += 1, R729 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R769 += 1 };
  s3 -> s3 [0, 65535] { R769 += 1, R729 += 1, R711 += 1 };
  s4 -> s4 [0, 65535] { R769 += 1, R729 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R769 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R769 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R771 += 1, R730 += 1, R731 += 1 };
  s0 -> s2 [0, 65535] { R771 += 1, R731 += 1, R716 += 1, R717 += 1 };
  s0 -> s0 [0, 65535] { R770 += 1, R771 += 1 };
  s0 -> s3 [0, 65535] { R771 += 1, R731 += 1, R715 += 1, R716 += 1 };
  s1 -> s1 [0, 65535] { R771 += 1, R730 += 1, R731 += 1 };
  s1 -> s2 [0, 65535] { R771 += 1, R731 += 1, R716 += 1, R717 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R771 += 1, R731 += 1, R715 += 1, R716 += 1 };
  s2 -> s4 [0, 65535] { R771 += 1 };
  s2 -> s2 [0, 65535] { R771 += 1, R731 += 1, R716 += 1, R717 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R771 += 1, R731 += 1 };
  s3 -> s4 [0, 65535] { R771 += 1 };
  s3 -> s2 [0, 65535] { R771 += 1, R731 += 1, R716 += 1, R717 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R771 += 1, R731 += 1, R715 += 1, R716 += 1 };
  s4 -> s4 [0, 65535] { R771 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R771 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R771 += 1, R731 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R773 += 1, R733 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R772 += 1, R773 += 1 };
  s0 -> s2 [0, 65535] { R773 += 1, R732 += 1, R733 += 1 };
  s1 -> s4 [0, 65535] { R773 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R773 += 1, R733 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R773 += 1, R733 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R773 += 1, R732 += 1, R733 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R773 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 64] { R775 += 1, R735 += 1 };
  s0 -> s2 [0, 65535] { R775 += 1, R734 += 1, R735 += 1 };
  s0 -> s0 [0, 65535] { R774 += 1, R775 += 1 };
  s0 -> s3 [65, 65] { R775 += 1, R735 += 1 };
  s0 -> s4 [65, 65] { R775 += 1, R735 += 1 };
  s0 -> s5 [66, 66] { R775 += 1, R735 += 1 };
  s0 -> s1 [67, 65535] { R775 += 1, R735 += 1 };
  s1 -> s1 [0, 64] { R775 += 1, R735 += 1 };
  s1 -> s3 [65, 65] { R775 += 1, R735 += 1 };
  s1 -> s4 [65, 65] { R775 += 1, R735 += 1 };
  s1 -> s5 [66, 66] { R775 += 1, R735 += 1 };
  s1 -> s1 [67, 65535] { R775 += 1, R735 += 1 };
  s2 -> s1 [0, 64] { R775 += 1, R735 += 1 };
  s2 -> s2 [0, 65535] { R775 += 1, R734 += 1, R735 += 1 };
  s2 -> s3 [65, 65] { R775 += 1, R735 += 1 };
  s2 -> s4 [65, 65] { R775 += 1, R735 += 1 };
  s2 -> s5 [66, 66] { R775 += 1, R735 += 1 };
  s2 -> s1 [67, 65535] { R775 += 1, R735 += 1 };
  s3 -> s3 [0, 65] { R775 += 1, R735 += 1 };
  s3 -> s7 [66, 66] { R775 += 1, R735 += 1 };
  s3 -> s3 [67, 65535] { R775 += 1, R735 += 1 };
  s5 -> s5 [0, 64] { R775 += 1, R735 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R775 += 1 };
  s5 -> s7 [65, 65] { R775 += 1, R735 += 1 };
  s5 -> s8 [65, 65] { R775 += 1, R735 += 1 };
  s5 -> s5 [66, 65535] { R775 += 1, R735 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R775 += 1 };
  s7 -> s7 [0, 65535] { R775 += 1, R735 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R775 += 1 };
  s9 -> s9 [0, 65535] { R775 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 64] { R777 += 1, R737 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R776 += 1, R777 += 1 };
  s0 -> s2 [0, 65535] { R777 += 1, R736 += 1, R737 += 1 };
  s0 -> s3 [65, 65] { R777 += 1, R737 += 1, R484 += 1 };
  s0 -> s4 [65, 65] { R777 += 1, R737 += 1, R484 += 1 };
  s0 -> s1 [66, 65535] { R777 += 1, R737 += 1, R484 += 1 };
  s1 -> s1 [0, 64] { R777 += 1, R737 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R777 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R777 += 1, R737 += 1, R484 += 1 };
  s1 -> s4 [65, 65] { R777 += 1, R737 += 1, R484 += 1 };
  s1 -> s1 [66, 65535] { R777 += 1, R737 += 1, R484 += 1 };
  s2 -> s1 [0, 64] { R777 += 1, R737 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R777 += 1, R736 += 1, R737 += 1 };
  s2 -> s3 [65, 65] { R777 += 1, R737 += 1, R484 += 1 };
  s2 -> s4 [65, 65] { R777 += 1, R737 += 1, R484 += 1 };
  s2 -> s1 [66, 65535] { R777 += 1, R737 += 1, R484 += 1 };
  s3 -> s6 [0, 65535] { R777 += 1 };
  s3 -> s3 [0, 65535] { R777 += 1, R737 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R777 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R777 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 64] { R779 += 1, R739 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R778 += 1, R779 += 1 };
  s0 -> s2 [0, 65535] { R779 += 1, R738 += 1, R739 += 1 };
  s0 -> s3 [65, 65] { R779 += 1, R739 += 1, R486 += 1 };
  s0 -> s4 [65, 65] { R779 += 1, R739 += 1, R486 += 1 };
  s0 -> s1 [66, 65535] { R779 += 1, R739 += 1, R486 += 1 };
  s1 -> s1 [0, 64] { R779 += 1, R739 += 1, R486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R779 += 1 };
  s1 -> s3 [65, 65] { R779 += 1, R739 += 1, R486 += 1 };
  s1 -> s4 [65, 65] { R779 += 1, R739 += 1, R486 += 1 };
  s1 -> s1 [66, 65535] { R779 += 1, R739 += 1, R486 += 1 };
  s2 -> s1 [0, 64] { R779 += 1, R739 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R779 += 1, R738 += 1, R739 += 1 };
  s2 -> s3 [65, 65] { R779 += 1, R739 += 1, R486 += 1 };
  s2 -> s4 [65, 65] { R779 += 1, R739 += 1, R486 += 1 };
  s2 -> s1 [66, 65535] { R779 += 1, R739 += 1, R486 += 1 };
  s3 -> s6 [0, 65535] { R779 += 1 };
  s3 -> s3 [0, 65535] { R779 += 1, R739 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R779 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R779 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 64] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [0, 64] { R781 += 1, R741 += 1, R709 += 1 };
  s0 -> s3 [0, 65535] { R781 += 1, R740 += 1, R741 += 1 };
  s0 -> s0 [0, 65535] { R780 += 1, R781 += 1 };
  s0 -> s4 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s0 -> s5 [65, 65] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s0 -> s6 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s0 -> s7 [65, 65] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s0 -> s1 [66, 65535] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [67, 65535] { R781 += 1, R741 += 1, R709 += 1 };
  s1 -> s1 [0, 64] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s1 -> s2 [0, 64] { R781 += 1, R741 += 1, R709 += 1 };
  s1 -> s4 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s1 -> s5 [65, 65] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s1 -> s6 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s1 -> s7 [65, 65] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [66, 65535] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s1 -> s2 [67, 65535] { R781 += 1, R741 += 1, R709 += 1 };
  s2 -> s2 [0, 64] { R781 += 1, R741 += 1, R709 += 1 };
  s2 -> s2 [0, 65535] { R781 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s2 -> s6 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s2 -> s2 [67, 65535] { R781 += 1, R741 += 1, R709 += 1 };
  s3 -> s1 [0, 64] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s3 -> s2 [0, 64] { R781 += 1, R741 += 1, R709 += 1 };
  s3 -> s3 [0, 65535] { R781 += 1, R740 += 1, R741 += 1 };
  s3 -> s4 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s3 -> s5 [65, 65] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s3 -> s6 [65, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s3 -> s7 [65, 65] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s3 -> s1 [66, 65535] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s3 -> s2 [67, 65535] { R781 += 1, R741 += 1, R709 += 1 };
  s4 -> s4 [0, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s4 -> s4 [0, 65535] { R781 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [67, 65535] { R781 += 1, R741 += 1, R709 += 1 };
  s5 -> s4 [0, 65] { R781 += 1, R741 += 1, R709 += 1 };
  s5 -> s5 [0, 65535] { R781 += 1, R741 += 1, R708 += 1, R709 += 1 };
  s5 -> s4 [67, 65535] { R781 += 1, R741 += 1, R709 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R781 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s6, s8;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 64] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s0 -> s0 [0, 65535] { R782 += 1, R783 += 1 };
  s0 -> s2 [0, 65535] { R783 += 1, R742 += 1, R743 += 1 };
  s0 -> s3 [65, 65] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s0 -> s4 [65, 65] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s0 -> s1 [66, 65535] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s1 -> s1 [0, 64] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R783 += 1 };
  s1 -> s3 [65, 65] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s1 -> s4 [65, 65] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s1 -> s1 [66, 65535] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s2 -> s1 [0, 64] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R783 += 1, R742 += 1, R743 += 1 };
  s2 -> s3 [65, 65] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s2 -> s4 [65, 65] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s2 -> s1 [66, 65535] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s3 -> s3 [0, 65535] { R783 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R783 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R783 += 1, R743 += 1, R712 += 1, R713 += 1 };
  s5 -> s5 [0, 65535] { R783 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R731 && R2 = R783 && R16 - R731 = -1 && R17 = R731 && R18 - R731 = -1 && R19 = R731 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R711 + -1*R709 = 0 && R710 + R708 = 0 && R718 = 0 && R719 = R731 && R720 = 0 && R721 = R731 && R722 = 0 && R723 = R731 && R724 = 0 && R725 = R731 && R726 = 0 && R727 = R731 && R728 = 0 && R729 = R731 && R730 = 0 && R734 = 0 && R735 = 0 && R740 = 0 && R741 = 0 && R744 = 1 && R745 = R783 && R746 = 1 && R747 = R783 && R748 = 1 && R749 = R783 && R750 = 1 && R751 = R783 && R752 = 1 && R753 = R783 && R754 = 1 && R755 = R783 && R756 = 1 && R757 = R783 && R758 = 1 && R759 = R783 && R760 = 1 && R761 = R783 && R762 = 1 && R763 = R783 && R764 = 1 && R765 = R783 && R766 = 1 && R767 = R783 && R768 = 1 && R769 = R783 && R770 = 1 && R771 = R783 && R772 = 1 && R773 = R783 && R774 = 1 && R775 = R783 && R776 = 1 && R777 = R783 && R778 = 1 && R779 = R783 && R780 = 1 && R781 = R783 && R782 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R711 + -1*R709 < 1 && 0 < R731 && 0 < R783 && (R711 + R709 != 0 || R717 + R714 = 0 || (R715 + R712 = 0 && R716 + R713 = 0)) && (R715 + R712 != 0 || R711 + R709 + -1*R716 + -1*R713 = 0 || R711 + R709 < 1) && (R15 = 0 || (R732 = 0 && R733 = 0)) && (R15 = 0 || (R736 = 0 && R737 = 0)) && (R15 = 0 || (R738 = 0 && R739 = 0)) && (R15 = 0 || (R742 = 0 && R743 = 0)) && (R715 + R712 = 0 || R711 + R709 < 1);
// End of Parikh automata intersection problem
