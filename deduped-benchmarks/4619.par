// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R1368, R1369, R14, R15, R1598, R1599, R16, R1600, R1601, R1674, R1675, R1676, R1677, R1678, R1679, R1680, R1681, R1682, R1683, R1684, R1685, R1686, R1687, R1688, R1689, R1690, R1691, R1692, R1693, R1694, R1695, R1696, R1697, R1698, R1699, R17, R1700, R1701, R1702, R1703, R1704, R1705, R1706, R1707, R1708, R1709, R1710, R1711, R1712, R1713, R1714, R1715, R1716, R1717, R1718, R1719, R1720, R1721, R1722, R1723, R1724, R1725, R1726, R1727, R1728, R1729, R1730, R1731, R1732, R1733, R1734, R1735, R1736, R1737, R1738, R1739, R1740, R1741, R1742, R1743, R1744, R1745, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1707 += 1 };
  s0 -> s0 [0, 65535] { R1706 += 1, R1707 += 1 };
  s0 -> s2 [65, 65] { R1707 += 1 };
  s0 -> s1 [66, 65535] { R1707 += 1 };
  s1 -> s1 [0, 64] { R1707 += 1 };
  s1 -> s2 [65, 65] { R1707 += 1 };
  s1 -> s1 [66, 65535] { R1707 += 1 };
  s2 -> s2 [0, 65535] { R1707 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1709 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1708 += 1, R1709 += 1 };
  s1 -> s1 [0, 65535] { R1709 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1711 += 1 };
  s0 -> s0 [0, 65535] { R1710 += 1, R1711 += 1 };
  s0 -> s2 [0, 65535] { R1711 += 1, R9 += 1 };
  s0 -> s3 [65, 65] { R1711 += 1 };
  s0 -> s1 [66, 65535] { R1711 += 1 };
  s1 -> s1 [0, 64] { R1711 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1711 += 1 };
  s1 -> s1 [66, 65535] { R1711 += 1 };
  s2 -> s1 [0, 64] { R1711 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1711 += 1, R9 += 1 };
  s2 -> s3 [65, 65] { R1711 += 1 };
  s2 -> s1 [66, 65535] { R1711 += 1 };
  s3 -> s3 [0, 65535] { R1711 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1713 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1713 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1712 += 1, R1713 += 1 };
  s0 -> s3 [9, 13] { R1713 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1713 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1713 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1713 += 1, R17 += 1 };
  s1 -> s1 [0, 65535] { R1713 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1713 += 1 };
  s2 -> s1 [0, 8] { R1713 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1713 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1713 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1713 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1713 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1713 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1713 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1713 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R1715 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1715 += 1, R18 += 1, R19 += 1 };
  s0 -> s0 [0, 65535] { R1714 += 1, R1715 += 1 };
  s1 -> s4 [0, 65535] { R1715 += 1 };
  s1 -> s1 [0, 65535] { R1715 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1715 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1715 += 1, R18 += 1, R19 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1715 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1717 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1717 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1716 += 1, R1717 += 1 };
  s0 -> s3 [9, 13] { R1717 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1717 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1717 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1717 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1717 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1717 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R1717 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1717 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1717 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1717 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1717 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1717 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1717 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1717 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1719 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1718 += 1, R1719 += 1 };
  s0 -> s2 [0, 65535] { R1719 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1719 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R1719 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1719 += 1 };
  s2 -> s2 [0, 65535] { R1719 += 1, R23 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1719 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R1721 += 1, R1681 += 1 };
  s0 -> s2 [0, 65535] { R1721 += 1, R1680 += 1, R1681 += 1 };
  s0 -> s0 [0, 65535] { R1720 += 1, R1721 += 1 };
  s0 -> s1 [66, 65535] { R1721 += 1, R1681 += 1 };
  s1 -> s1 [0, 64] { R1721 += 1, R1681 += 1 };
  s1 -> s1 [0, 65535] { R1721 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1721 += 1, R1681 += 1 };
  s2 -> s1 [0, 64] { R1721 += 1, R1681 += 1 };
  s2 -> s2 [0, 65535] { R1721 += 1, R1680 += 1, R1681 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1721 += 1, R1681 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1723 += 1, R1682 += 1, R1683 += 1 };
  s0 -> s2 [0, 65535] { R1723 += 1, R1683 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1722 += 1, R1723 += 1 };
  s1 -> s1 [0, 65535] { R1723 += 1, R1682 += 1, R1683 += 1 };
  s1 -> s2 [0, 65535] { R1723 += 1, R1683 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1723 += 1, R1683 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R1723 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1723 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1725 += 1, R1685 += 1 };
  s0 -> s2 [0, 65535] { R1725 += 1, R1684 += 1, R1685 += 1 };
  s0 -> s0 [0, 65535] { R1724 += 1, R1725 += 1 };
  s1 -> s1 [0, 65535] { R1725 += 1, R1685 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1725 += 1 };
  s2 -> s1 [0, 65535] { R1725 += 1, R1685 += 1 };
  s2 -> s2 [0, 65535] { R1725 += 1, R1684 += 1, R1685 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1725 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1727 += 1, R1687 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R1727 += 1, R1686 += 1, R1687 += 1 };
  s0 -> s0 [0, 65535] { R1726 += 1, R1727 += 1 };
  s1 -> s1 [0, 65535] { R1727 += 1, R1687 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1727 += 1 };
  s2 -> s1 [0, 65535] { R1727 += 1, R1687 += 1, R485 += 1 };
  s2 -> s2 [0, 65535] { R1727 += 1, R1686 += 1, R1687 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1727 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1729 += 1, R1689 += 1 };
  s0 -> s0 [0, 65535] { R1728 += 1, R1729 += 1 };
  s0 -> s2 [0, 65535] { R1729 += 1, R1688 += 1, R1689 += 1 };
  s0 -> s1 [67, 65535] { R1729 += 1, R1689 += 1 };
  s1 -> s1 [0, 65] { R1729 += 1, R1689 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1729 += 1 };
  s1 -> s1 [67, 65535] { R1729 += 1, R1689 += 1 };
  s2 -> s1 [0, 65] { R1729 += 1, R1689 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1729 += 1, R1688 += 1, R1689 += 1 };
  s2 -> s1 [67, 65535] { R1729 += 1, R1689 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1731 += 1, R1690 += 1, R1691 += 1 };
  s0 -> s0 [0, 65535] { R1730 += 1, R1731 += 1 };
  s0 -> s2 [0, 65535] { R1731 += 1, R1691 += 1 };
  s1 -> s1 [0, 65535] { R1731 += 1, R1690 += 1, R1691 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1731 += 1, R1691 += 1 };
  s2 -> s3 [0, 65535] { R1731 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1731 += 1, R1691 += 1 };
  s3 -> s3 [0, 65535] { R1731 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1733 += 1, R1693 += 1 };
  s0 -> s2 [0, 65535] { R1733 += 1, R1692 += 1, R1693 += 1 };
  s0 -> s3 [0, 65535] { R1733 += 1, R1693 += 1, R1678 += 1, R1679 += 1 };
  s0 -> s0 [0, 65535] { R1732 += 1, R1733 += 1 };
  s1 -> s1 [0, 65535] { R1733 += 1, R1693 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1733 += 1 };
  s2 -> s1 [0, 65535] { R1733 += 1, R1693 += 1 };
  s2 -> s2 [0, 65535] { R1733 += 1, R1692 += 1, R1693 += 1 };
  s2 -> s3 [0, 65535] { R1733 += 1, R1693 += 1, R1678 += 1, R1679 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1733 += 1, R1693 += 1 };
  s3 -> s3 [0, 65535] { R1733 += 1, R1693 += 1, R1678 += 1, R1679 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1733 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1733 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R1734 += 1, R1735 += 1 };
  s0 -> s1 [0, 65535] { R1735 += 1, R1694 += 1, R1695 += 1 };
  s0 -> s2 [0, 65535] { R1735 += 1, R1695 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R1735 += 1, R1694 += 1, R1695 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1735 += 1, R1695 += 1, R15 += 1 };
  s2 -> s3 [0, 65535] { R1735 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1735 += 1, R1695 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R1735 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 64] { R1737 += 1, R1697 += 1 };
  s0 -> s0 [0, 65535] { R1736 += 1, R1737 += 1 };
  s0 -> s2 [0, 65535] { R1737 += 1, R1696 += 1, R1697 += 1 };
  s0 -> s3 [65, 65] { R1737 += 1, R1697 += 1 };
  s0 -> s4 [65, 65] { R1737 += 1, R1697 += 1 };
  s0 -> s5 [66, 66] { R1737 += 1, R1697 += 1 };
  s0 -> s1 [67, 65535] { R1737 += 1, R1697 += 1 };
  s1 -> s1 [0, 64] { R1737 += 1, R1697 += 1 };
  s1 -> s3 [65, 65] { R1737 += 1, R1697 += 1 };
  s1 -> s4 [65, 65] { R1737 += 1, R1697 += 1 };
  s1 -> s5 [66, 66] { R1737 += 1, R1697 += 1 };
  s1 -> s1 [67, 65535] { R1737 += 1, R1697 += 1 };
  s2 -> s1 [0, 64] { R1737 += 1, R1697 += 1 };
  s2 -> s2 [0, 65535] { R1737 += 1, R1696 += 1, R1697 += 1 };
  s2 -> s3 [65, 65] { R1737 += 1, R1697 += 1 };
  s2 -> s4 [65, 65] { R1737 += 1, R1697 += 1 };
  s2 -> s5 [66, 66] { R1737 += 1, R1697 += 1 };
  s2 -> s1 [67, 65535] { R1737 += 1, R1697 += 1 };
  s3 -> s3 [0, 65] { R1737 += 1, R1697 += 1 };
  s3 -> s7 [66, 66] { R1737 += 1, R1697 += 1 };
  s3 -> s3 [67, 65535] { R1737 += 1, R1697 += 1 };
  s5 -> s5 [0, 64] { R1737 += 1, R1697 += 1 };
  s5 -> s5 [0, 65535] { R1737 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R1737 += 1, R1697 += 1 };
  s5 -> s8 [65, 65] { R1737 += 1, R1697 += 1 };
  s5 -> s5 [66, 65535] { R1737 += 1, R1697 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1737 += 1, R1697 += 1 };
  s7 -> s9 [0, 65535] { R1737 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1737 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1737 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 64] { R1739 += 1, R1699 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R1739 += 1, R1698 += 1, R1699 += 1 };
  s0 -> s0 [0, 65535] { R1738 += 1, R1739 += 1 };
  s0 -> s3 [65, 65] { R1739 += 1, R1699 += 1, R484 += 1 };
  s0 -> s4 [65, 65] { R1739 += 1, R1699 += 1, R484 += 1 };
  s0 -> s1 [66, 65535] { R1739 += 1, R1699 += 1, R484 += 1 };
  s1 -> s1 [0, 64] { R1739 += 1, R1699 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R1739 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1739 += 1, R1699 += 1, R484 += 1 };
  s1 -> s4 [65, 65] { R1739 += 1, R1699 += 1, R484 += 1 };
  s1 -> s1 [66, 65535] { R1739 += 1, R1699 += 1, R484 += 1 };
  s2 -> s1 [0, 64] { R1739 += 1, R1699 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R1739 += 1, R1698 += 1, R1699 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1739 += 1, R1699 += 1, R484 += 1 };
  s2 -> s4 [65, 65] { R1739 += 1, R1699 += 1, R484 += 1 };
  s2 -> s1 [66, 65535] { R1739 += 1, R1699 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1739 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1739 += 1 };
  s4 -> s4 [0, 65535] { R1739 += 1, R1699 += 1, R484 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1739 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 64] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s0 -> s2 [0, 64] { R1741 += 1, R1701 += 1 };
  s0 -> s0 [0, 65535] { R1740 += 1, R1741 += 1 };
  s0 -> s3 [0, 65535] { R1741 += 1, R1700 += 1, R1701 += 1 };
  s0 -> s4 [65, 65] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s0 -> s5 [65, 65] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s0 -> s6 [65, 65] { R1741 += 1, R1701 += 1 };
  s0 -> s7 [65, 65] { R1741 += 1, R1701 += 1 };
  s0 -> s1 [66, 65535] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s0 -> s2 [67, 65535] { R1741 += 1, R1701 += 1 };
  s1 -> s1 [0, 64] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s1 -> s2 [0, 64] { R1741 += 1, R1701 += 1 };
  s1 -> s4 [65, 65] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s1 -> s5 [65, 65] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s1 -> s6 [65, 65] { R1741 += 1, R1701 += 1 };
  s1 -> s7 [65, 65] { R1741 += 1, R1701 += 1 };
  s1 -> s1 [66, 65535] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s1 -> s2 [67, 65535] { R1741 += 1, R1701 += 1 };
  s2 -> s2 [0, 64] { R1741 += 1, R1701 += 1 };
  s2 -> s2 [0, 65535] { R1741 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [65, 65] { R1741 += 1, R1701 += 1 };
  s2 -> s7 [65, 65] { R1741 += 1, R1701 += 1 };
  s2 -> s2 [67, 65535] { R1741 += 1, R1701 += 1 };
  s3 -> s1 [0, 64] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s3 -> s2 [0, 64] { R1741 += 1, R1701 += 1 };
  s3 -> s3 [0, 65535] { R1741 += 1, R1700 += 1, R1701 += 1 };
  s3 -> s4 [65, 65] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s3 -> s5 [65, 65] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s3 -> s6 [65, 65] { R1741 += 1, R1701 += 1 };
  s3 -> s7 [65, 65] { R1741 += 1, R1701 += 1 };
  s3 -> s1 [66, 65535] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s3 -> s2 [67, 65535] { R1741 += 1, R1701 += 1 };
  s4 -> s6 [0, 65] { R1741 += 1, R1701 += 1 };
  s4 -> s4 [0, 65535] { R1741 += 1, R1701 += 1, R1368 += 1 };
  s4 -> s6 [67, 65535] { R1741 += 1, R1701 += 1 };
  s6 -> s6 [0, 65] { R1741 += 1, R1701 += 1 };
  s6 -> s6 [0, 65535] { R1741 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [67, 65535] { R1741 += 1, R1701 += 1 };
  s7 -> s7 [0, 65535] { R1741 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s2, s6, s7, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 64] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s0 -> s2 [0, 64] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s0 [0, 65535] { R1742 += 1, R1743 += 1 };
  s0 -> s3 [0, 65535] { R1743 += 1, R1702 += 1, R1703 += 1 };
  s0 -> s4 [65, 65] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s5 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s0 -> s6 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s0 -> s7 [65, 65] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s8 [66, 66] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s0 -> s2 [66, 65535] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s1 [67, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s1 -> s1 [0, 64] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s1 -> s5 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s1 -> s6 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s1 -> s8 [66, 66] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s1 -> s1 [67, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s2 -> s1 [0, 64] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s2 -> s2 [0, 64] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s4 [65, 65] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s5 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s2 -> s6 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s2 -> s7 [65, 65] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s8 [66, 66] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s2 -> s2 [66, 65535] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s1 [67, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s3 -> s1 [0, 64] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s3 -> s2 [0, 64] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s3 [0, 65535] { R1743 += 1, R1702 += 1, R1703 += 1 };
  s3 -> s4 [65, 65] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s5 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s3 -> s6 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s3 -> s7 [65, 65] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s8 [66, 66] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s3 -> s2 [66, 65535] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s1 [67, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s5 -> s5 [0, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s5 -> s11 [66, 66] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s5 -> s5 [67, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s7 -> s5 [0, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s7 -> s7 [0, 65535] { R1743 += 1, R1703 += 1, R1598 += 1, R1599 += 1 };
  s7 -> s11 [66, 66] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s7 -> s5 [67, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s8 -> s8 [0, 64] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s8 -> s9 [0, 64] { R1743 += 1, R1703 += 1 };
  s8 -> s10 [65, 65] { R1743 += 1, R1703 += 1 };
  s8 -> s11 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s8 -> s12 [65, 65] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s8 -> s13 [65, 65] { R1743 += 1, R1703 += 1 };
  s8 -> s8 [66, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s8 -> s9 [66, 65535] { R1743 += 1, R1703 += 1 };
  s9 -> s9 [0, 64] { R1743 += 1, R1703 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s9 [0, 65535] { R1743 += 1 };
  s9 -> s10 [65, 65] { R1743 += 1, R1703 += 1 };
  s9 -> s13 [65, 65] { R1743 += 1, R1703 += 1 };
  s9 -> s9 [66, 65535] { R1743 += 1, R1703 += 1 };
  s10 -> s10 [0, 65535] { R1743 += 1 };
  s10 -> s15 [0, 65535];
  s11 -> s11 [0, 65535] { R1743 += 1, R1703 += 1, R1599 += 1 };
  s11 -> s13 [0, 65535] { R1743 += 1, R1703 += 1 };
  s13 -> s14 [0, 65535] { R1743 += 1 };
  s13 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R1743 += 1, R1703 += 1 };
  s14 -> s14 [0, 65535] { R1743 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s13, s9, s14, s15, s10;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 64] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s0 -> s2 [0, 64] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s0 -> s0 [0, 65535] { R1744 += 1, R1745 += 1 };
  s0 -> s3 [0, 65535] { R1745 += 1, R1704 += 1, R1705 += 1 };
  s0 -> s4 [65, 65] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s0 -> s5 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s0 -> s6 [65, 65] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s0 -> s7 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s0 -> s1 [66, 65535] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s0 -> s2 [66, 65535] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s1 -> s1 [0, 64] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s1 -> s2 [0, 64] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s1 -> s4 [65, 65] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s1 -> s5 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s1 -> s6 [65, 65] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s1 -> s7 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s1 -> s1 [66, 65535] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s1 -> s2 [66, 65535] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s2 -> s2 [0, 64] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R1745 += 1 };
  s2 -> s5 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s2 -> s7 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s2 -> s2 [66, 65535] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s3 -> s1 [0, 64] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s3 -> s2 [0, 64] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s3 -> s3 [0, 65535] { R1745 += 1, R1704 += 1, R1705 += 1 };
  s3 -> s4 [65, 65] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s3 -> s5 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s3 -> s6 [65, 65] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s3 -> s7 [65, 65] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s3 -> s1 [66, 65535] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s3 -> s2 [66, 65535] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s5 -> s5 [0, 65535] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R1745 += 1 };
  s6 -> s5 [0, 65535] { R1745 += 1, R1705 += 1, R1675 += 1, R1676 += 1 };
  s6 -> s6 [0, 65535] { R1745 += 1, R1705 += 1, R1674 += 1, R1675 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1745 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1745 += 1 };
  accepting s8, s5, s2, s9, s7;
};
};
constraint R1 = R1693 && R2 = R1745 && R16 - R1693 = -1 && R17 = R1693 && R18 - R1693 = -1 && R19 = R1693 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1601 + -1*R1599 = 0 && R1600 + R1598 = 0 && R1680 = 0 && R1681 = R1693 && R1682 = 0 && R1683 = R1693 && R1684 = 0 && R1685 = R1693 && R1686 = 0 && R1687 = R1693 && R1688 = 0 && R1689 = R1693 && R1690 = 0 && R1691 = R1693 && R1692 = 0 && R1696 = 0 && R1697 = 0 && R1700 = 0 && R1701 = 0 && R1702 = 0 && R1703 = 0 && R1704 = 0 && R1705 = 0 && R1706 = 1 && R1707 = R1745 && R1708 = 1 && R1709 = R1745 && R1710 = 1 && R1711 = R1745 && R1712 = 1 && R1713 = R1745 && R1714 = 1 && R1715 = R1745 && R1716 = 1 && R1717 = R1745 && R1718 = 1 && R1719 = R1745 && R1720 = 1 && R1721 = R1745 && R1722 = 1 && R1723 = R1745 && R1724 = 1 && R1725 = R1745 && R1726 = 1 && R1727 = R1745 && R1728 = 1 && R1729 = R1745 && R1730 = 1 && R1731 = R1745 && R1732 = 1 && R1733 = R1745 && R1734 = 1 && R1735 = R1745 && R1736 = 1 && R1737 = R1745 && R1738 = 1 && R1739 = R1745 && R1740 = 1 && R1741 = R1745 && R1742 = 1 && R1743 = R1745 && R1744 = 1 && R9 < 1 && R12 < 1 && R1369 + R1368 < 1 && -1*R1601 + -1*R1599 < 1 && 0 < R1693 && 0 < R1745 && (R1601 + R1599 != 0 || R1679 + R1676 = 0 || (R1677 + R1674 = 0 && R1678 + R1675 = 0)) && (R1677 + R1674 != 0 || R1601 + R1599 + -1*R1678 + -1*R1675 = 0 || R1601 + R1599 < 1) && (R15 = 0 || (R1694 = 0 && R1695 = 0)) && (R15 = 0 || (R1698 = 0 && R1699 = 0)) && (R1677 + R1674 = 0 || R1601 + R1599 < 1);
// End of Parikh automata intersection problem
