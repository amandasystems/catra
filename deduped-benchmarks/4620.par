// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R1368, R1369, R14, R15, R1598, R1599, R16, R1600, R1601, R17, R1746, R1747, R1748, R1749, R1750, R1751, R1752, R1753, R1754, R1755, R1756, R1757, R1758, R1759, R1760, R1761, R1762, R1763, R1764, R1765, R1766, R1767, R1768, R1769, R1770, R1771, R1772, R1773, R1774, R1775, R1776, R1777, R1778, R1779, R1780, R1781, R1782, R1783, R1784, R1785, R1786, R1787, R1788, R1789, R1790, R1791, R1792, R1793, R1794, R1795, R1796, R1797, R1798, R1799, R18, R1800, R1801, R1802, R1803, R1804, R1805, R1806, R1807, R1808, R1809, R1810, R1811, R1812, R1813, R1814, R1815, R1816, R1817, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1779 += 1 };
  s0 -> s0 [0, 65535] { R1778 += 1, R1779 += 1 };
  s0 -> s2 [65, 65] { R1779 += 1 };
  s0 -> s1 [66, 65535] { R1779 += 1 };
  s1 -> s1 [0, 64] { R1779 += 1 };
  s1 -> s2 [65, 65] { R1779 += 1 };
  s1 -> s1 [66, 65535] { R1779 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1779 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1780 += 1, R1781 += 1 };
  s0 -> s1 [0, 65535] { R1781 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1781 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1783 += 1 };
  s0 -> s0 [0, 65535] { R1782 += 1, R1783 += 1 };
  s0 -> s2 [0, 65535] { R1783 += 1, R9 += 1 };
  s0 -> s3 [65, 65] { R1783 += 1 };
  s0 -> s1 [66, 65535] { R1783 += 1 };
  s1 -> s1 [0, 64] { R1783 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1783 += 1 };
  s1 -> s1 [66, 65535] { R1783 += 1 };
  s2 -> s1 [0, 64] { R1783 += 1 };
  s2 -> s2 [0, 65535] { R1783 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1783 += 1 };
  s2 -> s1 [66, 65535] { R1783 += 1 };
  s3 -> s3 [0, 65535] { R1783 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1785 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1784 += 1, R1785 += 1 };
  s0 -> s2 [0, 65535] { R1785 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R1785 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1785 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1785 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1785 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1785 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1785 += 1 };
  s2 -> s1 [0, 8] { R1785 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1785 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1785 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1785 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1785 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1785 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1785 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1785 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1786 += 1, R1787 += 1 };
  s0 -> s1 [0, 65535] { R1787 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R1787 += 1, R19 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R1787 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1787 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535] { R1787 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1787 += 1, R19 += 1, R3 += 1 };
  s3 -> s3 [0, 65535] { R1787 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1789 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1789 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1788 += 1, R1789 += 1 };
  s0 -> s3 [9, 13] { R1789 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1789 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1789 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1789 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1789 += 1 };
  s1 -> s1 [0, 65535] { R1789 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1789 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1789 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1789 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1789 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1789 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1789 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1789 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1789 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R1790 += 1, R1791 += 1 };
  s0 -> s1 [0, 65535] { R1791 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R1791 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R1791 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1791 += 1 };
  s2 -> s1 [0, 65535] { R1791 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1791 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1791 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R1793 += 1, R1753 += 1 };
  s0 -> s0 [0, 65535] { R1792 += 1, R1793 += 1 };
  s0 -> s2 [0, 65535] { R1793 += 1, R1752 += 1, R1753 += 1 };
  s0 -> s1 [66, 65535] { R1793 += 1, R1753 += 1 };
  s1 -> s1 [0, 64] { R1793 += 1, R1753 += 1 };
  s1 -> s1 [0, 65535] { R1793 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1793 += 1, R1753 += 1 };
  s2 -> s1 [0, 64] { R1793 += 1, R1753 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1793 += 1, R1752 += 1, R1753 += 1 };
  s2 -> s1 [66, 65535] { R1793 += 1, R1753 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1794 += 1, R1795 += 1 };
  s0 -> s1 [0, 65535] { R1795 += 1, R1755 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R1795 += 1, R1754 += 1, R1755 += 1 };
  s1 -> s1 [0, 65535] { R1795 += 1, R1755 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1795 += 1 };
  s2 -> s1 [0, 65535] { R1795 += 1, R1755 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1795 += 1, R1754 += 1, R1755 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1795 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1796 += 1, R1797 += 1 };
  s0 -> s1 [0, 65535] { R1797 += 1, R1757 += 1 };
  s0 -> s2 [0, 65535] { R1797 += 1, R1756 += 1, R1757 += 1 };
  s1 -> s4 [0, 65535] { R1797 += 1 };
  s1 -> s1 [0, 65535] { R1797 += 1, R1757 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1797 += 1, R1757 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1797 += 1, R1756 += 1, R1757 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1797 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1799 += 1, R1759 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R1799 += 1, R1758 += 1, R1759 += 1 };
  s0 -> s0 [0, 65535] { R1798 += 1, R1799 += 1 };
  s1 -> s1 [0, 65535] { R1799 += 1, R1759 += 1, R485 += 1 };
  s1 -> s4 [0, 65535] { R1799 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1799 += 1, R1759 += 1, R485 += 1 };
  s2 -> s2 [0, 65535] { R1799 += 1, R1758 += 1, R1759 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1799 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1801 += 1, R1761 += 1 };
  s0 -> s2 [0, 65535] { R1801 += 1, R1760 += 1, R1761 += 1 };
  s0 -> s0 [0, 65535] { R1800 += 1, R1801 += 1 };
  s0 -> s1 [67, 65535] { R1801 += 1, R1761 += 1 };
  s1 -> s1 [0, 65] { R1801 += 1, R1761 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1801 += 1 };
  s1 -> s1 [67, 65535] { R1801 += 1, R1761 += 1 };
  s2 -> s1 [0, 65] { R1801 += 1, R1761 += 1 };
  s2 -> s2 [0, 65535] { R1801 += 1, R1760 += 1, R1761 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R1801 += 1, R1761 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1803 += 1, R1762 += 1, R1763 += 1 };
  s0 -> s0 [0, 65535] { R1802 += 1, R1803 += 1 };
  s0 -> s2 [0, 65535] { R1803 += 1, R1763 += 1 };
  s1 -> s1 [0, 65535] { R1803 += 1, R1762 += 1, R1763 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1803 += 1, R1763 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1803 += 1 };
  s2 -> s2 [0, 65535] { R1803 += 1, R1763 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1803 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1805 += 1, R1764 += 1, R1765 += 1 };
  s0 -> s0 [0, 65535] { R1804 += 1, R1805 += 1 };
  s0 -> s2 [0, 65535] { R1805 += 1, R1765 += 1 };
  s1 -> s1 [0, 65535] { R1805 += 1, R1764 += 1, R1765 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1805 += 1, R1765 += 1 };
  s2 -> s3 [0, 65535] { R1805 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1805 += 1, R1765 += 1 };
  s3 -> s3 [0, 65535] { R1805 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1807 += 1, R1767 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R1806 += 1, R1807 += 1 };
  s0 -> s2 [0, 65535] { R1807 += 1, R1766 += 1, R1767 += 1 };
  s1 -> s1 [0, 65535] { R1807 += 1, R1767 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1807 += 1 };
  s2 -> s1 [0, 65535] { R1807 += 1, R1767 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1807 += 1, R1766 += 1, R1767 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1807 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 64] { R1809 += 1, R1769 += 1 };
  s0 -> s2 [0, 65535] { R1809 += 1, R1768 += 1, R1769 += 1 };
  s0 -> s0 [0, 65535] { R1808 += 1, R1809 += 1 };
  s0 -> s3 [65, 65] { R1809 += 1, R1769 += 1 };
  s0 -> s4 [65, 65] { R1809 += 1, R1769 += 1 };
  s0 -> s5 [66, 66] { R1809 += 1, R1769 += 1 };
  s0 -> s1 [67, 65535] { R1809 += 1, R1769 += 1 };
  s1 -> s1 [0, 64] { R1809 += 1, R1769 += 1 };
  s1 -> s3 [65, 65] { R1809 += 1, R1769 += 1 };
  s1 -> s4 [65, 65] { R1809 += 1, R1769 += 1 };
  s1 -> s5 [66, 66] { R1809 += 1, R1769 += 1 };
  s1 -> s1 [67, 65535] { R1809 += 1, R1769 += 1 };
  s2 -> s1 [0, 64] { R1809 += 1, R1769 += 1 };
  s2 -> s2 [0, 65535] { R1809 += 1, R1768 += 1, R1769 += 1 };
  s2 -> s3 [65, 65] { R1809 += 1, R1769 += 1 };
  s2 -> s4 [65, 65] { R1809 += 1, R1769 += 1 };
  s2 -> s5 [66, 66] { R1809 += 1, R1769 += 1 };
  s2 -> s1 [67, 65535] { R1809 += 1, R1769 += 1 };
  s3 -> s3 [0, 65] { R1809 += 1, R1769 += 1 };
  s3 -> s8 [66, 66] { R1809 += 1, R1769 += 1 };
  s3 -> s3 [67, 65535] { R1809 += 1, R1769 += 1 };
  s5 -> s5 [0, 64] { R1809 += 1, R1769 += 1 };
  s5 -> s5 [0, 65535] { R1809 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R1809 += 1, R1769 += 1 };
  s5 -> s8 [65, 65] { R1809 += 1, R1769 += 1 };
  s5 -> s5 [66, 65535] { R1809 += 1, R1769 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1809 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1809 += 1, R1769 += 1 };
  s8 -> s9 [0, 65535] { R1809 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1809 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 64] { R1811 += 1, R1771 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R1811 += 1, R1770 += 1, R1771 += 1 };
  s0 -> s0 [0, 65535] { R1810 += 1, R1811 += 1 };
  s0 -> s3 [65, 65] { R1811 += 1, R1771 += 1, R484 += 1 };
  s0 -> s4 [65, 65] { R1811 += 1, R1771 += 1, R484 += 1 };
  s0 -> s1 [66, 65535] { R1811 += 1, R1771 += 1, R484 += 1 };
  s1 -> s1 [0, 64] { R1811 += 1, R1771 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R1811 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1811 += 1, R1771 += 1, R484 += 1 };
  s1 -> s4 [65, 65] { R1811 += 1, R1771 += 1, R484 += 1 };
  s1 -> s1 [66, 65535] { R1811 += 1, R1771 += 1, R484 += 1 };
  s2 -> s1 [0, 64] { R1811 += 1, R1771 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R1811 += 1, R1770 += 1, R1771 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R1811 += 1, R1771 += 1, R484 += 1 };
  s2 -> s4 [65, 65] { R1811 += 1, R1771 += 1, R484 += 1 };
  s2 -> s1 [66, 65535] { R1811 += 1, R1771 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1811 += 1, R1771 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1811 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1811 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1811 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 64] { R1813 += 1, R1773 += 1 };
  s0 -> s2 [0, 64] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s0 -> s0 [0, 65535] { R1812 += 1, R1813 += 1 };
  s0 -> s3 [0, 65535] { R1813 += 1, R1772 += 1, R1773 += 1 };
  s0 -> s4 [65, 65] { R1813 += 1, R1773 += 1 };
  s0 -> s5 [65, 65] { R1813 += 1, R1773 += 1 };
  s0 -> s6 [65, 65] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s0 -> s7 [65, 65] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s0 -> s2 [66, 65535] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s0 -> s1 [67, 65535] { R1813 += 1, R1773 += 1 };
  s1 -> s1 [0, 64] { R1813 += 1, R1773 += 1 };
  s1 -> s1 [0, 65535] { R1813 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R1813 += 1, R1773 += 1 };
  s1 -> s5 [65, 65] { R1813 += 1, R1773 += 1 };
  s1 -> s1 [67, 65535] { R1813 += 1, R1773 += 1 };
  s2 -> s1 [0, 64] { R1813 += 1, R1773 += 1 };
  s2 -> s2 [0, 64] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s2 -> s4 [65, 65] { R1813 += 1, R1773 += 1 };
  s2 -> s5 [65, 65] { R1813 += 1, R1773 += 1 };
  s2 -> s6 [65, 65] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s2 -> s7 [65, 65] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s2 -> s2 [66, 65535] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s2 -> s1 [67, 65535] { R1813 += 1, R1773 += 1 };
  s3 -> s1 [0, 64] { R1813 += 1, R1773 += 1 };
  s3 -> s2 [0, 64] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s3 -> s3 [0, 65535] { R1813 += 1, R1772 += 1, R1773 += 1 };
  s3 -> s4 [65, 65] { R1813 += 1, R1773 += 1 };
  s3 -> s5 [65, 65] { R1813 += 1, R1773 += 1 };
  s3 -> s6 [65, 65] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s3 -> s7 [65, 65] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s3 -> s2 [66, 65535] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s3 -> s1 [67, 65535] { R1813 += 1, R1773 += 1 };
  s4 -> s4 [0, 65535] { R1813 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65] { R1813 += 1, R1773 += 1 };
  s5 -> s5 [0, 65535] { R1813 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [67, 65535] { R1813 += 1, R1773 += 1 };
  s6 -> s5 [0, 65] { R1813 += 1, R1773 += 1 };
  s6 -> s6 [0, 65535] { R1813 += 1, R1773 += 1, R1368 += 1 };
  s6 -> s5 [67, 65535] { R1813 += 1, R1773 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s5, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 64] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s0 -> s2 [0, 64] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s3 [0, 65535] { R1815 += 1, R1774 += 1, R1775 += 1 };
  s0 -> s0 [0, 65535] { R1814 += 1, R1815 += 1 };
  s0 -> s4 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s0 -> s5 [65, 65] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s6 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s0 -> s7 [65, 65] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s8 [66, 66] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s0 -> s2 [66, 65535] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s0 -> s1 [67, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s1 -> s1 [0, 64] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s1 -> s4 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s1 -> s6 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s1 -> s8 [66, 66] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s1 -> s1 [67, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s2 -> s1 [0, 64] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s2 -> s2 [0, 64] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s4 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s2 -> s5 [65, 65] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s6 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s2 -> s7 [65, 65] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s8 [66, 66] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s2 -> s2 [66, 65535] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s2 -> s1 [67, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s3 -> s1 [0, 64] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s3 -> s2 [0, 64] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s3 [0, 65535] { R1815 += 1, R1774 += 1, R1775 += 1 };
  s3 -> s4 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s3 -> s5 [65, 65] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s6 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s3 -> s7 [65, 65] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s8 [66, 66] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s3 -> s2 [66, 65535] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s3 -> s1 [67, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s6 -> s6 [0, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s6 -> s12 [66, 66] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s6 -> s6 [67, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s7 -> s6 [0, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s7 -> s7 [0, 65535] { R1815 += 1, R1775 += 1, R1598 += 1, R1599 += 1 };
  s7 -> s12 [66, 66] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s7 -> s6 [67, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s8 -> s8 [0, 64] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s8 -> s9 [0, 64] { R1815 += 1, R1775 += 1 };
  s8 -> s10 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s8 -> s11 [65, 65] { R1815 += 1, R1775 += 1 };
  s8 -> s12 [65, 65] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s8 -> s13 [65, 65] { R1815 += 1, R1775 += 1 };
  s8 -> s8 [66, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s8 -> s9 [66, 65535] { R1815 += 1, R1775 += 1 };
  s9 -> s9 [0, 64] { R1815 += 1, R1775 += 1 };
  s9 -> s9 [0, 65535] { R1815 += 1 };
  s9 -> s15 [0, 65535];
  s9 -> s11 [65, 65] { R1815 += 1, R1775 += 1 };
  s9 -> s13 [65, 65] { R1815 += 1, R1775 += 1 };
  s9 -> s9 [66, 65535] { R1815 += 1, R1775 += 1 };
  s11 -> s11 [0, 65535] { R1815 += 1 };
  s11 -> s15 [0, 65535];
  s12 -> s12 [0, 65535] { R1815 += 1, R1775 += 1, R1599 += 1 };
  s12 -> s13 [0, 65535] { R1815 += 1, R1775 += 1 };
  s13 -> s14 [0, 65535] { R1815 += 1 };
  s13 -> s15 [0, 65535];
  s13 -> s13 [0, 65535] { R1815 += 1, R1775 += 1 };
  s14 -> s14 [0, 65535] { R1815 += 1 };
  s14 -> s15 [0, 65535];
  s15 -> s15 [0, 65535];
  accepting s13, s9, s14, s15, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 64] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s0 -> s2 [0, 64] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s0 -> s0 [0, 65535] { R1816 += 1, R1817 += 1 };
  s0 -> s3 [0, 65535] { R1817 += 1, R1776 += 1, R1777 += 1 };
  s0 -> s4 [65, 65] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s0 -> s5 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s0 -> s6 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s0 -> s7 [65, 65] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s0 -> s1 [66, 65535] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s0 -> s2 [66, 65535] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s1 -> s1 [0, 64] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s1 -> s2 [0, 64] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s1 -> s4 [65, 65] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s1 -> s5 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s1 -> s6 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s1 -> s7 [65, 65] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s1 -> s1 [66, 65535] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s1 -> s2 [66, 65535] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s2 -> s11 [0, 64] { R1817 += 1, R1777 += 1 };
  s2 -> s2 [0, 64] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s2 -> s5 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s2 -> s6 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s2 -> s12 [65, 65] { R1817 += 1, R1777 += 1 };
  s2 -> s8 [65, 65] { R1817 += 1, R1777 += 1 };
  s2 -> s11 [66, 65535] { R1817 += 1, R1777 += 1 };
  s2 -> s2 [66, 65535] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s3 -> s1 [0, 64] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s3 -> s2 [0, 64] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s3 -> s3 [0, 65535] { R1817 += 1, R1776 += 1, R1777 += 1 };
  s3 -> s4 [65, 65] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s3 -> s5 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s3 -> s6 [65, 65] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s3 -> s7 [65, 65] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s3 -> s1 [66, 65535] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s3 -> s2 [66, 65535] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s5 -> s5 [0, 65535] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s5 -> s8 [0, 65535] { R1817 += 1, R1777 += 1 };
  s7 -> s5 [0, 65535] { R1817 += 1, R1777 += 1, R1747 += 1, R1748 += 1 };
  s7 -> s7 [0, 65535] { R1817 += 1, R1777 += 1, R1746 += 1, R1747 += 1 };
  s8 -> s9 [0, 65535] { R1817 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s8 [0, 65535] { R1817 += 1, R1777 += 1 };
  s9 -> s9 [0, 65535] { R1817 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 64] { R1817 += 1, R1777 += 1 };
  s11 -> s11 [0, 65535] { R1817 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s12 [65, 65] { R1817 += 1, R1777 += 1 };
  s11 -> s8 [65, 65] { R1817 += 1, R1777 += 1 };
  s11 -> s11 [66, 65535] { R1817 += 1, R1777 += 1 };
  s12 -> s12 [0, 65535] { R1817 += 1 };
  s12 -> s10 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R1765 && R2 = R1817 && R16 - R1765 = -1 && R17 = R1765 && R18 - R1765 = -1 && R19 = R1765 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1601 + -1*R1599 = 0 && R1600 + R1598 = 0 && R1752 = 0 && R1753 = R1765 && R1754 = 0 && R1755 = R1765 && R1756 = 0 && R1757 = R1765 && R1758 = 0 && R1759 = R1765 && R1760 = 0 && R1761 = R1765 && R1762 = 0 && R1763 = R1765 && R1764 = 0 && R1768 = 0 && R1769 = 0 && R1772 = 0 && R1773 = 0 && R1774 = 0 && R1775 = 0 && R1776 = 0 && R1777 = 0 && R1778 = 1 && R1779 = R1817 && R1780 = 1 && R1781 = R1817 && R1782 = 1 && R1783 = R1817 && R1784 = 1 && R1785 = R1817 && R1786 = 1 && R1787 = R1817 && R1788 = 1 && R1789 = R1817 && R1790 = 1 && R1791 = R1817 && R1792 = 1 && R1793 = R1817 && R1794 = 1 && R1795 = R1817 && R1796 = 1 && R1797 = R1817 && R1798 = 1 && R1799 = R1817 && R1800 = 1 && R1801 = R1817 && R1802 = 1 && R1803 = R1817 && R1804 = 1 && R1805 = R1817 && R1806 = 1 && R1807 = R1817 && R1808 = 1 && R1809 = R1817 && R1810 = 1 && R1811 = R1817 && R1812 = 1 && R1813 = R1817 && R1814 = 1 && R1815 = R1817 && R1816 = 1 && R9 < 1 && R12 < 1 && R1369 + R1368 < 1 && -1*R1601 + -1*R1599 < 1 && 0 < R1765 && 0 < R1817 && (R1601 + R1599 != 0 || R1751 + R1748 = 0 || (R1749 + R1746 = 0 && R1750 + R1747 = 0)) && (R1749 + R1746 != 0 || R1601 + R1599 + -1*R1750 + -1*R1747 = 0 || R1601 + R1599 < 1) && (R15 = 0 || (R1766 = 0 && R1767 = 0)) && (R15 = 0 || (R1770 = 0 && R1771 = 0)) && (R1749 + R1746 = 0 || R1601 + R1599 < 1);
// End of Parikh automata intersection problem
