// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R1368, R1369, R1378, R1379, R1380, R1381, R1382, R1383, R1384, R1385, R1386, R1387, R1388, R1389, R1390, R1391, R1392, R1393, R1394, R1395, R1396, R1397, R1398, R1399, R14, R1400, R1401, R1402, R1403, R1404, R1405, R1406, R1407, R1408, R1409, R1410, R1411, R1412, R1413, R1414, R1415, R1416, R1417, R1418, R1419, R1420, R1421, R1422, R1423, R1424, R1425, R1426, R1427, R1428, R1429, R1430, R1431, R1432, R1433, R1434, R1435, R1436, R1437, R1438, R1439, R1440, R1441, R1442, R1443, R1444, R1445, R1446, R1447, R1448, R1449, R1450, R1451, R1452, R1453, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1415 += 1 };
  s0 -> s0 [0, 65535] { R1414 += 1, R1415 += 1 };
  s0 -> s2 [65, 65] { R1415 += 1 };
  s0 -> s1 [66, 65535] { R1415 += 1 };
  s1 -> s1 [0, 64] { R1415 += 1 };
  s1 -> s2 [65, 65] { R1415 += 1 };
  s1 -> s1 [66, 65535] { R1415 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1415 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1417 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1416 += 1, R1417 += 1 };
  s1 -> s1 [0, 65535] { R1417 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1419 += 1 };
  s0 -> s0 [0, 65535] { R1418 += 1, R1419 += 1 };
  s0 -> s2 [0, 65535] { R1419 += 1, R9 += 1 };
  s0 -> s3 [65, 65] { R1419 += 1 };
  s0 -> s1 [66, 65535] { R1419 += 1 };
  s1 -> s1 [0, 64] { R1419 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1419 += 1 };
  s1 -> s1 [66, 65535] { R1419 += 1 };
  s2 -> s1 [0, 64] { R1419 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1419 += 1, R9 += 1 };
  s2 -> s3 [65, 65] { R1419 += 1 };
  s2 -> s1 [66, 65535] { R1419 += 1 };
  s3 -> s3 [0, 65535] { R1419 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1421 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1421 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1420 += 1, R1421 += 1 };
  s0 -> s3 [9, 13] { R1421 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1421 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1421 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1421 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1421 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1421 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R1421 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1421 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1421 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1421 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1421 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1421 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1421 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1421 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1422 += 1, R1423 += 1 };
  s0 -> s1 [0, 65535] { R1423 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R1423 += 1, R19 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R1423 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R1423 += 1, R19 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1423 += 1 };
  s2 -> s2 [0, 65535] { R1423 += 1, R19 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1423 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1425 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1424 += 1, R1425 += 1 };
  s0 -> s2 [0, 65535] { R1425 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R1425 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1425 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1425 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1425 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1425 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1425 += 1 };
  s2 -> s1 [0, 8] { R1425 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1425 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R1425 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1425 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1425 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1425 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1425 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1425 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1427 += 1, R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1426 += 1, R1427 += 1 };
  s0 -> s2 [0, 65535] { R1427 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R1427 += 1, R23 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R1427 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1427 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R1427 += 1, R22 += 1, R23 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1427 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R1429 += 1, R1389 += 1 };
  s0 -> s2 [0, 65535] { R1429 += 1, R1388 += 1, R1389 += 1 };
  s0 -> s0 [0, 65535] { R1428 += 1, R1429 += 1 };
  s0 -> s1 [66, 65535] { R1429 += 1, R1389 += 1 };
  s1 -> s1 [0, 64] { R1429 += 1, R1389 += 1 };
  s1 -> s1 [0, 65535] { R1429 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1429 += 1, R1389 += 1 };
  s2 -> s1 [0, 64] { R1429 += 1, R1389 += 1 };
  s2 -> s2 [0, 65535] { R1429 += 1, R1388 += 1, R1389 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1429 += 1, R1389 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1431 += 1, R1390 += 1, R1391 += 1 };
  s0 -> s0 [0, 65535] { R1430 += 1, R1431 += 1 };
  s0 -> s2 [0, 65535] { R1431 += 1, R1391 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R1431 += 1, R1390 += 1, R1391 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1431 += 1, R1391 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1431 += 1 };
  s2 -> s2 [0, 65535] { R1431 += 1, R1391 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1431 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1433 += 1, R1392 += 1, R1393 += 1 };
  s0 -> s0 [0, 65535] { R1432 += 1, R1433 += 1 };
  s0 -> s2 [0, 65535] { R1433 += 1, R1393 += 1 };
  s1 -> s1 [0, 65535] { R1433 += 1, R1392 += 1, R1393 += 1 };
  s1 -> s2 [0, 65535] { R1433 += 1, R1393 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R1433 += 1 };
  s2 -> s2 [0, 65535] { R1433 += 1, R1393 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1433 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1435 += 1, R1394 += 1, R1395 += 1 };
  s0 -> s2 [0, 65535] { R1435 += 1, R1395 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1434 += 1, R1435 += 1 };
  s1 -> s1 [0, 65535] { R1435 += 1, R1394 += 1, R1395 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1435 += 1, R1395 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1435 += 1 };
  s2 -> s2 [0, 65535] { R1435 += 1, R1395 += 1, R485 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1435 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1437 += 1, R1397 += 1 };
  s0 -> s0 [0, 65535] { R1436 += 1, R1437 += 1 };
  s0 -> s2 [0, 65535] { R1437 += 1, R1396 += 1, R1397 += 1 };
  s0 -> s1 [67, 65535] { R1437 += 1, R1397 += 1 };
  s1 -> s1 [0, 65] { R1437 += 1, R1397 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1437 += 1 };
  s1 -> s1 [67, 65535] { R1437 += 1, R1397 += 1 };
  s2 -> s1 [0, 65] { R1437 += 1, R1397 += 1 };
  s2 -> s2 [0, 65535] { R1437 += 1, R1396 += 1, R1397 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R1437 += 1, R1397 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1438 += 1, R1439 += 1 };
  s0 -> s1 [0, 65535] { R1439 += 1, R1399 += 1, R1381 += 1 };
  s0 -> s2 [0, 65535] { R1439 += 1, R1398 += 1, R1399 += 1 };
  s0 -> s3 [0, 65535] { R1439 += 1, R1399 += 1 };
  s1 -> s1 [0, 65535] { R1439 += 1, R1399 += 1, R1381 += 1 };
  s1 -> s3 [0, 65535] { R1439 += 1, R1399 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1439 += 1 };
  s2 -> s1 [0, 65535] { R1439 += 1, R1399 += 1, R1381 += 1 };
  s2 -> s2 [0, 65535] { R1439 += 1, R1398 += 1, R1399 += 1 };
  s2 -> s3 [0, 65535] { R1439 += 1, R1399 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1439 += 1, R1399 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1439 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1439 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1441 += 1, R1401 += 1, R1385 += 1, R1386 += 1 };
  s0 -> s0 [0, 65535] { R1440 += 1, R1441 += 1 };
  s0 -> s2 [0, 65535] { R1441 += 1, R1400 += 1, R1401 += 1 };
  s0 -> s3 [0, 65535] { R1441 += 1, R1401 += 1, R1386 += 1, R1387 += 1 };
  s1 -> s1 [0, 65535] { R1441 += 1, R1401 += 1, R1385 += 1, R1386 += 1 };
  s1 -> s3 [0, 65535] { R1441 += 1, R1401 += 1, R1386 += 1, R1387 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1441 += 1 };
  s2 -> s1 [0, 65535] { R1441 += 1, R1401 += 1, R1385 += 1, R1386 += 1 };
  s2 -> s2 [0, 65535] { R1441 += 1, R1400 += 1, R1401 += 1 };
  s2 -> s3 [0, 65535] { R1441 += 1, R1401 += 1, R1386 += 1, R1387 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1441 += 1, R1401 += 1, R1386 += 1, R1387 += 1 };
  s3 -> s4 [0, 65535] { R1441 += 1, R1401 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1441 += 1 };
  s4 -> s4 [0, 65535] { R1441 += 1, R1401 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1441 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1441 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1443 += 1, R1403 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R1442 += 1, R1443 += 1 };
  s0 -> s2 [0, 65535] { R1443 += 1, R1402 += 1, R1403 += 1 };
  s1 -> s4 [0, 65535] { R1443 += 1 };
  s1 -> s1 [0, 65535] { R1443 += 1, R1403 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1443 += 1, R1403 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R1443 += 1, R1402 += 1, R1403 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1443 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 64] { R1445 += 1, R1405 += 1 };
  s0 -> s0 [0, 65535] { R1444 += 1, R1445 += 1 };
  s0 -> s2 [0, 65535] { R1445 += 1, R1404 += 1, R1405 += 1 };
  s0 -> s3 [65, 65] { R1445 += 1, R1405 += 1 };
  s0 -> s4 [65, 65] { R1445 += 1, R1405 += 1 };
  s0 -> s5 [66, 66] { R1445 += 1, R1405 += 1 };
  s0 -> s1 [67, 65535] { R1445 += 1, R1405 += 1 };
  s1 -> s1 [0, 64] { R1445 += 1, R1405 += 1 };
  s1 -> s3 [65, 65] { R1445 += 1, R1405 += 1 };
  s1 -> s4 [65, 65] { R1445 += 1, R1405 += 1 };
  s1 -> s5 [66, 66] { R1445 += 1, R1405 += 1 };
  s1 -> s1 [67, 65535] { R1445 += 1, R1405 += 1 };
  s2 -> s1 [0, 64] { R1445 += 1, R1405 += 1 };
  s2 -> s2 [0, 65535] { R1445 += 1, R1404 += 1, R1405 += 1 };
  s2 -> s3 [65, 65] { R1445 += 1, R1405 += 1 };
  s2 -> s4 [65, 65] { R1445 += 1, R1405 += 1 };
  s2 -> s5 [66, 66] { R1445 += 1, R1405 += 1 };
  s2 -> s1 [67, 65535] { R1445 += 1, R1405 += 1 };
  s4 -> s4 [0, 65] { R1445 += 1, R1405 += 1 };
  s4 -> s7 [66, 66] { R1445 += 1, R1405 += 1 };
  s4 -> s4 [67, 65535] { R1445 += 1, R1405 += 1 };
  s5 -> s5 [0, 64] { R1445 += 1, R1405 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1445 += 1 };
  s5 -> s7 [65, 65] { R1445 += 1, R1405 += 1 };
  s5 -> s8 [65, 65] { R1445 += 1, R1405 += 1 };
  s5 -> s5 [66, 65535] { R1445 += 1, R1405 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R1445 += 1 };
  s7 -> s7 [0, 65535] { R1445 += 1, R1405 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1445 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1445 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 64] { R1447 += 1, R1407 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R1446 += 1, R1447 += 1 };
  s0 -> s2 [0, 65535] { R1447 += 1, R1406 += 1, R1407 += 1 };
  s0 -> s3 [65, 65] { R1447 += 1, R1407 += 1, R484 += 1 };
  s0 -> s4 [65, 65] { R1447 += 1, R1407 += 1, R484 += 1 };
  s0 -> s1 [66, 65535] { R1447 += 1, R1407 += 1, R484 += 1 };
  s1 -> s1 [0, 64] { R1447 += 1, R1407 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1447 += 1 };
  s1 -> s3 [65, 65] { R1447 += 1, R1407 += 1, R484 += 1 };
  s1 -> s4 [65, 65] { R1447 += 1, R1407 += 1, R484 += 1 };
  s1 -> s1 [66, 65535] { R1447 += 1, R1407 += 1, R484 += 1 };
  s2 -> s1 [0, 64] { R1447 += 1, R1407 += 1, R484 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1447 += 1, R1406 += 1, R1407 += 1 };
  s2 -> s3 [65, 65] { R1447 += 1, R1407 += 1, R484 += 1 };
  s2 -> s4 [65, 65] { R1447 += 1, R1407 += 1, R484 += 1 };
  s2 -> s1 [66, 65535] { R1447 += 1, R1407 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1447 += 1, R1407 += 1, R484 += 1 };
  s3 -> s6 [0, 65535] { R1447 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1447 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1447 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 64] { R1449 += 1, R1409 += 1 };
  s0 -> s2 [0, 64] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s0 -> s3 [0, 65535] { R1449 += 1, R1408 += 1, R1409 += 1 };
  s0 -> s0 [0, 65535] { R1448 += 1, R1449 += 1 };
  s0 -> s4 [65, 65] { R1449 += 1, R1409 += 1 };
  s0 -> s5 [65, 65] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s0 -> s6 [65, 65] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s0 -> s7 [65, 65] { R1449 += 1, R1409 += 1 };
  s0 -> s2 [66, 65535] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s0 -> s1 [67, 65535] { R1449 += 1, R1409 += 1 };
  s1 -> s1 [0, 64] { R1449 += 1, R1409 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R1449 += 1 };
  s1 -> s4 [65, 65] { R1449 += 1, R1409 += 1 };
  s1 -> s7 [65, 65] { R1449 += 1, R1409 += 1 };
  s1 -> s1 [67, 65535] { R1449 += 1, R1409 += 1 };
  s2 -> s1 [0, 64] { R1449 += 1, R1409 += 1 };
  s2 -> s2 [0, 64] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s2 -> s4 [65, 65] { R1449 += 1, R1409 += 1 };
  s2 -> s5 [65, 65] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s2 -> s6 [65, 65] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s2 -> s7 [65, 65] { R1449 += 1, R1409 += 1 };
  s2 -> s2 [66, 65535] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s2 -> s1 [67, 65535] { R1449 += 1, R1409 += 1 };
  s3 -> s1 [0, 64] { R1449 += 1, R1409 += 1 };
  s3 -> s2 [0, 64] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s3 -> s3 [0, 65535] { R1449 += 1, R1408 += 1, R1409 += 1 };
  s3 -> s4 [65, 65] { R1449 += 1, R1409 += 1 };
  s3 -> s5 [65, 65] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s3 -> s6 [65, 65] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s3 -> s7 [65, 65] { R1449 += 1, R1409 += 1 };
  s3 -> s2 [66, 65535] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s3 -> s1 [67, 65535] { R1449 += 1, R1409 += 1 };
  s4 -> s4 [0, 65] { R1449 += 1, R1409 += 1 };
  s4 -> s4 [0, 65535] { R1449 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [67, 65535] { R1449 += 1, R1409 += 1 };
  s6 -> s4 [0, 65] { R1449 += 1, R1409 += 1 };
  s6 -> s6 [0, 65535] { R1449 += 1, R1409 += 1, R1368 += 1 };
  s6 -> s4 [67, 65535] { R1449 += 1, R1409 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R1449 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s7, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 64] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s0 -> s2 [0, 64] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s0 [0, 65535] { R1450 += 1, R1451 += 1 };
  s0 -> s3 [0, 65535] { R1451 += 1, R1410 += 1, R1411 += 1 };
  s0 -> s4 [65, 65] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s5 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s0 -> s6 [65, 65] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s7 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s0 -> s8 [66, 66] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s0 -> s2 [66, 65535] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s1 [67, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s1 -> s1 [0, 64] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s1 -> s5 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s1 -> s7 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s1 -> s8 [66, 66] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s1 -> s1 [67, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s2 -> s1 [0, 64] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s2 -> s2 [0, 64] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s2 -> s4 [65, 65] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s2 -> s5 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s2 -> s6 [65, 65] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s2 -> s7 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s2 -> s8 [66, 66] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s2 -> s2 [66, 65535] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s2 -> s1 [67, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s3 -> s1 [0, 64] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s3 -> s2 [0, 64] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s3 [0, 65535] { R1451 += 1, R1410 += 1, R1411 += 1 };
  s3 -> s4 [65, 65] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s5 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s3 -> s6 [65, 65] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s7 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s3 -> s8 [66, 66] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s3 -> s2 [66, 65535] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s1 [67, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s4 -> s7 [0, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s4 -> s4 [0, 65535] { R1451 += 1, R1411 += 1, R1378 += 1, R1379 += 1 };
  s4 -> s11 [66, 66] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s4 -> s7 [67, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s7 -> s7 [0, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s7 -> s11 [66, 66] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s7 -> s7 [67, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s8 -> s8 [0, 64] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s8 -> s8 [0, 65535] { R1451 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s8 -> s11 [65, 65] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s8 -> s8 [66, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1451 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1451 += 1, R1411 += 1, R1379 += 1 };
  s11 -> s12 [0, 65535] { R1451 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1451 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 64] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s0 -> s0 [0, 65535] { R1452 += 1, R1453 += 1 };
  s0 -> s2 [0, 65535] { R1453 += 1, R1412 += 1, R1413 += 1 };
  s0 -> s3 [65, 65] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s0 -> s4 [65, 65] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s0 -> s1 [66, 65535] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s1 -> s1 [0, 64] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1453 += 1 };
  s1 -> s3 [65, 65] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s1 -> s4 [65, 65] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s1 -> s1 [66, 65535] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s2 -> s1 [0, 64] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1453 += 1, R1412 += 1, R1413 += 1 };
  s2 -> s3 [65, 65] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s2 -> s4 [65, 65] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s2 -> s1 [66, 65535] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s3 -> s6 [0, 65535] { R1453 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1453 += 1, R1413 += 1, R1382 += 1, R1383 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1453 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1453 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1401 && R2 = R1453 && R16 - R1401 = -1 && R17 = R1401 && R18 - R1401 = -1 && R19 = R1401 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1381 + -1*R1379 = 0 && R1380 + R1378 = 0 && R1388 = 0 && R1389 = R1401 && R1390 = 0 && R1391 = R1401 && R1392 = 0 && R1393 = R1401 && R1394 = 0 && R1395 = R1401 && R1396 = 0 && R1397 = R1401 && R1398 = 0 && R1399 = R1401 && R1400 = 0 && R1404 = 0 && R1405 = 0 && R1408 = 0 && R1409 = 0 && R1410 = 0 && R1411 = 0 && R1414 = 1 && R1415 = R1453 && R1416 = 1 && R1417 = R1453 && R1418 = 1 && R1419 = R1453 && R1420 = 1 && R1421 = R1453 && R1422 = 1 && R1423 = R1453 && R1424 = 1 && R1425 = R1453 && R1426 = 1 && R1427 = R1453 && R1428 = 1 && R1429 = R1453 && R1430 = 1 && R1431 = R1453 && R1432 = 1 && R1433 = R1453 && R1434 = 1 && R1435 = R1453 && R1436 = 1 && R1437 = R1453 && R1438 = 1 && R1439 = R1453 && R1440 = 1 && R1441 = R1453 && R1442 = 1 && R1443 = R1453 && R1444 = 1 && R1445 = R1453 && R1446 = 1 && R1447 = R1453 && R1448 = 1 && R1449 = R1453 && R1450 = 1 && R1451 = R1453 && R1452 = 1 && R9 < 1 && R12 < 1 && R1369 + R1368 < 1 && -1*R1381 + -1*R1379 < 1 && 0 < R1401 && 0 < R1453 && (R1381 + R1379 != 0 || R1387 + R1384 = 0 || (R1385 + R1382 = 0 && R1386 + R1383 = 0)) && (R1385 + R1382 != 0 || R1381 + R1379 + -1*R1386 + -1*R1383 = 0 || R1381 + R1379 < 1) && (R15 = 0 || (R1402 = 0 && R1403 = 0)) && (R15 = 0 || (R1406 = 0 && R1407 = 0)) && (R15 = 0 || (R1412 = 0 && R1413 = 0)) && (R1385 + R1382 = 0 || R1381 + R1379 < 1);
// End of Parikh automata intersection problem
