// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1148, R1149, R1150, R1151, R12, R1224, R1225, R1226, R1227, R1228, R1229, R1230, R1231, R1232, R1233, R1234, R1235, R1236, R1237, R1238, R1239, R1240, R1241, R1242, R1243, R1244, R1245, R1246, R1247, R1248, R1249, R1250, R1251, R1252, R1253, R1254, R1255, R1256, R1257, R1258, R1259, R1260, R1261, R1262, R1263, R1264, R1265, R1266, R1267, R1268, R1269, R1270, R1271, R1272, R1273, R1274, R1275, R1276, R1277, R1278, R1279, R1280, R1281, R1282, R1283, R1284, R1285, R1286, R1287, R1288, R1289, R1290, R1291, R1292, R1293, R1294, R1295, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [9, 9] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1257 += 1 };
  s0 -> s0 [0, 65535] { R1256 += 1, R1257 += 1 };
  s0 -> s2 [65, 65] { R1257 += 1 };
  s0 -> s1 [66, 65535] { R1257 += 1 };
  s1 -> s1 [0, 64] { R1257 += 1 };
  s1 -> s2 [65, 65] { R1257 += 1 };
  s1 -> s1 [66, 65535] { R1257 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1257 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1258 += 1, R1259 += 1 };
  s0 -> s1 [0, 65535] { R1259 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1259 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1261 += 1 };
  s0 -> s0 [0, 65535] { R1260 += 1, R1261 += 1 };
  s0 -> s2 [0, 65535] { R1261 += 1, R9 += 1 };
  s0 -> s3 [65, 65] { R1261 += 1 };
  s0 -> s1 [66, 65535] { R1261 += 1 };
  s1 -> s1 [0, 64] { R1261 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R1261 += 1 };
  s1 -> s1 [66, 65535] { R1261 += 1 };
  s2 -> s1 [0, 64] { R1261 += 1 };
  s2 -> s2 [0, 65535] { R1261 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R1261 += 1 };
  s2 -> s1 [66, 65535] { R1261 += 1 };
  s3 -> s3 [0, 65535] { R1261 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1263 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1263 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1262 += 1, R1263 += 1 };
  s0 -> s3 [9, 13] { R1263 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1263 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1263 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1263 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1263 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1263 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R1263 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1263 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1263 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1263 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1263 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1263 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1263 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1263 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1264 += 1, R1265 += 1 };
  s0 -> s1 [0, 65535] { R1265 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1265 += 1, R18 += 1, R19 += 1 };
  s1 -> s4 [0, 65535] { R1265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1265 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1265 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R1265 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1265 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1267 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1266 += 1, R1267 += 1 };
  s0 -> s2 [0, 65535] { R1267 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R1267 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1267 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1267 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1267 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R1267 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1267 += 1 };
  s2 -> s1 [0, 8] { R1267 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1267 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R1267 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1267 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1267 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1267 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1267 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1267 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1269 += 1, R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1268 += 1, R1269 += 1 };
  s0 -> s2 [0, 65535] { R1269 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535] { R1269 += 1 };
  s1 -> s1 [0, 65535] { R1269 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1269 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1269 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1269 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R1271 += 1, R1231 += 1 };
  s0 -> s0 [0, 65535] { R1270 += 1, R1271 += 1 };
  s0 -> s2 [0, 65535] { R1271 += 1, R1230 += 1, R1231 += 1 };
  s0 -> s1 [66, 65535] { R1271 += 1, R1231 += 1 };
  s1 -> s1 [0, 64] { R1271 += 1, R1231 += 1 };
  s1 -> s1 [0, 65535] { R1271 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R1271 += 1, R1231 += 1 };
  s2 -> s1 [0, 64] { R1271 += 1, R1231 += 1 };
  s2 -> s2 [0, 65535] { R1271 += 1, R1230 += 1, R1231 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R1271 += 1, R1231 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1273 += 1, R1233 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1272 += 1, R1273 += 1 };
  s0 -> s2 [0, 65535] { R1273 += 1, R1232 += 1, R1233 += 1 };
  s1 -> s4 [0, 65535] { R1273 += 1 };
  s1 -> s1 [0, 65535] { R1273 += 1, R1233 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1273 += 1, R1233 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1273 += 1, R1232 += 1, R1233 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1273 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1275 += 1, R1235 += 1 };
  s0 -> s0 [0, 65535] { R1274 += 1, R1275 += 1 };
  s0 -> s2 [0, 65535] { R1275 += 1, R1234 += 1, R1235 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1275 += 1, R1235 += 1 };
  s1 -> s4 [0, 65535] { R1275 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1275 += 1, R1235 += 1 };
  s2 -> s2 [0, 65535] { R1275 += 1, R1234 += 1, R1235 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1275 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1277 += 1, R1236 += 1, R1237 += 1 };
  s0 -> s2 [0, 65535] { R1277 += 1, R1237 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1276 += 1, R1277 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1277 += 1, R1236 += 1, R1237 += 1 };
  s1 -> s2 [0, 65535] { R1277 += 1, R1237 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1277 += 1, R1237 += 1, R485 += 1 };
  s2 -> s4 [0, 65535] { R1277 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1277 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R1279 += 1, R1239 += 1 };
  s0 -> s2 [0, 65535] { R1279 += 1, R1238 += 1, R1239 += 1 };
  s0 -> s3 [0, 65535] { R1279 += 1, R1239 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R1278 += 1, R1279 += 1 };
  s0 -> s1 [67, 65535] { R1279 += 1, R1239 += 1 };
  s1 -> s1 [0, 65] { R1279 += 1, R1239 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1279 += 1 };
  s1 -> s1 [67, 65535] { R1279 += 1, R1239 += 1 };
  s2 -> s1 [0, 65] { R1279 += 1, R1239 += 1 };
  s2 -> s2 [0, 65535] { R1279 += 1, R1238 += 1, R1239 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1279 += 1, R1239 += 1, R487 += 1 };
  s2 -> s1 [67, 65535] { R1279 += 1, R1239 += 1 };
  s3 -> s1 [0, 65] { R1279 += 1, R1239 += 1 };
  s3 -> s4 [0, 65535] { R1279 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1279 += 1, R1239 += 1, R487 += 1 };
  s3 -> s1 [67, 65535] { R1279 += 1, R1239 += 1 };
  s4 -> s4 [0, 65535] { R1279 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1281 += 1, R1240 += 1, R1241 += 1 };
  s0 -> s2 [0, 65535] { R1281 += 1, R1241 += 1 };
  s0 -> s0 [0, 65535] { R1280 += 1, R1281 += 1 };
  s1 -> s1 [0, 65535] { R1281 += 1, R1240 += 1, R1241 += 1 };
  s1 -> s2 [0, 65535] { R1281 += 1, R1241 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1281 += 1, R1241 += 1 };
  s2 -> s3 [0, 65535] { R1281 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1281 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1283 += 1, R1243 += 1, R1228 += 1, R1229 += 1 };
  s0 -> s2 [0, 65535] { R1283 += 1, R1242 += 1, R1243 += 1 };
  s0 -> s3 [0, 65535] { R1283 += 1, R1243 += 1 };
  s0 -> s0 [0, 65535] { R1282 += 1, R1283 += 1 };
  s1 -> s1 [0, 65535] { R1283 += 1, R1243 += 1, R1228 += 1, R1229 += 1 };
  s1 -> s4 [0, 65535] { R1283 += 1 };
  s1 -> s3 [0, 65535] { R1283 += 1, R1243 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1283 += 1, R1243 += 1, R1228 += 1, R1229 += 1 };
  s2 -> s2 [0, 65535] { R1283 += 1, R1242 += 1, R1243 += 1 };
  s2 -> s3 [0, 65535] { R1283 += 1, R1243 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R1283 += 1 };
  s3 -> s3 [0, 65535] { R1283 += 1, R1243 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1283 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s0 [0, 65535] { R1284 += 1, R1285 += 1 };
  s0 -> s1 [0, 65535] { R1285 += 1, R1245 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R1285 += 1, R1244 += 1, R1245 += 1 };
  s1 -> s1 [0, 65535] { R1285 += 1, R1245 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1285 += 1 };
  s2 -> s1 [0, 65535] { R1285 += 1, R1245 += 1, R15 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1285 += 1, R1244 += 1, R1245 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1285 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 64] { R1287 += 1, R1247 += 1 };
  s0 -> s2 [0, 65535] { R1287 += 1, R1246 += 1, R1247 += 1 };
  s0 -> s0 [0, 65535] { R1286 += 1, R1287 += 1 };
  s0 -> s3 [65, 65] { R1287 += 1, R1247 += 1 };
  s0 -> s4 [65, 65] { R1287 += 1, R1247 += 1 };
  s0 -> s5 [66, 66] { R1287 += 1, R1247 += 1 };
  s0 -> s1 [67, 65535] { R1287 += 1, R1247 += 1 };
  s1 -> s1 [0, 64] { R1287 += 1, R1247 += 1 };
  s1 -> s3 [65, 65] { R1287 += 1, R1247 += 1 };
  s1 -> s4 [65, 65] { R1287 += 1, R1247 += 1 };
  s1 -> s5 [66, 66] { R1287 += 1, R1247 += 1 };
  s1 -> s1 [67, 65535] { R1287 += 1, R1247 += 1 };
  s2 -> s1 [0, 64] { R1287 += 1, R1247 += 1 };
  s2 -> s2 [0, 65535] { R1287 += 1, R1246 += 1, R1247 += 1 };
  s2 -> s3 [65, 65] { R1287 += 1, R1247 += 1 };
  s2 -> s4 [65, 65] { R1287 += 1, R1247 += 1 };
  s2 -> s5 [66, 66] { R1287 += 1, R1247 += 1 };
  s2 -> s1 [67, 65535] { R1287 += 1, R1247 += 1 };
  s4 -> s4 [0, 65] { R1287 += 1, R1247 += 1 };
  s4 -> s8 [66, 66] { R1287 += 1, R1247 += 1 };
  s4 -> s4 [67, 65535] { R1287 += 1, R1247 += 1 };
  s5 -> s5 [0, 64] { R1287 += 1, R1247 += 1 };
  s5 -> s5 [0, 65535] { R1287 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [65, 65] { R1287 += 1, R1247 += 1 };
  s5 -> s8 [65, 65] { R1287 += 1, R1247 += 1 };
  s5 -> s5 [66, 65535] { R1287 += 1, R1247 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1287 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1287 += 1, R1247 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s9 [0, 65535] { R1287 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1287 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 64] { R1289 += 1, R1249 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R1288 += 1, R1289 += 1 };
  s0 -> s2 [0, 65535] { R1289 += 1, R1248 += 1, R1249 += 1 };
  s0 -> s3 [65, 65] { R1289 += 1, R1249 += 1, R484 += 1 };
  s0 -> s4 [65, 65] { R1289 += 1, R1249 += 1, R484 += 1 };
  s0 -> s1 [66, 65535] { R1289 += 1, R1249 += 1, R484 += 1 };
  s1 -> s1 [0, 64] { R1289 += 1, R1249 += 1, R484 += 1 };
  s1 -> s1 [0, 65535] { R1289 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [65, 65] { R1289 += 1, R1249 += 1, R484 += 1 };
  s1 -> s4 [65, 65] { R1289 += 1, R1249 += 1, R484 += 1 };
  s1 -> s1 [66, 65535] { R1289 += 1, R1249 += 1, R484 += 1 };
  s2 -> s1 [0, 64] { R1289 += 1, R1249 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R1289 += 1, R1248 += 1, R1249 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [65, 65] { R1289 += 1, R1249 += 1, R484 += 1 };
  s2 -> s4 [65, 65] { R1289 += 1, R1249 += 1, R484 += 1 };
  s2 -> s1 [66, 65535] { R1289 += 1, R1249 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1289 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1289 += 1 };
  s4 -> s4 [0, 65535] { R1289 += 1, R1249 += 1, R484 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1289 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 64] { R1291 += 1, R1251 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R1290 += 1, R1291 += 1 };
  s0 -> s2 [0, 65535] { R1291 += 1, R1250 += 1, R1251 += 1 };
  s0 -> s3 [65, 65] { R1291 += 1, R1251 += 1, R486 += 1 };
  s0 -> s4 [65, 65] { R1291 += 1, R1251 += 1, R486 += 1 };
  s0 -> s1 [66, 65535] { R1291 += 1, R1251 += 1, R486 += 1 };
  s1 -> s1 [0, 64] { R1291 += 1, R1251 += 1, R486 += 1 };
  s1 -> s1 [0, 65535] { R1291 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R1291 += 1, R1251 += 1, R486 += 1 };
  s1 -> s4 [65, 65] { R1291 += 1, R1251 += 1, R486 += 1 };
  s1 -> s1 [66, 65535] { R1291 += 1, R1251 += 1, R486 += 1 };
  s2 -> s1 [0, 64] { R1291 += 1, R1251 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1291 += 1, R1250 += 1, R1251 += 1 };
  s2 -> s3 [65, 65] { R1291 += 1, R1251 += 1, R486 += 1 };
  s2 -> s4 [65, 65] { R1291 += 1, R1251 += 1, R486 += 1 };
  s2 -> s1 [66, 65535] { R1291 += 1, R1251 += 1, R486 += 1 };
  s3 -> s6 [0, 65535] { R1291 += 1 };
  s3 -> s3 [0, 65535] { R1291 += 1, R1251 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1291 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1291 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 64] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s0 -> s2 [0, 64] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s3 [0, 65535] { R1293 += 1, R1252 += 1, R1253 += 1 };
  s0 -> s0 [0, 65535] { R1292 += 1, R1293 += 1 };
  s0 -> s4 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s0 -> s5 [65, 65] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s6 [65, 65] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s7 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s0 -> s8 [66, 66] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s0 -> s2 [66, 65535] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s1 [67, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s1 -> s1 [0, 64] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s1 -> s4 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s1 -> s7 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s1 -> s8 [66, 66] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s1 -> s1 [67, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s2 -> s1 [0, 64] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s2 -> s2 [0, 64] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s4 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s2 -> s5 [65, 65] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s6 [65, 65] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s7 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s2 -> s8 [66, 66] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s2 -> s2 [66, 65535] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s1 [67, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s3 -> s1 [0, 64] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s3 -> s2 [0, 64] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s3 [0, 65535] { R1293 += 1, R1252 += 1, R1253 += 1 };
  s3 -> s4 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s3 -> s5 [65, 65] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s6 [65, 65] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s7 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s3 -> s8 [66, 66] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s3 -> s2 [66, 65535] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s1 [67, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s6 -> s7 [0, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s6 -> s6 [0, 65535] { R1293 += 1, R1253 += 1, R1148 += 1, R1149 += 1 };
  s6 -> s10 [66, 66] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s6 -> s7 [67, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s7 -> s7 [0, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s7 -> s10 [66, 66] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s7 -> s7 [67, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s8 -> s9 [0, 64] { R1293 += 1, R1253 += 1 };
  s8 -> s8 [0, 64] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s8 -> s10 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s8 -> s11 [65, 65] { R1293 += 1, R1253 += 1 };
  s8 -> s12 [65, 65] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s8 -> s13 [65, 65] { R1293 += 1, R1253 += 1 };
  s8 -> s9 [66, 65535] { R1293 += 1, R1253 += 1 };
  s8 -> s8 [66, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s9 -> s9 [0, 64] { R1293 += 1, R1253 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R1293 += 1 };
  s9 -> s11 [65, 65] { R1293 += 1, R1253 += 1 };
  s9 -> s13 [65, 65] { R1293 += 1, R1253 += 1 };
  s9 -> s9 [66, 65535] { R1293 += 1, R1253 += 1 };
  s10 -> s10 [0, 65535] { R1293 += 1, R1253 += 1, R1149 += 1 };
  s10 -> s11 [0, 65535] { R1293 += 1, R1253 += 1 };
  s11 -> s14 [0, 65535];
  s11 -> s15 [0, 65535] { R1293 += 1 };
  s11 -> s11 [0, 65535] { R1293 += 1, R1253 += 1 };
  s13 -> s14 [0, 65535];
  s13 -> s13 [0, 65535] { R1293 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R1293 += 1 };
  accepting s13, s9, s14, s15, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 64] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s0 -> s2 [0, 64] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s0 -> s0 [0, 65535] { R1294 += 1, R1295 += 1 };
  s0 -> s3 [0, 65535] { R1295 += 1, R1254 += 1, R1255 += 1 };
  s0 -> s4 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s0 -> s5 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s0 -> s6 [65, 65] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s0 -> s7 [65, 65] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s0 -> s1 [66, 65535] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s0 -> s2 [66, 65535] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s1 -> s1 [0, 64] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s1 -> s1 [0, 65535] { R1295 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s1 -> s5 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s1 -> s1 [66, 65535] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s2 -> s1 [0, 64] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s2 -> s2 [0, 64] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s2 -> s4 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s2 -> s5 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s2 -> s6 [65, 65] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s2 -> s7 [65, 65] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s2 -> s1 [66, 65535] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s2 -> s2 [66, 65535] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s3 -> s1 [0, 64] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s3 -> s2 [0, 64] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s3 -> s3 [0, 65535] { R1295 += 1, R1254 += 1, R1255 += 1 };
  s3 -> s4 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s3 -> s5 [65, 65] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s3 -> s6 [65, 65] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s3 -> s7 [65, 65] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s3 -> s1 [66, 65535] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s3 -> s2 [66, 65535] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s4 -> s4 [0, 65535] { R1295 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R1295 += 1 };
  s7 -> s5 [0, 65535] { R1295 += 1, R1255 += 1, R1225 += 1, R1226 += 1 };
  s7 -> s7 [0, 65535] { R1295 += 1, R1255 += 1, R1224 += 1, R1225 += 1 };
  s8 -> s8 [0, 65535];
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1295 += 1 };
  accepting s4, s8, s5, s9, s1;
};
};
constraint R1 = R1243 && R2 = R1295 && R16 - R1243 = -1 && R17 = R1243 && R18 - R1243 = -1 && R19 = R1243 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1151 + -1*R1149 = 0 && R1150 + R1148 = 0 && R1230 = 0 && R1231 = R1243 && R1232 = 0 && R1233 = R1243 && R1234 = 0 && R1235 = R1243 && R1236 = 0 && R1237 = R1243 && R1238 = 0 && R1239 = R1243 && R1240 = 0 && R1241 = R1243 && R1242 = 0 && R1246 = 0 && R1247 = 0 && R1252 = 0 && R1253 = 0 && R1254 = 0 && R1255 = 0 && R1256 = 1 && R1257 = R1295 && R1258 = 1 && R1259 = R1295 && R1260 = 1 && R1261 = R1295 && R1262 = 1 && R1263 = R1295 && R1264 = 1 && R1265 = R1295 && R1266 = 1 && R1267 = R1295 && R1268 = 1 && R1269 = R1295 && R1270 = 1 && R1271 = R1295 && R1272 = 1 && R1273 = R1295 && R1274 = 1 && R1275 = R1295 && R1276 = 1 && R1277 = R1295 && R1278 = 1 && R1279 = R1295 && R1280 = 1 && R1281 = R1295 && R1282 = 1 && R1283 = R1295 && R1284 = 1 && R1285 = R1295 && R1286 = 1 && R1287 = R1295 && R1288 = 1 && R1289 = R1295 && R1290 = 1 && R1291 = R1295 && R1292 = 1 && R1293 = R1295 && R1294 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R1151 + -1*R1149 < 1 && 0 < R1243 && 0 < R1295 && (R1151 + R1149 != 0 || R1229 + R1226 = 0 || (R1227 + R1224 = 0 && R1228 + R1225 = 0)) && (R1227 + R1224 != 0 || R1151 + R1149 + -1*R1228 + -1*R1225 = 0 || R1151 + R1149 < 1) && (R15 = 0 || (R1244 = 0 && R1245 = 0)) && (R15 = 0 || (R1248 = 0 && R1249 = 0)) && (R15 = 0 || (R1250 = 0 && R1251 = 0)) && (R1227 + R1224 = 0 || R1151 + R1149 < 1);
// End of Parikh automata intersection problem
