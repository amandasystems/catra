// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R2, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37;
synchronised {  // Automata constraining headerkey
automaton headerkey_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
};
synchronised {  // Automata constraining url
automaton url_0 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton url_1 {
  init s0;
  s0 -> s1 [0, 57] { R3 += 1 };
  s0 -> s0 [0, 65535] { R2 += 1, R3 += 1 };
  s0 -> s2 [58, 58];
  s0 -> s1 [59, 65535] { R3 += 1 };
  s1 -> s1 [0, 57] { R3 += 1 };
  s1 -> s2 [58, 58];
  s1 -> s1 [59, 65535] { R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton url_2 {
  init s0;
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s1 [104, 104] { R29 += 1 };
  s1 -> s2 [116, 116] { R29 += 1 };
  s2 -> s3 [116, 116] { R29 += 1 };
  s3 -> s4 [112, 112] { R29 += 1 };
  s4 -> s4 [0, 65535];
  accepting s4;
};
automaton url_3 {
  init s0;
  s0 -> s1 [0, 65535] { R31 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R31 += 1, R23 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_4 {
  init s0;
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s1 [0, 65535] { R33 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R33 += 1, R21 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton url_5 {
  init s0;
  s0 -> s1 [0, 46] { R35 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [0, 65535] { R35 += 1, R24 += 1, R25 += 1 };
  s0 -> s3 [47, 47] { R35 += 1, R25 += 1 };
  s0 -> s1 [48, 65535] { R35 += 1, R25 += 1 };
  s1 -> s6 [0, 65535] { R35 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R35 += 1, R25 += 1 };
  s2 -> s1 [0, 46] { R35 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R35 += 1, R24 += 1, R25 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [47, 47] { R35 += 1, R25 += 1 };
  s2 -> s1 [48, 65535] { R35 += 1, R25 += 1 };
  s3 -> s1 [0, 46] { R35 += 1, R25 += 1 };
  s3 -> s3 [0, 65535] { R35 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [47, 47] { R35 += 1, R25 += 1 };
  s3 -> s1 [48, 65535] { R35 += 1, R25 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s1 [0, 65535] { R35 += 1, R25 += 1 };
  s6 -> s6 [0, 65535] { R35 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s2, s6, s1, s0;
};
automaton url_6 {
  init s0;
  s0 -> s1 [0, 65535] { R37 += 1, R27 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s2 [0, 65535] { R37 += 1, R26 += 1, R27 += 1 };
  s1 -> s4 [0, 65535] { R37 += 1 };
  s1 -> s1 [0, 65535] { R37 += 1, R27 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R37 += 1, R27 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R37 += 1, R26 += 1, R27 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R37 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = 0 && R3 = R31 && R28 = 0 && R29 = R31 && R30 = 0 && R31 < R0 && 0 < R31 && (R21 != 0 || ((R0 != R37 || ((R32 != R36 || ((R33 != R37 || ((R34 != R36 || ((R35 != R37 || R31 - R36 = -1 || R37 - R31 < 2) && (R35 = R37 || R37 - R31 < 2))) && (R34 = R36 || R37 - R31 < 2))) && (R33 = R37 || R37 - R31 < 2))) && (R32 = R36 || R37 - R31 < 2))) && (R0 = R37 || R0 - R31 < 2))) && (R24 != 0 || ((R22 != 0 || ((R21 != R25 || R25 < 3) && (R21 != 1 || R25 != 2) && (R21 = R25 || R25 = 2 || R21 < 1))) && (R22 = 0 || (R25 < 3 && (R25 != 2 || 1 < R21) && (R21 = R25 || 1 < R25))))) && (R26 != 0 || ((R22 != 0 || ((R21 != R27 || R27 < 3) && (R21 != 1 || R27 != 2) && (R21 = R27 || R27 = 2 || R21 < 1))) && (R22 = 0 || (R27 < 3 && (R27 != 2 || 1 < R21) && (R21 = R27 || 1 < R27))))) && (R21 = 0 || (R0 = R37 && (R32 != R36 || ((R33 != R37 || ((R34 != R36 || ((R35 != R37 || R31 - R36 = -1 || R37 - R31 < 1) && (R35 = R37 || R37 - R31 < 1))) && (R34 = R36 || R37 - R31 < 1))) && (R33 = R37 || R37 - R31 < 1))) && (R32 = R36 || R37 - R31 < 1))) && (R24 = 0 || (R22 = 0 && R21 < 1)) && (R26 = 0 || (R22 = 0 && R21 < 1));
// End of Parikh automata intersection problem
