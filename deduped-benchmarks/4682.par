// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R5, R7, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R8 += 1 };
  s1 -> s1 [0, 43] { R8 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 43] { R32 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [45, 65535] { R32 += 1 };
  s1 -> s1 [0, 43] { R32 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R32 += 1 };
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R34 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 60] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [0, 65535] { R36 += 1, R5 += 1 };
  s0 -> s3 [61, 61] { R36 += 1 };
  s0 -> s1 [62, 65535] { R36 += 1 };
  s1 -> s1 [0, 60] { R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R36 += 1 };
  s1 -> s1 [62, 65535] { R36 += 1 };
  s2 -> s1 [0, 60] { R36 += 1 };
  s2 -> s2 [0, 65535] { R36 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R36 += 1 };
  s2 -> s1 [62, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535] { R36 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 60] { R40 += 1 };
  s0 -> s2 [0, 65535] { R40 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s3 [61, 61] { R40 += 1 };
  s0 -> s1 [62, 65535] { R40 += 1 };
  s1 -> s1 [0, 60] { R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R40 += 1 };
  s1 -> s1 [62, 65535] { R40 += 1 };
  s2 -> s1 [0, 60] { R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R40 += 1, R4 += 1 };
  s2 -> s3 [61, 61] { R40 += 1 };
  s2 -> s1 [62, 65535] { R40 += 1 };
  s3 -> s3 [0, 65535] { R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s1 [0, 65535] { R42 += 1, R27 += 1, R28 += 1 };
  s0 -> s2 [12, 12] { R42 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R42 += 1, R27 += 1, R28 += 1 };
  s1 -> s2 [12, 12] { R42 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R42 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s1 [0, 65535] { R44 += 1, R30 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R44 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [0, 65535] { R44 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R44 += 1, R30 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R44 += 1, R30 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R44 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R44 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R36 && R7 = 0 && R8 = R44 && R27 = 0 && R31 - R44 = 1 && R32 = R36 && R33 - R44 = 1 && R34 = R36 && R35 - R44 = 1 && R37 = 0 && R38 = R44 && R39 = 0 && R40 = R44 && R41 = 0 && R42 = R44 && R43 = 0 && R0 != 0 && R1 != 0 && R4 < 1 && R5 < 1 && R44 < R36 && -1 < R44 && (R0 != R28 || R28 = 1 || R28 < 0) && (R28 != 1 || -1 < R0) && (R29 != 0 || ((R3 != 0 || ((R0 != R30 || R30 = 1 || R30 < 0) && (R0 = R30 || R30 = 1 || R0 < 1))) && (R3 = 0 || ((R0 != R30 || R30 = 1 || R30 < 0) && (R30 != 1 || -1 < R0) && (R0 = R30 || R30 = 1))))) && (R0 = R28 || R28 = 1) && (R29 = 0 || (R3 = 0 && R0 < 0));
// End of Parikh automata intersection problem
