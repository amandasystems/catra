// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R13, R14, R2, R211, R212, R3, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R212 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R212 += 1 };
  s1 -> s1 [0, 60] { R212 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R212 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R341 += 1, R342 += 1 };
  s0 -> s1 [0, 65535] { R342 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R342 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s0 -> s1 [0, 65535] { R344 += 1, R311 += 1, R312 += 1 };
  s0 -> s2 [11, 11] { R344 += 1, R312 += 1 };
  s1 -> s1 [0, 65535] { R344 += 1, R311 += 1, R312 += 1 };
  s1 -> s2 [11, 11] { R344 += 1, R312 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R344 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R346 += 1, R313 += 1, R314 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s2 [0, 65535] { R346 += 1, R314 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R346 += 1, R313 += 1, R314 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R346 += 1, R314 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R346 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R346 += 1, R314 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R346 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s1 [0, 65535] { R376 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R376 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R378 += 1, R331 += 1, R332 += 1 };
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s2 [13, 13] { R378 += 1, R332 += 1 };
  s1 -> s1 [0, 65535] { R378 += 1, R331 += 1, R332 += 1 };
  s1 -> s2 [13, 13] { R378 += 1, R332 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R378 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R380 += 1, R334 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s2 [0, 65535] { R380 += 1, R333 += 1, R334 += 1 };
  s1 -> s1 [0, 65535] { R380 += 1, R334 += 1, R10 += 1 };
  s1 -> s4 [0, 65535] { R380 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R380 += 1, R334 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R380 += 1, R333 += 1, R334 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R380 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R382 += 1, R352 += 1 };
  s0 -> s2 [0, 65535] { R382 += 1, R351 += 1, R352 += 1 };
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s0 -> s3 [67, 67] { R382 += 1, R352 += 1 };
  s0 -> s1 [68, 65535] { R382 += 1, R352 += 1 };
  s1 -> s1 [0, 64] { R382 += 1, R352 += 1 };
  s1 -> s3 [67, 67] { R382 += 1, R352 += 1 };
  s1 -> s1 [68, 65535] { R382 += 1, R352 += 1 };
  s2 -> s1 [0, 64] { R382 += 1, R352 += 1 };
  s2 -> s2 [0, 65535] { R382 += 1, R351 += 1, R352 += 1 };
  s2 -> s3 [67, 67] { R382 += 1, R352 += 1 };
  s2 -> s1 [68, 65535] { R382 += 1, R352 += 1 };
  s3 -> s3 [0, 64] { R382 += 1, R352 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R382 += 1 };
  s3 -> s3 [67, 65535] { R382 += 1, R352 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s1 [0, 65535] { R384 += 1, R353 += 1, R354 += 1 };
  s0 -> s2 [0, 65535] { R384 += 1, R354 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R384 += 1, R353 += 1, R354 += 1 };
  s1 -> s2 [0, 65535] { R384 += 1, R354 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R384 += 1, R354 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R384 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R384 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 66] { R386 += 1, R356 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R386 += 1, R355 += 1, R356 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s0 -> s3 [0, 65535] { R386 += 1, R356 += 1, R13 += 1, R14 += 1 };
  s0 -> s4 [67, 67] { R386 += 1, R356 += 1 };
  s0 -> s1 [68, 65535] { R386 += 1, R356 += 1, R14 += 1 };
  s1 -> s1 [0, 66] { R386 += 1, R356 += 1, R14 += 1 };
  s1 -> s4 [67, 67] { R386 += 1, R356 += 1 };
  s1 -> s1 [68, 65535] { R386 += 1, R356 += 1, R14 += 1 };
  s2 -> s1 [0, 66] { R386 += 1, R356 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R386 += 1, R355 += 1, R356 += 1 };
  s2 -> s3 [0, 65535] { R386 += 1, R356 += 1, R13 += 1, R14 += 1 };
  s2 -> s4 [67, 67] { R386 += 1, R356 += 1 };
  s2 -> s1 [68, 65535] { R386 += 1, R356 += 1, R14 += 1 };
  s3 -> s1 [0, 66] { R386 += 1, R356 += 1, R14 += 1 };
  s3 -> s3 [0, 65535] { R386 += 1, R356 += 1, R13 += 1, R14 += 1 };
  s3 -> s4 [67, 67] { R386 += 1, R356 += 1 };
  s3 -> s1 [68, 65535] { R386 += 1, R356 += 1, R14 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R386 += 1 };
  s4 -> s4 [0, 65535] { R386 += 1, R356 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R386 += 1 };
  accepting s4, s5, s6;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R388 += 1, R358 += 1, R324 += 1 };
  s0 -> s2 [0, 65535] { R388 += 1, R358 += 1, R323 += 1, R324 += 1 };
  s0 -> s3 [0, 65535] { R388 += 1, R357 += 1, R358 += 1 };
  s0 -> s0 [0, 65535] { R387 += 1, R388 += 1 };
  s0 -> s4 [9, 13] { R388 += 1, R358 += 1, R324 += 1 };
  s0 -> s1 [14, 31] { R388 += 1, R358 += 1, R324 += 1 };
  s0 -> s4 [32, 32] { R388 += 1, R358 += 1, R324 += 1 };
  s0 -> s1 [33, 65535] { R388 += 1, R358 += 1, R324 += 1 };
  s1 -> s1 [0, 65535] { R388 += 1, R358 += 1, R324 += 1 };
  s1 -> s7 [0, 65535] { R388 += 1, R358 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R388 += 1 };
  s2 -> s1 [0, 8] { R388 += 1, R358 += 1, R324 += 1 };
  s2 -> s2 [0, 65535] { R388 += 1, R358 += 1, R323 += 1, R324 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R388 += 1 };
  s2 -> s4 [9, 13] { R388 += 1, R358 += 1, R324 += 1 };
  s2 -> s1 [14, 31] { R388 += 1, R358 += 1, R324 += 1 };
  s2 -> s4 [32, 32] { R388 += 1, R358 += 1, R324 += 1 };
  s2 -> s1 [33, 65535] { R388 += 1, R358 += 1, R324 += 1 };
  s3 -> s1 [0, 8] { R388 += 1, R358 += 1, R324 += 1 };
  s3 -> s2 [0, 65535] { R388 += 1, R358 += 1, R323 += 1, R324 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R388 += 1, R357 += 1, R358 += 1 };
  s3 -> s4 [9, 13] { R388 += 1, R358 += 1, R324 += 1 };
  s3 -> s1 [14, 31] { R388 += 1, R358 += 1, R324 += 1 };
  s3 -> s4 [32, 32] { R388 += 1, R358 += 1, R324 += 1 };
  s3 -> s1 [33, 65535] { R388 += 1, R358 += 1, R324 += 1 };
  s4 -> s1 [0, 65535] { R388 += 1, R358 += 1, R324 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R388 += 1 };
  s7 -> s7 [0, 65535] { R388 += 1, R358 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R388 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R390 += 1, R360 += 1, R326 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R390 += 1, R360 += 1, R325 += 1, R326 += 1 };
  s0 -> s0 [0, 65535] { R389 += 1, R390 += 1 };
  s0 -> s3 [0, 65535] { R390 += 1, R359 += 1, R360 += 1 };
  s1 -> s1 [0, 65535] { R390 += 1, R360 += 1, R326 += 1, R8 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R390 += 1 };
  s1 -> s6 [0, 65535] { R390 += 1, R360 += 1 };
  s2 -> s1 [0, 65535] { R390 += 1, R360 += 1, R326 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R390 += 1, R360 += 1, R325 += 1, R326 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R390 += 1 };
  s3 -> s1 [0, 65535] { R390 += 1, R360 += 1, R326 += 1, R8 += 1 };
  s3 -> s2 [0, 65535] { R390 += 1, R360 += 1, R325 += 1, R326 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R390 += 1, R359 += 1, R360 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R390 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R390 += 1 };
  s6 -> s6 [0, 65535] { R390 += 1, R360 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R392 += 1, R362 += 1, R328 += 1 };
  s0 -> s0 [0, 65535] { R391 += 1, R392 += 1 };
  s0 -> s2 [0, 65535] { R392 += 1, R362 += 1, R327 += 1, R328 += 1 };
  s0 -> s3 [0, 65535] { R392 += 1, R361 += 1, R362 += 1 };
  s0 -> s4 [9, 13] { R392 += 1, R362 += 1, R328 += 1 };
  s0 -> s1 [14, 31] { R392 += 1, R362 += 1, R328 += 1 };
  s0 -> s4 [32, 32] { R392 += 1, R362 += 1, R328 += 1 };
  s0 -> s1 [33, 65535] { R392 += 1, R362 += 1, R328 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R392 += 1, R362 += 1, R328 += 1 };
  s1 -> s6 [0, 65535] { R392 += 1 };
  s1 -> s7 [0, 65535] { R392 += 1, R362 += 1 };
  s2 -> s1 [0, 8] { R392 += 1, R362 += 1, R328 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R392 += 1, R362 += 1, R327 += 1, R328 += 1 };
  s2 -> s6 [0, 65535] { R392 += 1 };
  s2 -> s4 [9, 13] { R392 += 1, R362 += 1, R328 += 1 };
  s2 -> s1 [14, 31] { R392 += 1, R362 += 1, R328 += 1 };
  s2 -> s4 [32, 32] { R392 += 1, R362 += 1, R328 += 1 };
  s2 -> s1 [33, 65535] { R392 += 1, R362 += 1, R328 += 1 };
  s3 -> s1 [0, 8] { R392 += 1, R362 += 1, R328 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R392 += 1, R362 += 1, R327 += 1, R328 += 1 };
  s3 -> s3 [0, 65535] { R392 += 1, R361 += 1, R362 += 1 };
  s3 -> s4 [9, 13] { R392 += 1, R362 += 1, R328 += 1 };
  s3 -> s1 [14, 31] { R392 += 1, R362 += 1, R328 += 1 };
  s3 -> s4 [32, 32] { R392 += 1, R362 += 1, R328 += 1 };
  s3 -> s1 [33, 65535] { R392 += 1, R362 += 1, R328 += 1 };
  s4 -> s1 [0, 65535] { R392 += 1, R362 += 1, R328 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R392 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R392 += 1 };
  s7 -> s7 [0, 65535] { R392 += 1, R362 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R394 += 1, R364 += 1, R330 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R394 += 1, R364 += 1, R329 += 1, R330 += 1 };
  s0 -> s0 [0, 65535] { R393 += 1, R394 += 1 };
  s0 -> s3 [0, 65535] { R394 += 1, R363 += 1, R364 += 1 };
  s1 -> s1 [0, 65535] { R394 += 1, R364 += 1, R330 += 1, R9 += 1 };
  s1 -> s6 [0, 65535] { R394 += 1, R364 += 1 };
  s1 -> s5 [0, 65535] { R394 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R394 += 1, R364 += 1, R330 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R394 += 1, R364 += 1, R329 += 1, R330 += 1 };
  s2 -> s5 [0, 65535] { R394 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R394 += 1, R364 += 1, R330 += 1, R9 += 1 };
  s3 -> s2 [0, 65535] { R394 += 1, R364 += 1, R329 += 1, R330 += 1 };
  s3 -> s3 [0, 65535] { R394 += 1, R363 += 1, R364 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R394 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R394 += 1, R364 += 1 };
  s6 -> s5 [0, 65535] { R394 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 66] { R396 += 1, R366 += 1, R336 += 1 };
  s0 -> s0 [0, 65535] { R395 += 1, R396 += 1 };
  s0 -> s2 [0, 65535] { R396 += 1, R365 += 1, R366 += 1 };
  s0 -> s3 [0, 65535] { R396 += 1, R366 += 1, R335 += 1, R336 += 1 };
  s0 -> s1 [68, 65535] { R396 += 1, R366 += 1, R336 += 1 };
  s1 -> s1 [0, 66] { R396 += 1, R366 += 1, R336 += 1 };
  s1 -> s4 [0, 65535] { R396 += 1 };
  s1 -> s1 [0, 65535] { R396 += 1, R366 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [68, 65535] { R396 += 1, R366 += 1, R336 += 1 };
  s2 -> s1 [0, 66] { R396 += 1, R366 += 1, R336 += 1 };
  s2 -> s2 [0, 65535] { R396 += 1, R365 += 1, R366 += 1 };
  s2 -> s3 [0, 65535] { R396 += 1, R366 += 1, R335 += 1, R336 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [68, 65535] { R396 += 1, R366 += 1, R336 += 1 };
  s3 -> s1 [0, 66] { R396 += 1, R366 += 1, R336 += 1 };
  s3 -> s4 [0, 65535] { R396 += 1 };
  s3 -> s3 [0, 65535] { R396 += 1, R366 += 1, R335 += 1, R336 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [68, 65535] { R396 += 1, R366 += 1, R336 += 1 };
  s4 -> s4 [0, 65535] { R396 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s0 [0, 65535] { R397 += 1, R398 += 1 };
  s0 -> s1 [0, 65535] { R398 += 1, R367 += 1, R368 += 1 };
  s0 -> s2 [0, 65535] { R398 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s0 -> s3 [0, 65535] { R398 += 1, R368 += 1, R338 += 1, R309 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R398 += 1, R367 += 1, R368 += 1 };
  s1 -> s2 [0, 65535] { R398 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s1 -> s3 [0, 65535] { R398 += 1, R368 += 1, R338 += 1, R309 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R398 += 1, R368 += 1, R337 += 1, R338 += 1 };
  s2 -> s3 [0, 65535] { R398 += 1, R368 += 1, R338 += 1, R309 += 1 };
  s2 -> s6 [0, 65535] { R398 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R398 += 1, R368 += 1 };
  s3 -> s3 [0, 65535] { R398 += 1, R368 += 1, R338 += 1, R309 += 1 };
  s3 -> s6 [0, 65535] { R398 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R398 += 1, R368 += 1 };
  s5 -> s6 [0, 65535] { R398 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R398 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 67] { R400 += 1, R370 += 1, R340 += 1 };
  s0 -> s2 [0, 65535] { R400 += 1, R370 += 1, R339 += 1, R340 += 1 };
  s0 -> s0 [0, 65535] { R399 += 1, R400 += 1 };
  s0 -> s3 [0, 65535] { R400 += 1, R369 += 1, R370 += 1 };
  s0 -> s1 [91, 65535] { R400 += 1, R370 += 1, R340 += 1 };
  s1 -> s1 [0, 67] { R400 += 1, R370 += 1, R340 += 1 };
  s1 -> s1 [0, 65535] { R400 += 1, R370 += 1 };
  s1 -> s5 [0, 65535] { R400 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [91, 65535] { R400 += 1, R370 += 1, R340 += 1 };
  s2 -> s1 [0, 67] { R400 += 1, R370 += 1, R340 += 1 };
  s2 -> s2 [0, 65535] { R400 += 1, R370 += 1, R339 += 1, R340 += 1 };
  s2 -> s5 [0, 65535] { R400 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R400 += 1, R370 += 1, R340 += 1 };
  s3 -> s1 [0, 67] { R400 += 1, R370 += 1, R340 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R400 += 1, R370 += 1, R339 += 1, R340 += 1 };
  s3 -> s3 [0, 65535] { R400 += 1, R369 += 1, R370 += 1 };
  s3 -> s1 [91, 65535] { R400 += 1, R370 += 1, R340 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R400 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R401 += 1, R402 += 1 };
  s0 -> s1 [0, 65535] { R402 += 1, R372 += 1, R348 += 1, R310 += 1 };
  s0 -> s2 [0, 65535] { R402 += 1, R371 += 1, R372 += 1 };
  s0 -> s3 [0, 65535] { R402 += 1, R372 += 1, R347 += 1, R348 += 1 };
  s1 -> s1 [0, 65535] { R402 += 1, R372 += 1, R348 += 1, R310 += 1 };
  s1 -> s6 [0, 65535] { R402 += 1, R372 += 1 };
  s1 -> s4 [0, 65535] { R402 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R402 += 1, R372 += 1, R348 += 1, R310 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R402 += 1, R371 += 1, R372 += 1 };
  s2 -> s3 [0, 65535] { R402 += 1, R372 += 1, R347 += 1, R348 += 1 };
  s3 -> s1 [0, 65535] { R402 += 1, R372 += 1, R348 += 1, R310 += 1 };
  s3 -> s4 [0, 65535] { R402 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R402 += 1, R372 += 1, R347 += 1, R348 += 1 };
  s4 -> s4 [0, 65535] { R402 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R402 += 1, R372 += 1 };
  s6 -> s4 [0, 65535] { R402 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 66] { R404 += 1, R374 += 1, R350 += 1 };
  s0 -> s2 [0, 65535] { R404 += 1, R374 += 1, R349 += 1, R350 += 1 };
  s0 -> s0 [0, 65535] { R403 += 1, R404 += 1 };
  s0 -> s3 [0, 65535] { R404 += 1, R373 += 1, R374 += 1 };
  s0 -> s4 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s0 -> s5 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s0 -> s1 [91, 65535] { R404 += 1, R374 += 1, R350 += 1 };
  s1 -> s1 [0, 66] { R404 += 1, R374 += 1, R350 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R404 += 1, R374 += 1 };
  s1 -> s7 [0, 65535] { R404 += 1 };
  s1 -> s4 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s1 -> s5 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s1 -> s1 [91, 65535] { R404 += 1, R374 += 1, R350 += 1 };
  s2 -> s1 [0, 66] { R404 += 1, R374 += 1, R350 += 1 };
  s2 -> s2 [0, 65535] { R404 += 1, R374 += 1, R349 += 1, R350 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R404 += 1 };
  s2 -> s4 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s2 -> s5 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s2 -> s1 [91, 65535] { R404 += 1, R374 += 1, R350 += 1 };
  s3 -> s1 [0, 66] { R404 += 1, R374 += 1, R350 += 1 };
  s3 -> s2 [0, 65535] { R404 += 1, R374 += 1, R349 += 1, R350 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R404 += 1, R373 += 1, R374 += 1 };
  s3 -> s4 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s3 -> s5 [67, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s3 -> s1 [91, 65535] { R404 += 1, R374 += 1, R350 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R404 += 1 };
  s4 -> s4 [0, 65535] { R404 += 1, R374 += 1 };
  s5 -> s5 [0, 67] { R404 += 1, R374 += 1, R350 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R404 += 1 };
  s5 -> s5 [0, 65535] { R404 += 1, R374 += 1 };
  s5 -> s5 [91, 65535] { R404 += 1, R374 += 1, R350 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R404 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R11 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R316 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [9, 13] { R316 += 1 };
  s0 -> s1 [14, 31] { R316 += 1 };
  s0 -> s2 [32, 32] { R316 += 1 };
  s0 -> s1 [33, 65535] { R316 += 1 };
  s1 -> s1 [0, 65535] { R316 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R316 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s1 [0, 65535] { R318 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R318 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R320 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s0 -> s2 [9, 13] { R320 += 1 };
  s0 -> s1 [14, 31] { R320 += 1 };
  s0 -> s2 [32, 32] { R320 += 1 };
  s0 -> s1 [33, 65535] { R320 += 1 };
  s1 -> s1 [0, 65535] { R320 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R320 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R322 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R321 += 1, R322 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R322 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R326 && R3 = R374 && R4 = R346 && R13 = 0 && R211 = 0 && R212 = R404 && R311 = 0 && R323 - R326 = -1 && R324 = R326 && R325 - R326 = -1 && R327 = 0 && R328 = 1 && R329 = 0 && R330 = 1 && R331 = 0 && R332 = 1 && R333 = 0 && R334 = 1 && R341 - R404 = 1 && R342 = R346 && R343 - R404 = 1 && R344 = R346 && R345 - R404 = 1 && R351 = 1 && R352 = R374 && R353 = 1 && R354 = R374 && R355 = 1 && R356 = R374 && R357 = 1 && R358 = R374 && R359 = 1 && R360 = R374 && R361 = 1 && R362 = R374 && R363 = 1 && R364 = R374 && R365 = 1 && R366 = R374 && R367 = 1 && R368 = R374 && R369 = 1 && R370 = R374 && R371 = 1 && R372 = R374 && R373 = 1 && R375 = 0 && R376 = R404 && R377 = 0 && R378 = R404 && R379 = 0 && R380 = R404 && R381 = 0 && R382 = R404 && R383 = 0 && R384 = R404 && R385 = 0 && R386 = R404 && R387 = 0 && R388 = R404 && R389 = 0 && R390 = R404 && R391 = 0 && R392 = R404 && R393 = 0 && R394 = R404 && R395 = 0 && R396 = R404 && R397 = 0 && R398 = R404 && R399 = 0 && R400 = R404 && R401 = 0 && R402 = R404 && R403 = 0 && R0 != 0 && R1 != 0 && R11 < 1 && R14 < R326 && -2 < R14 && 0 < R326 && R404 < R346 && 0 < R374 && -1 < R404 && (R0 != R312 || R312 = 1 || R312 < 0) && (R6 != 0 || ((R1 != R316 || R315 - R316 = -1 || R316 < 0) && (R1 = R316 || R1 < 1))) && (R6 != 0 || ((R1 != R318 || R317 - R318 = -1 || R318 < 0) && (R1 = R318 || R1 < 1))) && (R310 != 0 || ((R347 != 0 || R14 - R348 = -1 || R14 < 0) && (R347 = 0 || R14 < 0))) && (R310 != 0 || ((R349 != 0 || R14 - R350 = -1 || R14 < 0) && (R349 = 0 || R14 < 0))) && (R312 != 1 || -1 < R0) && (R313 != 0 || ((R5 != 0 || ((R0 != R314 || R314 = 1 || R314 < 0) && (R0 = R314 || R314 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R314 || R314 = 1 || R314 < 0) && (R314 != 1 || -1 < R0) && (R0 = R314 || R314 = 1))))) && (R319 != 0 || ((R7 != 0 || ((R1 != R320 || R320 = 1 || R320 < 0) && (R1 = R320 || R320 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R320 || R320 = 1 || R320 < 0) && (R320 != 1 || -1 < R1) && (R1 = R320 || R320 = 1))))) && (R321 != 0 || ((R7 != 0 || ((R1 != R322 || R322 = 1 || R322 < 0) && (R1 = R322 || R322 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R322 || R322 = 1 || R322 < 0) && (R322 != 1 || -1 < R1) && (R1 = R322 || R322 = 1))))) && (R326 != R336 || R14 - R335 = -1 || ((R309 != 0 || R336 - R14 < 2) && (R309 = 0 || R336 - R14 < 1 || R336 < 1))) && (R326 != R338 || R14 - R337 = -1 || ((R309 != 0 || R338 - R14 < 2) && (R309 = 0 || R338 - R14 < 1 || R338 < 1))) && (R326 != R340 || R14 - R339 = -1 || ((R309 != 0 || R340 - R14 < 2) && (R309 = 0 || R340 - R14 < 1 || R340 < 1))) && (R0 = R312 || R312 = 1) && (R6 = 0 || (R1 = R316 && R315 - R316 = -1)) && (R6 = 0 || (R1 = R318 && R317 - R318 = -1)) && (R310 = 0 || (R14 - R348 = -1 && R347 = 0)) && (R310 = 0 || (R14 - R350 = -1 && R349 = 0)) && (R313 = 0 || (R5 = 0 && R0 < 0)) && (R319 = 0 || (R7 = 0 && R1 < 0)) && (R321 = 0 || (R7 = 0 && R1 < 0)) && (R326 = R336 || (R14 - R326 = -1 && R309 = 0)) && (R326 = R338 || (R14 - R326 = -1 && R309 = 0)) && (R326 = R340 || (R14 - R326 = -1 && R309 = 0));
// End of Parikh automata intersection problem
