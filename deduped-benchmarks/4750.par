// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R32, R33, R4, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43] { R33 += 1 };
  s0 -> s0 [0, 65535] { R32 += 1, R33 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R33 += 1 };
  s1 -> s1 [0, 43] { R33 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R33 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 43] { R47 += 1 };
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s1 [45, 65535] { R47 += 1 };
  s1 -> s1 [0, 43] { R47 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R47 += 1 };
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R49 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R49 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 60] { R51 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R50 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R51 += 1, R4 += 1, R5 += 1 };
  s0 -> s3 [61, 61] { R51 += 1 };
  s0 -> s1 [62, 65535] { R51 += 1, R5 += 1 };
  s1 -> s1 [0, 60] { R51 += 1, R5 += 1 };
  s1 -> s3 [61, 61] { R51 += 1 };
  s1 -> s1 [62, 65535] { R51 += 1, R5 += 1 };
  s2 -> s1 [0, 60] { R51 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R51 += 1, R4 += 1, R5 += 1 };
  s2 -> s3 [61, 61] { R51 += 1 };
  s2 -> s1 [62, 65535] { R51 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R51 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 60] { R53 += 1 };
  s0 -> s2 [0, 65535] { R53 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R52 += 1, R53 += 1 };
  s0 -> s3 [61, 61] { R53 += 1 };
  s0 -> s1 [62, 65535] { R53 += 1 };
  s1 -> s1 [0, 60] { R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R53 += 1 };
  s1 -> s1 [62, 65535] { R53 += 1 };
  s2 -> s1 [0, 60] { R53 += 1 };
  s2 -> s2 [0, 65535] { R53 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [61, 61] { R53 += 1 };
  s2 -> s1 [62, 65535] { R53 += 1 };
  s3 -> s3 [0, 65535] { R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s1 [0, 65535] { R55 += 1, R45 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R55 += 1, R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R51 && R4 = 0 && R32 = 0 && R33 - R50 = -1 && R46 = R50 && R47 = R51 && R48 = R50 && R49 = R51 && R0 != 0 && R5 != -1 && R2 < 1 && R50 - R51 < 1 && 0 < R50 && (R45 != 0 || ((R52 != 0 || ((R54 != 0 || ((R53 != R55 || R50 - R55 = 1 || R50 < 2) && (R53 = R55 || R50 < 2))) && (R54 = 0 || R50 < 2))) && (R52 = 0 || R50 < 2))) && (R45 = 0 || (R50 - R55 = 1 && R52 = 0 && R53 = R55 && R54 = 0));
// End of Parikh automata intersection problem
