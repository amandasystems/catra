// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R136, R138, R139, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R3, R4, R5, R6, R7, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [90, 90];
  s0 -> s0 [91, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [90, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R136 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 89] { R139 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [90, 90];
  s0 -> s1 [91, 65535] { R139 += 1 };
  s1 -> s1 [0, 89] { R139 += 1 };
  s1 -> s2 [90, 90];
  s1 -> s1 [91, 65535] { R139 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R211 += 1 };
  s0 -> s0 [0, 65535] { R210 += 1, R211 += 1 };
  s0 -> s2 [9, 13] { R211 += 1 };
  s0 -> s1 [14, 31] { R211 += 1 };
  s0 -> s2 [32, 32] { R211 += 1 };
  s0 -> s1 [33, 65535] { R211 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R211 += 1 };
  s2 -> s1 [0, 65535] { R211 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R213 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R212 += 1, R213 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R213 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R215 += 1 };
  s0 -> s0 [0, 65535] { R214 += 1, R215 += 1 };
  s0 -> s2 [9, 13] { R215 += 1 };
  s0 -> s1 [14, 31] { R215 += 1 };
  s0 -> s2 [32, 32] { R215 += 1 };
  s0 -> s1 [33, 65535] { R215 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R215 += 1 };
  s2 -> s1 [0, 65535] { R215 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R217 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R216 += 1, R217 += 1 };
  s1 -> s1 [0, 65535] { R217 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 89] { R221 += 1 };
  s0 -> s0 [0, 65535] { R220 += 1, R221 += 1 };
  s0 -> s1 [91, 65535] { R221 += 1 };
  s1 -> s1 [0, 89] { R221 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R221 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R222 += 1, R223 += 1 };
  s0 -> s1 [0, 65535] { R223 += 1, R201 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R223 += 1, R201 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R13 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R13 += 1 };
  s1 -> s1 [0, 60] { R13 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R219 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R218 += 1, R219 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R219 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R235 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [85, 85] { R235 += 1 };
  s0 -> s1 [86, 65535] { R235 += 1 };
  s1 -> s1 [0, 64] { R235 += 1 };
  s1 -> s2 [85, 85] { R235 += 1 };
  s1 -> s1 [86, 65535] { R235 += 1 };
  s2 -> s2 [0, 64] { R235 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [85, 65535] { R235 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s1 [0, 65535] { R237 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R237 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 84] { R239 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R8 += 1 };
  s0 -> s3 [85, 85] { R239 += 1 };
  s0 -> s1 [86, 65535] { R239 += 1 };
  s1 -> s1 [0, 84] { R239 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [85, 85] { R239 += 1 };
  s1 -> s1 [86, 65535] { R239 += 1 };
  s2 -> s1 [0, 84] { R239 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R8 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [85, 85] { R239 += 1 };
  s2 -> s1 [86, 65535] { R239 += 1 };
  s3 -> s3 [0, 65535] { R239 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R241 += 1, R203 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R202 += 1, R203 += 1 };
  s0 -> s3 [9, 13] { R241 += 1, R203 += 1 };
  s0 -> s1 [14, 31] { R241 += 1, R203 += 1 };
  s0 -> s3 [32, 32] { R241 += 1, R203 += 1 };
  s0 -> s1 [33, 65535] { R241 += 1, R203 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R241 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R203 += 1 };
  s2 -> s1 [0, 8] { R241 += 1, R203 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R241 += 1, R202 += 1, R203 += 1 };
  s2 -> s3 [9, 13] { R241 += 1, R203 += 1 };
  s2 -> s1 [14, 31] { R241 += 1, R203 += 1 };
  s2 -> s3 [32, 32] { R241 += 1, R203 += 1 };
  s2 -> s1 [33, 65535] { R241 += 1, R203 += 1 };
  s3 -> s1 [0, 65535] { R241 += 1, R203 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R241 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R243 += 1, R205 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R204 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s1 -> s1 [0, 65535] { R243 += 1, R205 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R243 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R243 += 1, R205 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R243 += 1, R204 += 1, R205 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R243 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R245 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R206 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s3 [9, 13] { R245 += 1, R207 += 1 };
  s0 -> s1 [14, 31] { R245 += 1, R207 += 1 };
  s0 -> s3 [32, 32] { R245 += 1, R207 += 1 };
  s0 -> s1 [33, 65535] { R245 += 1, R207 += 1 };
  s1 -> s1 [0, 65535] { R245 += 1, R207 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R245 += 1 };
  s2 -> s1 [0, 8] { R245 += 1, R207 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R206 += 1, R207 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R245 += 1, R207 += 1 };
  s2 -> s1 [14, 31] { R245 += 1, R207 += 1 };
  s2 -> s3 [32, 32] { R245 += 1, R207 += 1 };
  s2 -> s1 [33, 65535] { R245 += 1, R207 += 1 };
  s3 -> s1 [0, 65535] { R245 += 1, R207 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R245 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R247 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R209 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1, R208 += 1, R209 += 1 };
  s1 -> s2 [0, 65535] { R247 += 1, R209 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R247 += 1, R209 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R247 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R247 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 84] { R249 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s1 [86, 65535] { R249 += 1, R225 += 1 };
  s1 -> s1 [0, 84] { R249 += 1, R225 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [86, 65535] { R249 += 1, R225 += 1 };
  s2 -> s1 [0, 84] { R249 += 1, R225 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R224 += 1, R225 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [86, 65535] { R249 += 1, R225 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s1 [0, 65535] { R251 += 1, R227 += 1, R199 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R226 += 1, R227 += 1 };
  s1 -> s4 [0, 65535] { R251 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1, R227 += 1, R199 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R251 += 1, R227 += 1, R199 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R226 += 1, R227 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R251 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 85] { R253 += 1, R229 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R228 += 1, R229 += 1 };
  s0 -> s1 [90, 65535] { R253 += 1, R229 += 1 };
  s1 -> s1 [0, 85] { R253 += 1, R229 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R253 += 1 };
  s1 -> s1 [90, 65535] { R253 += 1, R229 += 1 };
  s2 -> s1 [0, 85] { R253 += 1, R229 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R253 += 1, R228 += 1, R229 += 1 };
  s2 -> s1 [90, 65535] { R253 += 1, R229 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R255 += 1, R230 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R231 += 1, R200 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R255 += 1, R230 += 1, R231 += 1 };
  s1 -> s2 [0, 65535] { R255 += 1, R231 += 1, R200 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R255 += 1, R231 += 1, R200 += 1 };
  s2 -> s4 [0, 65535] { R255 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R255 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 84] { R257 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R232 += 1, R233 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s3 [85, 85] { R257 += 1, R233 += 1 };
  s0 -> s4 [85, 85] { R257 += 1, R233 += 1 };
  s0 -> s1 [90, 65535] { R257 += 1, R233 += 1 };
  s1 -> s1 [0, 84] { R257 += 1, R233 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R257 += 1 };
  s1 -> s3 [85, 85] { R257 += 1, R233 += 1 };
  s1 -> s4 [85, 85] { R257 += 1, R233 += 1 };
  s1 -> s1 [90, 65535] { R257 += 1, R233 += 1 };
  s2 -> s1 [0, 84] { R257 += 1, R233 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R257 += 1, R232 += 1, R233 += 1 };
  s2 -> s3 [85, 85] { R257 += 1, R233 += 1 };
  s2 -> s4 [85, 85] { R257 += 1, R233 += 1 };
  s2 -> s1 [90, 65535] { R257 += 1, R233 += 1 };
  s3 -> s3 [0, 85] { R257 += 1, R233 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R257 += 1 };
  s3 -> s3 [90, 65535] { R257 += 1, R233 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R257 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [117, 117];
  accepting s1;
};
};
constraint R1 = R229 && R2 = R219 && R3 = R213 && R12 = 0 && R13 = R257 && R138 = 0 && R202 - R229 = -1 && R203 = R229 && R204 - R229 = -1 && R205 = R229 && R206 = 0 && R207 = 1 && R208 = 0 && R209 = 1 && R210 - R213 = -1 && R211 = R213 && R212 - R213 = -1 && R214 = 0 && R215 = 1 && R216 = 0 && R217 = 1 && R218 - R257 = 1 && R224 = 0 && R225 = R229 && R226 = 0 && R227 = R229 && R228 = 0 && R234 = 0 && R235 = R257 && R236 = 0 && R237 = R257 && R238 = 0 && R239 = R257 && R240 = 0 && R241 = R257 && R242 = 0 && R243 = R257 && R244 = 0 && R245 = R257 && R246 = 0 && R247 = R257 && R248 = 0 && R249 = R257 && R250 = 0 && R251 = R257 && R252 = 0 && R253 = R257 && R254 = 0 && R255 = R257 && R256 = 0 && R0 != 0 && R8 < 1 && R136 < 1 && R139 < R213 && -2 < R139 && 0 < R213 && R257 < R219 && 0 < R229 && -1 < R257 && (R213 != R221 || R139 - R220 = -1 || ((R201 != 0 || R221 - R139 < 2) && (R201 = 0 || R221 - R139 < 1 || R221 < 1))) && (R213 != R223 || R139 - R222 = -1 || ((R201 != 0 || R223 - R139 < 2) && (R201 = 0 || R223 - R139 < 1 || R223 < 1))) && (R200 = 0 || (R230 = 0 && R231 = 0)) && (R200 = 0 || (R232 = 0 && R233 = 0)) && (R213 = R221 || (R139 - R213 = -1 && R201 = 0)) && (R213 = R223 || (R139 - R213 = -1 && R201 = 0));
// End of Parikh automata intersection problem
