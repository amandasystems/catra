// Parikh automata intersection problem, generated by OSTRICH+
counter int R1000, R1001, R1002, R1003, R1004, R1005, R1006, R1007, R1008, R1009, R1010, R1011, R1012, R1013, R1014, R1015, R1016, R1017, R1018, R1019, R1020, R1021, R1022, R1023, R1024, R1025, R1026, R1027, R1028, R1029, R1030, R1031, R1032, R1033, R1034, R1035, R1036, R1037, R1038, R1039, R1040, R1041, R1042, R1043, R1044, R1045, R1046, R1047, R1048, R1049, R1050, R1051, R1052, R1053, R1054, R1055, R1056, R1057, R1058, R1059, R1060, R14, R17, R2, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R5, R6, R7, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927, R928, R929, R930, R931, R932, R933, R934, R935, R936, R937, R938, R939, R940, R941, R942, R943, R944, R945, R946, R947, R948, R949, R950, R951, R952, R953, R954, R955, R956, R957, R958, R959, R960, R961, R962, R963, R964, R965, R966, R967, R968, R969, R970, R971, R972, R973, R974, R975, R976, R977, R978, R979, R980, R981, R982, R983, R984, R985, R986, R987, R988, R989, R990, R991, R992, R993, R994, R995, R996, R997, R998, R999;
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [9, 9] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R990 += 1 };
  s0 -> s0 [0, 65535] { R989 += 1, R990 += 1 };
  s0 -> s2 [67, 67] { R990 += 1 };
  s0 -> s1 [68, 65535] { R990 += 1 };
  s1 -> s1 [0, 64] { R990 += 1 };
  s1 -> s2 [67, 67] { R990 += 1 };
  s1 -> s1 [68, 65535] { R990 += 1 };
  s2 -> s2 [0, 64] { R990 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R990 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R992 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R991 += 1, R992 += 1 };
  s1 -> s1 [0, 65535] { R992 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 66] { R994 += 1 };
  s0 -> s2 [0, 65535] { R994 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R993 += 1, R994 += 1 };
  s0 -> s3 [67, 67] { R994 += 1 };
  s0 -> s1 [68, 65535] { R994 += 1 };
  s1 -> s1 [0, 66] { R994 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R994 += 1 };
  s1 -> s1 [68, 65535] { R994 += 1 };
  s2 -> s1 [0, 66] { R994 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R994 += 1, R14 += 1 };
  s2 -> s3 [67, 67] { R994 += 1 };
  s2 -> s1 [68, 65535] { R994 += 1 };
  s3 -> s3 [0, 65535] { R994 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R996 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R996 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R995 += 1, R996 += 1 };
  s0 -> s3 [9, 13] { R996 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R996 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R996 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R996 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R996 += 1 };
  s1 -> s1 [0, 65535] { R996 += 1, R24 += 1 };
  s2 -> s1 [0, 8] { R996 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R996 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R996 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R996 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R996 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R996 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R996 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R996 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R998 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R998 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R997 += 1, R998 += 1 };
  s1 -> s1 [0, 65535] { R998 += 1, R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535] { R998 += 1, R26 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R998 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R998 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R998 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1000 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R1000 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R999 += 1, R1000 += 1 };
  s0 -> s3 [9, 13] { R1000 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R1000 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R1000 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R1000 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1000 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R1000 += 1 };
  s2 -> s1 [0, 8] { R1000 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1000 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R1000 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R1000 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R1000 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R1000 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R1000 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1000 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1002 += 1, R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R1001 += 1, R1002 += 1 };
  s0 -> s2 [0, 65535] { R1002 += 1, R29 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1002 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R1002 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1002 += 1, R30 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R1002 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1002 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R1004 += 1, R932 += 1 };
  s0 -> s2 [0, 65535] { R1004 += 1, R931 += 1, R932 += 1 };
  s0 -> s0 [0, 65535] { R1003 += 1, R1004 += 1 };
  s0 -> s1 [68, 65535] { R1004 += 1, R932 += 1 };
  s1 -> s1 [0, 66] { R1004 += 1, R932 += 1 };
  s1 -> s1 [0, 65535] { R1004 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R1004 += 1, R932 += 1 };
  s2 -> s1 [0, 66] { R1004 += 1, R932 += 1 };
  s2 -> s2 [0, 65535] { R1004 += 1, R931 += 1, R932 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [68, 65535] { R1004 += 1, R932 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1006 += 1, R934 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1006 += 1, R933 += 1, R934 += 1 };
  s0 -> s0 [0, 65535] { R1005 += 1, R1006 += 1 };
  s1 -> s1 [0, 65535] { R1006 += 1, R934 += 1, R21 += 1 };
  s1 -> s4 [0, 65535] { R1006 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1006 += 1, R934 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R1006 += 1, R933 += 1, R934 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1006 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 67] { R1008 += 1, R936 += 1 };
  s0 -> s0 [0, 65535] { R1007 += 1, R1008 += 1 };
  s0 -> s2 [0, 65535] { R1008 += 1, R935 += 1, R936 += 1 };
  s0 -> s1 [70, 65535] { R1008 += 1, R936 += 1 };
  s1 -> s1 [0, 67] { R1008 += 1, R936 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1008 += 1 };
  s1 -> s1 [70, 65535] { R1008 += 1, R936 += 1 };
  s2 -> s1 [0, 67] { R1008 += 1, R936 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1008 += 1, R935 += 1, R936 += 1 };
  s2 -> s1 [70, 65535] { R1008 += 1, R936 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1010 += 1, R937 += 1, R938 += 1 };
  s0 -> s0 [0, 65535] { R1009 += 1, R1010 += 1 };
  s0 -> s2 [0, 65535] { R1010 += 1, R938 += 1, R858 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1010 += 1, R937 += 1, R938 += 1 };
  s1 -> s2 [0, 65535] { R1010 += 1, R938 += 1, R858 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1010 += 1 };
  s2 -> s2 [0, 65535] { R1010 += 1, R938 += 1, R858 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1010 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 69] { R1012 += 1, R940 += 1 };
  s0 -> s0 [0, 65535] { R1011 += 1, R1012 += 1 };
  s0 -> s2 [0, 65535] { R1012 += 1, R940 += 1, R860 += 1 };
  s0 -> s3 [0, 65535] { R1012 += 1, R939 += 1, R940 += 1 };
  s0 -> s1 [71, 65535] { R1012 += 1, R940 += 1 };
  s1 -> s1 [0, 69] { R1012 += 1, R940 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1012 += 1 };
  s1 -> s1 [71, 65535] { R1012 += 1, R940 += 1 };
  s2 -> s1 [0, 69] { R1012 += 1, R940 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R1012 += 1 };
  s2 -> s2 [0, 65535] { R1012 += 1, R940 += 1, R860 += 1 };
  s2 -> s1 [71, 65535] { R1012 += 1, R940 += 1 };
  s3 -> s1 [0, 69] { R1012 += 1, R940 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1012 += 1, R940 += 1, R860 += 1 };
  s3 -> s3 [0, 65535] { R1012 += 1, R939 += 1, R940 += 1 };
  s3 -> s1 [71, 65535] { R1012 += 1, R940 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1012 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1014 += 1, R942 += 1, R865 += 1, R866 += 1 };
  s0 -> s2 [0, 65535] { R1014 += 1, R942 += 1, R864 += 1, R865 += 1 };
  s0 -> s3 [0, 65535] { R1014 += 1, R941 += 1, R942 += 1 };
  s0 -> s0 [0, 65535] { R1013 += 1, R1014 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1014 += 1, R942 += 1, R865 += 1, R866 += 1 };
  s1 -> s5 [0, 65535] { R1014 += 1 };
  s1 -> s6 [0, 65535] { R1014 += 1, R942 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R1014 += 1, R942 += 1, R865 += 1, R866 += 1 };
  s2 -> s2 [0, 65535] { R1014 += 1, R942 += 1, R864 += 1, R865 += 1 };
  s2 -> s5 [0, 65535] { R1014 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R1014 += 1, R942 += 1, R865 += 1, R866 += 1 };
  s3 -> s2 [0, 65535] { R1014 += 1, R942 += 1, R864 += 1, R865 += 1 };
  s3 -> s3 [0, 65535] { R1014 += 1, R941 += 1, R942 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1014 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R1014 += 1 };
  s6 -> s6 [0, 65535] { R1014 += 1, R942 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1016 += 1, R944 += 1, R870 += 1 };
  s0 -> s2 [0, 65535] { R1016 += 1, R943 += 1, R944 += 1 };
  s0 -> s3 [0, 65535] { R1016 += 1, R944 += 1, R869 += 1, R870 += 1 };
  s0 -> s0 [0, 65535] { R1015 += 1, R1016 += 1 };
  s0 -> s4 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s0 -> s5 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s0 -> s1 [73, 65535] { R1016 += 1, R944 += 1, R870 += 1 };
  s1 -> s1 [0, 69] { R1016 += 1, R944 += 1, R870 += 1 };
  s1 -> s6 [0, 65535] { R1016 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1016 += 1, R944 += 1 };
  s1 -> s4 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s1 -> s5 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s1 -> s1 [73, 65535] { R1016 += 1, R944 += 1, R870 += 1 };
  s2 -> s1 [0, 69] { R1016 += 1, R944 += 1, R870 += 1 };
  s2 -> s2 [0, 65535] { R1016 += 1, R943 += 1, R944 += 1 };
  s2 -> s3 [0, 65535] { R1016 += 1, R944 += 1, R869 += 1, R870 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s2 -> s5 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s2 -> s1 [73, 65535] { R1016 += 1, R944 += 1, R870 += 1 };
  s3 -> s1 [0, 69] { R1016 += 1, R944 += 1, R870 += 1 };
  s3 -> s3 [0, 65535] { R1016 += 1, R944 += 1, R869 += 1, R870 += 1 };
  s3 -> s6 [0, 65535] { R1016 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s3 -> s5 [70, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s3 -> s1 [73, 65535] { R1016 += 1, R944 += 1, R870 += 1 };
  s4 -> s4 [0, 70] { R1016 += 1, R944 += 1, R870 += 1 };
  s4 -> s6 [0, 65535] { R1016 += 1 };
  s4 -> s4 [0, 65535] { R1016 += 1, R944 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [73, 65535] { R1016 += 1, R944 += 1, R870 += 1 };
  s5 -> s6 [0, 65535] { R1016 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1016 += 1, R944 += 1 };
  s6 -> s6 [0, 65535] { R1016 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 69] { R1018 += 1, R946 += 1, R874 += 1 };
  s0 -> s2 [0, 65535] { R1018 += 1, R945 += 1, R946 += 1 };
  s0 -> s3 [0, 65535] { R1018 += 1, R946 += 1, R873 += 1, R874 += 1 };
  s0 -> s0 [0, 65535] { R1017 += 1, R1018 += 1 };
  s0 -> s4 [70, 70] { R1018 += 1, R946 += 1, R874 += 1 };
  s0 -> s1 [71, 65535] { R1018 += 1, R946 += 1, R874 += 1 };
  s1 -> s1 [0, 69] { R1018 += 1, R946 += 1, R874 += 1 };
  s1 -> s4 [70, 70] { R1018 += 1, R946 += 1, R874 += 1 };
  s1 -> s1 [71, 65535] { R1018 += 1, R946 += 1, R874 += 1 };
  s2 -> s1 [0, 69] { R1018 += 1, R946 += 1, R874 += 1 };
  s2 -> s2 [0, 65535] { R1018 += 1, R945 += 1, R946 += 1 };
  s2 -> s3 [0, 65535] { R1018 += 1, R946 += 1, R873 += 1, R874 += 1 };
  s2 -> s4 [70, 70] { R1018 += 1, R946 += 1, R874 += 1 };
  s2 -> s1 [71, 65535] { R1018 += 1, R946 += 1, R874 += 1 };
  s3 -> s1 [0, 69] { R1018 += 1, R946 += 1, R874 += 1 };
  s3 -> s3 [0, 65535] { R1018 += 1, R946 += 1, R873 += 1, R874 += 1 };
  s3 -> s4 [70, 70] { R1018 += 1, R946 += 1, R874 += 1 };
  s3 -> s1 [71, 65535] { R1018 += 1, R946 += 1, R874 += 1 };
  s4 -> s5 [0, 65535] { R1018 += 1 };
  s4 -> s4 [0, 65535] { R1018 += 1, R946 += 1, R874 += 1 };
  s4 -> s6 [0, 65535] { R1018 += 1, R946 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1018 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s5 [0, 65535] { R1018 += 1 };
  s6 -> s6 [0, 65535] { R1018 += 1, R946 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1020 += 1, R947 += 1, R948 += 1 };
  s0 -> s2 [0, 65535] { R1020 += 1, R948 += 1, R879 += 1, R880 += 1 };
  s0 -> s0 [0, 65535] { R1019 += 1, R1020 += 1 };
  s0 -> s3 [0, 65535] { R1020 += 1, R948 += 1, R878 += 1, R879 += 1 };
  s1 -> s1 [0, 65535] { R1020 += 1, R947 += 1, R948 += 1 };
  s1 -> s2 [0, 65535] { R1020 += 1, R948 += 1, R879 += 1, R880 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R1020 += 1, R948 += 1, R878 += 1, R879 += 1 };
  s2 -> s2 [0, 65535] { R1020 += 1, R948 += 1, R879 += 1, R880 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R1020 += 1, R948 += 1 };
  s2 -> s5 [0, 65535] { R1020 += 1 };
  s3 -> s2 [0, 65535] { R1020 += 1, R948 += 1, R879 += 1, R880 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1020 += 1 };
  s3 -> s3 [0, 65535] { R1020 += 1, R948 += 1, R878 += 1, R879 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1020 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R1020 += 1, R948 += 1 };
  s6 -> s5 [0, 65535] { R1020 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 69] { R1022 += 1, R950 += 1, R885 += 1 };
  s0 -> s2 [0, 65535] { R1022 += 1, R949 += 1, R950 += 1 };
  s0 -> s0 [0, 65535] { R1021 += 1, R1022 += 1 };
  s0 -> s3 [0, 65535] { R1022 += 1, R950 += 1, R885 += 1, R886 += 1 };
  s0 -> s4 [0, 65535] { R1022 += 1, R950 += 1, R884 += 1, R885 += 1 };
  s0 -> s1 [71, 65535] { R1022 += 1, R950 += 1, R885 += 1 };
  s1 -> s1 [0, 69] { R1022 += 1, R950 += 1, R885 += 1 };
  s1 -> s1 [0, 65535] { R1022 += 1, R950 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1022 += 1 };
  s1 -> s1 [71, 65535] { R1022 += 1, R950 += 1, R885 += 1 };
  s2 -> s1 [0, 69] { R1022 += 1, R950 += 1, R885 += 1 };
  s2 -> s2 [0, 65535] { R1022 += 1, R949 += 1, R950 += 1 };
  s2 -> s3 [0, 65535] { R1022 += 1, R950 += 1, R885 += 1, R886 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R1022 += 1, R950 += 1, R884 += 1, R885 += 1 };
  s2 -> s1 [71, 65535] { R1022 += 1, R950 += 1, R885 += 1 };
  s3 -> s1 [0, 69] { R1022 += 1, R950 += 1, R885 += 1 };
  s3 -> s7 [0, 65535] { R1022 += 1, R950 += 1 };
  s3 -> s3 [0, 65535] { R1022 += 1, R950 += 1, R885 += 1, R886 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1022 += 1 };
  s3 -> s1 [71, 65535] { R1022 += 1, R950 += 1, R885 += 1 };
  s4 -> s1 [0, 69] { R1022 += 1, R950 += 1, R885 += 1 };
  s4 -> s4 [0, 65535] { R1022 += 1, R950 += 1, R884 += 1, R885 += 1 };
  s4 -> s3 [0, 65535] { R1022 += 1, R950 += 1, R885 += 1, R886 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1022 += 1 };
  s4 -> s1 [71, 65535] { R1022 += 1, R950 += 1, R885 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1022 += 1 };
  s7 -> s7 [0, 65535] { R1022 += 1, R950 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1022 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 69] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s0 -> s2 [0, 65535] { R1024 += 1, R952 += 1, R891 += 1, R892 += 1 };
  s0 -> s0 [0, 65535] { R1023 += 1, R1024 += 1 };
  s0 -> s3 [0, 65535] { R1024 += 1, R952 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s0 -> s4 [0, 65535] { R1024 += 1, R951 += 1, R952 += 1 };
  s0 -> s1 [71, 65535] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s1 -> s1 [0, 69] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s1 -> s6 [0, 65535] { R1024 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1024 += 1, R952 += 1, R892 += 1 };
  s1 -> s7 [0, 65535] { R1024 += 1, R952 += 1 };
  s1 -> s1 [71, 65535] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s2 -> s1 [0, 69] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s2 -> s6 [0, 65535] { R1024 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1024 += 1, R952 += 1, R891 += 1, R892 += 1 };
  s2 -> s3 [0, 65535] { R1024 += 1, R952 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s2 -> s1 [71, 65535] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s3 -> s1 [0, 69] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s3 -> s6 [0, 65535] { R1024 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R1024 += 1, R952 += 1 };
  s3 -> s3 [0, 65535] { R1024 += 1, R952 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s3 -> s1 [71, 65535] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s4 -> s1 [0, 69] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R1024 += 1, R952 += 1, R891 += 1, R892 += 1 };
  s4 -> s3 [0, 65535] { R1024 += 1, R952 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s4 -> s4 [0, 65535] { R1024 += 1, R951 += 1, R952 += 1 };
  s4 -> s1 [71, 65535] { R1024 += 1, R952 += 1, R892 += 1, R894 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1024 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1024 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1024 += 1, R952 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1026 += 1, R954 += 1, R900 += 1, R901 += 1 };
  s0 -> s2 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s0 -> s0 [0, 65535] { R1025 += 1, R1026 += 1 };
  s0 -> s3 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s0 -> s4 [0, 65535] { R1026 += 1, R953 += 1, R954 += 1 };
  s1 -> s1 [0, 65535] { R1026 += 1, R954 += 1, R900 += 1, R901 += 1 };
  s1 -> s2 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s1 -> s8 [0, 65535] { R1026 += 1 };
  s2 -> s2 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1026 += 1, R954 += 1 };
  s2 -> s3 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s2 -> s8 [0, 65535] { R1026 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1026 += 1, R954 += 1 };
  s3 -> s7 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1 };
  s3 -> s3 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s3 -> s8 [0, 65535] { R1026 += 1 };
  s4 -> s1 [0, 65535] { R1026 += 1, R954 += 1, R900 += 1, R901 += 1 };
  s4 -> s2 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s4 -> s4 [0, 65535] { R1026 += 1, R953 += 1, R954 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1026 += 1, R954 += 1 };
  s6 -> s8 [0, 65535] { R1026 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1026 += 1, R954 += 1 };
  s7 -> s7 [0, 65535] { R1026 += 1, R954 += 1, R901 += 1 };
  s7 -> s8 [0, 65535] { R1026 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1026 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 70] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s0 -> s2 [0, 65535] { R1028 += 1, R956 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s0 -> s3 [0, 65535] { R1028 += 1, R956 += 1, R909 += 1, R910 += 1 };
  s0 -> s0 [0, 65535] { R1027 += 1, R1028 += 1 };
  s0 -> s4 [0, 65535] { R1028 += 1, R955 += 1, R956 += 1 };
  s0 -> s1 [72, 65535] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s1 -> s1 [0, 70] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s1 -> s7 [0, 65535] { R1028 += 1, R956 += 1 };
  s1 -> s6 [0, 65535] { R1028 += 1 };
  s1 -> s1 [0, 65535] { R1028 += 1, R956 += 1, R910 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [72, 65535] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s2 -> s1 [0, 70] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s2 -> s7 [0, 65535] { R1028 += 1, R956 += 1 };
  s2 -> s2 [0, 65535] { R1028 += 1, R956 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s2 -> s6 [0, 65535] { R1028 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [72, 65535] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s3 -> s1 [0, 70] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s3 -> s2 [0, 65535] { R1028 += 1, R956 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s3 -> s6 [0, 65535] { R1028 += 1 };
  s3 -> s3 [0, 65535] { R1028 += 1, R956 += 1, R909 += 1, R910 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [72, 65535] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s4 -> s1 [0, 70] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s4 -> s2 [0, 65535] { R1028 += 1, R956 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s4 -> s3 [0, 65535] { R1028 += 1, R956 += 1, R909 += 1, R910 += 1 };
  s4 -> s4 [0, 65535] { R1028 += 1, R955 += 1, R956 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [72, 65535] { R1028 += 1, R956 += 1, R910 += 1, R912 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1028 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1028 += 1, R956 += 1 };
  s7 -> s6 [0, 65535] { R1028 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R1030 += 1, R957 += 1, R958 += 1 };
  s0 -> s2 [0, 65535] { R1030 += 1, R958 += 1, R918 += 1, R919 += 1 };
  s0 -> s0 [0, 65535] { R1029 += 1, R1030 += 1 };
  s0 -> s3 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s0 -> s4 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s1 -> s1 [0, 65535] { R1030 += 1, R957 += 1, R958 += 1 };
  s1 -> s2 [0, 65535] { R1030 += 1, R958 += 1, R918 += 1, R919 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s1 -> s4 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s2 -> s2 [0, 65535] { R1030 += 1, R958 += 1, R918 += 1, R919 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R1030 += 1 };
  s2 -> s3 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s2 -> s4 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s3 -> s5 [0, 65535] { R1030 += 1, R958 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R1030 += 1 };
  s3 -> s3 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s3 -> s8 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1 };
  s4 -> s5 [0, 65535] { R1030 += 1, R958 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R1030 += 1 };
  s4 -> s3 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s4 -> s4 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s5 -> s5 [0, 65535] { R1030 += 1, R958 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R1030 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1030 += 1 };
  s8 -> s5 [0, 65535] { R1030 += 1, R958 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1030 += 1 };
  s8 -> s8 [0, 65535] { R1030 += 1, R958 += 1, R919 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s0 -> s2 [0, 65535] { R1032 += 1, R960 += 1, R927 += 1, R928 += 1 };
  s0 -> s3 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1, R929 += 1, R930 += 1 };
  s0 -> s0 [0, 65535] { R1031 += 1, R1032 += 1 };
  s0 -> s4 [0, 65535] { R1032 += 1, R959 += 1, R960 += 1 };
  s0 -> s5 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s0 -> s6 [72, 72] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s0 -> s1 [73, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s1 -> s1 [0, 69] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s1 -> s5 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s1 -> s6 [72, 72] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s1 -> s1 [73, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s2 -> s1 [0, 69] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s2 -> s2 [0, 65535] { R1032 += 1, R960 += 1, R927 += 1, R928 += 1 };
  s2 -> s3 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1, R929 += 1, R930 += 1 };
  s2 -> s5 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s2 -> s6 [72, 72] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s2 -> s1 [73, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s3 -> s1 [0, 69] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s3 -> s3 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1, R929 += 1, R930 += 1 };
  s3 -> s5 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s3 -> s6 [72, 72] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s3 -> s1 [73, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s4 -> s1 [0, 69] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s4 -> s2 [0, 65535] { R1032 += 1, R960 += 1, R927 += 1, R928 += 1 };
  s4 -> s3 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1, R929 += 1, R930 += 1 };
  s4 -> s4 [0, 65535] { R1032 += 1, R959 += 1, R960 += 1 };
  s4 -> s5 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s4 -> s6 [72, 72] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s4 -> s1 [73, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s5 -> s5 [0, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s5 -> s11 [72, 72] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s5 -> s5 [73, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s6 -> s6 [0, 69] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s6 -> s7 [0, 65535] { R1032 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1 };
  s6 -> s9 [0, 65535] { R1032 += 1, R960 += 1 };
  s6 -> s10 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s6 -> s11 [70, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s6 -> s6 [72, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s7 -> s7 [0, 65535] { R1032 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R1032 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R1032 += 1, R960 += 1 };
  s10 -> s7 [0, 65535] { R1032 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s9 [0, 65535] { R1032 += 1, R960 += 1 };
  s10 -> s10 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1 };
  s11 -> s11 [0, 70] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  s11 -> s7 [0, 65535] { R1032 += 1 };
  s11 -> s8 [0, 65535];
  s11 -> s9 [0, 65535] { R1032 += 1, R960 += 1 };
  s11 -> s11 [0, 65535] { R1032 += 1, R960 += 1, R928 += 1 };
  s11 -> s11 [72, 65535] { R1032 += 1, R960 += 1, R928 += 1, R930 += 1 };
  accepting s8, s9, s6, s7, s10, s11;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1034 += 1, R961 += 1, R962 += 1 };
  s0 -> s0 [0, 65535] { R1033 += 1, R1034 += 1 };
  s0 -> s2 [0, 65535] { R1034 += 1, R962 += 1, R22 += 1 };
  s1 -> s1 [0, 65535] { R1034 += 1, R961 += 1, R962 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1034 += 1, R962 += 1, R22 += 1 };
  s2 -> s3 [0, 65535] { R1034 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1034 += 1, R962 += 1, R22 += 1 };
  s3 -> s3 [0, 65535] { R1034 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 66] { R1036 += 1, R964 += 1 };
  s0 -> s0 [0, 65535] { R1035 += 1, R1036 += 1 };
  s0 -> s2 [0, 65535] { R1036 += 1, R963 += 1, R964 += 1 };
  s0 -> s3 [67, 67] { R1036 += 1, R964 += 1 };
  s0 -> s4 [67, 67] { R1036 += 1, R964 += 1 };
  s0 -> s5 [70, 70] { R1036 += 1, R964 += 1 };
  s0 -> s1 [71, 65535] { R1036 += 1, R964 += 1 };
  s1 -> s1 [0, 66] { R1036 += 1, R964 += 1 };
  s1 -> s3 [67, 67] { R1036 += 1, R964 += 1 };
  s1 -> s4 [67, 67] { R1036 += 1, R964 += 1 };
  s1 -> s5 [70, 70] { R1036 += 1, R964 += 1 };
  s1 -> s1 [71, 65535] { R1036 += 1, R964 += 1 };
  s2 -> s1 [0, 66] { R1036 += 1, R964 += 1 };
  s2 -> s2 [0, 65535] { R1036 += 1, R963 += 1, R964 += 1 };
  s2 -> s3 [67, 67] { R1036 += 1, R964 += 1 };
  s2 -> s4 [67, 67] { R1036 += 1, R964 += 1 };
  s2 -> s5 [70, 70] { R1036 += 1, R964 += 1 };
  s2 -> s1 [71, 65535] { R1036 += 1, R964 += 1 };
  s3 -> s3 [0, 67] { R1036 += 1, R964 += 1 };
  s3 -> s7 [70, 70] { R1036 += 1, R964 += 1 };
  s3 -> s3 [71, 65535] { R1036 += 1, R964 += 1 };
  s5 -> s5 [0, 66] { R1036 += 1, R964 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1036 += 1 };
  s5 -> s7 [67, 67] { R1036 += 1, R964 += 1 };
  s5 -> s8 [67, 67] { R1036 += 1, R964 += 1 };
  s5 -> s5 [70, 65535] { R1036 += 1, R964 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 67] { R1036 += 1, R964 += 1 };
  s7 -> s7 [0, 65535] { R1036 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [70, 65535] { R1036 += 1, R964 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1036 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 66] { R1038 += 1, R966 += 1, R857 += 1 };
  s0 -> s2 [0, 65535] { R1038 += 1, R965 += 1, R966 += 1 };
  s0 -> s0 [0, 65535] { R1037 += 1, R1038 += 1 };
  s0 -> s3 [67, 67] { R1038 += 1, R966 += 1, R857 += 1 };
  s0 -> s4 [67, 67] { R1038 += 1, R966 += 1, R857 += 1 };
  s0 -> s1 [68, 65535] { R1038 += 1, R966 += 1, R857 += 1 };
  s1 -> s1 [0, 66] { R1038 += 1, R966 += 1, R857 += 1 };
  s1 -> s1 [0, 65535] { R1038 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1038 += 1, R966 += 1, R857 += 1 };
  s1 -> s4 [67, 67] { R1038 += 1, R966 += 1, R857 += 1 };
  s1 -> s1 [68, 65535] { R1038 += 1, R966 += 1, R857 += 1 };
  s2 -> s1 [0, 66] { R1038 += 1, R966 += 1, R857 += 1 };
  s2 -> s2 [0, 65535] { R1038 += 1, R965 += 1, R966 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R1038 += 1, R966 += 1, R857 += 1 };
  s2 -> s4 [67, 67] { R1038 += 1, R966 += 1, R857 += 1 };
  s2 -> s1 [68, 65535] { R1038 += 1, R966 += 1, R857 += 1 };
  s3 -> s3 [0, 65535] { R1038 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1038 += 1 };
  s4 -> s4 [0, 65535] { R1038 += 1, R966 += 1, R857 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1038 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 66] { R1040 += 1, R968 += 1, R859 += 1 };
  s0 -> s0 [0, 65535] { R1039 += 1, R1040 += 1 };
  s0 -> s2 [0, 65535] { R1040 += 1, R967 += 1, R968 += 1 };
  s0 -> s3 [67, 67] { R1040 += 1, R968 += 1, R859 += 1 };
  s0 -> s4 [67, 67] { R1040 += 1, R968 += 1, R859 += 1 };
  s0 -> s1 [68, 65535] { R1040 += 1, R968 += 1, R859 += 1 };
  s1 -> s1 [0, 66] { R1040 += 1, R968 += 1, R859 += 1 };
  s1 -> s1 [0, 65535] { R1040 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1040 += 1, R968 += 1, R859 += 1 };
  s1 -> s4 [67, 67] { R1040 += 1, R968 += 1, R859 += 1 };
  s1 -> s1 [68, 65535] { R1040 += 1, R968 += 1, R859 += 1 };
  s2 -> s1 [0, 66] { R1040 += 1, R968 += 1, R859 += 1 };
  s2 -> s2 [0, 65535] { R1040 += 1, R967 += 1, R968 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R1040 += 1, R968 += 1, R859 += 1 };
  s2 -> s4 [67, 67] { R1040 += 1, R968 += 1, R859 += 1 };
  s2 -> s1 [68, 65535] { R1040 += 1, R968 += 1, R859 += 1 };
  s3 -> s3 [0, 65535] { R1040 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1040 += 1 };
  s4 -> s4 [0, 65535] { R1040 += 1, R968 += 1, R859 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1040 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 66] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s0 -> s0 [0, 65535] { R1041 += 1, R1042 += 1 };
  s0 -> s2 [0, 65535] { R1042 += 1, R969 += 1, R970 += 1 };
  s0 -> s3 [67, 67] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s0 -> s4 [67, 67] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s0 -> s1 [68, 65535] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [0, 66] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1042 += 1 };
  s1 -> s3 [67, 67] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s1 -> s4 [67, 67] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [68, 65535] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [0, 66] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1042 += 1, R969 += 1, R970 += 1 };
  s2 -> s3 [67, 67] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s2 -> s4 [67, 67] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [68, 65535] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1042 += 1 };
  s4 -> s5 [0, 65535] { R1042 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1042 += 1, R970 += 1, R861 += 1, R862 += 1 };
  s5 -> s5 [0, 65535] { R1042 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 66] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s0 -> s2 [0, 65535] { R1044 += 1, R971 += 1, R972 += 1 };
  s0 -> s0 [0, 65535] { R1043 += 1, R1044 += 1 };
  s0 -> s3 [67, 67] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s0 -> s4 [67, 67] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s0 -> s1 [68, 65535] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [0, 66] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [0, 65535] { R1044 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s1 -> s4 [67, 67] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [68, 65535] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s2 -> s1 [0, 66] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s2 -> s2 [0, 65535] { R1044 += 1, R971 += 1, R972 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s2 -> s4 [67, 67] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s2 -> s1 [68, 65535] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s3 -> s3 [0, 65535] { R1044 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1044 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1044 += 1, R972 += 1, R867 += 1, R868 += 1 };
  s5 -> s5 [0, 65535] { R1044 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 66] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s0 -> s0 [0, 65535] { R1045 += 1, R1046 += 1 };
  s0 -> s2 [0, 65535] { R1046 += 1, R973 += 1, R974 += 1 };
  s0 -> s3 [67, 67] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s0 -> s4 [67, 67] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s0 -> s1 [68, 65535] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [0, 66] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1046 += 1 };
  s1 -> s3 [67, 67] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s1 -> s4 [67, 67] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [68, 65535] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s2 -> s1 [0, 66] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1046 += 1, R973 += 1, R974 += 1 };
  s2 -> s3 [67, 67] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s2 -> s4 [67, 67] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s2 -> s1 [68, 65535] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s3 -> s3 [0, 65535] { R1046 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1046 += 1, R974 += 1, R871 += 1, R872 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1046 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1046 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 66] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s0 -> s0 [0, 65535] { R1047 += 1, R1048 += 1 };
  s0 -> s2 [0, 65535] { R1048 += 1, R975 += 1, R976 += 1 };
  s0 -> s3 [67, 67] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s0 -> s4 [67, 67] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s0 -> s1 [68, 65535] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [0, 66] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [0, 65535] { R1048 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s1 -> s4 [67, 67] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [68, 65535] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s2 -> s1 [0, 66] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1048 += 1, R975 += 1, R976 += 1 };
  s2 -> s3 [67, 67] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s2 -> s4 [67, 67] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s2 -> s1 [68, 65535] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s3 -> s3 [0, 65535] { R1048 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1048 += 1, R976 += 1, R875 += 1, R876 += 1 };
  s4 -> s5 [0, 65535] { R1048 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1048 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 66] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s0 -> s0 [0, 65535] { R1049 += 1, R1050 += 1 };
  s0 -> s2 [0, 65535] { R1050 += 1, R977 += 1, R978 += 1 };
  s0 -> s3 [67, 67] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s0 -> s4 [67, 67] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s0 -> s1 [68, 65535] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [0, 66] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [0, 65535] { R1050 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s1 -> s4 [67, 67] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [68, 65535] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [0, 66] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s2 -> s2 [0, 65535] { R1050 += 1, R977 += 1, R978 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s2 -> s4 [67, 67] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [68, 65535] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s3 -> s3 [0, 65535] { R1050 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1050 += 1 };
  s4 -> s4 [0, 65535] { R1050 += 1, R978 += 1, R881 += 1, R882 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1050 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 66] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s0 -> s0 [0, 65535] { R1051 += 1, R1052 += 1 };
  s0 -> s2 [0, 65535] { R1052 += 1, R979 += 1, R980 += 1 };
  s0 -> s3 [67, 67] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s0 -> s4 [67, 67] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s0 -> s1 [68, 65535] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [0, 66] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1052 += 1 };
  s1 -> s3 [67, 67] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s1 -> s4 [67, 67] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [68, 65535] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s2 -> s1 [0, 66] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1052 += 1, R979 += 1, R980 += 1 };
  s2 -> s3 [67, 67] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s2 -> s4 [67, 67] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s2 -> s1 [68, 65535] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s3 -> s3 [0, 65535] { R1052 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1052 += 1, R980 += 1, R887 += 1, R888 += 1 };
  s4 -> s5 [0, 65535] { R1052 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1052 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 66] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s0 -> s0 [0, 65535] { R1053 += 1, R1054 += 1 };
  s0 -> s2 [0, 65535] { R1054 += 1, R981 += 1, R982 += 1 };
  s0 -> s3 [67, 67] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s0 -> s4 [67, 67] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s0 -> s1 [68, 65535] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s1 -> s1 [0, 66] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1054 += 1 };
  s1 -> s3 [67, 67] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s1 -> s4 [67, 67] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s1 -> s1 [68, 65535] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s2 -> s1 [0, 66] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1054 += 1, R981 += 1, R982 += 1 };
  s2 -> s3 [67, 67] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s2 -> s4 [67, 67] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s2 -> s1 [68, 65535] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s3 -> s3 [0, 65535] { R1054 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1054 += 1, R982 += 1, R895 += 1, R896 += 1 };
  s4 -> s6 [0, 65535] { R1054 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1054 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 66] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s0 -> s0 [0, 65535] { R1055 += 1, R1056 += 1 };
  s0 -> s2 [0, 65535] { R1056 += 1, R983 += 1, R984 += 1 };
  s0 -> s3 [67, 67] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s0 -> s4 [67, 67] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s0 -> s1 [68, 65535] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 66] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 65535] { R1056 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s1 -> s4 [67, 67] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [68, 65535] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s2 -> s1 [0, 66] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s2 -> s2 [0, 65535] { R1056 += 1, R983 += 1, R984 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s2 -> s4 [67, 67] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s2 -> s1 [68, 65535] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s3 -> s6 [0, 65535] { R1056 += 1 };
  s3 -> s3 [0, 65535] { R1056 += 1, R984 += 1, R905 += 1, R906 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1056 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1056 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 66] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s0 -> s2 [0, 65535] { R1058 += 1, R985 += 1, R986 += 1 };
  s0 -> s0 [0, 65535] { R1057 += 1, R1058 += 1 };
  s0 -> s3 [67, 67] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s0 -> s4 [67, 67] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s0 -> s1 [68, 65535] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s1 -> s1 [0, 66] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1058 += 1 };
  s1 -> s3 [67, 67] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s1 -> s4 [67, 67] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s1 -> s1 [68, 65535] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [0, 66] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s2 -> s2 [0, 65535] { R1058 += 1, R985 += 1, R986 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s2 -> s4 [67, 67] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [68, 65535] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s3 -> s3 [0, 65535] { R1058 += 1, R986 += 1, R913 += 1, R914 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1058 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1058 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1058 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 66] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s0 -> s2 [0, 65535] { R1060 += 1, R987 += 1, R988 += 1 };
  s0 -> s0 [0, 65535] { R1059 += 1, R1060 += 1 };
  s0 -> s3 [67, 67] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s0 -> s4 [67, 67] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s0 -> s1 [68, 65535] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s1 -> s1 [0, 66] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s1 -> s1 [0, 65535] { R1060 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s1 -> s4 [67, 67] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s1 -> s1 [68, 65535] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s2 -> s1 [0, 66] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s2 -> s2 [0, 65535] { R1060 += 1, R987 += 1, R988 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s2 -> s4 [67, 67] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s2 -> s1 [68, 65535] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s3 -> s3 [0, 65535] { R1060 += 1, R988 += 1, R923 += 1, R924 += 1 };
  s3 -> s6 [0, 65535] { R1060 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1060 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1060 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R960 && R3 - R1060 = 1 && R23 - R960 = -1 && R24 = R960 && R25 - R960 = -1 && R26 = R960 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R1060 && R32 - R1060 = 1 && R33 = R1060 && R34 - R1060 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R858 + R857 + -1*R928 + -1*R924 = 0 && R873 + R871 = 0 && R874 + R872 + -1*R928 + -1*R924 = 0 && R927 + R923 = 0 && R929 + R925 = 0 && R930 + R926 = 0 && R931 = 0 && R932 = R960 && R933 = 0 && R934 = R960 && R935 = 0 && R936 = R960 && R937 = 0 && R938 = R960 && R939 = 0 && R940 = R960 && R941 = 0 && R942 = R960 && R943 = 0 && R944 = R960 && R945 = 0 && R946 = R960 && R947 = 0 && R948 = R960 && R949 = 0 && R950 = R960 && R951 = 0 && R952 = R960 && R953 = 0 && R954 = R960 && R955 = 0 && R956 = R960 && R957 = 0 && R958 = R960 && R959 = 0 && R963 = 0 && R964 = 0 && R989 = 0 && R990 = R1060 && R991 = 0 && R992 = R1060 && R993 = 0 && R994 = R1060 && R995 = 0 && R996 = R1060 && R997 = 0 && R998 = R1060 && R999 = 0 && R1000 = R1060 && R1001 = 0 && R1002 = R1060 && R1003 = 0 && R1004 = R1060 && R1005 = 0 && R1006 = R1060 && R1007 = 0 && R1008 = R1060 && R1009 = 0 && R1010 = R1060 && R1011 = 0 && R1012 = R1060 && R1013 = 0 && R1014 = R1060 && R1015 = 0 && R1016 = R1060 && R1017 = 0 && R1018 = R1060 && R1019 = 0 && R1020 = R1060 && R1021 = 0 && R1022 = R1060 && R1023 = 0 && R1024 = R1060 && R1025 = 0 && R1026 = R1060 && R1027 = 0 && R1028 = R1060 && R1029 = 0 && R1030 = R1060 && R1031 = 0 && R1032 = R1060 && R1033 = 0 && R1034 = R1060 && R1035 = 0 && R1036 = R1060 && R1037 = 0 && R1038 = R1060 && R1039 = 0 && R1040 = R1060 && R1041 = 0 && R1042 = R1060 && R1043 = 0 && R1044 = R1060 && R1045 = 0 && R1046 = R1060 && R1047 = 0 && R1048 = R1060 && R1049 = 0 && R1050 = R1060 && R1051 = 0 && R1052 = R1060 && R1053 = 0 && R1054 = R1060 && R1055 = 0 && R1056 = R1060 && R1057 = 0 && R1058 = R1060 && R1059 = 0 && R14 < 1 && R17 < 1 && R860 + R859 < 1 && -1*R880 + -1*R877 < 1 && R886 + R883 < 1 && -1*R928 + -1*R924 < 1 && 0 < R960 && -1 < R1060 && (R878 + R875 != 0 || R879 + R876 + -1*R928 + -1*R924 = 0 || R880 + R877 < 1) && (R880 + R877 != 0 || R904 + R899 = 0 || (R893 + R889 = 0 && R894 + R890 = 0)) && (R880 + R877 != 0 || R904 + R899 = 0 || (R902 + R897 = 0 && R903 + R898 = 0)) && (R880 + R877 != 0 || R904 + R899 = 0 || (R911 + R907 = 0 && R912 + R908 = 0)) && (R880 + R877 != 0 || ((R878 + R875 != 0 || R879 + R876 + -1*R928 + -1*R924 = 0 || R928 + R924 < 1) && (R878 + R875 = 0 || R928 + R924 < 1))) && (R884 + R881 != 0 || R885 + R882 + -1*R928 + -1*R924 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R891 + R887 != 0 || R892 + R888 + -1*R928 + -1*R924 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R893 + R889 != 0 || R880 + R877 + -1*R894 + -1*R890 = 0 || R880 + R877 < 1) && (R900 + R895 != 0 || R901 + R896 + -1*R928 + -1*R924 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R902 + R897 != 0 || R880 + R877 + -1*R903 + -1*R898 = 0 || R880 + R877 < 1) && (R909 + R905 != 0 || R910 + R906 + -1*R928 + -1*R924 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R911 + R907 != 0 || R880 + R877 + -1*R912 + -1*R908 = 0 || R880 + R877 < 1) && (R918 + R913 != 0 || R919 + R914 + -1*R928 + -1*R924 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R22 = 0 || (R961 = 0 && R962 = 0)) && (R22 = 0 || (R965 = 0 && R966 = 0)) && (R22 = 0 || (R967 = 0 && R968 = 0)) && (R22 = 0 || (R969 = 0 && R970 = 0)) && (R22 = 0 || (R971 = 0 && R972 = 0)) && (R22 = 0 || (R973 = 0 && R974 = 0)) && (R22 = 0 || (R975 = 0 && R976 = 0)) && (R22 = 0 || (R977 = 0 && R978 = 0)) && (R22 = 0 || (R979 = 0 && R980 = 0)) && (R22 = 0 || (R981 = 0 && R982 = 0)) && (R22 = 0 || (R983 = 0 && R984 = 0)) && (R22 = 0 || (R985 = 0 && R986 = 0)) && (R22 = 0 || (R987 = 0 && R988 = 0)) && (R866 + R863 = 0 || (R864 + R861 = 0 && R865 + R862 = 0)) && (R866 + R863 = 0 || (R869 + R867 = 0 && R870 + R868 = 0)) && (R878 + R875 = 0 || R880 + R877 < 1) && (R884 + R881 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R891 + R887 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R893 + R889 = 0 || R880 + R877 < 1) && (R900 + R895 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R902 + R897 = 0 || R880 + R877 < 1) && (R909 + R905 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R911 + R907 = 0 || R880 + R877 < 1) && (R918 + R913 = 0 || (R880 + R877 = 0 && R928 + R924 = 0)) && (R922 + R917 = 0 || (R920 + R915 = 0 && R921 + R916 = 0));
// End of Parikh automata intersection problem
