// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R138, R139, R2, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R3, R4, R5, R6, R8, R9;
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R139 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R139 += 1 };
  s1 -> s1 [0, 60] { R139 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R139 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s1 [0, 65535] { R227 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R227 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s1 [0, 65535] { R229 += 1, R204 += 1, R205 += 1 };
  s0 -> s2 [11, 11] { R229 += 1, R205 += 1 };
  s1 -> s1 [0, 65535] { R229 += 1, R204 += 1, R205 += 1 };
  s1 -> s2 [11, 11] { R229 += 1, R205 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R229 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R231 += 1, R207 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R206 += 1, R207 += 1 };
  s1 -> s1 [0, 65535] { R231 += 1, R207 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R231 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R231 += 1, R207 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R231 += 1, R206 += 1, R207 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R231 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R233 += 1, R209 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R208 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s3 [9, 13] { R233 += 1, R209 += 1 };
  s0 -> s1 [14, 31] { R233 += 1, R209 += 1 };
  s0 -> s3 [32, 32] { R233 += 1, R209 += 1 };
  s0 -> s1 [33, 65535] { R233 += 1, R209 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R233 += 1, R209 += 1 };
  s1 -> s5 [0, 65535] { R233 += 1 };
  s2 -> s1 [0, 8] { R233 += 1, R209 += 1 };
  s2 -> s2 [0, 65535] { R233 += 1, R208 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R233 += 1, R209 += 1 };
  s2 -> s1 [14, 31] { R233 += 1, R209 += 1 };
  s2 -> s3 [32, 32] { R233 += 1, R209 += 1 };
  s2 -> s1 [33, 65535] { R233 += 1, R209 += 1 };
  s3 -> s1 [0, 65535] { R233 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R233 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R235 += 1, R211 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R210 += 1, R211 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s1 -> s1 [0, 65535] { R235 += 1, R211 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R235 += 1 };
  s2 -> s1 [0, 65535] { R235 += 1, R211 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R235 += 1, R210 += 1, R211 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R235 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 64] { R241 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s2 [67, 67] { R241 += 1 };
  s0 -> s1 [68, 65535] { R241 += 1 };
  s1 -> s1 [0, 64] { R241 += 1 };
  s1 -> s2 [67, 67] { R241 += 1 };
  s1 -> s1 [68, 65535] { R241 += 1 };
  s2 -> s2 [0, 64] { R241 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R241 += 1 };
  accepting s2;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s1 [0, 65535] { R243 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R243 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 66] { R245 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R8 += 1, R9 += 1 };
  s0 -> s3 [67, 67] { R245 += 1 };
  s0 -> s1 [68, 65535] { R245 += 1, R9 += 1 };
  s1 -> s1 [0, 66] { R245 += 1, R9 += 1 };
  s1 -> s3 [67, 67] { R245 += 1 };
  s1 -> s1 [68, 65535] { R245 += 1, R9 += 1 };
  s2 -> s1 [0, 66] { R245 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R8 += 1, R9 += 1 };
  s2 -> s3 [67, 67] { R245 += 1 };
  s2 -> s1 [68, 65535] { R245 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R245 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R247 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R212 += 1, R213 += 1 };
  s0 -> s3 [9, 13] { R247 += 1, R213 += 1 };
  s0 -> s1 [14, 31] { R247 += 1, R213 += 1 };
  s0 -> s3 [32, 32] { R247 += 1, R213 += 1 };
  s0 -> s1 [33, 65535] { R247 += 1, R213 += 1 };
  s1 -> s5 [0, 65535] { R247 += 1 };
  s1 -> s1 [0, 65535] { R247 += 1, R213 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R247 += 1, R213 += 1 };
  s2 -> s2 [0, 65535] { R247 += 1, R212 += 1, R213 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R247 += 1, R213 += 1 };
  s2 -> s1 [14, 31] { R247 += 1, R213 += 1 };
  s2 -> s3 [32, 32] { R247 += 1, R213 += 1 };
  s2 -> s1 [33, 65535] { R247 += 1, R213 += 1 };
  s3 -> s1 [0, 65535] { R247 += 1, R213 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R247 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s1 [0, 65535] { R249 += 1, R215 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R214 += 1, R215 += 1 };
  s1 -> s4 [0, 65535] { R249 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1, R215 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R249 += 1, R215 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R249 += 1, R214 += 1, R215 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R249 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 8] { R251 += 1, R217 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s3 [9, 13] { R251 += 1, R217 += 1 };
  s0 -> s1 [14, 31] { R251 += 1, R217 += 1 };
  s0 -> s3 [32, 32] { R251 += 1, R217 += 1 };
  s0 -> s1 [33, 65535] { R251 += 1, R217 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1, R217 += 1 };
  s1 -> s5 [0, 65535] { R251 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R251 += 1, R217 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R216 += 1, R217 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R251 += 1, R217 += 1 };
  s2 -> s1 [14, 31] { R251 += 1, R217 += 1 };
  s2 -> s3 [32, 32] { R251 += 1, R217 += 1 };
  s2 -> s1 [33, 65535] { R251 += 1, R217 += 1 };
  s3 -> s1 [0, 65535] { R251 += 1, R217 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R251 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R253 += 1, R219 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R218 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R219 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R253 += 1 };
  s2 -> s1 [0, 65535] { R253 += 1, R219 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R253 += 1, R218 += 1, R219 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R253 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 66] { R255 += 1, R221 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R220 += 1, R221 += 1 };
  s0 -> s1 [68, 65535] { R255 += 1, R221 += 1 };
  s1 -> s1 [0, 66] { R255 += 1, R221 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R255 += 1 };
  s1 -> s1 [68, 65535] { R255 += 1, R221 += 1 };
  s2 -> s1 [0, 66] { R255 += 1, R221 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R255 += 1, R220 += 1, R221 += 1 };
  s2 -> s1 [68, 65535] { R255 += 1, R221 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s1 [0, 65535] { R257 += 1, R223 += 1, R202 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R222 += 1, R223 += 1 };
  s1 -> s4 [0, 65535] { R257 += 1 };
  s1 -> s1 [0, 65535] { R257 += 1, R223 += 1, R202 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R257 += 1, R223 += 1, R202 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R257 += 1, R222 += 1, R223 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R257 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 67] { R259 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s1 [91, 65535] { R259 += 1, R225 += 1 };
  s1 -> s1 [0, 67] { R259 += 1, R225 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1 };
  s1 -> s1 [91, 65535] { R259 += 1, R225 += 1 };
  s2 -> s1 [0, 67] { R259 += 1, R225 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R224 += 1, R225 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R259 += 1, R225 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R261 += 1, R236 += 1, R237 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R237 += 1, R203 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R236 += 1, R237 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R261 += 1, R237 += 1, R203 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R261 += 1, R237 += 1, R203 += 1 };
  s2 -> s4 [0, 65535] { R261 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R261 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 66] { R263 += 1, R239 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R238 += 1, R239 += 1 };
  s0 -> s3 [67, 67] { R263 += 1, R239 += 1 };
  s0 -> s4 [67, 67] { R263 += 1, R239 += 1 };
  s0 -> s1 [91, 65535] { R263 += 1, R239 += 1 };
  s1 -> s1 [0, 66] { R263 += 1, R239 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R263 += 1 };
  s1 -> s3 [67, 67] { R263 += 1, R239 += 1 };
  s1 -> s4 [67, 67] { R263 += 1, R239 += 1 };
  s1 -> s1 [91, 65535] { R263 += 1, R239 += 1 };
  s2 -> s1 [0, 66] { R263 += 1, R239 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R263 += 1, R238 += 1, R239 += 1 };
  s2 -> s3 [67, 67] { R263 += 1, R239 += 1 };
  s2 -> s4 [67, 67] { R263 += 1, R239 += 1 };
  s2 -> s1 [91, 65535] { R263 += 1, R239 += 1 };
  s3 -> s3 [0, 67] { R263 += 1, R239 += 1 };
  s3 -> s3 [0, 65535] { R263 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R263 += 1, R239 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R263 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R0 = R205 && R1 = R215 && R2 = R235 && R8 = 0 && R138 = 0 && R139 = R263 && R204 - R205 = -1 && R212 - R215 = -1 && R213 = R215 && R214 - R215 = -1 && R216 = 0 && R217 = 1 && R218 = 0 && R219 = 1 && R226 - R263 = 1 && R227 = R235 && R228 - R263 = 1 && R229 = R235 && R230 - R263 = 1 && R231 = R235 && R232 - R263 = 1 && R233 = R235 && R234 - R263 = 1 && R240 = 0 && R241 = R263 && R242 = 0 && R243 = R263 && R244 = 0 && R245 = R263 && R246 = 0 && R247 = R263 && R248 = 0 && R249 = R263 && R250 = 0 && R251 = R263 && R252 = 0 && R253 = R263 && R254 = 0 && R255 = R263 && R256 = 0 && R257 = R263 && R258 = 0 && R259 = R263 && R260 = 0 && R261 = R263 && R262 = 0 && R205 != 0 && R9 < R215 && -2 < R9 && 0 < R215 && R263 < R235 && -1 < R263 && (R203 != 0 || ((R236 != 0 || R9 - R237 = -1 || R9 < 0) && (R236 = 0 || R9 < 0))) && (R203 != 0 || ((R238 != 0 || R9 - R239 = -1 || R9 < 0) && (R238 = 0 || R9 < 0))) && (R205 != R207 || R206 - R207 = -1 || (R3 = 0 && R207 < 0)) && (R208 != 0 || ((R4 != 0 || ((R205 != R209 || R209 = 1 || R209 < 0) && (R205 = R209 || R209 = 1 || R205 < 1))) && (R4 = 0 || ((R205 != R209 || R209 = 1 || R209 < 0) && (R209 != 1 || -1 < R205) && (R205 = R209 || R209 = 1))))) && (R210 != 0 || ((R4 != 0 || ((R205 != R211 || R211 = 1 || R211 < 0) && (R205 = R211 || R211 = 1 || R205 < 1))) && (R4 = 0 || ((R205 != R211 || R211 = 1 || R211 < 0) && (R211 != 1 || -1 < R205) && (R205 = R211 || R211 = 1))))) && (R215 != R221 || R9 - R220 = -1 || ((R202 != 0 || R221 - R9 < 2) && (R202 = 0 || R221 - R9 < 1 || R221 < 1))) && (R215 != R223 || R9 - R222 = -1 || ((R202 != 0 || R223 - R9 < 2) && (R202 = 0 || R223 - R9 < 1 || R223 < 1))) && (R215 != R225 || R9 - R224 = -1 || ((R202 != 0 || R225 - R9 < 2) && (R202 = 0 || R225 - R9 < 1 || R225 < 1))) && (R203 = 0 || (R9 - R237 = -1 && R236 = 0)) && (R203 = 0 || (R9 - R239 = -1 && R238 = 0)) && (R205 = R207 || (R3 = 0 && R205 < 0)) && (R208 = 0 || (R4 = 0 && R205 < 0)) && (R210 = 0 || (R4 = 0 && R205 < 0)) && (R215 = R221 || (R9 - R215 = -1 && R202 = 0)) && (R215 = R223 || (R9 - R215 = -1 && R202 = 0)) && (R215 = R225 || (R9 - R215 = -1 && R202 = 0));
// End of Parikh automata intersection problem
