// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R2, R3, R4, R5, R7, R8, R96, R97, R98, R99;
synchronised {  // Automata constraining P22
automaton P22_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining c3
automaton c3_0 {
  init s0;
  s0 -> s1 [110, 110];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R96 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s1 [9, 9] { R108 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R110 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R112 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [9, 13] { R112 += 1 };
  s0 -> s1 [14, 31] { R112 += 1 };
  s0 -> s2 [32, 32] { R112 += 1 };
  s0 -> s1 [33, 65535] { R112 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R112 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R114 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R160 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s2 [78, 78] { R160 += 1 };
  s0 -> s1 [79, 65535] { R160 += 1 };
  s1 -> s1 [0, 64] { R160 += 1 };
  s1 -> s2 [78, 78] { R160 += 1 };
  s1 -> s1 [79, 65535] { R160 += 1 };
  s2 -> s2 [0, 64] { R160 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [78, 65535] { R160 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R162 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s1 -> s1 [0, 65535] { R162 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 77] { R164 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R7 += 1, R8 += 1 };
  s0 -> s3 [78, 78] { R164 += 1 };
  s0 -> s1 [79, 65535] { R164 += 1, R8 += 1 };
  s1 -> s1 [0, 77] { R164 += 1, R8 += 1 };
  s1 -> s3 [78, 78] { R164 += 1 };
  s1 -> s1 [79, 65535] { R164 += 1, R8 += 1 };
  s2 -> s1 [0, 77] { R164 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [78, 78] { R164 += 1 };
  s2 -> s1 [79, 65535] { R164 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R164 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R166 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s3 [9, 13] { R166 += 1, R100 += 1 };
  s0 -> s1 [14, 31] { R166 += 1, R100 += 1 };
  s0 -> s3 [32, 32] { R166 += 1, R100 += 1 };
  s0 -> s1 [33, 65535] { R166 += 1, R100 += 1 };
  s1 -> s5 [0, 65535] { R166 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R166 += 1, R100 += 1 };
  s2 -> s1 [0, 8] { R166 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R166 += 1, R99 += 1, R100 += 1 };
  s2 -> s3 [9, 13] { R166 += 1, R100 += 1 };
  s2 -> s1 [14, 31] { R166 += 1, R100 += 1 };
  s2 -> s3 [32, 32] { R166 += 1, R100 += 1 };
  s2 -> s1 [33, 65535] { R166 += 1, R100 += 1 };
  s3 -> s1 [0, 65535] { R166 += 1, R100 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R166 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R168 += 1, R101 += 1, R102 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R102 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1, R101 += 1, R102 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R168 += 1, R102 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R102 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R168 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R168 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R170 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R103 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s3 [9, 13] { R170 += 1, R104 += 1 };
  s0 -> s1 [14, 31] { R170 += 1, R104 += 1 };
  s0 -> s3 [32, 32] { R170 += 1, R104 += 1 };
  s0 -> s1 [33, 65535] { R170 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R170 += 1, R104 += 1 };
  s1 -> s5 [0, 65535] { R170 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R170 += 1, R104 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R170 += 1, R103 += 1, R104 += 1 };
  s2 -> s3 [9, 13] { R170 += 1, R104 += 1 };
  s2 -> s1 [14, 31] { R170 += 1, R104 += 1 };
  s2 -> s3 [32, 32] { R170 += 1, R104 += 1 };
  s2 -> s1 [33, 65535] { R170 += 1, R104 += 1 };
  s3 -> s1 [0, 65535] { R170 += 1, R104 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R170 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R172 += 1, R106 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R105 += 1, R106 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R106 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R172 += 1 };
  s2 -> s1 [0, 65535] { R172 += 1, R106 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R105 += 1, R106 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R172 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 77] { R174 += 1, R150 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s1 [79, 65535] { R174 += 1, R150 += 1 };
  s1 -> s1 [0, 77] { R174 += 1, R150 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R174 += 1 };
  s1 -> s1 [79, 65535] { R174 += 1, R150 += 1 };
  s2 -> s1 [0, 77] { R174 += 1, R150 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R174 += 1, R149 += 1, R150 += 1 };
  s2 -> s1 [79, 65535] { R174 += 1, R150 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s1 [0, 65535] { R176 += 1, R151 += 1, R152 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R152 += 1, R97 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R176 += 1, R151 += 1, R152 += 1 };
  s1 -> s2 [0, 65535] { R176 += 1, R152 += 1, R97 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R176 += 1 };
  s2 -> s2 [0, 65535] { R176 += 1, R152 += 1, R97 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R176 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 78] { R178 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R153 += 1, R154 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [84, 65535] { R178 += 1, R154 += 1 };
  s1 -> s1 [0, 78] { R178 += 1, R154 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [84, 65535] { R178 += 1, R154 += 1 };
  s2 -> s1 [0, 78] { R178 += 1, R154 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [84, 65535] { R178 += 1, R154 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s1 [0, 65535] { R180 += 1, R155 += 1, R156 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R156 += 1, R98 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R180 += 1, R155 += 1, R156 += 1 };
  s1 -> s2 [0, 65535] { R180 += 1, R156 += 1, R98 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R180 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R156 += 1, R98 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R180 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 77] { R182 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R157 += 1, R158 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s3 [78, 78] { R182 += 1, R158 += 1 };
  s0 -> s4 [78, 78] { R182 += 1, R158 += 1 };
  s0 -> s5 [84, 84] { R182 += 1, R158 += 1 };
  s0 -> s1 [85, 65535] { R182 += 1, R158 += 1 };
  s1 -> s1 [0, 77] { R182 += 1, R158 += 1 };
  s1 -> s3 [78, 78] { R182 += 1, R158 += 1 };
  s1 -> s4 [78, 78] { R182 += 1, R158 += 1 };
  s1 -> s5 [84, 84] { R182 += 1, R158 += 1 };
  s1 -> s1 [85, 65535] { R182 += 1, R158 += 1 };
  s2 -> s1 [0, 77] { R182 += 1, R158 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R157 += 1, R158 += 1 };
  s2 -> s3 [78, 78] { R182 += 1, R158 += 1 };
  s2 -> s4 [78, 78] { R182 += 1, R158 += 1 };
  s2 -> s5 [84, 84] { R182 += 1, R158 += 1 };
  s2 -> s1 [85, 65535] { R182 += 1, R158 += 1 };
  s4 -> s4 [0, 78] { R182 += 1, R158 += 1 };
  s4 -> s7 [84, 84] { R182 += 1, R158 += 1 };
  s4 -> s4 [85, 65535] { R182 += 1, R158 += 1 };
  s5 -> s5 [0, 77] { R182 += 1, R158 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R182 += 1 };
  s5 -> s7 [78, 78] { R182 += 1, R158 += 1 };
  s5 -> s8 [78, 78] { R182 += 1, R158 += 1 };
  s5 -> s5 [84, 65535] { R182 += 1, R158 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 78] { R182 += 1, R158 += 1 };
  s7 -> s7 [0, 65535] { R182 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [84, 65535] { R182 += 1, R158 += 1 };
  s8 -> s8 [0, 65535] { R182 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
};
constraint R0 = R102 && R1 - R182 = 1 && R7 = 0 && R8 - R158 = -1 && R99 - R102 = -1 && R100 = R102 && R101 - R102 = -1 && R103 = 0 && R104 = 1 && R105 = 0 && R106 = 1 && R107 = R182 && R108 - R182 = 1 && R109 = R182 && R110 - R182 = 1 && R111 = 0 && R112 = 1 && R113 = 0 && R114 = 1 && R157 = 0 && R159 = 0 && R160 = R182 && R161 = 0 && R162 = R182 && R163 = 0 && R164 = R182 && R165 = 0 && R166 = R182 && R167 = 0 && R168 = R182 && R169 = 0 && R170 = R182 && R171 = 0 && R172 = R182 && R173 = 0 && R174 = R182 && R175 = 0 && R176 = R182 && R177 = 0 && R178 = R182 && R179 = 0 && R180 = R182 && R181 = 0 && R96 < 1 && R158 - R102 < 1 && 0 < R102 && -1 < R158 && -1 < R182 && (R102 != R150 || R149 = R158 || ((R97 != 0 || R150 - R158 < 1 || R150 < 1) && (R97 = 0 || R150 < R158 || R150 < 1))) && (R102 != R152 || R151 = R158 || ((R97 != 0 || R152 - R158 < 1 || R152 < 1) && (R97 = 0 || R152 < R158 || R152 < 1))) && (R102 != R154 || R153 = R158 || ((R97 != 0 || R154 - R158 < 1 || R154 < 1) && (R97 = 0 || R154 < R158 || R154 < 1))) && (R155 != 0 || R156 = R158 || (R98 = 0 && R158 = 0)) && (R102 = R150 || (R97 = 0 && R102 = R158)) && (R102 = R152 || (R97 = 0 && R102 = R158)) && (R102 = R154 || (R97 = 0 && R102 = R158)) && (R155 = 0 || (R98 = 0 && R158 = 0));
// End of Parikh automata intersection problem
