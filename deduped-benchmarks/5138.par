// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R3, R4, R5, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90;
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [113, 113];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s1 [12, 12] { R20 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s1 [0, 65535] { R22 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R22 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R68 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [81, 81] { R68 += 1 };
  s0 -> s1 [82, 65535] { R68 += 1 };
  s1 -> s1 [0, 64] { R68 += 1 };
  s1 -> s2 [81, 81] { R68 += 1 };
  s1 -> s1 [82, 65535] { R68 += 1 };
  s2 -> s2 [0, 64] { R68 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [81, 65535] { R68 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [0, 65535] { R70 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 80] { R72 += 1 };
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s2 [0, 65535] { R72 += 1, R5 += 1 };
  s0 -> s3 [81, 81] { R72 += 1 };
  s0 -> s1 [82, 65535] { R72 += 1 };
  s1 -> s1 [0, 80] { R72 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [81, 81] { R72 += 1 };
  s1 -> s1 [82, 65535] { R72 += 1 };
  s2 -> s1 [0, 80] { R72 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R72 += 1, R5 += 1 };
  s2 -> s3 [81, 81] { R72 += 1 };
  s2 -> s1 [82, 65535] { R72 += 1 };
  s3 -> s3 [0, 65535] { R72 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R74 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s3 [9, 13] { R74 += 1, R12 += 1 };
  s0 -> s1 [14, 31] { R74 += 1, R12 += 1 };
  s0 -> s3 [32, 32] { R74 += 1, R12 += 1 };
  s0 -> s1 [33, 65535] { R74 += 1, R12 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R74 += 1, R12 += 1 };
  s1 -> s5 [0, 65535] { R74 += 1 };
  s2 -> s1 [0, 8] { R74 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R74 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [9, 13] { R74 += 1, R12 += 1 };
  s2 -> s1 [14, 31] { R74 += 1, R12 += 1 };
  s2 -> s3 [32, 32] { R74 += 1, R12 += 1 };
  s2 -> s1 [33, 65535] { R74 += 1, R12 += 1 };
  s3 -> s1 [0, 65535] { R74 += 1, R12 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R74 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R76 += 1, R14 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R13 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s1 -> s4 [0, 65535] { R76 += 1 };
  s1 -> s1 [0, 65535] { R76 += 1, R14 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R76 += 1, R14 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R13 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R76 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R78 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s3 [9, 13] { R78 += 1, R16 += 1 };
  s0 -> s1 [14, 31] { R78 += 1, R16 += 1 };
  s0 -> s3 [32, 32] { R78 += 1, R16 += 1 };
  s0 -> s1 [33, 65535] { R78 += 1, R16 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R78 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R78 += 1 };
  s2 -> s1 [0, 8] { R78 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R78 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [9, 13] { R78 += 1, R16 += 1 };
  s2 -> s1 [14, 31] { R78 += 1, R16 += 1 };
  s2 -> s3 [32, 32] { R78 += 1, R16 += 1 };
  s2 -> s1 [33, 65535] { R78 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R78 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R78 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s0 -> s1 [0, 65535] { R80 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R18 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R80 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R80 += 1, R18 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R80 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R18 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R80 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 80] { R82 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s1 [82, 65535] { R82 += 1, R58 += 1 };
  s1 -> s1 [0, 80] { R82 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [82, 65535] { R82 += 1, R58 += 1 };
  s2 -> s1 [0, 80] { R82 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R82 += 1, R57 += 1, R58 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [82, 65535] { R82 += 1, R58 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R84 += 1, R59 += 1, R60 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R60 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R59 += 1, R60 += 1 };
  s1 -> s2 [0, 65535] { R84 += 1, R60 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R84 += 1 };
  s2 -> s2 [0, 65535] { R84 += 1, R60 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R84 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 81] { R86 += 1, R62 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R61 += 1, R62 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s1 [85, 65535] { R86 += 1, R62 += 1 };
  s1 -> s1 [0, 81] { R86 += 1, R62 += 1 };
  s1 -> s1 [0, 65535] { R86 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R86 += 1, R62 += 1 };
  s2 -> s1 [0, 81] { R86 += 1, R62 += 1 };
  s2 -> s2 [0, 65535] { R86 += 1, R61 += 1, R62 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R86 += 1, R62 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R88 += 1, R64 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [0, 65535] { R88 += 1 };
  s1 -> s1 [0, 65535] { R88 += 1, R64 += 1, R10 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R88 += 1, R64 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R88 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R88 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 80] { R90 += 1, R66 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R90 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [81, 81] { R90 += 1, R66 += 1 };
  s0 -> s4 [81, 81] { R90 += 1, R66 += 1 };
  s0 -> s5 [85, 85] { R90 += 1, R66 += 1 };
  s0 -> s1 [86, 65535] { R90 += 1, R66 += 1 };
  s1 -> s1 [0, 80] { R90 += 1, R66 += 1 };
  s1 -> s3 [81, 81] { R90 += 1, R66 += 1 };
  s1 -> s4 [81, 81] { R90 += 1, R66 += 1 };
  s1 -> s5 [85, 85] { R90 += 1, R66 += 1 };
  s1 -> s1 [86, 65535] { R90 += 1, R66 += 1 };
  s2 -> s1 [0, 80] { R90 += 1, R66 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [81, 81] { R90 += 1, R66 += 1 };
  s2 -> s4 [81, 81] { R90 += 1, R66 += 1 };
  s2 -> s5 [85, 85] { R90 += 1, R66 += 1 };
  s2 -> s1 [86, 65535] { R90 += 1, R66 += 1 };
  s4 -> s4 [0, 81] { R90 += 1, R66 += 1 };
  s4 -> s8 [85, 85] { R90 += 1, R66 += 1 };
  s4 -> s4 [86, 65535] { R90 += 1, R66 += 1 };
  s5 -> s5 [0, 80] { R90 += 1, R66 += 1 };
  s5 -> s5 [0, 65535] { R90 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [81, 81] { R90 += 1, R66 += 1 };
  s5 -> s8 [81, 81] { R90 += 1, R66 += 1 };
  s5 -> s5 [85, 65535] { R90 += 1, R66 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R90 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 81] { R90 += 1, R66 += 1 };
  s8 -> s8 [0, 65535] { R90 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [85, 65535] { R90 += 1, R66 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R0 = R62 && R1 = R90 && R11 - R62 = -1 && R12 = R62 && R13 - R62 = -1 && R14 = R62 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R19 = 0 && R20 = 1 && R21 = 0 && R22 = 1 && R57 = 0 && R58 = R62 && R59 = 0 && R60 = R62 && R61 = 0 && R65 = 0 && R66 = 0 && R67 = 1 && R68 = R90 && R69 = 1 && R70 = R90 && R71 = 1 && R72 = R90 && R73 = 1 && R74 = R90 && R75 = 1 && R76 = R90 && R77 = 1 && R78 = R90 && R79 = 1 && R80 = R90 && R81 = 1 && R82 = R90 && R83 = 1 && R84 = R90 && R85 = 1 && R86 = R90 && R87 = 1 && R88 = R90 && R89 = 1 && R5 < 1 && R8 < 1 && 0 < R62 && 0 < R90 && (R10 = 0 || (R63 = 0 && R64 = 0));
// End of Parikh automata intersection problem
