// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R2, R3, R322, R323, R4, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R492, R493, R494, R495, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R533, R534, R535, R536, R537, R538, R539, R540, R541, R542, R543, R544, R545, R546, R547, R548, R549, R550, R551, R552, R553, R554, R555, R556, R557, R558, R559, R560, R561, R562, R563, R6, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R323 += 1 };
  s0 -> s0 [0, 65535] { R322 += 1, R323 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R323 += 1 };
  s1 -> s1 [0, 60] { R323 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R323 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R499 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R498 += 1, R499 += 1 };
  s1 -> s1 [0, 65535] { R499 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R534 += 1, R535 += 1 };
  s0 -> s1 [0, 65535] { R535 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R535 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R536 += 1, R537 += 1 };
  s0 -> s1 [0, 65535] { R537 += 1, R494 += 1, R495 += 1 };
  s0 -> s2 [10, 10] { R537 += 1, R495 += 1 };
  s1 -> s1 [0, 65535] { R537 += 1, R494 += 1, R495 += 1 };
  s1 -> s2 [10, 10] { R537 += 1, R495 += 1 };
  s2 -> s2 [0, 65535] { R537 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R538 += 1, R539 += 1 };
  s0 -> s1 [0, 65535] { R539 += 1, R497 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R539 += 1, R496 += 1, R497 += 1 };
  s1 -> s1 [0, 65535] { R539 += 1, R497 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R539 += 1 };
  s2 -> s1 [0, 65535] { R539 += 1, R497 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R539 += 1, R496 += 1, R497 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R539 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 64] { R541 += 1, R511 += 1 };
  s0 -> s2 [0, 65535] { R541 += 1, R510 += 1, R511 += 1 };
  s0 -> s0 [0, 65535] { R540 += 1, R541 += 1 };
  s0 -> s3 [67, 67] { R541 += 1, R511 += 1 };
  s0 -> s1 [68, 65535] { R541 += 1, R511 += 1 };
  s1 -> s1 [0, 64] { R541 += 1, R511 += 1 };
  s1 -> s3 [67, 67] { R541 += 1, R511 += 1 };
  s1 -> s1 [68, 65535] { R541 += 1, R511 += 1 };
  s2 -> s1 [0, 64] { R541 += 1, R511 += 1 };
  s2 -> s2 [0, 65535] { R541 += 1, R510 += 1, R511 += 1 };
  s2 -> s3 [67, 67] { R541 += 1, R511 += 1 };
  s2 -> s1 [68, 65535] { R541 += 1, R511 += 1 };
  s3 -> s3 [0, 64] { R541 += 1, R511 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R541 += 1 };
  s3 -> s3 [67, 65535] { R541 += 1, R511 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R543 += 1, R513 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R542 += 1, R543 += 1 };
  s0 -> s2 [0, 65535] { R543 += 1, R512 += 1, R513 += 1 };
  s1 -> s4 [0, 65535] { R543 += 1 };
  s1 -> s1 [0, 65535] { R543 += 1, R513 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R543 += 1, R513 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R543 += 1, R512 += 1, R513 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R543 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 66] { R545 += 1, R515 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R544 += 1, R545 += 1 };
  s0 -> s2 [0, 65535] { R545 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [0, 65535] { R545 += 1, R515 += 1, R12 += 1, R13 += 1 };
  s0 -> s4 [67, 67] { R545 += 1, R515 += 1 };
  s0 -> s1 [68, 65535] { R545 += 1, R515 += 1, R13 += 1 };
  s1 -> s1 [0, 66] { R545 += 1, R515 += 1, R13 += 1 };
  s1 -> s4 [67, 67] { R545 += 1, R515 += 1 };
  s1 -> s1 [68, 65535] { R545 += 1, R515 += 1, R13 += 1 };
  s2 -> s1 [0, 66] { R545 += 1, R515 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R545 += 1, R514 += 1, R515 += 1 };
  s2 -> s3 [0, 65535] { R545 += 1, R515 += 1, R12 += 1, R13 += 1 };
  s2 -> s4 [67, 67] { R545 += 1, R515 += 1 };
  s2 -> s1 [68, 65535] { R545 += 1, R515 += 1, R13 += 1 };
  s3 -> s1 [0, 66] { R545 += 1, R515 += 1, R13 += 1 };
  s3 -> s3 [0, 65535] { R545 += 1, R515 += 1, R12 += 1, R13 += 1 };
  s3 -> s4 [67, 67] { R545 += 1, R515 += 1 };
  s3 -> s1 [68, 65535] { R545 += 1, R515 += 1, R13 += 1 };
  s4 -> s4 [0, 65535] { R545 += 1, R515 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R545 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R545 += 1 };
  accepting s4, s5, s6;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R547 += 1, R517 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R546 += 1, R547 += 1 };
  s0 -> s2 [0, 65535] { R547 += 1, R516 += 1, R517 += 1 };
  s0 -> s3 [0, 65535] { R547 += 1, R517 += 1, R486 += 1, R487 += 1 };
  s0 -> s4 [9, 13] { R547 += 1, R517 += 1, R487 += 1 };
  s0 -> s1 [14, 31] { R547 += 1, R517 += 1, R487 += 1 };
  s0 -> s4 [32, 32] { R547 += 1, R517 += 1, R487 += 1 };
  s0 -> s1 [33, 65535] { R547 += 1, R517 += 1, R487 += 1 };
  s1 -> s5 [0, 65535] { R547 += 1 };
  s1 -> s1 [0, 65535] { R547 += 1, R517 += 1, R487 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R547 += 1, R517 += 1 };
  s2 -> s1 [0, 8] { R547 += 1, R517 += 1, R487 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R547 += 1, R516 += 1, R517 += 1 };
  s2 -> s3 [0, 65535] { R547 += 1, R517 += 1, R486 += 1, R487 += 1 };
  s2 -> s4 [9, 13] { R547 += 1, R517 += 1, R487 += 1 };
  s2 -> s1 [14, 31] { R547 += 1, R517 += 1, R487 += 1 };
  s2 -> s4 [32, 32] { R547 += 1, R517 += 1, R487 += 1 };
  s2 -> s1 [33, 65535] { R547 += 1, R517 += 1, R487 += 1 };
  s3 -> s1 [0, 8] { R547 += 1, R517 += 1, R487 += 1 };
  s3 -> s5 [0, 65535] { R547 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R547 += 1, R517 += 1, R486 += 1, R487 += 1 };
  s3 -> s4 [9, 13] { R547 += 1, R517 += 1, R487 += 1 };
  s3 -> s1 [14, 31] { R547 += 1, R517 += 1, R487 += 1 };
  s3 -> s4 [32, 32] { R547 += 1, R517 += 1, R487 += 1 };
  s3 -> s1 [33, 65535] { R547 += 1, R517 += 1, R487 += 1 };
  s4 -> s1 [0, 65535] { R547 += 1, R517 += 1, R487 += 1 };
  s5 -> s5 [0, 65535] { R547 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R547 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R547 += 1, R517 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R549 += 1, R519 += 1, R489 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R549 += 1, R519 += 1, R488 += 1, R489 += 1 };
  s0 -> s3 [0, 65535] { R549 += 1, R518 += 1, R519 += 1 };
  s0 -> s0 [0, 65535] { R548 += 1, R549 += 1 };
  s1 -> s1 [0, 65535] { R549 += 1, R519 += 1, R489 += 1, R7 += 1 };
  s1 -> s6 [0, 65535] { R549 += 1, R519 += 1 };
  s1 -> s5 [0, 65535] { R549 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R549 += 1, R519 += 1, R489 += 1, R7 += 1 };
  s2 -> s5 [0, 65535] { R549 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R549 += 1, R519 += 1, R488 += 1, R489 += 1 };
  s3 -> s1 [0, 65535] { R549 += 1, R519 += 1, R489 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R549 += 1, R519 += 1, R488 += 1, R489 += 1 };
  s3 -> s3 [0, 65535] { R549 += 1, R518 += 1, R519 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R549 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R549 += 1, R519 += 1 };
  s6 -> s5 [0, 65535] { R549 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R551 += 1, R521 += 1, R491 += 1 };
  s0 -> s0 [0, 65535] { R550 += 1, R551 += 1 };
  s0 -> s2 [0, 65535] { R551 += 1, R521 += 1, R490 += 1, R491 += 1 };
  s0 -> s3 [0, 65535] { R551 += 1, R520 += 1, R521 += 1 };
  s0 -> s4 [9, 13] { R551 += 1, R521 += 1, R491 += 1 };
  s0 -> s1 [14, 31] { R551 += 1, R521 += 1, R491 += 1 };
  s0 -> s4 [32, 32] { R551 += 1, R521 += 1, R491 += 1 };
  s0 -> s1 [33, 65535] { R551 += 1, R521 += 1, R491 += 1 };
  s1 -> s1 [0, 65535] { R551 += 1, R521 += 1, R491 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R551 += 1 };
  s1 -> s7 [0, 65535] { R551 += 1, R521 += 1 };
  s2 -> s1 [0, 8] { R551 += 1, R521 += 1, R491 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R551 += 1, R521 += 1, R490 += 1, R491 += 1 };
  s2 -> s6 [0, 65535] { R551 += 1 };
  s2 -> s4 [9, 13] { R551 += 1, R521 += 1, R491 += 1 };
  s2 -> s1 [14, 31] { R551 += 1, R521 += 1, R491 += 1 };
  s2 -> s4 [32, 32] { R551 += 1, R521 += 1, R491 += 1 };
  s2 -> s1 [33, 65535] { R551 += 1, R521 += 1, R491 += 1 };
  s3 -> s1 [0, 8] { R551 += 1, R521 += 1, R491 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R551 += 1, R521 += 1, R490 += 1, R491 += 1 };
  s3 -> s3 [0, 65535] { R551 += 1, R520 += 1, R521 += 1 };
  s3 -> s4 [9, 13] { R551 += 1, R521 += 1, R491 += 1 };
  s3 -> s1 [14, 31] { R551 += 1, R521 += 1, R491 += 1 };
  s3 -> s4 [32, 32] { R551 += 1, R521 += 1, R491 += 1 };
  s3 -> s1 [33, 65535] { R551 += 1, R521 += 1, R491 += 1 };
  s4 -> s1 [0, 65535] { R551 += 1, R521 += 1, R491 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R551 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R551 += 1 };
  s7 -> s7 [0, 65535] { R551 += 1, R521 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R553 += 1, R522 += 1, R523 += 1 };
  s0 -> s2 [0, 65535] { R553 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s0 -> s0 [0, 65535] { R552 += 1, R553 += 1 };
  s0 -> s3 [0, 65535] { R553 += 1, R523 += 1, R493 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R553 += 1, R522 += 1, R523 += 1 };
  s1 -> s2 [0, 65535] { R553 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R553 += 1, R523 += 1, R493 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R553 += 1, R523 += 1, R492 += 1, R493 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R553 += 1 };
  s2 -> s3 [0, 65535] { R553 += 1, R523 += 1, R493 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R553 += 1, R523 += 1 };
  s3 -> s6 [0, 65535] { R553 += 1 };
  s3 -> s3 [0, 65535] { R553 += 1, R523 += 1, R493 += 1, R8 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R553 += 1, R523 += 1 };
  s5 -> s6 [0, 65535] { R553 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R553 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R555 += 1, R525 += 1, R501 += 1 };
  s0 -> s2 [0, 65535] { R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R554 += 1, R555 += 1 };
  s0 -> s3 [0, 65535] { R555 += 1, R524 += 1, R525 += 1 };
  s0 -> s1 [68, 65535] { R555 += 1, R525 += 1, R501 += 1 };
  s1 -> s1 [0, 66] { R555 += 1, R525 += 1, R501 += 1 };
  s1 -> s5 [0, 65535] { R555 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R555 += 1, R525 += 1 };
  s1 -> s1 [68, 65535] { R555 += 1, R525 += 1, R501 += 1 };
  s2 -> s1 [0, 66] { R555 += 1, R525 += 1, R501 += 1 };
  s2 -> s5 [0, 65535] { R555 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s2 -> s1 [68, 65535] { R555 += 1, R525 += 1, R501 += 1 };
  s3 -> s1 [0, 66] { R555 += 1, R525 += 1, R501 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R555 += 1, R525 += 1, R500 += 1, R501 += 1 };
  s3 -> s3 [0, 65535] { R555 += 1, R524 += 1, R525 += 1 };
  s3 -> s1 [68, 65535] { R555 += 1, R525 += 1, R501 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R555 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R556 += 1, R557 += 1 };
  s0 -> s1 [0, 65535] { R557 += 1, R527 += 1, R503 += 1, R476 += 1 };
  s0 -> s2 [0, 65535] { R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s0 -> s3 [0, 65535] { R557 += 1, R526 += 1, R527 += 1 };
  s1 -> s1 [0, 65535] { R557 += 1, R527 += 1, R503 += 1, R476 += 1 };
  s1 -> s6 [0, 65535] { R557 += 1, R527 += 1 };
  s1 -> s5 [0, 65535] { R557 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R557 += 1, R527 += 1, R503 += 1, R476 += 1 };
  s2 -> s2 [0, 65535] { R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s2 -> s5 [0, 65535] { R557 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R557 += 1, R527 += 1, R503 += 1, R476 += 1 };
  s3 -> s2 [0, 65535] { R557 += 1, R527 += 1, R502 += 1, R503 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R557 += 1, R526 += 1, R527 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R557 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R557 += 1, R527 += 1 };
  s6 -> s5 [0, 65535] { R557 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 67] { R559 += 1, R529 += 1, R505 += 1 };
  s0 -> s0 [0, 65535] { R558 += 1, R559 += 1 };
  s0 -> s2 [0, 65535] { R559 += 1, R529 += 1, R504 += 1, R505 += 1 };
  s0 -> s3 [0, 65535] { R559 += 1, R528 += 1, R529 += 1 };
  s0 -> s4 [84, 84] { R559 += 1, R529 += 1, R505 += 1 };
  s0 -> s1 [85, 65535] { R559 += 1, R529 += 1, R505 += 1 };
  s1 -> s1 [0, 67] { R559 += 1, R529 += 1, R505 += 1 };
  s1 -> s4 [84, 84] { R559 += 1, R529 += 1, R505 += 1 };
  s1 -> s1 [85, 65535] { R559 += 1, R529 += 1, R505 += 1 };
  s2 -> s1 [0, 67] { R559 += 1, R529 += 1, R505 += 1 };
  s2 -> s2 [0, 65535] { R559 += 1, R529 += 1, R504 += 1, R505 += 1 };
  s2 -> s4 [84, 84] { R559 += 1, R529 += 1, R505 += 1 };
  s2 -> s1 [85, 65535] { R559 += 1, R529 += 1, R505 += 1 };
  s3 -> s1 [0, 67] { R559 += 1, R529 += 1, R505 += 1 };
  s3 -> s2 [0, 65535] { R559 += 1, R529 += 1, R504 += 1, R505 += 1 };
  s3 -> s3 [0, 65535] { R559 += 1, R528 += 1, R529 += 1 };
  s3 -> s4 [84, 84] { R559 += 1, R529 += 1, R505 += 1 };
  s3 -> s1 [85, 65535] { R559 += 1, R529 += 1, R505 += 1 };
  s4 -> s4 [0, 67] { R559 += 1, R529 += 1, R505 += 1 };
  s4 -> s4 [0, 65535] { R559 += 1, R529 += 1 };
  s4 -> s5 [0, 65535] { R559 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [84, 65535] { R559 += 1, R529 += 1, R505 += 1 };
  s5 -> s5 [0, 65535] { R559 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R561 += 1, R531 += 1, R506 += 1, R507 += 1 };
  s0 -> s2 [0, 65535] { R561 += 1, R530 += 1, R531 += 1 };
  s0 -> s3 [0, 65535] { R561 += 1, R531 += 1, R507 += 1, R477 += 1 };
  s0 -> s0 [0, 65535] { R560 += 1, R561 += 1 };
  s1 -> s1 [0, 65535] { R561 += 1, R531 += 1, R506 += 1, R507 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R561 += 1 };
  s1 -> s3 [0, 65535] { R561 += 1, R531 += 1, R507 += 1, R477 += 1 };
  s2 -> s1 [0, 65535] { R561 += 1, R531 += 1, R506 += 1, R507 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R561 += 1, R530 += 1, R531 += 1 };
  s2 -> s3 [0, 65535] { R561 += 1, R531 += 1, R507 += 1, R477 += 1 };
  s3 -> s4 [0, 65535] { R561 += 1, R531 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R561 += 1 };
  s3 -> s3 [0, 65535] { R561 += 1, R531 += 1, R507 += 1, R477 += 1 };
  s4 -> s4 [0, 65535] { R561 += 1, R531 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R561 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R561 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R563 += 1, R533 += 1, R509 += 1 };
  s0 -> s2 [0, 65535] { R563 += 1, R532 += 1, R533 += 1 };
  s0 -> s0 [0, 65535] { R562 += 1, R563 += 1 };
  s0 -> s3 [0, 65535] { R563 += 1, R533 += 1, R508 += 1, R509 += 1 };
  s0 -> s4 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s0 -> s5 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s0 -> s1 [85, 65535] { R563 += 1, R533 += 1, R509 += 1 };
  s1 -> s1 [0, 66] { R563 += 1, R533 += 1, R509 += 1 };
  s1 -> s6 [0, 65535] { R563 += 1 };
  s1 -> s1 [0, 65535] { R563 += 1, R533 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s1 -> s5 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s1 -> s1 [85, 65535] { R563 += 1, R533 += 1, R509 += 1 };
  s2 -> s1 [0, 66] { R563 += 1, R533 += 1, R509 += 1 };
  s2 -> s2 [0, 65535] { R563 += 1, R532 += 1, R533 += 1 };
  s2 -> s3 [0, 65535] { R563 += 1, R533 += 1, R508 += 1, R509 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s2 -> s5 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s2 -> s1 [85, 65535] { R563 += 1, R533 += 1, R509 += 1 };
  s3 -> s1 [0, 66] { R563 += 1, R533 += 1, R509 += 1 };
  s3 -> s6 [0, 65535] { R563 += 1 };
  s3 -> s3 [0, 65535] { R563 += 1, R533 += 1, R508 += 1, R509 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s3 -> s5 [67, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s3 -> s1 [85, 65535] { R563 += 1, R533 += 1, R509 += 1 };
  s4 -> s4 [0, 67] { R563 += 1, R533 += 1, R509 += 1 };
  s4 -> s6 [0, 65535] { R563 += 1 };
  s4 -> s4 [0, 65535] { R563 += 1, R533 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [85, 65535] { R563 += 1, R533 += 1, R509 += 1 };
  s5 -> s6 [0, 65535] { R563 += 1 };
  s5 -> s5 [0, 65535] { R563 += 1, R533 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R563 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R479 += 1 };
  s0 -> s0 [0, 65535] { R478 += 1, R479 += 1 };
  s0 -> s2 [9, 13] { R479 += 1 };
  s0 -> s1 [14, 31] { R479 += 1 };
  s0 -> s2 [32, 32] { R479 += 1 };
  s0 -> s1 [33, 65535] { R479 += 1 };
  s1 -> s1 [0, 65535] { R479 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R479 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R480 += 1, R481 += 1 };
  s0 -> s1 [0, 65535] { R481 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R481 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R483 += 1 };
  s0 -> s0 [0, 65535] { R482 += 1, R483 += 1 };
  s0 -> s2 [9, 13] { R483 += 1 };
  s0 -> s1 [14, 31] { R483 += 1 };
  s0 -> s2 [32, 32] { R483 += 1 };
  s0 -> s1 [33, 65535] { R483 += 1 };
  s1 -> s1 [0, 65535] { R483 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R483 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R485 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R484 += 1, R485 += 1 };
  s1 -> s1 [0, 65535] { R485 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R505 && R3 = R533 && R4 = R499 && R12 = 0 && R13 - R504 = -1 && R322 = 0 && R323 = R563 && R486 - R505 = -1 && R487 = R505 && R488 - R505 = -1 && R489 = R505 && R490 = 0 && R491 = 1 && R492 = 0 && R493 = 1 && R494 = 0 && R495 = 1 && R496 = 0 && R497 = 1 && R498 - R563 = 1 && R510 = 1 && R511 = R533 && R512 = 1 && R513 = R533 && R514 = 1 && R515 = R533 && R516 = 1 && R517 = R533 && R518 = 1 && R519 = R533 && R520 = 1 && R521 = R533 && R522 = 1 && R523 = R533 && R524 = 1 && R525 = R533 && R526 = 1 && R527 = R533 && R528 = 1 && R529 = R533 && R530 = 1 && R531 = R533 && R532 = 1 && R534 = 0 && R535 = R563 && R536 = 0 && R537 = R563 && R538 = 0 && R539 = R563 && R540 = 0 && R541 = R563 && R542 = 0 && R543 = R563 && R544 = 0 && R545 = R563 && R546 = 0 && R547 = R563 && R548 = 0 && R549 = R563 && R550 = 0 && R551 = R563 && R552 = 0 && R553 = R563 && R554 = 0 && R555 = R563 && R556 = 0 && R557 = R563 && R558 = 0 && R559 = R563 && R560 = 0 && R561 = R563 && R562 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R563 < R499 && R504 - R505 < 1 && -1 < R504 && 0 < R505 && 0 < R533 && -1 < R563 && (R5 != 0 || ((R1 != R479 || R478 - R479 = -1 || R479 < 0) && (R1 = R479 || R1 < 1))) && (R5 != 0 || ((R1 != R481 || R480 - R481 = -1 || R481 < 0) && (R1 = R481 || R1 < 1))) && (R482 != 0 || ((R6 != 0 || ((R1 != R483 || R483 = 1 || R483 < 0) && (R1 = R483 || R483 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R483 || R483 = 1 || R483 < 0) && (R483 != 1 || -1 < R1) && (R1 = R483 || R483 = 1))))) && (R484 != 0 || ((R6 != 0 || ((R1 != R485 || R485 = 1 || R485 < 0) && (R1 = R485 || R485 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R485 || R485 = 1 || R485 < 0) && (R485 != 1 || -1 < R1) && (R1 = R485 || R485 = 1))))) && (R500 != R504 || R501 = R505 || (R476 = 0 && R504 = R505)) && (R502 != R504 || R503 = R505 || (R476 = 0 && R504 = R505)) && (R506 != 0 || R504 = R507 || (R477 = 0 && R504 = 0)) && (R508 != 0 || R504 = R509 || (R477 = 0 && R504 = 0)) && (R5 = 0 || (R1 = R479 && R478 - R479 = -1)) && (R5 = 0 || (R1 = R481 && R480 - R481 = -1)) && (R482 = 0 || (R6 = 0 && R1 < 0)) && (R484 = 0 || (R6 = 0 && R1 < 0)) && (R500 = R504 || (R476 = 0 && R504 = R505)) && (R502 = R504 || (R476 = 0 && R504 = R505)) && (R506 = 0 || (R477 = 0 && R504 = 0)) && (R508 = 0 || (R477 = 0 && R504 = 0));
// End of Parikh automata intersection problem
