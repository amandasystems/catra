// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R5, R6, R7, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R10 += 1 };
  s0 -> s0 [0, 65535] { R9 += 1, R10 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R10 += 1 };
  s1 -> s1 [0, 43] { R10 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s1 [45, 65535] { R36 += 1 };
  s1 -> s1 [0, 43] { R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R36 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R40 += 1, R6 += 1 };
  s0 -> s3 [61, 61] { R40 += 1 };
  s0 -> s1 [62, 65535] { R40 += 1 };
  s1 -> s1 [0, 60] { R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R40 += 1 };
  s1 -> s1 [62, 65535] { R40 += 1 };
  s2 -> s1 [0, 60] { R40 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R40 += 1, R6 += 1 };
  s2 -> s3 [61, 61] { R40 += 1 };
  s2 -> s1 [62, 65535] { R40 += 1 };
  s3 -> s3 [0, 65535] { R40 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 60] { R42 += 1 };
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R42 += 1, R5 += 1 };
  s0 -> s3 [61, 61] { R42 += 1 };
  s0 -> s1 [62, 65535] { R42 += 1 };
  s1 -> s1 [0, 60] { R42 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R42 += 1 };
  s1 -> s1 [62, 65535] { R42 += 1 };
  s2 -> s1 [0, 60] { R42 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R42 += 1, R5 += 1 };
  s2 -> s3 [61, 61] { R42 += 1 };
  s2 -> s1 [62, 65535] { R42 += 1 };
  s3 -> s3 [0, 65535] { R42 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [9, 13] { R28 += 1 };
  s0 -> s1 [14, 31] { R28 += 1 };
  s0 -> s2 [32, 32] { R28 += 1 };
  s0 -> s1 [33, 65535] { R28 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R28 += 1 };
  s2 -> s1 [0, 65535] { R28 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R30 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R30 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R32 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s2 [9, 13] { R32 += 1 };
  s0 -> s1 [14, 31] { R32 += 1 };
  s0 -> s2 [32, 32] { R32 += 1 };
  s0 -> s1 [33, 65535] { R32 += 1 };
  s1 -> s1 [0, 65535] { R32 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R32 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R34 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R40 && R9 = 0 && R10 = 0 && R35 = 1 && R36 = R40 && R37 = 1 && R38 = R40 && R39 = 1 && R0 != 0 && R1 != 0 && R5 < 1 && R6 < 1 && R7 < 1 && 0 < R40 && (R3 != 0 || ((R1 != R28 || R27 - R28 = -1 || R28 < 0) && (R1 = R28 || R1 < 1))) && (R3 != 0 || ((R1 != R30 || R29 - R30 = -1 || R30 < 0) && (R1 = R30 || R1 < 1))) && (R31 != 0 || ((R4 != 0 || ((R1 != R32 || R32 = 1 || R32 < 0) && (R1 = R32 || R32 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R32 || R32 = 1 || R32 < 0) && (R32 != 1 || -1 < R1) && (R1 = R32 || R32 = 1))))) && (R33 != 0 || ((R4 != 0 || ((R1 != R34 || R34 = 1 || R34 < 0) && (R1 = R34 || R34 = 1 || R1 < 1))) && (R4 = 0 || ((R1 != R34 || R34 = 1 || R34 < 0) && (R34 != 1 || -1 < R1) && (R1 = R34 || R34 = 1))))) && (R3 = 0 || (R1 = R28 && R27 - R28 = -1)) && (R3 = 0 || (R1 = R30 && R29 - R30 = -1)) && (R31 = 0 || (R4 = 0 && R1 < 0)) && (R33 = 0 || (R4 = 0 && R1 < 0));
// End of Parikh automata intersection problem
