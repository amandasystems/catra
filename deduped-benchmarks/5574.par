// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R27, R28, R3, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43] { R28 += 1 };
  s0 -> s0 [0, 65535] { R27 += 1, R28 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R28 += 1 };
  s1 -> s1 [0, 43] { R28 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R28 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 43] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s1 [45, 65535] { R40 += 1 };
  s1 -> s1 [0, 43] { R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R40 += 1 };
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s1 [0, 65535] { R42 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R42 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 60] { R44 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R44 += 1, R3 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s3 [61, 61] { R44 += 1 };
  s0 -> s1 [62, 65535] { R44 += 1, R4 += 1 };
  s1 -> s1 [0, 60] { R44 += 1, R4 += 1 };
  s1 -> s3 [61, 61] { R44 += 1 };
  s1 -> s1 [62, 65535] { R44 += 1, R4 += 1 };
  s2 -> s1 [0, 60] { R44 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R44 += 1, R3 += 1, R4 += 1 };
  s2 -> s3 [61, 61] { R44 += 1 };
  s2 -> s1 [62, 65535] { R44 += 1, R4 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R44 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s1 [0, 65535] { R46 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R46 += 1, R38 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R1 = R42 && R3 = 0 && R27 = 0 && R28 = R44 && R39 - R44 = 1 && R40 = R42 && R41 - R44 = 1 && R43 = 0 && R0 != 0 && R4 != -1 && R44 < R42 && -1 < R44 && (R45 != 0 || R44 = R46 || (R38 = 0 && R44 = 0)) && (R45 = 0 || (R38 = 0 && R44 = 0));
// End of Parikh automata intersection problem
