// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R8, R9;
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s1 [9, 9] { R20 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R34 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s2 [69, 69] { R34 += 1 };
  s0 -> s1 [70, 65535] { R34 += 1 };
  s1 -> s1 [0, 64] { R34 += 1 };
  s1 -> s2 [69, 69] { R34 += 1 };
  s1 -> s1 [70, 65535] { R34 += 1 };
  s2 -> s2 [0, 64] { R34 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [69, 65535] { R34 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s1 [0, 65535] { R36 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 68] { R38 += 1 };
  s0 -> s2 [0, 65535] { R38 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s3 [69, 69] { R38 += 1 };
  s0 -> s1 [70, 65535] { R38 += 1 };
  s1 -> s1 [0, 68] { R38 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [69, 69] { R38 += 1 };
  s1 -> s1 [70, 65535] { R38 += 1 };
  s2 -> s1 [0, 68] { R38 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R38 += 1, R5 += 1 };
  s2 -> s3 [69, 69] { R38 += 1 };
  s2 -> s1 [70, 65535] { R38 += 1 };
  s3 -> s3 [0, 65535] { R38 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R40 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s2 [0, 65535] { R40 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [9, 13] { R40 += 1, R12 += 1 };
  s0 -> s1 [14, 31] { R40 += 1, R12 += 1 };
  s0 -> s3 [32, 32] { R40 += 1, R12 += 1 };
  s0 -> s1 [33, 65535] { R40 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R40 += 1, R12 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R40 += 1 };
  s2 -> s1 [0, 8] { R40 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R40 += 1, R11 += 1, R12 += 1 };
  s2 -> s3 [9, 13] { R40 += 1, R12 += 1 };
  s2 -> s1 [14, 31] { R40 += 1, R12 += 1 };
  s2 -> s3 [32, 32] { R40 += 1, R12 += 1 };
  s2 -> s1 [33, 65535] { R40 += 1, R12 += 1 };
  s3 -> s1 [0, 65535] { R40 += 1, R12 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R40 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R42 += 1, R14 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R42 += 1, R13 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R42 += 1 };
  s1 -> s1 [0, 65535] { R42 += 1, R14 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R42 += 1, R14 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R42 += 1, R13 += 1, R14 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R42 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R44 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R44 += 1, R15 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s3 [9, 13] { R44 += 1, R16 += 1 };
  s0 -> s1 [14, 31] { R44 += 1, R16 += 1 };
  s0 -> s3 [32, 32] { R44 += 1, R16 += 1 };
  s0 -> s1 [33, 65535] { R44 += 1, R16 += 1 };
  s1 -> s5 [0, 65535] { R44 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R44 += 1, R16 += 1 };
  s2 -> s1 [0, 8] { R44 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R44 += 1, R15 += 1, R16 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R44 += 1, R16 += 1 };
  s2 -> s1 [14, 31] { R44 += 1, R16 += 1 };
  s2 -> s3 [32, 32] { R44 += 1, R16 += 1 };
  s2 -> s1 [33, 65535] { R44 += 1, R16 += 1 };
  s3 -> s1 [0, 65535] { R44 += 1, R16 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R44 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R46 += 1, R17 += 1, R18 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R46 += 1, R18 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R46 += 1, R17 += 1, R18 += 1 };
  s1 -> s2 [0, 65535] { R46 += 1, R18 += 1, R3 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R46 += 1 };
  s2 -> s2 [0, 65535] { R46 += 1, R18 += 1, R3 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R46 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R48 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R48 += 1, R23 += 1, R24 += 1 };
  s0 -> s1 [70, 65535] { R48 += 1, R24 += 1 };
  s1 -> s1 [0, 68] { R48 += 1, R24 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R48 += 1 };
  s1 -> s1 [70, 65535] { R48 += 1, R24 += 1 };
  s2 -> s1 [0, 68] { R48 += 1, R24 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R48 += 1, R23 += 1, R24 += 1 };
  s2 -> s1 [70, 65535] { R48 += 1, R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R50 += 1, R26 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R50 += 1, R25 += 1, R26 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s1 -> s4 [0, 65535] { R50 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1, R26 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R50 += 1, R26 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R50 += 1, R25 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R50 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R52 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R52 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s3 [70, 70] { R52 += 1, R28 += 1 };
  s0 -> s1 [71, 65535] { R52 += 1, R28 += 1 };
  s1 -> s1 [0, 69] { R52 += 1, R28 += 1 };
  s1 -> s3 [70, 70] { R52 += 1, R28 += 1 };
  s1 -> s1 [71, 65535] { R52 += 1, R28 += 1 };
  s2 -> s1 [0, 69] { R52 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R52 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [70, 70] { R52 += 1, R28 += 1 };
  s2 -> s1 [71, 65535] { R52 += 1, R28 += 1 };
  s3 -> s3 [0, 65535] { R52 += 1, R28 += 1 };
  s3 -> s4 [0, 65535] { R52 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R52 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s0 -> s1 [0, 65535] { R54 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R54 += 1, R30 += 1, R10 += 1 };
  s1 -> s1 [0, 65535] { R54 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R54 += 1, R30 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R54 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R54 += 1, R30 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R54 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R56 += 1, R32 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s2 [0, 65535] { R56 += 1, R31 += 1, R32 += 1 };
  s0 -> s3 [69, 69] { R56 += 1, R32 += 1 };
  s0 -> s4 [69, 69] { R56 += 1, R32 += 1 };
  s0 -> s1 [71, 65535] { R56 += 1, R32 += 1 };
  s1 -> s1 [0, 68] { R56 += 1, R32 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R56 += 1 };
  s1 -> s3 [69, 69] { R56 += 1, R32 += 1 };
  s1 -> s4 [69, 69] { R56 += 1, R32 += 1 };
  s1 -> s1 [71, 65535] { R56 += 1, R32 += 1 };
  s2 -> s1 [0, 68] { R56 += 1, R32 += 1 };
  s2 -> s2 [0, 65535] { R56 += 1, R31 += 1, R32 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [69, 69] { R56 += 1, R32 += 1 };
  s2 -> s4 [69, 69] { R56 += 1, R32 += 1 };
  s2 -> s1 [71, 65535] { R56 += 1, R32 += 1 };
  s3 -> s3 [0, 65535] { R56 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 69] { R56 += 1, R32 += 1 };
  s4 -> s4 [0, 65535] { R56 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [71, 65535] { R56 += 1, R32 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R28 && R1 = R56 && R11 - R28 = -1 && R12 = R28 && R13 - R28 = -1 && R14 = R28 && R15 = 0 && R16 = 1 && R17 = 0 && R18 = 1 && R19 = 0 && R20 = 1 && R21 = 0 && R22 = 1 && R23 = 0 && R24 = R28 && R25 = 0 && R26 = R28 && R27 = 0 && R33 = 1 && R34 = R56 && R35 = 1 && R36 = R56 && R37 = 1 && R38 = R56 && R39 = 1 && R40 = R56 && R41 = 1 && R42 = R56 && R43 = 1 && R44 = R56 && R45 = 1 && R46 = R56 && R47 = 1 && R48 = R56 && R49 = 1 && R50 = R56 && R51 = 1 && R52 = R56 && R53 = 1 && R54 = R56 && R55 = 1 && R5 < 1 && R8 < 1 && 0 < R28 && 0 < R56 && (R10 = 0 || (R29 = 0 && R30 = 0)) && (R10 = 0 || (R31 = 0 && R32 = 0));
// End of Parikh automata intersection problem
