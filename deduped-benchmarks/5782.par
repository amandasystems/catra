// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R2, R3, R4, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining c10
automaton c10_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R57 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s1 [10, 10] { R69 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s1 [0, 65535] { R71 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R71 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R83 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s0 -> s2 [65, 65] { R83 += 1 };
  s0 -> s1 [66, 65535] { R83 += 1 };
  s1 -> s1 [0, 64] { R83 += 1 };
  s1 -> s2 [65, 65] { R83 += 1 };
  s1 -> s1 [66, 65535] { R83 += 1 };
  s2 -> s2 [0, 65535] { R83 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R85 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s1 -> s1 [0, 65535] { R85 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R87 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R87 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s3 [65, 65] { R87 += 1 };
  s0 -> s1 [66, 65535] { R87 += 1, R7 += 1 };
  s1 -> s1 [0, 64] { R87 += 1, R7 += 1 };
  s1 -> s3 [65, 65] { R87 += 1 };
  s1 -> s1 [66, 65535] { R87 += 1, R7 += 1 };
  s2 -> s1 [0, 64] { R87 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R87 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [65, 65] { R87 += 1 };
  s2 -> s1 [66, 65535] { R87 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R87 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R89 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s2 [0, 65535] { R89 += 1, R60 += 1, R61 += 1 };
  s0 -> s3 [9, 13] { R89 += 1, R61 += 1 };
  s0 -> s1 [14, 31] { R89 += 1, R61 += 1 };
  s0 -> s3 [32, 32] { R89 += 1, R61 += 1 };
  s0 -> s1 [33, 65535] { R89 += 1, R61 += 1 };
  s1 -> s5 [0, 65535] { R89 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R89 += 1, R61 += 1 };
  s2 -> s1 [0, 8] { R89 += 1, R61 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R89 += 1, R60 += 1, R61 += 1 };
  s2 -> s3 [9, 13] { R89 += 1, R61 += 1 };
  s2 -> s1 [14, 31] { R89 += 1, R61 += 1 };
  s2 -> s3 [32, 32] { R89 += 1, R61 += 1 };
  s2 -> s1 [33, 65535] { R89 += 1, R61 += 1 };
  s3 -> s1 [0, 65535] { R89 += 1, R61 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R89 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R91 += 1, R63 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R91 += 1, R62 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R91 += 1, R63 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R91 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R91 += 1, R63 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R91 += 1, R62 += 1, R63 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R91 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R93 += 1, R65 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R93 += 1, R64 += 1, R65 += 1 };
  s0 -> s3 [9, 13] { R93 += 1, R65 += 1 };
  s0 -> s1 [14, 31] { R93 += 1, R65 += 1 };
  s0 -> s3 [32, 32] { R93 += 1, R65 += 1 };
  s0 -> s1 [33, 65535] { R93 += 1, R65 += 1 };
  s1 -> s5 [0, 65535] { R93 += 1 };
  s1 -> s1 [0, 65535] { R93 += 1, R65 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R93 += 1, R65 += 1 };
  s2 -> s2 [0, 65535] { R93 += 1, R64 += 1, R65 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R93 += 1, R65 += 1 };
  s2 -> s1 [14, 31] { R93 += 1, R65 += 1 };
  s2 -> s3 [32, 32] { R93 += 1, R65 += 1 };
  s2 -> s1 [33, 65535] { R93 += 1, R65 += 1 };
  s3 -> s1 [0, 65535] { R93 += 1, R65 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R93 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R95 += 1, R67 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R95 += 1, R66 += 1, R67 += 1 };
  s1 -> s1 [0, 65535] { R95 += 1, R67 += 1, R3 += 1 };
  s1 -> s4 [0, 65535] { R95 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R95 += 1, R67 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R95 += 1, R66 += 1, R67 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R95 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R97 += 1, R73 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R97 += 1, R72 += 1, R73 += 1 };
  s0 -> s1 [66, 65535] { R97 += 1, R73 += 1 };
  s1 -> s1 [0, 64] { R97 += 1, R73 += 1 };
  s1 -> s1 [0, 65535] { R97 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [66, 65535] { R97 += 1, R73 += 1 };
  s2 -> s1 [0, 64] { R97 += 1, R73 += 1 };
  s2 -> s2 [0, 65535] { R97 += 1, R72 += 1, R73 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [66, 65535] { R97 += 1, R73 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s1 [0, 65535] { R99 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R99 += 1, R75 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R99 += 1, R74 += 1, R75 += 1 };
  s1 -> s2 [0, 65535] { R99 += 1, R75 += 1, R58 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R99 += 1 };
  s2 -> s2 [0, 65535] { R99 += 1, R75 += 1, R58 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R99 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65] { R101 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R101 += 1, R76 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R100 += 1, R101 += 1 };
  s0 -> s1 [67, 65535] { R101 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R101 += 1, R77 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R101 += 1 };
  s1 -> s1 [67, 65535] { R101 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R101 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R101 += 1, R76 += 1, R77 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R101 += 1, R77 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [0, 65535] { R103 += 1, R79 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R103 += 1, R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R103 += 1 };
  s1 -> s1 [0, 65535] { R103 += 1, R79 += 1, R59 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R103 += 1, R79 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R103 += 1, R78 += 1, R79 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R103 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 64] { R105 += 1, R81 += 1 };
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s2 [0, 65535] { R105 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [65, 65] { R105 += 1, R81 += 1 };
  s0 -> s4 [65, 65] { R105 += 1, R81 += 1 };
  s0 -> s1 [67, 65535] { R105 += 1, R81 += 1 };
  s1 -> s1 [0, 64] { R105 += 1, R81 += 1 };
  s1 -> s1 [0, 65535] { R105 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R105 += 1, R81 += 1 };
  s1 -> s4 [65, 65] { R105 += 1, R81 += 1 };
  s1 -> s1 [67, 65535] { R105 += 1, R81 += 1 };
  s2 -> s1 [0, 64] { R105 += 1, R81 += 1 };
  s2 -> s2 [0, 65535] { R105 += 1, R80 += 1, R81 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R105 += 1, R81 += 1 };
  s2 -> s4 [65, 65] { R105 += 1, R81 += 1 };
  s2 -> s1 [67, 65535] { R105 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R105 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R105 += 1, R81 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R105 += 1 };
  s4 -> s4 [67, 65535] { R105 += 1, R81 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R63 && R1 = R105 && R6 = 0 && R60 - R63 = -1 && R61 = R63 && R62 - R63 = -1 && R64 = 0 && R65 = 1 && R66 = 0 && R67 = 1 && R68 = 0 && R69 = 1 && R70 = 0 && R71 = 1 && R82 = 1 && R83 = R105 && R84 = 1 && R85 = R105 && R86 = 1 && R87 = R105 && R88 = 1 && R89 = R105 && R90 = 1 && R91 = R105 && R92 = 1 && R93 = R105 && R94 = 1 && R95 = R105 && R96 = 1 && R97 = R105 && R98 = 1 && R99 = R105 && R100 = 1 && R101 = R105 && R102 = 1 && R103 = R105 && R104 = 1 && R7 < R63 && -2 < R7 && R57 < 1 && 0 < R63 && 0 < R105 && (R59 != 0 || ((R78 != 0 || R7 - R79 = -1 || R7 < 0) && (R78 = 0 || R7 < 0))) && (R59 != 0 || ((R80 != 0 || R7 - R81 = -1 || R7 < 0) && (R80 = 0 || R7 < 0))) && (R63 != R73 || R7 - R72 = -1 || ((R58 != 0 || R73 - R7 < 2) && (R58 = 0 || R73 - R7 < 1 || R73 < 1))) && (R63 != R75 || R7 - R74 = -1 || ((R58 != 0 || R75 - R7 < 2) && (R58 = 0 || R75 - R7 < 1 || R75 < 1))) && (R63 != R77 || R7 - R76 = -1 || ((R58 != 0 || R77 - R7 < 2) && (R58 = 0 || R77 - R7 < 1 || R77 < 1))) && (R59 = 0 || (R7 - R79 = -1 && R78 = 0)) && (R59 = 0 || (R7 - R81 = -1 && R80 = 0)) && (R63 = R73 || (R7 - R63 = -1 && R58 = 0)) && (R63 = R75 || (R7 - R63 = -1 && R58 = 0)) && (R63 = R77 || (R7 - R63 = -1 && R58 = 0));
// End of Parikh automata intersection problem
