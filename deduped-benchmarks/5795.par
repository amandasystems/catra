// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R14, R18, R184, R185, R186, R187, R188, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R19 += 1 };
  s1 -> s1 [0, 60] { R19 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R233 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [83, 83] { R233 += 1 };
  s0 -> s1 [84, 65535] { R233 += 1 };
  s1 -> s1 [0, 64] { R233 += 1 };
  s1 -> s2 [83, 83] { R233 += 1 };
  s1 -> s1 [84, 65535] { R233 += 1 };
  s2 -> s2 [0, 64] { R233 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R233 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s1 [0, 65535] { R235 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R235 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 82] { R237 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R11 += 1 };
  s0 -> s3 [83, 83] { R237 += 1 };
  s0 -> s1 [84, 65535] { R237 += 1 };
  s1 -> s1 [0, 82] { R237 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [83, 83] { R237 += 1 };
  s1 -> s1 [84, 65535] { R237 += 1 };
  s2 -> s1 [0, 82] { R237 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R237 += 1, R11 += 1 };
  s2 -> s3 [83, 83] { R237 += 1 };
  s2 -> s1 [84, 65535] { R237 += 1 };
  s3 -> s3 [0, 65535] { R237 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R239 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R196 += 1, R197 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s3 [9, 13] { R239 += 1, R197 += 1 };
  s0 -> s1 [14, 31] { R239 += 1, R197 += 1 };
  s0 -> s3 [32, 32] { R239 += 1, R197 += 1 };
  s0 -> s1 [33, 65535] { R239 += 1, R197 += 1 };
  s1 -> s5 [0, 65535] { R239 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R239 += 1, R197 += 1 };
  s2 -> s1 [0, 8] { R239 += 1, R197 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R196 += 1, R197 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R239 += 1, R197 += 1 };
  s2 -> s1 [14, 31] { R239 += 1, R197 += 1 };
  s2 -> s3 [32, 32] { R239 += 1, R197 += 1 };
  s2 -> s1 [33, 65535] { R239 += 1, R197 += 1 };
  s3 -> s1 [0, 65535] { R239 += 1, R197 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R239 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R241 += 1, R199 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R198 += 1, R199 += 1 };
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s1 -> s4 [0, 65535] { R241 += 1 };
  s1 -> s1 [0, 65535] { R241 += 1, R199 += 1, R6 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R241 += 1, R199 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R241 += 1, R198 += 1, R199 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R241 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R243 += 1, R201 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R200 += 1, R201 += 1 };
  s0 -> s3 [9, 13] { R243 += 1, R201 += 1 };
  s0 -> s1 [14, 31] { R243 += 1, R201 += 1 };
  s0 -> s3 [32, 32] { R243 += 1, R201 += 1 };
  s0 -> s1 [33, 65535] { R243 += 1, R201 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R243 += 1 };
  s1 -> s1 [0, 65535] { R243 += 1, R201 += 1 };
  s2 -> s1 [0, 8] { R243 += 1, R201 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R243 += 1, R200 += 1, R201 += 1 };
  s2 -> s3 [9, 13] { R243 += 1, R201 += 1 };
  s2 -> s1 [14, 31] { R243 += 1, R201 += 1 };
  s2 -> s3 [32, 32] { R243 += 1, R201 += 1 };
  s2 -> s1 [33, 65535] { R243 += 1, R201 += 1 };
  s3 -> s1 [0, 65535] { R243 += 1, R201 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R243 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s1 [0, 65535] { R245 += 1, R203 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R202 += 1, R203 += 1 };
  s1 -> s4 [0, 65535] { R245 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R245 += 1, R203 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R245 += 1, R203 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R245 += 1, R202 += 1, R203 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R245 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 82] { R247 += 1, R213 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R212 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s1 [84, 65535] { R247 += 1, R213 += 1 };
  s1 -> s1 [0, 82] { R247 += 1, R213 += 1 };
  s1 -> s1 [0, 65535] { R247 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [84, 65535] { R247 += 1, R213 += 1 };
  s2 -> s1 [0, 82] { R247 += 1, R213 += 1 };
  s2 -> s2 [0, 65535] { R247 += 1, R212 += 1, R213 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [84, 65535] { R247 += 1, R213 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R249 += 1, R214 += 1, R215 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R215 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1, R214 += 1, R215 += 1 };
  s1 -> s2 [0, 65535] { R249 += 1, R215 += 1, R184 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R249 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R215 += 1, R184 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R249 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 83] { R251 += 1, R217 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s3 [86, 86] { R251 += 1, R217 += 1 };
  s0 -> s1 [87, 65535] { R251 += 1, R217 += 1 };
  s1 -> s1 [0, 83] { R251 += 1, R217 += 1 };
  s1 -> s3 [86, 86] { R251 += 1, R217 += 1 };
  s1 -> s1 [87, 65535] { R251 += 1, R217 += 1 };
  s2 -> s1 [0, 83] { R251 += 1, R217 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R216 += 1, R217 += 1 };
  s2 -> s3 [86, 86] { R251 += 1, R217 += 1 };
  s2 -> s1 [87, 65535] { R251 += 1, R217 += 1 };
  s3 -> s3 [0, 83] { R251 += 1, R217 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R251 += 1 };
  s3 -> s3 [86, 65535] { R251 += 1, R217 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R253 += 1, R225 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R225 += 1, R185 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R253 += 1 };
  s2 -> s1 [0, 65535] { R253 += 1, R225 += 1, R185 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R253 += 1, R224 += 1, R225 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R253 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 82] { R255 += 1, R227 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R226 += 1, R227 += 1 };
  s0 -> s3 [83, 83] { R255 += 1, R227 += 1 };
  s0 -> s4 [83, 83] { R255 += 1, R227 += 1 };
  s0 -> s1 [87, 65535] { R255 += 1, R227 += 1 };
  s1 -> s1 [0, 82] { R255 += 1, R227 += 1 };
  s1 -> s1 [0, 65535] { R255 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [83, 83] { R255 += 1, R227 += 1 };
  s1 -> s4 [83, 83] { R255 += 1, R227 += 1 };
  s1 -> s1 [87, 65535] { R255 += 1, R227 += 1 };
  s2 -> s1 [0, 82] { R255 += 1, R227 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R255 += 1, R226 += 1, R227 += 1 };
  s2 -> s3 [83, 83] { R255 += 1, R227 += 1 };
  s2 -> s4 [83, 83] { R255 += 1, R227 += 1 };
  s2 -> s1 [87, 65535] { R255 += 1, R227 += 1 };
  s3 -> s3 [0, 65535] { R255 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 83] { R255 += 1, R227 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R255 += 1 };
  s4 -> s4 [87, 65535] { R255 += 1, R227 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R257 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s0 -> s2 [84, 84] { R257 += 1 };
  s0 -> s1 [85, 65535] { R257 += 1 };
  s1 -> s1 [0, 64] { R257 += 1 };
  s1 -> s2 [84, 84] { R257 += 1 };
  s1 -> s1 [85, 65535] { R257 += 1 };
  s2 -> s2 [0, 64] { R257 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [84, 65535] { R257 += 1 };
  accepting s2;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s1 [0, 65535] { R259 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R259 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 83] { R261 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s3 [84, 84] { R261 += 1 };
  s0 -> s1 [85, 65535] { R261 += 1 };
  s1 -> s1 [0, 83] { R261 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [84, 84] { R261 += 1 };
  s1 -> s1 [85, 65535] { R261 += 1 };
  s2 -> s1 [0, 83] { R261 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R261 += 1, R14 += 1 };
  s2 -> s3 [84, 84] { R261 += 1 };
  s2 -> s1 [85, 65535] { R261 += 1 };
  s3 -> s3 [0, 65535] { R261 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 8] { R263 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R263 += 1, R204 += 1, R205 += 1 };
  s0 -> s3 [9, 13] { R263 += 1, R205 += 1 };
  s0 -> s1 [14, 31] { R263 += 1, R205 += 1 };
  s0 -> s3 [32, 32] { R263 += 1, R205 += 1 };
  s0 -> s1 [33, 65535] { R263 += 1, R205 += 1 };
  s1 -> s1 [0, 65535] { R263 += 1, R205 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R263 += 1 };
  s2 -> s1 [0, 8] { R263 += 1, R205 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R263 += 1, R204 += 1, R205 += 1 };
  s2 -> s3 [9, 13] { R263 += 1, R205 += 1 };
  s2 -> s1 [14, 31] { R263 += 1, R205 += 1 };
  s2 -> s3 [32, 32] { R263 += 1, R205 += 1 };
  s2 -> s1 [33, 65535] { R263 += 1, R205 += 1 };
  s3 -> s1 [0, 65535] { R263 += 1, R205 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R263 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R206 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R265 += 1, R207 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R265 += 1, R206 += 1, R207 += 1 };
  s1 -> s2 [0, 65535] { R265 += 1, R207 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R265 += 1, R207 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R265 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R265 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 8] { R267 += 1, R209 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R267 += 1, R208 += 1, R209 += 1 };
  s0 -> s3 [9, 13] { R267 += 1, R209 += 1 };
  s0 -> s1 [14, 31] { R267 += 1, R209 += 1 };
  s0 -> s3 [32, 32] { R267 += 1, R209 += 1 };
  s0 -> s1 [33, 65535] { R267 += 1, R209 += 1 };
  s1 -> s5 [0, 65535] { R267 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R267 += 1, R209 += 1 };
  s2 -> s1 [0, 8] { R267 += 1, R209 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R267 += 1, R208 += 1, R209 += 1 };
  s2 -> s3 [9, 13] { R267 += 1, R209 += 1 };
  s2 -> s1 [14, 31] { R267 += 1, R209 += 1 };
  s2 -> s3 [32, 32] { R267 += 1, R209 += 1 };
  s2 -> s1 [33, 65535] { R267 += 1, R209 += 1 };
  s3 -> s1 [0, 65535] { R267 += 1, R209 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R267 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 65535] { R269 += 1, R210 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R269 += 1, R211 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s1 -> s1 [0, 65535] { R269 += 1, R210 += 1, R211 += 1 };
  s1 -> s2 [0, 65535] { R269 += 1, R211 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R269 += 1, R211 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R269 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R269 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 83] { R271 += 1, R219 += 1 };
  s0 -> s2 [0, 65535] { R271 += 1, R218 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [85, 65535] { R271 += 1, R219 += 1 };
  s1 -> s1 [0, 83] { R271 += 1, R219 += 1 };
  s1 -> s1 [0, 65535] { R271 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [85, 65535] { R271 += 1, R219 += 1 };
  s2 -> s1 [0, 83] { R271 += 1, R219 += 1 };
  s2 -> s2 [0, 65535] { R271 += 1, R218 += 1, R219 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [85, 65535] { R271 += 1, R219 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_23 {
  init s0;
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s1 [0, 65535] { R273 += 1, R220 += 1, R221 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R221 += 1, R186 += 1 };
  s1 -> s1 [0, 65535] { R273 += 1, R220 += 1, R221 += 1 };
  s1 -> s2 [0, 65535] { R273 += 1, R221 += 1, R186 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R273 += 1, R221 += 1, R186 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R273 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R273 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_24 {
  init s0;
  s0 -> s1 [0, 84] { R275 += 1, R223 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R222 += 1, R223 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s1 [91, 65535] { R275 += 1, R223 += 1 };
  s1 -> s1 [0, 84] { R275 += 1, R223 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R275 += 1 };
  s1 -> s1 [91, 65535] { R275 += 1, R223 += 1 };
  s2 -> s1 [0, 84] { R275 += 1, R223 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R275 += 1, R222 += 1, R223 += 1 };
  s2 -> s1 [91, 65535] { R275 += 1, R223 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_25 {
  init s0;
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s0 -> s1 [0, 65535] { R277 += 1, R228 += 1, R229 += 1 };
  s0 -> s2 [0, 65535] { R277 += 1, R229 += 1, R187 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1, R228 += 1, R229 += 1 };
  s1 -> s2 [0, 65535] { R277 += 1, R229 += 1, R187 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R277 += 1 };
  s2 -> s2 [0, 65535] { R277 += 1, R229 += 1, R187 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R277 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_26 {
  init s0;
  s0 -> s1 [0, 83] { R279 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s2 [0, 65535] { R279 += 1, R230 += 1, R231 += 1 };
  s0 -> s3 [84, 84] { R279 += 1, R231 += 1 };
  s0 -> s4 [84, 84] { R279 += 1, R231 += 1 };
  s0 -> s1 [91, 65535] { R279 += 1, R231 += 1 };
  s1 -> s1 [0, 83] { R279 += 1, R231 += 1 };
  s1 -> s1 [0, 65535] { R279 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [84, 84] { R279 += 1, R231 += 1 };
  s1 -> s4 [84, 84] { R279 += 1, R231 += 1 };
  s1 -> s1 [91, 65535] { R279 += 1, R231 += 1 };
  s2 -> s1 [0, 83] { R279 += 1, R231 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R279 += 1, R230 += 1, R231 += 1 };
  s2 -> s3 [84, 84] { R279 += 1, R231 += 1 };
  s2 -> s4 [84, 84] { R279 += 1, R231 += 1 };
  s2 -> s1 [91, 65535] { R279 += 1, R231 += 1 };
  s3 -> s3 [0, 84] { R279 += 1, R231 += 1 };
  s3 -> s3 [0, 65535] { R279 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R279 += 1, R231 += 1 };
  s4 -> s4 [0, 65535] { R279 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c2
automaton c2_0 {
  init s0;
  s0 -> s1 [116, 116];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R189 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s2 [9, 13] { R189 += 1 };
  s0 -> s1 [14, 31] { R189 += 1 };
  s0 -> s2 [32, 32] { R189 += 1 };
  s0 -> s1 [33, 65535] { R189 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R189 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s0 -> s1 [0, 65535] { R191 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R191 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R193 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s2 [9, 13] { R193 += 1 };
  s0 -> s1 [14, 31] { R193 += 1 };
  s0 -> s2 [32, 32] { R193 += 1 };
  s0 -> s1 [33, 65535] { R193 += 1 };
  s1 -> s1 [0, 65535] { R193 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R193 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s0 -> s1 [0, 65535] { R195 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R195 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P70
automaton P70_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
constraint R1 = R217 && R2 = R223 && R3 = R255 && R18 = 0 && R19 = R279 && R196 - R217 = -1 && R197 = R217 && R198 - R217 = -1 && R199 = R217 && R200 = 0 && R201 = 1 && R202 = 0 && R203 = 1 && R204 - R223 = -1 && R205 = R223 && R206 - R223 = -1 && R207 = R223 && R208 = 0 && R209 = 1 && R210 = 0 && R211 = 1 && R212 = 0 && R213 = R217 && R214 = 0 && R215 = R217 && R216 = 0 && R218 = 0 && R219 = R223 && R220 = 0 && R221 = R223 && R222 = 0 && R232 - R279 = 1 && R233 = R255 && R234 - R279 = 1 && R235 = R255 && R236 - R279 = 1 && R237 = R255 && R238 - R279 = 1 && R239 = R255 && R240 - R279 = 1 && R241 = R255 && R242 - R279 = 1 && R243 = R255 && R244 - R279 = 1 && R245 = R255 && R246 - R279 = 1 && R247 = R255 && R248 - R279 = 1 && R249 = R255 && R250 - R279 = 1 && R251 = R255 && R252 - R279 = 1 && R253 = R255 && R254 - R279 = 1 && R256 = 0 && R257 = R279 && R258 = 0 && R259 = R279 && R260 = 0 && R261 = R279 && R262 = 0 && R263 = R279 && R264 = 0 && R265 = R279 && R266 = 0 && R267 = R279 && R268 = 0 && R269 = R279 && R270 = 0 && R271 = R279 && R272 = 0 && R273 = R279 && R274 = 0 && R275 = R279 && R276 = 0 && R277 = R279 && R278 = 0 && R0 != 0 && R10 < 1 && R11 < 1 && R14 < 1 && 0 < R217 && 0 < R223 && R279 < R255 && -1 < R279 && (R4 != 0 || ((R0 != R189 || R188 - R189 = -1 || R189 < 0) && (R0 = R189 || R0 < 1))) && (R4 != 0 || ((R0 != R191 || R190 - R191 = -1 || R191 < 0) && (R0 = R191 || R0 < 1))) && (R192 != 0 || ((R5 != 0 || ((R0 != R193 || R193 = 1 || R193 < 0) && (R0 = R193 || R193 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R193 || R193 = 1 || R193 < 0) && (R193 != 1 || -1 < R0) && (R0 = R193 || R193 = 1))))) && (R194 != 0 || ((R5 != 0 || ((R0 != R195 || R195 = 1 || R195 < 0) && (R0 = R195 || R195 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R195 || R195 = 1 || R195 < 0) && (R195 != 1 || -1 < R0) && (R0 = R195 || R195 = 1))))) && (R4 = 0 || (R0 = R189 && R188 - R189 = -1)) && (R4 = 0 || (R0 = R191 && R190 - R191 = -1)) && (R185 = 0 || (R224 = 0 && R225 = 0)) && (R185 = 0 || (R226 = 0 && R227 = 0)) && (R187 = 0 || (R228 = 0 && R229 = 0)) && (R187 = 0 || (R230 = 0 && R231 = 0)) && (R192 = 0 || (R5 = 0 && R0 < 0)) && (R194 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
