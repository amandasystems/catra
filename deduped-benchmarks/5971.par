// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R14, R15, R2, R200, R201, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R200 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R201 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R231 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [9, 13] { R231 += 1 };
  s0 -> s1 [14, 31] { R231 += 1 };
  s0 -> s2 [32, 32] { R231 += 1 };
  s0 -> s1 [33, 65535] { R231 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R231 += 1 };
  s2 -> s1 [0, 65535] { R231 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s1 [0, 65535] { R233 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R233 += 1, R11 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R235 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [9, 13] { R235 += 1 };
  s0 -> s1 [14, 31] { R235 += 1 };
  s0 -> s2 [32, 32] { R235 += 1 };
  s0 -> s1 [33, 65535] { R235 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R235 += 1 };
  s2 -> s1 [0, 65535] { R235 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R237 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1, R12 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 66] { R263 += 1 };
  s0 -> s0 [0, 65535] { R262 += 1, R263 += 1 };
  s0 -> s1 [68, 65535] { R263 += 1 };
  s1 -> s1 [0, 66] { R263 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [68, 65535] { R263 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s1 -> s1 [0, 65535] { R265 += 1, R204 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 67] { R267 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s0 -> s1 [91, 65535] { R267 += 1 };
  s1 -> s1 [0, 67] { R267 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R267 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R291 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1, R205 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 66] { R293 += 1 };
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s2 [67, 67] { R293 += 1 };
  s0 -> s3 [67, 67] { R293 += 1 };
  s0 -> s1 [91, 65535] { R293 += 1 };
  s1 -> s1 [0, 66] { R293 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R293 += 1 };
  s1 -> s3 [67, 67] { R293 += 1 };
  s1 -> s1 [91, 65535] { R293 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R293 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R293 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R15 += 1 };
  s0 -> s0 [0, 65535] { R14 += 1, R15 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R15 += 1 };
  s1 -> s1 [0, 60] { R15 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R251 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s2 [87, 87] { R251 += 1 };
  s0 -> s1 [88, 65535] { R251 += 1 };
  s1 -> s1 [0, 64] { R251 += 1 };
  s1 -> s2 [87, 87] { R251 += 1 };
  s1 -> s1 [88, 65535] { R251 += 1 };
  s2 -> s2 [0, 64] { R251 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [87, 65535] { R251 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s1 [0, 65535] { R253 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R255 += 1, R215 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R214 += 1, R215 += 1 };
  s0 -> s3 [9, 13] { R255 += 1, R215 += 1 };
  s0 -> s1 [14, 31] { R255 += 1, R215 += 1 };
  s0 -> s3 [32, 32] { R255 += 1, R215 += 1 };
  s0 -> s1 [33, 65535] { R255 += 1, R215 += 1 };
  s1 -> s5 [0, 65535] { R255 += 1 };
  s1 -> s1 [0, 65535] { R255 += 1, R215 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R255 += 1, R215 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R255 += 1, R214 += 1, R215 += 1 };
  s2 -> s3 [9, 13] { R255 += 1, R215 += 1 };
  s2 -> s1 [14, 31] { R255 += 1, R215 += 1 };
  s2 -> s3 [32, 32] { R255 += 1, R215 += 1 };
  s2 -> s1 [33, 65535] { R255 += 1, R215 += 1 };
  s3 -> s1 [0, 65535] { R255 += 1, R215 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R255 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R257 += 1, R217 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R257 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R256 += 1, R257 += 1 };
  s1 -> s1 [0, 65535] { R257 += 1, R217 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R257 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R257 += 1, R217 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R257 += 1, R216 += 1, R217 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R257 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R259 += 1, R219 += 1 };
  s0 -> s0 [0, 65535] { R258 += 1, R259 += 1 };
  s0 -> s2 [0, 65535] { R259 += 1, R218 += 1, R219 += 1 };
  s0 -> s3 [9, 13] { R259 += 1, R219 += 1 };
  s0 -> s1 [14, 31] { R259 += 1, R219 += 1 };
  s0 -> s3 [32, 32] { R259 += 1, R219 += 1 };
  s0 -> s1 [33, 65535] { R259 += 1, R219 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R259 += 1, R219 += 1 };
  s1 -> s5 [0, 65535] { R259 += 1 };
  s2 -> s1 [0, 8] { R259 += 1, R219 += 1 };
  s2 -> s2 [0, 65535] { R259 += 1, R218 += 1, R219 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R259 += 1, R219 += 1 };
  s2 -> s1 [14, 31] { R259 += 1, R219 += 1 };
  s2 -> s3 [32, 32] { R259 += 1, R219 += 1 };
  s2 -> s1 [33, 65535] { R259 += 1, R219 += 1 };
  s3 -> s1 [0, 65535] { R259 += 1, R219 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R259 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R260 += 1, R261 += 1 };
  s0 -> s1 [0, 65535] { R261 += 1, R220 += 1, R221 += 1 };
  s0 -> s2 [0, 65535] { R261 += 1, R221 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R261 += 1, R220 += 1, R221 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R261 += 1, R221 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R261 += 1, R221 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R261 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R261 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R269 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s1 -> s1 [0, 65535] { R269 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s0 -> s1 [0, 65535] { R271 += 1, R222 += 1, R223 += 1 };
  s0 -> s2 [11, 11] { R271 += 1, R223 += 1 };
  s1 -> s1 [0, 65535] { R271 += 1, R222 += 1, R223 += 1 };
  s1 -> s2 [11, 11] { R271 += 1, R223 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R271 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s1 [0, 65535] { R273 += 1, R224 += 1, R225 += 1 };
  s0 -> s2 [0, 65535] { R273 += 1, R225 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R273 += 1, R224 += 1, R225 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R273 += 1, R225 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R273 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R273 += 1, R225 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R273 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R275 += 1, R227 += 1 };
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R226 += 1, R227 += 1 };
  s0 -> s3 [9, 13] { R275 += 1, R227 += 1 };
  s0 -> s1 [14, 31] { R275 += 1, R227 += 1 };
  s0 -> s3 [32, 32] { R275 += 1, R227 += 1 };
  s0 -> s1 [33, 65535] { R275 += 1, R227 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R275 += 1, R227 += 1 };
  s1 -> s5 [0, 65535] { R275 += 1 };
  s2 -> s1 [0, 8] { R275 += 1, R227 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R275 += 1, R226 += 1, R227 += 1 };
  s2 -> s3 [9, 13] { R275 += 1, R227 += 1 };
  s2 -> s1 [14, 31] { R275 += 1, R227 += 1 };
  s2 -> s3 [32, 32] { R275 += 1, R227 += 1 };
  s2 -> s1 [33, 65535] { R275 += 1, R227 += 1 };
  s3 -> s1 [0, 65535] { R275 += 1, R227 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R275 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s0 -> s1 [0, 65535] { R277 += 1, R229 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R277 += 1, R228 += 1, R229 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R277 += 1 };
  s1 -> s1 [0, 65535] { R277 += 1, R229 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R277 += 1, R229 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R277 += 1, R228 += 1, R229 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R277 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 64] { R279 += 1, R239 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s0 -> s2 [0, 65535] { R279 += 1, R238 += 1, R239 += 1 };
  s0 -> s1 [91, 65535] { R279 += 1, R239 += 1 };
  s1 -> s1 [0, 64] { R279 += 1, R239 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R279 += 1 };
  s1 -> s1 [91, 65535] { R279 += 1, R239 += 1 };
  s2 -> s1 [0, 64] { R279 += 1, R239 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R279 += 1, R238 += 1, R239 += 1 };
  s2 -> s1 [91, 65535] { R279 += 1, R239 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R281 += 1, R240 += 1, R241 += 1 };
  s0 -> s0 [0, 65535] { R280 += 1, R281 += 1 };
  s0 -> s2 [0, 65535] { R281 += 1, R241 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R281 += 1, R240 += 1, R241 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R281 += 1, R241 += 1, R0 += 1 };
  s2 -> s3 [0, 65535] { R281 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R281 += 1, R241 += 1, R0 += 1 };
  s3 -> s3 [0, 65535] { R281 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 8] { R283 += 1, R243 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R282 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R283 += 1, R243 += 1, R206 += 1, R207 += 1 };
  s0 -> s3 [0, 65535] { R283 += 1, R242 += 1, R243 += 1 };
  s0 -> s4 [9, 13] { R283 += 1, R243 += 1, R207 += 1 };
  s0 -> s1 [14, 31] { R283 += 1, R243 += 1, R207 += 1 };
  s0 -> s4 [32, 32] { R283 += 1, R243 += 1, R207 += 1 };
  s0 -> s1 [33, 65535] { R283 += 1, R243 += 1, R207 += 1 };
  s1 -> s6 [0, 65535] { R283 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R283 += 1, R243 += 1 };
  s1 -> s1 [0, 65535] { R283 += 1, R243 += 1, R207 += 1 };
  s2 -> s1 [0, 8] { R283 += 1, R243 += 1, R207 += 1 };
  s2 -> s6 [0, 65535] { R283 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R283 += 1, R243 += 1, R206 += 1, R207 += 1 };
  s2 -> s4 [9, 13] { R283 += 1, R243 += 1, R207 += 1 };
  s2 -> s1 [14, 31] { R283 += 1, R243 += 1, R207 += 1 };
  s2 -> s4 [32, 32] { R283 += 1, R243 += 1, R207 += 1 };
  s2 -> s1 [33, 65535] { R283 += 1, R243 += 1, R207 += 1 };
  s3 -> s1 [0, 8] { R283 += 1, R243 += 1, R207 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R283 += 1, R243 += 1, R206 += 1, R207 += 1 };
  s3 -> s3 [0, 65535] { R283 += 1, R242 += 1, R243 += 1 };
  s3 -> s4 [9, 13] { R283 += 1, R243 += 1, R207 += 1 };
  s3 -> s1 [14, 31] { R283 += 1, R243 += 1, R207 += 1 };
  s3 -> s4 [32, 32] { R283 += 1, R243 += 1, R207 += 1 };
  s3 -> s1 [33, 65535] { R283 += 1, R243 += 1, R207 += 1 };
  s4 -> s1 [0, 65535] { R283 += 1, R243 += 1, R207 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R283 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R283 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R283 += 1, R243 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R285 += 1, R244 += 1, R245 += 1 };
  s0 -> s2 [0, 65535] { R285 += 1, R245 += 1, R208 += 1, R209 += 1 };
  s0 -> s3 [0, 65535] { R285 += 1, R245 += 1, R209 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R244 += 1, R245 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R285 += 1, R245 += 1, R208 += 1, R209 += 1 };
  s1 -> s3 [0, 65535] { R285 += 1, R245 += 1, R209 += 1, R5 += 1 };
  s2 -> s4 [0, 65535] { R285 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R285 += 1, R245 += 1, R208 += 1, R209 += 1 };
  s2 -> s3 [0, 65535] { R285 += 1, R245 += 1, R209 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R285 += 1 };
  s3 -> s5 [0, 65535] { R285 += 1, R245 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R285 += 1, R245 += 1, R209 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R285 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R285 += 1 };
  s5 -> s5 [0, 65535] { R285 += 1, R245 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 8] { R287 += 1, R247 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R287 += 1, R246 += 1, R247 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s3 [0, 65535] { R287 += 1, R247 += 1, R210 += 1, R211 += 1 };
  s0 -> s4 [9, 13] { R287 += 1, R247 += 1, R211 += 1 };
  s0 -> s1 [14, 31] { R287 += 1, R247 += 1, R211 += 1 };
  s0 -> s4 [32, 32] { R287 += 1, R247 += 1, R211 += 1 };
  s0 -> s1 [33, 65535] { R287 += 1, R247 += 1, R211 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R287 += 1, R247 += 1, R211 += 1 };
  s1 -> s7 [0, 65535] { R287 += 1, R247 += 1 };
  s1 -> s6 [0, 65535] { R287 += 1 };
  s2 -> s1 [0, 8] { R287 += 1, R247 += 1, R211 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R287 += 1, R246 += 1, R247 += 1 };
  s2 -> s3 [0, 65535] { R287 += 1, R247 += 1, R210 += 1, R211 += 1 };
  s2 -> s4 [9, 13] { R287 += 1, R247 += 1, R211 += 1 };
  s2 -> s1 [14, 31] { R287 += 1, R247 += 1, R211 += 1 };
  s2 -> s4 [32, 32] { R287 += 1, R247 += 1, R211 += 1 };
  s2 -> s1 [33, 65535] { R287 += 1, R247 += 1, R211 += 1 };
  s3 -> s1 [0, 8] { R287 += 1, R247 += 1, R211 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R287 += 1, R247 += 1, R210 += 1, R211 += 1 };
  s3 -> s6 [0, 65535] { R287 += 1 };
  s3 -> s4 [9, 13] { R287 += 1, R247 += 1, R211 += 1 };
  s3 -> s1 [14, 31] { R287 += 1, R247 += 1, R211 += 1 };
  s3 -> s4 [32, 32] { R287 += 1, R247 += 1, R211 += 1 };
  s3 -> s1 [33, 65535] { R287 += 1, R247 += 1, R211 += 1 };
  s4 -> s1 [0, 65535] { R287 += 1, R247 += 1, R211 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R287 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R287 += 1, R247 += 1 };
  s7 -> s6 [0, 65535] { R287 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s1 [0, 65535] { R289 += 1, R248 += 1, R249 += 1 };
  s0 -> s2 [0, 65535] { R289 += 1, R249 += 1, R212 += 1, R213 += 1 };
  s0 -> s3 [0, 65535] { R289 += 1, R249 += 1, R213 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R289 += 1, R248 += 1, R249 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R289 += 1, R249 += 1, R212 += 1, R213 += 1 };
  s1 -> s3 [0, 65535] { R289 += 1, R249 += 1, R213 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R289 += 1, R249 += 1, R212 += 1, R213 += 1 };
  s2 -> s3 [0, 65535] { R289 += 1, R249 += 1, R213 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R289 += 1 };
  s3 -> s4 [0, 65535] { R289 += 1, R249 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R289 += 1, R249 += 1, R213 += 1, R6 += 1 };
  s3 -> s6 [0, 65535] { R289 += 1 };
  s4 -> s4 [0, 65535] { R289 += 1, R249 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R289 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R289 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 - R249 = 1 && R3 = R261 && R4 = R267 && R14 = 0 && R15 = R289 && R222 = R249 && R223 - R249 = 1 && R224 = R249 && R225 - R249 = 1 && R226 = 0 && R227 = 1 && R228 = 0 && R229 = 1 && R230 - R267 = -1 && R231 = R267 && R232 - R267 = -1 && R233 = R267 && R234 = 0 && R235 = 1 && R236 = 0 && R237 = 1 && R238 = 0 && R239 = R249 && R240 = 0 && R241 = R249 && R242 = 0 && R243 = R249 && R244 = 0 && R245 = R249 && R246 = 0 && R247 = R249 && R248 = 0 && R250 - R289 = 1 && R251 = R261 && R252 - R289 = 1 && R253 = R261 && R254 - R289 = 1 && R255 = R261 && R256 - R289 = 1 && R257 = R261 && R258 - R289 = 1 && R259 = R261 && R260 - R289 = 1 && R262 = 0 && R263 = R267 && R264 = 0 && R265 = R267 && R266 = 0 && R268 = 0 && R269 = R289 && R270 = 0 && R271 = R289 && R272 = 0 && R273 = R289 && R274 = 0 && R275 = R289 && R276 = 0 && R277 = R289 && R278 = 0 && R279 = R289 && R280 = 0 && R281 = R289 && R282 = 0 && R283 = R289 && R284 = 0 && R285 = R289 && R286 = 0 && R287 = R289 && R288 = 0 && R0 != 0 && R1 != 0 && R200 < 1 && R201 < 1 && -1 < R249 && R289 < R261 && 0 < R267 && -1 < R289 && (R5 != 0 || ((R0 != R207 || R206 - R207 = -1 || R207 < 0) && (R0 = R207 || R0 < 1))) && (R5 != 0 || ((R0 != R209 || R208 - R209 = -1 || R209 < 0) && (R0 = R209 || R0 < 1))) && (R7 != 0 || ((R1 != R215 || R214 - R215 = -1 || R215 < 0) && (R1 = R215 || R1 < 1))) && (R7 != 0 || ((R1 != R217 || R216 - R217 = -1 || R217 < 0) && (R1 = R217 || R1 < 1))) && (R210 != 0 || ((R6 != 0 || ((R0 != R211 || R211 = 1 || R211 < 0) && (R0 = R211 || R211 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R211 || R211 = 1 || R211 < 0) && (R211 != 1 || -1 < R0) && (R0 = R211 || R211 = 1))))) && (R212 != 0 || ((R6 != 0 || ((R0 != R213 || R213 = 1 || R213 < 0) && (R0 = R213 || R213 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R213 || R213 = 1 || R213 < 0) && (R213 != 1 || -1 < R0) && (R0 = R213 || R213 = 1))))) && (R218 != 0 || ((R8 != 0 || ((R1 != R219 || R219 = 1 || R219 < 0) && (R1 = R219 || R219 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R219 || R219 = 1 || R219 < 0) && (R219 != 1 || -1 < R1) && (R1 = R219 || R219 = 1))))) && (R220 != 0 || ((R8 != 0 || ((R1 != R221 || R221 = 1 || R221 < 0) && (R1 = R221 || R221 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R221 || R221 = 1 || R221 < 0) && (R221 != 1 || -1 < R1) && (R1 = R221 || R221 = 1))))) && (R5 = 0 || (R0 = R207 && R206 - R207 = -1)) && (R5 = 0 || (R0 = R209 && R208 - R209 = -1)) && (R7 = 0 || (R1 = R215 && R214 - R215 = -1)) && (R7 = 0 || (R1 = R217 && R216 - R217 = -1)) && (R205 = 0 || (R290 = 0 && R291 = 0 && R292 = 0 && R293 = 0)) && (R210 = 0 || (R6 = 0 && R0 < 0)) && (R212 = 0 || (R6 = 0 && R0 < 0)) && (R218 = 0 || (R8 = 0 && R1 < 0)) && (R220 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
