// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R6, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R27 += 1, R15 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R29 += 1 };
  s0 -> s0 [0, 65535] { R28 += 1, R29 += 1 };
  s0 -> s2 [67, 67] { R29 += 1 };
  s0 -> s3 [67, 67] { R29 += 1 };
  s0 -> s1 [91, 65535] { R29 += 1 };
  s1 -> s1 [0, 66] { R29 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R29 += 1 };
  s1 -> s3 [67, 67] { R29 += 1 };
  s1 -> s1 [91, 65535] { R29 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R29 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R29 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R35 += 1 };
  s0 -> s0 [0, 65535] { R34 += 1, R35 += 1 };
  s0 -> s2 [67, 67] { R35 += 1 };
  s0 -> s1 [68, 65535] { R35 += 1 };
  s1 -> s1 [0, 66] { R35 += 1 };
  s1 -> s2 [67, 67] { R35 += 1 };
  s1 -> s1 [68, 65535] { R35 += 1 };
  s2 -> s2 [0, 65535] { R35 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s1 [0, 65535] { R37 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R37 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R39 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s0 -> s2 [0, 65535] { R39 += 1, R6 += 1 };
  s0 -> s3 [67, 67] { R39 += 1 };
  s0 -> s1 [68, 65535] { R39 += 1 };
  s1 -> s1 [0, 66] { R39 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R39 += 1 };
  s1 -> s1 [68, 65535] { R39 += 1 };
  s2 -> s1 [0, 66] { R39 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R39 += 1, R6 += 1 };
  s2 -> s3 [67, 67] { R39 += 1 };
  s2 -> s1 [68, 65535] { R39 += 1 };
  s3 -> s3 [0, 65535] { R39 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 66] { R41 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R41 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s1 [68, 65535] { R41 += 1, R21 += 1 };
  s1 -> s1 [0, 66] { R41 += 1, R21 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R41 += 1 };
  s1 -> s1 [68, 65535] { R41 += 1, R21 += 1 };
  s2 -> s1 [0, 66] { R41 += 1, R21 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R41 += 1, R20 += 1, R21 += 1 };
  s2 -> s1 [68, 65535] { R41 += 1, R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s0 -> s1 [0, 65535] { R43 += 1, R22 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R43 += 1, R23 += 1, R13 += 1 };
  s1 -> s1 [0, 65535] { R43 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R43 += 1, R23 += 1, R13 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R43 += 1 };
  s2 -> s2 [0, 65535] { R43 += 1, R23 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R43 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 67] { R45 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R45 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s1 [91, 65535] { R45 += 1, R25 += 1 };
  s1 -> s1 [0, 67] { R45 += 1, R25 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R45 += 1 };
  s1 -> s1 [91, 65535] { R45 += 1, R25 += 1 };
  s2 -> s1 [0, 67] { R45 += 1, R25 += 1 };
  s2 -> s2 [0, 65535] { R45 += 1, R24 += 1, R25 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R45 += 1, R25 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R46 += 1, R47 += 1 };
  s0 -> s1 [0, 65535] { R47 += 1, R31 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R47 += 1, R30 += 1, R31 += 1 };
  s1 -> s4 [0, 65535] { R47 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R47 += 1, R31 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R47 += 1, R31 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R47 += 1, R30 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R47 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R49 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R49 += 1, R32 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R48 += 1, R49 += 1 };
  s0 -> s3 [67, 67] { R49 += 1, R33 += 1 };
  s0 -> s4 [67, 67] { R49 += 1, R33 += 1 };
  s0 -> s1 [91, 65535] { R49 += 1, R33 += 1 };
  s1 -> s1 [0, 66] { R49 += 1, R33 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R49 += 1 };
  s1 -> s3 [67, 67] { R49 += 1, R33 += 1 };
  s1 -> s4 [67, 67] { R49 += 1, R33 += 1 };
  s1 -> s1 [91, 65535] { R49 += 1, R33 += 1 };
  s2 -> s1 [0, 66] { R49 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R49 += 1, R32 += 1, R33 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R49 += 1, R33 += 1 };
  s2 -> s4 [67, 67] { R49 += 1, R33 += 1 };
  s2 -> s1 [91, 65535] { R49 += 1, R33 += 1 };
  s3 -> s3 [0, 67] { R49 += 1, R33 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R49 += 1 };
  s3 -> s3 [91, 65535] { R49 += 1, R33 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R49 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining P13
automaton P13_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 78];
  s0 -> s0 [0, 65535] { R3 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535];
  s1 -> s1 [0, 78];
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 78] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [79, 79] { R17 += 1 };
  s0 -> s1 [80, 65535] { R17 += 1 };
  s1 -> s1 [0, 78] { R17 += 1 };
  s1 -> s2 [79, 79] { R17 += 1 };
  s1 -> s1 [80, 65535] { R17 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R17 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [0, 65535] { R19 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R19 += 1, R12 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R17 && R2 = R35 && R16 = 0 && R34 = 0 && -1 < R1 && R3 < 1 && R6 < 1 && R9 < 1 && -1 < R17 && -1 < R35 && (R1 != 0 || R13 = 0 || (R20 = 0 && R21 = 0)) && (R1 != 0 || R13 = 0 || (R22 = 0 && R23 = 0)) && (R1 != 0 || R13 = 0 || (R24 = 0 && R25 = 0)) && (R1 != 0 || ((R36 != 0 || ((R38 != 0 || ((R40 != 0 || ((R42 != 0 || ((R44 != 0 || ((R46 != 0 || ((R48 != 0 || ((R35 != R49 || ((R37 != R49 || ((R39 != R49 || ((R41 != R49 || ((R43 != R49 || ((R45 != R49 || R47 = R49 || R49 < 1) && (R45 = R49 || R49 < 1))) && (R43 = R49 || R49 < 1))) && (R41 = R49 || R49 < 1))) && (R39 = R49 || R49 < 1))) && (R37 = R49 || R49 < 1))) && (R35 = R49 || R35 < 1))) && (R48 = 0 || R35 < 1))) && (R46 = 0 || R35 < 1))) && (R44 = 0 || R35 < 1))) && (R42 = 0 || R35 < 1))) && (R40 = 0 || R35 < 1))) && (R38 = 0 || R35 < 1))) && (R36 = 0 || R35 < 1))) && (R18 != 0 || R17 = R19 || (R12 = 0 && R17 = 0)) && (R20 != 0 || R1 = R21 || R1 < 1) && (R22 != 0 || R1 = R23 || R1 < 1) && (R24 != 0 || R1 = R25 || R1 < 1) && (R36 != 0 || ((R38 != 0 || ((R40 != 0 || ((R42 != 0 || ((R44 != 0 || ((R46 != 0 || ((R48 != 0 || ((R35 != R49 || ((R37 != R49 || ((R39 != R49 || ((R41 != R49 || ((R43 != R49 || ((R45 != R49 || R47 = R49 || R1 < 1 || R49 < 0) && (R45 = R49 || R1 < 1 || R49 < 0))) && (R43 = R49 || R1 < 1 || R49 < 0))) && (R41 = R49 || R1 < 1 || R49 < 0))) && (R39 = R49 || R1 < 1 || R49 < 0))) && (R37 = R49 || R1 < 1 || R49 < 0))) && (R35 = R49 || R1 < 1))) && (R48 = 0 || R1 < 1))) && (R46 = 0 || R1 < 1))) && (R44 = 0 || R1 < 1))) && (R42 = 0 || R1 < 1))) && (R40 = 0 || R1 < 1))) && (R38 = 0 || R1 < 1))) && (R14 = 0 || (R30 = 0 && R31 = 0)) && (R14 = 0 || (R32 = 0 && R33 = 0)) && (R15 = 0 || (R26 = 0 && R27 = 0)) && (R15 = 0 || (R28 = 0 && R29 = 0)) && (R18 = 0 || (R12 = 0 && R17 = 0)) && (R20 = 0 || R1 < 1) && (R22 = 0 || R1 < 1) && (R24 = 0 || R1 < 1) && (R36 = 0 || R1 < 1);
// End of Parikh automata intersection problem
