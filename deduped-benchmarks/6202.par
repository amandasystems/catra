// Parikh automata intersection problem, generated by OSTRICH+
counter int R1061, R1062, R1063, R1064, R1065, R1066, R1067, R1068, R1069, R1070, R1071, R1072, R1073, R1074, R1075, R1076, R1077, R1078, R1079, R1080, R1081, R1082, R1083, R1084, R1085, R1086, R1087, R1088, R1089, R1090, R1091, R1092, R1093, R1094, R1095, R1096, R1097, R1098, R1099, R1100, R1101, R1102, R1103, R1104, R1105, R1106, R1107, R1108, R1109, R1110, R1111, R1112, R1113, R1114, R1115, R1116, R1117, R1118, R1119, R1120, R1121, R1122, R1123, R1124, R1125, R1126, R1127, R1128, R1129, R1130, R1131, R1132, R1133, R1134, R1135, R1136, R1137, R1138, R1139, R1140, R1141, R1142, R1143, R1144, R1145, R1146, R1147, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R14, R17, R2, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R5, R6, R7, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922;
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P48
automaton P48_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [9, 9] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R1128 += 1 };
  s0 -> s0 [0, 65535] { R1127 += 1, R1128 += 1 };
  s0 -> s2 [67, 67] { R1128 += 1 };
  s0 -> s1 [68, 65535] { R1128 += 1 };
  s1 -> s1 [0, 64] { R1128 += 1 };
  s1 -> s2 [67, 67] { R1128 += 1 };
  s1 -> s1 [68, 65535] { R1128 += 1 };
  s2 -> s2 [0, 64] { R1128 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R1128 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R1129 += 1, R1130 += 1 };
  s0 -> s1 [0, 65535] { R1130 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1130 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 66] { R1132 += 1 };
  s0 -> s2 [0, 65535] { R1132 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1131 += 1, R1132 += 1 };
  s0 -> s3 [67, 67] { R1132 += 1 };
  s0 -> s1 [68, 65535] { R1132 += 1 };
  s1 -> s1 [0, 66] { R1132 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R1132 += 1 };
  s1 -> s1 [68, 65535] { R1132 += 1 };
  s2 -> s1 [0, 66] { R1132 += 1 };
  s2 -> s2 [0, 65535] { R1132 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R1132 += 1 };
  s2 -> s1 [68, 65535] { R1132 += 1 };
  s3 -> s3 [0, 65535] { R1132 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1134 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R1133 += 1, R1134 += 1 };
  s0 -> s2 [0, 65535] { R1134 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R1134 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R1134 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R1134 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R1134 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R1134 += 1 };
  s1 -> s1 [0, 65535] { R1134 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1134 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1134 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R1134 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R1134 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R1134 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R1134 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R1134 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1134 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1136 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R1136 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1135 += 1, R1136 += 1 };
  s1 -> s1 [0, 65535] { R1136 += 1, R25 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1136 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1136 += 1, R26 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R1136 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1136 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R1138 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R1137 += 1, R1138 += 1 };
  s0 -> s2 [0, 65535] { R1138 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R1138 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R1138 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R1138 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R1138 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R1138 += 1 };
  s1 -> s1 [0, 65535] { R1138 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R1138 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1138 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R1138 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R1138 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R1138 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R1138 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R1138 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1138 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R1139 += 1, R1140 += 1 };
  s0 -> s1 [0, 65535] { R1140 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R1140 += 1, R30 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R1140 += 1, R29 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1140 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1140 += 1 };
  s2 -> s2 [0, 65535] { R1140 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1140 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 66] { R1142 += 1, R1070 += 1 };
  s0 -> s0 [0, 65535] { R1141 += 1, R1142 += 1 };
  s0 -> s2 [0, 65535] { R1142 += 1, R1069 += 1, R1070 += 1 };
  s0 -> s1 [68, 65535] { R1142 += 1, R1070 += 1 };
  s1 -> s1 [0, 66] { R1142 += 1, R1070 += 1 };
  s1 -> s1 [0, 65535] { R1142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R1142 += 1, R1070 += 1 };
  s2 -> s1 [0, 66] { R1142 += 1, R1070 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1142 += 1, R1069 += 1, R1070 += 1 };
  s2 -> s1 [68, 65535] { R1142 += 1, R1070 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1144 += 1, R1071 += 1, R1072 += 1 };
  s0 -> s0 [0, 65535] { R1143 += 1, R1144 += 1 };
  s0 -> s2 [0, 65535] { R1144 += 1, R1072 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1144 += 1, R1071 += 1, R1072 += 1 };
  s1 -> s2 [0, 65535] { R1144 += 1, R1072 += 1, R21 += 1 };
  s2 -> s3 [0, 65535] { R1144 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1144 += 1, R1072 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R1144 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 67] { R1146 += 1, R1074 += 1 };
  s0 -> s2 [0, 65535] { R1146 += 1, R1073 += 1, R1074 += 1 };
  s0 -> s0 [0, 65535] { R1145 += 1, R1146 += 1 };
  s0 -> s1 [70, 65535] { R1146 += 1, R1074 += 1 };
  s1 -> s1 [0, 67] { R1146 += 1, R1074 += 1 };
  s1 -> s1 [0, 65535] { R1146 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [70, 65535] { R1146 += 1, R1074 += 1 };
  s2 -> s1 [0, 67] { R1146 += 1, R1074 += 1 };
  s2 -> s2 [0, 65535] { R1146 += 1, R1073 += 1, R1074 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [70, 65535] { R1146 += 1, R1074 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1148 += 1, R1075 += 1, R1076 += 1 };
  s0 -> s2 [0, 65535] { R1148 += 1, R1076 += 1, R858 += 1 };
  s0 -> s0 [0, 65535] { R1147 += 1, R1148 += 1 };
  s1 -> s1 [0, 65535] { R1148 += 1, R1075 += 1, R1076 += 1 };
  s1 -> s2 [0, 65535] { R1148 += 1, R1076 += 1, R858 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1148 += 1, R1076 += 1, R858 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1148 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1148 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 69] { R1150 += 1, R1078 += 1 };
  s0 -> s0 [0, 65535] { R1149 += 1, R1150 += 1 };
  s0 -> s2 [0, 65535] { R1150 += 1, R1078 += 1, R860 += 1 };
  s0 -> s3 [0, 65535] { R1150 += 1, R1077 += 1, R1078 += 1 };
  s0 -> s1 [71, 65535] { R1150 += 1, R1078 += 1 };
  s1 -> s1 [0, 69] { R1150 += 1, R1078 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1150 += 1 };
  s1 -> s1 [71, 65535] { R1150 += 1, R1078 += 1 };
  s2 -> s1 [0, 69] { R1150 += 1, R1078 += 1 };
  s2 -> s5 [0, 65535] { R1150 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1150 += 1, R1078 += 1, R860 += 1 };
  s2 -> s1 [71, 65535] { R1150 += 1, R1078 += 1 };
  s3 -> s1 [0, 69] { R1150 += 1, R1078 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R1150 += 1, R1078 += 1, R860 += 1 };
  s3 -> s3 [0, 65535] { R1150 += 1, R1077 += 1, R1078 += 1 };
  s3 -> s1 [71, 65535] { R1150 += 1, R1078 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1150 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1152 += 1, R1080 += 1, R864 += 1, R865 += 1 };
  s0 -> s2 [0, 65535] { R1152 += 1, R1079 += 1, R1080 += 1 };
  s0 -> s0 [0, 65535] { R1151 += 1, R1152 += 1 };
  s0 -> s3 [0, 65535] { R1152 += 1, R1080 += 1, R865 += 1, R866 += 1 };
  s1 -> s1 [0, 65535] { R1152 += 1, R1080 += 1, R864 += 1, R865 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1152 += 1, R1080 += 1, R865 += 1, R866 += 1 };
  s1 -> s6 [0, 65535] { R1152 += 1 };
  s2 -> s1 [0, 65535] { R1152 += 1, R1080 += 1, R864 += 1, R865 += 1 };
  s2 -> s2 [0, 65535] { R1152 += 1, R1079 += 1, R1080 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1152 += 1, R1080 += 1, R865 += 1, R866 += 1 };
  s3 -> s4 [0, 65535] { R1152 += 1, R1080 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1152 += 1, R1080 += 1, R865 += 1, R866 += 1 };
  s3 -> s6 [0, 65535] { R1152 += 1 };
  s4 -> s4 [0, 65535] { R1152 += 1, R1080 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1152 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1152 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 69] { R1154 += 1, R1082 += 1, R870 += 1 };
  s0 -> s0 [0, 65535] { R1153 += 1, R1154 += 1 };
  s0 -> s2 [0, 65535] { R1154 += 1, R1081 += 1, R1082 += 1 };
  s0 -> s3 [0, 65535] { R1154 += 1, R1082 += 1, R869 += 1, R870 += 1 };
  s0 -> s4 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s0 -> s5 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s0 -> s1 [74, 65535] { R1154 += 1, R1082 += 1, R870 += 1 };
  s1 -> s1 [0, 69] { R1154 += 1, R1082 += 1, R870 += 1 };
  s1 -> s6 [0, 65535] { R1154 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R1154 += 1, R1082 += 1 };
  s1 -> s4 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s1 -> s5 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s1 -> s1 [74, 65535] { R1154 += 1, R1082 += 1, R870 += 1 };
  s2 -> s1 [0, 69] { R1154 += 1, R1082 += 1, R870 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R1154 += 1, R1081 += 1, R1082 += 1 };
  s2 -> s3 [0, 65535] { R1154 += 1, R1082 += 1, R869 += 1, R870 += 1 };
  s2 -> s4 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s2 -> s5 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s2 -> s1 [74, 65535] { R1154 += 1, R1082 += 1, R870 += 1 };
  s3 -> s1 [0, 69] { R1154 += 1, R1082 += 1, R870 += 1 };
  s3 -> s6 [0, 65535] { R1154 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R1154 += 1, R1082 += 1, R869 += 1, R870 += 1 };
  s3 -> s4 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s3 -> s5 [70, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s3 -> s1 [74, 65535] { R1154 += 1, R1082 += 1, R870 += 1 };
  s4 -> s6 [0, 65535] { R1154 += 1 };
  s4 -> s4 [0, 65535] { R1154 += 1, R1082 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 70] { R1154 += 1, R1082 += 1, R870 += 1 };
  s5 -> s6 [0, 65535] { R1154 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R1154 += 1, R1082 += 1 };
  s5 -> s5 [74, 65535] { R1154 += 1, R1082 += 1, R870 += 1 };
  s6 -> s6 [0, 65535] { R1154 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 69] { R1156 += 1, R1084 += 1, R874 += 1 };
  s0 -> s2 [0, 65535] { R1156 += 1, R1083 += 1, R1084 += 1 };
  s0 -> s0 [0, 65535] { R1155 += 1, R1156 += 1 };
  s0 -> s3 [0, 65535] { R1156 += 1, R1084 += 1, R873 += 1, R874 += 1 };
  s0 -> s4 [70, 70] { R1156 += 1, R1084 += 1, R874 += 1 };
  s0 -> s1 [71, 65535] { R1156 += 1, R1084 += 1, R874 += 1 };
  s1 -> s1 [0, 69] { R1156 += 1, R1084 += 1, R874 += 1 };
  s1 -> s4 [70, 70] { R1156 += 1, R1084 += 1, R874 += 1 };
  s1 -> s1 [71, 65535] { R1156 += 1, R1084 += 1, R874 += 1 };
  s2 -> s1 [0, 69] { R1156 += 1, R1084 += 1, R874 += 1 };
  s2 -> s2 [0, 65535] { R1156 += 1, R1083 += 1, R1084 += 1 };
  s2 -> s3 [0, 65535] { R1156 += 1, R1084 += 1, R873 += 1, R874 += 1 };
  s2 -> s4 [70, 70] { R1156 += 1, R1084 += 1, R874 += 1 };
  s2 -> s1 [71, 65535] { R1156 += 1, R1084 += 1, R874 += 1 };
  s3 -> s1 [0, 69] { R1156 += 1, R1084 += 1, R874 += 1 };
  s3 -> s3 [0, 65535] { R1156 += 1, R1084 += 1, R873 += 1, R874 += 1 };
  s3 -> s4 [70, 70] { R1156 += 1, R1084 += 1, R874 += 1 };
  s3 -> s1 [71, 65535] { R1156 += 1, R1084 += 1, R874 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1156 += 1, R1084 += 1, R874 += 1 };
  s4 -> s6 [0, 65535] { R1156 += 1, R1084 += 1 };
  s4 -> s7 [0, 65535] { R1156 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1156 += 1, R1084 += 1 };
  s6 -> s7 [0, 65535] { R1156 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1156 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R1158 += 1, R1086 += 1, R878 += 1, R879 += 1 };
  s0 -> s2 [0, 65535] { R1158 += 1, R1085 += 1, R1086 += 1 };
  s0 -> s0 [0, 65535] { R1157 += 1, R1158 += 1 };
  s0 -> s3 [0, 65535] { R1158 += 1, R1086 += 1, R879 += 1, R880 += 1 };
  s1 -> s1 [0, 65535] { R1158 += 1, R1086 += 1, R878 += 1, R879 += 1 };
  s1 -> s5 [0, 65535] { R1158 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R1158 += 1, R1086 += 1, R879 += 1, R880 += 1 };
  s2 -> s1 [0, 65535] { R1158 += 1, R1086 += 1, R878 += 1, R879 += 1 };
  s2 -> s2 [0, 65535] { R1158 += 1, R1085 += 1, R1086 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R1158 += 1, R1086 += 1, R879 += 1, R880 += 1 };
  s3 -> s4 [0, 65535] { R1158 += 1, R1086 += 1 };
  s3 -> s5 [0, 65535] { R1158 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1158 += 1, R1086 += 1, R879 += 1, R880 += 1 };
  s4 -> s4 [0, 65535] { R1158 += 1, R1086 += 1 };
  s4 -> s5 [0, 65535] { R1158 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1158 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 69] { R1160 += 1, R1088 += 1, R885 += 1 };
  s0 -> s2 [0, 65535] { R1160 += 1, R1088 += 1, R885 += 1, R886 += 1 };
  s0 -> s0 [0, 65535] { R1159 += 1, R1160 += 1 };
  s0 -> s3 [0, 65535] { R1160 += 1, R1087 += 1, R1088 += 1 };
  s0 -> s4 [0, 65535] { R1160 += 1, R1088 += 1, R884 += 1, R885 += 1 };
  s0 -> s1 [71, 65535] { R1160 += 1, R1088 += 1, R885 += 1 };
  s1 -> s1 [0, 69] { R1160 += 1, R1088 += 1, R885 += 1 };
  s1 -> s5 [0, 65535] { R1160 += 1 };
  s1 -> s1 [0, 65535] { R1160 += 1, R1088 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [71, 65535] { R1160 += 1, R1088 += 1, R885 += 1 };
  s2 -> s1 [0, 69] { R1160 += 1, R1088 += 1, R885 += 1 };
  s2 -> s7 [0, 65535] { R1160 += 1, R1088 += 1 };
  s2 -> s2 [0, 65535] { R1160 += 1, R1088 += 1, R885 += 1, R886 += 1 };
  s2 -> s5 [0, 65535] { R1160 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [71, 65535] { R1160 += 1, R1088 += 1, R885 += 1 };
  s3 -> s1 [0, 69] { R1160 += 1, R1088 += 1, R885 += 1 };
  s3 -> s2 [0, 65535] { R1160 += 1, R1088 += 1, R885 += 1, R886 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1160 += 1, R1087 += 1, R1088 += 1 };
  s3 -> s4 [0, 65535] { R1160 += 1, R1088 += 1, R884 += 1, R885 += 1 };
  s3 -> s1 [71, 65535] { R1160 += 1, R1088 += 1, R885 += 1 };
  s4 -> s1 [0, 69] { R1160 += 1, R1088 += 1, R885 += 1 };
  s4 -> s2 [0, 65535] { R1160 += 1, R1088 += 1, R885 += 1, R886 += 1 };
  s4 -> s5 [0, 65535] { R1160 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1160 += 1, R1088 += 1, R884 += 1, R885 += 1 };
  s4 -> s1 [71, 65535] { R1160 += 1, R1088 += 1, R885 += 1 };
  s5 -> s5 [0, 65535] { R1160 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1160 += 1, R1088 += 1 };
  s7 -> s5 [0, 65535] { R1160 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 69] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s0 -> s0 [0, 65535] { R1161 += 1, R1162 += 1 };
  s0 -> s2 [0, 65535] { R1162 += 1, R1090 += 1, R891 += 1, R892 += 1 };
  s0 -> s3 [0, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s0 -> s4 [0, 65535] { R1162 += 1, R1089 += 1, R1090 += 1 };
  s0 -> s1 [71, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s1 -> s1 [0, 69] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R1162 += 1 };
  s1 -> s7 [0, 65535] { R1162 += 1, R1090 += 1 };
  s1 -> s1 [0, 65535] { R1162 += 1, R1090 += 1, R892 += 1 };
  s1 -> s1 [71, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s2 -> s1 [0, 69] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R1162 += 1 };
  s2 -> s2 [0, 65535] { R1162 += 1, R1090 += 1, R891 += 1, R892 += 1 };
  s2 -> s3 [0, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s2 -> s1 [71, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s3 -> s1 [0, 69] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1162 += 1 };
  s3 -> s7 [0, 65535] { R1162 += 1, R1090 += 1 };
  s3 -> s3 [0, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s3 -> s1 [71, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s4 -> s1 [0, 69] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R1162 += 1, R1090 += 1, R891 += 1, R892 += 1 };
  s4 -> s3 [0, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R893 += 1, R894 += 1 };
  s4 -> s4 [0, 65535] { R1162 += 1, R1089 += 1, R1090 += 1 };
  s4 -> s1 [71, 65535] { R1162 += 1, R1090 += 1, R892 += 1, R894 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1162 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1162 += 1 };
  s7 -> s7 [0, 65535] { R1162 += 1, R1090 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s0 -> s2 [0, 65535] { R1164 += 1, R1092 += 1, R900 += 1, R901 += 1 };
  s0 -> s3 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s0 -> s4 [0, 65535] { R1164 += 1, R1091 += 1, R1092 += 1 };
  s0 -> s0 [0, 65535] { R1163 += 1, R1164 += 1 };
  s1 -> s1 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s1 -> s6 [0, 65535] { R1164 += 1, R1092 += 1 };
  s1 -> s3 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s1 -> s8 [0, 65535] { R1164 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s2 -> s2 [0, 65535] { R1164 += 1, R1092 += 1, R900 += 1, R901 += 1 };
  s2 -> s3 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s2 -> s8 [0, 65535] { R1164 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1164 += 1, R1092 += 1 };
  s3 -> s7 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1 };
  s3 -> s3 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s3 -> s8 [0, 65535] { R1164 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s1 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R902 += 1, R903 += 1 };
  s4 -> s2 [0, 65535] { R1164 += 1, R1092 += 1, R900 += 1, R901 += 1 };
  s4 -> s3 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1, R903 += 1, R904 += 1 };
  s4 -> s4 [0, 65535] { R1164 += 1, R1091 += 1, R1092 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1164 += 1, R1092 += 1 };
  s6 -> s8 [0, 65535] { R1164 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1164 += 1, R1092 += 1 };
  s7 -> s7 [0, 65535] { R1164 += 1, R1092 += 1, R901 += 1 };
  s7 -> s8 [0, 65535] { R1164 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R1164 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 70] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s0 -> s2 [0, 65535] { R1166 += 1, R1094 += 1, R909 += 1, R910 += 1 };
  s0 -> s3 [0, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s0 -> s4 [0, 65535] { R1166 += 1, R1093 += 1, R1094 += 1 };
  s0 -> s0 [0, 65535] { R1165 += 1, R1166 += 1 };
  s0 -> s1 [73, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s1 -> s1 [0, 70] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s1 -> s6 [0, 65535] { R1166 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R1166 += 1, R1094 += 1 };
  s1 -> s1 [0, 65535] { R1166 += 1, R1094 += 1, R910 += 1 };
  s1 -> s1 [73, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s2 -> s1 [0, 70] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s2 -> s6 [0, 65535] { R1166 += 1 };
  s2 -> s2 [0, 65535] { R1166 += 1, R1094 += 1, R909 += 1, R910 += 1 };
  s2 -> s3 [0, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [73, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s3 -> s1 [0, 70] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s3 -> s6 [0, 65535] { R1166 += 1 };
  s3 -> s3 [0, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s7 [0, 65535] { R1166 += 1, R1094 += 1 };
  s3 -> s1 [73, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s4 -> s1 [0, 70] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s4 -> s2 [0, 65535] { R1166 += 1, R1094 += 1, R909 += 1, R910 += 1 };
  s4 -> s3 [0, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R911 += 1, R912 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1166 += 1, R1093 += 1, R1094 += 1 };
  s4 -> s1 [73, 65535] { R1166 += 1, R1094 += 1, R910 += 1, R912 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1166 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1166 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R1166 += 1, R1094 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s0 -> s2 [0, 65535] { R1168 += 1, R1096 += 1, R918 += 1, R919 += 1 };
  s0 -> s0 [0, 65535] { R1167 += 1, R1168 += 1 };
  s0 -> s3 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s0 -> s4 [0, 65535] { R1168 += 1, R1095 += 1, R1096 += 1 };
  s1 -> s6 [0, 65535] { R1168 += 1 };
  s1 -> s1 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s1 -> s7 [0, 65535] { R1168 += 1, R1096 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s2 -> s6 [0, 65535] { R1168 += 1 };
  s2 -> s1 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1168 += 1, R1096 += 1, R918 += 1, R919 += 1 };
  s2 -> s3 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s3 -> s6 [0, 65535] { R1168 += 1 };
  s3 -> s7 [0, 65535] { R1168 += 1, R1096 += 1 };
  s3 -> s8 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s4 -> s1 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R920 += 1, R921 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R1168 += 1, R1096 += 1, R918 += 1, R919 += 1 };
  s4 -> s3 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1, R921 += 1, R922 += 1 };
  s4 -> s4 [0, 65535] { R1168 += 1, R1095 += 1, R1096 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1168 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R1168 += 1 };
  s7 -> s7 [0, 65535] { R1168 += 1, R1096 += 1 };
  s7 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R1168 += 1 };
  s8 -> s7 [0, 65535] { R1168 += 1, R1096 += 1 };
  s8 -> s8 [0, 65535] { R1168 += 1, R1096 += 1, R919 += 1 };
  s8 -> s5 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 69] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s0 -> s0 [0, 65535] { R1169 += 1, R1170 += 1 };
  s0 -> s2 [0, 65535] { R1170 += 1, R1097 += 1, R1098 += 1 };
  s0 -> s3 [70, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s0 -> s4 [73, 73] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s0 -> s1 [74, 65535] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s1 -> s1 [0, 69] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s1 -> s3 [70, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s1 -> s4 [73, 73] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s1 -> s1 [74, 65535] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s2 -> s1 [0, 69] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s2 -> s2 [0, 65535] { R1170 += 1, R1097 += 1, R1098 += 1 };
  s2 -> s3 [70, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s2 -> s4 [73, 73] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s2 -> s1 [74, 65535] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s3 -> s3 [0, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s3 -> s8 [73, 73] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s3 -> s3 [74, 65535] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s4 -> s4 [0, 69] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s4 -> s5 [0, 65535] { R1170 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1170 += 1, R1098 += 1, R1066 += 1 };
  s4 -> s7 [0, 65535] { R1170 += 1, R1098 += 1 };
  s4 -> s8 [70, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s4 -> s9 [70, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s4 -> s4 [73, 65535] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s5 -> s5 [0, 65535] { R1170 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R1170 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1170 += 1, R1098 += 1 };
  s8 -> s8 [0, 70] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s8 -> s5 [0, 65535] { R1170 += 1 };
  s8 -> s8 [0, 65535] { R1170 += 1, R1098 += 1, R1066 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R1170 += 1, R1098 += 1 };
  s8 -> s8 [73, 65535] { R1170 += 1, R1098 += 1, R1066 += 1, R1068 += 1 };
  s9 -> s5 [0, 65535] { R1170 += 1 };
  s9 -> s9 [0, 65535] { R1170 += 1, R1098 += 1, R1066 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R1170 += 1, R1098 += 1 };
  accepting s4, s8, s5, s9, s6, s7;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R1172 += 1, R1099 += 1, R1100 += 1 };
  s0 -> s0 [0, 65535] { R1171 += 1, R1172 += 1 };
  s0 -> s2 [0, 65535] { R1172 += 1, R1100 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1172 += 1, R1099 += 1, R1100 += 1 };
  s1 -> s2 [0, 65535] { R1172 += 1, R1100 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1172 += 1, R1100 += 1, R22 += 1 };
  s2 -> s4 [0, 65535] { R1172 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1172 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 66] { R1174 += 1, R1102 += 1 };
  s0 -> s2 [0, 65535] { R1174 += 1, R1101 += 1, R1102 += 1 };
  s0 -> s0 [0, 65535] { R1173 += 1, R1174 += 1 };
  s0 -> s3 [67, 67] { R1174 += 1, R1102 += 1 };
  s0 -> s4 [67, 67] { R1174 += 1, R1102 += 1 };
  s0 -> s5 [70, 70] { R1174 += 1, R1102 += 1 };
  s0 -> s1 [71, 65535] { R1174 += 1, R1102 += 1 };
  s1 -> s1 [0, 66] { R1174 += 1, R1102 += 1 };
  s1 -> s3 [67, 67] { R1174 += 1, R1102 += 1 };
  s1 -> s4 [67, 67] { R1174 += 1, R1102 += 1 };
  s1 -> s5 [70, 70] { R1174 += 1, R1102 += 1 };
  s1 -> s1 [71, 65535] { R1174 += 1, R1102 += 1 };
  s2 -> s1 [0, 66] { R1174 += 1, R1102 += 1 };
  s2 -> s2 [0, 65535] { R1174 += 1, R1101 += 1, R1102 += 1 };
  s2 -> s3 [67, 67] { R1174 += 1, R1102 += 1 };
  s2 -> s4 [67, 67] { R1174 += 1, R1102 += 1 };
  s2 -> s5 [70, 70] { R1174 += 1, R1102 += 1 };
  s2 -> s1 [71, 65535] { R1174 += 1, R1102 += 1 };
  s4 -> s4 [0, 67] { R1174 += 1, R1102 += 1 };
  s4 -> s8 [70, 70] { R1174 += 1, R1102 += 1 };
  s4 -> s4 [71, 65535] { R1174 += 1, R1102 += 1 };
  s5 -> s5 [0, 66] { R1174 += 1, R1102 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1174 += 1 };
  s5 -> s7 [67, 67] { R1174 += 1, R1102 += 1 };
  s5 -> s8 [67, 67] { R1174 += 1, R1102 += 1 };
  s5 -> s5 [70, 65535] { R1174 += 1, R1102 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1174 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 67] { R1174 += 1, R1102 += 1 };
  s8 -> s8 [0, 65535] { R1174 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [70, 65535] { R1174 += 1, R1102 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 66] { R1176 += 1, R1104 += 1, R857 += 1 };
  s0 -> s2 [0, 65535] { R1176 += 1, R1103 += 1, R1104 += 1 };
  s0 -> s0 [0, 65535] { R1175 += 1, R1176 += 1 };
  s0 -> s3 [67, 67] { R1176 += 1, R1104 += 1, R857 += 1 };
  s0 -> s4 [67, 67] { R1176 += 1, R1104 += 1, R857 += 1 };
  s0 -> s1 [68, 65535] { R1176 += 1, R1104 += 1, R857 += 1 };
  s1 -> s1 [0, 66] { R1176 += 1, R1104 += 1, R857 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1176 += 1 };
  s1 -> s3 [67, 67] { R1176 += 1, R1104 += 1, R857 += 1 };
  s1 -> s4 [67, 67] { R1176 += 1, R1104 += 1, R857 += 1 };
  s1 -> s1 [68, 65535] { R1176 += 1, R1104 += 1, R857 += 1 };
  s2 -> s1 [0, 66] { R1176 += 1, R1104 += 1, R857 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1176 += 1, R1103 += 1, R1104 += 1 };
  s2 -> s3 [67, 67] { R1176 += 1, R1104 += 1, R857 += 1 };
  s2 -> s4 [67, 67] { R1176 += 1, R1104 += 1, R857 += 1 };
  s2 -> s1 [68, 65535] { R1176 += 1, R1104 += 1, R857 += 1 };
  s3 -> s3 [0, 65535] { R1176 += 1, R1104 += 1, R857 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1176 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1176 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 66] { R1178 += 1, R1106 += 1, R859 += 1 };
  s0 -> s0 [0, 65535] { R1177 += 1, R1178 += 1 };
  s0 -> s2 [0, 65535] { R1178 += 1, R1105 += 1, R1106 += 1 };
  s0 -> s3 [67, 67] { R1178 += 1, R1106 += 1, R859 += 1 };
  s0 -> s4 [67, 67] { R1178 += 1, R1106 += 1, R859 += 1 };
  s0 -> s1 [68, 65535] { R1178 += 1, R1106 += 1, R859 += 1 };
  s1 -> s1 [0, 66] { R1178 += 1, R1106 += 1, R859 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1178 += 1 };
  s1 -> s3 [67, 67] { R1178 += 1, R1106 += 1, R859 += 1 };
  s1 -> s4 [67, 67] { R1178 += 1, R1106 += 1, R859 += 1 };
  s1 -> s1 [68, 65535] { R1178 += 1, R1106 += 1, R859 += 1 };
  s2 -> s1 [0, 66] { R1178 += 1, R1106 += 1, R859 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1178 += 1, R1105 += 1, R1106 += 1 };
  s2 -> s3 [67, 67] { R1178 += 1, R1106 += 1, R859 += 1 };
  s2 -> s4 [67, 67] { R1178 += 1, R1106 += 1, R859 += 1 };
  s2 -> s1 [68, 65535] { R1178 += 1, R1106 += 1, R859 += 1 };
  s3 -> s3 [0, 65535] { R1178 += 1, R1106 += 1, R859 += 1 };
  s3 -> s6 [0, 65535] { R1178 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1178 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1178 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 66] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s0 -> s2 [0, 65535] { R1180 += 1, R1107 += 1, R1108 += 1 };
  s0 -> s0 [0, 65535] { R1179 += 1, R1180 += 1 };
  s0 -> s3 [67, 67] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s0 -> s4 [67, 67] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s0 -> s1 [68, 65535] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [0, 66] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [0, 65535] { R1180 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s1 -> s4 [67, 67] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s1 -> s1 [68, 65535] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [0, 66] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s2 -> s2 [0, 65535] { R1180 += 1, R1107 += 1, R1108 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [67, 67] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s2 -> s4 [67, 67] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s2 -> s1 [68, 65535] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s3 -> s3 [0, 65535] { R1180 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R1180 += 1 };
  s4 -> s4 [0, 65535] { R1180 += 1, R1108 += 1, R861 += 1, R862 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1180 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 66] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s0 -> s2 [0, 65535] { R1182 += 1, R1109 += 1, R1110 += 1 };
  s0 -> s0 [0, 65535] { R1181 += 1, R1182 += 1 };
  s0 -> s3 [67, 67] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s0 -> s4 [67, 67] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s0 -> s1 [68, 65535] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [0, 66] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1182 += 1 };
  s1 -> s3 [67, 67] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s1 -> s4 [67, 67] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s1 -> s1 [68, 65535] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s2 -> s1 [0, 66] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1182 += 1, R1109 += 1, R1110 += 1 };
  s2 -> s3 [67, 67] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s2 -> s4 [67, 67] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s2 -> s1 [68, 65535] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1182 += 1, R1110 += 1, R867 += 1, R868 += 1 };
  s3 -> s6 [0, 65535] { R1182 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1182 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1182 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 66] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s0 -> s2 [0, 65535] { R1184 += 1, R1111 += 1, R1112 += 1 };
  s0 -> s0 [0, 65535] { R1183 += 1, R1184 += 1 };
  s0 -> s3 [67, 67] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s0 -> s4 [67, 67] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s0 -> s1 [68, 65535] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [0, 66] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [0, 65535] { R1184 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [67, 67] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s1 -> s4 [67, 67] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s1 -> s1 [68, 65535] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s2 -> s1 [0, 66] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1184 += 1, R1111 += 1, R1112 += 1 };
  s2 -> s3 [67, 67] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s2 -> s4 [67, 67] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s2 -> s1 [68, 65535] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1184 += 1 };
  s4 -> s5 [0, 65535] { R1184 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1184 += 1, R1112 += 1, R871 += 1, R872 += 1 };
  s5 -> s5 [0, 65535] { R1184 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 66] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s0 -> s0 [0, 65535] { R1185 += 1, R1186 += 1 };
  s0 -> s2 [0, 65535] { R1186 += 1, R1113 += 1, R1114 += 1 };
  s0 -> s3 [67, 67] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s0 -> s4 [67, 67] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s0 -> s1 [68, 65535] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [0, 66] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [0, 65535] { R1186 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s1 -> s4 [67, 67] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s1 -> s1 [68, 65535] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s2 -> s1 [0, 66] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s2 -> s2 [0, 65535] { R1186 += 1, R1113 += 1, R1114 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s2 -> s4 [67, 67] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s2 -> s1 [68, 65535] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s3 -> s3 [0, 65535] { R1186 += 1, R1114 += 1, R875 += 1, R876 += 1 };
  s3 -> s6 [0, 65535] { R1186 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1186 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1186 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 66] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s0 -> s0 [0, 65535] { R1187 += 1, R1188 += 1 };
  s0 -> s2 [0, 65535] { R1188 += 1, R1115 += 1, R1116 += 1 };
  s0 -> s3 [67, 67] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s0 -> s4 [67, 67] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s0 -> s1 [68, 65535] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [0, 66] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1188 += 1 };
  s1 -> s3 [67, 67] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s1 -> s4 [67, 67] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s1 -> s1 [68, 65535] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [0, 66] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1188 += 1, R1115 += 1, R1116 += 1 };
  s2 -> s3 [67, 67] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s2 -> s4 [67, 67] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s2 -> s1 [68, 65535] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s3 -> s3 [0, 65535] { R1188 += 1, R1116 += 1, R881 += 1, R882 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1188 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1188 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1188 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 66] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s0 -> s0 [0, 65535] { R1189 += 1, R1190 += 1 };
  s0 -> s2 [0, 65535] { R1190 += 1, R1117 += 1, R1118 += 1 };
  s0 -> s3 [67, 67] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s0 -> s4 [67, 67] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s0 -> s1 [68, 65535] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [0, 66] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [0, 65535] { R1190 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s1 -> s4 [67, 67] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s1 -> s1 [68, 65535] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s2 -> s1 [0, 66] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s2 -> s2 [0, 65535] { R1190 += 1, R1117 += 1, R1118 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s2 -> s4 [67, 67] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s2 -> s1 [68, 65535] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s3 -> s3 [0, 65535] { R1190 += 1, R1118 += 1, R887 += 1, R888 += 1 };
  s3 -> s6 [0, 65535] { R1190 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1190 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1190 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 66] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s0 -> s0 [0, 65535] { R1191 += 1, R1192 += 1 };
  s0 -> s2 [0, 65535] { R1192 += 1, R1119 += 1, R1120 += 1 };
  s0 -> s3 [67, 67] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s0 -> s4 [67, 67] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s0 -> s1 [68, 65535] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s1 -> s1 [0, 66] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1192 += 1 };
  s1 -> s3 [67, 67] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s1 -> s4 [67, 67] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s1 -> s1 [68, 65535] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s2 -> s1 [0, 66] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1192 += 1, R1119 += 1, R1120 += 1 };
  s2 -> s3 [67, 67] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s2 -> s4 [67, 67] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s2 -> s1 [68, 65535] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1192 += 1 };
  s3 -> s3 [0, 65535] { R1192 += 1, R1120 += 1, R895 += 1, R896 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1192 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1192 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 66] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s0 -> s2 [0, 65535] { R1194 += 1, R1121 += 1, R1122 += 1 };
  s0 -> s0 [0, 65535] { R1193 += 1, R1194 += 1 };
  s0 -> s3 [67, 67] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s0 -> s4 [67, 67] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s0 -> s1 [68, 65535] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 66] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [0, 65535] { R1194 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s1 -> s4 [67, 67] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s1 -> s1 [68, 65535] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s2 -> s1 [0, 66] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s2 -> s2 [0, 65535] { R1194 += 1, R1121 += 1, R1122 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s2 -> s4 [67, 67] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s2 -> s1 [68, 65535] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1194 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1194 += 1 };
  s4 -> s4 [0, 65535] { R1194 += 1, R1122 += 1, R905 += 1, R906 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1194 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 66] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s0 -> s2 [0, 65535] { R1196 += 1, R1123 += 1, R1124 += 1 };
  s0 -> s0 [0, 65535] { R1195 += 1, R1196 += 1 };
  s0 -> s3 [67, 67] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s0 -> s4 [67, 67] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s0 -> s1 [68, 65535] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s1 -> s1 [0, 66] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1196 += 1 };
  s1 -> s3 [67, 67] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s1 -> s4 [67, 67] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s1 -> s1 [68, 65535] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [0, 66] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1196 += 1, R1123 += 1, R1124 += 1 };
  s2 -> s3 [67, 67] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s2 -> s4 [67, 67] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s2 -> s1 [68, 65535] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1196 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1196 += 1 };
  s4 -> s4 [0, 65535] { R1196 += 1, R1124 += 1, R913 += 1, R914 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1196 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s0 -> s2 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s0 -> s3 [0, 66] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s0 -> s0 [0, 65535] { R1197 += 1, R1198 += 1 };
  s0 -> s4 [0, 65535] { R1198 += 1, R1125 += 1, R1126 += 1 };
  s0 -> s5 [67, 67] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s0 -> s6 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s0 -> s7 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s0 -> s8 [67, 67] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s0 -> s9 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s0 -> s10 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s0 -> s2 [68, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s0 -> s1 [68, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s0 -> s3 [68, 65535] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s0 -> s2 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s1 -> s1 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s1 -> s2 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s1 -> s6 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s1 -> s7 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s1 -> s9 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s1 -> s10 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s1 -> s2 [68, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s1 -> s1 [68, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s1 -> s2 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s2 -> s2 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s2 -> s11 [0, 65535];
  s2 -> s2 [0, 65535] { R1198 += 1 };
  s2 -> s6 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s2 -> s7 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s2 -> s2 [68, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s2 -> s2 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s3 -> s1 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s3 -> s2 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s3 -> s3 [0, 66] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s3 -> s5 [67, 67] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s3 -> s6 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s3 -> s7 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s3 -> s8 [67, 67] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s3 -> s9 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s3 -> s10 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s3 -> s2 [68, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s3 -> s1 [68, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s3 -> s3 [68, 65535] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s3 -> s2 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s4 -> s1 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s4 -> s2 [0, 66] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s4 -> s3 [0, 66] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s4 -> s4 [0, 65535] { R1198 += 1, R1125 += 1, R1126 += 1 };
  s4 -> s5 [67, 67] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s4 -> s6 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s4 -> s7 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s4 -> s8 [67, 67] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s4 -> s9 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s4 -> s10 [67, 67] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s4 -> s2 [68, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s4 -> s1 [68, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s4 -> s3 [68, 65535] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s4 -> s2 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s6 -> s11 [0, 65535];
  s6 -> s6 [0, 65535] { R1198 += 1 };
  s7 -> s7 [0, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s7 -> s11 [0, 65535];
  s7 -> s7 [0, 65535] { R1198 += 1 };
  s7 -> s7 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s8 -> s7 [0, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s8 -> s8 [0, 65535] { R1198 += 1, R1126 += 1, R1061 += 1, R1062 += 1 };
  s8 -> s9 [0, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s8 -> s7 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s9 -> s7 [0, 69] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s9 -> s9 [0, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1063 += 1, R1064 += 1 };
  s9 -> s7 [74, 65535] { R1198 += 1, R1126 += 1, R1062 += 1, R1064 += 1 };
  s11 -> s11 [0, 65535];
  accepting s2, s6, s7, s11;
};
};
constraint R2 = R1098 && R3 - R1198 = 1 && R23 - R1098 = -1 && R24 = R1098 && R25 - R1098 = -1 && R26 = R1098 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R1198 && R32 - R1198 = 1 && R33 = R1198 && R34 - R1198 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R858 + R857 + -1*R1066 + -1*R1062 = 0 && R873 + R871 = 0 && R874 + R872 + -1*R1066 + -1*R1062 = 0 && R1065 + R1061 = 0 && R1067 + R1063 = 0 && R1068 + R1064 = 0 && R1069 = 0 && R1070 = R1098 && R1071 = 0 && R1072 = R1098 && R1073 = 0 && R1074 = R1098 && R1075 = 0 && R1076 = R1098 && R1077 = 0 && R1078 = R1098 && R1079 = 0 && R1080 = R1098 && R1081 = 0 && R1082 = R1098 && R1083 = 0 && R1084 = R1098 && R1085 = 0 && R1086 = R1098 && R1087 = 0 && R1088 = R1098 && R1089 = 0 && R1090 = R1098 && R1091 = 0 && R1092 = R1098 && R1093 = 0 && R1094 = R1098 && R1095 = 0 && R1096 = R1098 && R1097 = 0 && R1101 = 0 && R1102 = 0 && R1125 = 0 && R1126 = 0 && R1127 = 0 && R1128 = R1198 && R1129 = 0 && R1130 = R1198 && R1131 = 0 && R1132 = R1198 && R1133 = 0 && R1134 = R1198 && R1135 = 0 && R1136 = R1198 && R1137 = 0 && R1138 = R1198 && R1139 = 0 && R1140 = R1198 && R1141 = 0 && R1142 = R1198 && R1143 = 0 && R1144 = R1198 && R1145 = 0 && R1146 = R1198 && R1147 = 0 && R1148 = R1198 && R1149 = 0 && R1150 = R1198 && R1151 = 0 && R1152 = R1198 && R1153 = 0 && R1154 = R1198 && R1155 = 0 && R1156 = R1198 && R1157 = 0 && R1158 = R1198 && R1159 = 0 && R1160 = R1198 && R1161 = 0 && R1162 = R1198 && R1163 = 0 && R1164 = R1198 && R1165 = 0 && R1166 = R1198 && R1167 = 0 && R1168 = R1198 && R1169 = 0 && R1170 = R1198 && R1171 = 0 && R1172 = R1198 && R1173 = 0 && R1174 = R1198 && R1175 = 0 && R1176 = R1198 && R1177 = 0 && R1178 = R1198 && R1179 = 0 && R1180 = R1198 && R1181 = 0 && R1182 = R1198 && R1183 = 0 && R1184 = R1198 && R1185 = 0 && R1186 = R1198 && R1187 = 0 && R1188 = R1198 && R1189 = 0 && R1190 = R1198 && R1191 = 0 && R1192 = R1198 && R1193 = 0 && R1194 = R1198 && R1195 = 0 && R1196 = R1198 && R1197 = 0 && R14 < 1 && R17 < 1 && R860 + R859 < 1 && -1*R880 + -1*R877 < 1 && R886 + R883 < 1 && -1*R1066 + -1*R1062 < 1 && 0 < R1098 && -1 < R1198 && (R878 + R875 != 0 || R879 + R876 + -1*R1066 + -1*R1062 = 0 || R880 + R877 < 1) && (R880 + R877 != 0 || R904 + R899 = 0 || (R893 + R889 = 0 && R894 + R890 = 0)) && (R880 + R877 != 0 || R904 + R899 = 0 || (R902 + R897 = 0 && R903 + R898 = 0)) && (R880 + R877 != 0 || R904 + R899 = 0 || (R911 + R907 = 0 && R912 + R908 = 0)) && (R880 + R877 != 0 || ((R878 + R875 != 0 || R879 + R876 + -1*R1066 + -1*R1062 = 0 || R1066 + R1062 < 1) && (R878 + R875 = 0 || R1066 + R1062 < 1))) && (R884 + R881 != 0 || R885 + R882 + -1*R1066 + -1*R1062 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R891 + R887 != 0 || R892 + R888 + -1*R1066 + -1*R1062 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R893 + R889 != 0 || R880 + R877 + -1*R894 + -1*R890 = 0 || R880 + R877 < 1) && (R900 + R895 != 0 || R901 + R896 + -1*R1066 + -1*R1062 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R902 + R897 != 0 || R880 + R877 + -1*R903 + -1*R898 = 0 || R880 + R877 < 1) && (R909 + R905 != 0 || R910 + R906 + -1*R1066 + -1*R1062 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R911 + R907 != 0 || R880 + R877 + -1*R912 + -1*R908 = 0 || R880 + R877 < 1) && (R918 + R913 != 0 || R919 + R914 + -1*R1066 + -1*R1062 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R22 = 0 || (R1099 = 0 && R1100 = 0)) && (R22 = 0 || (R1103 = 0 && R1104 = 0)) && (R22 = 0 || (R1105 = 0 && R1106 = 0)) && (R22 = 0 || (R1107 = 0 && R1108 = 0)) && (R22 = 0 || (R1109 = 0 && R1110 = 0)) && (R22 = 0 || (R1111 = 0 && R1112 = 0)) && (R22 = 0 || (R1113 = 0 && R1114 = 0)) && (R22 = 0 || (R1115 = 0 && R1116 = 0)) && (R22 = 0 || (R1117 = 0 && R1118 = 0)) && (R22 = 0 || (R1119 = 0 && R1120 = 0)) && (R22 = 0 || (R1121 = 0 && R1122 = 0)) && (R22 = 0 || (R1123 = 0 && R1124 = 0)) && (R866 + R863 = 0 || (R864 + R861 = 0 && R865 + R862 = 0)) && (R866 + R863 = 0 || (R869 + R867 = 0 && R870 + R868 = 0)) && (R878 + R875 = 0 || R880 + R877 < 1) && (R884 + R881 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R891 + R887 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R893 + R889 = 0 || R880 + R877 < 1) && (R900 + R895 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R902 + R897 = 0 || R880 + R877 < 1) && (R909 + R905 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R911 + R907 = 0 || R880 + R877 < 1) && (R918 + R913 = 0 || (R880 + R877 = 0 && R1066 + R1062 = 0)) && (R922 + R917 = 0 || (R920 + R915 = 0 && R921 + R916 = 0));
// End of Parikh automata intersection problem
