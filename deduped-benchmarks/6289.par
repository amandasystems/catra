// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R42, R43, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [90, 90];
  s0 -> s0 [91, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [90, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R42 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 89];
  s0 -> s0 [0, 65535] { R43 += 1 };
  s0 -> s2 [90, 90];
  s0 -> s1 [91, 65535];
  s1 -> s1 [0, 89];
  s1 -> s2 [90, 90];
  s1 -> s1 [91, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R48 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [9, 13] { R48 += 1 };
  s0 -> s1 [14, 31] { R48 += 1 };
  s0 -> s2 [32, 32] { R48 += 1 };
  s0 -> s1 [33, 65535] { R48 += 1 };
  s1 -> s1 [0, 65535] { R48 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R48 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s1 [0, 65535] { R50 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R50 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R52 += 1 };
  s0 -> s0 [0, 65535] { R51 += 1, R52 += 1 };
  s0 -> s2 [9, 13] { R52 += 1 };
  s0 -> s1 [14, 31] { R52 += 1 };
  s0 -> s2 [32, 32] { R52 += 1 };
  s0 -> s1 [33, 65535] { R52 += 1 };
  s1 -> s1 [0, 65535] { R52 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R52 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R53 += 1, R54 += 1 };
  s0 -> s1 [0, 65535] { R54 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R54 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 89] { R58 += 1 };
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s1 [91, 65535] { R58 += 1 };
  s1 -> s1 [0, 89] { R58 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R58 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s1 [0, 65535] { R60 += 1, R46 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R60 += 1, R46 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R7 += 1 };
  s1 -> s1 [0, 60] { R7 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R56 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s1 -> s1 [0, 65535] { R56 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
constraint R1 = R56 && R2 = R60 && R6 = 0 && R7 = 0 && R47 - R60 = -1 && R48 = R60 && R49 - R60 = -1 && R50 = R60 && R51 = 0 && R52 = 1 && R53 = 0 && R54 = 1 && R55 = 1 && R57 = 0 && R58 = R60 && R59 = 0 && R0 != 0 && R42 < 1 && R43 < 1 && 0 < R56 && 0 < R60;
// End of Parikh automata intersection problem
