// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R42, R44, R45, R6, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [90, 90];
  s0 -> s0 [91, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [90, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R42 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 89] { R45 += 1 };
  s0 -> s0 [0, 65535] { R44 += 1, R45 += 1 };
  s0 -> s2 [90, 90];
  s0 -> s1 [91, 65535] { R45 += 1 };
  s1 -> s1 [0, 89] { R45 += 1 };
  s1 -> s2 [90, 90];
  s1 -> s1 [91, 65535] { R45 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s2 [9, 13] { R63 += 1 };
  s0 -> s1 [14, 31] { R63 += 1 };
  s0 -> s2 [32, 32] { R63 += 1 };
  s0 -> s1 [33, 65535] { R63 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R63 += 1 };
  s2 -> s1 [0, 65535] { R63 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s1 [0, 65535] { R65 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R67 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s2 [9, 13] { R67 += 1 };
  s0 -> s1 [14, 31] { R67 += 1 };
  s0 -> s2 [32, 32] { R67 += 1 };
  s0 -> s1 [33, 65535] { R67 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R67 += 1 };
  s2 -> s1 [0, 65535] { R67 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R69 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R69 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 89] { R73 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s1 [91, 65535] { R73 += 1 };
  s1 -> s1 [0, 89] { R73 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R73 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R75 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R61 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R7 += 1 };
  s0 -> s0 [0, 65535] { R6 += 1, R7 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R7 += 1 };
  s1 -> s1 [0, 60] { R7 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s1 [0, 65535] { R71 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R71 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
};
constraint R1 = R71 && R2 = R65 && R6 = 0 && R7 = 0 && R44 = 0 && R62 - R65 = -1 && R63 = R65 && R64 - R65 = -1 && R66 = 0 && R67 = 1 && R68 = 0 && R69 = 1 && R70 = 1 && R0 != 0 && R42 < 1 && R45 < R65 && -2 < R45 && 0 < R65 && 0 < R71 && (R61 != 0 || ((R65 != R75 || ((R72 != R74 || ((R73 != R75 || R45 - R74 = -1 || R75 - R45 < 2) && (R73 = R75 || R75 - R45 < 2))) && (R72 = R74 || R75 - R45 < 2))) && (R65 = R75 || R65 - R45 < 2))) && (R61 = 0 || (R65 = R75 && (R72 != R74 || ((R73 != R75 || R45 - R74 = -1 || R75 - R45 < 1 || R75 < 1) && (R73 = R75 || R75 - R45 < 1 || R75 < 1))) && (R72 = R74 || R75 - R45 < 1 || R75 < 1)));
// End of Parikh automata intersection problem
