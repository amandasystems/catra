// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R154, R156, R157, R2, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P57
automaton P57_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [89, 89];
  s0 -> s0 [90, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [89, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R154 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 88] { R157 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s2 [89, 89];
  s0 -> s1 [90, 65535] { R157 += 1 };
  s1 -> s1 [0, 88] { R157 += 1 };
  s1 -> s2 [89, 89];
  s1 -> s1 [90, 65535] { R157 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R245 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s0 -> s2 [9, 13] { R245 += 1 };
  s0 -> s1 [14, 31] { R245 += 1 };
  s0 -> s2 [32, 32] { R245 += 1 };
  s0 -> s1 [33, 65535] { R245 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R245 += 1 };
  s2 -> s1 [0, 65535] { R245 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s1 [0, 65535] { R247 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R247 += 1, R9 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R249 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s2 [9, 13] { R249 += 1 };
  s0 -> s1 [14, 31] { R249 += 1 };
  s0 -> s2 [32, 32] { R249 += 1 };
  s0 -> s1 [33, 65535] { R249 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R249 += 1 };
  s2 -> s1 [0, 65535] { R249 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s1 [0, 65535] { R251 += 1, R10 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R251 += 1, R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 88] { R265 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s0 -> s1 [90, 65535] { R265 += 1 };
  s1 -> s1 [0, 88] { R265 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [90, 65535] { R265 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R267 += 1, R226 += 1 };
  s0 -> s0 [0, 65535] { R266 += 1, R267 += 1 };
  s1 -> s1 [0, 65535] { R267 += 1, R226 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 89] { R269 += 1 };
  s0 -> s0 [0, 65535] { R268 += 1, R269 += 1 };
  s0 -> s1 [91, 65535] { R269 += 1 };
  s1 -> s1 [0, 89] { R269 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R269 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R291 += 1, R227 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1, R227 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 88] { R293 += 1 };
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s2 [89, 89] { R293 += 1 };
  s0 -> s3 [89, 89] { R293 += 1 };
  s0 -> s1 [91, 65535] { R293 += 1 };
  s1 -> s1 [0, 88] { R293 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [89, 89] { R293 += 1 };
  s1 -> s3 [89, 89] { R293 += 1 };
  s1 -> s1 [91, 65535] { R293 += 1 };
  s2 -> s2 [0, 89] { R293 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R293 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R13 += 1 };
  s0 -> s0 [0, 65535] { R12 += 1, R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R13 += 1 };
  s1 -> s1 [0, 60] { R13 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R253 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R271 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R270 += 1, R271 += 1 };
  s1 -> s1 [0, 65535] { R271 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R272 += 1, R273 += 1 };
  s0 -> s1 [0, 65535] { R273 += 1, R236 += 1, R237 += 1 };
  s0 -> s2 [9, 9] { R273 += 1, R237 += 1 };
  s1 -> s1 [0, 65535] { R273 += 1, R236 += 1, R237 += 1 };
  s1 -> s2 [9, 9] { R273 += 1, R237 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R273 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R274 += 1, R275 += 1 };
  s0 -> s1 [0, 65535] { R275 += 1, R239 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R275 += 1, R238 += 1, R239 += 1 };
  s1 -> s4 [0, 65535] { R275 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R275 += 1, R239 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R275 += 1, R239 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R275 += 1, R238 += 1, R239 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R275 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R277 += 1, R241 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s0 -> s2 [0, 65535] { R277 += 1, R240 += 1, R241 += 1 };
  s0 -> s3 [9, 13] { R277 += 1, R241 += 1 };
  s0 -> s1 [14, 31] { R277 += 1, R241 += 1 };
  s0 -> s3 [32, 32] { R277 += 1, R241 += 1 };
  s0 -> s1 [33, 65535] { R277 += 1, R241 += 1 };
  s1 -> s5 [0, 65535] { R277 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R277 += 1, R241 += 1 };
  s2 -> s1 [0, 8] { R277 += 1, R241 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R277 += 1, R240 += 1, R241 += 1 };
  s2 -> s3 [9, 13] { R277 += 1, R241 += 1 };
  s2 -> s1 [14, 31] { R277 += 1, R241 += 1 };
  s2 -> s3 [32, 32] { R277 += 1, R241 += 1 };
  s2 -> s1 [33, 65535] { R277 += 1, R241 += 1 };
  s3 -> s1 [0, 65535] { R277 += 1, R241 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R277 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R279 += 1, R242 += 1, R243 += 1 };
  s0 -> s2 [0, 65535] { R279 += 1, R243 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s1 -> s1 [0, 65535] { R279 += 1, R242 += 1, R243 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R279 += 1, R243 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R279 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R279 += 1, R243 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R279 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R280 += 1, R281 += 1 };
  s0 -> s1 [0, 65535] { R281 += 1, R255 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R281 += 1, R254 += 1, R255 += 1 };
  s1 -> s4 [0, 65535] { R281 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R281 += 1, R255 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R281 += 1, R255 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R281 += 1, R254 += 1, R255 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R281 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R283 += 1, R256 += 1, R257 += 1 };
  s0 -> s0 [0, 65535] { R282 += 1, R283 += 1 };
  s0 -> s2 [0, 65535] { R283 += 1, R257 += 1, R228 += 1, R229 += 1 };
  s0 -> s3 [11, 11] { R283 += 1, R257 += 1, R229 += 1 };
  s1 -> s1 [0, 65535] { R283 += 1, R256 += 1, R257 += 1 };
  s1 -> s2 [0, 65535] { R283 += 1, R257 += 1, R228 += 1, R229 += 1 };
  s1 -> s3 [11, 11] { R283 += 1, R257 += 1, R229 += 1 };
  s2 -> s2 [0, 65535] { R283 += 1, R257 += 1, R228 += 1, R229 += 1 };
  s2 -> s3 [11, 11] { R283 += 1, R257 += 1, R229 += 1 };
  s3 -> s3 [0, 65535] { R283 += 1, R257 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R283 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R283 += 1 };
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R285 += 1, R259 += 1, R230 += 1, R231 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s0 -> s2 [0, 65535] { R285 += 1, R258 += 1, R259 += 1 };
  s0 -> s3 [0, 65535] { R285 += 1, R259 += 1, R231 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R259 += 1, R230 += 1, R231 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R285 += 1 };
  s1 -> s3 [0, 65535] { R285 += 1, R259 += 1, R231 += 1, R5 += 1 };
  s2 -> s1 [0, 65535] { R285 += 1, R259 += 1, R230 += 1, R231 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R285 += 1, R258 += 1, R259 += 1 };
  s2 -> s3 [0, 65535] { R285 += 1, R259 += 1, R231 += 1, R5 += 1 };
  s3 -> s4 [0, 65535] { R285 += 1, R259 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R285 += 1 };
  s3 -> s3 [0, 65535] { R285 += 1, R259 += 1, R231 += 1, R5 += 1 };
  s4 -> s4 [0, 65535] { R285 += 1, R259 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R285 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R285 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R287 += 1, R261 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R287 += 1, R261 += 1, R232 += 1, R233 += 1 };
  s0 -> s3 [0, 65535] { R287 += 1, R260 += 1, R261 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s4 [9, 13] { R287 += 1, R261 += 1, R233 += 1 };
  s0 -> s1 [14, 31] { R287 += 1, R261 += 1, R233 += 1 };
  s0 -> s4 [32, 32] { R287 += 1, R261 += 1, R233 += 1 };
  s0 -> s1 [33, 65535] { R287 += 1, R261 += 1, R233 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1, R261 += 1, R233 += 1 };
  s1 -> s7 [0, 65535] { R287 += 1, R261 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R287 += 1 };
  s2 -> s1 [0, 8] { R287 += 1, R261 += 1, R233 += 1 };
  s2 -> s2 [0, 65535] { R287 += 1, R261 += 1, R232 += 1, R233 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R287 += 1 };
  s2 -> s4 [9, 13] { R287 += 1, R261 += 1, R233 += 1 };
  s2 -> s1 [14, 31] { R287 += 1, R261 += 1, R233 += 1 };
  s2 -> s4 [32, 32] { R287 += 1, R261 += 1, R233 += 1 };
  s2 -> s1 [33, 65535] { R287 += 1, R261 += 1, R233 += 1 };
  s3 -> s1 [0, 8] { R287 += 1, R261 += 1, R233 += 1 };
  s3 -> s2 [0, 65535] { R287 += 1, R261 += 1, R232 += 1, R233 += 1 };
  s3 -> s3 [0, 65535] { R287 += 1, R260 += 1, R261 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R287 += 1, R261 += 1, R233 += 1 };
  s3 -> s1 [14, 31] { R287 += 1, R261 += 1, R233 += 1 };
  s3 -> s4 [32, 32] { R287 += 1, R261 += 1, R233 += 1 };
  s3 -> s1 [33, 65535] { R287 += 1, R261 += 1, R233 += 1 };
  s4 -> s1 [0, 65535] { R287 += 1, R261 += 1, R233 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R287 += 1 };
  s7 -> s7 [0, 65535] { R287 += 1, R261 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R287 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R289 += 1, R263 += 1, R234 += 1, R235 += 1 };
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s2 [0, 65535] { R289 += 1, R262 += 1, R263 += 1 };
  s0 -> s3 [0, 65535] { R289 += 1, R263 += 1, R235 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R289 += 1, R263 += 1, R234 += 1, R235 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R289 += 1 };
  s1 -> s3 [0, 65535] { R289 += 1, R263 += 1, R235 += 1, R6 += 1 };
  s2 -> s1 [0, 65535] { R289 += 1, R263 += 1, R234 += 1, R235 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R289 += 1, R262 += 1, R263 += 1 };
  s2 -> s3 [0, 65535] { R289 += 1, R263 += 1, R235 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R289 += 1 };
  s3 -> s6 [0, 65535] { R289 += 1, R263 += 1 };
  s3 -> s3 [0, 65535] { R289 += 1, R263 += 1, R235 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R289 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R289 += 1 };
  s6 -> s6 [0, 65535] { R289 += 1, R263 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R229 && R2 - R263 = 1 && R3 = R253 && R4 = R247 && R12 = 0 && R13 = R289 && R156 = 0 && R228 - R229 = -1 && R236 = R263 && R237 - R263 = 1 && R238 = R263 && R239 - R263 = 1 && R240 = 0 && R241 = 1 && R242 = 0 && R243 = 1 && R244 - R247 = -1 && R245 = R247 && R246 - R247 = -1 && R248 = 0 && R249 = 1 && R250 = 0 && R251 = 1 && R252 - R289 = 1 && R254 = 0 && R255 = R263 && R256 = 0 && R257 = R263 && R258 = 0 && R259 = R263 && R260 = 0 && R261 = R263 && R262 = 0 && R270 = 0 && R271 = R289 && R272 = 0 && R273 = R289 && R274 = 0 && R275 = R289 && R276 = 0 && R277 = R289 && R278 = 0 && R279 = R289 && R280 = 0 && R281 = R289 && R282 = 0 && R283 = R289 && R284 = 0 && R285 = R289 && R286 = 0 && R287 = R289 && R288 = 0 && R1 != 0 && R229 != 0 && R154 < 1 && R157 < R247 && -2 < R157 && 0 < R247 && R289 < R253 && -1 < R263 && -1 < R289 && (R227 != 0 || ((R290 != 0 || ((R292 != 0 || ((R291 != R293 || R157 - R293 = -1 || R157 < 0) && (R291 = R293 || R157 < 0))) && (R292 = 0 || R157 < 0))) && (R290 = 0 || R157 < 0))) && (R229 != R231 || R230 - R231 = -1 || (R5 = 0 && R231 < 0)) && (R232 != 0 || ((R6 != 0 || ((R229 != R233 || R233 = 1 || R233 < 0) && (R229 = R233 || R233 = 1 || R229 < 1))) && (R6 = 0 || ((R229 != R233 || R233 = 1 || R233 < 0) && (R233 != 1 || -1 < R229) && (R229 = R233 || R233 = 1))))) && (R234 != 0 || ((R6 != 0 || ((R229 != R235 || R235 = 1 || R235 < 0) && (R229 = R235 || R235 = 1 || R229 < 1))) && (R6 = 0 || ((R229 != R235 || R235 = 1 || R235 < 0) && (R235 != 1 || -1 < R229) && (R229 = R235 || R235 = 1))))) && (R247 != R265 || R157 - R264 = -1 || ((R226 != 0 || R265 - R157 < 2) && (R226 = 0 || R265 - R157 < 1 || R265 < 1))) && (R247 != R267 || R157 - R266 = -1 || ((R226 != 0 || R267 - R157 < 2) && (R226 = 0 || R267 - R157 < 1 || R267 < 1))) && (R247 != R269 || R157 - R268 = -1 || ((R226 != 0 || R269 - R157 < 2) && (R226 = 0 || R269 - R157 < 1 || R269 < 1))) && (R227 = 0 || (R157 - R293 = -1 && R290 = 0 && R291 = R293 && R292 = 0)) && (R229 = R231 || (R5 = 0 && R229 < 0)) && (R232 = 0 || (R6 = 0 && R229 < 0)) && (R234 = 0 || (R6 = 0 && R229 < 0)) && (R247 = R265 || (R157 - R247 = -1 && R226 = 0)) && (R247 = R267 || (R157 - R247 = -1 && R226 = 0)) && (R247 = R269 || (R157 - R247 = -1 && R226 = 0));
// End of Parikh automata intersection problem
