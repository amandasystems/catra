// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R2, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R124 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R123 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R124 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R156 += 1 };
  s0 -> s0 [0, 65535] { R155 += 1, R156 += 1 };
  s0 -> s2 [65, 65] { R156 += 1 };
  s0 -> s1 [66, 65535] { R156 += 1 };
  s1 -> s1 [0, 64] { R156 += 1 };
  s1 -> s2 [65, 65] { R156 += 1 };
  s1 -> s1 [66, 65535] { R156 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R156 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R157 += 1, R158 += 1 };
  s0 -> s1 [0, 65535] { R158 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R158 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R160 += 1 };
  s0 -> s2 [0, 65535] { R160 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R159 += 1, R160 += 1 };
  s0 -> s3 [65, 65] { R160 += 1 };
  s0 -> s1 [66, 65535] { R160 += 1 };
  s1 -> s1 [0, 64] { R160 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [65, 65] { R160 += 1 };
  s1 -> s1 [66, 65535] { R160 += 1 };
  s2 -> s1 [0, 64] { R160 += 1 };
  s2 -> s2 [0, 65535] { R160 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [65, 65] { R160 += 1 };
  s2 -> s1 [66, 65535] { R160 += 1 };
  s3 -> s3 [0, 65535] { R160 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R162 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s2 [0, 65535] { R162 += 1, R115 += 1, R116 += 1 };
  s0 -> s3 [9, 13] { R162 += 1, R116 += 1 };
  s0 -> s1 [14, 31] { R162 += 1, R116 += 1 };
  s0 -> s3 [32, 32] { R162 += 1, R116 += 1 };
  s0 -> s1 [33, 65535] { R162 += 1, R116 += 1 };
  s1 -> s5 [0, 65535] { R162 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R162 += 1, R116 += 1 };
  s2 -> s1 [0, 8] { R162 += 1, R116 += 1 };
  s2 -> s2 [0, 65535] { R162 += 1, R115 += 1, R116 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R162 += 1, R116 += 1 };
  s2 -> s1 [14, 31] { R162 += 1, R116 += 1 };
  s2 -> s3 [32, 32] { R162 += 1, R116 += 1 };
  s2 -> s1 [33, 65535] { R162 += 1, R116 += 1 };
  s3 -> s1 [0, 65535] { R162 += 1, R116 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R162 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R164 += 1, R118 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R164 += 1, R117 += 1, R118 += 1 };
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s1 -> s1 [0, 65535] { R164 += 1, R118 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R164 += 1 };
  s2 -> s1 [0, 65535] { R164 += 1, R118 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R164 += 1, R117 += 1, R118 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R164 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R166 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [9, 13] { R166 += 1, R120 += 1 };
  s0 -> s1 [14, 31] { R166 += 1, R120 += 1 };
  s0 -> s3 [32, 32] { R166 += 1, R120 += 1 };
  s0 -> s1 [33, 65535] { R166 += 1, R120 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R166 += 1, R120 += 1 };
  s1 -> s5 [0, 65535] { R166 += 1 };
  s2 -> s1 [0, 8] { R166 += 1, R120 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R166 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [9, 13] { R166 += 1, R120 += 1 };
  s2 -> s1 [14, 31] { R166 += 1, R120 += 1 };
  s2 -> s3 [32, 32] { R166 += 1, R120 += 1 };
  s2 -> s1 [33, 65535] { R166 += 1, R120 += 1 };
  s3 -> s1 [0, 65535] { R166 += 1, R120 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R166 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [0, 65535] { R168 += 1, R122 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R121 += 1, R122 += 1 };
  s1 -> s4 [0, 65535] { R168 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R168 += 1, R122 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R168 += 1, R122 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R168 += 1, R121 += 1, R122 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R168 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R170 += 1, R132 += 1, R106 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R131 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R170 += 1, R132 += 1, R106 += 1 };
  s1 -> s4 [0, 65535] { R170 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R170 += 1, R132 += 1, R106 += 1 };
  s2 -> s2 [0, 65535] { R170 += 1, R131 += 1, R132 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R170 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R172 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R133 += 1, R134 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s3 [65, 65] { R172 += 1, R134 += 1 };
  s0 -> s4 [65, 65] { R172 += 1, R134 += 1 };
  s0 -> s1 [67, 65535] { R172 += 1, R134 += 1 };
  s1 -> s1 [0, 64] { R172 += 1, R134 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [65, 65] { R172 += 1, R134 += 1 };
  s1 -> s4 [65, 65] { R172 += 1, R134 += 1 };
  s1 -> s1 [67, 65535] { R172 += 1, R134 += 1 };
  s2 -> s1 [0, 64] { R172 += 1, R134 += 1 };
  s2 -> s2 [0, 65535] { R172 += 1, R133 += 1, R134 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [65, 65] { R172 += 1, R134 += 1 };
  s2 -> s4 [65, 65] { R172 += 1, R134 += 1 };
  s2 -> s1 [67, 65535] { R172 += 1, R134 += 1 };
  s3 -> s3 [0, 65535] { R172 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65] { R172 += 1, R134 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R172 += 1 };
  s4 -> s4 [67, 65535] { R172 += 1, R134 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 64] { R174 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R174 += 1, R139 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s0 -> s3 [65, 65] { R174 += 1, R140 += 1 };
  s0 -> s1 [66, 65535] { R174 += 1, R140 += 1 };
  s1 -> s1 [0, 64] { R174 += 1, R140 += 1 };
  s1 -> s3 [65, 65] { R174 += 1, R140 += 1 };
  s1 -> s1 [66, 65535] { R174 += 1, R140 += 1 };
  s2 -> s1 [0, 64] { R174 += 1, R140 += 1 };
  s2 -> s2 [0, 65535] { R174 += 1, R139 += 1, R140 += 1 };
  s2 -> s3 [65, 65] { R174 += 1, R140 += 1 };
  s2 -> s1 [66, 65535] { R174 += 1, R140 += 1 };
  s3 -> s4 [0, 65535] { R174 += 1 };
  s3 -> s3 [0, 65535] { R174 += 1, R140 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R174 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R176 += 1, R141 += 1, R142 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R176 += 1, R142 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R176 += 1, R141 += 1, R142 += 1 };
  s1 -> s2 [0, 65535] { R176 += 1, R142 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R176 += 1, R142 += 1, R2 += 1 };
  s2 -> s4 [0, 65535] { R176 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R176 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R178 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R178 += 1, R144 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R178 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s4 [65, 65] { R178 += 1, R144 += 1 };
  s0 -> s1 [66, 65535] { R178 += 1, R144 += 1 };
  s1 -> s1 [0, 64] { R178 += 1, R144 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [65, 65] { R178 += 1, R144 += 1 };
  s1 -> s1 [66, 65535] { R178 += 1, R144 += 1 };
  s2 -> s1 [0, 64] { R178 += 1, R144 += 1 };
  s2 -> s2 [0, 65535] { R178 += 1, R144 += 1, R10 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R178 += 1 };
  s2 -> s4 [65, 65] { R178 += 1, R144 += 1 };
  s2 -> s1 [66, 65535] { R178 += 1, R144 += 1 };
  s3 -> s1 [0, 64] { R178 += 1, R144 += 1 };
  s3 -> s2 [0, 65535] { R178 += 1, R144 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R178 += 1, R143 += 1, R144 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [65, 65] { R178 += 1, R144 += 1 };
  s3 -> s1 [66, 65535] { R178 += 1, R144 += 1 };
  s4 -> s4 [0, 65535] { R178 += 1, R144 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R178 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 64] { R180 += 1, R146 += 1, R126 += 1 };
  s0 -> s0 [0, 65535] { R179 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R180 += 1, R146 += 1, R125 += 1, R126 += 1 };
  s0 -> s3 [0, 65535] { R180 += 1, R145 += 1, R146 += 1 };
  s0 -> s1 [66, 65535] { R180 += 1, R146 += 1, R126 += 1 };
  s1 -> s1 [0, 64] { R180 += 1, R146 += 1, R126 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R180 += 1 };
  s1 -> s1 [0, 65535] { R180 += 1, R146 += 1 };
  s1 -> s1 [66, 65535] { R180 += 1, R146 += 1, R126 += 1 };
  s2 -> s1 [0, 64] { R180 += 1, R146 += 1, R126 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R180 += 1 };
  s2 -> s2 [0, 65535] { R180 += 1, R146 += 1, R125 += 1, R126 += 1 };
  s2 -> s1 [66, 65535] { R180 += 1, R146 += 1, R126 += 1 };
  s3 -> s1 [0, 64] { R180 += 1, R146 += 1, R126 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R180 += 1, R146 += 1, R125 += 1, R126 += 1 };
  s3 -> s3 [0, 65535] { R180 += 1, R145 += 1, R146 += 1 };
  s3 -> s1 [66, 65535] { R180 += 1, R146 += 1, R126 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R180 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R182 += 1, R148 += 1, R128 += 1, R104 += 1 };
  s0 -> s2 [0, 65535] { R182 += 1, R148 += 1, R127 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R181 += 1, R182 += 1 };
  s0 -> s3 [0, 65535] { R182 += 1, R147 += 1, R148 += 1 };
  s1 -> s1 [0, 65535] { R182 += 1, R148 += 1, R128 += 1, R104 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R182 += 1 };
  s1 -> s6 [0, 65535] { R182 += 1, R148 += 1 };
  s2 -> s1 [0, 65535] { R182 += 1, R148 += 1, R128 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R182 += 1, R148 += 1, R127 += 1, R128 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R182 += 1 };
  s3 -> s1 [0, 65535] { R182 += 1, R148 += 1, R128 += 1, R104 += 1 };
  s3 -> s2 [0, 65535] { R182 += 1, R148 += 1, R127 += 1, R128 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R182 += 1, R147 += 1, R148 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R182 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R182 += 1 };
  s6 -> s6 [0, 65535] { R182 += 1, R148 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65] { R184 += 1, R150 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R184 += 1, R149 += 1, R150 += 1 };
  s0 -> s0 [0, 65535] { R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R184 += 1, R150 += 1, R129 += 1, R130 += 1 };
  s0 -> s1 [67, 65535] { R184 += 1, R150 += 1, R130 += 1 };
  s1 -> s1 [0, 65] { R184 += 1, R150 += 1, R130 += 1 };
  s1 -> s4 [0, 65535] { R184 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R184 += 1, R150 += 1 };
  s1 -> s1 [67, 65535] { R184 += 1, R150 += 1, R130 += 1 };
  s2 -> s1 [0, 65] { R184 += 1, R150 += 1, R130 += 1 };
  s2 -> s2 [0, 65535] { R184 += 1, R149 += 1, R150 += 1 };
  s2 -> s3 [0, 65535] { R184 += 1, R150 += 1, R129 += 1, R130 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [67, 65535] { R184 += 1, R150 += 1, R130 += 1 };
  s3 -> s1 [0, 65] { R184 += 1, R150 += 1, R130 += 1 };
  s3 -> s4 [0, 65535] { R184 += 1 };
  s3 -> s3 [0, 65535] { R184 += 1, R150 += 1, R129 += 1, R130 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [67, 65535] { R184 += 1, R150 += 1, R130 += 1 };
  s4 -> s4 [0, 65535] { R184 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R186 += 1, R152 += 1, R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R186 += 1, R151 += 1, R152 += 1 };
  s0 -> s0 [0, 65535] { R185 += 1, R186 += 1 };
  s0 -> s3 [0, 65535] { R186 += 1, R152 += 1, R136 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R186 += 1, R152 += 1, R135 += 1, R136 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R186 += 1, R152 += 1, R136 += 1, R105 += 1 };
  s1 -> s6 [0, 65535] { R186 += 1 };
  s2 -> s1 [0, 65535] { R186 += 1, R152 += 1, R135 += 1, R136 += 1 };
  s2 -> s2 [0, 65535] { R186 += 1, R151 += 1, R152 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R186 += 1, R152 += 1, R136 += 1, R105 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R186 += 1, R152 += 1, R136 += 1, R105 += 1 };
  s3 -> s5 [0, 65535] { R186 += 1, R152 += 1 };
  s3 -> s6 [0, 65535] { R186 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R186 += 1, R152 += 1 };
  s5 -> s6 [0, 65535] { R186 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R186 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 64] { R188 += 1, R154 += 1, R138 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s2 [0, 65535] { R188 += 1, R153 += 1, R154 += 1 };
  s0 -> s3 [0, 65535] { R188 += 1, R154 += 1, R137 += 1, R138 += 1 };
  s0 -> s4 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s0 -> s5 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s0 -> s1 [67, 65535] { R188 += 1, R154 += 1, R138 += 1 };
  s1 -> s1 [0, 64] { R188 += 1, R154 += 1, R138 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1, R154 += 1 };
  s1 -> s6 [0, 65535] { R188 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s1 -> s5 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s1 -> s1 [67, 65535] { R188 += 1, R154 += 1, R138 += 1 };
  s2 -> s1 [0, 64] { R188 += 1, R154 += 1, R138 += 1 };
  s2 -> s2 [0, 65535] { R188 += 1, R153 += 1, R154 += 1 };
  s2 -> s3 [0, 65535] { R188 += 1, R154 += 1, R137 += 1, R138 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s2 -> s5 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s2 -> s1 [67, 65535] { R188 += 1, R154 += 1, R138 += 1 };
  s3 -> s1 [0, 64] { R188 += 1, R154 += 1, R138 += 1 };
  s3 -> s6 [0, 65535] { R188 += 1 };
  s3 -> s3 [0, 65535] { R188 += 1, R154 += 1, R137 += 1, R138 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s3 -> s5 [65, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s3 -> s1 [67, 65535] { R188 += 1, R154 += 1, R138 += 1 };
  s4 -> s6 [0, 65535] { R188 += 1 };
  s4 -> s4 [0, 65535] { R188 += 1, R154 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65] { R188 += 1, R154 += 1, R138 += 1 };
  s5 -> s6 [0, 65535] { R188 += 1 };
  s5 -> s5 [0, 65535] { R188 += 1, R154 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [67, 65535] { R188 += 1, R154 += 1, R138 += 1 };
  s6 -> s6 [0, 65535] { R188 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c10
automaton c10_0 {
  init s0;
  s0 -> s1 [97, 97];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R108 += 1 };
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s2 [9, 13] { R108 += 1 };
  s0 -> s1 [14, 31] { R108 += 1 };
  s0 -> s2 [32, 32] { R108 += 1 };
  s0 -> s1 [33, 65535] { R108 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R108 += 1 };
  s2 -> s1 [0, 65535] { R108 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s0 -> s1 [0, 65535] { R110 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R110 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R112 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [9, 13] { R112 += 1 };
  s0 -> s1 [14, 31] { R112 += 1 };
  s0 -> s2 [32, 32] { R112 += 1 };
  s0 -> s1 [33, 65535] { R112 += 1 };
  s1 -> s1 [0, 65535] { R112 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R112 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R114 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s1 -> s1 [0, 65535] { R114 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R3 = R154 && R4 = R124 && R17 = 0 && R18 = R188 && R115 - R154 = -1 && R116 = R154 && R117 - R154 = -1 && R118 = R154 && R119 = 0 && R120 = 1 && R121 = 0 && R122 = 1 && R123 - R188 = 1 && R139 = 0 && R140 = R154 && R141 = 0 && R142 = R154 && R143 = 0 && R144 = R154 && R145 = 0 && R146 = R154 && R147 = 0 && R148 = R154 && R149 = 0 && R150 = R154 && R151 = 0 && R152 = R154 && R153 = 0 && R155 = 0 && R156 = R188 && R157 = 0 && R158 = R188 && R159 = 0 && R160 = R188 && R161 = 0 && R162 = R188 && R163 = 0 && R164 = R188 && R165 = 0 && R166 = R188 && R167 = 0 && R168 = R188 && R169 = 0 && R170 = R188 && R171 = 0 && R172 = R188 && R173 = 0 && R174 = R188 && R175 = 0 && R176 = R188 && R177 = 0 && R178 = R188 && R179 = 0 && R180 = R188 && R181 = 0 && R182 = R188 && R183 = 0 && R184 = R188 && R185 = 0 && R186 = R188 && R187 = 0 && R0 != 0 && R1 != 0 && -1 < R2 && R9 < 1 && R10 < 1 && R13 < 1 && R188 < R124 && 0 < R154 && -1 < R188 && (R2 != 0 || R104 = 0 || (R125 = 0 && R126 = 0)) && (R2 != 0 || R104 = 0 || (R127 = 0 && R128 = 0)) && (R2 != 0 || R104 = 0 || (R129 = 0 && R130 = 0)) && (R5 != 0 || ((R1 != R108 || R107 - R108 = -1 || R108 < 0) && (R1 = R108 || R1 < 1))) && (R5 != 0 || ((R1 != R110 || R109 - R110 = -1 || R110 < 0) && (R1 = R110 || R1 < 1))) && (R111 != 0 || ((R6 != 0 || ((R1 != R112 || R112 = 1 || R112 < 0) && (R1 = R112 || R112 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R112 || R112 = 1 || R112 < 0) && (R112 != 1 || -1 < R1) && (R1 = R112 || R112 = 1))))) && (R113 != 0 || ((R6 != 0 || ((R1 != R114 || R114 = 1 || R114 < 0) && (R1 = R114 || R114 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R114 || R114 = 1 || R114 < 0) && (R114 != 1 || -1 < R1) && (R1 = R114 || R114 = 1))))) && (R125 != 0 || R2 = R126 || R2 < 1) && (R127 != 0 || R2 = R128 || R2 < 1) && (R129 != 0 || R2 = R130 || R2 < 1) && (R5 = 0 || (R1 = R108 && R107 - R108 = -1)) && (R5 = 0 || (R1 = R110 && R109 - R110 = -1)) && (R105 = 0 || (R135 = 0 && R136 = 0)) && (R105 = 0 || (R137 = 0 && R138 = 0)) && (R106 = 0 || (R131 = 0 && R132 = 0)) && (R106 = 0 || (R133 = 0 && R134 = 0)) && (R111 = 0 || (R6 = 0 && R1 < 0)) && (R113 = 0 || (R6 = 0 && R1 < 0)) && (R125 = 0 || R2 < 1) && (R127 = 0 || R2 < 1) && (R129 = 0 || R2 < 1);
// End of Parikh automata intersection problem
