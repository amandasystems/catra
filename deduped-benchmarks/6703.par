// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10281, R10282, R10283, R10284, R10285, R10286, R10647, R10648, R10649, R10650, R10651, R10652, R10653, R10654, R10655, R10656, R10657, R10658, R10659, R10660, R10661, R10662, R10663, R10664, R10665, R10666, R10667, R10668, R10669, R10670, R10671, R10672, R10673, R10674, R10675, R10676, R10677, R10678, R10679, R10680, R10681, R10682, R10683, R10684, R10685, R10686, R10687, R10688, R10689, R10690, R10691, R10692, R10693, R10694, R10695, R10696, R10697, R10698, R10699, R10700, R10701, R10702, R10703, R10704, R10705, R10706, R10707, R10708, R10709, R10710, R10711, R10712, R10713, R10714, R10715, R10716, R10717, R10718, R10719, R10720, R10721, R10722, R10723, R10724, R10725, R10726, R10727, R10728, R10729, R10730, R10731, R10732, R10733, R10734, R10735, R10736, R10737, R10738, R10739, R10740, R10741, R10742, R10743, R10744, R10745, R10746, R10747, R10748, R10749, R10750, R10751, R10752, R10753, R10754, R10755, R10756, R10757, R10758, R10759, R10760, R10761, R10762, R10763, R10764, R10765, R10766, R10767, R10768, R10769, R10770, R10771, R10772, R10773, R10774, R10775, R10776, R10777, R10778, R10779, R10780, R10781, R10782, R10783, R10784, R10785, R10786, R10787, R10788, R10789, R10790, R10791, R10792, R10793, R10794, R10795, R10796, R10797, R10798, R10799, R10800, R10801, R10802, R10803, R10804, R10805, R10806, R10807, R10808, R10809, R10810, R10811, R10812, R10813, R10814, R10815, R10816, R10817, R10818, R10819, R10820, R10821, R10822, R10823, R10824, R10825, R10826, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8825, R8826, R8827, R8828;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R10752 += 1 };
  s0 -> s0 [0, 65535] { R10751 += 1, R10752 += 1 };
  s0 -> s2 [66, 66] { R10752 += 1 };
  s0 -> s1 [67, 65535] { R10752 += 1 };
  s1 -> s1 [0, 64] { R10752 += 1 };
  s1 -> s2 [66, 66] { R10752 += 1 };
  s1 -> s1 [67, 65535] { R10752 += 1 };
  s2 -> s2 [0, 64] { R10752 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R10752 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R10754 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R10753 += 1, R10754 += 1 };
  s1 -> s1 [0, 65535] { R10754 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R10756 += 1 };
  s0 -> s2 [0, 65535] { R10756 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10755 += 1, R10756 += 1 };
  s0 -> s3 [66, 66] { R10756 += 1 };
  s0 -> s1 [67, 65535] { R10756 += 1 };
  s1 -> s1 [0, 65] { R10756 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R10756 += 1 };
  s1 -> s1 [67, 65535] { R10756 += 1 };
  s2 -> s1 [0, 65] { R10756 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10756 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R10756 += 1 };
  s2 -> s1 [67, 65535] { R10756 += 1 };
  s3 -> s3 [0, 65535] { R10756 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R10758 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R10758 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10757 += 1, R10758 += 1 };
  s0 -> s3 [9, 13] { R10758 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R10758 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R10758 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R10758 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R10758 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10758 += 1, R24 += 1 };
  s2 -> s1 [0, 8] { R10758 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R10758 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10758 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R10758 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R10758 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R10758 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R10758 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10758 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10759 += 1, R10760 += 1 };
  s0 -> s1 [0, 65535] { R10760 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R10760 += 1, R26 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10760 += 1, R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535] { R10760 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R10760 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10760 += 1, R26 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R10760 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R10762 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10762 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10761 += 1, R10762 += 1 };
  s0 -> s3 [9, 13] { R10762 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R10762 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R10762 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R10762 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R10762 += 1, R28 += 1 };
  s1 -> s5 [0, 65535] { R10762 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R10762 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10762 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10762 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R10762 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R10762 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R10762 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10762 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10762 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R10763 += 1, R10764 += 1 };
  s0 -> s1 [0, 65535] { R10764 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R10764 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10764 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [0, 65535] { R10764 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R10764 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10764 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R10764 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10765 += 1, R10766 += 1 };
  s0 -> s1 [0, 65535] { R10766 += 1, R10671 += 1, R10672 += 1 };
  s0 -> s2 [0, 65535] { R10766 += 1, R10672 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10766 += 1, R10671 += 1, R10672 += 1 };
  s1 -> s2 [0, 65535] { R10766 += 1, R10672 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10766 += 1, R10672 += 1, R22 += 1 };
  s2 -> s4 [0, 65535] { R10766 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10766 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R10768 += 1, R10674 += 1 };
  s0 -> s0 [0, 65535] { R10767 += 1, R10768 += 1 };
  s0 -> s2 [0, 65535] { R10768 += 1, R10673 += 1, R10674 += 1 };
  s0 -> s3 [66, 66] { R10768 += 1, R10674 += 1 };
  s0 -> s4 [66, 66] { R10768 += 1, R10674 += 1 };
  s0 -> s1 [71, 65535] { R10768 += 1, R10674 += 1 };
  s1 -> s1 [0, 65] { R10768 += 1, R10674 += 1 };
  s1 -> s1 [0, 65535] { R10768 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10768 += 1, R10674 += 1 };
  s1 -> s4 [66, 66] { R10768 += 1, R10674 += 1 };
  s1 -> s1 [71, 65535] { R10768 += 1, R10674 += 1 };
  s2 -> s1 [0, 65] { R10768 += 1, R10674 += 1 };
  s2 -> s2 [0, 65535] { R10768 += 1, R10673 += 1, R10674 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10768 += 1, R10674 += 1 };
  s2 -> s4 [66, 66] { R10768 += 1, R10674 += 1 };
  s2 -> s1 [71, 65535] { R10768 += 1, R10674 += 1 };
  s3 -> s3 [0, 66] { R10768 += 1, R10674 += 1 };
  s3 -> s3 [0, 65535] { R10768 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R10768 += 1, R10674 += 1 };
  s4 -> s4 [0, 65535] { R10768 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R10770 += 1, R10676 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R10770 += 1, R10675 += 1, R10676 += 1 };
  s0 -> s0 [0, 65535] { R10769 += 1, R10770 += 1 };
  s0 -> s3 [66, 66] { R10770 += 1, R10676 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R10770 += 1, R10676 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R10770 += 1, R10676 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R10770 += 1, R10676 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10770 += 1 };
  s1 -> s3 [66, 66] { R10770 += 1, R10676 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R10770 += 1, R10676 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R10770 += 1, R10676 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R10770 += 1, R10676 += 1, R49 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10770 += 1, R10675 += 1, R10676 += 1 };
  s2 -> s3 [66, 66] { R10770 += 1, R10676 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R10770 += 1, R10676 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R10770 += 1, R10676 += 1, R49 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10770 += 1, R10676 += 1, R49 += 1 };
  s3 -> s6 [0, 65535] { R10770 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10770 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10770 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R10772 += 1, R10678 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R10772 += 1, R10677 += 1, R10678 += 1 };
  s0 -> s0 [0, 65535] { R10771 += 1, R10772 += 1 };
  s0 -> s3 [66, 66] { R10772 += 1, R10678 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R10772 += 1, R10678 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R10772 += 1, R10678 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R10772 += 1, R10678 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R10772 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10772 += 1, R10678 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R10772 += 1, R10678 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R10772 += 1, R10678 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R10772 += 1, R10678 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10772 += 1, R10677 += 1, R10678 += 1 };
  s2 -> s3 [66, 66] { R10772 += 1, R10678 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R10772 += 1, R10678 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R10772 += 1, R10678 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10772 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10772 += 1, R10678 += 1, R51 += 1 };
  s4 -> s6 [0, 65535] { R10772 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10772 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10773 += 1, R10774 += 1 };
  s0 -> s2 [0, 65535] { R10774 += 1, R10679 += 1, R10680 += 1 };
  s0 -> s3 [66, 66] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R10774 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10774 += 1, R10679 += 1, R10680 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R10774 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10774 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10774 += 1, R10680 += 1, R53 += 1, R54 += 1 };
  s5 -> s5 [0, 65535] { R10774 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R10776 += 1, R10681 += 1, R10682 += 1 };
  s0 -> s0 [0, 65535] { R10775 += 1, R10776 += 1 };
  s0 -> s3 [66, 66] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10776 += 1 };
  s1 -> s3 [66, 66] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10776 += 1, R10681 += 1, R10682 += 1 };
  s2 -> s3 [66, 66] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10776 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10776 += 1, R10682 += 1, R57 += 1, R58 += 1 };
  s4 -> s6 [0, 65535] { R10776 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10776 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R10777 += 1, R10778 += 1 };
  s0 -> s2 [0, 65535] { R10778 += 1, R10683 += 1, R10684 += 1 };
  s0 -> s3 [66, 66] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R10778 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10778 += 1, R10683 += 1, R10684 += 1 };
  s2 -> s3 [66, 66] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R10778 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10778 += 1 };
  s4 -> s4 [0, 65535] { R10778 += 1, R10684 += 1, R63 += 1, R64 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10778 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10780 += 1, R10685 += 1, R10686 += 1 };
  s0 -> s0 [0, 65535] { R10779 += 1, R10780 += 1 };
  s0 -> s3 [66, 66] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10780 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10780 += 1, R10685 += 1, R10686 += 1 };
  s2 -> s3 [66, 66] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10780 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10780 += 1 };
  s4 -> s4 [0, 65535] { R10780 += 1, R10686 += 1, R67 += 1, R68 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10780 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R10781 += 1, R10782 += 1 };
  s0 -> s2 [0, 65535] { R10782 += 1, R10687 += 1, R10688 += 1 };
  s0 -> s3 [66, 66] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10782 += 1 };
  s1 -> s3 [66, 66] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10782 += 1, R10687 += 1, R10688 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s3 -> s3 [0, 65535] { R10782 += 1, R10688 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10782 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10782 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R10784 += 1, R10708 += 1 };
  s0 -> s0 [0, 65535] { R10783 += 1, R10784 += 1 };
  s0 -> s2 [0, 65535] { R10784 += 1, R10707 += 1, R10708 += 1 };
  s0 -> s3 [66, 66] { R10784 += 1, R10708 += 1 };
  s0 -> s1 [67, 65535] { R10784 += 1, R10708 += 1 };
  s1 -> s1 [0, 65] { R10784 += 1, R10708 += 1 };
  s1 -> s3 [66, 66] { R10784 += 1, R10708 += 1 };
  s1 -> s1 [67, 65535] { R10784 += 1, R10708 += 1 };
  s2 -> s1 [0, 65] { R10784 += 1, R10708 += 1 };
  s2 -> s2 [0, 65535] { R10784 += 1, R10707 += 1, R10708 += 1 };
  s2 -> s3 [66, 66] { R10784 += 1, R10708 += 1 };
  s2 -> s1 [67, 65535] { R10784 += 1, R10708 += 1 };
  s3 -> s3 [0, 65535] { R10784 += 1, R10708 += 1 };
  s3 -> s4 [0, 65535] { R10784 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10784 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10786 += 1, R10709 += 1, R10710 += 1 };
  s0 -> s2 [0, 65535] { R10786 += 1, R10710 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R10785 += 1, R10786 += 1 };
  s1 -> s1 [0, 65535] { R10786 += 1, R10709 += 1, R10710 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10786 += 1, R10710 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R10786 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10786 += 1, R10710 += 1, R1 += 1 };
  s3 -> s3 [0, 65535] { R10786 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R10788 += 1, R10712 += 1 };
  s0 -> s2 [0, 65535] { R10788 += 1, R10711 += 1, R10712 += 1 };
  s0 -> s3 [0, 65535] { R10788 += 1, R10712 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R10787 += 1, R10788 += 1 };
  s0 -> s4 [66, 66] { R10788 += 1, R10712 += 1 };
  s0 -> s1 [67, 65535] { R10788 += 1, R10712 += 1 };
  s1 -> s1 [0, 65] { R10788 += 1, R10712 += 1 };
  s1 -> s1 [0, 65535] { R10788 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [66, 66] { R10788 += 1, R10712 += 1 };
  s1 -> s1 [67, 65535] { R10788 += 1, R10712 += 1 };
  s2 -> s1 [0, 65] { R10788 += 1, R10712 += 1 };
  s2 -> s2 [0, 65535] { R10788 += 1, R10711 += 1, R10712 += 1 };
  s2 -> s3 [0, 65535] { R10788 += 1, R10712 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [66, 66] { R10788 += 1, R10712 += 1 };
  s2 -> s1 [67, 65535] { R10788 += 1, R10712 += 1 };
  s3 -> s1 [0, 65] { R10788 += 1, R10712 += 1 };
  s3 -> s5 [0, 65535] { R10788 += 1 };
  s3 -> s3 [0, 65535] { R10788 += 1, R10712 += 1, R11 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [66, 66] { R10788 += 1, R10712 += 1 };
  s3 -> s1 [67, 65535] { R10788 += 1, R10712 += 1 };
  s4 -> s4 [0, 65535] { R10788 += 1, R10712 += 1 };
  s5 -> s5 [0, 65535] { R10788 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s0 -> s0 [0, 65535] { R10789 += 1, R10790 += 1 };
  s0 -> s2 [0, 65535] { R10790 += 1, R10713 += 1, R10714 += 1 };
  s0 -> s3 [0, 65535] { R10790 += 1, R10714 += 1, R10651 += 1, R10652 += 1 };
  s0 -> s1 [67, 65535] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s1 -> s1 [0, 65] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s1 -> s4 [0, 65535] { R10790 += 1 };
  s1 -> s1 [0, 65535] { R10790 += 1, R10714 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [67, 65535] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s2 -> s1 [0, 65] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s2 -> s2 [0, 65535] { R10790 += 1, R10713 += 1, R10714 += 1 };
  s2 -> s3 [0, 65535] { R10790 += 1, R10714 += 1, R10651 += 1, R10652 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [67, 65535] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s3 -> s1 [0, 65] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s3 -> s4 [0, 65535] { R10790 += 1 };
  s3 -> s3 [0, 65535] { R10790 += 1, R10714 += 1, R10651 += 1, R10652 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [67, 65535] { R10790 += 1, R10714 += 1, R10652 += 1 };
  s4 -> s4 [0, 65535] { R10790 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10792 += 1, R10716 += 1, R10653 += 1, R10654 += 1 };
  s0 -> s0 [0, 65535] { R10791 += 1, R10792 += 1 };
  s0 -> s2 [0, 65535] { R10792 += 1, R10716 += 1, R10654 += 1, R20 += 1 };
  s0 -> s3 [0, 65535] { R10792 += 1, R10715 += 1, R10716 += 1 };
  s1 -> s1 [0, 65535] { R10792 += 1, R10716 += 1, R10653 += 1, R10654 += 1 };
  s1 -> s2 [0, 65535] { R10792 += 1, R10716 += 1, R10654 += 1, R20 += 1 };
  s1 -> s5 [0, 65535] { R10792 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10792 += 1, R10716 += 1, R10654 += 1, R20 += 1 };
  s2 -> s5 [0, 65535] { R10792 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10792 += 1, R10716 += 1 };
  s3 -> s1 [0, 65535] { R10792 += 1, R10716 += 1, R10653 += 1, R10654 += 1 };
  s3 -> s2 [0, 65535] { R10792 += 1, R10716 += 1, R10654 += 1, R20 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10792 += 1, R10715 += 1, R10716 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10792 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10792 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10792 += 1, R10716 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s0 -> s2 [0, 65535] { R10794 += 1, R10718 += 1, R10655 += 1, R10656 += 1 };
  s0 -> s0 [0, 65535] { R10793 += 1, R10794 += 1 };
  s0 -> s3 [0, 65535] { R10794 += 1, R10717 += 1, R10718 += 1 };
  s0 -> s1 [70, 65535] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s1 -> s1 [0, 66] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s1 -> s5 [0, 65535] { R10794 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10794 += 1, R10718 += 1 };
  s1 -> s1 [70, 65535] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s2 -> s1 [0, 66] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s2 -> s2 [0, 65535] { R10794 += 1, R10718 += 1, R10655 += 1, R10656 += 1 };
  s2 -> s5 [0, 65535] { R10794 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s3 -> s1 [0, 66] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s3 -> s2 [0, 65535] { R10794 += 1, R10718 += 1, R10655 += 1, R10656 += 1 };
  s3 -> s3 [0, 65535] { R10794 += 1, R10717 += 1, R10718 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [70, 65535] { R10794 += 1, R10718 += 1, R10656 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10794 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10796 += 1, R10720 += 1, R10657 += 1, R10658 += 1 };
  s0 -> s2 [0, 65535] { R10796 += 1, R10720 += 1, R10658 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R10795 += 1, R10796 += 1 };
  s0 -> s3 [0, 65535] { R10796 += 1, R10719 += 1, R10720 += 1 };
  s1 -> s1 [0, 65535] { R10796 += 1, R10720 += 1, R10657 += 1, R10658 += 1 };
  s1 -> s2 [0, 65535] { R10796 += 1, R10720 += 1, R10658 += 1, R78 += 1 };
  s1 -> s5 [0, 65535] { R10796 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10796 += 1, R10720 += 1, R10658 += 1, R78 += 1 };
  s2 -> s5 [0, 65535] { R10796 += 1 };
  s2 -> s6 [0, 65535] { R10796 += 1, R10720 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10796 += 1, R10720 += 1, R10657 += 1, R10658 += 1 };
  s3 -> s2 [0, 65535] { R10796 += 1, R10720 += 1, R10658 += 1, R78 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10796 += 1, R10719 += 1, R10720 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10796 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10796 += 1 };
  s6 -> s6 [0, 65535] { R10796 += 1, R10720 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s0 -> s0 [0, 65535] { R10797 += 1, R10798 += 1 };
  s0 -> s2 [0, 65535] { R10798 += 1, R10721 += 1, R10722 += 1 };
  s0 -> s3 [0, 65535] { R10798 += 1, R10722 += 1, R10660 += 1, R80 += 1 };
  s0 -> s4 [0, 65535] { R10798 += 1, R10722 += 1, R10659 += 1, R10660 += 1 };
  s0 -> s1 [71, 65535] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s1 -> s1 [0, 69] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s1 -> s5 [0, 65535] { R10798 += 1 };
  s1 -> s1 [0, 65535] { R10798 += 1, R10722 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [71, 65535] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s2 -> s1 [0, 69] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s2 -> s2 [0, 65535] { R10798 += 1, R10721 += 1, R10722 += 1 };
  s2 -> s3 [0, 65535] { R10798 += 1, R10722 += 1, R10660 += 1, R80 += 1 };
  s2 -> s4 [0, 65535] { R10798 += 1, R10722 += 1, R10659 += 1, R10660 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [71, 65535] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s3 -> s1 [0, 69] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s3 -> s5 [0, 65535] { R10798 += 1 };
  s3 -> s3 [0, 65535] { R10798 += 1, R10722 += 1, R10660 += 1, R80 += 1 };
  s3 -> s7 [0, 65535] { R10798 += 1, R10722 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [71, 65535] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s4 -> s1 [0, 69] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s4 -> s5 [0, 65535] { R10798 += 1 };
  s4 -> s3 [0, 65535] { R10798 += 1, R10722 += 1, R10660 += 1, R80 += 1 };
  s4 -> s4 [0, 65535] { R10798 += 1, R10722 += 1, R10659 += 1, R10660 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s1 [71, 65535] { R10798 += 1, R10722 += 1, R10660 += 1 };
  s5 -> s5 [0, 65535] { R10798 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10798 += 1 };
  s7 -> s7 [0, 65535] { R10798 += 1, R10722 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R10800 += 1, R10723 += 1, R10724 += 1 };
  s0 -> s3 [0, 65535] { R10800 += 1, R10724 += 1, R10661 += 1, R10662 += 1 };
  s0 -> s0 [0, 65535] { R10799 += 1, R10800 += 1 };
  s0 -> s4 [0, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R83 += 1, R84 += 1 };
  s0 -> s1 [71, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s1 -> s5 [0, 65535] { R10800 += 1, R10724 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10800 += 1, R10724 += 1, R10662 += 1 };
  s1 -> s7 [0, 65535] { R10800 += 1 };
  s1 -> s1 [71, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10800 += 1, R10723 += 1, R10724 += 1 };
  s2 -> s3 [0, 65535] { R10800 += 1, R10724 += 1, R10661 += 1, R10662 += 1 };
  s2 -> s4 [0, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R83 += 1, R84 += 1 };
  s2 -> s1 [71, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10800 += 1, R10724 += 1, R10661 += 1, R10662 += 1 };
  s3 -> s7 [0, 65535] { R10800 += 1 };
  s3 -> s4 [0, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R83 += 1, R84 += 1 };
  s3 -> s1 [71, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s4 -> s5 [0, 65535] { R10800 += 1, R10724 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10800 += 1 };
  s4 -> s4 [0, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R83 += 1, R84 += 1 };
  s4 -> s1 [71, 65535] { R10800 += 1, R10724 += 1, R10662 += 1, R84 += 1 };
  s5 -> s5 [0, 65535] { R10800 += 1, R10724 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10800 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10800 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10802 += 1, R10726 += 1, R10663 += 1, R10664 += 1 };
  s0 -> s0 [0, 65535] { R10801 += 1, R10802 += 1 };
  s0 -> s2 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1 };
  s0 -> s3 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s4 [0, 65535] { R10802 += 1, R10725 += 1, R10726 += 1 };
  s1 -> s1 [0, 65535] { R10802 += 1, R10726 += 1, R10663 += 1, R10664 += 1 };
  s1 -> s2 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10802 += 1 };
  s1 -> s3 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s2 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10802 += 1 };
  s2 -> s7 [0, 65535] { R10802 += 1, R10726 += 1 };
  s3 -> s2 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10802 += 1 };
  s3 -> s3 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s7 [0, 65535] { R10802 += 1, R10726 += 1 };
  s4 -> s1 [0, 65535] { R10802 += 1, R10726 += 1, R10663 += 1, R10664 += 1 };
  s4 -> s2 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R10802 += 1, R10726 += 1, R10664 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s4 [0, 65535] { R10802 += 1, R10725 += 1, R10726 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10802 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10802 += 1 };
  s7 -> s7 [0, 65535] { R10802 += 1, R10726 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s0 -> s2 [0, 65535] { R10804 += 1, R10728 += 1, R10665 += 1, R10666 += 1 };
  s0 -> s0 [0, 65535] { R10803 += 1, R10804 += 1 };
  s0 -> s3 [0, 65535] { R10804 += 1, R10727 += 1, R10728 += 1 };
  s0 -> s4 [74, 74] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s0 -> s1 [75, 65535] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s1 -> s1 [0, 70] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s1 -> s4 [74, 74] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s1 -> s1 [75, 65535] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s2 -> s1 [0, 70] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s2 -> s2 [0, 65535] { R10804 += 1, R10728 += 1, R10665 += 1, R10666 += 1 };
  s2 -> s4 [74, 74] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s2 -> s1 [75, 65535] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s3 -> s1 [0, 70] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s3 -> s2 [0, 65535] { R10804 += 1, R10728 += 1, R10665 += 1, R10666 += 1 };
  s3 -> s3 [0, 65535] { R10804 += 1, R10727 += 1, R10728 += 1 };
  s3 -> s4 [74, 74] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s3 -> s1 [75, 65535] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s4 -> s4 [0, 70] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10804 += 1, R10728 += 1 };
  s4 -> s4 [0, 65535] { R10804 += 1, R10728 += 1, R10666 += 1 };
  s4 -> s7 [0, 65535] { R10804 += 1 };
  s4 -> s4 [74, 65535] { R10804 += 1, R10728 += 1, R10666 += 1, R8828 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10804 += 1, R10728 += 1 };
  s6 -> s7 [0, 65535] { R10804 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10804 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10806 += 1, R10730 += 1, R10668 += 1 };
  s0 -> s2 [0, 65535] { R10806 += 1, R10729 += 1, R10730 += 1 };
  s0 -> s0 [0, 65535] { R10805 += 1, R10806 += 1 };
  s0 -> s3 [0, 65535] { R10806 += 1, R10730 += 1, R10667 += 1, R10668 += 1 };
  s1 -> s1 [0, 65535] { R10806 += 1, R10730 += 1, R10668 += 1 };
  s1 -> s6 [0, 65535] { R10806 += 1, R10730 += 1 };
  s1 -> s4 [0, 65535] { R10806 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10806 += 1, R10730 += 1, R10668 += 1 };
  s2 -> s2 [0, 65535] { R10806 += 1, R10729 += 1, R10730 += 1 };
  s2 -> s3 [0, 65535] { R10806 += 1, R10730 += 1, R10667 += 1, R10668 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R10806 += 1, R10730 += 1, R10668 += 1 };
  s3 -> s4 [0, 65535] { R10806 += 1 };
  s3 -> s3 [0, 65535] { R10806 += 1, R10730 += 1, R10667 += 1, R10668 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10806 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10806 += 1, R10730 += 1 };
  s6 -> s4 [0, 65535] { R10806 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 70] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s0 -> s0 [0, 65535] { R10807 += 1, R10808 += 1 };
  s0 -> s2 [0, 65535] { R10808 += 1, R10731 += 1, R10732 += 1 };
  s0 -> s3 [0, 65535] { R10808 += 1, R10732 += 1, R10669 += 1, R10670 += 1 };
  s0 -> s1 [0, 65535] { R10808 += 1, R10732 += 1, R10670 += 1 };
  s0 -> s1 [75, 65535] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s1 -> s1 [0, 70] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10808 += 1, R10732 += 1 };
  s1 -> s5 [0, 65535] { R10808 += 1 };
  s1 -> s1 [0, 65535] { R10808 += 1, R10732 += 1, R10670 += 1 };
  s1 -> s1 [75, 65535] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s2 -> s1 [0, 70] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10808 += 1, R10731 += 1, R10732 += 1 };
  s2 -> s3 [0, 65535] { R10808 += 1, R10732 += 1, R10669 += 1, R10670 += 1 };
  s2 -> s1 [0, 65535] { R10808 += 1, R10732 += 1, R10670 += 1 };
  s2 -> s1 [75, 65535] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s3 -> s1 [0, 70] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10808 += 1 };
  s3 -> s3 [0, 65535] { R10808 += 1, R10732 += 1, R10669 += 1, R10670 += 1 };
  s3 -> s1 [0, 65535] { R10808 += 1, R10732 += 1, R10670 += 1 };
  s3 -> s1 [75, 65535] { R10808 += 1, R10732 += 1, R10670 += 1, R10650 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10808 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10808 += 1, R10732 += 1 };
  s6 -> s5 [0, 65535] { R10808 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10810 += 1, R10733 += 1, R10734 += 1 };
  s0 -> s0 [0, 65535] { R10809 += 1, R10810 += 1 };
  s0 -> s2 [0, 65535] { R10810 += 1, R10734 += 1, R10689 += 1, R10690 += 1 };
  s0 -> s3 [0, 65535] { R10810 += 1, R10734 += 1, R10690 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R10810 += 1, R10733 += 1, R10734 += 1 };
  s1 -> s2 [0, 65535] { R10810 += 1, R10734 += 1, R10689 += 1, R10690 += 1 };
  s1 -> s3 [0, 65535] { R10810 += 1, R10734 += 1, R10690 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10810 += 1, R10734 += 1, R10689 += 1, R10690 += 1 };
  s2 -> s3 [0, 65535] { R10810 += 1, R10734 += 1, R10690 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R10810 += 1 };
  s3 -> s3 [0, 65535] { R10810 += 1, R10734 += 1, R10690 += 1, R21 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10810 += 1 };
  s3 -> s6 [0, 65535] { R10810 += 1, R10734 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10810 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10810 += 1 };
  s6 -> s6 [0, 65535] { R10810 += 1, R10734 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s0 -> s2 [0, 65535] { R10812 += 1, R10736 += 1, R10691 += 1, R10692 += 1 };
  s0 -> s0 [0, 65535] { R10811 += 1, R10812 += 1 };
  s0 -> s3 [0, 65535] { R10812 += 1, R10735 += 1, R10736 += 1 };
  s0 -> s4 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s0 -> s5 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s0 -> s6 [70, 70] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s0 -> s1 [71, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s1 -> s1 [0, 65] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s1 -> s4 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s1 -> s5 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s1 -> s6 [70, 70] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s1 -> s1 [71, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s2 -> s1 [0, 65] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s2 -> s2 [0, 65535] { R10812 += 1, R10736 += 1, R10691 += 1, R10692 += 1 };
  s2 -> s4 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s2 -> s5 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s2 -> s6 [70, 70] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s2 -> s1 [71, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s3 -> s1 [0, 65] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s3 -> s2 [0, 65535] { R10812 += 1, R10736 += 1, R10691 += 1, R10692 += 1 };
  s3 -> s3 [0, 65535] { R10812 += 1, R10735 += 1, R10736 += 1 };
  s3 -> s4 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s3 -> s5 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s3 -> s6 [70, 70] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s3 -> s1 [71, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s4 -> s4 [0, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s4 -> s9 [70, 70] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s4 -> s4 [71, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s6 -> s6 [0, 65] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s6 -> s7 [0, 65535] { R10812 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10812 += 1, R10736 += 1 };
  s6 -> s9 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s6 -> s10 [66, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s6 -> s6 [70, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s7 -> s7 [0, 65535] { R10812 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 66] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s9 -> s7 [0, 65535] { R10812 += 1 };
  s9 -> s9 [0, 65535] { R10812 += 1, R10736 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [70, 65535] { R10812 += 1, R10736 += 1, R10692 += 1 };
  s10 -> s7 [0, 65535] { R10812 += 1 };
  s10 -> s10 [0, 65535] { R10812 += 1, R10736 += 1 };
  s10 -> s8 [0, 65535];
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R10814 += 1, R10737 += 1, R10738 += 1 };
  s0 -> s3 [0, 65535] { R10814 += 1, R10738 += 1, R10693 += 1, R10694 += 1 };
  s0 -> s0 [0, 65535] { R10813 += 1, R10814 += 1 };
  s0 -> s4 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R10814 += 1, R10738 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R10814 += 1 };
  s1 -> s4 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R10814 += 1, R10737 += 1, R10738 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R10814 += 1, R10738 += 1, R10693 += 1, R10694 += 1 };
  s2 -> s4 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10814 += 1, R10738 += 1, R10693 += 1, R10694 += 1 };
  s3 -> s8 [0, 65535] { R10814 += 1 };
  s3 -> s4 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R10814 += 1, R10738 += 1 };
  s4 -> s8 [0, 65535] { R10814 += 1 };
  s5 -> s6 [0, 65535] { R10814 += 1, R10738 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10814 += 1 };
  s5 -> s5 [0, 65535] { R10814 += 1, R10738 += 1, R10694 += 1, R77 += 1 };
  s6 -> s6 [0, 65535] { R10814 += 1, R10738 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10814 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10814 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R10816 += 1, R10739 += 1, R10740 += 1 };
  s0 -> s3 [0, 65535] { R10816 += 1, R10740 += 1, R10695 += 1, R10696 += 1 };
  s0 -> s0 [0, 65535] { R10815 += 1, R10816 += 1 };
  s0 -> s4 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10816 += 1 };
  s1 -> s1 [0, 65535] { R10816 += 1, R10740 += 1 };
  s1 -> s4 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10816 += 1, R10739 += 1, R10740 += 1 };
  s2 -> s3 [0, 65535] { R10816 += 1, R10740 += 1, R10695 += 1, R10696 += 1 };
  s2 -> s4 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R10816 += 1 };
  s3 -> s3 [0, 65535] { R10816 += 1, R10740 += 1, R10695 += 1, R10696 += 1 };
  s3 -> s4 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10816 += 1, R10740 += 1 };
  s4 -> s7 [0, 65535] { R10816 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10816 += 1 };
  s5 -> s8 [0, 65535] { R10816 += 1, R10740 += 1 };
  s5 -> s5 [0, 65535] { R10816 += 1, R10740 += 1, R10696 += 1, R79 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10816 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10816 += 1 };
  s8 -> s8 [0, 65535] { R10816 += 1, R10740 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R10818 += 1, R10742 += 1, R10697 += 1, R10698 += 1 };
  s0 -> s3 [0, 65535] { R10818 += 1, R10741 += 1, R10742 += 1 };
  s0 -> s0 [0, 65535] { R10817 += 1, R10818 += 1 };
  s0 -> s4 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10818 += 1 };
  s1 -> s1 [0, 65535] { R10818 += 1, R10742 += 1 };
  s1 -> s4 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R10818 += 1, R10742 += 1, R10697 += 1, R10698 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R10818 += 1 };
  s2 -> s4 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s3 -> s2 [0, 65535] { R10818 += 1, R10742 += 1, R10697 += 1, R10698 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10818 += 1, R10741 += 1, R10742 += 1 };
  s3 -> s4 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s4 -> s4 [0, 65535] { R10818 += 1, R10742 += 1, R10698 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10818 += 1 };
  s4 -> s8 [0, 65535] { R10818 += 1, R10742 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10818 += 1, R10742 += 1 };
  s5 -> s7 [0, 65535] { R10818 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10818 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10818 += 1 };
  s8 -> s8 [0, 65535] { R10818 += 1, R10742 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s0 [0, 65535] { R10819 += 1, R10820 += 1 };
  s0 -> s3 [0, 65535] { R10820 += 1, R10744 += 1, R10699 += 1, R10700 += 1 };
  s0 -> s4 [0, 65535] { R10820 += 1, R10743 += 1, R10744 += 1 };
  s0 -> s5 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s6 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s7 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s8 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s1 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s5 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s6 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s7 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s8 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s10 [0, 65535] { R10820 += 1 };
  s2 -> s2 [0, 65535] { R10820 += 1, R10744 += 1 };
  s2 -> s7 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s8 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s3 [0, 65535] { R10820 += 1, R10744 += 1, R10699 += 1, R10700 += 1 };
  s3 -> s5 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s6 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s7 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s8 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [0, 65] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s3 [0, 65535] { R10820 += 1, R10744 += 1, R10699 += 1, R10700 += 1 };
  s4 -> s4 [0, 65535] { R10820 += 1, R10743 += 1, R10744 += 1 };
  s4 -> s5 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s6 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s7 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s8 [66, 66] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [67, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s6 [0, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6637 += 1, R6638 += 1 };
  s6 -> s8 [0, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s10 [0, 65535] { R10820 += 1 };
  s7 -> s7 [0, 65535] { R10820 += 1, R10744 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R10820 += 1 };
  s8 -> s11 [0, 65535] { R10820 += 1, R10744 += 1 };
  s8 -> s8 [0, 65535] { R10820 += 1, R10744 += 1, R10700 += 1, R6638 += 1, R6639 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10820 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s10 [0, 65535] { R10820 += 1 };
  s11 -> s11 [0, 65535] { R10820 += 1, R10744 += 1 };
  accepting s8, s2, s9, s7, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s0 -> s0 [0, 65535] { R10821 += 1, R10822 += 1 };
  s0 -> s3 [0, 65535] { R10822 += 1, R10746 += 1, R10701 += 1, R10702 += 1 };
  s0 -> s4 [0, 65535] { R10822 += 1, R10745 += 1, R10746 += 1 };
  s0 -> s5 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s0 -> s6 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s0 -> s7 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s8 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [67, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s0 -> s1 [67, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s1 -> s1 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s2 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s1 -> s5 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s1 -> s6 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s1 -> s7 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s8 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s2 [67, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s1 -> s1 [67, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s2 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s2 -> s2 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s2 -> s9 [0, 65535];
  s2 -> s10 [0, 65535] { R10822 += 1 };
  s2 -> s2 [0, 65535] { R10822 += 1, R10746 += 1 };
  s2 -> s5 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s2 -> s6 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s2 -> s2 [67, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s2 -> s2 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s3 -> s1 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s2 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s3 -> s3 [0, 65535] { R10822 += 1, R10746 += 1, R10701 += 1, R10702 += 1 };
  s3 -> s5 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s3 -> s6 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s3 -> s7 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s8 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s2 [67, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s3 -> s1 [67, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s2 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s4 -> s1 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s2 [0, 65] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s4 -> s3 [0, 65535] { R10822 += 1, R10746 += 1, R10701 += 1, R10702 += 1 };
  s4 -> s4 [0, 65535] { R10822 += 1, R10745 += 1, R10746 += 1 };
  s4 -> s5 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s4 -> s6 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s4 -> s7 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s8 [66, 66] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s2 [67, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s4 -> s1 [67, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s2 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s5 -> s5 [0, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s10 [0, 65535] { R10822 += 1 };
  s5 -> s5 [0, 65535] { R10822 += 1, R10746 += 1 };
  s5 -> s5 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s10 [0, 65535] { R10822 += 1 };
  s6 -> s6 [0, 65535] { R10822 += 1, R10746 += 1 };
  s7 -> s5 [0, 70] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s7 -> s7 [0, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8825 += 1, R8826 += 1 };
  s7 -> s5 [75, 65535] { R10822 += 1, R10746 += 1, R10702 += 1, R8826 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10822 += 1 };
  accepting s5, s2, s9, s6, s10;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s2 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s0 [0, 65535] { R10823 += 1, R10824 += 1 };
  s0 -> s3 [0, 65535] { R10824 += 1, R10748 += 1, R10703 += 1, R10704 += 1 };
  s0 -> s4 [0, 65535] { R10824 += 1, R10747 += 1, R10748 += 1 };
  s0 -> s5 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s6 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s7 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s8 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s1 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s2 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s1 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s2 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s5 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s6 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s7 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s8 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s1 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s2 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s13 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s2 -> s5 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s14 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s2 -> s7 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s9 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s2 -> s2 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s13 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s3 -> s1 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s2 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s3 [0, 65535] { R10824 += 1, R10748 += 1, R10703 += 1, R10704 += 1 };
  s3 -> s5 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s6 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s7 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s8 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s1 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s2 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s1 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s2 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s3 [0, 65535] { R10824 += 1, R10748 += 1, R10703 += 1, R10704 += 1 };
  s4 -> s4 [0, 65535] { R10824 += 1, R10747 += 1, R10748 += 1 };
  s4 -> s5 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s6 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s7 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s8 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s1 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s2 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s5 -> s5 [0, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s5 -> s9 [0, 65535] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s8 -> s5 [0, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10282 += 1, R10283 += 1 };
  s8 -> s8 [0, 65535] { R10824 += 1, R10748 += 1, R10704 += 1, R10281 += 1, R10282 += 1 };
  s9 -> s10 [0, 65535] { R10824 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s12 [0, 65535] { R10824 += 1, R10748 += 1 };
  s9 -> s9 [0, 65535] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s10 -> s10 [0, 65535] { R10824 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R10824 += 1 };
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R10824 += 1, R10748 += 1 };
  s13 -> s13 [0, 65] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s13 -> s10 [0, 65535] { R10824 += 1 };
  s13 -> s13 [0, 65535] { R10824 += 1, R10748 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s14 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s13 -> s9 [66, 66] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s13 -> s13 [67, 65535] { R10824 += 1, R10748 += 1, R10704 += 1 };
  s14 -> s10 [0, 65535] { R10824 += 1 };
  s14 -> s11 [0, 65535];
  s14 -> s14 [0, 65535] { R10824 += 1, R10748 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s0 -> s2 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s0 -> s0 [0, 65535] { R10825 += 1, R10826 += 1 };
  s0 -> s3 [0, 65535] { R10826 += 1, R10749 += 1, R10750 += 1 };
  s0 -> s4 [0, 65535] { R10826 += 1, R10750 += 1, R10705 += 1, R10706 += 1 };
  s0 -> s5 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s0 -> s6 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s0 -> s7 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s0 -> s8 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s0 -> s1 [67, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s0 -> s2 [67, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s0 -> s9 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s0 -> s1 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s1 -> s1 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s1 -> s6 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s1 -> s8 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s1 -> s1 [67, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s1 -> s1 [67, 65535] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s1 -> s9 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s1 -> s1 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s2 -> s1 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s2 -> s2 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s2 -> s5 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s2 -> s6 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s2 -> s7 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s2 -> s8 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s2 -> s1 [67, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s2 -> s2 [67, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s2 -> s9 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s2 -> s1 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s3 -> s1 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s3 -> s2 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s3 -> s3 [0, 65535] { R10826 += 1, R10749 += 1, R10750 += 1 };
  s3 -> s4 [0, 65535] { R10826 += 1, R10750 += 1, R10705 += 1, R10706 += 1 };
  s3 -> s5 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s3 -> s6 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s3 -> s7 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s3 -> s8 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s3 -> s1 [67, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s3 -> s2 [67, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s3 -> s9 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s3 -> s1 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s4 -> s1 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s4 -> s2 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s4 -> s4 [0, 65535] { R10826 += 1, R10750 += 1, R10705 += 1, R10706 += 1 };
  s4 -> s5 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s4 -> s6 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s4 -> s7 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s4 -> s8 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s4 -> s1 [67, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s4 -> s2 [67, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s4 -> s9 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s4 -> s1 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s6 -> s6 [0, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s6 -> s6 [0, 65535] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s6 -> s12 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s6 -> s6 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s7 -> s6 [0, 69] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s7 -> s7 [0, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10647 += 1, R10648 += 1 };
  s7 -> s12 [70, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s7 -> s6 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s9 -> s9 [0, 65] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10826 += 1, R10750 += 1 };
  s9 -> s11 [0, 65535] { R10826 += 1 };
  s9 -> s12 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s9 -> s13 [66, 66] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s9 -> s9 [67, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s9 -> s9 [67, 65535] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s9 -> s9 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10826 += 1 };
  s12 -> s12 [0, 70] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s12 -> s14 [0, 65535] { R10826 += 1, R10750 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R10826 += 1, R10750 += 1, R10706 += 1 };
  s12 -> s11 [0, 65535] { R10826 += 1 };
  s12 -> s12 [75, 65535] { R10826 += 1, R10750 += 1, R10706 += 1, R10648 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s13 [0, 65535] { R10826 += 1, R10750 += 1 };
  s13 -> s11 [0, 65535] { R10826 += 1 };
  s14 -> s14 [0, 65535] { R10826 += 1, R10750 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s11 [0, 65535] { R10826 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R10666 && R2 = R10750 && R3 - R10826 = 1 && R23 - R10750 = -1 && R24 = R10750 && R25 - R10750 = -1 && R26 = R10750 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R10826 && R32 - R10826 = 1 && R33 = R10826 && R34 - R10826 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R8828 + -1*R8826 - R64 = 0 && R63 + R8827 + R8825 = 0 && R10665 = 0 && R10691 = 0 && R10692 = 0 && R10699 = 0 && R10700 = 0 && R10701 = 0 && R10702 = 0 && R10703 = 0 && R10704 = 0 && R10705 = 0 && R10706 = 0 && R10707 = 0 && R10708 = R10750 && R10709 = 0 && R10710 = R10750 && R10711 = 0 && R10712 = R10750 && R10713 = 0 && R10714 = R10750 && R10715 = 0 && R10716 = R10750 && R10717 = 0 && R10718 = R10750 && R10719 = 0 && R10720 = R10750 && R10721 = 0 && R10722 = R10750 && R10723 = 0 && R10724 = R10750 && R10725 = 0 && R10726 = R10750 && R10727 = 0 && R10728 = R10750 && R10729 = 0 && R10730 = R10750 && R10731 = 0 && R10732 = R10750 && R10733 = 0 && R10734 = R10750 && R10735 = 0 && R10736 = R10750 && R10737 = 0 && R10738 = R10750 && R10739 = 0 && R10740 = R10750 && R10741 = 0 && R10742 = R10750 && R10743 = 0 && R10744 = R10750 && R10745 = 0 && R10746 = R10750 && R10747 = 0 && R10748 = R10750 && R10749 = 0 && R10751 = 0 && R10752 = R10826 && R10753 = 0 && R10754 = R10826 && R10755 = 0 && R10756 = R10826 && R10757 = 0 && R10758 = R10826 && R10759 = 0 && R10760 = R10826 && R10761 = 0 && R10762 = R10826 && R10763 = 0 && R10764 = R10826 && R10765 = 0 && R10766 = R10826 && R10767 = 0 && R10768 = R10826 && R10769 = 0 && R10770 = R10826 && R10771 = 0 && R10772 = R10826 && R10773 = 0 && R10774 = R10826 && R10775 = 0 && R10776 = R10826 && R10777 = 0 && R10778 = R10826 && R10779 = 0 && R10780 = R10826 && R10781 = 0 && R10782 = R10826 && R10783 = 0 && R10784 = R10826 && R10785 = 0 && R10786 = R10826 && R10787 = 0 && R10788 = R10826 && R10789 = 0 && R10790 = R10826 && R10791 = 0 && R10792 = R10826 && R10793 = 0 && R10794 = R10826 && R10795 = 0 && R10796 = R10826 && R10797 = 0 && R10798 = R10826 && R10799 = 0 && R10800 = R10826 && R10801 = 0 && R10802 = R10826 && R10803 = 0 && R10804 = R10826 && R10805 = 0 && R10806 = R10826 && R10807 = 0 && R10808 = R10826 && R10809 = 0 && R10810 = R10826 && R10811 = 0 && R10812 = R10826 && R10813 = 0 && R10814 = R10826 && R10815 = 0 && R10816 = R10826 && R10817 = 0 && R10818 = R10826 && R10819 = 0 && R10820 = R10826 && R10821 = 0 && R10822 = R10826 && R10823 = 0 && R10824 = R10826 && R10825 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R8828 + -1*R8826 - R64 < 1 && -1 < R10666 && 0 < R10750 && -1 < R10826 && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R53 + R83 + R81 = 0 || R64 + R8828 + R8826 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R8828 + R8826 < 1))) && (R10651 != 0 || R10652 = R10666 || (R20 = 0 && R10666 = 0)) && (R10653 != 0 || R10654 = R10666 || (R20 = 0 && R10666 = 0)) && (R10655 != 0 || R10656 = R10666 || (R20 = 0 && R10666 = 0)) && (R10657 != 0 || R10658 = R10666 || (R20 = 0 && R10666 = 0)) && (R10659 != 0 || R10660 = R10666 || (R20 = 0 && R10666 = 0)) && (R10661 != 0 || R10662 = R10666 || (R20 = 0 && R10666 = 0)) && (R10663 != 0 || R10664 = R10666 || (R20 = 0 && R10666 = 0)) && (R10667 != 0 || R10666 = R10668 || (R20 = 0 && R10666 = 0)) && (R10669 != 0 || R10666 = R10670 || (R20 = 0 && R10666 = 0)) && (R21 = 0 || (R10689 = 0 && R10690 = 0)) && (R21 = 0 || (R10693 = 0 && R10694 = 0)) && (R21 = 0 || (R10695 = 0 && R10696 = 0)) && (R21 = 0 || (R10697 = 0 && R10698 = 0)) && (R22 = 0 || (R10671 = 0 && R10672 = 0)) && (R22 = 0 || (R10673 = 0 && R10674 = 0)) && (R22 = 0 || (R10675 = 0 && R10676 = 0)) && (R22 = 0 || (R10677 = 0 && R10678 = 0)) && (R22 = 0 || (R10679 = 0 && R10680 = 0)) && (R22 = 0 || (R10681 = 0 && R10682 = 0)) && (R22 = 0 || (R10683 = 0 && R10684 = 0)) && (R22 = 0 || (R10685 = 0 && R10686 = 0)) && (R22 = 0 || (R10687 = 0 && R10688 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0)) && (R69 + R10286 + R10283 = 0 || (R67 + R10284 + R10281 = 0 && R68 + R10285 + R10282 = 0)) && (R69 + R10286 + R10283 = 0 || (R73 + R10649 + R10647 = 0 && R74 + R10650 + R10648 = 0)) && (R10651 = 0 || (R20 = 0 && R10666 = 0)) && (R10653 = 0 || (R20 = 0 && R10666 = 0)) && (R10655 = 0 || (R20 = 0 && R10666 = 0)) && (R10657 = 0 || (R20 = 0 && R10666 = 0)) && (R10659 = 0 || (R20 = 0 && R10666 = 0)) && (R10661 = 0 || (R20 = 0 && R10666 = 0)) && (R10663 = 0 || (R20 = 0 && R10666 = 0)) && (R10667 = 0 || (R20 = 0 && R10666 = 0)) && (R10669 = 0 || (R20 = 0 && R10666 = 0));
// End of Parikh automata intersection problem
