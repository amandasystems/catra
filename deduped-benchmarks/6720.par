// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R17, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R294 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s1 -> s1 [0, 65535] { R294 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R296 += 1, R203 += 1, R204 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s0 -> s2 [9, 9] { R296 += 1, R204 += 1 };
  s1 -> s1 [0, 65535] { R296 += 1, R203 += 1, R204 += 1 };
  s1 -> s2 [9, 9] { R296 += 1, R204 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R296 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R298 += 1, R206 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R205 += 1, R206 += 1 };
  s1 -> s1 [0, 65535] { R298 += 1, R206 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R298 += 1 };
  s2 -> s1 [0, 65535] { R298 += 1, R206 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R205 += 1, R206 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R298 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R300 += 1, R278 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R277 += 1, R278 += 1 };
  s0 -> s1 [91, 65535] { R300 += 1, R278 += 1 };
  s1 -> s1 [0, 64] { R300 += 1, R278 += 1 };
  s1 -> s1 [0, 65535] { R300 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R300 += 1, R278 += 1 };
  s2 -> s1 [0, 64] { R300 += 1, R278 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R277 += 1, R278 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R300 += 1, R278 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R302 += 1, R279 += 1, R280 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R280 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s1 -> s1 [0, 65535] { R302 += 1, R279 += 1, R280 += 1 };
  s1 -> s2 [0, 65535] { R302 += 1, R280 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R302 += 1, R280 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R302 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R302 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R304 += 1, R282 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R281 += 1, R282 += 1 };
  s0 -> s3 [0, 65535] { R304 += 1, R282 += 1, R179 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s4 [9, 13] { R304 += 1, R282 += 1, R180 += 1 };
  s0 -> s1 [14, 31] { R304 += 1, R282 += 1, R180 += 1 };
  s0 -> s4 [32, 32] { R304 += 1, R282 += 1, R180 += 1 };
  s0 -> s1 [33, 65535] { R304 += 1, R282 += 1, R180 += 1 };
  s1 -> s5 [0, 65535] { R304 += 1 };
  s1 -> s1 [0, 65535] { R304 += 1, R282 += 1, R180 += 1 };
  s1 -> s7 [0, 65535] { R304 += 1, R282 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R304 += 1, R282 += 1, R180 += 1 };
  s2 -> s2 [0, 65535] { R304 += 1, R281 += 1, R282 += 1 };
  s2 -> s3 [0, 65535] { R304 += 1, R282 += 1, R179 += 1, R180 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R304 += 1, R282 += 1, R180 += 1 };
  s2 -> s1 [14, 31] { R304 += 1, R282 += 1, R180 += 1 };
  s2 -> s4 [32, 32] { R304 += 1, R282 += 1, R180 += 1 };
  s2 -> s1 [33, 65535] { R304 += 1, R282 += 1, R180 += 1 };
  s3 -> s1 [0, 8] { R304 += 1, R282 += 1, R180 += 1 };
  s3 -> s5 [0, 65535] { R304 += 1 };
  s3 -> s3 [0, 65535] { R304 += 1, R282 += 1, R179 += 1, R180 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R304 += 1, R282 += 1, R180 += 1 };
  s3 -> s1 [14, 31] { R304 += 1, R282 += 1, R180 += 1 };
  s3 -> s4 [32, 32] { R304 += 1, R282 += 1, R180 += 1 };
  s3 -> s1 [33, 65535] { R304 += 1, R282 += 1, R180 += 1 };
  s4 -> s1 [0, 65535] { R304 += 1, R282 += 1, R180 += 1 };
  s5 -> s5 [0, 65535] { R304 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R304 += 1 };
  s7 -> s7 [0, 65535] { R304 += 1, R282 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R306 += 1, R284 += 1, R182 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R306 += 1, R284 += 1, R181 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s3 [0, 65535] { R306 += 1, R283 += 1, R284 += 1 };
  s1 -> s1 [0, 65535] { R306 += 1, R284 += 1, R182 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R306 += 1 };
  s1 -> s6 [0, 65535] { R306 += 1, R284 += 1 };
  s2 -> s1 [0, 65535] { R306 += 1, R284 += 1, R182 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R306 += 1, R284 += 1, R181 += 1, R182 += 1 };
  s2 -> s5 [0, 65535] { R306 += 1 };
  s3 -> s1 [0, 65535] { R306 += 1, R284 += 1, R182 += 1, R5 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R306 += 1, R284 += 1, R181 += 1, R182 += 1 };
  s3 -> s3 [0, 65535] { R306 += 1, R283 += 1, R284 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R306 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R306 += 1 };
  s6 -> s6 [0, 65535] { R306 += 1, R284 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R308 += 1, R286 += 1, R184 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R286 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R308 += 1, R285 += 1, R286 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s4 [9, 13] { R308 += 1, R286 += 1, R184 += 1 };
  s0 -> s1 [14, 31] { R308 += 1, R286 += 1, R184 += 1 };
  s0 -> s4 [32, 32] { R308 += 1, R286 += 1, R184 += 1 };
  s0 -> s1 [33, 65535] { R308 += 1, R286 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R308 += 1, R286 += 1, R184 += 1 };
  s1 -> s6 [0, 65535] { R308 += 1 };
  s1 -> s7 [0, 65535] { R308 += 1, R286 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R308 += 1, R286 += 1, R184 += 1 };
  s2 -> s2 [0, 65535] { R308 += 1, R286 += 1, R183 += 1, R184 += 1 };
  s2 -> s6 [0, 65535] { R308 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R308 += 1, R286 += 1, R184 += 1 };
  s2 -> s1 [14, 31] { R308 += 1, R286 += 1, R184 += 1 };
  s2 -> s4 [32, 32] { R308 += 1, R286 += 1, R184 += 1 };
  s2 -> s1 [33, 65535] { R308 += 1, R286 += 1, R184 += 1 };
  s3 -> s1 [0, 8] { R308 += 1, R286 += 1, R184 += 1 };
  s3 -> s2 [0, 65535] { R308 += 1, R286 += 1, R183 += 1, R184 += 1 };
  s3 -> s3 [0, 65535] { R308 += 1, R285 += 1, R286 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R308 += 1, R286 += 1, R184 += 1 };
  s3 -> s1 [14, 31] { R308 += 1, R286 += 1, R184 += 1 };
  s3 -> s4 [32, 32] { R308 += 1, R286 += 1, R184 += 1 };
  s3 -> s1 [33, 65535] { R308 += 1, R286 += 1, R184 += 1 };
  s4 -> s1 [0, 65535] { R308 += 1, R286 += 1, R184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R308 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R308 += 1 };
  s7 -> s7 [0, 65535] { R308 += 1, R286 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R310 += 1, R287 += 1, R288 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R288 += 1, R185 += 1, R186 += 1 };
  s0 -> s3 [0, 65535] { R310 += 1, R288 += 1, R186 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R310 += 1, R287 += 1, R288 += 1 };
  s1 -> s2 [0, 65535] { R310 += 1, R288 += 1, R185 += 1, R186 += 1 };
  s1 -> s3 [0, 65535] { R310 += 1, R288 += 1, R186 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R310 += 1 };
  s2 -> s2 [0, 65535] { R310 += 1, R288 += 1, R185 += 1, R186 += 1 };
  s2 -> s3 [0, 65535] { R310 += 1, R288 += 1, R186 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R310 += 1 };
  s3 -> s3 [0, 65535] { R310 += 1, R288 += 1, R186 += 1, R6 += 1 };
  s3 -> s6 [0, 65535] { R310 += 1, R288 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R310 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R310 += 1 };
  s6 -> s6 [0, 65535] { R310 += 1, R288 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R312 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s2 [67, 67] { R312 += 1 };
  s0 -> s1 [68, 65535] { R312 += 1 };
  s1 -> s1 [0, 64] { R312 += 1 };
  s1 -> s2 [67, 67] { R312 += 1 };
  s1 -> s1 [68, 65535] { R312 += 1 };
  s2 -> s2 [0, 64] { R312 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R312 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R314 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R314 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R316 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R13 += 1 };
  s0 -> s3 [67, 67] { R316 += 1 };
  s0 -> s1 [68, 65535] { R316 += 1 };
  s1 -> s1 [0, 66] { R316 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R316 += 1 };
  s1 -> s1 [68, 65535] { R316 += 1 };
  s2 -> s1 [0, 66] { R316 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R316 += 1, R13 += 1 };
  s2 -> s3 [67, 67] { R316 += 1 };
  s2 -> s1 [68, 65535] { R316 += 1 };
  s3 -> s3 [0, 65535] { R316 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R318 += 1, R196 += 1 };
  s0 -> s2 [0, 65535] { R318 += 1, R195 += 1, R196 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s3 [9, 13] { R318 += 1, R196 += 1 };
  s0 -> s1 [14, 31] { R318 += 1, R196 += 1 };
  s0 -> s3 [32, 32] { R318 += 1, R196 += 1 };
  s0 -> s1 [33, 65535] { R318 += 1, R196 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R318 += 1 };
  s1 -> s1 [0, 65535] { R318 += 1, R196 += 1 };
  s2 -> s1 [0, 8] { R318 += 1, R196 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R318 += 1, R195 += 1, R196 += 1 };
  s2 -> s3 [9, 13] { R318 += 1, R196 += 1 };
  s2 -> s1 [14, 31] { R318 += 1, R196 += 1 };
  s2 -> s3 [32, 32] { R318 += 1, R196 += 1 };
  s2 -> s1 [33, 65535] { R318 += 1, R196 += 1 };
  s3 -> s1 [0, 65535] { R318 += 1, R196 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R318 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R320 += 1, R198 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R320 += 1, R197 += 1, R198 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s1 -> s4 [0, 65535] { R320 += 1 };
  s1 -> s1 [0, 65535] { R320 += 1, R198 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R320 += 1, R198 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R320 += 1, R197 += 1, R198 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R320 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R322 += 1, R200 += 1 };
  s0 -> s2 [0, 65535] { R322 += 1, R199 += 1, R200 += 1 };
  s0 -> s0 [0, 65535] { R321 += 1, R322 += 1 };
  s0 -> s3 [9, 13] { R322 += 1, R200 += 1 };
  s0 -> s1 [14, 31] { R322 += 1, R200 += 1 };
  s0 -> s3 [32, 32] { R322 += 1, R200 += 1 };
  s0 -> s1 [33, 65535] { R322 += 1, R200 += 1 };
  s1 -> s5 [0, 65535] { R322 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R322 += 1, R200 += 1 };
  s2 -> s1 [0, 8] { R322 += 1, R200 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R322 += 1, R199 += 1, R200 += 1 };
  s2 -> s3 [9, 13] { R322 += 1, R200 += 1 };
  s2 -> s1 [14, 31] { R322 += 1, R200 += 1 };
  s2 -> s3 [32, 32] { R322 += 1, R200 += 1 };
  s2 -> s1 [33, 65535] { R322 += 1, R200 += 1 };
  s3 -> s1 [0, 65535] { R322 += 1, R200 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R322 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R324 += 1, R202 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R323 += 1, R324 += 1 };
  s0 -> s2 [0, 65535] { R324 += 1, R201 += 1, R202 += 1 };
  s1 -> s1 [0, 65535] { R324 += 1, R202 += 1, R10 += 1 };
  s1 -> s4 [0, 65535] { R324 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R324 += 1, R202 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R324 += 1, R201 += 1, R202 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R324 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 66] { R326 += 1, R272 += 1 };
  s0 -> s0 [0, 65535] { R325 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R326 += 1, R271 += 1, R272 += 1 };
  s0 -> s1 [68, 65535] { R326 += 1, R272 += 1 };
  s1 -> s1 [0, 66] { R326 += 1, R272 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R326 += 1 };
  s1 -> s1 [68, 65535] { R326 += 1, R272 += 1 };
  s2 -> s1 [0, 66] { R326 += 1, R272 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R326 += 1, R271 += 1, R272 += 1 };
  s2 -> s1 [68, 65535] { R326 += 1, R272 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s0 [0, 65535] { R327 += 1, R328 += 1 };
  s0 -> s1 [0, 65535] { R328 += 1, R273 += 1, R274 += 1 };
  s0 -> s2 [0, 65535] { R328 += 1, R274 += 1, R177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R328 += 1, R273 += 1, R274 += 1 };
  s1 -> s2 [0, 65535] { R328 += 1, R274 += 1, R177 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R328 += 1 };
  s2 -> s2 [0, 65535] { R328 += 1, R274 += 1, R177 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R328 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 67] { R330 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R329 += 1, R330 += 1 };
  s0 -> s2 [0, 65535] { R330 += 1, R275 += 1, R276 += 1 };
  s0 -> s1 [74, 65535] { R330 += 1, R276 += 1 };
  s1 -> s1 [0, 67] { R330 += 1, R276 += 1 };
  s1 -> s1 [0, 65535] { R330 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [74, 65535] { R330 += 1, R276 += 1 };
  s2 -> s1 [0, 67] { R330 += 1, R276 += 1 };
  s2 -> s2 [0, 65535] { R330 += 1, R275 += 1, R276 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [74, 65535] { R330 += 1, R276 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R331 += 1, R332 += 1 };
  s0 -> s1 [0, 65535] { R332 += 1, R289 += 1, R290 += 1 };
  s0 -> s2 [0, 65535] { R332 += 1, R290 += 1, R178 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R332 += 1, R289 += 1, R290 += 1 };
  s1 -> s2 [0, 65535] { R332 += 1, R290 += 1, R178 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R332 += 1 };
  s2 -> s2 [0, 65535] { R332 += 1, R290 += 1, R178 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R332 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 66] { R334 += 1, R292 += 1 };
  s0 -> s0 [0, 65535] { R333 += 1, R334 += 1 };
  s0 -> s2 [0, 65535] { R334 += 1, R291 += 1, R292 += 1 };
  s0 -> s3 [67, 67] { R334 += 1, R292 += 1 };
  s0 -> s4 [67, 67] { R334 += 1, R292 += 1 };
  s0 -> s5 [74, 74] { R334 += 1, R292 += 1 };
  s0 -> s1 [75, 65535] { R334 += 1, R292 += 1 };
  s1 -> s1 [0, 66] { R334 += 1, R292 += 1 };
  s1 -> s3 [67, 67] { R334 += 1, R292 += 1 };
  s1 -> s4 [67, 67] { R334 += 1, R292 += 1 };
  s1 -> s5 [74, 74] { R334 += 1, R292 += 1 };
  s1 -> s1 [75, 65535] { R334 += 1, R292 += 1 };
  s2 -> s1 [0, 66] { R334 += 1, R292 += 1 };
  s2 -> s2 [0, 65535] { R334 += 1, R291 += 1, R292 += 1 };
  s2 -> s3 [67, 67] { R334 += 1, R292 += 1 };
  s2 -> s4 [67, 67] { R334 += 1, R292 += 1 };
  s2 -> s5 [74, 74] { R334 += 1, R292 += 1 };
  s2 -> s1 [75, 65535] { R334 += 1, R292 += 1 };
  s4 -> s4 [0, 67] { R334 += 1, R292 += 1 };
  s4 -> s8 [74, 74] { R334 += 1, R292 += 1 };
  s4 -> s4 [75, 65535] { R334 += 1, R292 += 1 };
  s5 -> s5 [0, 66] { R334 += 1, R292 += 1 };
  s5 -> s5 [0, 65535] { R334 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [67, 67] { R334 += 1, R292 += 1 };
  s5 -> s8 [67, 67] { R334 += 1, R292 += 1 };
  s5 -> s5 [74, 65535] { R334 += 1, R292 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R334 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 67] { R334 += 1, R292 += 1 };
  s8 -> s8 [0, 65535] { R334 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [74, 65535] { R334 += 1, R292 += 1 };
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R188 += 1 };
  s0 -> s0 [0, 65535] { R187 += 1, R188 += 1 };
  s0 -> s2 [9, 13] { R188 += 1 };
  s0 -> s1 [14, 31] { R188 += 1 };
  s0 -> s2 [32, 32] { R188 += 1 };
  s0 -> s1 [33, 65535] { R188 += 1 };
  s1 -> s1 [0, 65535] { R188 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R188 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R190 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R189 += 1, R190 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R190 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R192 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s0 -> s2 [9, 13] { R192 += 1 };
  s0 -> s1 [14, 31] { R192 += 1 };
  s0 -> s2 [32, 32] { R192 += 1 };
  s0 -> s1 [33, 65535] { R192 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R192 += 1 };
  s2 -> s1 [0, 65535] { R192 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R194 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R193 += 1, R194 += 1 };
  s1 -> s1 [0, 65535] { R194 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R276 && R3 = R288 && R4 = R334 && R17 = 0 && R18 - R333 = -1 && R195 - R276 = -1 && R196 = R276 && R197 - R276 = -1 && R198 = R276 && R199 = 0 && R200 = 1 && R201 = 0 && R202 = 1 && R203 = 0 && R204 = 1 && R205 = 0 && R206 = 1 && R271 = 0 && R272 = R276 && R273 = 0 && R274 = R276 && R275 = 0 && R277 = 1 && R278 = R288 && R279 = 1 && R280 = R288 && R281 = 1 && R282 = R288 && R283 = 1 && R284 = R288 && R285 = 1 && R286 = R288 && R287 = 1 && R291 = 0 && R292 = 0 && R293 = 0 && R294 - R333 = -1 && R295 = 0 && R296 - R333 = -1 && R297 = 0 && R298 - R333 = -1 && R299 = 0 && R300 - R333 = -1 && R301 = 0 && R302 - R333 = -1 && R303 = 0 && R304 - R333 = -1 && R305 = 0 && R306 - R333 = -1 && R307 = 0 && R308 - R333 = -1 && R309 = 0 && R310 - R333 = -1 && R311 = R333 && R312 = R334 && R313 = R333 && R314 = R334 && R315 = R333 && R316 = R334 && R317 = R333 && R318 = R334 && R319 = R333 && R320 = R334 && R321 = R333 && R322 = R334 && R323 = R333 && R324 = R334 && R325 = R333 && R326 = R334 && R327 = R333 && R328 = R334 && R329 = R333 && R330 = R334 && R331 = R333 && R332 = R334 && R0 != 0 && R1 != 0 && R12 < 1 && R13 < 1 && 0 < R276 && 0 < R288 && R333 - R334 < 1 && 0 < R333 && (R5 != 0 || ((R0 != R180 || R179 - R180 = -1 || R180 < 0) && (R0 = R180 || R0 < 1))) && (R5 != 0 || ((R0 != R182 || R181 - R182 = -1 || R182 < 0) && (R0 = R182 || R0 < 1))) && (R7 != 0 || ((R1 != R188 || R187 - R188 = -1 || R188 < 0) && (R1 = R188 || R1 < 1))) && (R7 != 0 || ((R1 != R190 || R189 - R190 = -1 || R190 < 0) && (R1 = R190 || R1 < 1))) && (R183 != 0 || ((R6 != 0 || ((R0 != R184 || R184 = 1 || R184 < 0) && (R0 = R184 || R184 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R184 || R184 = 1 || R184 < 0) && (R184 != 1 || -1 < R0) && (R0 = R184 || R184 = 1))))) && (R185 != 0 || ((R6 != 0 || ((R0 != R186 || R186 = 1 || R186 < 0) && (R0 = R186 || R186 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R186 || R186 = 1 || R186 < 0) && (R186 != 1 || -1 < R0) && (R0 = R186 || R186 = 1))))) && (R191 != 0 || ((R8 != 0 || ((R1 != R192 || R192 = 1 || R192 < 0) && (R1 = R192 || R192 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R192 || R192 = 1 || R192 < 0) && (R192 != 1 || -1 < R1) && (R1 = R192 || R192 = 1))))) && (R193 != 0 || ((R8 != 0 || ((R1 != R194 || R194 = 1 || R194 < 0) && (R1 = R194 || R194 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R194 || R194 = 1 || R194 < 0) && (R194 != 1 || -1 < R1) && (R1 = R194 || R194 = 1))))) && (R5 = 0 || (R0 = R180 && R179 - R180 = -1)) && (R5 = 0 || (R0 = R182 && R181 - R182 = -1)) && (R7 = 0 || (R1 = R188 && R187 - R188 = -1)) && (R7 = 0 || (R1 = R190 && R189 - R190 = -1)) && (R178 = 0 || (R289 = 0 && R290 = 0)) && (R183 = 0 || (R6 = 0 && R0 < 0)) && (R185 = 0 || (R6 = 0 && R0 < 0)) && (R191 = 0 || (R8 = 0 && R1 < 0)) && (R193 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
