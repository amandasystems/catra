// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R2, R3, R4, R6, R7, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining c7
automaton c7_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R91 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R102 += 1, R103 += 1 };
  s0 -> s1 [9, 9] { R103 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R104 += 1, R105 += 1 };
  s0 -> s1 [0, 65535] { R105 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R105 += 1, R4 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R117 += 1 };
  s0 -> s0 [0, 65535] { R116 += 1, R117 += 1 };
  s0 -> s2 [69, 69] { R117 += 1 };
  s0 -> s1 [70, 65535] { R117 += 1 };
  s1 -> s1 [0, 64] { R117 += 1 };
  s1 -> s2 [69, 69] { R117 += 1 };
  s1 -> s1 [70, 65535] { R117 += 1 };
  s2 -> s2 [0, 64] { R117 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [69, 65535] { R117 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R119 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R118 += 1, R119 += 1 };
  s1 -> s1 [0, 65535] { R119 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 68] { R121 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R120 += 1, R121 += 1 };
  s0 -> s2 [0, 65535] { R121 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [69, 69] { R121 += 1 };
  s0 -> s1 [70, 65535] { R121 += 1, R7 += 1 };
  s1 -> s1 [0, 68] { R121 += 1, R7 += 1 };
  s1 -> s3 [69, 69] { R121 += 1 };
  s1 -> s1 [70, 65535] { R121 += 1, R7 += 1 };
  s2 -> s1 [0, 68] { R121 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R121 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [69, 69] { R121 += 1 };
  s2 -> s1 [70, 65535] { R121 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R121 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R123 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R122 += 1, R123 += 1 };
  s0 -> s2 [0, 65535] { R123 += 1, R94 += 1, R95 += 1 };
  s0 -> s3 [9, 13] { R123 += 1, R95 += 1 };
  s0 -> s1 [14, 31] { R123 += 1, R95 += 1 };
  s0 -> s3 [32, 32] { R123 += 1, R95 += 1 };
  s0 -> s1 [33, 65535] { R123 += 1, R95 += 1 };
  s1 -> s1 [0, 65535] { R123 += 1, R95 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R123 += 1 };
  s2 -> s1 [0, 8] { R123 += 1, R95 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R123 += 1, R94 += 1, R95 += 1 };
  s2 -> s3 [9, 13] { R123 += 1, R95 += 1 };
  s2 -> s1 [14, 31] { R123 += 1, R95 += 1 };
  s2 -> s3 [32, 32] { R123 += 1, R95 += 1 };
  s2 -> s1 [33, 65535] { R123 += 1, R95 += 1 };
  s3 -> s1 [0, 65535] { R123 += 1, R95 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R123 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R125 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R124 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R125 += 1, R97 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R125 += 1, R96 += 1, R97 += 1 };
  s1 -> s2 [0, 65535] { R125 += 1, R97 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R125 += 1 };
  s2 -> s2 [0, 65535] { R125 += 1, R97 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R125 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R127 += 1, R99 += 1 };
  s0 -> s0 [0, 65535] { R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R127 += 1, R98 += 1, R99 += 1 };
  s0 -> s3 [9, 13] { R127 += 1, R99 += 1 };
  s0 -> s1 [14, 31] { R127 += 1, R99 += 1 };
  s0 -> s3 [32, 32] { R127 += 1, R99 += 1 };
  s0 -> s1 [33, 65535] { R127 += 1, R99 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R127 += 1 };
  s1 -> s1 [0, 65535] { R127 += 1, R99 += 1 };
  s2 -> s1 [0, 8] { R127 += 1, R99 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R127 += 1, R98 += 1, R99 += 1 };
  s2 -> s3 [9, 13] { R127 += 1, R99 += 1 };
  s2 -> s1 [14, 31] { R127 += 1, R99 += 1 };
  s2 -> s3 [32, 32] { R127 += 1, R99 += 1 };
  s2 -> s1 [33, 65535] { R127 += 1, R99 += 1 };
  s3 -> s1 [0, 65535] { R127 += 1, R99 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R127 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R129 += 1, R101 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R129 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R129 += 1, R101 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R129 += 1 };
  s2 -> s1 [0, 65535] { R129 += 1, R101 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R129 += 1, R100 += 1, R101 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R129 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 68] { R131 += 1, R107 += 1 };
  s0 -> s2 [0, 65535] { R131 += 1, R106 += 1, R107 += 1 };
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s1 [70, 65535] { R131 += 1, R107 += 1 };
  s1 -> s1 [0, 68] { R131 += 1, R107 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R131 += 1 };
  s1 -> s1 [70, 65535] { R131 += 1, R107 += 1 };
  s2 -> s1 [0, 68] { R131 += 1, R107 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R131 += 1, R106 += 1, R107 += 1 };
  s2 -> s1 [70, 65535] { R131 += 1, R107 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R133 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R109 += 1, R92 += 1 };
  s1 -> s1 [0, 65535] { R133 += 1, R108 += 1, R109 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R133 += 1, R109 += 1, R92 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R133 += 1 };
  s2 -> s2 [0, 65535] { R133 += 1, R109 += 1, R92 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R133 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 69] { R135 += 1, R111 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R110 += 1, R111 += 1 };
  s0 -> s3 [71, 71] { R135 += 1, R111 += 1 };
  s0 -> s1 [72, 65535] { R135 += 1, R111 += 1 };
  s1 -> s1 [0, 69] { R135 += 1, R111 += 1 };
  s1 -> s3 [71, 71] { R135 += 1, R111 += 1 };
  s1 -> s1 [72, 65535] { R135 += 1, R111 += 1 };
  s2 -> s1 [0, 69] { R135 += 1, R111 += 1 };
  s2 -> s2 [0, 65535] { R135 += 1, R110 += 1, R111 += 1 };
  s2 -> s3 [71, 71] { R135 += 1, R111 += 1 };
  s2 -> s1 [72, 65535] { R135 += 1, R111 += 1 };
  s3 -> s3 [0, 69] { R135 += 1, R111 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R135 += 1 };
  s3 -> s3 [71, 65535] { R135 += 1, R111 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R113 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R112 += 1, R113 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s1 -> s4 [0, 65535] { R137 += 1 };
  s1 -> s1 [0, 65535] { R137 += 1, R113 += 1, R93 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R137 += 1, R113 += 1, R93 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1, R112 += 1, R113 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R137 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R139 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [69, 69] { R139 += 1, R115 += 1 };
  s0 -> s4 [69, 69] { R139 += 1, R115 += 1 };
  s0 -> s1 [72, 65535] { R139 += 1, R115 += 1 };
  s1 -> s1 [0, 68] { R139 += 1, R115 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R139 += 1 };
  s1 -> s3 [69, 69] { R139 += 1, R115 += 1 };
  s1 -> s4 [69, 69] { R139 += 1, R115 += 1 };
  s1 -> s1 [72, 65535] { R139 += 1, R115 += 1 };
  s2 -> s1 [0, 68] { R139 += 1, R115 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R139 += 1, R114 += 1, R115 += 1 };
  s2 -> s3 [69, 69] { R139 += 1, R115 += 1 };
  s2 -> s4 [69, 69] { R139 += 1, R115 += 1 };
  s2 -> s1 [72, 65535] { R139 += 1, R115 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R139 += 1 };
  s4 -> s4 [0, 69] { R139 += 1, R115 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R139 += 1 };
  s4 -> s4 [72, 65535] { R139 += 1, R115 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R111 && R1 = R139 && R6 = 0 && R7 - R110 = -1 && R94 - R111 = -1 && R95 = R111 && R96 - R111 = -1 && R97 = R111 && R98 = 0 && R99 = 1 && R100 = 0 && R101 = 1 && R102 = 0 && R103 = 1 && R104 = 0 && R105 = 1 && R116 = 1 && R117 = R139 && R118 = 1 && R119 = R139 && R120 = 1 && R121 = R139 && R122 = 1 && R123 = R139 && R124 = 1 && R125 = R139 && R126 = 1 && R127 = R139 && R128 = 1 && R129 = R139 && R130 = 1 && R131 = R139 && R132 = 1 && R133 = R139 && R134 = 1 && R135 = R139 && R136 = 1 && R137 = R139 && R138 = 1 && R91 < 1 && R110 - R111 < 1 && -1 < R110 && 0 < R111 && 0 < R139 && (R106 != R110 || R107 = R111 || (R92 = 0 && R110 = R111)) && (R108 != R110 || R109 = R111 || (R92 = 0 && R110 = R111)) && (R112 != 0 || R110 = R113 || (R93 = 0 && R110 = 0)) && (R114 != 0 || R110 = R115 || (R93 = 0 && R110 = 0)) && (R106 = R110 || (R92 = 0 && R110 = R111)) && (R108 = R110 || (R92 = 0 && R110 = R111)) && (R112 = 0 || (R93 = 0 && R110 = 0)) && (R114 = 0 || (R93 = 0 && R110 = 0));
// End of Parikh automata intersection problem
