// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R5, R8, R9;
synchronised {  // Automata constraining P21
automaton P21_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
synchronised {  // Automata constraining key2
automaton key2_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton key2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key2_2 {
  init s0;
  s0 -> s1 [0, 78];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535];
  s1 -> s1 [0, 78];
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key2_3 {
  init s0;
  s0 -> s1 [0, 78] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s1 [80, 65535] { R16 += 1 };
  s1 -> s1 [0, 78] { R16 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R16 += 1 };
  accepting s0, s1;
};
automaton key2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R18 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s1 -> s1 [0, 65535] { R18 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_5 {
  init s0;
  s0 -> s1 [0, 79] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s1 [91, 65535] { R20 += 1 };
  s1 -> s1 [0, 79] { R20 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R20 += 1 };
  accepting s0, s1;
};
automaton key2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R22 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R22 += 1, R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key2_7 {
  init s0;
  s0 -> s1 [0, 78] { R24 += 1 };
  s0 -> s0 [0, 65535] { R23 += 1, R24 += 1 };
  s0 -> s2 [79, 79] { R24 += 1 };
  s0 -> s3 [79, 79] { R24 += 1 };
  s0 -> s1 [91, 65535] { R24 += 1 };
  s1 -> s1 [0, 78] { R24 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [79, 79] { R24 += 1 };
  s1 -> s3 [79, 79] { R24 += 1 };
  s1 -> s1 [91, 65535] { R24 += 1 };
  s2 -> s2 [0, 79] { R24 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R24 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [65, 65];
  s0 -> s0 [66, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 64];
  s0 -> s0 [0, 65535] { R2 += 1 };
  s0 -> s2 [65, 65];
  s0 -> s1 [66, 65535];
  s1 -> s1 [0, 64];
  s1 -> s2 [65, 65];
  s1 -> s1 [66, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 64] { R12 += 1 };
  s0 -> s0 [0, 65535] { R11 += 1, R12 += 1 };
  s0 -> s2 [65, 65] { R12 += 1 };
  s0 -> s1 [66, 65535] { R12 += 1 };
  s1 -> s1 [0, 64] { R12 += 1 };
  s1 -> s2 [65, 65] { R12 += 1 };
  s1 -> s1 [66, 65535] { R12 += 1 };
  s2 -> s2 [0, 65535] { R12 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R14 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R13 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R14 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R0 = R12 && R11 = 0 && -1 < R1 && R2 < 1 && R5 < 1 && -1 < R12 && (R1 != 0 || R9 = 0 || (R15 = 0 && R16 = 0)) && (R1 != 0 || R9 = 0 || (R17 = 0 && R18 = 0)) && (R1 != 0 || R9 = 0 || (R19 = 0 && R20 = 0)) && (R13 != 0 || R12 = R14 || (R8 = 0 && R12 = 0)) && (R15 != 0 || R1 = R16 || R1 < 1) && (R17 != 0 || R1 = R18 || R1 < 1) && (R19 != 0 || R1 = R20 || R1 < 1) && (R10 = 0 || (R21 = 0 && R22 = 0 && R23 = 0 && R24 = 0)) && (R13 = 0 || (R8 = 0 && R12 = 0)) && (R15 = 0 || R1 < 1) && (R17 = 0 || R1 < 1) && (R19 = 0 || R1 < 1);
// End of Parikh automata intersection problem
