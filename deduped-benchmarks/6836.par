// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R11, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R2, R3, R4, R5, R6, R7, R8, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R88 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R106 += 1, R107 += 1 };
  s0 -> s1 [13, 13] { R107 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R109 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R108 += 1, R109 += 1 };
  s1 -> s1 [0, 65535] { R109 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R111 += 1 };
  s0 -> s0 [0, 65535] { R110 += 1, R111 += 1 };
  s0 -> s2 [9, 13] { R111 += 1 };
  s0 -> s1 [14, 31] { R111 += 1 };
  s0 -> s2 [32, 32] { R111 += 1 };
  s0 -> s1 [33, 65535] { R111 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R111 += 1 };
  s2 -> s1 [0, 65535] { R111 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R112 += 1, R113 += 1 };
  s0 -> s1 [0, 65535] { R113 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R113 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s1 [0, 65535] { R137 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R137 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s1 [0, 65535] { R139 += 1, R98 += 1, R99 += 1 };
  s0 -> s2 [11, 11] { R139 += 1, R99 += 1 };
  s1 -> s1 [0, 65535] { R139 += 1, R98 += 1, R99 += 1 };
  s1 -> s2 [11, 11] { R139 += 1, R99 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R100 += 1, R101 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R101 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R100 += 1, R101 += 1 };
  s1 -> s2 [0, 65535] { R141 += 1, R101 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R101 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R141 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R141 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R143 += 1, R103 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R102 += 1, R103 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s3 [9, 13] { R143 += 1, R103 += 1 };
  s0 -> s1 [14, 31] { R143 += 1, R103 += 1 };
  s0 -> s3 [32, 32] { R143 += 1, R103 += 1 };
  s0 -> s1 [33, 65535] { R143 += 1, R103 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R103 += 1 };
  s1 -> s5 [0, 65535] { R143 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R143 += 1, R103 += 1 };
  s2 -> s2 [0, 65535] { R143 += 1, R102 += 1, R103 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R143 += 1, R103 += 1 };
  s2 -> s1 [14, 31] { R143 += 1, R103 += 1 };
  s2 -> s3 [32, 32] { R143 += 1, R103 += 1 };
  s2 -> s1 [33, 65535] { R143 += 1, R103 += 1 };
  s3 -> s1 [0, 65535] { R143 += 1, R103 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R143 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R145 += 1, R105 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R104 += 1, R105 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R105 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R145 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R145 += 1, R105 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R145 += 1, R104 += 1, R105 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R145 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R147 += 1, R119 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s3 [69, 69] { R147 += 1, R119 += 1 };
  s0 -> s1 [70, 65535] { R147 += 1, R119 += 1 };
  s1 -> s1 [0, 64] { R147 += 1, R119 += 1 };
  s1 -> s3 [69, 69] { R147 += 1, R119 += 1 };
  s1 -> s1 [70, 65535] { R147 += 1, R119 += 1 };
  s2 -> s1 [0, 64] { R147 += 1, R119 += 1 };
  s2 -> s2 [0, 65535] { R147 += 1, R118 += 1, R119 += 1 };
  s2 -> s3 [69, 69] { R147 += 1, R119 += 1 };
  s2 -> s1 [70, 65535] { R147 += 1, R119 += 1 };
  s3 -> s3 [0, 64] { R147 += 1, R119 += 1 };
  s3 -> s3 [0, 65535] { R147 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [69, 65535] { R147 += 1, R119 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R149 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R121 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R120 += 1, R121 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R149 += 1, R121 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R149 += 1 };
  s2 -> s2 [0, 65535] { R149 += 1, R121 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R149 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R151 += 1, R123 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R123 += 1, R10 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R122 += 1, R123 += 1 };
  s0 -> s4 [69, 69] { R151 += 1, R123 += 1 };
  s0 -> s1 [70, 65535] { R151 += 1, R123 += 1, R11 += 1 };
  s1 -> s1 [0, 68] { R151 += 1, R123 += 1, R11 += 1 };
  s1 -> s4 [69, 69] { R151 += 1, R123 += 1 };
  s1 -> s1 [70, 65535] { R151 += 1, R123 += 1, R11 += 1 };
  s2 -> s1 [0, 68] { R151 += 1, R123 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R151 += 1, R123 += 1, R10 += 1, R11 += 1 };
  s2 -> s4 [69, 69] { R151 += 1, R123 += 1 };
  s2 -> s1 [70, 65535] { R151 += 1, R123 += 1, R11 += 1 };
  s3 -> s1 [0, 68] { R151 += 1, R123 += 1, R11 += 1 };
  s3 -> s2 [0, 65535] { R151 += 1, R123 += 1, R10 += 1, R11 += 1 };
  s3 -> s3 [0, 65535] { R151 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [69, 69] { R151 += 1, R123 += 1 };
  s3 -> s1 [70, 65535] { R151 += 1, R123 += 1, R11 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R151 += 1, R123 += 1 };
  s4 -> s6 [0, 65535] { R151 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R151 += 1 };
  accepting s4, s5, s6;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 8] { R153 += 1, R125 += 1, R91 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R125 += 1, R90 += 1, R91 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R124 += 1, R125 += 1 };
  s0 -> s4 [9, 13] { R153 += 1, R125 += 1, R91 += 1 };
  s0 -> s1 [14, 31] { R153 += 1, R125 += 1, R91 += 1 };
  s0 -> s4 [32, 32] { R153 += 1, R125 += 1, R91 += 1 };
  s0 -> s1 [33, 65535] { R153 += 1, R125 += 1, R91 += 1 };
  s1 -> s6 [0, 65535] { R153 += 1 };
  s1 -> s7 [0, 65535] { R153 += 1, R125 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R125 += 1, R91 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R153 += 1, R125 += 1, R91 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R125 += 1, R90 += 1, R91 += 1 };
  s2 -> s6 [0, 65535] { R153 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R153 += 1, R125 += 1, R91 += 1 };
  s2 -> s1 [14, 31] { R153 += 1, R125 += 1, R91 += 1 };
  s2 -> s4 [32, 32] { R153 += 1, R125 += 1, R91 += 1 };
  s2 -> s1 [33, 65535] { R153 += 1, R125 += 1, R91 += 1 };
  s3 -> s1 [0, 8] { R153 += 1, R125 += 1, R91 += 1 };
  s3 -> s2 [0, 65535] { R153 += 1, R125 += 1, R90 += 1, R91 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R153 += 1, R124 += 1, R125 += 1 };
  s3 -> s4 [9, 13] { R153 += 1, R125 += 1, R91 += 1 };
  s3 -> s1 [14, 31] { R153 += 1, R125 += 1, R91 += 1 };
  s3 -> s4 [32, 32] { R153 += 1, R125 += 1, R91 += 1 };
  s3 -> s1 [33, 65535] { R153 += 1, R125 += 1, R91 += 1 };
  s4 -> s1 [0, 65535] { R153 += 1, R125 += 1, R91 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R153 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R153 += 1 };
  s7 -> s7 [0, 65535] { R153 += 1, R125 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s1 [0, 65535] { R155 += 1, R126 += 1, R127 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R127 += 1, R92 += 1, R93 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R127 += 1, R93 += 1, R3 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R155 += 1, R126 += 1, R127 += 1 };
  s1 -> s2 [0, 65535] { R155 += 1, R127 += 1, R92 += 1, R93 += 1 };
  s1 -> s3 [0, 65535] { R155 += 1, R127 += 1, R93 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R155 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R155 += 1, R127 += 1, R92 += 1, R93 += 1 };
  s2 -> s3 [0, 65535] { R155 += 1, R127 += 1, R93 += 1, R3 += 1 };
  s3 -> s4 [0, 65535] { R155 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R155 += 1, R127 += 1 };
  s3 -> s3 [0, 65535] { R155 += 1, R127 += 1, R93 += 1, R3 += 1 };
  s4 -> s4 [0, 65535] { R155 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R155 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R155 += 1, R127 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 8] { R157 += 1, R129 += 1, R95 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R129 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s3 [0, 65535] { R157 += 1, R128 += 1, R129 += 1 };
  s0 -> s4 [9, 13] { R157 += 1, R129 += 1, R95 += 1 };
  s0 -> s1 [14, 31] { R157 += 1, R129 += 1, R95 += 1 };
  s0 -> s4 [32, 32] { R157 += 1, R129 += 1, R95 += 1 };
  s0 -> s1 [33, 65535] { R157 += 1, R129 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R157 += 1, R129 += 1 };
  s1 -> s6 [0, 65535] { R157 += 1 };
  s1 -> s1 [0, 65535] { R157 += 1, R129 += 1, R95 += 1 };
  s2 -> s1 [0, 8] { R157 += 1, R129 += 1, R95 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R157 += 1, R129 += 1, R94 += 1, R95 += 1 };
  s2 -> s6 [0, 65535] { R157 += 1 };
  s2 -> s4 [9, 13] { R157 += 1, R129 += 1, R95 += 1 };
  s2 -> s1 [14, 31] { R157 += 1, R129 += 1, R95 += 1 };
  s2 -> s4 [32, 32] { R157 += 1, R129 += 1, R95 += 1 };
  s2 -> s1 [33, 65535] { R157 += 1, R129 += 1, R95 += 1 };
  s3 -> s1 [0, 8] { R157 += 1, R129 += 1, R95 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R157 += 1, R129 += 1, R94 += 1, R95 += 1 };
  s3 -> s3 [0, 65535] { R157 += 1, R128 += 1, R129 += 1 };
  s3 -> s4 [9, 13] { R157 += 1, R129 += 1, R95 += 1 };
  s3 -> s1 [14, 31] { R157 += 1, R129 += 1, R95 += 1 };
  s3 -> s4 [32, 32] { R157 += 1, R129 += 1, R95 += 1 };
  s3 -> s1 [33, 65535] { R157 += 1, R129 += 1, R95 += 1 };
  s4 -> s1 [0, 65535] { R157 += 1, R129 += 1, R95 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R157 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R157 += 1, R129 += 1 };
  s7 -> s6 [0, 65535] { R157 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R159 += 1, R131 += 1, R97 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R131 += 1, R96 += 1, R97 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s3 [0, 65535] { R159 += 1, R130 += 1, R131 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R159 += 1, R131 += 1, R97 += 1, R4 += 1 };
  s1 -> s6 [0, 65535] { R159 += 1, R131 += 1 };
  s1 -> s5 [0, 65535] { R159 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R159 += 1, R131 += 1, R97 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R159 += 1, R131 += 1, R96 += 1, R97 += 1 };
  s2 -> s5 [0, 65535] { R159 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R159 += 1, R131 += 1, R97 += 1, R4 += 1 };
  s3 -> s2 [0, 65535] { R159 += 1, R131 += 1, R96 += 1, R97 += 1 };
  s3 -> s3 [0, 65535] { R159 += 1, R130 += 1, R131 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R159 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R159 += 1, R131 += 1 };
  s6 -> s5 [0, 65535] { R159 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 68] { R161 += 1, R133 += 1, R115 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R133 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [0, 65535] { R161 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s4 [69, 69] { R161 += 1, R133 += 1, R115 += 1 };
  s0 -> s1 [70, 65535] { R161 += 1, R133 += 1, R115 += 1 };
  s1 -> s1 [0, 68] { R161 += 1, R133 += 1, R115 += 1 };
  s1 -> s4 [69, 69] { R161 += 1, R133 += 1, R115 += 1 };
  s1 -> s1 [70, 65535] { R161 += 1, R133 += 1, R115 += 1 };
  s2 -> s1 [0, 68] { R161 += 1, R133 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R133 += 1, R114 += 1, R115 += 1 };
  s2 -> s4 [69, 69] { R161 += 1, R133 += 1, R115 += 1 };
  s2 -> s1 [70, 65535] { R161 += 1, R133 += 1, R115 += 1 };
  s3 -> s1 [0, 68] { R161 += 1, R133 += 1, R115 += 1 };
  s3 -> s2 [0, 65535] { R161 += 1, R133 += 1, R114 += 1, R115 += 1 };
  s3 -> s3 [0, 65535] { R161 += 1, R132 += 1, R133 += 1 };
  s3 -> s4 [69, 69] { R161 += 1, R133 += 1, R115 += 1 };
  s3 -> s1 [70, 65535] { R161 += 1, R133 += 1, R115 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R161 += 1, R133 += 1, R115 += 1 };
  s4 -> s6 [0, 65535] { R161 += 1 };
  s4 -> s7 [0, 65535] { R161 += 1, R133 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R161 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R161 += 1 };
  s7 -> s7 [0, 65535] { R161 += 1, R133 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R163 += 1, R135 += 1, R116 += 1, R117 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R135 += 1, R117 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s3 [0, 65535] { R163 += 1, R134 += 1, R135 += 1 };
  s1 -> s1 [0, 65535] { R163 += 1, R135 += 1, R116 += 1, R117 += 1 };
  s1 -> s2 [0, 65535] { R163 += 1, R135 += 1, R117 += 1, R89 += 1 };
  s1 -> s5 [0, 65535] { R163 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R163 += 1, R135 += 1, R117 += 1, R89 += 1 };
  s2 -> s5 [0, 65535] { R163 += 1 };
  s2 -> s6 [0, 65535] { R163 += 1, R135 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R163 += 1, R135 += 1, R116 += 1, R117 += 1 };
  s3 -> s2 [0, 65535] { R163 += 1, R135 += 1, R117 += 1, R89 += 1 };
  s3 -> s3 [0, 65535] { R163 += 1, R134 += 1, R135 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R163 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R163 += 1 };
  s6 -> s6 [0, 65535] { R163 += 1, R135 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R0 = R115 && R1 - R135 = 1 && R2 - R163 = 1 && R10 = 0 && R11 - R114 = -1 && R90 - R115 = -1 && R91 = R115 && R92 - R115 = -1 && R93 = R115 && R94 = 0 && R95 = 1 && R96 = 0 && R97 = 1 && R98 = R135 && R99 - R135 = 1 && R100 = R135 && R101 - R135 = 1 && R102 = 0 && R103 = 1 && R104 = 0 && R105 = 1 && R106 = R163 && R107 - R163 = 1 && R108 = R163 && R109 - R163 = 1 && R110 = 0 && R111 = 1 && R112 = 0 && R113 = 1 && R118 = 0 && R119 = R135 && R120 = 0 && R121 = R135 && R122 = 0 && R123 = R135 && R124 = 0 && R125 = R135 && R126 = 0 && R127 = R135 && R128 = 0 && R129 = R135 && R130 = 0 && R131 = R135 && R132 = 0 && R133 = R135 && R134 = 0 && R136 = 0 && R137 = R163 && R138 = 0 && R139 = R163 && R140 = 0 && R141 = R163 && R142 = 0 && R143 = R163 && R144 = 0 && R145 = R163 && R146 = 0 && R147 = R163 && R148 = 0 && R149 = R163 && R150 = 0 && R151 = R163 && R152 = 0 && R153 = R163 && R154 = 0 && R155 = R163 && R156 = 0 && R157 = R163 && R158 = 0 && R159 = R163 && R160 = 0 && R161 = R163 && R162 = 0 && R88 < 1 && R114 - R115 < 1 && -1 < R114 && 0 < R115 && -1 < R135 && -1 < R163 && (R114 != R116 || R115 = R117 || ((R89 != 0 || R115 - R116 < 1 || R116 < 0) && (R89 = 0 || R115 < R116 || R116 < 0))) && (R114 = R116 || (R89 = 0 && R114 = R115));
// End of Parikh automata intersection problem
