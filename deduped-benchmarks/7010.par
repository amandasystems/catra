// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R12, R13, R2, R254, R255, R3, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R487, R488, R489, R490, R491, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R255 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R255 += 1 };
  s1 -> s1 [0, 60] { R255 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R255 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R453 += 1 };
  s0 -> s0 [0, 65535] { R452 += 1, R453 += 1 };
  s0 -> s1 [91, 65535] { R453 += 1 };
  s1 -> s1 [0, 64] { R453 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R453 += 1 };
  accepting s0, s1;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R455 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R454 += 1, R455 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R455 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R457 += 1, R377 += 1 };
  s0 -> s0 [0, 65535] { R456 += 1, R457 += 1 };
  s0 -> s2 [0, 65535] { R457 += 1, R376 += 1, R377 += 1 };
  s0 -> s3 [9, 13] { R457 += 1, R377 += 1 };
  s0 -> s1 [14, 31] { R457 += 1, R377 += 1 };
  s0 -> s3 [32, 32] { R457 += 1, R377 += 1 };
  s0 -> s1 [33, 65535] { R457 += 1, R377 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R457 += 1, R377 += 1 };
  s1 -> s5 [0, 65535] { R457 += 1 };
  s2 -> s1 [0, 8] { R457 += 1, R377 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R457 += 1, R376 += 1, R377 += 1 };
  s2 -> s3 [9, 13] { R457 += 1, R377 += 1 };
  s2 -> s1 [14, 31] { R457 += 1, R377 += 1 };
  s2 -> s3 [32, 32] { R457 += 1, R377 += 1 };
  s2 -> s1 [33, 65535] { R457 += 1, R377 += 1 };
  s3 -> s1 [0, 65535] { R457 += 1, R377 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R457 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R458 += 1, R459 += 1 };
  s0 -> s1 [0, 65535] { R459 += 1, R378 += 1, R379 += 1 };
  s0 -> s2 [0, 65535] { R459 += 1, R379 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R459 += 1, R378 += 1, R379 += 1 };
  s1 -> s2 [0, 65535] { R459 += 1, R379 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R459 += 1 };
  s2 -> s2 [0, 65535] { R459 += 1, R379 += 1, R4 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R459 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R461 += 1, R381 += 1 };
  s0 -> s2 [0, 65535] { R461 += 1, R380 += 1, R381 += 1 };
  s0 -> s0 [0, 65535] { R460 += 1, R461 += 1 };
  s0 -> s3 [9, 13] { R461 += 1, R381 += 1 };
  s0 -> s1 [14, 31] { R461 += 1, R381 += 1 };
  s0 -> s3 [32, 32] { R461 += 1, R381 += 1 };
  s0 -> s1 [33, 65535] { R461 += 1, R381 += 1 };
  s1 -> s1 [0, 65535] { R461 += 1, R381 += 1 };
  s1 -> s5 [0, 65535] { R461 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R461 += 1, R381 += 1 };
  s2 -> s2 [0, 65535] { R461 += 1, R380 += 1, R381 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R461 += 1, R381 += 1 };
  s2 -> s1 [14, 31] { R461 += 1, R381 += 1 };
  s2 -> s3 [32, 32] { R461 += 1, R381 += 1 };
  s2 -> s1 [33, 65535] { R461 += 1, R381 += 1 };
  s3 -> s1 [0, 65535] { R461 += 1, R381 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R461 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R463 += 1, R383 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R463 += 1, R382 += 1, R383 += 1 };
  s0 -> s0 [0, 65535] { R462 += 1, R463 += 1 };
  s1 -> s1 [0, 65535] { R463 += 1, R383 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R463 += 1 };
  s2 -> s1 [0, 65535] { R463 += 1, R383 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R463 += 1, R382 += 1, R383 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R463 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 64] { R469 += 1 };
  s0 -> s0 [0, 65535] { R468 += 1, R469 += 1 };
  s0 -> s2 [88, 88] { R469 += 1 };
  s0 -> s1 [89, 65535] { R469 += 1 };
  s1 -> s1 [0, 64] { R469 += 1 };
  s1 -> s2 [88, 88] { R469 += 1 };
  s1 -> s1 [89, 65535] { R469 += 1 };
  s2 -> s2 [0, 64] { R469 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [88, 65535] { R469 += 1 };
  accepting s2;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R471 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R470 += 1, R471 += 1 };
  s1 -> s1 [0, 65535] { R471 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 87] { R473 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R472 += 1, R473 += 1 };
  s0 -> s2 [0, 65535] { R473 += 1, R12 += 1, R13 += 1 };
  s0 -> s3 [88, 88] { R473 += 1 };
  s0 -> s1 [89, 65535] { R473 += 1, R13 += 1 };
  s1 -> s1 [0, 87] { R473 += 1, R13 += 1 };
  s1 -> s3 [88, 88] { R473 += 1 };
  s1 -> s1 [89, 65535] { R473 += 1, R13 += 1 };
  s2 -> s1 [0, 87] { R473 += 1, R13 += 1 };
  s2 -> s2 [0, 65535] { R473 += 1, R12 += 1, R13 += 1 };
  s2 -> s3 [88, 88] { R473 += 1 };
  s2 -> s1 [89, 65535] { R473 += 1, R13 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R473 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R475 += 1, R393 += 1 };
  s0 -> s2 [0, 65535] { R475 += 1, R392 += 1, R393 += 1 };
  s0 -> s0 [0, 65535] { R474 += 1, R475 += 1 };
  s0 -> s3 [9, 13] { R475 += 1, R393 += 1 };
  s0 -> s1 [14, 31] { R475 += 1, R393 += 1 };
  s0 -> s3 [32, 32] { R475 += 1, R393 += 1 };
  s0 -> s1 [33, 65535] { R475 += 1, R393 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R475 += 1, R393 += 1 };
  s1 -> s5 [0, 65535] { R475 += 1 };
  s2 -> s1 [0, 8] { R475 += 1, R393 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R475 += 1, R392 += 1, R393 += 1 };
  s2 -> s3 [9, 13] { R475 += 1, R393 += 1 };
  s2 -> s1 [14, 31] { R475 += 1, R393 += 1 };
  s2 -> s3 [32, 32] { R475 += 1, R393 += 1 };
  s2 -> s1 [33, 65535] { R475 += 1, R393 += 1 };
  s3 -> s1 [0, 65535] { R475 += 1, R393 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R475 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R477 += 1, R395 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R477 += 1, R394 += 1, R395 += 1 };
  s0 -> s0 [0, 65535] { R476 += 1, R477 += 1 };
  s1 -> s1 [0, 65535] { R477 += 1, R395 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R477 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R477 += 1, R395 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R477 += 1, R394 += 1, R395 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R477 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R479 += 1, R397 += 1 };
  s0 -> s2 [0, 65535] { R479 += 1, R396 += 1, R397 += 1 };
  s0 -> s0 [0, 65535] { R478 += 1, R479 += 1 };
  s0 -> s3 [9, 13] { R479 += 1, R397 += 1 };
  s0 -> s1 [14, 31] { R479 += 1, R397 += 1 };
  s0 -> s3 [32, 32] { R479 += 1, R397 += 1 };
  s0 -> s1 [33, 65535] { R479 += 1, R397 += 1 };
  s1 -> s5 [0, 65535] { R479 += 1 };
  s1 -> s1 [0, 65535] { R479 += 1, R397 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R479 += 1, R397 += 1 };
  s2 -> s2 [0, 65535] { R479 += 1, R396 += 1, R397 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R479 += 1, R397 += 1 };
  s2 -> s1 [14, 31] { R479 += 1, R397 += 1 };
  s2 -> s3 [32, 32] { R479 += 1, R397 += 1 };
  s2 -> s1 [33, 65535] { R479 += 1, R397 += 1 };
  s3 -> s1 [0, 65535] { R479 += 1, R397 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R479 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R481 += 1, R398 += 1, R399 += 1 };
  s0 -> s0 [0, 65535] { R480 += 1, R481 += 1 };
  s0 -> s2 [0, 65535] { R481 += 1, R399 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R481 += 1, R398 += 1, R399 += 1 };
  s1 -> s2 [0, 65535] { R481 += 1, R399 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R481 += 1 };
  s2 -> s2 [0, 65535] { R481 += 1, R399 += 1, R9 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R481 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 87] { R483 += 1, R447 += 1 };
  s0 -> s0 [0, 65535] { R482 += 1, R483 += 1 };
  s0 -> s2 [0, 65535] { R483 += 1, R446 += 1, R447 += 1 };
  s0 -> s1 [89, 65535] { R483 += 1, R447 += 1 };
  s1 -> s1 [0, 87] { R483 += 1, R447 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R483 += 1 };
  s1 -> s1 [89, 65535] { R483 += 1, R447 += 1 };
  s2 -> s1 [0, 87] { R483 += 1, R447 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R483 += 1, R446 += 1, R447 += 1 };
  s2 -> s1 [89, 65535] { R483 += 1, R447 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R485 += 1, R449 += 1, R374 += 1 };
  s0 -> s2 [0, 65535] { R485 += 1, R448 += 1, R449 += 1 };
  s0 -> s0 [0, 65535] { R484 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R485 += 1, R449 += 1, R374 += 1 };
  s1 -> s4 [0, 65535] { R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R485 += 1, R449 += 1, R374 += 1 };
  s2 -> s2 [0, 65535] { R485 += 1, R448 += 1, R449 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R485 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R487 += 1, R451 += 1 };
  s0 -> s2 [0, 65535] { R487 += 1, R450 += 1, R451 += 1 };
  s0 -> s0 [0, 65535] { R486 += 1, R487 += 1 };
  s1 -> s1 [0, 65535] { R487 += 1, R451 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R487 += 1 };
  s2 -> s1 [0, 65535] { R487 += 1, R451 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R487 += 1, R450 += 1, R451 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R487 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65535] { R489 += 1, R465 += 1, R375 += 1 };
  s0 -> s0 [0, 65535] { R488 += 1, R489 += 1 };
  s0 -> s2 [0, 65535] { R489 += 1, R464 += 1, R465 += 1 };
  s1 -> s4 [0, 65535] { R489 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R489 += 1, R465 += 1, R375 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R489 += 1, R465 += 1, R375 += 1 };
  s2 -> s2 [0, 65535] { R489 += 1, R464 += 1, R465 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R489 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 87] { R491 += 1, R467 += 1 };
  s0 -> s2 [0, 65535] { R491 += 1, R466 += 1, R467 += 1 };
  s0 -> s0 [0, 65535] { R490 += 1, R491 += 1 };
  s0 -> s3 [88, 88] { R491 += 1, R467 += 1 };
  s0 -> s4 [88, 88] { R491 += 1, R467 += 1 };
  s0 -> s5 [89, 89] { R491 += 1, R467 += 1 };
  s0 -> s1 [90, 65535] { R491 += 1, R467 += 1 };
  s1 -> s1 [0, 87] { R491 += 1, R467 += 1 };
  s1 -> s3 [88, 88] { R491 += 1, R467 += 1 };
  s1 -> s4 [88, 88] { R491 += 1, R467 += 1 };
  s1 -> s5 [89, 89] { R491 += 1, R467 += 1 };
  s1 -> s1 [90, 65535] { R491 += 1, R467 += 1 };
  s2 -> s1 [0, 87] { R491 += 1, R467 += 1 };
  s2 -> s2 [0, 65535] { R491 += 1, R466 += 1, R467 += 1 };
  s2 -> s3 [88, 88] { R491 += 1, R467 += 1 };
  s2 -> s4 [88, 88] { R491 += 1, R467 += 1 };
  s2 -> s5 [89, 89] { R491 += 1, R467 += 1 };
  s2 -> s1 [90, 65535] { R491 += 1, R467 += 1 };
  s3 -> s3 [0, 88] { R491 += 1, R467 += 1 };
  s3 -> s8 [89, 89] { R491 += 1, R467 += 1 };
  s3 -> s3 [90, 65535] { R491 += 1, R467 += 1 };
  s5 -> s5 [0, 87] { R491 += 1, R467 += 1 };
  s5 -> s5 [0, 65535] { R491 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [88, 88] { R491 += 1, R467 += 1 };
  s5 -> s8 [88, 88] { R491 += 1, R467 += 1 };
  s5 -> s5 [89, 65535] { R491 += 1, R467 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R491 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R491 += 1, R467 += 1 };
  s8 -> s9 [0, 65535] { R491 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R491 += 1 };
  accepting s8, s5, s9, s6, s7;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R385 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [9, 13] { R385 += 1 };
  s0 -> s1 [14, 31] { R385 += 1 };
  s0 -> s2 [32, 32] { R385 += 1 };
  s0 -> s1 [33, 65535] { R385 += 1 };
  s1 -> s1 [0, 65535] { R385 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R385 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R387 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s1 -> s1 [0, 65535] { R387 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R389 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s2 [9, 13] { R389 += 1 };
  s0 -> s1 [14, 31] { R389 += 1 };
  s0 -> s2 [32, 32] { R389 += 1 };
  s0 -> s1 [33, 65535] { R389 += 1 };
  s1 -> s1 [0, 65535] { R389 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R389 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R391 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s1 -> s1 [0, 65535] { R391 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P64
automaton P64_0 {
  init s0;
  s0 -> s1 [120, 120];
  accepting s1;
};
};
constraint R2 = R395 && R3 = R491 && R12 = 0 && R13 - R467 = -1 && R254 = 0 && R255 - R490 = -1 && R392 - R395 = -1 && R393 = R395 && R394 - R395 = -1 && R396 = 0 && R397 = 1 && R398 = 0 && R399 = 1 && R452 = 0 && R453 - R490 = -1 && R454 = 0 && R455 - R490 = -1 && R456 = 0 && R457 - R490 = -1 && R458 = 0 && R459 - R490 = -1 && R460 = 0 && R461 - R490 = -1 && R462 = 0 && R463 - R490 = -1 && R466 = 0 && R468 = R490 && R469 = R491 && R470 = R490 && R471 = R491 && R472 = R490 && R473 = R491 && R474 = R490 && R475 = R491 && R476 = R490 && R477 = R491 && R478 = R490 && R479 = R491 && R480 = R490 && R481 = R491 && R482 = R490 && R483 = R491 && R484 = R490 && R485 = R491 && R486 = R490 && R487 = R491 && R488 = R490 && R489 = R491 && R0 != 0 && R1 != 0 && R10 < 1 && R467 - R395 < 1 && 0 < R395 && -1 < R467 && R490 - R491 < 1 && 0 < R490 && (R4 != 0 || ((R0 != R377 || R376 - R377 = -1 || R377 < 0) && (R0 = R377 || R0 < 1))) && (R4 != 0 || ((R0 != R379 || R378 - R379 = -1 || R379 < 0) && (R0 = R379 || R0 < 1))) && (R6 != 0 || ((R1 != R385 || R384 - R385 = -1 || R385 < 0) && (R1 = R385 || R1 < 1))) && (R6 != 0 || ((R1 != R387 || R386 - R387 = -1 || R387 < 0) && (R1 = R387 || R1 < 1))) && (R380 != 0 || ((R5 != 0 || ((R0 != R381 || R381 = 1 || R381 < 0) && (R0 = R381 || R381 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R381 || R381 = 1 || R381 < 0) && (R381 != 1 || -1 < R0) && (R0 = R381 || R381 = 1))))) && (R382 != 0 || ((R5 != 0 || ((R0 != R383 || R383 = 1 || R383 < 0) && (R0 = R383 || R383 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R383 || R383 = 1 || R383 < 0) && (R383 != 1 || -1 < R0) && (R0 = R383 || R383 = 1))))) && (R388 != 0 || ((R7 != 0 || ((R1 != R389 || R389 = 1 || R389 < 0) && (R1 = R389 || R389 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R389 || R389 = 1 || R389 < 0) && (R389 != 1 || -1 < R1) && (R1 = R389 || R389 = 1))))) && (R390 != 0 || ((R7 != 0 || ((R1 != R391 || R391 = 1 || R391 < 0) && (R1 = R391 || R391 = 1 || R1 < 1))) && (R7 = 0 || ((R1 != R391 || R391 = 1 || R391 < 0) && (R391 != 1 || -1 < R1) && (R1 = R391 || R391 = 1))))) && (R395 != R447 || R446 = R467 || ((R374 != 0 || R447 - R467 < 1 || R447 < 1) && (R374 = 0 || R447 < R467 || R447 < 1))) && (R395 != R449 || R448 = R467 || ((R374 != 0 || R449 - R467 < 1 || R449 < 1) && (R374 = 0 || R449 < R467 || R449 < 1))) && (R395 != R451 || R450 = R467 || ((R374 != 0 || R451 - R467 < 1 || R451 < 1) && (R374 = 0 || R451 < R467 || R451 < 1))) && (R464 != 0 || R465 = R467 || (R375 = 0 && R467 = 0)) && (R4 = 0 || (R0 = R377 && R376 - R377 = -1)) && (R4 = 0 || (R0 = R379 && R378 - R379 = -1)) && (R6 = 0 || (R1 = R385 && R384 - R385 = -1)) && (R6 = 0 || (R1 = R387 && R386 - R387 = -1)) && (R380 = 0 || (R5 = 0 && R0 < 0)) && (R382 = 0 || (R5 = 0 && R0 < 0)) && (R388 = 0 || (R7 = 0 && R1 < 0)) && (R390 = 0 || (R7 = 0 && R1 < 0)) && (R395 = R447 || (R374 = 0 && R395 = R467)) && (R395 = R449 || (R374 = 0 && R395 = R467)) && (R395 = R451 || (R374 = 0 && R395 = R467)) && (R464 = 0 || (R375 = 0 && R467 = 0));
// End of Parikh automata intersection problem
