// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R3, R4, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R44 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R54 += 1, R55 += 1 };
  s0 -> s1 [9, 9] { R55 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R57 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R57 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s2 [65, 65] { R63 += 1 };
  s0 -> s1 [66, 65535] { R63 += 1 };
  s1 -> s1 [0, 64] { R63 += 1 };
  s1 -> s2 [65, 65] { R63 += 1 };
  s1 -> s1 [66, 65535] { R63 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R63 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R65 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s1 -> s1 [0, 65535] { R65 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R67 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R67 += 1, R6 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s3 [65, 65] { R67 += 1 };
  s0 -> s1 [66, 65535] { R67 += 1, R7 += 1 };
  s1 -> s1 [0, 64] { R67 += 1, R7 += 1 };
  s1 -> s3 [65, 65] { R67 += 1 };
  s1 -> s1 [66, 65535] { R67 += 1, R7 += 1 };
  s2 -> s1 [0, 64] { R67 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R67 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [65, 65] { R67 += 1 };
  s2 -> s1 [66, 65535] { R67 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R67 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R69 += 1, R47 += 1 };
  s0 -> s2 [0, 65535] { R69 += 1, R46 += 1, R47 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s0 -> s3 [9, 13] { R69 += 1, R47 += 1 };
  s0 -> s1 [14, 31] { R69 += 1, R47 += 1 };
  s0 -> s3 [32, 32] { R69 += 1, R47 += 1 };
  s0 -> s1 [33, 65535] { R69 += 1, R47 += 1 };
  s1 -> s5 [0, 65535] { R69 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R69 += 1, R47 += 1 };
  s2 -> s1 [0, 8] { R69 += 1, R47 += 1 };
  s2 -> s2 [0, 65535] { R69 += 1, R46 += 1, R47 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R69 += 1, R47 += 1 };
  s2 -> s1 [14, 31] { R69 += 1, R47 += 1 };
  s2 -> s3 [32, 32] { R69 += 1, R47 += 1 };
  s2 -> s1 [33, 65535] { R69 += 1, R47 += 1 };
  s3 -> s1 [0, 65535] { R69 += 1, R47 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R69 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R71 += 1, R49 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 65535] { R71 += 1, R49 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R71 += 1 };
  s2 -> s1 [0, 65535] { R71 += 1, R49 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R71 += 1, R48 += 1, R49 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R71 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R73 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s3 [9, 13] { R73 += 1, R51 += 1 };
  s0 -> s1 [14, 31] { R73 += 1, R51 += 1 };
  s0 -> s3 [32, 32] { R73 += 1, R51 += 1 };
  s0 -> s1 [33, 65535] { R73 += 1, R51 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R73 += 1, R51 += 1 };
  s1 -> s5 [0, 65535] { R73 += 1 };
  s2 -> s1 [0, 8] { R73 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1, R50 += 1, R51 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R73 += 1, R51 += 1 };
  s2 -> s1 [14, 31] { R73 += 1, R51 += 1 };
  s2 -> s3 [32, 32] { R73 += 1, R51 += 1 };
  s2 -> s1 [33, 65535] { R73 += 1, R51 += 1 };
  s3 -> s1 [0, 65535] { R73 += 1, R51 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R73 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R75 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R53 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R75 += 1, R53 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R53 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R75 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R75 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R77 += 1, R59 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s3 [65, 65] { R77 += 1, R59 += 1 };
  s0 -> s1 [66, 65535] { R77 += 1, R59 += 1 };
  s1 -> s1 [0, 64] { R77 += 1, R59 += 1 };
  s1 -> s3 [65, 65] { R77 += 1, R59 += 1 };
  s1 -> s1 [66, 65535] { R77 += 1, R59 += 1 };
  s2 -> s1 [0, 64] { R77 += 1, R59 += 1 };
  s2 -> s2 [0, 65535] { R77 += 1, R58 += 1, R59 += 1 };
  s2 -> s3 [65, 65] { R77 += 1, R59 += 1 };
  s2 -> s1 [66, 65535] { R77 += 1, R59 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R77 += 1, R59 += 1 };
  s3 -> s5 [0, 65535] { R77 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R77 += 1 };
  accepting s3, s4, s5;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s0 -> s1 [0, 65535] { R79 += 1, R60 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R61 += 1, R45 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R60 += 1, R61 += 1 };
  s1 -> s2 [0, 65535] { R79 += 1, R61 += 1, R45 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R79 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R61 += 1, R45 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R79 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
constraint R0 = R59 && R1 = R79 && R6 = 0 && R7 - R58 = -1 && R46 - R59 = -1 && R47 = R59 && R48 - R59 = -1 && R49 = R59 && R50 = 0 && R51 = 1 && R52 = 0 && R53 = 1 && R54 = 0 && R55 = 1 && R56 = 0 && R57 = 1 && R62 = 1 && R63 = R79 && R64 = 1 && R65 = R79 && R66 = 1 && R67 = R79 && R68 = 1 && R69 = R79 && R70 = 1 && R71 = R79 && R72 = 1 && R73 = R79 && R74 = 1 && R75 = R79 && R76 = 1 && R77 = R79 && R78 = 1 && R44 < 1 && R58 - R59 < 1 && -1 < R58 && 0 < R59 && 0 < R79 && (R58 != R60 || R59 = R61 || ((R45 != 0 || R59 - R60 < 1 || R60 < 0) && (R45 = 0 || R59 < R60 || R60 < 0))) && (R58 = R60 || (R45 = 0 && R58 = R59));
// End of Parikh automata intersection problem
