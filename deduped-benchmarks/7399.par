// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R113, R114, R115, R116, R117, R118, R119, R12, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R14, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R19, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P67
automaton P67_0 {
  init s0;
  s0 -> s1 [121, 121];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 43] { R19 += 1 };
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R19 += 1 };
  s1 -> s1 [0, 43] { R19 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R19 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 43] { R151 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s0 -> s1 [45, 64] { R151 += 1 };
  s0 -> s2 [83, 83] { R151 += 1 };
  s0 -> s1 [84, 65535] { R151 += 1 };
  s1 -> s1 [0, 43] { R151 += 1 };
  s1 -> s1 [45, 64] { R151 += 1 };
  s1 -> s2 [83, 83] { R151 += 1 };
  s1 -> s1 [84, 65535] { R151 += 1 };
  s2 -> s2 [0, 43] { R151 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [45, 64] { R151 += 1 };
  s2 -> s2 [83, 65535] { R151 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R153 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 60] { R155 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R12 += 1 };
  s0 -> s3 [61, 61] { R155 += 1 };
  s0 -> s1 [62, 65535] { R155 += 1 };
  s1 -> s1 [0, 60] { R155 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R155 += 1 };
  s1 -> s1 [62, 65535] { R155 += 1 };
  s2 -> s1 [0, 60] { R155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R155 += 1, R12 += 1 };
  s2 -> s3 [61, 61] { R155 += 1 };
  s2 -> s1 [62, 65535] { R155 += 1 };
  s3 -> s3 [0, 65535] { R155 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R157 += 1, R117 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R116 += 1, R117 += 1 };
  s0 -> s3 [9, 13] { R157 += 1, R117 += 1 };
  s0 -> s1 [14, 31] { R157 += 1, R117 += 1 };
  s0 -> s3 [32, 32] { R157 += 1, R117 += 1 };
  s0 -> s1 [33, 65535] { R157 += 1, R117 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R157 += 1 };
  s1 -> s1 [0, 65535] { R157 += 1, R117 += 1 };
  s2 -> s1 [0, 8] { R157 += 1, R117 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R157 += 1, R116 += 1, R117 += 1 };
  s2 -> s3 [9, 13] { R157 += 1, R117 += 1 };
  s2 -> s1 [14, 31] { R157 += 1, R117 += 1 };
  s2 -> s3 [32, 32] { R157 += 1, R117 += 1 };
  s2 -> s1 [33, 65535] { R157 += 1, R117 += 1 };
  s3 -> s1 [0, 65535] { R157 += 1, R117 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R157 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R159 += 1, R119 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R119 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R159 += 1 };
  s2 -> s1 [0, 65535] { R159 += 1, R119 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R159 += 1, R118 += 1, R119 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R159 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R161 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R120 += 1, R121 += 1 };
  s0 -> s3 [9, 13] { R161 += 1, R121 += 1 };
  s0 -> s1 [14, 31] { R161 += 1, R121 += 1 };
  s0 -> s3 [32, 32] { R161 += 1, R121 += 1 };
  s0 -> s1 [33, 65535] { R161 += 1, R121 += 1 };
  s1 -> s5 [0, 65535] { R161 += 1 };
  s1 -> s1 [0, 65535] { R161 += 1, R121 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R161 += 1, R121 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R120 += 1, R121 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R161 += 1, R121 += 1 };
  s2 -> s1 [14, 31] { R161 += 1, R121 += 1 };
  s2 -> s3 [32, 32] { R161 += 1, R121 += 1 };
  s2 -> s1 [33, 65535] { R161 += 1, R121 += 1 };
  s3 -> s1 [0, 65535] { R161 += 1, R121 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R161 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s1 [0, 65535] { R163 += 1, R123 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R122 += 1, R123 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R163 += 1, R123 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R163 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R163 += 1, R123 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R163 += 1, R122 += 1, R123 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R163 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 64] { R181 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s2 [89, 89] { R181 += 1 };
  s0 -> s1 [90, 65535] { R181 += 1 };
  s1 -> s1 [0, 64] { R181 += 1 };
  s1 -> s2 [89, 89] { R181 += 1 };
  s1 -> s1 [90, 65535] { R181 += 1 };
  s2 -> s2 [0, 64] { R181 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [89, 65535] { R181 += 1 };
  accepting s2;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R183 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s1 -> s1 [0, 65535] { R183 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 60] { R185 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R13 += 1 };
  s0 -> s3 [61, 61] { R185 += 1 };
  s0 -> s1 [62, 65535] { R185 += 1 };
  s1 -> s1 [0, 60] { R185 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R185 += 1 };
  s1 -> s1 [62, 65535] { R185 += 1 };
  s2 -> s1 [0, 60] { R185 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R185 += 1, R13 += 1 };
  s2 -> s3 [61, 61] { R185 += 1 };
  s2 -> s1 [62, 65535] { R185 += 1 };
  s3 -> s3 [0, 65535] { R185 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 88] { R187 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R14 += 1 };
  s0 -> s3 [89, 89] { R187 += 1 };
  s0 -> s1 [90, 65535] { R187 += 1 };
  s1 -> s1 [0, 88] { R187 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [89, 89] { R187 += 1 };
  s1 -> s1 [90, 65535] { R187 += 1 };
  s2 -> s1 [0, 88] { R187 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R187 += 1, R14 += 1 };
  s2 -> s3 [89, 89] { R187 += 1 };
  s2 -> s1 [90, 65535] { R187 += 1 };
  s3 -> s3 [0, 65535] { R187 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 8] { R189 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R189 += 1, R132 += 1, R133 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s3 [9, 13] { R189 += 1, R133 += 1 };
  s0 -> s1 [14, 31] { R189 += 1, R133 += 1 };
  s0 -> s3 [32, 32] { R189 += 1, R133 += 1 };
  s0 -> s1 [33, 65535] { R189 += 1, R133 += 1 };
  s1 -> s5 [0, 65535] { R189 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1, R133 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R189 += 1, R133 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R189 += 1, R132 += 1, R133 += 1 };
  s2 -> s3 [9, 13] { R189 += 1, R133 += 1 };
  s2 -> s1 [14, 31] { R189 += 1, R133 += 1 };
  s2 -> s3 [32, 32] { R189 += 1, R133 += 1 };
  s2 -> s1 [33, 65535] { R189 += 1, R133 += 1 };
  s3 -> s1 [0, 65535] { R189 += 1, R133 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R189 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R191 += 1, R134 += 1, R135 += 1 };
  s0 -> s2 [0, 65535] { R191 += 1, R135 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s1 -> s1 [0, 65535] { R191 += 1, R134 += 1, R135 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R191 += 1, R135 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R191 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R191 += 1, R135 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R191 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 8] { R193 += 1, R137 += 1 };
  s0 -> s2 [0, 65535] { R193 += 1, R136 += 1, R137 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s3 [9, 13] { R193 += 1, R137 += 1 };
  s0 -> s1 [14, 31] { R193 += 1, R137 += 1 };
  s0 -> s3 [32, 32] { R193 += 1, R137 += 1 };
  s0 -> s1 [33, 65535] { R193 += 1, R137 += 1 };
  s1 -> s1 [0, 65535] { R193 += 1, R137 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R193 += 1 };
  s2 -> s1 [0, 8] { R193 += 1, R137 += 1 };
  s2 -> s2 [0, 65535] { R193 += 1, R136 += 1, R137 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R193 += 1, R137 += 1 };
  s2 -> s1 [14, 31] { R193 += 1, R137 += 1 };
  s2 -> s3 [32, 32] { R193 += 1, R137 += 1 };
  s2 -> s1 [33, 65535] { R193 += 1, R137 += 1 };
  s3 -> s1 [0, 65535] { R193 += 1, R137 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R193 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R195 += 1, R139 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R195 += 1, R138 += 1, R139 += 1 };
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s1 -> s1 [0, 65535] { R195 += 1, R139 += 1, R10 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R195 += 1 };
  s2 -> s1 [0, 65535] { R195 += 1, R139 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R195 += 1, R138 += 1, R139 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R195 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 88] { R197 += 1, R145 += 1 };
  s0 -> s2 [0, 65535] { R197 += 1, R144 += 1, R145 += 1 };
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s1 [90, 65535] { R197 += 1, R145 += 1 };
  s1 -> s1 [0, 88] { R197 += 1, R145 += 1 };
  s1 -> s1 [0, 65535] { R197 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [90, 65535] { R197 += 1, R145 += 1 };
  s2 -> s1 [0, 88] { R197 += 1, R145 += 1 };
  s2 -> s2 [0, 65535] { R197 += 1, R144 += 1, R145 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [90, 65535] { R197 += 1, R145 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R198 += 1, R199 += 1 };
  s0 -> s1 [0, 65535] { R199 += 1, R147 += 1, R114 += 1 };
  s0 -> s2 [0, 65535] { R199 += 1, R146 += 1, R147 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R199 += 1, R147 += 1, R114 += 1 };
  s1 -> s4 [0, 65535] { R199 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R199 += 1, R147 += 1, R114 += 1 };
  s2 -> s2 [0, 65535] { R199 += 1, R146 += 1, R147 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R199 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 89] { R201 += 1, R149 += 1 };
  s0 -> s0 [0, 65535] { R200 += 1, R201 += 1 };
  s0 -> s2 [0, 65535] { R201 += 1, R148 += 1, R149 += 1 };
  s0 -> s1 [91, 65535] { R201 += 1, R149 += 1 };
  s1 -> s1 [0, 89] { R201 += 1, R149 += 1 };
  s1 -> s1 [0, 65535] { R201 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R201 += 1, R149 += 1 };
  s2 -> s1 [0, 89] { R201 += 1, R149 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R201 += 1, R148 += 1, R149 += 1 };
  s2 -> s1 [91, 65535] { R201 += 1, R149 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 65535] { R203 += 1, R177 += 1, R115 += 1 };
  s0 -> s0 [0, 65535] { R202 += 1, R203 += 1 };
  s0 -> s2 [0, 65535] { R203 += 1, R176 += 1, R177 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R203 += 1, R177 += 1, R115 += 1 };
  s1 -> s4 [0, 65535] { R203 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R203 += 1, R177 += 1, R115 += 1 };
  s2 -> s2 [0, 65535] { R203 += 1, R176 += 1, R177 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R203 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 88] { R205 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R205 += 1, R178 += 1, R179 += 1 };
  s0 -> s0 [0, 65535] { R204 += 1, R205 += 1 };
  s0 -> s3 [89, 89] { R205 += 1, R179 += 1 };
  s0 -> s4 [89, 89] { R205 += 1, R179 += 1 };
  s0 -> s1 [91, 65535] { R205 += 1, R179 += 1 };
  s1 -> s1 [0, 88] { R205 += 1, R179 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R205 += 1 };
  s1 -> s3 [89, 89] { R205 += 1, R179 += 1 };
  s1 -> s4 [89, 89] { R205 += 1, R179 += 1 };
  s1 -> s1 [91, 65535] { R205 += 1, R179 += 1 };
  s2 -> s1 [0, 88] { R205 += 1, R179 += 1 };
  s2 -> s2 [0, 65535] { R205 += 1, R178 += 1, R179 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [89, 89] { R205 += 1, R179 += 1 };
  s2 -> s4 [89, 89] { R205 += 1, R179 += 1 };
  s2 -> s1 [91, 65535] { R205 += 1, R179 += 1 };
  s3 -> s3 [0, 89] { R205 += 1, R179 += 1 };
  s3 -> s3 [0, 65535] { R205 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [91, 65535] { R205 += 1, R179 += 1 };
  s4 -> s4 [0, 65535] { R205 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R113 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s1 [9, 9] { R141 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R143 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s1 -> s1 [0, 65535] { R143 += 1, R11 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R165 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s1 [91, 65535] { R165 += 1 };
  s1 -> s1 [0, 64] { R165 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R165 += 1 };
  accepting s0, s1;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R167 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R169 += 1, R125 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R124 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s3 [9, 13] { R169 += 1, R125 += 1 };
  s0 -> s1 [14, 31] { R169 += 1, R125 += 1 };
  s0 -> s3 [32, 32] { R169 += 1, R125 += 1 };
  s0 -> s1 [33, 65535] { R169 += 1, R125 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R169 += 1, R125 += 1 };
  s1 -> s5 [0, 65535] { R169 += 1 };
  s2 -> s1 [0, 8] { R169 += 1, R125 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R124 += 1, R125 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R169 += 1, R125 += 1 };
  s2 -> s1 [14, 31] { R169 += 1, R125 += 1 };
  s2 -> s3 [32, 32] { R169 += 1, R125 += 1 };
  s2 -> s1 [33, 65535] { R169 += 1, R125 += 1 };
  s3 -> s1 [0, 65535] { R169 += 1, R125 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R169 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s1 [0, 65535] { R171 += 1, R127 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R126 += 1, R127 += 1 };
  s1 -> s4 [0, 65535] { R171 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R127 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R171 += 1, R127 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R126 += 1, R127 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R171 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R173 += 1, R129 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R128 += 1, R129 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s3 [9, 13] { R173 += 1, R129 += 1 };
  s0 -> s1 [14, 31] { R173 += 1, R129 += 1 };
  s0 -> s3 [32, 32] { R173 += 1, R129 += 1 };
  s0 -> s1 [33, 65535] { R173 += 1, R129 += 1 };
  s1 -> s5 [0, 65535] { R173 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R173 += 1, R129 += 1 };
  s2 -> s1 [0, 8] { R173 += 1, R129 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R128 += 1, R129 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R173 += 1, R129 += 1 };
  s2 -> s1 [14, 31] { R173 += 1, R129 += 1 };
  s2 -> s3 [32, 32] { R173 += 1, R129 += 1 };
  s2 -> s1 [33, 65535] { R173 += 1, R129 += 1 };
  s3 -> s1 [0, 65535] { R173 += 1, R129 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R173 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s1 [0, 65535] { R175 += 1, R130 += 1, R131 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R131 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R175 += 1, R130 += 1, R131 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R175 += 1, R131 += 1, R8 += 1 };
  s2 -> s3 [0, 65535] { R175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R175 += 1, R131 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
constraint R2 = R149 && R3 = R163 && R4 = R175 && R18 = 0 && R19 = R205 && R132 - R149 = -1 && R133 = R149 && R134 - R149 = -1 && R135 = R149 && R136 = 0 && R137 = 1 && R138 = 0 && R139 = 1 && R140 = 0 && R141 = 1 && R142 = 0 && R143 = 1 && R144 = 0 && R145 = R149 && R146 = 0 && R147 = R149 && R148 = 0 && R150 - R205 = 1 && R151 = R163 && R152 - R205 = 1 && R153 = R163 && R154 - R205 = 1 && R155 = R163 && R156 - R205 = 1 && R157 = R163 && R158 - R205 = 1 && R159 = R163 && R160 - R205 = 1 && R161 = R163 && R162 - R205 = 1 && R164 = 1 && R165 = R175 && R166 = 1 && R167 = R175 && R168 = 1 && R169 = R175 && R170 = 1 && R171 = R175 && R172 = 1 && R173 = R175 && R174 = 1 && R180 = 0 && R181 = R205 && R182 = 0 && R183 = R205 && R184 = 0 && R185 = R205 && R186 = 0 && R187 = R205 && R188 = 0 && R189 = R205 && R190 = 0 && R191 = R205 && R192 = 0 && R193 = R205 && R194 = 0 && R195 = R205 && R196 = 0 && R197 = R205 && R198 = 0 && R199 = R205 && R200 = 0 && R201 = R205 && R202 = 0 && R203 = R205 && R204 = 0 && R0 != 0 && R1 != 0 && R12 < 1 && R13 < 1 && R14 < 1 && R113 < 1 && 0 < R149 && R205 < R163 && 0 < R175 && -1 < R205 && (R5 != 0 || ((R0 != R117 || R116 - R117 = -1 || R117 < 0) && (R0 = R117 || R0 < 1))) && (R5 != 0 || ((R0 != R119 || R118 - R119 = -1 || R119 < 0) && (R0 = R119 || R0 < 1))) && (R7 != 0 || ((R1 != R125 || R124 - R125 = -1 || R125 < 0) && (R1 = R125 || R1 < 1))) && (R7 != 0 || ((R1 != R127 || R126 - R127 = -1 || R127 < 0) && (R1 = R127 || R1 < 1))) && (R120 != 0 || ((R6 != 0 || ((R0 != R121 || R121 = 1 || R121 < 0) && (R0 = R121 || R121 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R121 || R121 = 1 || R121 < 0) && (R121 != 1 || -1 < R0) && (R0 = R121 || R121 = 1))))) && (R122 != 0 || ((R6 != 0 || ((R0 != R123 || R123 = 1 || R123 < 0) && (R0 = R123 || R123 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R123 || R123 = 1 || R123 < 0) && (R123 != 1 || -1 < R0) && (R0 = R123 || R123 = 1))))) && (R128 != 0 || ((R8 != 0 || ((R1 != R129 || R129 = 1 || R129 < 0) && (R1 = R129 || R129 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R129 || R129 = 1 || R129 < 0) && (R129 != 1 || -1 < R1) && (R1 = R129 || R129 = 1))))) && (R130 != 0 || ((R8 != 0 || ((R1 != R131 || R131 = 1 || R131 < 0) && (R1 = R131 || R131 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R131 || R131 = 1 || R131 < 0) && (R131 != 1 || -1 < R1) && (R1 = R131 || R131 = 1))))) && (R5 = 0 || (R0 = R117 && R116 - R117 = -1)) && (R5 = 0 || (R0 = R119 && R118 - R119 = -1)) && (R7 = 0 || (R1 = R125 && R124 - R125 = -1)) && (R7 = 0 || (R1 = R127 && R126 - R127 = -1)) && (R115 = 0 || (R176 = 0 && R177 = 0)) && (R115 = 0 || (R178 = 0 && R179 = 0)) && (R120 = 0 || (R6 = 0 && R0 < 0)) && (R122 = 0 || (R6 = 0 && R0 < 0)) && (R128 = 0 || (R8 = 0 && R1 < 0)) && (R130 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
