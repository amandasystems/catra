// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R1368, R1369, R1378, R1379, R1380, R1381, R14, R15, R1526, R1527, R1528, R1529, R1530, R1531, R1532, R1533, R1534, R1535, R1536, R1537, R1538, R1539, R1540, R1541, R1542, R1543, R1544, R1545, R1546, R1547, R1548, R1549, R1550, R1551, R1552, R1553, R1554, R1555, R1556, R1557, R1558, R1559, R1560, R1561, R1562, R1563, R1564, R1565, R1566, R1567, R1568, R1569, R1570, R1571, R1572, R1573, R1574, R1575, R1576, R1577, R1578, R1579, R1580, R1581, R1582, R1583, R1584, R1585, R1586, R1587, R1588, R1589, R1590, R1591, R1592, R1593, R1594, R1595, R1596, R1597, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [32, 32] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1559 += 1 };
  s0 -> s0 [0, 65535] { R1558 += 1, R1559 += 1 };
  s0 -> s2 [68, 68] { R1559 += 1 };
  s0 -> s1 [69, 65535] { R1559 += 1 };
  s1 -> s1 [0, 64] { R1559 += 1 };
  s1 -> s2 [68, 68] { R1559 += 1 };
  s1 -> s1 [69, 65535] { R1559 += 1 };
  s2 -> s2 [0, 64] { R1559 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R1559 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R1560 += 1, R1561 += 1 };
  s0 -> s1 [0, 65535] { R1561 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R1561 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R1563 += 1 };
  s0 -> s0 [0, 65535] { R1562 += 1, R1563 += 1 };
  s0 -> s2 [0, 65535] { R1563 += 1, R9 += 1 };
  s0 -> s3 [68, 68] { R1563 += 1 };
  s0 -> s1 [69, 65535] { R1563 += 1 };
  s1 -> s1 [0, 67] { R1563 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R1563 += 1 };
  s1 -> s1 [69, 65535] { R1563 += 1 };
  s2 -> s1 [0, 67] { R1563 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1563 += 1, R9 += 1 };
  s2 -> s3 [68, 68] { R1563 += 1 };
  s2 -> s1 [69, 65535] { R1563 += 1 };
  s3 -> s3 [0, 65535] { R1563 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1565 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R1565 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1564 += 1, R1565 += 1 };
  s0 -> s3 [9, 13] { R1565 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1565 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1565 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1565 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1565 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1565 += 1 };
  s2 -> s1 [0, 8] { R1565 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1565 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1565 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1565 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1565 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1565 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1565 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1565 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1566 += 1, R1567 += 1 };
  s0 -> s1 [0, 65535] { R1567 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R1567 += 1, R18 += 1, R19 += 1 };
  s1 -> s1 [0, 65535] { R1567 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1567 += 1 };
  s2 -> s1 [0, 65535] { R1567 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1567 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1567 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1569 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1569 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1568 += 1, R1569 += 1 };
  s0 -> s3 [9, 13] { R1569 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1569 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1569 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1569 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1569 += 1, R21 += 1 };
  s1 -> s5 [0, 65535] { R1569 += 1 };
  s2 -> s1 [0, 8] { R1569 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1569 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R1569 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1569 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1569 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1569 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1569 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1569 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1571 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1570 += 1, R1571 += 1 };
  s0 -> s2 [0, 65535] { R1571 += 1, R23 += 1, R4 += 1 };
  s1 -> s1 [0, 65535] { R1571 += 1, R22 += 1, R23 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1571 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R1571 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1571 += 1, R23 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R1571 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R1573 += 1, R1533 += 1 };
  s0 -> s2 [0, 65535] { R1573 += 1, R1532 += 1, R1533 += 1 };
  s0 -> s0 [0, 65535] { R1572 += 1, R1573 += 1 };
  s0 -> s1 [69, 65535] { R1573 += 1, R1533 += 1 };
  s1 -> s1 [0, 67] { R1573 += 1, R1533 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1573 += 1 };
  s1 -> s1 [69, 65535] { R1573 += 1, R1533 += 1 };
  s2 -> s1 [0, 67] { R1573 += 1, R1533 += 1 };
  s2 -> s2 [0, 65535] { R1573 += 1, R1532 += 1, R1533 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R1573 += 1, R1533 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1575 += 1, R1535 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1574 += 1, R1575 += 1 };
  s0 -> s2 [0, 65535] { R1575 += 1, R1534 += 1, R1535 += 1 };
  s1 -> s1 [0, 65535] { R1575 += 1, R1535 += 1, R14 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1575 += 1 };
  s2 -> s1 [0, 65535] { R1575 += 1, R1535 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1575 += 1, R1534 += 1, R1535 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1575 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1577 += 1, R1536 += 1, R1537 += 1 };
  s0 -> s0 [0, 65535] { R1576 += 1, R1577 += 1 };
  s0 -> s2 [0, 65535] { R1577 += 1, R1537 += 1 };
  s1 -> s1 [0, 65535] { R1577 += 1, R1536 += 1, R1537 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1577 += 1, R1537 += 1 };
  s2 -> s3 [0, 65535] { R1577 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1577 += 1, R1537 += 1 };
  s3 -> s3 [0, 65535] { R1577 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R1578 += 1, R1579 += 1 };
  s0 -> s1 [0, 65535] { R1579 += 1, R1539 += 1, R485 += 1 };
  s0 -> s2 [0, 65535] { R1579 += 1, R1538 += 1, R1539 += 1 };
  s1 -> s4 [0, 65535] { R1579 += 1 };
  s1 -> s1 [0, 65535] { R1579 += 1, R1539 += 1, R485 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1579 += 1, R1539 += 1, R485 += 1 };
  s2 -> s2 [0, 65535] { R1579 += 1, R1538 += 1, R1539 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1579 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R1581 += 1, R1541 += 1 };
  s0 -> s0 [0, 65535] { R1580 += 1, R1581 += 1 };
  s0 -> s2 [0, 65535] { R1581 += 1, R1540 += 1, R1541 += 1 };
  s0 -> s1 [70, 65535] { R1581 += 1, R1541 += 1 };
  s1 -> s1 [0, 68] { R1581 += 1, R1541 += 1 };
  s1 -> s1 [0, 65535] { R1581 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [70, 65535] { R1581 += 1, R1541 += 1 };
  s2 -> s1 [0, 68] { R1581 += 1, R1541 += 1 };
  s2 -> s2 [0, 65535] { R1581 += 1, R1540 += 1, R1541 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [70, 65535] { R1581 += 1, R1541 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R1583 += 1, R1543 += 1 };
  s0 -> s2 [0, 65535] { R1583 += 1, R1542 += 1, R1543 += 1 };
  s0 -> s0 [0, 65535] { R1582 += 1, R1583 += 1 };
  s0 -> s3 [0, 65535] { R1583 += 1, R1543 += 1, R1381 += 1 };
  s1 -> s1 [0, 65535] { R1583 += 1, R1543 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1583 += 1 };
  s2 -> s1 [0, 65535] { R1583 += 1, R1543 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1583 += 1, R1542 += 1, R1543 += 1 };
  s2 -> s3 [0, 65535] { R1583 += 1, R1543 += 1, R1381 += 1 };
  s3 -> s1 [0, 65535] { R1583 += 1, R1543 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R1583 += 1 };
  s3 -> s3 [0, 65535] { R1583 += 1, R1543 += 1, R1381 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1583 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1585 += 1, R1544 += 1, R1545 += 1 };
  s0 -> s0 [0, 65535] { R1584 += 1, R1585 += 1 };
  s0 -> s2 [0, 65535] { R1585 += 1, R1545 += 1 };
  s1 -> s1 [0, 65535] { R1585 += 1, R1544 += 1, R1545 += 1 };
  s1 -> s2 [0, 65535] { R1585 += 1, R1545 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1585 += 1, R1545 += 1 };
  s2 -> s3 [0, 65535] { R1585 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1585 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1587 += 1, R1547 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R1587 += 1, R1546 += 1, R1547 += 1 };
  s0 -> s0 [0, 65535] { R1586 += 1, R1587 += 1 };
  s1 -> s4 [0, 65535] { R1587 += 1 };
  s1 -> s1 [0, 65535] { R1587 += 1, R1547 += 1, R15 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1587 += 1, R1547 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R1587 += 1, R1546 += 1, R1547 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1587 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R1589 += 1, R1549 += 1 };
  s0 -> s2 [0, 65535] { R1589 += 1, R1548 += 1, R1549 += 1 };
  s0 -> s0 [0, 65535] { R1588 += 1, R1589 += 1 };
  s0 -> s3 [68, 68] { R1589 += 1, R1549 += 1 };
  s0 -> s4 [68, 68] { R1589 += 1, R1549 += 1 };
  s0 -> s5 [69, 69] { R1589 += 1, R1549 += 1 };
  s0 -> s1 [70, 65535] { R1589 += 1, R1549 += 1 };
  s1 -> s1 [0, 67] { R1589 += 1, R1549 += 1 };
  s1 -> s3 [68, 68] { R1589 += 1, R1549 += 1 };
  s1 -> s4 [68, 68] { R1589 += 1, R1549 += 1 };
  s1 -> s5 [69, 69] { R1589 += 1, R1549 += 1 };
  s1 -> s1 [70, 65535] { R1589 += 1, R1549 += 1 };
  s2 -> s1 [0, 67] { R1589 += 1, R1549 += 1 };
  s2 -> s2 [0, 65535] { R1589 += 1, R1548 += 1, R1549 += 1 };
  s2 -> s3 [68, 68] { R1589 += 1, R1549 += 1 };
  s2 -> s4 [68, 68] { R1589 += 1, R1549 += 1 };
  s2 -> s5 [69, 69] { R1589 += 1, R1549 += 1 };
  s2 -> s1 [70, 65535] { R1589 += 1, R1549 += 1 };
  s3 -> s3 [0, 68] { R1589 += 1, R1549 += 1 };
  s3 -> s7 [69, 69] { R1589 += 1, R1549 += 1 };
  s3 -> s3 [70, 65535] { R1589 += 1, R1549 += 1 };
  s5 -> s5 [0, 67] { R1589 += 1, R1549 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1589 += 1 };
  s5 -> s7 [68, 68] { R1589 += 1, R1549 += 1 };
  s5 -> s8 [68, 68] { R1589 += 1, R1549 += 1 };
  s5 -> s5 [69, 65535] { R1589 += 1, R1549 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R1589 += 1 };
  s7 -> s7 [0, 65535] { R1589 += 1, R1549 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1589 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1589 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R1591 += 1, R1551 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R1590 += 1, R1591 += 1 };
  s0 -> s2 [0, 65535] { R1591 += 1, R1550 += 1, R1551 += 1 };
  s0 -> s3 [68, 68] { R1591 += 1, R1551 += 1, R484 += 1 };
  s0 -> s4 [68, 68] { R1591 += 1, R1551 += 1, R484 += 1 };
  s0 -> s1 [69, 65535] { R1591 += 1, R1551 += 1, R484 += 1 };
  s1 -> s1 [0, 67] { R1591 += 1, R1551 += 1, R484 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R1591 += 1 };
  s1 -> s3 [68, 68] { R1591 += 1, R1551 += 1, R484 += 1 };
  s1 -> s4 [68, 68] { R1591 += 1, R1551 += 1, R484 += 1 };
  s1 -> s1 [69, 65535] { R1591 += 1, R1551 += 1, R484 += 1 };
  s2 -> s1 [0, 67] { R1591 += 1, R1551 += 1, R484 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1591 += 1, R1550 += 1, R1551 += 1 };
  s2 -> s3 [68, 68] { R1591 += 1, R1551 += 1, R484 += 1 };
  s2 -> s4 [68, 68] { R1591 += 1, R1551 += 1, R484 += 1 };
  s2 -> s1 [69, 65535] { R1591 += 1, R1551 += 1, R484 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1591 += 1 };
  s4 -> s5 [0, 65535] { R1591 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R1591 += 1, R1551 += 1, R484 += 1 };
  s5 -> s5 [0, 65535] { R1591 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R1593 += 1, R1553 += 1 };
  s0 -> s2 [0, 67] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s0 -> s0 [0, 65535] { R1592 += 1, R1593 += 1 };
  s0 -> s3 [0, 65535] { R1593 += 1, R1552 += 1, R1553 += 1 };
  s0 -> s4 [68, 68] { R1593 += 1, R1553 += 1 };
  s0 -> s5 [68, 68] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s0 -> s6 [68, 68] { R1593 += 1, R1553 += 1 };
  s0 -> s7 [68, 68] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s0 -> s2 [69, 65535] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s0 -> s1 [70, 65535] { R1593 += 1, R1553 += 1 };
  s1 -> s1 [0, 67] { R1593 += 1, R1553 += 1 };
  s1 -> s1 [0, 65535] { R1593 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [68, 68] { R1593 += 1, R1553 += 1 };
  s1 -> s6 [68, 68] { R1593 += 1, R1553 += 1 };
  s1 -> s1 [70, 65535] { R1593 += 1, R1553 += 1 };
  s2 -> s1 [0, 67] { R1593 += 1, R1553 += 1 };
  s2 -> s2 [0, 67] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s2 -> s4 [68, 68] { R1593 += 1, R1553 += 1 };
  s2 -> s5 [68, 68] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s2 -> s6 [68, 68] { R1593 += 1, R1553 += 1 };
  s2 -> s7 [68, 68] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s2 -> s2 [69, 65535] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s2 -> s1 [70, 65535] { R1593 += 1, R1553 += 1 };
  s3 -> s1 [0, 67] { R1593 += 1, R1553 += 1 };
  s3 -> s2 [0, 67] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s3 -> s3 [0, 65535] { R1593 += 1, R1552 += 1, R1553 += 1 };
  s3 -> s4 [68, 68] { R1593 += 1, R1553 += 1 };
  s3 -> s5 [68, 68] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s3 -> s6 [68, 68] { R1593 += 1, R1553 += 1 };
  s3 -> s7 [68, 68] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s3 -> s2 [69, 65535] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s3 -> s1 [70, 65535] { R1593 += 1, R1553 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R1593 += 1 };
  s6 -> s6 [0, 68] { R1593 += 1, R1553 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R1593 += 1 };
  s6 -> s6 [70, 65535] { R1593 += 1, R1553 += 1 };
  s7 -> s6 [0, 68] { R1593 += 1, R1553 += 1 };
  s7 -> s7 [0, 65535] { R1593 += 1, R1553 += 1, R1368 += 1 };
  s7 -> s6 [70, 65535] { R1593 += 1, R1553 += 1 };
  s8 -> s8 [0, 65535];
  accepting s1, s4, s6, s8;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s2 [0, 67] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s0 -> s0 [0, 65535] { R1594 += 1, R1595 += 1 };
  s0 -> s3 [0, 65535] { R1595 += 1, R1554 += 1, R1555 += 1 };
  s0 -> s4 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s0 -> s5 [68, 68] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s6 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s0 -> s7 [68, 68] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s8 [69, 69] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s0 -> s1 [69, 65535] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s0 -> s2 [70, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s1 -> s1 [0, 67] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s2 [0, 67] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s1 -> s4 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s1 -> s5 [68, 68] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s6 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s1 -> s7 [68, 68] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s8 [69, 69] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s1 -> s1 [69, 65535] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s1 -> s2 [70, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s2 -> s2 [0, 67] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s2 -> s4 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s2 -> s6 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s2 -> s8 [69, 69] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s2 -> s2 [70, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s3 -> s1 [0, 67] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s2 [0, 67] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s3 -> s3 [0, 65535] { R1595 += 1, R1554 += 1, R1555 += 1 };
  s3 -> s4 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s3 -> s5 [68, 68] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s6 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s3 -> s7 [68, 68] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s8 [69, 69] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s3 -> s1 [69, 65535] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s3 -> s2 [70, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s4 -> s4 [0, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s4 -> s11 [69, 69] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s4 -> s4 [70, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s5 -> s4 [0, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s5 -> s5 [0, 65535] { R1595 += 1, R1555 += 1, R1378 += 1, R1379 += 1 };
  s5 -> s11 [69, 69] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s5 -> s4 [70, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s8 -> s8 [0, 67] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s8 -> s8 [0, 65535] { R1595 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s8 -> s11 [68, 68] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s8 -> s8 [69, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1595 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [0, 65535] { R1595 += 1 };
  s11 -> s11 [0, 65535] { R1595 += 1, R1555 += 1, R1379 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1595 += 1 };
  accepting s12, s8, s9, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s0 -> s2 [0, 67] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s0 -> s3 [0, 65535] { R1597 += 1, R1556 += 1, R1557 += 1 };
  s0 -> s0 [0, 65535] { R1596 += 1, R1597 += 1 };
  s0 -> s4 [68, 68] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s0 -> s5 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s0 -> s6 [68, 68] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s0 -> s7 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s0 -> s1 [69, 65535] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s0 -> s2 [69, 65535] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s1 -> s1 [0, 67] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s1 -> s2 [0, 67] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s1 -> s4 [68, 68] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s1 -> s5 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s1 -> s6 [68, 68] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s1 -> s7 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s1 -> s1 [69, 65535] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s1 -> s2 [69, 65535] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s2 -> s11 [0, 67] { R1597 += 1, R1557 += 1 };
  s2 -> s2 [0, 67] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s2 -> s12 [68, 68] { R1597 += 1, R1557 += 1 };
  s2 -> s8 [68, 68] { R1597 += 1, R1557 += 1 };
  s2 -> s5 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s2 -> s7 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s2 -> s11 [69, 65535] { R1597 += 1, R1557 += 1 };
  s2 -> s2 [69, 65535] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s3 -> s1 [0, 67] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s3 -> s2 [0, 67] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s3 -> s3 [0, 65535] { R1597 += 1, R1556 += 1, R1557 += 1 };
  s3 -> s4 [68, 68] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s3 -> s5 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s3 -> s6 [68, 68] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s3 -> s7 [68, 68] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s3 -> s1 [69, 65535] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s3 -> s2 [69, 65535] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s5 -> s8 [0, 65535] { R1597 += 1, R1557 += 1 };
  s5 -> s5 [0, 65535] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s6 -> s5 [0, 65535] { R1597 += 1, R1557 += 1, R1527 += 1, R1528 += 1 };
  s6 -> s6 [0, 65535] { R1597 += 1, R1557 += 1, R1526 += 1, R1527 += 1 };
  s8 -> s8 [0, 65535] { R1597 += 1, R1557 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s10 [0, 65535] { R1597 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1597 += 1 };
  s11 -> s11 [0, 67] { R1597 += 1, R1557 += 1 };
  s11 -> s11 [0, 65535] { R1597 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s12 [68, 68] { R1597 += 1, R1557 += 1 };
  s11 -> s8 [68, 68] { R1597 += 1, R1557 += 1 };
  s11 -> s11 [69, 65535] { R1597 += 1, R1557 += 1 };
  s12 -> s12 [0, 65535] { R1597 += 1 };
  s12 -> s9 [0, 65535];
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R1545 && R2 = R1597 && R16 - R1545 = -1 && R17 = R1545 && R18 - R1545 = -1 && R19 = R1545 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1381 + -1*R1379 = 0 && R1380 + R1378 = 0 && R1532 = 0 && R1533 = R1545 && R1534 = 0 && R1535 = R1545 && R1536 = 0 && R1537 = R1545 && R1538 = 0 && R1539 = R1545 && R1540 = 0 && R1541 = R1545 && R1542 = 0 && R1543 = R1545 && R1544 = 0 && R1548 = 0 && R1549 = 0 && R1552 = 0 && R1553 = 0 && R1554 = 0 && R1555 = 0 && R1556 = 0 && R1557 = 0 && R1558 = 1 && R1559 = R1597 && R1560 = 1 && R1561 = R1597 && R1562 = 1 && R1563 = R1597 && R1564 = 1 && R1565 = R1597 && R1566 = 1 && R1567 = R1597 && R1568 = 1 && R1569 = R1597 && R1570 = 1 && R1571 = R1597 && R1572 = 1 && R1573 = R1597 && R1574 = 1 && R1575 = R1597 && R1576 = 1 && R1577 = R1597 && R1578 = 1 && R1579 = R1597 && R1580 = 1 && R1581 = R1597 && R1582 = 1 && R1583 = R1597 && R1584 = 1 && R1585 = R1597 && R1586 = 1 && R1587 = R1597 && R1588 = 1 && R1589 = R1597 && R1590 = 1 && R1591 = R1597 && R1592 = 1 && R1593 = R1597 && R1594 = 1 && R1595 = R1597 && R1596 = 1 && R9 < 1 && R12 < 1 && R1369 + R1368 < 1 && -1*R1381 + -1*R1379 < 1 && 0 < R1545 && 0 < R1597 && (R1381 + R1379 != 0 || R1531 + R1528 = 0 || (R1529 + R1526 = 0 && R1530 + R1527 = 0)) && (R1529 + R1526 != 0 || R1381 + R1379 + -1*R1530 + -1*R1527 = 0 || R1381 + R1379 < 1) && (R15 = 0 || (R1546 = 0 && R1547 = 0)) && (R15 = 0 || (R1550 = 0 && R1551 = 0)) && (R1529 + R1526 = 0 || R1381 + R1379 < 1);
// End of Parikh automata intersection problem
