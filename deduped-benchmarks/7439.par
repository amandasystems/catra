// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1148, R1149, R1150, R1151, R12, R1296, R1297, R1298, R1299, R1300, R1301, R1302, R1303, R1304, R1305, R1306, R1307, R1308, R1309, R1310, R1311, R1312, R1313, R1314, R1315, R1316, R1317, R1318, R1319, R1320, R1321, R1322, R1323, R1324, R1325, R1326, R1327, R1328, R1329, R1330, R1331, R1332, R1333, R1334, R1335, R1336, R1337, R1338, R1339, R1340, R1341, R1342, R1343, R1344, R1345, R1346, R1347, R1348, R1349, R1350, R1351, R1352, R1353, R1354, R1355, R1356, R1357, R1358, R1359, R1360, R1361, R1362, R1363, R1364, R1365, R1366, R1367, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [32, 32] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1329 += 1 };
  s0 -> s0 [0, 65535] { R1328 += 1, R1329 += 1 };
  s0 -> s2 [68, 68] { R1329 += 1 };
  s0 -> s1 [69, 65535] { R1329 += 1 };
  s1 -> s1 [0, 64] { R1329 += 1 };
  s1 -> s2 [68, 68] { R1329 += 1 };
  s1 -> s1 [69, 65535] { R1329 += 1 };
  s2 -> s2 [0, 64] { R1329 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R1329 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1331 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1330 += 1, R1331 += 1 };
  s1 -> s1 [0, 65535] { R1331 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R1333 += 1 };
  s0 -> s0 [0, 65535] { R1332 += 1, R1333 += 1 };
  s0 -> s2 [0, 65535] { R1333 += 1, R9 += 1 };
  s0 -> s3 [68, 68] { R1333 += 1 };
  s0 -> s1 [69, 65535] { R1333 += 1 };
  s1 -> s1 [0, 67] { R1333 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R1333 += 1 };
  s1 -> s1 [69, 65535] { R1333 += 1 };
  s2 -> s1 [0, 67] { R1333 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1333 += 1, R9 += 1 };
  s2 -> s3 [68, 68] { R1333 += 1 };
  s2 -> s1 [69, 65535] { R1333 += 1 };
  s3 -> s3 [0, 65535] { R1333 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1335 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1334 += 1, R1335 += 1 };
  s0 -> s2 [0, 65535] { R1335 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R1335 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1335 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1335 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1335 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1335 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1335 += 1 };
  s2 -> s1 [0, 8] { R1335 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1335 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R1335 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1335 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1335 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1335 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1335 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1335 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1336 += 1, R1337 += 1 };
  s0 -> s1 [0, 65535] { R1337 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R1337 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1337 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R1337 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1337 += 1 };
  s2 -> s2 [0, 65535] { R1337 += 1, R19 += 1, R3 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1337 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1339 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R1339 += 1, R20 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1338 += 1, R1339 += 1 };
  s0 -> s3 [9, 13] { R1339 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1339 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1339 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1339 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1339 += 1 };
  s1 -> s1 [0, 65535] { R1339 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R1339 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1339 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R1339 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1339 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1339 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1339 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1339 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1339 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1341 += 1, R22 += 1, R23 += 1 };
  s0 -> s0 [0, 65535] { R1340 += 1, R1341 += 1 };
  s0 -> s2 [0, 65535] { R1341 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1341 += 1, R22 += 1, R23 += 1 };
  s1 -> s2 [0, 65535] { R1341 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1341 += 1 };
  s2 -> s2 [0, 65535] { R1341 += 1, R23 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1341 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R1343 += 1, R1303 += 1 };
  s0 -> s2 [0, 65535] { R1343 += 1, R1302 += 1, R1303 += 1 };
  s0 -> s0 [0, 65535] { R1342 += 1, R1343 += 1 };
  s0 -> s1 [69, 65535] { R1343 += 1, R1303 += 1 };
  s1 -> s1 [0, 67] { R1343 += 1, R1303 += 1 };
  s1 -> s1 [0, 65535] { R1343 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R1343 += 1, R1303 += 1 };
  s2 -> s1 [0, 67] { R1343 += 1, R1303 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1343 += 1, R1302 += 1, R1303 += 1 };
  s2 -> s1 [69, 65535] { R1343 += 1, R1303 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1345 += 1, R1304 += 1, R1305 += 1 };
  s0 -> s2 [0, 65535] { R1345 += 1, R1305 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1344 += 1, R1345 += 1 };
  s1 -> s1 [0, 65535] { R1345 += 1, R1304 += 1, R1305 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1345 += 1, R1305 += 1, R14 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1345 += 1, R1305 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R1345 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1345 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R1347 += 1, R1306 += 1, R1307 += 1 };
  s0 -> s0 [0, 65535] { R1346 += 1, R1347 += 1 };
  s0 -> s2 [0, 65535] { R1347 += 1, R1307 += 1 };
  s1 -> s1 [0, 65535] { R1347 += 1, R1306 += 1, R1307 += 1 };
  s1 -> s2 [0, 65535] { R1347 += 1, R1307 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1347 += 1, R1307 += 1 };
  s2 -> s3 [0, 65535] { R1347 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1347 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1349 += 1, R1308 += 1, R1309 += 1 };
  s0 -> s2 [0, 65535] { R1349 += 1, R1309 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1348 += 1, R1349 += 1 };
  s1 -> s1 [0, 65535] { R1349 += 1, R1308 += 1, R1309 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R1349 += 1, R1309 += 1, R485 += 1 };
  s2 -> s3 [0, 65535] { R1349 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1349 += 1, R1309 += 1, R485 += 1 };
  s3 -> s3 [0, 65535] { R1349 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R1351 += 1, R1311 += 1 };
  s0 -> s0 [0, 65535] { R1350 += 1, R1351 += 1 };
  s0 -> s2 [0, 65535] { R1351 += 1, R1310 += 1, R1311 += 1 };
  s0 -> s3 [0, 65535] { R1351 += 1, R1311 += 1, R487 += 1 };
  s0 -> s1 [70, 65535] { R1351 += 1, R1311 += 1 };
  s1 -> s1 [0, 68] { R1351 += 1, R1311 += 1 };
  s1 -> s1 [0, 65535] { R1351 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [70, 65535] { R1351 += 1, R1311 += 1 };
  s2 -> s1 [0, 68] { R1351 += 1, R1311 += 1 };
  s2 -> s2 [0, 65535] { R1351 += 1, R1310 += 1, R1311 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R1351 += 1, R1311 += 1, R487 += 1 };
  s2 -> s1 [70, 65535] { R1351 += 1, R1311 += 1 };
  s3 -> s1 [0, 68] { R1351 += 1, R1311 += 1 };
  s3 -> s4 [0, 65535] { R1351 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1351 += 1, R1311 += 1, R487 += 1 };
  s3 -> s1 [70, 65535] { R1351 += 1, R1311 += 1 };
  s4 -> s4 [0, 65535] { R1351 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1352 += 1, R1353 += 1 };
  s0 -> s1 [0, 65535] { R1353 += 1, R1313 += 1 };
  s0 -> s2 [0, 65535] { R1353 += 1, R1312 += 1, R1313 += 1 };
  s1 -> s1 [0, 65535] { R1353 += 1, R1313 += 1 };
  s1 -> s4 [0, 65535] { R1353 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1353 += 1, R1313 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1353 += 1, R1312 += 1, R1313 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1353 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R1355 += 1, R1314 += 1, R1315 += 1 };
  s0 -> s0 [0, 65535] { R1354 += 1, R1355 += 1 };
  s0 -> s2 [0, 65535] { R1355 += 1, R1315 += 1 };
  s1 -> s1 [0, 65535] { R1355 += 1, R1314 += 1, R1315 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R1355 += 1, R1315 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1355 += 1 };
  s2 -> s2 [0, 65535] { R1355 += 1, R1315 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1355 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1357 += 1, R1316 += 1, R1317 += 1 };
  s0 -> s0 [0, 65535] { R1356 += 1, R1357 += 1 };
  s0 -> s2 [0, 65535] { R1357 += 1, R1317 += 1, R15 += 1 };
  s1 -> s1 [0, 65535] { R1357 += 1, R1316 += 1, R1317 += 1 };
  s1 -> s2 [0, 65535] { R1357 += 1, R1317 += 1, R15 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1357 += 1, R1317 += 1, R15 += 1 };
  s2 -> s3 [0, 65535] { R1357 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1357 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R1359 += 1, R1319 += 1 };
  s0 -> s2 [0, 65535] { R1359 += 1, R1318 += 1, R1319 += 1 };
  s0 -> s0 [0, 65535] { R1358 += 1, R1359 += 1 };
  s0 -> s3 [68, 68] { R1359 += 1, R1319 += 1 };
  s0 -> s4 [68, 68] { R1359 += 1, R1319 += 1 };
  s0 -> s5 [69, 69] { R1359 += 1, R1319 += 1 };
  s0 -> s1 [70, 65535] { R1359 += 1, R1319 += 1 };
  s1 -> s1 [0, 67] { R1359 += 1, R1319 += 1 };
  s1 -> s3 [68, 68] { R1359 += 1, R1319 += 1 };
  s1 -> s4 [68, 68] { R1359 += 1, R1319 += 1 };
  s1 -> s5 [69, 69] { R1359 += 1, R1319 += 1 };
  s1 -> s1 [70, 65535] { R1359 += 1, R1319 += 1 };
  s2 -> s1 [0, 67] { R1359 += 1, R1319 += 1 };
  s2 -> s2 [0, 65535] { R1359 += 1, R1318 += 1, R1319 += 1 };
  s2 -> s3 [68, 68] { R1359 += 1, R1319 += 1 };
  s2 -> s4 [68, 68] { R1359 += 1, R1319 += 1 };
  s2 -> s5 [69, 69] { R1359 += 1, R1319 += 1 };
  s2 -> s1 [70, 65535] { R1359 += 1, R1319 += 1 };
  s4 -> s4 [0, 68] { R1359 += 1, R1319 += 1 };
  s4 -> s8 [69, 69] { R1359 += 1, R1319 += 1 };
  s4 -> s4 [70, 65535] { R1359 += 1, R1319 += 1 };
  s5 -> s5 [0, 67] { R1359 += 1, R1319 += 1 };
  s5 -> s5 [0, 65535] { R1359 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [68, 68] { R1359 += 1, R1319 += 1 };
  s5 -> s8 [68, 68] { R1359 += 1, R1319 += 1 };
  s5 -> s5 [69, 65535] { R1359 += 1, R1319 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1359 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1359 += 1, R1319 += 1 };
  s8 -> s9 [0, 65535] { R1359 += 1 };
  s8 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1359 += 1 };
  s9 -> s6 [0, 65535];
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R1361 += 1, R1321 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R1361 += 1, R1320 += 1, R1321 += 1 };
  s0 -> s0 [0, 65535] { R1360 += 1, R1361 += 1 };
  s0 -> s3 [68, 68] { R1361 += 1, R1321 += 1, R484 += 1 };
  s0 -> s4 [68, 68] { R1361 += 1, R1321 += 1, R484 += 1 };
  s0 -> s1 [69, 65535] { R1361 += 1, R1321 += 1, R484 += 1 };
  s1 -> s1 [0, 67] { R1361 += 1, R1321 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1361 += 1 };
  s1 -> s3 [68, 68] { R1361 += 1, R1321 += 1, R484 += 1 };
  s1 -> s4 [68, 68] { R1361 += 1, R1321 += 1, R484 += 1 };
  s1 -> s1 [69, 65535] { R1361 += 1, R1321 += 1, R484 += 1 };
  s2 -> s1 [0, 67] { R1361 += 1, R1321 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R1361 += 1, R1320 += 1, R1321 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R1361 += 1, R1321 += 1, R484 += 1 };
  s2 -> s4 [68, 68] { R1361 += 1, R1321 += 1, R484 += 1 };
  s2 -> s1 [69, 65535] { R1361 += 1, R1321 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1361 += 1, R1321 += 1, R484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1361 += 1 };
  s4 -> s4 [0, 65535] { R1361 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1361 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R1363 += 1, R1323 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R1362 += 1, R1363 += 1 };
  s0 -> s2 [0, 65535] { R1363 += 1, R1322 += 1, R1323 += 1 };
  s0 -> s3 [68, 68] { R1363 += 1, R1323 += 1, R486 += 1 };
  s0 -> s4 [68, 68] { R1363 += 1, R1323 += 1, R486 += 1 };
  s0 -> s1 [69, 65535] { R1363 += 1, R1323 += 1, R486 += 1 };
  s1 -> s1 [0, 67] { R1363 += 1, R1323 += 1, R486 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1363 += 1 };
  s1 -> s3 [68, 68] { R1363 += 1, R1323 += 1, R486 += 1 };
  s1 -> s4 [68, 68] { R1363 += 1, R1323 += 1, R486 += 1 };
  s1 -> s1 [69, 65535] { R1363 += 1, R1323 += 1, R486 += 1 };
  s2 -> s1 [0, 67] { R1363 += 1, R1323 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1363 += 1, R1322 += 1, R1323 += 1 };
  s2 -> s3 [68, 68] { R1363 += 1, R1323 += 1, R486 += 1 };
  s2 -> s4 [68, 68] { R1363 += 1, R1323 += 1, R486 += 1 };
  s2 -> s1 [69, 65535] { R1363 += 1, R1323 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R1363 += 1 };
  s3 -> s3 [0, 65535] { R1363 += 1, R1323 += 1, R486 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1363 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1363 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s2 [0, 67] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s0 -> s3 [0, 65535] { R1365 += 1, R1324 += 1, R1325 += 1 };
  s0 -> s0 [0, 65535] { R1364 += 1, R1365 += 1 };
  s0 -> s4 [68, 68] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s5 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s0 -> s6 [68, 68] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s7 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s0 -> s8 [69, 69] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s0 -> s1 [69, 65535] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s2 [70, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s1 -> s1 [0, 67] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s1 -> s2 [0, 67] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s1 -> s4 [68, 68] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s1 -> s5 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s1 -> s6 [68, 68] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s1 -> s7 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s1 -> s8 [69, 69] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s1 -> s1 [69, 65535] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s1 -> s2 [70, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s2 -> s2 [0, 67] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s2 -> s5 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s2 -> s7 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s2 -> s8 [69, 69] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s2 -> s2 [70, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s3 -> s1 [0, 67] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s2 [0, 67] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s3 -> s3 [0, 65535] { R1365 += 1, R1324 += 1, R1325 += 1 };
  s3 -> s4 [68, 68] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s5 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s3 -> s6 [68, 68] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s7 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s3 -> s8 [69, 69] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s3 -> s1 [69, 65535] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s2 [70, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s6 -> s7 [0, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s6 -> s6 [0, 65535] { R1365 += 1, R1325 += 1, R1148 += 1, R1149 += 1 };
  s6 -> s10 [69, 69] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s6 -> s7 [70, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s7 -> s7 [0, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s7 -> s10 [69, 69] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s7 -> s7 [70, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s8 -> s8 [0, 67] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s8 -> s9 [0, 67] { R1365 += 1, R1325 += 1 };
  s8 -> s10 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s8 -> s11 [68, 68] { R1365 += 1, R1325 += 1 };
  s8 -> s12 [68, 68] { R1365 += 1, R1325 += 1 };
  s8 -> s13 [68, 68] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s8 -> s8 [69, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s8 -> s9 [69, 65535] { R1365 += 1, R1325 += 1 };
  s9 -> s9 [0, 67] { R1365 += 1, R1325 += 1 };
  s9 -> s9 [0, 65535] { R1365 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s11 [68, 68] { R1365 += 1, R1325 += 1 };
  s9 -> s12 [68, 68] { R1365 += 1, R1325 += 1 };
  s9 -> s9 [69, 65535] { R1365 += 1, R1325 += 1 };
  s10 -> s10 [0, 65535] { R1365 += 1, R1325 += 1, R1149 += 1 };
  s10 -> s11 [0, 65535] { R1365 += 1, R1325 += 1 };
  s11 -> s11 [0, 65535] { R1365 += 1, R1325 += 1 };
  s11 -> s15 [0, 65535] { R1365 += 1 };
  s11 -> s14 [0, 65535];
  s12 -> s12 [0, 65535] { R1365 += 1 };
  s12 -> s14 [0, 65535];
  s14 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R1365 += 1 };
  s15 -> s14 [0, 65535];
  accepting s12, s9, s14, s15, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s0 -> s2 [0, 67] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s0 -> s3 [0, 65535] { R1367 += 1, R1326 += 1, R1327 += 1 };
  s0 -> s0 [0, 65535] { R1366 += 1, R1367 += 1 };
  s0 -> s4 [68, 68] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s0 -> s5 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s0 -> s6 [68, 68] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s0 -> s7 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s0 -> s1 [69, 65535] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s0 -> s2 [69, 65535] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s1 -> s1 [0, 67] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s1 -> s2 [0, 67] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s1 -> s4 [68, 68] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s1 -> s5 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s1 -> s6 [68, 68] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s1 -> s7 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s1 -> s1 [69, 65535] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s1 -> s2 [69, 65535] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s2 -> s11 [0, 67] { R1367 += 1, R1327 += 1 };
  s2 -> s2 [0, 67] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s2 -> s5 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s2 -> s8 [68, 68] { R1367 += 1, R1327 += 1 };
  s2 -> s12 [68, 68] { R1367 += 1, R1327 += 1 };
  s2 -> s7 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s2 -> s11 [69, 65535] { R1367 += 1, R1327 += 1 };
  s2 -> s2 [69, 65535] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s3 -> s1 [0, 67] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s3 -> s2 [0, 67] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s3 -> s3 [0, 65535] { R1367 += 1, R1326 += 1, R1327 += 1 };
  s3 -> s4 [68, 68] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s3 -> s5 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s3 -> s6 [68, 68] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s3 -> s7 [68, 68] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s3 -> s1 [69, 65535] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s3 -> s2 [69, 65535] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s4 -> s4 [0, 65535] { R1367 += 1, R1327 += 1, R1296 += 1, R1297 += 1 };
  s4 -> s5 [0, 65535] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s5 -> s5 [0, 65535] { R1367 += 1, R1327 += 1, R1297 += 1, R1298 += 1 };
  s5 -> s8 [0, 65535] { R1367 += 1, R1327 += 1 };
  s8 -> s9 [0, 65535];
  s8 -> s8 [0, 65535] { R1367 += 1, R1327 += 1 };
  s8 -> s10 [0, 65535] { R1367 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R1367 += 1 };
  s11 -> s11 [0, 67] { R1367 += 1, R1327 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R1367 += 1 };
  s11 -> s8 [68, 68] { R1367 += 1, R1327 += 1 };
  s11 -> s12 [68, 68] { R1367 += 1, R1327 += 1 };
  s11 -> s11 [69, 65535] { R1367 += 1, R1327 += 1 };
  s12 -> s9 [0, 65535];
  s12 -> s12 [0, 65535] { R1367 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R1315 && R2 = R1367 && R16 - R1315 = -1 && R17 = R1315 && R18 - R1315 = -1 && R19 = R1315 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1151 + -1*R1149 = 0 && R1150 + R1148 = 0 && R1302 = 0 && R1303 = R1315 && R1304 = 0 && R1305 = R1315 && R1306 = 0 && R1307 = R1315 && R1308 = 0 && R1309 = R1315 && R1310 = 0 && R1311 = R1315 && R1312 = 0 && R1313 = R1315 && R1314 = 0 && R1318 = 0 && R1319 = 0 && R1324 = 0 && R1325 = 0 && R1326 = 0 && R1327 = 0 && R1328 = 1 && R1329 = R1367 && R1330 = 1 && R1331 = R1367 && R1332 = 1 && R1333 = R1367 && R1334 = 1 && R1335 = R1367 && R1336 = 1 && R1337 = R1367 && R1338 = 1 && R1339 = R1367 && R1340 = 1 && R1341 = R1367 && R1342 = 1 && R1343 = R1367 && R1344 = 1 && R1345 = R1367 && R1346 = 1 && R1347 = R1367 && R1348 = 1 && R1349 = R1367 && R1350 = 1 && R1351 = R1367 && R1352 = 1 && R1353 = R1367 && R1354 = 1 && R1355 = R1367 && R1356 = 1 && R1357 = R1367 && R1358 = 1 && R1359 = R1367 && R1360 = 1 && R1361 = R1367 && R1362 = 1 && R1363 = R1367 && R1364 = 1 && R1365 = R1367 && R1366 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R1151 + -1*R1149 < 1 && 0 < R1315 && 0 < R1367 && (R1151 + R1149 != 0 || R1301 + R1298 = 0 || (R1299 + R1296 = 0 && R1300 + R1297 = 0)) && (R1299 + R1296 != 0 || R1151 + R1149 + -1*R1300 + -1*R1297 = 0 || R1151 + R1149 < 1) && (R15 = 0 || (R1316 = 0 && R1317 = 0)) && (R15 = 0 || (R1320 = 0 && R1321 = 0)) && (R15 = 0 || (R1322 = 0 && R1323 = 0)) && (R1299 + R1296 = 0 || R1151 + R1149 < 1);
// End of Parikh automata intersection problem
