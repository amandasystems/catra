// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R1148, R1149, R1150, R1151, R1152, R1153, R1154, R1155, R1156, R1157, R1158, R1159, R1160, R1161, R1162, R1163, R1164, R1165, R1166, R1167, R1168, R1169, R1170, R1171, R1172, R1173, R1174, R1175, R1176, R1177, R1178, R1179, R1180, R1181, R1182, R1183, R1184, R1185, R1186, R1187, R1188, R1189, R1190, R1191, R1192, R1193, R1194, R1195, R1196, R1197, R1198, R1199, R12, R1200, R1201, R1202, R1203, R1204, R1205, R1206, R1207, R1208, R1209, R1210, R1211, R1212, R1213, R1214, R1215, R1216, R1217, R1218, R1219, R1220, R1221, R1222, R1223, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R9;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [32, 32] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R1185 += 1 };
  s0 -> s0 [0, 65535] { R1184 += 1, R1185 += 1 };
  s0 -> s2 [68, 68] { R1185 += 1 };
  s0 -> s1 [69, 65535] { R1185 += 1 };
  s1 -> s1 [0, 64] { R1185 += 1 };
  s1 -> s2 [68, 68] { R1185 += 1 };
  s1 -> s1 [69, 65535] { R1185 += 1 };
  s2 -> s2 [0, 64] { R1185 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R1185 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R1187 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R1186 += 1, R1187 += 1 };
  s1 -> s1 [0, 65535] { R1187 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R1189 += 1 };
  s0 -> s0 [0, 65535] { R1188 += 1, R1189 += 1 };
  s0 -> s2 [0, 65535] { R1189 += 1, R9 += 1 };
  s0 -> s3 [68, 68] { R1189 += 1 };
  s0 -> s1 [69, 65535] { R1189 += 1 };
  s1 -> s1 [0, 67] { R1189 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R1189 += 1 };
  s1 -> s1 [69, 65535] { R1189 += 1 };
  s2 -> s1 [0, 67] { R1189 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1189 += 1, R9 += 1 };
  s2 -> s3 [68, 68] { R1189 += 1 };
  s2 -> s1 [69, 65535] { R1189 += 1 };
  s3 -> s3 [0, 65535] { R1189 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R1191 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R1190 += 1, R1191 += 1 };
  s0 -> s2 [0, 65535] { R1191 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R1191 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R1191 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R1191 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R1191 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R1191 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1191 += 1, R17 += 1 };
  s2 -> s1 [0, 8] { R1191 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R1191 += 1, R16 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R1191 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R1191 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R1191 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R1191 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R1191 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1191 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R1192 += 1, R1193 += 1 };
  s0 -> s1 [0, 65535] { R1193 += 1, R18 += 1, R19 += 1 };
  s0 -> s2 [0, 65535] { R1193 += 1, R19 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1193 += 1, R18 += 1, R19 += 1 };
  s1 -> s2 [0, 65535] { R1193 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1193 += 1, R19 += 1, R3 += 1 };
  s2 -> s4 [0, 65535] { R1193 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1193 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R1195 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R1194 += 1, R1195 += 1 };
  s0 -> s2 [0, 65535] { R1195 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R1195 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R1195 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R1195 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R1195 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R1195 += 1 };
  s1 -> s1 [0, 65535] { R1195 += 1, R21 += 1 };
  s2 -> s1 [0, 8] { R1195 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1195 += 1, R20 += 1, R21 += 1 };
  s2 -> s3 [9, 13] { R1195 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R1195 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R1195 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R1195 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R1195 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R1195 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R1197 += 1, R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R1196 += 1, R1197 += 1 };
  s0 -> s2 [0, 65535] { R1197 += 1, R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R1197 += 1, R23 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R1197 += 1 };
  s2 -> s1 [0, 65535] { R1197 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1197 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1197 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R1199 += 1, R1159 += 1 };
  s0 -> s0 [0, 65535] { R1198 += 1, R1199 += 1 };
  s0 -> s2 [0, 65535] { R1199 += 1, R1158 += 1, R1159 += 1 };
  s0 -> s1 [69, 65535] { R1199 += 1, R1159 += 1 };
  s1 -> s1 [0, 67] { R1199 += 1, R1159 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1199 += 1 };
  s1 -> s1 [69, 65535] { R1199 += 1, R1159 += 1 };
  s2 -> s1 [0, 67] { R1199 += 1, R1159 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R1199 += 1, R1158 += 1, R1159 += 1 };
  s2 -> s1 [69, 65535] { R1199 += 1, R1159 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R1201 += 1, R1160 += 1, R1161 += 1 };
  s0 -> s2 [0, 65535] { R1201 += 1, R1161 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R1200 += 1, R1201 += 1 };
  s1 -> s1 [0, 65535] { R1201 += 1, R1160 += 1, R1161 += 1 };
  s1 -> s2 [0, 65535] { R1201 += 1, R1161 += 1, R14 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1201 += 1, R1161 += 1, R14 += 1 };
  s2 -> s3 [0, 65535] { R1201 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R1201 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R1202 += 1, R1203 += 1 };
  s0 -> s1 [0, 65535] { R1203 += 1, R1162 += 1, R1163 += 1 };
  s0 -> s2 [0, 65535] { R1203 += 1, R1163 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R1203 += 1, R1162 += 1, R1163 += 1 };
  s1 -> s2 [0, 65535] { R1203 += 1, R1163 += 1 };
  s2 -> s3 [0, 65535] { R1203 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R1203 += 1, R1163 += 1 };
  s3 -> s3 [0, 65535] { R1203 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R1205 += 1, R1164 += 1, R1165 += 1 };
  s0 -> s2 [0, 65535] { R1205 += 1, R1165 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R1204 += 1, R1205 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R1205 += 1, R1164 += 1, R1165 += 1 };
  s1 -> s2 [0, 65535] { R1205 += 1, R1165 += 1, R485 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R1205 += 1 };
  s2 -> s2 [0, 65535] { R1205 += 1, R1165 += 1, R485 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1205 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R1207 += 1, R1167 += 1 };
  s0 -> s2 [0, 65535] { R1207 += 1, R1166 += 1, R1167 += 1 };
  s0 -> s3 [0, 65535] { R1207 += 1, R1167 += 1, R487 += 1 };
  s0 -> s0 [0, 65535] { R1206 += 1, R1207 += 1 };
  s0 -> s1 [70, 65535] { R1207 += 1, R1167 += 1 };
  s1 -> s1 [0, 68] { R1207 += 1, R1167 += 1 };
  s1 -> s1 [0, 65535] { R1207 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [70, 65535] { R1207 += 1, R1167 += 1 };
  s2 -> s1 [0, 68] { R1207 += 1, R1167 += 1 };
  s2 -> s2 [0, 65535] { R1207 += 1, R1166 += 1, R1167 += 1 };
  s2 -> s3 [0, 65535] { R1207 += 1, R1167 += 1, R487 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [70, 65535] { R1207 += 1, R1167 += 1 };
  s3 -> s1 [0, 68] { R1207 += 1, R1167 += 1 };
  s3 -> s4 [0, 65535] { R1207 += 1 };
  s3 -> s3 [0, 65535] { R1207 += 1, R1167 += 1, R487 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [70, 65535] { R1207 += 1, R1167 += 1 };
  s4 -> s4 [0, 65535] { R1207 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s0 [0, 65535] { R1208 += 1, R1209 += 1 };
  s0 -> s1 [0, 65535] { R1209 += 1, R1169 += 1 };
  s0 -> s2 [0, 65535] { R1209 += 1, R1168 += 1, R1169 += 1 };
  s1 -> s4 [0, 65535] { R1209 += 1 };
  s1 -> s1 [0, 65535] { R1209 += 1, R1169 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1209 += 1, R1169 += 1 };
  s2 -> s2 [0, 65535] { R1209 += 1, R1168 += 1, R1169 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1209 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R1210 += 1, R1211 += 1 };
  s0 -> s1 [0, 65535] { R1211 += 1, R1170 += 1, R1171 += 1 };
  s0 -> s2 [0, 65535] { R1211 += 1, R1171 += 1, R1155 += 1, R1156 += 1 };
  s0 -> s3 [0, 65535] { R1211 += 1, R1171 += 1, R1156 += 1, R1157 += 1 };
  s1 -> s1 [0, 65535] { R1211 += 1, R1170 += 1, R1171 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s2 [0, 65535] { R1211 += 1, R1171 += 1, R1155 += 1, R1156 += 1 };
  s1 -> s3 [0, 65535] { R1211 += 1, R1171 += 1, R1156 += 1, R1157 += 1 };
  s2 -> s4 [0, 65535] { R1211 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R1211 += 1, R1171 += 1, R1155 += 1, R1156 += 1 };
  s2 -> s3 [0, 65535] { R1211 += 1, R1171 += 1, R1156 += 1, R1157 += 1 };
  s3 -> s4 [0, 65535] { R1211 += 1 };
  s3 -> s5 [0, 65535] { R1211 += 1, R1171 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R1211 += 1, R1171 += 1, R1156 += 1, R1157 += 1 };
  s4 -> s4 [0, 65535] { R1211 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R1211 += 1 };
  s5 -> s5 [0, 65535] { R1211 += 1, R1171 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R1213 += 1, R1173 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R1213 += 1, R1172 += 1, R1173 += 1 };
  s0 -> s0 [0, 65535] { R1212 += 1, R1213 += 1 };
  s1 -> s1 [0, 65535] { R1213 += 1, R1173 += 1, R15 += 1 };
  s1 -> s4 [0, 65535] { R1213 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R1213 += 1, R1173 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R1213 += 1, R1172 += 1, R1173 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R1213 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R1215 += 1, R1175 += 1 };
  s0 -> s2 [0, 65535] { R1215 += 1, R1174 += 1, R1175 += 1 };
  s0 -> s0 [0, 65535] { R1214 += 1, R1215 += 1 };
  s0 -> s3 [68, 68] { R1215 += 1, R1175 += 1 };
  s0 -> s4 [68, 68] { R1215 += 1, R1175 += 1 };
  s0 -> s5 [69, 69] { R1215 += 1, R1175 += 1 };
  s0 -> s1 [70, 65535] { R1215 += 1, R1175 += 1 };
  s1 -> s1 [0, 67] { R1215 += 1, R1175 += 1 };
  s1 -> s3 [68, 68] { R1215 += 1, R1175 += 1 };
  s1 -> s4 [68, 68] { R1215 += 1, R1175 += 1 };
  s1 -> s5 [69, 69] { R1215 += 1, R1175 += 1 };
  s1 -> s1 [70, 65535] { R1215 += 1, R1175 += 1 };
  s2 -> s1 [0, 67] { R1215 += 1, R1175 += 1 };
  s2 -> s2 [0, 65535] { R1215 += 1, R1174 += 1, R1175 += 1 };
  s2 -> s3 [68, 68] { R1215 += 1, R1175 += 1 };
  s2 -> s4 [68, 68] { R1215 += 1, R1175 += 1 };
  s2 -> s5 [69, 69] { R1215 += 1, R1175 += 1 };
  s2 -> s1 [70, 65535] { R1215 += 1, R1175 += 1 };
  s3 -> s3 [0, 68] { R1215 += 1, R1175 += 1 };
  s3 -> s8 [69, 69] { R1215 += 1, R1175 += 1 };
  s3 -> s3 [70, 65535] { R1215 += 1, R1175 += 1 };
  s5 -> s5 [0, 67] { R1215 += 1, R1175 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R1215 += 1 };
  s5 -> s7 [68, 68] { R1215 += 1, R1175 += 1 };
  s5 -> s8 [68, 68] { R1215 += 1, R1175 += 1 };
  s5 -> s5 [69, 65535] { R1215 += 1, R1175 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R1215 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R1215 += 1, R1175 += 1 };
  s8 -> s9 [0, 65535] { R1215 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R1215 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R1217 += 1, R1177 += 1, R484 += 1 };
  s0 -> s2 [0, 65535] { R1217 += 1, R1176 += 1, R1177 += 1 };
  s0 -> s0 [0, 65535] { R1216 += 1, R1217 += 1 };
  s0 -> s3 [68, 68] { R1217 += 1, R1177 += 1, R484 += 1 };
  s0 -> s4 [68, 68] { R1217 += 1, R1177 += 1, R484 += 1 };
  s0 -> s1 [69, 65535] { R1217 += 1, R1177 += 1, R484 += 1 };
  s1 -> s1 [0, 67] { R1217 += 1, R1177 += 1, R484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1217 += 1 };
  s1 -> s3 [68, 68] { R1217 += 1, R1177 += 1, R484 += 1 };
  s1 -> s4 [68, 68] { R1217 += 1, R1177 += 1, R484 += 1 };
  s1 -> s1 [69, 65535] { R1217 += 1, R1177 += 1, R484 += 1 };
  s2 -> s1 [0, 67] { R1217 += 1, R1177 += 1, R484 += 1 };
  s2 -> s2 [0, 65535] { R1217 += 1, R1176 += 1, R1177 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R1217 += 1, R1177 += 1, R484 += 1 };
  s2 -> s4 [68, 68] { R1217 += 1, R1177 += 1, R484 += 1 };
  s2 -> s1 [69, 65535] { R1217 += 1, R1177 += 1, R484 += 1 };
  s3 -> s3 [0, 65535] { R1217 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R1217 += 1, R1177 += 1, R484 += 1 };
  s4 -> s6 [0, 65535] { R1217 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1217 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R1219 += 1, R1179 += 1, R486 += 1 };
  s0 -> s0 [0, 65535] { R1218 += 1, R1219 += 1 };
  s0 -> s2 [0, 65535] { R1219 += 1, R1178 += 1, R1179 += 1 };
  s0 -> s3 [68, 68] { R1219 += 1, R1179 += 1, R486 += 1 };
  s0 -> s4 [68, 68] { R1219 += 1, R1179 += 1, R486 += 1 };
  s0 -> s1 [69, 65535] { R1219 += 1, R1179 += 1, R486 += 1 };
  s1 -> s1 [0, 67] { R1219 += 1, R1179 += 1, R486 += 1 };
  s1 -> s1 [0, 65535] { R1219 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R1219 += 1, R1179 += 1, R486 += 1 };
  s1 -> s4 [68, 68] { R1219 += 1, R1179 += 1, R486 += 1 };
  s1 -> s1 [69, 65535] { R1219 += 1, R1179 += 1, R486 += 1 };
  s2 -> s1 [0, 67] { R1219 += 1, R1179 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R1219 += 1, R1178 += 1, R1179 += 1 };
  s2 -> s3 [68, 68] { R1219 += 1, R1179 += 1, R486 += 1 };
  s2 -> s4 [68, 68] { R1219 += 1, R1179 += 1, R486 += 1 };
  s2 -> s1 [69, 65535] { R1219 += 1, R1179 += 1, R486 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R1219 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1219 += 1 };
  s4 -> s4 [0, 65535] { R1219 += 1, R1179 += 1, R486 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1219 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s0 -> s2 [0, 67] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s0 [0, 65535] { R1220 += 1, R1221 += 1 };
  s0 -> s3 [0, 65535] { R1221 += 1, R1180 += 1, R1181 += 1 };
  s0 -> s4 [68, 68] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s5 [68, 68] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s6 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s0 -> s7 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s0 -> s8 [69, 69] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s0 -> s2 [69, 65535] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s0 -> s1 [70, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s1 -> s1 [0, 67] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s1 -> s6 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s1 -> s7 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s1 -> s8 [69, 69] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s1 -> s1 [70, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s2 -> s1 [0, 67] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s2 -> s2 [0, 67] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s4 [68, 68] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s5 [68, 68] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s6 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s2 -> s7 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s2 -> s8 [69, 69] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s2 -> s2 [69, 65535] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s2 -> s1 [70, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s3 -> s1 [0, 67] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s3 -> s2 [0, 67] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s3 [0, 65535] { R1221 += 1, R1180 += 1, R1181 += 1 };
  s3 -> s4 [68, 68] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s5 [68, 68] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s6 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s3 -> s7 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s3 -> s8 [69, 69] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s3 -> s2 [69, 65535] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s3 -> s1 [70, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s5 -> s6 [0, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s5 -> s5 [0, 65535] { R1221 += 1, R1181 += 1, R1148 += 1, R1149 += 1 };
  s5 -> s12 [69, 69] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s5 -> s6 [70, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s6 -> s6 [0, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s6 -> s12 [69, 69] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s6 -> s6 [70, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s8 -> s8 [0, 67] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s8 -> s9 [0, 67] { R1221 += 1, R1181 += 1 };
  s8 -> s10 [68, 68] { R1221 += 1, R1181 += 1 };
  s8 -> s11 [68, 68] { R1221 += 1, R1181 += 1 };
  s8 -> s12 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s8 -> s13 [68, 68] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s8 -> s8 [69, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s8 -> s9 [69, 65535] { R1221 += 1, R1181 += 1 };
  s9 -> s9 [0, 67] { R1221 += 1, R1181 += 1 };
  s9 -> s14 [0, 65535];
  s9 -> s9 [0, 65535] { R1221 += 1 };
  s9 -> s10 [68, 68] { R1221 += 1, R1181 += 1 };
  s9 -> s11 [68, 68] { R1221 += 1, R1181 += 1 };
  s9 -> s9 [69, 65535] { R1221 += 1, R1181 += 1 };
  s10 -> s10 [0, 65535] { R1221 += 1, R1181 += 1 };
  s10 -> s14 [0, 65535];
  s10 -> s15 [0, 65535] { R1221 += 1 };
  s11 -> s11 [0, 65535] { R1221 += 1 };
  s11 -> s14 [0, 65535];
  s12 -> s10 [0, 65535] { R1221 += 1, R1181 += 1 };
  s12 -> s12 [0, 65535] { R1221 += 1, R1181 += 1, R1149 += 1 };
  s14 -> s14 [0, 65535];
  s15 -> s14 [0, 65535];
  s15 -> s15 [0, 65535] { R1221 += 1 };
  accepting s9, s14, s15, s10, s11;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s0 -> s2 [0, 65535] { R1223 += 1, R1182 += 1, R1183 += 1 };
  s0 -> s0 [0, 65535] { R1222 += 1, R1223 += 1 };
  s0 -> s3 [68, 68] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s0 -> s4 [68, 68] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s0 -> s1 [69, 65535] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s1 -> s1 [0, 67] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R1223 += 1 };
  s1 -> s3 [68, 68] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s1 -> s4 [68, 68] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s1 -> s1 [69, 65535] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s2 -> s1 [0, 67] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s2 -> s2 [0, 65535] { R1223 += 1, R1182 += 1, R1183 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [68, 68] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s2 -> s4 [68, 68] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s2 -> s1 [69, 65535] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s3 -> s3 [0, 65535] { R1223 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R1223 += 1 };
  s4 -> s4 [0, 65535] { R1223 += 1, R1183 += 1, R1152 += 1, R1153 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R1223 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R1 = R1171 && R2 = R1223 && R16 - R1171 = -1 && R17 = R1171 && R18 - R1171 = -1 && R19 = R1171 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R1151 + -1*R1149 = 0 && R1150 + R1148 = 0 && R1158 = 0 && R1159 = R1171 && R1160 = 0 && R1161 = R1171 && R1162 = 0 && R1163 = R1171 && R1164 = 0 && R1165 = R1171 && R1166 = 0 && R1167 = R1171 && R1168 = 0 && R1169 = R1171 && R1170 = 0 && R1174 = 0 && R1175 = 0 && R1180 = 0 && R1181 = 0 && R1184 = 1 && R1185 = R1223 && R1186 = 1 && R1187 = R1223 && R1188 = 1 && R1189 = R1223 && R1190 = 1 && R1191 = R1223 && R1192 = 1 && R1193 = R1223 && R1194 = 1 && R1195 = R1223 && R1196 = 1 && R1197 = R1223 && R1198 = 1 && R1199 = R1223 && R1200 = 1 && R1201 = R1223 && R1202 = 1 && R1203 = R1223 && R1204 = 1 && R1205 = R1223 && R1206 = 1 && R1207 = R1223 && R1208 = 1 && R1209 = R1223 && R1210 = 1 && R1211 = R1223 && R1212 = 1 && R1213 = R1223 && R1214 = 1 && R1215 = R1223 && R1216 = 1 && R1217 = R1223 && R1218 = 1 && R1219 = R1223 && R1220 = 1 && R1221 = R1223 && R1222 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R1151 + -1*R1149 < 1 && 0 < R1171 && 0 < R1223 && (R1151 + R1149 != 0 || R1157 + R1154 = 0 || (R1155 + R1152 = 0 && R1156 + R1153 = 0)) && (R1155 + R1152 != 0 || R1151 + R1149 + -1*R1156 + -1*R1153 = 0 || R1151 + R1149 < 1) && (R15 = 0 || (R1172 = 0 && R1173 = 0)) && (R15 = 0 || (R1176 = 0 && R1177 = 0)) && (R15 = 0 || (R1178 = 0 && R1179 = 0)) && (R15 = 0 || (R1182 = 0 && R1183 = 0)) && (R1155 + R1152 = 0 || R1151 + R1149 < 1);
// End of Parikh automata intersection problem
