// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R12, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R3, R4, R484, R485, R486, R487, R5, R708, R709, R710, R711, R856, R857, R858, R859, R860, R861, R862, R863, R864, R865, R866, R867, R868, R869, R870, R871, R872, R873, R874, R875, R876, R877, R878, R879, R880, R881, R882, R883, R884, R885, R886, R887, R888, R889, R890, R891, R892, R893, R894, R895, R896, R897, R898, R899, R9, R900, R901, R902, R903, R904, R905, R906, R907, R908, R909, R910, R911, R912, R913, R914, R915, R916, R917, R918, R919, R920, R921, R922, R923, R924, R925, R926, R927;
synchronised {  // Automata constraining P6
automaton P6_0 {
  init s0;
  s0 -> s1 [100, 100];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R24 += 1, R25 += 1 };
  s0 -> s1 [32, 32] { R25 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R26 += 1, R27 += 1 };
  s0 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R27 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 64] { R889 += 1 };
  s0 -> s0 [0, 65535] { R888 += 1, R889 += 1 };
  s0 -> s2 [68, 68] { R889 += 1 };
  s0 -> s1 [69, 65535] { R889 += 1 };
  s1 -> s1 [0, 64] { R889 += 1 };
  s1 -> s2 [68, 68] { R889 += 1 };
  s1 -> s1 [69, 65535] { R889 += 1 };
  s2 -> s2 [0, 64] { R889 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R889 += 1 };
  accepting s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R890 += 1, R891 += 1 };
  s0 -> s1 [0, 65535] { R891 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R891 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 67] { R893 += 1 };
  s0 -> s2 [0, 65535] { R893 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R892 += 1, R893 += 1 };
  s0 -> s3 [68, 68] { R893 += 1 };
  s0 -> s1 [69, 65535] { R893 += 1 };
  s1 -> s1 [0, 67] { R893 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R893 += 1 };
  s1 -> s1 [69, 65535] { R893 += 1 };
  s2 -> s1 [0, 67] { R893 += 1 };
  s2 -> s2 [0, 65535] { R893 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [68, 68] { R893 += 1 };
  s2 -> s1 [69, 65535] { R893 += 1 };
  s3 -> s3 [0, 65535] { R893 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 8] { R895 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R894 += 1, R895 += 1 };
  s0 -> s2 [0, 65535] { R895 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [9, 13] { R895 += 1, R17 += 1 };
  s0 -> s1 [14, 31] { R895 += 1, R17 += 1 };
  s0 -> s3 [32, 32] { R895 += 1, R17 += 1 };
  s0 -> s1 [33, 65535] { R895 += 1, R17 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R895 += 1, R17 += 1 };
  s1 -> s5 [0, 65535] { R895 += 1 };
  s2 -> s1 [0, 8] { R895 += 1, R17 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R895 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [9, 13] { R895 += 1, R17 += 1 };
  s2 -> s1 [14, 31] { R895 += 1, R17 += 1 };
  s2 -> s3 [32, 32] { R895 += 1, R17 += 1 };
  s2 -> s1 [33, 65535] { R895 += 1, R17 += 1 };
  s3 -> s1 [0, 65535] { R895 += 1, R17 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R895 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R896 += 1, R897 += 1 };
  s0 -> s1 [0, 65535] { R897 += 1, R19 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R897 += 1, R18 += 1, R19 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R897 += 1 };
  s1 -> s1 [0, 65535] { R897 += 1, R19 += 1, R3 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R897 += 1, R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R897 += 1, R18 += 1, R19 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R897 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R899 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R898 += 1, R899 += 1 };
  s0 -> s2 [0, 65535] { R899 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [9, 13] { R899 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R899 += 1, R21 += 1 };
  s0 -> s3 [32, 32] { R899 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R899 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R899 += 1, R21 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R899 += 1 };
  s2 -> s1 [0, 8] { R899 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R899 += 1, R20 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R899 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R899 += 1, R21 += 1 };
  s2 -> s3 [32, 32] { R899 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R899 += 1, R21 += 1 };
  s3 -> s1 [0, 65535] { R899 += 1, R21 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R899 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R900 += 1, R901 += 1 };
  s0 -> s1 [0, 65535] { R901 += 1, R23 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R901 += 1, R22 += 1, R23 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R901 += 1 };
  s1 -> s1 [0, 65535] { R901 += 1, R23 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R901 += 1, R23 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R901 += 1, R22 += 1, R23 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R901 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 67] { R903 += 1, R863 += 1 };
  s0 -> s2 [0, 65535] { R903 += 1, R862 += 1, R863 += 1 };
  s0 -> s0 [0, 65535] { R902 += 1, R903 += 1 };
  s0 -> s1 [69, 65535] { R903 += 1, R863 += 1 };
  s1 -> s1 [0, 67] { R903 += 1, R863 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R903 += 1 };
  s1 -> s1 [69, 65535] { R903 += 1, R863 += 1 };
  s2 -> s1 [0, 67] { R903 += 1, R863 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R903 += 1, R862 += 1, R863 += 1 };
  s2 -> s1 [69, 65535] { R903 += 1, R863 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R905 += 1, R865 += 1, R14 += 1 };
  s0 -> s2 [0, 65535] { R905 += 1, R864 += 1, R865 += 1 };
  s0 -> s0 [0, 65535] { R904 += 1, R905 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R905 += 1, R865 += 1, R14 += 1 };
  s1 -> s4 [0, 65535] { R905 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R905 += 1, R865 += 1, R14 += 1 };
  s2 -> s2 [0, 65535] { R905 += 1, R864 += 1, R865 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R905 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R907 += 1, R867 += 1 };
  s0 -> s2 [0, 65535] { R907 += 1, R866 += 1, R867 += 1 };
  s0 -> s0 [0, 65535] { R906 += 1, R907 += 1 };
  s1 -> s4 [0, 65535] { R907 += 1 };
  s1 -> s1 [0, 65535] { R907 += 1, R867 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R907 += 1, R867 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R907 += 1, R866 += 1, R867 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R907 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65535] { R909 += 1, R868 += 1, R869 += 1 };
  s0 -> s2 [0, 65535] { R909 += 1, R869 += 1, R485 += 1 };
  s0 -> s0 [0, 65535] { R908 += 1, R909 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R909 += 1, R868 += 1, R869 += 1 };
  s1 -> s2 [0, 65535] { R909 += 1, R869 += 1, R485 += 1 };
  s2 -> s3 [0, 65535] { R909 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R909 += 1, R869 += 1, R485 += 1 };
  s3 -> s3 [0, 65535] { R909 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 68] { R911 += 1, R871 += 1 };
  s0 -> s0 [0, 65535] { R910 += 1, R911 += 1 };
  s0 -> s2 [0, 65535] { R911 += 1, R870 += 1, R871 += 1 };
  s0 -> s3 [0, 65535] { R911 += 1, R871 += 1, R487 += 1 };
  s0 -> s1 [70, 65535] { R911 += 1, R871 += 1 };
  s1 -> s1 [0, 68] { R911 += 1, R871 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R911 += 1 };
  s1 -> s1 [70, 65535] { R911 += 1, R871 += 1 };
  s2 -> s1 [0, 68] { R911 += 1, R871 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R911 += 1, R870 += 1, R871 += 1 };
  s2 -> s3 [0, 65535] { R911 += 1, R871 += 1, R487 += 1 };
  s2 -> s1 [70, 65535] { R911 += 1, R871 += 1 };
  s3 -> s1 [0, 68] { R911 += 1, R871 += 1 };
  s3 -> s4 [0, 65535] { R911 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R911 += 1, R871 += 1, R487 += 1 };
  s3 -> s1 [70, 65535] { R911 += 1, R871 += 1 };
  s4 -> s4 [0, 65535] { R911 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 68] { R913 += 1, R873 += 1, R711 += 1 };
  s0 -> s0 [0, 65535] { R912 += 1, R913 += 1 };
  s0 -> s2 [0, 65535] { R913 += 1, R872 += 1, R873 += 1 };
  s0 -> s3 [69, 69] { R913 += 1, R873 += 1, R711 += 1 };
  s0 -> s1 [70, 65535] { R913 += 1, R873 += 1, R711 += 1 };
  s1 -> s1 [0, 68] { R913 += 1, R873 += 1, R711 += 1 };
  s1 -> s3 [69, 69] { R913 += 1, R873 += 1, R711 += 1 };
  s1 -> s1 [70, 65535] { R913 += 1, R873 += 1, R711 += 1 };
  s2 -> s1 [0, 68] { R913 += 1, R873 += 1, R711 += 1 };
  s2 -> s2 [0, 65535] { R913 += 1, R872 += 1, R873 += 1 };
  s2 -> s3 [69, 69] { R913 += 1, R873 += 1, R711 += 1 };
  s2 -> s1 [70, 65535] { R913 += 1, R873 += 1, R711 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R913 += 1, R873 += 1, R711 += 1 };
  s3 -> s5 [0, 65535] { R913 += 1, R873 += 1 };
  s3 -> s6 [0, 65535] { R913 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R913 += 1, R873 += 1 };
  s5 -> s6 [0, 65535] { R913 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R913 += 1 };
  accepting s3, s4, s5, s6;
};
automaton value2_18 {
  init s0;
  s0 -> s0 [0, 65535] { R914 += 1, R915 += 1 };
  s0 -> s1 [0, 65535] { R915 += 1, R874 += 1, R875 += 1 };
  s0 -> s2 [0, 65535] { R915 += 1, R875 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R915 += 1, R874 += 1, R875 += 1 };
  s1 -> s2 [0, 65535] { R915 += 1, R875 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R915 += 1, R875 += 1 };
  s2 -> s4 [0, 65535] { R915 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R915 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65535] { R917 += 1, R877 += 1, R15 += 1 };
  s0 -> s2 [0, 65535] { R917 += 1, R876 += 1, R877 += 1 };
  s0 -> s0 [0, 65535] { R916 += 1, R917 += 1 };
  s1 -> s1 [0, 65535] { R917 += 1, R877 += 1, R15 += 1 };
  s1 -> s4 [0, 65535] { R917 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R917 += 1, R877 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R917 += 1, R876 += 1, R877 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R917 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 67] { R919 += 1, R879 += 1 };
  s0 -> s2 [0, 65535] { R919 += 1, R878 += 1, R879 += 1 };
  s0 -> s0 [0, 65535] { R918 += 1, R919 += 1 };
  s0 -> s3 [68, 68] { R919 += 1, R879 += 1 };
  s0 -> s4 [68, 68] { R919 += 1, R879 += 1 };
  s0 -> s5 [69, 69] { R919 += 1, R879 += 1 };
  s0 -> s1 [70, 65535] { R919 += 1, R879 += 1 };
  s1 -> s1 [0, 67] { R919 += 1, R879 += 1 };
  s1 -> s3 [68, 68] { R919 += 1, R879 += 1 };
  s1 -> s4 [68, 68] { R919 += 1, R879 += 1 };
  s1 -> s5 [69, 69] { R919 += 1, R879 += 1 };
  s1 -> s1 [70, 65535] { R919 += 1, R879 += 1 };
  s2 -> s1 [0, 67] { R919 += 1, R879 += 1 };
  s2 -> s2 [0, 65535] { R919 += 1, R878 += 1, R879 += 1 };
  s2 -> s3 [68, 68] { R919 += 1, R879 += 1 };
  s2 -> s4 [68, 68] { R919 += 1, R879 += 1 };
  s2 -> s5 [69, 69] { R919 += 1, R879 += 1 };
  s2 -> s1 [70, 65535] { R919 += 1, R879 += 1 };
  s3 -> s3 [0, 68] { R919 += 1, R879 += 1 };
  s3 -> s7 [69, 69] { R919 += 1, R879 += 1 };
  s3 -> s3 [70, 65535] { R919 += 1, R879 += 1 };
  s5 -> s5 [0, 67] { R919 += 1, R879 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R919 += 1 };
  s5 -> s7 [68, 68] { R919 += 1, R879 += 1 };
  s5 -> s8 [68, 68] { R919 += 1, R879 += 1 };
  s5 -> s5 [69, 65535] { R919 += 1, R879 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R919 += 1, R879 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s9 [0, 65535] { R919 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R919 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s9 [0, 65535] { R919 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 67] { R921 += 1, R881 += 1, R484 += 1 };
  s0 -> s0 [0, 65535] { R920 += 1, R921 += 1 };
  s0 -> s2 [0, 65535] { R921 += 1, R880 += 1, R881 += 1 };
  s0 -> s3 [68, 68] { R921 += 1, R881 += 1, R484 += 1 };
  s0 -> s4 [68, 68] { R921 += 1, R881 += 1, R484 += 1 };
  s0 -> s1 [69, 65535] { R921 += 1, R881 += 1, R484 += 1 };
  s1 -> s1 [0, 67] { R921 += 1, R881 += 1, R484 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R921 += 1 };
  s1 -> s3 [68, 68] { R921 += 1, R881 += 1, R484 += 1 };
  s1 -> s4 [68, 68] { R921 += 1, R881 += 1, R484 += 1 };
  s1 -> s1 [69, 65535] { R921 += 1, R881 += 1, R484 += 1 };
  s2 -> s1 [0, 67] { R921 += 1, R881 += 1, R484 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R921 += 1, R880 += 1, R881 += 1 };
  s2 -> s3 [68, 68] { R921 += 1, R881 += 1, R484 += 1 };
  s2 -> s4 [68, 68] { R921 += 1, R881 += 1, R484 += 1 };
  s2 -> s1 [69, 65535] { R921 += 1, R881 += 1, R484 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R921 += 1 };
  s4 -> s5 [0, 65535] { R921 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R921 += 1, R881 += 1, R484 += 1 };
  s5 -> s5 [0, 65535] { R921 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 67] { R923 += 1, R883 += 1, R486 += 1 };
  s0 -> s2 [0, 65535] { R923 += 1, R882 += 1, R883 += 1 };
  s0 -> s0 [0, 65535] { R922 += 1, R923 += 1 };
  s0 -> s3 [68, 68] { R923 += 1, R883 += 1, R486 += 1 };
  s0 -> s4 [68, 68] { R923 += 1, R883 += 1, R486 += 1 };
  s0 -> s1 [69, 65535] { R923 += 1, R883 += 1, R486 += 1 };
  s1 -> s1 [0, 67] { R923 += 1, R883 += 1, R486 += 1 };
  s1 -> s1 [0, 65535] { R923 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [68, 68] { R923 += 1, R883 += 1, R486 += 1 };
  s1 -> s4 [68, 68] { R923 += 1, R883 += 1, R486 += 1 };
  s1 -> s1 [69, 65535] { R923 += 1, R883 += 1, R486 += 1 };
  s2 -> s1 [0, 67] { R923 += 1, R883 += 1, R486 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R923 += 1, R882 += 1, R883 += 1 };
  s2 -> s3 [68, 68] { R923 += 1, R883 += 1, R486 += 1 };
  s2 -> s4 [68, 68] { R923 += 1, R883 += 1, R486 += 1 };
  s2 -> s1 [69, 65535] { R923 += 1, R883 += 1, R486 += 1 };
  s3 -> s3 [0, 65535] { R923 += 1, R883 += 1, R486 += 1 };
  s3 -> s6 [0, 65535] { R923 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R923 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R923 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 67] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [0, 67] { R925 += 1, R885 += 1, R709 += 1 };
  s0 -> s0 [0, 65535] { R924 += 1, R925 += 1 };
  s0 -> s3 [0, 65535] { R925 += 1, R884 += 1, R885 += 1 };
  s0 -> s4 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s0 -> s5 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s0 -> s6 [68, 68] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s0 -> s7 [68, 68] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s0 -> s1 [69, 65535] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s0 -> s2 [70, 65535] { R925 += 1, R885 += 1, R709 += 1 };
  s1 -> s1 [0, 67] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s1 -> s2 [0, 67] { R925 += 1, R885 += 1, R709 += 1 };
  s1 -> s4 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s1 -> s5 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s1 -> s6 [68, 68] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s1 -> s7 [68, 68] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s1 -> s1 [69, 65535] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s1 -> s2 [70, 65535] { R925 += 1, R885 += 1, R709 += 1 };
  s2 -> s2 [0, 67] { R925 += 1, R885 += 1, R709 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R925 += 1 };
  s2 -> s4 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s2 -> s5 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s2 -> s2 [70, 65535] { R925 += 1, R885 += 1, R709 += 1 };
  s3 -> s1 [0, 67] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s3 -> s2 [0, 67] { R925 += 1, R885 += 1, R709 += 1 };
  s3 -> s3 [0, 65535] { R925 += 1, R884 += 1, R885 += 1 };
  s3 -> s4 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s3 -> s5 [68, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s3 -> s6 [68, 68] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s3 -> s7 [68, 68] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s3 -> s1 [69, 65535] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s3 -> s2 [70, 65535] { R925 += 1, R885 += 1, R709 += 1 };
  s4 -> s4 [0, 65535] { R925 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s5 [0, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R925 += 1 };
  s5 -> s5 [70, 65535] { R925 += 1, R885 += 1, R709 += 1 };
  s7 -> s5 [0, 68] { R925 += 1, R885 += 1, R709 += 1 };
  s7 -> s7 [0, 65535] { R925 += 1, R885 += 1, R708 += 1, R709 += 1 };
  s7 -> s5 [70, 65535] { R925 += 1, R885 += 1, R709 += 1 };
  s8 -> s8 [0, 65535];
  accepting s2, s4, s5, s8;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 67] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s0 -> s2 [0, 67] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s0 -> s3 [0, 65535] { R927 += 1, R886 += 1, R887 += 1 };
  s0 -> s0 [0, 65535] { R926 += 1, R927 += 1 };
  s0 -> s4 [68, 68] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s0 -> s5 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s0 -> s6 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s0 -> s7 [68, 68] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s0 -> s1 [69, 65535] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s0 -> s2 [69, 65535] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s1 -> s1 [0, 67] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s1 -> s2 [0, 67] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s1 -> s4 [68, 68] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s1 -> s5 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s1 -> s6 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s1 -> s7 [68, 68] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s1 -> s1 [69, 65535] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s1 -> s2 [69, 65535] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s2 -> s2 [0, 67] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s2 -> s11 [0, 67] { R927 += 1, R887 += 1 };
  s2 -> s5 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s2 -> s8 [68, 68] { R927 += 1, R887 += 1 };
  s2 -> s12 [68, 68] { R927 += 1, R887 += 1 };
  s2 -> s6 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s2 -> s2 [69, 65535] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s2 -> s11 [69, 65535] { R927 += 1, R887 += 1 };
  s3 -> s1 [0, 67] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s3 -> s2 [0, 67] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s3 -> s3 [0, 65535] { R927 += 1, R886 += 1, R887 += 1 };
  s3 -> s4 [68, 68] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s3 -> s5 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s3 -> s6 [68, 68] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s3 -> s7 [68, 68] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s3 -> s1 [69, 65535] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s3 -> s2 [69, 65535] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s4 -> s4 [0, 65535] { R927 += 1, R887 += 1, R856 += 1, R857 += 1 };
  s4 -> s6 [0, 65535] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s6 -> s8 [0, 65535] { R927 += 1, R887 += 1 };
  s6 -> s6 [0, 65535] { R927 += 1, R887 += 1, R857 += 1, R858 += 1 };
  s8 -> s9 [0, 65535] { R927 += 1 };
  s8 -> s8 [0, 65535] { R927 += 1, R887 += 1 };
  s8 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R927 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s11 [0, 67] { R927 += 1, R887 += 1 };
  s11 -> s11 [0, 65535] { R927 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s8 [68, 68] { R927 += 1, R887 += 1 };
  s11 -> s12 [68, 68] { R927 += 1, R887 += 1 };
  s11 -> s11 [69, 65535] { R927 += 1, R887 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R927 += 1 };
  accepting s12, s8, s9, s10, s11;
};
};
constraint R1 = R875 && R2 = R927 && R16 - R875 = -1 && R17 = R875 && R18 - R875 = -1 && R19 = R875 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R485 + R484 + -1*R711 + -1*R709 = 0 && R710 + R708 = 0 && R862 = 0 && R863 = R875 && R864 = 0 && R865 = R875 && R866 = 0 && R867 = R875 && R868 = 0 && R869 = R875 && R870 = 0 && R871 = R875 && R872 = 0 && R873 = R875 && R874 = 0 && R878 = 0 && R879 = 0 && R884 = 0 && R885 = 0 && R886 = 0 && R887 = 0 && R888 = 1 && R889 = R927 && R890 = 1 && R891 = R927 && R892 = 1 && R893 = R927 && R894 = 1 && R895 = R927 && R896 = 1 && R897 = R927 && R898 = 1 && R899 = R927 && R900 = 1 && R901 = R927 && R902 = 1 && R903 = R927 && R904 = 1 && R905 = R927 && R906 = 1 && R907 = R927 && R908 = 1 && R909 = R927 && R910 = 1 && R911 = R927 && R912 = 1 && R913 = R927 && R914 = 1 && R915 = R927 && R916 = 1 && R917 = R927 && R918 = 1 && R919 = R927 && R920 = 1 && R921 = R927 && R922 = 1 && R923 = R927 && R924 = 1 && R925 = R927 && R926 = 1 && R9 < 1 && R12 < 1 && R487 + R486 < 1 && -1*R711 + -1*R709 < 1 && 0 < R875 && 0 < R927 && (R711 + R709 != 0 || R861 + R858 = 0 || (R859 + R856 = 0 && R860 + R857 = 0)) && (R859 + R856 != 0 || R711 + R709 + -1*R860 + -1*R857 = 0 || R711 + R709 < 1) && (R15 = 0 || (R876 = 0 && R877 = 0)) && (R15 = 0 || (R880 = 0 && R881 = 0)) && (R15 = 0 || (R882 = 0 && R883 = 0)) && (R859 + R856 = 0 || R711 + R709 < 1);
// End of Parikh automata intersection problem
