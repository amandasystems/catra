// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining P8
automaton P8_0 {
  init s0;
  s0 -> s1 [101, 101];
  accepting s1;
};
};
synchronised {  // Automata constraining P33
automaton P33_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R36 += 1, R37 += 1 };
  s0 -> s1 [32, 32] { R37 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R39 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R38 += 1, R39 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R39 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R41 += 1 };
  s0 -> s0 [0, 65535] { R40 += 1, R41 += 1 };
  s0 -> s2 [9, 13] { R41 += 1 };
  s0 -> s1 [14, 31] { R41 += 1 };
  s0 -> s2 [32, 32] { R41 += 1 };
  s0 -> s1 [33, 65535] { R41 += 1 };
  s1 -> s1 [0, 65535] { R41 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R41 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R43 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535] { R43 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R129 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R128 += 1, R129 += 1 };
  s1 -> s1 [0, 65535] { R129 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R130 += 1, R131 += 1 };
  s0 -> s1 [0, 65535] { R131 += 1, R28 += 1, R29 += 1 };
  s0 -> s2 [10, 10] { R131 += 1, R29 += 1 };
  s1 -> s1 [0, 65535] { R131 += 1, R28 += 1, R29 += 1 };
  s1 -> s2 [10, 10] { R131 += 1, R29 += 1 };
  s2 -> s2 [0, 65535] { R131 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R133 += 1, R31 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R132 += 1, R133 += 1 };
  s0 -> s2 [0, 65535] { R133 += 1, R30 += 1, R31 += 1 };
  s1 -> s1 [0, 65535] { R133 += 1, R31 += 1, R6 += 1 };
  s1 -> s4 [0, 65535] { R133 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R133 += 1, R31 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R133 += 1, R30 += 1, R31 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R133 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R135 += 1, R33 += 1 };
  s0 -> s2 [0, 65535] { R135 += 1, R32 += 1, R33 += 1 };
  s0 -> s0 [0, 65535] { R134 += 1, R135 += 1 };
  s0 -> s3 [9, 13] { R135 += 1, R33 += 1 };
  s0 -> s1 [14, 31] { R135 += 1, R33 += 1 };
  s0 -> s3 [32, 32] { R135 += 1, R33 += 1 };
  s0 -> s1 [33, 65535] { R135 += 1, R33 += 1 };
  s1 -> s5 [0, 65535] { R135 += 1 };
  s1 -> s1 [0, 65535] { R135 += 1, R33 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R135 += 1, R33 += 1 };
  s2 -> s2 [0, 65535] { R135 += 1, R32 += 1, R33 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R135 += 1, R33 += 1 };
  s2 -> s1 [14, 31] { R135 += 1, R33 += 1 };
  s2 -> s3 [32, 32] { R135 += 1, R33 += 1 };
  s2 -> s1 [33, 65535] { R135 += 1, R33 += 1 };
  s3 -> s1 [0, 65535] { R135 += 1, R33 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R135 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R137 += 1, R35 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R136 += 1, R137 += 1 };
  s0 -> s2 [0, 65535] { R137 += 1, R34 += 1, R35 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R137 += 1, R35 += 1, R7 += 1 };
  s1 -> s4 [0, 65535] { R137 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R137 += 1, R35 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R137 += 1, R34 += 1, R35 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R137 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 64] { R139 += 1, R89 += 1 };
  s0 -> s0 [0, 65535] { R138 += 1, R139 += 1 };
  s0 -> s2 [0, 65535] { R139 += 1, R88 += 1, R89 += 1 };
  s0 -> s3 [69, 69] { R139 += 1, R89 += 1 };
  s0 -> s1 [70, 65535] { R139 += 1, R89 += 1 };
  s1 -> s1 [0, 64] { R139 += 1, R89 += 1 };
  s1 -> s3 [69, 69] { R139 += 1, R89 += 1 };
  s1 -> s1 [70, 65535] { R139 += 1, R89 += 1 };
  s2 -> s1 [0, 64] { R139 += 1, R89 += 1 };
  s2 -> s2 [0, 65535] { R139 += 1, R88 += 1, R89 += 1 };
  s2 -> s3 [69, 69] { R139 += 1, R89 += 1 };
  s2 -> s1 [70, 65535] { R139 += 1, R89 += 1 };
  s3 -> s3 [0, 64] { R139 += 1, R89 += 1 };
  s3 -> s3 [0, 65535] { R139 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [69, 65535] { R139 += 1, R89 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R141 += 1, R91 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R140 += 1, R141 += 1 };
  s0 -> s2 [0, 65535] { R141 += 1, R90 += 1, R91 += 1 };
  s1 -> s1 [0, 65535] { R141 += 1, R91 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R141 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R141 += 1, R91 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R141 += 1, R90 += 1, R91 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R141 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 68] { R143 += 1, R93 += 1 };
  s0 -> s2 [0, 65535] { R143 += 1, R92 += 1, R93 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s3 [0, 65535] { R143 += 1, R93 += 1, R13 += 1 };
  s0 -> s4 [69, 69] { R143 += 1, R93 += 1 };
  s0 -> s1 [70, 65535] { R143 += 1, R93 += 1 };
  s1 -> s1 [0, 68] { R143 += 1, R93 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R143 += 1 };
  s1 -> s4 [69, 69] { R143 += 1, R93 += 1 };
  s1 -> s1 [70, 65535] { R143 += 1, R93 += 1 };
  s2 -> s1 [0, 68] { R143 += 1, R93 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R143 += 1, R92 += 1, R93 += 1 };
  s2 -> s3 [0, 65535] { R143 += 1, R93 += 1, R13 += 1 };
  s2 -> s4 [69, 69] { R143 += 1, R93 += 1 };
  s2 -> s1 [70, 65535] { R143 += 1, R93 += 1 };
  s3 -> s1 [0, 68] { R143 += 1, R93 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R143 += 1, R93 += 1, R13 += 1 };
  s3 -> s6 [0, 65535] { R143 += 1 };
  s3 -> s4 [69, 69] { R143 += 1, R93 += 1 };
  s3 -> s1 [70, 65535] { R143 += 1, R93 += 1 };
  s4 -> s4 [0, 65535] { R143 += 1, R93 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R143 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 8] { R145 += 1, R95 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R145 += 1, R95 += 1, R20 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R145 += 1, R94 += 1, R95 += 1 };
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s4 [9, 13] { R145 += 1, R95 += 1, R21 += 1 };
  s0 -> s1 [14, 31] { R145 += 1, R95 += 1, R21 += 1 };
  s0 -> s4 [32, 32] { R145 += 1, R95 += 1, R21 += 1 };
  s0 -> s1 [33, 65535] { R145 += 1, R95 += 1, R21 += 1 };
  s1 -> s1 [0, 65535] { R145 += 1, R95 += 1, R21 += 1 };
  s1 -> s7 [0, 65535] { R145 += 1, R95 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R145 += 1 };
  s2 -> s1 [0, 8] { R145 += 1, R95 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R145 += 1, R95 += 1, R20 += 1, R21 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R145 += 1 };
  s2 -> s4 [9, 13] { R145 += 1, R95 += 1, R21 += 1 };
  s2 -> s1 [14, 31] { R145 += 1, R95 += 1, R21 += 1 };
  s2 -> s4 [32, 32] { R145 += 1, R95 += 1, R21 += 1 };
  s2 -> s1 [33, 65535] { R145 += 1, R95 += 1, R21 += 1 };
  s3 -> s1 [0, 8] { R145 += 1, R95 += 1, R21 += 1 };
  s3 -> s2 [0, 65535] { R145 += 1, R95 += 1, R20 += 1, R21 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R145 += 1, R94 += 1, R95 += 1 };
  s3 -> s4 [9, 13] { R145 += 1, R95 += 1, R21 += 1 };
  s3 -> s1 [14, 31] { R145 += 1, R95 += 1, R21 += 1 };
  s3 -> s4 [32, 32] { R145 += 1, R95 += 1, R21 += 1 };
  s3 -> s1 [33, 65535] { R145 += 1, R95 += 1, R21 += 1 };
  s4 -> s1 [0, 65535] { R145 += 1, R95 += 1, R21 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R145 += 1 };
  s7 -> s7 [0, 65535] { R145 += 1, R95 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R145 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s1 [0, 65535] { R147 += 1, R97 += 1, R22 += 1, R23 += 1 };
  s0 -> s2 [0, 65535] { R147 += 1, R96 += 1, R97 += 1 };
  s0 -> s3 [0, 65535] { R147 += 1, R97 += 1, R23 += 1, R4 += 1 };
  s1 -> s5 [0, 65535] { R147 += 1 };
  s1 -> s1 [0, 65535] { R147 += 1, R97 += 1, R22 += 1, R23 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [0, 65535] { R147 += 1, R97 += 1, R23 += 1, R4 += 1 };
  s2 -> s1 [0, 65535] { R147 += 1, R97 += 1, R22 += 1, R23 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R147 += 1, R96 += 1, R97 += 1 };
  s2 -> s3 [0, 65535] { R147 += 1, R97 += 1, R23 += 1, R4 += 1 };
  s3 -> s4 [0, 65535] { R147 += 1, R97 += 1 };
  s3 -> s5 [0, 65535] { R147 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R147 += 1, R97 += 1, R23 += 1, R4 += 1 };
  s4 -> s4 [0, 65535] { R147 += 1, R97 += 1 };
  s4 -> s5 [0, 65535] { R147 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R147 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 8] { R149 += 1, R99 += 1, R25 += 1 };
  s0 -> s2 [0, 65535] { R149 += 1, R98 += 1, R99 += 1 };
  s0 -> s3 [0, 65535] { R149 += 1, R99 += 1, R24 += 1, R25 += 1 };
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s4 [9, 13] { R149 += 1, R99 += 1, R25 += 1 };
  s0 -> s1 [14, 31] { R149 += 1, R99 += 1, R25 += 1 };
  s0 -> s4 [32, 32] { R149 += 1, R99 += 1, R25 += 1 };
  s0 -> s1 [33, 65535] { R149 += 1, R99 += 1, R25 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R149 += 1 };
  s1 -> s7 [0, 65535] { R149 += 1, R99 += 1 };
  s1 -> s1 [0, 65535] { R149 += 1, R99 += 1, R25 += 1 };
  s2 -> s1 [0, 8] { R149 += 1, R99 += 1, R25 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R149 += 1, R98 += 1, R99 += 1 };
  s2 -> s3 [0, 65535] { R149 += 1, R99 += 1, R24 += 1, R25 += 1 };
  s2 -> s4 [9, 13] { R149 += 1, R99 += 1, R25 += 1 };
  s2 -> s1 [14, 31] { R149 += 1, R99 += 1, R25 += 1 };
  s2 -> s4 [32, 32] { R149 += 1, R99 += 1, R25 += 1 };
  s2 -> s1 [33, 65535] { R149 += 1, R99 += 1, R25 += 1 };
  s3 -> s1 [0, 8] { R149 += 1, R99 += 1, R25 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R149 += 1 };
  s3 -> s3 [0, 65535] { R149 += 1, R99 += 1, R24 += 1, R25 += 1 };
  s3 -> s4 [9, 13] { R149 += 1, R99 += 1, R25 += 1 };
  s3 -> s1 [14, 31] { R149 += 1, R99 += 1, R25 += 1 };
  s3 -> s4 [32, 32] { R149 += 1, R99 += 1, R25 += 1 };
  s3 -> s1 [33, 65535] { R149 += 1, R99 += 1, R25 += 1 };
  s4 -> s1 [0, 65535] { R149 += 1, R99 += 1, R25 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R149 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R149 += 1 };
  s7 -> s7 [0, 65535] { R149 += 1, R99 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R151 += 1, R101 += 1, R26 += 1, R27 += 1 };
  s0 -> s2 [0, 65535] { R151 += 1, R101 += 1, R27 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R151 += 1, R100 += 1, R101 += 1 };
  s0 -> s0 [0, 65535] { R150 += 1, R151 += 1 };
  s1 -> s1 [0, 65535] { R151 += 1, R101 += 1, R26 += 1, R27 += 1 };
  s1 -> s5 [0, 65535] { R151 += 1 };
  s1 -> s2 [0, 65535] { R151 += 1, R101 += 1, R27 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R151 += 1 };
  s2 -> s6 [0, 65535] { R151 += 1, R101 += 1 };
  s2 -> s2 [0, 65535] { R151 += 1, R101 += 1, R27 += 1, R5 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R151 += 1, R101 += 1, R26 += 1, R27 += 1 };
  s3 -> s2 [0, 65535] { R151 += 1, R101 += 1, R27 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R151 += 1, R100 += 1, R101 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R151 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R151 += 1 };
  s6 -> s6 [0, 65535] { R151 += 1, R101 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 68] { R153 += 1, R103 += 1, R63 += 1 };
  s0 -> s0 [0, 65535] { R152 += 1, R153 += 1 };
  s0 -> s2 [0, 65535] { R153 += 1, R102 += 1, R103 += 1 };
  s0 -> s3 [0, 65535] { R153 += 1, R103 += 1, R62 += 1, R63 += 1 };
  s0 -> s1 [70, 65535] { R153 += 1, R103 += 1, R63 += 1 };
  s1 -> s1 [0, 68] { R153 += 1, R103 += 1, R63 += 1 };
  s1 -> s1 [0, 65535] { R153 += 1, R103 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R153 += 1 };
  s1 -> s1 [70, 65535] { R153 += 1, R103 += 1, R63 += 1 };
  s2 -> s1 [0, 68] { R153 += 1, R103 += 1, R63 += 1 };
  s2 -> s2 [0, 65535] { R153 += 1, R102 += 1, R103 += 1 };
  s2 -> s3 [0, 65535] { R153 += 1, R103 += 1, R62 += 1, R63 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R153 += 1, R103 += 1, R63 += 1 };
  s3 -> s1 [0, 68] { R153 += 1, R103 += 1, R63 += 1 };
  s3 -> s3 [0, 65535] { R153 += 1, R103 += 1, R62 += 1, R63 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R153 += 1 };
  s3 -> s1 [70, 65535] { R153 += 1, R103 += 1, R63 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R153 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65535] { R155 += 1, R105 += 1, R65 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R155 += 1, R105 += 1, R64 += 1, R65 += 1 };
  s0 -> s3 [0, 65535] { R155 += 1, R104 += 1, R105 += 1 };
  s0 -> s0 [0, 65535] { R154 += 1, R155 += 1 };
  s1 -> s1 [0, 65535] { R155 += 1, R105 += 1, R65 += 1, R18 += 1 };
  s1 -> s6 [0, 65535] { R155 += 1, R105 += 1 };
  s1 -> s5 [0, 65535] { R155 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R155 += 1, R105 += 1, R65 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R155 += 1, R105 += 1, R64 += 1, R65 += 1 };
  s2 -> s5 [0, 65535] { R155 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R155 += 1, R105 += 1, R65 += 1, R18 += 1 };
  s3 -> s2 [0, 65535] { R155 += 1, R105 += 1, R64 += 1, R65 += 1 };
  s3 -> s3 [0, 65535] { R155 += 1, R104 += 1, R105 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R155 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R155 += 1, R105 += 1 };
  s6 -> s5 [0, 65535] { R155 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 69] { R157 += 1, R107 += 1, R67 += 1 };
  s0 -> s2 [0, 65535] { R157 += 1, R106 += 1, R107 += 1 };
  s0 -> s3 [0, 65535] { R157 += 1, R107 += 1, R66 += 1, R67 += 1 };
  s0 -> s0 [0, 65535] { R156 += 1, R157 += 1 };
  s0 -> s4 [82, 82] { R157 += 1, R107 += 1, R67 += 1 };
  s0 -> s1 [83, 65535] { R157 += 1, R107 += 1, R67 += 1 };
  s1 -> s1 [0, 69] { R157 += 1, R107 += 1, R67 += 1 };
  s1 -> s4 [82, 82] { R157 += 1, R107 += 1, R67 += 1 };
  s1 -> s1 [83, 65535] { R157 += 1, R107 += 1, R67 += 1 };
  s2 -> s1 [0, 69] { R157 += 1, R107 += 1, R67 += 1 };
  s2 -> s2 [0, 65535] { R157 += 1, R106 += 1, R107 += 1 };
  s2 -> s3 [0, 65535] { R157 += 1, R107 += 1, R66 += 1, R67 += 1 };
  s2 -> s4 [82, 82] { R157 += 1, R107 += 1, R67 += 1 };
  s2 -> s1 [83, 65535] { R157 += 1, R107 += 1, R67 += 1 };
  s3 -> s1 [0, 69] { R157 += 1, R107 += 1, R67 += 1 };
  s3 -> s3 [0, 65535] { R157 += 1, R107 += 1, R66 += 1, R67 += 1 };
  s3 -> s4 [82, 82] { R157 += 1, R107 += 1, R67 += 1 };
  s3 -> s1 [83, 65535] { R157 += 1, R107 += 1, R67 += 1 };
  s4 -> s4 [0, 69] { R157 += 1, R107 += 1, R67 += 1 };
  s4 -> s5 [0, 65535] { R157 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R157 += 1, R107 += 1 };
  s4 -> s4 [82, 65535] { R157 += 1, R107 += 1, R67 += 1 };
  s5 -> s5 [0, 65535] { R157 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65535] { R159 += 1, R108 += 1, R109 += 1 };
  s0 -> s0 [0, 65535] { R158 += 1, R159 += 1 };
  s0 -> s2 [0, 65535] { R159 += 1, R109 += 1, R69 += 1, R49 += 1 };
  s0 -> s3 [0, 65535] { R159 += 1, R109 += 1, R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R159 += 1, R108 += 1, R109 += 1 };
  s1 -> s2 [0, 65535] { R159 += 1, R109 += 1, R69 += 1, R49 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R159 += 1, R109 += 1, R68 += 1, R69 += 1 };
  s2 -> s2 [0, 65535] { R159 += 1, R109 += 1, R69 += 1, R49 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R159 += 1 };
  s2 -> s6 [0, 65535] { R159 += 1, R109 += 1 };
  s3 -> s2 [0, 65535] { R159 += 1, R109 += 1, R69 += 1, R49 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R159 += 1, R109 += 1, R68 += 1, R69 += 1 };
  s3 -> s5 [0, 65535] { R159 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R159 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R159 += 1 };
  s6 -> s6 [0, 65535] { R159 += 1, R109 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 81] { R161 += 1, R111 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R161 += 1, R111 += 1, R70 += 1, R71 += 1 };
  s0 -> s0 [0, 65535] { R160 += 1, R161 += 1 };
  s0 -> s3 [0, 65535] { R161 += 1, R111 += 1, R71 += 1, R51 += 1 };
  s0 -> s4 [0, 65535] { R161 += 1, R110 += 1, R111 += 1 };
  s0 -> s1 [83, 65535] { R161 += 1, R111 += 1, R71 += 1 };
  s1 -> s1 [0, 81] { R161 += 1, R111 += 1, R71 += 1 };
  s1 -> s6 [0, 65535] { R161 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R161 += 1, R111 += 1 };
  s1 -> s1 [83, 65535] { R161 += 1, R111 += 1, R71 += 1 };
  s2 -> s1 [0, 81] { R161 += 1, R111 += 1, R71 += 1 };
  s2 -> s2 [0, 65535] { R161 += 1, R111 += 1, R70 += 1, R71 += 1 };
  s2 -> s6 [0, 65535] { R161 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R161 += 1, R111 += 1, R71 += 1, R51 += 1 };
  s2 -> s1 [83, 65535] { R161 += 1, R111 += 1, R71 += 1 };
  s3 -> s1 [0, 81] { R161 += 1, R111 += 1, R71 += 1 };
  s3 -> s6 [0, 65535] { R161 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R161 += 1, R111 += 1, R71 += 1, R51 += 1 };
  s3 -> s7 [0, 65535] { R161 += 1, R111 += 1 };
  s3 -> s1 [83, 65535] { R161 += 1, R111 += 1, R71 += 1 };
  s4 -> s1 [0, 81] { R161 += 1, R111 += 1, R71 += 1 };
  s4 -> s2 [0, 65535] { R161 += 1, R111 += 1, R70 += 1, R71 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R161 += 1, R111 += 1, R71 += 1, R51 += 1 };
  s4 -> s4 [0, 65535] { R161 += 1, R110 += 1, R111 += 1 };
  s4 -> s1 [83, 65535] { R161 += 1, R111 += 1, R71 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R161 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R161 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R161 += 1, R111 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 81] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s0 -> s0 [0, 65535] { R162 += 1, R163 += 1 };
  s0 -> s2 [0, 65535] { R163 += 1, R113 += 1, R73 += 1, R54 += 1, R55 += 1 };
  s0 -> s3 [0, 65535] { R163 += 1, R112 += 1, R113 += 1 };
  s0 -> s4 [0, 65535] { R163 += 1, R113 += 1, R72 += 1, R73 += 1 };
  s0 -> s5 [82, 82] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s0 -> s1 [83, 65535] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s1 -> s1 [0, 81] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s1 -> s5 [82, 82] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s1 -> s1 [83, 65535] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s2 -> s1 [0, 81] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s2 -> s2 [0, 65535] { R163 += 1, R113 += 1, R73 += 1, R54 += 1, R55 += 1 };
  s2 -> s5 [82, 82] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s2 -> s1 [83, 65535] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s3 -> s1 [0, 81] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s3 -> s2 [0, 65535] { R163 += 1, R113 += 1, R73 += 1, R54 += 1, R55 += 1 };
  s3 -> s3 [0, 65535] { R163 += 1, R112 += 1, R113 += 1 };
  s3 -> s4 [0, 65535] { R163 += 1, R113 += 1, R72 += 1, R73 += 1 };
  s3 -> s5 [82, 82] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s3 -> s1 [83, 65535] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s4 -> s1 [0, 81] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s4 -> s2 [0, 65535] { R163 += 1, R113 += 1, R73 += 1, R54 += 1, R55 += 1 };
  s4 -> s4 [0, 65535] { R163 += 1, R113 += 1, R72 += 1, R73 += 1 };
  s4 -> s5 [82, 82] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s4 -> s1 [83, 65535] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s5 -> s6 [0, 65535] { R163 += 1, R113 += 1 };
  s5 -> s5 [0, 65535] { R163 += 1, R113 += 1, R73 += 1, R55 += 1 };
  s5 -> s7 [0, 65535] { R163 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s9 [0, 65535] { R163 += 1, R113 += 1, R73 += 1 };
  s6 -> s6 [0, 65535] { R163 += 1, R113 += 1 };
  s6 -> s7 [0, 65535] { R163 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R163 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s6 [0, 65535] { R163 += 1, R113 += 1 };
  s9 -> s7 [0, 65535] { R163 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R163 += 1, R113 += 1, R73 += 1 };
  accepting s8, s5, s9, s6, s7;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65535] { R165 += 1, R115 += 1, R74 += 1, R75 += 1 };
  s0 -> s2 [0, 65535] { R165 += 1, R114 += 1, R115 += 1 };
  s0 -> s3 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R59 += 1, R60 += 1 };
  s0 -> s0 [0, 65535] { R164 += 1, R165 += 1 };
  s0 -> s4 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R60 += 1, R61 += 1 };
  s1 -> s6 [0, 65535] { R165 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R165 += 1, R115 += 1, R74 += 1, R75 += 1 };
  s1 -> s3 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R59 += 1, R60 += 1 };
  s1 -> s4 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R60 += 1, R61 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s1 [0, 65535] { R165 += 1, R115 += 1, R74 += 1, R75 += 1 };
  s2 -> s2 [0, 65535] { R165 += 1, R114 += 1, R115 += 1 };
  s2 -> s3 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R59 += 1, R60 += 1 };
  s2 -> s4 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R60 += 1, R61 += 1 };
  s3 -> s6 [0, 65535] { R165 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R59 += 1, R60 += 1 };
  s3 -> s8 [0, 65535] { R165 += 1, R115 += 1 };
  s3 -> s4 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R60 += 1, R61 += 1 };
  s4 -> s5 [0, 65535] { R165 += 1, R115 += 1, R75 += 1 };
  s4 -> s6 [0, 65535] { R165 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R165 += 1, R115 += 1 };
  s4 -> s4 [0, 65535] { R165 += 1, R115 += 1, R75 += 1, R60 += 1, R61 += 1 };
  s5 -> s5 [0, 65535] { R165 += 1, R115 += 1, R75 += 1 };
  s5 -> s6 [0, 65535] { R165 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R165 += 1, R115 += 1 };
  s6 -> s6 [0, 65535] { R165 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R165 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R165 += 1, R115 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s0 [0, 65535] { R166 += 1, R167 += 1 };
  s0 -> s1 [0, 65535] { R167 += 1, R116 += 1, R117 += 1 };
  s0 -> s2 [0, 65535] { R167 += 1, R117 += 1, R77 += 1, R19 += 1 };
  s0 -> s3 [0, 65535] { R167 += 1, R117 += 1, R76 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R167 += 1, R116 += 1, R117 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R167 += 1, R117 += 1, R77 += 1, R19 += 1 };
  s1 -> s3 [0, 65535] { R167 += 1, R117 += 1, R76 += 1, R77 += 1 };
  s2 -> s6 [0, 65535] { R167 += 1, R117 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R167 += 1 };
  s2 -> s2 [0, 65535] { R167 += 1, R117 += 1, R77 += 1, R19 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R167 += 1 };
  s3 -> s2 [0, 65535] { R167 += 1, R117 += 1, R77 += 1, R19 += 1 };
  s3 -> s3 [0, 65535] { R167 += 1, R117 += 1, R76 += 1, R77 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R167 += 1 };
  s6 -> s6 [0, 65535] { R167 += 1, R117 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R167 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 68] { R169 += 1, R119 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R169 += 1, R118 += 1, R119 += 1 };
  s0 -> s0 [0, 65535] { R168 += 1, R169 += 1 };
  s0 -> s3 [0, 65535] { R169 += 1, R119 += 1, R78 += 1, R79 += 1 };
  s0 -> s4 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s0 -> s5 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s0 -> s1 [83, 65535] { R169 += 1, R119 += 1, R79 += 1 };
  s1 -> s1 [0, 68] { R169 += 1, R119 += 1, R79 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R169 += 1 };
  s1 -> s1 [0, 65535] { R169 += 1, R119 += 1 };
  s1 -> s4 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s1 -> s5 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s1 -> s1 [83, 65535] { R169 += 1, R119 += 1, R79 += 1 };
  s2 -> s1 [0, 68] { R169 += 1, R119 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R169 += 1, R118 += 1, R119 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R169 += 1, R119 += 1, R78 += 1, R79 += 1 };
  s2 -> s4 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s2 -> s5 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s2 -> s1 [83, 65535] { R169 += 1, R119 += 1, R79 += 1 };
  s3 -> s1 [0, 68] { R169 += 1, R119 += 1, R79 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R169 += 1, R119 += 1, R78 += 1, R79 += 1 };
  s3 -> s7 [0, 65535] { R169 += 1 };
  s3 -> s4 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s3 -> s5 [69, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s3 -> s1 [83, 65535] { R169 += 1, R119 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R169 += 1, R119 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R169 += 1 };
  s5 -> s5 [0, 69] { R169 += 1, R119 += 1, R79 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R169 += 1 };
  s5 -> s5 [0, 65535] { R169 += 1, R119 += 1 };
  s5 -> s5 [83, 65535] { R169 += 1, R119 += 1, R79 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R169 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 68] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s0 -> s2 [0, 65535] { R171 += 1, R121 += 1, R80 += 1, R81 += 1 };
  s0 -> s3 [0, 65535] { R171 += 1, R120 += 1, R121 += 1 };
  s0 -> s0 [0, 65535] { R170 += 1, R171 += 1 };
  s0 -> s4 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s0 -> s5 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s0 -> s1 [70, 65535] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s1 -> s1 [0, 68] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s1 -> s1 [0, 65535] { R171 += 1, R121 += 1 };
  s1 -> s6 [0, 65535] { R171 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s1 -> s5 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s1 -> s1 [70, 65535] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s2 -> s1 [0, 68] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s2 -> s2 [0, 65535] { R171 += 1, R121 += 1, R80 += 1, R81 += 1 };
  s2 -> s6 [0, 65535] { R171 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s2 -> s5 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s2 -> s1 [70, 65535] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s3 -> s1 [0, 68] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s3 -> s2 [0, 65535] { R171 += 1, R121 += 1, R80 += 1, R81 += 1 };
  s3 -> s3 [0, 65535] { R171 += 1, R120 += 1, R121 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s3 -> s5 [69, 69] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s3 -> s1 [70, 65535] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s4 -> s4 [0, 65535] { R171 += 1, R121 += 1, R81 += 1, R48 += 1 };
  s4 -> s6 [0, 65535] { R171 += 1 };
  s4 -> s8 [0, 65535] { R171 += 1, R121 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R171 += 1, R121 += 1 };
  s5 -> s6 [0, 65535] { R171 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R171 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R171 += 1 };
  s8 -> s8 [0, 65535] { R171 += 1, R121 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 68] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R173 += 1, R123 += 1, R82 += 1, R83 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s3 [0, 65535] { R173 += 1, R122 += 1, R123 += 1 };
  s0 -> s4 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s0 -> s5 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s0 -> s1 [70, 65535] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s1 -> s1 [0, 68] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s1 -> s6 [0, 65535] { R173 += 1 };
  s1 -> s1 [0, 65535] { R173 += 1, R123 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s1 -> s5 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s1 -> s1 [70, 65535] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s2 -> s1 [0, 68] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s2 -> s6 [0, 65535] { R173 += 1 };
  s2 -> s2 [0, 65535] { R173 += 1, R123 += 1, R82 += 1, R83 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s2 -> s5 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s2 -> s1 [70, 65535] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s3 -> s1 [0, 68] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R173 += 1, R123 += 1, R82 += 1, R83 += 1 };
  s3 -> s3 [0, 65535] { R173 += 1, R122 += 1, R123 += 1 };
  s3 -> s4 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s3 -> s5 [69, 69] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s3 -> s1 [70, 65535] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s4 -> s4 [0, 65535] { R173 += 1, R123 += 1, R83 += 1, R50 += 1 };
  s4 -> s6 [0, 65535] { R173 += 1 };
  s4 -> s8 [0, 65535] { R173 += 1, R123 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R173 += 1 };
  s5 -> s5 [0, 65535] { R173 += 1, R123 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R173 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R173 += 1 };
  s8 -> s8 [0, 65535] { R173 += 1, R123 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 68] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R174 += 1, R175 += 1 };
  s0 -> s2 [0, 65535] { R175 += 1, R125 += 1, R84 += 1, R85 += 1 };
  s0 -> s3 [0, 65535] { R175 += 1, R124 += 1, R125 += 1 };
  s0 -> s4 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s0 -> s5 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [70, 65535] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 68] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R175 += 1, R125 += 1 };
  s1 -> s7 [0, 65535] { R175 += 1 };
  s1 -> s4 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s1 -> s5 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [70, 65535] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s2 -> s1 [0, 68] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R175 += 1, R125 += 1, R84 += 1, R85 += 1 };
  s2 -> s7 [0, 65535] { R175 += 1 };
  s2 -> s4 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s2 -> s5 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s2 -> s1 [70, 65535] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s3 -> s1 [0, 68] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R175 += 1, R125 += 1, R84 += 1, R85 += 1 };
  s3 -> s3 [0, 65535] { R175 += 1, R124 += 1, R125 += 1 };
  s3 -> s4 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s3 -> s5 [69, 69] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s3 -> s1 [70, 65535] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R175 += 1 };
  s4 -> s8 [0, 65535] { R175 += 1, R125 += 1 };
  s4 -> s4 [0, 65535] { R175 += 1, R125 += 1, R85 += 1, R52 += 1, R53 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R175 += 1 };
  s5 -> s5 [0, 65535] { R175 += 1, R125 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R175 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R175 += 1 };
  s8 -> s8 [0, 65535] { R175 += 1, R125 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 68] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s0 -> s0 [0, 65535] { R176 += 1, R177 += 1 };
  s0 -> s2 [0, 65535] { R177 += 1, R126 += 1, R127 += 1 };
  s0 -> s3 [0, 65535] { R177 += 1, R127 += 1, R86 += 1, R87 += 1 };
  s0 -> s4 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s0 -> s5 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s0 -> s1 [70, 65535] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 68] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [0, 65535] { R177 += 1, R127 += 1 };
  s1 -> s6 [0, 65535] { R177 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s1 -> s5 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s1 -> s1 [70, 65535] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s2 -> s1 [0, 68] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R177 += 1, R126 += 1, R127 += 1 };
  s2 -> s3 [0, 65535] { R177 += 1, R127 += 1, R86 += 1, R87 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s2 -> s5 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s2 -> s1 [70, 65535] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s3 -> s1 [0, 68] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s3 -> s6 [0, 65535] { R177 += 1 };
  s3 -> s3 [0, 65535] { R177 += 1, R127 += 1, R86 += 1, R87 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s3 -> s5 [69, 69] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s3 -> s1 [70, 65535] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s4 -> s4 [0, 65535] { R177 += 1, R127 += 1, R87 += 1, R56 += 1, R57 += 1 };
  s4 -> s6 [0, 65535] { R177 += 1 };
  s4 -> s8 [0, 65535] { R177 += 1, R127 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R177 += 1 };
  s5 -> s5 [0, 65535] { R177 += 1, R127 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R177 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R177 += 1 };
  s8 -> s8 [0, 65535] { R177 += 1, R127 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R75 && R2 - R127 = 1 && R3 - R177 = 1 && R20 - R75 = -1 && R21 = R75 && R22 - R75 = -1 && R23 = R75 && R24 = 0 && R25 = 1 && R26 = 0 && R27 = 1 && R28 = R127 && R29 - R127 = 1 && R30 = R127 && R31 - R127 = 1 && R32 = 0 && R33 = 1 && R34 = 0 && R35 = 1 && R36 = R177 && R37 - R177 = 1 && R38 = R177 && R39 - R177 = 1 && R40 = 0 && R41 = 1 && R42 = 0 && R43 = 1 && R49 + R48 + -1*R55 + -1*R53 = 0 && R54 + R52 = 0 && R62 = 0 && R63 = R75 && R64 = 0 && R65 = R75 && R66 = 0 && R67 = R75 && R68 = 0 && R69 = R75 && R70 = 0 && R71 = R75 && R72 = 0 && R73 = R75 && R74 = 0 && R88 = 0 && R89 = R127 && R90 = 0 && R91 = R127 && R92 = 0 && R93 = R127 && R94 = 0 && R95 = R127 && R96 = 0 && R97 = R127 && R98 = 0 && R99 = R127 && R100 = 0 && R101 = R127 && R102 = 0 && R103 = R127 && R104 = 0 && R105 = R127 && R106 = 0 && R107 = R127 && R108 = 0 && R109 = R127 && R110 = 0 && R111 = R127 && R112 = 0 && R113 = R127 && R114 = 0 && R115 = R127 && R116 = 0 && R117 = R127 && R118 = 0 && R119 = R127 && R120 = 0 && R121 = R127 && R122 = 0 && R123 = R127 && R124 = 0 && R125 = R127 && R126 = 0 && R128 = 0 && R129 = R177 && R130 = 0 && R131 = R177 && R132 = 0 && R133 = R177 && R134 = 0 && R135 = R177 && R136 = 0 && R137 = R177 && R138 = 0 && R139 = R177 && R140 = 0 && R141 = R177 && R142 = 0 && R143 = R177 && R144 = 0 && R145 = R177 && R146 = 0 && R147 = R177 && R148 = 0 && R149 = R177 && R150 = 0 && R151 = R177 && R152 = 0 && R153 = R177 && R154 = 0 && R155 = R177 && R156 = 0 && R157 = R177 && R158 = 0 && R159 = R177 && R160 = 0 && R161 = R177 && R162 = 0 && R163 = R177 && R164 = 0 && R165 = R177 && R166 = 0 && R167 = R177 && R168 = 0 && R169 = R177 && R170 = 0 && R171 = R177 && R172 = 0 && R173 = R177 && R174 = 0 && R175 = R177 && R176 = 0 && R13 < 1 && R16 < 1 && R51 + R50 < 1 && -1*R55 + -1*R53 < 1 && 0 < R75 && -1 < R127 && -1 < R177 && (R55 + R53 != 0 || R61 + R58 = 0 || (R59 + R56 = 0 && R60 + R57 = 0)) && (R59 + R56 != 0 || R55 + R53 + -1*R60 + -1*R57 = 0 || R55 + R53 < 1) && (R19 = 0 || (R76 = 0 && R77 = 0)) && (R19 = 0 || (R78 = 0 && R79 = 0)) && (R19 = 0 || (R80 = 0 && R81 = 0)) && (R19 = 0 || (R82 = 0 && R83 = 0)) && (R19 = 0 || (R84 = 0 && R85 = 0)) && (R19 = 0 || (R86 = 0 && R87 = 0)) && (R59 + R56 = 0 || R55 + R53 < 1);
// End of Parikh automata intersection problem
