// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R16, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R20, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R21, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R21 += 1 };
  s1 -> s1 [0, 60] { R21 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R21 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R181 += 1 };
  s0 -> s0 [0, 65535] { R180 += 1, R181 += 1 };
  s0 -> s2 [66, 66] { R181 += 1 };
  s0 -> s1 [67, 65535] { R181 += 1 };
  s1 -> s1 [0, 64] { R181 += 1 };
  s1 -> s2 [66, 66] { R181 += 1 };
  s1 -> s1 [67, 65535] { R181 += 1 };
  s2 -> s2 [0, 64] { R181 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R181 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R182 += 1, R183 += 1 };
  s0 -> s1 [0, 65535] { R183 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R183 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65] { R185 += 1 };
  s0 -> s0 [0, 65535] { R184 += 1, R185 += 1 };
  s0 -> s2 [0, 65535] { R185 += 1, R13 += 1 };
  s0 -> s3 [66, 66] { R185 += 1 };
  s0 -> s1 [67, 65535] { R185 += 1 };
  s1 -> s1 [0, 65] { R185 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R185 += 1 };
  s1 -> s1 [67, 65535] { R185 += 1 };
  s2 -> s1 [0, 65] { R185 += 1 };
  s2 -> s2 [0, 65535] { R185 += 1, R13 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R185 += 1 };
  s2 -> s1 [67, 65535] { R185 += 1 };
  s3 -> s3 [0, 65535] { R185 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R187 += 1, R151 += 1 };
  s0 -> s0 [0, 65535] { R186 += 1, R187 += 1 };
  s0 -> s2 [0, 65535] { R187 += 1, R150 += 1, R151 += 1 };
  s0 -> s3 [9, 13] { R187 += 1, R151 += 1 };
  s0 -> s1 [14, 31] { R187 += 1, R151 += 1 };
  s0 -> s3 [32, 32] { R187 += 1, R151 += 1 };
  s0 -> s1 [33, 65535] { R187 += 1, R151 += 1 };
  s1 -> s5 [0, 65535] { R187 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R187 += 1, R151 += 1 };
  s2 -> s1 [0, 8] { R187 += 1, R151 += 1 };
  s2 -> s2 [0, 65535] { R187 += 1, R150 += 1, R151 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R187 += 1, R151 += 1 };
  s2 -> s1 [14, 31] { R187 += 1, R151 += 1 };
  s2 -> s3 [32, 32] { R187 += 1, R151 += 1 };
  s2 -> s1 [33, 65535] { R187 += 1, R151 += 1 };
  s3 -> s1 [0, 65535] { R187 += 1, R151 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R187 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R189 += 1, R152 += 1, R153 += 1 };
  s0 -> s0 [0, 65535] { R188 += 1, R189 += 1 };
  s0 -> s2 [0, 65535] { R189 += 1, R153 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R189 += 1, R152 += 1, R153 += 1 };
  s1 -> s2 [0, 65535] { R189 += 1, R153 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R189 += 1 };
  s2 -> s2 [0, 65535] { R189 += 1, R153 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R189 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R191 += 1, R155 += 1 };
  s0 -> s0 [0, 65535] { R190 += 1, R191 += 1 };
  s0 -> s2 [0, 65535] { R191 += 1, R154 += 1, R155 += 1 };
  s0 -> s3 [9, 13] { R191 += 1, R155 += 1 };
  s0 -> s1 [14, 31] { R191 += 1, R155 += 1 };
  s0 -> s3 [32, 32] { R191 += 1, R155 += 1 };
  s0 -> s1 [33, 65535] { R191 += 1, R155 += 1 };
  s1 -> s1 [0, 65535] { R191 += 1, R155 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R191 += 1 };
  s2 -> s1 [0, 8] { R191 += 1, R155 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R191 += 1, R154 += 1, R155 += 1 };
  s2 -> s3 [9, 13] { R191 += 1, R155 += 1 };
  s2 -> s1 [14, 31] { R191 += 1, R155 += 1 };
  s2 -> s3 [32, 32] { R191 += 1, R155 += 1 };
  s2 -> s1 [33, 65535] { R191 += 1, R155 += 1 };
  s3 -> s1 [0, 65535] { R191 += 1, R155 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R191 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R193 += 1, R157 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R192 += 1, R193 += 1 };
  s0 -> s2 [0, 65535] { R193 += 1, R156 += 1, R157 += 1 };
  s1 -> s1 [0, 65535] { R193 += 1, R157 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R193 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R193 += 1, R157 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R193 += 1, R156 += 1, R157 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R193 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65] { R195 += 1, R171 += 1 };
  s0 -> s0 [0, 65535] { R194 += 1, R195 += 1 };
  s0 -> s2 [0, 65535] { R195 += 1, R170 += 1, R171 += 1 };
  s0 -> s3 [66, 66] { R195 += 1, R171 += 1 };
  s0 -> s1 [67, 65535] { R195 += 1, R171 += 1 };
  s1 -> s1 [0, 65] { R195 += 1, R171 += 1 };
  s1 -> s3 [66, 66] { R195 += 1, R171 += 1 };
  s1 -> s1 [67, 65535] { R195 += 1, R171 += 1 };
  s2 -> s1 [0, 65] { R195 += 1, R171 += 1 };
  s2 -> s2 [0, 65535] { R195 += 1, R170 += 1, R171 += 1 };
  s2 -> s3 [66, 66] { R195 += 1, R171 += 1 };
  s2 -> s1 [67, 65535] { R195 += 1, R171 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R195 += 1, R171 += 1 };
  s3 -> s5 [0, 65535] { R195 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R195 += 1 };
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R197 += 1, R172 += 1, R173 += 1 };
  s0 -> s0 [0, 65535] { R196 += 1, R197 += 1 };
  s0 -> s2 [0, 65535] { R197 += 1, R173 += 1, R139 += 1 };
  s1 -> s1 [0, 65535] { R197 += 1, R172 += 1, R173 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R197 += 1, R173 += 1, R139 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R197 += 1 };
  s2 -> s2 [0, 65535] { R197 += 1, R173 += 1, R139 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R197 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s1 [0, 65535] { R227 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R227 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R228 += 1, R229 += 1 };
  s0 -> s1 [0, 65535] { R229 += 1, R166 += 1, R167 += 1 };
  s0 -> s2 [13, 13] { R229 += 1, R167 += 1 };
  s1 -> s1 [0, 65535] { R229 += 1, R166 += 1, R167 += 1 };
  s1 -> s2 [13, 13] { R229 += 1, R167 += 1 };
  s2 -> s2 [0, 65535] { R229 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R231 += 1, R169 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R230 += 1, R231 += 1 };
  s0 -> s2 [0, 65535] { R231 += 1, R168 += 1, R169 += 1 };
  s1 -> s1 [0, 65535] { R231 += 1, R169 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R231 += 1 };
  s2 -> s1 [0, 65535] { R231 += 1, R169 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R231 += 1, R168 += 1, R169 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R231 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R233 += 1, R203 += 1 };
  s0 -> s0 [0, 65535] { R232 += 1, R233 += 1 };
  s0 -> s2 [0, 65535] { R233 += 1, R202 += 1, R203 += 1 };
  s0 -> s3 [67, 67] { R233 += 1, R203 += 1 };
  s0 -> s1 [68, 65535] { R233 += 1, R203 += 1 };
  s1 -> s1 [0, 64] { R233 += 1, R203 += 1 };
  s1 -> s3 [67, 67] { R233 += 1, R203 += 1 };
  s1 -> s1 [68, 65535] { R233 += 1, R203 += 1 };
  s2 -> s1 [0, 64] { R233 += 1, R203 += 1 };
  s2 -> s2 [0, 65535] { R233 += 1, R202 += 1, R203 += 1 };
  s2 -> s3 [67, 67] { R233 += 1, R203 += 1 };
  s2 -> s1 [68, 65535] { R233 += 1, R203 += 1 };
  s3 -> s3 [0, 64] { R233 += 1, R203 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R233 += 1 };
  s3 -> s3 [67, 65535] { R233 += 1, R203 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R235 += 1, R204 += 1, R205 += 1 };
  s0 -> s0 [0, 65535] { R234 += 1, R235 += 1 };
  s0 -> s2 [0, 65535] { R235 += 1, R205 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R235 += 1, R204 += 1, R205 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R235 += 1, R205 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R235 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R235 += 1, R205 += 1, R2 += 1 };
  s3 -> s3 [0, 65535] { R235 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 66] { R237 += 1, R207 += 1 };
  s0 -> s2 [0, 65535] { R237 += 1, R207 += 1, R16 += 1 };
  s0 -> s3 [0, 65535] { R237 += 1, R206 += 1, R207 += 1 };
  s0 -> s0 [0, 65535] { R236 += 1, R237 += 1 };
  s0 -> s4 [67, 67] { R237 += 1, R207 += 1 };
  s0 -> s1 [68, 65535] { R237 += 1, R207 += 1 };
  s1 -> s1 [0, 66] { R237 += 1, R207 += 1 };
  s1 -> s1 [0, 65535] { R237 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [67, 67] { R237 += 1, R207 += 1 };
  s1 -> s1 [68, 65535] { R237 += 1, R207 += 1 };
  s2 -> s1 [0, 66] { R237 += 1, R207 += 1 };
  s2 -> s2 [0, 65535] { R237 += 1, R207 += 1, R16 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R237 += 1 };
  s2 -> s4 [67, 67] { R237 += 1, R207 += 1 };
  s2 -> s1 [68, 65535] { R237 += 1, R207 += 1 };
  s3 -> s1 [0, 66] { R237 += 1, R207 += 1 };
  s3 -> s2 [0, 65535] { R237 += 1, R207 += 1, R16 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R237 += 1, R206 += 1, R207 += 1 };
  s3 -> s4 [67, 67] { R237 += 1, R207 += 1 };
  s3 -> s1 [68, 65535] { R237 += 1, R207 += 1 };
  s4 -> s4 [0, 65535] { R237 += 1, R207 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R237 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 8] { R239 += 1, R209 += 1, R159 += 1 };
  s0 -> s0 [0, 65535] { R238 += 1, R239 += 1 };
  s0 -> s2 [0, 65535] { R239 += 1, R208 += 1, R209 += 1 };
  s0 -> s3 [0, 65535] { R239 += 1, R209 += 1, R158 += 1, R159 += 1 };
  s0 -> s4 [9, 13] { R239 += 1, R209 += 1, R159 += 1 };
  s0 -> s1 [14, 31] { R239 += 1, R209 += 1, R159 += 1 };
  s0 -> s4 [32, 32] { R239 += 1, R209 += 1, R159 += 1 };
  s0 -> s1 [33, 65535] { R239 += 1, R209 += 1, R159 += 1 };
  s1 -> s1 [0, 65535] { R239 += 1, R209 += 1, R159 += 1 };
  s1 -> s7 [0, 65535] { R239 += 1, R209 += 1 };
  s1 -> s5 [0, 65535] { R239 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R239 += 1, R209 += 1, R159 += 1 };
  s2 -> s2 [0, 65535] { R239 += 1, R208 += 1, R209 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R239 += 1, R209 += 1, R158 += 1, R159 += 1 };
  s2 -> s4 [9, 13] { R239 += 1, R209 += 1, R159 += 1 };
  s2 -> s1 [14, 31] { R239 += 1, R209 += 1, R159 += 1 };
  s2 -> s4 [32, 32] { R239 += 1, R209 += 1, R159 += 1 };
  s2 -> s1 [33, 65535] { R239 += 1, R209 += 1, R159 += 1 };
  s3 -> s1 [0, 8] { R239 += 1, R209 += 1, R159 += 1 };
  s3 -> s5 [0, 65535] { R239 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R239 += 1, R209 += 1, R158 += 1, R159 += 1 };
  s3 -> s4 [9, 13] { R239 += 1, R209 += 1, R159 += 1 };
  s3 -> s1 [14, 31] { R239 += 1, R209 += 1, R159 += 1 };
  s3 -> s4 [32, 32] { R239 += 1, R209 += 1, R159 += 1 };
  s3 -> s1 [33, 65535] { R239 += 1, R209 += 1, R159 += 1 };
  s4 -> s1 [0, 65535] { R239 += 1, R209 += 1, R159 += 1 };
  s5 -> s5 [0, 65535] { R239 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R239 += 1, R209 += 1 };
  s7 -> s5 [0, 65535] { R239 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R240 += 1, R241 += 1 };
  s0 -> s1 [0, 65535] { R241 += 1, R210 += 1, R211 += 1 };
  s0 -> s2 [0, 65535] { R241 += 1, R211 += 1, R161 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R241 += 1, R211 += 1, R160 += 1, R161 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R241 += 1, R210 += 1, R211 += 1 };
  s1 -> s2 [0, 65535] { R241 += 1, R211 += 1, R161 += 1, R9 += 1 };
  s1 -> s3 [0, 65535] { R241 += 1, R211 += 1, R160 += 1, R161 += 1 };
  s2 -> s4 [0, 65535] { R241 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R241 += 1, R211 += 1 };
  s2 -> s2 [0, 65535] { R241 += 1, R211 += 1, R161 += 1, R9 += 1 };
  s3 -> s4 [0, 65535] { R241 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R241 += 1, R211 += 1, R161 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R241 += 1, R211 += 1, R160 += 1, R161 += 1 };
  s4 -> s4 [0, 65535] { R241 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R241 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R241 += 1, R211 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 8] { R243 += 1, R213 += 1, R163 += 1 };
  s0 -> s2 [0, 65535] { R243 += 1, R212 += 1, R213 += 1 };
  s0 -> s3 [0, 65535] { R243 += 1, R213 += 1, R162 += 1, R163 += 1 };
  s0 -> s0 [0, 65535] { R242 += 1, R243 += 1 };
  s0 -> s4 [9, 13] { R243 += 1, R213 += 1, R163 += 1 };
  s0 -> s1 [14, 31] { R243 += 1, R213 += 1, R163 += 1 };
  s0 -> s4 [32, 32] { R243 += 1, R213 += 1, R163 += 1 };
  s0 -> s1 [33, 65535] { R243 += 1, R213 += 1, R163 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R243 += 1, R213 += 1 };
  s1 -> s1 [0, 65535] { R243 += 1, R213 += 1, R163 += 1 };
  s1 -> s6 [0, 65535] { R243 += 1 };
  s2 -> s1 [0, 8] { R243 += 1, R213 += 1, R163 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R243 += 1, R212 += 1, R213 += 1 };
  s2 -> s3 [0, 65535] { R243 += 1, R213 += 1, R162 += 1, R163 += 1 };
  s2 -> s4 [9, 13] { R243 += 1, R213 += 1, R163 += 1 };
  s2 -> s1 [14, 31] { R243 += 1, R213 += 1, R163 += 1 };
  s2 -> s4 [32, 32] { R243 += 1, R213 += 1, R163 += 1 };
  s2 -> s1 [33, 65535] { R243 += 1, R213 += 1, R163 += 1 };
  s3 -> s1 [0, 8] { R243 += 1, R213 += 1, R163 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R243 += 1, R213 += 1, R162 += 1, R163 += 1 };
  s3 -> s6 [0, 65535] { R243 += 1 };
  s3 -> s4 [9, 13] { R243 += 1, R213 += 1, R163 += 1 };
  s3 -> s1 [14, 31] { R243 += 1, R213 += 1, R163 += 1 };
  s3 -> s4 [32, 32] { R243 += 1, R213 += 1, R163 += 1 };
  s3 -> s1 [33, 65535] { R243 += 1, R213 += 1, R163 += 1 };
  s4 -> s1 [0, 65535] { R243 += 1, R213 += 1, R163 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R243 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R243 += 1, R213 += 1 };
  s7 -> s6 [0, 65535] { R243 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 65535] { R245 += 1, R215 += 1, R164 += 1, R165 += 1 };
  s0 -> s2 [0, 65535] { R245 += 1, R215 += 1, R165 += 1, R10 += 1 };
  s0 -> s3 [0, 65535] { R245 += 1, R214 += 1, R215 += 1 };
  s0 -> s0 [0, 65535] { R244 += 1, R245 += 1 };
  s1 -> s5 [0, 65535] { R245 += 1 };
  s1 -> s1 [0, 65535] { R245 += 1, R215 += 1, R164 += 1, R165 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R245 += 1, R215 += 1, R165 += 1, R10 += 1 };
  s2 -> s5 [0, 65535] { R245 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R245 += 1, R215 += 1, R165 += 1, R10 += 1 };
  s2 -> s6 [0, 65535] { R245 += 1, R215 += 1 };
  s3 -> s1 [0, 65535] { R245 += 1, R215 += 1, R164 += 1, R165 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R245 += 1, R215 += 1, R165 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R245 += 1, R214 += 1, R215 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R245 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R245 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R245 += 1, R215 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 66] { R247 += 1, R217 += 1, R175 += 1 };
  s0 -> s2 [0, 65535] { R247 += 1, R217 += 1, R174 += 1, R175 += 1 };
  s0 -> s3 [0, 65535] { R247 += 1, R216 += 1, R217 += 1 };
  s0 -> s0 [0, 65535] { R246 += 1, R247 += 1 };
  s0 -> s1 [68, 65535] { R247 += 1, R217 += 1, R175 += 1 };
  s1 -> s1 [0, 66] { R247 += 1, R217 += 1, R175 += 1 };
  s1 -> s1 [0, 65535] { R247 += 1, R217 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R247 += 1 };
  s1 -> s1 [68, 65535] { R247 += 1, R217 += 1, R175 += 1 };
  s2 -> s1 [0, 66] { R247 += 1, R217 += 1, R175 += 1 };
  s2 -> s2 [0, 65535] { R247 += 1, R217 += 1, R174 += 1, R175 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R247 += 1 };
  s2 -> s1 [68, 65535] { R247 += 1, R217 += 1, R175 += 1 };
  s3 -> s1 [0, 66] { R247 += 1, R217 += 1, R175 += 1 };
  s3 -> s2 [0, 65535] { R247 += 1, R217 += 1, R174 += 1, R175 += 1 };
  s3 -> s3 [0, 65535] { R247 += 1, R216 += 1, R217 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [68, 65535] { R247 += 1, R217 += 1, R175 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R247 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65535] { R249 += 1, R218 += 1, R219 += 1 };
  s0 -> s2 [0, 65535] { R249 += 1, R219 += 1, R177 += 1, R140 += 1 };
  s0 -> s0 [0, 65535] { R248 += 1, R249 += 1 };
  s0 -> s3 [0, 65535] { R249 += 1, R219 += 1, R176 += 1, R177 += 1 };
  s1 -> s1 [0, 65535] { R249 += 1, R218 += 1, R219 += 1 };
  s1 -> s2 [0, 65535] { R249 += 1, R219 += 1, R177 += 1, R140 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R249 += 1, R219 += 1, R176 += 1, R177 += 1 };
  s2 -> s4 [0, 65535] { R249 += 1 };
  s2 -> s2 [0, 65535] { R249 += 1, R219 += 1, R177 += 1, R140 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R249 += 1, R219 += 1 };
  s3 -> s4 [0, 65535] { R249 += 1 };
  s3 -> s2 [0, 65535] { R249 += 1, R219 += 1, R177 += 1, R140 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R249 += 1, R219 += 1, R176 += 1, R177 += 1 };
  s4 -> s4 [0, 65535] { R249 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R249 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R249 += 1, R219 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_24 {
  init s0;
  s0 -> s1 [0, 67] { R251 += 1, R221 += 1, R179 += 1 };
  s0 -> s2 [0, 65535] { R251 += 1, R220 += 1, R221 += 1 };
  s0 -> s3 [0, 65535] { R251 += 1, R221 += 1, R178 += 1, R179 += 1 };
  s0 -> s0 [0, 65535] { R250 += 1, R251 += 1 };
  s0 -> s1 [91, 65535] { R251 += 1, R221 += 1, R179 += 1 };
  s1 -> s1 [0, 67] { R251 += 1, R221 += 1, R179 += 1 };
  s1 -> s4 [0, 65535] { R251 += 1 };
  s1 -> s1 [0, 65535] { R251 += 1, R221 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [91, 65535] { R251 += 1, R221 += 1, R179 += 1 };
  s2 -> s1 [0, 67] { R251 += 1, R221 += 1, R179 += 1 };
  s2 -> s2 [0, 65535] { R251 += 1, R220 += 1, R221 += 1 };
  s2 -> s3 [0, 65535] { R251 += 1, R221 += 1, R178 += 1, R179 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [91, 65535] { R251 += 1, R221 += 1, R179 += 1 };
  s3 -> s1 [0, 67] { R251 += 1, R221 += 1, R179 += 1 };
  s3 -> s3 [0, 65535] { R251 += 1, R221 += 1, R178 += 1, R179 += 1 };
  s3 -> s4 [0, 65535] { R251 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [91, 65535] { R251 += 1, R221 += 1, R179 += 1 };
  s4 -> s4 [0, 65535] { R251 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_25 {
  init s0;
  s0 -> s1 [0, 65535] { R253 += 1, R223 += 1, R199 += 1, R141 += 1 };
  s0 -> s0 [0, 65535] { R252 += 1, R253 += 1 };
  s0 -> s2 [0, 65535] { R253 += 1, R222 += 1, R223 += 1 };
  s0 -> s3 [0, 65535] { R253 += 1, R223 += 1, R198 += 1, R199 += 1 };
  s1 -> s1 [0, 65535] { R253 += 1, R223 += 1, R199 += 1, R141 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R253 += 1 };
  s1 -> s6 [0, 65535] { R253 += 1, R223 += 1 };
  s2 -> s1 [0, 65535] { R253 += 1, R223 += 1, R199 += 1, R141 += 1 };
  s2 -> s2 [0, 65535] { R253 += 1, R222 += 1, R223 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R253 += 1, R223 += 1, R198 += 1, R199 += 1 };
  s3 -> s1 [0, 65535] { R253 += 1, R223 += 1, R199 += 1, R141 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R253 += 1 };
  s3 -> s3 [0, 65535] { R253 += 1, R223 += 1, R198 += 1, R199 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R253 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R253 += 1 };
  s6 -> s6 [0, 65535] { R253 += 1, R223 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_26 {
  init s0;
  s0 -> s1 [0, 66] { R255 += 1, R225 += 1, R201 += 1 };
  s0 -> s2 [0, 65535] { R255 += 1, R224 += 1, R225 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s3 [0, 65535] { R255 += 1, R225 += 1, R200 += 1, R201 += 1 };
  s0 -> s4 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s0 -> s5 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s0 -> s1 [91, 65535] { R255 += 1, R225 += 1, R201 += 1 };
  s1 -> s1 [0, 66] { R255 += 1, R225 += 1, R201 += 1 };
  s1 -> s1 [0, 65535] { R255 += 1, R225 += 1 };
  s1 -> s6 [0, 65535] { R255 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s1 -> s5 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s1 -> s1 [91, 65535] { R255 += 1, R225 += 1, R201 += 1 };
  s2 -> s1 [0, 66] { R255 += 1, R225 += 1, R201 += 1 };
  s2 -> s2 [0, 65535] { R255 += 1, R224 += 1, R225 += 1 };
  s2 -> s3 [0, 65535] { R255 += 1, R225 += 1, R200 += 1, R201 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s2 -> s5 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s2 -> s1 [91, 65535] { R255 += 1, R225 += 1, R201 += 1 };
  s3 -> s1 [0, 66] { R255 += 1, R225 += 1, R201 += 1 };
  s3 -> s3 [0, 65535] { R255 += 1, R225 += 1, R200 += 1, R201 += 1 };
  s3 -> s6 [0, 65535] { R255 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s3 -> s5 [67, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s3 -> s1 [91, 65535] { R255 += 1, R225 += 1, R201 += 1 };
  s4 -> s4 [0, 67] { R255 += 1, R225 += 1, R201 += 1 };
  s4 -> s4 [0, 65535] { R255 += 1, R225 += 1 };
  s4 -> s6 [0, 65535] { R255 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [91, 65535] { R255 += 1, R225 += 1, R201 += 1 };
  s5 -> s5 [0, 65535] { R255 += 1, R225 += 1 };
  s5 -> s6 [0, 65535] { R255 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R255 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P31
automaton P31_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R143 += 1 };
  s0 -> s0 [0, 65535] { R142 += 1, R143 += 1 };
  s0 -> s2 [9, 13] { R143 += 1 };
  s0 -> s1 [14, 31] { R143 += 1 };
  s0 -> s2 [32, 32] { R143 += 1 };
  s0 -> s1 [33, 65535] { R143 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R143 += 1 };
  s2 -> s1 [0, 65535] { R143 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R144 += 1, R145 += 1 };
  s0 -> s1 [0, 65535] { R145 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R145 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R147 += 1 };
  s0 -> s0 [0, 65535] { R146 += 1, R147 += 1 };
  s0 -> s2 [9, 13] { R147 += 1 };
  s0 -> s1 [14, 31] { R147 += 1 };
  s0 -> s2 [32, 32] { R147 += 1 };
  s0 -> s1 [33, 65535] { R147 += 1 };
  s1 -> s1 [0, 65535] { R147 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R147 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R148 += 1, R149 += 1 };
  s0 -> s1 [0, 65535] { R149 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R149 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P32
automaton P32_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
constraint R1 = R173 && R2 = R179 && R3 = R225 && R4 = R197 && R20 = 0 && R21 = R255 && R150 - R173 = -1 && R151 = R173 && R152 - R173 = -1 && R153 = R173 && R154 = 0 && R155 = 1 && R156 = 0 && R157 = 1 && R158 - R179 = -1 && R159 = R179 && R160 - R179 = -1 && R161 = R179 && R162 = 0 && R163 = 1 && R164 = 0 && R165 = 1 && R166 = 0 && R167 = 1 && R168 = 0 && R169 = 1 && R170 = 0 && R171 = R173 && R172 = 0 && R174 = 0 && R175 = R179 && R176 = 0 && R177 = R179 && R178 = 0 && R180 - R255 = 1 && R181 = R197 && R182 - R255 = 1 && R183 = R197 && R184 - R255 = 1 && R185 = R197 && R186 - R255 = 1 && R187 = R197 && R188 - R255 = 1 && R189 = R197 && R190 - R255 = 1 && R191 = R197 && R192 - R255 = 1 && R193 = R197 && R194 - R255 = 1 && R195 = R197 && R196 - R255 = 1 && R202 = 1 && R203 = R225 && R204 = 1 && R205 = R225 && R206 = 1 && R207 = R225 && R208 = 1 && R209 = R225 && R210 = 1 && R211 = R225 && R212 = 1 && R213 = R225 && R214 = 1 && R215 = R225 && R216 = 1 && R217 = R225 && R218 = 1 && R219 = R225 && R220 = 1 && R221 = R225 && R222 = 1 && R223 = R225 && R224 = 1 && R226 = 0 && R227 = R255 && R228 = 0 && R229 = R255 && R230 = 0 && R231 = R255 && R232 = 0 && R233 = R255 && R234 = 0 && R235 = R255 && R236 = 0 && R237 = R255 && R238 = 0 && R239 = R255 && R240 = 0 && R241 = R255 && R242 = 0 && R243 = R255 && R244 = 0 && R245 = R255 && R246 = 0 && R247 = R255 && R248 = 0 && R249 = R255 && R250 = 0 && R251 = R255 && R252 = 0 && R253 = R255 && R254 = 0 && R0 != 0 && R12 < 1 && R13 < 1 && R16 < 1 && 0 < R173 && 0 < R179 && R255 < R197 && 0 < R225 && -1 < R255 && (R5 != 0 || ((R0 != R143 || R142 - R143 = -1 || R143 < 0) && (R0 = R143 || R0 < 1))) && (R5 != 0 || ((R0 != R145 || R144 - R145 = -1 || R145 < 0) && (R0 = R145 || R0 < 1))) && (R146 != 0 || ((R6 != 0 || ((R0 != R147 || R147 = 1 || R147 < 0) && (R0 = R147 || R147 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R147 || R147 = 1 || R147 < 0) && (R147 != 1 || -1 < R0) && (R0 = R147 || R147 = 1))))) && (R148 != 0 || ((R6 != 0 || ((R0 != R149 || R149 = 1 || R149 < 0) && (R0 = R149 || R149 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R149 || R149 = 1 || R149 < 0) && (R149 != 1 || -1 < R0) && (R0 = R149 || R149 = 1))))) && (R5 = 0 || (R0 = R143 && R142 - R143 = -1)) && (R5 = 0 || (R0 = R145 && R144 - R145 = -1)) && (R141 = 0 || (R198 = 0 && R199 = 0)) && (R141 = 0 || (R200 = 0 && R201 = 0)) && (R146 = 0 || (R6 = 0 && R0 < 0)) && (R148 = 0 || (R6 = 0 && R0 < 0));
// End of Parikh automata intersection problem
