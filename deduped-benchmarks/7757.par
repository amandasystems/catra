// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R12, R16, R17, R2, R3, R4, R5, R500, R501, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R526, R527, R528, R529, R530, R531, R532, R6, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [70, 70];
  s0 -> s0 [71, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [70, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R500 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 69];
  s0 -> s0 [0, 65535] { R501 += 1 };
  s0 -> s2 [70, 70];
  s0 -> s1 [71, 65535];
  s1 -> s1 [0, 69];
  s1 -> s2 [70, 70];
  s1 -> s1 [71, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R518 += 1 };
  s0 -> s0 [0, 65535] { R517 += 1, R518 += 1 };
  s0 -> s2 [9, 13] { R518 += 1 };
  s0 -> s1 [14, 31] { R518 += 1 };
  s0 -> s2 [32, 32] { R518 += 1 };
  s0 -> s1 [33, 65535] { R518 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R518 += 1 };
  s2 -> s1 [0, 65535] { R518 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R520 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R519 += 1, R520 += 1 };
  s1 -> s1 [0, 65535] { R520 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R522 += 1 };
  s0 -> s0 [0, 65535] { R521 += 1, R522 += 1 };
  s0 -> s2 [9, 13] { R522 += 1 };
  s0 -> s1 [14, 31] { R522 += 1 };
  s0 -> s2 [32, 32] { R522 += 1 };
  s0 -> s1 [33, 65535] { R522 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R522 += 1 };
  s2 -> s1 [0, 65535] { R522 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R523 += 1, R524 += 1 };
  s0 -> s1 [0, 65535] { R524 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R524 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 69] { R528 += 1 };
  s0 -> s0 [0, 65535] { R527 += 1, R528 += 1 };
  s0 -> s1 [71, 65535] { R528 += 1 };
  s1 -> s1 [0, 69] { R528 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [71, 65535] { R528 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65535] { R530 += 1, R507 += 1 };
  s0 -> s0 [0, 65535] { R529 += 1, R530 += 1 };
  s1 -> s1 [0, 65535] { R530 += 1, R507 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 70] { R532 += 1 };
  s0 -> s0 [0, 65535] { R531 += 1, R532 += 1 };
  s0 -> s1 [91, 65535] { R532 += 1 };
  s1 -> s1 [0, 70] { R532 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R532 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R612 += 1, R508 += 1 };
  s0 -> s0 [0, 65535] { R611 += 1, R612 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R612 += 1, R508 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 69] { R614 += 1 };
  s0 -> s0 [0, 65535] { R613 += 1, R614 += 1 };
  s0 -> s2 [70, 70] { R614 += 1 };
  s0 -> s3 [70, 70] { R614 += 1 };
  s0 -> s1 [91, 65535] { R614 += 1 };
  s1 -> s1 [0, 69] { R614 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [70, 70] { R614 += 1 };
  s1 -> s3 [70, 70] { R614 += 1 };
  s1 -> s1 [91, 65535] { R614 += 1 };
  s2 -> s2 [0, 70] { R614 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [91, 65535] { R614 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P42
automaton P42_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R17 += 1 };
  s1 -> s1 [0, 60] { R17 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R17 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R525 += 1, R526 += 1 };
  s0 -> s1 [0, 65535] { R526 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R526 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R636 += 1 };
  s0 -> s0 [0, 65535] { R635 += 1, R636 += 1 };
  s0 -> s2 [66, 66] { R636 += 1 };
  s0 -> s1 [67, 65535] { R636 += 1 };
  s1 -> s1 [0, 64] { R636 += 1 };
  s1 -> s2 [66, 66] { R636 += 1 };
  s1 -> s1 [67, 65535] { R636 += 1 };
  s2 -> s2 [0, 64] { R636 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R636 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R637 += 1, R638 += 1 };
  s0 -> s1 [0, 65535] { R638 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R638 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65] { R640 += 1 };
  s0 -> s2 [0, 65535] { R640 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R639 += 1, R640 += 1 };
  s0 -> s3 [66, 66] { R640 += 1 };
  s0 -> s1 [67, 65535] { R640 += 1 };
  s1 -> s1 [0, 65] { R640 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R640 += 1 };
  s1 -> s1 [67, 65535] { R640 += 1 };
  s2 -> s1 [0, 65] { R640 += 1 };
  s2 -> s2 [0, 65535] { R640 += 1, R12 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R640 += 1 };
  s2 -> s1 [67, 65535] { R640 += 1 };
  s3 -> s3 [0, 65535] { R640 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R642 += 1, R510 += 1 };
  s0 -> s0 [0, 65535] { R641 += 1, R642 += 1 };
  s0 -> s2 [0, 65535] { R642 += 1, R509 += 1, R510 += 1 };
  s0 -> s3 [9, 13] { R642 += 1, R510 += 1 };
  s0 -> s1 [14, 31] { R642 += 1, R510 += 1 };
  s0 -> s3 [32, 32] { R642 += 1, R510 += 1 };
  s0 -> s1 [33, 65535] { R642 += 1, R510 += 1 };
  s1 -> s5 [0, 65535] { R642 += 1 };
  s1 -> s1 [0, 65535] { R642 += 1, R510 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R642 += 1, R510 += 1 };
  s2 -> s2 [0, 65535] { R642 += 1, R509 += 1, R510 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R642 += 1, R510 += 1 };
  s2 -> s1 [14, 31] { R642 += 1, R510 += 1 };
  s2 -> s3 [32, 32] { R642 += 1, R510 += 1 };
  s2 -> s1 [33, 65535] { R642 += 1, R510 += 1 };
  s3 -> s1 [0, 65535] { R642 += 1, R510 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R642 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R643 += 1, R644 += 1 };
  s0 -> s1 [0, 65535] { R644 += 1, R511 += 1, R512 += 1 };
  s0 -> s2 [0, 65535] { R644 += 1, R512 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R644 += 1, R511 += 1, R512 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R644 += 1, R512 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R644 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R644 += 1, R512 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R644 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R646 += 1, R514 += 1 };
  s0 -> s0 [0, 65535] { R645 += 1, R646 += 1 };
  s0 -> s2 [0, 65535] { R646 += 1, R513 += 1, R514 += 1 };
  s0 -> s3 [9, 13] { R646 += 1, R514 += 1 };
  s0 -> s1 [14, 31] { R646 += 1, R514 += 1 };
  s0 -> s3 [32, 32] { R646 += 1, R514 += 1 };
  s0 -> s1 [33, 65535] { R646 += 1, R514 += 1 };
  s1 -> s5 [0, 65535] { R646 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R646 += 1, R514 += 1 };
  s2 -> s1 [0, 8] { R646 += 1, R514 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R646 += 1, R513 += 1, R514 += 1 };
  s2 -> s3 [9, 13] { R646 += 1, R514 += 1 };
  s2 -> s1 [14, 31] { R646 += 1, R514 += 1 };
  s2 -> s3 [32, 32] { R646 += 1, R514 += 1 };
  s2 -> s1 [33, 65535] { R646 += 1, R514 += 1 };
  s3 -> s1 [0, 65535] { R646 += 1, R514 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R646 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R647 += 1, R648 += 1 };
  s0 -> s1 [0, 65535] { R648 += 1, R516 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R648 += 1, R515 += 1, R516 += 1 };
  s1 -> s4 [0, 65535] { R648 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R648 += 1, R516 += 1, R6 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R648 += 1, R516 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R648 += 1, R515 += 1, R516 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R648 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R650 += 1, R607 += 1, R608 += 1 };
  s0 -> s2 [0, 65535] { R650 += 1, R608 += 1, R506 += 1 };
  s0 -> s0 [0, 65535] { R649 += 1, R650 += 1 };
  s1 -> s1 [0, 65535] { R650 += 1, R607 += 1, R608 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R650 += 1, R608 += 1, R506 += 1 };
  s2 -> s3 [0, 65535] { R650 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R650 += 1, R608 += 1, R506 += 1 };
  s3 -> s3 [0, 65535] { R650 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65] { R652 += 1, R610 += 1 };
  s0 -> s0 [0, 65535] { R651 += 1, R652 += 1 };
  s0 -> s2 [0, 65535] { R652 += 1, R609 += 1, R610 += 1 };
  s0 -> s3 [66, 66] { R652 += 1, R610 += 1 };
  s0 -> s4 [66, 66] { R652 += 1, R610 += 1 };
  s0 -> s1 [71, 65535] { R652 += 1, R610 += 1 };
  s1 -> s1 [0, 65] { R652 += 1, R610 += 1 };
  s1 -> s1 [0, 65535] { R652 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R652 += 1, R610 += 1 };
  s1 -> s4 [66, 66] { R652 += 1, R610 += 1 };
  s1 -> s1 [71, 65535] { R652 += 1, R610 += 1 };
  s2 -> s1 [0, 65] { R652 += 1, R610 += 1 };
  s2 -> s2 [0, 65535] { R652 += 1, R609 += 1, R610 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R652 += 1, R610 += 1 };
  s2 -> s4 [66, 66] { R652 += 1, R610 += 1 };
  s2 -> s1 [71, 65535] { R652 += 1, R610 += 1 };
  s3 -> s3 [0, 65535] { R652 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R652 += 1, R610 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R652 += 1 };
  s4 -> s4 [71, 65535] { R652 += 1, R610 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65] { R654 += 1, R620 += 1 };
  s0 -> s0 [0, 65535] { R653 += 1, R654 += 1 };
  s0 -> s2 [0, 65535] { R654 += 1, R619 += 1, R620 += 1 };
  s0 -> s3 [66, 66] { R654 += 1, R620 += 1 };
  s0 -> s1 [67, 65535] { R654 += 1, R620 += 1 };
  s1 -> s1 [0, 65] { R654 += 1, R620 += 1 };
  s1 -> s3 [66, 66] { R654 += 1, R620 += 1 };
  s1 -> s1 [67, 65535] { R654 += 1, R620 += 1 };
  s2 -> s1 [0, 65] { R654 += 1, R620 += 1 };
  s2 -> s2 [0, 65535] { R654 += 1, R619 += 1, R620 += 1 };
  s2 -> s3 [66, 66] { R654 += 1, R620 += 1 };
  s2 -> s1 [67, 65535] { R654 += 1, R620 += 1 };
  s3 -> s4 [0, 65535] { R654 += 1 };
  s3 -> s3 [0, 65535] { R654 += 1, R620 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R654 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_14 {
  init s0;
  s0 -> s0 [0, 65535] { R655 += 1, R656 += 1 };
  s0 -> s1 [0, 65535] { R656 += 1, R622 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R656 += 1, R621 += 1, R622 += 1 };
  s1 -> s4 [0, 65535] { R656 += 1 };
  s1 -> s1 [0, 65535] { R656 += 1, R622 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R656 += 1, R622 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R656 += 1, R621 += 1, R622 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R656 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65] { R658 += 1, R624 += 1 };
  s0 -> s2 [0, 65535] { R658 += 1, R623 += 1, R624 += 1 };
  s0 -> s3 [0, 65535] { R658 += 1, R624 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R657 += 1, R658 += 1 };
  s0 -> s4 [66, 66] { R658 += 1, R624 += 1 };
  s0 -> s1 [67, 65535] { R658 += 1, R624 += 1 };
  s1 -> s1 [0, 65] { R658 += 1, R624 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R658 += 1 };
  s1 -> s4 [66, 66] { R658 += 1, R624 += 1 };
  s1 -> s1 [67, 65535] { R658 += 1, R624 += 1 };
  s2 -> s1 [0, 65] { R658 += 1, R624 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R658 += 1, R623 += 1, R624 += 1 };
  s2 -> s3 [0, 65535] { R658 += 1, R624 += 1, R9 += 1 };
  s2 -> s4 [66, 66] { R658 += 1, R624 += 1 };
  s2 -> s1 [67, 65535] { R658 += 1, R624 += 1 };
  s3 -> s1 [0, 65] { R658 += 1, R624 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R658 += 1, R624 += 1, R9 += 1 };
  s3 -> s6 [0, 65535] { R658 += 1 };
  s3 -> s4 [66, 66] { R658 += 1, R624 += 1 };
  s3 -> s1 [67, 65535] { R658 += 1, R624 += 1 };
  s4 -> s4 [0, 65535] { R658 += 1, R624 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R658 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65] { R660 += 1, R626 += 1, R602 += 1 };
  s0 -> s0 [0, 65535] { R659 += 1, R660 += 1 };
  s0 -> s2 [0, 65535] { R660 += 1, R626 += 1, R601 += 1, R602 += 1 };
  s0 -> s3 [0, 65535] { R660 += 1, R625 += 1, R626 += 1 };
  s0 -> s1 [67, 65535] { R660 += 1, R626 += 1, R602 += 1 };
  s1 -> s1 [0, 65] { R660 += 1, R626 += 1, R602 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R660 += 1 };
  s1 -> s1 [0, 65535] { R660 += 1, R626 += 1 };
  s1 -> s1 [67, 65535] { R660 += 1, R626 += 1, R602 += 1 };
  s2 -> s1 [0, 65] { R660 += 1, R626 += 1, R602 += 1 };
  s2 -> s2 [0, 65535] { R660 += 1, R626 += 1, R601 += 1, R602 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R660 += 1 };
  s2 -> s1 [67, 65535] { R660 += 1, R626 += 1, R602 += 1 };
  s3 -> s1 [0, 65] { R660 += 1, R626 += 1, R602 += 1 };
  s3 -> s2 [0, 65535] { R660 += 1, R626 += 1, R601 += 1, R602 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R660 += 1, R625 += 1, R626 += 1 };
  s3 -> s1 [67, 65535] { R660 += 1, R626 += 1, R602 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R660 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R662 += 1, R628 += 1, R604 += 1, R504 += 1 };
  s0 -> s2 [0, 65535] { R662 += 1, R628 += 1, R603 += 1, R604 += 1 };
  s0 -> s0 [0, 65535] { R661 += 1, R662 += 1 };
  s0 -> s3 [0, 65535] { R662 += 1, R627 += 1, R628 += 1 };
  s1 -> s1 [0, 65535] { R662 += 1, R628 += 1, R604 += 1, R504 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R662 += 1, R628 += 1 };
  s1 -> s5 [0, 65535] { R662 += 1 };
  s2 -> s1 [0, 65535] { R662 += 1, R628 += 1, R604 += 1, R504 += 1 };
  s2 -> s2 [0, 65535] { R662 += 1, R628 += 1, R603 += 1, R604 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R662 += 1 };
  s3 -> s1 [0, 65535] { R662 += 1, R628 += 1, R604 += 1, R504 += 1 };
  s3 -> s2 [0, 65535] { R662 += 1, R628 += 1, R603 += 1, R604 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R662 += 1, R627 += 1, R628 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R662 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R662 += 1, R628 += 1 };
  s6 -> s5 [0, 65535] { R662 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R664 += 1, R630 += 1, R606 += 1 };
  s0 -> s2 [0, 65535] { R664 += 1, R629 += 1, R630 += 1 };
  s0 -> s3 [0, 65535] { R664 += 1, R630 += 1, R605 += 1, R606 += 1 };
  s0 -> s0 [0, 65535] { R663 += 1, R664 += 1 };
  s0 -> s4 [70, 70] { R664 += 1, R630 += 1, R606 += 1 };
  s0 -> s1 [71, 65535] { R664 += 1, R630 += 1, R606 += 1 };
  s1 -> s1 [0, 66] { R664 += 1, R630 += 1, R606 += 1 };
  s1 -> s4 [70, 70] { R664 += 1, R630 += 1, R606 += 1 };
  s1 -> s1 [71, 65535] { R664 += 1, R630 += 1, R606 += 1 };
  s2 -> s1 [0, 66] { R664 += 1, R630 += 1, R606 += 1 };
  s2 -> s2 [0, 65535] { R664 += 1, R629 += 1, R630 += 1 };
  s2 -> s3 [0, 65535] { R664 += 1, R630 += 1, R605 += 1, R606 += 1 };
  s2 -> s4 [70, 70] { R664 += 1, R630 += 1, R606 += 1 };
  s2 -> s1 [71, 65535] { R664 += 1, R630 += 1, R606 += 1 };
  s3 -> s1 [0, 66] { R664 += 1, R630 += 1, R606 += 1 };
  s3 -> s3 [0, 65535] { R664 += 1, R630 += 1, R605 += 1, R606 += 1 };
  s3 -> s4 [70, 70] { R664 += 1, R630 += 1, R606 += 1 };
  s3 -> s1 [71, 65535] { R664 += 1, R630 += 1, R606 += 1 };
  s4 -> s4 [0, 66] { R664 += 1, R630 += 1, R606 += 1 };
  s4 -> s5 [0, 65535] { R664 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R664 += 1, R630 += 1 };
  s4 -> s4 [70, 65535] { R664 += 1, R630 += 1, R606 += 1 };
  s5 -> s5 [0, 65535] { R664 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value1_19 {
  init s0;
  s0 -> s0 [0, 65535] { R665 += 1, R666 += 1 };
  s0 -> s1 [0, 65535] { R666 += 1, R632 += 1, R615 += 1, R616 += 1 };
  s0 -> s2 [0, 65535] { R666 += 1, R631 += 1, R632 += 1 };
  s0 -> s3 [0, 65535] { R666 += 1, R632 += 1, R616 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R666 += 1, R632 += 1, R615 += 1, R616 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R666 += 1 };
  s1 -> s3 [0, 65535] { R666 += 1, R632 += 1, R616 += 1, R505 += 1 };
  s2 -> s1 [0, 65535] { R666 += 1, R632 += 1, R615 += 1, R616 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R666 += 1, R631 += 1, R632 += 1 };
  s2 -> s3 [0, 65535] { R666 += 1, R632 += 1, R616 += 1, R505 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R666 += 1 };
  s3 -> s6 [0, 65535] { R666 += 1, R632 += 1 };
  s3 -> s3 [0, 65535] { R666 += 1, R632 += 1, R616 += 1, R505 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R666 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R666 += 1 };
  s6 -> s6 [0, 65535] { R666 += 1, R632 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65] { R668 += 1, R634 += 1, R618 += 1 };
  s0 -> s2 [0, 65535] { R668 += 1, R634 += 1, R617 += 1, R618 += 1 };
  s0 -> s3 [0, 65535] { R668 += 1, R633 += 1, R634 += 1 };
  s0 -> s0 [0, 65535] { R667 += 1, R668 += 1 };
  s0 -> s4 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s0 -> s5 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s0 -> s1 [71, 65535] { R668 += 1, R634 += 1, R618 += 1 };
  s1 -> s1 [0, 65] { R668 += 1, R634 += 1, R618 += 1 };
  s1 -> s1 [0, 65535] { R668 += 1, R634 += 1 };
  s1 -> s6 [0, 65535] { R668 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s1 -> s5 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s1 -> s1 [71, 65535] { R668 += 1, R634 += 1, R618 += 1 };
  s2 -> s1 [0, 65] { R668 += 1, R634 += 1, R618 += 1 };
  s2 -> s2 [0, 65535] { R668 += 1, R634 += 1, R617 += 1, R618 += 1 };
  s2 -> s6 [0, 65535] { R668 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s2 -> s5 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s2 -> s1 [71, 65535] { R668 += 1, R634 += 1, R618 += 1 };
  s3 -> s1 [0, 65] { R668 += 1, R634 += 1, R618 += 1 };
  s3 -> s2 [0, 65535] { R668 += 1, R634 += 1, R617 += 1, R618 += 1 };
  s3 -> s3 [0, 65535] { R668 += 1, R633 += 1, R634 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s3 -> s5 [66, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s3 -> s1 [71, 65535] { R668 += 1, R634 += 1, R618 += 1 };
  s4 -> s4 [0, 66] { R668 += 1, R634 += 1, R618 += 1 };
  s4 -> s4 [0, 65535] { R668 += 1, R634 += 1 };
  s4 -> s6 [0, 65535] { R668 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [71, 65535] { R668 += 1, R634 += 1, R618 += 1 };
  s5 -> s6 [0, 65535] { R668 += 1 };
  s5 -> s5 [0, 65535] { R668 += 1, R634 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R668 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 = R606 && R2 = R634 && R3 = R526 && R4 = R532 && R16 = 0 && R17 = R668 && R509 - R634 = -1 && R510 = R634 && R511 - R634 = -1 && R512 = R634 && R513 = 0 && R514 = 1 && R515 = 0 && R516 = 1 && R517 - R532 = -1 && R518 = R532 && R519 - R532 = -1 && R520 = R532 && R521 = 0 && R522 = 1 && R523 = 0 && R524 = 1 && R525 - R668 = 1 && R527 = 0 && R528 = R532 && R529 = 0 && R530 = R532 && R531 = 0 && R605 = 0 && R619 = 0 && R620 = R634 && R621 = 0 && R622 = R634 && R623 = 0 && R624 = R634 && R625 = 0 && R626 = R634 && R627 = 0 && R628 = R634 && R629 = 0 && R630 = R634 && R631 = 0 && R632 = R634 && R633 = 0 && R635 = 0 && R636 = R668 && R637 = 0 && R638 = R668 && R639 = 0 && R640 = R668 && R641 = 0 && R642 = R668 && R643 = 0 && R644 = R668 && R645 = 0 && R646 = R668 && R647 = 0 && R648 = R668 && R649 = 0 && R650 = R668 && R651 = 0 && R652 = R668 && R653 = 0 && R654 = R668 && R655 = 0 && R656 = R668 && R657 = 0 && R658 = R668 && R659 = 0 && R660 = R668 && R661 = 0 && R662 = R668 && R663 = 0 && R664 = R668 && R665 = 0 && R666 = R668 && R667 = 0 && R0 != 0 && R9 < 1 && R12 < 1 && R500 < 1 && R501 < 1 && R668 < R526 && 0 < R532 && -1 < R606 && 0 < R634 && -1 < R668 && (R601 != 0 || R602 = R606 || (R504 = 0 && R606 = 0)) && (R603 != 0 || R604 = R606 || (R504 = 0 && R606 = 0)) && (R505 = 0 || (R615 = 0 && R616 = 0)) && (R505 = 0 || (R617 = 0 && R618 = 0)) && (R506 = 0 || (R607 = 0 && R608 = 0)) && (R506 = 0 || (R609 = 0 && R610 = 0)) && (R508 = 0 || (R611 = 0 && R612 = 0)) && (R508 = 0 || (R613 = 0 && R614 = 0)) && (R601 = 0 || (R504 = 0 && R606 = 0)) && (R603 = 0 || (R504 = 0 && R606 = 0));
// End of Parikh automata intersection problem
