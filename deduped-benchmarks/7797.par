// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R172, R173, R2, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R4, R6, R7;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60] { R173 += 1 };
  s0 -> s0 [0, 65535] { R172 += 1, R173 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R173 += 1 };
  s1 -> s1 [0, 60] { R173 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R173 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 65535] { R265 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R264 += 1, R265 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R265 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 64] { R277 += 1 };
  s0 -> s0 [0, 65535] { R276 += 1, R277 += 1 };
  s0 -> s2 [67, 67] { R277 += 1 };
  s0 -> s1 [68, 65535] { R277 += 1 };
  s1 -> s1 [0, 64] { R277 += 1 };
  s1 -> s2 [67, 67] { R277 += 1 };
  s1 -> s1 [68, 65535] { R277 += 1 };
  s2 -> s2 [0, 64] { R277 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R277 += 1 };
  accepting s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 65535] { R279 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R278 += 1, R279 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R279 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 66] { R281 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R280 += 1, R281 += 1 };
  s0 -> s2 [0, 65535] { R281 += 1, R6 += 1, R7 += 1 };
  s0 -> s3 [67, 67] { R281 += 1 };
  s0 -> s1 [68, 65535] { R281 += 1, R7 += 1 };
  s1 -> s1 [0, 66] { R281 += 1, R7 += 1 };
  s1 -> s3 [67, 67] { R281 += 1 };
  s1 -> s1 [68, 65535] { R281 += 1, R7 += 1 };
  s2 -> s1 [0, 66] { R281 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R281 += 1, R6 += 1, R7 += 1 };
  s2 -> s3 [67, 67] { R281 += 1 };
  s2 -> s1 [68, 65535] { R281 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R281 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 8] { R283 += 1, R257 += 1 };
  s0 -> s2 [0, 65535] { R283 += 1, R256 += 1, R257 += 1 };
  s0 -> s0 [0, 65535] { R282 += 1, R283 += 1 };
  s0 -> s3 [9, 13] { R283 += 1, R257 += 1 };
  s0 -> s1 [14, 31] { R283 += 1, R257 += 1 };
  s0 -> s3 [32, 32] { R283 += 1, R257 += 1 };
  s0 -> s1 [33, 65535] { R283 += 1, R257 += 1 };
  s1 -> s1 [0, 65535] { R283 += 1, R257 += 1 };
  s1 -> s5 [0, 65535] { R283 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R283 += 1, R257 += 1 };
  s2 -> s2 [0, 65535] { R283 += 1, R256 += 1, R257 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R283 += 1, R257 += 1 };
  s2 -> s1 [14, 31] { R283 += 1, R257 += 1 };
  s2 -> s3 [32, 32] { R283 += 1, R257 += 1 };
  s2 -> s1 [33, 65535] { R283 += 1, R257 += 1 };
  s3 -> s1 [0, 65535] { R283 += 1, R257 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R283 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R285 += 1, R259 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R285 += 1, R258 += 1, R259 += 1 };
  s0 -> s0 [0, 65535] { R284 += 1, R285 += 1 };
  s1 -> s4 [0, 65535] { R285 += 1 };
  s1 -> s1 [0, 65535] { R285 += 1, R259 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R285 += 1, R259 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R285 += 1, R258 += 1, R259 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R285 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R287 += 1, R261 += 1 };
  s0 -> s2 [0, 65535] { R287 += 1, R260 += 1, R261 += 1 };
  s0 -> s0 [0, 65535] { R286 += 1, R287 += 1 };
  s0 -> s3 [9, 13] { R287 += 1, R261 += 1 };
  s0 -> s1 [14, 31] { R287 += 1, R261 += 1 };
  s0 -> s3 [32, 32] { R287 += 1, R261 += 1 };
  s0 -> s1 [33, 65535] { R287 += 1, R261 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R287 += 1 };
  s1 -> s1 [0, 65535] { R287 += 1, R261 += 1 };
  s2 -> s1 [0, 8] { R287 += 1, R261 += 1 };
  s2 -> s2 [0, 65535] { R287 += 1, R260 += 1, R261 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R287 += 1, R261 += 1 };
  s2 -> s1 [14, 31] { R287 += 1, R261 += 1 };
  s2 -> s3 [32, 32] { R287 += 1, R261 += 1 };
  s2 -> s1 [33, 65535] { R287 += 1, R261 += 1 };
  s3 -> s1 [0, 65535] { R287 += 1, R261 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R287 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R288 += 1, R289 += 1 };
  s0 -> s1 [0, 65535] { R289 += 1, R262 += 1, R263 += 1 };
  s0 -> s2 [0, 65535] { R289 += 1, R263 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R289 += 1, R262 += 1, R263 += 1 };
  s1 -> s2 [0, 65535] { R289 += 1, R263 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R289 += 1 };
  s2 -> s2 [0, 65535] { R289 += 1, R263 += 1, R4 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R289 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 66] { R291 += 1, R267 += 1 };
  s0 -> s2 [0, 65535] { R291 += 1, R266 += 1, R267 += 1 };
  s0 -> s0 [0, 65535] { R290 += 1, R291 += 1 };
  s0 -> s1 [68, 65535] { R291 += 1, R267 += 1 };
  s1 -> s1 [0, 66] { R291 += 1, R267 += 1 };
  s1 -> s1 [0, 65535] { R291 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R291 += 1, R267 += 1 };
  s2 -> s1 [0, 66] { R291 += 1, R267 += 1 };
  s2 -> s2 [0, 65535] { R291 += 1, R266 += 1, R267 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [68, 65535] { R291 += 1, R267 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R292 += 1, R293 += 1 };
  s0 -> s1 [0, 65535] { R293 += 1, R268 += 1, R269 += 1 };
  s0 -> s2 [0, 65535] { R293 += 1, R269 += 1, R254 += 1 };
  s1 -> s1 [0, 65535] { R293 += 1, R268 += 1, R269 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R293 += 1, R269 += 1, R254 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R293 += 1, R269 += 1, R254 += 1 };
  s2 -> s4 [0, 65535] { R293 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R293 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 67] { R295 += 1, R271 += 1 };
  s0 -> s0 [0, 65535] { R294 += 1, R295 += 1 };
  s0 -> s2 [0, 65535] { R295 += 1, R270 += 1, R271 += 1 };
  s0 -> s3 [83, 83] { R295 += 1, R271 += 1 };
  s0 -> s1 [84, 65535] { R295 += 1, R271 += 1 };
  s1 -> s1 [0, 67] { R295 += 1, R271 += 1 };
  s1 -> s3 [83, 83] { R295 += 1, R271 += 1 };
  s1 -> s1 [84, 65535] { R295 += 1, R271 += 1 };
  s2 -> s1 [0, 67] { R295 += 1, R271 += 1 };
  s2 -> s2 [0, 65535] { R295 += 1, R270 += 1, R271 += 1 };
  s2 -> s3 [83, 83] { R295 += 1, R271 += 1 };
  s2 -> s1 [84, 65535] { R295 += 1, R271 += 1 };
  s3 -> s3 [0, 67] { R295 += 1, R271 += 1 };
  s3 -> s3 [0, 65535] { R295 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [83, 65535] { R295 += 1, R271 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R296 += 1, R297 += 1 };
  s0 -> s1 [0, 65535] { R297 += 1, R273 += 1, R255 += 1 };
  s0 -> s2 [0, 65535] { R297 += 1, R272 += 1, R273 += 1 };
  s1 -> s4 [0, 65535] { R297 += 1 };
  s1 -> s1 [0, 65535] { R297 += 1, R273 += 1, R255 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R297 += 1, R273 += 1, R255 += 1 };
  s2 -> s2 [0, 65535] { R297 += 1, R272 += 1, R273 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R297 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 66] { R299 += 1, R275 += 1 };
  s0 -> s2 [0, 65535] { R299 += 1, R274 += 1, R275 += 1 };
  s0 -> s0 [0, 65535] { R298 += 1, R299 += 1 };
  s0 -> s3 [67, 67] { R299 += 1, R275 += 1 };
  s0 -> s4 [67, 67] { R299 += 1, R275 += 1 };
  s0 -> s1 [84, 65535] { R299 += 1, R275 += 1 };
  s1 -> s1 [0, 66] { R299 += 1, R275 += 1 };
  s1 -> s1 [0, 65535] { R299 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [67, 67] { R299 += 1, R275 += 1 };
  s1 -> s4 [67, 67] { R299 += 1, R275 += 1 };
  s1 -> s1 [84, 65535] { R299 += 1, R275 += 1 };
  s2 -> s1 [0, 66] { R299 += 1, R275 += 1 };
  s2 -> s2 [0, 65535] { R299 += 1, R274 += 1, R275 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [67, 67] { R299 += 1, R275 += 1 };
  s2 -> s4 [67, 67] { R299 += 1, R275 += 1 };
  s2 -> s1 [84, 65535] { R299 += 1, R275 += 1 };
  s3 -> s3 [0, 65535] { R299 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 67] { R299 += 1, R275 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R299 += 1 };
  s4 -> s4 [84, 65535] { R299 += 1, R275 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R1 = R271 && R2 = R265 && R6 = 0 && R7 - R270 = -1 && R172 = 0 && R173 = R299 && R256 - R271 = -1 && R257 = R271 && R258 - R271 = -1 && R259 = R271 && R260 = 0 && R261 = 1 && R262 = 0 && R263 = 1 && R264 - R299 = 1 && R276 = 0 && R277 = R299 && R278 = 0 && R279 = R299 && R280 = 0 && R281 = R299 && R282 = 0 && R283 = R299 && R284 = 0 && R285 = R299 && R286 = 0 && R287 = R299 && R288 = 0 && R289 = R299 && R290 = 0 && R291 = R299 && R292 = 0 && R293 = R299 && R294 = 0 && R295 = R299 && R296 = 0 && R297 = R299 && R298 = 0 && R0 != 0 && R299 < R265 && R270 - R271 < 1 && -1 < R270 && 0 < R271 && -1 < R299 && (R266 != R270 || R267 = R271 || (R254 = 0 && R270 = R271)) && (R268 != R270 || R269 = R271 || (R254 = 0 && R270 = R271)) && (R272 != 0 || R270 = R273 || (R255 = 0 && R270 = 0)) && (R274 != 0 || R270 = R275 || (R255 = 0 && R270 = 0)) && (R266 = R270 || (R254 = 0 && R270 = R271)) && (R268 = R270 || (R254 = 0 && R270 = R271)) && (R272 = 0 || (R255 = 0 && R270 = 0)) && (R274 = 0 || (R255 = 0 && R270 = 0));
// End of Parikh automata intersection problem
