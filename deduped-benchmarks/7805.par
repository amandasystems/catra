// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R14, R15, R2, R3, R336, R337, R4, R496, R497, R498, R499, R5, R500, R501, R502, R503, R504, R505, R506, R507, R508, R509, R510, R511, R512, R513, R514, R515, R516, R517, R518, R519, R520, R521, R522, R523, R524, R525, R590, R591, R592, R593, R594, R595, R596, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R337 += 1 };
  s0 -> s0 [0, 65535] { R336 += 1, R337 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R337 += 1 };
  s1 -> s1 [0, 60] { R337 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R337 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R613 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R612 += 1, R613 += 1 };
  s1 -> s1 [0, 65535] { R613 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R615 += 1, R522 += 1, R523 += 1 };
  s0 -> s0 [0, 65535] { R614 += 1, R615 += 1 };
  s0 -> s2 [9, 9] { R615 += 1, R523 += 1 };
  s1 -> s1 [0, 65535] { R615 += 1, R522 += 1, R523 += 1 };
  s1 -> s2 [9, 9] { R615 += 1, R523 += 1 };
  s2 -> s2 [0, 65535] { R615 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R616 += 1, R617 += 1 };
  s0 -> s1 [0, 65535] { R617 += 1, R524 += 1, R525 += 1 };
  s0 -> s2 [0, 65535] { R617 += 1, R525 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R617 += 1, R524 += 1, R525 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R617 += 1, R525 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R617 += 1 };
  s2 -> s2 [0, 65535] { R617 += 1, R525 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R617 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R619 += 1, R597 += 1 };
  s0 -> s0 [0, 65535] { R618 += 1, R619 += 1 };
  s0 -> s2 [0, 65535] { R619 += 1, R596 += 1, R597 += 1 };
  s0 -> s1 [91, 65535] { R619 += 1, R597 += 1 };
  s1 -> s1 [0, 64] { R619 += 1, R597 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R619 += 1 };
  s1 -> s1 [91, 65535] { R619 += 1, R597 += 1 };
  s2 -> s1 [0, 64] { R619 += 1, R597 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R619 += 1, R596 += 1, R597 += 1 };
  s2 -> s1 [91, 65535] { R619 += 1, R597 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R620 += 1, R621 += 1 };
  s0 -> s1 [0, 65535] { R621 += 1, R599 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R621 += 1, R598 += 1, R599 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R621 += 1 };
  s1 -> s1 [0, 65535] { R621 += 1, R599 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R621 += 1, R599 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R621 += 1, R598 += 1, R599 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R621 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R623 += 1, R601 += 1, R499 += 1 };
  s0 -> s2 [0, 65535] { R623 += 1, R600 += 1, R601 += 1 };
  s0 -> s3 [0, 65535] { R623 += 1, R601 += 1, R498 += 1, R499 += 1 };
  s0 -> s0 [0, 65535] { R622 += 1, R623 += 1 };
  s0 -> s4 [9, 13] { R623 += 1, R601 += 1, R499 += 1 };
  s0 -> s1 [14, 31] { R623 += 1, R601 += 1, R499 += 1 };
  s0 -> s4 [32, 32] { R623 += 1, R601 += 1, R499 += 1 };
  s0 -> s1 [33, 65535] { R623 += 1, R601 += 1, R499 += 1 };
  s1 -> s7 [0, 65535] { R623 += 1, R601 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R623 += 1, R601 += 1, R499 += 1 };
  s1 -> s6 [0, 65535] { R623 += 1 };
  s2 -> s1 [0, 8] { R623 += 1, R601 += 1, R499 += 1 };
  s2 -> s2 [0, 65535] { R623 += 1, R600 += 1, R601 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R623 += 1, R601 += 1, R498 += 1, R499 += 1 };
  s2 -> s4 [9, 13] { R623 += 1, R601 += 1, R499 += 1 };
  s2 -> s1 [14, 31] { R623 += 1, R601 += 1, R499 += 1 };
  s2 -> s4 [32, 32] { R623 += 1, R601 += 1, R499 += 1 };
  s2 -> s1 [33, 65535] { R623 += 1, R601 += 1, R499 += 1 };
  s3 -> s1 [0, 8] { R623 += 1, R601 += 1, R499 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R623 += 1 };
  s3 -> s3 [0, 65535] { R623 += 1, R601 += 1, R498 += 1, R499 += 1 };
  s3 -> s4 [9, 13] { R623 += 1, R601 += 1, R499 += 1 };
  s3 -> s1 [14, 31] { R623 += 1, R601 += 1, R499 += 1 };
  s3 -> s4 [32, 32] { R623 += 1, R601 += 1, R499 += 1 };
  s3 -> s1 [33, 65535] { R623 += 1, R601 += 1, R499 += 1 };
  s4 -> s1 [0, 65535] { R623 += 1, R601 += 1, R499 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R623 += 1 };
  s7 -> s7 [0, 65535] { R623 += 1, R601 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R623 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R625 += 1, R602 += 1, R603 += 1 };
  s0 -> s2 [0, 65535] { R625 += 1, R603 += 1, R501 += 1, R5 += 1 };
  s0 -> s3 [0, 65535] { R625 += 1, R603 += 1, R500 += 1, R501 += 1 };
  s0 -> s0 [0, 65535] { R624 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R625 += 1, R602 += 1, R603 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R625 += 1, R603 += 1, R501 += 1, R5 += 1 };
  s1 -> s3 [0, 65535] { R625 += 1, R603 += 1, R500 += 1, R501 += 1 };
  s2 -> s6 [0, 65535] { R625 += 1, R603 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R625 += 1, R603 += 1, R501 += 1, R5 += 1 };
  s2 -> s5 [0, 65535] { R625 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R625 += 1, R603 += 1, R501 += 1, R5 += 1 };
  s3 -> s5 [0, 65535] { R625 += 1 };
  s3 -> s3 [0, 65535] { R625 += 1, R603 += 1, R500 += 1, R501 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R625 += 1 };
  s6 -> s6 [0, 65535] { R625 += 1, R603 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R625 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R627 += 1, R605 += 1, R503 += 1 };
  s0 -> s0 [0, 65535] { R626 += 1, R627 += 1 };
  s0 -> s2 [0, 65535] { R627 += 1, R604 += 1, R605 += 1 };
  s0 -> s3 [0, 65535] { R627 += 1, R605 += 1, R502 += 1, R503 += 1 };
  s0 -> s4 [9, 13] { R627 += 1, R605 += 1, R503 += 1 };
  s0 -> s1 [14, 31] { R627 += 1, R605 += 1, R503 += 1 };
  s0 -> s4 [32, 32] { R627 += 1, R605 += 1, R503 += 1 };
  s0 -> s1 [33, 65535] { R627 += 1, R605 += 1, R503 += 1 };
  s1 -> s1 [0, 65535] { R627 += 1, R605 += 1, R503 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R627 += 1, R605 += 1 };
  s1 -> s6 [0, 65535] { R627 += 1 };
  s2 -> s1 [0, 8] { R627 += 1, R605 += 1, R503 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R627 += 1, R604 += 1, R605 += 1 };
  s2 -> s3 [0, 65535] { R627 += 1, R605 += 1, R502 += 1, R503 += 1 };
  s2 -> s4 [9, 13] { R627 += 1, R605 += 1, R503 += 1 };
  s2 -> s1 [14, 31] { R627 += 1, R605 += 1, R503 += 1 };
  s2 -> s4 [32, 32] { R627 += 1, R605 += 1, R503 += 1 };
  s2 -> s1 [33, 65535] { R627 += 1, R605 += 1, R503 += 1 };
  s3 -> s1 [0, 8] { R627 += 1, R605 += 1, R503 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R627 += 1, R605 += 1, R502 += 1, R503 += 1 };
  s3 -> s6 [0, 65535] { R627 += 1 };
  s3 -> s4 [9, 13] { R627 += 1, R605 += 1, R503 += 1 };
  s3 -> s1 [14, 31] { R627 += 1, R605 += 1, R503 += 1 };
  s3 -> s4 [32, 32] { R627 += 1, R605 += 1, R503 += 1 };
  s3 -> s1 [33, 65535] { R627 += 1, R605 += 1, R503 += 1 };
  s4 -> s1 [0, 65535] { R627 += 1, R605 += 1, R503 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R627 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R627 += 1, R605 += 1 };
  s7 -> s6 [0, 65535] { R627 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R629 += 1, R606 += 1, R607 += 1 };
  s0 -> s2 [0, 65535] { R629 += 1, R607 += 1, R505 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R628 += 1, R629 += 1 };
  s0 -> s3 [0, 65535] { R629 += 1, R607 += 1, R504 += 1, R505 += 1 };
  s1 -> s1 [0, 65535] { R629 += 1, R606 += 1, R607 += 1 };
  s1 -> s2 [0, 65535] { R629 += 1, R607 += 1, R505 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R629 += 1, R607 += 1, R504 += 1, R505 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R629 += 1, R607 += 1 };
  s2 -> s4 [0, 65535] { R629 += 1 };
  s2 -> s2 [0, 65535] { R629 += 1, R607 += 1, R505 += 1, R6 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R629 += 1 };
  s3 -> s2 [0, 65535] { R629 += 1, R607 += 1, R505 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R629 += 1, R607 += 1, R504 += 1, R505 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R629 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R629 += 1, R607 += 1 };
  s6 -> s4 [0, 65535] { R629 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R631 += 1 };
  s0 -> s0 [0, 65535] { R630 += 1, R631 += 1 };
  s0 -> s2 [67, 67] { R631 += 1 };
  s0 -> s1 [68, 65535] { R631 += 1 };
  s1 -> s1 [0, 64] { R631 += 1 };
  s1 -> s2 [67, 67] { R631 += 1 };
  s1 -> s1 [68, 65535] { R631 += 1 };
  s2 -> s2 [0, 64] { R631 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [67, 65535] { R631 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R632 += 1, R633 += 1 };
  s0 -> s1 [0, 65535] { R633 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R633 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R635 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R634 += 1, R635 += 1 };
  s0 -> s2 [0, 65535] { R635 += 1, R14 += 1, R15 += 1 };
  s0 -> s3 [67, 67] { R635 += 1 };
  s0 -> s1 [68, 65535] { R635 += 1, R15 += 1 };
  s1 -> s1 [0, 66] { R635 += 1, R15 += 1 };
  s1 -> s3 [67, 67] { R635 += 1 };
  s1 -> s1 [68, 65535] { R635 += 1, R15 += 1 };
  s2 -> s1 [0, 66] { R635 += 1, R15 += 1 };
  s2 -> s2 [0, 65535] { R635 += 1, R14 += 1, R15 += 1 };
  s2 -> s3 [67, 67] { R635 += 1 };
  s2 -> s1 [68, 65535] { R635 += 1, R15 += 1 };
  s3 -> s3 [0, 65535] { R635 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R637 += 1, R515 += 1 };
  s0 -> s0 [0, 65535] { R636 += 1, R637 += 1 };
  s0 -> s2 [0, 65535] { R637 += 1, R514 += 1, R515 += 1 };
  s0 -> s3 [9, 13] { R637 += 1, R515 += 1 };
  s0 -> s1 [14, 31] { R637 += 1, R515 += 1 };
  s0 -> s3 [32, 32] { R637 += 1, R515 += 1 };
  s0 -> s1 [33, 65535] { R637 += 1, R515 += 1 };
  s1 -> s5 [0, 65535] { R637 += 1 };
  s1 -> s1 [0, 65535] { R637 += 1, R515 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R637 += 1, R515 += 1 };
  s2 -> s2 [0, 65535] { R637 += 1, R514 += 1, R515 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R637 += 1, R515 += 1 };
  s2 -> s1 [14, 31] { R637 += 1, R515 += 1 };
  s2 -> s3 [32, 32] { R637 += 1, R515 += 1 };
  s2 -> s1 [33, 65535] { R637 += 1, R515 += 1 };
  s3 -> s1 [0, 65535] { R637 += 1, R515 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R637 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R638 += 1, R639 += 1 };
  s0 -> s1 [0, 65535] { R639 += 1, R517 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R639 += 1, R516 += 1, R517 += 1 };
  s1 -> s4 [0, 65535] { R639 += 1 };
  s1 -> s1 [0, 65535] { R639 += 1, R517 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R639 += 1, R517 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R639 += 1, R516 += 1, R517 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R639 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R641 += 1, R519 += 1 };
  s0 -> s0 [0, 65535] { R640 += 1, R641 += 1 };
  s0 -> s2 [0, 65535] { R641 += 1, R518 += 1, R519 += 1 };
  s0 -> s3 [9, 13] { R641 += 1, R519 += 1 };
  s0 -> s1 [14, 31] { R641 += 1, R519 += 1 };
  s0 -> s3 [32, 32] { R641 += 1, R519 += 1 };
  s0 -> s1 [33, 65535] { R641 += 1, R519 += 1 };
  s1 -> s5 [0, 65535] { R641 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R641 += 1, R519 += 1 };
  s2 -> s1 [0, 8] { R641 += 1, R519 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R641 += 1, R518 += 1, R519 += 1 };
  s2 -> s3 [9, 13] { R641 += 1, R519 += 1 };
  s2 -> s1 [14, 31] { R641 += 1, R519 += 1 };
  s2 -> s3 [32, 32] { R641 += 1, R519 += 1 };
  s2 -> s1 [33, 65535] { R641 += 1, R519 += 1 };
  s3 -> s1 [0, 65535] { R641 += 1, R519 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R641 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R643 += 1, R521 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R643 += 1, R520 += 1, R521 += 1 };
  s0 -> s0 [0, 65535] { R642 += 1, R643 += 1 };
  s1 -> s1 [0, 65535] { R643 += 1, R521 += 1, R10 += 1 };
  s1 -> s4 [0, 65535] { R643 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R643 += 1, R521 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R643 += 1, R520 += 1, R521 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R643 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 66] { R645 += 1, R591 += 1 };
  s0 -> s0 [0, 65535] { R644 += 1, R645 += 1 };
  s0 -> s2 [0, 65535] { R645 += 1, R590 += 1, R591 += 1 };
  s0 -> s1 [68, 65535] { R645 += 1, R591 += 1 };
  s1 -> s1 [0, 66] { R645 += 1, R591 += 1 };
  s1 -> s1 [0, 65535] { R645 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [68, 65535] { R645 += 1, R591 += 1 };
  s2 -> s1 [0, 66] { R645 += 1, R591 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R645 += 1, R590 += 1, R591 += 1 };
  s2 -> s1 [68, 65535] { R645 += 1, R591 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R647 += 1, R592 += 1, R593 += 1 };
  s0 -> s0 [0, 65535] { R646 += 1, R647 += 1 };
  s0 -> s2 [0, 65535] { R647 += 1, R593 += 1, R496 += 1 };
  s1 -> s1 [0, 65535] { R647 += 1, R592 += 1, R593 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R647 += 1, R593 += 1, R496 += 1 };
  s2 -> s3 [0, 65535] { R647 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R647 += 1, R593 += 1, R496 += 1 };
  s3 -> s3 [0, 65535] { R647 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 67] { R649 += 1, R595 += 1 };
  s0 -> s2 [0, 65535] { R649 += 1, R594 += 1, R595 += 1 };
  s0 -> s0 [0, 65535] { R648 += 1, R649 += 1 };
  s0 -> s1 [69, 65535] { R649 += 1, R595 += 1 };
  s1 -> s1 [0, 67] { R649 += 1, R595 += 1 };
  s1 -> s1 [0, 65535] { R649 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [69, 65535] { R649 += 1, R595 += 1 };
  s2 -> s1 [0, 67] { R649 += 1, R595 += 1 };
  s2 -> s2 [0, 65535] { R649 += 1, R594 += 1, R595 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [69, 65535] { R649 += 1, R595 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R651 += 1, R608 += 1, R609 += 1 };
  s0 -> s0 [0, 65535] { R650 += 1, R651 += 1 };
  s0 -> s2 [0, 65535] { R651 += 1, R609 += 1, R497 += 1 };
  s1 -> s1 [0, 65535] { R651 += 1, R608 += 1, R609 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R651 += 1, R609 += 1, R497 += 1 };
  s2 -> s3 [0, 65535] { R651 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R651 += 1, R609 += 1, R497 += 1 };
  s3 -> s3 [0, 65535] { R651 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 66] { R653 += 1, R611 += 1 };
  s0 -> s0 [0, 65535] { R652 += 1, R653 += 1 };
  s0 -> s2 [0, 65535] { R653 += 1, R610 += 1, R611 += 1 };
  s0 -> s3 [67, 67] { R653 += 1, R611 += 1 };
  s0 -> s4 [67, 67] { R653 += 1, R611 += 1 };
  s0 -> s5 [69, 69] { R653 += 1, R611 += 1 };
  s0 -> s1 [70, 65535] { R653 += 1, R611 += 1 };
  s1 -> s1 [0, 66] { R653 += 1, R611 += 1 };
  s1 -> s3 [67, 67] { R653 += 1, R611 += 1 };
  s1 -> s4 [67, 67] { R653 += 1, R611 += 1 };
  s1 -> s5 [69, 69] { R653 += 1, R611 += 1 };
  s1 -> s1 [70, 65535] { R653 += 1, R611 += 1 };
  s2 -> s1 [0, 66] { R653 += 1, R611 += 1 };
  s2 -> s2 [0, 65535] { R653 += 1, R610 += 1, R611 += 1 };
  s2 -> s3 [67, 67] { R653 += 1, R611 += 1 };
  s2 -> s4 [67, 67] { R653 += 1, R611 += 1 };
  s2 -> s5 [69, 69] { R653 += 1, R611 += 1 };
  s2 -> s1 [70, 65535] { R653 += 1, R611 += 1 };
  s4 -> s4 [0, 67] { R653 += 1, R611 += 1 };
  s4 -> s7 [69, 69] { R653 += 1, R611 += 1 };
  s4 -> s4 [70, 65535] { R653 += 1, R611 += 1 };
  s5 -> s5 [0, 66] { R653 += 1, R611 += 1 };
  s5 -> s5 [0, 65535] { R653 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [67, 67] { R653 += 1, R611 += 1 };
  s5 -> s8 [67, 67] { R653 += 1, R611 += 1 };
  s5 -> s5 [69, 65535] { R653 += 1, R611 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 67] { R653 += 1, R611 += 1 };
  s7 -> s7 [0, 65535] { R653 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [69, 65535] { R653 += 1, R611 += 1 };
  s8 -> s8 [0, 65535] { R653 += 1 };
  s8 -> s6 [0, 65535];
  accepting s5, s6, s7, s8;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R507 += 1 };
  s0 -> s0 [0, 65535] { R506 += 1, R507 += 1 };
  s0 -> s2 [9, 13] { R507 += 1 };
  s0 -> s1 [14, 31] { R507 += 1 };
  s0 -> s2 [32, 32] { R507 += 1 };
  s0 -> s1 [33, 65535] { R507 += 1 };
  s1 -> s1 [0, 65535] { R507 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R507 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R509 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R508 += 1, R509 += 1 };
  s1 -> s1 [0, 65535] { R509 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R511 += 1 };
  s0 -> s0 [0, 65535] { R510 += 1, R511 += 1 };
  s0 -> s2 [9, 13] { R511 += 1 };
  s0 -> s1 [14, 31] { R511 += 1 };
  s0 -> s2 [32, 32] { R511 += 1 };
  s0 -> s1 [33, 65535] { R511 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R511 += 1 };
  s2 -> s1 [0, 65535] { R511 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R512 += 1, R513 += 1 };
  s0 -> s1 [0, 65535] { R513 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R513 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R517 && R3 = R607 && R4 = R653 && R14 = 0 && R15 - R611 = -1 && R336 = 0 && R337 - R652 = -1 && R514 - R517 = -1 && R515 = R517 && R516 - R517 = -1 && R518 = 0 && R519 = 1 && R520 = 0 && R521 = 1 && R522 = 0 && R523 = 1 && R524 = 0 && R525 = 1 && R596 = 1 && R597 = R607 && R598 = 1 && R599 = R607 && R600 = 1 && R601 = R607 && R602 = 1 && R603 = R607 && R604 = 1 && R605 = R607 && R606 = 1 && R610 = 0 && R612 = 0 && R613 - R652 = -1 && R614 = 0 && R615 - R652 = -1 && R616 = 0 && R617 - R652 = -1 && R618 = 0 && R619 - R652 = -1 && R620 = 0 && R621 - R652 = -1 && R622 = 0 && R623 - R652 = -1 && R624 = 0 && R625 - R652 = -1 && R626 = 0 && R627 - R652 = -1 && R628 = 0 && R629 - R652 = -1 && R630 = R652 && R631 = R653 && R632 = R652 && R633 = R653 && R634 = R652 && R635 = R653 && R636 = R652 && R637 = R653 && R638 = R652 && R639 = R653 && R640 = R652 && R641 = R653 && R642 = R652 && R643 = R653 && R644 = R652 && R645 = R653 && R646 = R652 && R647 = R653 && R648 = R652 && R649 = R653 && R650 = R652 && R651 = R653 && R0 != 0 && R1 != 0 && R12 < 1 && R611 - R517 < 1 && 0 < R517 && 0 < R607 && -1 < R611 && R652 - R653 < 1 && 0 < R652 && (R5 != 0 || ((R0 != R499 || R498 - R499 = -1 || R499 < 0) && (R0 = R499 || R0 < 1))) && (R5 != 0 || ((R0 != R501 || R500 - R501 = -1 || R501 < 0) && (R0 = R501 || R0 < 1))) && (R7 != 0 || ((R1 != R507 || R506 - R507 = -1 || R507 < 0) && (R1 = R507 || R1 < 1))) && (R7 != 0 || ((R1 != R509 || R508 - R509 = -1 || R509 < 0) && (R1 = R509 || R1 < 1))) && (R502 != 0 || ((R6 != 0 || ((R0 != R503 || R503 = 1 || R503 < 0) && (R0 = R503 || R503 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R503 || R503 = 1 || R503 < 0) && (R503 != 1 || -1 < R0) && (R0 = R503 || R503 = 1))))) && (R504 != 0 || ((R6 != 0 || ((R0 != R505 || R505 = 1 || R505 < 0) && (R0 = R505 || R505 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R505 || R505 = 1 || R505 < 0) && (R505 != 1 || -1 < R0) && (R0 = R505 || R505 = 1))))) && (R510 != 0 || ((R8 != 0 || ((R1 != R511 || R511 = 1 || R511 < 0) && (R1 = R511 || R511 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R511 || R511 = 1 || R511 < 0) && (R511 != 1 || -1 < R1) && (R1 = R511 || R511 = 1))))) && (R512 != 0 || ((R8 != 0 || ((R1 != R513 || R513 = 1 || R513 < 0) && (R1 = R513 || R513 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R513 || R513 = 1 || R513 < 0) && (R513 != 1 || -1 < R1) && (R1 = R513 || R513 = 1))))) && (R517 != R591 || R590 = R611 || ((R496 != 0 || R591 - R611 < 1 || R591 < 1) && (R496 = 0 || R591 < R611 || R591 < 1))) && (R517 != R593 || R592 = R611 || ((R496 != 0 || R593 - R611 < 1 || R593 < 1) && (R496 = 0 || R593 < R611 || R593 < 1))) && (R517 != R595 || R594 = R611 || ((R496 != 0 || R595 - R611 < 1 || R595 < 1) && (R496 = 0 || R595 < R611 || R595 < 1))) && (R608 != 0 || R609 = R611 || (R497 = 0 && R611 = 0)) && (R5 = 0 || (R0 = R499 && R498 - R499 = -1)) && (R5 = 0 || (R0 = R501 && R500 - R501 = -1)) && (R7 = 0 || (R1 = R507 && R506 - R507 = -1)) && (R7 = 0 || (R1 = R509 && R508 - R509 = -1)) && (R502 = 0 || (R6 = 0 && R0 < 0)) && (R504 = 0 || (R6 = 0 && R0 < 0)) && (R510 = 0 || (R8 = 0 && R1 < 0)) && (R512 = 0 || (R8 = 0 && R1 < 0)) && (R517 = R591 || (R496 = 0 && R517 = R611)) && (R517 = R593 || (R496 = 0 && R517 = R611)) && (R517 = R595 || (R496 = 0 && R517 = R611)) && (R608 = 0 || (R497 = 0 && R611 = 0));
// End of Parikh automata intersection problem
