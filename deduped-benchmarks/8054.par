// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R16, R17, R2, R3, R4, R404, R405, R5, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R7, R712, R713, R714, R715, R716, R717, R718, R719, R720, R721, R722, R723, R724, R725, R726, R727, R728, R729, R730, R731, R732, R733, R734, R735, R736, R737, R738, R739, R740, R741, R742, R743, R744, R745, R746, R747, R748, R749, R750, R751, R752, R753, R754, R755, R756, R757, R758, R759, R760, R761, R762, R763, R764, R765, R766, R767, R768, R769, R770, R771, R772, R773, R774, R775, R776, R777, R778, R779, R780, R781, R782, R783, R784, R785, R786, R787, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R597 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R628 += 1, R629 += 1 };
  s0 -> s1 [13, 13] { R629 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R631 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R630 += 1, R631 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R631 += 1, R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R633 += 1 };
  s0 -> s0 [0, 65535] { R632 += 1, R633 += 1 };
  s0 -> s2 [9, 13] { R633 += 1 };
  s0 -> s1 [14, 31] { R633 += 1 };
  s0 -> s2 [32, 32] { R633 += 1 };
  s0 -> s1 [33, 65535] { R633 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R633 += 1 };
  s2 -> s1 [0, 65535] { R633 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R635 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R634 += 1, R635 += 1 };
  s1 -> s1 [0, 65535] { R635 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R731 += 1 };
  s0 -> s0 [0, 65535] { R730 += 1, R731 += 1 };
  s0 -> s1 [91, 65535] { R731 += 1 };
  s1 -> s1 [0, 64] { R731 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R731 += 1 };
  accepting s0, s1;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R733 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R732 += 1, R733 += 1 };
  s1 -> s1 [0, 65535] { R733 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R735 += 1, R609 += 1 };
  s0 -> s2 [0, 65535] { R735 += 1, R608 += 1, R609 += 1 };
  s0 -> s0 [0, 65535] { R734 += 1, R735 += 1 };
  s0 -> s3 [9, 13] { R735 += 1, R609 += 1 };
  s0 -> s1 [14, 31] { R735 += 1, R609 += 1 };
  s0 -> s3 [32, 32] { R735 += 1, R609 += 1 };
  s0 -> s1 [33, 65535] { R735 += 1, R609 += 1 };
  s1 -> s5 [0, 65535] { R735 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R735 += 1, R609 += 1 };
  s2 -> s1 [0, 8] { R735 += 1, R609 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R735 += 1, R608 += 1, R609 += 1 };
  s2 -> s3 [9, 13] { R735 += 1, R609 += 1 };
  s2 -> s1 [14, 31] { R735 += 1, R609 += 1 };
  s2 -> s3 [32, 32] { R735 += 1, R609 += 1 };
  s2 -> s1 [33, 65535] { R735 += 1, R609 += 1 };
  s3 -> s1 [0, 65535] { R735 += 1, R609 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R735 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R737 += 1, R611 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R737 += 1, R610 += 1, R611 += 1 };
  s0 -> s0 [0, 65535] { R736 += 1, R737 += 1 };
  s1 -> s1 [0, 65535] { R737 += 1, R611 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R737 += 1 };
  s2 -> s1 [0, 65535] { R737 += 1, R611 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R737 += 1, R610 += 1, R611 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R737 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R739 += 1, R613 += 1 };
  s0 -> s2 [0, 65535] { R739 += 1, R612 += 1, R613 += 1 };
  s0 -> s0 [0, 65535] { R738 += 1, R739 += 1 };
  s0 -> s3 [9, 13] { R739 += 1, R613 += 1 };
  s0 -> s1 [14, 31] { R739 += 1, R613 += 1 };
  s0 -> s3 [32, 32] { R739 += 1, R613 += 1 };
  s0 -> s1 [33, 65535] { R739 += 1, R613 += 1 };
  s1 -> s5 [0, 65535] { R739 += 1 };
  s1 -> s1 [0, 65535] { R739 += 1, R613 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R739 += 1, R613 += 1 };
  s2 -> s2 [0, 65535] { R739 += 1, R612 += 1, R613 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R739 += 1, R613 += 1 };
  s2 -> s1 [14, 31] { R739 += 1, R613 += 1 };
  s2 -> s3 [32, 32] { R739 += 1, R613 += 1 };
  s2 -> s1 [33, 65535] { R739 += 1, R613 += 1 };
  s3 -> s1 [0, 65535] { R739 += 1, R613 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R739 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R740 += 1, R741 += 1 };
  s0 -> s1 [0, 65535] { R741 += 1, R615 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R741 += 1, R614 += 1, R615 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R741 += 1, R615 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R741 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R741 += 1, R615 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R741 += 1, R614 += 1, R615 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R741 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R405 += 1 };
  s0 -> s0 [0, 65535] { R404 += 1, R405 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R405 += 1 };
  s1 -> s1 [0, 60] { R405 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R405 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R747 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R746 += 1, R747 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R747 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R748 += 1, R749 += 1 };
  s0 -> s1 [0, 65535] { R749 += 1, R624 += 1, R625 += 1 };
  s0 -> s2 [12, 12] { R749 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R749 += 1, R624 += 1, R625 += 1 };
  s1 -> s2 [12, 12] { R749 += 1, R625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R749 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R751 += 1, R627 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R750 += 1, R751 += 1 };
  s0 -> s2 [0, 65535] { R751 += 1, R626 += 1, R627 += 1 };
  s1 -> s4 [0, 65535] { R751 += 1 };
  s1 -> s1 [0, 65535] { R751 += 1, R627 += 1, R12 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R751 += 1, R627 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R751 += 1, R626 += 1, R627 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R751 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R753 += 1, R719 += 1 };
  s0 -> s0 [0, 65535] { R752 += 1, R753 += 1 };
  s0 -> s2 [0, 65535] { R753 += 1, R718 += 1, R719 += 1 };
  s0 -> s1 [91, 65535] { R753 += 1, R719 += 1 };
  s1 -> s1 [0, 64] { R753 += 1, R719 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R753 += 1 };
  s1 -> s1 [91, 65535] { R753 += 1, R719 += 1 };
  s2 -> s1 [0, 64] { R753 += 1, R719 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R753 += 1, R718 += 1, R719 += 1 };
  s2 -> s1 [91, 65535] { R753 += 1, R719 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s0 [0, 65535] { R754 += 1, R755 += 1 };
  s0 -> s1 [0, 65535] { R755 += 1, R720 += 1, R721 += 1 };
  s0 -> s2 [0, 65535] { R755 += 1, R721 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R755 += 1, R720 += 1, R721 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R755 += 1, R721 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R755 += 1 };
  s2 -> s2 [0, 65535] { R755 += 1, R721 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R755 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R757 += 1, R723 += 1, R601 += 1 };
  s0 -> s0 [0, 65535] { R756 += 1, R757 += 1 };
  s0 -> s2 [0, 65535] { R757 += 1, R723 += 1, R600 += 1, R601 += 1 };
  s0 -> s3 [0, 65535] { R757 += 1, R722 += 1, R723 += 1 };
  s0 -> s4 [9, 13] { R757 += 1, R723 += 1, R601 += 1 };
  s0 -> s1 [14, 31] { R757 += 1, R723 += 1, R601 += 1 };
  s0 -> s4 [32, 32] { R757 += 1, R723 += 1, R601 += 1 };
  s0 -> s1 [33, 65535] { R757 += 1, R723 += 1, R601 += 1 };
  s1 -> s1 [0, 65535] { R757 += 1, R723 += 1, R601 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R757 += 1, R723 += 1 };
  s1 -> s6 [0, 65535] { R757 += 1 };
  s2 -> s1 [0, 8] { R757 += 1, R723 += 1, R601 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R757 += 1, R723 += 1, R600 += 1, R601 += 1 };
  s2 -> s6 [0, 65535] { R757 += 1 };
  s2 -> s4 [9, 13] { R757 += 1, R723 += 1, R601 += 1 };
  s2 -> s1 [14, 31] { R757 += 1, R723 += 1, R601 += 1 };
  s2 -> s4 [32, 32] { R757 += 1, R723 += 1, R601 += 1 };
  s2 -> s1 [33, 65535] { R757 += 1, R723 += 1, R601 += 1 };
  s3 -> s1 [0, 8] { R757 += 1, R723 += 1, R601 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R757 += 1, R723 += 1, R600 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R757 += 1, R722 += 1, R723 += 1 };
  s3 -> s4 [9, 13] { R757 += 1, R723 += 1, R601 += 1 };
  s3 -> s1 [14, 31] { R757 += 1, R723 += 1, R601 += 1 };
  s3 -> s4 [32, 32] { R757 += 1, R723 += 1, R601 += 1 };
  s3 -> s1 [33, 65535] { R757 += 1, R723 += 1, R601 += 1 };
  s4 -> s1 [0, 65535] { R757 += 1, R723 += 1, R601 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R757 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R757 += 1, R723 += 1 };
  s7 -> s6 [0, 65535] { R757 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R759 += 1, R725 += 1, R603 += 1, R6 += 1 };
  s0 -> s2 [0, 65535] { R759 += 1, R724 += 1, R725 += 1 };
  s0 -> s3 [0, 65535] { R759 += 1, R725 += 1, R602 += 1, R603 += 1 };
  s0 -> s0 [0, 65535] { R758 += 1, R759 += 1 };
  s1 -> s1 [0, 65535] { R759 += 1, R725 += 1, R603 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R759 += 1, R725 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R759 += 1 };
  s2 -> s1 [0, 65535] { R759 += 1, R725 += 1, R603 += 1, R6 += 1 };
  s2 -> s2 [0, 65535] { R759 += 1, R724 += 1, R725 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R759 += 1, R725 += 1, R602 += 1, R603 += 1 };
  s3 -> s1 [0, 65535] { R759 += 1, R725 += 1, R603 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R759 += 1 };
  s3 -> s3 [0, 65535] { R759 += 1, R725 += 1, R602 += 1, R603 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R759 += 1 };
  s6 -> s6 [0, 65535] { R759 += 1, R725 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R759 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R761 += 1, R727 += 1, R605 += 1 };
  s0 -> s0 [0, 65535] { R760 += 1, R761 += 1 };
  s0 -> s2 [0, 65535] { R761 += 1, R726 += 1, R727 += 1 };
  s0 -> s3 [0, 65535] { R761 += 1, R727 += 1, R604 += 1, R605 += 1 };
  s0 -> s4 [9, 13] { R761 += 1, R727 += 1, R605 += 1 };
  s0 -> s1 [14, 31] { R761 += 1, R727 += 1, R605 += 1 };
  s0 -> s4 [32, 32] { R761 += 1, R727 += 1, R605 += 1 };
  s0 -> s1 [33, 65535] { R761 += 1, R727 += 1, R605 += 1 };
  s1 -> s7 [0, 65535] { R761 += 1, R727 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R761 += 1 };
  s1 -> s1 [0, 65535] { R761 += 1, R727 += 1, R605 += 1 };
  s2 -> s1 [0, 8] { R761 += 1, R727 += 1, R605 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R761 += 1, R726 += 1, R727 += 1 };
  s2 -> s3 [0, 65535] { R761 += 1, R727 += 1, R604 += 1, R605 += 1 };
  s2 -> s4 [9, 13] { R761 += 1, R727 += 1, R605 += 1 };
  s2 -> s1 [14, 31] { R761 += 1, R727 += 1, R605 += 1 };
  s2 -> s4 [32, 32] { R761 += 1, R727 += 1, R605 += 1 };
  s2 -> s1 [33, 65535] { R761 += 1, R727 += 1, R605 += 1 };
  s3 -> s1 [0, 8] { R761 += 1, R727 += 1, R605 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R761 += 1 };
  s3 -> s3 [0, 65535] { R761 += 1, R727 += 1, R604 += 1, R605 += 1 };
  s3 -> s4 [9, 13] { R761 += 1, R727 += 1, R605 += 1 };
  s3 -> s1 [14, 31] { R761 += 1, R727 += 1, R605 += 1 };
  s3 -> s4 [32, 32] { R761 += 1, R727 += 1, R605 += 1 };
  s3 -> s1 [33, 65535] { R761 += 1, R727 += 1, R605 += 1 };
  s4 -> s1 [0, 65535] { R761 += 1, R727 += 1, R605 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R761 += 1 };
  s7 -> s7 [0, 65535] { R761 += 1, R727 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R761 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R763 += 1, R728 += 1, R729 += 1 };
  s0 -> s2 [0, 65535] { R763 += 1, R729 += 1, R606 += 1, R607 += 1 };
  s0 -> s3 [0, 65535] { R763 += 1, R729 += 1, R607 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R762 += 1, R763 += 1 };
  s1 -> s1 [0, 65535] { R763 += 1, R728 += 1, R729 += 1 };
  s1 -> s2 [0, 65535] { R763 += 1, R729 += 1, R606 += 1, R607 += 1 };
  s1 -> s3 [0, 65535] { R763 += 1, R729 += 1, R607 += 1, R7 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R763 += 1, R729 += 1, R606 += 1, R607 += 1 };
  s2 -> s4 [0, 65535] { R763 += 1 };
  s2 -> s3 [0, 65535] { R763 += 1, R729 += 1, R607 += 1, R7 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R763 += 1 };
  s3 -> s3 [0, 65535] { R763 += 1, R729 += 1, R607 += 1, R7 += 1 };
  s3 -> s5 [0, 65535] { R763 += 1, R729 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R763 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s4 [0, 65535] { R763 += 1 };
  s5 -> s5 [0, 65535] { R763 += 1, R729 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R765 += 1 };
  s0 -> s0 [0, 65535] { R764 += 1, R765 += 1 };
  s0 -> s2 [66, 66] { R765 += 1 };
  s0 -> s1 [67, 65535] { R765 += 1 };
  s1 -> s1 [0, 64] { R765 += 1 };
  s1 -> s2 [66, 66] { R765 += 1 };
  s1 -> s1 [67, 65535] { R765 += 1 };
  s2 -> s2 [0, 64] { R765 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R765 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R767 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R766 += 1, R767 += 1 };
  s1 -> s1 [0, 65535] { R767 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65] { R769 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R768 += 1, R769 += 1 };
  s0 -> s2 [0, 65535] { R769 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [66, 66] { R769 += 1 };
  s0 -> s1 [67, 65535] { R769 += 1, R17 += 1 };
  s1 -> s1 [0, 65] { R769 += 1, R17 += 1 };
  s1 -> s3 [66, 66] { R769 += 1 };
  s1 -> s1 [67, 65535] { R769 += 1, R17 += 1 };
  s2 -> s1 [0, 65] { R769 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R769 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [66, 66] { R769 += 1 };
  s2 -> s1 [67, 65535] { R769 += 1, R17 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R769 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R771 += 1, R617 += 1 };
  s0 -> s0 [0, 65535] { R770 += 1, R771 += 1 };
  s0 -> s2 [0, 65535] { R771 += 1, R616 += 1, R617 += 1 };
  s0 -> s3 [9, 13] { R771 += 1, R617 += 1 };
  s0 -> s1 [14, 31] { R771 += 1, R617 += 1 };
  s0 -> s3 [32, 32] { R771 += 1, R617 += 1 };
  s0 -> s1 [33, 65535] { R771 += 1, R617 += 1 };
  s1 -> s1 [0, 65535] { R771 += 1, R617 += 1 };
  s1 -> s5 [0, 65535] { R771 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R771 += 1, R617 += 1 };
  s2 -> s2 [0, 65535] { R771 += 1, R616 += 1, R617 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R771 += 1, R617 += 1 };
  s2 -> s1 [14, 31] { R771 += 1, R617 += 1 };
  s2 -> s3 [32, 32] { R771 += 1, R617 += 1 };
  s2 -> s1 [33, 65535] { R771 += 1, R617 += 1 };
  s3 -> s1 [0, 65535] { R771 += 1, R617 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R771 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R773 += 1, R618 += 1, R619 += 1 };
  s0 -> s0 [0, 65535] { R772 += 1, R773 += 1 };
  s0 -> s2 [0, 65535] { R773 += 1, R619 += 1, R10 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R773 += 1, R618 += 1, R619 += 1 };
  s1 -> s2 [0, 65535] { R773 += 1, R619 += 1, R10 += 1 };
  s2 -> s3 [0, 65535] { R773 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R773 += 1, R619 += 1, R10 += 1 };
  s3 -> s3 [0, 65535] { R773 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R775 += 1, R621 += 1 };
  s0 -> s2 [0, 65535] { R775 += 1, R620 += 1, R621 += 1 };
  s0 -> s0 [0, 65535] { R774 += 1, R775 += 1 };
  s0 -> s3 [9, 13] { R775 += 1, R621 += 1 };
  s0 -> s1 [14, 31] { R775 += 1, R621 += 1 };
  s0 -> s3 [32, 32] { R775 += 1, R621 += 1 };
  s0 -> s1 [33, 65535] { R775 += 1, R621 += 1 };
  s1 -> s5 [0, 65535] { R775 += 1 };
  s1 -> s1 [0, 65535] { R775 += 1, R621 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R775 += 1, R621 += 1 };
  s2 -> s2 [0, 65535] { R775 += 1, R620 += 1, R621 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R775 += 1, R621 += 1 };
  s2 -> s1 [14, 31] { R775 += 1, R621 += 1 };
  s2 -> s3 [32, 32] { R775 += 1, R621 += 1 };
  s2 -> s1 [33, 65535] { R775 += 1, R621 += 1 };
  s3 -> s1 [0, 65535] { R775 += 1, R621 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R775 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R777 += 1, R622 += 1, R623 += 1 };
  s0 -> s0 [0, 65535] { R776 += 1, R777 += 1 };
  s0 -> s2 [0, 65535] { R777 += 1, R623 += 1, R11 += 1 };
  s1 -> s1 [0, 65535] { R777 += 1, R622 += 1, R623 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R777 += 1, R623 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R777 += 1 };
  s2 -> s2 [0, 65535] { R777 += 1, R623 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R777 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65] { R779 += 1, R713 += 1 };
  s0 -> s0 [0, 65535] { R778 += 1, R779 += 1 };
  s0 -> s2 [0, 65535] { R779 += 1, R712 += 1, R713 += 1 };
  s0 -> s1 [67, 65535] { R779 += 1, R713 += 1 };
  s1 -> s1 [0, 65] { R779 += 1, R713 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R779 += 1 };
  s1 -> s1 [67, 65535] { R779 += 1, R713 += 1 };
  s2 -> s1 [0, 65] { R779 += 1, R713 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R779 += 1, R712 += 1, R713 += 1 };
  s2 -> s1 [67, 65535] { R779 += 1, R713 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R781 += 1, R714 += 1, R715 += 1 };
  s0 -> s2 [0, 65535] { R781 += 1, R715 += 1, R598 += 1 };
  s0 -> s0 [0, 65535] { R780 += 1, R781 += 1 };
  s1 -> s1 [0, 65535] { R781 += 1, R714 += 1, R715 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R781 += 1, R715 += 1, R598 += 1 };
  s2 -> s3 [0, 65535] { R781 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R781 += 1, R715 += 1, R598 += 1 };
  s3 -> s3 [0, 65535] { R781 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 66] { R783 += 1, R717 += 1 };
  s0 -> s2 [0, 65535] { R783 += 1, R716 += 1, R717 += 1 };
  s0 -> s0 [0, 65535] { R782 += 1, R783 += 1 };
  s0 -> s1 [83, 65535] { R783 += 1, R717 += 1 };
  s1 -> s1 [0, 66] { R783 += 1, R717 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R783 += 1 };
  s1 -> s1 [83, 65535] { R783 += 1, R717 += 1 };
  s2 -> s1 [0, 66] { R783 += 1, R717 += 1 };
  s2 -> s2 [0, 65535] { R783 += 1, R716 += 1, R717 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [83, 65535] { R783 += 1, R717 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R784 += 1, R785 += 1 };
  s0 -> s1 [0, 65535] { R785 += 1, R742 += 1, R743 += 1 };
  s0 -> s2 [0, 65535] { R785 += 1, R743 += 1, R599 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R785 += 1, R742 += 1, R743 += 1 };
  s1 -> s2 [0, 65535] { R785 += 1, R743 += 1, R599 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R785 += 1 };
  s2 -> s2 [0, 65535] { R785 += 1, R743 += 1, R599 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R785 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65] { R787 += 1, R745 += 1 };
  s0 -> s2 [0, 65535] { R787 += 1, R744 += 1, R745 += 1 };
  s0 -> s0 [0, 65535] { R786 += 1, R787 += 1 };
  s0 -> s3 [66, 66] { R787 += 1, R745 += 1 };
  s0 -> s4 [66, 66] { R787 += 1, R745 += 1 };
  s0 -> s5 [83, 83] { R787 += 1, R745 += 1 };
  s0 -> s1 [84, 65535] { R787 += 1, R745 += 1 };
  s1 -> s1 [0, 65] { R787 += 1, R745 += 1 };
  s1 -> s3 [66, 66] { R787 += 1, R745 += 1 };
  s1 -> s4 [66, 66] { R787 += 1, R745 += 1 };
  s1 -> s5 [83, 83] { R787 += 1, R745 += 1 };
  s1 -> s1 [84, 65535] { R787 += 1, R745 += 1 };
  s2 -> s1 [0, 65] { R787 += 1, R745 += 1 };
  s2 -> s2 [0, 65535] { R787 += 1, R744 += 1, R745 += 1 };
  s2 -> s3 [66, 66] { R787 += 1, R745 += 1 };
  s2 -> s4 [66, 66] { R787 += 1, R745 += 1 };
  s2 -> s5 [83, 83] { R787 += 1, R745 += 1 };
  s2 -> s1 [84, 65535] { R787 += 1, R745 += 1 };
  s3 -> s3 [0, 66] { R787 += 1, R745 += 1 };
  s3 -> s8 [83, 83] { R787 += 1, R745 += 1 };
  s3 -> s3 [84, 65535] { R787 += 1, R745 += 1 };
  s5 -> s5 [0, 65] { R787 += 1, R745 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R787 += 1 };
  s5 -> s7 [66, 66] { R787 += 1, R745 += 1 };
  s5 -> s8 [66, 66] { R787 += 1, R745 += 1 };
  s5 -> s5 [83, 65535] { R787 += 1, R745 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R787 += 1 };
  s8 -> s8 [0, 66] { R787 += 1, R745 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R787 += 1 };
  s8 -> s8 [83, 65535] { R787 += 1, R745 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R2 = R619 && R3 = R729 && R4 = R787 && R5 - R741 = 1 && R16 = 0 && R17 - R745 = -1 && R404 = 0 && R405 - R786 = -1 && R616 - R619 = -1 && R617 = R619 && R618 - R619 = -1 && R620 = 0 && R621 = 1 && R622 = 0 && R623 = 1 && R624 = 0 && R625 = 1 && R626 = 0 && R627 = 1 && R628 = R741 && R629 - R741 = 1 && R630 = R741 && R631 - R741 = 1 && R632 = 0 && R633 = 1 && R634 = 0 && R635 = 1 && R718 = 1 && R719 = R729 && R720 = 1 && R721 = R729 && R722 = 1 && R723 = R729 && R724 = 1 && R725 = R729 && R726 = 1 && R727 = R729 && R728 = 1 && R730 = 0 && R731 = R741 && R732 = 0 && R733 = R741 && R734 = 0 && R735 = R741 && R736 = 0 && R737 = R741 && R738 = 0 && R739 = R741 && R740 = 0 && R744 = 0 && R746 = 0 && R747 - R786 = -1 && R748 = 0 && R749 - R786 = -1 && R750 = 0 && R751 - R786 = -1 && R752 = 0 && R753 - R786 = -1 && R754 = 0 && R755 - R786 = -1 && R756 = 0 && R757 - R786 = -1 && R758 = 0 && R759 - R786 = -1 && R760 = 0 && R761 - R786 = -1 && R762 = 0 && R763 - R786 = -1 && R764 = R786 && R765 = R787 && R766 = R786 && R767 = R787 && R768 = R786 && R769 = R787 && R770 = R786 && R771 = R787 && R772 = R786 && R773 = R787 && R774 = R786 && R775 = R787 && R776 = R786 && R777 = R787 && R778 = R786 && R779 = R787 && R780 = R786 && R781 = R787 && R782 = R786 && R783 = R787 && R784 = R786 && R785 = R787 && R0 != 0 && R1 != 0 && R597 < 1 && R745 - R619 < 1 && 0 < R619 && 0 < R729 && -1 < R741 && -1 < R745 && R786 - R787 < 1 && 0 < R786 && (R6 != 0 || ((R0 != R601 || R600 - R601 = -1 || R601 < 0) && (R0 = R601 || R0 < 1))) && (R6 != 0 || ((R0 != R603 || R602 - R603 = -1 || R603 < 0) && (R0 = R603 || R0 < 1))) && (R8 != 0 || ((R1 != R609 || R608 - R609 = -1 || R609 < 0) && (R1 = R609 || R1 < 1))) && (R8 != 0 || ((R1 != R611 || R610 - R611 = -1 || R611 < 0) && (R1 = R611 || R1 < 1))) && (R604 != 0 || ((R7 != 0 || ((R0 != R605 || R605 = 1 || R605 < 0) && (R0 = R605 || R605 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R605 || R605 = 1 || R605 < 0) && (R605 != 1 || -1 < R0) && (R0 = R605 || R605 = 1))))) && (R606 != 0 || ((R7 != 0 || ((R0 != R607 || R607 = 1 || R607 < 0) && (R0 = R607 || R607 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R607 || R607 = 1 || R607 < 0) && (R607 != 1 || -1 < R0) && (R0 = R607 || R607 = 1))))) && (R612 != 0 || ((R9 != 0 || ((R1 != R613 || R613 = 1 || R613 < 0) && (R1 = R613 || R613 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R613 || R613 = 1 || R613 < 0) && (R613 != 1 || -1 < R1) && (R1 = R613 || R613 = 1))))) && (R614 != 0 || ((R9 != 0 || ((R1 != R615 || R615 = 1 || R615 < 0) && (R1 = R615 || R615 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R615 || R615 = 1 || R615 < 0) && (R615 != 1 || -1 < R1) && (R1 = R615 || R615 = 1))))) && (R619 != R713 || R712 = R745 || ((R598 != 0 || R713 - R745 < 1 || R713 < 1) && (R598 = 0 || R713 < R745 || R713 < 1))) && (R619 != R715 || R714 = R745 || ((R598 != 0 || R715 - R745 < 1 || R715 < 1) && (R598 = 0 || R715 < R745 || R715 < 1))) && (R619 != R717 || R716 = R745 || ((R598 != 0 || R717 - R745 < 1 || R717 < 1) && (R598 = 0 || R717 < R745 || R717 < 1))) && (R742 != 0 || R743 = R745 || (R599 = 0 && R745 = 0)) && (R6 = 0 || (R0 = R601 && R600 - R601 = -1)) && (R6 = 0 || (R0 = R603 && R602 - R603 = -1)) && (R8 = 0 || (R1 = R609 && R608 - R609 = -1)) && (R8 = 0 || (R1 = R611 && R610 - R611 = -1)) && (R604 = 0 || (R7 = 0 && R0 < 0)) && (R606 = 0 || (R7 = 0 && R0 < 0)) && (R612 = 0 || (R9 = 0 && R1 < 0)) && (R614 = 0 || (R9 = 0 && R1 < 0)) && (R619 = R713 || (R598 = 0 && R619 = R745)) && (R619 = R715 || (R598 = 0 && R619 = R745)) && (R619 = R717 || (R598 = 0 && R619 = R745)) && (R742 = 0 || (R599 = 0 && R745 = 0));
// End of Parikh automata intersection problem
