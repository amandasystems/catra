// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R15, R16, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R2, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R16 += 1 };
  s1 -> s1 [0, 60] { R16 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R16 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R192 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R191 += 1, R192 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R192 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s0 -> s1 [0, 65535] { R292 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R292 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R294 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s0 -> s2 [10, 10] { R294 += 1, R188 += 1 };
  s1 -> s1 [0, 65535] { R294 += 1, R187 += 1, R188 += 1 };
  s1 -> s2 [10, 10] { R294 += 1, R188 += 1 };
  s2 -> s2 [0, 65535] { R294 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 65535] { R296 += 1, R190 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R189 += 1, R190 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s1 -> s1 [0, 65535] { R296 += 1, R190 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R296 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R296 += 1, R190 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R189 += 1, R190 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R296 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 64] { R298 += 1, R268 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R267 += 1, R268 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s3 [67, 67] { R298 += 1, R268 += 1 };
  s0 -> s1 [68, 65535] { R298 += 1, R268 += 1 };
  s1 -> s1 [0, 64] { R298 += 1, R268 += 1 };
  s1 -> s3 [67, 67] { R298 += 1, R268 += 1 };
  s1 -> s1 [68, 65535] { R298 += 1, R268 += 1 };
  s2 -> s1 [0, 64] { R298 += 1, R268 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R267 += 1, R268 += 1 };
  s2 -> s3 [67, 67] { R298 += 1, R268 += 1 };
  s2 -> s1 [68, 65535] { R298 += 1, R268 += 1 };
  s3 -> s3 [0, 64] { R298 += 1, R268 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R298 += 1 };
  s3 -> s3 [67, 65535] { R298 += 1, R268 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R300 += 1, R270 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R269 += 1, R270 += 1 };
  s1 -> s4 [0, 65535] { R300 += 1 };
  s1 -> s1 [0, 65535] { R300 += 1, R270 += 1, R2 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R300 += 1, R270 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R269 += 1, R270 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R300 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 66] { R302 += 1, R272 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R271 += 1, R272 += 1 };
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s3 [0, 65535] { R302 += 1, R272 += 1, R11 += 1 };
  s0 -> s4 [67, 67] { R302 += 1, R272 += 1 };
  s0 -> s1 [68, 65535] { R302 += 1, R272 += 1 };
  s1 -> s1 [0, 66] { R302 += 1, R272 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R302 += 1 };
  s1 -> s4 [67, 67] { R302 += 1, R272 += 1 };
  s1 -> s1 [68, 65535] { R302 += 1, R272 += 1 };
  s2 -> s1 [0, 66] { R302 += 1, R272 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R302 += 1, R271 += 1, R272 += 1 };
  s2 -> s3 [0, 65535] { R302 += 1, R272 += 1, R11 += 1 };
  s2 -> s4 [67, 67] { R302 += 1, R272 += 1 };
  s2 -> s1 [68, 65535] { R302 += 1, R272 += 1 };
  s3 -> s1 [0, 66] { R302 += 1, R272 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R302 += 1 };
  s3 -> s3 [0, 65535] { R302 += 1, R272 += 1, R11 += 1 };
  s3 -> s4 [67, 67] { R302 += 1, R272 += 1 };
  s3 -> s1 [68, 65535] { R302 += 1, R272 += 1 };
  s4 -> s4 [0, 65535] { R302 += 1, R272 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R302 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R304 += 1, R274 += 1, R180 += 1 };
  s0 -> s2 [0, 65535] { R304 += 1, R274 += 1, R179 += 1, R180 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s3 [0, 65535] { R304 += 1, R273 += 1, R274 += 1 };
  s0 -> s4 [9, 13] { R304 += 1, R274 += 1, R180 += 1 };
  s0 -> s1 [14, 31] { R304 += 1, R274 += 1, R180 += 1 };
  s0 -> s4 [32, 32] { R304 += 1, R274 += 1, R180 += 1 };
  s0 -> s1 [33, 65535] { R304 += 1, R274 += 1, R180 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R304 += 1, R274 += 1, R180 += 1 };
  s1 -> s6 [0, 65535] { R304 += 1 };
  s1 -> s7 [0, 65535] { R304 += 1, R274 += 1 };
  s2 -> s1 [0, 8] { R304 += 1, R274 += 1, R180 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R304 += 1, R274 += 1, R179 += 1, R180 += 1 };
  s2 -> s6 [0, 65535] { R304 += 1 };
  s2 -> s4 [9, 13] { R304 += 1, R274 += 1, R180 += 1 };
  s2 -> s1 [14, 31] { R304 += 1, R274 += 1, R180 += 1 };
  s2 -> s4 [32, 32] { R304 += 1, R274 += 1, R180 += 1 };
  s2 -> s1 [33, 65535] { R304 += 1, R274 += 1, R180 += 1 };
  s3 -> s1 [0, 8] { R304 += 1, R274 += 1, R180 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R304 += 1, R274 += 1, R179 += 1, R180 += 1 };
  s3 -> s3 [0, 65535] { R304 += 1, R273 += 1, R274 += 1 };
  s3 -> s4 [9, 13] { R304 += 1, R274 += 1, R180 += 1 };
  s3 -> s1 [14, 31] { R304 += 1, R274 += 1, R180 += 1 };
  s3 -> s4 [32, 32] { R304 += 1, R274 += 1, R180 += 1 };
  s3 -> s1 [33, 65535] { R304 += 1, R274 += 1, R180 += 1 };
  s4 -> s1 [0, 65535] { R304 += 1, R274 += 1, R180 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R304 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R304 += 1 };
  s7 -> s7 [0, 65535] { R304 += 1, R274 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R306 += 1, R275 += 1, R276 += 1 };
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s2 [0, 65535] { R306 += 1, R276 += 1, R182 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R306 += 1, R276 += 1, R181 += 1, R182 += 1 };
  s1 -> s1 [0, 65535] { R306 += 1, R275 += 1, R276 += 1 };
  s1 -> s2 [0, 65535] { R306 += 1, R276 += 1, R182 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R306 += 1, R276 += 1, R181 += 1, R182 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R306 += 1, R276 += 1, R182 += 1, R7 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R306 += 1, R276 += 1 };
  s2 -> s5 [0, 65535] { R306 += 1 };
  s3 -> s2 [0, 65535] { R306 += 1, R276 += 1, R182 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R306 += 1, R276 += 1, R181 += 1, R182 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R306 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R306 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R306 += 1, R276 += 1 };
  s6 -> s5 [0, 65535] { R306 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 8] { R308 += 1, R278 += 1, R184 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R278 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R308 += 1, R277 += 1, R278 += 1 };
  s0 -> s4 [9, 13] { R308 += 1, R278 += 1, R184 += 1 };
  s0 -> s1 [14, 31] { R308 += 1, R278 += 1, R184 += 1 };
  s0 -> s4 [32, 32] { R308 += 1, R278 += 1, R184 += 1 };
  s0 -> s1 [33, 65535] { R308 += 1, R278 += 1, R184 += 1 };
  s1 -> s6 [0, 65535] { R308 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R308 += 1, R278 += 1, R184 += 1 };
  s1 -> s7 [0, 65535] { R308 += 1, R278 += 1 };
  s2 -> s1 [0, 8] { R308 += 1, R278 += 1, R184 += 1 };
  s2 -> s6 [0, 65535] { R308 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R308 += 1, R278 += 1, R183 += 1, R184 += 1 };
  s2 -> s4 [9, 13] { R308 += 1, R278 += 1, R184 += 1 };
  s2 -> s1 [14, 31] { R308 += 1, R278 += 1, R184 += 1 };
  s2 -> s4 [32, 32] { R308 += 1, R278 += 1, R184 += 1 };
  s2 -> s1 [33, 65535] { R308 += 1, R278 += 1, R184 += 1 };
  s3 -> s1 [0, 8] { R308 += 1, R278 += 1, R184 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R308 += 1, R278 += 1, R183 += 1, R184 += 1 };
  s3 -> s3 [0, 65535] { R308 += 1, R277 += 1, R278 += 1 };
  s3 -> s4 [9, 13] { R308 += 1, R278 += 1, R184 += 1 };
  s3 -> s1 [14, 31] { R308 += 1, R278 += 1, R184 += 1 };
  s3 -> s4 [32, 32] { R308 += 1, R278 += 1, R184 += 1 };
  s3 -> s1 [33, 65535] { R308 += 1, R278 += 1, R184 += 1 };
  s4 -> s1 [0, 65535] { R308 += 1, R278 += 1, R184 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R308 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R308 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R308 += 1, R278 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R310 += 1, R280 += 1, R186 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R279 += 1, R280 += 1 };
  s0 -> s3 [0, 65535] { R310 += 1, R280 += 1, R185 += 1, R186 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s1 -> s1 [0, 65535] { R310 += 1, R280 += 1, R186 += 1, R8 += 1 };
  s1 -> s6 [0, 65535] { R310 += 1, R280 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R310 += 1 };
  s2 -> s1 [0, 65535] { R310 += 1, R280 += 1, R186 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R310 += 1, R279 += 1, R280 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R310 += 1, R280 += 1, R185 += 1, R186 += 1 };
  s3 -> s1 [0, 65535] { R310 += 1, R280 += 1, R186 += 1, R8 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R310 += 1, R280 += 1, R185 += 1, R186 += 1 };
  s3 -> s5 [0, 65535] { R310 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R310 += 1 };
  s6 -> s6 [0, 65535] { R310 += 1, R280 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R310 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R312 += 1, R282 += 1, R258 += 1 };
  s0 -> s2 [0, 65535] { R312 += 1, R282 += 1, R257 += 1, R258 += 1 };
  s0 -> s3 [0, 65535] { R312 += 1, R281 += 1, R282 += 1 };
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s1 [68, 65535] { R312 += 1, R282 += 1, R258 += 1 };
  s1 -> s1 [0, 66] { R312 += 1, R282 += 1, R258 += 1 };
  s1 -> s5 [0, 65535] { R312 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R312 += 1, R282 += 1 };
  s1 -> s1 [68, 65535] { R312 += 1, R282 += 1, R258 += 1 };
  s2 -> s1 [0, 66] { R312 += 1, R282 += 1, R258 += 1 };
  s2 -> s5 [0, 65535] { R312 += 1 };
  s2 -> s2 [0, 65535] { R312 += 1, R282 += 1, R257 += 1, R258 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [68, 65535] { R312 += 1, R282 += 1, R258 += 1 };
  s3 -> s1 [0, 66] { R312 += 1, R282 += 1, R258 += 1 };
  s3 -> s2 [0, 65535] { R312 += 1, R282 += 1, R257 += 1, R258 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R312 += 1, R281 += 1, R282 += 1 };
  s3 -> s1 [68, 65535] { R312 += 1, R282 += 1, R258 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R312 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s1 [0, 65535] { R314 += 1, R283 += 1, R284 += 1 };
  s0 -> s2 [0, 65535] { R314 += 1, R284 += 1, R259 += 1, R260 += 1 };
  s0 -> s3 [0, 65535] { R314 += 1, R284 += 1, R260 += 1, R169 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R314 += 1, R283 += 1, R284 += 1 };
  s1 -> s2 [0, 65535] { R314 += 1, R284 += 1, R259 += 1, R260 += 1 };
  s1 -> s3 [0, 65535] { R314 += 1, R284 += 1, R260 += 1, R169 += 1 };
  s2 -> s5 [0, 65535] { R314 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R314 += 1, R284 += 1, R259 += 1, R260 += 1 };
  s2 -> s3 [0, 65535] { R314 += 1, R284 += 1, R260 += 1, R169 += 1 };
  s3 -> s4 [0, 65535] { R314 += 1, R284 += 1 };
  s3 -> s5 [0, 65535] { R314 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R314 += 1, R284 += 1, R260 += 1, R169 += 1 };
  s4 -> s4 [0, 65535] { R314 += 1, R284 += 1 };
  s4 -> s5 [0, 65535] { R314 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R314 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 67] { R316 += 1, R286 += 1, R262 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R286 += 1, R261 += 1, R262 += 1 };
  s0 -> s3 [0, 65535] { R316 += 1, R285 += 1, R286 += 1 };
  s0 -> s1 [83, 65535] { R316 += 1, R286 += 1, R262 += 1 };
  s1 -> s1 [0, 67] { R316 += 1, R286 += 1, R262 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R316 += 1, R286 += 1 };
  s1 -> s5 [0, 65535] { R316 += 1 };
  s1 -> s1 [83, 65535] { R316 += 1, R286 += 1, R262 += 1 };
  s2 -> s1 [0, 67] { R316 += 1, R286 += 1, R262 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R316 += 1 };
  s2 -> s2 [0, 65535] { R316 += 1, R286 += 1, R261 += 1, R262 += 1 };
  s2 -> s1 [83, 65535] { R316 += 1, R286 += 1, R262 += 1 };
  s3 -> s1 [0, 67] { R316 += 1, R286 += 1, R262 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R316 += 1, R286 += 1, R261 += 1, R262 += 1 };
  s3 -> s3 [0, 65535] { R316 += 1, R285 += 1, R286 += 1 };
  s3 -> s1 [83, 65535] { R316 += 1, R286 += 1, R262 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R316 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 65535] { R318 += 1, R287 += 1, R288 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s2 [0, 65535] { R318 += 1, R288 += 1, R264 += 1, R170 += 1 };
  s0 -> s3 [0, 65535] { R318 += 1, R288 += 1, R263 += 1, R264 += 1 };
  s1 -> s1 [0, 65535] { R318 += 1, R287 += 1, R288 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R318 += 1, R288 += 1, R264 += 1, R170 += 1 };
  s1 -> s3 [0, 65535] { R318 += 1, R288 += 1, R263 += 1, R264 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R318 += 1 };
  s2 -> s2 [0, 65535] { R318 += 1, R288 += 1, R264 += 1, R170 += 1 };
  s2 -> s6 [0, 65535] { R318 += 1, R288 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R318 += 1 };
  s3 -> s2 [0, 65535] { R318 += 1, R288 += 1, R264 += 1, R170 += 1 };
  s3 -> s3 [0, 65535] { R318 += 1, R288 += 1, R263 += 1, R264 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R318 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R318 += 1 };
  s6 -> s6 [0, 65535] { R318 += 1, R288 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 66] { R320 += 1, R290 += 1, R266 += 1 };
  s0 -> s2 [0, 65535] { R320 += 1, R290 += 1, R265 += 1, R266 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s0 -> s3 [0, 65535] { R320 += 1, R289 += 1, R290 += 1 };
  s0 -> s4 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s0 -> s5 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s0 -> s6 [83, 83] { R320 += 1, R290 += 1, R266 += 1 };
  s0 -> s1 [84, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  s1 -> s1 [0, 66] { R320 += 1, R290 += 1, R266 += 1 };
  s1 -> s4 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s1 -> s5 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s1 -> s6 [83, 83] { R320 += 1, R290 += 1, R266 += 1 };
  s1 -> s1 [84, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  s2 -> s1 [0, 66] { R320 += 1, R290 += 1, R266 += 1 };
  s2 -> s2 [0, 65535] { R320 += 1, R290 += 1, R265 += 1, R266 += 1 };
  s2 -> s4 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s2 -> s5 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s2 -> s6 [83, 83] { R320 += 1, R290 += 1, R266 += 1 };
  s2 -> s1 [84, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  s3 -> s1 [0, 66] { R320 += 1, R290 += 1, R266 += 1 };
  s3 -> s2 [0, 65535] { R320 += 1, R290 += 1, R265 += 1, R266 += 1 };
  s3 -> s3 [0, 65535] { R320 += 1, R289 += 1, R290 += 1 };
  s3 -> s4 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s3 -> s5 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s3 -> s6 [83, 83] { R320 += 1, R290 += 1, R266 += 1 };
  s3 -> s1 [84, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  s4 -> s4 [0, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s4 -> s10 [83, 83] { R320 += 1, R290 += 1, R266 += 1 };
  s4 -> s4 [84, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  s6 -> s6 [0, 66] { R320 += 1, R290 += 1, R266 += 1 };
  s6 -> s7 [0, 65535] { R320 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R320 += 1, R290 += 1 };
  s6 -> s9 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s6 -> s10 [67, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s6 -> s6 [83, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  s7 -> s7 [0, 65535] { R320 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R320 += 1, R290 += 1 };
  s9 -> s7 [0, 65535] { R320 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 67] { R320 += 1, R290 += 1, R266 += 1 };
  s10 -> s7 [0, 65535] { R320 += 1 };
  s10 -> s10 [0, 65535] { R320 += 1, R290 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [83, 65535] { R320 += 1, R290 += 1, R266 += 1 };
  accepting s8, s9, s6, s7, s10;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R172 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s0 -> s2 [9, 13] { R172 += 1 };
  s0 -> s1 [14, 31] { R172 += 1 };
  s0 -> s2 [32, 32] { R172 += 1 };
  s0 -> s1 [33, 65535] { R172 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R172 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R174 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R173 += 1, R174 += 1 };
  s1 -> s1 [0, 65535] { R174 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R176 += 1 };
  s0 -> s0 [0, 65535] { R175 += 1, R176 += 1 };
  s0 -> s2 [9, 13] { R176 += 1 };
  s0 -> s1 [14, 31] { R176 += 1 };
  s0 -> s2 [32, 32] { R176 += 1 };
  s0 -> s1 [33, 65535] { R176 += 1 };
  s1 -> s1 [0, 65535] { R176 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R176 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R177 += 1, R178 += 1 };
  s0 -> s1 [0, 65535] { R178 += 1, R6 += 1 };
  s1 -> s1 [0, 65535] { R178 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R262 && R3 = R290 && R4 = R192 && R15 = 0 && R16 = R320 && R179 - R262 = -1 && R180 = R262 && R181 - R262 = -1 && R182 = R262 && R183 = 0 && R184 = 1 && R185 = 0 && R186 = 1 && R187 = 0 && R188 = 1 && R189 = 0 && R190 = 1 && R191 - R320 = 1 && R257 = 0 && R258 = R262 && R259 = 0 && R260 = R262 && R261 = 0 && R265 = 0 && R266 = 0 && R267 = 1 && R268 = R290 && R269 = 1 && R270 = R290 && R271 = 1 && R272 = R290 && R273 = 1 && R274 = R290 && R275 = 1 && R276 = R290 && R277 = 1 && R278 = R290 && R279 = 1 && R280 = R290 && R281 = 1 && R282 = R290 && R283 = 1 && R284 = R290 && R285 = 1 && R286 = R290 && R287 = 1 && R288 = R290 && R289 = 1 && R291 = 0 && R292 = R320 && R293 = 0 && R294 = R320 && R295 = 0 && R296 = R320 && R297 = 0 && R298 = R320 && R299 = 0 && R300 = R320 && R301 = 0 && R302 = R320 && R303 = 0 && R304 = R320 && R305 = 0 && R306 = R320 && R307 = 0 && R308 = R320 && R309 = 0 && R310 = R320 && R311 = 0 && R312 = R320 && R313 = 0 && R314 = R320 && R315 = 0 && R316 = R320 && R317 = 0 && R318 = R320 && R319 = 0 && R0 != 0 && R1 != 0 && R10 < 1 && R11 < 1 && R320 < R192 && 0 < R262 && 0 < R290 && -1 < R320 && (R5 != 0 || ((R1 != R172 || R171 - R172 = -1 || R172 < 0) && (R1 = R172 || R1 < 1))) && (R5 != 0 || ((R1 != R174 || R173 - R174 = -1 || R174 < 0) && (R1 = R174 || R1 < 1))) && (R175 != 0 || ((R6 != 0 || ((R1 != R176 || R176 = 1 || R176 < 0) && (R1 = R176 || R176 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R176 || R176 = 1 || R176 < 0) && (R176 != 1 || -1 < R1) && (R1 = R176 || R176 = 1))))) && (R177 != 0 || ((R6 != 0 || ((R1 != R178 || R178 = 1 || R178 < 0) && (R1 = R178 || R178 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R178 || R178 = 1 || R178 < 0) && (R178 != 1 || -1 < R1) && (R1 = R178 || R178 = 1))))) && (R5 = 0 || (R1 = R172 && R171 - R172 = -1)) && (R5 = 0 || (R1 = R174 && R173 - R174 = -1)) && (R170 = 0 || (R263 = 0 && R264 = 0)) && (R175 = 0 || (R6 = 0 && R1 < 0)) && (R177 = 0 || (R6 = 0 && R1 < 0));
// End of Parikh automata intersection problem
