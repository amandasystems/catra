// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R16, R17, R2, R226, R227, R3, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R403, R404, R405, R406, R407, R408, R409, R410, R411, R412, R413, R414, R415, R416, R417, R418, R419, R420, R421, R422, R423, R424, R425, R426, R427, R428, R429, R430, R431, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R330 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s0 -> s1 [13, 13] { R361 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R363 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s1 -> s1 [0, 65535] { R363 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R365 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s2 [9, 13] { R365 += 1 };
  s0 -> s1 [14, 31] { R365 += 1 };
  s0 -> s2 [32, 32] { R365 += 1 };
  s0 -> s1 [33, 65535] { R365 += 1 };
  s1 -> s1 [0, 65535] { R365 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R365 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R367 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R367 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R403 += 1 };
  s0 -> s0 [0, 65535] { R402 += 1, R403 += 1 };
  s0 -> s1 [91, 65535] { R403 += 1 };
  s1 -> s1 [0, 64] { R403 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R403 += 1 };
  accepting s0, s1;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R404 += 1, R405 += 1 };
  s0 -> s1 [0, 65535] { R405 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R405 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R407 += 1, R341 += 1 };
  s0 -> s0 [0, 65535] { R406 += 1, R407 += 1 };
  s0 -> s2 [0, 65535] { R407 += 1, R340 += 1, R341 += 1 };
  s0 -> s3 [9, 13] { R407 += 1, R341 += 1 };
  s0 -> s1 [14, 31] { R407 += 1, R341 += 1 };
  s0 -> s3 [32, 32] { R407 += 1, R341 += 1 };
  s0 -> s1 [33, 65535] { R407 += 1, R341 += 1 };
  s1 -> s5 [0, 65535] { R407 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R407 += 1, R341 += 1 };
  s2 -> s1 [0, 8] { R407 += 1, R341 += 1 };
  s2 -> s2 [0, 65535] { R407 += 1, R340 += 1, R341 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R407 += 1, R341 += 1 };
  s2 -> s1 [14, 31] { R407 += 1, R341 += 1 };
  s2 -> s3 [32, 32] { R407 += 1, R341 += 1 };
  s2 -> s1 [33, 65535] { R407 += 1, R341 += 1 };
  s3 -> s1 [0, 65535] { R407 += 1, R341 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R407 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R408 += 1, R409 += 1 };
  s0 -> s1 [0, 65535] { R409 += 1, R343 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R409 += 1, R342 += 1, R343 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R409 += 1, R343 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R409 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R409 += 1, R343 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R409 += 1, R342 += 1, R343 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R409 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R411 += 1, R345 += 1 };
  s0 -> s0 [0, 65535] { R410 += 1, R411 += 1 };
  s0 -> s2 [0, 65535] { R411 += 1, R344 += 1, R345 += 1 };
  s0 -> s3 [9, 13] { R411 += 1, R345 += 1 };
  s0 -> s1 [14, 31] { R411 += 1, R345 += 1 };
  s0 -> s3 [32, 32] { R411 += 1, R345 += 1 };
  s0 -> s1 [33, 65535] { R411 += 1, R345 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R411 += 1, R345 += 1 };
  s1 -> s5 [0, 65535] { R411 += 1 };
  s2 -> s1 [0, 8] { R411 += 1, R345 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R411 += 1, R344 += 1, R345 += 1 };
  s2 -> s3 [9, 13] { R411 += 1, R345 += 1 };
  s2 -> s1 [14, 31] { R411 += 1, R345 += 1 };
  s2 -> s3 [32, 32] { R411 += 1, R345 += 1 };
  s2 -> s1 [33, 65535] { R411 += 1, R345 += 1 };
  s3 -> s1 [0, 65535] { R411 += 1, R345 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R411 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R413 += 1, R346 += 1, R347 += 1 };
  s0 -> s2 [0, 65535] { R413 += 1, R347 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R412 += 1, R413 += 1 };
  s1 -> s1 [0, 65535] { R413 += 1, R346 += 1, R347 += 1 };
  s1 -> s2 [0, 65535] { R413 += 1, R347 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R413 += 1 };
  s2 -> s2 [0, 65535] { R413 += 1, R347 += 1, R9 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R413 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R227 += 1 };
  s0 -> s0 [0, 65535] { R226 += 1, R227 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R227 += 1 };
  s1 -> s1 [0, 60] { R227 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R227 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R385 += 1 };
  s0 -> s0 [0, 65535] { R384 += 1, R385 += 1 };
  s0 -> s2 [66, 66] { R385 += 1 };
  s0 -> s1 [67, 65535] { R385 += 1 };
  s1 -> s1 [0, 64] { R385 += 1 };
  s1 -> s2 [66, 66] { R385 += 1 };
  s1 -> s1 [67, 65535] { R385 += 1 };
  s2 -> s2 [0, 64] { R385 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R385 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R386 += 1, R387 += 1 };
  s0 -> s1 [0, 65535] { R387 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R387 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65] { R389 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R388 += 1, R389 += 1 };
  s0 -> s2 [0, 65535] { R389 += 1, R16 += 1, R17 += 1 };
  s0 -> s3 [66, 66] { R389 += 1 };
  s0 -> s1 [67, 65535] { R389 += 1, R17 += 1 };
  s1 -> s1 [0, 65] { R389 += 1, R17 += 1 };
  s1 -> s3 [66, 66] { R389 += 1 };
  s1 -> s1 [67, 65535] { R389 += 1, R17 += 1 };
  s2 -> s1 [0, 65] { R389 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R389 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [66, 66] { R389 += 1 };
  s2 -> s1 [67, 65535] { R389 += 1, R17 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R389 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R391 += 1, R349 += 1 };
  s0 -> s2 [0, 65535] { R391 += 1, R348 += 1, R349 += 1 };
  s0 -> s0 [0, 65535] { R390 += 1, R391 += 1 };
  s0 -> s3 [9, 13] { R391 += 1, R349 += 1 };
  s0 -> s1 [14, 31] { R391 += 1, R349 += 1 };
  s0 -> s3 [32, 32] { R391 += 1, R349 += 1 };
  s0 -> s1 [33, 65535] { R391 += 1, R349 += 1 };
  s1 -> s5 [0, 65535] { R391 += 1 };
  s1 -> s1 [0, 65535] { R391 += 1, R349 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R391 += 1, R349 += 1 };
  s2 -> s2 [0, 65535] { R391 += 1, R348 += 1, R349 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R391 += 1, R349 += 1 };
  s2 -> s1 [14, 31] { R391 += 1, R349 += 1 };
  s2 -> s3 [32, 32] { R391 += 1, R349 += 1 };
  s2 -> s1 [33, 65535] { R391 += 1, R349 += 1 };
  s3 -> s1 [0, 65535] { R391 += 1, R349 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R391 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R393 += 1, R351 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R393 += 1, R350 += 1, R351 += 1 };
  s0 -> s0 [0, 65535] { R392 += 1, R393 += 1 };
  s1 -> s1 [0, 65535] { R393 += 1, R351 += 1, R10 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R393 += 1 };
  s2 -> s1 [0, 65535] { R393 += 1, R351 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R393 += 1, R350 += 1, R351 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R393 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R395 += 1, R353 += 1 };
  s0 -> s0 [0, 65535] { R394 += 1, R395 += 1 };
  s0 -> s2 [0, 65535] { R395 += 1, R352 += 1, R353 += 1 };
  s0 -> s3 [9, 13] { R395 += 1, R353 += 1 };
  s0 -> s1 [14, 31] { R395 += 1, R353 += 1 };
  s0 -> s3 [32, 32] { R395 += 1, R353 += 1 };
  s0 -> s1 [33, 65535] { R395 += 1, R353 += 1 };
  s1 -> s5 [0, 65535] { R395 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R395 += 1, R353 += 1 };
  s2 -> s1 [0, 8] { R395 += 1, R353 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R395 += 1, R352 += 1, R353 += 1 };
  s2 -> s3 [9, 13] { R395 += 1, R353 += 1 };
  s2 -> s1 [14, 31] { R395 += 1, R353 += 1 };
  s2 -> s3 [32, 32] { R395 += 1, R353 += 1 };
  s2 -> s1 [33, 65535] { R395 += 1, R353 += 1 };
  s3 -> s1 [0, 65535] { R395 += 1, R353 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R395 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R397 += 1, R355 += 1, R11 += 1 };
  s0 -> s2 [0, 65535] { R397 += 1, R354 += 1, R355 += 1 };
  s0 -> s0 [0, 65535] { R396 += 1, R397 += 1 };
  s1 -> s1 [0, 65535] { R397 += 1, R355 += 1, R11 += 1 };
  s1 -> s4 [0, 65535] { R397 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R397 += 1, R355 += 1, R11 += 1 };
  s2 -> s2 [0, 65535] { R397 += 1, R354 += 1, R355 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R397 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65] { R399 += 1, R369 += 1 };
  s0 -> s2 [0, 65535] { R399 += 1, R368 += 1, R369 += 1 };
  s0 -> s0 [0, 65535] { R398 += 1, R399 += 1 };
  s0 -> s3 [66, 66] { R399 += 1, R369 += 1 };
  s0 -> s1 [67, 65535] { R399 += 1, R369 += 1 };
  s1 -> s1 [0, 65] { R399 += 1, R369 += 1 };
  s1 -> s3 [66, 66] { R399 += 1, R369 += 1 };
  s1 -> s1 [67, 65535] { R399 += 1, R369 += 1 };
  s2 -> s1 [0, 65] { R399 += 1, R369 += 1 };
  s2 -> s2 [0, 65535] { R399 += 1, R368 += 1, R369 += 1 };
  s2 -> s3 [66, 66] { R399 += 1, R369 += 1 };
  s2 -> s1 [67, 65535] { R399 += 1, R369 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R399 += 1 };
  s3 -> s3 [0, 65535] { R399 += 1, R369 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R399 += 1 };
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R401 += 1, R370 += 1, R371 += 1 };
  s0 -> s2 [0, 65535] { R401 += 1, R371 += 1, R331 += 1 };
  s0 -> s0 [0, 65535] { R400 += 1, R401 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R401 += 1, R370 += 1, R371 += 1 };
  s1 -> s2 [0, 65535] { R401 += 1, R371 += 1, R331 += 1 };
  s2 -> s3 [0, 65535] { R401 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R401 += 1, R371 += 1, R331 += 1 };
  s3 -> s3 [0, 65535] { R401 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R415 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R414 += 1, R415 += 1 };
  s1 -> s1 [0, 65535] { R415 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R417 += 1, R356 += 1, R357 += 1 };
  s0 -> s0 [0, 65535] { R416 += 1, R417 += 1 };
  s0 -> s2 [12, 12] { R417 += 1, R357 += 1 };
  s1 -> s1 [0, 65535] { R417 += 1, R356 += 1, R357 += 1 };
  s1 -> s2 [12, 12] { R417 += 1, R357 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R417 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R419 += 1, R359 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R419 += 1, R358 += 1, R359 += 1 };
  s0 -> s0 [0, 65535] { R418 += 1, R419 += 1 };
  s1 -> s1 [0, 65535] { R419 += 1, R359 += 1, R12 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R419 += 1 };
  s2 -> s1 [0, 65535] { R419 += 1, R359 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R419 += 1, R358 += 1, R359 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R419 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 64] { R421 += 1, R373 += 1 };
  s0 -> s2 [0, 65535] { R421 += 1, R372 += 1, R373 += 1 };
  s0 -> s0 [0, 65535] { R420 += 1, R421 += 1 };
  s0 -> s1 [91, 65535] { R421 += 1, R373 += 1 };
  s1 -> s1 [0, 64] { R421 += 1, R373 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R421 += 1 };
  s1 -> s1 [91, 65535] { R421 += 1, R373 += 1 };
  s2 -> s1 [0, 64] { R421 += 1, R373 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R421 += 1, R372 += 1, R373 += 1 };
  s2 -> s1 [91, 65535] { R421 += 1, R373 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R422 += 1, R423 += 1 };
  s0 -> s1 [0, 65535] { R423 += 1, R375 += 1, R0 += 1 };
  s0 -> s2 [0, 65535] { R423 += 1, R374 += 1, R375 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R423 += 1 };
  s1 -> s1 [0, 65535] { R423 += 1, R375 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R423 += 1, R375 += 1, R0 += 1 };
  s2 -> s2 [0, 65535] { R423 += 1, R374 += 1, R375 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R423 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R425 += 1, R377 += 1, R333 += 1 };
  s0 -> s2 [0, 65535] { R425 += 1, R376 += 1, R377 += 1 };
  s0 -> s0 [0, 65535] { R424 += 1, R425 += 1 };
  s0 -> s3 [0, 65535] { R425 += 1, R377 += 1, R332 += 1, R333 += 1 };
  s0 -> s4 [9, 13] { R425 += 1, R377 += 1, R333 += 1 };
  s0 -> s1 [14, 31] { R425 += 1, R377 += 1, R333 += 1 };
  s0 -> s4 [32, 32] { R425 += 1, R377 += 1, R333 += 1 };
  s0 -> s1 [33, 65535] { R425 += 1, R377 += 1, R333 += 1 };
  s1 -> s5 [0, 65535] { R425 += 1 };
  s1 -> s1 [0, 65535] { R425 += 1, R377 += 1, R333 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R425 += 1, R377 += 1 };
  s2 -> s1 [0, 8] { R425 += 1, R377 += 1, R333 += 1 };
  s2 -> s2 [0, 65535] { R425 += 1, R376 += 1, R377 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R425 += 1, R377 += 1, R332 += 1, R333 += 1 };
  s2 -> s4 [9, 13] { R425 += 1, R377 += 1, R333 += 1 };
  s2 -> s1 [14, 31] { R425 += 1, R377 += 1, R333 += 1 };
  s2 -> s4 [32, 32] { R425 += 1, R377 += 1, R333 += 1 };
  s2 -> s1 [33, 65535] { R425 += 1, R377 += 1, R333 += 1 };
  s3 -> s1 [0, 8] { R425 += 1, R377 += 1, R333 += 1 };
  s3 -> s5 [0, 65535] { R425 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R425 += 1, R377 += 1, R332 += 1, R333 += 1 };
  s3 -> s4 [9, 13] { R425 += 1, R377 += 1, R333 += 1 };
  s3 -> s1 [14, 31] { R425 += 1, R377 += 1, R333 += 1 };
  s3 -> s4 [32, 32] { R425 += 1, R377 += 1, R333 += 1 };
  s3 -> s1 [33, 65535] { R425 += 1, R377 += 1, R333 += 1 };
  s4 -> s1 [0, 65535] { R425 += 1, R377 += 1, R333 += 1 };
  s5 -> s5 [0, 65535] { R425 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R425 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R425 += 1, R377 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R427 += 1, R379 += 1, R334 += 1, R335 += 1 };
  s0 -> s0 [0, 65535] { R426 += 1, R427 += 1 };
  s0 -> s2 [0, 65535] { R427 += 1, R379 += 1, R335 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R427 += 1, R378 += 1, R379 += 1 };
  s1 -> s5 [0, 65535] { R427 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R427 += 1, R379 += 1, R334 += 1, R335 += 1 };
  s1 -> s2 [0, 65535] { R427 += 1, R379 += 1, R335 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R427 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R427 += 1, R379 += 1 };
  s2 -> s2 [0, 65535] { R427 += 1, R379 += 1, R335 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R427 += 1, R379 += 1, R334 += 1, R335 += 1 };
  s3 -> s2 [0, 65535] { R427 += 1, R379 += 1, R335 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R427 += 1, R378 += 1, R379 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R427 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R427 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R427 += 1, R379 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R429 += 1, R381 += 1, R337 += 1 };
  s0 -> s0 [0, 65535] { R428 += 1, R429 += 1 };
  s0 -> s2 [0, 65535] { R429 += 1, R381 += 1, R336 += 1, R337 += 1 };
  s0 -> s3 [0, 65535] { R429 += 1, R380 += 1, R381 += 1 };
  s0 -> s4 [9, 13] { R429 += 1, R381 += 1, R337 += 1 };
  s0 -> s1 [14, 31] { R429 += 1, R381 += 1, R337 += 1 };
  s0 -> s4 [32, 32] { R429 += 1, R381 += 1, R337 += 1 };
  s0 -> s1 [33, 65535] { R429 += 1, R381 += 1, R337 += 1 };
  s1 -> s1 [0, 65535] { R429 += 1, R381 += 1, R337 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R429 += 1 };
  s1 -> s7 [0, 65535] { R429 += 1, R381 += 1 };
  s2 -> s1 [0, 8] { R429 += 1, R381 += 1, R337 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R429 += 1 };
  s2 -> s2 [0, 65535] { R429 += 1, R381 += 1, R336 += 1, R337 += 1 };
  s2 -> s4 [9, 13] { R429 += 1, R381 += 1, R337 += 1 };
  s2 -> s1 [14, 31] { R429 += 1, R381 += 1, R337 += 1 };
  s2 -> s4 [32, 32] { R429 += 1, R381 += 1, R337 += 1 };
  s2 -> s1 [33, 65535] { R429 += 1, R381 += 1, R337 += 1 };
  s3 -> s1 [0, 8] { R429 += 1, R381 += 1, R337 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R429 += 1, R381 += 1, R336 += 1, R337 += 1 };
  s3 -> s3 [0, 65535] { R429 += 1, R380 += 1, R381 += 1 };
  s3 -> s4 [9, 13] { R429 += 1, R381 += 1, R337 += 1 };
  s3 -> s1 [14, 31] { R429 += 1, R381 += 1, R337 += 1 };
  s3 -> s4 [32, 32] { R429 += 1, R381 += 1, R337 += 1 };
  s3 -> s1 [33, 65535] { R429 += 1, R381 += 1, R337 += 1 };
  s4 -> s1 [0, 65535] { R429 += 1, R381 += 1, R337 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R429 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R429 += 1 };
  s7 -> s7 [0, 65535] { R429 += 1, R381 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R431 += 1, R383 += 1, R339 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R431 += 1, R383 += 1, R338 += 1, R339 += 1 };
  s0 -> s0 [0, 65535] { R430 += 1, R431 += 1 };
  s0 -> s3 [0, 65535] { R431 += 1, R382 += 1, R383 += 1 };
  s1 -> s6 [0, 65535] { R431 += 1, R383 += 1 };
  s1 -> s1 [0, 65535] { R431 += 1, R383 += 1, R339 += 1, R7 += 1 };
  s1 -> s5 [0, 65535] { R431 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R431 += 1, R383 += 1, R339 += 1, R7 += 1 };
  s2 -> s2 [0, 65535] { R431 += 1, R383 += 1, R338 += 1, R339 += 1 };
  s2 -> s5 [0, 65535] { R431 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R431 += 1, R383 += 1, R339 += 1, R7 += 1 };
  s3 -> s2 [0, 65535] { R431 += 1, R383 += 1, R338 += 1, R339 += 1 };
  s3 -> s3 [0, 65535] { R431 += 1, R382 += 1, R383 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R431 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R431 += 1, R383 += 1 };
  s6 -> s5 [0, 65535] { R431 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
constraint R2 = R369 && R3 = R383 && R4 = R401 && R5 - R413 = 1 && R16 = 0 && R17 - R368 = -1 && R226 = 0 && R227 = R431 && R348 - R369 = -1 && R349 = R369 && R350 - R369 = -1 && R351 = R369 && R352 = 0 && R353 = 1 && R354 = 0 && R355 = 1 && R356 = 0 && R357 = 1 && R358 = 0 && R359 = 1 && R360 = R413 && R361 - R413 = 1 && R362 = R413 && R363 - R413 = 1 && R364 = 0 && R365 = 1 && R366 = 0 && R367 = 1 && R372 = 1 && R373 = R383 && R374 = 1 && R375 = R383 && R376 = 1 && R377 = R383 && R378 = 1 && R379 = R383 && R380 = 1 && R381 = R383 && R382 = 1 && R384 - R431 = 1 && R385 = R401 && R386 - R431 = 1 && R387 = R401 && R388 - R431 = 1 && R389 = R401 && R390 - R431 = 1 && R391 = R401 && R392 - R431 = 1 && R393 = R401 && R394 - R431 = 1 && R395 = R401 && R396 - R431 = 1 && R397 = R401 && R398 - R431 = 1 && R399 = R401 && R400 - R431 = 1 && R402 = 0 && R403 = R413 && R404 = 0 && R405 = R413 && R406 = 0 && R407 = R413 && R408 = 0 && R409 = R413 && R410 = 0 && R411 = R413 && R412 = 0 && R414 = 0 && R415 = R431 && R416 = 0 && R417 = R431 && R418 = 0 && R419 = R431 && R420 = 0 && R421 = R431 && R422 = 0 && R423 = R431 && R424 = 0 && R425 = R431 && R426 = 0 && R427 = R431 && R428 = 0 && R429 = R431 && R430 = 0 && R0 != 0 && R1 != 0 && R330 < 1 && R368 - R369 < 1 && -1 < R368 && 0 < R369 && 0 < R383 && R431 < R401 && -1 < R413 && -1 < R431 && (R6 != 0 || ((R0 != R333 || R332 - R333 = -1 || R333 < 0) && (R0 = R333 || R0 < 1))) && (R6 != 0 || ((R0 != R335 || R334 - R335 = -1 || R335 < 0) && (R0 = R335 || R0 < 1))) && (R8 != 0 || ((R1 != R341 || R340 - R341 = -1 || R341 < 0) && (R1 = R341 || R1 < 1))) && (R8 != 0 || ((R1 != R343 || R342 - R343 = -1 || R343 < 0) && (R1 = R343 || R1 < 1))) && (R336 != 0 || ((R7 != 0 || ((R0 != R337 || R337 = 1 || R337 < 0) && (R0 = R337 || R337 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R337 || R337 = 1 || R337 < 0) && (R337 != 1 || -1 < R0) && (R0 = R337 || R337 = 1))))) && (R338 != 0 || ((R7 != 0 || ((R0 != R339 || R339 = 1 || R339 < 0) && (R0 = R339 || R339 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R339 || R339 = 1 || R339 < 0) && (R339 != 1 || -1 < R0) && (R0 = R339 || R339 = 1))))) && (R344 != 0 || ((R9 != 0 || ((R1 != R345 || R345 = 1 || R345 < 0) && (R1 = R345 || R345 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R345 || R345 = 1 || R345 < 0) && (R345 != 1 || -1 < R1) && (R1 = R345 || R345 = 1))))) && (R346 != 0 || ((R9 != 0 || ((R1 != R347 || R347 = 1 || R347 < 0) && (R1 = R347 || R347 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R347 || R347 = 1 || R347 < 0) && (R347 != 1 || -1 < R1) && (R1 = R347 || R347 = 1))))) && (R368 != R370 || R369 = R371 || ((R331 != 0 || R369 - R370 < 1 || R370 < 0) && (R331 = 0 || R369 < R370 || R370 < 0))) && (R6 = 0 || (R0 = R333 && R332 - R333 = -1)) && (R6 = 0 || (R0 = R335 && R334 - R335 = -1)) && (R8 = 0 || (R1 = R341 && R340 - R341 = -1)) && (R8 = 0 || (R1 = R343 && R342 - R343 = -1)) && (R336 = 0 || (R7 = 0 && R0 < 0)) && (R338 = 0 || (R7 = 0 && R0 < 0)) && (R344 = 0 || (R9 = 0 && R1 < 0)) && (R346 = 0 || (R9 = 0 && R1 < 0)) && (R368 = R370 || (R331 = 0 && R368 = R369));
// End of Parikh automata intersection problem
