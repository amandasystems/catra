// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R6643, R6644, R6645, R6646, R67, R68, R69, R7, R73, R7373, R7374, R7375, R7376, R7377, R7378, R74, R77, R78, R79, R7919, R7920, R7921, R7922, R7923, R7924, R7925, R7926, R7927, R7928, R7929, R7930, R7931, R7932, R7933, R7934, R7935, R7936, R7937, R7938, R7939, R7940, R7941, R7942, R7943, R7944, R7945, R7946, R7947, R7948, R7949, R7950, R7951, R7952, R7953, R7954, R7955, R7956, R7957, R7958, R7959, R7960, R7961, R7962, R7963, R7964, R7965, R7966, R7967, R7968, R7969, R7970, R7971, R7972, R7973, R7974, R7975, R7976, R7977, R7978, R7979, R7980, R7981, R7982, R7983, R7984, R7985, R7986, R7987, R7988, R7989, R7990, R7991, R7992, R7993, R7994, R7995, R7996, R7997, R7998, R7999, R80, R8000, R8001, R8002, R8003, R8004, R8005, R8006, R8007, R8008, R8009, R8010, R8011, R8012, R8013, R8014, R8015, R8016, R8017, R8018, R8019, R8020, R8021, R8022, R8023, R8024, R8025, R8026, R8027, R8028, R8029, R8030, R8031, R8032, R8033, R8034, R8035, R8036, R8037, R8038, R8039, R8040, R8041, R8042, R8043, R8044, R8045, R8046, R8047, R8048, R8049, R8050, R8051, R8052, R8053, R8054, R8055, R8056, R8057, R8058, R8059, R8060, R8061, R8062, R8063, R8064, R8065, R8066, R8067, R8068, R8069, R8070, R8071, R8072, R8073, R8074, R8075, R8076, R8077, R8078, R8079, R8080, R8081, R8082, R8083, R8084, R8085, R8086, R8087, R8088, R8089, R8090, R8091, R8092, R8093, R8094, R8095, R8096, R8097, R8098, R81, R82, R83, R84;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R8024 += 1 };
  s0 -> s0 [0, 65535] { R8023 += 1, R8024 += 1 };
  s0 -> s2 [66, 66] { R8024 += 1 };
  s0 -> s1 [67, 65535] { R8024 += 1 };
  s1 -> s1 [0, 64] { R8024 += 1 };
  s1 -> s2 [66, 66] { R8024 += 1 };
  s1 -> s1 [67, 65535] { R8024 += 1 };
  s2 -> s2 [0, 64] { R8024 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R8024 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R8026 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R8025 += 1, R8026 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R8026 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R8028 += 1 };
  s0 -> s2 [0, 65535] { R8028 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R8027 += 1, R8028 += 1 };
  s0 -> s3 [66, 66] { R8028 += 1 };
  s0 -> s1 [67, 65535] { R8028 += 1 };
  s1 -> s1 [0, 65] { R8028 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R8028 += 1 };
  s1 -> s1 [67, 65535] { R8028 += 1 };
  s2 -> s1 [0, 65] { R8028 += 1 };
  s2 -> s2 [0, 65535] { R8028 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R8028 += 1 };
  s2 -> s1 [67, 65535] { R8028 += 1 };
  s3 -> s3 [0, 65535] { R8028 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R8030 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R8029 += 1, R8030 += 1 };
  s0 -> s2 [0, 65535] { R8030 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R8030 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R8030 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R8030 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R8030 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8030 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R8030 += 1 };
  s2 -> s1 [0, 8] { R8030 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8030 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R8030 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R8030 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R8030 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R8030 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R8030 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8030 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R8032 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R8032 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R8031 += 1, R8032 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R8032 += 1, R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535] { R8032 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R8032 += 1, R26 += 1, R4 += 1 };
  s2 -> s4 [0, 65535] { R8032 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8032 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R8034 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R8033 += 1, R8034 += 1 };
  s0 -> s2 [0, 65535] { R8034 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R8034 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R8034 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R8034 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R8034 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8034 += 1 };
  s1 -> s1 [0, 65535] { R8034 += 1, R28 += 1 };
  s2 -> s1 [0, 8] { R8034 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8034 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R8034 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R8034 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R8034 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R8034 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R8034 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8034 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s0 [0, 65535] { R8035 += 1, R8036 += 1 };
  s0 -> s1 [0, 65535] { R8036 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R8036 += 1, R30 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R8036 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8036 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R8036 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8036 += 1, R30 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R8036 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R8037 += 1, R8038 += 1 };
  s0 -> s1 [0, 65535] { R8038 += 1, R7944 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R8038 += 1, R7943 += 1, R7944 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R8038 += 1 };
  s1 -> s1 [0, 65535] { R8038 += 1, R7944 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R8038 += 1, R7944 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R8038 += 1, R7943 += 1, R7944 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R8038 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R8040 += 1, R7946 += 1 };
  s0 -> s2 [0, 65535] { R8040 += 1, R7945 += 1, R7946 += 1 };
  s0 -> s0 [0, 65535] { R8039 += 1, R8040 += 1 };
  s0 -> s3 [66, 66] { R8040 += 1, R7946 += 1 };
  s0 -> s4 [66, 66] { R8040 += 1, R7946 += 1 };
  s0 -> s1 [71, 65535] { R8040 += 1, R7946 += 1 };
  s1 -> s1 [0, 65] { R8040 += 1, R7946 += 1 };
  s1 -> s1 [0, 65535] { R8040 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R8040 += 1, R7946 += 1 };
  s1 -> s4 [66, 66] { R8040 += 1, R7946 += 1 };
  s1 -> s1 [71, 65535] { R8040 += 1, R7946 += 1 };
  s2 -> s1 [0, 65] { R8040 += 1, R7946 += 1 };
  s2 -> s2 [0, 65535] { R8040 += 1, R7945 += 1, R7946 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R8040 += 1, R7946 += 1 };
  s2 -> s4 [66, 66] { R8040 += 1, R7946 += 1 };
  s2 -> s1 [71, 65535] { R8040 += 1, R7946 += 1 };
  s3 -> s3 [0, 66] { R8040 += 1, R7946 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8040 += 1 };
  s3 -> s3 [71, 65535] { R8040 += 1, R7946 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8040 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R8042 += 1, R7948 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R8041 += 1, R8042 += 1 };
  s0 -> s2 [0, 65535] { R8042 += 1, R7947 += 1, R7948 += 1 };
  s0 -> s3 [66, 66] { R8042 += 1, R7948 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R8042 += 1, R7948 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R8042 += 1, R7948 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R8042 += 1, R7948 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8042 += 1 };
  s1 -> s3 [66, 66] { R8042 += 1, R7948 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R8042 += 1, R7948 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R8042 += 1, R7948 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R8042 += 1, R7948 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R8042 += 1, R7947 += 1, R7948 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R8042 += 1, R7948 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R8042 += 1, R7948 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R8042 += 1, R7948 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R8042 += 1, R7948 += 1, R49 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8042 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8042 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8042 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R8044 += 1, R7950 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R8044 += 1, R7949 += 1, R7950 += 1 };
  s0 -> s0 [0, 65535] { R8043 += 1, R8044 += 1 };
  s0 -> s3 [66, 66] { R8044 += 1, R7950 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R8044 += 1, R7950 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R8044 += 1, R7950 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R8044 += 1, R7950 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R8044 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R8044 += 1, R7950 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R8044 += 1, R7950 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R8044 += 1, R7950 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R8044 += 1, R7950 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R8044 += 1, R7949 += 1, R7950 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R8044 += 1, R7950 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R8044 += 1, R7950 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R8044 += 1, R7950 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R8044 += 1, R7950 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R8044 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8044 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8044 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R8045 += 1, R8046 += 1 };
  s0 -> s2 [0, 65535] { R8046 += 1, R7951 += 1, R7952 += 1 };
  s0 -> s3 [66, 66] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8046 += 1 };
  s1 -> s3 [66, 66] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R8046 += 1, R7951 += 1, R7952 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R8046 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R8046 += 1 };
  s4 -> s4 [0, 65535] { R8046 += 1, R7952 += 1, R53 += 1, R54 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R8046 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R8048 += 1, R7953 += 1, R7954 += 1 };
  s0 -> s0 [0, 65535] { R8047 += 1, R8048 += 1 };
  s0 -> s3 [66, 66] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R8048 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8048 += 1, R7953 += 1, R7954 += 1 };
  s2 -> s3 [66, 66] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s3 -> s6 [0, 65535] { R8048 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8048 += 1, R7954 += 1, R57 += 1, R58 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8048 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8048 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R8050 += 1, R7955 += 1, R7956 += 1 };
  s0 -> s0 [0, 65535] { R8049 += 1, R8050 += 1 };
  s0 -> s3 [66, 66] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R8050 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R8050 += 1, R7955 += 1, R7956 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R8050 += 1, R7956 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R8050 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8050 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8050 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R8052 += 1, R7957 += 1, R7958 += 1 };
  s0 -> s0 [0, 65535] { R8051 += 1, R8052 += 1 };
  s0 -> s3 [66, 66] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R8052 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8052 += 1, R7957 += 1, R7958 += 1 };
  s2 -> s3 [66, 66] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R8052 += 1, R7958 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8052 += 1 };
  s4 -> s4 [0, 65535] { R8052 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8052 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R8054 += 1, R7959 += 1, R7960 += 1 };
  s0 -> s0 [0, 65535] { R8053 += 1, R8054 += 1 };
  s0 -> s3 [66, 66] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R8054 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R8054 += 1, R7959 += 1, R7960 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8054 += 1 };
  s3 -> s3 [0, 65535] { R8054 += 1, R7960 += 1, R73 += 1, R74 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R8054 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8054 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R8056 += 1, R7980 += 1 };
  s0 -> s2 [0, 65535] { R8056 += 1, R7979 += 1, R7980 += 1 };
  s0 -> s0 [0, 65535] { R8055 += 1, R8056 += 1 };
  s0 -> s3 [66, 66] { R8056 += 1, R7980 += 1 };
  s0 -> s1 [67, 65535] { R8056 += 1, R7980 += 1 };
  s1 -> s1 [0, 65] { R8056 += 1, R7980 += 1 };
  s1 -> s3 [66, 66] { R8056 += 1, R7980 += 1 };
  s1 -> s1 [67, 65535] { R8056 += 1, R7980 += 1 };
  s2 -> s1 [0, 65] { R8056 += 1, R7980 += 1 };
  s2 -> s2 [0, 65535] { R8056 += 1, R7979 += 1, R7980 += 1 };
  s2 -> s3 [66, 66] { R8056 += 1, R7980 += 1 };
  s2 -> s1 [67, 65535] { R8056 += 1, R7980 += 1 };
  s3 -> s3 [0, 65535] { R8056 += 1, R7980 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8056 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8056 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s0 [0, 65535] { R8057 += 1, R8058 += 1 };
  s0 -> s1 [0, 65535] { R8058 += 1, R7981 += 1, R7982 += 1 };
  s0 -> s2 [0, 65535] { R8058 += 1, R7982 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R8058 += 1, R7981 += 1, R7982 += 1 };
  s1 -> s2 [0, 65535] { R8058 += 1, R7982 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R8058 += 1 };
  s2 -> s2 [0, 65535] { R8058 += 1, R7982 += 1, R1 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R8058 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R8060 += 1, R7984 += 1 };
  s0 -> s2 [0, 65535] { R8060 += 1, R7983 += 1, R7984 += 1 };
  s0 -> s3 [0, 65535] { R8060 += 1, R7984 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R8059 += 1, R8060 += 1 };
  s0 -> s4 [66, 66] { R8060 += 1, R7984 += 1 };
  s0 -> s1 [67, 65535] { R8060 += 1, R7984 += 1 };
  s1 -> s1 [0, 65] { R8060 += 1, R7984 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R8060 += 1 };
  s1 -> s4 [66, 66] { R8060 += 1, R7984 += 1 };
  s1 -> s1 [67, 65535] { R8060 += 1, R7984 += 1 };
  s2 -> s1 [0, 65] { R8060 += 1, R7984 += 1 };
  s2 -> s2 [0, 65535] { R8060 += 1, R7983 += 1, R7984 += 1 };
  s2 -> s3 [0, 65535] { R8060 += 1, R7984 += 1, R11 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [66, 66] { R8060 += 1, R7984 += 1 };
  s2 -> s1 [67, 65535] { R8060 += 1, R7984 += 1 };
  s3 -> s1 [0, 65] { R8060 += 1, R7984 += 1 };
  s3 -> s3 [0, 65535] { R8060 += 1, R7984 += 1, R11 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R8060 += 1 };
  s3 -> s4 [66, 66] { R8060 += 1, R7984 += 1 };
  s3 -> s1 [67, 65535] { R8060 += 1, R7984 += 1 };
  s4 -> s4 [0, 65535] { R8060 += 1, R7984 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8060 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s0 -> s2 [0, 65535] { R8062 += 1, R7986 += 1, R7923 += 1, R7924 += 1 };
  s0 -> s0 [0, 65535] { R8061 += 1, R8062 += 1 };
  s0 -> s3 [0, 65535] { R8062 += 1, R7985 += 1, R7986 += 1 };
  s0 -> s1 [67, 65535] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s1 -> s1 [0, 65] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s1 -> s5 [0, 65535] { R8062 += 1 };
  s1 -> s1 [0, 65535] { R8062 += 1, R7986 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [67, 65535] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s2 -> s1 [0, 65] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s2 -> s2 [0, 65535] { R8062 += 1, R7986 += 1, R7923 += 1, R7924 += 1 };
  s2 -> s5 [0, 65535] { R8062 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [67, 65535] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s3 -> s1 [0, 65] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s3 -> s2 [0, 65535] { R8062 += 1, R7986 += 1, R7923 += 1, R7924 += 1 };
  s3 -> s3 [0, 65535] { R8062 += 1, R7985 += 1, R7986 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [67, 65535] { R8062 += 1, R7986 += 1, R7924 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8062 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R8064 += 1, R7988 += 1, R7925 += 1, R7926 += 1 };
  s0 -> s2 [0, 65535] { R8064 += 1, R7988 += 1, R7926 += 1, R20 += 1 };
  s0 -> s0 [0, 65535] { R8063 += 1, R8064 += 1 };
  s0 -> s3 [0, 65535] { R8064 += 1, R7987 += 1, R7988 += 1 };
  s1 -> s1 [0, 65535] { R8064 += 1, R7988 += 1, R7925 += 1, R7926 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R8064 += 1, R7988 += 1, R7926 += 1, R20 += 1 };
  s1 -> s6 [0, 65535] { R8064 += 1 };
  s2 -> s5 [0, 65535] { R8064 += 1, R7988 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8064 += 1, R7988 += 1, R7926 += 1, R20 += 1 };
  s2 -> s6 [0, 65535] { R8064 += 1 };
  s3 -> s1 [0, 65535] { R8064 += 1, R7988 += 1, R7925 += 1, R7926 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R8064 += 1, R7988 += 1, R7926 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R8064 += 1, R7987 += 1, R7988 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8064 += 1, R7988 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R8064 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R8064 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s0 -> s0 [0, 65535] { R8065 += 1, R8066 += 1 };
  s0 -> s2 [0, 65535] { R8066 += 1, R7990 += 1, R7927 += 1, R7928 += 1 };
  s0 -> s3 [0, 65535] { R8066 += 1, R7989 += 1, R7990 += 1 };
  s0 -> s1 [70, 65535] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s1 -> s1 [0, 66] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s1 -> s1 [0, 65535] { R8066 += 1, R7990 += 1 };
  s1 -> s5 [0, 65535] { R8066 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [70, 65535] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s2 -> s1 [0, 66] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s2 -> s2 [0, 65535] { R8066 += 1, R7990 += 1, R7927 += 1, R7928 += 1 };
  s2 -> s5 [0, 65535] { R8066 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s3 -> s1 [0, 66] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s3 -> s2 [0, 65535] { R8066 += 1, R7990 += 1, R7927 += 1, R7928 += 1 };
  s3 -> s3 [0, 65535] { R8066 += 1, R7989 += 1, R7990 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [70, 65535] { R8066 += 1, R7990 += 1, R7928 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8066 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R8068 += 1, R7992 += 1, R7929 += 1, R7930 += 1 };
  s0 -> s0 [0, 65535] { R8067 += 1, R8068 += 1 };
  s0 -> s2 [0, 65535] { R8068 += 1, R7991 += 1, R7992 += 1 };
  s0 -> s3 [0, 65535] { R8068 += 1, R7992 += 1, R7930 += 1, R78 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R8068 += 1, R7992 += 1, R7929 += 1, R7930 += 1 };
  s1 -> s5 [0, 65535] { R8068 += 1 };
  s1 -> s3 [0, 65535] { R8068 += 1, R7992 += 1, R7930 += 1, R78 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R8068 += 1, R7992 += 1, R7929 += 1, R7930 += 1 };
  s2 -> s2 [0, 65535] { R8068 += 1, R7991 += 1, R7992 += 1 };
  s2 -> s3 [0, 65535] { R8068 += 1, R7992 += 1, R7930 += 1, R78 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8068 += 1 };
  s3 -> s6 [0, 65535] { R8068 += 1, R7992 += 1 };
  s3 -> s3 [0, 65535] { R8068 += 1, R7992 += 1, R7930 += 1, R78 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8068 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8068 += 1 };
  s6 -> s6 [0, 65535] { R8068 += 1, R7992 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s0 -> s2 [0, 65535] { R8070 += 1, R7993 += 1, R7994 += 1 };
  s0 -> s0 [0, 65535] { R8069 += 1, R8070 += 1 };
  s0 -> s3 [0, 65535] { R8070 += 1, R7994 += 1, R7931 += 1, R7932 += 1 };
  s0 -> s4 [0, 65535] { R8070 += 1, R7994 += 1, R7932 += 1, R80 += 1 };
  s0 -> s1 [71, 65535] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s1 -> s1 [0, 69] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R8070 += 1, R7994 += 1 };
  s1 -> s7 [0, 65535] { R8070 += 1 };
  s1 -> s1 [71, 65535] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s2 -> s1 [0, 69] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s2 -> s2 [0, 65535] { R8070 += 1, R7993 += 1, R7994 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R8070 += 1, R7994 += 1, R7931 += 1, R7932 += 1 };
  s2 -> s4 [0, 65535] { R8070 += 1, R7994 += 1, R7932 += 1, R80 += 1 };
  s2 -> s1 [71, 65535] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s3 -> s1 [0, 69] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8070 += 1, R7994 += 1, R7931 += 1, R7932 += 1 };
  s3 -> s4 [0, 65535] { R8070 += 1, R7994 += 1, R7932 += 1, R80 += 1 };
  s3 -> s7 [0, 65535] { R8070 += 1 };
  s3 -> s1 [71, 65535] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s4 -> s1 [0, 69] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s4 -> s5 [0, 65535] { R8070 += 1, R7994 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8070 += 1, R7994 += 1, R7932 += 1, R80 += 1 };
  s4 -> s7 [0, 65535] { R8070 += 1 };
  s4 -> s1 [71, 65535] { R8070 += 1, R7994 += 1, R7932 += 1 };
  s5 -> s5 [0, 65535] { R8070 += 1, R7994 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8070 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8070 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R8072 += 1, R7996 += 1, R7933 += 1, R7934 += 1 };
  s0 -> s3 [0, 65535] { R8072 += 1, R7995 += 1, R7996 += 1 };
  s0 -> s4 [0, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R8071 += 1, R8072 += 1 };
  s0 -> s1 [71, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s1 -> s5 [0, 65535] { R8072 += 1 };
  s1 -> s1 [0, 65535] { R8072 += 1, R7996 += 1, R7934 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8072 += 1, R7996 += 1 };
  s1 -> s1 [71, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s2 -> s5 [0, 65535] { R8072 += 1 };
  s2 -> s2 [0, 65535] { R8072 += 1, R7996 += 1, R7933 += 1, R7934 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R83 += 1, R84 += 1 };
  s2 -> s1 [71, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s3 -> s2 [0, 65535] { R8072 += 1, R7996 += 1, R7933 += 1, R7934 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8072 += 1, R7995 += 1, R7996 += 1 };
  s3 -> s4 [0, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R83 += 1, R84 += 1 };
  s3 -> s1 [71, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s4 -> s5 [0, 65535] { R8072 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R8072 += 1, R7996 += 1 };
  s4 -> s4 [0, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R83 += 1, R84 += 1 };
  s4 -> s1 [71, 65535] { R8072 += 1, R7996 += 1, R7934 += 1, R84 += 1 };
  s5 -> s5 [0, 65535] { R8072 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R8072 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8072 += 1, R7996 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s0 [0, 65535] { R8073 += 1, R8074 += 1 };
  s0 -> s1 [0, 65535] { R8074 += 1, R7998 += 1, R7935 += 1, R7936 += 1 };
  s0 -> s2 [0, 65535] { R8074 += 1, R7997 += 1, R7998 += 1 };
  s0 -> s3 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1 };
  s0 -> s4 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s1 [0, 65535] { R8074 += 1, R7998 += 1, R7935 += 1, R7936 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1 };
  s1 -> s4 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s7 [0, 65535] { R8074 += 1 };
  s2 -> s1 [0, 65535] { R8074 += 1, R7998 += 1, R7935 += 1, R7936 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8074 += 1, R7997 += 1, R7998 += 1 };
  s2 -> s3 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1 };
  s2 -> s4 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1 };
  s3 -> s6 [0, 65535] { R8074 += 1, R7998 += 1 };
  s3 -> s7 [0, 65535] { R8074 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s3 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1 };
  s4 -> s6 [0, 65535] { R8074 += 1, R7998 += 1 };
  s4 -> s4 [0, 65535] { R8074 += 1, R7998 += 1, R7936 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s7 [0, 65535] { R8074 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R8074 += 1, R7998 += 1 };
  s6 -> s7 [0, 65535] { R8074 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R8074 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s0 -> s0 [0, 65535] { R8075 += 1, R8076 += 1 };
  s0 -> s2 [0, 65535] { R8076 += 1, R7999 += 1, R8000 += 1 };
  s0 -> s1 [0, 65535] { R8076 += 1, R8000 += 1, R7938 += 1 };
  s0 -> s3 [0, 65535] { R8076 += 1, R8000 += 1, R7937 += 1, R7938 += 1 };
  s0 -> s1 [79, 65535] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s1 -> s1 [0, 70] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s1 -> s6 [0, 65535] { R8076 += 1, R8000 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R8076 += 1 };
  s1 -> s1 [0, 65535] { R8076 += 1, R8000 += 1, R7938 += 1 };
  s1 -> s1 [79, 65535] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s2 -> s1 [0, 70] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R8076 += 1, R7999 += 1, R8000 += 1 };
  s2 -> s1 [0, 65535] { R8076 += 1, R8000 += 1, R7938 += 1 };
  s2 -> s3 [0, 65535] { R8076 += 1, R8000 += 1, R7937 += 1, R7938 += 1 };
  s2 -> s1 [79, 65535] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s3 -> s1 [0, 70] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8076 += 1 };
  s3 -> s3 [0, 65535] { R8076 += 1, R8000 += 1, R7937 += 1, R7938 += 1 };
  s3 -> s1 [0, 65535] { R8076 += 1, R8000 += 1, R7938 += 1 };
  s3 -> s1 [79, 65535] { R8076 += 1, R8000 += 1, R7938 += 1, R6646 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8076 += 1 };
  s6 -> s6 [0, 65535] { R8076 += 1, R8000 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8076 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65535] { R8078 += 1, R8001 += 1, R8002 += 1 };
  s0 -> s2 [0, 65535] { R8078 += 1, R8002 += 1, R7939 += 1, R7940 += 1 };
  s0 -> s3 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1 };
  s0 -> s0 [0, 65535] { R8077 += 1, R8078 += 1 };
  s0 -> s4 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1, R7377 += 1, R7378 += 1 };
  s1 -> s1 [0, 65535] { R8078 += 1, R8001 += 1, R8002 += 1 };
  s1 -> s2 [0, 65535] { R8078 += 1, R8002 += 1, R7939 += 1, R7940 += 1 };
  s1 -> s3 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1, R7377 += 1, R7378 += 1 };
  s2 -> s2 [0, 65535] { R8078 += 1, R8002 += 1, R7939 += 1, R7940 += 1 };
  s2 -> s3 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1, R7377 += 1, R7378 += 1 };
  s2 -> s7 [0, 65535] { R8078 += 1 };
  s3 -> s3 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1 };
  s3 -> s5 [0, 65535] { R8078 += 1, R8002 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R8078 += 1 };
  s4 -> s3 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1 };
  s4 -> s5 [0, 65535] { R8078 += 1, R8002 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8078 += 1, R8002 += 1, R7940 += 1, R7377 += 1, R7378 += 1 };
  s4 -> s7 [0, 65535] { R8078 += 1 };
  s5 -> s5 [0, 65535] { R8078 += 1, R8002 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8078 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8078 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 65535] { R8080 += 1, R8003 += 1, R8004 += 1 };
  s0 -> s0 [0, 65535] { R8079 += 1, R8080 += 1 };
  s0 -> s2 [0, 65535] { R8080 += 1, R8004 += 1, R7942 += 1 };
  s0 -> s3 [0, 65535] { R8080 += 1, R8004 += 1, R7941 += 1, R7942 += 1 };
  s1 -> s1 [0, 65535] { R8080 += 1, R8003 += 1, R8004 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R8080 += 1, R8004 += 1, R7942 += 1 };
  s1 -> s3 [0, 65535] { R8080 += 1, R8004 += 1, R7941 += 1, R7942 += 1 };
  s2 -> s4 [0, 65535] { R8080 += 1 };
  s2 -> s6 [0, 65535] { R8080 += 1, R8004 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R8080 += 1, R8004 += 1, R7942 += 1 };
  s3 -> s4 [0, 65535] { R8080 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R8080 += 1, R8004 += 1, R7942 += 1 };
  s3 -> s3 [0, 65535] { R8080 += 1, R8004 += 1, R7941 += 1, R7942 += 1 };
  s4 -> s4 [0, 65535] { R8080 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R8080 += 1 };
  s6 -> s6 [0, 65535] { R8080 += 1, R8004 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R8082 += 1, R8005 += 1, R8006 += 1 };
  s0 -> s2 [0, 65535] { R8082 += 1, R8006 += 1, R7962 += 1, R21 += 1 };
  s0 -> s0 [0, 65535] { R8081 += 1, R8082 += 1 };
  s0 -> s3 [0, 65535] { R8082 += 1, R8006 += 1, R7961 += 1, R7962 += 1 };
  s1 -> s1 [0, 65535] { R8082 += 1, R8005 += 1, R8006 += 1 };
  s1 -> s2 [0, 65535] { R8082 += 1, R8006 += 1, R7962 += 1, R21 += 1 };
  s1 -> s3 [0, 65535] { R8082 += 1, R8006 += 1, R7961 += 1, R7962 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R8082 += 1, R8006 += 1 };
  s2 -> s2 [0, 65535] { R8082 += 1, R8006 += 1, R7962 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R8082 += 1 };
  s3 -> s2 [0, 65535] { R8082 += 1, R8006 += 1, R7962 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R8082 += 1, R8006 += 1, R7961 += 1, R7962 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R8082 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R8082 += 1 };
  s6 -> s6 [0, 65535] { R8082 += 1, R8006 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R8082 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s0 -> s0 [0, 65535] { R8083 += 1, R8084 += 1 };
  s0 -> s2 [0, 65535] { R8084 += 1, R8008 += 1, R7963 += 1, R7964 += 1 };
  s0 -> s3 [0, 65535] { R8084 += 1, R8007 += 1, R8008 += 1 };
  s0 -> s4 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s0 -> s5 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s0 -> s6 [70, 70] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s0 -> s1 [71, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s1 -> s1 [0, 65] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s1 -> s4 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s1 -> s5 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s1 -> s6 [70, 70] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s1 -> s1 [71, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s2 -> s1 [0, 65] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s2 -> s2 [0, 65535] { R8084 += 1, R8008 += 1, R7963 += 1, R7964 += 1 };
  s2 -> s4 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s2 -> s5 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s2 -> s6 [70, 70] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s2 -> s1 [71, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s3 -> s1 [0, 65] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s3 -> s2 [0, 65535] { R8084 += 1, R8008 += 1, R7963 += 1, R7964 += 1 };
  s3 -> s3 [0, 65535] { R8084 += 1, R8007 += 1, R8008 += 1 };
  s3 -> s4 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s3 -> s5 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s3 -> s6 [70, 70] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s3 -> s1 [71, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s5 -> s5 [0, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s5 -> s9 [70, 70] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s5 -> s5 [71, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s6 -> s6 [0, 65] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s6 -> s6 [0, 65535] { R8084 += 1, R8008 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8084 += 1 };
  s6 -> s9 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s6 -> s10 [66, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s6 -> s6 [70, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8084 += 1 };
  s9 -> s9 [0, 66] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s9 -> s9 [0, 65535] { R8084 += 1, R8008 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R8084 += 1 };
  s9 -> s9 [70, 65535] { R8084 += 1, R8008 += 1, R7964 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s8 [0, 65535] { R8084 += 1 };
  s10 -> s10 [0, 65535] { R8084 += 1, R8008 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R8086 += 1, R8009 += 1, R8010 += 1 };
  s0 -> s3 [0, 65535] { R8086 += 1, R8010 += 1, R7965 += 1, R7966 += 1 };
  s0 -> s0 [0, 65535] { R8085 += 1, R8086 += 1 };
  s0 -> s4 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s1 -> s6 [0, 65535] { R8086 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R8086 += 1, R8010 += 1 };
  s1 -> s4 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R8086 += 1, R8009 += 1, R8010 += 1 };
  s2 -> s3 [0, 65535] { R8086 += 1, R8010 += 1, R7965 += 1, R7966 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s3 -> s6 [0, 65535] { R8086 += 1 };
  s3 -> s3 [0, 65535] { R8086 += 1, R8010 += 1, R7965 += 1, R7966 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s4 -> s4 [0, 65535] { R8086 += 1, R8010 += 1, R7966 += 1, R77 += 1 };
  s4 -> s8 [0, 65535] { R8086 += 1, R8010 += 1 };
  s4 -> s6 [0, 65535] { R8086 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R8086 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R8086 += 1, R8010 += 1 };
  s6 -> s6 [0, 65535] { R8086 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8086 += 1, R8010 += 1 };
  s8 -> s6 [0, 65535] { R8086 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R8088 += 1, R8011 += 1, R8012 += 1 };
  s0 -> s3 [0, 65535] { R8088 += 1, R8012 += 1, R7967 += 1, R7968 += 1 };
  s0 -> s0 [0, 65535] { R8087 += 1, R8088 += 1 };
  s0 -> s4 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R8088 += 1 };
  s1 -> s1 [0, 65535] { R8088 += 1, R8012 += 1 };
  s1 -> s4 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R8088 += 1, R8011 += 1, R8012 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R8088 += 1, R8012 += 1, R7967 += 1, R7968 += 1 };
  s2 -> s4 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R8088 += 1, R8012 += 1, R7967 += 1, R7968 += 1 };
  s3 -> s8 [0, 65535] { R8088 += 1 };
  s3 -> s4 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R8088 += 1, R8012 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R8088 += 1 };
  s5 -> s6 [0, 65535] { R8088 += 1, R8012 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R8088 += 1 };
  s5 -> s5 [0, 65535] { R8088 += 1, R8012 += 1, R7968 += 1, R79 += 1 };
  s6 -> s6 [0, 65535] { R8088 += 1, R8012 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R8088 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R8088 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R8090 += 1, R8014 += 1, R7969 += 1, R7970 += 1 };
  s0 -> s3 [0, 65535] { R8090 += 1, R8013 += 1, R8014 += 1 };
  s0 -> s0 [0, 65535] { R8089 += 1, R8090 += 1 };
  s0 -> s4 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R8090 += 1 };
  s1 -> s1 [0, 65535] { R8090 += 1, R8014 += 1 };
  s1 -> s4 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R8090 += 1, R8014 += 1, R7969 += 1, R7970 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R8090 += 1 };
  s2 -> s4 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s3 -> s2 [0, 65535] { R8090 += 1, R8014 += 1, R7969 += 1, R7970 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R8090 += 1, R8013 += 1, R8014 += 1 };
  s3 -> s4 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R8090 += 1, R8014 += 1, R7970 += 1, R81 += 1, R82 += 1 };
  s4 -> s7 [0, 65535] { R8090 += 1 };
  s4 -> s8 [0, 65535] { R8090 += 1, R8014 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R8090 += 1 };
  s5 -> s5 [0, 65535] { R8090 += 1, R8014 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R8090 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R8090 += 1 };
  s8 -> s8 [0, 65535] { R8090 += 1, R8014 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s3 [0, 65535] { R8092 += 1, R8016 += 1, R7971 += 1, R7972 += 1 };
  s0 -> s0 [0, 65535] { R8091 += 1, R8092 += 1 };
  s0 -> s4 [0, 65535] { R8092 += 1, R8015 += 1, R8016 += 1 };
  s0 -> s5 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s6 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s7 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s8 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s1 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s1 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s1 [0, 65535] { R8092 += 1, R8016 += 1 };
  s1 -> s10 [0, 65535] { R8092 += 1 };
  s1 -> s5 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s7 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s1 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s5 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s6 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s7 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s8 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s1 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s3 [0, 65535] { R8092 += 1, R8016 += 1, R7971 += 1, R7972 += 1 };
  s3 -> s5 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s6 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s7 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s8 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [0, 65] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s3 [0, 65535] { R8092 += 1, R8016 += 1, R7971 += 1, R7972 += 1 };
  s4 -> s4 [0, 65535] { R8092 += 1, R8015 += 1, R8016 += 1 };
  s4 -> s5 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s6 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s7 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s8 [66, 66] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [67, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s5 [0, 65535] { R8092 += 1, R8016 += 1 };
  s5 -> s10 [0, 65535] { R8092 += 1 };
  s6 -> s6 [0, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6637 += 1, R6638 += 1 };
  s6 -> s7 [0, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s7 -> s9 [0, 65535];
  s7 -> s10 [0, 65535] { R8092 += 1 };
  s7 -> s7 [0, 65535] { R8092 += 1, R8016 += 1, R7972 += 1, R6638 += 1, R6639 += 1 };
  s7 -> s11 [0, 65535] { R8092 += 1, R8016 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R8092 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s10 [0, 65535] { R8092 += 1 };
  s11 -> s11 [0, 65535] { R8092 += 1, R8016 += 1 };
  accepting s5, s9, s1, s7, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s0 -> s2 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s3 [0, 65535] { R8094 += 1, R8017 += 1, R8018 += 1 };
  s0 -> s4 [0, 65535] { R8094 += 1, R8018 += 1, R7973 += 1, R7974 += 1 };
  s0 -> s0 [0, 65535] { R8093 += 1, R8094 += 1 };
  s0 -> s5 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s0 -> s6 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s0 -> s7 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s8 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s1 [67, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s0 -> s2 [67, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s9 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s0 -> s1 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s1 -> s1 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s1 -> s5 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s1 -> s6 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s1 -> s1 [67, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s1 -> s9 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s1 -> s1 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s2 -> s1 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s2 -> s2 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s5 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s2 -> s6 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s2 -> s7 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s8 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s1 [67, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s2 -> s2 [67, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s9 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s2 -> s1 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s3 -> s1 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s3 -> s2 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s3 [0, 65535] { R8094 += 1, R8017 += 1, R8018 += 1 };
  s3 -> s4 [0, 65535] { R8094 += 1, R8018 += 1, R7973 += 1, R7974 += 1 };
  s3 -> s5 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s3 -> s6 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s3 -> s7 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s8 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s1 [67, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s3 -> s2 [67, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s9 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s3 -> s1 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s4 -> s1 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s4 -> s2 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s4 [0, 65535] { R8094 += 1, R8018 += 1, R7973 += 1, R7974 += 1 };
  s4 -> s5 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s4 -> s6 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s4 -> s7 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s8 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s1 [67, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s4 -> s2 [67, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s9 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s4 -> s1 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s5 -> s5 [0, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s5 -> s12 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s5 -> s5 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s8 -> s5 [0, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s8 -> s8 [0, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6643 += 1, R6644 += 1 };
  s8 -> s12 [79, 79] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s8 -> s5 [80, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s9 -> s9 [0, 65] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R8094 += 1 };
  s9 -> s9 [0, 65535] { R8094 += 1, R8018 += 1 };
  s9 -> s12 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1 };
  s9 -> s13 [66, 66] { R8094 += 1, R8018 += 1, R7974 += 1 };
  s9 -> s9 [67, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s9 -> s9 [67, 65535] { R8094 += 1, R8018 += 1, R7974 += 1 };
  s9 -> s9 [79, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8094 += 1 };
  s12 -> s12 [0, 70] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s12 [0, 65535] { R8094 += 1, R8018 += 1, R7974 += 1 };
  s12 -> s14 [0, 65535] { R8094 += 1, R8018 += 1 };
  s12 -> s11 [0, 65535] { R8094 += 1 };
  s12 -> s12 [79, 65535] { R8094 += 1, R8018 += 1, R7974 += 1, R6644 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s11 [0, 65535] { R8094 += 1 };
  s13 -> s13 [0, 65535] { R8094 += 1, R8018 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s14 [0, 65535] { R8094 += 1, R8018 += 1 };
  s14 -> s11 [0, 65535] { R8094 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s0 -> s2 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s0 -> s0 [0, 65535] { R8095 += 1, R8096 += 1 };
  s0 -> s3 [0, 65535] { R8096 += 1, R8020 += 1, R7975 += 1, R7976 += 1 };
  s0 -> s4 [0, 65535] { R8096 += 1, R8019 += 1, R8020 += 1 };
  s0 -> s5 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s0 -> s6 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s0 -> s7 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s0 -> s8 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s0 -> s1 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s0 -> s2 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s1 -> s1 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s1 -> s2 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s1 -> s5 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s1 -> s6 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s1 -> s7 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s1 -> s8 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s1 -> s1 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s1 -> s2 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s2 -> s2 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s2 [0, 65535] { R8096 += 1, R8020 += 1 };
  s2 -> s11 [0, 65535] { R8096 += 1 };
  s2 -> s7 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s2 -> s8 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s2 -> s2 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s3 -> s1 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s3 -> s2 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s3 -> s3 [0, 65535] { R8096 += 1, R8020 += 1, R7975 += 1, R7976 += 1 };
  s3 -> s5 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s3 -> s6 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s3 -> s7 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s3 -> s8 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s3 -> s1 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s3 -> s2 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s4 -> s1 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s4 -> s2 [0, 65] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s4 -> s3 [0, 65535] { R8096 += 1, R8020 += 1, R7975 += 1, R7976 += 1 };
  s4 -> s4 [0, 65535] { R8096 += 1, R8019 += 1, R8020 += 1 };
  s4 -> s5 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s4 -> s6 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s4 -> s7 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s4 -> s8 [66, 66] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s4 -> s1 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s4 -> s2 [67, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s5 -> s5 [0, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7373 += 1, R7374 += 1 };
  s5 -> s8 [0, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s7 -> s7 [0, 65535] { R8096 += 1, R8020 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s11 [0, 65535] { R8096 += 1 };
  s8 -> s9 [0, 65535] { R8096 += 1, R8020 += 1 };
  s8 -> s8 [0, 65535] { R8096 += 1, R8020 += 1, R7976 += 1, R7374 += 1, R7375 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s11 [0, 65535] { R8096 += 1 };
  s9 -> s9 [0, 65535] { R8096 += 1, R8020 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R8096 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R8096 += 1 };
  accepting s8, s2, s9, s7, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s0 -> s2 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s0 [0, 65535] { R8097 += 1, R8098 += 1 };
  s0 -> s3 [0, 65535] { R8098 += 1, R8021 += 1, R8022 += 1 };
  s0 -> s4 [0, 65535] { R8098 += 1, R8022 += 1, R7977 += 1, R7978 += 1 };
  s0 -> s5 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s6 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s7 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s0 -> s8 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s0 -> s1 [67, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s0 -> s2 [67, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s0 -> s9 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s0 -> s1 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s1 -> s1 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s1 -> s7 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s1 -> s8 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s1 -> s1 [67, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s1 -> s1 [67, 65535] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s1 -> s9 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s1 -> s1 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s2 -> s1 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s2 -> s2 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s2 -> s5 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s2 -> s6 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s2 -> s7 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s2 -> s8 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s2 -> s1 [67, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s2 -> s2 [67, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s2 -> s9 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s2 -> s1 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s3 -> s1 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s3 -> s2 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s3 -> s3 [0, 65535] { R8098 += 1, R8021 += 1, R8022 += 1 };
  s3 -> s4 [0, 65535] { R8098 += 1, R8022 += 1, R7977 += 1, R7978 += 1 };
  s3 -> s5 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s3 -> s6 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s3 -> s7 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s3 -> s8 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s3 -> s1 [67, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s3 -> s2 [67, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s3 -> s9 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s3 -> s1 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s4 -> s1 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s4 -> s2 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s4 -> s4 [0, 65535] { R8098 += 1, R8022 += 1, R7977 += 1, R7978 += 1 };
  s4 -> s5 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s4 -> s6 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s4 -> s7 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s4 -> s8 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s4 -> s1 [67, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s4 -> s2 [67, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s4 -> s9 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s4 -> s1 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s6 -> s7 [0, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s6 -> s6 [0, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7919 += 1, R7920 += 1 };
  s6 -> s13 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s6 -> s7 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s7 -> s7 [0, 69] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s7 -> s7 [0, 65535] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s7 -> s13 [70, 70] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s7 -> s7 [80, 65535] { R8098 += 1, R8022 += 1, R7978 += 1, R7920 += 1 };
  s9 -> s9 [0, 65] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s9 -> s9 [0, 65535] { R8098 += 1, R8022 += 1 };
  s9 -> s10 [0, 65535] { R8098 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s12 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s9 -> s13 [66, 66] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s9 -> s9 [67, 65535] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s10 -> s10 [0, 65535] { R8098 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R8098 += 1 };
  s12 -> s11 [0, 65535];
  s12 -> s12 [0, 65535] { R8098 += 1, R8022 += 1 };
  s13 -> s10 [0, 65535] { R8098 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s14 [0, 65535] { R8098 += 1, R8022 += 1 };
  s13 -> s13 [0, 65535] { R8098 += 1, R8022 += 1, R7978 += 1 };
  s14 -> s10 [0, 65535] { R8098 += 1 };
  s14 -> s11 [0, 65535];
  s14 -> s14 [0, 65535] { R8098 += 1, R8022 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R8022 && R3 - R8098 = 1 && R23 - R8022 = -1 && R24 = R8022 && R25 - R8022 = -1 && R26 = R8022 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R8098 && R32 - R8098 = 1 && R33 = R8098 && R34 - R8098 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R6646 + -1*R6644 - R64 = 0 && R63 + R6645 + R6643 = 0 && R7963 = 0 && R7964 = 0 && R7971 = 0 && R7972 = 0 && R7973 = 0 && R7974 = 0 && R7975 = 0 && R7976 = 0 && R7977 = 0 && R7978 = 0 && R7979 = 0 && R7980 = R8022 && R7981 = 0 && R7982 = R8022 && R7983 = 0 && R7984 = R8022 && R7985 = 0 && R7986 = R8022 && R7987 = 0 && R7988 = R8022 && R7989 = 0 && R7990 = R8022 && R7991 = 0 && R7992 = R8022 && R7993 = 0 && R7994 = R8022 && R7995 = 0 && R7996 = R8022 && R7997 = 0 && R7998 = R8022 && R7999 = 0 && R8000 = R8022 && R8001 = 0 && R8002 = R8022 && R8003 = 0 && R8004 = R8022 && R8005 = 0 && R8006 = R8022 && R8007 = 0 && R8008 = R8022 && R8009 = 0 && R8010 = R8022 && R8011 = 0 && R8012 = R8022 && R8013 = 0 && R8014 = R8022 && R8015 = 0 && R8016 = R8022 && R8017 = 0 && R8018 = R8022 && R8019 = 0 && R8020 = R8022 && R8021 = 0 && R8023 = 0 && R8024 = R8098 && R8025 = 0 && R8026 = R8098 && R8027 = 0 && R8028 = R8098 && R8029 = 0 && R8030 = R8098 && R8031 = 0 && R8032 = R8098 && R8033 = 0 && R8034 = R8098 && R8035 = 0 && R8036 = R8098 && R8037 = 0 && R8038 = R8098 && R8039 = 0 && R8040 = R8098 && R8041 = 0 && R8042 = R8098 && R8043 = 0 && R8044 = R8098 && R8045 = 0 && R8046 = R8098 && R8047 = 0 && R8048 = R8098 && R8049 = 0 && R8050 = R8098 && R8051 = 0 && R8052 = R8098 && R8053 = 0 && R8054 = R8098 && R8055 = 0 && R8056 = R8098 && R8057 = 0 && R8058 = R8098 && R8059 = 0 && R8060 = R8098 && R8061 = 0 && R8062 = R8098 && R8063 = 0 && R8064 = R8098 && R8065 = 0 && R8066 = R8098 && R8067 = 0 && R8068 = R8098 && R8069 = 0 && R8070 = R8098 && R8071 = 0 && R8072 = R8098 && R8073 = 0 && R8074 = R8098 && R8075 = 0 && R8076 = R8098 && R8077 = 0 && R8078 = R8098 && R8079 = 0 && R8080 = R8098 && R8081 = 0 && R8082 = R8098 && R8083 = 0 && R8084 = R8098 && R8085 = 0 && R8086 = R8098 && R8087 = 0 && R8088 = R8098 && R8089 = 0 && R8090 = R8098 && R8091 = 0 && R8092 = R8098 && R8093 = 0 && R8094 = R8098 && R8095 = 0 && R8096 = R8098 && R8097 = 0 && -1 < R1 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R6646 + -1*R6644 - R64 < 1 && 0 < R8022 && -1 < R8098 && (R1 != 0 || R20 = 0 || (R7923 = 0 && R7924 = 0)) && (R1 != 0 || R20 = 0 || (R7925 = 0 && R7926 = 0)) && (R1 != 0 || R20 = 0 || (R7927 = 0 && R7928 = 0)) && (R1 != 0 || R20 = 0 || (R7929 = 0 && R7930 = 0)) && (R1 != 0 || R20 = 0 || (R7931 = 0 && R7932 = 0)) && (R1 != 0 || R20 = 0 || (R7933 = 0 && R7934 = 0)) && (R1 != 0 || R20 = 0 || (R7935 = 0 && R7936 = 0)) && (R1 != 0 || R20 = 0 || (R7937 = 0 && R7938 = 0)) && (R1 != 0 || R20 = 0 || (R7939 = 0 && R7940 = 0)) && (R1 != 0 || R20 = 0 || (R7941 = 0 && R7942 = 0)) && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R6646 + -1*R6644 - R64 = 0 || R64 + R6646 + R6644 < 1) && (R53 + R83 + R81 = 0 || R64 + R6646 + R6644 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R6646 + -1*R6644 - R64 = 0 || R64 + R6646 + R6644 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R6646 + R6644 < 1))) && (R7923 != 0 || R1 = R7924 || R1 < 1) && (R7925 != 0 || R1 = R7926 || R1 < 1) && (R7927 != 0 || R1 = R7928 || R1 < 1) && (R7929 != 0 || R1 = R7930 || R1 < 1) && (R7931 != 0 || R1 = R7932 || R1 < 1) && (R7933 != 0 || R1 = R7934 || R1 < 1) && (R7935 != 0 || R1 = R7936 || R1 < 1) && (R7937 != 0 || R1 = R7938 || R1 < 1) && (R7939 != 0 || R1 = R7940 || R1 < 1) && (R7941 != 0 || R1 = R7942 || R1 < 1) && (R21 = 0 || (R7961 = 0 && R7962 = 0)) && (R21 = 0 || (R7965 = 0 && R7966 = 0)) && (R21 = 0 || (R7967 = 0 && R7968 = 0)) && (R21 = 0 || (R7969 = 0 && R7970 = 0)) && (R22 = 0 || (R7943 = 0 && R7944 = 0)) && (R22 = 0 || (R7945 = 0 && R7946 = 0)) && (R22 = 0 || (R7947 = 0 && R7948 = 0)) && (R22 = 0 || (R7949 = 0 && R7950 = 0)) && (R22 = 0 || (R7951 = 0 && R7952 = 0)) && (R22 = 0 || (R7953 = 0 && R7954 = 0)) && (R22 = 0 || (R7955 = 0 && R7956 = 0)) && (R22 = 0 || (R7957 = 0 && R7958 = 0)) && (R22 = 0 || (R7959 = 0 && R7960 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R6646 + -1*R6644 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R6646 + -1*R6644 - R64 = 0)) && (R69 + R7378 + R7375 = 0 || (R67 + R7376 + R7373 = 0 && R68 + R7377 + R7374 = 0)) && (R69 + R7378 + R7375 = 0 || (R73 + R7921 + R7919 = 0 && R74 + R7922 + R7920 = 0)) && (R7923 = 0 || R1 < 1) && (R7925 = 0 || R1 < 1) && (R7927 = 0 || R1 < 1) && (R7929 = 0 || R1 < 1) && (R7931 = 0 || R1 < 1) && (R7933 = 0 || R1 < 1) && (R7935 = 0 || R1 < 1) && (R7937 = 0 || R1 < 1) && (R7939 = 0 || R1 < 1) && (R7941 = 0 || R1 < 1);
// End of Parikh automata intersection problem
