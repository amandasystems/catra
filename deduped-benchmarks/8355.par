// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R6643, R6644, R6645, R6646, R6647, R6648, R6649, R6650, R6651, R6652, R6653, R6654, R6655, R6656, R6657, R6658, R6659, R6660, R6661, R6662, R6663, R6664, R6665, R6666, R6667, R6668, R6669, R6670, R6671, R6672, R6673, R6674, R6675, R6676, R6677, R6678, R6679, R6680, R6681, R6682, R6683, R6684, R6685, R6686, R6687, R6688, R6689, R6690, R6691, R6692, R6693, R6694, R6695, R6696, R6697, R6698, R6699, R67, R6700, R6701, R6702, R6703, R6704, R6705, R6706, R6707, R6708, R6709, R6710, R6711, R6712, R6713, R6714, R6715, R6716, R6717, R6718, R6719, R6720, R6721, R6722, R6723, R6724, R6725, R6726, R6727, R6728, R6729, R6730, R6731, R6732, R6733, R6734, R6735, R6736, R6737, R6738, R6739, R6740, R6741, R6742, R6743, R6744, R6745, R6746, R6747, R6748, R6749, R6750, R6751, R6752, R6753, R6754, R6755, R6756, R6757, R6758, R6759, R6760, R6761, R6762, R6763, R6764, R6765, R6766, R6767, R6768, R6769, R6770, R6771, R6772, R6773, R6774, R6775, R6776, R6777, R6778, R6779, R6780, R6781, R6782, R6783, R6784, R6785, R6786, R6787, R6788, R6789, R6790, R6791, R6792, R6793, R6794, R6795, R6796, R6797, R6798, R6799, R68, R6800, R6801, R6802, R6803, R6804, R6805, R6806, R6807, R6808, R6809, R6810, R6811, R6812, R6813, R6814, R6815, R6816, R6817, R6818, R6819, R6820, R6821, R6822, R6823, R6824, R6825, R6826, R6827, R6828, R6829, R6830, R6831, R6832, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R6758 += 1 };
  s0 -> s0 [0, 65535] { R6757 += 1, R6758 += 1 };
  s0 -> s2 [66, 66] { R6758 += 1 };
  s0 -> s1 [67, 65535] { R6758 += 1 };
  s1 -> s1 [0, 64] { R6758 += 1 };
  s1 -> s2 [66, 66] { R6758 += 1 };
  s1 -> s1 [67, 65535] { R6758 += 1 };
  s2 -> s2 [0, 64] { R6758 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R6758 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R6760 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R6759 += 1, R6760 += 1 };
  s1 -> s1 [0, 65535] { R6760 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R6762 += 1 };
  s0 -> s2 [0, 65535] { R6762 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R6761 += 1, R6762 += 1 };
  s0 -> s3 [66, 66] { R6762 += 1 };
  s0 -> s1 [67, 65535] { R6762 += 1 };
  s1 -> s1 [0, 65] { R6762 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R6762 += 1 };
  s1 -> s1 [67, 65535] { R6762 += 1 };
  s2 -> s1 [0, 65] { R6762 += 1 };
  s2 -> s2 [0, 65535] { R6762 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R6762 += 1 };
  s2 -> s1 [67, 65535] { R6762 += 1 };
  s3 -> s3 [0, 65535] { R6762 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R6764 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R6763 += 1, R6764 += 1 };
  s0 -> s2 [0, 65535] { R6764 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R6764 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R6764 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R6764 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R6764 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R6764 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6764 += 1, R24 += 1 };
  s2 -> s1 [0, 8] { R6764 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6764 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R6764 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R6764 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R6764 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R6764 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R6764 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6764 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R6765 += 1, R6766 += 1 };
  s0 -> s1 [0, 65535] { R6766 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R6766 += 1, R26 += 1, R4 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6766 += 1, R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535] { R6766 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R6766 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6766 += 1, R26 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R6766 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R6768 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R6767 += 1, R6768 += 1 };
  s0 -> s2 [0, 65535] { R6768 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R6768 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R6768 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R6768 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R6768 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6768 += 1 };
  s1 -> s1 [0, 65535] { R6768 += 1, R28 += 1 };
  s2 -> s1 [0, 8] { R6768 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6768 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R6768 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R6768 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R6768 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R6768 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R6768 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6768 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R6770 += 1, R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R6769 += 1, R6770 += 1 };
  s0 -> s2 [0, 65535] { R6770 += 1, R29 += 1, R30 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6770 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535] { R6770 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6770 += 1, R30 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R6770 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6770 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6772 += 1, R6678 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R6772 += 1, R6677 += 1, R6678 += 1 };
  s0 -> s0 [0, 65535] { R6771 += 1, R6772 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6772 += 1, R6678 += 1, R22 += 1 };
  s1 -> s4 [0, 65535] { R6772 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6772 += 1, R6678 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R6772 += 1, R6677 += 1, R6678 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6772 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R6774 += 1, R6680 += 1 };
  s0 -> s2 [0, 65535] { R6774 += 1, R6679 += 1, R6680 += 1 };
  s0 -> s0 [0, 65535] { R6773 += 1, R6774 += 1 };
  s0 -> s3 [66, 66] { R6774 += 1, R6680 += 1 };
  s0 -> s4 [66, 66] { R6774 += 1, R6680 += 1 };
  s0 -> s1 [71, 65535] { R6774 += 1, R6680 += 1 };
  s1 -> s1 [0, 65] { R6774 += 1, R6680 += 1 };
  s1 -> s1 [0, 65535] { R6774 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R6774 += 1, R6680 += 1 };
  s1 -> s4 [66, 66] { R6774 += 1, R6680 += 1 };
  s1 -> s1 [71, 65535] { R6774 += 1, R6680 += 1 };
  s2 -> s1 [0, 65] { R6774 += 1, R6680 += 1 };
  s2 -> s2 [0, 65535] { R6774 += 1, R6679 += 1, R6680 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R6774 += 1, R6680 += 1 };
  s2 -> s4 [66, 66] { R6774 += 1, R6680 += 1 };
  s2 -> s1 [71, 65535] { R6774 += 1, R6680 += 1 };
  s3 -> s3 [0, 65535] { R6774 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R6774 += 1, R6680 += 1 };
  s4 -> s4 [0, 65535] { R6774 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [71, 65535] { R6774 += 1, R6680 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R6776 += 1, R6682 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R6775 += 1, R6776 += 1 };
  s0 -> s2 [0, 65535] { R6776 += 1, R6681 += 1, R6682 += 1 };
  s0 -> s3 [66, 66] { R6776 += 1, R6682 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R6776 += 1, R6682 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R6776 += 1, R6682 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R6776 += 1, R6682 += 1, R49 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6776 += 1 };
  s1 -> s3 [66, 66] { R6776 += 1, R6682 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R6776 += 1, R6682 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R6776 += 1, R6682 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R6776 += 1, R6682 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R6776 += 1, R6681 += 1, R6682 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R6776 += 1, R6682 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R6776 += 1, R6682 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R6776 += 1, R6682 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R6776 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6776 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6776 += 1, R6682 += 1, R49 += 1 };
  s5 -> s5 [0, 65535] { R6776 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R6778 += 1, R6684 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R6778 += 1, R6683 += 1, R6684 += 1 };
  s0 -> s0 [0, 65535] { R6777 += 1, R6778 += 1 };
  s0 -> s3 [66, 66] { R6778 += 1, R6684 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R6778 += 1, R6684 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R6778 += 1, R6684 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R6778 += 1, R6684 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6778 += 1 };
  s1 -> s3 [66, 66] { R6778 += 1, R6684 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R6778 += 1, R6684 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R6778 += 1, R6684 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R6778 += 1, R6684 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6778 += 1, R6683 += 1, R6684 += 1 };
  s2 -> s3 [66, 66] { R6778 += 1, R6684 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R6778 += 1, R6684 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R6778 += 1, R6684 += 1, R51 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6778 += 1, R6684 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R6778 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6778 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6778 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R6780 += 1, R6685 += 1, R6686 += 1 };
  s0 -> s0 [0, 65535] { R6779 += 1, R6780 += 1 };
  s0 -> s3 [66, 66] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65535] { R6780 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R6780 += 1, R6685 += 1, R6686 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s3 -> s3 [0, 65535] { R6780 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6780 += 1 };
  s4 -> s4 [0, 65535] { R6780 += 1, R6686 += 1, R53 += 1, R54 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6780 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R6782 += 1, R6687 += 1, R6688 += 1 };
  s0 -> s0 [0, 65535] { R6781 += 1, R6782 += 1 };
  s0 -> s3 [66, 66] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6782 += 1 };
  s1 -> s3 [66, 66] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6782 += 1, R6687 += 1, R6688 += 1 };
  s2 -> s3 [66, 66] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6782 += 1, R6688 += 1, R57 += 1, R58 += 1 };
  s3 -> s6 [0, 65535] { R6782 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6782 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6782 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R6784 += 1, R6689 += 1, R6690 += 1 };
  s0 -> s0 [0, 65535] { R6783 += 1, R6784 += 1 };
  s0 -> s3 [66, 66] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R6784 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R6784 += 1, R6689 += 1, R6690 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R6784 += 1 };
  s3 -> s3 [0, 65535] { R6784 += 1, R6690 += 1, R63 += 1, R64 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6784 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6784 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6785 += 1, R6786 += 1 };
  s0 -> s2 [0, 65535] { R6786 += 1, R6691 += 1, R6692 += 1 };
  s0 -> s3 [66, 66] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6786 += 1 };
  s1 -> s3 [66, 66] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6786 += 1, R6691 += 1, R6692 += 1 };
  s2 -> s3 [66, 66] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6786 += 1 };
  s3 -> s3 [0, 65535] { R6786 += 1, R6692 += 1, R67 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6786 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6786 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6787 += 1, R6788 += 1 };
  s0 -> s2 [0, 65535] { R6788 += 1, R6693 += 1, R6694 += 1 };
  s0 -> s3 [66, 66] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6788 += 1 };
  s1 -> s3 [66, 66] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6788 += 1, R6693 += 1, R6694 += 1 };
  s2 -> s3 [66, 66] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6788 += 1, R6694 += 1, R73 += 1, R74 += 1 };
  s3 -> s6 [0, 65535] { R6788 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6788 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6788 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R6790 += 1, R6714 += 1 };
  s0 -> s0 [0, 65535] { R6789 += 1, R6790 += 1 };
  s0 -> s2 [0, 65535] { R6790 += 1, R6713 += 1, R6714 += 1 };
  s0 -> s3 [66, 66] { R6790 += 1, R6714 += 1 };
  s0 -> s1 [67, 65535] { R6790 += 1, R6714 += 1 };
  s1 -> s1 [0, 65] { R6790 += 1, R6714 += 1 };
  s1 -> s3 [66, 66] { R6790 += 1, R6714 += 1 };
  s1 -> s1 [67, 65535] { R6790 += 1, R6714 += 1 };
  s2 -> s1 [0, 65] { R6790 += 1, R6714 += 1 };
  s2 -> s2 [0, 65535] { R6790 += 1, R6713 += 1, R6714 += 1 };
  s2 -> s3 [66, 66] { R6790 += 1, R6714 += 1 };
  s2 -> s1 [67, 65535] { R6790 += 1, R6714 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6790 += 1 };
  s3 -> s3 [0, 65535] { R6790 += 1, R6714 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6790 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6792 += 1, R6716 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6791 += 1, R6792 += 1 };
  s0 -> s2 [0, 65535] { R6792 += 1, R6715 += 1, R6716 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6792 += 1 };
  s1 -> s1 [0, 65535] { R6792 += 1, R6716 += 1, R1 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6792 += 1, R6716 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R6792 += 1, R6715 += 1, R6716 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6792 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R6794 += 1, R6718 += 1 };
  s0 -> s2 [0, 65535] { R6794 += 1, R6717 += 1, R6718 += 1 };
  s0 -> s0 [0, 65535] { R6793 += 1, R6794 += 1 };
  s0 -> s3 [0, 65535] { R6794 += 1, R6718 += 1, R11 += 1 };
  s0 -> s4 [66, 66] { R6794 += 1, R6718 += 1 };
  s0 -> s1 [67, 65535] { R6794 += 1, R6718 += 1 };
  s1 -> s1 [0, 65] { R6794 += 1, R6718 += 1 };
  s1 -> s1 [0, 65535] { R6794 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [66, 66] { R6794 += 1, R6718 += 1 };
  s1 -> s1 [67, 65535] { R6794 += 1, R6718 += 1 };
  s2 -> s1 [0, 65] { R6794 += 1, R6718 += 1 };
  s2 -> s2 [0, 65535] { R6794 += 1, R6717 += 1, R6718 += 1 };
  s2 -> s3 [0, 65535] { R6794 += 1, R6718 += 1, R11 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [66, 66] { R6794 += 1, R6718 += 1 };
  s2 -> s1 [67, 65535] { R6794 += 1, R6718 += 1 };
  s3 -> s1 [0, 65] { R6794 += 1, R6718 += 1 };
  s3 -> s5 [0, 65535] { R6794 += 1 };
  s3 -> s3 [0, 65535] { R6794 += 1, R6718 += 1, R11 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [66, 66] { R6794 += 1, R6718 += 1 };
  s3 -> s1 [67, 65535] { R6794 += 1, R6718 += 1 };
  s4 -> s4 [0, 65535] { R6794 += 1, R6718 += 1 };
  s5 -> s5 [0, 65535] { R6794 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s0 -> s2 [0, 65535] { R6796 += 1, R6719 += 1, R6720 += 1 };
  s0 -> s0 [0, 65535] { R6795 += 1, R6796 += 1 };
  s0 -> s3 [0, 65535] { R6796 += 1, R6720 += 1, R6657 += 1, R6658 += 1 };
  s0 -> s1 [67, 65535] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s1 -> s1 [0, 65] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s1 -> s1 [0, 65535] { R6796 += 1, R6720 += 1 };
  s1 -> s4 [0, 65535] { R6796 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [67, 65535] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s2 -> s1 [0, 65] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s2 -> s2 [0, 65535] { R6796 += 1, R6719 += 1, R6720 += 1 };
  s2 -> s3 [0, 65535] { R6796 += 1, R6720 += 1, R6657 += 1, R6658 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [67, 65535] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s3 -> s1 [0, 65] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s3 -> s4 [0, 65535] { R6796 += 1 };
  s3 -> s3 [0, 65535] { R6796 += 1, R6720 += 1, R6657 += 1, R6658 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [67, 65535] { R6796 += 1, R6720 += 1, R6658 += 1 };
  s4 -> s4 [0, 65535] { R6796 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s0 [0, 65535] { R6797 += 1, R6798 += 1 };
  s0 -> s1 [0, 65535] { R6798 += 1, R6722 += 1, R6660 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R6798 += 1, R6721 += 1, R6722 += 1 };
  s0 -> s3 [0, 65535] { R6798 += 1, R6722 += 1, R6659 += 1, R6660 += 1 };
  s1 -> s6 [0, 65535] { R6798 += 1, R6722 += 1 };
  s1 -> s1 [0, 65535] { R6798 += 1, R6722 += 1, R6660 += 1, R20 += 1 };
  s1 -> s4 [0, 65535] { R6798 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R6798 += 1, R6722 += 1, R6660 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R6798 += 1, R6721 += 1, R6722 += 1 };
  s2 -> s3 [0, 65535] { R6798 += 1, R6722 += 1, R6659 += 1, R6660 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R6798 += 1, R6722 += 1, R6660 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R6798 += 1, R6722 += 1, R6659 += 1, R6660 += 1 };
  s3 -> s4 [0, 65535] { R6798 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6798 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6798 += 1, R6722 += 1 };
  s6 -> s4 [0, 65535] { R6798 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s0 -> s2 [0, 65535] { R6800 += 1, R6723 += 1, R6724 += 1 };
  s0 -> s0 [0, 65535] { R6799 += 1, R6800 += 1 };
  s0 -> s3 [0, 65535] { R6800 += 1, R6724 += 1, R6661 += 1, R6662 += 1 };
  s0 -> s1 [70, 65535] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s1 -> s1 [0, 66] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6800 += 1, R6724 += 1 };
  s1 -> s5 [0, 65535] { R6800 += 1 };
  s1 -> s1 [70, 65535] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s2 -> s1 [0, 66] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6800 += 1, R6723 += 1, R6724 += 1 };
  s2 -> s3 [0, 65535] { R6800 += 1, R6724 += 1, R6661 += 1, R6662 += 1 };
  s2 -> s1 [70, 65535] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s3 -> s1 [0, 66] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6800 += 1, R6724 += 1, R6661 += 1, R6662 += 1 };
  s3 -> s5 [0, 65535] { R6800 += 1 };
  s3 -> s1 [70, 65535] { R6800 += 1, R6724 += 1, R6662 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6800 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s0 [0, 65535] { R6801 += 1, R6802 += 1 };
  s0 -> s1 [0, 65535] { R6802 += 1, R6726 += 1, R6663 += 1, R6664 += 1 };
  s0 -> s2 [0, 65535] { R6802 += 1, R6726 += 1, R6664 += 1, R78 += 1 };
  s0 -> s3 [0, 65535] { R6802 += 1, R6725 += 1, R6726 += 1 };
  s1 -> s1 [0, 65535] { R6802 += 1, R6726 += 1, R6663 += 1, R6664 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6802 += 1 };
  s1 -> s2 [0, 65535] { R6802 += 1, R6726 += 1, R6664 += 1, R78 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R6802 += 1 };
  s2 -> s2 [0, 65535] { R6802 += 1, R6726 += 1, R6664 += 1, R78 += 1 };
  s2 -> s6 [0, 65535] { R6802 += 1, R6726 += 1 };
  s3 -> s1 [0, 65535] { R6802 += 1, R6726 += 1, R6663 += 1, R6664 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R6802 += 1, R6726 += 1, R6664 += 1, R78 += 1 };
  s3 -> s3 [0, 65535] { R6802 += 1, R6725 += 1, R6726 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6802 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6802 += 1 };
  s6 -> s6 [0, 65535] { R6802 += 1, R6726 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s0 -> s2 [0, 65535] { R6804 += 1, R6727 += 1, R6728 += 1 };
  s0 -> s0 [0, 65535] { R6803 += 1, R6804 += 1 };
  s0 -> s3 [0, 65535] { R6804 += 1, R6728 += 1, R6665 += 1, R6666 += 1 };
  s0 -> s4 [0, 65535] { R6804 += 1, R6728 += 1, R6666 += 1, R80 += 1 };
  s0 -> s1 [71, 65535] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s1 -> s1 [0, 69] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s1 -> s6 [0, 65535] { R6804 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R6804 += 1, R6728 += 1 };
  s1 -> s1 [71, 65535] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s2 -> s1 [0, 69] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s2 [0, 65535] { R6804 += 1, R6727 += 1, R6728 += 1 };
  s2 -> s3 [0, 65535] { R6804 += 1, R6728 += 1, R6665 += 1, R6666 += 1 };
  s2 -> s4 [0, 65535] { R6804 += 1, R6728 += 1, R6666 += 1, R80 += 1 };
  s2 -> s1 [71, 65535] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s3 -> s1 [0, 69] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s3 -> s6 [0, 65535] { R6804 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R6804 += 1, R6728 += 1, R6665 += 1, R6666 += 1 };
  s3 -> s4 [0, 65535] { R6804 += 1, R6728 += 1, R6666 += 1, R80 += 1 };
  s3 -> s1 [71, 65535] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s4 -> s1 [0, 69] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s4 -> s5 [0, 65535] { R6804 += 1, R6728 += 1 };
  s4 -> s6 [0, 65535] { R6804 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R6804 += 1, R6728 += 1, R6666 += 1, R80 += 1 };
  s4 -> s1 [71, 65535] { R6804 += 1, R6728 += 1, R6666 += 1 };
  s5 -> s5 [0, 65535] { R6804 += 1, R6728 += 1 };
  s5 -> s6 [0, 65535] { R6804 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R6804 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R6806 += 1, R6730 += 1, R6667 += 1, R6668 += 1 };
  s0 -> s3 [0, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R83 += 1, R84 += 1 };
  s0 -> s4 [0, 65535] { R6806 += 1, R6729 += 1, R6730 += 1 };
  s0 -> s0 [0, 65535] { R6805 += 1, R6806 += 1 };
  s0 -> s1 [71, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s1 -> s6 [0, 65535] { R6806 += 1 };
  s1 -> s7 [0, 65535] { R6806 += 1, R6730 += 1 };
  s1 -> s1 [0, 65535] { R6806 += 1, R6730 += 1, R6668 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [71, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s2 -> s6 [0, 65535] { R6806 += 1 };
  s2 -> s2 [0, 65535] { R6806 += 1, R6730 += 1, R6667 += 1, R6668 += 1 };
  s2 -> s3 [0, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R83 += 1, R84 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [71, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s3 -> s6 [0, 65535] { R6806 += 1 };
  s3 -> s7 [0, 65535] { R6806 += 1, R6730 += 1 };
  s3 -> s3 [0, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R83 += 1, R84 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [71, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s4 -> s2 [0, 65535] { R6806 += 1, R6730 += 1, R6667 += 1, R6668 += 1 };
  s4 -> s3 [0, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R83 += 1, R84 += 1 };
  s4 -> s4 [0, 65535] { R6806 += 1, R6729 += 1, R6730 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [71, 65535] { R6806 += 1, R6730 += 1, R6668 += 1, R84 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6806 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6806 += 1 };
  s7 -> s7 [0, 65535] { R6806 += 1, R6730 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s0 [0, 65535] { R6807 += 1, R6808 += 1 };
  s0 -> s1 [0, 65535] { R6808 += 1, R6731 += 1, R6732 += 1 };
  s0 -> s2 [0, 65535] { R6808 += 1, R6732 += 1, R6669 += 1, R6670 += 1 };
  s0 -> s3 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1 };
  s0 -> s4 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s1 [0, 65535] { R6808 += 1, R6731 += 1, R6732 += 1 };
  s1 -> s2 [0, 65535] { R6808 += 1, R6732 += 1, R6669 += 1, R6670 += 1 };
  s1 -> s3 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s4 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s2 [0, 65535] { R6808 += 1, R6732 += 1, R6669 += 1, R6670 += 1 };
  s2 -> s5 [0, 65535] { R6808 += 1 };
  s2 -> s3 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s5 [0, 65535] { R6808 += 1 };
  s3 -> s3 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6808 += 1, R6732 += 1 };
  s4 -> s5 [0, 65535] { R6808 += 1 };
  s4 -> s3 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6808 += 1, R6732 += 1 };
  s4 -> s4 [0, 65535] { R6808 += 1, R6732 += 1, R6670 += 1, R6641 += 1, R6642 += 1 };
  s5 -> s5 [0, 65535] { R6808 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R6808 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6808 += 1, R6732 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s0 -> s1 [0, 65535] { R6810 += 1, R6734 += 1, R6672 += 1 };
  s0 -> s2 [0, 65535] { R6810 += 1, R6733 += 1, R6734 += 1 };
  s0 -> s3 [0, 65535] { R6810 += 1, R6734 += 1, R6671 += 1, R6672 += 1 };
  s0 -> s0 [0, 65535] { R6809 += 1, R6810 += 1 };
  s0 -> s1 [79, 65535] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s1 -> s1 [0, 70] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s1 -> s1 [0, 65535] { R6810 += 1, R6734 += 1, R6672 += 1 };
  s1 -> s4 [0, 65535] { R6810 += 1 };
  s1 -> s6 [0, 65535] { R6810 += 1, R6734 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [79, 65535] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s2 -> s1 [0, 70] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s2 -> s1 [0, 65535] { R6810 += 1, R6734 += 1, R6672 += 1 };
  s2 -> s2 [0, 65535] { R6810 += 1, R6733 += 1, R6734 += 1 };
  s2 -> s3 [0, 65535] { R6810 += 1, R6734 += 1, R6671 += 1, R6672 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [79, 65535] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s3 -> s1 [0, 70] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s3 -> s1 [0, 65535] { R6810 += 1, R6734 += 1, R6672 += 1 };
  s3 -> s4 [0, 65535] { R6810 += 1 };
  s3 -> s3 [0, 65535] { R6810 += 1, R6734 += 1, R6671 += 1, R6672 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [79, 65535] { R6810 += 1, R6734 += 1, R6672 += 1, R6646 += 1 };
  s4 -> s4 [0, 65535] { R6810 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6810 += 1 };
  s6 -> s6 [0, 65535] { R6810 += 1, R6734 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6650 += 1, R6651 += 1 };
  s0 -> s0 [0, 65535] { R6811 += 1, R6812 += 1 };
  s0 -> s2 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6651 += 1, R6652 += 1 };
  s0 -> s3 [0, 65535] { R6812 += 1, R6735 += 1, R6736 += 1 };
  s0 -> s4 [0, 65535] { R6812 += 1, R6736 += 1, R6673 += 1, R6674 += 1 };
  s1 -> s1 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6650 += 1, R6651 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6651 += 1, R6652 += 1 };
  s1 -> s6 [0, 65535] { R6812 += 1 };
  s1 -> s8 [0, 65535] { R6812 += 1, R6736 += 1 };
  s2 -> s7 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6651 += 1, R6652 += 1 };
  s2 -> s6 [0, 65535] { R6812 += 1 };
  s2 -> s8 [0, 65535] { R6812 += 1, R6736 += 1 };
  s3 -> s1 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6650 += 1, R6651 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6651 += 1, R6652 += 1 };
  s3 -> s3 [0, 65535] { R6812 += 1, R6735 += 1, R6736 += 1 };
  s3 -> s4 [0, 65535] { R6812 += 1, R6736 += 1, R6673 += 1, R6674 += 1 };
  s4 -> s1 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6650 += 1, R6651 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s2 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1, R6651 += 1, R6652 += 1 };
  s4 -> s4 [0, 65535] { R6812 += 1, R6736 += 1, R6673 += 1, R6674 += 1 };
  s4 -> s6 [0, 65535] { R6812 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6812 += 1 };
  s7 -> s7 [0, 65535] { R6812 += 1, R6736 += 1, R6674 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R6812 += 1 };
  s7 -> s8 [0, 65535] { R6812 += 1, R6736 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s6 [0, 65535] { R6812 += 1 };
  s8 -> s8 [0, 65535] { R6812 += 1, R6736 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s0 -> s2 [0, 65535] { R6814 += 1, R6738 += 1, R6675 += 1, R6676 += 1 };
  s0 -> s0 [0, 65535] { R6813 += 1, R6814 += 1 };
  s0 -> s3 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6655 += 1, R6656 += 1 };
  s0 -> s4 [0, 65535] { R6814 += 1, R6737 += 1, R6738 += 1 };
  s0 -> s5 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s0 -> s6 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s0 -> s1 [80, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s1 -> s1 [0, 69] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s1 -> s7 [0, 65535] { R6814 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s9 [0, 65535] { R6814 += 1, R6738 += 1 };
  s1 -> s1 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1 };
  s1 -> s5 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s1 -> s6 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s1 -> s1 [80, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s2 -> s1 [0, 69] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s2 -> s7 [0, 65535] { R6814 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s2 [0, 65535] { R6814 += 1, R6738 += 1, R6675 += 1, R6676 += 1 };
  s2 -> s3 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6655 += 1, R6656 += 1 };
  s2 -> s5 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s2 -> s6 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s2 -> s1 [80, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s3 -> s1 [0, 69] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s3 -> s7 [0, 65535] { R6814 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s9 [0, 65535] { R6814 += 1, R6738 += 1 };
  s3 -> s3 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6655 += 1, R6656 += 1 };
  s3 -> s5 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s3 -> s6 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s3 -> s1 [80, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s4 -> s1 [0, 69] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s2 [0, 65535] { R6814 += 1, R6738 += 1, R6675 += 1, R6676 += 1 };
  s4 -> s3 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6655 += 1, R6656 += 1 };
  s4 -> s4 [0, 65535] { R6814 += 1, R6737 += 1, R6738 += 1 };
  s4 -> s5 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s4 -> s6 [70, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s4 -> s1 [80, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s5 -> s7 [0, 65535] { R6814 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1 };
  s5 -> s9 [0, 65535] { R6814 += 1, R6738 += 1 };
  s6 -> s6 [0, 70] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s6 -> s7 [0, 65535] { R6814 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [0, 65535] { R6814 += 1, R6738 += 1 };
  s6 -> s6 [0, 65535] { R6814 += 1, R6738 += 1, R6676 += 1 };
  s6 -> s6 [80, 65535] { R6814 += 1, R6738 += 1, R6676 += 1, R6656 += 1 };
  s7 -> s7 [0, 65535] { R6814 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R6814 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6814 += 1, R6738 += 1 };
  accepting s3, s4, s8, s5, s2, s9, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R6816 += 1, R6740 += 1, R6696 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R6816 += 1, R6740 += 1, R6695 += 1, R6696 += 1 };
  s0 -> s0 [0, 65535] { R6815 += 1, R6816 += 1 };
  s0 -> s3 [0, 65535] { R6816 += 1, R6739 += 1, R6740 += 1 };
  s1 -> s1 [0, 65535] { R6816 += 1, R6740 += 1, R6696 += 1, R21 += 1 };
  s1 -> s6 [0, 65535] { R6816 += 1, R6740 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6816 += 1 };
  s2 -> s1 [0, 65535] { R6816 += 1, R6740 += 1, R6696 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R6816 += 1, R6740 += 1, R6695 += 1, R6696 += 1 };
  s2 -> s5 [0, 65535] { R6816 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6816 += 1, R6740 += 1, R6696 += 1, R21 += 1 };
  s3 -> s2 [0, 65535] { R6816 += 1, R6740 += 1, R6695 += 1, R6696 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6816 += 1, R6739 += 1, R6740 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6816 += 1 };
  s6 -> s6 [0, 65535] { R6816 += 1, R6740 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6816 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s0 -> s0 [0, 65535] { R6817 += 1, R6818 += 1 };
  s0 -> s2 [0, 65535] { R6818 += 1, R6742 += 1, R6697 += 1, R6698 += 1 };
  s0 -> s3 [0, 65535] { R6818 += 1, R6741 += 1, R6742 += 1 };
  s0 -> s4 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s0 -> s5 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s0 -> s6 [70, 70] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s0 -> s1 [71, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s1 -> s1 [0, 65] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s1 -> s4 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s1 -> s5 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s1 -> s6 [70, 70] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s1 -> s1 [71, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s2 -> s1 [0, 65] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s2 -> s2 [0, 65535] { R6818 += 1, R6742 += 1, R6697 += 1, R6698 += 1 };
  s2 -> s4 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s2 -> s5 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s2 -> s6 [70, 70] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s2 -> s1 [71, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s3 -> s1 [0, 65] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s3 -> s2 [0, 65535] { R6818 += 1, R6742 += 1, R6697 += 1, R6698 += 1 };
  s3 -> s3 [0, 65535] { R6818 += 1, R6741 += 1, R6742 += 1 };
  s3 -> s4 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s3 -> s5 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s3 -> s6 [70, 70] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s3 -> s1 [71, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s5 -> s5 [0, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s5 -> s10 [70, 70] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s5 -> s5 [71, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s6 -> s6 [0, 65] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s6 -> s7 [0, 65535] { R6818 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6818 += 1, R6742 += 1 };
  s6 -> s9 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s6 -> s10 [66, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s6 -> s6 [70, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s7 -> s7 [0, 65535] { R6818 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R6818 += 1, R6742 += 1 };
  s9 -> s7 [0, 65535] { R6818 += 1 };
  s9 -> s8 [0, 65535];
  s10 -> s10 [0, 66] { R6818 += 1, R6742 += 1, R6698 += 1 };
  s10 -> s7 [0, 65535] { R6818 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R6818 += 1, R6742 += 1 };
  s10 -> s10 [70, 65535] { R6818 += 1, R6742 += 1, R6698 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R6819 += 1, R6820 += 1 };
  s0 -> s2 [0, 65535] { R6820 += 1, R6744 += 1, R6699 += 1, R6700 += 1 };
  s0 -> s3 [0, 65535] { R6820 += 1, R6743 += 1, R6744 += 1 };
  s0 -> s4 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R6820 += 1, R6744 += 1 };
  s1 -> s6 [0, 65535] { R6820 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R6820 += 1, R6744 += 1, R6699 += 1, R6700 += 1 };
  s2 -> s6 [0, 65535] { R6820 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s3 -> s2 [0, 65535] { R6820 += 1, R6744 += 1, R6699 += 1, R6700 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R6820 += 1, R6743 += 1, R6744 += 1 };
  s3 -> s4 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s4 -> s4 [0, 65535] { R6820 += 1, R6744 += 1, R6700 += 1, R77 += 1 };
  s4 -> s6 [0, 65535] { R6820 += 1 };
  s4 -> s8 [0, 65535] { R6820 += 1, R6744 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R6820 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R6820 += 1, R6744 += 1 };
  s6 -> s6 [0, 65535] { R6820 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R6820 += 1 };
  s8 -> s8 [0, 65535] { R6820 += 1, R6744 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R6822 += 1, R6746 += 1, R6701 += 1, R6702 += 1 };
  s0 -> s0 [0, 65535] { R6821 += 1, R6822 += 1 };
  s0 -> s3 [0, 65535] { R6822 += 1, R6745 += 1, R6746 += 1 };
  s0 -> s4 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R6822 += 1, R6746 += 1 };
  s1 -> s7 [0, 65535] { R6822 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R6822 += 1, R6746 += 1, R6701 += 1, R6702 += 1 };
  s2 -> s7 [0, 65535] { R6822 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s4 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R6822 += 1, R6746 += 1, R6701 += 1, R6702 += 1 };
  s3 -> s3 [0, 65535] { R6822 += 1, R6745 += 1, R6746 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s4 -> s7 [0, 65535] { R6822 += 1 };
  s4 -> s4 [0, 65535] { R6822 += 1, R6746 += 1 };
  s4 -> s8 [0, 65535];
  s5 -> s6 [0, 65535] { R6822 += 1, R6746 += 1 };
  s5 -> s7 [0, 65535] { R6822 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6822 += 1, R6746 += 1, R6702 += 1, R79 += 1 };
  s6 -> s6 [0, 65535] { R6822 += 1, R6746 += 1 };
  s6 -> s7 [0, 65535] { R6822 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R6822 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R6824 += 1, R6747 += 1, R6748 += 1 };
  s0 -> s0 [0, 65535] { R6823 += 1, R6824 += 1 };
  s0 -> s3 [0, 65535] { R6824 += 1, R6748 += 1, R6703 += 1, R6704 += 1 };
  s0 -> s4 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6824 += 1, R6748 += 1 };
  s1 -> s7 [0, 65535] { R6824 += 1 };
  s1 -> s4 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R6824 += 1, R6747 += 1, R6748 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6824 += 1, R6748 += 1, R6703 += 1, R6704 += 1 };
  s2 -> s4 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6824 += 1, R6748 += 1, R6703 += 1, R6704 += 1 };
  s3 -> s7 [0, 65535] { R6824 += 1 };
  s3 -> s4 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6824 += 1, R6748 += 1, R6704 += 1, R81 += 1, R82 += 1 };
  s4 -> s8 [0, 65535] { R6824 += 1, R6748 += 1 };
  s4 -> s7 [0, 65535] { R6824 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6824 += 1, R6748 += 1 };
  s5 -> s7 [0, 65535] { R6824 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6824 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6824 += 1, R6748 += 1 };
  s8 -> s7 [0, 65535] { R6824 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s0 [0, 65535] { R6825 += 1, R6826 += 1 };
  s0 -> s3 [0, 65535] { R6826 += 1, R6749 += 1, R6750 += 1 };
  s0 -> s4 [0, 65535] { R6826 += 1, R6750 += 1, R6705 += 1, R6706 += 1 };
  s0 -> s5 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s6 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s7 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s8 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s1 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s1 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65535] { R6826 += 1, R6750 += 1 };
  s1 -> s10 [0, 65535];
  s1 -> s11 [0, 65535] { R6826 += 1 };
  s1 -> s5 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s6 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s1 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s5 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s6 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s7 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s8 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s1 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s3 [0, 65535] { R6826 += 1, R6749 += 1, R6750 += 1 };
  s3 -> s4 [0, 65535] { R6826 += 1, R6750 += 1, R6705 += 1, R6706 += 1 };
  s3 -> s5 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s6 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s7 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s8 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [0, 65] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s4 [0, 65535] { R6826 += 1, R6750 += 1, R6705 += 1, R6706 += 1 };
  s4 -> s5 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s6 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s7 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s8 [66, 66] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [67, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s5 -> s5 [0, 65535] { R6826 += 1, R6750 += 1 };
  s5 -> s10 [0, 65535];
  s5 -> s11 [0, 65535] { R6826 += 1 };
  s6 -> s9 [0, 65535] { R6826 += 1, R6750 += 1 };
  s6 -> s6 [0, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s10 [0, 65535];
  s6 -> s11 [0, 65535] { R6826 += 1 };
  s8 -> s6 [0, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6638 += 1, R6639 += 1 };
  s8 -> s8 [0, 65535] { R6826 += 1, R6750 += 1, R6706 += 1, R6637 += 1, R6638 += 1 };
  s9 -> s9 [0, 65535] { R6826 += 1, R6750 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R6826 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R6826 += 1 };
  accepting s5, s9, s6, s1, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s0 -> s2 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s3 [0, 65535] { R6828 += 1, R6752 += 1, R6707 += 1, R6708 += 1 };
  s0 -> s0 [0, 65535] { R6827 += 1, R6828 += 1 };
  s0 -> s4 [0, 65535] { R6828 += 1, R6751 += 1, R6752 += 1 };
  s0 -> s5 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s6 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s0 -> s7 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s0 -> s8 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s1 [67, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s0 -> s2 [67, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s9 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s0 -> s1 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s1 -> s1 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s1 -> s6 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s1 -> s7 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s1 -> s1 [67, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s1 -> s9 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s1 -> s1 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s2 -> s1 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s2 -> s2 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s5 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s6 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s2 -> s7 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s2 -> s8 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s1 [67, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s2 -> s2 [67, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s9 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s2 -> s1 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s3 -> s1 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s3 -> s2 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s3 [0, 65535] { R6828 += 1, R6752 += 1, R6707 += 1, R6708 += 1 };
  s3 -> s5 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s6 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s3 -> s7 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s3 -> s8 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s1 [67, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s3 -> s2 [67, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s9 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s3 -> s1 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s4 -> s1 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s4 -> s2 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s3 [0, 65535] { R6828 += 1, R6752 += 1, R6707 += 1, R6708 += 1 };
  s4 -> s4 [0, 65535] { R6828 += 1, R6751 += 1, R6752 += 1 };
  s4 -> s5 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s6 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s4 -> s7 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s4 -> s8 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s1 [67, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s4 -> s2 [67, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s9 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s4 -> s1 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s6 -> s6 [0, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s6 -> s13 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s6 -> s6 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s8 -> s6 [0, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s8 -> s8 [0, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6643 += 1, R6644 += 1 };
  s8 -> s13 [79, 79] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s8 -> s6 [80, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s9 -> s9 [0, 65] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R6828 += 1 };
  s9 -> s9 [0, 65535] { R6828 += 1, R6752 += 1 };
  s9 -> s12 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1 };
  s9 -> s13 [66, 66] { R6828 += 1, R6752 += 1, R6708 += 1 };
  s9 -> s9 [67, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s9 -> s9 [67, 65535] { R6828 += 1, R6752 += 1, R6708 += 1 };
  s9 -> s9 [79, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R6828 += 1 };
  s12 -> s12 [0, 65535] { R6828 += 1, R6752 += 1 };
  s12 -> s10 [0, 65535];
  s12 -> s11 [0, 65535] { R6828 += 1 };
  s13 -> s13 [0, 70] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s13 -> s13 [0, 65535] { R6828 += 1, R6752 += 1, R6708 += 1 };
  s13 -> s10 [0, 65535];
  s13 -> s11 [0, 65535] { R6828 += 1 };
  s13 -> s14 [0, 65535] { R6828 += 1, R6752 += 1 };
  s13 -> s13 [79, 65535] { R6828 += 1, R6752 += 1, R6708 += 1, R6644 += 1 };
  s14 -> s10 [0, 65535];
  s14 -> s11 [0, 65535] { R6828 += 1 };
  s14 -> s14 [0, 65535] { R6828 += 1, R6752 += 1 };
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s2 [0, 65535] { R6830 += 1, R6754 += 1, R6709 += 1, R6710 += 1 };
  s0 -> s3 [0, 65535] { R6830 += 1, R6753 += 1, R6754 += 1 };
  s0 -> s0 [0, 65535] { R6829 += 1, R6830 += 1 };
  s0 -> s4 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s5 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s1 [67, 65535] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s1 [0, 65] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R6830 += 1, R6754 += 1 };
  s1 -> s6 [0, 65535] { R6830 += 1 };
  s1 -> s4 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s5 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s1 [67, 65535] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s1 [0, 65] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s2 [0, 65535] { R6830 += 1, R6754 += 1, R6709 += 1, R6710 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s6 [0, 65535] { R6830 += 1 };
  s2 -> s4 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s5 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s1 [67, 65535] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s1 [0, 65] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s2 [0, 65535] { R6830 += 1, R6754 += 1, R6709 += 1, R6710 += 1 };
  s3 -> s3 [0, 65535] { R6830 += 1, R6753 += 1, R6754 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s4 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s5 [66, 66] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s1 [67, 65535] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s4 -> s4 [0, 65535] { R6830 += 1, R6754 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s6 [0, 65535] { R6830 += 1 };
  s5 -> s6 [0, 65535] { R6830 += 1 };
  s5 -> s7 [0, 65535] { R6830 += 1, R6754 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R6830 += 1, R6754 += 1, R6710 += 1, R6647 += 1, R6648 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R6830 += 1 };
  s7 -> s7 [0, 65535] { R6830 += 1, R6754 += 1 };
  s7 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R6830 += 1 };
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s0 -> s0 [0, 65535] { R6831 += 1, R6832 += 1 };
  s0 -> s2 [0, 65535] { R6832 += 1, R6756 += 1, R6711 += 1, R6712 += 1 };
  s0 -> s3 [0, 65535] { R6832 += 1, R6755 += 1, R6756 += 1 };
  s0 -> s4 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s0 -> s5 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s0 -> s1 [67, 65535] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s1 -> s1 [0, 65] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R6832 += 1 };
  s1 -> s1 [0, 65535] { R6832 += 1, R6756 += 1 };
  s1 -> s4 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s1 -> s5 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s1 -> s1 [67, 65535] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s2 -> s1 [0, 65] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s2 -> s2 [0, 65535] { R6832 += 1, R6756 += 1, R6711 += 1, R6712 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R6832 += 1 };
  s2 -> s4 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s2 -> s5 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s2 -> s1 [67, 65535] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s3 -> s1 [0, 65] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s3 -> s2 [0, 65535] { R6832 += 1, R6756 += 1, R6711 += 1, R6712 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6832 += 1, R6755 += 1, R6756 += 1 };
  s3 -> s4 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s3 -> s5 [66, 66] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s3 -> s1 [67, 65535] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s4 -> s4 [0, 65535] { R6832 += 1, R6756 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R6832 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6832 += 1 };
  s5 -> s5 [0, 65535] { R6832 += 1, R6756 += 1, R6712 += 1, R6653 += 1, R6654 += 1 };
  s5 -> s8 [0, 65535] { R6832 += 1, R6756 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6832 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R6832 += 1 };
  s8 -> s8 [0, 65535] { R6832 += 1, R6756 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R6756 && R3 - R6832 = 1 && R23 - R6756 = -1 && R24 = R6756 && R25 - R6756 = -1 && R26 = R6756 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R6832 && R32 - R6832 = 1 && R33 = R6832 && R34 - R6832 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R6646 + -1*R6644 - R64 = 0 && R63 + R6645 + R6643 = 0 && R6697 = 0 && R6698 = 0 && R6705 = 0 && R6706 = 0 && R6707 = 0 && R6708 = 0 && R6713 = 0 && R6714 = R6756 && R6715 = 0 && R6716 = R6756 && R6717 = 0 && R6718 = R6756 && R6719 = 0 && R6720 = R6756 && R6721 = 0 && R6722 = R6756 && R6723 = 0 && R6724 = R6756 && R6725 = 0 && R6726 = R6756 && R6727 = 0 && R6728 = R6756 && R6729 = 0 && R6730 = R6756 && R6731 = 0 && R6732 = R6756 && R6733 = 0 && R6734 = R6756 && R6735 = 0 && R6736 = R6756 && R6737 = 0 && R6738 = R6756 && R6739 = 0 && R6740 = R6756 && R6741 = 0 && R6742 = R6756 && R6743 = 0 && R6744 = R6756 && R6745 = 0 && R6746 = R6756 && R6747 = 0 && R6748 = R6756 && R6749 = 0 && R6750 = R6756 && R6751 = 0 && R6752 = R6756 && R6753 = 0 && R6754 = R6756 && R6755 = 0 && R6757 = 0 && R6758 = R6832 && R6759 = 0 && R6760 = R6832 && R6761 = 0 && R6762 = R6832 && R6763 = 0 && R6764 = R6832 && R6765 = 0 && R6766 = R6832 && R6767 = 0 && R6768 = R6832 && R6769 = 0 && R6770 = R6832 && R6771 = 0 && R6772 = R6832 && R6773 = 0 && R6774 = R6832 && R6775 = 0 && R6776 = R6832 && R6777 = 0 && R6778 = R6832 && R6779 = 0 && R6780 = R6832 && R6781 = 0 && R6782 = R6832 && R6783 = 0 && R6784 = R6832 && R6785 = 0 && R6786 = R6832 && R6787 = 0 && R6788 = R6832 && R6789 = 0 && R6790 = R6832 && R6791 = 0 && R6792 = R6832 && R6793 = 0 && R6794 = R6832 && R6795 = 0 && R6796 = R6832 && R6797 = 0 && R6798 = R6832 && R6799 = 0 && R6800 = R6832 && R6801 = 0 && R6802 = R6832 && R6803 = 0 && R6804 = R6832 && R6805 = 0 && R6806 = R6832 && R6807 = 0 && R6808 = R6832 && R6809 = 0 && R6810 = R6832 && R6811 = 0 && R6812 = R6832 && R6813 = 0 && R6814 = R6832 && R6815 = 0 && R6816 = R6832 && R6817 = 0 && R6818 = R6832 && R6819 = 0 && R6820 = R6832 && R6821 = 0 && R6822 = R6832 && R6823 = 0 && R6824 = R6832 && R6825 = 0 && R6826 = R6832 && R6827 = 0 && R6828 = R6832 && R6829 = 0 && R6830 = R6832 && R6831 = 0 && -1 < R1 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R6646 + -1*R6644 - R64 < 1 && 0 < R6756 && -1 < R6832 && (R1 != 0 || R20 = 0 || (R6657 = 0 && R6658 = 0)) && (R1 != 0 || R20 = 0 || (R6659 = 0 && R6660 = 0)) && (R1 != 0 || R20 = 0 || (R6661 = 0 && R6662 = 0)) && (R1 != 0 || R20 = 0 || (R6663 = 0 && R6664 = 0)) && (R1 != 0 || R20 = 0 || (R6665 = 0 && R6666 = 0)) && (R1 != 0 || R20 = 0 || (R6667 = 0 && R6668 = 0)) && (R1 != 0 || R20 = 0 || (R6669 = 0 && R6670 = 0)) && (R1 != 0 || R20 = 0 || (R6671 = 0 && R6672 = 0)) && (R1 != 0 || R20 = 0 || (R6673 = 0 && R6674 = 0)) && (R1 != 0 || R20 = 0 || (R6675 = 0 && R6676 = 0)) && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R6646 + -1*R6644 - R64 = 0 || R64 + R6646 + R6644 < 1) && (R53 + R83 + R81 = 0 || R64 + R6646 + R6644 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R6646 + -1*R6644 - R64 = 0 || R64 + R6646 + R6644 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R6646 + R6644 < 1))) && (R6657 != 0 || R1 = R6658 || R1 < 1) && (R6659 != 0 || R1 = R6660 || R1 < 1) && (R6661 != 0 || R1 = R6662 || R1 < 1) && (R6663 != 0 || R1 = R6664 || R1 < 1) && (R6665 != 0 || R1 = R6666 || R1 < 1) && (R6667 != 0 || R1 = R6668 || R1 < 1) && (R6669 != 0 || R1 = R6670 || R1 < 1) && (R6671 != 0 || R1 = R6672 || R1 < 1) && (R6673 != 0 || R1 = R6674 || R1 < 1) && (R6675 != 0 || R1 = R6676 || R1 < 1) && (R21 = 0 || (R6695 = 0 && R6696 = 0)) && (R21 = 0 || (R6699 = 0 && R6700 = 0)) && (R21 = 0 || (R6701 = 0 && R6702 = 0)) && (R21 = 0 || (R6703 = 0 && R6704 = 0)) && (R21 = 0 || (R6709 = 0 && R6710 = 0)) && (R21 = 0 || (R6711 = 0 && R6712 = 0)) && (R22 = 0 || (R6677 = 0 && R6678 = 0)) && (R22 = 0 || (R6679 = 0 && R6680 = 0)) && (R22 = 0 || (R6681 = 0 && R6682 = 0)) && (R22 = 0 || (R6683 = 0 && R6684 = 0)) && (R22 = 0 || (R6685 = 0 && R6686 = 0)) && (R22 = 0 || (R6687 = 0 && R6688 = 0)) && (R22 = 0 || (R6689 = 0 && R6690 = 0)) && (R22 = 0 || (R6691 = 0 && R6692 = 0)) && (R22 = 0 || (R6693 = 0 && R6694 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R6646 + -1*R6644 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R6646 + -1*R6644 - R64 = 0)) && (R69 + R6652 + R6649 = 0 || (R67 + R6650 + R6647 = 0 && R68 + R6651 + R6648 = 0)) && (R69 + R6652 + R6649 = 0 || (R73 + R6655 + R6653 = 0 && R74 + R6656 + R6654 = 0)) && (R6657 = 0 || R1 < 1) && (R6659 = 0 || R1 < 1) && (R6661 = 0 || R1 < 1) && (R6663 = 0 || R1 < 1) && (R6665 = 0 || R1 < 1) && (R6667 = 0 || R1 < 1) && (R6669 = 0 || R1 < 1) && (R6671 = 0 || R1 < 1) && (R6673 = 0 || R1 < 1) && (R6675 = 0 || R1 < 1);
// End of Parikh automata intersection problem
