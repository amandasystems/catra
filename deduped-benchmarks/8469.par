// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R125, R126, R127, R128, R129, R13, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R17, R170, R171, R172, R173, R174, R175, R176, R177, R178, R179, R18, R180, R181, R182, R183, R184, R185, R186, R187, R188, R189, R190, R191, R192, R193, R194, R195, R196, R197, R198, R199, R2, R200, R201, R202, R203, R204, R205, R206, R207, R208, R209, R210, R211, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R3, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R18 += 1 };
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R18 += 1 };
  s1 -> s1 [0, 60] { R18 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R18 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R162 += 1 };
  s0 -> s0 [0, 65535] { R161 += 1, R162 += 1 };
  s0 -> s2 [72, 72] { R162 += 1 };
  s0 -> s1 [73, 65535] { R162 += 1 };
  s1 -> s1 [0, 64] { R162 += 1 };
  s1 -> s2 [72, 72] { R162 += 1 };
  s1 -> s1 [73, 65535] { R162 += 1 };
  s2 -> s2 [0, 64] { R162 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [72, 65535] { R162 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R163 += 1, R164 += 1 };
  s0 -> s1 [0, 65535] { R164 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R164 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 8] { R166 += 1, R128 += 1 };
  s0 -> s0 [0, 65535] { R165 += 1, R166 += 1 };
  s0 -> s2 [0, 65535] { R166 += 1, R127 += 1, R128 += 1 };
  s0 -> s3 [9, 13] { R166 += 1, R128 += 1 };
  s0 -> s1 [14, 31] { R166 += 1, R128 += 1 };
  s0 -> s3 [32, 32] { R166 += 1, R128 += 1 };
  s0 -> s1 [33, 65535] { R166 += 1, R128 += 1 };
  s1 -> s1 [0, 65535] { R166 += 1, R128 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R166 += 1 };
  s2 -> s1 [0, 8] { R166 += 1, R128 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R166 += 1, R127 += 1, R128 += 1 };
  s2 -> s3 [9, 13] { R166 += 1, R128 += 1 };
  s2 -> s1 [14, 31] { R166 += 1, R128 += 1 };
  s2 -> s3 [32, 32] { R166 += 1, R128 += 1 };
  s2 -> s1 [33, 65535] { R166 += 1, R128 += 1 };
  s3 -> s1 [0, 65535] { R166 += 1, R128 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R166 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R167 += 1, R168 += 1 };
  s0 -> s1 [0, 65535] { R168 += 1, R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R168 += 1, R130 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R168 += 1, R129 += 1, R130 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R168 += 1, R130 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R168 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R168 += 1, R130 += 1, R5 += 1 };
  s3 -> s3 [0, 65535] { R168 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R170 += 1, R132 += 1 };
  s0 -> s0 [0, 65535] { R169 += 1, R170 += 1 };
  s0 -> s2 [0, 65535] { R170 += 1, R131 += 1, R132 += 1 };
  s0 -> s3 [9, 13] { R170 += 1, R132 += 1 };
  s0 -> s1 [14, 31] { R170 += 1, R132 += 1 };
  s0 -> s3 [32, 32] { R170 += 1, R132 += 1 };
  s0 -> s1 [33, 65535] { R170 += 1, R132 += 1 };
  s1 -> s5 [0, 65535] { R170 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R170 += 1, R132 += 1 };
  s2 -> s1 [0, 8] { R170 += 1, R132 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R170 += 1, R131 += 1, R132 += 1 };
  s2 -> s3 [9, 13] { R170 += 1, R132 += 1 };
  s2 -> s1 [14, 31] { R170 += 1, R132 += 1 };
  s2 -> s3 [32, 32] { R170 += 1, R132 += 1 };
  s2 -> s1 [33, 65535] { R170 += 1, R132 += 1 };
  s3 -> s1 [0, 65535] { R170 += 1, R132 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R170 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R172 += 1, R133 += 1, R134 += 1 };
  s0 -> s2 [0, 65535] { R172 += 1, R134 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R171 += 1, R172 += 1 };
  s1 -> s1 [0, 65535] { R172 += 1, R133 += 1, R134 += 1 };
  s1 -> s2 [0, 65535] { R172 += 1, R134 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R172 += 1, R134 += 1, R6 += 1 };
  s2 -> s3 [0, 65535] { R172 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R172 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R202 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R201 += 1, R202 += 1 };
  s1 -> s1 [0, 65535] { R202 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_10 {
  init s0;
  s0 -> s0 [0, 65535] { R203 += 1, R204 += 1 };
  s0 -> s1 [0, 65535] { R204 += 1, R151 += 1, R152 += 1 };
  s0 -> s2 [10, 10] { R204 += 1, R152 += 1 };
  s1 -> s1 [0, 65535] { R204 += 1, R151 += 1, R152 += 1 };
  s1 -> s2 [10, 10] { R204 += 1, R152 += 1 };
  s2 -> s2 [0, 65535] { R204 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R205 += 1, R206 += 1 };
  s0 -> s1 [0, 65535] { R206 += 1, R153 += 1, R154 += 1 };
  s0 -> s2 [0, 65535] { R206 += 1, R154 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R206 += 1, R153 += 1, R154 += 1 };
  s1 -> s2 [0, 65535] { R206 += 1, R154 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R206 += 1 };
  s2 -> s2 [0, 65535] { R206 += 1, R154 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R206 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R208 += 1, R178 += 1 };
  s0 -> s2 [0, 65535] { R208 += 1, R177 += 1, R178 += 1 };
  s0 -> s0 [0, 65535] { R207 += 1, R208 += 1 };
  s0 -> s3 [67, 67] { R208 += 1, R178 += 1 };
  s0 -> s1 [68, 65535] { R208 += 1, R178 += 1 };
  s1 -> s1 [0, 64] { R208 += 1, R178 += 1 };
  s1 -> s3 [67, 67] { R208 += 1, R178 += 1 };
  s1 -> s1 [68, 65535] { R208 += 1, R178 += 1 };
  s2 -> s1 [0, 64] { R208 += 1, R178 += 1 };
  s2 -> s2 [0, 65535] { R208 += 1, R177 += 1, R178 += 1 };
  s2 -> s3 [67, 67] { R208 += 1, R178 += 1 };
  s2 -> s1 [68, 65535] { R208 += 1, R178 += 1 };
  s3 -> s3 [0, 64] { R208 += 1, R178 += 1 };
  s3 -> s3 [0, 65535] { R208 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [67, 65535] { R208 += 1, R178 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R209 += 1, R210 += 1 };
  s0 -> s1 [0, 65535] { R210 += 1, R180 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R210 += 1, R179 += 1, R180 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R210 += 1, R180 += 1, R2 += 1 };
  s1 -> s4 [0, 65535] { R210 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R210 += 1, R180 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R210 += 1, R179 += 1, R180 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R210 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 66] { R212 += 1, R182 += 1 };
  s0 -> s0 [0, 65535] { R211 += 1, R212 += 1 };
  s0 -> s2 [0, 65535] { R212 += 1, R182 += 1, R13 += 1 };
  s0 -> s3 [0, 65535] { R212 += 1, R181 += 1, R182 += 1 };
  s0 -> s4 [67, 67] { R212 += 1, R182 += 1 };
  s0 -> s1 [68, 65535] { R212 += 1, R182 += 1 };
  s1 -> s1 [0, 66] { R212 += 1, R182 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R212 += 1 };
  s1 -> s4 [67, 67] { R212 += 1, R182 += 1 };
  s1 -> s1 [68, 65535] { R212 += 1, R182 += 1 };
  s2 -> s1 [0, 66] { R212 += 1, R182 += 1 };
  s2 -> s2 [0, 65535] { R212 += 1, R182 += 1, R13 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R212 += 1 };
  s2 -> s4 [67, 67] { R212 += 1, R182 += 1 };
  s2 -> s1 [68, 65535] { R212 += 1, R182 += 1 };
  s3 -> s1 [0, 66] { R212 += 1, R182 += 1 };
  s3 -> s2 [0, 65535] { R212 += 1, R182 += 1, R13 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R212 += 1, R181 += 1, R182 += 1 };
  s3 -> s4 [67, 67] { R212 += 1, R182 += 1 };
  s3 -> s1 [68, 65535] { R212 += 1, R182 += 1 };
  s4 -> s4 [0, 65535] { R212 += 1, R182 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R212 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R214 += 1, R184 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R214 += 1, R183 += 1, R184 += 1 };
  s0 -> s3 [0, 65535] { R214 += 1, R184 += 1, R143 += 1, R144 += 1 };
  s0 -> s0 [0, 65535] { R213 += 1, R214 += 1 };
  s0 -> s4 [9, 13] { R214 += 1, R184 += 1, R144 += 1 };
  s0 -> s1 [14, 31] { R214 += 1, R184 += 1, R144 += 1 };
  s0 -> s4 [32, 32] { R214 += 1, R184 += 1, R144 += 1 };
  s0 -> s1 [33, 65535] { R214 += 1, R184 += 1, R144 += 1 };
  s1 -> s7 [0, 65535] { R214 += 1, R184 += 1 };
  s1 -> s1 [0, 65535] { R214 += 1, R184 += 1, R144 += 1 };
  s1 -> s5 [0, 65535] { R214 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R214 += 1, R184 += 1, R144 += 1 };
  s2 -> s2 [0, 65535] { R214 += 1, R183 += 1, R184 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R214 += 1, R184 += 1, R143 += 1, R144 += 1 };
  s2 -> s4 [9, 13] { R214 += 1, R184 += 1, R144 += 1 };
  s2 -> s1 [14, 31] { R214 += 1, R184 += 1, R144 += 1 };
  s2 -> s4 [32, 32] { R214 += 1, R184 += 1, R144 += 1 };
  s2 -> s1 [33, 65535] { R214 += 1, R184 += 1, R144 += 1 };
  s3 -> s1 [0, 8] { R214 += 1, R184 += 1, R144 += 1 };
  s3 -> s5 [0, 65535] { R214 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R214 += 1, R184 += 1, R143 += 1, R144 += 1 };
  s3 -> s4 [9, 13] { R214 += 1, R184 += 1, R144 += 1 };
  s3 -> s1 [14, 31] { R214 += 1, R184 += 1, R144 += 1 };
  s3 -> s4 [32, 32] { R214 += 1, R184 += 1, R144 += 1 };
  s3 -> s1 [33, 65535] { R214 += 1, R184 += 1, R144 += 1 };
  s4 -> s1 [0, 65535] { R214 += 1, R184 += 1, R144 += 1 };
  s5 -> s5 [0, 65535] { R214 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R214 += 1, R184 += 1 };
  s7 -> s5 [0, 65535] { R214 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R215 += 1, R216 += 1 };
  s0 -> s1 [0, 65535] { R216 += 1, R185 += 1, R186 += 1 };
  s0 -> s2 [0, 65535] { R216 += 1, R186 += 1, R146 += 1, R9 += 1 };
  s0 -> s3 [0, 65535] { R216 += 1, R186 += 1, R145 += 1, R146 += 1 };
  s1 -> s1 [0, 65535] { R216 += 1, R185 += 1, R186 += 1 };
  s1 -> s2 [0, 65535] { R216 += 1, R186 += 1, R146 += 1, R9 += 1 };
  s1 -> s3 [0, 65535] { R216 += 1, R186 += 1, R145 += 1, R146 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s4 [0, 65535] { R216 += 1 };
  s2 -> s2 [0, 65535] { R216 += 1, R186 += 1, R146 += 1, R9 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R216 += 1, R186 += 1 };
  s3 -> s4 [0, 65535] { R216 += 1 };
  s3 -> s2 [0, 65535] { R216 += 1, R186 += 1, R146 += 1, R9 += 1 };
  s3 -> s3 [0, 65535] { R216 += 1, R186 += 1, R145 += 1, R146 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R216 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R216 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R216 += 1, R186 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R218 += 1, R188 += 1, R148 += 1 };
  s0 -> s2 [0, 65535] { R218 += 1, R187 += 1, R188 += 1 };
  s0 -> s0 [0, 65535] { R217 += 1, R218 += 1 };
  s0 -> s3 [0, 65535] { R218 += 1, R188 += 1, R147 += 1, R148 += 1 };
  s0 -> s4 [9, 13] { R218 += 1, R188 += 1, R148 += 1 };
  s0 -> s1 [14, 31] { R218 += 1, R188 += 1, R148 += 1 };
  s0 -> s4 [32, 32] { R218 += 1, R188 += 1, R148 += 1 };
  s0 -> s1 [33, 65535] { R218 += 1, R188 += 1, R148 += 1 };
  s1 -> s1 [0, 65535] { R218 += 1, R188 += 1, R148 += 1 };
  s1 -> s5 [0, 65535] { R218 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R218 += 1, R188 += 1 };
  s2 -> s1 [0, 8] { R218 += 1, R188 += 1, R148 += 1 };
  s2 -> s2 [0, 65535] { R218 += 1, R187 += 1, R188 += 1 };
  s2 -> s3 [0, 65535] { R218 += 1, R188 += 1, R147 += 1, R148 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R218 += 1, R188 += 1, R148 += 1 };
  s2 -> s1 [14, 31] { R218 += 1, R188 += 1, R148 += 1 };
  s2 -> s4 [32, 32] { R218 += 1, R188 += 1, R148 += 1 };
  s2 -> s1 [33, 65535] { R218 += 1, R188 += 1, R148 += 1 };
  s3 -> s1 [0, 8] { R218 += 1, R188 += 1, R148 += 1 };
  s3 -> s5 [0, 65535] { R218 += 1 };
  s3 -> s3 [0, 65535] { R218 += 1, R188 += 1, R147 += 1, R148 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R218 += 1, R188 += 1, R148 += 1 };
  s3 -> s1 [14, 31] { R218 += 1, R188 += 1, R148 += 1 };
  s3 -> s4 [32, 32] { R218 += 1, R188 += 1, R148 += 1 };
  s3 -> s1 [33, 65535] { R218 += 1, R188 += 1, R148 += 1 };
  s4 -> s1 [0, 65535] { R218 += 1, R188 += 1, R148 += 1 };
  s5 -> s5 [0, 65535] { R218 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R218 += 1 };
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R218 += 1, R188 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R219 += 1, R220 += 1 };
  s0 -> s1 [0, 65535] { R220 += 1, R190 += 1, R150 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R220 += 1, R190 += 1, R149 += 1, R150 += 1 };
  s0 -> s3 [0, 65535] { R220 += 1, R189 += 1, R190 += 1 };
  s1 -> s6 [0, 65535] { R220 += 1, R190 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R220 += 1, R190 += 1, R150 += 1, R10 += 1 };
  s1 -> s5 [0, 65535] { R220 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R220 += 1, R190 += 1, R150 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R220 += 1, R190 += 1, R149 += 1, R150 += 1 };
  s2 -> s5 [0, 65535] { R220 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R220 += 1, R190 += 1, R150 += 1, R10 += 1 };
  s3 -> s2 [0, 65535] { R220 += 1, R190 += 1, R149 += 1, R150 += 1 };
  s3 -> s3 [0, 65535] { R220 += 1, R189 += 1, R190 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R220 += 1 };
  s6 -> s6 [0, 65535] { R220 += 1, R190 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R220 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 66] { R222 += 1, R192 += 1, R156 += 1 };
  s0 -> s2 [0, 65535] { R222 += 1, R191 += 1, R192 += 1 };
  s0 -> s0 [0, 65535] { R221 += 1, R222 += 1 };
  s0 -> s3 [0, 65535] { R222 += 1, R192 += 1, R155 += 1, R156 += 1 };
  s0 -> s1 [68, 65535] { R222 += 1, R192 += 1, R156 += 1 };
  s1 -> s1 [0, 66] { R222 += 1, R192 += 1, R156 += 1 };
  s1 -> s4 [0, 65535] { R222 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R222 += 1, R192 += 1 };
  s1 -> s1 [68, 65535] { R222 += 1, R192 += 1, R156 += 1 };
  s2 -> s1 [0, 66] { R222 += 1, R192 += 1, R156 += 1 };
  s2 -> s2 [0, 65535] { R222 += 1, R191 += 1, R192 += 1 };
  s2 -> s3 [0, 65535] { R222 += 1, R192 += 1, R155 += 1, R156 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [68, 65535] { R222 += 1, R192 += 1, R156 += 1 };
  s3 -> s1 [0, 66] { R222 += 1, R192 += 1, R156 += 1 };
  s3 -> s4 [0, 65535] { R222 += 1 };
  s3 -> s3 [0, 65535] { R222 += 1, R192 += 1, R155 += 1, R156 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [68, 65535] { R222 += 1, R192 += 1, R156 += 1 };
  s4 -> s4 [0, 65535] { R222 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R224 += 1, R194 += 1, R157 += 1, R158 += 1 };
  s0 -> s2 [0, 65535] { R224 += 1, R193 += 1, R194 += 1 };
  s0 -> s3 [0, 65535] { R224 += 1, R194 += 1, R158 += 1, R125 += 1 };
  s0 -> s0 [0, 65535] { R223 += 1, R224 += 1 };
  s1 -> s1 [0, 65535] { R224 += 1, R194 += 1, R157 += 1, R158 += 1 };
  s1 -> s3 [0, 65535] { R224 += 1, R194 += 1, R158 += 1, R125 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R224 += 1 };
  s2 -> s1 [0, 65535] { R224 += 1, R194 += 1, R157 += 1, R158 += 1 };
  s2 -> s2 [0, 65535] { R224 += 1, R193 += 1, R194 += 1 };
  s2 -> s3 [0, 65535] { R224 += 1, R194 += 1, R158 += 1, R125 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R224 += 1, R194 += 1, R158 += 1, R125 += 1 };
  s3 -> s4 [0, 65535] { R224 += 1, R194 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R224 += 1 };
  s4 -> s4 [0, 65535] { R224 += 1, R194 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R224 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R224 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 67] { R226 += 1, R196 += 1, R160 += 1 };
  s0 -> s2 [0, 65535] { R226 += 1, R196 += 1, R159 += 1, R160 += 1 };
  s0 -> s3 [0, 65535] { R226 += 1, R195 += 1, R196 += 1 };
  s0 -> s0 [0, 65535] { R225 += 1, R226 += 1 };
  s0 -> s1 [91, 65535] { R226 += 1, R196 += 1, R160 += 1 };
  s1 -> s1 [0, 67] { R226 += 1, R196 += 1, R160 += 1 };
  s1 -> s5 [0, 65535] { R226 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R226 += 1, R196 += 1 };
  s1 -> s1 [91, 65535] { R226 += 1, R196 += 1, R160 += 1 };
  s2 -> s1 [0, 67] { R226 += 1, R196 += 1, R160 += 1 };
  s2 -> s2 [0, 65535] { R226 += 1, R196 += 1, R159 += 1, R160 += 1 };
  s2 -> s5 [0, 65535] { R226 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [91, 65535] { R226 += 1, R196 += 1, R160 += 1 };
  s3 -> s1 [0, 67] { R226 += 1, R196 += 1, R160 += 1 };
  s3 -> s2 [0, 65535] { R226 += 1, R196 += 1, R159 += 1, R160 += 1 };
  s3 -> s3 [0, 65535] { R226 += 1, R195 += 1, R196 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [91, 65535] { R226 += 1, R196 += 1, R160 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R226 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R228 += 1, R197 += 1, R198 += 1 };
  s0 -> s2 [0, 65535] { R228 += 1, R198 += 1, R174 += 1, R126 += 1 };
  s0 -> s3 [0, 65535] { R228 += 1, R198 += 1, R173 += 1, R174 += 1 };
  s0 -> s0 [0, 65535] { R227 += 1, R228 += 1 };
  s1 -> s1 [0, 65535] { R228 += 1, R197 += 1, R198 += 1 };
  s1 -> s2 [0, 65535] { R228 += 1, R198 += 1, R174 += 1, R126 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R228 += 1, R198 += 1, R173 += 1, R174 += 1 };
  s2 -> s6 [0, 65535] { R228 += 1, R198 += 1 };
  s2 -> s4 [0, 65535] { R228 += 1 };
  s2 -> s2 [0, 65535] { R228 += 1, R198 += 1, R174 += 1, R126 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R228 += 1 };
  s3 -> s2 [0, 65535] { R228 += 1, R198 += 1, R174 += 1, R126 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R228 += 1, R198 += 1, R173 += 1, R174 += 1 };
  s4 -> s4 [0, 65535] { R228 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R228 += 1, R198 += 1 };
  s6 -> s4 [0, 65535] { R228 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 66] { R230 += 1, R200 += 1, R176 += 1 };
  s0 -> s2 [0, 65535] { R230 += 1, R199 += 1, R200 += 1 };
  s0 -> s3 [0, 65535] { R230 += 1, R200 += 1, R175 += 1, R176 += 1 };
  s0 -> s0 [0, 65535] { R229 += 1, R230 += 1 };
  s0 -> s4 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s0 -> s5 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s0 -> s1 [91, 65535] { R230 += 1, R200 += 1, R176 += 1 };
  s1 -> s1 [0, 66] { R230 += 1, R200 += 1, R176 += 1 };
  s1 -> s6 [0, 65535] { R230 += 1 };
  s1 -> s1 [0, 65535] { R230 += 1, R200 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s1 -> s5 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s1 -> s1 [91, 65535] { R230 += 1, R200 += 1, R176 += 1 };
  s2 -> s1 [0, 66] { R230 += 1, R200 += 1, R176 += 1 };
  s2 -> s2 [0, 65535] { R230 += 1, R199 += 1, R200 += 1 };
  s2 -> s3 [0, 65535] { R230 += 1, R200 += 1, R175 += 1, R176 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s2 -> s5 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s2 -> s1 [91, 65535] { R230 += 1, R200 += 1, R176 += 1 };
  s3 -> s1 [0, 66] { R230 += 1, R200 += 1, R176 += 1 };
  s3 -> s3 [0, 65535] { R230 += 1, R200 += 1, R175 += 1, R176 += 1 };
  s3 -> s6 [0, 65535] { R230 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s3 -> s5 [67, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s3 -> s1 [91, 65535] { R230 += 1, R200 += 1, R176 += 1 };
  s4 -> s4 [0, 67] { R230 += 1, R200 += 1, R176 += 1 };
  s4 -> s4 [0, 65535] { R230 += 1, R200 += 1 };
  s4 -> s6 [0, 65535] { R230 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [91, 65535] { R230 += 1, R200 += 1, R176 += 1 };
  s5 -> s6 [0, 65535] { R230 += 1 };
  s5 -> s5 [0, 65535] { R230 += 1, R200 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R230 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
};
synchronised {  // Automata constraining c5
automaton c5_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R12 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R136 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s2 [9, 13] { R136 += 1 };
  s0 -> s1 [14, 31] { R136 += 1 };
  s0 -> s2 [32, 32] { R136 += 1 };
  s0 -> s1 [33, 65535] { R136 += 1 };
  s1 -> s1 [0, 65535] { R136 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R136 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s0 -> s1 [0, 65535] { R138 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R138 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R140 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s2 [9, 13] { R140 += 1 };
  s0 -> s1 [14, 31] { R140 += 1 };
  s0 -> s2 [32, 32] { R140 += 1 };
  s0 -> s1 [33, 65535] { R140 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R140 += 1 };
  s2 -> s1 [0, 65535] { R140 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R142 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R142 += 1, R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R160 && R3 = R200 && R4 = R172 && R17 = 0 && R18 = R230 && R143 - R160 = -1 && R144 = R160 && R145 - R160 = -1 && R146 = R160 && R147 = 0 && R148 = 1 && R149 = 0 && R150 = 1 && R151 = 0 && R152 = 1 && R153 = 0 && R154 = 1 && R155 = 0 && R156 = R160 && R157 = 0 && R158 = R160 && R159 = 0 && R161 - R230 = 1 && R162 = R172 && R163 - R230 = 1 && R164 = R172 && R165 - R230 = 1 && R166 = R172 && R167 - R230 = 1 && R168 = R172 && R169 - R230 = 1 && R170 = R172 && R171 - R230 = 1 && R177 = 1 && R178 = R200 && R179 = 1 && R180 = R200 && R181 = 1 && R182 = R200 && R183 = 1 && R184 = R200 && R185 = 1 && R186 = R200 && R187 = 1 && R188 = R200 && R189 = 1 && R190 = R200 && R191 = 1 && R192 = R200 && R193 = 1 && R194 = R200 && R195 = 1 && R196 = R200 && R197 = 1 && R198 = R200 && R199 = 1 && R201 = 0 && R202 = R230 && R203 = 0 && R204 = R230 && R205 = 0 && R206 = R230 && R207 = 0 && R208 = R230 && R209 = 0 && R210 = R230 && R211 = 0 && R212 = R230 && R213 = 0 && R214 = R230 && R215 = 0 && R216 = R230 && R217 = 0 && R218 = R230 && R219 = 0 && R220 = R230 && R221 = 0 && R222 = R230 && R223 = 0 && R224 = R230 && R225 = 0 && R226 = R230 && R227 = 0 && R228 = R230 && R229 = 0 && R0 != 0 && R1 != 0 && R12 < 1 && R13 < 1 && 0 < R160 && R230 < R172 && 0 < R200 && -1 < R230 && (R5 != 0 || ((R0 != R128 || R127 - R128 = -1 || R128 < 0) && (R0 = R128 || R0 < 1))) && (R5 != 0 || ((R0 != R130 || R129 - R130 = -1 || R130 < 0) && (R0 = R130 || R0 < 1))) && (R7 != 0 || ((R1 != R136 || R135 - R136 = -1 || R136 < 0) && (R1 = R136 || R1 < 1))) && (R7 != 0 || ((R1 != R138 || R137 - R138 = -1 || R138 < 0) && (R1 = R138 || R1 < 1))) && (R131 != 0 || ((R6 != 0 || ((R0 != R132 || R132 = 1 || R132 < 0) && (R0 = R132 || R132 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R132 || R132 = 1 || R132 < 0) && (R132 != 1 || -1 < R0) && (R0 = R132 || R132 = 1))))) && (R133 != 0 || ((R6 != 0 || ((R0 != R134 || R134 = 1 || R134 < 0) && (R0 = R134 || R134 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R134 || R134 = 1 || R134 < 0) && (R134 != 1 || -1 < R0) && (R0 = R134 || R134 = 1))))) && (R139 != 0 || ((R8 != 0 || ((R1 != R140 || R140 = 1 || R140 < 0) && (R1 = R140 || R140 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R140 || R140 = 1 || R140 < 0) && (R140 != 1 || -1 < R1) && (R1 = R140 || R140 = 1))))) && (R141 != 0 || ((R8 != 0 || ((R1 != R142 || R142 = 1 || R142 < 0) && (R1 = R142 || R142 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R142 || R142 = 1 || R142 < 0) && (R142 != 1 || -1 < R1) && (R1 = R142 || R142 = 1))))) && (R5 = 0 || (R0 = R128 && R127 - R128 = -1)) && (R5 = 0 || (R0 = R130 && R129 - R130 = -1)) && (R7 = 0 || (R1 = R136 && R135 - R136 = -1)) && (R7 = 0 || (R1 = R138 && R137 - R138 = -1)) && (R126 = 0 || (R173 = 0 && R174 = 0)) && (R126 = 0 || (R175 = 0 && R176 = 0)) && (R131 = 0 || (R6 = 0 && R0 < 0)) && (R133 = 0 || (R6 = 0 && R0 < 0)) && (R139 = 0 || (R8 = 0 && R1 < 0)) && (R141 = 0 || (R8 = 0 && R1 < 0));
// End of Parikh automata intersection problem
