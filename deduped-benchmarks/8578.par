// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R15, R16, R199, R2, R200, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R200 += 1 };
  s0 -> s0 [0, 65535] { R199 += 1, R200 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R200 += 1 };
  s1 -> s1 [0, 60] { R200 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R200 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 64] { R340 += 1 };
  s0 -> s0 [0, 65535] { R339 += 1, R340 += 1 };
  s0 -> s2 [75, 75] { R340 += 1 };
  s0 -> s1 [76, 65535] { R340 += 1 };
  s1 -> s1 [0, 64] { R340 += 1 };
  s1 -> s2 [75, 75] { R340 += 1 };
  s1 -> s1 [76, 65535] { R340 += 1 };
  s2 -> s2 [0, 64] { R340 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R340 += 1 };
  accepting s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R341 += 1, R342 += 1 };
  s0 -> s1 [0, 65535] { R342 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R342 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 74] { R344 += 1, R16 += 1 };
  s0 -> s0 [0, 65535] { R343 += 1, R344 += 1 };
  s0 -> s2 [0, 65535] { R344 += 1, R15 += 1, R16 += 1 };
  s0 -> s3 [75, 75] { R344 += 1 };
  s0 -> s1 [76, 65535] { R344 += 1, R16 += 1 };
  s1 -> s1 [0, 74] { R344 += 1, R16 += 1 };
  s1 -> s3 [75, 75] { R344 += 1 };
  s1 -> s1 [76, 65535] { R344 += 1, R16 += 1 };
  s2 -> s1 [0, 74] { R344 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R344 += 1, R15 += 1, R16 += 1 };
  s2 -> s3 [75, 75] { R344 += 1 };
  s2 -> s1 [76, 65535] { R344 += 1, R16 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R344 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 8] { R346 += 1, R308 += 1 };
  s0 -> s2 [0, 65535] { R346 += 1, R307 += 1, R308 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s3 [9, 13] { R346 += 1, R308 += 1 };
  s0 -> s1 [14, 31] { R346 += 1, R308 += 1 };
  s0 -> s3 [32, 32] { R346 += 1, R308 += 1 };
  s0 -> s1 [33, 65535] { R346 += 1, R308 += 1 };
  s1 -> s1 [0, 65535] { R346 += 1, R308 += 1 };
  s1 -> s5 [0, 65535] { R346 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R346 += 1, R308 += 1 };
  s2 -> s2 [0, 65535] { R346 += 1, R307 += 1, R308 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R346 += 1, R308 += 1 };
  s2 -> s1 [14, 31] { R346 += 1, R308 += 1 };
  s2 -> s3 [32, 32] { R346 += 1, R308 += 1 };
  s2 -> s1 [33, 65535] { R346 += 1, R308 += 1 };
  s3 -> s1 [0, 65535] { R346 += 1, R308 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R346 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R348 += 1, R309 += 1, R310 += 1 };
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s0 -> s2 [0, 65535] { R348 += 1, R310 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R348 += 1, R309 += 1, R310 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R348 += 1, R310 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R348 += 1, R310 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R348 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R348 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R350 += 1, R312 += 1 };
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s2 [0, 65535] { R350 += 1, R311 += 1, R312 += 1 };
  s0 -> s3 [9, 13] { R350 += 1, R312 += 1 };
  s0 -> s1 [14, 31] { R350 += 1, R312 += 1 };
  s0 -> s3 [32, 32] { R350 += 1, R312 += 1 };
  s0 -> s1 [33, 65535] { R350 += 1, R312 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R350 += 1, R312 += 1 };
  s1 -> s5 [0, 65535] { R350 += 1 };
  s2 -> s1 [0, 8] { R350 += 1, R312 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R350 += 1, R311 += 1, R312 += 1 };
  s2 -> s3 [9, 13] { R350 += 1, R312 += 1 };
  s2 -> s1 [14, 31] { R350 += 1, R312 += 1 };
  s2 -> s3 [32, 32] { R350 += 1, R312 += 1 };
  s2 -> s1 [33, 65535] { R350 += 1, R312 += 1 };
  s3 -> s1 [0, 65535] { R350 += 1, R312 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R350 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s0 -> s1 [0, 65535] { R352 += 1, R313 += 1, R314 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R314 += 1, R10 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R352 += 1, R313 += 1, R314 += 1 };
  s1 -> s2 [0, 65535] { R352 += 1, R314 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R352 += 1 };
  s2 -> s2 [0, 65535] { R352 += 1, R314 += 1, R10 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R352 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 74] { R354 += 1, R324 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R323 += 1, R324 += 1 };
  s0 -> s3 [75, 75] { R354 += 1, R324 += 1 };
  s0 -> s1 [76, 65535] { R354 += 1, R324 += 1 };
  s1 -> s1 [0, 74] { R354 += 1, R324 += 1 };
  s1 -> s3 [75, 75] { R354 += 1, R324 += 1 };
  s1 -> s1 [76, 65535] { R354 += 1, R324 += 1 };
  s2 -> s1 [0, 74] { R354 += 1, R324 += 1 };
  s2 -> s2 [0, 65535] { R354 += 1, R323 += 1, R324 += 1 };
  s2 -> s3 [75, 75] { R354 += 1, R324 += 1 };
  s2 -> s1 [76, 65535] { R354 += 1, R324 += 1 };
  s3 -> s4 [0, 65535] { R354 += 1 };
  s3 -> s3 [0, 65535] { R354 += 1, R324 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R354 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R356 += 1, R325 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R326 += 1, R290 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R356 += 1, R325 += 1, R326 += 1 };
  s1 -> s2 [0, 65535] { R356 += 1, R326 += 1, R290 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R356 += 1, R326 += 1, R290 += 1 };
  s2 -> s4 [0, 65535] { R356 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R356 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s0 [0, 65535] { R357 += 1, R358 += 1 };
  s0 -> s1 [0, 65535] { R358 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R358 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R360 += 1, R315 += 1, R316 += 1 };
  s0 -> s0 [0, 65535] { R359 += 1, R360 += 1 };
  s0 -> s2 [9, 9] { R360 += 1, R316 += 1 };
  s1 -> s1 [0, 65535] { R360 += 1, R315 += 1, R316 += 1 };
  s1 -> s2 [9, 9] { R360 += 1, R316 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R360 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65535] { R362 += 1, R317 += 1, R318 += 1 };
  s0 -> s2 [0, 65535] { R362 += 1, R318 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s1 -> s1 [0, 65535] { R362 += 1, R317 += 1, R318 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R362 += 1, R318 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R362 += 1, R318 += 1, R11 += 1 };
  s2 -> s4 [0, 65535] { R362 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R362 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R364 += 1, R320 += 1 };
  s0 -> s2 [0, 65535] { R364 += 1, R319 += 1, R320 += 1 };
  s0 -> s0 [0, 65535] { R363 += 1, R364 += 1 };
  s0 -> s3 [9, 13] { R364 += 1, R320 += 1 };
  s0 -> s1 [14, 31] { R364 += 1, R320 += 1 };
  s0 -> s3 [32, 32] { R364 += 1, R320 += 1 };
  s0 -> s1 [33, 65535] { R364 += 1, R320 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R364 += 1, R320 += 1 };
  s1 -> s5 [0, 65535] { R364 += 1 };
  s2 -> s1 [0, 8] { R364 += 1, R320 += 1 };
  s2 -> s2 [0, 65535] { R364 += 1, R319 += 1, R320 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R364 += 1, R320 += 1 };
  s2 -> s1 [14, 31] { R364 += 1, R320 += 1 };
  s2 -> s3 [32, 32] { R364 += 1, R320 += 1 };
  s2 -> s1 [33, 65535] { R364 += 1, R320 += 1 };
  s3 -> s1 [0, 65535] { R364 += 1, R320 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R364 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R365 += 1, R366 += 1 };
  s0 -> s1 [0, 65535] { R366 += 1, R322 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R366 += 1, R321 += 1, R322 += 1 };
  s1 -> s4 [0, 65535] { R366 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R366 += 1, R322 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R366 += 1, R322 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R366 += 1, R321 += 1, R322 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R366 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 64] { R368 += 1, R328 += 1 };
  s0 -> s0 [0, 65535] { R367 += 1, R368 += 1 };
  s0 -> s2 [0, 65535] { R368 += 1, R327 += 1, R328 += 1 };
  s0 -> s1 [91, 65535] { R368 += 1, R328 += 1 };
  s1 -> s1 [0, 64] { R368 += 1, R328 += 1 };
  s1 -> s1 [0, 65535] { R368 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R368 += 1, R328 += 1 };
  s2 -> s1 [0, 64] { R368 += 1, R328 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R368 += 1, R327 += 1, R328 += 1 };
  s2 -> s1 [91, 65535] { R368 += 1, R328 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R369 += 1, R370 += 1 };
  s0 -> s1 [0, 65535] { R370 += 1, R329 += 1, R330 += 1 };
  s0 -> s2 [0, 65535] { R370 += 1, R330 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R370 += 1, R329 += 1, R330 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R370 += 1, R330 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R370 += 1, R330 += 1, R0 += 1 };
  s2 -> s4 [0, 65535] { R370 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R370 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 8] { R372 += 1, R332 += 1, R292 += 1 };
  s0 -> s2 [0, 65535] { R372 += 1, R332 += 1, R291 += 1, R292 += 1 };
  s0 -> s3 [0, 65535] { R372 += 1, R331 += 1, R332 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s4 [9, 13] { R372 += 1, R332 += 1, R292 += 1 };
  s0 -> s1 [14, 31] { R372 += 1, R332 += 1, R292 += 1 };
  s0 -> s4 [32, 32] { R372 += 1, R332 += 1, R292 += 1 };
  s0 -> s1 [33, 65535] { R372 += 1, R332 += 1, R292 += 1 };
  s1 -> s7 [0, 65535] { R372 += 1, R332 += 1 };
  s1 -> s6 [0, 65535] { R372 += 1 };
  s1 -> s1 [0, 65535] { R372 += 1, R332 += 1, R292 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 8] { R372 += 1, R332 += 1, R292 += 1 };
  s2 -> s2 [0, 65535] { R372 += 1, R332 += 1, R291 += 1, R292 += 1 };
  s2 -> s6 [0, 65535] { R372 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s4 [9, 13] { R372 += 1, R332 += 1, R292 += 1 };
  s2 -> s1 [14, 31] { R372 += 1, R332 += 1, R292 += 1 };
  s2 -> s4 [32, 32] { R372 += 1, R332 += 1, R292 += 1 };
  s2 -> s1 [33, 65535] { R372 += 1, R332 += 1, R292 += 1 };
  s3 -> s1 [0, 8] { R372 += 1, R332 += 1, R292 += 1 };
  s3 -> s2 [0, 65535] { R372 += 1, R332 += 1, R291 += 1, R292 += 1 };
  s3 -> s3 [0, 65535] { R372 += 1, R331 += 1, R332 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s4 [9, 13] { R372 += 1, R332 += 1, R292 += 1 };
  s3 -> s1 [14, 31] { R372 += 1, R332 += 1, R292 += 1 };
  s3 -> s4 [32, 32] { R372 += 1, R332 += 1, R292 += 1 };
  s3 -> s1 [33, 65535] { R372 += 1, R332 += 1, R292 += 1 };
  s4 -> s1 [0, 65535] { R372 += 1, R332 += 1, R292 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R372 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R372 += 1, R332 += 1 };
  s7 -> s6 [0, 65535] { R372 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R374 += 1, R333 += 1, R334 += 1 };
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s0 -> s2 [0, 65535] { R374 += 1, R334 += 1, R293 += 1, R294 += 1 };
  s0 -> s3 [0, 65535] { R374 += 1, R334 += 1, R294 += 1, R5 += 1 };
  s1 -> s1 [0, 65535] { R374 += 1, R333 += 1, R334 += 1 };
  s1 -> s2 [0, 65535] { R374 += 1, R334 += 1, R293 += 1, R294 += 1 };
  s1 -> s3 [0, 65535] { R374 += 1, R334 += 1, R294 += 1, R5 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s5 [0, 65535] { R374 += 1 };
  s2 -> s2 [0, 65535] { R374 += 1, R334 += 1, R293 += 1, R294 += 1 };
  s2 -> s3 [0, 65535] { R374 += 1, R334 += 1, R294 += 1, R5 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R374 += 1, R334 += 1 };
  s3 -> s5 [0, 65535] { R374 += 1 };
  s3 -> s3 [0, 65535] { R374 += 1, R334 += 1, R294 += 1, R5 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R374 += 1, R334 += 1 };
  s4 -> s5 [0, 65535] { R374 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R374 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 8] { R376 += 1, R336 += 1, R296 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R336 += 1, R295 += 1, R296 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s3 [0, 65535] { R376 += 1, R335 += 1, R336 += 1 };
  s0 -> s4 [9, 13] { R376 += 1, R336 += 1, R296 += 1 };
  s0 -> s1 [14, 31] { R376 += 1, R336 += 1, R296 += 1 };
  s0 -> s4 [32, 32] { R376 += 1, R336 += 1, R296 += 1 };
  s0 -> s1 [33, 65535] { R376 += 1, R336 += 1, R296 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R376 += 1, R336 += 1, R296 += 1 };
  s1 -> s6 [0, 65535] { R376 += 1 };
  s1 -> s7 [0, 65535] { R376 += 1, R336 += 1 };
  s2 -> s1 [0, 8] { R376 += 1, R336 += 1, R296 += 1 };
  s2 -> s2 [0, 65535] { R376 += 1, R336 += 1, R295 += 1, R296 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R376 += 1 };
  s2 -> s4 [9, 13] { R376 += 1, R336 += 1, R296 += 1 };
  s2 -> s1 [14, 31] { R376 += 1, R336 += 1, R296 += 1 };
  s2 -> s4 [32, 32] { R376 += 1, R336 += 1, R296 += 1 };
  s2 -> s1 [33, 65535] { R376 += 1, R336 += 1, R296 += 1 };
  s3 -> s1 [0, 8] { R376 += 1, R336 += 1, R296 += 1 };
  s3 -> s2 [0, 65535] { R376 += 1, R336 += 1, R295 += 1, R296 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R376 += 1, R335 += 1, R336 += 1 };
  s3 -> s4 [9, 13] { R376 += 1, R336 += 1, R296 += 1 };
  s3 -> s1 [14, 31] { R376 += 1, R336 += 1, R296 += 1 };
  s3 -> s4 [32, 32] { R376 += 1, R336 += 1, R296 += 1 };
  s3 -> s1 [33, 65535] { R376 += 1, R336 += 1, R296 += 1 };
  s4 -> s1 [0, 65535] { R376 += 1, R336 += 1, R296 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R376 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R376 += 1 };
  s7 -> s7 [0, 65535] { R376 += 1, R336 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R378 += 1, R337 += 1, R338 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R338 += 1, R297 += 1, R298 += 1 };
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s3 [0, 65535] { R378 += 1, R338 += 1, R298 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R378 += 1, R337 += 1, R338 += 1 };
  s1 -> s2 [0, 65535] { R378 += 1, R338 += 1, R297 += 1, R298 += 1 };
  s1 -> s3 [0, 65535] { R378 += 1, R338 += 1, R298 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R378 += 1, R338 += 1, R297 += 1, R298 += 1 };
  s2 -> s6 [0, 65535] { R378 += 1 };
  s2 -> s3 [0, 65535] { R378 += 1, R338 += 1, R298 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R378 += 1, R338 += 1 };
  s3 -> s6 [0, 65535] { R378 += 1 };
  s3 -> s3 [0, 65535] { R378 += 1, R338 += 1, R298 += 1, R6 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R378 += 1, R338 += 1 };
  s5 -> s6 [0, 65535] { R378 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R378 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R13 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R300 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s2 [9, 13] { R300 += 1 };
  s0 -> s1 [14, 31] { R300 += 1 };
  s0 -> s2 [32, 32] { R300 += 1 };
  s0 -> s1 [33, 65535] { R300 += 1 };
  s1 -> s1 [0, 65535] { R300 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R300 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s1 [0, 65535] { R302 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R302 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R304 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s2 [9, 13] { R304 += 1 };
  s0 -> s1 [14, 31] { R304 += 1 };
  s0 -> s2 [32, 32] { R304 += 1 };
  s0 -> s1 [33, 65535] { R304 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R304 += 1 };
  s2 -> s1 [0, 65535] { R304 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R306 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s1 -> s1 [0, 65535] { R306 += 1, R8 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R324 && R3 - R338 = 1 && R4 = R356 && R15 = 0 && R16 - R323 = -1 && R199 = 0 && R200 = R378 && R307 - R324 = -1 && R308 = R324 && R309 - R324 = -1 && R310 = R324 && R311 = 0 && R312 = 1 && R313 = 0 && R314 = 1 && R315 = R338 && R316 - R338 = 1 && R317 = R338 && R318 - R338 = 1 && R319 = 0 && R320 = 1 && R321 = 0 && R322 = 1 && R327 = 0 && R328 = R338 && R329 = 0 && R330 = R338 && R331 = 0 && R332 = R338 && R333 = 0 && R334 = R338 && R335 = 0 && R336 = R338 && R337 = 0 && R339 - R378 = 1 && R340 = R356 && R341 - R378 = 1 && R342 = R356 && R343 - R378 = 1 && R344 = R356 && R345 - R378 = 1 && R346 = R356 && R347 - R378 = 1 && R348 = R356 && R349 - R378 = 1 && R350 = R356 && R351 - R378 = 1 && R352 = R356 && R353 - R378 = 1 && R354 = R356 && R355 - R378 = 1 && R357 = 0 && R358 = R378 && R359 = 0 && R360 = R378 && R361 = 0 && R362 = R378 && R363 = 0 && R364 = R378 && R365 = 0 && R366 = R378 && R367 = 0 && R368 = R378 && R369 = 0 && R370 = R378 && R371 = 0 && R372 = R378 && R373 = 0 && R374 = R378 && R375 = 0 && R376 = R378 && R377 = 0 && R0 != 0 && R1 != 0 && R13 < 1 && R323 - R324 < 1 && -1 < R323 && 0 < R324 && -1 < R338 && R378 < R356 && -1 < R378 && (R5 != 0 || ((R0 != R292 || R291 - R292 = -1 || R292 < 0) && (R0 = R292 || R0 < 1))) && (R5 != 0 || ((R0 != R294 || R293 - R294 = -1 || R294 < 0) && (R0 = R294 || R0 < 1))) && (R7 != 0 || ((R1 != R300 || R299 - R300 = -1 || R300 < 0) && (R1 = R300 || R1 < 1))) && (R7 != 0 || ((R1 != R302 || R301 - R302 = -1 || R302 < 0) && (R1 = R302 || R1 < 1))) && (R295 != 0 || ((R6 != 0 || ((R0 != R296 || R296 = 1 || R296 < 0) && (R0 = R296 || R296 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R296 || R296 = 1 || R296 < 0) && (R296 != 1 || -1 < R0) && (R0 = R296 || R296 = 1))))) && (R297 != 0 || ((R6 != 0 || ((R0 != R298 || R298 = 1 || R298 < 0) && (R0 = R298 || R298 = 1 || R0 < 1))) && (R6 = 0 || ((R0 != R298 || R298 = 1 || R298 < 0) && (R298 != 1 || -1 < R0) && (R0 = R298 || R298 = 1))))) && (R303 != 0 || ((R8 != 0 || ((R1 != R304 || R304 = 1 || R304 < 0) && (R1 = R304 || R304 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R304 || R304 = 1 || R304 < 0) && (R304 != 1 || -1 < R1) && (R1 = R304 || R304 = 1))))) && (R305 != 0 || ((R8 != 0 || ((R1 != R306 || R306 = 1 || R306 < 0) && (R1 = R306 || R306 = 1 || R1 < 1))) && (R8 = 0 || ((R1 != R306 || R306 = 1 || R306 < 0) && (R306 != 1 || -1 < R1) && (R1 = R306 || R306 = 1))))) && (R323 != R325 || R324 = R326 || ((R290 != 0 || R324 - R325 < 1 || R325 < 0) && (R290 = 0 || R324 < R325 || R325 < 0))) && (R5 = 0 || (R0 = R292 && R291 - R292 = -1)) && (R5 = 0 || (R0 = R294 && R293 - R294 = -1)) && (R7 = 0 || (R1 = R300 && R299 - R300 = -1)) && (R7 = 0 || (R1 = R302 && R301 - R302 = -1)) && (R295 = 0 || (R6 = 0 && R0 < 0)) && (R297 = 0 || (R6 = 0 && R0 < 0)) && (R303 = 0 || (R8 = 0 && R1 < 0)) && (R305 = 0 || (R8 = 0 && R1 < 0)) && (R323 = R325 || (R290 = 0 && R323 = R324));
// End of Parikh automata intersection problem
