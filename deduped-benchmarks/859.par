// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R2, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R8, R9;
synchronised {  // Automata constraining key1
automaton key1_0 {
  init s0;
  s0 -> s0 [0, 64];
  s0 -> s1 [67, 67];
  s0 -> s0 [68, 65535];
  s1 -> s1 [0, 64];
  s1 -> s1 [67, 65535];
  accepting s1;
};
automaton key1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton key1_2 {
  init s0;
  s0 -> s1 [0, 66];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [67, 67];
  s0 -> s1 [68, 65535];
  s1 -> s1 [0, 66];
  s1 -> s2 [67, 67];
  s1 -> s1 [68, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton key1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R48 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R48 += 1, R10 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_4 {
  init s0;
  s0 -> s1 [0, 66] { R50 += 1 };
  s0 -> s0 [0, 65535] { R49 += 1, R50 += 1 };
  s0 -> s2 [67, 67] { R50 += 1 };
  s0 -> s3 [67, 67] { R50 += 1 };
  s0 -> s1 [91, 65535] { R50 += 1 };
  s1 -> s1 [0, 66] { R50 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [67, 67] { R50 += 1 };
  s1 -> s3 [67, 67] { R50 += 1 };
  s1 -> s1 [91, 65535] { R50 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 67] { R50 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R50 += 1 };
  accepting s0, s1, s2, s3;
};
automaton key1_5 {
  init s0;
  s0 -> s1 [0, 66] { R56 += 1 };
  s0 -> s0 [0, 65535] { R55 += 1, R56 += 1 };
  s0 -> s2 [67, 67] { R56 += 1 };
  s0 -> s1 [68, 65535] { R56 += 1 };
  s1 -> s1 [0, 66] { R56 += 1 };
  s1 -> s2 [67, 67] { R56 += 1 };
  s1 -> s1 [68, 65535] { R56 += 1 };
  s2 -> s2 [0, 65535] { R56 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton key1_6 {
  init s0;
  s0 -> s0 [0, 65535] { R57 += 1, R58 += 1 };
  s0 -> s1 [0, 65535] { R58 += 1, R0 += 1 };
  s1 -> s1 [0, 65535] { R58 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton key1_7 {
  init s0;
  s0 -> s1 [0, 66] { R60 += 1 };
  s0 -> s2 [0, 65535] { R60 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R59 += 1, R60 += 1 };
  s0 -> s3 [67, 67] { R60 += 1 };
  s0 -> s1 [68, 65535] { R60 += 1 };
  s1 -> s1 [0, 66] { R60 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [67, 67] { R60 += 1 };
  s1 -> s1 [68, 65535] { R60 += 1 };
  s2 -> s1 [0, 66] { R60 += 1 };
  s2 -> s2 [0, 65535] { R60 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [67, 67] { R60 += 1 };
  s2 -> s1 [68, 65535] { R60 += 1 };
  s3 -> s3 [0, 65535] { R60 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton key1_8 {
  init s0;
  s0 -> s1 [0, 66] { R62 += 1, R42 += 1 };
  s0 -> s2 [0, 65535] { R62 += 1, R41 += 1, R42 += 1 };
  s0 -> s0 [0, 65535] { R61 += 1, R62 += 1 };
  s0 -> s1 [68, 65535] { R62 += 1, R42 += 1 };
  s1 -> s1 [0, 66] { R62 += 1, R42 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R62 += 1 };
  s1 -> s1 [68, 65535] { R62 += 1, R42 += 1 };
  s2 -> s1 [0, 66] { R62 += 1, R42 += 1 };
  s2 -> s2 [0, 65535] { R62 += 1, R41 += 1, R42 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [68, 65535] { R62 += 1, R42 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton key1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R64 += 1, R43 += 1, R44 += 1 };
  s0 -> s2 [0, 65535] { R64 += 1, R44 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R64 += 1, R43 += 1, R44 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R64 += 1, R44 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R64 += 1, R44 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R64 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R64 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton key1_10 {
  init s0;
  s0 -> s1 [0, 67] { R66 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R66 += 1, R45 += 1, R46 += 1 };
  s0 -> s0 [0, 65535] { R65 += 1, R66 += 1 };
  s0 -> s3 [90, 90] { R66 += 1, R46 += 1 };
  s0 -> s1 [91, 65535] { R66 += 1, R46 += 1 };
  s1 -> s1 [0, 67] { R66 += 1, R46 += 1 };
  s1 -> s3 [90, 90] { R66 += 1, R46 += 1 };
  s1 -> s1 [91, 65535] { R66 += 1, R46 += 1 };
  s2 -> s1 [0, 67] { R66 += 1, R46 += 1 };
  s2 -> s2 [0, 65535] { R66 += 1, R45 += 1, R46 += 1 };
  s2 -> s3 [90, 90] { R66 += 1, R46 += 1 };
  s2 -> s1 [91, 65535] { R66 += 1, R46 += 1 };
  s3 -> s3 [0, 67] { R66 += 1, R46 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R66 += 1 };
  s3 -> s3 [90, 65535] { R66 += 1, R46 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton key1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R68 += 1, R52 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R68 += 1, R51 += 1, R52 += 1 };
  s1 -> s1 [0, 65535] { R68 += 1, R52 += 1, R9 += 1 };
  s1 -> s4 [0, 65535] { R68 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R68 += 1, R52 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R68 += 1, R51 += 1, R52 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R68 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton key1_12 {
  init s0;
  s0 -> s1 [0, 66] { R70 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R70 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s3 [67, 67] { R70 += 1, R54 += 1 };
  s0 -> s4 [67, 67] { R70 += 1, R54 += 1 };
  s0 -> s1 [91, 65535] { R70 += 1, R54 += 1 };
  s1 -> s1 [0, 66] { R70 += 1, R54 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1 };
  s1 -> s3 [67, 67] { R70 += 1, R54 += 1 };
  s1 -> s4 [67, 67] { R70 += 1, R54 += 1 };
  s1 -> s1 [91, 65535] { R70 += 1, R54 += 1 };
  s2 -> s1 [0, 66] { R70 += 1, R54 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R70 += 1, R53 += 1, R54 += 1 };
  s2 -> s3 [67, 67] { R70 += 1, R54 += 1 };
  s2 -> s4 [67, 67] { R70 += 1, R54 += 1 };
  s2 -> s1 [91, 65535] { R70 += 1, R54 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R70 += 1 };
  s4 -> s4 [0, 67] { R70 += 1, R54 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R70 += 1 };
  s4 -> s4 [91, 65535] { R70 += 1, R54 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
synchronised {  // Automata constraining P10
automaton P10_0 {
  init s0;
  s0 -> s1 [99, 99];
  accepting s1;
};
};
constraint R0 = R46 && R1 = R66 && R45 = 0 && R55 = 0 && R56 = R66 && R65 = 0 && R2 < 1 && R5 < 1 && -1 < R46 && -1 < R66 && (R41 != 0 || R42 = R46 || (R8 = 0 && R46 = 0)) && (R43 != 0 || R44 = R46 || (R8 = 0 && R46 = 0)) && (R46 != 0 || ((R67 != 0 || ((R69 != 0 || ((R66 != R70 || R68 = R70 || R70 < 1) && (R66 = R70 || R66 < 1))) && (R69 = 0 || R66 < 1))) && (R67 = 0 || R66 < 1))) && (R57 != 0 || R58 = R66 || (R46 = 0 && R66 = 0)) && (R59 != 0 || R60 = R66 || (R46 = 0 && R66 = 0)) && (R61 != 0 || R62 = R66 || (R46 = 0 && R66 = 0)) && (R63 != 0 || R64 = R66 || (R46 = 0 && R66 = 0)) && (R67 != 0 || ((R69 != 0 || ((R66 != R70 || R68 = R70 || R46 < 1 || R70 < 0) && (R66 = R70 || R46 < 1))) && (R69 = 0 || R46 < 1))) && (R9 = 0 || (R51 = 0 && R52 = 0)) && (R9 = 0 || (R53 = 0 && R54 = 0)) && (R10 = 0 || (R47 = 0 && R48 = 0)) && (R10 = 0 || (R49 = 0 && R50 = 0)) && (R41 = 0 || (R8 = 0 && R46 = 0)) && (R43 = 0 || (R8 = 0 && R46 = 0)) && (R57 = 0 || (R46 = 0 && R66 = 0)) && (R59 = 0 || (R46 = 0 && R66 = 0)) && (R61 = 0 || (R46 = 0 && R66 = 0)) && (R63 = 0 || (R46 = 0 && R66 = 0)) && (R67 = 0 || R46 < 1);
// End of Parikh automata intersection problem
