// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R15, R16, R17, R18, R19, R2, R20, R21, R22, R3, R5, R6;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 43] { R6 += 1 };
  s0 -> s0 [0, 65535] { R5 += 1, R6 += 1 };
  s0 -> s2 [44, 44];
  s0 -> s1 [45, 65535] { R6 += 1 };
  s1 -> s1 [0, 43] { R6 += 1 };
  s1 -> s2 [44, 44];
  s1 -> s1 [45, 65535] { R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 43] { R16 += 1 };
  s0 -> s0 [0, 65535] { R15 += 1, R16 += 1 };
  s0 -> s1 [45, 65535] { R16 += 1 };
  s1 -> s1 [0, 43] { R16 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [45, 65535] { R16 += 1 };
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R17 += 1, R18 += 1 };
  s0 -> s1 [0, 65535] { R18 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R18 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 60] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R20 += 1, R3 += 1 };
  s0 -> s3 [61, 61] { R20 += 1 };
  s0 -> s1 [62, 65535] { R20 += 1 };
  s1 -> s1 [0, 60] { R20 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R20 += 1 };
  s1 -> s1 [62, 65535] { R20 += 1 };
  s2 -> s1 [0, 60] { R20 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R20 += 1, R3 += 1 };
  s2 -> s3 [61, 61] { R20 += 1 };
  s2 -> s1 [62, 65535] { R20 += 1 };
  s3 -> s3 [0, 65535] { R20 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535];
  accepting s0;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 60] { R22 += 1 };
  s0 -> s2 [0, 65535] { R22 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R21 += 1, R22 += 1 };
  s0 -> s3 [61, 61] { R22 += 1 };
  s0 -> s1 [62, 65535] { R22 += 1 };
  s1 -> s1 [0, 60] { R22 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [61, 61] { R22 += 1 };
  s1 -> s1 [62, 65535] { R22 += 1 };
  s2 -> s1 [0, 60] { R22 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R22 += 1, R2 += 1 };
  s2 -> s3 [61, 61] { R22 += 1 };
  s2 -> s1 [62, 65535] { R22 += 1 };
  s3 -> s3 [0, 65535] { R22 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
};
constraint R1 = R20 && R5 = 0 && R6 = 0 && R15 = 1 && R16 = R20 && R17 = 1 && R18 = R20 && R19 = 1 && R0 != 0 && R2 < 1 && R3 < 1 && 0 < R20;
// End of Parikh automata intersection problem
