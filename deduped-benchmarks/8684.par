// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10101, R10102, R10103, R10104, R10105, R10106, R10107, R10108, R10109, R10110, R10111, R10112, R10113, R10114, R10115, R10116, R10117, R10118, R10119, R10120, R10121, R10122, R10123, R10124, R10125, R10126, R10127, R10128, R10129, R10130, R10131, R10132, R10133, R10134, R10135, R10136, R10137, R10138, R10139, R10140, R10141, R10142, R10143, R10144, R10145, R10146, R10147, R10148, R10149, R10150, R10151, R10152, R10153, R10154, R10155, R10156, R10157, R10158, R10159, R10160, R10161, R10162, R10163, R10164, R10165, R10166, R10167, R10168, R10169, R10170, R10171, R10172, R10173, R10174, R10175, R10176, R10177, R10178, R10179, R10180, R10181, R10182, R10183, R10184, R10185, R10186, R10187, R10188, R10189, R10190, R10191, R10192, R10193, R10194, R10195, R10196, R10197, R10198, R10199, R10200, R10201, R10202, R10203, R10204, R10205, R10206, R10207, R10208, R10209, R10210, R10211, R10212, R10213, R10214, R10215, R10216, R10217, R10218, R10219, R10220, R10221, R10222, R10223, R10224, R10225, R10226, R10227, R10228, R10229, R10230, R10231, R10232, R10233, R10234, R10235, R10236, R10237, R10238, R10239, R10240, R10241, R10242, R10243, R10244, R10245, R10246, R10247, R10248, R10249, R10250, R10251, R10252, R10253, R10254, R10255, R10256, R10257, R10258, R10259, R10260, R10261, R10262, R10263, R10264, R10265, R10266, R10267, R10268, R10269, R10270, R10271, R10272, R10273, R10274, R10275, R10276, R10277, R10278, R10279, R10280, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8825, R8826, R8827, R8828, R9555, R9556, R9557, R9558, R9559, R9560;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R10206 += 1 };
  s0 -> s0 [0, 65535] { R10205 += 1, R10206 += 1 };
  s0 -> s2 [66, 66] { R10206 += 1 };
  s0 -> s1 [67, 65535] { R10206 += 1 };
  s1 -> s1 [0, 64] { R10206 += 1 };
  s1 -> s2 [66, 66] { R10206 += 1 };
  s1 -> s1 [67, 65535] { R10206 += 1 };
  s2 -> s2 [0, 64] { R10206 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R10206 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10207 += 1, R10208 += 1 };
  s0 -> s1 [0, 65535] { R10208 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10208 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R10210 += 1 };
  s0 -> s0 [0, 65535] { R10209 += 1, R10210 += 1 };
  s0 -> s2 [0, 65535] { R10210 += 1, R14 += 1 };
  s0 -> s3 [66, 66] { R10210 += 1 };
  s0 -> s1 [67, 65535] { R10210 += 1 };
  s1 -> s1 [0, 65] { R10210 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R10210 += 1 };
  s1 -> s1 [67, 65535] { R10210 += 1 };
  s2 -> s1 [0, 65] { R10210 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10210 += 1, R14 += 1 };
  s2 -> s3 [66, 66] { R10210 += 1 };
  s2 -> s1 [67, 65535] { R10210 += 1 };
  s3 -> s3 [0, 65535] { R10210 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R10212 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10211 += 1, R10212 += 1 };
  s0 -> s2 [0, 65535] { R10212 += 1, R23 += 1, R24 += 1 };
  s0 -> s3 [9, 13] { R10212 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R10212 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R10212 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R10212 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10212 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R10212 += 1 };
  s2 -> s1 [0, 8] { R10212 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10212 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R10212 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R10212 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R10212 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R10212 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R10212 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10212 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s0 [0, 65535] { R10213 += 1, R10214 += 1 };
  s0 -> s1 [0, 65535] { R10214 += 1, R26 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R10214 += 1, R25 += 1, R26 += 1 };
  s1 -> s1 [0, 65535] { R10214 += 1, R26 += 1, R4 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10214 += 1 };
  s2 -> s1 [0, 65535] { R10214 += 1, R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R10214 += 1, R25 += 1, R26 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10214 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R10216 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10215 += 1, R10216 += 1 };
  s0 -> s2 [0, 65535] { R10216 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R10216 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R10216 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R10216 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R10216 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10216 += 1 };
  s1 -> s1 [0, 65535] { R10216 += 1, R28 += 1 };
  s2 -> s1 [0, 8] { R10216 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10216 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10216 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R10216 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R10216 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R10216 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10216 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10216 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R10218 += 1, R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R10217 += 1, R10218 += 1 };
  s0 -> s2 [0, 65535] { R10218 += 1, R29 += 1, R30 += 1 };
  s1 -> s4 [0, 65535] { R10218 += 1 };
  s1 -> s1 [0, 65535] { R10218 += 1, R30 += 1, R5 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10218 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R10218 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10218 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10219 += 1, R10220 += 1 };
  s0 -> s1 [0, 65535] { R10220 += 1, R10126 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R10220 += 1, R10125 += 1, R10126 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10220 += 1, R10126 += 1, R22 += 1 };
  s1 -> s4 [0, 65535] { R10220 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10220 += 1, R10126 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R10220 += 1, R10125 += 1, R10126 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10220 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R10222 += 1, R10128 += 1 };
  s0 -> s0 [0, 65535] { R10221 += 1, R10222 += 1 };
  s0 -> s2 [0, 65535] { R10222 += 1, R10127 += 1, R10128 += 1 };
  s0 -> s3 [66, 66] { R10222 += 1, R10128 += 1 };
  s0 -> s4 [66, 66] { R10222 += 1, R10128 += 1 };
  s0 -> s1 [71, 65535] { R10222 += 1, R10128 += 1 };
  s1 -> s1 [0, 65] { R10222 += 1, R10128 += 1 };
  s1 -> s1 [0, 65535] { R10222 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10222 += 1, R10128 += 1 };
  s1 -> s4 [66, 66] { R10222 += 1, R10128 += 1 };
  s1 -> s1 [71, 65535] { R10222 += 1, R10128 += 1 };
  s2 -> s1 [0, 65] { R10222 += 1, R10128 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10222 += 1, R10127 += 1, R10128 += 1 };
  s2 -> s3 [66, 66] { R10222 += 1, R10128 += 1 };
  s2 -> s4 [66, 66] { R10222 += 1, R10128 += 1 };
  s2 -> s1 [71, 65535] { R10222 += 1, R10128 += 1 };
  s3 -> s3 [0, 66] { R10222 += 1, R10128 += 1 };
  s3 -> s3 [0, 65535] { R10222 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R10222 += 1, R10128 += 1 };
  s4 -> s4 [0, 65535] { R10222 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R10224 += 1, R10130 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R10224 += 1, R10129 += 1, R10130 += 1 };
  s0 -> s0 [0, 65535] { R10223 += 1, R10224 += 1 };
  s0 -> s3 [66, 66] { R10224 += 1, R10130 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R10224 += 1, R10130 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R10224 += 1, R10130 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R10224 += 1, R10130 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10224 += 1 };
  s1 -> s3 [66, 66] { R10224 += 1, R10130 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R10224 += 1, R10130 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R10224 += 1, R10130 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R10224 += 1, R10130 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R10224 += 1, R10129 += 1, R10130 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10224 += 1, R10130 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R10224 += 1, R10130 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R10224 += 1, R10130 += 1, R49 += 1 };
  s3 -> s6 [0, 65535] { R10224 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10224 += 1, R10130 += 1, R49 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10224 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10224 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R10226 += 1, R10132 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R10225 += 1, R10226 += 1 };
  s0 -> s2 [0, 65535] { R10226 += 1, R10131 += 1, R10132 += 1 };
  s0 -> s3 [66, 66] { R10226 += 1, R10132 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R10226 += 1, R10132 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R10226 += 1, R10132 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R10226 += 1, R10132 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10226 += 1 };
  s1 -> s3 [66, 66] { R10226 += 1, R10132 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R10226 += 1, R10132 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R10226 += 1, R10132 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R10226 += 1, R10132 += 1, R51 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10226 += 1, R10131 += 1, R10132 += 1 };
  s2 -> s3 [66, 66] { R10226 += 1, R10132 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R10226 += 1, R10132 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R10226 += 1, R10132 += 1, R51 += 1 };
  s3 -> s6 [0, 65535] { R10226 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10226 += 1, R10132 += 1, R51 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10226 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10226 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10227 += 1, R10228 += 1 };
  s0 -> s2 [0, 65535] { R10228 += 1, R10133 += 1, R10134 += 1 };
  s0 -> s3 [66, 66] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10228 += 1 };
  s1 -> s3 [66, 66] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10228 += 1, R10133 += 1, R10134 += 1 };
  s2 -> s3 [66, 66] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10228 += 1, R10134 += 1, R53 += 1, R54 += 1 };
  s3 -> s6 [0, 65535] { R10228 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10228 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10228 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R10230 += 1, R10135 += 1, R10136 += 1 };
  s0 -> s0 [0, 65535] { R10229 += 1, R10230 += 1 };
  s0 -> s3 [66, 66] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65535] { R10230 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R10230 += 1, R10135 += 1, R10136 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s3 -> s3 [0, 65535] { R10230 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R10230 += 1 };
  s4 -> s4 [0, 65535] { R10230 += 1, R10136 += 1, R57 += 1, R58 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10230 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R10232 += 1, R10137 += 1, R10138 += 1 };
  s0 -> s0 [0, 65535] { R10231 += 1, R10232 += 1 };
  s0 -> s3 [66, 66] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R10232 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R10232 += 1, R10137 += 1, R10138 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R10232 += 1, R10138 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R10232 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10232 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10232 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10234 += 1, R10139 += 1, R10140 += 1 };
  s0 -> s0 [0, 65535] { R10233 += 1, R10234 += 1 };
  s0 -> s3 [66, 66] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10234 += 1 };
  s1 -> s3 [66, 66] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10234 += 1, R10139 += 1, R10140 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10234 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10234 += 1, R10140 += 1, R67 += 1, R68 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10234 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10234 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R10236 += 1, R10141 += 1, R10142 += 1 };
  s0 -> s0 [0, 65535] { R10235 += 1, R10236 += 1 };
  s0 -> s3 [66, 66] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10236 += 1 };
  s1 -> s3 [66, 66] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10236 += 1, R10141 += 1, R10142 += 1 };
  s2 -> s3 [66, 66] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10236 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10236 += 1, R10142 += 1, R73 += 1, R74 += 1 };
  s4 -> s6 [0, 65535] { R10236 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10236 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R10238 += 1, R10162 += 1 };
  s0 -> s2 [0, 65535] { R10238 += 1, R10161 += 1, R10162 += 1 };
  s0 -> s0 [0, 65535] { R10237 += 1, R10238 += 1 };
  s0 -> s3 [66, 66] { R10238 += 1, R10162 += 1 };
  s0 -> s1 [67, 65535] { R10238 += 1, R10162 += 1 };
  s1 -> s1 [0, 65] { R10238 += 1, R10162 += 1 };
  s1 -> s3 [66, 66] { R10238 += 1, R10162 += 1 };
  s1 -> s1 [67, 65535] { R10238 += 1, R10162 += 1 };
  s2 -> s1 [0, 65] { R10238 += 1, R10162 += 1 };
  s2 -> s2 [0, 65535] { R10238 += 1, R10161 += 1, R10162 += 1 };
  s2 -> s3 [66, 66] { R10238 += 1, R10162 += 1 };
  s2 -> s1 [67, 65535] { R10238 += 1, R10162 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10238 += 1 };
  s3 -> s3 [0, 65535] { R10238 += 1, R10162 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10238 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10240 += 1, R10164 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R10240 += 1, R10163 += 1, R10164 += 1 };
  s0 -> s0 [0, 65535] { R10239 += 1, R10240 += 1 };
  s1 -> s1 [0, 65535] { R10240 += 1, R10164 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R10240 += 1 };
  s2 -> s1 [0, 65535] { R10240 += 1, R10164 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10240 += 1, R10163 += 1, R10164 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10240 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R10242 += 1, R10166 += 1 };
  s0 -> s2 [0, 65535] { R10242 += 1, R10165 += 1, R10166 += 1 };
  s0 -> s3 [0, 65535] { R10242 += 1, R10166 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R10241 += 1, R10242 += 1 };
  s0 -> s4 [66, 66] { R10242 += 1, R10166 += 1 };
  s0 -> s1 [67, 65535] { R10242 += 1, R10166 += 1 };
  s1 -> s1 [0, 65] { R10242 += 1, R10166 += 1 };
  s1 -> s1 [0, 65535] { R10242 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s4 [66, 66] { R10242 += 1, R10166 += 1 };
  s1 -> s1 [67, 65535] { R10242 += 1, R10166 += 1 };
  s2 -> s1 [0, 65] { R10242 += 1, R10166 += 1 };
  s2 -> s2 [0, 65535] { R10242 += 1, R10165 += 1, R10166 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10242 += 1, R10166 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R10242 += 1, R10166 += 1 };
  s2 -> s1 [67, 65535] { R10242 += 1, R10166 += 1 };
  s3 -> s1 [0, 65] { R10242 += 1, R10166 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10242 += 1, R10166 += 1, R11 += 1 };
  s3 -> s6 [0, 65535] { R10242 += 1 };
  s3 -> s4 [66, 66] { R10242 += 1, R10166 += 1 };
  s3 -> s1 [67, 65535] { R10242 += 1, R10166 += 1 };
  s4 -> s4 [0, 65535] { R10242 += 1, R10166 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10242 += 1 };
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s0 -> s0 [0, 65535] { R10243 += 1, R10244 += 1 };
  s0 -> s2 [0, 65535] { R10244 += 1, R10167 += 1, R10168 += 1 };
  s0 -> s3 [0, 65535] { R10244 += 1, R10168 += 1, R10105 += 1, R10106 += 1 };
  s0 -> s1 [67, 65535] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s1 -> s1 [0, 65] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10244 += 1 };
  s1 -> s1 [0, 65535] { R10244 += 1, R10168 += 1 };
  s1 -> s1 [67, 65535] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s2 -> s1 [0, 65] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s2 -> s2 [0, 65535] { R10244 += 1, R10167 += 1, R10168 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R10244 += 1, R10168 += 1, R10105 += 1, R10106 += 1 };
  s2 -> s1 [67, 65535] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s3 -> s1 [0, 65] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10244 += 1 };
  s3 -> s3 [0, 65535] { R10244 += 1, R10168 += 1, R10105 += 1, R10106 += 1 };
  s3 -> s1 [67, 65535] { R10244 += 1, R10168 += 1, R10106 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10244 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10246 += 1, R10170 += 1, R10108 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10246 += 1, R10169 += 1, R10170 += 1 };
  s0 -> s3 [0, 65535] { R10246 += 1, R10170 += 1, R10107 += 1, R10108 += 1 };
  s0 -> s0 [0, 65535] { R10245 += 1, R10246 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10246 += 1, R10170 += 1, R10108 += 1, R20 += 1 };
  s1 -> s5 [0, 65535] { R10246 += 1 };
  s1 -> s6 [0, 65535] { R10246 += 1, R10170 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10246 += 1, R10170 += 1, R10108 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10246 += 1, R10169 += 1, R10170 += 1 };
  s2 -> s3 [0, 65535] { R10246 += 1, R10170 += 1, R10107 += 1, R10108 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10246 += 1, R10170 += 1, R10108 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R10246 += 1, R10170 += 1, R10107 += 1, R10108 += 1 };
  s3 -> s5 [0, 65535] { R10246 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10246 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10246 += 1 };
  s6 -> s6 [0, 65535] { R10246 += 1, R10170 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s0 -> s2 [0, 65535] { R10248 += 1, R10172 += 1, R10109 += 1, R10110 += 1 };
  s0 -> s3 [0, 65535] { R10248 += 1, R10171 += 1, R10172 += 1 };
  s0 -> s0 [0, 65535] { R10247 += 1, R10248 += 1 };
  s0 -> s1 [70, 65535] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s1 -> s1 [0, 66] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s1 -> s5 [0, 65535] { R10248 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10248 += 1, R10172 += 1 };
  s1 -> s1 [70, 65535] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s2 -> s1 [0, 66] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s2 -> s2 [0, 65535] { R10248 += 1, R10172 += 1, R10109 += 1, R10110 += 1 };
  s2 -> s5 [0, 65535] { R10248 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s3 -> s1 [0, 66] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s3 -> s2 [0, 65535] { R10248 += 1, R10172 += 1, R10109 += 1, R10110 += 1 };
  s3 -> s3 [0, 65535] { R10248 += 1, R10171 += 1, R10172 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [70, 65535] { R10248 += 1, R10172 += 1, R10110 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10248 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10250 += 1, R10174 += 1, R10112 += 1, R78 += 1 };
  s0 -> s0 [0, 65535] { R10249 += 1, R10250 += 1 };
  s0 -> s2 [0, 65535] { R10250 += 1, R10174 += 1, R10111 += 1, R10112 += 1 };
  s0 -> s3 [0, 65535] { R10250 += 1, R10173 += 1, R10174 += 1 };
  s1 -> s5 [0, 65535] { R10250 += 1 };
  s1 -> s6 [0, 65535] { R10250 += 1, R10174 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10250 += 1, R10174 += 1, R10112 += 1, R78 += 1 };
  s2 -> s5 [0, 65535] { R10250 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10250 += 1, R10174 += 1, R10112 += 1, R78 += 1 };
  s2 -> s2 [0, 65535] { R10250 += 1, R10174 += 1, R10111 += 1, R10112 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10250 += 1, R10174 += 1, R10112 += 1, R78 += 1 };
  s3 -> s2 [0, 65535] { R10250 += 1, R10174 += 1, R10111 += 1, R10112 += 1 };
  s3 -> s3 [0, 65535] { R10250 += 1, R10173 += 1, R10174 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10250 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10250 += 1 };
  s6 -> s6 [0, 65535] { R10250 += 1, R10174 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s0 -> s2 [0, 65535] { R10252 += 1, R10176 += 1, R10113 += 1, R10114 += 1 };
  s0 -> s3 [0, 65535] { R10252 += 1, R10176 += 1, R10114 += 1, R80 += 1 };
  s0 -> s4 [0, 65535] { R10252 += 1, R10175 += 1, R10176 += 1 };
  s0 -> s0 [0, 65535] { R10251 += 1, R10252 += 1 };
  s0 -> s1 [71, 65535] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s1 -> s1 [0, 69] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s1 -> s1 [0, 65535] { R10252 += 1, R10176 += 1 };
  s1 -> s7 [0, 65535] { R10252 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [71, 65535] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s2 -> s1 [0, 69] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s2 -> s2 [0, 65535] { R10252 += 1, R10176 += 1, R10113 += 1, R10114 += 1 };
  s2 -> s3 [0, 65535] { R10252 += 1, R10176 += 1, R10114 += 1, R80 += 1 };
  s2 -> s7 [0, 65535] { R10252 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [71, 65535] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s3 -> s1 [0, 69] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s3 -> s3 [0, 65535] { R10252 += 1, R10176 += 1, R10114 += 1, R80 += 1 };
  s3 -> s6 [0, 65535] { R10252 += 1, R10176 += 1 };
  s3 -> s7 [0, 65535] { R10252 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [71, 65535] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s4 -> s1 [0, 69] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s4 -> s2 [0, 65535] { R10252 += 1, R10176 += 1, R10113 += 1, R10114 += 1 };
  s4 -> s3 [0, 65535] { R10252 += 1, R10176 += 1, R10114 += 1, R80 += 1 };
  s4 -> s4 [0, 65535] { R10252 += 1, R10175 += 1, R10176 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s1 [71, 65535] { R10252 += 1, R10176 += 1, R10114 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10252 += 1, R10176 += 1 };
  s6 -> s7 [0, 65535] { R10252 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10252 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R10253 += 1, R10254 += 1 };
  s0 -> s2 [0, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R83 += 1, R84 += 1 };
  s0 -> s3 [0, 65535] { R10254 += 1, R10178 += 1, R10115 += 1, R10116 += 1 };
  s0 -> s4 [0, 65535] { R10254 += 1, R10177 += 1, R10178 += 1 };
  s0 -> s1 [71, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s1 -> s7 [0, 65535] { R10254 += 1, R10178 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R10254 += 1 };
  s1 -> s1 [0, 65535] { R10254 += 1, R10178 += 1, R10116 += 1 };
  s1 -> s1 [71, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s2 -> s2 [0, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R83 += 1, R84 += 1 };
  s2 -> s7 [0, 65535] { R10254 += 1, R10178 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10254 += 1 };
  s2 -> s1 [71, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s3 -> s2 [0, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R83 += 1, R84 += 1 };
  s3 -> s3 [0, 65535] { R10254 += 1, R10178 += 1, R10115 += 1, R10116 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10254 += 1 };
  s3 -> s1 [71, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s4 -> s2 [0, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R83 += 1, R84 += 1 };
  s4 -> s3 [0, 65535] { R10254 += 1, R10178 += 1, R10115 += 1, R10116 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10254 += 1, R10177 += 1, R10178 += 1 };
  s4 -> s1 [71, 65535] { R10254 += 1, R10178 += 1, R10116 += 1, R84 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10254 += 1 };
  s7 -> s7 [0, 65535] { R10254 += 1, R10178 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10254 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10256 += 1, R10180 += 1, R10117 += 1, R10118 += 1 };
  s0 -> s2 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1 };
  s0 -> s3 [0, 65535] { R10256 += 1, R10179 += 1, R10180 += 1 };
  s0 -> s0 [0, 65535] { R10255 += 1, R10256 += 1 };
  s0 -> s4 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10256 += 1, R10180 += 1, R10117 += 1, R10118 += 1 };
  s1 -> s2 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1 };
  s1 -> s4 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s7 [0, 65535] { R10256 += 1 };
  s2 -> s5 [0, 65535] { R10256 += 1, R10180 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1 };
  s2 -> s7 [0, 65535] { R10256 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R10256 += 1, R10180 += 1, R10117 += 1, R10118 += 1 };
  s3 -> s2 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1 };
  s3 -> s3 [0, 65535] { R10256 += 1, R10179 += 1, R10180 += 1 };
  s3 -> s4 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s5 [0, 65535] { R10256 += 1, R10180 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1 };
  s4 -> s4 [0, 65535] { R10256 += 1, R10180 += 1, R10118 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s7 [0, 65535] { R10256 += 1 };
  s5 -> s5 [0, 65535] { R10256 += 1, R10180 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10256 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10256 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s0 -> s0 [0, 65535] { R10257 += 1, R10258 += 1 };
  s0 -> s2 [0, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8827 += 1, R8828 += 1 };
  s0 -> s3 [0, 65535] { R10258 += 1, R10181 += 1, R10182 += 1 };
  s0 -> s4 [0, 65535] { R10258 += 1, R10182 += 1, R10119 += 1, R10120 += 1 };
  s0 -> s5 [77, 77] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s0 -> s1 [78, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s1 -> s1 [0, 70] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s1 -> s5 [77, 77] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s1 -> s1 [78, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s2 -> s1 [0, 70] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s2 -> s2 [0, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8827 += 1, R8828 += 1 };
  s2 -> s5 [77, 77] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s2 -> s1 [78, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s3 -> s1 [0, 70] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s3 -> s2 [0, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8827 += 1, R8828 += 1 };
  s3 -> s3 [0, 65535] { R10258 += 1, R10181 += 1, R10182 += 1 };
  s3 -> s4 [0, 65535] { R10258 += 1, R10182 += 1, R10119 += 1, R10120 += 1 };
  s3 -> s5 [77, 77] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s3 -> s1 [78, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s4 -> s1 [0, 70] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s4 -> s2 [0, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8827 += 1, R8828 += 1 };
  s4 -> s4 [0, 65535] { R10258 += 1, R10182 += 1, R10119 += 1, R10120 += 1 };
  s4 -> s5 [77, 77] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s4 -> s1 [78, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s5 -> s5 [0, 70] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s5 -> s5 [0, 65535] { R10258 += 1, R10182 += 1, R10120 += 1 };
  s5 -> s6 [0, 65535] { R10258 += 1, R10182 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10258 += 1 };
  s5 -> s5 [77, 65535] { R10258 += 1, R10182 += 1, R10120 += 1, R8828 += 1 };
  s6 -> s6 [0, 65535] { R10258 += 1, R10182 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10258 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10258 += 1 };
  accepting s5, s6, s7, s8;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10260 += 1, R10183 += 1, R10184 += 1 };
  s0 -> s0 [0, 65535] { R10259 += 1, R10260 += 1 };
  s0 -> s2 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1 };
  s0 -> s3 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1, R9559 += 1, R9560 += 1 };
  s0 -> s4 [0, 65535] { R10260 += 1, R10184 += 1, R10121 += 1, R10122 += 1 };
  s1 -> s1 [0, 65535] { R10260 += 1, R10183 += 1, R10184 += 1 };
  s1 -> s2 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1 };
  s1 -> s3 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1, R9559 += 1, R9560 += 1 };
  s1 -> s4 [0, 65535] { R10260 += 1, R10184 += 1, R10121 += 1, R10122 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R10260 += 1, R10184 += 1 };
  s2 -> s2 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10260 += 1 };
  s3 -> s7 [0, 65535] { R10260 += 1, R10184 += 1 };
  s3 -> s2 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1 };
  s3 -> s3 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1, R9559 += 1, R9560 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10260 += 1 };
  s4 -> s2 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1 };
  s4 -> s3 [0, 65535] { R10260 += 1, R10184 += 1, R10122 += 1, R9559 += 1, R9560 += 1 };
  s4 -> s4 [0, 65535] { R10260 += 1, R10184 += 1, R10121 += 1, R10122 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10260 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10260 += 1 };
  s7 -> s7 [0, 65535] { R10260 += 1, R10184 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10260 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s0 [0, 65535] { R10261 += 1, R10262 += 1 };
  s0 -> s1 [0, 65535] { R10262 += 1, R10186 += 1, R10123 += 1, R10124 += 1 };
  s0 -> s2 [0, 65535] { R10262 += 1, R10186 += 1, R10124 += 1 };
  s0 -> s3 [0, 65535] { R10262 += 1, R10185 += 1, R10186 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R10262 += 1 };
  s1 -> s1 [0, 65535] { R10262 += 1, R10186 += 1, R10123 += 1, R10124 += 1 };
  s1 -> s2 [0, 65535] { R10262 += 1, R10186 += 1, R10124 += 1 };
  s2 -> s5 [0, 65535] { R10262 += 1, R10186 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s6 [0, 65535] { R10262 += 1 };
  s2 -> s2 [0, 65535] { R10262 += 1, R10186 += 1, R10124 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R10262 += 1, R10186 += 1, R10123 += 1, R10124 += 1 };
  s3 -> s2 [0, 65535] { R10262 += 1, R10186 += 1, R10124 += 1 };
  s3 -> s3 [0, 65535] { R10262 += 1, R10185 += 1, R10186 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10262 += 1, R10186 += 1 };
  s5 -> s4 [0, 65535];
  s5 -> s6 [0, 65535] { R10262 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R10262 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10264 += 1, R10188 += 1, R10144 += 1, R21 += 1 };
  s0 -> s2 [0, 65535] { R10264 += 1, R10187 += 1, R10188 += 1 };
  s0 -> s3 [0, 65535] { R10264 += 1, R10188 += 1, R10143 += 1, R10144 += 1 };
  s0 -> s0 [0, 65535] { R10263 += 1, R10264 += 1 };
  s1 -> s6 [0, 65535] { R10264 += 1, R10188 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10264 += 1 };
  s1 -> s1 [0, 65535] { R10264 += 1, R10188 += 1, R10144 += 1, R21 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R10264 += 1, R10188 += 1, R10144 += 1, R21 += 1 };
  s2 -> s2 [0, 65535] { R10264 += 1, R10187 += 1, R10188 += 1 };
  s2 -> s3 [0, 65535] { R10264 += 1, R10188 += 1, R10143 += 1, R10144 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10264 += 1 };
  s3 -> s1 [0, 65535] { R10264 += 1, R10188 += 1, R10144 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R10264 += 1, R10188 += 1, R10143 += 1, R10144 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10264 += 1 };
  s6 -> s6 [0, 65535] { R10264 += 1, R10188 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10264 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s0 -> s0 [0, 65535] { R10265 += 1, R10266 += 1 };
  s0 -> s2 [0, 65535] { R10266 += 1, R10189 += 1, R10190 += 1 };
  s0 -> s3 [0, 65535] { R10266 += 1, R10190 += 1, R10145 += 1, R10146 += 1 };
  s0 -> s4 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s0 -> s5 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s0 -> s6 [70, 70] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s0 -> s1 [71, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s1 -> s1 [0, 65] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s1 -> s4 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s1 -> s5 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s1 -> s6 [70, 70] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s1 -> s1 [71, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s2 -> s1 [0, 65] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s2 -> s2 [0, 65535] { R10266 += 1, R10189 += 1, R10190 += 1 };
  s2 -> s3 [0, 65535] { R10266 += 1, R10190 += 1, R10145 += 1, R10146 += 1 };
  s2 -> s4 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s2 -> s5 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s2 -> s6 [70, 70] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s2 -> s1 [71, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s3 -> s1 [0, 65] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s3 -> s3 [0, 65535] { R10266 += 1, R10190 += 1, R10145 += 1, R10146 += 1 };
  s3 -> s4 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s3 -> s5 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s3 -> s6 [70, 70] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s3 -> s1 [71, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s5 -> s5 [0, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s5 -> s9 [70, 70] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s5 -> s5 [71, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s6 -> s6 [0, 65] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10266 += 1 };
  s6 -> s6 [0, 65535] { R10266 += 1, R10190 += 1 };
  s6 -> s9 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s6 -> s10 [66, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s6 -> s6 [70, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10266 += 1 };
  s9 -> s9 [0, 66] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s9 -> s9 [0, 65535] { R10266 += 1, R10190 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R10266 += 1 };
  s9 -> s9 [70, 65535] { R10266 += 1, R10190 += 1, R10146 += 1 };
  s10 -> s7 [0, 65535];
  s10 -> s10 [0, 65535] { R10266 += 1, R10190 += 1 };
  s10 -> s8 [0, 65535] { R10266 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s0 -> s0 [0, 65535] { R10267 += 1, R10268 += 1 };
  s0 -> s2 [0, 65535] { R10268 += 1, R10191 += 1, R10192 += 1 };
  s0 -> s3 [0, 65535] { R10268 += 1, R10192 += 1, R10147 += 1, R10148 += 1 };
  s0 -> s4 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10268 += 1, R10192 += 1 };
  s1 -> s7 [0, 65535] { R10268 += 1 };
  s1 -> s4 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10268 += 1, R10191 += 1, R10192 += 1 };
  s2 -> s3 [0, 65535] { R10268 += 1, R10192 += 1, R10147 += 1, R10148 += 1 };
  s2 -> s4 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s3 -> s3 [0, 65535] { R10268 += 1, R10192 += 1, R10147 += 1, R10148 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R10268 += 1 };
  s3 -> s4 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10268 += 1, R10192 += 1, R10148 += 1, R77 += 1 };
  s4 -> s8 [0, 65535] { R10268 += 1, R10192 += 1 };
  s4 -> s7 [0, 65535] { R10268 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10268 += 1, R10192 += 1 };
  s5 -> s7 [0, 65535] { R10268 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10268 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10268 += 1, R10192 += 1 };
  s8 -> s7 [0, 65535] { R10268 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R10270 += 1, R10193 += 1, R10194 += 1 };
  s0 -> s0 [0, 65535] { R10269 += 1, R10270 += 1 };
  s0 -> s3 [0, 65535] { R10270 += 1, R10194 += 1, R10149 += 1, R10150 += 1 };
  s0 -> s4 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s1 -> s1 [0, 65535] { R10270 += 1, R10194 += 1 };
  s1 -> s6 [0, 65535] { R10270 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R10270 += 1, R10193 += 1, R10194 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R10270 += 1, R10194 += 1, R10149 += 1, R10150 += 1 };
  s2 -> s4 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s3 -> s6 [0, 65535] { R10270 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10270 += 1, R10194 += 1, R10149 += 1, R10150 += 1 };
  s3 -> s4 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s4 -> s8 [0, 65535] { R10270 += 1, R10194 += 1 };
  s4 -> s6 [0, 65535] { R10270 += 1 };
  s4 -> s4 [0, 65535] { R10270 += 1, R10194 += 1, R10150 += 1, R79 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R10270 += 1 };
  s5 -> s5 [0, 65535] { R10270 += 1, R10194 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R10270 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10270 += 1, R10194 += 1 };
  s8 -> s6 [0, 65535] { R10270 += 1 };
  s8 -> s7 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s0 -> s2 [0, 65535] { R10272 += 1, R10195 += 1, R10196 += 1 };
  s0 -> s0 [0, 65535] { R10271 += 1, R10272 += 1 };
  s0 -> s3 [0, 65535] { R10272 += 1, R10196 += 1, R10151 += 1, R10152 += 1 };
  s0 -> s4 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65535] { R10272 += 1, R10196 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10272 += 1 };
  s1 -> s4 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R10272 += 1, R10195 += 1, R10196 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R10272 += 1, R10196 += 1, R10151 += 1, R10152 += 1 };
  s2 -> s4 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10272 += 1, R10196 += 1, R10151 += 1, R10152 += 1 };
  s3 -> s7 [0, 65535] { R10272 += 1 };
  s3 -> s4 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s4 -> s4 [0, 65535] { R10272 += 1, R10196 += 1, R10152 += 1, R81 += 1, R82 += 1 };
  s4 -> s8 [0, 65535] { R10272 += 1, R10196 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R10272 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10272 += 1 };
  s5 -> s5 [0, 65535] { R10272 += 1, R10196 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10272 += 1 };
  s8 -> s8 [0, 65535] { R10272 += 1, R10196 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R10272 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s3 [0, 65535] { R10274 += 1, R10198 += 1, R10153 += 1, R10154 += 1 };
  s0 -> s4 [0, 65535] { R10274 += 1, R10197 += 1, R10198 += 1 };
  s0 -> s0 [0, 65535] { R10273 += 1, R10274 += 1 };
  s0 -> s5 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s6 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s7 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s8 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s1 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s1 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65535] { R10274 += 1, R10198 += 1 };
  s1 -> s10 [0, 65535] { R10274 += 1 };
  s1 -> s11 [0, 65535];
  s1 -> s5 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s6 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s1 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s5 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s6 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s7 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s8 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s1 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s3 [0, 65535] { R10274 += 1, R10198 += 1, R10153 += 1, R10154 += 1 };
  s3 -> s5 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s6 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s7 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s8 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [0, 65] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s3 [0, 65535] { R10274 += 1, R10198 += 1, R10153 += 1, R10154 += 1 };
  s4 -> s4 [0, 65535] { R10274 += 1, R10197 += 1, R10198 += 1 };
  s4 -> s5 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s6 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s7 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s8 [66, 66] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [67, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s5 -> s5 [0, 65535] { R10274 += 1, R10198 += 1 };
  s5 -> s10 [0, 65535] { R10274 += 1 };
  s5 -> s11 [0, 65535];
  s6 -> s6 [0, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s9 [0, 65535] { R10274 += 1, R10198 += 1 };
  s6 -> s10 [0, 65535] { R10274 += 1 };
  s6 -> s11 [0, 65535];
  s7 -> s6 [0, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6638 += 1, R6639 += 1 };
  s7 -> s7 [0, 65535] { R10274 += 1, R10198 += 1, R10154 += 1, R6637 += 1, R6638 += 1 };
  s9 -> s9 [0, 65535] { R10274 += 1, R10198 += 1 };
  s9 -> s10 [0, 65535] { R10274 += 1 };
  s9 -> s11 [0, 65535];
  s10 -> s10 [0, 65535] { R10274 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  accepting s5, s9, s6, s1, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s2 [0, 65535] { R10276 += 1, R10200 += 1, R10155 += 1, R10156 += 1 };
  s0 -> s3 [0, 65535] { R10276 += 1, R10199 += 1, R10200 += 1 };
  s0 -> s0 [0, 65535] { R10275 += 1, R10276 += 1 };
  s0 -> s4 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s5 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s1 [67, 65535] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [0, 65] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R10276 += 1 };
  s1 -> s1 [0, 65535] { R10276 += 1, R10200 += 1 };
  s1 -> s4 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s5 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s1 -> s1 [67, 65535] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [0, 65] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10276 += 1, R10200 += 1, R10155 += 1, R10156 += 1 };
  s2 -> s7 [0, 65535] { R10276 += 1 };
  s2 -> s4 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s5 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [67, 65535] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [0, 65] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s2 [0, 65535] { R10276 += 1, R10200 += 1, R10155 += 1, R10156 += 1 };
  s3 -> s3 [0, 65535] { R10276 += 1, R10199 += 1, R10200 += 1 };
  s3 -> s4 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s5 [66, 66] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [67, 65535] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s8 [0, 65535] { R10276 += 1, R10200 += 1 };
  s4 -> s7 [0, 65535] { R10276 += 1 };
  s4 -> s4 [0, 65535] { R10276 += 1, R10200 += 1, R10156 += 1, R8825 += 1, R8826 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R10276 += 1 };
  s5 -> s5 [0, 65535] { R10276 += 1, R10200 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R10276 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R10276 += 1, R10200 += 1 };
  s8 -> s7 [0, 65535] { R10276 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s2 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s3 [0, 65535] { R10278 += 1, R10202 += 1, R10157 += 1, R10158 += 1 };
  s0 -> s4 [0, 65535] { R10278 += 1, R10201 += 1, R10202 += 1 };
  s0 -> s0 [0, 65535] { R10277 += 1, R10278 += 1 };
  s0 -> s5 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s6 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s7 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s0 -> s8 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s1 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s0 -> s2 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s1 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s1 -> s2 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s5 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s1 -> s6 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s7 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s1 -> s8 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s1 -> s1 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s1 -> s2 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s2 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s9 [0, 65535] { R10278 += 1 };
  s2 -> s2 [0, 65535] { R10278 += 1, R10202 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s6 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s7 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s2 -> s2 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s1 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s2 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s3 [0, 65535] { R10278 += 1, R10202 += 1, R10157 += 1, R10158 += 1 };
  s3 -> s5 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s6 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s7 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s3 -> s8 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s1 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s3 -> s2 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s1 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s2 [0, 65] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s3 [0, 65535] { R10278 += 1, R10202 += 1, R10157 += 1, R10158 += 1 };
  s4 -> s4 [0, 65535] { R10278 += 1, R10201 += 1, R10202 += 1 };
  s4 -> s5 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s6 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s7 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s4 -> s8 [66, 66] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s1 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s4 -> s2 [67, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s5 -> s5 [0, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9555 += 1, R9556 += 1 };
  s5 -> s6 [0, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s6 -> s9 [0, 65535] { R10278 += 1 };
  s6 -> s6 [0, 65535] { R10278 += 1, R10202 += 1, R10158 += 1, R9556 += 1, R9557 += 1 };
  s6 -> s11 [0, 65535] { R10278 += 1, R10202 += 1 };
  s6 -> s10 [0, 65535];
  s7 -> s9 [0, 65535] { R10278 += 1 };
  s7 -> s7 [0, 65535] { R10278 += 1, R10202 += 1 };
  s7 -> s10 [0, 65535];
  s9 -> s9 [0, 65535] { R10278 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R10278 += 1 };
  s11 -> s11 [0, 65535] { R10278 += 1, R10202 += 1 };
  s11 -> s10 [0, 65535];
  accepting s2, s9, s6, s7, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s0 -> s2 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s3 [0, 65535] { R10280 += 1, R10203 += 1, R10204 += 1 };
  s0 -> s0 [0, 65535] { R10279 += 1, R10280 += 1 };
  s0 -> s4 [0, 65535] { R10280 += 1, R10204 += 1, R10159 += 1, R10160 += 1 };
  s0 -> s5 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s6 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s0 -> s7 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s8 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s0 -> s1 [67, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s0 -> s2 [67, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s0 -> s9 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s0 -> s1 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s1 -> s1 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s1 -> s6 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s1 -> s8 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s1 -> s1 [67, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s1 -> s1 [67, 65535] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s1 -> s9 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s1 -> s1 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s2 -> s1 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s2 -> s2 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s5 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s6 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s2 -> s7 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s8 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s2 -> s1 [67, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s2 -> s2 [67, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s2 -> s9 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s2 -> s1 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s3 -> s1 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s3 -> s2 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s3 -> s3 [0, 65535] { R10280 += 1, R10203 += 1, R10204 += 1 };
  s3 -> s4 [0, 65535] { R10280 += 1, R10204 += 1, R10159 += 1, R10160 += 1 };
  s3 -> s5 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s3 -> s6 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s3 -> s7 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s3 -> s8 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s3 -> s1 [67, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s3 -> s2 [67, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s3 -> s9 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s3 -> s1 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s4 -> s1 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s4 -> s2 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s4 -> s4 [0, 65535] { R10280 += 1, R10204 += 1, R10159 += 1, R10160 += 1 };
  s4 -> s5 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s4 -> s6 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s4 -> s7 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s4 -> s8 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s4 -> s1 [67, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s4 -> s2 [67, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s4 -> s9 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s4 -> s1 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s7 -> s8 [0, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s7 -> s7 [0, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10101 += 1, R10102 += 1 };
  s7 -> s12 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s7 -> s8 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s8 -> s8 [0, 69] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s8 -> s8 [0, 65535] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s8 -> s12 [70, 70] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s8 -> s8 [78, 65535] { R10280 += 1, R10204 += 1, R10160 += 1, R10102 += 1 };
  s9 -> s9 [0, 65] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s9 -> s10 [0, 65535] { R10280 += 1 };
  s9 -> s9 [0, 65535] { R10280 += 1, R10204 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s12 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s9 -> s13 [66, 66] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s9 -> s9 [67, 65535] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s10 -> s10 [0, 65535] { R10280 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R10280 += 1 };
  s12 -> s12 [0, 65535] { R10280 += 1, R10204 += 1, R10160 += 1 };
  s12 -> s14 [0, 65535] { R10280 += 1, R10204 += 1 };
  s12 -> s11 [0, 65535];
  s13 -> s10 [0, 65535] { R10280 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [0, 65535] { R10280 += 1, R10204 += 1 };
  s14 -> s10 [0, 65535] { R10280 += 1 };
  s14 -> s14 [0, 65535] { R10280 += 1, R10204 += 1 };
  s14 -> s11 [0, 65535];
  accepting s12, s13, s9, s14, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R10120 && R2 = R10204 && R3 - R10280 = 1 && R23 - R10204 = -1 && R24 = R10204 && R25 - R10204 = -1 && R26 = R10204 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R10280 && R32 - R10280 = 1 && R33 = R10280 && R34 - R10280 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R8828 + -1*R8826 - R64 = 0 && R63 + R8827 + R8825 = 0 && R10119 = 0 && R10145 = 0 && R10146 = 0 && R10153 = 0 && R10154 = 0 && R10157 = 0 && R10158 = 0 && R10159 = 0 && R10160 = 0 && R10161 = 0 && R10162 = R10204 && R10163 = 0 && R10164 = R10204 && R10165 = 0 && R10166 = R10204 && R10167 = 0 && R10168 = R10204 && R10169 = 0 && R10170 = R10204 && R10171 = 0 && R10172 = R10204 && R10173 = 0 && R10174 = R10204 && R10175 = 0 && R10176 = R10204 && R10177 = 0 && R10178 = R10204 && R10179 = 0 && R10180 = R10204 && R10181 = 0 && R10182 = R10204 && R10183 = 0 && R10184 = R10204 && R10185 = 0 && R10186 = R10204 && R10187 = 0 && R10188 = R10204 && R10189 = 0 && R10190 = R10204 && R10191 = 0 && R10192 = R10204 && R10193 = 0 && R10194 = R10204 && R10195 = 0 && R10196 = R10204 && R10197 = 0 && R10198 = R10204 && R10199 = 0 && R10200 = R10204 && R10201 = 0 && R10202 = R10204 && R10203 = 0 && R10205 = 0 && R10206 = R10280 && R10207 = 0 && R10208 = R10280 && R10209 = 0 && R10210 = R10280 && R10211 = 0 && R10212 = R10280 && R10213 = 0 && R10214 = R10280 && R10215 = 0 && R10216 = R10280 && R10217 = 0 && R10218 = R10280 && R10219 = 0 && R10220 = R10280 && R10221 = 0 && R10222 = R10280 && R10223 = 0 && R10224 = R10280 && R10225 = 0 && R10226 = R10280 && R10227 = 0 && R10228 = R10280 && R10229 = 0 && R10230 = R10280 && R10231 = 0 && R10232 = R10280 && R10233 = 0 && R10234 = R10280 && R10235 = 0 && R10236 = R10280 && R10237 = 0 && R10238 = R10280 && R10239 = 0 && R10240 = R10280 && R10241 = 0 && R10242 = R10280 && R10243 = 0 && R10244 = R10280 && R10245 = 0 && R10246 = R10280 && R10247 = 0 && R10248 = R10280 && R10249 = 0 && R10250 = R10280 && R10251 = 0 && R10252 = R10280 && R10253 = 0 && R10254 = R10280 && R10255 = 0 && R10256 = R10280 && R10257 = 0 && R10258 = R10280 && R10259 = 0 && R10260 = R10280 && R10261 = 0 && R10262 = R10280 && R10263 = 0 && R10264 = R10280 && R10265 = 0 && R10266 = R10280 && R10267 = 0 && R10268 = R10280 && R10269 = 0 && R10270 = R10280 && R10271 = 0 && R10272 = R10280 && R10273 = 0 && R10274 = R10280 && R10275 = 0 && R10276 = R10280 && R10277 = 0 && R10278 = R10280 && R10279 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R8828 + -1*R8826 - R64 < 1 && -1 < R10120 && 0 < R10204 && -1 < R10280 && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R53 + R83 + R81 = 0 || R64 + R8828 + R8826 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R8828 + R8826 < 1))) && (R10105 != 0 || R10106 = R10120 || (R20 = 0 && R10120 = 0)) && (R10107 != 0 || R10108 = R10120 || (R20 = 0 && R10120 = 0)) && (R10109 != 0 || R10110 = R10120 || (R20 = 0 && R10120 = 0)) && (R10111 != 0 || R10112 = R10120 || (R20 = 0 && R10120 = 0)) && (R10113 != 0 || R10114 = R10120 || (R20 = 0 && R10120 = 0)) && (R10115 != 0 || R10116 = R10120 || (R20 = 0 && R10120 = 0)) && (R10117 != 0 || R10118 = R10120 || (R20 = 0 && R10120 = 0)) && (R10121 != 0 || R10120 = R10122 || (R20 = 0 && R10120 = 0)) && (R10123 != 0 || R10120 = R10124 || (R20 = 0 && R10120 = 0)) && (R21 = 0 || (R10143 = 0 && R10144 = 0)) && (R21 = 0 || (R10147 = 0 && R10148 = 0)) && (R21 = 0 || (R10149 = 0 && R10150 = 0)) && (R21 = 0 || (R10151 = 0 && R10152 = 0)) && (R21 = 0 || (R10155 = 0 && R10156 = 0)) && (R22 = 0 || (R10125 = 0 && R10126 = 0)) && (R22 = 0 || (R10127 = 0 && R10128 = 0)) && (R22 = 0 || (R10129 = 0 && R10130 = 0)) && (R22 = 0 || (R10131 = 0 && R10132 = 0)) && (R22 = 0 || (R10133 = 0 && R10134 = 0)) && (R22 = 0 || (R10135 = 0 && R10136 = 0)) && (R22 = 0 || (R10137 = 0 && R10138 = 0)) && (R22 = 0 || (R10139 = 0 && R10140 = 0)) && (R22 = 0 || (R10141 = 0 && R10142 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0)) && (R69 + R9560 + R9557 = 0 || (R67 + R9558 + R9555 = 0 && R68 + R9559 + R9556 = 0)) && (R69 + R9560 + R9557 = 0 || (R73 + R10103 + R10101 = 0 && R74 + R10104 + R10102 = 0)) && (R10105 = 0 || (R20 = 0 && R10120 = 0)) && (R10107 = 0 || (R20 = 0 && R10120 = 0)) && (R10109 = 0 || (R20 = 0 && R10120 = 0)) && (R10111 = 0 || (R20 = 0 && R10120 = 0)) && (R10113 = 0 || (R20 = 0 && R10120 = 0)) && (R10115 = 0 || (R20 = 0 && R10120 = 0)) && (R10117 = 0 || (R20 = 0 && R10120 = 0)) && (R10121 = 0 || (R20 = 0 && R10120 = 0)) && (R10123 = 0 || (R20 = 0 && R10120 = 0));
// End of Parikh automata intersection problem
