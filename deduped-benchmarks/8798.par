// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R2, R250, R254, R255, R3, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R255 += 1 };
  s0 -> s0 [0, 65535] { R254 += 1, R255 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R255 += 1 };
  s1 -> s1 [0, 60] { R255 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R255 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R335 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R334 += 1, R335 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R335 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R347 += 1 };
  s0 -> s0 [0, 65535] { R346 += 1, R347 += 1 };
  s0 -> s2 [68, 68] { R347 += 1 };
  s0 -> s1 [69, 65535] { R347 += 1 };
  s1 -> s1 [0, 64] { R347 += 1 };
  s1 -> s2 [68, 68] { R347 += 1 };
  s1 -> s1 [69, 65535] { R347 += 1 };
  s2 -> s2 [0, 64] { R347 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R347 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s0 [0, 65535] { R348 += 1, R349 += 1 };
  s0 -> s1 [0, 65535] { R349 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R349 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 67] { R351 += 1 };
  s0 -> s0 [0, 65535] { R350 += 1, R351 += 1 };
  s0 -> s2 [0, 65535] { R351 += 1, R250 += 1 };
  s0 -> s3 [68, 68] { R351 += 1 };
  s0 -> s1 [69, 65535] { R351 += 1 };
  s1 -> s1 [0, 67] { R351 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [68, 68] { R351 += 1 };
  s1 -> s1 [69, 65535] { R351 += 1 };
  s2 -> s1 [0, 67] { R351 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R351 += 1, R250 += 1 };
  s2 -> s3 [68, 68] { R351 += 1 };
  s2 -> s1 [69, 65535] { R351 += 1 };
  s3 -> s3 [0, 65535] { R351 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R353 += 1, R323 += 1 };
  s0 -> s2 [0, 65535] { R353 += 1, R322 += 1, R323 += 1 };
  s0 -> s0 [0, 65535] { R352 += 1, R353 += 1 };
  s0 -> s3 [9, 13] { R353 += 1, R323 += 1 };
  s0 -> s1 [14, 31] { R353 += 1, R323 += 1 };
  s0 -> s3 [32, 32] { R353 += 1, R323 += 1 };
  s0 -> s1 [33, 65535] { R353 += 1, R323 += 1 };
  s1 -> s5 [0, 65535] { R353 += 1 };
  s1 -> s1 [0, 65535] { R353 += 1, R323 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R353 += 1, R323 += 1 };
  s2 -> s2 [0, 65535] { R353 += 1, R322 += 1, R323 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R353 += 1, R323 += 1 };
  s2 -> s1 [14, 31] { R353 += 1, R323 += 1 };
  s2 -> s3 [32, 32] { R353 += 1, R323 += 1 };
  s2 -> s1 [33, 65535] { R353 += 1, R323 += 1 };
  s3 -> s1 [0, 65535] { R353 += 1, R323 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R353 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s0 [0, 65535] { R354 += 1, R355 += 1 };
  s0 -> s1 [0, 65535] { R355 += 1, R324 += 1, R325 += 1 };
  s0 -> s2 [0, 65535] { R355 += 1, R325 += 1, R7 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R355 += 1, R324 += 1, R325 += 1 };
  s1 -> s2 [0, 65535] { R355 += 1, R325 += 1, R7 += 1 };
  s2 -> s3 [0, 65535] { R355 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R355 += 1, R325 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R355 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R357 += 1, R327 += 1 };
  s0 -> s0 [0, 65535] { R356 += 1, R357 += 1 };
  s0 -> s2 [0, 65535] { R357 += 1, R326 += 1, R327 += 1 };
  s0 -> s3 [9, 13] { R357 += 1, R327 += 1 };
  s0 -> s1 [14, 31] { R357 += 1, R327 += 1 };
  s0 -> s3 [32, 32] { R357 += 1, R327 += 1 };
  s0 -> s1 [33, 65535] { R357 += 1, R327 += 1 };
  s1 -> s5 [0, 65535] { R357 += 1 };
  s1 -> s1 [0, 65535] { R357 += 1, R327 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R357 += 1, R327 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R357 += 1, R326 += 1, R327 += 1 };
  s2 -> s3 [9, 13] { R357 += 1, R327 += 1 };
  s2 -> s1 [14, 31] { R357 += 1, R327 += 1 };
  s2 -> s3 [32, 32] { R357 += 1, R327 += 1 };
  s2 -> s1 [33, 65535] { R357 += 1, R327 += 1 };
  s3 -> s1 [0, 65535] { R357 += 1, R327 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R357 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R359 += 1, R328 += 1, R329 += 1 };
  s0 -> s2 [0, 65535] { R359 += 1, R329 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R358 += 1, R359 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R359 += 1, R328 += 1, R329 += 1 };
  s1 -> s2 [0, 65535] { R359 += 1, R329 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R359 += 1, R329 += 1, R8 += 1 };
  s2 -> s4 [0, 65535] { R359 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R359 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 67] { R361 += 1, R337 += 1 };
  s0 -> s2 [0, 65535] { R361 += 1, R336 += 1, R337 += 1 };
  s0 -> s0 [0, 65535] { R360 += 1, R361 += 1 };
  s0 -> s3 [68, 68] { R361 += 1, R337 += 1 };
  s0 -> s1 [69, 65535] { R361 += 1, R337 += 1 };
  s1 -> s1 [0, 67] { R361 += 1, R337 += 1 };
  s1 -> s3 [68, 68] { R361 += 1, R337 += 1 };
  s1 -> s1 [69, 65535] { R361 += 1, R337 += 1 };
  s2 -> s1 [0, 67] { R361 += 1, R337 += 1 };
  s2 -> s2 [0, 65535] { R361 += 1, R336 += 1, R337 += 1 };
  s2 -> s3 [68, 68] { R361 += 1, R337 += 1 };
  s2 -> s1 [69, 65535] { R361 += 1, R337 += 1 };
  s3 -> s4 [0, 65535] { R361 += 1 };
  s3 -> s3 [0, 65535] { R361 += 1, R337 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R361 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R363 += 1, R338 += 1, R339 += 1 };
  s0 -> s2 [0, 65535] { R363 += 1, R339 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R362 += 1, R363 += 1 };
  s1 -> s1 [0, 65535] { R363 += 1, R338 += 1, R339 += 1 };
  s1 -> s2 [0, 65535] { R363 += 1, R339 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R363 += 1 };
  s2 -> s2 [0, 65535] { R363 += 1, R339 += 1, R2 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R363 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 67] { R365 += 1, R341 += 1, R12 += 1 };
  s0 -> s2 [0, 65535] { R365 += 1, R340 += 1, R341 += 1 };
  s0 -> s3 [0, 65535] { R365 += 1, R341 += 1, R11 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R364 += 1, R365 += 1 };
  s0 -> s4 [68, 68] { R365 += 1, R341 += 1 };
  s0 -> s1 [69, 65535] { R365 += 1, R341 += 1, R12 += 1 };
  s1 -> s1 [0, 67] { R365 += 1, R341 += 1, R12 += 1 };
  s1 -> s4 [68, 68] { R365 += 1, R341 += 1 };
  s1 -> s1 [69, 65535] { R365 += 1, R341 += 1, R12 += 1 };
  s2 -> s1 [0, 67] { R365 += 1, R341 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R365 += 1, R340 += 1, R341 += 1 };
  s2 -> s3 [0, 65535] { R365 += 1, R341 += 1, R11 += 1, R12 += 1 };
  s2 -> s4 [68, 68] { R365 += 1, R341 += 1 };
  s2 -> s1 [69, 65535] { R365 += 1, R341 += 1, R12 += 1 };
  s3 -> s1 [0, 67] { R365 += 1, R341 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R365 += 1, R341 += 1, R11 += 1, R12 += 1 };
  s3 -> s4 [68, 68] { R365 += 1, R341 += 1 };
  s3 -> s1 [69, 65535] { R365 += 1, R341 += 1, R12 += 1 };
  s4 -> s5 [0, 65535] { R365 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R365 += 1, R341 += 1 };
  s5 -> s5 [0, 65535] { R365 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 67] { R367 += 1, R343 += 1, R331 += 1 };
  s0 -> s2 [0, 65535] { R367 += 1, R343 += 1, R330 += 1, R331 += 1 };
  s0 -> s0 [0, 65535] { R366 += 1, R367 += 1 };
  s0 -> s3 [0, 65535] { R367 += 1, R342 += 1, R343 += 1 };
  s0 -> s4 [68, 68] { R367 += 1, R343 += 1, R331 += 1 };
  s0 -> s1 [69, 65535] { R367 += 1, R343 += 1, R331 += 1 };
  s1 -> s1 [0, 67] { R367 += 1, R343 += 1, R331 += 1 };
  s1 -> s4 [68, 68] { R367 += 1, R343 += 1, R331 += 1 };
  s1 -> s1 [69, 65535] { R367 += 1, R343 += 1, R331 += 1 };
  s2 -> s1 [0, 67] { R367 += 1, R343 += 1, R331 += 1 };
  s2 -> s2 [0, 65535] { R367 += 1, R343 += 1, R330 += 1, R331 += 1 };
  s2 -> s4 [68, 68] { R367 += 1, R343 += 1, R331 += 1 };
  s2 -> s1 [69, 65535] { R367 += 1, R343 += 1, R331 += 1 };
  s3 -> s1 [0, 67] { R367 += 1, R343 += 1, R331 += 1 };
  s3 -> s2 [0, 65535] { R367 += 1, R343 += 1, R330 += 1, R331 += 1 };
  s3 -> s3 [0, 65535] { R367 += 1, R342 += 1, R343 += 1 };
  s3 -> s4 [68, 68] { R367 += 1, R343 += 1, R331 += 1 };
  s3 -> s1 [69, 65535] { R367 += 1, R343 += 1, R331 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R367 += 1 };
  s4 -> s7 [0, 65535] { R367 += 1, R343 += 1 };
  s4 -> s4 [0, 65535] { R367 += 1, R343 += 1, R331 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R367 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R367 += 1 };
  s7 -> s7 [0, 65535] { R367 += 1, R343 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 65535] { R369 += 1, R345 += 1, R333 += 1, R313 += 1 };
  s0 -> s2 [0, 65535] { R369 += 1, R344 += 1, R345 += 1 };
  s0 -> s0 [0, 65535] { R368 += 1, R369 += 1 };
  s0 -> s3 [0, 65535] { R369 += 1, R345 += 1, R332 += 1, R333 += 1 };
  s1 -> s6 [0, 65535] { R369 += 1, R345 += 1 };
  s1 -> s1 [0, 65535] { R369 += 1, R345 += 1, R333 += 1, R313 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R369 += 1 };
  s2 -> s1 [0, 65535] { R369 += 1, R345 += 1, R333 += 1, R313 += 1 };
  s2 -> s2 [0, 65535] { R369 += 1, R344 += 1, R345 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R369 += 1, R345 += 1, R332 += 1, R333 += 1 };
  s3 -> s1 [0, 65535] { R369 += 1, R345 += 1, R333 += 1, R313 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R369 += 1 };
  s3 -> s3 [0, 65535] { R369 += 1, R345 += 1, R332 += 1, R333 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R369 += 1 };
  s6 -> s6 [0, 65535] { R369 += 1, R345 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R369 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R315 += 1 };
  s0 -> s0 [0, 65535] { R314 += 1, R315 += 1 };
  s0 -> s2 [9, 13] { R315 += 1 };
  s0 -> s1 [14, 31] { R315 += 1 };
  s0 -> s2 [32, 32] { R315 += 1 };
  s0 -> s1 [33, 65535] { R315 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R315 += 1 };
  s2 -> s1 [0, 65535] { R315 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R317 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R316 += 1, R317 += 1 };
  s1 -> s1 [0, 65535] { R317 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R319 += 1 };
  s0 -> s0 [0, 65535] { R318 += 1, R319 += 1 };
  s0 -> s2 [9, 13] { R319 += 1 };
  s0 -> s1 [14, 31] { R319 += 1 };
  s0 -> s2 [32, 32] { R319 += 1 };
  s0 -> s1 [33, 65535] { R319 += 1 };
  s1 -> s1 [0, 65535] { R319 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R319 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R320 += 1, R321 += 1 };
  s0 -> s1 [0, 65535] { R321 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R321 += 1, R6 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R331 && R3 = R345 && R4 = R335 && R11 = 0 && R12 - R330 = -1 && R254 = 0 && R255 = R369 && R322 - R345 = -1 && R323 = R345 && R324 - R345 = -1 && R325 = R345 && R326 = 0 && R327 = 1 && R328 = 0 && R329 = 1 && R334 - R369 = 1 && R336 = 0 && R337 = R345 && R338 = 0 && R339 = R345 && R340 = 0 && R341 = R345 && R342 = 0 && R343 = R345 && R344 = 0 && R346 = 0 && R347 = R369 && R348 = 0 && R349 = R369 && R350 = 0 && R351 = R369 && R352 = 0 && R353 = R369 && R354 = 0 && R355 = R369 && R356 = 0 && R357 = R369 && R358 = 0 && R359 = R369 && R360 = 0 && R361 = R369 && R362 = 0 && R363 = R369 && R364 = 0 && R365 = R369 && R366 = 0 && R367 = R369 && R368 = 0 && R0 != 0 && R1 != 0 && R9 < 1 && R250 < 1 && R330 - R331 < 1 && -1 < R330 && R369 < R335 && 0 < R345 && -1 < R369 && (R5 != 0 || ((R1 != R315 || R314 - R315 = -1 || R315 < 0) && (R1 = R315 || R1 < 1))) && (R5 != 0 || ((R1 != R317 || R316 - R317 = -1 || R317 < 0) && (R1 = R317 || R1 < 1))) && (R318 != 0 || ((R6 != 0 || ((R1 != R319 || R319 = 1 || R319 < 0) && (R1 = R319 || R319 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R319 || R319 = 1 || R319 < 0) && (R319 != 1 || -1 < R1) && (R1 = R319 || R319 = 1))))) && (R320 != 0 || ((R6 != 0 || ((R1 != R321 || R321 = 1 || R321 < 0) && (R1 = R321 || R321 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R321 || R321 = 1 || R321 < 0) && (R321 != 1 || -1 < R1) && (R1 = R321 || R321 = 1))))) && (R330 != R332 || R331 = R333 || ((R313 != 0 || R331 - R332 < 1 || R332 < 0) && (R313 = 0 || R331 < R332 || R332 < 0))) && (R5 = 0 || (R1 = R315 && R314 - R315 = -1)) && (R5 = 0 || (R1 = R317 && R316 - R317 = -1)) && (R318 = 0 || (R6 = 0 && R1 < 0)) && (R320 = 0 || (R6 = 0 && R1 < 0)) && (R330 = R332 || (R313 = 0 && R330 = R331));
// End of Parikh automata intersection problem
