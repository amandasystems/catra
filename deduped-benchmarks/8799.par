// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R11, R12, R2, R251, R252, R3, R371, R372, R4, R430, R431, R432, R433, R434, R435, R436, R437, R438, R439, R440, R441, R442, R443, R444, R445, R446, R447, R448, R449, R450, R451, R452, R453, R454, R455, R456, R457, R458, R459, R460, R461, R462, R463, R464, R465, R466, R467, R468, R469, R470, R471, R472, R473, R474, R475, R476, R477, R478, R479, R480, R481, R482, R483, R484, R485, R486, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R372 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R372 += 1 };
  s1 -> s1 [0, 60] { R372 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R372 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R452 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R451 += 1, R452 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R452 += 1, R0 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 64] { R464 += 1 };
  s0 -> s0 [0, 65535] { R463 += 1, R464 += 1 };
  s0 -> s2 [68, 68] { R464 += 1 };
  s0 -> s1 [69, 65535] { R464 += 1 };
  s1 -> s1 [0, 64] { R464 += 1 };
  s1 -> s2 [68, 68] { R464 += 1 };
  s1 -> s1 [69, 65535] { R464 += 1 };
  s2 -> s2 [0, 64] { R464 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [68, 65535] { R464 += 1 };
  accepting s2;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R466 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R465 += 1, R466 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R466 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 67] { R468 += 1, R252 += 1 };
  s0 -> s0 [0, 65535] { R467 += 1, R468 += 1 };
  s0 -> s2 [0, 65535] { R468 += 1, R251 += 1, R252 += 1 };
  s0 -> s3 [68, 68] { R468 += 1 };
  s0 -> s1 [69, 65535] { R468 += 1, R252 += 1 };
  s1 -> s1 [0, 67] { R468 += 1, R252 += 1 };
  s1 -> s3 [68, 68] { R468 += 1 };
  s1 -> s1 [69, 65535] { R468 += 1, R252 += 1 };
  s2 -> s1 [0, 67] { R468 += 1, R252 += 1 };
  s2 -> s2 [0, 65535] { R468 += 1, R251 += 1, R252 += 1 };
  s2 -> s3 [68, 68] { R468 += 1 };
  s2 -> s1 [69, 65535] { R468 += 1, R252 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R468 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 8] { R470 += 1, R440 += 1 };
  s0 -> s2 [0, 65535] { R470 += 1, R439 += 1, R440 += 1 };
  s0 -> s0 [0, 65535] { R469 += 1, R470 += 1 };
  s0 -> s3 [9, 13] { R470 += 1, R440 += 1 };
  s0 -> s1 [14, 31] { R470 += 1, R440 += 1 };
  s0 -> s3 [32, 32] { R470 += 1, R440 += 1 };
  s0 -> s1 [33, 65535] { R470 += 1, R440 += 1 };
  s1 -> s5 [0, 65535] { R470 += 1 };
  s1 -> s1 [0, 65535] { R470 += 1, R440 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R470 += 1, R440 += 1 };
  s2 -> s2 [0, 65535] { R470 += 1, R439 += 1, R440 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R470 += 1, R440 += 1 };
  s2 -> s1 [14, 31] { R470 += 1, R440 += 1 };
  s2 -> s3 [32, 32] { R470 += 1, R440 += 1 };
  s2 -> s1 [33, 65535] { R470 += 1, R440 += 1 };
  s3 -> s1 [0, 65535] { R470 += 1, R440 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R470 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 65535] { R472 += 1, R442 += 1, R7 += 1 };
  s0 -> s2 [0, 65535] { R472 += 1, R441 += 1, R442 += 1 };
  s0 -> s0 [0, 65535] { R471 += 1, R472 += 1 };
  s1 -> s4 [0, 65535] { R472 += 1 };
  s1 -> s1 [0, 65535] { R472 += 1, R442 += 1, R7 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R472 += 1, R442 += 1, R7 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R472 += 1, R441 += 1, R442 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R472 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 8] { R474 += 1, R444 += 1 };
  s0 -> s0 [0, 65535] { R473 += 1, R474 += 1 };
  s0 -> s2 [0, 65535] { R474 += 1, R443 += 1, R444 += 1 };
  s0 -> s3 [9, 13] { R474 += 1, R444 += 1 };
  s0 -> s1 [14, 31] { R474 += 1, R444 += 1 };
  s0 -> s3 [32, 32] { R474 += 1, R444 += 1 };
  s0 -> s1 [33, 65535] { R474 += 1, R444 += 1 };
  s1 -> s1 [0, 65535] { R474 += 1, R444 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R474 += 1 };
  s2 -> s1 [0, 8] { R474 += 1, R444 += 1 };
  s2 -> s2 [0, 65535] { R474 += 1, R443 += 1, R444 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R474 += 1, R444 += 1 };
  s2 -> s1 [14, 31] { R474 += 1, R444 += 1 };
  s2 -> s3 [32, 32] { R474 += 1, R444 += 1 };
  s2 -> s1 [33, 65535] { R474 += 1, R444 += 1 };
  s3 -> s1 [0, 65535] { R474 += 1, R444 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R474 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 65535] { R476 += 1, R446 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R476 += 1, R445 += 1, R446 += 1 };
  s0 -> s0 [0, 65535] { R475 += 1, R476 += 1 };
  s1 -> s1 [0, 65535] { R476 += 1, R446 += 1, R8 += 1 };
  s1 -> s4 [0, 65535] { R476 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R476 += 1, R446 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R476 += 1, R445 += 1, R446 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R476 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 67] { R478 += 1, R454 += 1 };
  s0 -> s0 [0, 65535] { R477 += 1, R478 += 1 };
  s0 -> s2 [0, 65535] { R478 += 1, R453 += 1, R454 += 1 };
  s0 -> s3 [68, 68] { R478 += 1, R454 += 1 };
  s0 -> s1 [69, 65535] { R478 += 1, R454 += 1 };
  s1 -> s1 [0, 67] { R478 += 1, R454 += 1 };
  s1 -> s3 [68, 68] { R478 += 1, R454 += 1 };
  s1 -> s1 [69, 65535] { R478 += 1, R454 += 1 };
  s2 -> s1 [0, 67] { R478 += 1, R454 += 1 };
  s2 -> s2 [0, 65535] { R478 += 1, R453 += 1, R454 += 1 };
  s2 -> s3 [68, 68] { R478 += 1, R454 += 1 };
  s2 -> s1 [69, 65535] { R478 += 1, R454 += 1 };
  s3 -> s4 [0, 65535] { R478 += 1 };
  s3 -> s3 [0, 65535] { R478 += 1, R454 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R478 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 65535] { R480 += 1, R455 += 1, R456 += 1 };
  s0 -> s2 [0, 65535] { R480 += 1, R456 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R479 += 1, R480 += 1 };
  s1 -> s1 [0, 65535] { R480 += 1, R455 += 1, R456 += 1 };
  s1 -> s2 [0, 65535] { R480 += 1, R456 += 1, R2 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R480 += 1, R456 += 1, R2 += 1 };
  s2 -> s3 [0, 65535] { R480 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R480 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 67] { R482 += 1, R458 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R481 += 1, R482 += 1 };
  s0 -> s2 [0, 65535] { R482 += 1, R458 += 1, R11 += 1, R12 += 1 };
  s0 -> s3 [0, 65535] { R482 += 1, R457 += 1, R458 += 1 };
  s0 -> s4 [68, 68] { R482 += 1, R458 += 1 };
  s0 -> s1 [69, 65535] { R482 += 1, R458 += 1, R12 += 1 };
  s1 -> s1 [0, 67] { R482 += 1, R458 += 1, R12 += 1 };
  s1 -> s4 [68, 68] { R482 += 1, R458 += 1 };
  s1 -> s1 [69, 65535] { R482 += 1, R458 += 1, R12 += 1 };
  s2 -> s1 [0, 67] { R482 += 1, R458 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R482 += 1, R458 += 1, R11 += 1, R12 += 1 };
  s2 -> s4 [68, 68] { R482 += 1, R458 += 1 };
  s2 -> s1 [69, 65535] { R482 += 1, R458 += 1, R12 += 1 };
  s3 -> s1 [0, 67] { R482 += 1, R458 += 1, R12 += 1 };
  s3 -> s2 [0, 65535] { R482 += 1, R458 += 1, R11 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R482 += 1, R457 += 1, R458 += 1 };
  s3 -> s4 [68, 68] { R482 += 1, R458 += 1 };
  s3 -> s1 [69, 65535] { R482 += 1, R458 += 1, R12 += 1 };
  s4 -> s5 [0, 65535] { R482 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R482 += 1, R458 += 1 };
  s5 -> s5 [0, 65535] { R482 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s4, s5, s6;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 67] { R484 += 1, R460 += 1, R448 += 1 };
  s0 -> s2 [0, 65535] { R484 += 1, R460 += 1, R447 += 1, R448 += 1 };
  s0 -> s0 [0, 65535] { R483 += 1, R484 += 1 };
  s0 -> s3 [0, 65535] { R484 += 1, R459 += 1, R460 += 1 };
  s0 -> s4 [68, 68] { R484 += 1, R460 += 1, R448 += 1 };
  s0 -> s1 [69, 65535] { R484 += 1, R460 += 1, R448 += 1 };
  s1 -> s1 [0, 67] { R484 += 1, R460 += 1, R448 += 1 };
  s1 -> s4 [68, 68] { R484 += 1, R460 += 1, R448 += 1 };
  s1 -> s1 [69, 65535] { R484 += 1, R460 += 1, R448 += 1 };
  s2 -> s1 [0, 67] { R484 += 1, R460 += 1, R448 += 1 };
  s2 -> s2 [0, 65535] { R484 += 1, R460 += 1, R447 += 1, R448 += 1 };
  s2 -> s4 [68, 68] { R484 += 1, R460 += 1, R448 += 1 };
  s2 -> s1 [69, 65535] { R484 += 1, R460 += 1, R448 += 1 };
  s3 -> s1 [0, 67] { R484 += 1, R460 += 1, R448 += 1 };
  s3 -> s2 [0, 65535] { R484 += 1, R460 += 1, R447 += 1, R448 += 1 };
  s3 -> s3 [0, 65535] { R484 += 1, R459 += 1, R460 += 1 };
  s3 -> s4 [68, 68] { R484 += 1, R460 += 1, R448 += 1 };
  s3 -> s1 [69, 65535] { R484 += 1, R460 += 1, R448 += 1 };
  s4 -> s5 [0, 65535] { R484 += 1, R460 += 1 };
  s4 -> s6 [0, 65535] { R484 += 1 };
  s4 -> s4 [0, 65535] { R484 += 1, R460 += 1, R448 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R484 += 1, R460 += 1 };
  s5 -> s6 [0, 65535] { R484 += 1 };
  s5 -> s7 [0, 65535];
  s6 -> s6 [0, 65535] { R484 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  accepting s4, s5, s6, s7;
};
automaton value1_15 {
  init s0;
  s0 -> s0 [0, 65535] { R485 += 1, R486 += 1 };
  s0 -> s1 [0, 65535] { R486 += 1, R462 += 1, R449 += 1, R450 += 1 };
  s0 -> s2 [0, 65535] { R486 += 1, R461 += 1, R462 += 1 };
  s0 -> s3 [0, 65535] { R486 += 1, R462 += 1, R450 += 1, R430 += 1 };
  s1 -> s1 [0, 65535] { R486 += 1, R462 += 1, R449 += 1, R450 += 1 };
  s1 -> s3 [0, 65535] { R486 += 1, R462 += 1, R450 += 1, R430 += 1 };
  s1 -> s5 [0, 65535] { R486 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R486 += 1, R462 += 1, R449 += 1, R450 += 1 };
  s2 -> s2 [0, 65535] { R486 += 1, R461 += 1, R462 += 1 };
  s2 -> s3 [0, 65535] { R486 += 1, R462 += 1, R450 += 1, R430 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R486 += 1, R462 += 1 };
  s3 -> s3 [0, 65535] { R486 += 1, R462 += 1, R450 += 1, R430 += 1 };
  s3 -> s5 [0, 65535] { R486 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R486 += 1, R462 += 1 };
  s4 -> s5 [0, 65535] { R486 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R486 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s0 [91, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 8] { R432 += 1 };
  s0 -> s0 [0, 65535] { R431 += 1, R432 += 1 };
  s0 -> s2 [9, 13] { R432 += 1 };
  s0 -> s1 [14, 31] { R432 += 1 };
  s0 -> s2 [32, 32] { R432 += 1 };
  s0 -> s1 [33, 65535] { R432 += 1 };
  s1 -> s1 [0, 65535] { R432 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R432 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R434 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R433 += 1, R434 += 1 };
  s1 -> s1 [0, 65535] { R434 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R436 += 1 };
  s0 -> s0 [0, 65535] { R435 += 1, R436 += 1 };
  s0 -> s2 [9, 13] { R436 += 1 };
  s0 -> s1 [14, 31] { R436 += 1 };
  s0 -> s2 [32, 32] { R436 += 1 };
  s0 -> s1 [33, 65535] { R436 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R436 += 1 };
  s2 -> s1 [0, 65535] { R436 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R438 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R437 += 1, R438 += 1 };
  s1 -> s1 [0, 65535] { R438 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
};
constraint R2 = R448 && R3 = R460 && R4 = R452 && R11 = 0 && R12 - R447 = -1 && R251 = 0 && R252 - R459 = -1 && R371 = 0 && R372 = R486 && R439 - R460 = -1 && R440 = R460 && R441 - R460 = -1 && R442 = R460 && R443 = 0 && R444 = 1 && R445 = 0 && R446 = 1 && R451 - R486 = 1 && R453 = R459 && R454 = R460 && R457 = R459 && R458 = R460 && R463 = 0 && R464 = R486 && R465 = 0 && R466 = R486 && R467 = 0 && R468 = R486 && R469 = 0 && R470 = R486 && R471 = 0 && R472 = R486 && R473 = 0 && R474 = R486 && R475 = 0 && R476 = R486 && R477 = 0 && R478 = R486 && R479 = 0 && R480 = R486 && R481 = 0 && R482 = R486 && R483 = 0 && R484 = R486 && R485 = 0 && R0 != 0 && R1 != 0 && R9 < 1 && R447 - R448 < 1 && -1 < R447 && R486 < R452 && R459 - R460 < 1 && -1 < R459 && 0 < R460 && -1 < R486 && (R5 != 0 || ((R1 != R432 || R431 - R432 = -1 || R432 < 0) && (R1 = R432 || R1 < 1))) && (R5 != 0 || ((R1 != R434 || R433 - R434 = -1 || R434 < 0) && (R1 = R434 || R1 < 1))) && (R435 != 0 || ((R6 != 0 || ((R1 != R436 || R436 = 1 || R436 < 0) && (R1 = R436 || R436 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R436 || R436 = 1 || R436 < 0) && (R436 != 1 || -1 < R1) && (R1 = R436 || R436 = 1))))) && (R437 != 0 || ((R6 != 0 || ((R1 != R438 || R438 = 1 || R438 < 0) && (R1 = R438 || R438 = 1 || R1 < 1))) && (R6 = 0 || ((R1 != R438 || R438 = 1 || R438 < 0) && (R438 != 1 || -1 < R1) && (R1 = R438 || R438 = 1))))) && (R447 != R449 || R448 = R450 || ((R430 != 0 || R448 - R449 < 1 || R449 < 0) && (R430 = 0 || R448 < R449 || R449 < 0))) && (R455 != R459 || R456 = R460 || (R448 = 0 && (R447 != 0 || R460 - R459 < 1))) && (R459 != R461 || R460 = R462 || ((R447 != 0 || R448 != 0 || R460 - R461 < 1 || R461 < 0) && (R448 < 1 || R460 < R461 || R461 < 0))) && (R5 = 0 || (R1 = R432 && R431 - R432 = -1)) && (R5 = 0 || (R1 = R434 && R433 - R434 = -1)) && (R435 = 0 || (R6 = 0 && R1 < 0)) && (R437 = 0 || (R6 = 0 && R1 < 0)) && (R447 = R449 || (R430 = 0 && R447 = R448)) && (R455 = R459 || (R448 = 0 && (R447 != 0 || R460 - R459 < 1))) && (R459 = R461 || (R448 = 0 && (R447 != 0 || R460 - R459 < 1)));
// End of Parikh automata intersection problem
