// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R10281, R10282, R10283, R10284, R10285, R10286, R10467, R10468, R10469, R10470, R10471, R10472, R10473, R10474, R10475, R10476, R10477, R10478, R10479, R10480, R10481, R10482, R10483, R10484, R10485, R10486, R10487, R10488, R10489, R10490, R10491, R10492, R10493, R10494, R10495, R10496, R10497, R10498, R10499, R10500, R10501, R10502, R10503, R10504, R10505, R10506, R10507, R10508, R10509, R10510, R10511, R10512, R10513, R10514, R10515, R10516, R10517, R10518, R10519, R10520, R10521, R10522, R10523, R10524, R10525, R10526, R10527, R10528, R10529, R10530, R10531, R10532, R10533, R10534, R10535, R10536, R10537, R10538, R10539, R10540, R10541, R10542, R10543, R10544, R10545, R10546, R10547, R10548, R10549, R10550, R10551, R10552, R10553, R10554, R10555, R10556, R10557, R10558, R10559, R10560, R10561, R10562, R10563, R10564, R10565, R10566, R10567, R10568, R10569, R10570, R10571, R10572, R10573, R10574, R10575, R10576, R10577, R10578, R10579, R10580, R10581, R10582, R10583, R10584, R10585, R10586, R10587, R10588, R10589, R10590, R10591, R10592, R10593, R10594, R10595, R10596, R10597, R10598, R10599, R10600, R10601, R10602, R10603, R10604, R10605, R10606, R10607, R10608, R10609, R10610, R10611, R10612, R10613, R10614, R10615, R10616, R10617, R10618, R10619, R10620, R10621, R10622, R10623, R10624, R10625, R10626, R10627, R10628, R10629, R10630, R10631, R10632, R10633, R10634, R10635, R10636, R10637, R10638, R10639, R10640, R10641, R10642, R10643, R10644, R10645, R10646, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R67, R68, R69, R7, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84, R8825, R8826, R8827, R8828;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R10572 += 1 };
  s0 -> s0 [0, 65535] { R10571 += 1, R10572 += 1 };
  s0 -> s2 [66, 66] { R10572 += 1 };
  s0 -> s1 [67, 65535] { R10572 += 1 };
  s1 -> s1 [0, 64] { R10572 += 1 };
  s1 -> s2 [66, 66] { R10572 += 1 };
  s1 -> s1 [67, 65535] { R10572 += 1 };
  s2 -> s2 [0, 64] { R10572 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R10572 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R10573 += 1, R10574 += 1 };
  s0 -> s1 [0, 65535] { R10574 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R10574 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R10576 += 1 };
  s0 -> s2 [0, 65535] { R10576 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R10575 += 1, R10576 += 1 };
  s0 -> s3 [66, 66] { R10576 += 1 };
  s0 -> s1 [67, 65535] { R10576 += 1 };
  s1 -> s1 [0, 65] { R10576 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R10576 += 1 };
  s1 -> s1 [67, 65535] { R10576 += 1 };
  s2 -> s1 [0, 65] { R10576 += 1 };
  s2 -> s2 [0, 65535] { R10576 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R10576 += 1 };
  s2 -> s1 [67, 65535] { R10576 += 1 };
  s3 -> s3 [0, 65535] { R10576 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R10578 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R10578 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R10577 += 1, R10578 += 1 };
  s0 -> s3 [9, 13] { R10578 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R10578 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R10578 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R10578 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R10578 += 1, R24 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10578 += 1 };
  s2 -> s1 [0, 8] { R10578 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10578 += 1, R23 += 1, R24 += 1 };
  s2 -> s3 [9, 13] { R10578 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R10578 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R10578 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R10578 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R10578 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10578 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R10580 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R10580 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R10579 += 1, R10580 += 1 };
  s1 -> s1 [0, 65535] { R10580 += 1, R25 += 1, R26 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R10580 += 1, R26 += 1, R4 += 1 };
  s2 -> s3 [0, 65535] { R10580 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10580 += 1, R26 += 1, R4 += 1 };
  s3 -> s3 [0, 65535] { R10580 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R10582 += 1, R28 += 1 };
  s0 -> s2 [0, 65535] { R10582 += 1, R27 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R10581 += 1, R10582 += 1 };
  s0 -> s3 [9, 13] { R10582 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R10582 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R10582 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R10582 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R10582 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10582 += 1 };
  s2 -> s1 [0, 8] { R10582 += 1, R28 += 1 };
  s2 -> s2 [0, 65535] { R10582 += 1, R27 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R10582 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R10582 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R10582 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R10582 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R10582 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10582 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R10584 += 1, R30 += 1, R5 += 1 };
  s0 -> s2 [0, 65535] { R10584 += 1, R29 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R10583 += 1, R10584 += 1 };
  s1 -> s4 [0, 65535] { R10584 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10584 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10584 += 1, R30 += 1, R5 += 1 };
  s2 -> s2 [0, 65535] { R10584 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10584 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R10585 += 1, R10586 += 1 };
  s0 -> s1 [0, 65535] { R10586 += 1, R10492 += 1, R22 += 1 };
  s0 -> s2 [0, 65535] { R10586 += 1, R10491 += 1, R10492 += 1 };
  s1 -> s4 [0, 65535] { R10586 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R10586 += 1, R10492 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10586 += 1, R10492 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R10586 += 1, R10491 += 1, R10492 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10586 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R10588 += 1, R10494 += 1 };
  s0 -> s2 [0, 65535] { R10588 += 1, R10493 += 1, R10494 += 1 };
  s0 -> s0 [0, 65535] { R10587 += 1, R10588 += 1 };
  s0 -> s3 [66, 66] { R10588 += 1, R10494 += 1 };
  s0 -> s4 [66, 66] { R10588 += 1, R10494 += 1 };
  s0 -> s1 [71, 65535] { R10588 += 1, R10494 += 1 };
  s1 -> s1 [0, 65] { R10588 += 1, R10494 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10588 += 1 };
  s1 -> s3 [66, 66] { R10588 += 1, R10494 += 1 };
  s1 -> s4 [66, 66] { R10588 += 1, R10494 += 1 };
  s1 -> s1 [71, 65535] { R10588 += 1, R10494 += 1 };
  s2 -> s1 [0, 65] { R10588 += 1, R10494 += 1 };
  s2 -> s2 [0, 65535] { R10588 += 1, R10493 += 1, R10494 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10588 += 1, R10494 += 1 };
  s2 -> s4 [66, 66] { R10588 += 1, R10494 += 1 };
  s2 -> s1 [71, 65535] { R10588 += 1, R10494 += 1 };
  s3 -> s3 [0, 65535] { R10588 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R10588 += 1, R10494 += 1 };
  s4 -> s4 [0, 65535] { R10588 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [71, 65535] { R10588 += 1, R10494 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R10590 += 1, R10496 += 1, R49 += 1 };
  s0 -> s2 [0, 65535] { R10590 += 1, R10495 += 1, R10496 += 1 };
  s0 -> s0 [0, 65535] { R10589 += 1, R10590 += 1 };
  s0 -> s3 [66, 66] { R10590 += 1, R10496 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R10590 += 1, R10496 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R10590 += 1, R10496 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R10590 += 1, R10496 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10590 += 1 };
  s1 -> s3 [66, 66] { R10590 += 1, R10496 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R10590 += 1, R10496 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R10590 += 1, R10496 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R10590 += 1, R10496 += 1, R49 += 1 };
  s2 -> s2 [0, 65535] { R10590 += 1, R10495 += 1, R10496 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10590 += 1, R10496 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R10590 += 1, R10496 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R10590 += 1, R10496 += 1, R49 += 1 };
  s3 -> s3 [0, 65535] { R10590 += 1, R10496 += 1, R49 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10590 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10590 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10590 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R10592 += 1, R10498 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R10592 += 1, R10497 += 1, R10498 += 1 };
  s0 -> s0 [0, 65535] { R10591 += 1, R10592 += 1 };
  s0 -> s3 [66, 66] { R10592 += 1, R10498 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R10592 += 1, R10498 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R10592 += 1, R10498 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R10592 += 1, R10498 += 1, R51 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10592 += 1 };
  s1 -> s3 [66, 66] { R10592 += 1, R10498 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R10592 += 1, R10498 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R10592 += 1, R10498 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R10592 += 1, R10498 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R10592 += 1, R10497 += 1, R10498 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10592 += 1, R10498 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R10592 += 1, R10498 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R10592 += 1, R10498 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R10592 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10592 += 1, R10498 += 1, R51 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10592 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10592 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s0 -> s0 [0, 65535] { R10593 += 1, R10594 += 1 };
  s0 -> s2 [0, 65535] { R10594 += 1, R10499 += 1, R10500 += 1 };
  s0 -> s3 [66, 66] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10594 += 1 };
  s1 -> s3 [66, 66] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s2 -> s2 [0, 65535] { R10594 += 1, R10499 += 1, R10500 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10594 += 1 };
  s4 -> s5 [0, 65535] { R10594 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10594 += 1, R10500 += 1, R53 += 1, R54 += 1 };
  s5 -> s5 [0, 65535] { R10594 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s0 -> s0 [0, 65535] { R10595 += 1, R10596 += 1 };
  s0 -> s2 [0, 65535] { R10596 += 1, R10501 += 1, R10502 += 1 };
  s0 -> s3 [66, 66] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10596 += 1 };
  s1 -> s3 [66, 66] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10596 += 1, R10501 += 1, R10502 += 1 };
  s2 -> s3 [66, 66] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s3 -> s6 [0, 65535] { R10596 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10596 += 1, R10502 += 1, R57 += 1, R58 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10596 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10596 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R10597 += 1, R10598 += 1 };
  s0 -> s2 [0, 65535] { R10598 += 1, R10503 += 1, R10504 += 1 };
  s0 -> s3 [66, 66] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10598 += 1 };
  s1 -> s3 [66, 66] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R10598 += 1, R10503 += 1, R10504 += 1 };
  s2 -> s3 [66, 66] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10598 += 1, R10504 += 1, R63 += 1, R64 += 1 };
  s3 -> s6 [0, 65535] { R10598 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10598 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10598 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s0 -> s2 [0, 65535] { R10600 += 1, R10505 += 1, R10506 += 1 };
  s0 -> s0 [0, 65535] { R10599 += 1, R10600 += 1 };
  s0 -> s3 [66, 66] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R10600 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s2 -> s2 [0, 65535] { R10600 += 1, R10505 += 1, R10506 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R10600 += 1, R10506 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R10600 += 1 };
  s4 -> s4 [0, 65535] { R10600 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10600 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R10602 += 1, R10507 += 1, R10508 += 1 };
  s0 -> s0 [0, 65535] { R10601 += 1, R10602 += 1 };
  s0 -> s3 [66, 66] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65535] { R10602 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s2 -> s2 [0, 65535] { R10602 += 1, R10507 += 1, R10508 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s3 -> s6 [0, 65535] { R10602 += 1 };
  s3 -> s3 [0, 65535] { R10602 += 1, R10508 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10602 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10602 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R10604 += 1, R10528 += 1 };
  s0 -> s0 [0, 65535] { R10603 += 1, R10604 += 1 };
  s0 -> s2 [0, 65535] { R10604 += 1, R10527 += 1, R10528 += 1 };
  s0 -> s3 [66, 66] { R10604 += 1, R10528 += 1 };
  s0 -> s1 [67, 65535] { R10604 += 1, R10528 += 1 };
  s1 -> s1 [0, 65] { R10604 += 1, R10528 += 1 };
  s1 -> s3 [66, 66] { R10604 += 1, R10528 += 1 };
  s1 -> s1 [67, 65535] { R10604 += 1, R10528 += 1 };
  s2 -> s1 [0, 65] { R10604 += 1, R10528 += 1 };
  s2 -> s2 [0, 65535] { R10604 += 1, R10527 += 1, R10528 += 1 };
  s2 -> s3 [66, 66] { R10604 += 1, R10528 += 1 };
  s2 -> s1 [67, 65535] { R10604 += 1, R10528 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10604 += 1 };
  s3 -> s3 [0, 65535] { R10604 += 1, R10528 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10604 += 1 };
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R10606 += 1, R10530 += 1, R1 += 1 };
  s0 -> s2 [0, 65535] { R10606 += 1, R10529 += 1, R10530 += 1 };
  s0 -> s0 [0, 65535] { R10605 += 1, R10606 += 1 };
  s1 -> s4 [0, 65535] { R10606 += 1 };
  s1 -> s1 [0, 65535] { R10606 += 1, R10530 += 1, R1 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R10606 += 1, R10530 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R10606 += 1, R10529 += 1, R10530 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R10606 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R10608 += 1, R10532 += 1 };
  s0 -> s2 [0, 65535] { R10608 += 1, R10531 += 1, R10532 += 1 };
  s0 -> s3 [0, 65535] { R10608 += 1, R10532 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R10607 += 1, R10608 += 1 };
  s0 -> s4 [66, 66] { R10608 += 1, R10532 += 1 };
  s0 -> s1 [67, 65535] { R10608 += 1, R10532 += 1 };
  s1 -> s1 [0, 65] { R10608 += 1, R10532 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10608 += 1 };
  s1 -> s4 [66, 66] { R10608 += 1, R10532 += 1 };
  s1 -> s1 [67, 65535] { R10608 += 1, R10532 += 1 };
  s2 -> s1 [0, 65] { R10608 += 1, R10532 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10608 += 1, R10531 += 1, R10532 += 1 };
  s2 -> s3 [0, 65535] { R10608 += 1, R10532 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R10608 += 1, R10532 += 1 };
  s2 -> s1 [67, 65535] { R10608 += 1, R10532 += 1 };
  s3 -> s1 [0, 65] { R10608 += 1, R10532 += 1 };
  s3 -> s5 [0, 65535] { R10608 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10608 += 1, R10532 += 1, R11 += 1 };
  s3 -> s4 [66, 66] { R10608 += 1, R10532 += 1 };
  s3 -> s1 [67, 65535] { R10608 += 1, R10532 += 1 };
  s4 -> s4 [0, 65535] { R10608 += 1, R10532 += 1 };
  s5 -> s5 [0, 65535] { R10608 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s0 -> s2 [0, 65535] { R10610 += 1, R10534 += 1, R10471 += 1, R10472 += 1 };
  s0 -> s0 [0, 65535] { R10609 += 1, R10610 += 1 };
  s0 -> s3 [0, 65535] { R10610 += 1, R10533 += 1, R10534 += 1 };
  s0 -> s1 [67, 65535] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s1 -> s1 [0, 65] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s1 -> s5 [0, 65535] { R10610 += 1 };
  s1 -> s1 [0, 65535] { R10610 += 1, R10534 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [67, 65535] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s2 -> s1 [0, 65] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s2 -> s2 [0, 65535] { R10610 += 1, R10534 += 1, R10471 += 1, R10472 += 1 };
  s2 -> s5 [0, 65535] { R10610 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [67, 65535] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s3 -> s1 [0, 65] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s3 -> s2 [0, 65535] { R10610 += 1, R10534 += 1, R10471 += 1, R10472 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R10610 += 1, R10533 += 1, R10534 += 1 };
  s3 -> s1 [67, 65535] { R10610 += 1, R10534 += 1, R10472 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10610 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R10612 += 1, R10536 += 1, R10474 += 1, R20 += 1 };
  s0 -> s2 [0, 65535] { R10612 += 1, R10535 += 1, R10536 += 1 };
  s0 -> s0 [0, 65535] { R10611 += 1, R10612 += 1 };
  s0 -> s3 [0, 65535] { R10612 += 1, R10536 += 1, R10473 += 1, R10474 += 1 };
  s1 -> s4 [0, 65535] { R10612 += 1 };
  s1 -> s1 [0, 65535] { R10612 += 1, R10536 += 1, R10474 += 1, R20 += 1 };
  s1 -> s6 [0, 65535] { R10612 += 1, R10536 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R10612 += 1, R10536 += 1, R10474 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R10612 += 1, R10535 += 1, R10536 += 1 };
  s2 -> s3 [0, 65535] { R10612 += 1, R10536 += 1, R10473 += 1, R10474 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s4 [0, 65535] { R10612 += 1 };
  s3 -> s1 [0, 65535] { R10612 += 1, R10536 += 1, R10474 += 1, R20 += 1 };
  s3 -> s3 [0, 65535] { R10612 += 1, R10536 += 1, R10473 += 1, R10474 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10612 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R10612 += 1 };
  s6 -> s6 [0, 65535] { R10612 += 1, R10536 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s0 -> s2 [0, 65535] { R10614 += 1, R10537 += 1, R10538 += 1 };
  s0 -> s0 [0, 65535] { R10613 += 1, R10614 += 1 };
  s0 -> s3 [0, 65535] { R10614 += 1, R10538 += 1, R10475 += 1, R10476 += 1 };
  s0 -> s1 [70, 65535] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s1 -> s1 [0, 66] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R10614 += 1, R10538 += 1 };
  s1 -> s5 [0, 65535] { R10614 += 1 };
  s1 -> s1 [70, 65535] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s2 -> s1 [0, 66] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s2 -> s2 [0, 65535] { R10614 += 1, R10537 += 1, R10538 += 1 };
  s2 -> s3 [0, 65535] { R10614 += 1, R10538 += 1, R10475 += 1, R10476 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [70, 65535] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s3 -> s1 [0, 66] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s3 -> s3 [0, 65535] { R10614 += 1, R10538 += 1, R10475 += 1, R10476 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R10614 += 1 };
  s3 -> s1 [70, 65535] { R10614 += 1, R10538 += 1, R10476 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10614 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R10616 += 1, R10540 += 1, R10477 += 1, R10478 += 1 };
  s0 -> s2 [0, 65535] { R10616 += 1, R10539 += 1, R10540 += 1 };
  s0 -> s0 [0, 65535] { R10615 += 1, R10616 += 1 };
  s0 -> s3 [0, 65535] { R10616 += 1, R10540 += 1, R10478 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R10616 += 1, R10540 += 1, R10477 += 1, R10478 += 1 };
  s1 -> s5 [0, 65535] { R10616 += 1 };
  s1 -> s3 [0, 65535] { R10616 += 1, R10540 += 1, R10478 += 1, R78 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R10616 += 1, R10540 += 1, R10477 += 1, R10478 += 1 };
  s2 -> s2 [0, 65535] { R10616 += 1, R10539 += 1, R10540 += 1 };
  s2 -> s3 [0, 65535] { R10616 += 1, R10540 += 1, R10478 += 1, R78 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s4 [0, 65535] { R10616 += 1, R10540 += 1 };
  s3 -> s5 [0, 65535] { R10616 += 1 };
  s3 -> s3 [0, 65535] { R10616 += 1, R10540 += 1, R10478 += 1, R78 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R10616 += 1, R10540 += 1 };
  s4 -> s5 [0, 65535] { R10616 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R10616 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s0 -> s0 [0, 65535] { R10617 += 1, R10618 += 1 };
  s0 -> s2 [0, 65535] { R10618 += 1, R10542 += 1, R10480 += 1, R80 += 1 };
  s0 -> s3 [0, 65535] { R10618 += 1, R10542 += 1, R10479 += 1, R10480 += 1 };
  s0 -> s4 [0, 65535] { R10618 += 1, R10541 += 1, R10542 += 1 };
  s0 -> s1 [71, 65535] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s1 -> s1 [0, 69] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s1 -> s6 [0, 65535] { R10618 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R10618 += 1, R10542 += 1 };
  s1 -> s1 [71, 65535] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s2 -> s1 [0, 69] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s2 -> s6 [0, 65535] { R10618 += 1 };
  s2 -> s7 [0, 65535] { R10618 += 1, R10542 += 1 };
  s2 -> s2 [0, 65535] { R10618 += 1, R10542 += 1, R10480 += 1, R80 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [71, 65535] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s3 -> s1 [0, 69] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s3 -> s6 [0, 65535] { R10618 += 1 };
  s3 -> s2 [0, 65535] { R10618 += 1, R10542 += 1, R10480 += 1, R80 += 1 };
  s3 -> s3 [0, 65535] { R10618 += 1, R10542 += 1, R10479 += 1, R10480 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [71, 65535] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s4 -> s1 [0, 69] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s4 -> s2 [0, 65535] { R10618 += 1, R10542 += 1, R10480 += 1, R80 += 1 };
  s4 -> s3 [0, 65535] { R10618 += 1, R10542 += 1, R10479 += 1, R10480 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10618 += 1, R10541 += 1, R10542 += 1 };
  s4 -> s1 [71, 65535] { R10618 += 1, R10542 += 1, R10480 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10618 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R10618 += 1 };
  s7 -> s7 [0, 65535] { R10618 += 1, R10542 += 1 };
  s7 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R10619 += 1, R10620 += 1 };
  s0 -> s2 [0, 65535] { R10620 += 1, R10543 += 1, R10544 += 1 };
  s0 -> s3 [0, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R83 += 1, R84 += 1 };
  s0 -> s4 [0, 65535] { R10620 += 1, R10544 += 1, R10481 += 1, R10482 += 1 };
  s0 -> s1 [71, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s1 -> s5 [0, 65535] { R10620 += 1 };
  s1 -> s7 [0, 65535] { R10620 += 1, R10544 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R10620 += 1, R10544 += 1, R10482 += 1 };
  s1 -> s1 [71, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R10620 += 1, R10543 += 1, R10544 += 1 };
  s2 -> s3 [0, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R83 += 1, R84 += 1 };
  s2 -> s4 [0, 65535] { R10620 += 1, R10544 += 1, R10481 += 1, R10482 += 1 };
  s2 -> s1 [71, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s3 -> s5 [0, 65535] { R10620 += 1 };
  s3 -> s7 [0, 65535] { R10620 += 1, R10544 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R83 += 1, R84 += 1 };
  s3 -> s1 [71, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s4 -> s5 [0, 65535] { R10620 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R83 += 1, R84 += 1 };
  s4 -> s4 [0, 65535] { R10620 += 1, R10544 += 1, R10481 += 1, R10482 += 1 };
  s4 -> s1 [71, 65535] { R10620 += 1, R10544 += 1, R10482 += 1, R84 += 1 };
  s5 -> s5 [0, 65535] { R10620 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s5 [0, 65535] { R10620 += 1 };
  s7 -> s7 [0, 65535] { R10620 += 1, R10544 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R10622 += 1, R10546 += 1, R10483 += 1, R10484 += 1 };
  s0 -> s2 [0, 65535] { R10622 += 1, R10545 += 1, R10546 += 1 };
  s0 -> s0 [0, 65535] { R10621 += 1, R10622 += 1 };
  s0 -> s3 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s4 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1 };
  s1 -> s1 [0, 65535] { R10622 += 1, R10546 += 1, R10483 += 1, R10484 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s7 [0, 65535] { R10622 += 1 };
  s1 -> s4 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1 };
  s2 -> s1 [0, 65535] { R10622 += 1, R10546 += 1, R10483 += 1, R10484 += 1 };
  s2 -> s2 [0, 65535] { R10622 += 1, R10545 += 1, R10546 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s4 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1, R6641 += 1, R6642 += 1 };
  s3 -> s6 [0, 65535] { R10622 += 1, R10546 += 1 };
  s3 -> s7 [0, 65535] { R10622 += 1 };
  s3 -> s4 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10622 += 1, R10546 += 1 };
  s4 -> s7 [0, 65535] { R10622 += 1 };
  s4 -> s4 [0, 65535] { R10622 += 1, R10546 += 1, R10484 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10622 += 1, R10546 += 1 };
  s6 -> s7 [0, 65535] { R10622 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10622 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s0 -> s2 [0, 65535] { R10624 += 1, R10547 += 1, R10548 += 1 };
  s0 -> s3 [0, 65535] { R10624 += 1, R10548 += 1, R10485 += 1, R10486 += 1 };
  s0 -> s0 [0, 65535] { R10623 += 1, R10624 += 1 };
  s0 -> s4 [73, 73] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s0 -> s1 [74, 65535] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s1 -> s1 [0, 70] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s1 -> s4 [73, 73] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s1 -> s1 [74, 65535] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s2 -> s1 [0, 70] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s2 -> s2 [0, 65535] { R10624 += 1, R10547 += 1, R10548 += 1 };
  s2 -> s3 [0, 65535] { R10624 += 1, R10548 += 1, R10485 += 1, R10486 += 1 };
  s2 -> s4 [73, 73] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s2 -> s1 [74, 65535] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s3 -> s1 [0, 70] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s3 -> s3 [0, 65535] { R10624 += 1, R10548 += 1, R10485 += 1, R10486 += 1 };
  s3 -> s4 [73, 73] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s3 -> s1 [74, 65535] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s4 -> s4 [0, 70] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R10624 += 1, R10548 += 1 };
  s4 -> s4 [0, 65535] { R10624 += 1, R10548 += 1, R10486 += 1 };
  s4 -> s7 [0, 65535] { R10624 += 1 };
  s4 -> s4 [73, 65535] { R10624 += 1, R10548 += 1, R10486 += 1, R8828 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10624 += 1, R10548 += 1 };
  s6 -> s7 [0, 65535] { R10624 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R10624 += 1 };
  accepting s4, s5, s6, s7;
};
automaton value2_34 {
  init s0;
  s0 -> s1 [0, 65535] { R10626 += 1, R10550 += 1, R10488 += 1 };
  s0 -> s2 [0, 65535] { R10626 += 1, R10550 += 1, R10487 += 1, R10488 += 1 };
  s0 -> s3 [0, 65535] { R10626 += 1, R10549 += 1, R10550 += 1 };
  s0 -> s0 [0, 65535] { R10625 += 1, R10626 += 1 };
  s1 -> s1 [0, 65535] { R10626 += 1, R10550 += 1, R10488 += 1 };
  s1 -> s6 [0, 65535] { R10626 += 1, R10550 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R10626 += 1 };
  s2 -> s1 [0, 65535] { R10626 += 1, R10550 += 1, R10488 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R10626 += 1, R10550 += 1, R10487 += 1, R10488 += 1 };
  s2 -> s5 [0, 65535] { R10626 += 1 };
  s3 -> s1 [0, 65535] { R10626 += 1, R10550 += 1, R10488 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R10626 += 1, R10550 += 1, R10487 += 1, R10488 += 1 };
  s3 -> s3 [0, 65535] { R10626 += 1, R10549 += 1, R10550 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R10626 += 1 };
  s6 -> s6 [0, 65535] { R10626 += 1, R10550 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R10626 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s0 -> s2 [0, 65535] { R10628 += 1, R10552 += 1, R10489 += 1, R10490 += 1 };
  s0 -> s1 [0, 65535] { R10628 += 1, R10552 += 1, R10490 += 1 };
  s0 -> s3 [0, 65535] { R10628 += 1, R10551 += 1, R10552 += 1 };
  s0 -> s0 [0, 65535] { R10627 += 1, R10628 += 1 };
  s0 -> s4 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s0 -> s5 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s0 -> s1 [74, 65535] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s1 -> s1 [0, 69] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s1 -> s6 [0, 65535] { R10628 += 1, R10552 += 1 };
  s1 -> s7 [0, 65535] { R10628 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R10628 += 1, R10552 += 1, R10490 += 1 };
  s1 -> s4 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s1 -> s5 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s1 -> s1 [74, 65535] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s2 -> s1 [0, 69] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s2 -> s2 [0, 65535] { R10628 += 1, R10552 += 1, R10489 += 1, R10490 += 1 };
  s2 -> s7 [0, 65535] { R10628 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s1 [0, 65535] { R10628 += 1, R10552 += 1, R10490 += 1 };
  s2 -> s4 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s2 -> s5 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s2 -> s1 [74, 65535] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s3 -> s1 [0, 69] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s3 -> s2 [0, 65535] { R10628 += 1, R10552 += 1, R10489 += 1, R10490 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s1 [0, 65535] { R10628 += 1, R10552 += 1, R10490 += 1 };
  s3 -> s3 [0, 65535] { R10628 += 1, R10551 += 1, R10552 += 1 };
  s3 -> s4 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s3 -> s5 [70, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s3 -> s1 [74, 65535] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s4 -> s6 [0, 65535] { R10628 += 1, R10552 += 1 };
  s4 -> s7 [0, 65535] { R10628 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R10628 += 1, R10552 += 1, R10490 += 1 };
  s5 -> s5 [0, 70] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s5 -> s6 [0, 65535] { R10628 += 1, R10552 += 1 };
  s5 -> s7 [0, 65535] { R10628 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10628 += 1, R10552 += 1, R10490 += 1 };
  s5 -> s5 [74, 65535] { R10628 += 1, R10552 += 1, R10490 += 1, R10470 += 1 };
  s6 -> s6 [0, 65535] { R10628 += 1, R10552 += 1 };
  s6 -> s7 [0, 65535] { R10628 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R10628 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R10630 += 1, R10553 += 1, R10554 += 1 };
  s0 -> s2 [0, 65535] { R10630 += 1, R10554 += 1, R10510 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R10630 += 1, R10554 += 1, R10509 += 1, R10510 += 1 };
  s0 -> s0 [0, 65535] { R10629 += 1, R10630 += 1 };
  s1 -> s1 [0, 65535] { R10630 += 1, R10553 += 1, R10554 += 1 };
  s1 -> s2 [0, 65535] { R10630 += 1, R10554 += 1, R10510 += 1, R21 += 1 };
  s1 -> s3 [0, 65535] { R10630 += 1, R10554 += 1, R10509 += 1, R10510 += 1 };
  s1 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R10630 += 1, R10554 += 1 };
  s2 -> s2 [0, 65535] { R10630 += 1, R10554 += 1, R10510 += 1, R21 += 1 };
  s2 -> s4 [0, 65535] { R10630 += 1 };
  s2 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R10630 += 1, R10554 += 1, R10510 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R10630 += 1, R10554 += 1, R10509 += 1, R10510 += 1 };
  s3 -> s4 [0, 65535] { R10630 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R10630 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R10630 += 1, R10554 += 1 };
  s6 -> s4 [0, 65535] { R10630 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s0 -> s2 [0, 65535] { R10632 += 1, R10555 += 1, R10556 += 1 };
  s0 -> s3 [0, 65535] { R10632 += 1, R10556 += 1, R10511 += 1, R10512 += 1 };
  s0 -> s0 [0, 65535] { R10631 += 1, R10632 += 1 };
  s0 -> s4 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s0 -> s5 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s0 -> s6 [70, 70] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s0 -> s1 [71, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s1 -> s1 [0, 65] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s1 -> s4 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s1 -> s5 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s1 -> s6 [70, 70] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s1 -> s1 [71, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s2 -> s1 [0, 65] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s2 -> s2 [0, 65535] { R10632 += 1, R10555 += 1, R10556 += 1 };
  s2 -> s3 [0, 65535] { R10632 += 1, R10556 += 1, R10511 += 1, R10512 += 1 };
  s2 -> s4 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s2 -> s5 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s2 -> s6 [70, 70] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s2 -> s1 [71, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s3 -> s1 [0, 65] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s3 -> s3 [0, 65535] { R10632 += 1, R10556 += 1, R10511 += 1, R10512 += 1 };
  s3 -> s4 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s3 -> s5 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s3 -> s6 [70, 70] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s3 -> s1 [71, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s5 -> s5 [0, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s5 -> s10 [70, 70] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s5 -> s5 [71, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s6 -> s6 [0, 65] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s6 -> s7 [0, 65535] { R10632 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s6 [0, 65535] { R10632 += 1, R10556 += 1 };
  s6 -> s9 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s6 -> s10 [66, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s6 -> s6 [70, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s7 -> s7 [0, 65535] { R10632 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s7 [0, 65535] { R10632 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [0, 65535] { R10632 += 1, R10556 += 1 };
  s10 -> s10 [0, 66] { R10632 += 1, R10556 += 1, R10512 += 1 };
  s10 -> s7 [0, 65535] { R10632 += 1 };
  s10 -> s8 [0, 65535];
  s10 -> s10 [0, 65535] { R10632 += 1, R10556 += 1 };
  s10 -> s10 [70, 65535] { R10632 += 1, R10556 += 1, R10512 += 1 };
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R10634 += 1, R10557 += 1, R10558 += 1 };
  s0 -> s3 [0, 65535] { R10634 += 1, R10558 += 1, R10513 += 1, R10514 += 1 };
  s0 -> s0 [0, 65535] { R10633 += 1, R10634 += 1 };
  s0 -> s4 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s1 -> s1 [0, 65535] { R10634 += 1, R10558 += 1 };
  s1 -> s6 [0, 65535] { R10634 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s4 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R10634 += 1, R10557 += 1, R10558 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R10634 += 1, R10558 += 1, R10513 += 1, R10514 += 1 };
  s2 -> s4 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s3 -> s6 [0, 65535] { R10634 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R10634 += 1, R10558 += 1, R10513 += 1, R10514 += 1 };
  s3 -> s4 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s4 -> s4 [0, 65535] { R10634 += 1, R10558 += 1, R10514 += 1, R77 += 1 };
  s4 -> s6 [0, 65535] { R10634 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R10634 += 1, R10558 += 1 };
  s5 -> s6 [0, 65535] { R10634 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R10634 += 1, R10558 += 1 };
  s6 -> s6 [0, 65535] { R10634 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R10634 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10634 += 1, R10558 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s0 -> s0 [0, 65535] { R10635 += 1, R10636 += 1 };
  s0 -> s2 [0, 65535] { R10636 += 1, R10560 += 1, R10515 += 1, R10516 += 1 };
  s0 -> s3 [0, 65535] { R10636 += 1, R10559 += 1, R10560 += 1 };
  s0 -> s4 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s8 [0, 65535] { R10636 += 1 };
  s1 -> s1 [0, 65535] { R10636 += 1, R10560 += 1 };
  s1 -> s4 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s8 [0, 65535] { R10636 += 1 };
  s2 -> s2 [0, 65535] { R10636 += 1, R10560 += 1, R10515 += 1, R10516 += 1 };
  s2 -> s4 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s2 [0, 65535] { R10636 += 1, R10560 += 1, R10515 += 1, R10516 += 1 };
  s3 -> s3 [0, 65535] { R10636 += 1, R10559 += 1, R10560 += 1 };
  s3 -> s4 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s4 -> s4 [0, 65535] { R10636 += 1, R10560 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s8 [0, 65535] { R10636 += 1 };
  s5 -> s6 [0, 65535] { R10636 += 1, R10560 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s8 [0, 65535] { R10636 += 1 };
  s5 -> s5 [0, 65535] { R10636 += 1, R10560 += 1, R10516 += 1, R79 += 1 };
  s6 -> s6 [0, 65535] { R10636 += 1, R10560 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R10636 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R10636 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R10637 += 1, R10638 += 1 };
  s0 -> s2 [0, 65535] { R10638 += 1, R10561 += 1, R10562 += 1 };
  s0 -> s3 [0, 65535] { R10638 += 1, R10562 += 1, R10517 += 1, R10518 += 1 };
  s0 -> s4 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535] { R10638 += 1 };
  s1 -> s1 [0, 65535] { R10638 += 1, R10562 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s4 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s2 -> s2 [0, 65535] { R10638 += 1, R10561 += 1, R10562 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R10638 += 1, R10562 += 1, R10517 += 1, R10518 += 1 };
  s2 -> s4 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s3 -> s6 [0, 65535] { R10638 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R10638 += 1, R10562 += 1, R10517 += 1, R10518 += 1 };
  s3 -> s4 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535] { R10638 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R10638 += 1, R10562 += 1 };
  s5 -> s6 [0, 65535] { R10638 += 1 };
  s5 -> s7 [0, 65535] { R10638 += 1, R10562 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R10638 += 1, R10562 += 1, R10518 += 1, R81 += 1, R82 += 1 };
  s6 -> s6 [0, 65535] { R10638 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s6 [0, 65535] { R10638 += 1 };
  s7 -> s7 [0, 65535] { R10638 += 1, R10562 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s3 [0, 65535] { R10640 += 1, R10564 += 1, R10519 += 1, R10520 += 1 };
  s0 -> s0 [0, 65535] { R10639 += 1, R10640 += 1 };
  s0 -> s4 [0, 65535] { R10640 += 1, R10563 += 1, R10564 += 1 };
  s0 -> s5 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s6 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s7 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s8 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s1 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s2 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s5 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s6 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s7 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s8 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s2 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s10 [0, 65535];
  s2 -> s11 [0, 65535] { R10640 += 1 };
  s2 -> s2 [0, 65535] { R10640 += 1, R10564 += 1 };
  s2 -> s6 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s8 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s3 [0, 65535] { R10640 += 1, R10564 += 1, R10519 += 1, R10520 += 1 };
  s3 -> s5 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s6 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s7 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s8 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s1 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s2 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [0, 65] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s3 [0, 65535] { R10640 += 1, R10564 += 1, R10519 += 1, R10520 += 1 };
  s4 -> s4 [0, 65535] { R10640 += 1, R10563 += 1, R10564 += 1 };
  s4 -> s5 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s6 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s7 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s8 [66, 66] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s1 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s2 [67, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s10 [0, 65535];
  s6 -> s6 [0, 65535] { R10640 += 1, R10564 += 1 };
  s6 -> s11 [0, 65535] { R10640 += 1 };
  s7 -> s7 [0, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6637 += 1, R6638 += 1 };
  s7 -> s8 [0, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s8 -> s9 [0, 65535] { R10640 += 1, R10564 += 1 };
  s8 -> s10 [0, 65535];
  s8 -> s11 [0, 65535] { R10640 += 1 };
  s8 -> s8 [0, 65535] { R10640 += 1, R10564 += 1, R10520 += 1, R6638 += 1, R6639 += 1 };
  s9 -> s9 [0, 65535] { R10640 += 1, R10564 += 1 };
  s9 -> s10 [0, 65535];
  s9 -> s11 [0, 65535] { R10640 += 1 };
  s10 -> s10 [0, 65535];
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10640 += 1 };
  accepting s8, s2, s9, s6, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s0 -> s2 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s3 [0, 65535] { R10642 += 1, R10565 += 1, R10566 += 1 };
  s0 -> s0 [0, 65535] { R10641 += 1, R10642 += 1 };
  s0 -> s4 [0, 65535] { R10642 += 1, R10566 += 1, R10521 += 1, R10522 += 1 };
  s0 -> s5 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s0 -> s6 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s0 -> s7 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s8 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s1 [67, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s0 -> s2 [67, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s0 -> s1 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s1 -> s1 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s1 -> s1 [0, 65535] { R10642 += 1, R10566 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s10 [0, 65535] { R10642 += 1 };
  s1 -> s5 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s1 -> s6 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s1 -> s1 [67, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s1 -> s1 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s2 -> s1 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s2 -> s2 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s5 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s2 -> s6 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s2 -> s7 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s8 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [67, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s2 -> s2 [67, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s2 -> s1 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s3 -> s1 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s3 -> s2 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s3 [0, 65535] { R10642 += 1, R10565 += 1, R10566 += 1 };
  s3 -> s4 [0, 65535] { R10642 += 1, R10566 += 1, R10521 += 1, R10522 += 1 };
  s3 -> s5 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s3 -> s6 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s3 -> s7 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s8 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [67, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s3 -> s2 [67, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s3 -> s1 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s4 -> s1 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s4 -> s2 [0, 65] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s4 [0, 65535] { R10642 += 1, R10566 += 1, R10521 += 1, R10522 += 1 };
  s4 -> s5 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s4 -> s6 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s4 -> s7 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s8 [66, 66] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s1 [67, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s4 -> s2 [67, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s4 -> s1 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s5 -> s5 [0, 65535] { R10642 += 1, R10566 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s10 [0, 65535] { R10642 += 1 };
  s6 -> s6 [0, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s6 -> s6 [0, 65535] { R10642 += 1, R10566 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s10 [0, 65535] { R10642 += 1 };
  s6 -> s6 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s7 -> s6 [0, 70] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s7 -> s7 [0, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8825 += 1, R8826 += 1 };
  s7 -> s6 [74, 65535] { R10642 += 1, R10566 += 1, R10522 += 1, R8826 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R10642 += 1 };
  accepting s5, s9, s6, s1, s10;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s2 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s0 [0, 65535] { R10643 += 1, R10644 += 1 };
  s0 -> s3 [0, 65535] { R10644 += 1, R10568 += 1, R10523 += 1, R10524 += 1 };
  s0 -> s4 [0, 65535] { R10644 += 1, R10567 += 1, R10568 += 1 };
  s0 -> s5 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s6 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s7 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s8 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s0 -> s1 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s0 -> s2 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s1 -> s1 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s13 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s1 -> s5 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s14 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s1 -> s9 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s1 -> s7 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s1 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s1 -> s13 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s2 -> s1 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s5 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s6 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s7 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s8 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s2 -> s1 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s2 -> s2 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s1 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s2 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s3 [0, 65535] { R10644 += 1, R10568 += 1, R10523 += 1, R10524 += 1 };
  s3 -> s5 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s6 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s7 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s8 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s3 -> s1 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s3 -> s2 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s1 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s2 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s3 [0, 65535] { R10644 += 1, R10568 += 1, R10523 += 1, R10524 += 1 };
  s4 -> s4 [0, 65535] { R10644 += 1, R10567 += 1, R10568 += 1 };
  s4 -> s5 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s6 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s7 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s8 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s4 -> s1 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s4 -> s2 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s5 -> s5 [0, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s5 -> s9 [0, 65535] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s6 -> s5 [0, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10282 += 1, R10283 += 1 };
  s6 -> s6 [0, 65535] { R10644 += 1, R10568 += 1, R10524 += 1, R10281 += 1, R10282 += 1 };
  s9 -> s10 [0, 65535] { R10644 += 1 };
  s9 -> s9 [0, 65535] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s9 -> s11 [0, 65535] { R10644 += 1, R10568 += 1 };
  s9 -> s12 [0, 65535];
  s10 -> s10 [0, 65535] { R10644 += 1 };
  s10 -> s12 [0, 65535];
  s11 -> s10 [0, 65535] { R10644 += 1 };
  s11 -> s11 [0, 65535] { R10644 += 1, R10568 += 1 };
  s11 -> s12 [0, 65535];
  s12 -> s12 [0, 65535];
  s13 -> s13 [0, 65] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s13 -> s10 [0, 65535] { R10644 += 1 };
  s13 -> s13 [0, 65535] { R10644 += 1, R10568 += 1 };
  s13 -> s12 [0, 65535];
  s13 -> s14 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s13 -> s9 [66, 66] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s13 -> s13 [67, 65535] { R10644 += 1, R10568 += 1, R10524 += 1 };
  s14 -> s10 [0, 65535] { R10644 += 1 };
  s14 -> s14 [0, 65535] { R10644 += 1, R10568 += 1 };
  s14 -> s12 [0, 65535];
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s0 -> s2 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s0 -> s0 [0, 65535] { R10645 += 1, R10646 += 1 };
  s0 -> s3 [0, 65535] { R10646 += 1, R10569 += 1, R10570 += 1 };
  s0 -> s4 [0, 65535] { R10646 += 1, R10570 += 1, R10525 += 1, R10526 += 1 };
  s0 -> s5 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s0 -> s6 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s0 -> s7 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s0 -> s8 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s0 -> s1 [67, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s0 -> s2 [67, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s0 -> s1 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s1 -> s1 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s1 -> s1 [0, 65535] { R10646 += 1, R10570 += 1 };
  s1 -> s9 [0, 65535] { R10646 += 1 };
  s1 -> s10 [0, 65535];
  s1 -> s5 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1 };
  s1 -> s6 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1 };
  s1 -> s1 [67, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s1 -> s1 [67, 65535] { R10646 += 1, R10570 += 1, R10526 += 1 };
  s1 -> s1 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s2 -> s1 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s2 -> s2 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s2 -> s5 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s2 -> s6 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s2 -> s7 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s2 -> s8 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s2 -> s1 [67, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s2 -> s2 [67, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s2 -> s1 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s3 -> s1 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s3 -> s2 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s3 -> s3 [0, 65535] { R10646 += 1, R10569 += 1, R10570 += 1 };
  s3 -> s4 [0, 65535] { R10646 += 1, R10570 += 1, R10525 += 1, R10526 += 1 };
  s3 -> s5 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s3 -> s6 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s3 -> s7 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s3 -> s8 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s3 -> s1 [67, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s3 -> s2 [67, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s3 -> s1 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s4 -> s1 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s4 -> s2 [0, 65] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s4 -> s4 [0, 65535] { R10646 += 1, R10570 += 1, R10525 += 1, R10526 += 1 };
  s4 -> s5 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s4 -> s6 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s4 -> s7 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s4 -> s8 [66, 66] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s4 -> s1 [67, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s4 -> s2 [67, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s4 -> s1 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s5 -> s5 [0, 65535] { R10646 += 1, R10570 += 1 };
  s5 -> s9 [0, 65535] { R10646 += 1 };
  s5 -> s10 [0, 65535];
  s6 -> s6 [0, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s6 -> s6 [0, 65535] { R10646 += 1, R10570 += 1, R10526 += 1 };
  s6 -> s9 [0, 65535] { R10646 += 1 };
  s6 -> s10 [0, 65535];
  s6 -> s11 [0, 65535] { R10646 += 1, R10570 += 1 };
  s6 -> s6 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s7 -> s6 [0, 69] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s7 -> s7 [0, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10467 += 1, R10468 += 1 };
  s7 -> s6 [74, 65535] { R10646 += 1, R10570 += 1, R10526 += 1, R10468 += 1 };
  s9 -> s9 [0, 65535] { R10646 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R10646 += 1 };
  s11 -> s10 [0, 65535];
  s11 -> s11 [0, 65535] { R10646 += 1, R10570 += 1 };
  accepting s5, s9, s6, s1, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R1 = R10486 && R2 = R10570 && R3 - R10646 = 1 && R23 - R10570 = -1 && R24 = R10570 && R25 - R10570 = -1 && R26 = R10570 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R10646 && R32 - R10646 = 1 && R33 = R10646 && R34 - R10646 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R8828 + -1*R8826 - R64 = 0 && R63 + R8827 + R8825 = 0 && R10485 = 0 && R10511 = 0 && R10512 = 0 && R10519 = 0 && R10520 = 0 && R10521 = 0 && R10522 = 0 && R10523 = 0 && R10524 = 0 && R10525 = 0 && R10526 = 0 && R10527 = 0 && R10528 = R10570 && R10529 = 0 && R10530 = R10570 && R10531 = 0 && R10532 = R10570 && R10533 = 0 && R10534 = R10570 && R10535 = 0 && R10536 = R10570 && R10537 = 0 && R10538 = R10570 && R10539 = 0 && R10540 = R10570 && R10541 = 0 && R10542 = R10570 && R10543 = 0 && R10544 = R10570 && R10545 = 0 && R10546 = R10570 && R10547 = 0 && R10548 = R10570 && R10549 = 0 && R10550 = R10570 && R10551 = 0 && R10552 = R10570 && R10553 = 0 && R10554 = R10570 && R10555 = 0 && R10556 = R10570 && R10557 = 0 && R10558 = R10570 && R10559 = 0 && R10560 = R10570 && R10561 = 0 && R10562 = R10570 && R10563 = 0 && R10564 = R10570 && R10565 = 0 && R10566 = R10570 && R10567 = 0 && R10568 = R10570 && R10569 = 0 && R10571 = 0 && R10572 = R10646 && R10573 = 0 && R10574 = R10646 && R10575 = 0 && R10576 = R10646 && R10577 = 0 && R10578 = R10646 && R10579 = 0 && R10580 = R10646 && R10581 = 0 && R10582 = R10646 && R10583 = 0 && R10584 = R10646 && R10585 = 0 && R10586 = R10646 && R10587 = 0 && R10588 = R10646 && R10589 = 0 && R10590 = R10646 && R10591 = 0 && R10592 = R10646 && R10593 = 0 && R10594 = R10646 && R10595 = 0 && R10596 = R10646 && R10597 = 0 && R10598 = R10646 && R10599 = 0 && R10600 = R10646 && R10601 = 0 && R10602 = R10646 && R10603 = 0 && R10604 = R10646 && R10605 = 0 && R10606 = R10646 && R10607 = 0 && R10608 = R10646 && R10609 = 0 && R10610 = R10646 && R10611 = 0 && R10612 = R10646 && R10613 = 0 && R10614 = R10646 && R10615 = 0 && R10616 = R10646 && R10617 = 0 && R10618 = R10646 && R10619 = 0 && R10620 = R10646 && R10621 = 0 && R10622 = R10646 && R10623 = 0 && R10624 = R10646 && R10625 = 0 && R10626 = R10646 && R10627 = 0 && R10628 = R10646 && R10629 = 0 && R10630 = R10646 && R10631 = 0 && R10632 = R10646 && R10633 = 0 && R10634 = R10646 && R10635 = 0 && R10636 = R10646 && R10637 = 0 && R10638 = R10646 && R10639 = 0 && R10640 = R10646 && R10641 = 0 && R10642 = R10646 && R10643 = 0 && R10644 = R10646 && R10645 = 0 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R8828 + -1*R8826 - R64 < 1 && -1 < R10486 && 0 < R10570 && -1 < R10646 && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R53 + R83 + R81 = 0 || R64 + R8828 + R8826 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0 || R64 + R8828 + R8826 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R8828 + R8826 < 1))) && (R10471 != 0 || R10472 = R10486 || (R20 = 0 && R10486 = 0)) && (R10473 != 0 || R10474 = R10486 || (R20 = 0 && R10486 = 0)) && (R10475 != 0 || R10476 = R10486 || (R20 = 0 && R10486 = 0)) && (R10477 != 0 || R10478 = R10486 || (R20 = 0 && R10486 = 0)) && (R10479 != 0 || R10480 = R10486 || (R20 = 0 && R10486 = 0)) && (R10481 != 0 || R10482 = R10486 || (R20 = 0 && R10486 = 0)) && (R10483 != 0 || R10484 = R10486 || (R20 = 0 && R10486 = 0)) && (R10487 != 0 || R10486 = R10488 || (R20 = 0 && R10486 = 0)) && (R10489 != 0 || R10486 = R10490 || (R20 = 0 && R10486 = 0)) && (R21 = 0 || (R10509 = 0 && R10510 = 0)) && (R21 = 0 || (R10513 = 0 && R10514 = 0)) && (R21 = 0 || (R10515 = 0 && R10516 = 0)) && (R21 = 0 || (R10517 = 0 && R10518 = 0)) && (R22 = 0 || (R10491 = 0 && R10492 = 0)) && (R22 = 0 || (R10493 = 0 && R10494 = 0)) && (R22 = 0 || (R10495 = 0 && R10496 = 0)) && (R22 = 0 || (R10497 = 0 && R10498 = 0)) && (R22 = 0 || (R10499 = 0 && R10500 = 0)) && (R22 = 0 || (R10501 = 0 && R10502 = 0)) && (R22 = 0 || (R10503 = 0 && R10504 = 0)) && (R22 = 0 || (R10505 = 0 && R10506 = 0)) && (R22 = 0 || (R10507 = 0 && R10508 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R8828 + -1*R8826 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R8828 + -1*R8826 - R64 = 0)) && (R69 + R10286 + R10283 = 0 || (R67 + R10284 + R10281 = 0 && R68 + R10285 + R10282 = 0)) && (R69 + R10286 + R10283 = 0 || (R73 + R10469 + R10467 = 0 && R74 + R10470 + R10468 = 0)) && (R10471 = 0 || (R20 = 0 && R10486 = 0)) && (R10473 = 0 || (R20 = 0 && R10486 = 0)) && (R10475 = 0 || (R20 = 0 && R10486 = 0)) && (R10477 = 0 || (R20 = 0 && R10486 = 0)) && (R10479 = 0 || (R20 = 0 && R10486 = 0)) && (R10481 = 0 || (R20 = 0 && R10486 = 0)) && (R10483 = 0 || (R20 = 0 && R10486 = 0)) && (R10487 = 0 || (R20 = 0 && R10486 = 0)) && (R10489 = 0 || (R20 = 0 && R10486 = 0));
// End of Parikh automata intersection problem
