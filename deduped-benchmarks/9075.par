// Parikh automata intersection problem, generated by OSTRICH+
counter int R1, R11, R14, R17, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R4, R49, R5, R51, R53, R54, R57, R58, R59, R6, R63, R64, R6637, R6638, R6639, R6640, R6641, R6642, R6643, R6644, R6645, R6646, R6647, R6648, R6649, R6650, R6651, R6652, R67, R68, R6833, R6834, R6835, R6836, R6837, R6838, R6839, R6840, R6841, R6842, R6843, R6844, R6845, R6846, R6847, R6848, R6849, R6850, R6851, R6852, R6853, R6854, R6855, R6856, R6857, R6858, R6859, R6860, R6861, R6862, R6863, R6864, R6865, R6866, R6867, R6868, R6869, R6870, R6871, R6872, R6873, R6874, R6875, R6876, R6877, R6878, R6879, R6880, R6881, R6882, R6883, R6884, R6885, R6886, R6887, R6888, R6889, R6890, R6891, R6892, R6893, R6894, R6895, R6896, R6897, R6898, R6899, R69, R6900, R6901, R6902, R6903, R6904, R6905, R6906, R6907, R6908, R6909, R6910, R6911, R6912, R6913, R6914, R6915, R6916, R6917, R6918, R6919, R6920, R6921, R6922, R6923, R6924, R6925, R6926, R6927, R6928, R6929, R6930, R6931, R6932, R6933, R6934, R6935, R6936, R6937, R6938, R6939, R6940, R6941, R6942, R6943, R6944, R6945, R6946, R6947, R6948, R6949, R6950, R6951, R6952, R6953, R6954, R6955, R6956, R6957, R6958, R6959, R6960, R6961, R6962, R6963, R6964, R6965, R6966, R6967, R6968, R6969, R6970, R6971, R6972, R6973, R6974, R6975, R6976, R6977, R6978, R6979, R6980, R6981, R6982, R6983, R6984, R6985, R6986, R6987, R6988, R6989, R6990, R6991, R6992, R6993, R6994, R6995, R6996, R6997, R6998, R6999, R7, R7000, R7001, R7002, R7003, R7004, R7005, R7006, R7007, R7008, R7009, R7010, R7011, R7012, R73, R74, R77, R78, R79, R80, R81, R82, R83, R84;
synchronised {  // Automata constraining P9
automaton P9_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P51
automaton P51_0 {
  init s0;
  s0 -> s1 [102, 102];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R17 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [13, 13] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R6 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s1 [0, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R7 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R6938 += 1 };
  s0 -> s0 [0, 65535] { R6937 += 1, R6938 += 1 };
  s0 -> s2 [66, 66] { R6938 += 1 };
  s0 -> s1 [67, 65535] { R6938 += 1 };
  s1 -> s1 [0, 64] { R6938 += 1 };
  s1 -> s2 [66, 66] { R6938 += 1 };
  s1 -> s1 [67, 65535] { R6938 += 1 };
  s2 -> s2 [0, 64] { R6938 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R6938 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R6939 += 1, R6940 += 1 };
  s0 -> s1 [0, 65535] { R6940 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R6940 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 65] { R6942 += 1 };
  s0 -> s0 [0, 65535] { R6941 += 1, R6942 += 1 };
  s0 -> s2 [0, 65535] { R6942 += 1, R14 += 1 };
  s0 -> s3 [66, 66] { R6942 += 1 };
  s0 -> s1 [67, 65535] { R6942 += 1 };
  s1 -> s1 [0, 65] { R6942 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R6942 += 1 };
  s1 -> s1 [67, 65535] { R6942 += 1 };
  s2 -> s1 [0, 65] { R6942 += 1 };
  s2 -> s2 [0, 65535] { R6942 += 1, R14 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R6942 += 1 };
  s2 -> s1 [67, 65535] { R6942 += 1 };
  s3 -> s3 [0, 65535] { R6942 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R6944 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R6944 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R6943 += 1, R6944 += 1 };
  s0 -> s3 [9, 13] { R6944 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R6944 += 1, R24 += 1 };
  s0 -> s3 [32, 32] { R6944 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R6944 += 1, R24 += 1 };
  s1 -> s1 [0, 65535] { R6944 += 1, R24 += 1 };
  s1 -> s5 [0, 65535] { R6944 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R6944 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R6944 += 1, R23 += 1, R24 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R6944 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R6944 += 1, R24 += 1 };
  s2 -> s3 [32, 32] { R6944 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R6944 += 1, R24 += 1 };
  s3 -> s1 [0, 65535] { R6944 += 1, R24 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6944 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R6946 += 1, R26 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R6945 += 1, R6946 += 1 };
  s0 -> s2 [0, 65535] { R6946 += 1, R25 += 1, R26 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R6946 += 1, R26 += 1, R4 += 1 };
  s1 -> s4 [0, 65535] { R6946 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R6946 += 1, R26 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R6946 += 1, R25 += 1, R26 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6946 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R6948 += 1, R28 += 1 };
  s0 -> s0 [0, 65535] { R6947 += 1, R6948 += 1 };
  s0 -> s2 [0, 65535] { R6948 += 1, R27 += 1, R28 += 1 };
  s0 -> s3 [9, 13] { R6948 += 1, R28 += 1 };
  s0 -> s1 [14, 31] { R6948 += 1, R28 += 1 };
  s0 -> s3 [32, 32] { R6948 += 1, R28 += 1 };
  s0 -> s1 [33, 65535] { R6948 += 1, R28 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6948 += 1 };
  s1 -> s1 [0, 65535] { R6948 += 1, R28 += 1 };
  s2 -> s1 [0, 8] { R6948 += 1, R28 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6948 += 1, R27 += 1, R28 += 1 };
  s2 -> s3 [9, 13] { R6948 += 1, R28 += 1 };
  s2 -> s1 [14, 31] { R6948 += 1, R28 += 1 };
  s2 -> s3 [32, 32] { R6948 += 1, R28 += 1 };
  s2 -> s1 [33, 65535] { R6948 += 1, R28 += 1 };
  s3 -> s1 [0, 65535] { R6948 += 1, R28 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6948 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R6950 += 1, R29 += 1, R30 += 1 };
  s0 -> s2 [0, 65535] { R6950 += 1, R30 += 1, R5 += 1 };
  s0 -> s0 [0, 65535] { R6949 += 1, R6950 += 1 };
  s1 -> s1 [0, 65535] { R6950 += 1, R29 += 1, R30 += 1 };
  s1 -> s2 [0, 65535] { R6950 += 1, R30 += 1, R5 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6950 += 1, R30 += 1, R5 += 1 };
  s2 -> s3 [0, 65535] { R6950 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6950 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R6952 += 1, R6858 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R6951 += 1, R6952 += 1 };
  s0 -> s2 [0, 65535] { R6952 += 1, R6857 += 1, R6858 += 1 };
  s1 -> s1 [0, 65535] { R6952 += 1, R6858 += 1, R22 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R6952 += 1 };
  s2 -> s1 [0, 65535] { R6952 += 1, R6858 += 1, R22 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R6952 += 1, R6857 += 1, R6858 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R6952 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 65] { R6954 += 1, R6860 += 1 };
  s0 -> s2 [0, 65535] { R6954 += 1, R6859 += 1, R6860 += 1 };
  s0 -> s0 [0, 65535] { R6953 += 1, R6954 += 1 };
  s0 -> s3 [66, 66] { R6954 += 1, R6860 += 1 };
  s0 -> s4 [66, 66] { R6954 += 1, R6860 += 1 };
  s0 -> s1 [71, 65535] { R6954 += 1, R6860 += 1 };
  s1 -> s1 [0, 65] { R6954 += 1, R6860 += 1 };
  s1 -> s1 [0, 65535] { R6954 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R6954 += 1, R6860 += 1 };
  s1 -> s4 [66, 66] { R6954 += 1, R6860 += 1 };
  s1 -> s1 [71, 65535] { R6954 += 1, R6860 += 1 };
  s2 -> s1 [0, 65] { R6954 += 1, R6860 += 1 };
  s2 -> s2 [0, 65535] { R6954 += 1, R6859 += 1, R6860 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R6954 += 1, R6860 += 1 };
  s2 -> s4 [66, 66] { R6954 += 1, R6860 += 1 };
  s2 -> s1 [71, 65535] { R6954 += 1, R6860 += 1 };
  s3 -> s3 [0, 66] { R6954 += 1, R6860 += 1 };
  s3 -> s3 [0, 65535] { R6954 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [71, 65535] { R6954 += 1, R6860 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6954 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65] { R6956 += 1, R6862 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R6955 += 1, R6956 += 1 };
  s0 -> s2 [0, 65535] { R6956 += 1, R6861 += 1, R6862 += 1 };
  s0 -> s3 [66, 66] { R6956 += 1, R6862 += 1, R49 += 1 };
  s0 -> s4 [66, 66] { R6956 += 1, R6862 += 1, R49 += 1 };
  s0 -> s1 [67, 65535] { R6956 += 1, R6862 += 1, R49 += 1 };
  s1 -> s1 [0, 65] { R6956 += 1, R6862 += 1, R49 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6956 += 1 };
  s1 -> s3 [66, 66] { R6956 += 1, R6862 += 1, R49 += 1 };
  s1 -> s4 [66, 66] { R6956 += 1, R6862 += 1, R49 += 1 };
  s1 -> s1 [67, 65535] { R6956 += 1, R6862 += 1, R49 += 1 };
  s2 -> s1 [0, 65] { R6956 += 1, R6862 += 1, R49 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6956 += 1, R6861 += 1, R6862 += 1 };
  s2 -> s3 [66, 66] { R6956 += 1, R6862 += 1, R49 += 1 };
  s2 -> s4 [66, 66] { R6956 += 1, R6862 += 1, R49 += 1 };
  s2 -> s1 [67, 65535] { R6956 += 1, R6862 += 1, R49 += 1 };
  s3 -> s6 [0, 65535] { R6956 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6956 += 1, R6862 += 1, R49 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6956 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6956 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65] { R6958 += 1, R6864 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R6958 += 1, R6863 += 1, R6864 += 1 };
  s0 -> s0 [0, 65535] { R6957 += 1, R6958 += 1 };
  s0 -> s3 [66, 66] { R6958 += 1, R6864 += 1, R51 += 1 };
  s0 -> s4 [66, 66] { R6958 += 1, R6864 += 1, R51 += 1 };
  s0 -> s1 [67, 65535] { R6958 += 1, R6864 += 1, R51 += 1 };
  s1 -> s1 [0, 65] { R6958 += 1, R6864 += 1, R51 += 1 };
  s1 -> s1 [0, 65535] { R6958 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R6958 += 1, R6864 += 1, R51 += 1 };
  s1 -> s4 [66, 66] { R6958 += 1, R6864 += 1, R51 += 1 };
  s1 -> s1 [67, 65535] { R6958 += 1, R6864 += 1, R51 += 1 };
  s2 -> s1 [0, 65] { R6958 += 1, R6864 += 1, R51 += 1 };
  s2 -> s2 [0, 65535] { R6958 += 1, R6863 += 1, R6864 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R6958 += 1, R6864 += 1, R51 += 1 };
  s2 -> s4 [66, 66] { R6958 += 1, R6864 += 1, R51 += 1 };
  s2 -> s1 [67, 65535] { R6958 += 1, R6864 += 1, R51 += 1 };
  s3 -> s3 [0, 65535] { R6958 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s5 [0, 65535] { R6958 += 1 };
  s4 -> s4 [0, 65535] { R6958 += 1, R6864 += 1, R51 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6958 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s0 -> s2 [0, 65535] { R6960 += 1, R6865 += 1, R6866 += 1 };
  s0 -> s0 [0, 65535] { R6959 += 1, R6960 += 1 };
  s0 -> s3 [66, 66] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [66, 66] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s0 -> s1 [67, 65535] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [0, 65] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6960 += 1 };
  s1 -> s3 [66, 66] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s1 -> s4 [66, 66] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s1 -> s1 [67, 65535] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [0, 65] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6960 += 1, R6865 += 1, R6866 += 1 };
  s2 -> s3 [66, 66] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s2 -> s4 [66, 66] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s2 -> s1 [67, 65535] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s3 -> s6 [0, 65535] { R6960 += 1 };
  s3 -> s3 [0, 65535] { R6960 += 1, R6866 += 1, R53 += 1, R54 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6960 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6960 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 65] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s0 -> s2 [0, 65535] { R6962 += 1, R6867 += 1, R6868 += 1 };
  s0 -> s0 [0, 65535] { R6961 += 1, R6962 += 1 };
  s0 -> s3 [66, 66] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s0 -> s4 [66, 66] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s0 -> s1 [67, 65535] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [0, 65] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6962 += 1 };
  s1 -> s3 [66, 66] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s1 -> s4 [66, 66] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s1 -> s1 [67, 65535] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [0, 65] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s2 -> s2 [0, 65535] { R6962 += 1, R6867 += 1, R6868 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [66, 66] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s2 -> s4 [66, 66] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s2 -> s1 [67, 65535] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s3 -> s3 [0, 65535] { R6962 += 1, R6868 += 1, R57 += 1, R58 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6962 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6962 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6962 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 65] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s0 -> s2 [0, 65535] { R6964 += 1, R6869 += 1, R6870 += 1 };
  s0 -> s0 [0, 65535] { R6963 += 1, R6964 += 1 };
  s0 -> s3 [66, 66] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s0 -> s4 [66, 66] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s0 -> s1 [67, 65535] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [0, 65535] { R6964 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s3 [66, 66] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s1 -> s4 [66, 66] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s1 -> s1 [67, 65535] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [0, 65] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s2 -> s2 [0, 65535] { R6964 += 1, R6869 += 1, R6870 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [66, 66] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s2 -> s4 [66, 66] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s2 -> s1 [67, 65535] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s3 -> s3 [0, 65535] { R6964 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6964 += 1, R6870 += 1, R63 += 1, R64 += 1 };
  s4 -> s5 [0, 65535] { R6964 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6964 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 65] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R6965 += 1, R6966 += 1 };
  s0 -> s2 [0, 65535] { R6966 += 1, R6871 += 1, R6872 += 1 };
  s0 -> s3 [66, 66] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s0 -> s4 [66, 66] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s0 -> s1 [67, 65535] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [0, 65] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6966 += 1 };
  s1 -> s3 [66, 66] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s1 -> s4 [66, 66] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s1 -> s1 [67, 65535] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [0, 65] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6966 += 1, R6871 += 1, R6872 += 1 };
  s2 -> s3 [66, 66] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s2 -> s4 [66, 66] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s2 -> s1 [67, 65535] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s3 -> s3 [0, 65535] { R6966 += 1, R6872 += 1, R67 += 1, R68 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6966 += 1 };
  s4 -> s4 [0, 65535] { R6966 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6966 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 65] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s0 -> s0 [0, 65535] { R6967 += 1, R6968 += 1 };
  s0 -> s2 [0, 65535] { R6968 += 1, R6873 += 1, R6874 += 1 };
  s0 -> s3 [66, 66] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s0 -> s4 [66, 66] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s0 -> s1 [67, 65535] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [0, 65] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R6968 += 1 };
  s1 -> s3 [66, 66] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s1 -> s4 [66, 66] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s1 -> s1 [67, 65535] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [0, 65] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6968 += 1, R6873 += 1, R6874 += 1 };
  s2 -> s3 [66, 66] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s2 -> s4 [66, 66] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s2 -> s1 [67, 65535] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6968 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6968 += 1 };
  s4 -> s4 [0, 65535] { R6968 += 1, R6874 += 1, R73 += 1, R74 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6968 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 65] { R6970 += 1, R6894 += 1 };
  s0 -> s2 [0, 65535] { R6970 += 1, R6893 += 1, R6894 += 1 };
  s0 -> s0 [0, 65535] { R6969 += 1, R6970 += 1 };
  s0 -> s3 [66, 66] { R6970 += 1, R6894 += 1 };
  s0 -> s1 [67, 65535] { R6970 += 1, R6894 += 1 };
  s1 -> s1 [0, 65] { R6970 += 1, R6894 += 1 };
  s1 -> s3 [66, 66] { R6970 += 1, R6894 += 1 };
  s1 -> s1 [67, 65535] { R6970 += 1, R6894 += 1 };
  s2 -> s1 [0, 65] { R6970 += 1, R6894 += 1 };
  s2 -> s2 [0, 65535] { R6970 += 1, R6893 += 1, R6894 += 1 };
  s2 -> s3 [66, 66] { R6970 += 1, R6894 += 1 };
  s2 -> s1 [67, 65535] { R6970 += 1, R6894 += 1 };
  s3 -> s3 [0, 65535] { R6970 += 1, R6894 += 1 };
  s3 -> s4 [0, 65535] { R6970 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6970 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 65535] { R6972 += 1, R6895 += 1, R6896 += 1 };
  s0 -> s2 [0, 65535] { R6972 += 1, R6896 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R6971 += 1, R6972 += 1 };
  s1 -> s1 [0, 65535] { R6972 += 1, R6895 += 1, R6896 += 1 };
  s1 -> s2 [0, 65535] { R6972 += 1, R6896 += 1, R1 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6972 += 1, R6896 += 1, R1 += 1 };
  s2 -> s3 [0, 65535] { R6972 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R6972 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 65] { R6974 += 1, R6898 += 1 };
  s0 -> s0 [0, 65535] { R6973 += 1, R6974 += 1 };
  s0 -> s2 [0, 65535] { R6974 += 1, R6897 += 1, R6898 += 1 };
  s0 -> s3 [0, 65535] { R6974 += 1, R6898 += 1, R11 += 1 };
  s0 -> s4 [66, 66] { R6974 += 1, R6898 += 1 };
  s0 -> s1 [67, 65535] { R6974 += 1, R6898 += 1 };
  s1 -> s1 [0, 65] { R6974 += 1, R6898 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6974 += 1 };
  s1 -> s4 [66, 66] { R6974 += 1, R6898 += 1 };
  s1 -> s1 [67, 65535] { R6974 += 1, R6898 += 1 };
  s2 -> s1 [0, 65] { R6974 += 1, R6898 += 1 };
  s2 -> s2 [0, 65535] { R6974 += 1, R6897 += 1, R6898 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R6974 += 1, R6898 += 1, R11 += 1 };
  s2 -> s4 [66, 66] { R6974 += 1, R6898 += 1 };
  s2 -> s1 [67, 65535] { R6974 += 1, R6898 += 1 };
  s3 -> s1 [0, 65] { R6974 += 1, R6898 += 1 };
  s3 -> s5 [0, 65535] { R6974 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R6974 += 1, R6898 += 1, R11 += 1 };
  s3 -> s4 [66, 66] { R6974 += 1, R6898 += 1 };
  s3 -> s1 [67, 65535] { R6974 += 1, R6898 += 1 };
  s4 -> s4 [0, 65535] { R6974 += 1, R6898 += 1 };
  s5 -> s5 [0, 65535] { R6974 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 65] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s0 -> s2 [0, 65535] { R6976 += 1, R6900 += 1, R6837 += 1, R6838 += 1 };
  s0 -> s0 [0, 65535] { R6975 += 1, R6976 += 1 };
  s0 -> s3 [0, 65535] { R6976 += 1, R6899 += 1, R6900 += 1 };
  s0 -> s1 [67, 65535] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s1 -> s1 [0, 65] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s1 -> s1 [0, 65535] { R6976 += 1, R6900 += 1 };
  s1 -> s5 [0, 65535] { R6976 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [67, 65535] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s2 -> s1 [0, 65] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s2 -> s2 [0, 65535] { R6976 += 1, R6900 += 1, R6837 += 1, R6838 += 1 };
  s2 -> s5 [0, 65535] { R6976 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [67, 65535] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s3 -> s1 [0, 65] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s3 -> s2 [0, 65535] { R6976 += 1, R6900 += 1, R6837 += 1, R6838 += 1 };
  s3 -> s3 [0, 65535] { R6976 += 1, R6899 += 1, R6900 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [67, 65535] { R6976 += 1, R6900 += 1, R6838 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6976 += 1 };
  s5 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_27 {
  init s0;
  s0 -> s1 [0, 65535] { R6978 += 1, R6902 += 1, R6839 += 1, R6840 += 1 };
  s0 -> s2 [0, 65535] { R6978 += 1, R6901 += 1, R6902 += 1 };
  s0 -> s0 [0, 65535] { R6977 += 1, R6978 += 1 };
  s0 -> s3 [0, 65535] { R6978 += 1, R6902 += 1, R6840 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R6978 += 1, R6902 += 1, R6839 += 1, R6840 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R6978 += 1 };
  s1 -> s3 [0, 65535] { R6978 += 1, R6902 += 1, R6840 += 1, R20 += 1 };
  s2 -> s1 [0, 65535] { R6978 += 1, R6902 += 1, R6839 += 1, R6840 += 1 };
  s2 -> s2 [0, 65535] { R6978 += 1, R6901 += 1, R6902 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R6978 += 1, R6902 += 1, R6840 += 1, R20 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6978 += 1, R6902 += 1 };
  s3 -> s6 [0, 65535] { R6978 += 1 };
  s3 -> s3 [0, 65535] { R6978 += 1, R6902 += 1, R6840 += 1, R20 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6978 += 1, R6902 += 1 };
  s5 -> s6 [0, 65535] { R6978 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6978 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_28 {
  init s0;
  s0 -> s1 [0, 66] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s0 -> s2 [0, 65535] { R6980 += 1, R6903 += 1, R6904 += 1 };
  s0 -> s0 [0, 65535] { R6979 += 1, R6980 += 1 };
  s0 -> s3 [0, 65535] { R6980 += 1, R6904 += 1, R6841 += 1, R6842 += 1 };
  s0 -> s1 [70, 65535] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s1 -> s1 [0, 66] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R6980 += 1 };
  s1 -> s1 [0, 65535] { R6980 += 1, R6904 += 1 };
  s1 -> s1 [70, 65535] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s2 -> s1 [0, 66] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6980 += 1, R6903 += 1, R6904 += 1 };
  s2 -> s3 [0, 65535] { R6980 += 1, R6904 += 1, R6841 += 1, R6842 += 1 };
  s2 -> s1 [70, 65535] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s3 -> s1 [0, 66] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R6980 += 1 };
  s3 -> s3 [0, 65535] { R6980 += 1, R6904 += 1, R6841 += 1, R6842 += 1 };
  s3 -> s1 [70, 65535] { R6980 += 1, R6904 += 1, R6842 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6980 += 1 };
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_29 {
  init s0;
  s0 -> s1 [0, 65535] { R6982 += 1, R6905 += 1, R6906 += 1 };
  s0 -> s0 [0, 65535] { R6981 += 1, R6982 += 1 };
  s0 -> s2 [0, 65535] { R6982 += 1, R6906 += 1, R6843 += 1, R6844 += 1 };
  s0 -> s3 [0, 65535] { R6982 += 1, R6906 += 1, R6844 += 1, R78 += 1 };
  s1 -> s1 [0, 65535] { R6982 += 1, R6905 += 1, R6906 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s2 [0, 65535] { R6982 += 1, R6906 += 1, R6843 += 1, R6844 += 1 };
  s1 -> s3 [0, 65535] { R6982 += 1, R6906 += 1, R6844 += 1, R78 += 1 };
  s2 -> s4 [0, 65535] { R6982 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6982 += 1, R6906 += 1, R6843 += 1, R6844 += 1 };
  s2 -> s3 [0, 65535] { R6982 += 1, R6906 += 1, R6844 += 1, R78 += 1 };
  s3 -> s4 [0, 65535] { R6982 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R6982 += 1, R6906 += 1 };
  s3 -> s3 [0, 65535] { R6982 += 1, R6906 += 1, R6844 += 1, R78 += 1 };
  s4 -> s4 [0, 65535] { R6982 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s4 [0, 65535] { R6982 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6982 += 1, R6906 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_30 {
  init s0;
  s0 -> s1 [0, 69] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s0 -> s2 [0, 65535] { R6984 += 1, R6908 += 1, R6846 += 1, R80 += 1 };
  s0 -> s0 [0, 65535] { R6983 += 1, R6984 += 1 };
  s0 -> s3 [0, 65535] { R6984 += 1, R6907 += 1, R6908 += 1 };
  s0 -> s4 [0, 65535] { R6984 += 1, R6908 += 1, R6845 += 1, R6846 += 1 };
  s0 -> s1 [71, 65535] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s1 -> s1 [0, 69] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s1 -> s1 [0, 65535] { R6984 += 1, R6908 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6984 += 1 };
  s1 -> s1 [71, 65535] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s2 -> s1 [0, 69] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s2 -> s2 [0, 65535] { R6984 += 1, R6908 += 1, R6846 += 1, R80 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s7 [0, 65535] { R6984 += 1, R6908 += 1 };
  s2 -> s6 [0, 65535] { R6984 += 1 };
  s2 -> s1 [71, 65535] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s3 -> s1 [0, 69] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s3 -> s2 [0, 65535] { R6984 += 1, R6908 += 1, R6846 += 1, R80 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6984 += 1, R6907 += 1, R6908 += 1 };
  s3 -> s4 [0, 65535] { R6984 += 1, R6908 += 1, R6845 += 1, R6846 += 1 };
  s3 -> s1 [71, 65535] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s4 -> s1 [0, 69] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s4 -> s2 [0, 65535] { R6984 += 1, R6908 += 1, R6846 += 1, R80 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6984 += 1 };
  s4 -> s4 [0, 65535] { R6984 += 1, R6908 += 1, R6845 += 1, R6846 += 1 };
  s4 -> s1 [71, 65535] { R6984 += 1, R6908 += 1, R6846 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6984 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6984 += 1, R6908 += 1 };
  s7 -> s6 [0, 65535] { R6984 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_31 {
  init s0;
  s0 -> s1 [0, 69] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s0 -> s2 [0, 65535] { R6986 += 1, R6909 += 1, R6910 += 1 };
  s0 -> s3 [0, 65535] { R6986 += 1, R6910 += 1, R6847 += 1, R6848 += 1 };
  s0 -> s4 [0, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R83 += 1, R84 += 1 };
  s0 -> s0 [0, 65535] { R6985 += 1, R6986 += 1 };
  s0 -> s1 [71, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s1 -> s1 [0, 69] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R6986 += 1, R6910 += 1 };
  s1 -> s7 [0, 65535] { R6986 += 1 };
  s1 -> s1 [0, 65535] { R6986 += 1, R6910 += 1, R6848 += 1 };
  s1 -> s1 [71, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s2 -> s1 [0, 69] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R6986 += 1, R6909 += 1, R6910 += 1 };
  s2 -> s3 [0, 65535] { R6986 += 1, R6910 += 1, R6847 += 1, R6848 += 1 };
  s2 -> s4 [0, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R83 += 1, R84 += 1 };
  s2 -> s1 [71, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s3 -> s1 [0, 69] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R6986 += 1, R6910 += 1, R6847 += 1, R6848 += 1 };
  s3 -> s4 [0, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R83 += 1, R84 += 1 };
  s3 -> s7 [0, 65535] { R6986 += 1 };
  s3 -> s1 [71, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s4 -> s1 [0, 69] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R6986 += 1, R6910 += 1 };
  s4 -> s4 [0, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R83 += 1, R84 += 1 };
  s4 -> s7 [0, 65535] { R6986 += 1 };
  s4 -> s1 [71, 65535] { R6986 += 1, R6910 += 1, R6848 += 1, R84 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6986 += 1, R6910 += 1 };
  s6 -> s7 [0, 65535] { R6986 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R6986 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_32 {
  init s0;
  s0 -> s1 [0, 65535] { R6988 += 1, R6911 += 1, R6912 += 1 };
  s0 -> s0 [0, 65535] { R6987 += 1, R6988 += 1 };
  s0 -> s2 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1, R6641 += 1, R6642 += 1 };
  s0 -> s3 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1 };
  s0 -> s4 [0, 65535] { R6988 += 1, R6912 += 1, R6849 += 1, R6850 += 1 };
  s1 -> s1 [0, 65535] { R6988 += 1, R6911 += 1, R6912 += 1 };
  s1 -> s2 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1, R6641 += 1, R6642 += 1 };
  s1 -> s3 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1 };
  s1 -> s4 [0, 65535] { R6988 += 1, R6912 += 1, R6849 += 1, R6850 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1, R6641 += 1, R6642 += 1 };
  s2 -> s7 [0, 65535] { R6988 += 1, R6912 += 1 };
  s2 -> s3 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1 };
  s2 -> s5 [0, 65535] { R6988 += 1 };
  s2 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R6988 += 1, R6912 += 1 };
  s3 -> s3 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1 };
  s3 -> s5 [0, 65535] { R6988 += 1 };
  s3 -> s6 [0, 65535];
  s4 -> s2 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1, R6641 += 1, R6642 += 1 };
  s4 -> s3 [0, 65535] { R6988 += 1, R6912 += 1, R6850 += 1 };
  s4 -> s5 [0, 65535] { R6988 += 1 };
  s4 -> s4 [0, 65535] { R6988 += 1, R6912 += 1, R6849 += 1, R6850 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R6988 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6988 += 1, R6912 += 1 };
  s7 -> s5 [0, 65535] { R6988 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s7, s0;
};
automaton value2_33 {
  init s0;
  s0 -> s1 [0, 70] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s0 -> s2 [0, 65535] { R6990 += 1, R6914 += 1, R6851 += 1, R6852 += 1 };
  s0 -> s3 [0, 65535] { R6990 += 1, R6913 += 1, R6914 += 1 };
  s0 -> s0 [0, 65535] { R6989 += 1, R6990 += 1 };
  s0 -> s1 [0, 65535] { R6990 += 1, R6914 += 1, R6852 += 1 };
  s0 -> s1 [73, 65535] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s1 -> s1 [0, 70] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s1 -> s5 [0, 65535] { R6990 += 1 };
  s1 -> s1 [0, 65535] { R6990 += 1, R6914 += 1, R6852 += 1 };
  s1 -> s6 [0, 65535] { R6990 += 1, R6914 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [73, 65535] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s2 -> s1 [0, 70] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s2 -> s2 [0, 65535] { R6990 += 1, R6914 += 1, R6851 += 1, R6852 += 1 };
  s2 -> s5 [0, 65535] { R6990 += 1 };
  s2 -> s1 [0, 65535] { R6990 += 1, R6914 += 1, R6852 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s1 [73, 65535] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s3 -> s1 [0, 70] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s3 -> s2 [0, 65535] { R6990 += 1, R6914 += 1, R6851 += 1, R6852 += 1 };
  s3 -> s3 [0, 65535] { R6990 += 1, R6913 += 1, R6914 += 1 };
  s3 -> s1 [0, 65535] { R6990 += 1, R6914 += 1, R6852 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [73, 65535] { R6990 += 1, R6914 += 1, R6852 += 1, R6646 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6990 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R6990 += 1 };
  s6 -> s6 [0, 65535] { R6990 += 1, R6914 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_34 {
  init s0;
  s0 -> s0 [0, 65535] { R6991 += 1, R6992 += 1 };
  s0 -> s1 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6650 += 1, R6651 += 1 };
  s0 -> s2 [0, 65535] { R6992 += 1, R6916 += 1, R6853 += 1, R6854 += 1 };
  s0 -> s3 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6651 += 1, R6652 += 1 };
  s0 -> s4 [0, 65535] { R6992 += 1, R6915 += 1, R6916 += 1 };
  s1 -> s1 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6650 += 1, R6651 += 1 };
  s1 -> s6 [0, 65535] { R6992 += 1, R6916 += 1 };
  s1 -> s3 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6651 += 1, R6652 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s8 [0, 65535] { R6992 += 1 };
  s2 -> s1 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6650 += 1, R6651 += 1 };
  s2 -> s2 [0, 65535] { R6992 += 1, R6916 += 1, R6853 += 1, R6854 += 1 };
  s2 -> s3 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6651 += 1, R6652 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s8 [0, 65535] { R6992 += 1 };
  s3 -> s6 [0, 65535] { R6992 += 1, R6916 += 1 };
  s3 -> s7 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1 };
  s3 -> s3 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6651 += 1, R6652 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s8 [0, 65535] { R6992 += 1 };
  s4 -> s1 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6650 += 1, R6651 += 1 };
  s4 -> s2 [0, 65535] { R6992 += 1, R6916 += 1, R6853 += 1, R6854 += 1 };
  s4 -> s3 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1, R6651 += 1, R6652 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R6992 += 1, R6915 += 1, R6916 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R6992 += 1, R6916 += 1 };
  s6 -> s5 [0, 65535];
  s6 -> s8 [0, 65535] { R6992 += 1 };
  s7 -> s6 [0, 65535] { R6992 += 1, R6916 += 1 };
  s7 -> s7 [0, 65535] { R6992 += 1, R6916 += 1, R6854 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s8 [0, 65535] { R6992 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R6992 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_35 {
  init s0;
  s0 -> s1 [0, 69] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s0 -> s1 [0, 65535] { R6994 += 1, R6918 += 1, R6856 += 1 };
  s0 -> s2 [0, 65535] { R6994 += 1, R6918 += 1, R6855 += 1, R6856 += 1 };
  s0 -> s0 [0, 65535] { R6993 += 1, R6994 += 1 };
  s0 -> s3 [0, 65535] { R6994 += 1, R6917 += 1, R6918 += 1 };
  s0 -> s4 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s0 -> s5 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s0 -> s1 [74, 65535] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s1 -> s1 [0, 69] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R6994 += 1, R6918 += 1, R6856 += 1 };
  s1 -> s7 [0, 65535] { R6994 += 1, R6918 += 1 };
  s1 -> s8 [0, 65535] { R6994 += 1 };
  s1 -> s4 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s1 -> s5 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s1 -> s1 [74, 65535] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s2 -> s1 [0, 69] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R6994 += 1, R6918 += 1, R6856 += 1 };
  s2 -> s2 [0, 65535] { R6994 += 1, R6918 += 1, R6855 += 1, R6856 += 1 };
  s2 -> s8 [0, 65535] { R6994 += 1 };
  s2 -> s4 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s2 -> s5 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s2 -> s1 [74, 65535] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s3 -> s1 [0, 69] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s1 [0, 65535] { R6994 += 1, R6918 += 1, R6856 += 1 };
  s3 -> s2 [0, 65535] { R6994 += 1, R6918 += 1, R6855 += 1, R6856 += 1 };
  s3 -> s3 [0, 65535] { R6994 += 1, R6917 += 1, R6918 += 1 };
  s3 -> s4 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s3 -> s5 [70, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s3 -> s1 [74, 65535] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R6994 += 1, R6918 += 1, R6856 += 1 };
  s4 -> s7 [0, 65535] { R6994 += 1, R6918 += 1 };
  s4 -> s8 [0, 65535] { R6994 += 1 };
  s5 -> s5 [0, 70] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R6994 += 1, R6918 += 1 };
  s5 -> s8 [0, 65535] { R6994 += 1 };
  s5 -> s5 [0, 65535] { R6994 += 1, R6918 += 1, R6856 += 1 };
  s5 -> s5 [74, 65535] { R6994 += 1, R6918 += 1, R6856 += 1, R6836 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R6994 += 1, R6918 += 1 };
  s7 -> s8 [0, 65535] { R6994 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R6994 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_36 {
  init s0;
  s0 -> s1 [0, 65535] { R6996 += 1, R6920 += 1, R6875 += 1, R6876 += 1 };
  s0 -> s2 [0, 65535] { R6996 += 1, R6920 += 1, R6876 += 1, R21 += 1 };
  s0 -> s3 [0, 65535] { R6996 += 1, R6919 += 1, R6920 += 1 };
  s0 -> s0 [0, 65535] { R6995 += 1, R6996 += 1 };
  s1 -> s6 [0, 65535] { R6996 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R6996 += 1, R6920 += 1, R6875 += 1, R6876 += 1 };
  s1 -> s2 [0, 65535] { R6996 += 1, R6920 += 1, R6876 += 1, R21 += 1 };
  s2 -> s5 [0, 65535] { R6996 += 1, R6920 += 1 };
  s2 -> s6 [0, 65535] { R6996 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R6996 += 1, R6920 += 1, R6876 += 1, R21 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R6996 += 1, R6920 += 1, R6875 += 1, R6876 += 1 };
  s3 -> s2 [0, 65535] { R6996 += 1, R6920 += 1, R6876 += 1, R21 += 1 };
  s3 -> s3 [0, 65535] { R6996 += 1, R6919 += 1, R6920 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R6996 += 1, R6920 += 1 };
  s5 -> s6 [0, 65535] { R6996 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R6996 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_37 {
  init s0;
  s0 -> s1 [0, 65] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s0 -> s0 [0, 65535] { R6997 += 1, R6998 += 1 };
  s0 -> s2 [0, 65535] { R6998 += 1, R6921 += 1, R6922 += 1 };
  s0 -> s3 [0, 65535] { R6998 += 1, R6922 += 1, R6877 += 1, R6878 += 1 };
  s0 -> s4 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s0 -> s5 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s0 -> s6 [70, 70] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s0 -> s1 [71, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s1 -> s1 [0, 65] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s1 -> s4 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s1 -> s5 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s1 -> s6 [70, 70] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s1 -> s1 [71, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s2 -> s1 [0, 65] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s2 -> s2 [0, 65535] { R6998 += 1, R6921 += 1, R6922 += 1 };
  s2 -> s3 [0, 65535] { R6998 += 1, R6922 += 1, R6877 += 1, R6878 += 1 };
  s2 -> s4 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s2 -> s5 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s2 -> s6 [70, 70] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s2 -> s1 [71, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s3 -> s1 [0, 65] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s3 -> s3 [0, 65535] { R6998 += 1, R6922 += 1, R6877 += 1, R6878 += 1 };
  s3 -> s4 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s3 -> s5 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s3 -> s6 [70, 70] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s3 -> s1 [71, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s4 -> s4 [0, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s4 -> s9 [70, 70] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s4 -> s4 [71, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s6 -> s6 [0, 65] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s6 -> s7 [0, 65535] { R6998 += 1 };
  s6 -> s6 [0, 65535] { R6998 += 1, R6922 += 1 };
  s6 -> s8 [0, 65535];
  s6 -> s9 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s6 -> s10 [66, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s6 -> s6 [70, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s7 -> s7 [0, 65535] { R6998 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  s9 -> s9 [0, 66] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s9 -> s9 [0, 65535] { R6998 += 1, R6922 += 1 };
  s9 -> s7 [0, 65535] { R6998 += 1 };
  s9 -> s8 [0, 65535];
  s9 -> s9 [70, 65535] { R6998 += 1, R6922 += 1, R6878 += 1 };
  s10 -> s10 [0, 65535] { R6998 += 1, R6922 += 1 };
  s10 -> s7 [0, 65535] { R6998 += 1 };
  s10 -> s8 [0, 65535];
  accepting s8, s9, s6, s7, s10;
};
automaton value2_38 {
  init s0;
  s0 -> s1 [0, 65] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s0 -> s2 [0, 65535] { R7000 += 1, R6923 += 1, R6924 += 1 };
  s0 -> s3 [0, 65535] { R7000 += 1, R6924 += 1, R6879 += 1, R6880 += 1 };
  s0 -> s0 [0, 65535] { R6999 += 1, R7000 += 1 };
  s0 -> s4 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s0 -> s5 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s0 -> s1 [67, 65535] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s1 -> s1 [0, 65] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s1 -> s7 [0, 65535] { R7000 += 1 };
  s1 -> s8 [0, 65535];
  s1 -> s1 [0, 65535] { R7000 += 1, R6924 += 1 };
  s1 -> s4 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s1 -> s5 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s1 -> s1 [67, 65535] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s2 -> s1 [0, 65] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s2 -> s2 [0, 65535] { R7000 += 1, R6923 += 1, R6924 += 1 };
  s2 -> s8 [0, 65535];
  s2 -> s3 [0, 65535] { R7000 += 1, R6924 += 1, R6879 += 1, R6880 += 1 };
  s2 -> s4 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s2 -> s5 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s2 -> s1 [67, 65535] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s3 -> s1 [0, 65] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s3 -> s7 [0, 65535] { R7000 += 1 };
  s3 -> s8 [0, 65535];
  s3 -> s3 [0, 65535] { R7000 += 1, R6924 += 1, R6879 += 1, R6880 += 1 };
  s3 -> s4 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s3 -> s5 [66, 66] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s3 -> s1 [67, 65535] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s4 -> s7 [0, 65535] { R7000 += 1 };
  s4 -> s8 [0, 65535];
  s4 -> s4 [0, 65535] { R7000 += 1, R6924 += 1 };
  s5 -> s6 [0, 65535] { R7000 += 1, R6924 += 1 };
  s5 -> s7 [0, 65535] { R7000 += 1 };
  s5 -> s8 [0, 65535];
  s5 -> s5 [0, 65535] { R7000 += 1, R6924 += 1, R6880 += 1, R77 += 1 };
  s6 -> s6 [0, 65535] { R7000 += 1, R6924 += 1 };
  s6 -> s7 [0, 65535] { R7000 += 1 };
  s6 -> s8 [0, 65535];
  s7 -> s7 [0, 65535] { R7000 += 1 };
  s7 -> s8 [0, 65535];
  s8 -> s8 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_39 {
  init s0;
  s0 -> s1 [0, 65] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s0 -> s2 [0, 65535] { R7002 += 1, R6926 += 1, R6881 += 1, R6882 += 1 };
  s0 -> s0 [0, 65535] { R7001 += 1, R7002 += 1 };
  s0 -> s3 [0, 65535] { R7002 += 1, R6925 += 1, R6926 += 1 };
  s0 -> s4 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s0 -> s5 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s0 -> s1 [67, 65535] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s1 -> s1 [0, 65] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R7002 += 1 };
  s1 -> s1 [0, 65535] { R7002 += 1, R6926 += 1 };
  s1 -> s4 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s1 -> s5 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s1 -> s1 [67, 65535] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s2 -> s1 [0, 65] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s2 -> s2 [0, 65535] { R7002 += 1, R6926 += 1, R6881 += 1, R6882 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R7002 += 1 };
  s2 -> s4 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s2 -> s5 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s2 -> s1 [67, 65535] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s3 -> s1 [0, 65] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s3 -> s2 [0, 65535] { R7002 += 1, R6926 += 1, R6881 += 1, R6882 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R7002 += 1, R6925 += 1, R6926 += 1 };
  s3 -> s4 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s3 -> s5 [66, 66] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s3 -> s1 [67, 65535] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s4 -> s8 [0, 65535] { R7002 += 1, R6926 += 1 };
  s4 -> s4 [0, 65535] { R7002 += 1, R6926 += 1, R6882 += 1, R79 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s7 [0, 65535] { R7002 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R7002 += 1 };
  s5 -> s5 [0, 65535] { R7002 += 1, R6926 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7002 += 1 };
  s8 -> s8 [0, 65535] { R7002 += 1, R6926 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R7002 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_40 {
  init s0;
  s0 -> s1 [0, 65] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s0 -> s0 [0, 65535] { R7003 += 1, R7004 += 1 };
  s0 -> s2 [0, 65535] { R7004 += 1, R6927 += 1, R6928 += 1 };
  s0 -> s3 [0, 65535] { R7004 += 1, R6928 += 1, R6883 += 1, R6884 += 1 };
  s0 -> s4 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s0 -> s5 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s0 -> s1 [67, 65535] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [0, 65] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R7004 += 1 };
  s1 -> s1 [0, 65535] { R7004 += 1, R6928 += 1 };
  s1 -> s4 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s1 -> s5 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s1 -> s1 [67, 65535] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [0, 65] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R7004 += 1, R6927 += 1, R6928 += 1 };
  s2 -> s3 [0, 65535] { R7004 += 1, R6928 += 1, R6883 += 1, R6884 += 1 };
  s2 -> s4 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s2 -> s5 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s2 -> s1 [67, 65535] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [0, 65] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R7004 += 1 };
  s3 -> s3 [0, 65535] { R7004 += 1, R6928 += 1, R6883 += 1, R6884 += 1 };
  s3 -> s4 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s3 -> s5 [66, 66] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s3 -> s1 [67, 65535] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R7004 += 1, R6928 += 1, R6884 += 1, R81 += 1, R82 += 1 };
  s4 -> s8 [0, 65535] { R7004 += 1, R6928 += 1 };
  s4 -> s7 [0, 65535] { R7004 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s7 [0, 65535] { R7004 += 1 };
  s5 -> s5 [0, 65535] { R7004 += 1, R6928 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R7004 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R7004 += 1, R6928 += 1 };
  s8 -> s7 [0, 65535] { R7004 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_41 {
  init s0;
  s0 -> s1 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s3 [0, 65535] { R7006 += 1, R6930 += 1, R6885 += 1, R6886 += 1 };
  s0 -> s0 [0, 65535] { R7005 += 1, R7006 += 1 };
  s0 -> s4 [0, 65535] { R7006 += 1, R6929 += 1, R6930 += 1 };
  s0 -> s5 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s6 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s7 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s8 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s0 -> s1 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s0 -> s2 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s1 -> s1 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s9 [0, 65535] { R7006 += 1 };
  s1 -> s1 [0, 65535] { R7006 += 1, R6930 += 1 };
  s1 -> s10 [0, 65535];
  s1 -> s6 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s7 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s1 -> s1 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s1 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s5 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s6 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s7 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s8 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s2 -> s1 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s2 -> s2 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s3 [0, 65535] { R7006 += 1, R6930 += 1, R6885 += 1, R6886 += 1 };
  s3 -> s5 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s6 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s7 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s8 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s3 -> s1 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s3 -> s2 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [0, 65] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s3 [0, 65535] { R7006 += 1, R6930 += 1, R6885 += 1, R6886 += 1 };
  s4 -> s4 [0, 65535] { R7006 += 1, R6929 += 1, R6930 += 1 };
  s4 -> s5 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s6 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s7 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s8 [66, 66] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s4 -> s1 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s4 -> s2 [67, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s6 -> s9 [0, 65535] { R7006 += 1 };
  s6 -> s11 [0, 65535] { R7006 += 1, R6930 += 1 };
  s6 -> s6 [0, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s6 -> s10 [0, 65535];
  s7 -> s9 [0, 65535] { R7006 += 1 };
  s7 -> s10 [0, 65535];
  s7 -> s7 [0, 65535] { R7006 += 1, R6930 += 1 };
  s8 -> s6 [0, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6638 += 1, R6639 += 1 };
  s8 -> s8 [0, 65535] { R7006 += 1, R6930 += 1, R6886 += 1, R6637 += 1, R6638 += 1 };
  s9 -> s9 [0, 65535] { R7006 += 1 };
  s9 -> s10 [0, 65535];
  s10 -> s10 [0, 65535];
  s11 -> s9 [0, 65535] { R7006 += 1 };
  s11 -> s11 [0, 65535] { R7006 += 1, R6930 += 1 };
  s11 -> s10 [0, 65535];
  accepting s9, s6, s1, s7, s10, s11;
};
automaton value2_42 {
  init s0;
  s0 -> s1 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s0 -> s2 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s0 [0, 65535] { R7007 += 1, R7008 += 1 };
  s0 -> s3 [0, 65535] { R7008 += 1, R6932 += 1, R6887 += 1, R6888 += 1 };
  s0 -> s4 [0, 65535] { R7008 += 1, R6931 += 1, R6932 += 1 };
  s0 -> s5 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s0 -> s6 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s7 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s8 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s0 -> s1 [67, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s0 -> s2 [67, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s0 -> s9 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s0 -> s1 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s1 -> s1 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s1 -> s5 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s1 -> s8 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s1 -> s1 [67, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s1 -> s9 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s1 -> s1 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s2 -> s1 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s2 -> s2 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s5 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s2 -> s6 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s7 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s8 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s2 -> s1 [67, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s2 -> s2 [67, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s2 -> s9 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s2 -> s1 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s3 -> s1 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s3 -> s2 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s3 [0, 65535] { R7008 += 1, R6932 += 1, R6887 += 1, R6888 += 1 };
  s3 -> s5 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s3 -> s6 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s7 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s8 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s3 -> s1 [67, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s3 -> s2 [67, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s3 -> s9 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s3 -> s1 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s4 -> s1 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s4 -> s2 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s3 [0, 65535] { R7008 += 1, R6932 += 1, R6887 += 1, R6888 += 1 };
  s4 -> s4 [0, 65535] { R7008 += 1, R6931 += 1, R6932 += 1 };
  s4 -> s5 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s4 -> s6 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s7 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s8 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s4 -> s1 [67, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s4 -> s2 [67, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s4 -> s9 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s4 -> s1 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s7 -> s8 [0, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s7 -> s7 [0, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6643 += 1, R6644 += 1 };
  s7 -> s13 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s7 -> s8 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s8 -> s8 [0, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s8 -> s13 [73, 73] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s8 -> s8 [74, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s9 -> s9 [0, 65] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s9 -> s10 [0, 65535] { R7008 += 1 };
  s9 -> s11 [0, 65535];
  s9 -> s9 [0, 65535] { R7008 += 1, R6932 += 1 };
  s9 -> s12 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1 };
  s9 -> s13 [66, 66] { R7008 += 1, R6932 += 1, R6888 += 1 };
  s9 -> s9 [67, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s9 -> s9 [67, 65535] { R7008 += 1, R6932 += 1, R6888 += 1 };
  s9 -> s9 [73, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s10 -> s10 [0, 65535] { R7008 += 1 };
  s10 -> s11 [0, 65535];
  s11 -> s11 [0, 65535];
  s12 -> s10 [0, 65535] { R7008 += 1 };
  s12 -> s12 [0, 65535] { R7008 += 1, R6932 += 1 };
  s12 -> s11 [0, 65535];
  s13 -> s13 [0, 70] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s13 -> s10 [0, 65535] { R7008 += 1 };
  s13 -> s14 [0, 65535] { R7008 += 1, R6932 += 1 };
  s13 -> s13 [0, 65535] { R7008 += 1, R6932 += 1, R6888 += 1 };
  s13 -> s11 [0, 65535];
  s13 -> s13 [73, 65535] { R7008 += 1, R6932 += 1, R6888 += 1, R6644 += 1 };
  s14 -> s10 [0, 65535] { R7008 += 1 };
  s14 -> s14 [0, 65535] { R7008 += 1, R6932 += 1 };
  s14 -> s11 [0, 65535];
  accepting s12, s13, s9, s14, s10, s11;
};
automaton value2_43 {
  init s0;
  s0 -> s1 [0, 65] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s2 [0, 65535] { R7010 += 1, R6933 += 1, R6934 += 1 };
  s0 -> s0 [0, 65535] { R7009 += 1, R7010 += 1 };
  s0 -> s3 [0, 65535] { R7010 += 1, R6934 += 1, R6889 += 1, R6890 += 1 };
  s0 -> s4 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s5 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s0 -> s1 [67, 65535] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s1 [0, 65] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s6 [0, 65535] { R7010 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R7010 += 1, R6934 += 1 };
  s1 -> s4 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s5 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s1 -> s1 [67, 65535] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s1 [0, 65] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s2 [0, 65535] { R7010 += 1, R6933 += 1, R6934 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s3 [0, 65535] { R7010 += 1, R6934 += 1, R6889 += 1, R6890 += 1 };
  s2 -> s4 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s5 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s2 -> s1 [67, 65535] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s1 [0, 65] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s6 [0, 65535] { R7010 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s3 [0, 65535] { R7010 += 1, R6934 += 1, R6889 += 1, R6890 += 1 };
  s3 -> s4 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s5 [66, 66] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s3 -> s1 [67, 65535] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s4 -> s4 [0, 65535] { R7010 += 1, R6934 += 1 };
  s4 -> s6 [0, 65535] { R7010 += 1 };
  s4 -> s7 [0, 65535];
  s5 -> s6 [0, 65535] { R7010 += 1 };
  s5 -> s7 [0, 65535];
  s5 -> s5 [0, 65535] { R7010 += 1, R6934 += 1, R6890 += 1, R6647 += 1, R6648 += 1 };
  s5 -> s8 [0, 65535] { R7010 += 1, R6934 += 1 };
  s6 -> s6 [0, 65535] { R7010 += 1 };
  s6 -> s7 [0, 65535];
  s7 -> s7 [0, 65535];
  s8 -> s6 [0, 65535] { R7010 += 1 };
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R7010 += 1, R6934 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_44 {
  init s0;
  s0 -> s1 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s0 -> s2 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s0 -> s0 [0, 65535] { R7011 += 1, R7012 += 1 };
  s0 -> s3 [0, 65535] { R7012 += 1, R6936 += 1, R6891 += 1, R6892 += 1 };
  s0 -> s4 [0, 65535] { R7012 += 1, R6935 += 1, R6936 += 1 };
  s0 -> s5 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s0 -> s6 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s0 -> s7 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s0 -> s8 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s0 -> s1 [67, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s0 -> s2 [67, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s0 -> s1 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s1 -> s1 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s1 -> s1 [0, 65535] { R7012 += 1, R6936 += 1 };
  s1 -> s9 [0, 65535];
  s1 -> s11 [0, 65535] { R7012 += 1 };
  s1 -> s5 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1 };
  s1 -> s6 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1 };
  s1 -> s1 [67, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s1 -> s1 [67, 65535] { R7012 += 1, R6936 += 1, R6892 += 1 };
  s1 -> s1 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s2 -> s1 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s2 -> s2 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s2 -> s5 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s2 -> s6 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s2 -> s7 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s2 -> s8 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s2 -> s1 [67, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s2 -> s2 [67, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s2 -> s1 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s3 -> s1 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s3 -> s2 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s3 -> s3 [0, 65535] { R7012 += 1, R6936 += 1, R6891 += 1, R6892 += 1 };
  s3 -> s5 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s3 -> s6 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s3 -> s7 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s3 -> s8 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s3 -> s1 [67, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s3 -> s2 [67, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s3 -> s1 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s4 -> s1 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s4 -> s2 [0, 65] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s4 -> s3 [0, 65535] { R7012 += 1, R6936 += 1, R6891 += 1, R6892 += 1 };
  s4 -> s4 [0, 65535] { R7012 += 1, R6935 += 1, R6936 += 1 };
  s4 -> s5 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s4 -> s6 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s4 -> s7 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s4 -> s8 [66, 66] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s4 -> s1 [67, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s4 -> s2 [67, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s4 -> s1 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s5 -> s5 [0, 65535] { R7012 += 1, R6936 += 1 };
  s5 -> s9 [0, 65535];
  s5 -> s11 [0, 65535] { R7012 += 1 };
  s6 -> s6 [0, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s6 -> s6 [0, 65535] { R7012 += 1, R6936 += 1, R6892 += 1 };
  s6 -> s9 [0, 65535];
  s6 -> s10 [0, 65535] { R7012 += 1, R6936 += 1 };
  s6 -> s11 [0, 65535] { R7012 += 1 };
  s6 -> s6 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s7 -> s6 [0, 69] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s7 -> s7 [0, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6833 += 1, R6834 += 1 };
  s7 -> s6 [74, 65535] { R7012 += 1, R6936 += 1, R6892 += 1, R6834 += 1 };
  s9 -> s9 [0, 65535];
  s10 -> s9 [0, 65535];
  s10 -> s10 [0, 65535] { R7012 += 1, R6936 += 1 };
  s10 -> s11 [0, 65535] { R7012 += 1 };
  s11 -> s9 [0, 65535];
  s11 -> s11 [0, 65535] { R7012 += 1 };
  accepting s5, s9, s6, s1, s10, s11;
};
};
synchronised {  // Automata constraining P37
automaton P37_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P38
automaton P38_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P36
automaton P36_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
constraint R2 = R6936 && R3 - R7012 = 1 && R23 - R6936 = -1 && R24 = R6936 && R25 - R6936 = -1 && R26 = R6936 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = R7012 && R32 - R7012 = 1 && R33 = R7012 && R34 - R7012 = 1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R49 + R78 + R77 + -1*R6646 + -1*R6644 - R64 = 0 && R63 + R6645 + R6643 = 0 && R6877 = 0 && R6878 = 0 && R6885 = 0 && R6886 = 0 && R6887 = 0 && R6888 = 0 && R6891 = 0 && R6892 = 0 && R6893 = 0 && R6894 = R6936 && R6895 = 0 && R6896 = R6936 && R6897 = 0 && R6898 = R6936 && R6899 = 0 && R6900 = R6936 && R6901 = 0 && R6902 = R6936 && R6903 = 0 && R6904 = R6936 && R6905 = 0 && R6906 = R6936 && R6907 = 0 && R6908 = R6936 && R6909 = 0 && R6910 = R6936 && R6911 = 0 && R6912 = R6936 && R6913 = 0 && R6914 = R6936 && R6915 = 0 && R6916 = R6936 && R6917 = 0 && R6918 = R6936 && R6919 = 0 && R6920 = R6936 && R6921 = 0 && R6922 = R6936 && R6923 = 0 && R6924 = R6936 && R6925 = 0 && R6926 = R6936 && R6927 = 0 && R6928 = R6936 && R6929 = 0 && R6930 = R6936 && R6931 = 0 && R6932 = R6936 && R6933 = 0 && R6934 = R6936 && R6935 = 0 && R6937 = 0 && R6938 = R7012 && R6939 = 0 && R6940 = R7012 && R6941 = 0 && R6942 = R7012 && R6943 = 0 && R6944 = R7012 && R6945 = 0 && R6946 = R7012 && R6947 = 0 && R6948 = R7012 && R6949 = 0 && R6950 = R7012 && R6951 = 0 && R6952 = R7012 && R6953 = 0 && R6954 = R7012 && R6955 = 0 && R6956 = R7012 && R6957 = 0 && R6958 = R7012 && R6959 = 0 && R6960 = R7012 && R6961 = 0 && R6962 = R7012 && R6963 = 0 && R6964 = R7012 && R6965 = 0 && R6966 = R7012 && R6967 = 0 && R6968 = R7012 && R6969 = 0 && R6970 = R7012 && R6971 = 0 && R6972 = R7012 && R6973 = 0 && R6974 = R7012 && R6975 = 0 && R6976 = R7012 && R6977 = 0 && R6978 = R7012 && R6979 = 0 && R6980 = R7012 && R6981 = 0 && R6982 = R7012 && R6983 = 0 && R6984 = R7012 && R6985 = 0 && R6986 = R7012 && R6987 = 0 && R6988 = R7012 && R6989 = 0 && R6990 = R7012 && R6991 = 0 && R6992 = R7012 && R6993 = 0 && R6994 = R7012 && R6995 = 0 && R6996 = R7012 && R6997 = 0 && R6998 = R7012 && R6999 = 0 && R7000 = R7012 && R7001 = 0 && R7002 = R7012 && R7003 = 0 && R7004 = R7012 && R7005 = 0 && R7006 = R7012 && R7007 = 0 && R7008 = R7012 && R7009 = 0 && R7010 = R7012 && R7011 = 0 && -1 < R1 && R11 < 1 && R14 < 1 && R17 < 1 && R51 + R80 + R79 < 1 && -1*R6646 + -1*R6644 - R64 < 1 && 0 < R6936 && -1 < R7012 && (R1 != 0 || R20 = 0 || (R6837 = 0 && R6838 = 0)) && (R1 != 0 || R20 = 0 || (R6839 = 0 && R6840 = 0)) && (R1 != 0 || R20 = 0 || (R6841 = 0 && R6842 = 0)) && (R1 != 0 || R20 = 0 || (R6843 = 0 && R6844 = 0)) && (R1 != 0 || R20 = 0 || (R6845 = 0 && R6846 = 0)) && (R1 != 0 || R20 = 0 || (R6847 = 0 && R6848 = 0)) && (R1 != 0 || R20 = 0 || (R6849 = 0 && R6850 = 0)) && (R1 != 0 || R20 = 0 || (R6851 = 0 && R6852 = 0)) && (R1 != 0 || R20 = 0 || (R6853 = 0 && R6854 = 0)) && (R1 != 0 || R20 = 0 || (R6855 = 0 && R6856 = 0)) && (R59 + R6642 + R6639 != 0 || ((R53 + R83 + R81 != 0 || R54 + R84 + R82 + -1*R6646 + -1*R6644 - R64 = 0 || R64 + R6646 + R6644 < 1) && (R53 + R83 + R81 = 0 || R64 + R6646 + R6644 < 1))) && (R59 + R6642 + R6639 != 0 || ((R57 + R6640 + R6637 != 0 || R58 + R6641 + R6638 + -1*R6646 + -1*R6644 - R64 = 0 || R64 + R6646 + R6644 < 1) && (R57 + R6640 + R6637 = 0 || R64 + R6646 + R6644 < 1))) && (R6837 != 0 || R1 = R6838 || R1 < 1) && (R6839 != 0 || R1 = R6840 || R1 < 1) && (R6841 != 0 || R1 = R6842 || R1 < 1) && (R6843 != 0 || R1 = R6844 || R1 < 1) && (R6845 != 0 || R1 = R6846 || R1 < 1) && (R6847 != 0 || R1 = R6848 || R1 < 1) && (R6849 != 0 || R1 = R6850 || R1 < 1) && (R6851 != 0 || R1 = R6852 || R1 < 1) && (R6853 != 0 || R1 = R6854 || R1 < 1) && (R6855 != 0 || R1 = R6856 || R1 < 1) && (R21 = 0 || (R6875 = 0 && R6876 = 0)) && (R21 = 0 || (R6879 = 0 && R6880 = 0)) && (R21 = 0 || (R6881 = 0 && R6882 = 0)) && (R21 = 0 || (R6883 = 0 && R6884 = 0)) && (R21 = 0 || (R6889 = 0 && R6890 = 0)) && (R22 = 0 || (R6857 = 0 && R6858 = 0)) && (R22 = 0 || (R6859 = 0 && R6860 = 0)) && (R22 = 0 || (R6861 = 0 && R6862 = 0)) && (R22 = 0 || (R6863 = 0 && R6864 = 0)) && (R22 = 0 || (R6865 = 0 && R6866 = 0)) && (R22 = 0 || (R6867 = 0 && R6868 = 0)) && (R22 = 0 || (R6869 = 0 && R6870 = 0)) && (R22 = 0 || (R6871 = 0 && R6872 = 0)) && (R22 = 0 || (R6873 = 0 && R6874 = 0)) && (R59 + R6642 + R6639 = 0 || (R53 + R83 + R81 = 0 && R54 + R84 + R82 + -1*R6646 + -1*R6644 - R64 = 0)) && (R59 + R6642 + R6639 = 0 || (R57 + R6640 + R6637 = 0 && R58 + R6641 + R6638 + -1*R6646 + -1*R6644 - R64 = 0)) && (R69 + R6652 + R6649 = 0 || (R67 + R6650 + R6647 = 0 && R68 + R6651 + R6648 = 0)) && (R69 + R6652 + R6649 = 0 || (R73 + R6835 + R6833 = 0 && R74 + R6836 + R6834 = 0)) && (R6837 = 0 || R1 < 1) && (R6839 = 0 || R1 < 1) && (R6841 = 0 || R1 < 1) && (R6843 = 0 || R1 < 1) && (R6845 = 0 || R1 < 1) && (R6847 = 0 || R1 < 1) && (R6849 = 0 || R1 < 1) && (R6851 = 0 || R1 < 1) && (R6853 = 0 || R1 < 1) && (R6855 = 0 || R1 < 1);
// End of Parikh automata intersection problem
