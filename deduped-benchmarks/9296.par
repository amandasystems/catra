// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R5, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R6, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R7, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96;
synchronised {  // Automata constraining P23
automaton P23_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P25
automaton P25_0 {
  init s0;
  s0 -> s1 [13, 13];
  accepting s1;
};
};
synchronised {  // Automata constraining P24
automaton P24_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R3 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R10 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s1 [12, 12] { R32 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R34 += 1, R9 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R69 += 1, R70 += 1 };
  s0 -> s1 [0, 65535] { R70 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R70 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R71 += 1, R72 += 1 };
  s0 -> s1 [0, 65535] { R72 += 1, R27 += 1, R28 += 1 };
  s0 -> s2 [11, 11] { R72 += 1, R28 += 1 };
  s1 -> s1 [0, 65535] { R72 += 1, R27 += 1, R28 += 1 };
  s1 -> s2 [11, 11] { R72 += 1, R28 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R72 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R74 += 1, R30 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R73 += 1, R74 += 1 };
  s0 -> s2 [0, 65535] { R74 += 1, R29 += 1, R30 += 1 };
  s1 -> s1 [0, 65535] { R74 += 1, R30 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R74 += 1 };
  s2 -> s1 [0, 65535] { R74 += 1, R30 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R74 += 1, R29 += 1, R30 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R74 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R76 += 1, R48 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R75 += 1, R76 += 1 };
  s0 -> s2 [0, 65535] { R76 += 1, R47 += 1, R48 += 1 };
  s1 -> s1 [0, 65535] { R76 += 1, R48 += 1, R1 += 1 };
  s1 -> s4 [0, 65535] { R76 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R76 += 1, R48 += 1, R1 += 1 };
  s2 -> s2 [0, 65535] { R76 += 1, R47 += 1, R48 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R76 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R77 += 1, R78 += 1 };
  s0 -> s1 [0, 65535] { R78 += 1, R49 += 1, R50 += 1 };
  s0 -> s2 [0, 65535] { R78 += 1, R50 += 1, R19 += 1, R20 += 1 };
  s0 -> s3 [32, 32] { R78 += 1, R50 += 1, R20 += 1 };
  s1 -> s1 [0, 65535] { R78 += 1, R49 += 1, R50 += 1 };
  s1 -> s2 [0, 65535] { R78 += 1, R50 += 1, R19 += 1, R20 += 1 };
  s1 -> s3 [32, 32] { R78 += 1, R50 += 1, R20 += 1 };
  s2 -> s2 [0, 65535] { R78 += 1, R50 += 1, R19 += 1, R20 += 1 };
  s2 -> s3 [32, 32] { R78 += 1, R50 += 1, R20 += 1 };
  s3 -> s4 [0, 65535] { R78 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R78 += 1, R50 += 1 };
  s4 -> s4 [0, 65535] { R78 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R80 += 1, R51 += 1, R52 += 1 };
  s0 -> s2 [0, 65535] { R80 += 1, R52 += 1, R22 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R80 += 1, R52 += 1, R21 += 1, R22 += 1 };
  s0 -> s0 [0, 65535] { R79 += 1, R80 += 1 };
  s1 -> s1 [0, 65535] { R80 += 1, R51 += 1, R52 += 1 };
  s1 -> s2 [0, 65535] { R80 += 1, R52 += 1, R22 += 1, R6 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s3 [0, 65535] { R80 += 1, R52 += 1, R21 += 1, R22 += 1 };
  s2 -> s2 [0, 65535] { R80 += 1, R52 += 1, R22 += 1, R6 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R80 += 1 };
  s2 -> s6 [0, 65535] { R80 += 1, R52 += 1 };
  s3 -> s2 [0, 65535] { R80 += 1, R52 += 1, R22 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R80 += 1 };
  s3 -> s3 [0, 65535] { R80 += 1, R52 += 1, R21 += 1, R22 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R80 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R80 += 1 };
  s6 -> s6 [0, 65535] { R80 += 1, R52 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R82 += 1, R54 += 1, R24 += 1 };
  s0 -> s2 [0, 65535] { R82 += 1, R54 += 1, R23 += 1, R24 += 1 };
  s0 -> s0 [0, 65535] { R81 += 1, R82 += 1 };
  s0 -> s3 [0, 65535] { R82 += 1, R53 += 1, R54 += 1 };
  s0 -> s4 [9, 13] { R82 += 1, R54 += 1, R24 += 1 };
  s0 -> s1 [14, 31] { R82 += 1, R54 += 1, R24 += 1 };
  s0 -> s4 [32, 32] { R82 += 1, R54 += 1, R24 += 1 };
  s0 -> s1 [33, 65535] { R82 += 1, R54 += 1, R24 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R82 += 1, R54 += 1 };
  s1 -> s6 [0, 65535] { R82 += 1 };
  s1 -> s1 [0, 65535] { R82 += 1, R54 += 1, R24 += 1 };
  s2 -> s1 [0, 8] { R82 += 1, R54 += 1, R24 += 1 };
  s2 -> s2 [0, 65535] { R82 += 1, R54 += 1, R23 += 1, R24 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R82 += 1 };
  s2 -> s4 [9, 13] { R82 += 1, R54 += 1, R24 += 1 };
  s2 -> s1 [14, 31] { R82 += 1, R54 += 1, R24 += 1 };
  s2 -> s4 [32, 32] { R82 += 1, R54 += 1, R24 += 1 };
  s2 -> s1 [33, 65535] { R82 += 1, R54 += 1, R24 += 1 };
  s3 -> s1 [0, 8] { R82 += 1, R54 += 1, R24 += 1 };
  s3 -> s2 [0, 65535] { R82 += 1, R54 += 1, R23 += 1, R24 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R82 += 1, R53 += 1, R54 += 1 };
  s3 -> s4 [9, 13] { R82 += 1, R54 += 1, R24 += 1 };
  s3 -> s1 [14, 31] { R82 += 1, R54 += 1, R24 += 1 };
  s3 -> s4 [32, 32] { R82 += 1, R54 += 1, R24 += 1 };
  s3 -> s1 [33, 65535] { R82 += 1, R54 += 1, R24 += 1 };
  s4 -> s1 [0, 65535] { R82 += 1, R54 += 1, R24 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R82 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R82 += 1, R54 += 1 };
  s7 -> s6 [0, 65535] { R82 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R84 += 1, R56 += 1, R25 += 1, R26 += 1 };
  s0 -> s2 [0, 65535] { R84 += 1, R56 += 1, R26 += 1, R7 += 1 };
  s0 -> s3 [0, 65535] { R84 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R83 += 1, R84 += 1 };
  s1 -> s1 [0, 65535] { R84 += 1, R56 += 1, R25 += 1, R26 += 1 };
  s1 -> s2 [0, 65535] { R84 += 1, R56 += 1, R26 += 1, R7 += 1 };
  s1 -> s6 [0, 65535] { R84 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R84 += 1, R56 += 1, R26 += 1, R7 += 1 };
  s2 -> s5 [0, 65535] { R84 += 1, R56 += 1 };
  s2 -> s6 [0, 65535] { R84 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R84 += 1, R56 += 1, R25 += 1, R26 += 1 };
  s3 -> s2 [0, 65535] { R84 += 1, R56 += 1, R26 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R84 += 1, R55 += 1, R56 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R84 += 1, R56 += 1 };
  s5 -> s6 [0, 65535] { R84 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R84 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 64] { R86 += 1, R58 += 1, R36 += 1 };
  s0 -> s2 [0, 65535] { R86 += 1, R57 += 1, R58 += 1 };
  s0 -> s3 [0, 65535] { R86 += 1, R58 += 1, R35 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R85 += 1, R86 += 1 };
  s0 -> s4 [83, 83] { R86 += 1, R58 += 1, R36 += 1 };
  s0 -> s1 [84, 65535] { R86 += 1, R58 += 1, R36 += 1 };
  s1 -> s1 [0, 64] { R86 += 1, R58 += 1, R36 += 1 };
  s1 -> s4 [83, 83] { R86 += 1, R58 += 1, R36 += 1 };
  s1 -> s1 [84, 65535] { R86 += 1, R58 += 1, R36 += 1 };
  s2 -> s1 [0, 64] { R86 += 1, R58 += 1, R36 += 1 };
  s2 -> s2 [0, 65535] { R86 += 1, R57 += 1, R58 += 1 };
  s2 -> s3 [0, 65535] { R86 += 1, R58 += 1, R35 += 1, R36 += 1 };
  s2 -> s4 [83, 83] { R86 += 1, R58 += 1, R36 += 1 };
  s2 -> s1 [84, 65535] { R86 += 1, R58 += 1, R36 += 1 };
  s3 -> s1 [0, 64] { R86 += 1, R58 += 1, R36 += 1 };
  s3 -> s3 [0, 65535] { R86 += 1, R58 += 1, R35 += 1, R36 += 1 };
  s3 -> s4 [83, 83] { R86 += 1, R58 += 1, R36 += 1 };
  s3 -> s1 [84, 65535] { R86 += 1, R58 += 1, R36 += 1 };
  s4 -> s4 [0, 64] { R86 += 1, R58 += 1, R36 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R86 += 1 };
  s4 -> s4 [0, 65535] { R86 += 1, R58 += 1 };
  s4 -> s4 [83, 65535] { R86 += 1, R58 += 1, R36 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R86 += 1 };
  accepting s4, s5, s6;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 65535] { R88 += 1, R60 += 1, R38 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R87 += 1, R88 += 1 };
  s0 -> s2 [0, 65535] { R88 += 1, R60 += 1, R37 += 1, R38 += 1 };
  s0 -> s3 [0, 65535] { R88 += 1, R59 += 1, R60 += 1 };
  s1 -> s1 [0, 65535] { R88 += 1, R60 += 1, R38 += 1, R0 += 1 };
  s1 -> s5 [0, 65535] { R88 += 1 };
  s1 -> s6 [0, 65535] { R88 += 1, R60 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R88 += 1, R60 += 1, R38 += 1, R0 += 1 };
  s2 -> s5 [0, 65535] { R88 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R88 += 1, R60 += 1, R37 += 1, R38 += 1 };
  s3 -> s1 [0, 65535] { R88 += 1, R60 += 1, R38 += 1, R0 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R88 += 1, R60 += 1, R37 += 1, R38 += 1 };
  s3 -> s3 [0, 65535] { R88 += 1, R59 += 1, R60 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R88 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s5 [0, 65535] { R88 += 1 };
  s6 -> s6 [0, 65535] { R88 += 1, R60 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 8] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R89 += 1, R90 += 1 };
  s0 -> s2 [0, 65535] { R90 += 1, R62 += 1, R39 += 1, R40 += 1 };
  s0 -> s3 [0, 65535] { R90 += 1, R62 += 1, R40 += 1, R11 += 1, R12 += 1 };
  s0 -> s4 [0, 65535] { R90 += 1, R61 += 1, R62 += 1 };
  s0 -> s5 [9, 13] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s0 -> s1 [14, 31] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s0 -> s5 [32, 32] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s0 -> s1 [33, 65535] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s1 -> s1 [0, 65535] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s7 [0, 65535] { R90 += 1 };
  s1 -> s9 [0, 65535] { R90 += 1, R62 += 1, R40 += 1 };
  s1 -> s8 [0, 65535] { R90 += 1, R62 += 1 };
  s2 -> s1 [0, 8] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s2 -> s2 [0, 65535] { R90 += 1, R62 += 1, R39 += 1, R40 += 1 };
  s2 -> s3 [0, 65535] { R90 += 1, R62 += 1, R40 += 1, R11 += 1, R12 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s7 [0, 65535] { R90 += 1 };
  s2 -> s5 [9, 13] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s2 -> s1 [14, 31] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s2 -> s5 [32, 32] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s2 -> s1 [33, 65535] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s3 -> s1 [0, 8] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R90 += 1, R62 += 1, R40 += 1, R11 += 1, R12 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s7 [0, 65535] { R90 += 1 };
  s3 -> s8 [0, 65535] { R90 += 1, R62 += 1 };
  s3 -> s5 [9, 13] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s3 -> s1 [14, 31] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s3 -> s5 [32, 32] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s3 -> s1 [33, 65535] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s4 -> s1 [0, 8] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s4 -> s2 [0, 65535] { R90 += 1, R62 += 1, R39 += 1, R40 += 1 };
  s4 -> s3 [0, 65535] { R90 += 1, R62 += 1, R40 += 1, R11 += 1, R12 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s4 [0, 65535] { R90 += 1, R61 += 1, R62 += 1 };
  s4 -> s5 [9, 13] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s4 -> s1 [14, 31] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s4 -> s5 [32, 32] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s4 -> s1 [33, 65535] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s5 -> s1 [0, 65535] { R90 += 1, R62 += 1, R40 += 1, R12 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R90 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R90 += 1 };
  s8 -> s8 [0, 65535] { R90 += 1, R62 += 1 };
  s9 -> s6 [0, 65535];
  s9 -> s7 [0, 65535] { R90 += 1 };
  s9 -> s9 [0, 65535] { R90 += 1, R62 += 1, R40 += 1 };
  s9 -> s8 [0, 65535] { R90 += 1, R62 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R14 += 1, R4 += 1 };
  s0 -> s2 [0, 65535] { R92 += 1, R63 += 1, R64 += 1 };
  s0 -> s0 [0, 65535] { R91 += 1, R92 += 1 };
  s0 -> s3 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R13 += 1, R14 += 1 };
  s0 -> s4 [0, 65535] { R92 += 1, R64 += 1, R41 += 1, R42 += 1 };
  s1 -> s7 [0, 65535] { R92 += 1, R64 += 1 };
  s1 -> s5 [0, 65535] { R92 += 1 };
  s1 -> s1 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R14 += 1, R4 += 1 };
  s1 -> s8 [0, 65535] { R92 += 1, R64 += 1, R42 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R14 += 1, R4 += 1 };
  s2 -> s2 [0, 65535] { R92 += 1, R63 += 1, R64 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s3 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R13 += 1, R14 += 1 };
  s2 -> s4 [0, 65535] { R92 += 1, R64 += 1, R41 += 1, R42 += 1 };
  s3 -> s7 [0, 65535] { R92 += 1, R64 += 1 };
  s3 -> s5 [0, 65535] { R92 += 1 };
  s3 -> s1 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R14 += 1, R4 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R13 += 1, R14 += 1 };
  s4 -> s5 [0, 65535] { R92 += 1 };
  s4 -> s1 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R14 += 1, R4 += 1 };
  s4 -> s6 [0, 65535];
  s4 -> s3 [0, 65535] { R92 += 1, R64 += 1, R42 += 1, R13 += 1, R14 += 1 };
  s4 -> s4 [0, 65535] { R92 += 1, R64 += 1, R41 += 1, R42 += 1 };
  s5 -> s5 [0, 65535] { R92 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R92 += 1, R64 += 1 };
  s7 -> s5 [0, 65535] { R92 += 1 };
  s7 -> s6 [0, 65535];
  s8 -> s7 [0, 65535] { R92 += 1, R64 += 1 };
  s8 -> s5 [0, 65535] { R92 += 1 };
  s8 -> s8 [0, 65535] { R92 += 1, R64 += 1, R42 += 1 };
  s8 -> s6 [0, 65535];
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 8] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s0 -> s2 [0, 65535] { R94 += 1, R65 += 1, R66 += 1 };
  s0 -> s3 [0, 65535] { R94 += 1, R66 += 1, R43 += 1, R44 += 1 };
  s0 -> s0 [0, 65535] { R93 += 1, R94 += 1 };
  s0 -> s4 [0, 65535] { R94 += 1, R66 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s0 -> s5 [9, 13] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s0 -> s1 [14, 31] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s0 -> s5 [32, 32] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s0 -> s1 [33, 65535] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s1 -> s6 [0, 65535] { R94 += 1, R66 += 1 };
  s1 -> s7 [0, 65535];
  s1 -> s1 [0, 65535] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s1 -> s8 [0, 65535] { R94 += 1 };
  s1 -> s9 [0, 65535] { R94 += 1, R66 += 1, R44 += 1 };
  s2 -> s1 [0, 8] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s2 -> s2 [0, 65535] { R94 += 1, R65 += 1, R66 += 1 };
  s2 -> s3 [0, 65535] { R94 += 1, R66 += 1, R43 += 1, R44 += 1 };
  s2 -> s7 [0, 65535];
  s2 -> s4 [0, 65535] { R94 += 1, R66 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s2 -> s5 [9, 13] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s2 -> s1 [14, 31] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s2 -> s5 [32, 32] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s2 -> s1 [33, 65535] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s3 -> s1 [0, 8] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s3 -> s3 [0, 65535] { R94 += 1, R66 += 1, R43 += 1, R44 += 1 };
  s3 -> s7 [0, 65535];
  s3 -> s4 [0, 65535] { R94 += 1, R66 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s3 -> s8 [0, 65535] { R94 += 1 };
  s3 -> s5 [9, 13] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s3 -> s1 [14, 31] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s3 -> s5 [32, 32] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s3 -> s1 [33, 65535] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s4 -> s1 [0, 8] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s4 -> s6 [0, 65535] { R94 += 1, R66 += 1 };
  s4 -> s7 [0, 65535];
  s4 -> s4 [0, 65535] { R94 += 1, R66 += 1, R44 += 1, R15 += 1, R16 += 1 };
  s4 -> s8 [0, 65535] { R94 += 1 };
  s4 -> s5 [9, 13] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s4 -> s1 [14, 31] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s4 -> s5 [32, 32] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s4 -> s1 [33, 65535] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s5 -> s1 [0, 65535] { R94 += 1, R66 += 1, R44 += 1, R16 += 1 };
  s6 -> s6 [0, 65535] { R94 += 1, R66 += 1 };
  s6 -> s7 [0, 65535];
  s6 -> s8 [0, 65535] { R94 += 1 };
  s7 -> s7 [0, 65535];
  s8 -> s7 [0, 65535];
  s8 -> s8 [0, 65535] { R94 += 1 };
  s9 -> s6 [0, 65535] { R94 += 1, R66 += 1 };
  s9 -> s7 [0, 65535];
  s9 -> s8 [0, 65535] { R94 += 1 };
  s9 -> s9 [0, 65535] { R94 += 1, R66 += 1, R44 += 1 };
  accepting s3, s4, s8, s2, s9, s6, s1, s7, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R17 += 1, R18 += 1 };
  s0 -> s2 [0, 65535] { R96 += 1, R67 += 1, R68 += 1 };
  s0 -> s0 [0, 65535] { R95 += 1, R96 += 1 };
  s0 -> s3 [0, 65535] { R96 += 1, R68 += 1, R45 += 1, R46 += 1 };
  s0 -> s4 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R18 += 1, R5 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R96 += 1, R68 += 1 };
  s1 -> s1 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R17 += 1, R18 += 1 };
  s1 -> s8 [0, 65535] { R96 += 1 };
  s1 -> s4 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R18 += 1, R5 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s1 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R17 += 1, R18 += 1 };
  s2 -> s2 [0, 65535] { R96 += 1, R67 += 1, R68 += 1 };
  s2 -> s3 [0, 65535] { R96 += 1, R68 += 1, R45 += 1, R46 += 1 };
  s2 -> s4 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R18 += 1, R5 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s1 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R17 += 1, R18 += 1 };
  s3 -> s3 [0, 65535] { R96 += 1, R68 += 1, R45 += 1, R46 += 1 };
  s3 -> s8 [0, 65535] { R96 += 1 };
  s3 -> s4 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R18 += 1, R5 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R96 += 1, R68 += 1, R46 += 1 };
  s4 -> s7 [0, 65535] { R96 += 1, R68 += 1 };
  s4 -> s8 [0, 65535] { R96 += 1 };
  s4 -> s4 [0, 65535] { R96 += 1, R68 += 1, R46 += 1, R18 += 1, R5 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R96 += 1, R68 += 1, R46 += 1 };
  s6 -> s7 [0, 65535] { R96 += 1, R68 += 1 };
  s6 -> s8 [0, 65535] { R96 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R96 += 1, R68 += 1 };
  s7 -> s8 [0, 65535] { R96 += 1 };
  s8 -> s5 [0, 65535];
  s8 -> s8 [0, 65535] { R96 += 1 };
  accepting s3, s4, s8, s5, s2, s6, s1, s7, s0;
};
};
constraint R1 - R46 = 1 && R2 = R68 && R3 = R96 && R19 = R46 && R20 - R46 = 1 && R21 = R46 && R22 - R46 = 1 && R23 = 0 && R24 = 1 && R25 = 0 && R26 = 1 && R27 = 0 && R28 = 1 && R29 = 0 && R30 = 1 && R31 = 0 && R32 = 1 && R33 = 0 && R34 = 1 && R35 = 0 && R36 = R46 && R37 = 0 && R38 = R46 && R39 = 0 && R40 = R46 && R41 = 0 && R42 = R46 && R43 = 0 && R44 = R46 && R45 = 0 && R47 = 1 && R48 = R68 && R49 = 1 && R50 = R68 && R51 = 1 && R52 = R68 && R53 = 1 && R54 = R68 && R55 = 1 && R56 = R68 && R57 = 1 && R58 = R68 && R59 = 1 && R60 = R68 && R61 = 1 && R62 = R68 && R63 = 1 && R64 = R68 && R65 = 1 && R66 = R68 && R67 = 1 && R69 = 1 && R70 = R96 && R71 = 1 && R72 = R96 && R73 = 1 && R74 = R96 && R75 = 1 && R76 = R96 && R77 = 1 && R78 = R96 && R79 = 1 && R80 = R96 && R81 = 1 && R82 = R96 && R83 = 1 && R84 = R96 && R85 = 1 && R86 = R96 && R87 = 1 && R88 = R96 && R89 = 1 && R90 = R96 && R91 = 1 && R92 = R96 && R93 = 1 && R94 = R96 && R95 = 1 && R0 != 0 && R10 < 1 && -1 < R46 && 0 < R68 && 0 < R96 && (R4 != 0 || ((R0 != R12 || R11 - R12 = -1 || R12 < 0) && (R0 = R12 || R0 < 1))) && (R4 != 0 || ((R0 != R14 || R13 - R14 = -1 || R14 < 0) && (R0 = R14 || R0 < 1))) && (R15 != 0 || ((R5 != 0 || ((R0 != R16 || R16 = 1 || R16 < 0) && (R0 = R16 || R16 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R16 || R16 = 1 || R16 < 0) && (R16 != 1 || -1 < R0) && (R0 = R16 || R16 = 1))))) && (R17 != 0 || ((R5 != 0 || ((R0 != R18 || R18 = 1 || R18 < 0) && (R0 = R18 || R18 = 1 || R0 < 1))) && (R5 = 0 || ((R0 != R18 || R18 = 1 || R18 < 0) && (R18 != 1 || -1 < R0) && (R0 = R18 || R18 = 1))))) && (R4 = 0 || (R0 = R12 && R11 - R12 = -1)) && (R4 = 0 || (R0 = R14 && R13 - R14 = -1)) && (R15 = 0 || (R5 = 0 && R0 < 0)) && (R17 = 0 || (R5 = 0 && R0 < 0));
// End of Parikh automata intersection problem
