// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R2, R29, R3, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R5, R7, R8;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [79, 79];
  s0 -> s0 [80, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [79, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R5 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 78] { R8 += 1 };
  s0 -> s0 [0, 65535] { R7 += 1, R8 += 1 };
  s0 -> s2 [79, 79];
  s0 -> s1 [80, 65535] { R8 += 1 };
  s1 -> s1 [0, 78] { R8 += 1 };
  s1 -> s2 [79, 79];
  s1 -> s1 [80, 65535] { R8 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R32 += 1 };
  s0 -> s0 [0, 65535] { R31 += 1, R32 += 1 };
  s0 -> s2 [9, 13] { R32 += 1 };
  s0 -> s1 [14, 31] { R32 += 1 };
  s0 -> s2 [32, 32] { R32 += 1 };
  s0 -> s1 [33, 65535] { R32 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R32 += 1 };
  s2 -> s1 [0, 65535] { R32 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R33 += 1, R34 += 1 };
  s0 -> s1 [0, 65535] { R34 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R34 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R36 += 1 };
  s0 -> s0 [0, 65535] { R35 += 1, R36 += 1 };
  s0 -> s2 [9, 13] { R36 += 1 };
  s0 -> s1 [14, 31] { R36 += 1 };
  s0 -> s2 [32, 32] { R36 += 1 };
  s0 -> s1 [33, 65535] { R36 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R36 += 1 };
  s2 -> s1 [0, 65535] { R36 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s0 [0, 65535] { R37 += 1, R38 += 1 };
  s0 -> s1 [0, 65535] { R38 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R38 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 78] { R40 += 1 };
  s0 -> s0 [0, 65535] { R39 += 1, R40 += 1 };
  s0 -> s1 [80, 65535] { R40 += 1 };
  s1 -> s1 [0, 78] { R40 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [80, 65535] { R40 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R41 += 1, R42 += 1 };
  s0 -> s1 [0, 65535] { R42 += 1, R29 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R42 += 1, R29 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 79] { R44 += 1 };
  s0 -> s0 [0, 65535] { R43 += 1, R44 += 1 };
  s0 -> s1 [91, 65535] { R44 += 1 };
  s1 -> s1 [0, 79] { R44 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R44 += 1 };
  accepting s0, s1;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R46 += 1, R30 += 1 };
  s0 -> s0 [0, 65535] { R45 += 1, R46 += 1 };
  s1 -> s1 [0, 65535] { R46 += 1, R30 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 78] { R48 += 1 };
  s0 -> s0 [0, 65535] { R47 += 1, R48 += 1 };
  s0 -> s2 [79, 79] { R48 += 1 };
  s0 -> s3 [79, 79] { R48 += 1 };
  s0 -> s1 [91, 65535] { R48 += 1 };
  s1 -> s1 [0, 78] { R48 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [79, 79] { R48 += 1 };
  s1 -> s3 [79, 79] { R48 += 1 };
  s1 -> s1 [91, 65535] { R48 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 79] { R48 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [91, 65535] { R48 += 1 };
  accepting s0, s1, s2, s3;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R4 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
};
synchronised {  // Automata constraining c0
automaton c0_0 {
  init s0;
  s0 -> s1 [111, 111];
  accepting s1;
};
};
constraint R1 = R34 && R7 = 0 && R31 - R34 = -1 && R32 = R34 && R33 - R34 = -1 && R35 = 0 && R36 = 1 && R37 = 0 && R38 = 1 && R0 != 0 && R4 < 1 && R5 < 1 && R8 < R34 && -2 < R8 && 0 < R34 && (R30 != 0 || ((R45 != 0 || ((R47 != 0 || ((R46 != R48 || R8 - R48 = -1 || R8 < 0) && (R46 = R48 || R8 < 0))) && (R47 = 0 || R8 < 0))) && (R45 = 0 || R8 < 0))) && (R34 != R40 || R8 - R39 = -1 || ((R29 != 0 || R40 - R8 < 2) && (R29 = 0 || R40 - R8 < 1 || R40 < 1))) && (R34 != R42 || R8 - R41 = -1 || ((R29 != 0 || R42 - R8 < 2) && (R29 = 0 || R42 - R8 < 1 || R42 < 1))) && (R34 != R44 || R8 - R43 = -1 || ((R29 != 0 || R44 - R8 < 2) && (R29 = 0 || R44 - R8 < 1 || R44 < 1))) && (R30 = 0 || (R8 - R48 = -1 && R45 = 0 && R46 = R48 && R47 = 0)) && (R34 = R40 || (R8 - R34 = -1 && R29 = 0)) && (R34 = R42 || (R8 - R34 = -1 && R29 = 0)) && (R34 = R44 || (R8 - R34 = -1 && R29 = 0));
// End of Parikh automata intersection problem
