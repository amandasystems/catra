// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R2, R3, R4, R5, R7, R8, R96, R97, R98, R99;
synchronised {  // Automata constraining P43
automaton P43_0 {
  init s0;
  s0 -> s1 [107, 107];
  accepting s1;
};
};
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R1 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R96 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R107 += 1, R108 += 1 };
  s0 -> s1 [32, 32] { R108 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R110 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R109 += 1, R110 += 1 };
  s1 -> s1 [0, 65535] { R110 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R112 += 1 };
  s0 -> s0 [0, 65535] { R111 += 1, R112 += 1 };
  s0 -> s2 [9, 13] { R112 += 1 };
  s0 -> s1 [14, 31] { R112 += 1 };
  s0 -> s2 [32, 32] { R112 += 1 };
  s0 -> s1 [33, 65535] { R112 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R112 += 1 };
  s2 -> s1 [0, 65535] { R112 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R113 += 1, R114 += 1 };
  s0 -> s1 [0, 65535] { R114 += 1, R5 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R114 += 1, R5 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R126 += 1 };
  s0 -> s0 [0, 65535] { R125 += 1, R126 += 1 };
  s0 -> s2 [75, 75] { R126 += 1 };
  s0 -> s1 [76, 65535] { R126 += 1 };
  s1 -> s1 [0, 64] { R126 += 1 };
  s1 -> s2 [75, 75] { R126 += 1 };
  s1 -> s1 [76, 65535] { R126 += 1 };
  s2 -> s2 [0, 64] { R126 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [75, 65535] { R126 += 1 };
  accepting s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R128 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R127 += 1, R128 += 1 };
  s1 -> s1 [0, 65535] { R128 += 1, R0 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 74] { R130 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R129 += 1, R130 += 1 };
  s0 -> s2 [0, 65535] { R130 += 1, R7 += 1, R8 += 1 };
  s0 -> s3 [75, 75] { R130 += 1 };
  s0 -> s1 [76, 65535] { R130 += 1, R8 += 1 };
  s1 -> s1 [0, 74] { R130 += 1, R8 += 1 };
  s1 -> s3 [75, 75] { R130 += 1 };
  s1 -> s1 [76, 65535] { R130 += 1, R8 += 1 };
  s2 -> s1 [0, 74] { R130 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R130 += 1, R7 += 1, R8 += 1 };
  s2 -> s3 [75, 75] { R130 += 1 };
  s2 -> s1 [76, 65535] { R130 += 1, R8 += 1 };
  s3 -> s3 [0, 65535] { R130 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 8] { R132 += 1, R100 += 1 };
  s0 -> s2 [0, 65535] { R132 += 1, R99 += 1, R100 += 1 };
  s0 -> s0 [0, 65535] { R131 += 1, R132 += 1 };
  s0 -> s3 [9, 13] { R132 += 1, R100 += 1 };
  s0 -> s1 [14, 31] { R132 += 1, R100 += 1 };
  s0 -> s3 [32, 32] { R132 += 1, R100 += 1 };
  s0 -> s1 [33, 65535] { R132 += 1, R100 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R132 += 1, R100 += 1 };
  s1 -> s5 [0, 65535] { R132 += 1 };
  s2 -> s1 [0, 8] { R132 += 1, R100 += 1 };
  s2 -> s2 [0, 65535] { R132 += 1, R99 += 1, R100 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R132 += 1, R100 += 1 };
  s2 -> s1 [14, 31] { R132 += 1, R100 += 1 };
  s2 -> s3 [32, 32] { R132 += 1, R100 += 1 };
  s2 -> s1 [33, 65535] { R132 += 1, R100 += 1 };
  s3 -> s1 [0, 65535] { R132 += 1, R100 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R132 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R134 += 1, R102 += 1, R2 += 1 };
  s0 -> s2 [0, 65535] { R134 += 1, R101 += 1, R102 += 1 };
  s0 -> s0 [0, 65535] { R133 += 1, R134 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R134 += 1 };
  s1 -> s1 [0, 65535] { R134 += 1, R102 += 1, R2 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R134 += 1, R102 += 1, R2 += 1 };
  s2 -> s2 [0, 65535] { R134 += 1, R101 += 1, R102 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R134 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 8] { R136 += 1, R104 += 1 };
  s0 -> s0 [0, 65535] { R135 += 1, R136 += 1 };
  s0 -> s2 [0, 65535] { R136 += 1, R103 += 1, R104 += 1 };
  s0 -> s3 [9, 13] { R136 += 1, R104 += 1 };
  s0 -> s1 [14, 31] { R136 += 1, R104 += 1 };
  s0 -> s3 [32, 32] { R136 += 1, R104 += 1 };
  s0 -> s1 [33, 65535] { R136 += 1, R104 += 1 };
  s1 -> s1 [0, 65535] { R136 += 1, R104 += 1 };
  s1 -> s5 [0, 65535] { R136 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R136 += 1, R104 += 1 };
  s2 -> s2 [0, 65535] { R136 += 1, R103 += 1, R104 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R136 += 1, R104 += 1 };
  s2 -> s1 [14, 31] { R136 += 1, R104 += 1 };
  s2 -> s3 [32, 32] { R136 += 1, R104 += 1 };
  s2 -> s1 [33, 65535] { R136 += 1, R104 += 1 };
  s3 -> s1 [0, 65535] { R136 += 1, R104 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R136 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 65535] { R138 += 1, R106 += 1, R3 += 1 };
  s0 -> s2 [0, 65535] { R138 += 1, R105 += 1, R106 += 1 };
  s0 -> s0 [0, 65535] { R137 += 1, R138 += 1 };
  s1 -> s1 [0, 65535] { R138 += 1, R106 += 1, R3 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R138 += 1 };
  s2 -> s1 [0, 65535] { R138 += 1, R106 += 1, R3 += 1 };
  s2 -> s2 [0, 65535] { R138 += 1, R105 += 1, R106 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R138 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_14 {
  init s0;
  s0 -> s1 [0, 74] { R140 += 1, R116 += 1 };
  s0 -> s0 [0, 65535] { R139 += 1, R140 += 1 };
  s0 -> s2 [0, 65535] { R140 += 1, R115 += 1, R116 += 1 };
  s0 -> s1 [76, 65535] { R140 += 1, R116 += 1 };
  s1 -> s1 [0, 74] { R140 += 1, R116 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R140 += 1 };
  s1 -> s1 [76, 65535] { R140 += 1, R116 += 1 };
  s2 -> s1 [0, 74] { R140 += 1, R116 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R140 += 1, R115 += 1, R116 += 1 };
  s2 -> s1 [76, 65535] { R140 += 1, R116 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_15 {
  init s0;
  s0 -> s0 [0, 65535] { R141 += 1, R142 += 1 };
  s0 -> s1 [0, 65535] { R142 += 1, R118 += 1, R97 += 1 };
  s0 -> s2 [0, 65535] { R142 += 1, R117 += 1, R118 += 1 };
  s1 -> s4 [0, 65535] { R142 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R142 += 1, R118 += 1, R97 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R142 += 1, R118 += 1, R97 += 1 };
  s2 -> s2 [0, 65535] { R142 += 1, R117 += 1, R118 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R142 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 75] { R144 += 1, R120 += 1 };
  s0 -> s0 [0, 65535] { R143 += 1, R144 += 1 };
  s0 -> s2 [0, 65535] { R144 += 1, R119 += 1, R120 += 1 };
  s0 -> s3 [89, 89] { R144 += 1, R120 += 1 };
  s0 -> s1 [90, 65535] { R144 += 1, R120 += 1 };
  s1 -> s1 [0, 75] { R144 += 1, R120 += 1 };
  s1 -> s3 [89, 89] { R144 += 1, R120 += 1 };
  s1 -> s1 [90, 65535] { R144 += 1, R120 += 1 };
  s2 -> s1 [0, 75] { R144 += 1, R120 += 1 };
  s2 -> s2 [0, 65535] { R144 += 1, R119 += 1, R120 += 1 };
  s2 -> s3 [89, 89] { R144 += 1, R120 += 1 };
  s2 -> s1 [90, 65535] { R144 += 1, R120 += 1 };
  s3 -> s3 [0, 75] { R144 += 1, R120 += 1 };
  s3 -> s3 [0, 65535] { R144 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [89, 65535] { R144 += 1, R120 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 65535] { R146 += 1, R121 += 1, R122 += 1 };
  s0 -> s0 [0, 65535] { R145 += 1, R146 += 1 };
  s0 -> s2 [0, 65535] { R146 += 1, R122 += 1, R98 += 1 };
  s1 -> s1 [0, 65535] { R146 += 1, R121 += 1, R122 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R146 += 1, R122 += 1, R98 += 1 };
  s2 -> s3 [0, 65535] { R146 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R146 += 1, R122 += 1, R98 += 1 };
  s3 -> s3 [0, 65535] { R146 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 74] { R148 += 1, R124 += 1 };
  s0 -> s2 [0, 65535] { R148 += 1, R123 += 1, R124 += 1 };
  s0 -> s0 [0, 65535] { R147 += 1, R148 += 1 };
  s0 -> s3 [75, 75] { R148 += 1, R124 += 1 };
  s0 -> s4 [75, 75] { R148 += 1, R124 += 1 };
  s0 -> s1 [90, 65535] { R148 += 1, R124 += 1 };
  s1 -> s1 [0, 74] { R148 += 1, R124 += 1 };
  s1 -> s1 [0, 65535] { R148 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [75, 75] { R148 += 1, R124 += 1 };
  s1 -> s4 [75, 75] { R148 += 1, R124 += 1 };
  s1 -> s1 [90, 65535] { R148 += 1, R124 += 1 };
  s2 -> s1 [0, 74] { R148 += 1, R124 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R148 += 1, R123 += 1, R124 += 1 };
  s2 -> s3 [75, 75] { R148 += 1, R124 += 1 };
  s2 -> s4 [75, 75] { R148 += 1, R124 += 1 };
  s2 -> s1 [90, 65535] { R148 += 1, R124 += 1 };
  s3 -> s3 [0, 65535] { R148 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 75] { R148 += 1, R124 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R148 += 1 };
  s4 -> s4 [90, 65535] { R148 += 1, R124 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R0 = R120 && R1 - R148 = 1 && R7 = 0 && R8 - R119 = -1 && R99 - R120 = -1 && R100 = R120 && R101 - R120 = -1 && R102 = R120 && R103 = 0 && R104 = 1 && R105 = 0 && R106 = 1 && R107 = R148 && R108 - R148 = 1 && R109 = R148 && R110 - R148 = 1 && R111 = 0 && R112 = 1 && R113 = 0 && R114 = 1 && R125 = 0 && R126 = R148 && R127 = 0 && R128 = R148 && R129 = 0 && R130 = R148 && R131 = 0 && R132 = R148 && R133 = 0 && R134 = R148 && R135 = 0 && R136 = R148 && R137 = 0 && R138 = R148 && R139 = 0 && R140 = R148 && R141 = 0 && R142 = R148 && R143 = 0 && R144 = R148 && R145 = 0 && R146 = R148 && R147 = 0 && R96 < 1 && R119 - R120 < 1 && -1 < R119 && 0 < R120 && -1 < R148 && (R115 != R119 || R116 = R120 || (R97 = 0 && R119 = R120)) && (R117 != R119 || R118 = R120 || (R97 = 0 && R119 = R120)) && (R121 != 0 || R119 = R122 || (R98 = 0 && R119 = 0)) && (R123 != 0 || R119 = R124 || (R98 = 0 && R119 = 0)) && (R115 = R119 || (R97 = 0 && R119 = R120)) && (R117 = R119 || (R97 = 0 && R119 = R120)) && (R121 = 0 || (R98 = 0 && R119 = 0)) && (R123 = 0 || (R98 = 0 && R119 = 0));
// End of Parikh automata intersection problem
