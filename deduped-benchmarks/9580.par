// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R14, R15, R16, R17, R18, R19, R2, R20, R21, R22, R23, R3, R34, R35, R36, R37, R38, R39, R4, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R8, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R9, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 64];
  s0 -> s1 [71, 71];
  s0 -> s0 [72, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 64];
  s1 -> s1 [71, 65535];
  accepting s1;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R2 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R8 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s1 [0, 70];
  s0 -> s0 [0, 65535] { R9 += 1 };
  s0 -> s2 [71, 71];
  s0 -> s1 [72, 65535];
  s1 -> s1 [0, 70];
  s1 -> s2 [71, 71];
  s1 -> s1 [72, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 8] { R17 += 1 };
  s0 -> s0 [0, 65535] { R16 += 1, R17 += 1 };
  s0 -> s2 [9, 13] { R17 += 1 };
  s0 -> s1 [14, 31] { R17 += 1 };
  s0 -> s2 [32, 32] { R17 += 1 };
  s0 -> s1 [33, 65535] { R17 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R17 += 1 };
  s2 -> s1 [0, 65535] { R17 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_5 {
  init s0;
  s0 -> s0 [0, 65535] { R18 += 1, R19 += 1 };
  s0 -> s1 [0, 65535] { R19 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R19 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 8] { R21 += 1 };
  s0 -> s0 [0, 65535] { R20 += 1, R21 += 1 };
  s0 -> s2 [9, 13] { R21 += 1 };
  s0 -> s1 [14, 31] { R21 += 1 };
  s0 -> s2 [32, 32] { R21 += 1 };
  s0 -> s1 [33, 65535] { R21 += 1 };
  s1 -> s1 [0, 65535] { R21 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R21 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 65535] { R23 += 1, R4 += 1 };
  s0 -> s0 [0, 65535] { R22 += 1, R23 += 1 };
  s1 -> s1 [0, 65535] { R23 += 1, R4 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 70] { R63 += 1 };
  s0 -> s0 [0, 65535] { R62 += 1, R63 += 1 };
  s0 -> s1 [72, 65535] { R63 += 1 };
  s1 -> s1 [0, 70] { R63 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [72, 65535] { R63 += 1 };
  accepting s0, s1;
};
automaton value2_9 {
  init s0;
  s0 -> s0 [0, 65535] { R64 += 1, R65 += 1 };
  s0 -> s1 [0, 65535] { R65 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R65 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 71] { R67 += 1 };
  s0 -> s0 [0, 65535] { R66 += 1, R67 += 1 };
  s0 -> s2 [83, 83] { R67 += 1 };
  s0 -> s1 [84, 65535] { R67 += 1 };
  s1 -> s1 [0, 71] { R67 += 1 };
  s1 -> s2 [83, 83] { R67 += 1 };
  s1 -> s1 [84, 65535] { R67 += 1 };
  s2 -> s2 [0, 71] { R67 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [83, 65535] { R67 += 1 };
  accepting s2;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 65535] { R69 += 1, R35 += 1 };
  s0 -> s0 [0, 65535] { R68 += 1, R69 += 1 };
  s1 -> s1 [0, 65535] { R69 += 1, R35 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 82] { R71 += 1 };
  s0 -> s0 [0, 65535] { R70 += 1, R71 += 1 };
  s0 -> s2 [0, 65535] { R71 += 1, R37 += 1 };
  s0 -> s1 [84, 65535] { R71 += 1 };
  s1 -> s1 [0, 82] { R71 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [84, 65535] { R71 += 1 };
  s2 -> s1 [0, 82] { R71 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R71 += 1, R37 += 1 };
  s2 -> s1 [84, 65535] { R71 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_13 {
  init s0;
  s0 -> s1 [0, 82] { R73 += 1, R41 += 1 };
  s0 -> s0 [0, 65535] { R72 += 1, R73 += 1 };
  s0 -> s2 [0, 65535] { R73 += 1, R40 += 1, R41 += 1 };
  s0 -> s1 [84, 65535] { R73 += 1, R41 += 1 };
  s1 -> s1 [0, 82] { R73 += 1, R41 += 1 };
  s1 -> s1 [0, 65535] { R73 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [84, 65535] { R73 += 1, R41 += 1 };
  s2 -> s1 [0, 82] { R73 += 1, R41 += 1 };
  s2 -> s2 [0, 65535] { R73 += 1, R40 += 1, R41 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [84, 65535] { R73 += 1, R41 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_14 {
  init s0;
  s0 -> s0 [0, 65535] { R74 += 1, R75 += 1 };
  s0 -> s1 [0, 65535] { R75 += 1, R45 += 1, R46 += 1 };
  s0 -> s2 [0, 65535] { R75 += 1, R46 += 1, R47 += 1 };
  s1 -> s1 [0, 65535] { R75 += 1, R45 += 1, R46 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R75 += 1, R46 += 1, R47 += 1 };
  s2 -> s3 [0, 65535] { R75 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R75 += 1, R46 += 1, R47 += 1 };
  s3 -> s3 [0, 65535] { R75 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_15 {
  init s0;
  s0 -> s1 [0, 83] { R77 += 1, R51 += 1 };
  s0 -> s2 [0, 65535] { R77 += 1, R50 += 1, R51 += 1 };
  s0 -> s0 [0, 65535] { R76 += 1, R77 += 1 };
  s0 -> s1 [91, 65535] { R77 += 1, R51 += 1 };
  s1 -> s1 [0, 83] { R77 += 1, R51 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R77 += 1 };
  s1 -> s1 [91, 65535] { R77 += 1, R51 += 1 };
  s2 -> s1 [0, 83] { R77 += 1, R51 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R77 += 1, R50 += 1, R51 += 1 };
  s2 -> s1 [91, 65535] { R77 += 1, R51 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value2_16 {
  init s0;
  s0 -> s1 [0, 65535] { R79 += 1, R56 += 1, R57 += 1 };
  s0 -> s2 [0, 65535] { R79 += 1, R55 += 1, R56 += 1 };
  s0 -> s0 [0, 65535] { R78 += 1, R79 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R79 += 1, R56 += 1, R57 += 1 };
  s1 -> s4 [0, 65535] { R79 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R79 += 1, R56 += 1, R57 += 1 };
  s2 -> s2 [0, 65535] { R79 += 1, R55 += 1, R56 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R79 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_17 {
  init s0;
  s0 -> s1 [0, 82] { R81 += 1, R61 += 1 };
  s0 -> s2 [0, 65535] { R81 += 1, R60 += 1, R61 += 1 };
  s0 -> s0 [0, 65535] { R80 += 1, R81 += 1 };
  s0 -> s3 [83, 83] { R81 += 1, R61 += 1 };
  s0 -> s4 [83, 83] { R81 += 1, R61 += 1 };
  s0 -> s1 [91, 65535] { R81 += 1, R61 += 1 };
  s1 -> s1 [0, 82] { R81 += 1, R61 += 1 };
  s1 -> s1 [0, 65535] { R81 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [83, 83] { R81 += 1, R61 += 1 };
  s1 -> s4 [83, 83] { R81 += 1, R61 += 1 };
  s1 -> s1 [91, 65535] { R81 += 1, R61 += 1 };
  s2 -> s1 [0, 82] { R81 += 1, R61 += 1 };
  s2 -> s2 [0, 65535] { R81 += 1, R60 += 1, R61 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s3 [83, 83] { R81 += 1, R61 += 1 };
  s2 -> s4 [83, 83] { R81 += 1, R61 += 1 };
  s2 -> s1 [91, 65535] { R81 += 1, R61 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R81 += 1 };
  s4 -> s4 [0, 83] { R81 += 1, R61 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R81 += 1 };
  s4 -> s4 [91, 65535] { R81 += 1, R61 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
automaton value2_18 {
  init s0;
  s0 -> s1 [0, 65535] { R83 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R82 += 1, R83 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R83 += 1, R15 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_19 {
  init s0;
  s0 -> s1 [0, 70] { R85 += 1 };
  s0 -> s0 [0, 65535] { R84 += 1, R85 += 1 };
  s0 -> s2 [71, 71] { R85 += 1 };
  s0 -> s3 [71, 71] { R85 += 1 };
  s0 -> s1 [84, 65535] { R85 += 1 };
  s1 -> s1 [0, 70] { R85 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R85 += 1 };
  s1 -> s3 [71, 71] { R85 += 1 };
  s1 -> s1 [84, 65535] { R85 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 71] { R85 += 1 };
  s3 -> s3 [0, 65535];
  s3 -> s3 [84, 65535] { R85 += 1 };
  accepting s0, s1, s2, s3;
};
automaton value2_20 {
  init s0;
  s0 -> s1 [0, 70] { R87 += 1, R34 += 1 };
  s0 -> s0 [0, 65535] { R86 += 1, R87 += 1 };
  s0 -> s2 [71, 71] { R87 += 1, R34 += 1 };
  s0 -> s3 [71, 71] { R87 += 1, R34 += 1 };
  s0 -> s1 [72, 65535] { R87 += 1, R34 += 1 };
  s1 -> s1 [0, 70] { R87 += 1, R34 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R87 += 1, R34 += 1 };
  s1 -> s3 [71, 71] { R87 += 1, R34 += 1 };
  s1 -> s1 [72, 65535] { R87 += 1, R34 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s3 [0, 65535] { R87 += 1, R34 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_21 {
  init s0;
  s0 -> s1 [0, 70] { R89 += 1, R36 += 1 };
  s0 -> s0 [0, 65535] { R88 += 1, R89 += 1 };
  s0 -> s2 [71, 71] { R89 += 1, R36 += 1 };
  s0 -> s3 [71, 71] { R89 += 1, R36 += 1 };
  s0 -> s1 [72, 65535] { R89 += 1, R36 += 1 };
  s1 -> s1 [0, 70] { R89 += 1, R36 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R89 += 1, R36 += 1 };
  s1 -> s3 [71, 71] { R89 += 1, R36 += 1 };
  s1 -> s1 [72, 65535] { R89 += 1, R36 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R89 += 1, R36 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_22 {
  init s0;
  s0 -> s1 [0, 70] { R91 += 1, R38 += 1, R39 += 1 };
  s0 -> s0 [0, 65535] { R90 += 1, R91 += 1 };
  s0 -> s2 [71, 71] { R91 += 1, R38 += 1, R39 += 1 };
  s0 -> s3 [71, 71] { R91 += 1, R38 += 1, R39 += 1 };
  s0 -> s1 [72, 65535] { R91 += 1, R38 += 1, R39 += 1 };
  s1 -> s1 [0, 70] { R91 += 1, R38 += 1, R39 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R91 += 1, R38 += 1, R39 += 1 };
  s1 -> s3 [71, 71] { R91 += 1, R38 += 1, R39 += 1 };
  s1 -> s1 [72, 65535] { R91 += 1, R38 += 1, R39 += 1 };
  s2 -> s2 [0, 65535] { R91 += 1, R38 += 1, R39 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_23 {
  init s0;
  s0 -> s1 [0, 70] { R93 += 1, R42 += 1, R43 += 1 };
  s0 -> s0 [0, 65535] { R92 += 1, R93 += 1 };
  s0 -> s2 [71, 71] { R93 += 1, R42 += 1, R43 += 1 };
  s0 -> s3 [71, 71] { R93 += 1, R42 += 1, R43 += 1 };
  s0 -> s1 [72, 65535] { R93 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 70] { R93 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R93 += 1, R42 += 1, R43 += 1 };
  s1 -> s3 [71, 71] { R93 += 1, R42 += 1, R43 += 1 };
  s1 -> s1 [72, 65535] { R93 += 1, R42 += 1, R43 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R93 += 1, R42 += 1, R43 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_24 {
  init s0;
  s0 -> s1 [0, 70] { R95 += 1, R48 += 1, R49 += 1 };
  s0 -> s0 [0, 65535] { R94 += 1, R95 += 1 };
  s0 -> s2 [71, 71] { R95 += 1, R48 += 1, R49 += 1 };
  s0 -> s3 [71, 71] { R95 += 1, R48 += 1, R49 += 1 };
  s0 -> s1 [72, 65535] { R95 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 70] { R95 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R95 += 1, R48 += 1, R49 += 1 };
  s1 -> s3 [71, 71] { R95 += 1, R48 += 1, R49 += 1 };
  s1 -> s1 [72, 65535] { R95 += 1, R48 += 1, R49 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R95 += 1, R48 += 1, R49 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_25 {
  init s0;
  s0 -> s1 [0, 70] { R97 += 1, R52 += 1, R53 += 1 };
  s0 -> s0 [0, 65535] { R96 += 1, R97 += 1 };
  s0 -> s2 [71, 71] { R97 += 1, R52 += 1, R53 += 1 };
  s0 -> s3 [71, 71] { R97 += 1, R52 += 1, R53 += 1 };
  s0 -> s1 [72, 65535] { R97 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 70] { R97 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R97 += 1, R52 += 1, R53 += 1 };
  s1 -> s3 [71, 71] { R97 += 1, R52 += 1, R53 += 1 };
  s1 -> s1 [72, 65535] { R97 += 1, R52 += 1, R53 += 1 };
  s2 -> s2 [0, 65535];
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R97 += 1, R52 += 1, R53 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_26 {
  init s0;
  s0 -> s1 [0, 70] { R99 += 1, R58 += 1, R59 += 1 };
  s0 -> s0 [0, 65535] { R98 += 1, R99 += 1 };
  s0 -> s2 [71, 71] { R99 += 1, R58 += 1, R59 += 1 };
  s0 -> s3 [71, 71] { R99 += 1, R58 += 1, R59 += 1 };
  s0 -> s1 [72, 65535] { R99 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [0, 70] { R99 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s2 [71, 71] { R99 += 1, R58 += 1, R59 += 1 };
  s1 -> s3 [71, 71] { R99 += 1, R58 += 1, R59 += 1 };
  s1 -> s1 [72, 65535] { R99 += 1, R58 += 1, R59 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R99 += 1, R58 += 1, R59 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P54
automaton P54_0 {
  init s0;
  s0 -> s1 [115, 115];
  accepting s1;
};
};
synchronised {  // Automata constraining P4
automaton P4_0 {
  init s0;
  s0 -> s1 [103, 103];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s1 [44, 44];
  s0 -> s0 [45, 65535];
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R0 += 1 };
  accepting s0;
};
};
constraint R2 = R81 && R16 - R81 = -1 && R17 = R81 && R18 - R81 = -1 && R19 = R81 && R20 = 0 && R21 = 1 && R22 = 0 && R23 = 1 && R62 = 0 && R63 = R81 && R64 = 0 && R65 = R81 && R66 = 0 && R67 = R81 && R68 = 0 && R69 = R81 && R70 = 0 && R71 = R81 && R72 = 0 && R73 = R81 && R74 = 0 && R75 = R81 && R76 = 0 && R77 = R81 && R78 = 0 && R79 = R81 && R80 = 0 && R0 != 0 && R8 < 1 && R9 < 1 && -1*R35 + -1*R34 < 1 && R37 + R36 < 1 && 0 < R81 && (R35 + R34 != 0 || R47 + R44 = 0 || (R40 + R38 = 0 && R41 + R39 = 0)) && (R35 + R34 != 0 || R47 + R44 = 0 || (R45 + R42 = 0 && R46 + R43 = 0)) && (R35 + R34 != 0 || R47 + R44 = 0 || (R50 + R48 = 0 && R51 + R49 = 0)) && (R40 + R38 != 0 || R35 + R34 + -1*R41 + -1*R39 = 0 || R35 + R34 < 1) && (R45 + R42 != 0 || R35 + R34 + -1*R46 + -1*R43 = 0 || R35 + R34 < 1) && (R50 + R48 != 0 || R35 + R34 + -1*R51 + -1*R49 = 0 || R35 + R34 < 1) && (R15 = 0 || (R82 = 0 && R83 = 0 && R84 = 0 && R85 = 0 && R86 = 0 && R87 = 0 && R88 = 0 && R89 = 0 && R90 = 0 && R91 = 0 && R92 = 0 && R93 = 0 && R94 = 0 && R95 = 0 && R96 = 0 && R97 = 0 && R98 = 0 && R99 = 0)) && (R40 + R38 = 0 || R35 + R34 < 1) && (R45 + R42 = 0 || R35 + R34 < 1) && (R50 + R48 = 0 || R35 + R34 < 1) && (R57 + R54 = 0 || (R55 + R52 = 0 && R56 + R53 = 0)) && (R57 + R54 = 0 || (R60 + R58 = 0 && R61 + R59 = 0));
// End of Parikh automata intersection problem
