// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R16, R17, R2, R3, R4, R404, R405, R5, R597, R598, R599, R6, R600, R601, R602, R603, R604, R605, R606, R607, R608, R609, R610, R611, R612, R613, R614, R615, R616, R617, R618, R619, R620, R621, R622, R623, R624, R625, R626, R627, R628, R629, R630, R631, R632, R633, R634, R635, R636, R637, R638, R639, R640, R641, R642, R643, R644, R645, R646, R647, R648, R649, R650, R651, R652, R653, R654, R655, R656, R657, R658, R659, R660, R661, R662, R663, R664, R665, R666, R667, R668, R669, R670, R671, R672, R673, R674, R675, R676, R677, R678, R679, R680, R681, R682, R683, R684, R685, R686, R687, R688, R689, R690, R691, R692, R693, R694, R695, R696, R697, R698, R699, R7, R700, R701, R702, R703, R704, R705, R706, R707, R708, R709, R710, R711, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R597 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R628 += 1, R629 += 1 };
  s0 -> s1 [13, 13] { R629 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s0 [0, 65535] { R630 += 1, R631 += 1 };
  s0 -> s1 [0, 65535] { R631 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R631 += 1, R13 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R633 += 1 };
  s0 -> s0 [0, 65535] { R632 += 1, R633 += 1 };
  s0 -> s2 [9, 13] { R633 += 1 };
  s0 -> s1 [14, 31] { R633 += 1 };
  s0 -> s2 [32, 32] { R633 += 1 };
  s0 -> s1 [33, 65535] { R633 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R633 += 1 };
  s2 -> s1 [0, 65535] { R633 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s0 [0, 65535] { R634 += 1, R635 += 1 };
  s0 -> s1 [0, 65535] { R635 += 1, R14 += 1 };
  s1 -> s1 [0, 65535] { R635 += 1, R14 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R655 += 1 };
  s0 -> s0 [0, 65535] { R654 += 1, R655 += 1 };
  s0 -> s1 [91, 65535] { R655 += 1 };
  s1 -> s1 [0, 64] { R655 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R655 += 1 };
  accepting s0, s1;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R656 += 1, R657 += 1 };
  s0 -> s1 [0, 65535] { R657 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R657 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R659 += 1, R609 += 1 };
  s0 -> s0 [0, 65535] { R658 += 1, R659 += 1 };
  s0 -> s2 [0, 65535] { R659 += 1, R608 += 1, R609 += 1 };
  s0 -> s3 [9, 13] { R659 += 1, R609 += 1 };
  s0 -> s1 [14, 31] { R659 += 1, R609 += 1 };
  s0 -> s3 [32, 32] { R659 += 1, R609 += 1 };
  s0 -> s1 [33, 65535] { R659 += 1, R609 += 1 };
  s1 -> s1 [0, 65535] { R659 += 1, R609 += 1 };
  s1 -> s5 [0, 65535] { R659 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R659 += 1, R609 += 1 };
  s2 -> s2 [0, 65535] { R659 += 1, R608 += 1, R609 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R659 += 1, R609 += 1 };
  s2 -> s1 [14, 31] { R659 += 1, R609 += 1 };
  s2 -> s3 [32, 32] { R659 += 1, R609 += 1 };
  s2 -> s1 [33, 65535] { R659 += 1, R609 += 1 };
  s3 -> s1 [0, 65535] { R659 += 1, R609 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R659 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R661 += 1, R611 += 1, R8 += 1 };
  s0 -> s0 [0, 65535] { R660 += 1, R661 += 1 };
  s0 -> s2 [0, 65535] { R661 += 1, R610 += 1, R611 += 1 };
  s1 -> s1 [0, 65535] { R661 += 1, R611 += 1, R8 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R661 += 1 };
  s2 -> s1 [0, 65535] { R661 += 1, R611 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R661 += 1, R610 += 1, R611 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R661 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R663 += 1, R613 += 1 };
  s0 -> s0 [0, 65535] { R662 += 1, R663 += 1 };
  s0 -> s2 [0, 65535] { R663 += 1, R612 += 1, R613 += 1 };
  s0 -> s3 [9, 13] { R663 += 1, R613 += 1 };
  s0 -> s1 [14, 31] { R663 += 1, R613 += 1 };
  s0 -> s3 [32, 32] { R663 += 1, R613 += 1 };
  s0 -> s1 [33, 65535] { R663 += 1, R613 += 1 };
  s1 -> s5 [0, 65535] { R663 += 1 };
  s1 -> s1 [0, 65535] { R663 += 1, R613 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R663 += 1, R613 += 1 };
  s2 -> s2 [0, 65535] { R663 += 1, R612 += 1, R613 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R663 += 1, R613 += 1 };
  s2 -> s1 [14, 31] { R663 += 1, R613 += 1 };
  s2 -> s3 [32, 32] { R663 += 1, R613 += 1 };
  s2 -> s1 [33, 65535] { R663 += 1, R613 += 1 };
  s3 -> s1 [0, 65535] { R663 += 1, R613 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R663 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R665 += 1, R614 += 1, R615 += 1 };
  s0 -> s2 [0, 65535] { R665 += 1, R615 += 1, R9 += 1 };
  s0 -> s0 [0, 65535] { R664 += 1, R665 += 1 };
  s1 -> s1 [0, 65535] { R665 += 1, R614 += 1, R615 += 1 };
  s1 -> s2 [0, 65535] { R665 += 1, R615 += 1, R9 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R665 += 1, R615 += 1, R9 += 1 };
  s2 -> s3 [0, 65535] { R665 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R665 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R405 += 1 };
  s0 -> s0 [0, 65535] { R404 += 1, R405 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R405 += 1 };
  s1 -> s1 [0, 60] { R405 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R405 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R670 += 1, R671 += 1 };
  s0 -> s1 [0, 65535] { R671 += 1, R3 += 1 };
  s1 -> s1 [0, 65535] { R671 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s1 [0, 65535] { R673 += 1, R624 += 1, R625 += 1 };
  s0 -> s0 [0, 65535] { R672 += 1, R673 += 1 };
  s0 -> s2 [12, 12] { R673 += 1, R625 += 1 };
  s1 -> s1 [0, 65535] { R673 += 1, R624 += 1, R625 += 1 };
  s1 -> s2 [12, 12] { R673 += 1, R625 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R673 += 1 };
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R675 += 1, R626 += 1, R627 += 1 };
  s0 -> s2 [0, 65535] { R675 += 1, R627 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R674 += 1, R675 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R675 += 1, R626 += 1, R627 += 1 };
  s1 -> s2 [0, 65535] { R675 += 1, R627 += 1, R12 += 1 };
  s2 -> s3 [0, 65535] { R675 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R675 += 1, R627 += 1, R12 += 1 };
  s3 -> s3 [0, 65535] { R675 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R677 += 1, R643 += 1 };
  s0 -> s0 [0, 65535] { R676 += 1, R677 += 1 };
  s0 -> s2 [0, 65535] { R677 += 1, R642 += 1, R643 += 1 };
  s0 -> s1 [91, 65535] { R677 += 1, R643 += 1 };
  s1 -> s1 [0, 64] { R677 += 1, R643 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R677 += 1 };
  s1 -> s1 [91, 65535] { R677 += 1, R643 += 1 };
  s2 -> s1 [0, 64] { R677 += 1, R643 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R677 += 1, R642 += 1, R643 += 1 };
  s2 -> s1 [91, 65535] { R677 += 1, R643 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R679 += 1, R644 += 1, R645 += 1 };
  s0 -> s2 [0, 65535] { R679 += 1, R645 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R678 += 1, R679 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R679 += 1, R644 += 1, R645 += 1 };
  s1 -> s2 [0, 65535] { R679 += 1, R645 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R679 += 1 };
  s2 -> s2 [0, 65535] { R679 += 1, R645 += 1, R0 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R679 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R681 += 1, R647 += 1, R601 += 1 };
  s0 -> s0 [0, 65535] { R680 += 1, R681 += 1 };
  s0 -> s2 [0, 65535] { R681 += 1, R647 += 1, R600 += 1, R601 += 1 };
  s0 -> s3 [0, 65535] { R681 += 1, R646 += 1, R647 += 1 };
  s0 -> s4 [9, 13] { R681 += 1, R647 += 1, R601 += 1 };
  s0 -> s1 [14, 31] { R681 += 1, R647 += 1, R601 += 1 };
  s0 -> s4 [32, 32] { R681 += 1, R647 += 1, R601 += 1 };
  s0 -> s1 [33, 65535] { R681 += 1, R647 += 1, R601 += 1 };
  s1 -> s6 [0, 65535] { R681 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R681 += 1, R647 += 1 };
  s1 -> s1 [0, 65535] { R681 += 1, R647 += 1, R601 += 1 };
  s2 -> s1 [0, 8] { R681 += 1, R647 += 1, R601 += 1 };
  s2 -> s6 [0, 65535] { R681 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R681 += 1, R647 += 1, R600 += 1, R601 += 1 };
  s2 -> s4 [9, 13] { R681 += 1, R647 += 1, R601 += 1 };
  s2 -> s1 [14, 31] { R681 += 1, R647 += 1, R601 += 1 };
  s2 -> s4 [32, 32] { R681 += 1, R647 += 1, R601 += 1 };
  s2 -> s1 [33, 65535] { R681 += 1, R647 += 1, R601 += 1 };
  s3 -> s1 [0, 8] { R681 += 1, R647 += 1, R601 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R681 += 1, R647 += 1, R600 += 1, R601 += 1 };
  s3 -> s3 [0, 65535] { R681 += 1, R646 += 1, R647 += 1 };
  s3 -> s4 [9, 13] { R681 += 1, R647 += 1, R601 += 1 };
  s3 -> s1 [14, 31] { R681 += 1, R647 += 1, R601 += 1 };
  s3 -> s4 [32, 32] { R681 += 1, R647 += 1, R601 += 1 };
  s3 -> s1 [33, 65535] { R681 += 1, R647 += 1, R601 += 1 };
  s4 -> s1 [0, 65535] { R681 += 1, R647 += 1, R601 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R681 += 1 };
  s6 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R681 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R681 += 1, R647 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R683 += 1, R648 += 1, R649 += 1 };
  s0 -> s0 [0, 65535] { R682 += 1, R683 += 1 };
  s0 -> s2 [0, 65535] { R683 += 1, R649 += 1, R603 += 1, R6 += 1 };
  s0 -> s3 [0, 65535] { R683 += 1, R649 += 1, R602 += 1, R603 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R683 += 1, R648 += 1, R649 += 1 };
  s1 -> s2 [0, 65535] { R683 += 1, R649 += 1, R603 += 1, R6 += 1 };
  s1 -> s3 [0, 65535] { R683 += 1, R649 += 1, R602 += 1, R603 += 1 };
  s2 -> s6 [0, 65535] { R683 += 1, R649 += 1 };
  s2 -> s4 [0, 65535] { R683 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R683 += 1, R649 += 1, R603 += 1, R6 += 1 };
  s3 -> s4 [0, 65535] { R683 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R683 += 1, R649 += 1, R603 += 1, R6 += 1 };
  s3 -> s3 [0, 65535] { R683 += 1, R649 += 1, R602 += 1, R603 += 1 };
  s4 -> s4 [0, 65535] { R683 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R683 += 1, R649 += 1 };
  s6 -> s4 [0, 65535] { R683 += 1 };
  s6 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R685 += 1, R651 += 1, R605 += 1 };
  s0 -> s2 [0, 65535] { R685 += 1, R651 += 1, R604 += 1, R605 += 1 };
  s0 -> s0 [0, 65535] { R684 += 1, R685 += 1 };
  s0 -> s3 [0, 65535] { R685 += 1, R650 += 1, R651 += 1 };
  s0 -> s4 [9, 13] { R685 += 1, R651 += 1, R605 += 1 };
  s0 -> s1 [14, 31] { R685 += 1, R651 += 1, R605 += 1 };
  s0 -> s4 [32, 32] { R685 += 1, R651 += 1, R605 += 1 };
  s0 -> s1 [33, 65535] { R685 += 1, R651 += 1, R605 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s7 [0, 65535] { R685 += 1, R651 += 1 };
  s1 -> s6 [0, 65535] { R685 += 1 };
  s1 -> s1 [0, 65535] { R685 += 1, R651 += 1, R605 += 1 };
  s2 -> s1 [0, 8] { R685 += 1, R651 += 1, R605 += 1 };
  s2 -> s2 [0, 65535] { R685 += 1, R651 += 1, R604 += 1, R605 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R685 += 1 };
  s2 -> s4 [9, 13] { R685 += 1, R651 += 1, R605 += 1 };
  s2 -> s1 [14, 31] { R685 += 1, R651 += 1, R605 += 1 };
  s2 -> s4 [32, 32] { R685 += 1, R651 += 1, R605 += 1 };
  s2 -> s1 [33, 65535] { R685 += 1, R651 += 1, R605 += 1 };
  s3 -> s1 [0, 8] { R685 += 1, R651 += 1, R605 += 1 };
  s3 -> s2 [0, 65535] { R685 += 1, R651 += 1, R604 += 1, R605 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R685 += 1, R650 += 1, R651 += 1 };
  s3 -> s4 [9, 13] { R685 += 1, R651 += 1, R605 += 1 };
  s3 -> s1 [14, 31] { R685 += 1, R651 += 1, R605 += 1 };
  s3 -> s4 [32, 32] { R685 += 1, R651 += 1, R605 += 1 };
  s3 -> s1 [33, 65535] { R685 += 1, R651 += 1, R605 += 1 };
  s4 -> s1 [0, 65535] { R685 += 1, R651 += 1, R605 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R685 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R685 += 1, R651 += 1 };
  s7 -> s6 [0, 65535] { R685 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R687 += 1, R653 += 1, R606 += 1, R607 += 1 };
  s0 -> s2 [0, 65535] { R687 += 1, R652 += 1, R653 += 1 };
  s0 -> s3 [0, 65535] { R687 += 1, R653 += 1, R607 += 1, R7 += 1 };
  s0 -> s0 [0, 65535] { R686 += 1, R687 += 1 };
  s1 -> s1 [0, 65535] { R687 += 1, R653 += 1, R606 += 1, R607 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s6 [0, 65535] { R687 += 1 };
  s1 -> s3 [0, 65535] { R687 += 1, R653 += 1, R607 += 1, R7 += 1 };
  s2 -> s1 [0, 65535] { R687 += 1, R653 += 1, R606 += 1, R607 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R687 += 1, R652 += 1, R653 += 1 };
  s2 -> s3 [0, 65535] { R687 += 1, R653 += 1, R607 += 1, R7 += 1 };
  s3 -> s4 [0, 65535] { R687 += 1, R653 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s6 [0, 65535] { R687 += 1 };
  s3 -> s3 [0, 65535] { R687 += 1, R653 += 1, R607 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R687 += 1, R653 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s6 [0, 65535] { R687 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R687 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R689 += 1 };
  s0 -> s0 [0, 65535] { R688 += 1, R689 += 1 };
  s0 -> s2 [66, 66] { R689 += 1 };
  s0 -> s1 [67, 65535] { R689 += 1 };
  s1 -> s1 [0, 64] { R689 += 1 };
  s1 -> s2 [66, 66] { R689 += 1 };
  s1 -> s1 [67, 65535] { R689 += 1 };
  s2 -> s2 [0, 64] { R689 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R689 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R690 += 1, R691 += 1 };
  s0 -> s1 [0, 65535] { R691 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R691 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65] { R693 += 1, R17 += 1 };
  s0 -> s2 [0, 65535] { R693 += 1, R16 += 1, R17 += 1 };
  s0 -> s0 [0, 65535] { R692 += 1, R693 += 1 };
  s0 -> s3 [66, 66] { R693 += 1 };
  s0 -> s1 [67, 65535] { R693 += 1, R17 += 1 };
  s1 -> s1 [0, 65] { R693 += 1, R17 += 1 };
  s1 -> s3 [66, 66] { R693 += 1 };
  s1 -> s1 [67, 65535] { R693 += 1, R17 += 1 };
  s2 -> s1 [0, 65] { R693 += 1, R17 += 1 };
  s2 -> s2 [0, 65535] { R693 += 1, R16 += 1, R17 += 1 };
  s2 -> s3 [66, 66] { R693 += 1 };
  s2 -> s1 [67, 65535] { R693 += 1, R17 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R693 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R695 += 1, R617 += 1 };
  s0 -> s0 [0, 65535] { R694 += 1, R695 += 1 };
  s0 -> s2 [0, 65535] { R695 += 1, R616 += 1, R617 += 1 };
  s0 -> s3 [9, 13] { R695 += 1, R617 += 1 };
  s0 -> s1 [14, 31] { R695 += 1, R617 += 1 };
  s0 -> s3 [32, 32] { R695 += 1, R617 += 1 };
  s0 -> s1 [33, 65535] { R695 += 1, R617 += 1 };
  s1 -> s1 [0, 65535] { R695 += 1, R617 += 1 };
  s1 -> s5 [0, 65535] { R695 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R695 += 1, R617 += 1 };
  s2 -> s2 [0, 65535] { R695 += 1, R616 += 1, R617 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R695 += 1, R617 += 1 };
  s2 -> s1 [14, 31] { R695 += 1, R617 += 1 };
  s2 -> s3 [32, 32] { R695 += 1, R617 += 1 };
  s2 -> s1 [33, 65535] { R695 += 1, R617 += 1 };
  s3 -> s1 [0, 65535] { R695 += 1, R617 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R695 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R697 += 1, R618 += 1, R619 += 1 };
  s0 -> s2 [0, 65535] { R697 += 1, R619 += 1, R10 += 1 };
  s0 -> s0 [0, 65535] { R696 += 1, R697 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R697 += 1, R618 += 1, R619 += 1 };
  s1 -> s2 [0, 65535] { R697 += 1, R619 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R697 += 1 };
  s2 -> s2 [0, 65535] { R697 += 1, R619 += 1, R10 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R697 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R699 += 1, R621 += 1 };
  s0 -> s0 [0, 65535] { R698 += 1, R699 += 1 };
  s0 -> s2 [0, 65535] { R699 += 1, R620 += 1, R621 += 1 };
  s0 -> s3 [9, 13] { R699 += 1, R621 += 1 };
  s0 -> s1 [14, 31] { R699 += 1, R621 += 1 };
  s0 -> s3 [32, 32] { R699 += 1, R621 += 1 };
  s0 -> s1 [33, 65535] { R699 += 1, R621 += 1 };
  s1 -> s5 [0, 65535] { R699 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R699 += 1, R621 += 1 };
  s2 -> s1 [0, 8] { R699 += 1, R621 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R699 += 1, R620 += 1, R621 += 1 };
  s2 -> s3 [9, 13] { R699 += 1, R621 += 1 };
  s2 -> s1 [14, 31] { R699 += 1, R621 += 1 };
  s2 -> s3 [32, 32] { R699 += 1, R621 += 1 };
  s2 -> s1 [33, 65535] { R699 += 1, R621 += 1 };
  s3 -> s1 [0, 65535] { R699 += 1, R621 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R699 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s0 [0, 65535] { R700 += 1, R701 += 1 };
  s0 -> s1 [0, 65535] { R701 += 1, R622 += 1, R623 += 1 };
  s0 -> s2 [0, 65535] { R701 += 1, R623 += 1, R11 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R701 += 1, R622 += 1, R623 += 1 };
  s1 -> s2 [0, 65535] { R701 += 1, R623 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R701 += 1 };
  s2 -> s2 [0, 65535] { R701 += 1, R623 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R701 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65] { R703 += 1, R637 += 1 };
  s0 -> s2 [0, 65535] { R703 += 1, R636 += 1, R637 += 1 };
  s0 -> s0 [0, 65535] { R702 += 1, R703 += 1 };
  s0 -> s1 [67, 65535] { R703 += 1, R637 += 1 };
  s1 -> s1 [0, 65] { R703 += 1, R637 += 1 };
  s1 -> s1 [0, 65535] { R703 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [67, 65535] { R703 += 1, R637 += 1 };
  s2 -> s1 [0, 65] { R703 += 1, R637 += 1 };
  s2 -> s2 [0, 65535] { R703 += 1, R636 += 1, R637 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R703 += 1, R637 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R705 += 1, R638 += 1, R639 += 1 };
  s0 -> s0 [0, 65535] { R704 += 1, R705 += 1 };
  s0 -> s2 [0, 65535] { R705 += 1, R639 += 1, R598 += 1 };
  s1 -> s1 [0, 65535] { R705 += 1, R638 += 1, R639 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R705 += 1, R639 += 1, R598 += 1 };
  s2 -> s3 [0, 65535] { R705 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R705 += 1, R639 += 1, R598 += 1 };
  s3 -> s3 [0, 65535] { R705 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 66] { R707 += 1, R641 += 1 };
  s0 -> s0 [0, 65535] { R706 += 1, R707 += 1 };
  s0 -> s2 [0, 65535] { R707 += 1, R640 += 1, R641 += 1 };
  s0 -> s3 [73, 73] { R707 += 1, R641 += 1 };
  s0 -> s1 [74, 65535] { R707 += 1, R641 += 1 };
  s1 -> s1 [0, 66] { R707 += 1, R641 += 1 };
  s1 -> s3 [73, 73] { R707 += 1, R641 += 1 };
  s1 -> s1 [74, 65535] { R707 += 1, R641 += 1 };
  s2 -> s1 [0, 66] { R707 += 1, R641 += 1 };
  s2 -> s2 [0, 65535] { R707 += 1, R640 += 1, R641 += 1 };
  s2 -> s3 [73, 73] { R707 += 1, R641 += 1 };
  s2 -> s1 [74, 65535] { R707 += 1, R641 += 1 };
  s3 -> s3 [0, 66] { R707 += 1, R641 += 1 };
  s3 -> s3 [0, 65535] { R707 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [73, 65535] { R707 += 1, R641 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_22 {
  init s0;
  s0 -> s1 [0, 65535] { R709 += 1, R666 += 1, R667 += 1 };
  s0 -> s2 [0, 65535] { R709 += 1, R667 += 1, R599 += 1 };
  s0 -> s0 [0, 65535] { R708 += 1, R709 += 1 };
  s1 -> s1 [0, 65535] { R709 += 1, R666 += 1, R667 += 1 };
  s1 -> s2 [0, 65535] { R709 += 1, R667 += 1, R599 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R709 += 1, R667 += 1, R599 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R709 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R709 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65] { R711 += 1, R669 += 1 };
  s0 -> s0 [0, 65535] { R710 += 1, R711 += 1 };
  s0 -> s2 [0, 65535] { R711 += 1, R668 += 1, R669 += 1 };
  s0 -> s3 [66, 66] { R711 += 1, R669 += 1 };
  s0 -> s4 [66, 66] { R711 += 1, R669 += 1 };
  s0 -> s1 [74, 65535] { R711 += 1, R669 += 1 };
  s1 -> s1 [0, 65] { R711 += 1, R669 += 1 };
  s1 -> s1 [0, 65535] { R711 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R711 += 1, R669 += 1 };
  s1 -> s4 [66, 66] { R711 += 1, R669 += 1 };
  s1 -> s1 [74, 65535] { R711 += 1, R669 += 1 };
  s2 -> s1 [0, 65] { R711 += 1, R669 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R711 += 1, R668 += 1, R669 += 1 };
  s2 -> s3 [66, 66] { R711 += 1, R669 += 1 };
  s2 -> s4 [66, 66] { R711 += 1, R669 += 1 };
  s2 -> s1 [74, 65535] { R711 += 1, R669 += 1 };
  s3 -> s3 [0, 66] { R711 += 1, R669 += 1 };
  s3 -> s3 [0, 65535] { R711 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [74, 65535] { R711 += 1, R669 += 1 };
  s4 -> s4 [0, 65535] { R711 += 1 };
  s4 -> s5 [0, 65535];
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R2 = R641 && R3 = R653 && R4 = R711 && R5 - R665 = 1 && R16 = 0 && R17 - R640 = -1 && R404 = 0 && R405 - R710 = -1 && R616 - R641 = -1 && R617 = R641 && R618 - R641 = -1 && R619 = R641 && R620 = 0 && R621 = 1 && R622 = 0 && R623 = 1 && R624 = 0 && R625 = 1 && R626 = 0 && R627 = 1 && R628 = R665 && R629 - R665 = 1 && R630 = R665 && R631 - R665 = 1 && R632 = 0 && R633 = 1 && R634 = 0 && R635 = 1 && R642 = 1 && R643 = R653 && R644 = 1 && R645 = R653 && R646 = 1 && R647 = R653 && R648 = 1 && R649 = R653 && R650 = 1 && R651 = R653 && R652 = 1 && R654 = 0 && R655 = R665 && R656 = 0 && R657 = R665 && R658 = 0 && R659 = R665 && R660 = 0 && R661 = R665 && R662 = 0 && R663 = R665 && R664 = 0 && R670 = 0 && R671 - R710 = -1 && R672 = 0 && R673 - R710 = -1 && R674 = 0 && R675 - R710 = -1 && R676 = 0 && R677 - R710 = -1 && R678 = 0 && R679 - R710 = -1 && R680 = 0 && R681 - R710 = -1 && R682 = 0 && R683 - R710 = -1 && R684 = 0 && R685 - R710 = -1 && R686 = 0 && R687 - R710 = -1 && R688 = R710 && R689 = R711 && R690 = R710 && R691 = R711 && R692 = R710 && R693 = R711 && R694 = R710 && R695 = R711 && R696 = R710 && R697 = R711 && R698 = R710 && R699 = R711 && R700 = R710 && R701 = R711 && R702 = R710 && R703 = R711 && R704 = R710 && R705 = R711 && R706 = R710 && R707 = R711 && R708 = R710 && R709 = R711 && R0 != 0 && R1 != 0 && R597 < 1 && R640 - R641 < 1 && -1 < R640 && 0 < R641 && 0 < R653 && -1 < R665 && R710 - R711 < 1 && 0 < R710 && (R6 != 0 || ((R0 != R601 || R600 - R601 = -1 || R601 < 0) && (R0 = R601 || R0 < 1))) && (R6 != 0 || ((R0 != R603 || R602 - R603 = -1 || R603 < 0) && (R0 = R603 || R0 < 1))) && (R8 != 0 || ((R1 != R609 || R608 - R609 = -1 || R609 < 0) && (R1 = R609 || R1 < 1))) && (R8 != 0 || ((R1 != R611 || R610 - R611 = -1 || R611 < 0) && (R1 = R611 || R1 < 1))) && (R604 != 0 || ((R7 != 0 || ((R0 != R605 || R605 = 1 || R605 < 0) && (R0 = R605 || R605 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R605 || R605 = 1 || R605 < 0) && (R605 != 1 || -1 < R0) && (R0 = R605 || R605 = 1))))) && (R606 != 0 || ((R7 != 0 || ((R0 != R607 || R607 = 1 || R607 < 0) && (R0 = R607 || R607 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R607 || R607 = 1 || R607 < 0) && (R607 != 1 || -1 < R0) && (R0 = R607 || R607 = 1))))) && (R612 != 0 || ((R9 != 0 || ((R1 != R613 || R613 = 1 || R613 < 0) && (R1 = R613 || R613 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R613 || R613 = 1 || R613 < 0) && (R613 != 1 || -1 < R1) && (R1 = R613 || R613 = 1))))) && (R614 != 0 || ((R9 != 0 || ((R1 != R615 || R615 = 1 || R615 < 0) && (R1 = R615 || R615 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R615 || R615 = 1 || R615 < 0) && (R615 != 1 || -1 < R1) && (R1 = R615 || R615 = 1))))) && (R636 != R640 || R637 = R641 || (R598 = 0 && R640 = R641)) && (R638 != R640 || R639 = R641 || (R598 = 0 && R640 = R641)) && (R666 != 0 || R640 = R667 || (R599 = 0 && R640 = 0)) && (R668 != 0 || R640 = R669 || (R599 = 0 && R640 = 0)) && (R6 = 0 || (R0 = R601 && R600 - R601 = -1)) && (R6 = 0 || (R0 = R603 && R602 - R603 = -1)) && (R8 = 0 || (R1 = R609 && R608 - R609 = -1)) && (R8 = 0 || (R1 = R611 && R610 - R611 = -1)) && (R604 = 0 || (R7 = 0 && R0 < 0)) && (R606 = 0 || (R7 = 0 && R0 < 0)) && (R612 = 0 || (R9 = 0 && R1 < 0)) && (R614 = 0 || (R9 = 0 && R1 < 0)) && (R636 = R640 || (R598 = 0 && R640 = R641)) && (R638 = R640 || (R598 = 0 && R640 = R641)) && (R666 = 0 || (R599 = 0 && R640 = 0)) && (R668 = 0 || (R599 = 0 && R640 = 0));
// End of Parikh automata intersection problem
