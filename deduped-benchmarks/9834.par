// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R19, R2, R20, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R251, R252, R253, R254, R255, R256, R257, R258, R259, R260, R261, R262, R263, R264, R265, R266, R267, R268, R269, R270, R271, R272, R273, R274, R275, R276, R277, R278, R279, R280, R281, R282, R283, R284, R285, R286, R287, R288, R289, R290, R291, R292, R293, R294, R295, R296, R297, R298, R299, R3, R300, R301, R302, R303, R304, R305, R306, R307, R308, R309, R310, R311, R312, R313, R314, R315, R316, R317, R318, R319, R320, R321, R322, R323, R324, R325, R326, R4, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R212 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s1 [13, 13] { R244 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R246 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R248 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s2 [9, 13] { R248 += 1 };
  s0 -> s1 [14, 31] { R248 += 1 };
  s0 -> s2 [32, 32] { R248 += 1 };
  s0 -> s1 [33, 65535] { R248 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R248 += 1 };
  s2 -> s1 [0, 65535] { R248 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R250 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R270 += 1 };
  s0 -> s0 [0, 65535] { R269 += 1, R270 += 1 };
  s0 -> s1 [91, 65535] { R270 += 1 };
  s1 -> s1 [0, 64] { R270 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R270 += 1 };
  accepting s0, s1;
};
automaton value2_8 {
  init s0;
  s0 -> s1 [0, 65535] { R272 += 1, R1 += 1 };
  s0 -> s0 [0, 65535] { R271 += 1, R272 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R272 += 1, R1 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R274 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R274 += 1, R223 += 1, R224 += 1 };
  s0 -> s0 [0, 65535] { R273 += 1, R274 += 1 };
  s0 -> s3 [9, 13] { R274 += 1, R224 += 1 };
  s0 -> s1 [14, 31] { R274 += 1, R224 += 1 };
  s0 -> s3 [32, 32] { R274 += 1, R224 += 1 };
  s0 -> s1 [33, 65535] { R274 += 1, R224 += 1 };
  s1 -> s1 [0, 65535] { R274 += 1, R224 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R274 += 1 };
  s2 -> s1 [0, 8] { R274 += 1, R224 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R274 += 1, R223 += 1, R224 += 1 };
  s2 -> s3 [9, 13] { R274 += 1, R224 += 1 };
  s2 -> s1 [14, 31] { R274 += 1, R224 += 1 };
  s2 -> s3 [32, 32] { R274 += 1, R224 += 1 };
  s2 -> s1 [33, 65535] { R274 += 1, R224 += 1 };
  s3 -> s1 [0, 65535] { R274 += 1, R224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R274 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s0 [0, 65535] { R275 += 1, R276 += 1 };
  s0 -> s1 [0, 65535] { R276 += 1, R226 += 1, R8 += 1 };
  s0 -> s2 [0, 65535] { R276 += 1, R225 += 1, R226 += 1 };
  s1 -> s4 [0, 65535] { R276 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R276 += 1, R226 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R276 += 1, R226 += 1, R8 += 1 };
  s2 -> s2 [0, 65535] { R276 += 1, R225 += 1, R226 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R276 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R278 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R278 += 1, R227 += 1, R228 += 1 };
  s0 -> s0 [0, 65535] { R277 += 1, R278 += 1 };
  s0 -> s3 [9, 13] { R278 += 1, R228 += 1 };
  s0 -> s1 [14, 31] { R278 += 1, R228 += 1 };
  s0 -> s3 [32, 32] { R278 += 1, R228 += 1 };
  s0 -> s1 [33, 65535] { R278 += 1, R228 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R278 += 1 };
  s1 -> s1 [0, 65535] { R278 += 1, R228 += 1 };
  s2 -> s1 [0, 8] { R278 += 1, R228 += 1 };
  s2 -> s2 [0, 65535] { R278 += 1, R227 += 1, R228 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R278 += 1, R228 += 1 };
  s2 -> s1 [14, 31] { R278 += 1, R228 += 1 };
  s2 -> s3 [32, 32] { R278 += 1, R228 += 1 };
  s2 -> s1 [33, 65535] { R278 += 1, R228 += 1 };
  s3 -> s1 [0, 65535] { R278 += 1, R228 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R278 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s0 [0, 65535] { R279 += 1, R280 += 1 };
  s0 -> s1 [0, 65535] { R280 += 1, R230 += 1, R9 += 1 };
  s0 -> s2 [0, 65535] { R280 += 1, R229 += 1, R230 += 1 };
  s1 -> s4 [0, 65535] { R280 += 1 };
  s1 -> s1 [0, 65535] { R280 += 1, R230 += 1, R9 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R280 += 1, R230 += 1, R9 += 1 };
  s2 -> s2 [0, 65535] { R280 += 1, R229 += 1, R230 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R280 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R20 += 1 };
  s1 -> s1 [0, 60] { R20 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R20 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s0 [0, 65535] { R285 += 1, R286 += 1 };
  s0 -> s1 [0, 65535] { R286 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R286 += 1, R3 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R287 += 1, R288 += 1 };
  s0 -> s1 [0, 65535] { R288 += 1, R239 += 1, R240 += 1 };
  s0 -> s2 [12, 12] { R288 += 1, R240 += 1 };
  s1 -> s1 [0, 65535] { R288 += 1, R239 += 1, R240 += 1 };
  s1 -> s2 [12, 12] { R288 += 1, R240 += 1 };
  s2 -> s2 [0, 65535] { R288 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R290 += 1, R242 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R289 += 1, R290 += 1 };
  s0 -> s2 [0, 65535] { R290 += 1, R241 += 1, R242 += 1 };
  s1 -> s1 [0, 65535] { R290 += 1, R242 += 1, R12 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R290 += 1 };
  s2 -> s1 [0, 65535] { R290 += 1, R242 += 1, R12 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R290 += 1, R241 += 1, R242 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R290 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R292 += 1, R258 += 1 };
  s0 -> s2 [0, 65535] { R292 += 1, R257 += 1, R258 += 1 };
  s0 -> s0 [0, 65535] { R291 += 1, R292 += 1 };
  s0 -> s1 [91, 65535] { R292 += 1, R258 += 1 };
  s1 -> s1 [0, 64] { R292 += 1, R258 += 1 };
  s1 -> s1 [0, 65535] { R292 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R292 += 1, R258 += 1 };
  s2 -> s1 [0, 64] { R292 += 1, R258 += 1 };
  s2 -> s2 [0, 65535] { R292 += 1, R257 += 1, R258 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R292 += 1, R258 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R294 += 1, R259 += 1, R260 += 1 };
  s0 -> s2 [0, 65535] { R294 += 1, R260 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R293 += 1, R294 += 1 };
  s1 -> s1 [0, 65535] { R294 += 1, R259 += 1, R260 += 1 };
  s1 -> s2 [0, 65535] { R294 += 1, R260 += 1, R0 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s3 [0, 65535] { R294 += 1 };
  s2 -> s2 [0, 65535] { R294 += 1, R260 += 1, R0 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R294 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R296 += 1, R262 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R295 += 1, R296 += 1 };
  s0 -> s2 [0, 65535] { R296 += 1, R261 += 1, R262 += 1 };
  s0 -> s3 [0, 65535] { R296 += 1, R262 += 1, R215 += 1, R216 += 1 };
  s0 -> s4 [9, 13] { R296 += 1, R262 += 1, R216 += 1 };
  s0 -> s1 [14, 31] { R296 += 1, R262 += 1, R216 += 1 };
  s0 -> s4 [32, 32] { R296 += 1, R262 += 1, R216 += 1 };
  s0 -> s1 [33, 65535] { R296 += 1, R262 += 1, R216 += 1 };
  s1 -> s7 [0, 65535] { R296 += 1, R262 += 1 };
  s1 -> s5 [0, 65535] { R296 += 1 };
  s1 -> s1 [0, 65535] { R296 += 1, R262 += 1, R216 += 1 };
  s1 -> s6 [0, 65535];
  s2 -> s1 [0, 8] { R296 += 1, R262 += 1, R216 += 1 };
  s2 -> s2 [0, 65535] { R296 += 1, R261 += 1, R262 += 1 };
  s2 -> s3 [0, 65535] { R296 += 1, R262 += 1, R215 += 1, R216 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s4 [9, 13] { R296 += 1, R262 += 1, R216 += 1 };
  s2 -> s1 [14, 31] { R296 += 1, R262 += 1, R216 += 1 };
  s2 -> s4 [32, 32] { R296 += 1, R262 += 1, R216 += 1 };
  s2 -> s1 [33, 65535] { R296 += 1, R262 += 1, R216 += 1 };
  s3 -> s1 [0, 8] { R296 += 1, R262 += 1, R216 += 1 };
  s3 -> s5 [0, 65535] { R296 += 1 };
  s3 -> s3 [0, 65535] { R296 += 1, R262 += 1, R215 += 1, R216 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s4 [9, 13] { R296 += 1, R262 += 1, R216 += 1 };
  s3 -> s1 [14, 31] { R296 += 1, R262 += 1, R216 += 1 };
  s3 -> s4 [32, 32] { R296 += 1, R262 += 1, R216 += 1 };
  s3 -> s1 [33, 65535] { R296 += 1, R262 += 1, R216 += 1 };
  s4 -> s1 [0, 65535] { R296 += 1, R262 += 1, R216 += 1 };
  s5 -> s5 [0, 65535] { R296 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R296 += 1, R262 += 1 };
  s7 -> s5 [0, 65535] { R296 += 1 };
  s7 -> s6 [0, 65535];
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R298 += 1, R264 += 1, R217 += 1, R218 += 1 };
  s0 -> s2 [0, 65535] { R298 += 1, R264 += 1, R218 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R297 += 1, R298 += 1 };
  s0 -> s3 [0, 65535] { R298 += 1, R263 += 1, R264 += 1 };
  s1 -> s1 [0, 65535] { R298 += 1, R264 += 1, R217 += 1, R218 += 1 };
  s1 -> s2 [0, 65535] { R298 += 1, R264 += 1, R218 += 1, R6 += 1 };
  s1 -> s6 [0, 65535] { R298 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s5 [0, 65535] { R298 += 1, R264 += 1 };
  s2 -> s2 [0, 65535] { R298 += 1, R264 += 1, R218 += 1, R6 += 1 };
  s2 -> s6 [0, 65535] { R298 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s1 [0, 65535] { R298 += 1, R264 += 1, R217 += 1, R218 += 1 };
  s3 -> s2 [0, 65535] { R298 += 1, R264 += 1, R218 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R298 += 1, R263 += 1, R264 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R298 += 1, R264 += 1 };
  s5 -> s6 [0, 65535] { R298 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R298 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R300 += 1, R266 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R300 += 1, R266 += 1, R219 += 1, R220 += 1 };
  s0 -> s3 [0, 65535] { R300 += 1, R265 += 1, R266 += 1 };
  s0 -> s0 [0, 65535] { R299 += 1, R300 += 1 };
  s0 -> s4 [9, 13] { R300 += 1, R266 += 1, R220 += 1 };
  s0 -> s1 [14, 31] { R300 += 1, R266 += 1, R220 += 1 };
  s0 -> s4 [32, 32] { R300 += 1, R266 += 1, R220 += 1 };
  s0 -> s1 [33, 65535] { R300 += 1, R266 += 1, R220 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R300 += 1, R266 += 1, R220 += 1 };
  s1 -> s6 [0, 65535] { R300 += 1 };
  s1 -> s7 [0, 65535] { R300 += 1, R266 += 1 };
  s2 -> s1 [0, 8] { R300 += 1, R266 += 1, R220 += 1 };
  s2 -> s2 [0, 65535] { R300 += 1, R266 += 1, R219 += 1, R220 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s6 [0, 65535] { R300 += 1 };
  s2 -> s4 [9, 13] { R300 += 1, R266 += 1, R220 += 1 };
  s2 -> s1 [14, 31] { R300 += 1, R266 += 1, R220 += 1 };
  s2 -> s4 [32, 32] { R300 += 1, R266 += 1, R220 += 1 };
  s2 -> s1 [33, 65535] { R300 += 1, R266 += 1, R220 += 1 };
  s3 -> s1 [0, 8] { R300 += 1, R266 += 1, R220 += 1 };
  s3 -> s2 [0, 65535] { R300 += 1, R266 += 1, R219 += 1, R220 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R300 += 1, R265 += 1, R266 += 1 };
  s3 -> s4 [9, 13] { R300 += 1, R266 += 1, R220 += 1 };
  s3 -> s1 [14, 31] { R300 += 1, R266 += 1, R220 += 1 };
  s3 -> s4 [32, 32] { R300 += 1, R266 += 1, R220 += 1 };
  s3 -> s1 [33, 65535] { R300 += 1, R266 += 1, R220 += 1 };
  s4 -> s1 [0, 65535] { R300 += 1, R266 += 1, R220 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R300 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R300 += 1 };
  s7 -> s7 [0, 65535] { R300 += 1, R266 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s0 [0, 65535] { R301 += 1, R302 += 1 };
  s0 -> s1 [0, 65535] { R302 += 1, R267 += 1, R268 += 1 };
  s0 -> s2 [0, 65535] { R302 += 1, R268 += 1, R221 += 1, R222 += 1 };
  s0 -> s3 [0, 65535] { R302 += 1, R268 += 1, R222 += 1, R7 += 1 };
  s1 -> s6 [0, 65535];
  s1 -> s1 [0, 65535] { R302 += 1, R267 += 1, R268 += 1 };
  s1 -> s2 [0, 65535] { R302 += 1, R268 += 1, R221 += 1, R222 += 1 };
  s1 -> s3 [0, 65535] { R302 += 1, R268 += 1, R222 += 1, R7 += 1 };
  s2 -> s5 [0, 65535] { R302 += 1 };
  s2 -> s6 [0, 65535];
  s2 -> s2 [0, 65535] { R302 += 1, R268 += 1, R221 += 1, R222 += 1 };
  s2 -> s3 [0, 65535] { R302 += 1, R268 += 1, R222 += 1, R7 += 1 };
  s3 -> s4 [0, 65535] { R302 += 1, R268 += 1 };
  s3 -> s5 [0, 65535] { R302 += 1 };
  s3 -> s6 [0, 65535];
  s3 -> s3 [0, 65535] { R302 += 1, R268 += 1, R222 += 1, R7 += 1 };
  s4 -> s4 [0, 65535] { R302 += 1, R268 += 1 };
  s4 -> s5 [0, 65535] { R302 += 1 };
  s4 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R302 += 1 };
  s5 -> s6 [0, 65535];
  s6 -> s6 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R304 += 1 };
  s0 -> s0 [0, 65535] { R303 += 1, R304 += 1 };
  s0 -> s2 [66, 66] { R304 += 1 };
  s0 -> s1 [67, 65535] { R304 += 1 };
  s1 -> s1 [0, 64] { R304 += 1 };
  s1 -> s2 [66, 66] { R304 += 1 };
  s1 -> s1 [67, 65535] { R304 += 1 };
  s2 -> s2 [0, 64] { R304 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R304 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s0 [0, 65535] { R305 += 1, R306 += 1 };
  s0 -> s1 [0, 65535] { R306 += 1, R2 += 1 };
  s1 -> s1 [0, 65535] { R306 += 1, R2 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65] { R308 += 1 };
  s0 -> s2 [0, 65535] { R308 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R307 += 1, R308 += 1 };
  s0 -> s3 [66, 66] { R308 += 1 };
  s0 -> s1 [67, 65535] { R308 += 1 };
  s1 -> s1 [0, 65] { R308 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R308 += 1 };
  s1 -> s1 [67, 65535] { R308 += 1 };
  s2 -> s1 [0, 65] { R308 += 1 };
  s2 -> s2 [0, 65535] { R308 += 1, R15 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [66, 66] { R308 += 1 };
  s2 -> s1 [67, 65535] { R308 += 1 };
  s3 -> s3 [0, 65535] { R308 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R310 += 1, R232 += 1 };
  s0 -> s0 [0, 65535] { R309 += 1, R310 += 1 };
  s0 -> s2 [0, 65535] { R310 += 1, R231 += 1, R232 += 1 };
  s0 -> s3 [9, 13] { R310 += 1, R232 += 1 };
  s0 -> s1 [14, 31] { R310 += 1, R232 += 1 };
  s0 -> s3 [32, 32] { R310 += 1, R232 += 1 };
  s0 -> s1 [33, 65535] { R310 += 1, R232 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R310 += 1, R232 += 1 };
  s1 -> s5 [0, 65535] { R310 += 1 };
  s2 -> s1 [0, 8] { R310 += 1, R232 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R310 += 1, R231 += 1, R232 += 1 };
  s2 -> s3 [9, 13] { R310 += 1, R232 += 1 };
  s2 -> s1 [14, 31] { R310 += 1, R232 += 1 };
  s2 -> s3 [32, 32] { R310 += 1, R232 += 1 };
  s2 -> s1 [33, 65535] { R310 += 1, R232 += 1 };
  s3 -> s1 [0, 65535] { R310 += 1, R232 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R310 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s0 [0, 65535] { R311 += 1, R312 += 1 };
  s0 -> s1 [0, 65535] { R312 += 1, R234 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R312 += 1, R233 += 1, R234 += 1 };
  s1 -> s4 [0, 65535] { R312 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R312 += 1, R234 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R312 += 1, R234 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R312 += 1, R233 += 1, R234 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R312 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R314 += 1, R236 += 1 };
  s0 -> s2 [0, 65535] { R314 += 1, R235 += 1, R236 += 1 };
  s0 -> s0 [0, 65535] { R313 += 1, R314 += 1 };
  s0 -> s3 [9, 13] { R314 += 1, R236 += 1 };
  s0 -> s1 [14, 31] { R314 += 1, R236 += 1 };
  s0 -> s3 [32, 32] { R314 += 1, R236 += 1 };
  s0 -> s1 [33, 65535] { R314 += 1, R236 += 1 };
  s1 -> s5 [0, 65535] { R314 += 1 };
  s1 -> s1 [0, 65535] { R314 += 1, R236 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R314 += 1, R236 += 1 };
  s2 -> s2 [0, 65535] { R314 += 1, R235 += 1, R236 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R314 += 1, R236 += 1 };
  s2 -> s1 [14, 31] { R314 += 1, R236 += 1 };
  s2 -> s3 [32, 32] { R314 += 1, R236 += 1 };
  s2 -> s1 [33, 65535] { R314 += 1, R236 += 1 };
  s3 -> s1 [0, 65535] { R314 += 1, R236 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R314 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R316 += 1, R237 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R316 += 1, R238 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R315 += 1, R316 += 1 };
  s1 -> s1 [0, 65535] { R316 += 1, R237 += 1, R238 += 1 };
  s1 -> s2 [0, 65535] { R316 += 1, R238 += 1, R11 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R316 += 1, R238 += 1, R11 += 1 };
  s2 -> s3 [0, 65535] { R316 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R316 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65] { R318 += 1, R252 += 1 };
  s0 -> s0 [0, 65535] { R317 += 1, R318 += 1 };
  s0 -> s2 [0, 65535] { R318 += 1, R251 += 1, R252 += 1 };
  s0 -> s1 [67, 65535] { R318 += 1, R252 += 1 };
  s1 -> s1 [0, 65] { R318 += 1, R252 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R318 += 1 };
  s1 -> s1 [67, 65535] { R318 += 1, R252 += 1 };
  s2 -> s1 [0, 65] { R318 += 1, R252 += 1 };
  s2 -> s2 [0, 65535] { R318 += 1, R251 += 1, R252 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [67, 65535] { R318 += 1, R252 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R320 += 1, R253 += 1, R254 += 1 };
  s0 -> s0 [0, 65535] { R319 += 1, R320 += 1 };
  s0 -> s2 [0, 65535] { R320 += 1, R254 += 1, R213 += 1 };
  s1 -> s1 [0, 65535] { R320 += 1, R253 += 1, R254 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R320 += 1, R254 += 1, R213 += 1 };
  s2 -> s3 [0, 65535] { R320 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R320 += 1, R254 += 1, R213 += 1 };
  s3 -> s3 [0, 65535] { R320 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 66] { R322 += 1, R256 += 1 };
  s0 -> s0 [0, 65535] { R321 += 1, R322 += 1 };
  s0 -> s2 [0, 65535] { R322 += 1, R255 += 1, R256 += 1 };
  s0 -> s3 [73, 73] { R322 += 1, R256 += 1 };
  s0 -> s1 [74, 65535] { R322 += 1, R256 += 1 };
  s1 -> s1 [0, 66] { R322 += 1, R256 += 1 };
  s1 -> s3 [73, 73] { R322 += 1, R256 += 1 };
  s1 -> s1 [74, 65535] { R322 += 1, R256 += 1 };
  s2 -> s1 [0, 66] { R322 += 1, R256 += 1 };
  s2 -> s2 [0, 65535] { R322 += 1, R255 += 1, R256 += 1 };
  s2 -> s3 [73, 73] { R322 += 1, R256 += 1 };
  s2 -> s1 [74, 65535] { R322 += 1, R256 += 1 };
  s3 -> s3 [0, 66] { R322 += 1, R256 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R322 += 1 };
  s3 -> s3 [73, 65535] { R322 += 1, R256 += 1 };
  s4 -> s4 [0, 65535];
  accepting s3, s4;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R323 += 1, R324 += 1 };
  s0 -> s1 [0, 65535] { R324 += 1, R282 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R324 += 1, R281 += 1, R282 += 1 };
  s1 -> s1 [0, 65535] { R324 += 1, R282 += 1, R214 += 1 };
  s1 -> s4 [0, 65535] { R324 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R324 += 1, R282 += 1, R214 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R324 += 1, R281 += 1, R282 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R324 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65] { R326 += 1, R284 += 1 };
  s0 -> s0 [0, 65535] { R325 += 1, R326 += 1 };
  s0 -> s2 [0, 65535] { R326 += 1, R283 += 1, R284 += 1 };
  s0 -> s3 [66, 66] { R326 += 1, R284 += 1 };
  s0 -> s4 [66, 66] { R326 += 1, R284 += 1 };
  s0 -> s1 [74, 65535] { R326 += 1, R284 += 1 };
  s1 -> s1 [0, 65] { R326 += 1, R284 += 1 };
  s1 -> s1 [0, 65535] { R326 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s3 [66, 66] { R326 += 1, R284 += 1 };
  s1 -> s4 [66, 66] { R326 += 1, R284 += 1 };
  s1 -> s1 [74, 65535] { R326 += 1, R284 += 1 };
  s2 -> s1 [0, 65] { R326 += 1, R284 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R326 += 1, R283 += 1, R284 += 1 };
  s2 -> s3 [66, 66] { R326 += 1, R284 += 1 };
  s2 -> s4 [66, 66] { R326 += 1, R284 += 1 };
  s2 -> s1 [74, 65535] { R326 += 1, R284 += 1 };
  s3 -> s3 [0, 65535] { R326 += 1 };
  s3 -> s5 [0, 65535];
  s4 -> s4 [0, 66] { R326 += 1, R284 += 1 };
  s4 -> s5 [0, 65535];
  s4 -> s4 [0, 65535] { R326 += 1 };
  s4 -> s4 [74, 65535] { R326 += 1, R284 += 1 };
  s5 -> s5 [0, 65535];
  accepting s3, s4, s5, s2, s1, s0;
};
};
constraint R2 = R256 && R3 = R268 && R4 = R326 && R5 - R280 = 1 && R19 = 0 && R20 - R325 = -1 && R231 - R256 = -1 && R232 = R256 && R233 - R256 = -1 && R234 = R256 && R235 = 0 && R236 = 1 && R237 = 0 && R238 = 1 && R239 = 0 && R240 = 1 && R241 = 0 && R242 = 1 && R243 = R280 && R244 - R280 = 1 && R245 = R280 && R246 - R280 = 1 && R247 = 0 && R248 = 1 && R249 = 0 && R250 = 1 && R251 = 0 && R252 = R256 && R253 = 0 && R254 = R256 && R255 = 0 && R257 = 1 && R258 = R268 && R259 = 1 && R260 = R268 && R261 = 1 && R262 = R268 && R263 = 1 && R264 = R268 && R265 = 1 && R266 = R268 && R267 = 1 && R269 = 0 && R270 = R280 && R271 = 0 && R272 = R280 && R273 = 0 && R274 = R280 && R275 = 0 && R276 = R280 && R277 = 0 && R278 = R280 && R279 = 0 && R285 = 0 && R286 - R325 = -1 && R287 = 0 && R288 - R325 = -1 && R289 = 0 && R290 - R325 = -1 && R291 = 0 && R292 - R325 = -1 && R293 = 0 && R294 - R325 = -1 && R295 = 0 && R296 - R325 = -1 && R297 = 0 && R298 - R325 = -1 && R299 = 0 && R300 - R325 = -1 && R301 = 0 && R302 - R325 = -1 && R303 = R325 && R304 = R326 && R305 = R325 && R306 = R326 && R307 = R325 && R308 = R326 && R309 = R325 && R310 = R326 && R311 = R325 && R312 = R326 && R313 = R325 && R314 = R326 && R315 = R325 && R316 = R326 && R317 = R325 && R318 = R326 && R319 = R325 && R320 = R326 && R321 = R325 && R322 = R326 && R323 = R325 && R324 = R326 && R0 != 0 && R1 != 0 && R15 < 1 && R212 < 1 && 0 < R256 && 0 < R268 && -1 < R280 && R325 - R326 < 1 && 0 < R325 && (R6 != 0 || ((R0 != R216 || R215 - R216 = -1 || R216 < 0) && (R0 = R216 || R0 < 1))) && (R6 != 0 || ((R0 != R218 || R217 - R218 = -1 || R218 < 0) && (R0 = R218 || R0 < 1))) && (R8 != 0 || ((R1 != R224 || R223 - R224 = -1 || R224 < 0) && (R1 = R224 || R1 < 1))) && (R8 != 0 || ((R1 != R226 || R225 - R226 = -1 || R226 < 0) && (R1 = R226 || R1 < 1))) && (R219 != 0 || ((R7 != 0 || ((R0 != R220 || R220 = 1 || R220 < 0) && (R0 = R220 || R220 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R220 || R220 = 1 || R220 < 0) && (R220 != 1 || -1 < R0) && (R0 = R220 || R220 = 1))))) && (R221 != 0 || ((R7 != 0 || ((R0 != R222 || R222 = 1 || R222 < 0) && (R0 = R222 || R222 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R222 || R222 = 1 || R222 < 0) && (R222 != 1 || -1 < R0) && (R0 = R222 || R222 = 1))))) && (R227 != 0 || ((R9 != 0 || ((R1 != R228 || R228 = 1 || R228 < 0) && (R1 = R228 || R228 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R228 || R228 = 1 || R228 < 0) && (R228 != 1 || -1 < R1) && (R1 = R228 || R228 = 1))))) && (R229 != 0 || ((R9 != 0 || ((R1 != R230 || R230 = 1 || R230 < 0) && (R1 = R230 || R230 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R230 || R230 = 1 || R230 < 0) && (R230 != 1 || -1 < R1) && (R1 = R230 || R230 = 1))))) && (R6 = 0 || (R0 = R216 && R215 - R216 = -1)) && (R6 = 0 || (R0 = R218 && R217 - R218 = -1)) && (R8 = 0 || (R1 = R224 && R223 - R224 = -1)) && (R8 = 0 || (R1 = R226 && R225 - R226 = -1)) && (R214 = 0 || (R281 = 0 && R282 = 0)) && (R214 = 0 || (R283 = 0 && R284 = 0)) && (R219 = 0 || (R7 = 0 && R0 < 0)) && (R221 = 0 || (R7 = 0 && R0 < 0)) && (R227 = 0 || (R9 = 0 && R1 < 0)) && (R229 = 0 || (R9 = 0 && R1 < 0));
// End of Parikh automata intersection problem
