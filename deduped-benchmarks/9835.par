// Parikh automata intersection problem, generated by OSTRICH+
counter int R0, R1, R10, R11, R12, R13, R14, R15, R19, R2, R20, R212, R213, R214, R215, R216, R217, R218, R219, R220, R221, R222, R223, R224, R225, R226, R227, R228, R229, R230, R231, R232, R233, R234, R235, R236, R237, R238, R239, R240, R241, R242, R243, R244, R245, R246, R247, R248, R249, R250, R3, R327, R328, R329, R330, R331, R332, R333, R334, R335, R336, R337, R338, R339, R340, R341, R342, R343, R344, R345, R346, R347, R348, R349, R350, R351, R352, R353, R354, R355, R356, R357, R358, R359, R360, R361, R362, R363, R364, R365, R366, R367, R368, R369, R370, R371, R372, R373, R374, R375, R376, R377, R378, R379, R380, R381, R382, R383, R384, R385, R386, R387, R388, R389, R390, R391, R392, R393, R394, R395, R396, R397, R398, R399, R4, R400, R401, R402, R5, R6, R7, R8, R9;
synchronised {  // Automata constraining value2
automaton value2_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 65535];
  accepting s0;
};
automaton value2_1 {
  init s0;
  s0 -> s0 [0, 65535] { R5 += 1 };
  accepting s0;
};
automaton value2_2 {
  init s0;
  s0 -> s1 [0, 60];
  s0 -> s0 [0, 65535] { R212 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535];
  s1 -> s1 [0, 60];
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1;
};
automaton value2_3 {
  init s0;
  s0 -> s0 [0, 65535] { R243 += 1, R244 += 1 };
  s0 -> s1 [13, 13] { R244 += 1 };
  s1 -> s1 [0, 65535];
  accepting s1;
};
automaton value2_4 {
  init s0;
  s0 -> s1 [0, 65535] { R246 += 1, R13 += 1 };
  s0 -> s0 [0, 65535] { R245 += 1, R246 += 1 };
  s1 -> s1 [0, 65535] { R246 += 1, R13 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_5 {
  init s0;
  s0 -> s1 [0, 8] { R248 += 1 };
  s0 -> s0 [0, 65535] { R247 += 1, R248 += 1 };
  s0 -> s2 [9, 13] { R248 += 1 };
  s0 -> s1 [14, 31] { R248 += 1 };
  s0 -> s2 [32, 32] { R248 += 1 };
  s0 -> s1 [33, 65535] { R248 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R248 += 1 };
  s2 -> s1 [0, 65535] { R248 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s3;
};
automaton value2_6 {
  init s0;
  s0 -> s1 [0, 65535] { R250 += 1, R14 += 1 };
  s0 -> s0 [0, 65535] { R249 += 1, R250 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R250 += 1, R14 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_7 {
  init s0;
  s0 -> s1 [0, 64] { R346 += 1 };
  s0 -> s0 [0, 65535] { R345 += 1, R346 += 1 };
  s0 -> s1 [91, 65535] { R346 += 1 };
  s1 -> s1 [0, 64] { R346 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s1 [91, 65535] { R346 += 1 };
  accepting s0, s1;
};
automaton value2_8 {
  init s0;
  s0 -> s0 [0, 65535] { R347 += 1, R348 += 1 };
  s0 -> s1 [0, 65535] { R348 += 1, R1 += 1 };
  s1 -> s1 [0, 65535] { R348 += 1, R1 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value2_9 {
  init s0;
  s0 -> s1 [0, 8] { R350 += 1, R224 += 1 };
  s0 -> s2 [0, 65535] { R350 += 1, R223 += 1, R224 += 1 };
  s0 -> s0 [0, 65535] { R349 += 1, R350 += 1 };
  s0 -> s3 [9, 13] { R350 += 1, R224 += 1 };
  s0 -> s1 [14, 31] { R350 += 1, R224 += 1 };
  s0 -> s3 [32, 32] { R350 += 1, R224 += 1 };
  s0 -> s1 [33, 65535] { R350 += 1, R224 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s1 [0, 65535] { R350 += 1, R224 += 1 };
  s1 -> s5 [0, 65535] { R350 += 1 };
  s2 -> s1 [0, 8] { R350 += 1, R224 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R350 += 1, R223 += 1, R224 += 1 };
  s2 -> s3 [9, 13] { R350 += 1, R224 += 1 };
  s2 -> s1 [14, 31] { R350 += 1, R224 += 1 };
  s2 -> s3 [32, 32] { R350 += 1, R224 += 1 };
  s2 -> s1 [33, 65535] { R350 += 1, R224 += 1 };
  s3 -> s1 [0, 65535] { R350 += 1, R224 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R350 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_10 {
  init s0;
  s0 -> s1 [0, 65535] { R352 += 1, R225 += 1, R226 += 1 };
  s0 -> s0 [0, 65535] { R351 += 1, R352 += 1 };
  s0 -> s2 [0, 65535] { R352 += 1, R226 += 1, R8 += 1 };
  s1 -> s1 [0, 65535] { R352 += 1, R225 += 1, R226 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R352 += 1, R226 += 1, R8 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R352 += 1 };
  s2 -> s2 [0, 65535] { R352 += 1, R226 += 1, R8 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R352 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value2_11 {
  init s0;
  s0 -> s1 [0, 8] { R354 += 1, R228 += 1 };
  s0 -> s2 [0, 65535] { R354 += 1, R227 += 1, R228 += 1 };
  s0 -> s0 [0, 65535] { R353 += 1, R354 += 1 };
  s0 -> s3 [9, 13] { R354 += 1, R228 += 1 };
  s0 -> s1 [14, 31] { R354 += 1, R228 += 1 };
  s0 -> s3 [32, 32] { R354 += 1, R228 += 1 };
  s0 -> s1 [33, 65535] { R354 += 1, R228 += 1 };
  s1 -> s1 [0, 65535] { R354 += 1, R228 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R354 += 1 };
  s2 -> s1 [0, 8] { R354 += 1, R228 += 1 };
  s2 -> s2 [0, 65535] { R354 += 1, R227 += 1, R228 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s3 [9, 13] { R354 += 1, R228 += 1 };
  s2 -> s1 [14, 31] { R354 += 1, R228 += 1 };
  s2 -> s3 [32, 32] { R354 += 1, R228 += 1 };
  s2 -> s1 [33, 65535] { R354 += 1, R228 += 1 };
  s3 -> s1 [0, 65535] { R354 += 1, R228 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R354 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value2_12 {
  init s0;
  s0 -> s1 [0, 65535] { R356 += 1, R229 += 1, R230 += 1 };
  s0 -> s0 [0, 65535] { R355 += 1, R356 += 1 };
  s0 -> s2 [0, 65535] { R356 += 1, R230 += 1, R9 += 1 };
  s1 -> s1 [0, 65535] { R356 += 1, R229 += 1, R230 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s2 [0, 65535] { R356 += 1, R230 += 1, R9 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R356 += 1 };
  s2 -> s2 [0, 65535] { R356 += 1, R230 += 1, R9 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R356 += 1 };
  accepting s3, s4, s2, s1, s0;
};
};
synchronised {  // Automata constraining P28
automaton P28_0 {
  init s0;
  s0 -> s1 [10, 10];
  accepting s1;
};
};
synchronised {  // Automata constraining P71
automaton P71_0 {
  init s0;
  s0 -> s1 [98, 98];
  accepting s1;
};
};
synchronised {  // Automata constraining P27
automaton P27_0 {
  init s0;
  s0 -> s1 [9, 9];
  accepting s1;
};
};
synchronised {  // Automata constraining P26
automaton P26_0 {
  init s0;
  s0 -> s1 [32, 32];
  accepting s1;
};
};
synchronised {  // Automata constraining P30
automaton P30_0 {
  init s0;
  s0 -> s1 [11, 11];
  accepting s1;
};
};
synchronised {  // Automata constraining value1
automaton value1_0 {
  init s0;
  s0 -> s0 [0, 43];
  s0 -> s0 [45, 60];
  s0 -> s1 [61, 61];
  s0 -> s0 [62, 65535];
  s1 -> s1 [0, 43];
  s1 -> s1 [45, 65535];
  accepting s1;
};
automaton value1_1 {
  init s0;
  s0 -> s0 [0, 65535] { R4 += 1 };
  accepting s0;
};
automaton value1_2 {
  init s0;
  s0 -> s1 [0, 60] { R20 += 1 };
  s0 -> s0 [0, 65535] { R19 += 1, R20 += 1 };
  s0 -> s2 [61, 61];
  s0 -> s1 [62, 65535] { R20 += 1 };
  s1 -> s1 [0, 60] { R20 += 1 };
  s1 -> s2 [61, 61];
  s1 -> s1 [62, 65535] { R20 += 1 };
  s2 -> s2 [0, 65535];
  accepting s2;
};
automaton value1_3 {
  init s0;
  s0 -> s1 [0, 65535] { R362 += 1, R3 += 1 };
  s0 -> s0 [0, 65535] { R361 += 1, R362 += 1 };
  s1 -> s1 [0, 65535] { R362 += 1, R3 += 1 };
  s1 -> s2 [0, 65535];
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_4 {
  init s0;
  s0 -> s0 [0, 65535] { R363 += 1, R364 += 1 };
  s0 -> s1 [0, 65535] { R364 += 1, R239 += 1, R240 += 1 };
  s0 -> s2 [12, 12] { R364 += 1, R240 += 1 };
  s1 -> s1 [0, 65535] { R364 += 1, R239 += 1, R240 += 1 };
  s1 -> s2 [12, 12] { R364 += 1, R240 += 1 };
  s2 -> s2 [0, 65535] { R364 += 1 };
  s2 -> s3 [0, 65535];
  s3 -> s3 [0, 65535];
  accepting s2, s3;
};
automaton value1_5 {
  init s0;
  s0 -> s1 [0, 65535] { R366 += 1, R241 += 1, R242 += 1 };
  s0 -> s2 [0, 65535] { R366 += 1, R242 += 1, R12 += 1 };
  s0 -> s0 [0, 65535] { R365 += 1, R366 += 1 };
  s1 -> s1 [0, 65535] { R366 += 1, R241 += 1, R242 += 1 };
  s1 -> s2 [0, 65535] { R366 += 1, R242 += 1, R12 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R366 += 1, R242 += 1, R12 += 1 };
  s2 -> s3 [0, 65535] { R366 += 1 };
  s2 -> s4 [0, 65535];
  s3 -> s3 [0, 65535] { R366 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_6 {
  init s0;
  s0 -> s1 [0, 64] { R368 += 1, R334 += 1 };
  s0 -> s0 [0, 65535] { R367 += 1, R368 += 1 };
  s0 -> s2 [0, 65535] { R368 += 1, R333 += 1, R334 += 1 };
  s0 -> s1 [91, 65535] { R368 += 1, R334 += 1 };
  s1 -> s1 [0, 64] { R368 += 1, R334 += 1 };
  s1 -> s1 [0, 65535] { R368 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [91, 65535] { R368 += 1, R334 += 1 };
  s2 -> s1 [0, 64] { R368 += 1, R334 += 1 };
  s2 -> s2 [0, 65535] { R368 += 1, R333 += 1, R334 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [91, 65535] { R368 += 1, R334 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_7 {
  init s0;
  s0 -> s1 [0, 65535] { R370 += 1, R336 += 1, R0 += 1 };
  s0 -> s0 [0, 65535] { R369 += 1, R370 += 1 };
  s0 -> s2 [0, 65535] { R370 += 1, R335 += 1, R336 += 1 };
  s1 -> s1 [0, 65535] { R370 += 1, R336 += 1, R0 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s4 [0, 65535] { R370 += 1 };
  s2 -> s1 [0, 65535] { R370 += 1, R336 += 1, R0 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R370 += 1, R335 += 1, R336 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R370 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_8 {
  init s0;
  s0 -> s1 [0, 8] { R372 += 1, R338 += 1, R216 += 1 };
  s0 -> s2 [0, 65535] { R372 += 1, R337 += 1, R338 += 1 };
  s0 -> s3 [0, 65535] { R372 += 1, R338 += 1, R215 += 1, R216 += 1 };
  s0 -> s0 [0, 65535] { R371 += 1, R372 += 1 };
  s0 -> s4 [9, 13] { R372 += 1, R338 += 1, R216 += 1 };
  s0 -> s1 [14, 31] { R372 += 1, R338 += 1, R216 += 1 };
  s0 -> s4 [32, 32] { R372 += 1, R338 += 1, R216 += 1 };
  s0 -> s1 [33, 65535] { R372 += 1, R338 += 1, R216 += 1 };
  s1 -> s7 [0, 65535] { R372 += 1, R338 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R372 += 1, R338 += 1, R216 += 1 };
  s1 -> s6 [0, 65535] { R372 += 1 };
  s2 -> s1 [0, 8] { R372 += 1, R338 += 1, R216 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R372 += 1, R337 += 1, R338 += 1 };
  s2 -> s3 [0, 65535] { R372 += 1, R338 += 1, R215 += 1, R216 += 1 };
  s2 -> s4 [9, 13] { R372 += 1, R338 += 1, R216 += 1 };
  s2 -> s1 [14, 31] { R372 += 1, R338 += 1, R216 += 1 };
  s2 -> s4 [32, 32] { R372 += 1, R338 += 1, R216 += 1 };
  s2 -> s1 [33, 65535] { R372 += 1, R338 += 1, R216 += 1 };
  s3 -> s1 [0, 8] { R372 += 1, R338 += 1, R216 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s3 [0, 65535] { R372 += 1, R338 += 1, R215 += 1, R216 += 1 };
  s3 -> s6 [0, 65535] { R372 += 1 };
  s3 -> s4 [9, 13] { R372 += 1, R338 += 1, R216 += 1 };
  s3 -> s1 [14, 31] { R372 += 1, R338 += 1, R216 += 1 };
  s3 -> s4 [32, 32] { R372 += 1, R338 += 1, R216 += 1 };
  s3 -> s1 [33, 65535] { R372 += 1, R338 += 1, R216 += 1 };
  s4 -> s1 [0, 65535] { R372 += 1, R338 += 1, R216 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R372 += 1 };
  s7 -> s7 [0, 65535] { R372 += 1, R338 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s6 [0, 65535] { R372 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_9 {
  init s0;
  s0 -> s1 [0, 65535] { R374 += 1, R340 += 1, R218 += 1, R6 += 1 };
  s0 -> s0 [0, 65535] { R373 += 1, R374 += 1 };
  s0 -> s2 [0, 65535] { R374 += 1, R340 += 1, R217 += 1, R218 += 1 };
  s0 -> s3 [0, 65535] { R374 += 1, R339 += 1, R340 += 1 };
  s1 -> s6 [0, 65535] { R374 += 1, R340 += 1 };
  s1 -> s1 [0, 65535] { R374 += 1, R340 += 1, R218 += 1, R6 += 1 };
  s1 -> s5 [0, 65535] { R374 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 65535] { R374 += 1, R340 += 1, R218 += 1, R6 += 1 };
  s2 -> s5 [0, 65535] { R374 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R374 += 1, R340 += 1, R217 += 1, R218 += 1 };
  s3 -> s1 [0, 65535] { R374 += 1, R340 += 1, R218 += 1, R6 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s2 [0, 65535] { R374 += 1, R340 += 1, R217 += 1, R218 += 1 };
  s3 -> s3 [0, 65535] { R374 += 1, R339 += 1, R340 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R374 += 1 };
  s5 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R374 += 1, R340 += 1 };
  s6 -> s5 [0, 65535] { R374 += 1 };
  s6 -> s4 [0, 65535];
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_10 {
  init s0;
  s0 -> s1 [0, 8] { R376 += 1, R342 += 1, R220 += 1 };
  s0 -> s2 [0, 65535] { R376 += 1, R342 += 1, R219 += 1, R220 += 1 };
  s0 -> s0 [0, 65535] { R375 += 1, R376 += 1 };
  s0 -> s3 [0, 65535] { R376 += 1, R341 += 1, R342 += 1 };
  s0 -> s4 [9, 13] { R376 += 1, R342 += 1, R220 += 1 };
  s0 -> s1 [14, 31] { R376 += 1, R342 += 1, R220 += 1 };
  s0 -> s4 [32, 32] { R376 += 1, R342 += 1, R220 += 1 };
  s0 -> s1 [33, 65535] { R376 += 1, R342 += 1, R220 += 1 };
  s1 -> s5 [0, 65535];
  s1 -> s1 [0, 65535] { R376 += 1, R342 += 1, R220 += 1 };
  s1 -> s7 [0, 65535] { R376 += 1, R342 += 1 };
  s1 -> s6 [0, 65535] { R376 += 1 };
  s2 -> s1 [0, 8] { R376 += 1, R342 += 1, R220 += 1 };
  s2 -> s5 [0, 65535];
  s2 -> s2 [0, 65535] { R376 += 1, R342 += 1, R219 += 1, R220 += 1 };
  s2 -> s6 [0, 65535] { R376 += 1 };
  s2 -> s4 [9, 13] { R376 += 1, R342 += 1, R220 += 1 };
  s2 -> s1 [14, 31] { R376 += 1, R342 += 1, R220 += 1 };
  s2 -> s4 [32, 32] { R376 += 1, R342 += 1, R220 += 1 };
  s2 -> s1 [33, 65535] { R376 += 1, R342 += 1, R220 += 1 };
  s3 -> s1 [0, 8] { R376 += 1, R342 += 1, R220 += 1 };
  s3 -> s5 [0, 65535];
  s3 -> s2 [0, 65535] { R376 += 1, R342 += 1, R219 += 1, R220 += 1 };
  s3 -> s3 [0, 65535] { R376 += 1, R341 += 1, R342 += 1 };
  s3 -> s4 [9, 13] { R376 += 1, R342 += 1, R220 += 1 };
  s3 -> s1 [14, 31] { R376 += 1, R342 += 1, R220 += 1 };
  s3 -> s4 [32, 32] { R376 += 1, R342 += 1, R220 += 1 };
  s3 -> s1 [33, 65535] { R376 += 1, R342 += 1, R220 += 1 };
  s4 -> s1 [0, 65535] { R376 += 1, R342 += 1, R220 += 1 };
  s5 -> s5 [0, 65535];
  s6 -> s5 [0, 65535];
  s6 -> s6 [0, 65535] { R376 += 1 };
  s7 -> s5 [0, 65535];
  s7 -> s7 [0, 65535] { R376 += 1, R342 += 1 };
  s7 -> s6 [0, 65535] { R376 += 1 };
  accepting s3, s5, s2, s6, s1, s7, s0;
};
automaton value1_11 {
  init s0;
  s0 -> s1 [0, 65535] { R378 += 1, R344 += 1, R221 += 1, R222 += 1 };
  s0 -> s2 [0, 65535] { R378 += 1, R343 += 1, R344 += 1 };
  s0 -> s0 [0, 65535] { R377 += 1, R378 += 1 };
  s0 -> s3 [0, 65535] { R378 += 1, R344 += 1, R222 += 1, R7 += 1 };
  s1 -> s3 [0, 65535] { R378 += 1, R344 += 1, R222 += 1, R7 += 1 };
  s1 -> s1 [0, 65535] { R378 += 1, R344 += 1, R221 += 1, R222 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s6 [0, 65535] { R378 += 1 };
  s2 -> s1 [0, 65535] { R378 += 1, R344 += 1, R221 += 1, R222 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R378 += 1, R343 += 1, R344 += 1 };
  s2 -> s3 [0, 65535] { R378 += 1, R344 += 1, R222 += 1, R7 += 1 };
  s3 -> s3 [0, 65535] { R378 += 1, R344 += 1, R222 += 1, R7 += 1 };
  s3 -> s4 [0, 65535];
  s3 -> s5 [0, 65535] { R378 += 1, R344 += 1 };
  s3 -> s6 [0, 65535] { R378 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R378 += 1, R344 += 1 };
  s5 -> s6 [0, 65535] { R378 += 1 };
  s6 -> s4 [0, 65535];
  s6 -> s6 [0, 65535] { R378 += 1 };
  accepting s3, s4, s5, s2, s6, s1, s0;
};
automaton value1_12 {
  init s0;
  s0 -> s1 [0, 64] { R380 += 1 };
  s0 -> s0 [0, 65535] { R379 += 1, R380 += 1 };
  s0 -> s2 [66, 66] { R380 += 1 };
  s0 -> s1 [67, 65535] { R380 += 1 };
  s1 -> s1 [0, 64] { R380 += 1 };
  s1 -> s2 [66, 66] { R380 += 1 };
  s1 -> s1 [67, 65535] { R380 += 1 };
  s2 -> s2 [0, 64] { R380 += 1 };
  s2 -> s2 [0, 65535];
  s2 -> s2 [66, 65535] { R380 += 1 };
  accepting s2;
};
automaton value1_13 {
  init s0;
  s0 -> s1 [0, 65535] { R382 += 1, R2 += 1 };
  s0 -> s0 [0, 65535] { R381 += 1, R382 += 1 };
  s1 -> s2 [0, 65535];
  s1 -> s1 [0, 65535] { R382 += 1, R2 += 1 };
  s2 -> s2 [0, 65535];
  accepting s0, s1, s2;
};
automaton value1_14 {
  init s0;
  s0 -> s1 [0, 65] { R384 += 1 };
  s0 -> s2 [0, 65535] { R384 += 1, R15 += 1 };
  s0 -> s0 [0, 65535] { R383 += 1, R384 += 1 };
  s0 -> s3 [66, 66] { R384 += 1 };
  s0 -> s1 [67, 65535] { R384 += 1 };
  s1 -> s1 [0, 65] { R384 += 1 };
  s1 -> s1 [0, 65535];
  s1 -> s3 [66, 66] { R384 += 1 };
  s1 -> s1 [67, 65535] { R384 += 1 };
  s2 -> s1 [0, 65] { R384 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R384 += 1, R15 += 1 };
  s2 -> s3 [66, 66] { R384 += 1 };
  s2 -> s1 [67, 65535] { R384 += 1 };
  s3 -> s3 [0, 65535] { R384 += 1 };
  s4 -> s4 [0, 65535];
  accepting s0, s1, s2, s4;
};
automaton value1_15 {
  init s0;
  s0 -> s1 [0, 8] { R386 += 1, R232 += 1 };
  s0 -> s0 [0, 65535] { R385 += 1, R386 += 1 };
  s0 -> s2 [0, 65535] { R386 += 1, R231 += 1, R232 += 1 };
  s0 -> s3 [9, 13] { R386 += 1, R232 += 1 };
  s0 -> s1 [14, 31] { R386 += 1, R232 += 1 };
  s0 -> s3 [32, 32] { R386 += 1, R232 += 1 };
  s0 -> s1 [33, 65535] { R386 += 1, R232 += 1 };
  s1 -> s1 [0, 65535] { R386 += 1, R232 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s5 [0, 65535] { R386 += 1 };
  s2 -> s1 [0, 8] { R386 += 1, R232 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R386 += 1, R231 += 1, R232 += 1 };
  s2 -> s3 [9, 13] { R386 += 1, R232 += 1 };
  s2 -> s1 [14, 31] { R386 += 1, R232 += 1 };
  s2 -> s3 [32, 32] { R386 += 1, R232 += 1 };
  s2 -> s1 [33, 65535] { R386 += 1, R232 += 1 };
  s3 -> s1 [0, 65535] { R386 += 1, R232 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R386 += 1 };
  accepting s4, s5, s2, s1, s0;
};
automaton value1_16 {
  init s0;
  s0 -> s1 [0, 65535] { R388 += 1, R234 += 1, R10 += 1 };
  s0 -> s2 [0, 65535] { R388 += 1, R233 += 1, R234 += 1 };
  s0 -> s0 [0, 65535] { R387 += 1, R388 += 1 };
  s1 -> s4 [0, 65535] { R388 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R388 += 1, R234 += 1, R10 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R388 += 1, R234 += 1, R10 += 1 };
  s2 -> s2 [0, 65535] { R388 += 1, R233 += 1, R234 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R388 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_17 {
  init s0;
  s0 -> s1 [0, 8] { R390 += 1, R236 += 1 };
  s0 -> s0 [0, 65535] { R389 += 1, R390 += 1 };
  s0 -> s2 [0, 65535] { R390 += 1, R235 += 1, R236 += 1 };
  s0 -> s3 [9, 13] { R390 += 1, R236 += 1 };
  s0 -> s1 [14, 31] { R390 += 1, R236 += 1 };
  s0 -> s3 [32, 32] { R390 += 1, R236 += 1 };
  s0 -> s1 [33, 65535] { R390 += 1, R236 += 1 };
  s1 -> s1 [0, 65535] { R390 += 1, R236 += 1 };
  s1 -> s5 [0, 65535] { R390 += 1 };
  s1 -> s4 [0, 65535];
  s2 -> s1 [0, 8] { R390 += 1, R236 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R390 += 1, R235 += 1, R236 += 1 };
  s2 -> s3 [9, 13] { R390 += 1, R236 += 1 };
  s2 -> s1 [14, 31] { R390 += 1, R236 += 1 };
  s2 -> s3 [32, 32] { R390 += 1, R236 += 1 };
  s2 -> s1 [33, 65535] { R390 += 1, R236 += 1 };
  s3 -> s1 [0, 65535] { R390 += 1, R236 += 1 };
  s4 -> s4 [0, 65535];
  s5 -> s5 [0, 65535] { R390 += 1 };
  s5 -> s4 [0, 65535];
  accepting s4, s5, s2, s1, s0;
};
automaton value1_18 {
  init s0;
  s0 -> s1 [0, 65535] { R392 += 1, R237 += 1, R238 += 1 };
  s0 -> s2 [0, 65535] { R392 += 1, R238 += 1, R11 += 1 };
  s0 -> s0 [0, 65535] { R391 += 1, R392 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R392 += 1, R237 += 1, R238 += 1 };
  s1 -> s2 [0, 65535] { R392 += 1, R238 += 1, R11 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s4 [0, 65535] { R392 += 1 };
  s2 -> s2 [0, 65535] { R392 += 1, R238 += 1, R11 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R392 += 1 };
  accepting s3, s4, s2, s1, s0;
};
automaton value1_19 {
  init s0;
  s0 -> s1 [0, 65] { R394 += 1, R328 += 1 };
  s0 -> s0 [0, 65535] { R393 += 1, R394 += 1 };
  s0 -> s2 [0, 65535] { R394 += 1, R327 += 1, R328 += 1 };
  s0 -> s1 [67, 65535] { R394 += 1, R328 += 1 };
  s1 -> s1 [0, 65] { R394 += 1, R328 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [0, 65535] { R394 += 1 };
  s1 -> s1 [67, 65535] { R394 += 1, R328 += 1 };
  s2 -> s1 [0, 65] { R394 += 1, R328 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R394 += 1, R327 += 1, R328 += 1 };
  s2 -> s1 [67, 65535] { R394 += 1, R328 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_20 {
  init s0;
  s0 -> s1 [0, 65535] { R396 += 1, R329 += 1, R330 += 1 };
  s0 -> s2 [0, 65535] { R396 += 1, R330 += 1, R213 += 1 };
  s0 -> s0 [0, 65535] { R395 += 1, R396 += 1 };
  s1 -> s1 [0, 65535] { R396 += 1, R329 += 1, R330 += 1 };
  s1 -> s4 [0, 65535];
  s1 -> s2 [0, 65535] { R396 += 1, R330 += 1, R213 += 1 };
  s2 -> s3 [0, 65535] { R396 += 1 };
  s2 -> s4 [0, 65535];
  s2 -> s2 [0, 65535] { R396 += 1, R330 += 1, R213 += 1 };
  s3 -> s3 [0, 65535] { R396 += 1 };
  s3 -> s4 [0, 65535];
  s4 -> s4 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_21 {
  init s0;
  s0 -> s1 [0, 66] { R398 += 1, R332 += 1 };
  s0 -> s0 [0, 65535] { R397 += 1, R398 += 1 };
  s0 -> s2 [0, 65535] { R398 += 1, R331 += 1, R332 += 1 };
  s0 -> s1 [73, 65535] { R398 += 1, R332 += 1 };
  s1 -> s1 [0, 66] { R398 += 1, R332 += 1 };
  s1 -> s1 [0, 65535] { R398 += 1 };
  s1 -> s3 [0, 65535];
  s1 -> s1 [73, 65535] { R398 += 1, R332 += 1 };
  s2 -> s1 [0, 66] { R398 += 1, R332 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R398 += 1, R331 += 1, R332 += 1 };
  s2 -> s1 [73, 65535] { R398 += 1, R332 += 1 };
  s3 -> s3 [0, 65535];
  accepting s0, s1, s2, s3;
};
automaton value1_22 {
  init s0;
  s0 -> s0 [0, 65535] { R399 += 1, R400 += 1 };
  s0 -> s1 [0, 65535] { R400 += 1, R358 += 1, R214 += 1 };
  s0 -> s2 [0, 65535] { R400 += 1, R357 += 1, R358 += 1 };
  s1 -> s4 [0, 65535] { R400 += 1 };
  s1 -> s1 [0, 65535] { R400 += 1, R358 += 1, R214 += 1 };
  s1 -> s3 [0, 65535];
  s2 -> s1 [0, 65535] { R400 += 1, R358 += 1, R214 += 1 };
  s2 -> s3 [0, 65535];
  s2 -> s2 [0, 65535] { R400 += 1, R357 += 1, R358 += 1 };
  s3 -> s3 [0, 65535];
  s4 -> s4 [0, 65535] { R400 += 1 };
  s4 -> s3 [0, 65535];
  accepting s3, s4, s2, s1, s0;
};
automaton value1_23 {
  init s0;
  s0 -> s1 [0, 65] { R402 += 1, R360 += 1 };
  s0 -> s0 [0, 65535] { R401 += 1, R402 += 1 };
  s0 -> s2 [0, 65535] { R402 += 1, R359 += 1, R360 += 1 };
  s0 -> s3 [66, 66] { R402 += 1, R360 += 1 };
  s0 -> s4 [66, 66] { R402 += 1, R360 += 1 };
  s0 -> s5 [73, 73] { R402 += 1, R360 += 1 };
  s0 -> s1 [74, 65535] { R402 += 1, R360 += 1 };
  s1 -> s1 [0, 65] { R402 += 1, R360 += 1 };
  s1 -> s3 [66, 66] { R402 += 1, R360 += 1 };
  s1 -> s4 [66, 66] { R402 += 1, R360 += 1 };
  s1 -> s5 [73, 73] { R402 += 1, R360 += 1 };
  s1 -> s1 [74, 65535] { R402 += 1, R360 += 1 };
  s2 -> s1 [0, 65] { R402 += 1, R360 += 1 };
  s2 -> s2 [0, 65535] { R402 += 1, R359 += 1, R360 += 1 };
  s2 -> s3 [66, 66] { R402 += 1, R360 += 1 };
  s2 -> s4 [66, 66] { R402 += 1, R360 += 1 };
  s2 -> s5 [73, 73] { R402 += 1, R360 += 1 };
  s2 -> s1 [74, 65535] { R402 += 1, R360 += 1 };
  s4 -> s4 [0, 66] { R402 += 1, R360 += 1 };
  s4 -> s8 [73, 73] { R402 += 1, R360 += 1 };
  s4 -> s4 [74, 65535] { R402 += 1, R360 += 1 };
  s5 -> s5 [0, 65] { R402 += 1, R360 += 1 };
  s5 -> s6 [0, 65535];
  s5 -> s5 [0, 65535] { R402 += 1 };
  s5 -> s7 [66, 66] { R402 += 1, R360 += 1 };
  s5 -> s8 [66, 66] { R402 += 1, R360 += 1 };
  s5 -> s5 [73, 65535] { R402 += 1, R360 += 1 };
  s6 -> s6 [0, 65535];
  s7 -> s6 [0, 65535];
  s7 -> s7 [0, 65535] { R402 += 1 };
  s8 -> s8 [0, 66] { R402 += 1, R360 += 1 };
  s8 -> s6 [0, 65535];
  s8 -> s8 [0, 65535] { R402 += 1 };
  s8 -> s8 [73, 65535] { R402 += 1, R360 += 1 };
  accepting s5, s6, s7, s8;
};
};
constraint R2 = R332 && R3 = R344 && R4 = R402 && R5 - R356 = 1 && R19 = 0 && R20 - R401 = -1 && R231 - R332 = -1 && R232 = R332 && R233 - R332 = -1 && R234 = R332 && R235 = 0 && R236 = 1 && R237 = 0 && R238 = 1 && R239 = 0 && R240 = 1 && R241 = 0 && R242 = 1 && R243 = R356 && R244 - R356 = 1 && R245 = R356 && R246 - R356 = 1 && R247 = 0 && R248 = 1 && R249 = 0 && R250 = 1 && R327 = 0 && R328 = R332 && R329 = 0 && R330 = R332 && R331 = 0 && R333 = 1 && R334 = R344 && R335 = 1 && R336 = R344 && R337 = 1 && R338 = R344 && R339 = 1 && R340 = R344 && R341 = 1 && R342 = R344 && R343 = 1 && R345 = 0 && R346 = R356 && R347 = 0 && R348 = R356 && R349 = 0 && R350 = R356 && R351 = 0 && R352 = R356 && R353 = 0 && R354 = R356 && R355 = 0 && R359 = 0 && R360 = 0 && R361 = 0 && R362 - R401 = -1 && R363 = 0 && R364 - R401 = -1 && R365 = 0 && R366 - R401 = -1 && R367 = 0 && R368 - R401 = -1 && R369 = 0 && R370 - R401 = -1 && R371 = 0 && R372 - R401 = -1 && R373 = 0 && R374 - R401 = -1 && R375 = 0 && R376 - R401 = -1 && R377 = 0 && R378 - R401 = -1 && R379 = R401 && R380 = R402 && R381 = R401 && R382 = R402 && R383 = R401 && R384 = R402 && R385 = R401 && R386 = R402 && R387 = R401 && R388 = R402 && R389 = R401 && R390 = R402 && R391 = R401 && R392 = R402 && R393 = R401 && R394 = R402 && R395 = R401 && R396 = R402 && R397 = R401 && R398 = R402 && R399 = R401 && R400 = R402 && R0 != 0 && R1 != 0 && R15 < 1 && R212 < 1 && 0 < R332 && 0 < R344 && -1 < R356 && R401 - R402 < 1 && 0 < R401 && (R6 != 0 || ((R0 != R216 || R215 - R216 = -1 || R216 < 0) && (R0 = R216 || R0 < 1))) && (R6 != 0 || ((R0 != R218 || R217 - R218 = -1 || R218 < 0) && (R0 = R218 || R0 < 1))) && (R8 != 0 || ((R1 != R224 || R223 - R224 = -1 || R224 < 0) && (R1 = R224 || R1 < 1))) && (R8 != 0 || ((R1 != R226 || R225 - R226 = -1 || R226 < 0) && (R1 = R226 || R1 < 1))) && (R219 != 0 || ((R7 != 0 || ((R0 != R220 || R220 = 1 || R220 < 0) && (R0 = R220 || R220 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R220 || R220 = 1 || R220 < 0) && (R220 != 1 || -1 < R0) && (R0 = R220 || R220 = 1))))) && (R221 != 0 || ((R7 != 0 || ((R0 != R222 || R222 = 1 || R222 < 0) && (R0 = R222 || R222 = 1 || R0 < 1))) && (R7 = 0 || ((R0 != R222 || R222 = 1 || R222 < 0) && (R222 != 1 || -1 < R0) && (R0 = R222 || R222 = 1))))) && (R227 != 0 || ((R9 != 0 || ((R1 != R228 || R228 = 1 || R228 < 0) && (R1 = R228 || R228 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R228 || R228 = 1 || R228 < 0) && (R228 != 1 || -1 < R1) && (R1 = R228 || R228 = 1))))) && (R229 != 0 || ((R9 != 0 || ((R1 != R230 || R230 = 1 || R230 < 0) && (R1 = R230 || R230 = 1 || R1 < 1))) && (R9 = 0 || ((R1 != R230 || R230 = 1 || R230 < 0) && (R230 != 1 || -1 < R1) && (R1 = R230 || R230 = 1))))) && (R6 = 0 || (R0 = R216 && R215 - R216 = -1)) && (R6 = 0 || (R0 = R218 && R217 - R218 = -1)) && (R8 = 0 || (R1 = R224 && R223 - R224 = -1)) && (R8 = 0 || (R1 = R226 && R225 - R226 = -1)) && (R214 = 0 || (R357 = 0 && R358 = 0)) && (R219 = 0 || (R7 = 0 && R0 < 0)) && (R221 = 0 || (R7 = 0 && R0 < 0)) && (R227 = 0 || (R9 = 0 && R1 < 0)) && (R229 = 0 || (R9 = 0 && R1 < 0));
// End of Parikh automata intersection problem
